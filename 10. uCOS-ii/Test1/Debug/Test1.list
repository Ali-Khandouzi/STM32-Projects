
Test1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005540  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000244  080056c8  080056c8  000066c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800590c  0800590c  0000700c  2**0
                  CONTENTS
  4 .ARM          00000008  0800590c  0800590c  0000690c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005914  08005914  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005914  08005914  00006914  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005918  08005918  00006918  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800591c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000028d8  2000000c  08005928  0000700c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200028e4  08005928  000078e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000102f5  00000000  00000000  0000703c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002dcf  00000000  00000000  00017331  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e00  00000000  00000000  0001a100  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a98  00000000  00000000  0001af00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028577  00000000  00000000  0001b998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013b19  00000000  00000000  00043f0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eb41d  00000000  00000000  00057a28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00142e45  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000362c  00000000  00000000  00142e88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008e  00000000  00000000  001464b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080056b0 	.word	0x080056b0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080056b0 	.word	0x080056b0

080001c8 <OS_CPU_FP_Reg_Push>:

#if (defined(__VFP_FP__) && !defined(__SOFTFP__))

.thumb_func
OS_CPU_FP_Reg_Push:
    MRS     R1, PSP                                             @ PSP is process stack pointer
 80001c8:	f3ef 8109 	mrs	r1, PSP
    CBZ     R1, OS_CPU_FP_nosave                                @ Skip FP register save the first time
 80001cc:	b121      	cbz	r1, 80001d8 <OS_CPU_FP_nosave>

    VSTMDB  R0!, {S16-S31}
 80001ce:	ed20 8a10 	vstmdb	r0!, {s16-s31}
    LDR     R1, =OSTCBCur
 80001d2:	4951      	ldr	r1, [pc, #324]	@ (8000318 <OS_CPU_PendSVHandler+0x7a>)
    LDR     R2, [R1]
 80001d4:	680a      	ldr	r2, [r1, #0]
    STR     R0, [R2]
 80001d6:	6010      	str	r0, [r2, #0]

080001d8 <OS_CPU_FP_nosave>:
OS_CPU_FP_nosave:
    BX      LR
 80001d8:	4770      	bx	lr

080001da <OS_CPU_FP_Reg_Pop>:

#if (defined(__VFP_FP__) && !defined(__SOFTFP__))

.thumb_func
OS_CPU_FP_Reg_Pop:
    VLDMIA  R0!, {S16-S31}
 80001da:	ecb0 8a10 	vldmia	r0!, {s16-s31}
    LDR     R1, =OSTCBHighRdy
 80001de:	494f      	ldr	r1, [pc, #316]	@ (800031c <OS_CPU_PendSVHandler+0x7e>)
    LDR     R2, [R1]
 80001e0:	680a      	ldr	r2, [r1, #0]
    STR     R0, [R2]
 80001e2:	6010      	str	r0, [r2, #0]
    BX      LR
 80001e4:	4770      	bx	lr

080001e6 <OS_CPU_SR_Save>:
@                      CPSIE i
@********************************************************************************************************

.thumb_func
OS_CPU_SR_Save:
    CPSID   I                                   @ Cortex-M7 errata notice. See Note #2
 80001e6:	b672      	cpsid	i
    PUSH   {R1}
 80001e8:	b402      	push	{r1}
    MRS     R1, BASEPRI
 80001ea:	f3ef 8111 	mrs	r1, BASEPRI
    MSR     BASEPRI, R0
 80001ee:	f380 8811 	msr	BASEPRI, r0
    DSB
 80001f2:	f3bf 8f4f 	dsb	sy
    ISB
 80001f6:	f3bf 8f6f 	isb	sy
    MOV     R0, R1
 80001fa:	4608      	mov	r0, r1
    POP    {R1}
 80001fc:	bc02      	pop	{r1}
    CPSIE   I
 80001fe:	b662      	cpsie	i
    BX      LR
 8000200:	4770      	bx	lr

08000202 <OS_CPU_SR_Restore>:

.thumb_func
OS_CPU_SR_Restore:
    CPSID   I                                   @ Cortex-M7 errata notice. See Note #2
 8000202:	b672      	cpsid	i
    MSR     BASEPRI, R0
 8000204:	f380 8811 	msr	BASEPRI, r0
    DSB
 8000208:	f3bf 8f4f 	dsb	sy
    ISB
 800020c:	f3bf 8f6f 	isb	sy
    CPSIE   I
 8000210:	b662      	cpsie	i
    BX      LR
 8000212:	4770      	bx	lr

08000214 <OSStartHighRdy>:
@              i) Enable interrupts (tasks will run with interrupts enabled).
@********************************************************************************************************

.thumb_func
OSStartHighRdy:
    CPSID   I                                                   @ Prevent interruption during context switch
 8000214:	b672      	cpsid	i
    MOVW    R0, #:lower16:NVIC_SYSPRI14                         @ Set the PendSV exception priority
 8000216:	f64e 5022 	movw	r0, #60706	@ 0xed22
    MOVT    R0, #:upper16:NVIC_SYSPRI14
 800021a:	f2ce 0000 	movt	r0, #57344	@ 0xe000

    MOVW    R1, #:lower16:NVIC_PENDSV_PRI
 800021e:	f240 01ff 	movw	r1, #255	@ 0xff
    MOVT    R1, #:upper16:NVIC_PENDSV_PRI
 8000222:	f2c0 0100 	movt	r1, #0
    STRB    R1, [R0]
 8000226:	7001      	strb	r1, [r0, #0]

    MOVS    R0, #0                                              @ Set the PSP to 0 for initial context switch call
 8000228:	2000      	movs	r0, #0
    MSR     PSP, R0
 800022a:	f380 8809 	msr	PSP, r0

    MOVW    R0, #:lower16:OS_CPU_ExceptStkBase                  @ Initialize the MSP to the OS_CPU_ExceptStkBase
 800022e:	f241 40b4 	movw	r0, #5300	@ 0x14b4
    MOVT    R0, #:upper16:OS_CPU_ExceptStkBase
 8000232:	f2c2 0000 	movt	r0, #8192	@ 0x2000
    LDR     R1, [R0]
 8000236:	6801      	ldr	r1, [r0, #0]
    MSR     MSP, R1
 8000238:	f381 8808 	msr	MSP, r1

    BL      OSTaskSwHook                                        @ Call OSTaskSwHook() for FPU Push & Pop
 800023c:	f003 fa62 	bl	8003704 <OSTaskSwHook>

    LDR     R0, =OSRunning                                      @ OSRunning = TRUE
 8000240:	4837      	ldr	r0, [pc, #220]	@ (8000320 <OS_CPU_PendSVHandler+0x82>)
    MOVS    R1, #1
 8000242:	2101      	movs	r1, #1
    STRB    R1, [R0]
 8000244:	7001      	strb	r1, [r0, #0]

    MOVW    R0, #:lower16:OSPrioCur                             @ OSPrioCur   = OSPrioHighRdy;
 8000246:	f641 001e 	movw	r0, #6174	@ 0x181e
    MOVT    R0, #:upper16:OSPrioCur
 800024a:	f2c2 0000 	movt	r0, #8192	@ 0x2000
    MOVW    R1, #:lower16:OSPrioHighRdy
 800024e:	f641 011f 	movw	r1, #6175	@ 0x181f
    MOVT    R1, #:upper16:OSPrioHighRdy
 8000252:	f2c2 0100 	movt	r1, #8192	@ 0x2000
    LDRB    R2, [R1]
 8000256:	780a      	ldrb	r2, [r1, #0]
    STRB    R2, [R0]
 8000258:	7002      	strb	r2, [r0, #0]

    MOVW    R0, #:lower16:OSTCBCur                              @ OSTCBCur  = OSTCBHighRdy;
 800025a:	f641 2034 	movw	r0, #6708	@ 0x1a34
    MOVT    R0, #:upper16:OSTCBCur
 800025e:	f2c2 0000 	movt	r0, #8192	@ 0x2000
    MOVW    R1, #:lower16:OSTCBHighRdy
 8000262:	f641 213c 	movw	r1, #6716	@ 0x1a3c
    MOVT    R1, #:upper16:OSTCBHighRdy
 8000266:	f2c2 0100 	movt	r1, #8192	@ 0x2000
    LDR     R2, [R1]
 800026a:	680a      	ldr	r2, [r1, #0]
    STR     R2, [R0]
 800026c:	6002      	str	r2, [r0, #0]

    LDR     R0, [R2]                                            @ R0 is new process SP; SP = OSTCBHighRdy->OSTCBStkPtr;
 800026e:	6810      	ldr	r0, [r2, #0]
    MSR     PSP, R0                                             @ Load PSP with new process SP
 8000270:	f380 8809 	msr	PSP, r0

    MRS     R0, CONTROL
 8000274:	f3ef 8014 	mrs	r0, CONTROL
    ORR     R0, R0, #2
 8000278:	f040 0002 	orr.w	r0, r0, #2
    MSR     CONTROL, R0
 800027c:	f380 8814 	msr	CONTROL, r0
    ISB                                                         @ Sync instruction stream
 8000280:	f3bf 8f6f 	isb	sy

    LDMFD    SP!, {R4-R11, LR}                                  @ Restore r4-11, lr from new process stack
 8000284:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    LDMFD    SP!, {R0-R3}                                       @ Restore r0, r3
 8000288:	bc0f      	pop	{r0, r1, r2, r3}
    LDMFD    SP!, {R12, LR}                                     @ Load R12 and LR
 800028a:	e8bd 5000 	ldmia.w	sp!, {ip, lr}
    LDMFD    SP!, {R1, R2}                                      @ Load PC and discard xPSR
 800028e:	bc06      	pop	{r1, r2}
    CPSIE    I
 8000290:	b662      	cpsie	i
    BX       R1
 8000292:	4708      	bx	r1

08000294 <OSCtxSw>:
@********************************************************************************************************

.thumb_func
OSCtxSw:
OSIntCtxSw:
    LDR     R0, =NVIC_INT_CTRL                                  @ Trigger the PendSV exception (causes context switch)
 8000294:	4823      	ldr	r0, [pc, #140]	@ (8000324 <OS_CPU_PendSVHandler+0x86>)
    LDR     R1, =NVIC_PENDSVSET
 8000296:	f04f 5180 	mov.w	r1, #268435456	@ 0x10000000
    STR     R1, [R0]
 800029a:	6001      	str	r1, [r0, #0]
    BX      LR
 800029c:	4770      	bx	lr

0800029e <OS_CPU_PendSVHandler>:
@                  CPSIE i
@********************************************************************************************************

.thumb_func
OS_CPU_PendSVHandler:
    CPSID   I                                                   @ Cortex-M7 errata notice. See Note #5
 800029e:	b672      	cpsid	i
    MOVW    R2, #:lower16:OS_KA_BASEPRI_Boundary                @ Set BASEPRI priority level required for exception preemption
 80002a0:	f241 42bc 	movw	r2, #5308	@ 0x14bc
    MOVT    R2, #:upper16:OS_KA_BASEPRI_Boundary
 80002a4:	f2c2 0200 	movt	r2, #8192	@ 0x2000
    LDR     R1, [R2]
 80002a8:	6811      	ldr	r1, [r2, #0]
    MSR     BASEPRI, R1
 80002aa:	f381 8811 	msr	BASEPRI, r1
    DSB
 80002ae:	f3bf 8f4f 	dsb	sy
    ISB
 80002b2:	f3bf 8f6f 	isb	sy
    CPSIE   I
 80002b6:	b662      	cpsie	i

    MRS     R0, PSP                                             @ PSP is process stack pointer
 80002b8:	f3ef 8009 	mrs	r0, PSP
    STMFD   R0!, {R4-R11, R14}                                  @ Save remaining regs r4-11, R14 on process stack
 80002bc:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    MOVW    R5, #:lower16:OSTCBCur                              @ OSTCBCur->OSTCBStkPtr = SP;
 80002c0:	f641 2534 	movw	r5, #6708	@ 0x1a34
    MOVT    R5, #:upper16:OSTCBCur
 80002c4:	f2c2 0500 	movt	r5, #8192	@ 0x2000
    LDR     R1, [R5]
 80002c8:	6829      	ldr	r1, [r5, #0]
    STR     R0, [R1]                                            @ R0 is SP of process being switched out
 80002ca:	6008      	str	r0, [r1, #0]

                                                                @ At this point, entire context of process has been saved
    MOV     R4, LR                                              @ Save LR exc_return value
 80002cc:	4674      	mov	r4, lr
    BL      OSTaskSwHook                                        @ Call OSTaskSwHook() for FPU Push & Pop
 80002ce:	f003 fa19 	bl	8003704 <OSTaskSwHook>

    MOVW    R0, #:lower16:OSPrioCur                             @ OSPrioCur   = OSPrioHighRdy;
 80002d2:	f641 001e 	movw	r0, #6174	@ 0x181e
    MOVT    R0, #:upper16:OSPrioCur
 80002d6:	f2c2 0000 	movt	r0, #8192	@ 0x2000
    MOVW    R1, #:lower16:OSPrioHighRdy
 80002da:	f641 011f 	movw	r1, #6175	@ 0x181f
    MOVT    R1, #:upper16:OSPrioHighRdy
 80002de:	f2c2 0100 	movt	r1, #8192	@ 0x2000
    LDRB    R2, [R1]
 80002e2:	780a      	ldrb	r2, [r1, #0]
    STRB    R2, [R0]
 80002e4:	7002      	strb	r2, [r0, #0]

    MOVW    R1, #:lower16:OSTCBHighRdy                          @ OSTCBCur  = OSTCBHighRdy;
 80002e6:	f641 213c 	movw	r1, #6716	@ 0x1a3c
    MOVT    R1, #:upper16:OSTCBHighRdy
 80002ea:	f2c2 0100 	movt	r1, #8192	@ 0x2000
    LDR     R2, [R1]
 80002ee:	680a      	ldr	r2, [r1, #0]
    STR     R2, [R5]
 80002f0:	602a      	str	r2, [r5, #0]

    ORR     LR,  R4, #0x04                                      @ Ensure exception return uses process stack
 80002f2:	f044 0e04 	orr.w	lr, r4, #4
    LDR     R0,  [R2]                                           @ R0 is new process SP; SP = OSTCBHighRdy->OSTCBStkPtr;
 80002f6:	6810      	ldr	r0, [r2, #0]
    LDMFD   R0!, {R4-R11, R14}                                  @ Restore r4-11, R14 from new process stack
 80002f8:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    MSR     PSP, R0                                             @ Load PSP with new process SP
 80002fc:	f380 8809 	msr	PSP, r0

    MOV     R2, #0                                              @ Restore BASEPRI priority level to 0
 8000300:	f04f 0200 	mov.w	r2, #0
    CPSID   I
 8000304:	b672      	cpsid	i
    MSR     BASEPRI, R2
 8000306:	f382 8811 	msr	BASEPRI, r2
    DSB
 800030a:	f3bf 8f4f 	dsb	sy
    ISB
 800030e:	f3bf 8f6f 	isb	sy
    CPSIE   I
 8000312:	b662      	cpsie	i
    BX      LR                                                  @ Exception return will restore remaining context
 8000314:	4770      	bx	lr
 8000316:	0000      	.short	0x0000
    LDR     R1, =OSTCBCur
 8000318:	20001a34 	.word	0x20001a34
    LDR     R1, =OSTCBHighRdy
 800031c:	20001a3c 	.word	0x20001a3c
    LDR     R0, =OSRunning                                      @ OSRunning = TRUE
 8000320:	2000182c 	.word	0x2000182c
    LDR     R0, =NVIC_INT_CTRL                                  @ Trigger the PendSV exception (causes context switch)
 8000324:	e000ed04 	.word	0xe000ed04

08000328 <__aeabi_uldivmod>:
 8000328:	b953      	cbnz	r3, 8000340 <__aeabi_uldivmod+0x18>
 800032a:	b94a      	cbnz	r2, 8000340 <__aeabi_uldivmod+0x18>
 800032c:	2900      	cmp	r1, #0
 800032e:	bf08      	it	eq
 8000330:	2800      	cmpeq	r0, #0
 8000332:	bf1c      	itt	ne
 8000334:	f04f 31ff 	movne.w	r1, #4294967295
 8000338:	f04f 30ff 	movne.w	r0, #4294967295
 800033c:	f000 b96a 	b.w	8000614 <__aeabi_idiv0>
 8000340:	f1ad 0c08 	sub.w	ip, sp, #8
 8000344:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000348:	f000 f806 	bl	8000358 <__udivmoddi4>
 800034c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000350:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000354:	b004      	add	sp, #16
 8000356:	4770      	bx	lr

08000358 <__udivmoddi4>:
 8000358:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800035c:	9d08      	ldr	r5, [sp, #32]
 800035e:	460c      	mov	r4, r1
 8000360:	2b00      	cmp	r3, #0
 8000362:	d14e      	bne.n	8000402 <__udivmoddi4+0xaa>
 8000364:	4694      	mov	ip, r2
 8000366:	458c      	cmp	ip, r1
 8000368:	4686      	mov	lr, r0
 800036a:	fab2 f282 	clz	r2, r2
 800036e:	d962      	bls.n	8000436 <__udivmoddi4+0xde>
 8000370:	b14a      	cbz	r2, 8000386 <__udivmoddi4+0x2e>
 8000372:	f1c2 0320 	rsb	r3, r2, #32
 8000376:	4091      	lsls	r1, r2
 8000378:	fa20 f303 	lsr.w	r3, r0, r3
 800037c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000380:	4319      	orrs	r1, r3
 8000382:	fa00 fe02 	lsl.w	lr, r0, r2
 8000386:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800038a:	fa1f f68c 	uxth.w	r6, ip
 800038e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000392:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000396:	fb07 1114 	mls	r1, r7, r4, r1
 800039a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800039e:	fb04 f106 	mul.w	r1, r4, r6
 80003a2:	4299      	cmp	r1, r3
 80003a4:	d90a      	bls.n	80003bc <__udivmoddi4+0x64>
 80003a6:	eb1c 0303 	adds.w	r3, ip, r3
 80003aa:	f104 30ff 	add.w	r0, r4, #4294967295
 80003ae:	f080 8112 	bcs.w	80005d6 <__udivmoddi4+0x27e>
 80003b2:	4299      	cmp	r1, r3
 80003b4:	f240 810f 	bls.w	80005d6 <__udivmoddi4+0x27e>
 80003b8:	3c02      	subs	r4, #2
 80003ba:	4463      	add	r3, ip
 80003bc:	1a59      	subs	r1, r3, r1
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb1 f0f7 	udiv	r0, r1, r7
 80003c6:	fb07 1110 	mls	r1, r7, r0, r1
 80003ca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ce:	fb00 f606 	mul.w	r6, r0, r6
 80003d2:	429e      	cmp	r6, r3
 80003d4:	d90a      	bls.n	80003ec <__udivmoddi4+0x94>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 31ff 	add.w	r1, r0, #4294967295
 80003de:	f080 80fc 	bcs.w	80005da <__udivmoddi4+0x282>
 80003e2:	429e      	cmp	r6, r3
 80003e4:	f240 80f9 	bls.w	80005da <__udivmoddi4+0x282>
 80003e8:	4463      	add	r3, ip
 80003ea:	3802      	subs	r0, #2
 80003ec:	1b9b      	subs	r3, r3, r6
 80003ee:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003f2:	2100      	movs	r1, #0
 80003f4:	b11d      	cbz	r5, 80003fe <__udivmoddi4+0xa6>
 80003f6:	40d3      	lsrs	r3, r2
 80003f8:	2200      	movs	r2, #0
 80003fa:	e9c5 3200 	strd	r3, r2, [r5]
 80003fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000402:	428b      	cmp	r3, r1
 8000404:	d905      	bls.n	8000412 <__udivmoddi4+0xba>
 8000406:	b10d      	cbz	r5, 800040c <__udivmoddi4+0xb4>
 8000408:	e9c5 0100 	strd	r0, r1, [r5]
 800040c:	2100      	movs	r1, #0
 800040e:	4608      	mov	r0, r1
 8000410:	e7f5      	b.n	80003fe <__udivmoddi4+0xa6>
 8000412:	fab3 f183 	clz	r1, r3
 8000416:	2900      	cmp	r1, #0
 8000418:	d146      	bne.n	80004a8 <__udivmoddi4+0x150>
 800041a:	42a3      	cmp	r3, r4
 800041c:	d302      	bcc.n	8000424 <__udivmoddi4+0xcc>
 800041e:	4290      	cmp	r0, r2
 8000420:	f0c0 80f0 	bcc.w	8000604 <__udivmoddi4+0x2ac>
 8000424:	1a86      	subs	r6, r0, r2
 8000426:	eb64 0303 	sbc.w	r3, r4, r3
 800042a:	2001      	movs	r0, #1
 800042c:	2d00      	cmp	r5, #0
 800042e:	d0e6      	beq.n	80003fe <__udivmoddi4+0xa6>
 8000430:	e9c5 6300 	strd	r6, r3, [r5]
 8000434:	e7e3      	b.n	80003fe <__udivmoddi4+0xa6>
 8000436:	2a00      	cmp	r2, #0
 8000438:	f040 8090 	bne.w	800055c <__udivmoddi4+0x204>
 800043c:	eba1 040c 	sub.w	r4, r1, ip
 8000440:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000444:	fa1f f78c 	uxth.w	r7, ip
 8000448:	2101      	movs	r1, #1
 800044a:	fbb4 f6f8 	udiv	r6, r4, r8
 800044e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000452:	fb08 4416 	mls	r4, r8, r6, r4
 8000456:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800045a:	fb07 f006 	mul.w	r0, r7, r6
 800045e:	4298      	cmp	r0, r3
 8000460:	d908      	bls.n	8000474 <__udivmoddi4+0x11c>
 8000462:	eb1c 0303 	adds.w	r3, ip, r3
 8000466:	f106 34ff 	add.w	r4, r6, #4294967295
 800046a:	d202      	bcs.n	8000472 <__udivmoddi4+0x11a>
 800046c:	4298      	cmp	r0, r3
 800046e:	f200 80cd 	bhi.w	800060c <__udivmoddi4+0x2b4>
 8000472:	4626      	mov	r6, r4
 8000474:	1a1c      	subs	r4, r3, r0
 8000476:	fa1f f38e 	uxth.w	r3, lr
 800047a:	fbb4 f0f8 	udiv	r0, r4, r8
 800047e:	fb08 4410 	mls	r4, r8, r0, r4
 8000482:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000486:	fb00 f707 	mul.w	r7, r0, r7
 800048a:	429f      	cmp	r7, r3
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x148>
 800048e:	eb1c 0303 	adds.w	r3, ip, r3
 8000492:	f100 34ff 	add.w	r4, r0, #4294967295
 8000496:	d202      	bcs.n	800049e <__udivmoddi4+0x146>
 8000498:	429f      	cmp	r7, r3
 800049a:	f200 80b0 	bhi.w	80005fe <__udivmoddi4+0x2a6>
 800049e:	4620      	mov	r0, r4
 80004a0:	1bdb      	subs	r3, r3, r7
 80004a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80004a6:	e7a5      	b.n	80003f4 <__udivmoddi4+0x9c>
 80004a8:	f1c1 0620 	rsb	r6, r1, #32
 80004ac:	408b      	lsls	r3, r1
 80004ae:	fa22 f706 	lsr.w	r7, r2, r6
 80004b2:	431f      	orrs	r7, r3
 80004b4:	fa20 fc06 	lsr.w	ip, r0, r6
 80004b8:	fa04 f301 	lsl.w	r3, r4, r1
 80004bc:	ea43 030c 	orr.w	r3, r3, ip
 80004c0:	40f4      	lsrs	r4, r6
 80004c2:	fa00 f801 	lsl.w	r8, r0, r1
 80004c6:	0c38      	lsrs	r0, r7, #16
 80004c8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80004cc:	fbb4 fef0 	udiv	lr, r4, r0
 80004d0:	fa1f fc87 	uxth.w	ip, r7
 80004d4:	fb00 441e 	mls	r4, r0, lr, r4
 80004d8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004dc:	fb0e f90c 	mul.w	r9, lr, ip
 80004e0:	45a1      	cmp	r9, r4
 80004e2:	fa02 f201 	lsl.w	r2, r2, r1
 80004e6:	d90a      	bls.n	80004fe <__udivmoddi4+0x1a6>
 80004e8:	193c      	adds	r4, r7, r4
 80004ea:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004ee:	f080 8084 	bcs.w	80005fa <__udivmoddi4+0x2a2>
 80004f2:	45a1      	cmp	r9, r4
 80004f4:	f240 8081 	bls.w	80005fa <__udivmoddi4+0x2a2>
 80004f8:	f1ae 0e02 	sub.w	lr, lr, #2
 80004fc:	443c      	add	r4, r7
 80004fe:	eba4 0409 	sub.w	r4, r4, r9
 8000502:	fa1f f983 	uxth.w	r9, r3
 8000506:	fbb4 f3f0 	udiv	r3, r4, r0
 800050a:	fb00 4413 	mls	r4, r0, r3, r4
 800050e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000512:	fb03 fc0c 	mul.w	ip, r3, ip
 8000516:	45a4      	cmp	ip, r4
 8000518:	d907      	bls.n	800052a <__udivmoddi4+0x1d2>
 800051a:	193c      	adds	r4, r7, r4
 800051c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000520:	d267      	bcs.n	80005f2 <__udivmoddi4+0x29a>
 8000522:	45a4      	cmp	ip, r4
 8000524:	d965      	bls.n	80005f2 <__udivmoddi4+0x29a>
 8000526:	3b02      	subs	r3, #2
 8000528:	443c      	add	r4, r7
 800052a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800052e:	fba0 9302 	umull	r9, r3, r0, r2
 8000532:	eba4 040c 	sub.w	r4, r4, ip
 8000536:	429c      	cmp	r4, r3
 8000538:	46ce      	mov	lr, r9
 800053a:	469c      	mov	ip, r3
 800053c:	d351      	bcc.n	80005e2 <__udivmoddi4+0x28a>
 800053e:	d04e      	beq.n	80005de <__udivmoddi4+0x286>
 8000540:	b155      	cbz	r5, 8000558 <__udivmoddi4+0x200>
 8000542:	ebb8 030e 	subs.w	r3, r8, lr
 8000546:	eb64 040c 	sbc.w	r4, r4, ip
 800054a:	fa04 f606 	lsl.w	r6, r4, r6
 800054e:	40cb      	lsrs	r3, r1
 8000550:	431e      	orrs	r6, r3
 8000552:	40cc      	lsrs	r4, r1
 8000554:	e9c5 6400 	strd	r6, r4, [r5]
 8000558:	2100      	movs	r1, #0
 800055a:	e750      	b.n	80003fe <__udivmoddi4+0xa6>
 800055c:	f1c2 0320 	rsb	r3, r2, #32
 8000560:	fa20 f103 	lsr.w	r1, r0, r3
 8000564:	fa0c fc02 	lsl.w	ip, ip, r2
 8000568:	fa24 f303 	lsr.w	r3, r4, r3
 800056c:	4094      	lsls	r4, r2
 800056e:	430c      	orrs	r4, r1
 8000570:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000574:	fa00 fe02 	lsl.w	lr, r0, r2
 8000578:	fa1f f78c 	uxth.w	r7, ip
 800057c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000580:	fb08 3110 	mls	r1, r8, r0, r3
 8000584:	0c23      	lsrs	r3, r4, #16
 8000586:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800058a:	fb00 f107 	mul.w	r1, r0, r7
 800058e:	4299      	cmp	r1, r3
 8000590:	d908      	bls.n	80005a4 <__udivmoddi4+0x24c>
 8000592:	eb1c 0303 	adds.w	r3, ip, r3
 8000596:	f100 36ff 	add.w	r6, r0, #4294967295
 800059a:	d22c      	bcs.n	80005f6 <__udivmoddi4+0x29e>
 800059c:	4299      	cmp	r1, r3
 800059e:	d92a      	bls.n	80005f6 <__udivmoddi4+0x29e>
 80005a0:	3802      	subs	r0, #2
 80005a2:	4463      	add	r3, ip
 80005a4:	1a5b      	subs	r3, r3, r1
 80005a6:	b2a4      	uxth	r4, r4
 80005a8:	fbb3 f1f8 	udiv	r1, r3, r8
 80005ac:	fb08 3311 	mls	r3, r8, r1, r3
 80005b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80005b4:	fb01 f307 	mul.w	r3, r1, r7
 80005b8:	42a3      	cmp	r3, r4
 80005ba:	d908      	bls.n	80005ce <__udivmoddi4+0x276>
 80005bc:	eb1c 0404 	adds.w	r4, ip, r4
 80005c0:	f101 36ff 	add.w	r6, r1, #4294967295
 80005c4:	d213      	bcs.n	80005ee <__udivmoddi4+0x296>
 80005c6:	42a3      	cmp	r3, r4
 80005c8:	d911      	bls.n	80005ee <__udivmoddi4+0x296>
 80005ca:	3902      	subs	r1, #2
 80005cc:	4464      	add	r4, ip
 80005ce:	1ae4      	subs	r4, r4, r3
 80005d0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80005d4:	e739      	b.n	800044a <__udivmoddi4+0xf2>
 80005d6:	4604      	mov	r4, r0
 80005d8:	e6f0      	b.n	80003bc <__udivmoddi4+0x64>
 80005da:	4608      	mov	r0, r1
 80005dc:	e706      	b.n	80003ec <__udivmoddi4+0x94>
 80005de:	45c8      	cmp	r8, r9
 80005e0:	d2ae      	bcs.n	8000540 <__udivmoddi4+0x1e8>
 80005e2:	ebb9 0e02 	subs.w	lr, r9, r2
 80005e6:	eb63 0c07 	sbc.w	ip, r3, r7
 80005ea:	3801      	subs	r0, #1
 80005ec:	e7a8      	b.n	8000540 <__udivmoddi4+0x1e8>
 80005ee:	4631      	mov	r1, r6
 80005f0:	e7ed      	b.n	80005ce <__udivmoddi4+0x276>
 80005f2:	4603      	mov	r3, r0
 80005f4:	e799      	b.n	800052a <__udivmoddi4+0x1d2>
 80005f6:	4630      	mov	r0, r6
 80005f8:	e7d4      	b.n	80005a4 <__udivmoddi4+0x24c>
 80005fa:	46d6      	mov	lr, sl
 80005fc:	e77f      	b.n	80004fe <__udivmoddi4+0x1a6>
 80005fe:	4463      	add	r3, ip
 8000600:	3802      	subs	r0, #2
 8000602:	e74d      	b.n	80004a0 <__udivmoddi4+0x148>
 8000604:	4606      	mov	r6, r0
 8000606:	4623      	mov	r3, r4
 8000608:	4608      	mov	r0, r1
 800060a:	e70f      	b.n	800042c <__udivmoddi4+0xd4>
 800060c:	3e02      	subs	r6, #2
 800060e:	4463      	add	r3, ip
 8000610:	e730      	b.n	8000474 <__udivmoddi4+0x11c>
 8000612:	bf00      	nop

08000614 <__aeabi_idiv0>:
 8000614:	4770      	bx	lr
 8000616:	bf00      	nop

08000618 <main>:
#define TASK1_PRIORITY		1
#define TASK2_PRIORITY		2

/* main function                 ------------------------------------------------ */
int main(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b086      	sub	sp, #24
 800061c:	af06      	add	r7, sp, #24
  HAL_Init();
 800061e:	f000 fa31 	bl	8000a84 <HAL_Init>
  SystemClock_Config();
 8000622:	f000 f864 	bl	80006ee <SystemClock_Config>
  MX_GPIO_Init();
 8000626:	f000 f8e3 	bl	80007f0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800062a:	f000 f8b1 	bl	8000790 <MX_USART2_UART_Init>
  //RetargetInit(&huart2);

  OSInit();
 800062e:	f003 f9df 	bl	80039f0 <OSInit>

  OSTaskCreateExt(task1,
 8000632:	2300      	movs	r3, #0
 8000634:	9304      	str	r3, [sp, #16]
 8000636:	2300      	movs	r3, #0
 8000638:	9303      	str	r3, [sp, #12]
 800063a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800063e:	9302      	str	r3, [sp, #8]
 8000640:	4b10      	ldr	r3, [pc, #64]	@ (8000684 <main+0x6c>)
 8000642:	9301      	str	r3, [sp, #4]
 8000644:	2301      	movs	r3, #1
 8000646:	9300      	str	r3, [sp, #0]
 8000648:	2301      	movs	r3, #1
 800064a:	4a0f      	ldr	r2, [pc, #60]	@ (8000688 <main+0x70>)
 800064c:	2100      	movs	r1, #0
 800064e:	480f      	ldr	r0, [pc, #60]	@ (800068c <main+0x74>)
 8000650:	f004 fa82 	bl	8004b58 <OSTaskCreateExt>
				  task1_stk,
				  TASK_STACKSIZE,
				  NULL,
				  0);

  OSTaskCreateExt(task2,
 8000654:	2300      	movs	r3, #0
 8000656:	9304      	str	r3, [sp, #16]
 8000658:	2300      	movs	r3, #0
 800065a:	9303      	str	r3, [sp, #12]
 800065c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000660:	9302      	str	r3, [sp, #8]
 8000662:	4b0b      	ldr	r3, [pc, #44]	@ (8000690 <main+0x78>)
 8000664:	9301      	str	r3, [sp, #4]
 8000666:	2302      	movs	r3, #2
 8000668:	9300      	str	r3, [sp, #0]
 800066a:	2302      	movs	r3, #2
 800066c:	4a09      	ldr	r2, [pc, #36]	@ (8000694 <main+0x7c>)
 800066e:	2100      	movs	r1, #0
 8000670:	4809      	ldr	r0, [pc, #36]	@ (8000698 <main+0x80>)
 8000672:	f004 fa71 	bl	8004b58 <OSTaskCreateExt>
  				  task2_stk,
  				  TASK_STACKSIZE,
  				  NULL,
  				  0);

  OSStart();
 8000676:	f003 faa7 	bl	8003bc8 <OSStart>
  return 0;
 800067a:	2300      	movs	r3, #0
}
 800067c:	4618      	mov	r0, r3
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	200000b0 	.word	0x200000b0
 8000688:	200008b0 	.word	0x200008b0
 800068c:	0800069d 	.word	0x0800069d
 8000690:	200008b0 	.word	0x200008b0
 8000694:	200010b0 	.word	0x200010b0
 8000698:	080006cd 	.word	0x080006cd

0800069c <task1>:

/* Definition of Task1 ----------------------------------------------------------- */
void task1(void* pdata) {
 800069c:	b580      	push	{r7, lr}
 800069e:	b082      	sub	sp, #8
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
	while (1) {
		HAL_UART_Transmit(&huart2, (uint8_t *)"Hello from uCOS-ii\r\n", strlen("Hello from uCOS-ii\r\n"), HAL_MAX_DELAY);
 80006a4:	f04f 33ff 	mov.w	r3, #4294967295
 80006a8:	2214      	movs	r2, #20
 80006aa:	4906      	ldr	r1, [pc, #24]	@ (80006c4 <task1+0x28>)
 80006ac:	4806      	ldr	r0, [pc, #24]	@ (80006c8 <task1+0x2c>)
 80006ae:	f002 f881 	bl	80027b4 <HAL_UART_Transmit>
		OSTimeDlyHMSM(0, 0, 10, 0);
 80006b2:	2300      	movs	r3, #0
 80006b4:	220a      	movs	r2, #10
 80006b6:	2100      	movs	r1, #0
 80006b8:	2000      	movs	r0, #0
 80006ba:	f004 fd83 	bl	80051c4 <OSTimeDlyHMSM>
		HAL_UART_Transmit(&huart2, (uint8_t *)"Hello from uCOS-ii\r\n", strlen("Hello from uCOS-ii\r\n"), HAL_MAX_DELAY);
 80006be:	bf00      	nop
 80006c0:	e7f0      	b.n	80006a4 <task1+0x8>
 80006c2:	bf00      	nop
 80006c4:	080056c8 	.word	0x080056c8
 80006c8:	20000028 	.word	0x20000028

080006cc <task2>:
	}
}

/* Definition of Task2 ----------------------------------------------------------- */
void task2(void* pdata) {
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
	while (1) {
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80006d4:	2120      	movs	r1, #32
 80006d6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006da:	f000 fce3 	bl	80010a4 <HAL_GPIO_TogglePin>
		OSTimeDlyHMSM(0, 0, 10, 0);
 80006de:	2300      	movs	r3, #0
 80006e0:	220a      	movs	r2, #10
 80006e2:	2100      	movs	r1, #0
 80006e4:	2000      	movs	r0, #0
 80006e6:	f004 fd6d 	bl	80051c4 <OSTimeDlyHMSM>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80006ea:	bf00      	nop
 80006ec:	e7f2      	b.n	80006d4 <task2+0x8>

080006ee <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006ee:	b580      	push	{r7, lr}
 80006f0:	b096      	sub	sp, #88	@ 0x58
 80006f2:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006f4:	f107 0314 	add.w	r3, r7, #20
 80006f8:	2244      	movs	r2, #68	@ 0x44
 80006fa:	2100      	movs	r1, #0
 80006fc:	4618      	mov	r0, r3
 80006fe:	f004 ffab 	bl	8005658 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000702:	463b      	mov	r3, r7
 8000704:	2200      	movs	r2, #0
 8000706:	601a      	str	r2, [r3, #0]
 8000708:	605a      	str	r2, [r3, #4]
 800070a:	609a      	str	r2, [r3, #8]
 800070c:	60da      	str	r2, [r3, #12]
 800070e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000710:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000714:	f000 fcee 	bl	80010f4 <HAL_PWREx_ControlVoltageScaling>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800071e:	f000 f8cd 	bl	80008bc <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000722:	2302      	movs	r3, #2
 8000724:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000726:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800072a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800072c:	2310      	movs	r3, #16
 800072e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000730:	2302      	movs	r3, #2
 8000732:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000734:	2302      	movs	r3, #2
 8000736:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000738:	2301      	movs	r3, #1
 800073a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800073c:	230a      	movs	r3, #10
 800073e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000740:	2307      	movs	r3, #7
 8000742:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000744:	2302      	movs	r3, #2
 8000746:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000748:	2302      	movs	r3, #2
 800074a:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800074c:	f107 0314 	add.w	r3, r7, #20
 8000750:	4618      	mov	r0, r3
 8000752:	f000 fd25 	bl	80011a0 <HAL_RCC_OscConfig>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800075c:	f000 f8ae 	bl	80008bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000760:	230f      	movs	r3, #15
 8000762:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000764:	2303      	movs	r3, #3
 8000766:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000768:	2300      	movs	r3, #0
 800076a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800076c:	2300      	movs	r3, #0
 800076e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000770:	2300      	movs	r3, #0
 8000772:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000774:	463b      	mov	r3, r7
 8000776:	2104      	movs	r1, #4
 8000778:	4618      	mov	r0, r3
 800077a:	f001 f8ed 	bl	8001958 <HAL_RCC_ClockConfig>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000784:	f000 f89a 	bl	80008bc <Error_Handler>
  }
}
 8000788:	bf00      	nop
 800078a:	3758      	adds	r7, #88	@ 0x58
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}

08000790 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
  huart2.Instance = USART2;
 8000794:	4b14      	ldr	r3, [pc, #80]	@ (80007e8 <MX_USART2_UART_Init+0x58>)
 8000796:	4a15      	ldr	r2, [pc, #84]	@ (80007ec <MX_USART2_UART_Init+0x5c>)
 8000798:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800079a:	4b13      	ldr	r3, [pc, #76]	@ (80007e8 <MX_USART2_UART_Init+0x58>)
 800079c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007a2:	4b11      	ldr	r3, [pc, #68]	@ (80007e8 <MX_USART2_UART_Init+0x58>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007a8:	4b0f      	ldr	r3, [pc, #60]	@ (80007e8 <MX_USART2_UART_Init+0x58>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007ae:	4b0e      	ldr	r3, [pc, #56]	@ (80007e8 <MX_USART2_UART_Init+0x58>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007b4:	4b0c      	ldr	r3, [pc, #48]	@ (80007e8 <MX_USART2_UART_Init+0x58>)
 80007b6:	220c      	movs	r2, #12
 80007b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ba:	4b0b      	ldr	r3, [pc, #44]	@ (80007e8 <MX_USART2_UART_Init+0x58>)
 80007bc:	2200      	movs	r2, #0
 80007be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007c0:	4b09      	ldr	r3, [pc, #36]	@ (80007e8 <MX_USART2_UART_Init+0x58>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007c6:	4b08      	ldr	r3, [pc, #32]	@ (80007e8 <MX_USART2_UART_Init+0x58>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007cc:	4b06      	ldr	r3, [pc, #24]	@ (80007e8 <MX_USART2_UART_Init+0x58>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007d2:	4805      	ldr	r0, [pc, #20]	@ (80007e8 <MX_USART2_UART_Init+0x58>)
 80007d4:	f001 ffa0 	bl	8002718 <HAL_UART_Init>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80007de:	f000 f86d 	bl	80008bc <Error_Handler>
  }
}
 80007e2:	bf00      	nop
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	20000028 	.word	0x20000028
 80007ec:	40004400 	.word	0x40004400

080007f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b08a      	sub	sp, #40	@ 0x28
 80007f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f6:	f107 0314 	add.w	r3, r7, #20
 80007fa:	2200      	movs	r2, #0
 80007fc:	601a      	str	r2, [r3, #0]
 80007fe:	605a      	str	r2, [r3, #4]
 8000800:	609a      	str	r2, [r3, #8]
 8000802:	60da      	str	r2, [r3, #12]
 8000804:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000806:	4b2b      	ldr	r3, [pc, #172]	@ (80008b4 <MX_GPIO_Init+0xc4>)
 8000808:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800080a:	4a2a      	ldr	r2, [pc, #168]	@ (80008b4 <MX_GPIO_Init+0xc4>)
 800080c:	f043 0304 	orr.w	r3, r3, #4
 8000810:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000812:	4b28      	ldr	r3, [pc, #160]	@ (80008b4 <MX_GPIO_Init+0xc4>)
 8000814:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000816:	f003 0304 	and.w	r3, r3, #4
 800081a:	613b      	str	r3, [r7, #16]
 800081c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800081e:	4b25      	ldr	r3, [pc, #148]	@ (80008b4 <MX_GPIO_Init+0xc4>)
 8000820:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000822:	4a24      	ldr	r2, [pc, #144]	@ (80008b4 <MX_GPIO_Init+0xc4>)
 8000824:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000828:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800082a:	4b22      	ldr	r3, [pc, #136]	@ (80008b4 <MX_GPIO_Init+0xc4>)
 800082c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800082e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000832:	60fb      	str	r3, [r7, #12]
 8000834:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000836:	4b1f      	ldr	r3, [pc, #124]	@ (80008b4 <MX_GPIO_Init+0xc4>)
 8000838:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800083a:	4a1e      	ldr	r2, [pc, #120]	@ (80008b4 <MX_GPIO_Init+0xc4>)
 800083c:	f043 0301 	orr.w	r3, r3, #1
 8000840:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000842:	4b1c      	ldr	r3, [pc, #112]	@ (80008b4 <MX_GPIO_Init+0xc4>)
 8000844:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000846:	f003 0301 	and.w	r3, r3, #1
 800084a:	60bb      	str	r3, [r7, #8]
 800084c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800084e:	4b19      	ldr	r3, [pc, #100]	@ (80008b4 <MX_GPIO_Init+0xc4>)
 8000850:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000852:	4a18      	ldr	r2, [pc, #96]	@ (80008b4 <MX_GPIO_Init+0xc4>)
 8000854:	f043 0302 	orr.w	r3, r3, #2
 8000858:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800085a:	4b16      	ldr	r3, [pc, #88]	@ (80008b4 <MX_GPIO_Init+0xc4>)
 800085c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800085e:	f003 0302 	and.w	r3, r3, #2
 8000862:	607b      	str	r3, [r7, #4]
 8000864:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000866:	2200      	movs	r2, #0
 8000868:	2120      	movs	r1, #32
 800086a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800086e:	f000 fc01 	bl	8001074 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000872:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000876:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000878:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800087c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087e:	2300      	movs	r3, #0
 8000880:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000882:	f107 0314 	add.w	r3, r7, #20
 8000886:	4619      	mov	r1, r3
 8000888:	480b      	ldr	r0, [pc, #44]	@ (80008b8 <MX_GPIO_Init+0xc8>)
 800088a:	f000 fa49 	bl	8000d20 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800088e:	2320      	movs	r3, #32
 8000890:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000892:	2301      	movs	r3, #1
 8000894:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000896:	2300      	movs	r3, #0
 8000898:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800089a:	2300      	movs	r3, #0
 800089c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800089e:	f107 0314 	add.w	r3, r7, #20
 80008a2:	4619      	mov	r1, r3
 80008a4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008a8:	f000 fa3a 	bl	8000d20 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008ac:	bf00      	nop
 80008ae:	3728      	adds	r7, #40	@ 0x28
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	40021000 	.word	0x40021000
 80008b8:	48000800 	.word	0x48000800

080008bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008c0:	b672      	cpsid	i
}
 80008c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008c4:	bf00      	nop
 80008c6:	e7fd      	b.n	80008c4 <Error_Handler+0x8>

080008c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	b083      	sub	sp, #12
 80008cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ce:	4b0f      	ldr	r3, [pc, #60]	@ (800090c <HAL_MspInit+0x44>)
 80008d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008d2:	4a0e      	ldr	r2, [pc, #56]	@ (800090c <HAL_MspInit+0x44>)
 80008d4:	f043 0301 	orr.w	r3, r3, #1
 80008d8:	6613      	str	r3, [r2, #96]	@ 0x60
 80008da:	4b0c      	ldr	r3, [pc, #48]	@ (800090c <HAL_MspInit+0x44>)
 80008dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008de:	f003 0301 	and.w	r3, r3, #1
 80008e2:	607b      	str	r3, [r7, #4]
 80008e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008e6:	4b09      	ldr	r3, [pc, #36]	@ (800090c <HAL_MspInit+0x44>)
 80008e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008ea:	4a08      	ldr	r2, [pc, #32]	@ (800090c <HAL_MspInit+0x44>)
 80008ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008f0:	6593      	str	r3, [r2, #88]	@ 0x58
 80008f2:	4b06      	ldr	r3, [pc, #24]	@ (800090c <HAL_MspInit+0x44>)
 80008f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008fa:	603b      	str	r3, [r7, #0]
 80008fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008fe:	bf00      	nop
 8000900:	370c      	adds	r7, #12
 8000902:	46bd      	mov	sp, r7
 8000904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000908:	4770      	bx	lr
 800090a:	bf00      	nop
 800090c:	40021000 	.word	0x40021000

08000910 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b0ac      	sub	sp, #176	@ 0xb0
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000918:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800091c:	2200      	movs	r2, #0
 800091e:	601a      	str	r2, [r3, #0]
 8000920:	605a      	str	r2, [r3, #4]
 8000922:	609a      	str	r2, [r3, #8]
 8000924:	60da      	str	r2, [r3, #12]
 8000926:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000928:	f107 0314 	add.w	r3, r7, #20
 800092c:	2288      	movs	r2, #136	@ 0x88
 800092e:	2100      	movs	r1, #0
 8000930:	4618      	mov	r0, r3
 8000932:	f004 fe91 	bl	8005658 <memset>
  if(huart->Instance==USART2)
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	4a21      	ldr	r2, [pc, #132]	@ (80009c0 <HAL_UART_MspInit+0xb0>)
 800093c:	4293      	cmp	r3, r2
 800093e:	d13b      	bne.n	80009b8 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000940:	2302      	movs	r3, #2
 8000942:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000944:	2300      	movs	r3, #0
 8000946:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000948:	f107 0314 	add.w	r3, r7, #20
 800094c:	4618      	mov	r0, r3
 800094e:	f001 fa27 	bl	8001da0 <HAL_RCCEx_PeriphCLKConfig>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000958:	f7ff ffb0 	bl	80008bc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800095c:	4b19      	ldr	r3, [pc, #100]	@ (80009c4 <HAL_UART_MspInit+0xb4>)
 800095e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000960:	4a18      	ldr	r2, [pc, #96]	@ (80009c4 <HAL_UART_MspInit+0xb4>)
 8000962:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000966:	6593      	str	r3, [r2, #88]	@ 0x58
 8000968:	4b16      	ldr	r3, [pc, #88]	@ (80009c4 <HAL_UART_MspInit+0xb4>)
 800096a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800096c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000970:	613b      	str	r3, [r7, #16]
 8000972:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000974:	4b13      	ldr	r3, [pc, #76]	@ (80009c4 <HAL_UART_MspInit+0xb4>)
 8000976:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000978:	4a12      	ldr	r2, [pc, #72]	@ (80009c4 <HAL_UART_MspInit+0xb4>)
 800097a:	f043 0301 	orr.w	r3, r3, #1
 800097e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000980:	4b10      	ldr	r3, [pc, #64]	@ (80009c4 <HAL_UART_MspInit+0xb4>)
 8000982:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000984:	f003 0301 	and.w	r3, r3, #1
 8000988:	60fb      	str	r3, [r7, #12]
 800098a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800098c:	230c      	movs	r3, #12
 800098e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000992:	2302      	movs	r3, #2
 8000994:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000998:	2300      	movs	r3, #0
 800099a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800099e:	2303      	movs	r3, #3
 80009a0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009a4:	2307      	movs	r3, #7
 80009a6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009aa:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80009ae:	4619      	mov	r1, r3
 80009b0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009b4:	f000 f9b4 	bl	8000d20 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80009b8:	bf00      	nop
 80009ba:	37b0      	adds	r7, #176	@ 0xb0
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	40004400 	.word	0x40004400
 80009c4:	40021000 	.word	0x40021000

080009c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009cc:	bf00      	nop
 80009ce:	e7fd      	b.n	80009cc <NMI_Handler+0x4>

080009d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009d4:	bf00      	nop
 80009d6:	e7fd      	b.n	80009d4 <HardFault_Handler+0x4>

080009d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009dc:	bf00      	nop
 80009de:	e7fd      	b.n	80009dc <MemManage_Handler+0x4>

080009e0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009e4:	bf00      	nop
 80009e6:	e7fd      	b.n	80009e4 <BusFault_Handler+0x4>

080009e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009ec:	bf00      	nop
 80009ee:	e7fd      	b.n	80009ec <UsageFault_Handler+0x4>

080009f0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009f4:	bf00      	nop
 80009f6:	46bd      	mov	sp, r7
 80009f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fc:	4770      	bx	lr

080009fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009fe:	b480      	push	{r7}
 8000a00:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a02:	bf00      	nop
 8000a04:	46bd      	mov	sp, r7
 8000a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0a:	4770      	bx	lr

08000a0c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000a10:	4b06      	ldr	r3, [pc, #24]	@ (8000a2c <SystemInit+0x20>)
 8000a12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a16:	4a05      	ldr	r2, [pc, #20]	@ (8000a2c <SystemInit+0x20>)
 8000a18:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a1c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000a20:	bf00      	nop
 8000a22:	46bd      	mov	sp, r7
 8000a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop
 8000a2c:	e000ed00 	.word	0xe000ed00

08000a30 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000a30:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000a68 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a34:	f7ff ffea 	bl	8000a0c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a38:	480c      	ldr	r0, [pc, #48]	@ (8000a6c <LoopForever+0x6>)
  ldr r1, =_edata
 8000a3a:	490d      	ldr	r1, [pc, #52]	@ (8000a70 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a3c:	4a0d      	ldr	r2, [pc, #52]	@ (8000a74 <LoopForever+0xe>)
  movs r3, #0
 8000a3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a40:	e002      	b.n	8000a48 <LoopCopyDataInit>

08000a42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a46:	3304      	adds	r3, #4

08000a48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a4c:	d3f9      	bcc.n	8000a42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a4e:	4a0a      	ldr	r2, [pc, #40]	@ (8000a78 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a50:	4c0a      	ldr	r4, [pc, #40]	@ (8000a7c <LoopForever+0x16>)
  movs r3, #0
 8000a52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a54:	e001      	b.n	8000a5a <LoopFillZerobss>

08000a56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a58:	3204      	adds	r2, #4

08000a5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a5c:	d3fb      	bcc.n	8000a56 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a5e:	f004 fe03 	bl	8005668 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a62:	f7ff fdd9 	bl	8000618 <main>

08000a66 <LoopForever>:

LoopForever:
    b LoopForever
 8000a66:	e7fe      	b.n	8000a66 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000a68:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000a6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a70:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a74:	0800591c 	.word	0x0800591c
  ldr r2, =_sbss
 8000a78:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a7c:	200028e4 	.word	0x200028e4

08000a80 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a80:	e7fe      	b.n	8000a80 <ADC1_2_IRQHandler>
	...

08000a84 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a8e:	4b0c      	ldr	r3, [pc, #48]	@ (8000ac0 <HAL_Init+0x3c>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	4a0b      	ldr	r2, [pc, #44]	@ (8000ac0 <HAL_Init+0x3c>)
 8000a94:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000a98:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a9a:	2003      	movs	r0, #3
 8000a9c:	f000 f90c 	bl	8000cb8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000aa0:	2000      	movs	r0, #0
 8000aa2:	f000 f80f 	bl	8000ac4 <HAL_InitTick>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d002      	beq.n	8000ab2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000aac:	2301      	movs	r3, #1
 8000aae:	71fb      	strb	r3, [r7, #7]
 8000ab0:	e001      	b.n	8000ab6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ab2:	f7ff ff09 	bl	80008c8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ab6:	79fb      	ldrb	r3, [r7, #7]
}
 8000ab8:	4618      	mov	r0, r3
 8000aba:	3708      	adds	r7, #8
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	40022000 	.word	0x40022000

08000ac4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b084      	sub	sp, #16
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000acc:	2300      	movs	r3, #0
 8000ace:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000ad0:	4b17      	ldr	r3, [pc, #92]	@ (8000b30 <HAL_InitTick+0x6c>)
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d023      	beq.n	8000b20 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000ad8:	4b16      	ldr	r3, [pc, #88]	@ (8000b34 <HAL_InitTick+0x70>)
 8000ada:	681a      	ldr	r2, [r3, #0]
 8000adc:	4b14      	ldr	r3, [pc, #80]	@ (8000b30 <HAL_InitTick+0x6c>)
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ae6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000aea:	fbb2 f3f3 	udiv	r3, r2, r3
 8000aee:	4618      	mov	r0, r3
 8000af0:	f000 f909 	bl	8000d06 <HAL_SYSTICK_Config>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d10f      	bne.n	8000b1a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	2b0f      	cmp	r3, #15
 8000afe:	d809      	bhi.n	8000b14 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b00:	2200      	movs	r2, #0
 8000b02:	6879      	ldr	r1, [r7, #4]
 8000b04:	f04f 30ff 	mov.w	r0, #4294967295
 8000b08:	f000 f8e1 	bl	8000cce <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b0c:	4a0a      	ldr	r2, [pc, #40]	@ (8000b38 <HAL_InitTick+0x74>)
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	6013      	str	r3, [r2, #0]
 8000b12:	e007      	b.n	8000b24 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000b14:	2301      	movs	r3, #1
 8000b16:	73fb      	strb	r3, [r7, #15]
 8000b18:	e004      	b.n	8000b24 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	73fb      	strb	r3, [r7, #15]
 8000b1e:	e001      	b.n	8000b24 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b20:	2301      	movs	r3, #1
 8000b22:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000b24:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b26:	4618      	mov	r0, r3
 8000b28:	3710      	adds	r7, #16
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	20000008 	.word	0x20000008
 8000b34:	20000000 	.word	0x20000000
 8000b38:	20000004 	.word	0x20000004

08000b3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b40:	4b03      	ldr	r3, [pc, #12]	@ (8000b50 <HAL_GetTick+0x14>)
 8000b42:	681b      	ldr	r3, [r3, #0]
}
 8000b44:	4618      	mov	r0, r3
 8000b46:	46bd      	mov	sp, r7
 8000b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop
 8000b50:	200010b0 	.word	0x200010b0

08000b54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b54:	b480      	push	{r7}
 8000b56:	b085      	sub	sp, #20
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	f003 0307 	and.w	r3, r3, #7
 8000b62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b64:	4b0c      	ldr	r3, [pc, #48]	@ (8000b98 <__NVIC_SetPriorityGrouping+0x44>)
 8000b66:	68db      	ldr	r3, [r3, #12]
 8000b68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b6a:	68ba      	ldr	r2, [r7, #8]
 8000b6c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b70:	4013      	ands	r3, r2
 8000b72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b78:	68bb      	ldr	r3, [r7, #8]
 8000b7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b7c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b80:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b86:	4a04      	ldr	r2, [pc, #16]	@ (8000b98 <__NVIC_SetPriorityGrouping+0x44>)
 8000b88:	68bb      	ldr	r3, [r7, #8]
 8000b8a:	60d3      	str	r3, [r2, #12]
}
 8000b8c:	bf00      	nop
 8000b8e:	3714      	adds	r7, #20
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr
 8000b98:	e000ed00 	.word	0xe000ed00

08000b9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ba0:	4b04      	ldr	r3, [pc, #16]	@ (8000bb4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ba2:	68db      	ldr	r3, [r3, #12]
 8000ba4:	0a1b      	lsrs	r3, r3, #8
 8000ba6:	f003 0307 	and.w	r3, r3, #7
}
 8000baa:	4618      	mov	r0, r3
 8000bac:	46bd      	mov	sp, r7
 8000bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb2:	4770      	bx	lr
 8000bb4:	e000ed00 	.word	0xe000ed00

08000bb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b083      	sub	sp, #12
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	6039      	str	r1, [r7, #0]
 8000bc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	db0a      	blt.n	8000be2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	b2da      	uxtb	r2, r3
 8000bd0:	490c      	ldr	r1, [pc, #48]	@ (8000c04 <__NVIC_SetPriority+0x4c>)
 8000bd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bd6:	0112      	lsls	r2, r2, #4
 8000bd8:	b2d2      	uxtb	r2, r2
 8000bda:	440b      	add	r3, r1
 8000bdc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000be0:	e00a      	b.n	8000bf8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000be2:	683b      	ldr	r3, [r7, #0]
 8000be4:	b2da      	uxtb	r2, r3
 8000be6:	4908      	ldr	r1, [pc, #32]	@ (8000c08 <__NVIC_SetPriority+0x50>)
 8000be8:	79fb      	ldrb	r3, [r7, #7]
 8000bea:	f003 030f 	and.w	r3, r3, #15
 8000bee:	3b04      	subs	r3, #4
 8000bf0:	0112      	lsls	r2, r2, #4
 8000bf2:	b2d2      	uxtb	r2, r2
 8000bf4:	440b      	add	r3, r1
 8000bf6:	761a      	strb	r2, [r3, #24]
}
 8000bf8:	bf00      	nop
 8000bfa:	370c      	adds	r7, #12
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c02:	4770      	bx	lr
 8000c04:	e000e100 	.word	0xe000e100
 8000c08:	e000ed00 	.word	0xe000ed00

08000c0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b089      	sub	sp, #36	@ 0x24
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	60f8      	str	r0, [r7, #12]
 8000c14:	60b9      	str	r1, [r7, #8]
 8000c16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	f003 0307 	and.w	r3, r3, #7
 8000c1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c20:	69fb      	ldr	r3, [r7, #28]
 8000c22:	f1c3 0307 	rsb	r3, r3, #7
 8000c26:	2b04      	cmp	r3, #4
 8000c28:	bf28      	it	cs
 8000c2a:	2304      	movcs	r3, #4
 8000c2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c2e:	69fb      	ldr	r3, [r7, #28]
 8000c30:	3304      	adds	r3, #4
 8000c32:	2b06      	cmp	r3, #6
 8000c34:	d902      	bls.n	8000c3c <NVIC_EncodePriority+0x30>
 8000c36:	69fb      	ldr	r3, [r7, #28]
 8000c38:	3b03      	subs	r3, #3
 8000c3a:	e000      	b.n	8000c3e <NVIC_EncodePriority+0x32>
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c40:	f04f 32ff 	mov.w	r2, #4294967295
 8000c44:	69bb      	ldr	r3, [r7, #24]
 8000c46:	fa02 f303 	lsl.w	r3, r2, r3
 8000c4a:	43da      	mvns	r2, r3
 8000c4c:	68bb      	ldr	r3, [r7, #8]
 8000c4e:	401a      	ands	r2, r3
 8000c50:	697b      	ldr	r3, [r7, #20]
 8000c52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c54:	f04f 31ff 	mov.w	r1, #4294967295
 8000c58:	697b      	ldr	r3, [r7, #20]
 8000c5a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c5e:	43d9      	mvns	r1, r3
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c64:	4313      	orrs	r3, r2
         );
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	3724      	adds	r7, #36	@ 0x24
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr
	...

08000c74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	3b01      	subs	r3, #1
 8000c80:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000c84:	d301      	bcc.n	8000c8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c86:	2301      	movs	r3, #1
 8000c88:	e00f      	b.n	8000caa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c8a:	4a0a      	ldr	r2, [pc, #40]	@ (8000cb4 <SysTick_Config+0x40>)
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	3b01      	subs	r3, #1
 8000c90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c92:	210f      	movs	r1, #15
 8000c94:	f04f 30ff 	mov.w	r0, #4294967295
 8000c98:	f7ff ff8e 	bl	8000bb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c9c:	4b05      	ldr	r3, [pc, #20]	@ (8000cb4 <SysTick_Config+0x40>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ca2:	4b04      	ldr	r3, [pc, #16]	@ (8000cb4 <SysTick_Config+0x40>)
 8000ca4:	2207      	movs	r2, #7
 8000ca6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ca8:	2300      	movs	r3, #0
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	3708      	adds	r7, #8
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	e000e010 	.word	0xe000e010

08000cb8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cc0:	6878      	ldr	r0, [r7, #4]
 8000cc2:	f7ff ff47 	bl	8000b54 <__NVIC_SetPriorityGrouping>
}
 8000cc6:	bf00      	nop
 8000cc8:	3708      	adds	r7, #8
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}

08000cce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cce:	b580      	push	{r7, lr}
 8000cd0:	b086      	sub	sp, #24
 8000cd2:	af00      	add	r7, sp, #0
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	60b9      	str	r1, [r7, #8]
 8000cd8:	607a      	str	r2, [r7, #4]
 8000cda:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ce0:	f7ff ff5c 	bl	8000b9c <__NVIC_GetPriorityGrouping>
 8000ce4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ce6:	687a      	ldr	r2, [r7, #4]
 8000ce8:	68b9      	ldr	r1, [r7, #8]
 8000cea:	6978      	ldr	r0, [r7, #20]
 8000cec:	f7ff ff8e 	bl	8000c0c <NVIC_EncodePriority>
 8000cf0:	4602      	mov	r2, r0
 8000cf2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cf6:	4611      	mov	r1, r2
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f7ff ff5d 	bl	8000bb8 <__NVIC_SetPriority>
}
 8000cfe:	bf00      	nop
 8000d00:	3718      	adds	r7, #24
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}

08000d06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d06:	b580      	push	{r7, lr}
 8000d08:	b082      	sub	sp, #8
 8000d0a:	af00      	add	r7, sp, #0
 8000d0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d0e:	6878      	ldr	r0, [r7, #4]
 8000d10:	f7ff ffb0 	bl	8000c74 <SysTick_Config>
 8000d14:	4603      	mov	r3, r0
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	3708      	adds	r7, #8
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
	...

08000d20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b087      	sub	sp, #28
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
 8000d28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d2e:	e17f      	b.n	8001030 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	681a      	ldr	r2, [r3, #0]
 8000d34:	2101      	movs	r1, #1
 8000d36:	697b      	ldr	r3, [r7, #20]
 8000d38:	fa01 f303 	lsl.w	r3, r1, r3
 8000d3c:	4013      	ands	r3, r2
 8000d3e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	f000 8171 	beq.w	800102a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	685b      	ldr	r3, [r3, #4]
 8000d4c:	f003 0303 	and.w	r3, r3, #3
 8000d50:	2b01      	cmp	r3, #1
 8000d52:	d005      	beq.n	8000d60 <HAL_GPIO_Init+0x40>
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	685b      	ldr	r3, [r3, #4]
 8000d58:	f003 0303 	and.w	r3, r3, #3
 8000d5c:	2b02      	cmp	r3, #2
 8000d5e:	d130      	bne.n	8000dc2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	689b      	ldr	r3, [r3, #8]
 8000d64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000d66:	697b      	ldr	r3, [r7, #20]
 8000d68:	005b      	lsls	r3, r3, #1
 8000d6a:	2203      	movs	r2, #3
 8000d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d70:	43db      	mvns	r3, r3
 8000d72:	693a      	ldr	r2, [r7, #16]
 8000d74:	4013      	ands	r3, r2
 8000d76:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	68da      	ldr	r2, [r3, #12]
 8000d7c:	697b      	ldr	r3, [r7, #20]
 8000d7e:	005b      	lsls	r3, r3, #1
 8000d80:	fa02 f303 	lsl.w	r3, r2, r3
 8000d84:	693a      	ldr	r2, [r7, #16]
 8000d86:	4313      	orrs	r3, r2
 8000d88:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	693a      	ldr	r2, [r7, #16]
 8000d8e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	685b      	ldr	r3, [r3, #4]
 8000d94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000d96:	2201      	movs	r2, #1
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9e:	43db      	mvns	r3, r3
 8000da0:	693a      	ldr	r2, [r7, #16]
 8000da2:	4013      	ands	r3, r2
 8000da4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	685b      	ldr	r3, [r3, #4]
 8000daa:	091b      	lsrs	r3, r3, #4
 8000dac:	f003 0201 	and.w	r2, r3, #1
 8000db0:	697b      	ldr	r3, [r7, #20]
 8000db2:	fa02 f303 	lsl.w	r3, r2, r3
 8000db6:	693a      	ldr	r2, [r7, #16]
 8000db8:	4313      	orrs	r3, r2
 8000dba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	693a      	ldr	r2, [r7, #16]
 8000dc0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	685b      	ldr	r3, [r3, #4]
 8000dc6:	f003 0303 	and.w	r3, r3, #3
 8000dca:	2b03      	cmp	r3, #3
 8000dcc:	d118      	bne.n	8000e00 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000dd2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	697b      	ldr	r3, [r7, #20]
 8000dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ddc:	43db      	mvns	r3, r3
 8000dde:	693a      	ldr	r2, [r7, #16]
 8000de0:	4013      	ands	r3, r2
 8000de2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	685b      	ldr	r3, [r3, #4]
 8000de8:	08db      	lsrs	r3, r3, #3
 8000dea:	f003 0201 	and.w	r2, r3, #1
 8000dee:	697b      	ldr	r3, [r7, #20]
 8000df0:	fa02 f303 	lsl.w	r3, r2, r3
 8000df4:	693a      	ldr	r2, [r7, #16]
 8000df6:	4313      	orrs	r3, r2
 8000df8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	693a      	ldr	r2, [r7, #16]
 8000dfe:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	685b      	ldr	r3, [r3, #4]
 8000e04:	f003 0303 	and.w	r3, r3, #3
 8000e08:	2b03      	cmp	r3, #3
 8000e0a:	d017      	beq.n	8000e3c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	68db      	ldr	r3, [r3, #12]
 8000e10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000e12:	697b      	ldr	r3, [r7, #20]
 8000e14:	005b      	lsls	r3, r3, #1
 8000e16:	2203      	movs	r2, #3
 8000e18:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1c:	43db      	mvns	r3, r3
 8000e1e:	693a      	ldr	r2, [r7, #16]
 8000e20:	4013      	ands	r3, r2
 8000e22:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	689a      	ldr	r2, [r3, #8]
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	005b      	lsls	r3, r3, #1
 8000e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e30:	693a      	ldr	r2, [r7, #16]
 8000e32:	4313      	orrs	r3, r2
 8000e34:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	693a      	ldr	r2, [r7, #16]
 8000e3a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	f003 0303 	and.w	r3, r3, #3
 8000e44:	2b02      	cmp	r3, #2
 8000e46:	d123      	bne.n	8000e90 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	08da      	lsrs	r2, r3, #3
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	3208      	adds	r2, #8
 8000e50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e54:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e56:	697b      	ldr	r3, [r7, #20]
 8000e58:	f003 0307 	and.w	r3, r3, #7
 8000e5c:	009b      	lsls	r3, r3, #2
 8000e5e:	220f      	movs	r2, #15
 8000e60:	fa02 f303 	lsl.w	r3, r2, r3
 8000e64:	43db      	mvns	r3, r3
 8000e66:	693a      	ldr	r2, [r7, #16]
 8000e68:	4013      	ands	r3, r2
 8000e6a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	691a      	ldr	r2, [r3, #16]
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	f003 0307 	and.w	r3, r3, #7
 8000e76:	009b      	lsls	r3, r3, #2
 8000e78:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7c:	693a      	ldr	r2, [r7, #16]
 8000e7e:	4313      	orrs	r3, r2
 8000e80:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000e82:	697b      	ldr	r3, [r7, #20]
 8000e84:	08da      	lsrs	r2, r3, #3
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	3208      	adds	r2, #8
 8000e8a:	6939      	ldr	r1, [r7, #16]
 8000e8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000e96:	697b      	ldr	r3, [r7, #20]
 8000e98:	005b      	lsls	r3, r3, #1
 8000e9a:	2203      	movs	r2, #3
 8000e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea0:	43db      	mvns	r3, r3
 8000ea2:	693a      	ldr	r2, [r7, #16]
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	f003 0203 	and.w	r2, r3, #3
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	005b      	lsls	r3, r3, #1
 8000eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb8:	693a      	ldr	r2, [r7, #16]
 8000eba:	4313      	orrs	r3, r2
 8000ebc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	693a      	ldr	r2, [r7, #16]
 8000ec2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	f000 80ac 	beq.w	800102a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ed2:	4b5f      	ldr	r3, [pc, #380]	@ (8001050 <HAL_GPIO_Init+0x330>)
 8000ed4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ed6:	4a5e      	ldr	r2, [pc, #376]	@ (8001050 <HAL_GPIO_Init+0x330>)
 8000ed8:	f043 0301 	orr.w	r3, r3, #1
 8000edc:	6613      	str	r3, [r2, #96]	@ 0x60
 8000ede:	4b5c      	ldr	r3, [pc, #368]	@ (8001050 <HAL_GPIO_Init+0x330>)
 8000ee0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ee2:	f003 0301 	and.w	r3, r3, #1
 8000ee6:	60bb      	str	r3, [r7, #8]
 8000ee8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000eea:	4a5a      	ldr	r2, [pc, #360]	@ (8001054 <HAL_GPIO_Init+0x334>)
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	089b      	lsrs	r3, r3, #2
 8000ef0:	3302      	adds	r3, #2
 8000ef2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ef6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000ef8:	697b      	ldr	r3, [r7, #20]
 8000efa:	f003 0303 	and.w	r3, r3, #3
 8000efe:	009b      	lsls	r3, r3, #2
 8000f00:	220f      	movs	r2, #15
 8000f02:	fa02 f303 	lsl.w	r3, r2, r3
 8000f06:	43db      	mvns	r3, r3
 8000f08:	693a      	ldr	r2, [r7, #16]
 8000f0a:	4013      	ands	r3, r2
 8000f0c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000f14:	d025      	beq.n	8000f62 <HAL_GPIO_Init+0x242>
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	4a4f      	ldr	r2, [pc, #316]	@ (8001058 <HAL_GPIO_Init+0x338>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d01f      	beq.n	8000f5e <HAL_GPIO_Init+0x23e>
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	4a4e      	ldr	r2, [pc, #312]	@ (800105c <HAL_GPIO_Init+0x33c>)
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d019      	beq.n	8000f5a <HAL_GPIO_Init+0x23a>
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	4a4d      	ldr	r2, [pc, #308]	@ (8001060 <HAL_GPIO_Init+0x340>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d013      	beq.n	8000f56 <HAL_GPIO_Init+0x236>
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	4a4c      	ldr	r2, [pc, #304]	@ (8001064 <HAL_GPIO_Init+0x344>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d00d      	beq.n	8000f52 <HAL_GPIO_Init+0x232>
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	4a4b      	ldr	r2, [pc, #300]	@ (8001068 <HAL_GPIO_Init+0x348>)
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d007      	beq.n	8000f4e <HAL_GPIO_Init+0x22e>
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	4a4a      	ldr	r2, [pc, #296]	@ (800106c <HAL_GPIO_Init+0x34c>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d101      	bne.n	8000f4a <HAL_GPIO_Init+0x22a>
 8000f46:	2306      	movs	r3, #6
 8000f48:	e00c      	b.n	8000f64 <HAL_GPIO_Init+0x244>
 8000f4a:	2307      	movs	r3, #7
 8000f4c:	e00a      	b.n	8000f64 <HAL_GPIO_Init+0x244>
 8000f4e:	2305      	movs	r3, #5
 8000f50:	e008      	b.n	8000f64 <HAL_GPIO_Init+0x244>
 8000f52:	2304      	movs	r3, #4
 8000f54:	e006      	b.n	8000f64 <HAL_GPIO_Init+0x244>
 8000f56:	2303      	movs	r3, #3
 8000f58:	e004      	b.n	8000f64 <HAL_GPIO_Init+0x244>
 8000f5a:	2302      	movs	r3, #2
 8000f5c:	e002      	b.n	8000f64 <HAL_GPIO_Init+0x244>
 8000f5e:	2301      	movs	r3, #1
 8000f60:	e000      	b.n	8000f64 <HAL_GPIO_Init+0x244>
 8000f62:	2300      	movs	r3, #0
 8000f64:	697a      	ldr	r2, [r7, #20]
 8000f66:	f002 0203 	and.w	r2, r2, #3
 8000f6a:	0092      	lsls	r2, r2, #2
 8000f6c:	4093      	lsls	r3, r2
 8000f6e:	693a      	ldr	r2, [r7, #16]
 8000f70:	4313      	orrs	r3, r2
 8000f72:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000f74:	4937      	ldr	r1, [pc, #220]	@ (8001054 <HAL_GPIO_Init+0x334>)
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	089b      	lsrs	r3, r3, #2
 8000f7a:	3302      	adds	r3, #2
 8000f7c:	693a      	ldr	r2, [r7, #16]
 8000f7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000f82:	4b3b      	ldr	r3, [pc, #236]	@ (8001070 <HAL_GPIO_Init+0x350>)
 8000f84:	689b      	ldr	r3, [r3, #8]
 8000f86:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	43db      	mvns	r3, r3
 8000f8c:	693a      	ldr	r2, [r7, #16]
 8000f8e:	4013      	ands	r3, r2
 8000f90:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	685b      	ldr	r3, [r3, #4]
 8000f96:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d003      	beq.n	8000fa6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000f9e:	693a      	ldr	r2, [r7, #16]
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	4313      	orrs	r3, r2
 8000fa4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000fa6:	4a32      	ldr	r2, [pc, #200]	@ (8001070 <HAL_GPIO_Init+0x350>)
 8000fa8:	693b      	ldr	r3, [r7, #16]
 8000faa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000fac:	4b30      	ldr	r3, [pc, #192]	@ (8001070 <HAL_GPIO_Init+0x350>)
 8000fae:	68db      	ldr	r3, [r3, #12]
 8000fb0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	43db      	mvns	r3, r3
 8000fb6:	693a      	ldr	r2, [r7, #16]
 8000fb8:	4013      	ands	r3, r2
 8000fba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d003      	beq.n	8000fd0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000fc8:	693a      	ldr	r2, [r7, #16]
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000fd0:	4a27      	ldr	r2, [pc, #156]	@ (8001070 <HAL_GPIO_Init+0x350>)
 8000fd2:	693b      	ldr	r3, [r7, #16]
 8000fd4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000fd6:	4b26      	ldr	r3, [pc, #152]	@ (8001070 <HAL_GPIO_Init+0x350>)
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	43db      	mvns	r3, r3
 8000fe0:	693a      	ldr	r2, [r7, #16]
 8000fe2:	4013      	ands	r3, r2
 8000fe4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d003      	beq.n	8000ffa <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000ff2:	693a      	ldr	r2, [r7, #16]
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000ffa:	4a1d      	ldr	r2, [pc, #116]	@ (8001070 <HAL_GPIO_Init+0x350>)
 8000ffc:	693b      	ldr	r3, [r7, #16]
 8000ffe:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001000:	4b1b      	ldr	r3, [pc, #108]	@ (8001070 <HAL_GPIO_Init+0x350>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	43db      	mvns	r3, r3
 800100a:	693a      	ldr	r2, [r7, #16]
 800100c:	4013      	ands	r3, r2
 800100e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001018:	2b00      	cmp	r3, #0
 800101a:	d003      	beq.n	8001024 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800101c:	693a      	ldr	r2, [r7, #16]
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	4313      	orrs	r3, r2
 8001022:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001024:	4a12      	ldr	r2, [pc, #72]	@ (8001070 <HAL_GPIO_Init+0x350>)
 8001026:	693b      	ldr	r3, [r7, #16]
 8001028:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800102a:	697b      	ldr	r3, [r7, #20]
 800102c:	3301      	adds	r3, #1
 800102e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	681a      	ldr	r2, [r3, #0]
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	fa22 f303 	lsr.w	r3, r2, r3
 800103a:	2b00      	cmp	r3, #0
 800103c:	f47f ae78 	bne.w	8000d30 <HAL_GPIO_Init+0x10>
  }
}
 8001040:	bf00      	nop
 8001042:	bf00      	nop
 8001044:	371c      	adds	r7, #28
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop
 8001050:	40021000 	.word	0x40021000
 8001054:	40010000 	.word	0x40010000
 8001058:	48000400 	.word	0x48000400
 800105c:	48000800 	.word	0x48000800
 8001060:	48000c00 	.word	0x48000c00
 8001064:	48001000 	.word	0x48001000
 8001068:	48001400 	.word	0x48001400
 800106c:	48001800 	.word	0x48001800
 8001070:	40010400 	.word	0x40010400

08001074 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001074:	b480      	push	{r7}
 8001076:	b083      	sub	sp, #12
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
 800107c:	460b      	mov	r3, r1
 800107e:	807b      	strh	r3, [r7, #2]
 8001080:	4613      	mov	r3, r2
 8001082:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001084:	787b      	ldrb	r3, [r7, #1]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d003      	beq.n	8001092 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800108a:	887a      	ldrh	r2, [r7, #2]
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001090:	e002      	b.n	8001098 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001092:	887a      	ldrh	r2, [r7, #2]
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001098:	bf00      	nop
 800109a:	370c      	adds	r7, #12
 800109c:	46bd      	mov	sp, r7
 800109e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a2:	4770      	bx	lr

080010a4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b085      	sub	sp, #20
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
 80010ac:	460b      	mov	r3, r1
 80010ae:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	695b      	ldr	r3, [r3, #20]
 80010b4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80010b6:	887a      	ldrh	r2, [r7, #2]
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	4013      	ands	r3, r2
 80010bc:	041a      	lsls	r2, r3, #16
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	43d9      	mvns	r1, r3
 80010c2:	887b      	ldrh	r3, [r7, #2]
 80010c4:	400b      	ands	r3, r1
 80010c6:	431a      	orrs	r2, r3
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	619a      	str	r2, [r3, #24]
}
 80010cc:	bf00      	nop
 80010ce:	3714      	adds	r7, #20
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr

080010d8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80010dc:	4b04      	ldr	r3, [pc, #16]	@ (80010f0 <HAL_PWREx_GetVoltageRange+0x18>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80010e4:	4618      	mov	r0, r3
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop
 80010f0:	40007000 	.word	0x40007000

080010f4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b085      	sub	sp, #20
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001102:	d130      	bne.n	8001166 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001104:	4b23      	ldr	r3, [pc, #140]	@ (8001194 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800110c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001110:	d038      	beq.n	8001184 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001112:	4b20      	ldr	r3, [pc, #128]	@ (8001194 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800111a:	4a1e      	ldr	r2, [pc, #120]	@ (8001194 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800111c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001120:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001122:	4b1d      	ldr	r3, [pc, #116]	@ (8001198 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	2232      	movs	r2, #50	@ 0x32
 8001128:	fb02 f303 	mul.w	r3, r2, r3
 800112c:	4a1b      	ldr	r2, [pc, #108]	@ (800119c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800112e:	fba2 2303 	umull	r2, r3, r2, r3
 8001132:	0c9b      	lsrs	r3, r3, #18
 8001134:	3301      	adds	r3, #1
 8001136:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001138:	e002      	b.n	8001140 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	3b01      	subs	r3, #1
 800113e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001140:	4b14      	ldr	r3, [pc, #80]	@ (8001194 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001142:	695b      	ldr	r3, [r3, #20]
 8001144:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001148:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800114c:	d102      	bne.n	8001154 <HAL_PWREx_ControlVoltageScaling+0x60>
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d1f2      	bne.n	800113a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001154:	4b0f      	ldr	r3, [pc, #60]	@ (8001194 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001156:	695b      	ldr	r3, [r3, #20]
 8001158:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800115c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001160:	d110      	bne.n	8001184 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001162:	2303      	movs	r3, #3
 8001164:	e00f      	b.n	8001186 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001166:	4b0b      	ldr	r3, [pc, #44]	@ (8001194 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800116e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001172:	d007      	beq.n	8001184 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001174:	4b07      	ldr	r3, [pc, #28]	@ (8001194 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800117c:	4a05      	ldr	r2, [pc, #20]	@ (8001194 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800117e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001182:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001184:	2300      	movs	r3, #0
}
 8001186:	4618      	mov	r0, r3
 8001188:	3714      	adds	r7, #20
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	40007000 	.word	0x40007000
 8001198:	20000000 	.word	0x20000000
 800119c:	431bde83 	.word	0x431bde83

080011a0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b088      	sub	sp, #32
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d101      	bne.n	80011b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011ae:	2301      	movs	r3, #1
 80011b0:	e3ca      	b.n	8001948 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80011b2:	4b97      	ldr	r3, [pc, #604]	@ (8001410 <HAL_RCC_OscConfig+0x270>)
 80011b4:	689b      	ldr	r3, [r3, #8]
 80011b6:	f003 030c 	and.w	r3, r3, #12
 80011ba:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80011bc:	4b94      	ldr	r3, [pc, #592]	@ (8001410 <HAL_RCC_OscConfig+0x270>)
 80011be:	68db      	ldr	r3, [r3, #12]
 80011c0:	f003 0303 	and.w	r3, r3, #3
 80011c4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f003 0310 	and.w	r3, r3, #16
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	f000 80e4 	beq.w	800139c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80011d4:	69bb      	ldr	r3, [r7, #24]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d007      	beq.n	80011ea <HAL_RCC_OscConfig+0x4a>
 80011da:	69bb      	ldr	r3, [r7, #24]
 80011dc:	2b0c      	cmp	r3, #12
 80011de:	f040 808b 	bne.w	80012f8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	2b01      	cmp	r3, #1
 80011e6:	f040 8087 	bne.w	80012f8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80011ea:	4b89      	ldr	r3, [pc, #548]	@ (8001410 <HAL_RCC_OscConfig+0x270>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f003 0302 	and.w	r3, r3, #2
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d005      	beq.n	8001202 <HAL_RCC_OscConfig+0x62>
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	699b      	ldr	r3, [r3, #24]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d101      	bne.n	8001202 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80011fe:	2301      	movs	r3, #1
 8001200:	e3a2      	b.n	8001948 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6a1a      	ldr	r2, [r3, #32]
 8001206:	4b82      	ldr	r3, [pc, #520]	@ (8001410 <HAL_RCC_OscConfig+0x270>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f003 0308 	and.w	r3, r3, #8
 800120e:	2b00      	cmp	r3, #0
 8001210:	d004      	beq.n	800121c <HAL_RCC_OscConfig+0x7c>
 8001212:	4b7f      	ldr	r3, [pc, #508]	@ (8001410 <HAL_RCC_OscConfig+0x270>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800121a:	e005      	b.n	8001228 <HAL_RCC_OscConfig+0x88>
 800121c:	4b7c      	ldr	r3, [pc, #496]	@ (8001410 <HAL_RCC_OscConfig+0x270>)
 800121e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001222:	091b      	lsrs	r3, r3, #4
 8001224:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001228:	4293      	cmp	r3, r2
 800122a:	d223      	bcs.n	8001274 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	6a1b      	ldr	r3, [r3, #32]
 8001230:	4618      	mov	r0, r3
 8001232:	f000 fd55 	bl	8001ce0 <RCC_SetFlashLatencyFromMSIRange>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800123c:	2301      	movs	r3, #1
 800123e:	e383      	b.n	8001948 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001240:	4b73      	ldr	r3, [pc, #460]	@ (8001410 <HAL_RCC_OscConfig+0x270>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a72      	ldr	r2, [pc, #456]	@ (8001410 <HAL_RCC_OscConfig+0x270>)
 8001246:	f043 0308 	orr.w	r3, r3, #8
 800124a:	6013      	str	r3, [r2, #0]
 800124c:	4b70      	ldr	r3, [pc, #448]	@ (8001410 <HAL_RCC_OscConfig+0x270>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	6a1b      	ldr	r3, [r3, #32]
 8001258:	496d      	ldr	r1, [pc, #436]	@ (8001410 <HAL_RCC_OscConfig+0x270>)
 800125a:	4313      	orrs	r3, r2
 800125c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800125e:	4b6c      	ldr	r3, [pc, #432]	@ (8001410 <HAL_RCC_OscConfig+0x270>)
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	69db      	ldr	r3, [r3, #28]
 800126a:	021b      	lsls	r3, r3, #8
 800126c:	4968      	ldr	r1, [pc, #416]	@ (8001410 <HAL_RCC_OscConfig+0x270>)
 800126e:	4313      	orrs	r3, r2
 8001270:	604b      	str	r3, [r1, #4]
 8001272:	e025      	b.n	80012c0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001274:	4b66      	ldr	r3, [pc, #408]	@ (8001410 <HAL_RCC_OscConfig+0x270>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a65      	ldr	r2, [pc, #404]	@ (8001410 <HAL_RCC_OscConfig+0x270>)
 800127a:	f043 0308 	orr.w	r3, r3, #8
 800127e:	6013      	str	r3, [r2, #0]
 8001280:	4b63      	ldr	r3, [pc, #396]	@ (8001410 <HAL_RCC_OscConfig+0x270>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6a1b      	ldr	r3, [r3, #32]
 800128c:	4960      	ldr	r1, [pc, #384]	@ (8001410 <HAL_RCC_OscConfig+0x270>)
 800128e:	4313      	orrs	r3, r2
 8001290:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001292:	4b5f      	ldr	r3, [pc, #380]	@ (8001410 <HAL_RCC_OscConfig+0x270>)
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	69db      	ldr	r3, [r3, #28]
 800129e:	021b      	lsls	r3, r3, #8
 80012a0:	495b      	ldr	r1, [pc, #364]	@ (8001410 <HAL_RCC_OscConfig+0x270>)
 80012a2:	4313      	orrs	r3, r2
 80012a4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80012a6:	69bb      	ldr	r3, [r7, #24]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d109      	bne.n	80012c0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6a1b      	ldr	r3, [r3, #32]
 80012b0:	4618      	mov	r0, r3
 80012b2:	f000 fd15 	bl	8001ce0 <RCC_SetFlashLatencyFromMSIRange>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80012bc:	2301      	movs	r3, #1
 80012be:	e343      	b.n	8001948 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80012c0:	f000 fc4a 	bl	8001b58 <HAL_RCC_GetSysClockFreq>
 80012c4:	4602      	mov	r2, r0
 80012c6:	4b52      	ldr	r3, [pc, #328]	@ (8001410 <HAL_RCC_OscConfig+0x270>)
 80012c8:	689b      	ldr	r3, [r3, #8]
 80012ca:	091b      	lsrs	r3, r3, #4
 80012cc:	f003 030f 	and.w	r3, r3, #15
 80012d0:	4950      	ldr	r1, [pc, #320]	@ (8001414 <HAL_RCC_OscConfig+0x274>)
 80012d2:	5ccb      	ldrb	r3, [r1, r3]
 80012d4:	f003 031f 	and.w	r3, r3, #31
 80012d8:	fa22 f303 	lsr.w	r3, r2, r3
 80012dc:	4a4e      	ldr	r2, [pc, #312]	@ (8001418 <HAL_RCC_OscConfig+0x278>)
 80012de:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80012e0:	4b4e      	ldr	r3, [pc, #312]	@ (800141c <HAL_RCC_OscConfig+0x27c>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4618      	mov	r0, r3
 80012e6:	f7ff fbed 	bl	8000ac4 <HAL_InitTick>
 80012ea:	4603      	mov	r3, r0
 80012ec:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80012ee:	7bfb      	ldrb	r3, [r7, #15]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d052      	beq.n	800139a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80012f4:	7bfb      	ldrb	r3, [r7, #15]
 80012f6:	e327      	b.n	8001948 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	699b      	ldr	r3, [r3, #24]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d032      	beq.n	8001366 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001300:	4b43      	ldr	r3, [pc, #268]	@ (8001410 <HAL_RCC_OscConfig+0x270>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a42      	ldr	r2, [pc, #264]	@ (8001410 <HAL_RCC_OscConfig+0x270>)
 8001306:	f043 0301 	orr.w	r3, r3, #1
 800130a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800130c:	f7ff fc16 	bl	8000b3c <HAL_GetTick>
 8001310:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001312:	e008      	b.n	8001326 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001314:	f7ff fc12 	bl	8000b3c <HAL_GetTick>
 8001318:	4602      	mov	r2, r0
 800131a:	693b      	ldr	r3, [r7, #16]
 800131c:	1ad3      	subs	r3, r2, r3
 800131e:	2b02      	cmp	r3, #2
 8001320:	d901      	bls.n	8001326 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001322:	2303      	movs	r3, #3
 8001324:	e310      	b.n	8001948 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001326:	4b3a      	ldr	r3, [pc, #232]	@ (8001410 <HAL_RCC_OscConfig+0x270>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f003 0302 	and.w	r3, r3, #2
 800132e:	2b00      	cmp	r3, #0
 8001330:	d0f0      	beq.n	8001314 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001332:	4b37      	ldr	r3, [pc, #220]	@ (8001410 <HAL_RCC_OscConfig+0x270>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4a36      	ldr	r2, [pc, #216]	@ (8001410 <HAL_RCC_OscConfig+0x270>)
 8001338:	f043 0308 	orr.w	r3, r3, #8
 800133c:	6013      	str	r3, [r2, #0]
 800133e:	4b34      	ldr	r3, [pc, #208]	@ (8001410 <HAL_RCC_OscConfig+0x270>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6a1b      	ldr	r3, [r3, #32]
 800134a:	4931      	ldr	r1, [pc, #196]	@ (8001410 <HAL_RCC_OscConfig+0x270>)
 800134c:	4313      	orrs	r3, r2
 800134e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001350:	4b2f      	ldr	r3, [pc, #188]	@ (8001410 <HAL_RCC_OscConfig+0x270>)
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	69db      	ldr	r3, [r3, #28]
 800135c:	021b      	lsls	r3, r3, #8
 800135e:	492c      	ldr	r1, [pc, #176]	@ (8001410 <HAL_RCC_OscConfig+0x270>)
 8001360:	4313      	orrs	r3, r2
 8001362:	604b      	str	r3, [r1, #4]
 8001364:	e01a      	b.n	800139c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001366:	4b2a      	ldr	r3, [pc, #168]	@ (8001410 <HAL_RCC_OscConfig+0x270>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4a29      	ldr	r2, [pc, #164]	@ (8001410 <HAL_RCC_OscConfig+0x270>)
 800136c:	f023 0301 	bic.w	r3, r3, #1
 8001370:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001372:	f7ff fbe3 	bl	8000b3c <HAL_GetTick>
 8001376:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001378:	e008      	b.n	800138c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800137a:	f7ff fbdf 	bl	8000b3c <HAL_GetTick>
 800137e:	4602      	mov	r2, r0
 8001380:	693b      	ldr	r3, [r7, #16]
 8001382:	1ad3      	subs	r3, r2, r3
 8001384:	2b02      	cmp	r3, #2
 8001386:	d901      	bls.n	800138c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001388:	2303      	movs	r3, #3
 800138a:	e2dd      	b.n	8001948 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800138c:	4b20      	ldr	r3, [pc, #128]	@ (8001410 <HAL_RCC_OscConfig+0x270>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f003 0302 	and.w	r3, r3, #2
 8001394:	2b00      	cmp	r3, #0
 8001396:	d1f0      	bne.n	800137a <HAL_RCC_OscConfig+0x1da>
 8001398:	e000      	b.n	800139c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800139a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f003 0301 	and.w	r3, r3, #1
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d074      	beq.n	8001492 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80013a8:	69bb      	ldr	r3, [r7, #24]
 80013aa:	2b08      	cmp	r3, #8
 80013ac:	d005      	beq.n	80013ba <HAL_RCC_OscConfig+0x21a>
 80013ae:	69bb      	ldr	r3, [r7, #24]
 80013b0:	2b0c      	cmp	r3, #12
 80013b2:	d10e      	bne.n	80013d2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	2b03      	cmp	r3, #3
 80013b8:	d10b      	bne.n	80013d2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013ba:	4b15      	ldr	r3, [pc, #84]	@ (8001410 <HAL_RCC_OscConfig+0x270>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d064      	beq.n	8001490 <HAL_RCC_OscConfig+0x2f0>
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d160      	bne.n	8001490 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80013ce:	2301      	movs	r3, #1
 80013d0:	e2ba      	b.n	8001948 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80013da:	d106      	bne.n	80013ea <HAL_RCC_OscConfig+0x24a>
 80013dc:	4b0c      	ldr	r3, [pc, #48]	@ (8001410 <HAL_RCC_OscConfig+0x270>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4a0b      	ldr	r2, [pc, #44]	@ (8001410 <HAL_RCC_OscConfig+0x270>)
 80013e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013e6:	6013      	str	r3, [r2, #0]
 80013e8:	e026      	b.n	8001438 <HAL_RCC_OscConfig+0x298>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80013f2:	d115      	bne.n	8001420 <HAL_RCC_OscConfig+0x280>
 80013f4:	4b06      	ldr	r3, [pc, #24]	@ (8001410 <HAL_RCC_OscConfig+0x270>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a05      	ldr	r2, [pc, #20]	@ (8001410 <HAL_RCC_OscConfig+0x270>)
 80013fa:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80013fe:	6013      	str	r3, [r2, #0]
 8001400:	4b03      	ldr	r3, [pc, #12]	@ (8001410 <HAL_RCC_OscConfig+0x270>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a02      	ldr	r2, [pc, #8]	@ (8001410 <HAL_RCC_OscConfig+0x270>)
 8001406:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800140a:	6013      	str	r3, [r2, #0]
 800140c:	e014      	b.n	8001438 <HAL_RCC_OscConfig+0x298>
 800140e:	bf00      	nop
 8001410:	40021000 	.word	0x40021000
 8001414:	08005750 	.word	0x08005750
 8001418:	20000000 	.word	0x20000000
 800141c:	20000004 	.word	0x20000004
 8001420:	4ba0      	ldr	r3, [pc, #640]	@ (80016a4 <HAL_RCC_OscConfig+0x504>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a9f      	ldr	r2, [pc, #636]	@ (80016a4 <HAL_RCC_OscConfig+0x504>)
 8001426:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800142a:	6013      	str	r3, [r2, #0]
 800142c:	4b9d      	ldr	r3, [pc, #628]	@ (80016a4 <HAL_RCC_OscConfig+0x504>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4a9c      	ldr	r2, [pc, #624]	@ (80016a4 <HAL_RCC_OscConfig+0x504>)
 8001432:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001436:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d013      	beq.n	8001468 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001440:	f7ff fb7c 	bl	8000b3c <HAL_GetTick>
 8001444:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001446:	e008      	b.n	800145a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001448:	f7ff fb78 	bl	8000b3c <HAL_GetTick>
 800144c:	4602      	mov	r2, r0
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	1ad3      	subs	r3, r2, r3
 8001452:	2b64      	cmp	r3, #100	@ 0x64
 8001454:	d901      	bls.n	800145a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001456:	2303      	movs	r3, #3
 8001458:	e276      	b.n	8001948 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800145a:	4b92      	ldr	r3, [pc, #584]	@ (80016a4 <HAL_RCC_OscConfig+0x504>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001462:	2b00      	cmp	r3, #0
 8001464:	d0f0      	beq.n	8001448 <HAL_RCC_OscConfig+0x2a8>
 8001466:	e014      	b.n	8001492 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001468:	f7ff fb68 	bl	8000b3c <HAL_GetTick>
 800146c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800146e:	e008      	b.n	8001482 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001470:	f7ff fb64 	bl	8000b3c <HAL_GetTick>
 8001474:	4602      	mov	r2, r0
 8001476:	693b      	ldr	r3, [r7, #16]
 8001478:	1ad3      	subs	r3, r2, r3
 800147a:	2b64      	cmp	r3, #100	@ 0x64
 800147c:	d901      	bls.n	8001482 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800147e:	2303      	movs	r3, #3
 8001480:	e262      	b.n	8001948 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001482:	4b88      	ldr	r3, [pc, #544]	@ (80016a4 <HAL_RCC_OscConfig+0x504>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800148a:	2b00      	cmp	r3, #0
 800148c:	d1f0      	bne.n	8001470 <HAL_RCC_OscConfig+0x2d0>
 800148e:	e000      	b.n	8001492 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001490:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f003 0302 	and.w	r3, r3, #2
 800149a:	2b00      	cmp	r3, #0
 800149c:	d060      	beq.n	8001560 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800149e:	69bb      	ldr	r3, [r7, #24]
 80014a0:	2b04      	cmp	r3, #4
 80014a2:	d005      	beq.n	80014b0 <HAL_RCC_OscConfig+0x310>
 80014a4:	69bb      	ldr	r3, [r7, #24]
 80014a6:	2b0c      	cmp	r3, #12
 80014a8:	d119      	bne.n	80014de <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80014aa:	697b      	ldr	r3, [r7, #20]
 80014ac:	2b02      	cmp	r3, #2
 80014ae:	d116      	bne.n	80014de <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014b0:	4b7c      	ldr	r3, [pc, #496]	@ (80016a4 <HAL_RCC_OscConfig+0x504>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d005      	beq.n	80014c8 <HAL_RCC_OscConfig+0x328>
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	68db      	ldr	r3, [r3, #12]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d101      	bne.n	80014c8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80014c4:	2301      	movs	r3, #1
 80014c6:	e23f      	b.n	8001948 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014c8:	4b76      	ldr	r3, [pc, #472]	@ (80016a4 <HAL_RCC_OscConfig+0x504>)
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	691b      	ldr	r3, [r3, #16]
 80014d4:	061b      	lsls	r3, r3, #24
 80014d6:	4973      	ldr	r1, [pc, #460]	@ (80016a4 <HAL_RCC_OscConfig+0x504>)
 80014d8:	4313      	orrs	r3, r2
 80014da:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014dc:	e040      	b.n	8001560 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	68db      	ldr	r3, [r3, #12]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d023      	beq.n	800152e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014e6:	4b6f      	ldr	r3, [pc, #444]	@ (80016a4 <HAL_RCC_OscConfig+0x504>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4a6e      	ldr	r2, [pc, #440]	@ (80016a4 <HAL_RCC_OscConfig+0x504>)
 80014ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014f2:	f7ff fb23 	bl	8000b3c <HAL_GetTick>
 80014f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014f8:	e008      	b.n	800150c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014fa:	f7ff fb1f 	bl	8000b3c <HAL_GetTick>
 80014fe:	4602      	mov	r2, r0
 8001500:	693b      	ldr	r3, [r7, #16]
 8001502:	1ad3      	subs	r3, r2, r3
 8001504:	2b02      	cmp	r3, #2
 8001506:	d901      	bls.n	800150c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001508:	2303      	movs	r3, #3
 800150a:	e21d      	b.n	8001948 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800150c:	4b65      	ldr	r3, [pc, #404]	@ (80016a4 <HAL_RCC_OscConfig+0x504>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001514:	2b00      	cmp	r3, #0
 8001516:	d0f0      	beq.n	80014fa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001518:	4b62      	ldr	r3, [pc, #392]	@ (80016a4 <HAL_RCC_OscConfig+0x504>)
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	691b      	ldr	r3, [r3, #16]
 8001524:	061b      	lsls	r3, r3, #24
 8001526:	495f      	ldr	r1, [pc, #380]	@ (80016a4 <HAL_RCC_OscConfig+0x504>)
 8001528:	4313      	orrs	r3, r2
 800152a:	604b      	str	r3, [r1, #4]
 800152c:	e018      	b.n	8001560 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800152e:	4b5d      	ldr	r3, [pc, #372]	@ (80016a4 <HAL_RCC_OscConfig+0x504>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4a5c      	ldr	r2, [pc, #368]	@ (80016a4 <HAL_RCC_OscConfig+0x504>)
 8001534:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001538:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800153a:	f7ff faff 	bl	8000b3c <HAL_GetTick>
 800153e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001540:	e008      	b.n	8001554 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001542:	f7ff fafb 	bl	8000b3c <HAL_GetTick>
 8001546:	4602      	mov	r2, r0
 8001548:	693b      	ldr	r3, [r7, #16]
 800154a:	1ad3      	subs	r3, r2, r3
 800154c:	2b02      	cmp	r3, #2
 800154e:	d901      	bls.n	8001554 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001550:	2303      	movs	r3, #3
 8001552:	e1f9      	b.n	8001948 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001554:	4b53      	ldr	r3, [pc, #332]	@ (80016a4 <HAL_RCC_OscConfig+0x504>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800155c:	2b00      	cmp	r3, #0
 800155e:	d1f0      	bne.n	8001542 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f003 0308 	and.w	r3, r3, #8
 8001568:	2b00      	cmp	r3, #0
 800156a:	d03c      	beq.n	80015e6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	695b      	ldr	r3, [r3, #20]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d01c      	beq.n	80015ae <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001574:	4b4b      	ldr	r3, [pc, #300]	@ (80016a4 <HAL_RCC_OscConfig+0x504>)
 8001576:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800157a:	4a4a      	ldr	r2, [pc, #296]	@ (80016a4 <HAL_RCC_OscConfig+0x504>)
 800157c:	f043 0301 	orr.w	r3, r3, #1
 8001580:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001584:	f7ff fada 	bl	8000b3c <HAL_GetTick>
 8001588:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800158a:	e008      	b.n	800159e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800158c:	f7ff fad6 	bl	8000b3c <HAL_GetTick>
 8001590:	4602      	mov	r2, r0
 8001592:	693b      	ldr	r3, [r7, #16]
 8001594:	1ad3      	subs	r3, r2, r3
 8001596:	2b02      	cmp	r3, #2
 8001598:	d901      	bls.n	800159e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800159a:	2303      	movs	r3, #3
 800159c:	e1d4      	b.n	8001948 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800159e:	4b41      	ldr	r3, [pc, #260]	@ (80016a4 <HAL_RCC_OscConfig+0x504>)
 80015a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80015a4:	f003 0302 	and.w	r3, r3, #2
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d0ef      	beq.n	800158c <HAL_RCC_OscConfig+0x3ec>
 80015ac:	e01b      	b.n	80015e6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015ae:	4b3d      	ldr	r3, [pc, #244]	@ (80016a4 <HAL_RCC_OscConfig+0x504>)
 80015b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80015b4:	4a3b      	ldr	r2, [pc, #236]	@ (80016a4 <HAL_RCC_OscConfig+0x504>)
 80015b6:	f023 0301 	bic.w	r3, r3, #1
 80015ba:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015be:	f7ff fabd 	bl	8000b3c <HAL_GetTick>
 80015c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80015c4:	e008      	b.n	80015d8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015c6:	f7ff fab9 	bl	8000b3c <HAL_GetTick>
 80015ca:	4602      	mov	r2, r0
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	1ad3      	subs	r3, r2, r3
 80015d0:	2b02      	cmp	r3, #2
 80015d2:	d901      	bls.n	80015d8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80015d4:	2303      	movs	r3, #3
 80015d6:	e1b7      	b.n	8001948 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80015d8:	4b32      	ldr	r3, [pc, #200]	@ (80016a4 <HAL_RCC_OscConfig+0x504>)
 80015da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80015de:	f003 0302 	and.w	r3, r3, #2
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d1ef      	bne.n	80015c6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f003 0304 	and.w	r3, r3, #4
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	f000 80a6 	beq.w	8001740 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015f4:	2300      	movs	r3, #0
 80015f6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80015f8:	4b2a      	ldr	r3, [pc, #168]	@ (80016a4 <HAL_RCC_OscConfig+0x504>)
 80015fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001600:	2b00      	cmp	r3, #0
 8001602:	d10d      	bne.n	8001620 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001604:	4b27      	ldr	r3, [pc, #156]	@ (80016a4 <HAL_RCC_OscConfig+0x504>)
 8001606:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001608:	4a26      	ldr	r2, [pc, #152]	@ (80016a4 <HAL_RCC_OscConfig+0x504>)
 800160a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800160e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001610:	4b24      	ldr	r3, [pc, #144]	@ (80016a4 <HAL_RCC_OscConfig+0x504>)
 8001612:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001614:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001618:	60bb      	str	r3, [r7, #8]
 800161a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800161c:	2301      	movs	r3, #1
 800161e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001620:	4b21      	ldr	r3, [pc, #132]	@ (80016a8 <HAL_RCC_OscConfig+0x508>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001628:	2b00      	cmp	r3, #0
 800162a:	d118      	bne.n	800165e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800162c:	4b1e      	ldr	r3, [pc, #120]	@ (80016a8 <HAL_RCC_OscConfig+0x508>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a1d      	ldr	r2, [pc, #116]	@ (80016a8 <HAL_RCC_OscConfig+0x508>)
 8001632:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001636:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001638:	f7ff fa80 	bl	8000b3c <HAL_GetTick>
 800163c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800163e:	e008      	b.n	8001652 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001640:	f7ff fa7c 	bl	8000b3c <HAL_GetTick>
 8001644:	4602      	mov	r2, r0
 8001646:	693b      	ldr	r3, [r7, #16]
 8001648:	1ad3      	subs	r3, r2, r3
 800164a:	2b02      	cmp	r3, #2
 800164c:	d901      	bls.n	8001652 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800164e:	2303      	movs	r3, #3
 8001650:	e17a      	b.n	8001948 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001652:	4b15      	ldr	r3, [pc, #84]	@ (80016a8 <HAL_RCC_OscConfig+0x508>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800165a:	2b00      	cmp	r3, #0
 800165c:	d0f0      	beq.n	8001640 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	689b      	ldr	r3, [r3, #8]
 8001662:	2b01      	cmp	r3, #1
 8001664:	d108      	bne.n	8001678 <HAL_RCC_OscConfig+0x4d8>
 8001666:	4b0f      	ldr	r3, [pc, #60]	@ (80016a4 <HAL_RCC_OscConfig+0x504>)
 8001668:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800166c:	4a0d      	ldr	r2, [pc, #52]	@ (80016a4 <HAL_RCC_OscConfig+0x504>)
 800166e:	f043 0301 	orr.w	r3, r3, #1
 8001672:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001676:	e029      	b.n	80016cc <HAL_RCC_OscConfig+0x52c>
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	689b      	ldr	r3, [r3, #8]
 800167c:	2b05      	cmp	r3, #5
 800167e:	d115      	bne.n	80016ac <HAL_RCC_OscConfig+0x50c>
 8001680:	4b08      	ldr	r3, [pc, #32]	@ (80016a4 <HAL_RCC_OscConfig+0x504>)
 8001682:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001686:	4a07      	ldr	r2, [pc, #28]	@ (80016a4 <HAL_RCC_OscConfig+0x504>)
 8001688:	f043 0304 	orr.w	r3, r3, #4
 800168c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001690:	4b04      	ldr	r3, [pc, #16]	@ (80016a4 <HAL_RCC_OscConfig+0x504>)
 8001692:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001696:	4a03      	ldr	r2, [pc, #12]	@ (80016a4 <HAL_RCC_OscConfig+0x504>)
 8001698:	f043 0301 	orr.w	r3, r3, #1
 800169c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80016a0:	e014      	b.n	80016cc <HAL_RCC_OscConfig+0x52c>
 80016a2:	bf00      	nop
 80016a4:	40021000 	.word	0x40021000
 80016a8:	40007000 	.word	0x40007000
 80016ac:	4b9c      	ldr	r3, [pc, #624]	@ (8001920 <HAL_RCC_OscConfig+0x780>)
 80016ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016b2:	4a9b      	ldr	r2, [pc, #620]	@ (8001920 <HAL_RCC_OscConfig+0x780>)
 80016b4:	f023 0301 	bic.w	r3, r3, #1
 80016b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80016bc:	4b98      	ldr	r3, [pc, #608]	@ (8001920 <HAL_RCC_OscConfig+0x780>)
 80016be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016c2:	4a97      	ldr	r2, [pc, #604]	@ (8001920 <HAL_RCC_OscConfig+0x780>)
 80016c4:	f023 0304 	bic.w	r3, r3, #4
 80016c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	689b      	ldr	r3, [r3, #8]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d016      	beq.n	8001702 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016d4:	f7ff fa32 	bl	8000b3c <HAL_GetTick>
 80016d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80016da:	e00a      	b.n	80016f2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016dc:	f7ff fa2e 	bl	8000b3c <HAL_GetTick>
 80016e0:	4602      	mov	r2, r0
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	1ad3      	subs	r3, r2, r3
 80016e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d901      	bls.n	80016f2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80016ee:	2303      	movs	r3, #3
 80016f0:	e12a      	b.n	8001948 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80016f2:	4b8b      	ldr	r3, [pc, #556]	@ (8001920 <HAL_RCC_OscConfig+0x780>)
 80016f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016f8:	f003 0302 	and.w	r3, r3, #2
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d0ed      	beq.n	80016dc <HAL_RCC_OscConfig+0x53c>
 8001700:	e015      	b.n	800172e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001702:	f7ff fa1b 	bl	8000b3c <HAL_GetTick>
 8001706:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001708:	e00a      	b.n	8001720 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800170a:	f7ff fa17 	bl	8000b3c <HAL_GetTick>
 800170e:	4602      	mov	r2, r0
 8001710:	693b      	ldr	r3, [r7, #16]
 8001712:	1ad3      	subs	r3, r2, r3
 8001714:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001718:	4293      	cmp	r3, r2
 800171a:	d901      	bls.n	8001720 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800171c:	2303      	movs	r3, #3
 800171e:	e113      	b.n	8001948 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001720:	4b7f      	ldr	r3, [pc, #508]	@ (8001920 <HAL_RCC_OscConfig+0x780>)
 8001722:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001726:	f003 0302 	and.w	r3, r3, #2
 800172a:	2b00      	cmp	r3, #0
 800172c:	d1ed      	bne.n	800170a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800172e:	7ffb      	ldrb	r3, [r7, #31]
 8001730:	2b01      	cmp	r3, #1
 8001732:	d105      	bne.n	8001740 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001734:	4b7a      	ldr	r3, [pc, #488]	@ (8001920 <HAL_RCC_OscConfig+0x780>)
 8001736:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001738:	4a79      	ldr	r2, [pc, #484]	@ (8001920 <HAL_RCC_OscConfig+0x780>)
 800173a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800173e:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001744:	2b00      	cmp	r3, #0
 8001746:	f000 80fe 	beq.w	8001946 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800174e:	2b02      	cmp	r3, #2
 8001750:	f040 80d0 	bne.w	80018f4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001754:	4b72      	ldr	r3, [pc, #456]	@ (8001920 <HAL_RCC_OscConfig+0x780>)
 8001756:	68db      	ldr	r3, [r3, #12]
 8001758:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	f003 0203 	and.w	r2, r3, #3
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001764:	429a      	cmp	r2, r3
 8001766:	d130      	bne.n	80017ca <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001772:	3b01      	subs	r3, #1
 8001774:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001776:	429a      	cmp	r2, r3
 8001778:	d127      	bne.n	80017ca <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001784:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001786:	429a      	cmp	r2, r3
 8001788:	d11f      	bne.n	80017ca <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001790:	687a      	ldr	r2, [r7, #4]
 8001792:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001794:	2a07      	cmp	r2, #7
 8001796:	bf14      	ite	ne
 8001798:	2201      	movne	r2, #1
 800179a:	2200      	moveq	r2, #0
 800179c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800179e:	4293      	cmp	r3, r2
 80017a0:	d113      	bne.n	80017ca <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80017ac:	085b      	lsrs	r3, r3, #1
 80017ae:	3b01      	subs	r3, #1
 80017b0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80017b2:	429a      	cmp	r2, r3
 80017b4:	d109      	bne.n	80017ca <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017c0:	085b      	lsrs	r3, r3, #1
 80017c2:	3b01      	subs	r3, #1
 80017c4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80017c6:	429a      	cmp	r2, r3
 80017c8:	d06e      	beq.n	80018a8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80017ca:	69bb      	ldr	r3, [r7, #24]
 80017cc:	2b0c      	cmp	r3, #12
 80017ce:	d069      	beq.n	80018a4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80017d0:	4b53      	ldr	r3, [pc, #332]	@ (8001920 <HAL_RCC_OscConfig+0x780>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d105      	bne.n	80017e8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80017dc:	4b50      	ldr	r3, [pc, #320]	@ (8001920 <HAL_RCC_OscConfig+0x780>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d001      	beq.n	80017ec <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80017e8:	2301      	movs	r3, #1
 80017ea:	e0ad      	b.n	8001948 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80017ec:	4b4c      	ldr	r3, [pc, #304]	@ (8001920 <HAL_RCC_OscConfig+0x780>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a4b      	ldr	r2, [pc, #300]	@ (8001920 <HAL_RCC_OscConfig+0x780>)
 80017f2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80017f6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80017f8:	f7ff f9a0 	bl	8000b3c <HAL_GetTick>
 80017fc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017fe:	e008      	b.n	8001812 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001800:	f7ff f99c 	bl	8000b3c <HAL_GetTick>
 8001804:	4602      	mov	r2, r0
 8001806:	693b      	ldr	r3, [r7, #16]
 8001808:	1ad3      	subs	r3, r2, r3
 800180a:	2b02      	cmp	r3, #2
 800180c:	d901      	bls.n	8001812 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800180e:	2303      	movs	r3, #3
 8001810:	e09a      	b.n	8001948 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001812:	4b43      	ldr	r3, [pc, #268]	@ (8001920 <HAL_RCC_OscConfig+0x780>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800181a:	2b00      	cmp	r3, #0
 800181c:	d1f0      	bne.n	8001800 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800181e:	4b40      	ldr	r3, [pc, #256]	@ (8001920 <HAL_RCC_OscConfig+0x780>)
 8001820:	68da      	ldr	r2, [r3, #12]
 8001822:	4b40      	ldr	r3, [pc, #256]	@ (8001924 <HAL_RCC_OscConfig+0x784>)
 8001824:	4013      	ands	r3, r2
 8001826:	687a      	ldr	r2, [r7, #4]
 8001828:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800182a:	687a      	ldr	r2, [r7, #4]
 800182c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800182e:	3a01      	subs	r2, #1
 8001830:	0112      	lsls	r2, r2, #4
 8001832:	4311      	orrs	r1, r2
 8001834:	687a      	ldr	r2, [r7, #4]
 8001836:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001838:	0212      	lsls	r2, r2, #8
 800183a:	4311      	orrs	r1, r2
 800183c:	687a      	ldr	r2, [r7, #4]
 800183e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001840:	0852      	lsrs	r2, r2, #1
 8001842:	3a01      	subs	r2, #1
 8001844:	0552      	lsls	r2, r2, #21
 8001846:	4311      	orrs	r1, r2
 8001848:	687a      	ldr	r2, [r7, #4]
 800184a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800184c:	0852      	lsrs	r2, r2, #1
 800184e:	3a01      	subs	r2, #1
 8001850:	0652      	lsls	r2, r2, #25
 8001852:	4311      	orrs	r1, r2
 8001854:	687a      	ldr	r2, [r7, #4]
 8001856:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001858:	0912      	lsrs	r2, r2, #4
 800185a:	0452      	lsls	r2, r2, #17
 800185c:	430a      	orrs	r2, r1
 800185e:	4930      	ldr	r1, [pc, #192]	@ (8001920 <HAL_RCC_OscConfig+0x780>)
 8001860:	4313      	orrs	r3, r2
 8001862:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001864:	4b2e      	ldr	r3, [pc, #184]	@ (8001920 <HAL_RCC_OscConfig+0x780>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a2d      	ldr	r2, [pc, #180]	@ (8001920 <HAL_RCC_OscConfig+0x780>)
 800186a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800186e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001870:	4b2b      	ldr	r3, [pc, #172]	@ (8001920 <HAL_RCC_OscConfig+0x780>)
 8001872:	68db      	ldr	r3, [r3, #12]
 8001874:	4a2a      	ldr	r2, [pc, #168]	@ (8001920 <HAL_RCC_OscConfig+0x780>)
 8001876:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800187a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800187c:	f7ff f95e 	bl	8000b3c <HAL_GetTick>
 8001880:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001882:	e008      	b.n	8001896 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001884:	f7ff f95a 	bl	8000b3c <HAL_GetTick>
 8001888:	4602      	mov	r2, r0
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	1ad3      	subs	r3, r2, r3
 800188e:	2b02      	cmp	r3, #2
 8001890:	d901      	bls.n	8001896 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001892:	2303      	movs	r3, #3
 8001894:	e058      	b.n	8001948 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001896:	4b22      	ldr	r3, [pc, #136]	@ (8001920 <HAL_RCC_OscConfig+0x780>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d0f0      	beq.n	8001884 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80018a2:	e050      	b.n	8001946 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80018a4:	2301      	movs	r3, #1
 80018a6:	e04f      	b.n	8001948 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018a8:	4b1d      	ldr	r3, [pc, #116]	@ (8001920 <HAL_RCC_OscConfig+0x780>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d148      	bne.n	8001946 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80018b4:	4b1a      	ldr	r3, [pc, #104]	@ (8001920 <HAL_RCC_OscConfig+0x780>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a19      	ldr	r2, [pc, #100]	@ (8001920 <HAL_RCC_OscConfig+0x780>)
 80018ba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80018be:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80018c0:	4b17      	ldr	r3, [pc, #92]	@ (8001920 <HAL_RCC_OscConfig+0x780>)
 80018c2:	68db      	ldr	r3, [r3, #12]
 80018c4:	4a16      	ldr	r2, [pc, #88]	@ (8001920 <HAL_RCC_OscConfig+0x780>)
 80018c6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80018ca:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80018cc:	f7ff f936 	bl	8000b3c <HAL_GetTick>
 80018d0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018d2:	e008      	b.n	80018e6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018d4:	f7ff f932 	bl	8000b3c <HAL_GetTick>
 80018d8:	4602      	mov	r2, r0
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	1ad3      	subs	r3, r2, r3
 80018de:	2b02      	cmp	r3, #2
 80018e0:	d901      	bls.n	80018e6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80018e2:	2303      	movs	r3, #3
 80018e4:	e030      	b.n	8001948 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001920 <HAL_RCC_OscConfig+0x780>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d0f0      	beq.n	80018d4 <HAL_RCC_OscConfig+0x734>
 80018f2:	e028      	b.n	8001946 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80018f4:	69bb      	ldr	r3, [r7, #24]
 80018f6:	2b0c      	cmp	r3, #12
 80018f8:	d023      	beq.n	8001942 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018fa:	4b09      	ldr	r3, [pc, #36]	@ (8001920 <HAL_RCC_OscConfig+0x780>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4a08      	ldr	r2, [pc, #32]	@ (8001920 <HAL_RCC_OscConfig+0x780>)
 8001900:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001904:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001906:	f7ff f919 	bl	8000b3c <HAL_GetTick>
 800190a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800190c:	e00c      	b.n	8001928 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800190e:	f7ff f915 	bl	8000b3c <HAL_GetTick>
 8001912:	4602      	mov	r2, r0
 8001914:	693b      	ldr	r3, [r7, #16]
 8001916:	1ad3      	subs	r3, r2, r3
 8001918:	2b02      	cmp	r3, #2
 800191a:	d905      	bls.n	8001928 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800191c:	2303      	movs	r3, #3
 800191e:	e013      	b.n	8001948 <HAL_RCC_OscConfig+0x7a8>
 8001920:	40021000 	.word	0x40021000
 8001924:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001928:	4b09      	ldr	r3, [pc, #36]	@ (8001950 <HAL_RCC_OscConfig+0x7b0>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001930:	2b00      	cmp	r3, #0
 8001932:	d1ec      	bne.n	800190e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001934:	4b06      	ldr	r3, [pc, #24]	@ (8001950 <HAL_RCC_OscConfig+0x7b0>)
 8001936:	68da      	ldr	r2, [r3, #12]
 8001938:	4905      	ldr	r1, [pc, #20]	@ (8001950 <HAL_RCC_OscConfig+0x7b0>)
 800193a:	4b06      	ldr	r3, [pc, #24]	@ (8001954 <HAL_RCC_OscConfig+0x7b4>)
 800193c:	4013      	ands	r3, r2
 800193e:	60cb      	str	r3, [r1, #12]
 8001940:	e001      	b.n	8001946 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001942:	2301      	movs	r3, #1
 8001944:	e000      	b.n	8001948 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001946:	2300      	movs	r3, #0
}
 8001948:	4618      	mov	r0, r3
 800194a:	3720      	adds	r7, #32
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}
 8001950:	40021000 	.word	0x40021000
 8001954:	feeefffc 	.word	0xfeeefffc

08001958 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b084      	sub	sp, #16
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
 8001960:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d101      	bne.n	800196c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001968:	2301      	movs	r3, #1
 800196a:	e0e7      	b.n	8001b3c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800196c:	4b75      	ldr	r3, [pc, #468]	@ (8001b44 <HAL_RCC_ClockConfig+0x1ec>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f003 0307 	and.w	r3, r3, #7
 8001974:	683a      	ldr	r2, [r7, #0]
 8001976:	429a      	cmp	r2, r3
 8001978:	d910      	bls.n	800199c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800197a:	4b72      	ldr	r3, [pc, #456]	@ (8001b44 <HAL_RCC_ClockConfig+0x1ec>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f023 0207 	bic.w	r2, r3, #7
 8001982:	4970      	ldr	r1, [pc, #448]	@ (8001b44 <HAL_RCC_ClockConfig+0x1ec>)
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	4313      	orrs	r3, r2
 8001988:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800198a:	4b6e      	ldr	r3, [pc, #440]	@ (8001b44 <HAL_RCC_ClockConfig+0x1ec>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f003 0307 	and.w	r3, r3, #7
 8001992:	683a      	ldr	r2, [r7, #0]
 8001994:	429a      	cmp	r2, r3
 8001996:	d001      	beq.n	800199c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001998:	2301      	movs	r3, #1
 800199a:	e0cf      	b.n	8001b3c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f003 0302 	and.w	r3, r3, #2
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d010      	beq.n	80019ca <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	689a      	ldr	r2, [r3, #8]
 80019ac:	4b66      	ldr	r3, [pc, #408]	@ (8001b48 <HAL_RCC_ClockConfig+0x1f0>)
 80019ae:	689b      	ldr	r3, [r3, #8]
 80019b0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80019b4:	429a      	cmp	r2, r3
 80019b6:	d908      	bls.n	80019ca <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019b8:	4b63      	ldr	r3, [pc, #396]	@ (8001b48 <HAL_RCC_ClockConfig+0x1f0>)
 80019ba:	689b      	ldr	r3, [r3, #8]
 80019bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	689b      	ldr	r3, [r3, #8]
 80019c4:	4960      	ldr	r1, [pc, #384]	@ (8001b48 <HAL_RCC_ClockConfig+0x1f0>)
 80019c6:	4313      	orrs	r3, r2
 80019c8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f003 0301 	and.w	r3, r3, #1
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d04c      	beq.n	8001a70 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	2b03      	cmp	r3, #3
 80019dc:	d107      	bne.n	80019ee <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019de:	4b5a      	ldr	r3, [pc, #360]	@ (8001b48 <HAL_RCC_ClockConfig+0x1f0>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d121      	bne.n	8001a2e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
 80019ec:	e0a6      	b.n	8001b3c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	2b02      	cmp	r3, #2
 80019f4:	d107      	bne.n	8001a06 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019f6:	4b54      	ldr	r3, [pc, #336]	@ (8001b48 <HAL_RCC_ClockConfig+0x1f0>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d115      	bne.n	8001a2e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
 8001a04:	e09a      	b.n	8001b3c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d107      	bne.n	8001a1e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a0e:	4b4e      	ldr	r3, [pc, #312]	@ (8001b48 <HAL_RCC_ClockConfig+0x1f0>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f003 0302 	and.w	r3, r3, #2
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d109      	bne.n	8001a2e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e08e      	b.n	8001b3c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a1e:	4b4a      	ldr	r3, [pc, #296]	@ (8001b48 <HAL_RCC_ClockConfig+0x1f0>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d101      	bne.n	8001a2e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e086      	b.n	8001b3c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001a2e:	4b46      	ldr	r3, [pc, #280]	@ (8001b48 <HAL_RCC_ClockConfig+0x1f0>)
 8001a30:	689b      	ldr	r3, [r3, #8]
 8001a32:	f023 0203 	bic.w	r2, r3, #3
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	4943      	ldr	r1, [pc, #268]	@ (8001b48 <HAL_RCC_ClockConfig+0x1f0>)
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a40:	f7ff f87c 	bl	8000b3c <HAL_GetTick>
 8001a44:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a46:	e00a      	b.n	8001a5e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a48:	f7ff f878 	bl	8000b3c <HAL_GetTick>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	1ad3      	subs	r3, r2, r3
 8001a52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d901      	bls.n	8001a5e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001a5a:	2303      	movs	r3, #3
 8001a5c:	e06e      	b.n	8001b3c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a5e:	4b3a      	ldr	r3, [pc, #232]	@ (8001b48 <HAL_RCC_ClockConfig+0x1f0>)
 8001a60:	689b      	ldr	r3, [r3, #8]
 8001a62:	f003 020c 	and.w	r2, r3, #12
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	009b      	lsls	r3, r3, #2
 8001a6c:	429a      	cmp	r2, r3
 8001a6e:	d1eb      	bne.n	8001a48 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f003 0302 	and.w	r3, r3, #2
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d010      	beq.n	8001a9e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	689a      	ldr	r2, [r3, #8]
 8001a80:	4b31      	ldr	r3, [pc, #196]	@ (8001b48 <HAL_RCC_ClockConfig+0x1f0>)
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	d208      	bcs.n	8001a9e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a8c:	4b2e      	ldr	r3, [pc, #184]	@ (8001b48 <HAL_RCC_ClockConfig+0x1f0>)
 8001a8e:	689b      	ldr	r3, [r3, #8]
 8001a90:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	492b      	ldr	r1, [pc, #172]	@ (8001b48 <HAL_RCC_ClockConfig+0x1f0>)
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a9e:	4b29      	ldr	r3, [pc, #164]	@ (8001b44 <HAL_RCC_ClockConfig+0x1ec>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f003 0307 	and.w	r3, r3, #7
 8001aa6:	683a      	ldr	r2, [r7, #0]
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	d210      	bcs.n	8001ace <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aac:	4b25      	ldr	r3, [pc, #148]	@ (8001b44 <HAL_RCC_ClockConfig+0x1ec>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f023 0207 	bic.w	r2, r3, #7
 8001ab4:	4923      	ldr	r1, [pc, #140]	@ (8001b44 <HAL_RCC_ClockConfig+0x1ec>)
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001abc:	4b21      	ldr	r3, [pc, #132]	@ (8001b44 <HAL_RCC_ClockConfig+0x1ec>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f003 0307 	and.w	r3, r3, #7
 8001ac4:	683a      	ldr	r2, [r7, #0]
 8001ac6:	429a      	cmp	r2, r3
 8001ac8:	d001      	beq.n	8001ace <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	e036      	b.n	8001b3c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f003 0304 	and.w	r3, r3, #4
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d008      	beq.n	8001aec <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ada:	4b1b      	ldr	r3, [pc, #108]	@ (8001b48 <HAL_RCC_ClockConfig+0x1f0>)
 8001adc:	689b      	ldr	r3, [r3, #8]
 8001ade:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	68db      	ldr	r3, [r3, #12]
 8001ae6:	4918      	ldr	r1, [pc, #96]	@ (8001b48 <HAL_RCC_ClockConfig+0x1f0>)
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f003 0308 	and.w	r3, r3, #8
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d009      	beq.n	8001b0c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001af8:	4b13      	ldr	r3, [pc, #76]	@ (8001b48 <HAL_RCC_ClockConfig+0x1f0>)
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	691b      	ldr	r3, [r3, #16]
 8001b04:	00db      	lsls	r3, r3, #3
 8001b06:	4910      	ldr	r1, [pc, #64]	@ (8001b48 <HAL_RCC_ClockConfig+0x1f0>)
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001b0c:	f000 f824 	bl	8001b58 <HAL_RCC_GetSysClockFreq>
 8001b10:	4602      	mov	r2, r0
 8001b12:	4b0d      	ldr	r3, [pc, #52]	@ (8001b48 <HAL_RCC_ClockConfig+0x1f0>)
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	091b      	lsrs	r3, r3, #4
 8001b18:	f003 030f 	and.w	r3, r3, #15
 8001b1c:	490b      	ldr	r1, [pc, #44]	@ (8001b4c <HAL_RCC_ClockConfig+0x1f4>)
 8001b1e:	5ccb      	ldrb	r3, [r1, r3]
 8001b20:	f003 031f 	and.w	r3, r3, #31
 8001b24:	fa22 f303 	lsr.w	r3, r2, r3
 8001b28:	4a09      	ldr	r2, [pc, #36]	@ (8001b50 <HAL_RCC_ClockConfig+0x1f8>)
 8001b2a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001b2c:	4b09      	ldr	r3, [pc, #36]	@ (8001b54 <HAL_RCC_ClockConfig+0x1fc>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4618      	mov	r0, r3
 8001b32:	f7fe ffc7 	bl	8000ac4 <HAL_InitTick>
 8001b36:	4603      	mov	r3, r0
 8001b38:	72fb      	strb	r3, [r7, #11]

  return status;
 8001b3a:	7afb      	ldrb	r3, [r7, #11]
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	3710      	adds	r7, #16
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	40022000 	.word	0x40022000
 8001b48:	40021000 	.word	0x40021000
 8001b4c:	08005750 	.word	0x08005750
 8001b50:	20000000 	.word	0x20000000
 8001b54:	20000004 	.word	0x20000004

08001b58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b089      	sub	sp, #36	@ 0x24
 8001b5c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	61fb      	str	r3, [r7, #28]
 8001b62:	2300      	movs	r3, #0
 8001b64:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b66:	4b3e      	ldr	r3, [pc, #248]	@ (8001c60 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	f003 030c 	and.w	r3, r3, #12
 8001b6e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b70:	4b3b      	ldr	r3, [pc, #236]	@ (8001c60 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b72:	68db      	ldr	r3, [r3, #12]
 8001b74:	f003 0303 	and.w	r3, r3, #3
 8001b78:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d005      	beq.n	8001b8c <HAL_RCC_GetSysClockFreq+0x34>
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	2b0c      	cmp	r3, #12
 8001b84:	d121      	bne.n	8001bca <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	2b01      	cmp	r3, #1
 8001b8a:	d11e      	bne.n	8001bca <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001b8c:	4b34      	ldr	r3, [pc, #208]	@ (8001c60 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f003 0308 	and.w	r3, r3, #8
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d107      	bne.n	8001ba8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001b98:	4b31      	ldr	r3, [pc, #196]	@ (8001c60 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b9e:	0a1b      	lsrs	r3, r3, #8
 8001ba0:	f003 030f 	and.w	r3, r3, #15
 8001ba4:	61fb      	str	r3, [r7, #28]
 8001ba6:	e005      	b.n	8001bb4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001ba8:	4b2d      	ldr	r3, [pc, #180]	@ (8001c60 <HAL_RCC_GetSysClockFreq+0x108>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	091b      	lsrs	r3, r3, #4
 8001bae:	f003 030f 	and.w	r3, r3, #15
 8001bb2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001bb4:	4a2b      	ldr	r2, [pc, #172]	@ (8001c64 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001bb6:	69fb      	ldr	r3, [r7, #28]
 8001bb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bbc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d10d      	bne.n	8001be0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001bc4:	69fb      	ldr	r3, [r7, #28]
 8001bc6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001bc8:	e00a      	b.n	8001be0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	2b04      	cmp	r3, #4
 8001bce:	d102      	bne.n	8001bd6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001bd0:	4b25      	ldr	r3, [pc, #148]	@ (8001c68 <HAL_RCC_GetSysClockFreq+0x110>)
 8001bd2:	61bb      	str	r3, [r7, #24]
 8001bd4:	e004      	b.n	8001be0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001bd6:	693b      	ldr	r3, [r7, #16]
 8001bd8:	2b08      	cmp	r3, #8
 8001bda:	d101      	bne.n	8001be0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001bdc:	4b23      	ldr	r3, [pc, #140]	@ (8001c6c <HAL_RCC_GetSysClockFreq+0x114>)
 8001bde:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	2b0c      	cmp	r3, #12
 8001be4:	d134      	bne.n	8001c50 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001be6:	4b1e      	ldr	r3, [pc, #120]	@ (8001c60 <HAL_RCC_GetSysClockFreq+0x108>)
 8001be8:	68db      	ldr	r3, [r3, #12]
 8001bea:	f003 0303 	and.w	r3, r3, #3
 8001bee:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001bf0:	68bb      	ldr	r3, [r7, #8]
 8001bf2:	2b02      	cmp	r3, #2
 8001bf4:	d003      	beq.n	8001bfe <HAL_RCC_GetSysClockFreq+0xa6>
 8001bf6:	68bb      	ldr	r3, [r7, #8]
 8001bf8:	2b03      	cmp	r3, #3
 8001bfa:	d003      	beq.n	8001c04 <HAL_RCC_GetSysClockFreq+0xac>
 8001bfc:	e005      	b.n	8001c0a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001bfe:	4b1a      	ldr	r3, [pc, #104]	@ (8001c68 <HAL_RCC_GetSysClockFreq+0x110>)
 8001c00:	617b      	str	r3, [r7, #20]
      break;
 8001c02:	e005      	b.n	8001c10 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001c04:	4b19      	ldr	r3, [pc, #100]	@ (8001c6c <HAL_RCC_GetSysClockFreq+0x114>)
 8001c06:	617b      	str	r3, [r7, #20]
      break;
 8001c08:	e002      	b.n	8001c10 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001c0a:	69fb      	ldr	r3, [r7, #28]
 8001c0c:	617b      	str	r3, [r7, #20]
      break;
 8001c0e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001c10:	4b13      	ldr	r3, [pc, #76]	@ (8001c60 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c12:	68db      	ldr	r3, [r3, #12]
 8001c14:	091b      	lsrs	r3, r3, #4
 8001c16:	f003 0307 	and.w	r3, r3, #7
 8001c1a:	3301      	adds	r3, #1
 8001c1c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001c1e:	4b10      	ldr	r3, [pc, #64]	@ (8001c60 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c20:	68db      	ldr	r3, [r3, #12]
 8001c22:	0a1b      	lsrs	r3, r3, #8
 8001c24:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001c28:	697a      	ldr	r2, [r7, #20]
 8001c2a:	fb03 f202 	mul.w	r2, r3, r2
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c34:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001c36:	4b0a      	ldr	r3, [pc, #40]	@ (8001c60 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c38:	68db      	ldr	r3, [r3, #12]
 8001c3a:	0e5b      	lsrs	r3, r3, #25
 8001c3c:	f003 0303 	and.w	r3, r3, #3
 8001c40:	3301      	adds	r3, #1
 8001c42:	005b      	lsls	r3, r3, #1
 8001c44:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001c46:	697a      	ldr	r2, [r7, #20]
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c4e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001c50:	69bb      	ldr	r3, [r7, #24]
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	3724      	adds	r7, #36	@ 0x24
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr
 8001c5e:	bf00      	nop
 8001c60:	40021000 	.word	0x40021000
 8001c64:	08005768 	.word	0x08005768
 8001c68:	00f42400 	.word	0x00f42400
 8001c6c:	007a1200 	.word	0x007a1200

08001c70 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c74:	4b03      	ldr	r3, [pc, #12]	@ (8001c84 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c76:	681b      	ldr	r3, [r3, #0]
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
 8001c82:	bf00      	nop
 8001c84:	20000000 	.word	0x20000000

08001c88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001c8c:	f7ff fff0 	bl	8001c70 <HAL_RCC_GetHCLKFreq>
 8001c90:	4602      	mov	r2, r0
 8001c92:	4b06      	ldr	r3, [pc, #24]	@ (8001cac <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c94:	689b      	ldr	r3, [r3, #8]
 8001c96:	0a1b      	lsrs	r3, r3, #8
 8001c98:	f003 0307 	and.w	r3, r3, #7
 8001c9c:	4904      	ldr	r1, [pc, #16]	@ (8001cb0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001c9e:	5ccb      	ldrb	r3, [r1, r3]
 8001ca0:	f003 031f 	and.w	r3, r3, #31
 8001ca4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	40021000 	.word	0x40021000
 8001cb0:	08005760 	.word	0x08005760

08001cb4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001cb8:	f7ff ffda 	bl	8001c70 <HAL_RCC_GetHCLKFreq>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	4b06      	ldr	r3, [pc, #24]	@ (8001cd8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	0adb      	lsrs	r3, r3, #11
 8001cc4:	f003 0307 	and.w	r3, r3, #7
 8001cc8:	4904      	ldr	r1, [pc, #16]	@ (8001cdc <HAL_RCC_GetPCLK2Freq+0x28>)
 8001cca:	5ccb      	ldrb	r3, [r1, r3]
 8001ccc:	f003 031f 	and.w	r3, r3, #31
 8001cd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	40021000 	.word	0x40021000
 8001cdc:	08005760 	.word	0x08005760

08001ce0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b086      	sub	sp, #24
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001ce8:	2300      	movs	r3, #0
 8001cea:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001cec:	4b2a      	ldr	r3, [pc, #168]	@ (8001d98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001cee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cf0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d003      	beq.n	8001d00 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001cf8:	f7ff f9ee 	bl	80010d8 <HAL_PWREx_GetVoltageRange>
 8001cfc:	6178      	str	r0, [r7, #20]
 8001cfe:	e014      	b.n	8001d2a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001d00:	4b25      	ldr	r3, [pc, #148]	@ (8001d98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d04:	4a24      	ldr	r2, [pc, #144]	@ (8001d98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d06:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d0a:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d0c:	4b22      	ldr	r3, [pc, #136]	@ (8001d98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d10:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d14:	60fb      	str	r3, [r7, #12]
 8001d16:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001d18:	f7ff f9de 	bl	80010d8 <HAL_PWREx_GetVoltageRange>
 8001d1c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001d1e:	4b1e      	ldr	r3, [pc, #120]	@ (8001d98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d22:	4a1d      	ldr	r2, [pc, #116]	@ (8001d98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d24:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001d28:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001d30:	d10b      	bne.n	8001d4a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2b80      	cmp	r3, #128	@ 0x80
 8001d36:	d919      	bls.n	8001d6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2ba0      	cmp	r3, #160	@ 0xa0
 8001d3c:	d902      	bls.n	8001d44 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001d3e:	2302      	movs	r3, #2
 8001d40:	613b      	str	r3, [r7, #16]
 8001d42:	e013      	b.n	8001d6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001d44:	2301      	movs	r3, #1
 8001d46:	613b      	str	r3, [r7, #16]
 8001d48:	e010      	b.n	8001d6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2b80      	cmp	r3, #128	@ 0x80
 8001d4e:	d902      	bls.n	8001d56 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001d50:	2303      	movs	r3, #3
 8001d52:	613b      	str	r3, [r7, #16]
 8001d54:	e00a      	b.n	8001d6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2b80      	cmp	r3, #128	@ 0x80
 8001d5a:	d102      	bne.n	8001d62 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001d5c:	2302      	movs	r3, #2
 8001d5e:	613b      	str	r3, [r7, #16]
 8001d60:	e004      	b.n	8001d6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2b70      	cmp	r3, #112	@ 0x70
 8001d66:	d101      	bne.n	8001d6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001d68:	2301      	movs	r3, #1
 8001d6a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001d6c:	4b0b      	ldr	r3, [pc, #44]	@ (8001d9c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f023 0207 	bic.w	r2, r3, #7
 8001d74:	4909      	ldr	r1, [pc, #36]	@ (8001d9c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001d7c:	4b07      	ldr	r3, [pc, #28]	@ (8001d9c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f003 0307 	and.w	r3, r3, #7
 8001d84:	693a      	ldr	r2, [r7, #16]
 8001d86:	429a      	cmp	r2, r3
 8001d88:	d001      	beq.n	8001d8e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e000      	b.n	8001d90 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001d8e:	2300      	movs	r3, #0
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	3718      	adds	r7, #24
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	40021000 	.word	0x40021000
 8001d9c:	40022000 	.word	0x40022000

08001da0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b086      	sub	sp, #24
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001da8:	2300      	movs	r3, #0
 8001daa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001dac:	2300      	movs	r3, #0
 8001dae:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d041      	beq.n	8001e40 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001dc0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001dc4:	d02a      	beq.n	8001e1c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001dc6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001dca:	d824      	bhi.n	8001e16 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001dcc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001dd0:	d008      	beq.n	8001de4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001dd2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001dd6:	d81e      	bhi.n	8001e16 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d00a      	beq.n	8001df2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001ddc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001de0:	d010      	beq.n	8001e04 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001de2:	e018      	b.n	8001e16 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001de4:	4b86      	ldr	r3, [pc, #536]	@ (8002000 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	4a85      	ldr	r2, [pc, #532]	@ (8002000 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001dea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001dee:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001df0:	e015      	b.n	8001e1e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	3304      	adds	r3, #4
 8001df6:	2100      	movs	r1, #0
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f000 fabb 	bl	8002374 <RCCEx_PLLSAI1_Config>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001e02:	e00c      	b.n	8001e1e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	3320      	adds	r3, #32
 8001e08:	2100      	movs	r1, #0
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f000 fba6 	bl	800255c <RCCEx_PLLSAI2_Config>
 8001e10:	4603      	mov	r3, r0
 8001e12:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001e14:	e003      	b.n	8001e1e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	74fb      	strb	r3, [r7, #19]
      break;
 8001e1a:	e000      	b.n	8001e1e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001e1c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001e1e:	7cfb      	ldrb	r3, [r7, #19]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d10b      	bne.n	8001e3c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001e24:	4b76      	ldr	r3, [pc, #472]	@ (8002000 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e2a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001e32:	4973      	ldr	r1, [pc, #460]	@ (8002000 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e34:	4313      	orrs	r3, r2
 8001e36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8001e3a:	e001      	b.n	8001e40 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001e3c:	7cfb      	ldrb	r3, [r7, #19]
 8001e3e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d041      	beq.n	8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001e50:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8001e54:	d02a      	beq.n	8001eac <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8001e56:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8001e5a:	d824      	bhi.n	8001ea6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001e5c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001e60:	d008      	beq.n	8001e74 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001e62:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001e66:	d81e      	bhi.n	8001ea6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d00a      	beq.n	8001e82 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8001e6c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e70:	d010      	beq.n	8001e94 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001e72:	e018      	b.n	8001ea6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001e74:	4b62      	ldr	r3, [pc, #392]	@ (8002000 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e76:	68db      	ldr	r3, [r3, #12]
 8001e78:	4a61      	ldr	r2, [pc, #388]	@ (8002000 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e7a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e7e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001e80:	e015      	b.n	8001eae <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	3304      	adds	r3, #4
 8001e86:	2100      	movs	r1, #0
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f000 fa73 	bl	8002374 <RCCEx_PLLSAI1_Config>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001e92:	e00c      	b.n	8001eae <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	3320      	adds	r3, #32
 8001e98:	2100      	movs	r1, #0
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f000 fb5e 	bl	800255c <RCCEx_PLLSAI2_Config>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001ea4:	e003      	b.n	8001eae <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	74fb      	strb	r3, [r7, #19]
      break;
 8001eaa:	e000      	b.n	8001eae <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8001eac:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001eae:	7cfb      	ldrb	r3, [r7, #19]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d10b      	bne.n	8001ecc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001eb4:	4b52      	ldr	r3, [pc, #328]	@ (8002000 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001eb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001eba:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001ec2:	494f      	ldr	r1, [pc, #316]	@ (8002000 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8001eca:	e001      	b.n	8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001ecc:	7cfb      	ldrb	r3, [r7, #19]
 8001ece:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	f000 80a0 	beq.w	800201e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001ee2:	4b47      	ldr	r3, [pc, #284]	@ (8002000 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ee4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ee6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d101      	bne.n	8001ef2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e000      	b.n	8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d00d      	beq.n	8001f14 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ef8:	4b41      	ldr	r3, [pc, #260]	@ (8002000 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001efa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001efc:	4a40      	ldr	r2, [pc, #256]	@ (8002000 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001efe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f02:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f04:	4b3e      	ldr	r3, [pc, #248]	@ (8002000 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f08:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f0c:	60bb      	str	r3, [r7, #8]
 8001f0e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f10:	2301      	movs	r3, #1
 8001f12:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f14:	4b3b      	ldr	r3, [pc, #236]	@ (8002004 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a3a      	ldr	r2, [pc, #232]	@ (8002004 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001f1a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f1e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001f20:	f7fe fe0c 	bl	8000b3c <HAL_GetTick>
 8001f24:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001f26:	e009      	b.n	8001f3c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f28:	f7fe fe08 	bl	8000b3c <HAL_GetTick>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	1ad3      	subs	r3, r2, r3
 8001f32:	2b02      	cmp	r3, #2
 8001f34:	d902      	bls.n	8001f3c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8001f36:	2303      	movs	r3, #3
 8001f38:	74fb      	strb	r3, [r7, #19]
        break;
 8001f3a:	e005      	b.n	8001f48 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001f3c:	4b31      	ldr	r3, [pc, #196]	@ (8002004 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d0ef      	beq.n	8001f28 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8001f48:	7cfb      	ldrb	r3, [r7, #19]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d15c      	bne.n	8002008 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001f4e:	4b2c      	ldr	r3, [pc, #176]	@ (8002000 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f54:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001f58:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d01f      	beq.n	8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001f66:	697a      	ldr	r2, [r7, #20]
 8001f68:	429a      	cmp	r2, r3
 8001f6a:	d019      	beq.n	8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001f6c:	4b24      	ldr	r3, [pc, #144]	@ (8002000 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f72:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001f76:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001f78:	4b21      	ldr	r3, [pc, #132]	@ (8002000 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f7e:	4a20      	ldr	r2, [pc, #128]	@ (8002000 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f84:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001f88:	4b1d      	ldr	r3, [pc, #116]	@ (8002000 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f8e:	4a1c      	ldr	r2, [pc, #112]	@ (8002000 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f90:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f94:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001f98:	4a19      	ldr	r2, [pc, #100]	@ (8002000 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	f003 0301 	and.w	r3, r3, #1
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d016      	beq.n	8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001faa:	f7fe fdc7 	bl	8000b3c <HAL_GetTick>
 8001fae:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fb0:	e00b      	b.n	8001fca <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fb2:	f7fe fdc3 	bl	8000b3c <HAL_GetTick>
 8001fb6:	4602      	mov	r2, r0
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	1ad3      	subs	r3, r2, r3
 8001fbc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d902      	bls.n	8001fca <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8001fc4:	2303      	movs	r3, #3
 8001fc6:	74fb      	strb	r3, [r7, #19]
            break;
 8001fc8:	e006      	b.n	8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fca:	4b0d      	ldr	r3, [pc, #52]	@ (8002000 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fd0:	f003 0302 	and.w	r3, r3, #2
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d0ec      	beq.n	8001fb2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8001fd8:	7cfb      	ldrb	r3, [r7, #19]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d10c      	bne.n	8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001fde:	4b08      	ldr	r3, [pc, #32]	@ (8002000 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fe0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fe4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001fee:	4904      	ldr	r1, [pc, #16]	@ (8002000 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8001ff6:	e009      	b.n	800200c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001ff8:	7cfb      	ldrb	r3, [r7, #19]
 8001ffa:	74bb      	strb	r3, [r7, #18]
 8001ffc:	e006      	b.n	800200c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8001ffe:	bf00      	nop
 8002000:	40021000 	.word	0x40021000
 8002004:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002008:	7cfb      	ldrb	r3, [r7, #19]
 800200a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800200c:	7c7b      	ldrb	r3, [r7, #17]
 800200e:	2b01      	cmp	r3, #1
 8002010:	d105      	bne.n	800201e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002012:	4b9e      	ldr	r3, [pc, #632]	@ (800228c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002014:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002016:	4a9d      	ldr	r2, [pc, #628]	@ (800228c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002018:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800201c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f003 0301 	and.w	r3, r3, #1
 8002026:	2b00      	cmp	r3, #0
 8002028:	d00a      	beq.n	8002040 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800202a:	4b98      	ldr	r3, [pc, #608]	@ (800228c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800202c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002030:	f023 0203 	bic.w	r2, r3, #3
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002038:	4994      	ldr	r1, [pc, #592]	@ (800228c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800203a:	4313      	orrs	r3, r2
 800203c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f003 0302 	and.w	r3, r3, #2
 8002048:	2b00      	cmp	r3, #0
 800204a:	d00a      	beq.n	8002062 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800204c:	4b8f      	ldr	r3, [pc, #572]	@ (800228c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800204e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002052:	f023 020c 	bic.w	r2, r3, #12
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800205a:	498c      	ldr	r1, [pc, #560]	@ (800228c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800205c:	4313      	orrs	r3, r2
 800205e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f003 0304 	and.w	r3, r3, #4
 800206a:	2b00      	cmp	r3, #0
 800206c:	d00a      	beq.n	8002084 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800206e:	4b87      	ldr	r3, [pc, #540]	@ (800228c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002070:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002074:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800207c:	4983      	ldr	r1, [pc, #524]	@ (800228c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800207e:	4313      	orrs	r3, r2
 8002080:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f003 0308 	and.w	r3, r3, #8
 800208c:	2b00      	cmp	r3, #0
 800208e:	d00a      	beq.n	80020a6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002090:	4b7e      	ldr	r3, [pc, #504]	@ (800228c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002092:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002096:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800209e:	497b      	ldr	r1, [pc, #492]	@ (800228c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020a0:	4313      	orrs	r3, r2
 80020a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 0310 	and.w	r3, r3, #16
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d00a      	beq.n	80020c8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80020b2:	4b76      	ldr	r3, [pc, #472]	@ (800228c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020b8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020c0:	4972      	ldr	r1, [pc, #456]	@ (800228c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020c2:	4313      	orrs	r3, r2
 80020c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f003 0320 	and.w	r3, r3, #32
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d00a      	beq.n	80020ea <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80020d4:	4b6d      	ldr	r3, [pc, #436]	@ (800228c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020da:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020e2:	496a      	ldr	r1, [pc, #424]	@ (800228c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020e4:	4313      	orrs	r3, r2
 80020e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d00a      	beq.n	800210c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80020f6:	4b65      	ldr	r3, [pc, #404]	@ (800228c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020fc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002104:	4961      	ldr	r1, [pc, #388]	@ (800228c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002106:	4313      	orrs	r3, r2
 8002108:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002114:	2b00      	cmp	r3, #0
 8002116:	d00a      	beq.n	800212e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002118:	4b5c      	ldr	r3, [pc, #368]	@ (800228c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800211a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800211e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002126:	4959      	ldr	r1, [pc, #356]	@ (800228c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002128:	4313      	orrs	r3, r2
 800212a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002136:	2b00      	cmp	r3, #0
 8002138:	d00a      	beq.n	8002150 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800213a:	4b54      	ldr	r3, [pc, #336]	@ (800228c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800213c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002140:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002148:	4950      	ldr	r1, [pc, #320]	@ (800228c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800214a:	4313      	orrs	r3, r2
 800214c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002158:	2b00      	cmp	r3, #0
 800215a:	d00a      	beq.n	8002172 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800215c:	4b4b      	ldr	r3, [pc, #300]	@ (800228c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800215e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002162:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800216a:	4948      	ldr	r1, [pc, #288]	@ (800228c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800216c:	4313      	orrs	r3, r2
 800216e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800217a:	2b00      	cmp	r3, #0
 800217c:	d00a      	beq.n	8002194 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800217e:	4b43      	ldr	r3, [pc, #268]	@ (800228c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002180:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002184:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800218c:	493f      	ldr	r1, [pc, #252]	@ (800228c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800218e:	4313      	orrs	r3, r2
 8002190:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800219c:	2b00      	cmp	r3, #0
 800219e:	d028      	beq.n	80021f2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80021a0:	4b3a      	ldr	r3, [pc, #232]	@ (800228c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021a6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80021ae:	4937      	ldr	r1, [pc, #220]	@ (800228c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021b0:	4313      	orrs	r3, r2
 80021b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80021ba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80021be:	d106      	bne.n	80021ce <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80021c0:	4b32      	ldr	r3, [pc, #200]	@ (800228c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021c2:	68db      	ldr	r3, [r3, #12]
 80021c4:	4a31      	ldr	r2, [pc, #196]	@ (800228c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80021ca:	60d3      	str	r3, [r2, #12]
 80021cc:	e011      	b.n	80021f2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80021d2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80021d6:	d10c      	bne.n	80021f2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	3304      	adds	r3, #4
 80021dc:	2101      	movs	r1, #1
 80021de:	4618      	mov	r0, r3
 80021e0:	f000 f8c8 	bl	8002374 <RCCEx_PLLSAI1_Config>
 80021e4:	4603      	mov	r3, r0
 80021e6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80021e8:	7cfb      	ldrb	r3, [r7, #19]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d001      	beq.n	80021f2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80021ee:	7cfb      	ldrb	r3, [r7, #19]
 80021f0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d028      	beq.n	8002250 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80021fe:	4b23      	ldr	r3, [pc, #140]	@ (800228c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002200:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002204:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800220c:	491f      	ldr	r1, [pc, #124]	@ (800228c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800220e:	4313      	orrs	r3, r2
 8002210:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002218:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800221c:	d106      	bne.n	800222c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800221e:	4b1b      	ldr	r3, [pc, #108]	@ (800228c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002220:	68db      	ldr	r3, [r3, #12]
 8002222:	4a1a      	ldr	r2, [pc, #104]	@ (800228c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002224:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002228:	60d3      	str	r3, [r2, #12]
 800222a:	e011      	b.n	8002250 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002230:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002234:	d10c      	bne.n	8002250 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	3304      	adds	r3, #4
 800223a:	2101      	movs	r1, #1
 800223c:	4618      	mov	r0, r3
 800223e:	f000 f899 	bl	8002374 <RCCEx_PLLSAI1_Config>
 8002242:	4603      	mov	r3, r0
 8002244:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002246:	7cfb      	ldrb	r3, [r7, #19]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d001      	beq.n	8002250 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800224c:	7cfb      	ldrb	r3, [r7, #19]
 800224e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002258:	2b00      	cmp	r3, #0
 800225a:	d02b      	beq.n	80022b4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800225c:	4b0b      	ldr	r3, [pc, #44]	@ (800228c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800225e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002262:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800226a:	4908      	ldr	r1, [pc, #32]	@ (800228c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800226c:	4313      	orrs	r3, r2
 800226e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002276:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800227a:	d109      	bne.n	8002290 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800227c:	4b03      	ldr	r3, [pc, #12]	@ (800228c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	4a02      	ldr	r2, [pc, #8]	@ (800228c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002282:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002286:	60d3      	str	r3, [r2, #12]
 8002288:	e014      	b.n	80022b4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800228a:	bf00      	nop
 800228c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002294:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002298:	d10c      	bne.n	80022b4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	3304      	adds	r3, #4
 800229e:	2101      	movs	r1, #1
 80022a0:	4618      	mov	r0, r3
 80022a2:	f000 f867 	bl	8002374 <RCCEx_PLLSAI1_Config>
 80022a6:	4603      	mov	r3, r0
 80022a8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80022aa:	7cfb      	ldrb	r3, [r7, #19]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d001      	beq.n	80022b4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80022b0:	7cfb      	ldrb	r3, [r7, #19]
 80022b2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d02f      	beq.n	8002320 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80022c0:	4b2b      	ldr	r3, [pc, #172]	@ (8002370 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80022c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022c6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80022ce:	4928      	ldr	r1, [pc, #160]	@ (8002370 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80022d0:	4313      	orrs	r3, r2
 80022d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80022da:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80022de:	d10d      	bne.n	80022fc <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	3304      	adds	r3, #4
 80022e4:	2102      	movs	r1, #2
 80022e6:	4618      	mov	r0, r3
 80022e8:	f000 f844 	bl	8002374 <RCCEx_PLLSAI1_Config>
 80022ec:	4603      	mov	r3, r0
 80022ee:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80022f0:	7cfb      	ldrb	r3, [r7, #19]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d014      	beq.n	8002320 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80022f6:	7cfb      	ldrb	r3, [r7, #19]
 80022f8:	74bb      	strb	r3, [r7, #18]
 80022fa:	e011      	b.n	8002320 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002300:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002304:	d10c      	bne.n	8002320 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	3320      	adds	r3, #32
 800230a:	2102      	movs	r1, #2
 800230c:	4618      	mov	r0, r3
 800230e:	f000 f925 	bl	800255c <RCCEx_PLLSAI2_Config>
 8002312:	4603      	mov	r3, r0
 8002314:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002316:	7cfb      	ldrb	r3, [r7, #19]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d001      	beq.n	8002320 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800231c:	7cfb      	ldrb	r3, [r7, #19]
 800231e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002328:	2b00      	cmp	r3, #0
 800232a:	d00a      	beq.n	8002342 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800232c:	4b10      	ldr	r3, [pc, #64]	@ (8002370 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800232e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002332:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800233a:	490d      	ldr	r1, [pc, #52]	@ (8002370 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800233c:	4313      	orrs	r3, r2
 800233e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800234a:	2b00      	cmp	r3, #0
 800234c:	d00b      	beq.n	8002366 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800234e:	4b08      	ldr	r3, [pc, #32]	@ (8002370 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002350:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002354:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800235e:	4904      	ldr	r1, [pc, #16]	@ (8002370 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002360:	4313      	orrs	r3, r2
 8002362:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002366:	7cbb      	ldrb	r3, [r7, #18]
}
 8002368:	4618      	mov	r0, r3
 800236a:	3718      	adds	r7, #24
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}
 8002370:	40021000 	.word	0x40021000

08002374 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b084      	sub	sp, #16
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
 800237c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800237e:	2300      	movs	r3, #0
 8002380:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002382:	4b75      	ldr	r3, [pc, #468]	@ (8002558 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002384:	68db      	ldr	r3, [r3, #12]
 8002386:	f003 0303 	and.w	r3, r3, #3
 800238a:	2b00      	cmp	r3, #0
 800238c:	d018      	beq.n	80023c0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800238e:	4b72      	ldr	r3, [pc, #456]	@ (8002558 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002390:	68db      	ldr	r3, [r3, #12]
 8002392:	f003 0203 	and.w	r2, r3, #3
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	429a      	cmp	r2, r3
 800239c:	d10d      	bne.n	80023ba <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
       ||
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d009      	beq.n	80023ba <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80023a6:	4b6c      	ldr	r3, [pc, #432]	@ (8002558 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023a8:	68db      	ldr	r3, [r3, #12]
 80023aa:	091b      	lsrs	r3, r3, #4
 80023ac:	f003 0307 	and.w	r3, r3, #7
 80023b0:	1c5a      	adds	r2, r3, #1
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	685b      	ldr	r3, [r3, #4]
       ||
 80023b6:	429a      	cmp	r2, r3
 80023b8:	d047      	beq.n	800244a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	73fb      	strb	r3, [r7, #15]
 80023be:	e044      	b.n	800244a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	2b03      	cmp	r3, #3
 80023c6:	d018      	beq.n	80023fa <RCCEx_PLLSAI1_Config+0x86>
 80023c8:	2b03      	cmp	r3, #3
 80023ca:	d825      	bhi.n	8002418 <RCCEx_PLLSAI1_Config+0xa4>
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	d002      	beq.n	80023d6 <RCCEx_PLLSAI1_Config+0x62>
 80023d0:	2b02      	cmp	r3, #2
 80023d2:	d009      	beq.n	80023e8 <RCCEx_PLLSAI1_Config+0x74>
 80023d4:	e020      	b.n	8002418 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80023d6:	4b60      	ldr	r3, [pc, #384]	@ (8002558 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f003 0302 	and.w	r3, r3, #2
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d11d      	bne.n	800241e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023e6:	e01a      	b.n	800241e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80023e8:	4b5b      	ldr	r3, [pc, #364]	@ (8002558 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d116      	bne.n	8002422 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80023f4:	2301      	movs	r3, #1
 80023f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023f8:	e013      	b.n	8002422 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80023fa:	4b57      	ldr	r3, [pc, #348]	@ (8002558 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002402:	2b00      	cmp	r3, #0
 8002404:	d10f      	bne.n	8002426 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002406:	4b54      	ldr	r3, [pc, #336]	@ (8002558 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800240e:	2b00      	cmp	r3, #0
 8002410:	d109      	bne.n	8002426 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002416:	e006      	b.n	8002426 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	73fb      	strb	r3, [r7, #15]
      break;
 800241c:	e004      	b.n	8002428 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800241e:	bf00      	nop
 8002420:	e002      	b.n	8002428 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002422:	bf00      	nop
 8002424:	e000      	b.n	8002428 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002426:	bf00      	nop
    }

    if(status == HAL_OK)
 8002428:	7bfb      	ldrb	r3, [r7, #15]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d10d      	bne.n	800244a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800242e:	4b4a      	ldr	r3, [pc, #296]	@ (8002558 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002430:	68db      	ldr	r3, [r3, #12]
 8002432:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6819      	ldr	r1, [r3, #0]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	3b01      	subs	r3, #1
 8002440:	011b      	lsls	r3, r3, #4
 8002442:	430b      	orrs	r3, r1
 8002444:	4944      	ldr	r1, [pc, #272]	@ (8002558 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002446:	4313      	orrs	r3, r2
 8002448:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800244a:	7bfb      	ldrb	r3, [r7, #15]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d17d      	bne.n	800254c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002450:	4b41      	ldr	r3, [pc, #260]	@ (8002558 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a40      	ldr	r2, [pc, #256]	@ (8002558 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002456:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800245a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800245c:	f7fe fb6e 	bl	8000b3c <HAL_GetTick>
 8002460:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002462:	e009      	b.n	8002478 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002464:	f7fe fb6a 	bl	8000b3c <HAL_GetTick>
 8002468:	4602      	mov	r2, r0
 800246a:	68bb      	ldr	r3, [r7, #8]
 800246c:	1ad3      	subs	r3, r2, r3
 800246e:	2b02      	cmp	r3, #2
 8002470:	d902      	bls.n	8002478 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002472:	2303      	movs	r3, #3
 8002474:	73fb      	strb	r3, [r7, #15]
        break;
 8002476:	e005      	b.n	8002484 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002478:	4b37      	ldr	r3, [pc, #220]	@ (8002558 <RCCEx_PLLSAI1_Config+0x1e4>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002480:	2b00      	cmp	r3, #0
 8002482:	d1ef      	bne.n	8002464 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002484:	7bfb      	ldrb	r3, [r7, #15]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d160      	bne.n	800254c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d111      	bne.n	80024b4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002490:	4b31      	ldr	r3, [pc, #196]	@ (8002558 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002492:	691b      	ldr	r3, [r3, #16]
 8002494:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002498:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800249c:	687a      	ldr	r2, [r7, #4]
 800249e:	6892      	ldr	r2, [r2, #8]
 80024a0:	0211      	lsls	r1, r2, #8
 80024a2:	687a      	ldr	r2, [r7, #4]
 80024a4:	68d2      	ldr	r2, [r2, #12]
 80024a6:	0912      	lsrs	r2, r2, #4
 80024a8:	0452      	lsls	r2, r2, #17
 80024aa:	430a      	orrs	r2, r1
 80024ac:	492a      	ldr	r1, [pc, #168]	@ (8002558 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024ae:	4313      	orrs	r3, r2
 80024b0:	610b      	str	r3, [r1, #16]
 80024b2:	e027      	b.n	8002504 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	2b01      	cmp	r3, #1
 80024b8:	d112      	bne.n	80024e0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80024ba:	4b27      	ldr	r3, [pc, #156]	@ (8002558 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024bc:	691b      	ldr	r3, [r3, #16]
 80024be:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80024c2:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80024c6:	687a      	ldr	r2, [r7, #4]
 80024c8:	6892      	ldr	r2, [r2, #8]
 80024ca:	0211      	lsls	r1, r2, #8
 80024cc:	687a      	ldr	r2, [r7, #4]
 80024ce:	6912      	ldr	r2, [r2, #16]
 80024d0:	0852      	lsrs	r2, r2, #1
 80024d2:	3a01      	subs	r2, #1
 80024d4:	0552      	lsls	r2, r2, #21
 80024d6:	430a      	orrs	r2, r1
 80024d8:	491f      	ldr	r1, [pc, #124]	@ (8002558 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024da:	4313      	orrs	r3, r2
 80024dc:	610b      	str	r3, [r1, #16]
 80024de:	e011      	b.n	8002504 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80024e0:	4b1d      	ldr	r3, [pc, #116]	@ (8002558 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024e2:	691b      	ldr	r3, [r3, #16]
 80024e4:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80024e8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80024ec:	687a      	ldr	r2, [r7, #4]
 80024ee:	6892      	ldr	r2, [r2, #8]
 80024f0:	0211      	lsls	r1, r2, #8
 80024f2:	687a      	ldr	r2, [r7, #4]
 80024f4:	6952      	ldr	r2, [r2, #20]
 80024f6:	0852      	lsrs	r2, r2, #1
 80024f8:	3a01      	subs	r2, #1
 80024fa:	0652      	lsls	r2, r2, #25
 80024fc:	430a      	orrs	r2, r1
 80024fe:	4916      	ldr	r1, [pc, #88]	@ (8002558 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002500:	4313      	orrs	r3, r2
 8002502:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002504:	4b14      	ldr	r3, [pc, #80]	@ (8002558 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a13      	ldr	r2, [pc, #76]	@ (8002558 <RCCEx_PLLSAI1_Config+0x1e4>)
 800250a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800250e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002510:	f7fe fb14 	bl	8000b3c <HAL_GetTick>
 8002514:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002516:	e009      	b.n	800252c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002518:	f7fe fb10 	bl	8000b3c <HAL_GetTick>
 800251c:	4602      	mov	r2, r0
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	1ad3      	subs	r3, r2, r3
 8002522:	2b02      	cmp	r3, #2
 8002524:	d902      	bls.n	800252c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002526:	2303      	movs	r3, #3
 8002528:	73fb      	strb	r3, [r7, #15]
          break;
 800252a:	e005      	b.n	8002538 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800252c:	4b0a      	ldr	r3, [pc, #40]	@ (8002558 <RCCEx_PLLSAI1_Config+0x1e4>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002534:	2b00      	cmp	r3, #0
 8002536:	d0ef      	beq.n	8002518 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002538:	7bfb      	ldrb	r3, [r7, #15]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d106      	bne.n	800254c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800253e:	4b06      	ldr	r3, [pc, #24]	@ (8002558 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002540:	691a      	ldr	r2, [r3, #16]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	699b      	ldr	r3, [r3, #24]
 8002546:	4904      	ldr	r1, [pc, #16]	@ (8002558 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002548:	4313      	orrs	r3, r2
 800254a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800254c:	7bfb      	ldrb	r3, [r7, #15]
}
 800254e:	4618      	mov	r0, r3
 8002550:	3710      	adds	r7, #16
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	40021000 	.word	0x40021000

0800255c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b084      	sub	sp, #16
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
 8002564:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002566:	2300      	movs	r3, #0
 8002568:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800256a:	4b6a      	ldr	r3, [pc, #424]	@ (8002714 <RCCEx_PLLSAI2_Config+0x1b8>)
 800256c:	68db      	ldr	r3, [r3, #12]
 800256e:	f003 0303 	and.w	r3, r3, #3
 8002572:	2b00      	cmp	r3, #0
 8002574:	d018      	beq.n	80025a8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002576:	4b67      	ldr	r3, [pc, #412]	@ (8002714 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002578:	68db      	ldr	r3, [r3, #12]
 800257a:	f003 0203 	and.w	r2, r3, #3
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	429a      	cmp	r2, r3
 8002584:	d10d      	bne.n	80025a2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
       ||
 800258a:	2b00      	cmp	r3, #0
 800258c:	d009      	beq.n	80025a2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800258e:	4b61      	ldr	r3, [pc, #388]	@ (8002714 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002590:	68db      	ldr	r3, [r3, #12]
 8002592:	091b      	lsrs	r3, r3, #4
 8002594:	f003 0307 	and.w	r3, r3, #7
 8002598:	1c5a      	adds	r2, r3, #1
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	685b      	ldr	r3, [r3, #4]
       ||
 800259e:	429a      	cmp	r2, r3
 80025a0:	d047      	beq.n	8002632 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	73fb      	strb	r3, [r7, #15]
 80025a6:	e044      	b.n	8002632 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	2b03      	cmp	r3, #3
 80025ae:	d018      	beq.n	80025e2 <RCCEx_PLLSAI2_Config+0x86>
 80025b0:	2b03      	cmp	r3, #3
 80025b2:	d825      	bhi.n	8002600 <RCCEx_PLLSAI2_Config+0xa4>
 80025b4:	2b01      	cmp	r3, #1
 80025b6:	d002      	beq.n	80025be <RCCEx_PLLSAI2_Config+0x62>
 80025b8:	2b02      	cmp	r3, #2
 80025ba:	d009      	beq.n	80025d0 <RCCEx_PLLSAI2_Config+0x74>
 80025bc:	e020      	b.n	8002600 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80025be:	4b55      	ldr	r3, [pc, #340]	@ (8002714 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f003 0302 	and.w	r3, r3, #2
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d11d      	bne.n	8002606 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80025ca:	2301      	movs	r3, #1
 80025cc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025ce:	e01a      	b.n	8002606 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80025d0:	4b50      	ldr	r3, [pc, #320]	@ (8002714 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d116      	bne.n	800260a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80025dc:	2301      	movs	r3, #1
 80025de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025e0:	e013      	b.n	800260a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80025e2:	4b4c      	ldr	r3, [pc, #304]	@ (8002714 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d10f      	bne.n	800260e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80025ee:	4b49      	ldr	r3, [pc, #292]	@ (8002714 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d109      	bne.n	800260e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80025fe:	e006      	b.n	800260e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002600:	2301      	movs	r3, #1
 8002602:	73fb      	strb	r3, [r7, #15]
      break;
 8002604:	e004      	b.n	8002610 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002606:	bf00      	nop
 8002608:	e002      	b.n	8002610 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800260a:	bf00      	nop
 800260c:	e000      	b.n	8002610 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800260e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002610:	7bfb      	ldrb	r3, [r7, #15]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d10d      	bne.n	8002632 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002616:	4b3f      	ldr	r3, [pc, #252]	@ (8002714 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002618:	68db      	ldr	r3, [r3, #12]
 800261a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6819      	ldr	r1, [r3, #0]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	3b01      	subs	r3, #1
 8002628:	011b      	lsls	r3, r3, #4
 800262a:	430b      	orrs	r3, r1
 800262c:	4939      	ldr	r1, [pc, #228]	@ (8002714 <RCCEx_PLLSAI2_Config+0x1b8>)
 800262e:	4313      	orrs	r3, r2
 8002630:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002632:	7bfb      	ldrb	r3, [r7, #15]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d167      	bne.n	8002708 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002638:	4b36      	ldr	r3, [pc, #216]	@ (8002714 <RCCEx_PLLSAI2_Config+0x1b8>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a35      	ldr	r2, [pc, #212]	@ (8002714 <RCCEx_PLLSAI2_Config+0x1b8>)
 800263e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002642:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002644:	f7fe fa7a 	bl	8000b3c <HAL_GetTick>
 8002648:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800264a:	e009      	b.n	8002660 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800264c:	f7fe fa76 	bl	8000b3c <HAL_GetTick>
 8002650:	4602      	mov	r2, r0
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	1ad3      	subs	r3, r2, r3
 8002656:	2b02      	cmp	r3, #2
 8002658:	d902      	bls.n	8002660 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800265a:	2303      	movs	r3, #3
 800265c:	73fb      	strb	r3, [r7, #15]
        break;
 800265e:	e005      	b.n	800266c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002660:	4b2c      	ldr	r3, [pc, #176]	@ (8002714 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002668:	2b00      	cmp	r3, #0
 800266a:	d1ef      	bne.n	800264c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800266c:	7bfb      	ldrb	r3, [r7, #15]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d14a      	bne.n	8002708 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d111      	bne.n	800269c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002678:	4b26      	ldr	r3, [pc, #152]	@ (8002714 <RCCEx_PLLSAI2_Config+0x1b8>)
 800267a:	695b      	ldr	r3, [r3, #20]
 800267c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002680:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002684:	687a      	ldr	r2, [r7, #4]
 8002686:	6892      	ldr	r2, [r2, #8]
 8002688:	0211      	lsls	r1, r2, #8
 800268a:	687a      	ldr	r2, [r7, #4]
 800268c:	68d2      	ldr	r2, [r2, #12]
 800268e:	0912      	lsrs	r2, r2, #4
 8002690:	0452      	lsls	r2, r2, #17
 8002692:	430a      	orrs	r2, r1
 8002694:	491f      	ldr	r1, [pc, #124]	@ (8002714 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002696:	4313      	orrs	r3, r2
 8002698:	614b      	str	r3, [r1, #20]
 800269a:	e011      	b.n	80026c0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800269c:	4b1d      	ldr	r3, [pc, #116]	@ (8002714 <RCCEx_PLLSAI2_Config+0x1b8>)
 800269e:	695b      	ldr	r3, [r3, #20]
 80026a0:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80026a4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80026a8:	687a      	ldr	r2, [r7, #4]
 80026aa:	6892      	ldr	r2, [r2, #8]
 80026ac:	0211      	lsls	r1, r2, #8
 80026ae:	687a      	ldr	r2, [r7, #4]
 80026b0:	6912      	ldr	r2, [r2, #16]
 80026b2:	0852      	lsrs	r2, r2, #1
 80026b4:	3a01      	subs	r2, #1
 80026b6:	0652      	lsls	r2, r2, #25
 80026b8:	430a      	orrs	r2, r1
 80026ba:	4916      	ldr	r1, [pc, #88]	@ (8002714 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026bc:	4313      	orrs	r3, r2
 80026be:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80026c0:	4b14      	ldr	r3, [pc, #80]	@ (8002714 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a13      	ldr	r2, [pc, #76]	@ (8002714 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80026ca:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026cc:	f7fe fa36 	bl	8000b3c <HAL_GetTick>
 80026d0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80026d2:	e009      	b.n	80026e8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80026d4:	f7fe fa32 	bl	8000b3c <HAL_GetTick>
 80026d8:	4602      	mov	r2, r0
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	1ad3      	subs	r3, r2, r3
 80026de:	2b02      	cmp	r3, #2
 80026e0:	d902      	bls.n	80026e8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80026e2:	2303      	movs	r3, #3
 80026e4:	73fb      	strb	r3, [r7, #15]
          break;
 80026e6:	e005      	b.n	80026f4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80026e8:	4b0a      	ldr	r3, [pc, #40]	@ (8002714 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d0ef      	beq.n	80026d4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80026f4:	7bfb      	ldrb	r3, [r7, #15]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d106      	bne.n	8002708 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80026fa:	4b06      	ldr	r3, [pc, #24]	@ (8002714 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026fc:	695a      	ldr	r2, [r3, #20]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	695b      	ldr	r3, [r3, #20]
 8002702:	4904      	ldr	r1, [pc, #16]	@ (8002714 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002704:	4313      	orrs	r3, r2
 8002706:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002708:	7bfb      	ldrb	r3, [r7, #15]
}
 800270a:	4618      	mov	r0, r3
 800270c:	3710      	adds	r7, #16
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	40021000 	.word	0x40021000

08002718 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b082      	sub	sp, #8
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d101      	bne.n	800272a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	e040      	b.n	80027ac <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800272e:	2b00      	cmp	r3, #0
 8002730:	d106      	bne.n	8002740 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2200      	movs	r2, #0
 8002736:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800273a:	6878      	ldr	r0, [r7, #4]
 800273c:	f7fe f8e8 	bl	8000910 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2224      	movs	r2, #36	@ 0x24
 8002744:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	681a      	ldr	r2, [r3, #0]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f022 0201 	bic.w	r2, r2, #1
 8002754:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800275a:	2b00      	cmp	r3, #0
 800275c:	d002      	beq.n	8002764 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	f000 fb6a 	bl	8002e38 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002764:	6878      	ldr	r0, [r7, #4]
 8002766:	f000 f8af 	bl	80028c8 <UART_SetConfig>
 800276a:	4603      	mov	r3, r0
 800276c:	2b01      	cmp	r3, #1
 800276e:	d101      	bne.n	8002774 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002770:	2301      	movs	r3, #1
 8002772:	e01b      	b.n	80027ac <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	685a      	ldr	r2, [r3, #4]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002782:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	689a      	ldr	r2, [r3, #8]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002792:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	681a      	ldr	r2, [r3, #0]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f042 0201 	orr.w	r2, r2, #1
 80027a2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80027a4:	6878      	ldr	r0, [r7, #4]
 80027a6:	f000 fbe9 	bl	8002f7c <UART_CheckIdleState>
 80027aa:	4603      	mov	r3, r0
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	3708      	adds	r7, #8
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}

080027b4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b08a      	sub	sp, #40	@ 0x28
 80027b8:	af02      	add	r7, sp, #8
 80027ba:	60f8      	str	r0, [r7, #12]
 80027bc:	60b9      	str	r1, [r7, #8]
 80027be:	603b      	str	r3, [r7, #0]
 80027c0:	4613      	mov	r3, r2
 80027c2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80027c8:	2b20      	cmp	r3, #32
 80027ca:	d177      	bne.n	80028bc <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80027cc:	68bb      	ldr	r3, [r7, #8]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d002      	beq.n	80027d8 <HAL_UART_Transmit+0x24>
 80027d2:	88fb      	ldrh	r3, [r7, #6]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d101      	bne.n	80027dc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80027d8:	2301      	movs	r3, #1
 80027da:	e070      	b.n	80028be <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	2200      	movs	r2, #0
 80027e0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	2221      	movs	r2, #33	@ 0x21
 80027e8:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80027ea:	f7fe f9a7 	bl	8000b3c <HAL_GetTick>
 80027ee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	88fa      	ldrh	r2, [r7, #6]
 80027f4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	88fa      	ldrh	r2, [r7, #6]
 80027fc:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002808:	d108      	bne.n	800281c <HAL_UART_Transmit+0x68>
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	691b      	ldr	r3, [r3, #16]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d104      	bne.n	800281c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002812:	2300      	movs	r3, #0
 8002814:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	61bb      	str	r3, [r7, #24]
 800281a:	e003      	b.n	8002824 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002820:	2300      	movs	r3, #0
 8002822:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002824:	e02f      	b.n	8002886 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	9300      	str	r3, [sp, #0]
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	2200      	movs	r2, #0
 800282e:	2180      	movs	r1, #128	@ 0x80
 8002830:	68f8      	ldr	r0, [r7, #12]
 8002832:	f000 fc4b 	bl	80030cc <UART_WaitOnFlagUntilTimeout>
 8002836:	4603      	mov	r3, r0
 8002838:	2b00      	cmp	r3, #0
 800283a:	d004      	beq.n	8002846 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	2220      	movs	r2, #32
 8002840:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8002842:	2303      	movs	r3, #3
 8002844:	e03b      	b.n	80028be <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8002846:	69fb      	ldr	r3, [r7, #28]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d10b      	bne.n	8002864 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800284c:	69bb      	ldr	r3, [r7, #24]
 800284e:	881a      	ldrh	r2, [r3, #0]
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002858:	b292      	uxth	r2, r2
 800285a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800285c:	69bb      	ldr	r3, [r7, #24]
 800285e:	3302      	adds	r3, #2
 8002860:	61bb      	str	r3, [r7, #24]
 8002862:	e007      	b.n	8002874 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002864:	69fb      	ldr	r3, [r7, #28]
 8002866:	781a      	ldrb	r2, [r3, #0]
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800286e:	69fb      	ldr	r3, [r7, #28]
 8002870:	3301      	adds	r3, #1
 8002872:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800287a:	b29b      	uxth	r3, r3
 800287c:	3b01      	subs	r3, #1
 800287e:	b29a      	uxth	r2, r3
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800288c:	b29b      	uxth	r3, r3
 800288e:	2b00      	cmp	r3, #0
 8002890:	d1c9      	bne.n	8002826 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	9300      	str	r3, [sp, #0]
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	2200      	movs	r2, #0
 800289a:	2140      	movs	r1, #64	@ 0x40
 800289c:	68f8      	ldr	r0, [r7, #12]
 800289e:	f000 fc15 	bl	80030cc <UART_WaitOnFlagUntilTimeout>
 80028a2:	4603      	mov	r3, r0
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d004      	beq.n	80028b2 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	2220      	movs	r2, #32
 80028ac:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80028ae:	2303      	movs	r3, #3
 80028b0:	e005      	b.n	80028be <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	2220      	movs	r2, #32
 80028b6:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80028b8:	2300      	movs	r3, #0
 80028ba:	e000      	b.n	80028be <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80028bc:	2302      	movs	r3, #2
  }
}
 80028be:	4618      	mov	r0, r3
 80028c0:	3720      	adds	r7, #32
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}
	...

080028c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80028c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80028cc:	b08a      	sub	sp, #40	@ 0x28
 80028ce:	af00      	add	r7, sp, #0
 80028d0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80028d2:	2300      	movs	r3, #0
 80028d4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	689a      	ldr	r2, [r3, #8]
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	691b      	ldr	r3, [r3, #16]
 80028e0:	431a      	orrs	r2, r3
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	695b      	ldr	r3, [r3, #20]
 80028e6:	431a      	orrs	r2, r3
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	69db      	ldr	r3, [r3, #28]
 80028ec:	4313      	orrs	r3, r2
 80028ee:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	681a      	ldr	r2, [r3, #0]
 80028f6:	4ba4      	ldr	r3, [pc, #656]	@ (8002b88 <UART_SetConfig+0x2c0>)
 80028f8:	4013      	ands	r3, r2
 80028fa:	68fa      	ldr	r2, [r7, #12]
 80028fc:	6812      	ldr	r2, [r2, #0]
 80028fe:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002900:	430b      	orrs	r3, r1
 8002902:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	68da      	ldr	r2, [r3, #12]
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	430a      	orrs	r2, r1
 8002918:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	699b      	ldr	r3, [r3, #24]
 800291e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a99      	ldr	r2, [pc, #612]	@ (8002b8c <UART_SetConfig+0x2c4>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d004      	beq.n	8002934 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	6a1b      	ldr	r3, [r3, #32]
 800292e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002930:	4313      	orrs	r3, r2
 8002932:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002944:	430a      	orrs	r2, r1
 8002946:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a90      	ldr	r2, [pc, #576]	@ (8002b90 <UART_SetConfig+0x2c8>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d126      	bne.n	80029a0 <UART_SetConfig+0xd8>
 8002952:	4b90      	ldr	r3, [pc, #576]	@ (8002b94 <UART_SetConfig+0x2cc>)
 8002954:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002958:	f003 0303 	and.w	r3, r3, #3
 800295c:	2b03      	cmp	r3, #3
 800295e:	d81b      	bhi.n	8002998 <UART_SetConfig+0xd0>
 8002960:	a201      	add	r2, pc, #4	@ (adr r2, 8002968 <UART_SetConfig+0xa0>)
 8002962:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002966:	bf00      	nop
 8002968:	08002979 	.word	0x08002979
 800296c:	08002989 	.word	0x08002989
 8002970:	08002981 	.word	0x08002981
 8002974:	08002991 	.word	0x08002991
 8002978:	2301      	movs	r3, #1
 800297a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800297e:	e116      	b.n	8002bae <UART_SetConfig+0x2e6>
 8002980:	2302      	movs	r3, #2
 8002982:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002986:	e112      	b.n	8002bae <UART_SetConfig+0x2e6>
 8002988:	2304      	movs	r3, #4
 800298a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800298e:	e10e      	b.n	8002bae <UART_SetConfig+0x2e6>
 8002990:	2308      	movs	r3, #8
 8002992:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002996:	e10a      	b.n	8002bae <UART_SetConfig+0x2e6>
 8002998:	2310      	movs	r3, #16
 800299a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800299e:	e106      	b.n	8002bae <UART_SetConfig+0x2e6>
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a7c      	ldr	r2, [pc, #496]	@ (8002b98 <UART_SetConfig+0x2d0>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d138      	bne.n	8002a1c <UART_SetConfig+0x154>
 80029aa:	4b7a      	ldr	r3, [pc, #488]	@ (8002b94 <UART_SetConfig+0x2cc>)
 80029ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029b0:	f003 030c 	and.w	r3, r3, #12
 80029b4:	2b0c      	cmp	r3, #12
 80029b6:	d82d      	bhi.n	8002a14 <UART_SetConfig+0x14c>
 80029b8:	a201      	add	r2, pc, #4	@ (adr r2, 80029c0 <UART_SetConfig+0xf8>)
 80029ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029be:	bf00      	nop
 80029c0:	080029f5 	.word	0x080029f5
 80029c4:	08002a15 	.word	0x08002a15
 80029c8:	08002a15 	.word	0x08002a15
 80029cc:	08002a15 	.word	0x08002a15
 80029d0:	08002a05 	.word	0x08002a05
 80029d4:	08002a15 	.word	0x08002a15
 80029d8:	08002a15 	.word	0x08002a15
 80029dc:	08002a15 	.word	0x08002a15
 80029e0:	080029fd 	.word	0x080029fd
 80029e4:	08002a15 	.word	0x08002a15
 80029e8:	08002a15 	.word	0x08002a15
 80029ec:	08002a15 	.word	0x08002a15
 80029f0:	08002a0d 	.word	0x08002a0d
 80029f4:	2300      	movs	r3, #0
 80029f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80029fa:	e0d8      	b.n	8002bae <UART_SetConfig+0x2e6>
 80029fc:	2302      	movs	r3, #2
 80029fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a02:	e0d4      	b.n	8002bae <UART_SetConfig+0x2e6>
 8002a04:	2304      	movs	r3, #4
 8002a06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a0a:	e0d0      	b.n	8002bae <UART_SetConfig+0x2e6>
 8002a0c:	2308      	movs	r3, #8
 8002a0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a12:	e0cc      	b.n	8002bae <UART_SetConfig+0x2e6>
 8002a14:	2310      	movs	r3, #16
 8002a16:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a1a:	e0c8      	b.n	8002bae <UART_SetConfig+0x2e6>
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a5e      	ldr	r2, [pc, #376]	@ (8002b9c <UART_SetConfig+0x2d4>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d125      	bne.n	8002a72 <UART_SetConfig+0x1aa>
 8002a26:	4b5b      	ldr	r3, [pc, #364]	@ (8002b94 <UART_SetConfig+0x2cc>)
 8002a28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a2c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002a30:	2b30      	cmp	r3, #48	@ 0x30
 8002a32:	d016      	beq.n	8002a62 <UART_SetConfig+0x19a>
 8002a34:	2b30      	cmp	r3, #48	@ 0x30
 8002a36:	d818      	bhi.n	8002a6a <UART_SetConfig+0x1a2>
 8002a38:	2b20      	cmp	r3, #32
 8002a3a:	d00a      	beq.n	8002a52 <UART_SetConfig+0x18a>
 8002a3c:	2b20      	cmp	r3, #32
 8002a3e:	d814      	bhi.n	8002a6a <UART_SetConfig+0x1a2>
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d002      	beq.n	8002a4a <UART_SetConfig+0x182>
 8002a44:	2b10      	cmp	r3, #16
 8002a46:	d008      	beq.n	8002a5a <UART_SetConfig+0x192>
 8002a48:	e00f      	b.n	8002a6a <UART_SetConfig+0x1a2>
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a50:	e0ad      	b.n	8002bae <UART_SetConfig+0x2e6>
 8002a52:	2302      	movs	r3, #2
 8002a54:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a58:	e0a9      	b.n	8002bae <UART_SetConfig+0x2e6>
 8002a5a:	2304      	movs	r3, #4
 8002a5c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a60:	e0a5      	b.n	8002bae <UART_SetConfig+0x2e6>
 8002a62:	2308      	movs	r3, #8
 8002a64:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a68:	e0a1      	b.n	8002bae <UART_SetConfig+0x2e6>
 8002a6a:	2310      	movs	r3, #16
 8002a6c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a70:	e09d      	b.n	8002bae <UART_SetConfig+0x2e6>
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a4a      	ldr	r2, [pc, #296]	@ (8002ba0 <UART_SetConfig+0x2d8>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d125      	bne.n	8002ac8 <UART_SetConfig+0x200>
 8002a7c:	4b45      	ldr	r3, [pc, #276]	@ (8002b94 <UART_SetConfig+0x2cc>)
 8002a7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a82:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002a86:	2bc0      	cmp	r3, #192	@ 0xc0
 8002a88:	d016      	beq.n	8002ab8 <UART_SetConfig+0x1f0>
 8002a8a:	2bc0      	cmp	r3, #192	@ 0xc0
 8002a8c:	d818      	bhi.n	8002ac0 <UART_SetConfig+0x1f8>
 8002a8e:	2b80      	cmp	r3, #128	@ 0x80
 8002a90:	d00a      	beq.n	8002aa8 <UART_SetConfig+0x1e0>
 8002a92:	2b80      	cmp	r3, #128	@ 0x80
 8002a94:	d814      	bhi.n	8002ac0 <UART_SetConfig+0x1f8>
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d002      	beq.n	8002aa0 <UART_SetConfig+0x1d8>
 8002a9a:	2b40      	cmp	r3, #64	@ 0x40
 8002a9c:	d008      	beq.n	8002ab0 <UART_SetConfig+0x1e8>
 8002a9e:	e00f      	b.n	8002ac0 <UART_SetConfig+0x1f8>
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002aa6:	e082      	b.n	8002bae <UART_SetConfig+0x2e6>
 8002aa8:	2302      	movs	r3, #2
 8002aaa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002aae:	e07e      	b.n	8002bae <UART_SetConfig+0x2e6>
 8002ab0:	2304      	movs	r3, #4
 8002ab2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002ab6:	e07a      	b.n	8002bae <UART_SetConfig+0x2e6>
 8002ab8:	2308      	movs	r3, #8
 8002aba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002abe:	e076      	b.n	8002bae <UART_SetConfig+0x2e6>
 8002ac0:	2310      	movs	r3, #16
 8002ac2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002ac6:	e072      	b.n	8002bae <UART_SetConfig+0x2e6>
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a35      	ldr	r2, [pc, #212]	@ (8002ba4 <UART_SetConfig+0x2dc>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d12a      	bne.n	8002b28 <UART_SetConfig+0x260>
 8002ad2:	4b30      	ldr	r3, [pc, #192]	@ (8002b94 <UART_SetConfig+0x2cc>)
 8002ad4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ad8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002adc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002ae0:	d01a      	beq.n	8002b18 <UART_SetConfig+0x250>
 8002ae2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002ae6:	d81b      	bhi.n	8002b20 <UART_SetConfig+0x258>
 8002ae8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002aec:	d00c      	beq.n	8002b08 <UART_SetConfig+0x240>
 8002aee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002af2:	d815      	bhi.n	8002b20 <UART_SetConfig+0x258>
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d003      	beq.n	8002b00 <UART_SetConfig+0x238>
 8002af8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002afc:	d008      	beq.n	8002b10 <UART_SetConfig+0x248>
 8002afe:	e00f      	b.n	8002b20 <UART_SetConfig+0x258>
 8002b00:	2300      	movs	r3, #0
 8002b02:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002b06:	e052      	b.n	8002bae <UART_SetConfig+0x2e6>
 8002b08:	2302      	movs	r3, #2
 8002b0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002b0e:	e04e      	b.n	8002bae <UART_SetConfig+0x2e6>
 8002b10:	2304      	movs	r3, #4
 8002b12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002b16:	e04a      	b.n	8002bae <UART_SetConfig+0x2e6>
 8002b18:	2308      	movs	r3, #8
 8002b1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002b1e:	e046      	b.n	8002bae <UART_SetConfig+0x2e6>
 8002b20:	2310      	movs	r3, #16
 8002b22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002b26:	e042      	b.n	8002bae <UART_SetConfig+0x2e6>
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a17      	ldr	r2, [pc, #92]	@ (8002b8c <UART_SetConfig+0x2c4>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d13a      	bne.n	8002ba8 <UART_SetConfig+0x2e0>
 8002b32:	4b18      	ldr	r3, [pc, #96]	@ (8002b94 <UART_SetConfig+0x2cc>)
 8002b34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b38:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002b3c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002b40:	d01a      	beq.n	8002b78 <UART_SetConfig+0x2b0>
 8002b42:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002b46:	d81b      	bhi.n	8002b80 <UART_SetConfig+0x2b8>
 8002b48:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002b4c:	d00c      	beq.n	8002b68 <UART_SetConfig+0x2a0>
 8002b4e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002b52:	d815      	bhi.n	8002b80 <UART_SetConfig+0x2b8>
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d003      	beq.n	8002b60 <UART_SetConfig+0x298>
 8002b58:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b5c:	d008      	beq.n	8002b70 <UART_SetConfig+0x2a8>
 8002b5e:	e00f      	b.n	8002b80 <UART_SetConfig+0x2b8>
 8002b60:	2300      	movs	r3, #0
 8002b62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002b66:	e022      	b.n	8002bae <UART_SetConfig+0x2e6>
 8002b68:	2302      	movs	r3, #2
 8002b6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002b6e:	e01e      	b.n	8002bae <UART_SetConfig+0x2e6>
 8002b70:	2304      	movs	r3, #4
 8002b72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002b76:	e01a      	b.n	8002bae <UART_SetConfig+0x2e6>
 8002b78:	2308      	movs	r3, #8
 8002b7a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002b7e:	e016      	b.n	8002bae <UART_SetConfig+0x2e6>
 8002b80:	2310      	movs	r3, #16
 8002b82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002b86:	e012      	b.n	8002bae <UART_SetConfig+0x2e6>
 8002b88:	efff69f3 	.word	0xefff69f3
 8002b8c:	40008000 	.word	0x40008000
 8002b90:	40013800 	.word	0x40013800
 8002b94:	40021000 	.word	0x40021000
 8002b98:	40004400 	.word	0x40004400
 8002b9c:	40004800 	.word	0x40004800
 8002ba0:	40004c00 	.word	0x40004c00
 8002ba4:	40005000 	.word	0x40005000
 8002ba8:	2310      	movs	r3, #16
 8002baa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a9f      	ldr	r2, [pc, #636]	@ (8002e30 <UART_SetConfig+0x568>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d17a      	bne.n	8002cae <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002bb8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002bbc:	2b08      	cmp	r3, #8
 8002bbe:	d824      	bhi.n	8002c0a <UART_SetConfig+0x342>
 8002bc0:	a201      	add	r2, pc, #4	@ (adr r2, 8002bc8 <UART_SetConfig+0x300>)
 8002bc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bc6:	bf00      	nop
 8002bc8:	08002bed 	.word	0x08002bed
 8002bcc:	08002c0b 	.word	0x08002c0b
 8002bd0:	08002bf5 	.word	0x08002bf5
 8002bd4:	08002c0b 	.word	0x08002c0b
 8002bd8:	08002bfb 	.word	0x08002bfb
 8002bdc:	08002c0b 	.word	0x08002c0b
 8002be0:	08002c0b 	.word	0x08002c0b
 8002be4:	08002c0b 	.word	0x08002c0b
 8002be8:	08002c03 	.word	0x08002c03
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002bec:	f7ff f84c 	bl	8001c88 <HAL_RCC_GetPCLK1Freq>
 8002bf0:	61f8      	str	r0, [r7, #28]
        break;
 8002bf2:	e010      	b.n	8002c16 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002bf4:	4b8f      	ldr	r3, [pc, #572]	@ (8002e34 <UART_SetConfig+0x56c>)
 8002bf6:	61fb      	str	r3, [r7, #28]
        break;
 8002bf8:	e00d      	b.n	8002c16 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002bfa:	f7fe ffad 	bl	8001b58 <HAL_RCC_GetSysClockFreq>
 8002bfe:	61f8      	str	r0, [r7, #28]
        break;
 8002c00:	e009      	b.n	8002c16 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002c02:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002c06:	61fb      	str	r3, [r7, #28]
        break;
 8002c08:	e005      	b.n	8002c16 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8002c14:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002c16:	69fb      	ldr	r3, [r7, #28]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	f000 80fb 	beq.w	8002e14 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	685a      	ldr	r2, [r3, #4]
 8002c22:	4613      	mov	r3, r2
 8002c24:	005b      	lsls	r3, r3, #1
 8002c26:	4413      	add	r3, r2
 8002c28:	69fa      	ldr	r2, [r7, #28]
 8002c2a:	429a      	cmp	r2, r3
 8002c2c:	d305      	bcc.n	8002c3a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002c34:	69fa      	ldr	r2, [r7, #28]
 8002c36:	429a      	cmp	r2, r3
 8002c38:	d903      	bls.n	8002c42 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002c40:	e0e8      	b.n	8002e14 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002c42:	69fb      	ldr	r3, [r7, #28]
 8002c44:	2200      	movs	r2, #0
 8002c46:	461c      	mov	r4, r3
 8002c48:	4615      	mov	r5, r2
 8002c4a:	f04f 0200 	mov.w	r2, #0
 8002c4e:	f04f 0300 	mov.w	r3, #0
 8002c52:	022b      	lsls	r3, r5, #8
 8002c54:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002c58:	0222      	lsls	r2, r4, #8
 8002c5a:	68f9      	ldr	r1, [r7, #12]
 8002c5c:	6849      	ldr	r1, [r1, #4]
 8002c5e:	0849      	lsrs	r1, r1, #1
 8002c60:	2000      	movs	r0, #0
 8002c62:	4688      	mov	r8, r1
 8002c64:	4681      	mov	r9, r0
 8002c66:	eb12 0a08 	adds.w	sl, r2, r8
 8002c6a:	eb43 0b09 	adc.w	fp, r3, r9
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	2200      	movs	r2, #0
 8002c74:	603b      	str	r3, [r7, #0]
 8002c76:	607a      	str	r2, [r7, #4]
 8002c78:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002c7c:	4650      	mov	r0, sl
 8002c7e:	4659      	mov	r1, fp
 8002c80:	f7fd fb52 	bl	8000328 <__aeabi_uldivmod>
 8002c84:	4602      	mov	r2, r0
 8002c86:	460b      	mov	r3, r1
 8002c88:	4613      	mov	r3, r2
 8002c8a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002c8c:	69bb      	ldr	r3, [r7, #24]
 8002c8e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002c92:	d308      	bcc.n	8002ca6 <UART_SetConfig+0x3de>
 8002c94:	69bb      	ldr	r3, [r7, #24]
 8002c96:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002c9a:	d204      	bcs.n	8002ca6 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	69ba      	ldr	r2, [r7, #24]
 8002ca2:	60da      	str	r2, [r3, #12]
 8002ca4:	e0b6      	b.n	8002e14 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002cac:	e0b2      	b.n	8002e14 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	69db      	ldr	r3, [r3, #28]
 8002cb2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002cb6:	d15e      	bne.n	8002d76 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8002cb8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002cbc:	2b08      	cmp	r3, #8
 8002cbe:	d828      	bhi.n	8002d12 <UART_SetConfig+0x44a>
 8002cc0:	a201      	add	r2, pc, #4	@ (adr r2, 8002cc8 <UART_SetConfig+0x400>)
 8002cc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cc6:	bf00      	nop
 8002cc8:	08002ced 	.word	0x08002ced
 8002ccc:	08002cf5 	.word	0x08002cf5
 8002cd0:	08002cfd 	.word	0x08002cfd
 8002cd4:	08002d13 	.word	0x08002d13
 8002cd8:	08002d03 	.word	0x08002d03
 8002cdc:	08002d13 	.word	0x08002d13
 8002ce0:	08002d13 	.word	0x08002d13
 8002ce4:	08002d13 	.word	0x08002d13
 8002ce8:	08002d0b 	.word	0x08002d0b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002cec:	f7fe ffcc 	bl	8001c88 <HAL_RCC_GetPCLK1Freq>
 8002cf0:	61f8      	str	r0, [r7, #28]
        break;
 8002cf2:	e014      	b.n	8002d1e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002cf4:	f7fe ffde 	bl	8001cb4 <HAL_RCC_GetPCLK2Freq>
 8002cf8:	61f8      	str	r0, [r7, #28]
        break;
 8002cfa:	e010      	b.n	8002d1e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002cfc:	4b4d      	ldr	r3, [pc, #308]	@ (8002e34 <UART_SetConfig+0x56c>)
 8002cfe:	61fb      	str	r3, [r7, #28]
        break;
 8002d00:	e00d      	b.n	8002d1e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002d02:	f7fe ff29 	bl	8001b58 <HAL_RCC_GetSysClockFreq>
 8002d06:	61f8      	str	r0, [r7, #28]
        break;
 8002d08:	e009      	b.n	8002d1e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002d0a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002d0e:	61fb      	str	r3, [r7, #28]
        break;
 8002d10:	e005      	b.n	8002d1e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8002d12:	2300      	movs	r3, #0
 8002d14:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8002d1c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002d1e:	69fb      	ldr	r3, [r7, #28]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d077      	beq.n	8002e14 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002d24:	69fb      	ldr	r3, [r7, #28]
 8002d26:	005a      	lsls	r2, r3, #1
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	085b      	lsrs	r3, r3, #1
 8002d2e:	441a      	add	r2, r3
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d38:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002d3a:	69bb      	ldr	r3, [r7, #24]
 8002d3c:	2b0f      	cmp	r3, #15
 8002d3e:	d916      	bls.n	8002d6e <UART_SetConfig+0x4a6>
 8002d40:	69bb      	ldr	r3, [r7, #24]
 8002d42:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d46:	d212      	bcs.n	8002d6e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002d48:	69bb      	ldr	r3, [r7, #24]
 8002d4a:	b29b      	uxth	r3, r3
 8002d4c:	f023 030f 	bic.w	r3, r3, #15
 8002d50:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002d52:	69bb      	ldr	r3, [r7, #24]
 8002d54:	085b      	lsrs	r3, r3, #1
 8002d56:	b29b      	uxth	r3, r3
 8002d58:	f003 0307 	and.w	r3, r3, #7
 8002d5c:	b29a      	uxth	r2, r3
 8002d5e:	8afb      	ldrh	r3, [r7, #22]
 8002d60:	4313      	orrs	r3, r2
 8002d62:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	8afa      	ldrh	r2, [r7, #22]
 8002d6a:	60da      	str	r2, [r3, #12]
 8002d6c:	e052      	b.n	8002e14 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002d74:	e04e      	b.n	8002e14 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002d76:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002d7a:	2b08      	cmp	r3, #8
 8002d7c:	d827      	bhi.n	8002dce <UART_SetConfig+0x506>
 8002d7e:	a201      	add	r2, pc, #4	@ (adr r2, 8002d84 <UART_SetConfig+0x4bc>)
 8002d80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d84:	08002da9 	.word	0x08002da9
 8002d88:	08002db1 	.word	0x08002db1
 8002d8c:	08002db9 	.word	0x08002db9
 8002d90:	08002dcf 	.word	0x08002dcf
 8002d94:	08002dbf 	.word	0x08002dbf
 8002d98:	08002dcf 	.word	0x08002dcf
 8002d9c:	08002dcf 	.word	0x08002dcf
 8002da0:	08002dcf 	.word	0x08002dcf
 8002da4:	08002dc7 	.word	0x08002dc7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002da8:	f7fe ff6e 	bl	8001c88 <HAL_RCC_GetPCLK1Freq>
 8002dac:	61f8      	str	r0, [r7, #28]
        break;
 8002dae:	e014      	b.n	8002dda <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002db0:	f7fe ff80 	bl	8001cb4 <HAL_RCC_GetPCLK2Freq>
 8002db4:	61f8      	str	r0, [r7, #28]
        break;
 8002db6:	e010      	b.n	8002dda <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002db8:	4b1e      	ldr	r3, [pc, #120]	@ (8002e34 <UART_SetConfig+0x56c>)
 8002dba:	61fb      	str	r3, [r7, #28]
        break;
 8002dbc:	e00d      	b.n	8002dda <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002dbe:	f7fe fecb 	bl	8001b58 <HAL_RCC_GetSysClockFreq>
 8002dc2:	61f8      	str	r0, [r7, #28]
        break;
 8002dc4:	e009      	b.n	8002dda <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002dc6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002dca:	61fb      	str	r3, [r7, #28]
        break;
 8002dcc:	e005      	b.n	8002dda <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8002dd8:	bf00      	nop
    }

    if (pclk != 0U)
 8002dda:	69fb      	ldr	r3, [r7, #28]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d019      	beq.n	8002e14 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	085a      	lsrs	r2, r3, #1
 8002de6:	69fb      	ldr	r3, [r7, #28]
 8002de8:	441a      	add	r2, r3
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	fbb2 f3f3 	udiv	r3, r2, r3
 8002df2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002df4:	69bb      	ldr	r3, [r7, #24]
 8002df6:	2b0f      	cmp	r3, #15
 8002df8:	d909      	bls.n	8002e0e <UART_SetConfig+0x546>
 8002dfa:	69bb      	ldr	r3, [r7, #24]
 8002dfc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e00:	d205      	bcs.n	8002e0e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002e02:	69bb      	ldr	r3, [r7, #24]
 8002e04:	b29a      	uxth	r2, r3
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	60da      	str	r2, [r3, #12]
 8002e0c:	e002      	b.n	8002e14 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	2200      	movs	r2, #0
 8002e18:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8002e20:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	3728      	adds	r7, #40	@ 0x28
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e2e:	bf00      	nop
 8002e30:	40008000 	.word	0x40008000
 8002e34:	00f42400 	.word	0x00f42400

08002e38 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b083      	sub	sp, #12
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e44:	f003 0308 	and.w	r3, r3, #8
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d00a      	beq.n	8002e62 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	430a      	orrs	r2, r1
 8002e60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e66:	f003 0301 	and.w	r3, r3, #1
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d00a      	beq.n	8002e84 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	430a      	orrs	r2, r1
 8002e82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e88:	f003 0302 	and.w	r3, r3, #2
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d00a      	beq.n	8002ea6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	430a      	orrs	r2, r1
 8002ea4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eaa:	f003 0304 	and.w	r3, r3, #4
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d00a      	beq.n	8002ec8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	430a      	orrs	r2, r1
 8002ec6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ecc:	f003 0310 	and.w	r3, r3, #16
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d00a      	beq.n	8002eea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	430a      	orrs	r2, r1
 8002ee8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eee:	f003 0320 	and.w	r3, r3, #32
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d00a      	beq.n	8002f0c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	430a      	orrs	r2, r1
 8002f0a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d01a      	beq.n	8002f4e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	430a      	orrs	r2, r1
 8002f2c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f32:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002f36:	d10a      	bne.n	8002f4e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	430a      	orrs	r2, r1
 8002f4c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d00a      	beq.n	8002f70 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	430a      	orrs	r2, r1
 8002f6e:	605a      	str	r2, [r3, #4]
  }
}
 8002f70:	bf00      	nop
 8002f72:	370c      	adds	r7, #12
 8002f74:	46bd      	mov	sp, r7
 8002f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7a:	4770      	bx	lr

08002f7c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b098      	sub	sp, #96	@ 0x60
 8002f80:	af02      	add	r7, sp, #8
 8002f82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2200      	movs	r2, #0
 8002f88:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002f8c:	f7fd fdd6 	bl	8000b3c <HAL_GetTick>
 8002f90:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f003 0308 	and.w	r3, r3, #8
 8002f9c:	2b08      	cmp	r3, #8
 8002f9e:	d12e      	bne.n	8002ffe <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002fa0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002fa4:	9300      	str	r3, [sp, #0]
 8002fa6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fa8:	2200      	movs	r2, #0
 8002faa:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8002fae:	6878      	ldr	r0, [r7, #4]
 8002fb0:	f000 f88c 	bl	80030cc <UART_WaitOnFlagUntilTimeout>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d021      	beq.n	8002ffe <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fc2:	e853 3f00 	ldrex	r3, [r3]
 8002fc6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002fc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002fce:	653b      	str	r3, [r7, #80]	@ 0x50
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	461a      	mov	r2, r3
 8002fd6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002fd8:	647b      	str	r3, [r7, #68]	@ 0x44
 8002fda:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fdc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002fde:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002fe0:	e841 2300 	strex	r3, r2, [r1]
 8002fe4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002fe6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d1e6      	bne.n	8002fba <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2220      	movs	r2, #32
 8002ff0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002ffa:	2303      	movs	r3, #3
 8002ffc:	e062      	b.n	80030c4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f003 0304 	and.w	r3, r3, #4
 8003008:	2b04      	cmp	r3, #4
 800300a:	d149      	bne.n	80030a0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800300c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003010:	9300      	str	r3, [sp, #0]
 8003012:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003014:	2200      	movs	r2, #0
 8003016:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800301a:	6878      	ldr	r0, [r7, #4]
 800301c:	f000 f856 	bl	80030cc <UART_WaitOnFlagUntilTimeout>
 8003020:	4603      	mov	r3, r0
 8003022:	2b00      	cmp	r3, #0
 8003024:	d03c      	beq.n	80030a0 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800302c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800302e:	e853 3f00 	ldrex	r3, [r3]
 8003032:	623b      	str	r3, [r7, #32]
   return(result);
 8003034:	6a3b      	ldr	r3, [r7, #32]
 8003036:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800303a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	461a      	mov	r2, r3
 8003042:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003044:	633b      	str	r3, [r7, #48]	@ 0x30
 8003046:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003048:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800304a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800304c:	e841 2300 	strex	r3, r2, [r1]
 8003050:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003052:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003054:	2b00      	cmp	r3, #0
 8003056:	d1e6      	bne.n	8003026 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	3308      	adds	r3, #8
 800305e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	e853 3f00 	ldrex	r3, [r3]
 8003066:	60fb      	str	r3, [r7, #12]
   return(result);
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	f023 0301 	bic.w	r3, r3, #1
 800306e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	3308      	adds	r3, #8
 8003076:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003078:	61fa      	str	r2, [r7, #28]
 800307a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800307c:	69b9      	ldr	r1, [r7, #24]
 800307e:	69fa      	ldr	r2, [r7, #28]
 8003080:	e841 2300 	strex	r3, r2, [r1]
 8003084:	617b      	str	r3, [r7, #20]
   return(result);
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d1e5      	bne.n	8003058 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2220      	movs	r2, #32
 8003090:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2200      	movs	r2, #0
 8003098:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800309c:	2303      	movs	r3, #3
 800309e:	e011      	b.n	80030c4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2220      	movs	r2, #32
 80030a4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2220      	movs	r2, #32
 80030aa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2200      	movs	r2, #0
 80030b2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2200      	movs	r2, #0
 80030b8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2200      	movs	r2, #0
 80030be:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80030c2:	2300      	movs	r3, #0
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	3758      	adds	r7, #88	@ 0x58
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}

080030cc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b084      	sub	sp, #16
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	60f8      	str	r0, [r7, #12]
 80030d4:	60b9      	str	r1, [r7, #8]
 80030d6:	603b      	str	r3, [r7, #0]
 80030d8:	4613      	mov	r3, r2
 80030da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030dc:	e04f      	b.n	800317e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030de:	69bb      	ldr	r3, [r7, #24]
 80030e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030e4:	d04b      	beq.n	800317e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030e6:	f7fd fd29 	bl	8000b3c <HAL_GetTick>
 80030ea:	4602      	mov	r2, r0
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	1ad3      	subs	r3, r2, r3
 80030f0:	69ba      	ldr	r2, [r7, #24]
 80030f2:	429a      	cmp	r2, r3
 80030f4:	d302      	bcc.n	80030fc <UART_WaitOnFlagUntilTimeout+0x30>
 80030f6:	69bb      	ldr	r3, [r7, #24]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d101      	bne.n	8003100 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80030fc:	2303      	movs	r3, #3
 80030fe:	e04e      	b.n	800319e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f003 0304 	and.w	r3, r3, #4
 800310a:	2b00      	cmp	r3, #0
 800310c:	d037      	beq.n	800317e <UART_WaitOnFlagUntilTimeout+0xb2>
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	2b80      	cmp	r3, #128	@ 0x80
 8003112:	d034      	beq.n	800317e <UART_WaitOnFlagUntilTimeout+0xb2>
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	2b40      	cmp	r3, #64	@ 0x40
 8003118:	d031      	beq.n	800317e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	69db      	ldr	r3, [r3, #28]
 8003120:	f003 0308 	and.w	r3, r3, #8
 8003124:	2b08      	cmp	r3, #8
 8003126:	d110      	bne.n	800314a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	2208      	movs	r2, #8
 800312e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003130:	68f8      	ldr	r0, [r7, #12]
 8003132:	f000 f838 	bl	80031a6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	2208      	movs	r2, #8
 800313a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	2200      	movs	r2, #0
 8003142:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	e029      	b.n	800319e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	69db      	ldr	r3, [r3, #28]
 8003150:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003154:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003158:	d111      	bne.n	800317e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003162:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003164:	68f8      	ldr	r0, [r7, #12]
 8003166:	f000 f81e 	bl	80031a6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	2220      	movs	r2, #32
 800316e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	2200      	movs	r2, #0
 8003176:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800317a:	2303      	movs	r3, #3
 800317c:	e00f      	b.n	800319e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	69da      	ldr	r2, [r3, #28]
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	4013      	ands	r3, r2
 8003188:	68ba      	ldr	r2, [r7, #8]
 800318a:	429a      	cmp	r2, r3
 800318c:	bf0c      	ite	eq
 800318e:	2301      	moveq	r3, #1
 8003190:	2300      	movne	r3, #0
 8003192:	b2db      	uxtb	r3, r3
 8003194:	461a      	mov	r2, r3
 8003196:	79fb      	ldrb	r3, [r7, #7]
 8003198:	429a      	cmp	r2, r3
 800319a:	d0a0      	beq.n	80030de <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800319c:	2300      	movs	r3, #0
}
 800319e:	4618      	mov	r0, r3
 80031a0:	3710      	adds	r7, #16
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}

080031a6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80031a6:	b480      	push	{r7}
 80031a8:	b095      	sub	sp, #84	@ 0x54
 80031aa:	af00      	add	r7, sp, #0
 80031ac:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031b6:	e853 3f00 	ldrex	r3, [r3]
 80031ba:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80031bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031be:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80031c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	461a      	mov	r2, r3
 80031ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80031cc:	643b      	str	r3, [r7, #64]	@ 0x40
 80031ce:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031d0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80031d2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80031d4:	e841 2300 	strex	r3, r2, [r1]
 80031d8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80031da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d1e6      	bne.n	80031ae <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	3308      	adds	r3, #8
 80031e6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031e8:	6a3b      	ldr	r3, [r7, #32]
 80031ea:	e853 3f00 	ldrex	r3, [r3]
 80031ee:	61fb      	str	r3, [r7, #28]
   return(result);
 80031f0:	69fb      	ldr	r3, [r7, #28]
 80031f2:	f023 0301 	bic.w	r3, r3, #1
 80031f6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	3308      	adds	r3, #8
 80031fe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003200:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003202:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003204:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003206:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003208:	e841 2300 	strex	r3, r2, [r1]
 800320c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800320e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003210:	2b00      	cmp	r3, #0
 8003212:	d1e5      	bne.n	80031e0 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003218:	2b01      	cmp	r3, #1
 800321a:	d118      	bne.n	800324e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	e853 3f00 	ldrex	r3, [r3]
 8003228:	60bb      	str	r3, [r7, #8]
   return(result);
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	f023 0310 	bic.w	r3, r3, #16
 8003230:	647b      	str	r3, [r7, #68]	@ 0x44
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	461a      	mov	r2, r3
 8003238:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800323a:	61bb      	str	r3, [r7, #24]
 800323c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800323e:	6979      	ldr	r1, [r7, #20]
 8003240:	69ba      	ldr	r2, [r7, #24]
 8003242:	e841 2300 	strex	r3, r2, [r1]
 8003246:	613b      	str	r3, [r7, #16]
   return(result);
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d1e6      	bne.n	800321c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2220      	movs	r2, #32
 8003252:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2200      	movs	r2, #0
 800325a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2200      	movs	r2, #0
 8003260:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003262:	bf00      	nop
 8003264:	3754      	adds	r7, #84	@ 0x54
 8003266:	46bd      	mov	sp, r7
 8003268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326c:	4770      	bx	lr

0800326e <App_TaskCreateHook>:
* Note(s)     : (1) Interrupts are disabled during this call.
*********************************************************************************************************
*/

void  App_TaskCreateHook (OS_TCB *ptcb)
{
 800326e:	b480      	push	{r7}
 8003270:	b083      	sub	sp, #12
 8003272:	af00      	add	r7, sp, #0
 8003274:	6078      	str	r0, [r7, #4]
    (void)ptcb;
}
 8003276:	bf00      	nop
 8003278:	370c      	adds	r7, #12
 800327a:	46bd      	mov	sp, r7
 800327c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003280:	4770      	bx	lr

08003282 <App_TaskDelHook>:
* Note(s)     : (1) Interrupts are disabled during this call.
*********************************************************************************************************
*/

void  App_TaskDelHook (OS_TCB *ptcb)
{
 8003282:	b480      	push	{r7}
 8003284:	b083      	sub	sp, #12
 8003286:	af00      	add	r7, sp, #0
 8003288:	6078      	str	r0, [r7, #4]
    (void)ptcb;
}
 800328a:	bf00      	nop
 800328c:	370c      	adds	r7, #12
 800328e:	46bd      	mov	sp, r7
 8003290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003294:	4770      	bx	lr

08003296 <App_TaskIdleHook>:
*********************************************************************************************************
*/

#if OS_VERSION >= 251
void  App_TaskIdleHook (void)
{
 8003296:	b480      	push	{r7}
 8003298:	af00      	add	r7, sp, #0
}
 800329a:	bf00      	nop
 800329c:	46bd      	mov	sp, r7
 800329e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a2:	4770      	bx	lr

080032a4 <App_TaskStatHook>:
* Argument(s) : none.
*********************************************************************************************************
*/

void  App_TaskStatHook (void)
{
 80032a4:	b480      	push	{r7}
 80032a6:	af00      	add	r7, sp, #0
}
 80032a8:	bf00      	nop
 80032aa:	46bd      	mov	sp, r7
 80032ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b0:	4770      	bx	lr

080032b2 <App_TaskReturnHook>:
*/


#if OS_VERSION >= 289
void  App_TaskReturnHook (OS_TCB  *ptcb)
{
 80032b2:	b480      	push	{r7}
 80032b4:	b083      	sub	sp, #12
 80032b6:	af00      	add	r7, sp, #0
 80032b8:	6078      	str	r0, [r7, #4]
    (void)ptcb;
}
 80032ba:	bf00      	nop
 80032bc:	370c      	adds	r7, #12
 80032be:	46bd      	mov	sp, r7
 80032c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c4:	4770      	bx	lr

080032c6 <App_TaskSwHook>:
*********************************************************************************************************
*/

#if OS_TASK_SW_HOOK_EN > 0
void  App_TaskSwHook (void)
{
 80032c6:	b480      	push	{r7}
 80032c8:	af00      	add	r7, sp, #0

}
 80032ca:	bf00      	nop
 80032cc:	46bd      	mov	sp, r7
 80032ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d2:	4770      	bx	lr

080032d4 <App_TCBInitHook>:
*********************************************************************************************************
*/

#if OS_VERSION >= 204
void  App_TCBInitHook (OS_TCB *ptcb)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b083      	sub	sp, #12
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
    (void)ptcb;
}
 80032dc:	bf00      	nop
 80032de:	370c      	adds	r7, #12
 80032e0:	46bd      	mov	sp, r7
 80032e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e6:	4770      	bx	lr

080032e8 <App_TimeTickHook>:
*********************************************************************************************************
*/

#if OS_TIME_TICK_HOOK_EN > 0
void  App_TimeTickHook (void)
{
 80032e8:	b480      	push	{r7}
 80032ea:	af00      	add	r7, sp, #0

}
 80032ec:	bf00      	nop
 80032ee:	46bd      	mov	sp, r7
 80032f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f4:	4770      	bx	lr
	...

080032f8 <OSInitHookBegin>:
*                 b) Set bits ASPEN and LSPEN in FPCCR register.
*********************************************************************************************************
*/
#if OS_CPU_HOOKS_EN > 0u
void  OSInitHookBegin (void)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b085      	sub	sp, #20
 80032fc:	af00      	add	r7, sp, #0
    OS_STK  *pstk;
#if (OS_CPU_ARM_FP_EN > 0u)
    INT32U   reg_val;
#endif
                                                                /* Clear exception stack for stack checking.            */
    pstk = &OS_CPU_ExceptStk[0];
 80032fe:	4b19      	ldr	r3, [pc, #100]	@ (8003364 <OSInitHookBegin+0x6c>)
 8003300:	60bb      	str	r3, [r7, #8]
    size = OS_CPU_EXCEPT_STK_SIZE;
 8003302:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003306:	60fb      	str	r3, [r7, #12]
    while (size > 0u) {
 8003308:	e007      	b.n	800331a <OSInitHookBegin+0x22>
        size--;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	3b01      	subs	r3, #1
 800330e:	60fb      	str	r3, [r7, #12]
       *pstk++ = (OS_STK)0;
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	1d1a      	adds	r2, r3, #4
 8003314:	60ba      	str	r2, [r7, #8]
 8003316:	2200      	movs	r2, #0
 8003318:	601a      	str	r2, [r3, #0]
    while (size > 0u) {
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d1f4      	bne.n	800330a <OSInitHookBegin+0x12>
    }

                                                                /* Align the ISR stack to 8-bytes                       */
    OS_CPU_ExceptStkBase = (OS_STK *)&OS_CPU_ExceptStk[OS_CPU_EXCEPT_STK_SIZE];
 8003320:	4b11      	ldr	r3, [pc, #68]	@ (8003368 <OSInitHookBegin+0x70>)
 8003322:	4a12      	ldr	r2, [pc, #72]	@ (800336c <OSInitHookBegin+0x74>)
 8003324:	601a      	str	r2, [r3, #0]
    OS_CPU_ExceptStkBase = (OS_STK *)((OS_STK)(OS_CPU_ExceptStkBase) & 0xFFFFFFF8);
 8003326:	4b10      	ldr	r3, [pc, #64]	@ (8003368 <OSInitHookBegin+0x70>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f023 0307 	bic.w	r3, r3, #7
 800332e:	461a      	mov	r2, r3
 8003330:	4b0d      	ldr	r3, [pc, #52]	@ (8003368 <OSInitHookBegin+0x70>)
 8003332:	601a      	str	r2, [r3, #0]

#if (OS_CPU_ARM_FP_EN > 0u)
    reg_val = OS_CPU_CM_FP_FPCCR;                               /* Check the floating point mode.                       */
 8003334:	4b0e      	ldr	r3, [pc, #56]	@ (8003370 <OSInitHookBegin+0x78>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	607b      	str	r3, [r7, #4]
    if ((reg_val & OS_CPU_CM_FPCCR_LAZY_STK) != OS_CPU_CM_FPCCR_LAZY_STK) {
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8003340:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8003344:	d001      	beq.n	800334a <OSInitHookBegin+0x52>
        while (1u) {                                            /* See Note (2).                                        */
 8003346:	bf00      	nop
 8003348:	e7fd      	b.n	8003346 <OSInitHookBegin+0x4e>
        }
    }
#endif

#if OS_TMR_EN > 0u
    OSTmrCtr = 0u;
 800334a:	4b0a      	ldr	r3, [pc, #40]	@ (8003374 <OSInitHookBegin+0x7c>)
 800334c:	2200      	movs	r2, #0
 800334e:	801a      	strh	r2, [r3, #0]
#endif

                                                                /* Set BASEPRI boundary from the configuration.         */
    OS_KA_BASEPRI_Boundary = (INT32U)(CPU_CFG_KA_IPL_BOUNDARY << (8u - CPU_CFG_NVIC_PRIO_BITS));
 8003350:	4b09      	ldr	r3, [pc, #36]	@ (8003378 <OSInitHookBegin+0x80>)
 8003352:	2240      	movs	r2, #64	@ 0x40
 8003354:	601a      	str	r2, [r3, #0]
}
 8003356:	bf00      	nop
 8003358:	3714      	adds	r7, #20
 800335a:	46bd      	mov	sp, r7
 800335c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003360:	4770      	bx	lr
 8003362:	bf00      	nop
 8003364:	200010b4 	.word	0x200010b4
 8003368:	200014b4 	.word	0x200014b4
 800336c:	200014b4 	.word	0x200014b4
 8003370:	e000ef34 	.word	0xe000ef34
 8003374:	200014b8 	.word	0x200014b8
 8003378:	200014bc 	.word	0x200014bc

0800337c <OSInitHookEnd>:
* Note(s)    : 1) Interrupts should be disabled during this call.
*********************************************************************************************************
*/
#if OS_CPU_HOOKS_EN > 0u
void  OSInitHookEnd (void)
{
 800337c:	b480      	push	{r7}
 800337e:	af00      	add	r7, sp, #0

}
 8003380:	bf00      	nop
 8003382:	46bd      	mov	sp, r7
 8003384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003388:	4770      	bx	lr

0800338a <OSTaskCreateHook>:
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
#if OS_CPU_HOOKS_EN > 0u
void  OSTaskCreateHook (OS_TCB *ptcb)
{
 800338a:	b580      	push	{r7, lr}
 800338c:	b082      	sub	sp, #8
 800338e:	af00      	add	r7, sp, #0
 8003390:	6078      	str	r0, [r7, #4]
#if OS_APP_HOOKS_EN > 0u
    App_TaskCreateHook(ptcb);
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	f7ff ff6b 	bl	800326e <App_TaskCreateHook>
#else
    (void)ptcb;                                                 /* Prevent compiler warning                             */
#endif
}
 8003398:	bf00      	nop
 800339a:	3708      	adds	r7, #8
 800339c:	46bd      	mov	sp, r7
 800339e:	bd80      	pop	{r7, pc}

080033a0 <OSTaskDelHook>:
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
#if OS_CPU_HOOKS_EN > 0u
void  OSTaskDelHook (OS_TCB *ptcb)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b082      	sub	sp, #8
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
#if OS_APP_HOOKS_EN > 0u
    App_TaskDelHook(ptcb);
 80033a8:	6878      	ldr	r0, [r7, #4]
 80033aa:	f7ff ff6a 	bl	8003282 <App_TaskDelHook>
#else
    (void)ptcb;                                                 /* Prevent compiler warning                             */
#endif
}
 80033ae:	bf00      	nop
 80033b0:	3708      	adds	r7, #8
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}

080033b6 <OSTaskIdleHook>:
* Note(s)    : 1) Interrupts are enabled during this call.
*********************************************************************************************************
*/
#if OS_CPU_HOOKS_EN > 0u
void  OSTaskIdleHook (void)
{
 80033b6:	b580      	push	{r7, lr}
 80033b8:	af00      	add	r7, sp, #0
#if OS_APP_HOOKS_EN > 0u
    App_TaskIdleHook();
 80033ba:	f7ff ff6c 	bl	8003296 <App_TaskIdleHook>
#endif
}
 80033be:	bf00      	nop
 80033c0:	bd80      	pop	{r7, pc}

080033c2 <OSTaskReturnHook>:
*********************************************************************************************************
*/

#if OS_CPU_HOOKS_EN > 0u
void  OSTaskReturnHook (OS_TCB  *ptcb)
{
 80033c2:	b580      	push	{r7, lr}
 80033c4:	b082      	sub	sp, #8
 80033c6:	af00      	add	r7, sp, #0
 80033c8:	6078      	str	r0, [r7, #4]
#if OS_APP_HOOKS_EN > 0u
    App_TaskReturnHook(ptcb);
 80033ca:	6878      	ldr	r0, [r7, #4]
 80033cc:	f7ff ff71 	bl	80032b2 <App_TaskReturnHook>
#else
    (void)ptcb;
#endif
}
 80033d0:	bf00      	nop
 80033d2:	3708      	adds	r7, #8
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bd80      	pop	{r7, pc}

080033d8 <OSTaskStatHook>:
*********************************************************************************************************
*/

#if OS_CPU_HOOKS_EN > 0u
void  OSTaskStatHook (void)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	af00      	add	r7, sp, #0
#if OS_APP_HOOKS_EN > 0u
    App_TaskStatHook();
 80033dc:	f7ff ff62 	bl	80032a4 <App_TaskStatHook>
#endif
}
 80033e0:	bf00      	nop
 80033e2:	bd80      	pop	{r7, pc}

080033e4 <OSTaskStkInit>:

OS_STK  *OSTaskStkInit (void    (*task)(void *p_arg),
                        void     *p_arg,
                        OS_STK   *ptos,
                        INT16U    opt)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b087      	sub	sp, #28
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	60f8      	str	r0, [r7, #12]
 80033ec:	60b9      	str	r1, [r7, #8]
 80033ee:	607a      	str	r2, [r7, #4]
 80033f0:	807b      	strh	r3, [r7, #2]
    OS_STK  *p_stk;


    (void)opt;                                                  /* 'opt' is not used, prevent warning                   */
    p_stk      = ptos + 1u;                                     /* Load stack pointer                                   */
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	3304      	adds	r3, #4
 80033f6:	617b      	str	r3, [r7, #20]
                                                                /* Align the stack to 8-bytes.                          */
    p_stk      = (OS_STK *)((OS_STK)(p_stk) & 0xFFFFFFF8u);
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	f023 0307 	bic.w	r3, r3, #7
 80033fe:	617b      	str	r3, [r7, #20]
                                                                /* Registers stacked as if auto-saved on exception      */
#if (OS_CPU_ARM_FP_EN > 0u)                                     /* FPU auto-saved registers.                            */
     --p_stk;
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	3b04      	subs	r3, #4
 8003404:	617b      	str	r3, [r7, #20]
    *(--p_stk) = (OS_STK)0x02000000u;                           /* FPSCR                                                */
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	3b04      	subs	r3, #4
 800340a:	617b      	str	r3, [r7, #20]
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003412:	601a      	str	r2, [r3, #0]
                                                                /* Initialize S0-S15 floating point registers           */
    *(--p_stk) = (OS_STK)0x41700000u;                           /* S15                                                  */
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	3b04      	subs	r3, #4
 8003418:	617b      	str	r3, [r7, #20]
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	4a93      	ldr	r2, [pc, #588]	@ (800366c <OSTaskStkInit+0x288>)
 800341e:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x41600000u;                           /* S14                                                  */
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	3b04      	subs	r3, #4
 8003424:	617b      	str	r3, [r7, #20]
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	4a91      	ldr	r2, [pc, #580]	@ (8003670 <OSTaskStkInit+0x28c>)
 800342a:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x41500000u;                           /* S13                                                  */
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	3b04      	subs	r3, #4
 8003430:	617b      	str	r3, [r7, #20]
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	4a8f      	ldr	r2, [pc, #572]	@ (8003674 <OSTaskStkInit+0x290>)
 8003436:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x41400000u;                           /* S12                                                  */
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	3b04      	subs	r3, #4
 800343c:	617b      	str	r3, [r7, #20]
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	4a8d      	ldr	r2, [pc, #564]	@ (8003678 <OSTaskStkInit+0x294>)
 8003442:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x41300000u;                           /* S11                                                  */
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	3b04      	subs	r3, #4
 8003448:	617b      	str	r3, [r7, #20]
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	4a8b      	ldr	r2, [pc, #556]	@ (800367c <OSTaskStkInit+0x298>)
 800344e:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x41200000u;                           /* S10                                                  */
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	3b04      	subs	r3, #4
 8003454:	617b      	str	r3, [r7, #20]
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	4a89      	ldr	r2, [pc, #548]	@ (8003680 <OSTaskStkInit+0x29c>)
 800345a:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x41100000u;                           /* S9                                                   */
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	3b04      	subs	r3, #4
 8003460:	617b      	str	r3, [r7, #20]
 8003462:	697b      	ldr	r3, [r7, #20]
 8003464:	4a87      	ldr	r2, [pc, #540]	@ (8003684 <OSTaskStkInit+0x2a0>)
 8003466:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x41000000u;                           /* S8                                                   */
 8003468:	697b      	ldr	r3, [r7, #20]
 800346a:	3b04      	subs	r3, #4
 800346c:	617b      	str	r3, [r7, #20]
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	f04f 4282 	mov.w	r2, #1090519040	@ 0x41000000
 8003474:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x40E00000u;                           /* S7                                                   */
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	3b04      	subs	r3, #4
 800347a:	617b      	str	r3, [r7, #20]
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	4a82      	ldr	r2, [pc, #520]	@ (8003688 <OSTaskStkInit+0x2a4>)
 8003480:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x40C00000u;                           /* S6                                                   */
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	3b04      	subs	r3, #4
 8003486:	617b      	str	r3, [r7, #20]
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	4a80      	ldr	r2, [pc, #512]	@ (800368c <OSTaskStkInit+0x2a8>)
 800348c:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x40A00000u;                           /* S5                                                   */
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	3b04      	subs	r3, #4
 8003492:	617b      	str	r3, [r7, #20]
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	4a7e      	ldr	r2, [pc, #504]	@ (8003690 <OSTaskStkInit+0x2ac>)
 8003498:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x40800000u;                           /* S4                                                   */
 800349a:	697b      	ldr	r3, [r7, #20]
 800349c:	3b04      	subs	r3, #4
 800349e:	617b      	str	r3, [r7, #20]
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	f04f 4281 	mov.w	r2, #1082130432	@ 0x40800000
 80034a6:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x40400000u;                           /* S3                                                   */
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	3b04      	subs	r3, #4
 80034ac:	617b      	str	r3, [r7, #20]
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	4a78      	ldr	r2, [pc, #480]	@ (8003694 <OSTaskStkInit+0x2b0>)
 80034b2:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x40000000u;                           /* S2                                                   */
 80034b4:	697b      	ldr	r3, [r7, #20]
 80034b6:	3b04      	subs	r3, #4
 80034b8:	617b      	str	r3, [r7, #20]
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80034c0:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x3F800000u;                           /* S1                                                   */
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	3b04      	subs	r3, #4
 80034c6:	617b      	str	r3, [r7, #20]
 80034c8:	697b      	ldr	r3, [r7, #20]
 80034ca:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80034ce:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x00000000u;                           /* S0                                                   */
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	3b04      	subs	r3, #4
 80034d4:	617b      	str	r3, [r7, #20]
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	2200      	movs	r2, #0
 80034da:	601a      	str	r2, [r3, #0]
#endif
    *(--p_stk) = (OS_STK)0x01000000uL;                          /* xPSR                                                 */
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	3b04      	subs	r3, #4
 80034e0:	617b      	str	r3, [r7, #20]
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80034e8:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)task;                                  /* Entry Point                                          */
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	3b04      	subs	r3, #4
 80034ee:	617b      	str	r3, [r7, #20]
 80034f0:	68fa      	ldr	r2, [r7, #12]
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)OS_TaskReturn;                         /* R14 (LR)                                             */
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	3b04      	subs	r3, #4
 80034fa:	617b      	str	r3, [r7, #20]
 80034fc:	4a66      	ldr	r2, [pc, #408]	@ (8003698 <OSTaskStkInit+0x2b4>)
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x12121212uL;                          /* R12                                                  */
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	3b04      	subs	r3, #4
 8003506:	617b      	str	r3, [r7, #20]
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	f04f 3212 	mov.w	r2, #303174162	@ 0x12121212
 800350e:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x03030303uL;                          /* R3                                                   */
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	3b04      	subs	r3, #4
 8003514:	617b      	str	r3, [r7, #20]
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	f04f 3203 	mov.w	r2, #50529027	@ 0x3030303
 800351c:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x02020202uL;                          /* R2                                                   */
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	3b04      	subs	r3, #4
 8003522:	617b      	str	r3, [r7, #20]
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	f04f 3202 	mov.w	r2, #33686018	@ 0x2020202
 800352a:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x01010101uL;                          /* R1                                                   */
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	3b04      	subs	r3, #4
 8003530:	617b      	str	r3, [r7, #20]
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	f04f 3201 	mov.w	r2, #16843009	@ 0x1010101
 8003538:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)p_arg;                                 /* R0 : argument                                        */
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	3b04      	subs	r3, #4
 800353e:	617b      	str	r3, [r7, #20]
 8003540:	68ba      	ldr	r2, [r7, #8]
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	601a      	str	r2, [r3, #0]

#if (OS_CPU_ARM_FP_EN > 0u)
    *(--p_stk) = (OS_STK)0xFFFFFFEDuL;                          /* R14: EXEC_RETURN; See Note 5                         */
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	3b04      	subs	r3, #4
 800354a:	617b      	str	r3, [r7, #20]
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	f06f 0212 	mvn.w	r2, #18
 8003552:	601a      	str	r2, [r3, #0]
#else
    *(--p_stk) = (OS_STK)0xFFFFFFFDuL;                          /* R14: EXEC_RETURN; See Note 5                         */
#endif
                                                                /* Remaining registers saved on process stack           */
    *(--p_stk) = (OS_STK)0x11111111uL;                          /* R11                                                  */
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	3b04      	subs	r3, #4
 8003558:	617b      	str	r3, [r7, #20]
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	f04f 3211 	mov.w	r2, #286331153	@ 0x11111111
 8003560:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x10101010uL;                          /* R10                                                  */
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	3b04      	subs	r3, #4
 8003566:	617b      	str	r3, [r7, #20]
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	f04f 3210 	mov.w	r2, #269488144	@ 0x10101010
 800356e:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x09090909uL;                          /* R9                                                   */
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	3b04      	subs	r3, #4
 8003574:	617b      	str	r3, [r7, #20]
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	f04f 3209 	mov.w	r2, #151587081	@ 0x9090909
 800357c:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x08080808uL;                          /* R8                                                   */
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	3b04      	subs	r3, #4
 8003582:	617b      	str	r3, [r7, #20]
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	f04f 3208 	mov.w	r2, #134744072	@ 0x8080808
 800358a:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x07070707uL;                          /* R7                                                   */
 800358c:	697b      	ldr	r3, [r7, #20]
 800358e:	3b04      	subs	r3, #4
 8003590:	617b      	str	r3, [r7, #20]
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	f04f 3207 	mov.w	r2, #117901063	@ 0x7070707
 8003598:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x06060606uL;                          /* R6                                                   */
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	3b04      	subs	r3, #4
 800359e:	617b      	str	r3, [r7, #20]
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	f04f 3206 	mov.w	r2, #101058054	@ 0x6060606
 80035a6:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x05050505uL;                          /* R5                                                   */
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	3b04      	subs	r3, #4
 80035ac:	617b      	str	r3, [r7, #20]
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	f04f 3205 	mov.w	r2, #84215045	@ 0x5050505
 80035b4:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x04040404uL;                          /* R4                                                   */
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	3b04      	subs	r3, #4
 80035ba:	617b      	str	r3, [r7, #20]
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	f04f 3204 	mov.w	r2, #67372036	@ 0x4040404
 80035c2:	601a      	str	r2, [r3, #0]

#if (OS_CPU_ARM_FP_EN > 0u)
                                                                /* Initialize S16-S31 floating point registers          */
    *(--p_stk) = (OS_STK)0x41F80000u;                           /* S31                                                  */
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	3b04      	subs	r3, #4
 80035c8:	617b      	str	r3, [r7, #20]
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	4a33      	ldr	r2, [pc, #204]	@ (800369c <OSTaskStkInit+0x2b8>)
 80035ce:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x41F00000u;                           /* S30                                                  */
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	3b04      	subs	r3, #4
 80035d4:	617b      	str	r3, [r7, #20]
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	4a31      	ldr	r2, [pc, #196]	@ (80036a0 <OSTaskStkInit+0x2bc>)
 80035da:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x41E80000u;                           /* S29                                                  */
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	3b04      	subs	r3, #4
 80035e0:	617b      	str	r3, [r7, #20]
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	4a2f      	ldr	r2, [pc, #188]	@ (80036a4 <OSTaskStkInit+0x2c0>)
 80035e6:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x41E00000u;                           /* S28                                                  */
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	3b04      	subs	r3, #4
 80035ec:	617b      	str	r3, [r7, #20]
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	4a2d      	ldr	r2, [pc, #180]	@ (80036a8 <OSTaskStkInit+0x2c4>)
 80035f2:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x41D80000u;                           /* S27                                                  */
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	3b04      	subs	r3, #4
 80035f8:	617b      	str	r3, [r7, #20]
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	4a2b      	ldr	r2, [pc, #172]	@ (80036ac <OSTaskStkInit+0x2c8>)
 80035fe:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x41D00000u;                           /* S26                                                  */
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	3b04      	subs	r3, #4
 8003604:	617b      	str	r3, [r7, #20]
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	4a29      	ldr	r2, [pc, #164]	@ (80036b0 <OSTaskStkInit+0x2cc>)
 800360a:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x41C80000u;                           /* S25                                                  */
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	3b04      	subs	r3, #4
 8003610:	617b      	str	r3, [r7, #20]
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	4a27      	ldr	r2, [pc, #156]	@ (80036b4 <OSTaskStkInit+0x2d0>)
 8003616:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x41C00000u;                           /* S24                                                  */
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	3b04      	subs	r3, #4
 800361c:	617b      	str	r3, [r7, #20]
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	4a25      	ldr	r2, [pc, #148]	@ (80036b8 <OSTaskStkInit+0x2d4>)
 8003622:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x41B80000u;                           /* S23                                                  */
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	3b04      	subs	r3, #4
 8003628:	617b      	str	r3, [r7, #20]
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	4a23      	ldr	r2, [pc, #140]	@ (80036bc <OSTaskStkInit+0x2d8>)
 800362e:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x41B00000u;                           /* S22                                                  */
 8003630:	697b      	ldr	r3, [r7, #20]
 8003632:	3b04      	subs	r3, #4
 8003634:	617b      	str	r3, [r7, #20]
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	4a21      	ldr	r2, [pc, #132]	@ (80036c0 <OSTaskStkInit+0x2dc>)
 800363a:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x41A80000u;                           /* S21                                                  */
 800363c:	697b      	ldr	r3, [r7, #20]
 800363e:	3b04      	subs	r3, #4
 8003640:	617b      	str	r3, [r7, #20]
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	4a1f      	ldr	r2, [pc, #124]	@ (80036c4 <OSTaskStkInit+0x2e0>)
 8003646:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x41A00000u;                           /* S20                                                  */
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	3b04      	subs	r3, #4
 800364c:	617b      	str	r3, [r7, #20]
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	4a1d      	ldr	r2, [pc, #116]	@ (80036c8 <OSTaskStkInit+0x2e4>)
 8003652:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x41980000u;                           /* S19                                                  */
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	3b04      	subs	r3, #4
 8003658:	617b      	str	r3, [r7, #20]
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	4a1b      	ldr	r2, [pc, #108]	@ (80036cc <OSTaskStkInit+0x2e8>)
 800365e:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x41900000u;                           /* S18                                                  */
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	3b04      	subs	r3, #4
 8003664:	617b      	str	r3, [r7, #20]
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	e032      	b.n	80036d0 <OSTaskStkInit+0x2ec>
 800366a:	bf00      	nop
 800366c:	41700000 	.word	0x41700000
 8003670:	41600000 	.word	0x41600000
 8003674:	41500000 	.word	0x41500000
 8003678:	41400000 	.word	0x41400000
 800367c:	41300000 	.word	0x41300000
 8003680:	41200000 	.word	0x41200000
 8003684:	41100000 	.word	0x41100000
 8003688:	40e00000 	.word	0x40e00000
 800368c:	40c00000 	.word	0x40c00000
 8003690:	40a00000 	.word	0x40a00000
 8003694:	40400000 	.word	0x40400000
 8003698:	080050b9 	.word	0x080050b9
 800369c:	41f80000 	.word	0x41f80000
 80036a0:	41f00000 	.word	0x41f00000
 80036a4:	41e80000 	.word	0x41e80000
 80036a8:	41e00000 	.word	0x41e00000
 80036ac:	41d80000 	.word	0x41d80000
 80036b0:	41d00000 	.word	0x41d00000
 80036b4:	41c80000 	.word	0x41c80000
 80036b8:	41c00000 	.word	0x41c00000
 80036bc:	41b80000 	.word	0x41b80000
 80036c0:	41b00000 	.word	0x41b00000
 80036c4:	41a80000 	.word	0x41a80000
 80036c8:	41a00000 	.word	0x41a00000
 80036cc:	41980000 	.word	0x41980000
 80036d0:	4a0a      	ldr	r2, [pc, #40]	@ (80036fc <OSTaskStkInit+0x318>)
 80036d2:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x41880000u;                           /* S17                                                  */
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	3b04      	subs	r3, #4
 80036d8:	617b      	str	r3, [r7, #20]
 80036da:	697b      	ldr	r3, [r7, #20]
 80036dc:	4a08      	ldr	r2, [pc, #32]	@ (8003700 <OSTaskStkInit+0x31c>)
 80036de:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x41800000u;                           /* S16                                                  */
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	3b04      	subs	r3, #4
 80036e4:	617b      	str	r3, [r7, #20]
 80036e6:	697b      	ldr	r3, [r7, #20]
 80036e8:	f04f 4283 	mov.w	r2, #1098907648	@ 0x41800000
 80036ec:	601a      	str	r2, [r3, #0]
#endif

    return (p_stk);
 80036ee:	697b      	ldr	r3, [r7, #20]
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	371c      	adds	r7, #28
 80036f4:	46bd      	mov	sp, r7
 80036f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fa:	4770      	bx	lr
 80036fc:	41900000 	.word	0x41900000
 8003700:	41880000 	.word	0x41880000

08003704 <OSTaskSwHook>:
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
#if (OS_CPU_HOOKS_EN > 0u) && (OS_TASK_SW_HOOK_EN > 0u)
void  OSTaskSwHook (void)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	af00      	add	r7, sp, #0

#if (OS_CPU_ARM_FP_EN > 0u)
    OS_CPU_FP_Reg_Push(OSTCBCur->OSTCBStkPtr);                  /* Push the FP registers of the current task.           */
 8003708:	4b07      	ldr	r3, [pc, #28]	@ (8003728 <OSTaskSwHook+0x24>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4618      	mov	r0, r3
 8003710:	f7fc fd5a 	bl	80001c8 <OS_CPU_FP_Reg_Push>
#endif

#if OS_APP_HOOKS_EN > 0u
    App_TaskSwHook();
 8003714:	f7ff fdd7 	bl	80032c6 <App_TaskSwHook>
#endif

    OS_TRACE_TASK_SWITCHED_IN(OSTCBHighRdy);

#if (OS_CPU_ARM_FP_EN > 0u)
    OS_CPU_FP_Reg_Pop(OSTCBHighRdy->OSTCBStkPtr);               /* Pop the FP registers of the highest ready task.      */
 8003718:	4b04      	ldr	r3, [pc, #16]	@ (800372c <OSTaskSwHook+0x28>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4618      	mov	r0, r3
 8003720:	f7fc fd5b 	bl	80001da <OS_CPU_FP_Reg_Pop>
#endif
}
 8003724:	bf00      	nop
 8003726:	bd80      	pop	{r7, pc}
 8003728:	20001a34 	.word	0x20001a34
 800372c:	20001a3c 	.word	0x20001a3c

08003730 <OSTCBInitHook>:
* Note(s)    : 1) Interrupts may or may not be ENABLED during this call.
*********************************************************************************************************
*/
#if OS_CPU_HOOKS_EN > 0u
void  OSTCBInitHook (OS_TCB *ptcb)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b082      	sub	sp, #8
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
#if OS_APP_HOOKS_EN > 0u
    App_TCBInitHook(ptcb);
 8003738:	6878      	ldr	r0, [r7, #4]
 800373a:	f7ff fdcb 	bl	80032d4 <App_TCBInitHook>
#else
    (void)ptcb;                                                 /* Prevent compiler warning                             */
#endif
}
 800373e:	bf00      	nop
 8003740:	3708      	adds	r7, #8
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}
	...

08003748 <OSTimeTickHook>:
* Note(s)    : 1) Interrupts may or may not be ENABLED during this call.
*********************************************************************************************************
*/
#if (OS_CPU_HOOKS_EN > 0u) && (OS_TIME_TICK_HOOK_EN > 0u)
void  OSTimeTickHook (void)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	af00      	add	r7, sp, #0
#if OS_APP_HOOKS_EN > 0u
    App_TimeTickHook();
 800374c:	f7ff fdcc 	bl	80032e8 <App_TimeTickHook>
#endif

#if OS_TMR_EN > 0u
    OSTmrCtr++;
 8003750:	4b08      	ldr	r3, [pc, #32]	@ (8003774 <OSTimeTickHook+0x2c>)
 8003752:	881b      	ldrh	r3, [r3, #0]
 8003754:	3301      	adds	r3, #1
 8003756:	b29a      	uxth	r2, r3
 8003758:	4b06      	ldr	r3, [pc, #24]	@ (8003774 <OSTimeTickHook+0x2c>)
 800375a:	801a      	strh	r2, [r3, #0]
    if (OSTmrCtr >= (OS_TICKS_PER_SEC / OS_TMR_CFG_TICKS_PER_SEC)) {
 800375c:	4b05      	ldr	r3, [pc, #20]	@ (8003774 <OSTimeTickHook+0x2c>)
 800375e:	881b      	ldrh	r3, [r3, #0]
 8003760:	2b09      	cmp	r3, #9
 8003762:	d904      	bls.n	800376e <OSTimeTickHook+0x26>
        OSTmrCtr = 0u;
 8003764:	4b03      	ldr	r3, [pc, #12]	@ (8003774 <OSTimeTickHook+0x2c>)
 8003766:	2200      	movs	r2, #0
 8003768:	801a      	strh	r2, [r3, #0]
        OSTmrSignal();
 800376a:	f001 fd8f 	bl	800528c <OSTmrSignal>
    }
#endif
}
 800376e:	bf00      	nop
 8003770:	bd80      	pop	{r7, pc}
 8003772:	bf00      	nop
 8003774:	200014b8 	.word	0x200014b8

08003778 <OS_CPU_SysTickHandler>:
* Note(s)    : 1) This function MUST be placed on entry 15 of the Cortex-M vector table.
*********************************************************************************************************
*/

void  OS_CPU_SysTickHandler (void)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b082      	sub	sp, #8
 800377c:	af00      	add	r7, sp, #0
#if OS_CRITICAL_METHOD == 3u                                    /* Allocate storage for CPU status register             */
    OS_CPU_SR  cpu_sr;
#endif


    OS_ENTER_CRITICAL();
 800377e:	2040      	movs	r0, #64	@ 0x40
 8003780:	f7fc fd31 	bl	80001e6 <OS_CPU_SR_Save>
 8003784:	6078      	str	r0, [r7, #4]
    OSIntEnter();                                               /* Tell uC/OS-II that we are starting an ISR            */
 8003786:	f000 f951 	bl	8003a2c <OSIntEnter>
    OS_EXIT_CRITICAL();
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	f7fc fd39 	bl	8000202 <OS_CPU_SR_Restore>

    OSTimeTick();                                               /* Call uC/OS-II's OSTimeTick()                         */
 8003790:	f000 fa42 	bl	8003c18 <OSTimeTick>

    OSIntExit();                                                /* Tell uC/OS-II that we are leaving the ISR            */
 8003794:	f000 f964 	bl	8003a60 <OSIntExit>
}
 8003798:	bf00      	nop
 800379a:	3708      	adds	r7, #8
 800379c:	46bd      	mov	sp, r7
 800379e:	bd80      	pop	{r7, pc}

080037a0 <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0u
void  OSDebugInit (void)
{
 80037a0:	b480      	push	{r7}
 80037a2:	b083      	sub	sp, #12
 80037a4:	af00      	add	r7, sp, #0
    void  *ptemp;


    ptemp = (void *)&OSDebugEn;
 80037a6:	4b3c      	ldr	r3, [pc, #240]	@ (8003898 <OSDebugInit+0xf8>)
 80037a8:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSEndiannessTest;
 80037aa:	4b3c      	ldr	r3, [pc, #240]	@ (800389c <OSDebugInit+0xfc>)
 80037ac:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSEventMax;
 80037ae:	4b3c      	ldr	r3, [pc, #240]	@ (80038a0 <OSDebugInit+0x100>)
 80037b0:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSEventNameEn;
 80037b2:	4b3c      	ldr	r3, [pc, #240]	@ (80038a4 <OSDebugInit+0x104>)
 80037b4:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSEventEn;
 80037b6:	4b3c      	ldr	r3, [pc, #240]	@ (80038a8 <OSDebugInit+0x108>)
 80037b8:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSEventSize;
 80037ba:	4b3c      	ldr	r3, [pc, #240]	@ (80038ac <OSDebugInit+0x10c>)
 80037bc:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSEventTblSize;
 80037be:	4b3c      	ldr	r3, [pc, #240]	@ (80038b0 <OSDebugInit+0x110>)
 80037c0:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSEventMultiEn;
 80037c2:	4b3c      	ldr	r3, [pc, #240]	@ (80038b4 <OSDebugInit+0x114>)
 80037c4:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSFlagEn;
 80037c6:	4b3c      	ldr	r3, [pc, #240]	@ (80038b8 <OSDebugInit+0x118>)
 80037c8:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSFlagGrpSize;
 80037ca:	4b3c      	ldr	r3, [pc, #240]	@ (80038bc <OSDebugInit+0x11c>)
 80037cc:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSFlagNodeSize;
 80037ce:	4b3c      	ldr	r3, [pc, #240]	@ (80038c0 <OSDebugInit+0x120>)
 80037d0:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSFlagWidth;
 80037d2:	4b3c      	ldr	r3, [pc, #240]	@ (80038c4 <OSDebugInit+0x124>)
 80037d4:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSFlagMax;
 80037d6:	4b3c      	ldr	r3, [pc, #240]	@ (80038c8 <OSDebugInit+0x128>)
 80037d8:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSFlagNameEn;
 80037da:	4b3c      	ldr	r3, [pc, #240]	@ (80038cc <OSDebugInit+0x12c>)
 80037dc:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSLowestPrio;
 80037de:	4b3c      	ldr	r3, [pc, #240]	@ (80038d0 <OSDebugInit+0x130>)
 80037e0:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSMboxEn;
 80037e2:	4b3c      	ldr	r3, [pc, #240]	@ (80038d4 <OSDebugInit+0x134>)
 80037e4:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSMemEn;
 80037e6:	4b3c      	ldr	r3, [pc, #240]	@ (80038d8 <OSDebugInit+0x138>)
 80037e8:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSMemMax;
 80037ea:	4b3c      	ldr	r3, [pc, #240]	@ (80038dc <OSDebugInit+0x13c>)
 80037ec:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSMemNameEn;
 80037ee:	4b3c      	ldr	r3, [pc, #240]	@ (80038e0 <OSDebugInit+0x140>)
 80037f0:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSMemSize;
 80037f2:	4b3c      	ldr	r3, [pc, #240]	@ (80038e4 <OSDebugInit+0x144>)
 80037f4:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSMemTblSize;
 80037f6:	4b3c      	ldr	r3, [pc, #240]	@ (80038e8 <OSDebugInit+0x148>)
 80037f8:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSMutexEn;
 80037fa:	4b3c      	ldr	r3, [pc, #240]	@ (80038ec <OSDebugInit+0x14c>)
 80037fc:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSPtrSize;
 80037fe:	4b3c      	ldr	r3, [pc, #240]	@ (80038f0 <OSDebugInit+0x150>)
 8003800:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSQEn;
 8003802:	4b3c      	ldr	r3, [pc, #240]	@ (80038f4 <OSDebugInit+0x154>)
 8003804:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSQMax;
 8003806:	4b3c      	ldr	r3, [pc, #240]	@ (80038f8 <OSDebugInit+0x158>)
 8003808:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSQSize;
 800380a:	4b3c      	ldr	r3, [pc, #240]	@ (80038fc <OSDebugInit+0x15c>)
 800380c:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSRdyTblSize;
 800380e:	4b3c      	ldr	r3, [pc, #240]	@ (8003900 <OSDebugInit+0x160>)
 8003810:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSSemEn;
 8003812:	4b3c      	ldr	r3, [pc, #240]	@ (8003904 <OSDebugInit+0x164>)
 8003814:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSStkWidth;
 8003816:	4b3c      	ldr	r3, [pc, #240]	@ (8003908 <OSDebugInit+0x168>)
 8003818:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSTaskCreateEn;
 800381a:	4b3c      	ldr	r3, [pc, #240]	@ (800390c <OSDebugInit+0x16c>)
 800381c:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTaskCreateExtEn;
 800381e:	4b3c      	ldr	r3, [pc, #240]	@ (8003910 <OSDebugInit+0x170>)
 8003820:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTaskDelEn;
 8003822:	4b3c      	ldr	r3, [pc, #240]	@ (8003914 <OSDebugInit+0x174>)
 8003824:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTaskIdleStkSize;
 8003826:	4b3c      	ldr	r3, [pc, #240]	@ (8003918 <OSDebugInit+0x178>)
 8003828:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTaskProfileEn;
 800382a:	4b3c      	ldr	r3, [pc, #240]	@ (800391c <OSDebugInit+0x17c>)
 800382c:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTaskMax;
 800382e:	4b3c      	ldr	r3, [pc, #240]	@ (8003920 <OSDebugInit+0x180>)
 8003830:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTaskNameEn;
 8003832:	4b3c      	ldr	r3, [pc, #240]	@ (8003924 <OSDebugInit+0x184>)
 8003834:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTaskStatEn;
 8003836:	4b3c      	ldr	r3, [pc, #240]	@ (8003928 <OSDebugInit+0x188>)
 8003838:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTaskStatStkSize;
 800383a:	4b3c      	ldr	r3, [pc, #240]	@ (800392c <OSDebugInit+0x18c>)
 800383c:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTaskStatStkChkEn;
 800383e:	4b3c      	ldr	r3, [pc, #240]	@ (8003930 <OSDebugInit+0x190>)
 8003840:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTaskSwHookEn;
 8003842:	4b3c      	ldr	r3, [pc, #240]	@ (8003934 <OSDebugInit+0x194>)
 8003844:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSTCBPrioTblMax;
 8003846:	4b3c      	ldr	r3, [pc, #240]	@ (8003938 <OSDebugInit+0x198>)
 8003848:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTCBSize;
 800384a:	4b3c      	ldr	r3, [pc, #240]	@ (800393c <OSDebugInit+0x19c>)
 800384c:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSTicksPerSec;
 800384e:	4b3c      	ldr	r3, [pc, #240]	@ (8003940 <OSDebugInit+0x1a0>)
 8003850:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTimeTickHookEn;
 8003852:	4b3c      	ldr	r3, [pc, #240]	@ (8003944 <OSDebugInit+0x1a4>)
 8003854:	607b      	str	r3, [r7, #4]

#if OS_TMR_EN > 0u
    ptemp = (void *)&OSTmrTbl[0];
 8003856:	4b3c      	ldr	r3, [pc, #240]	@ (8003948 <OSDebugInit+0x1a8>)
 8003858:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTmrWheelTbl[0];
 800385a:	4b3c      	ldr	r3, [pc, #240]	@ (800394c <OSDebugInit+0x1ac>)
 800385c:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSTmrEn;
 800385e:	4b3c      	ldr	r3, [pc, #240]	@ (8003950 <OSDebugInit+0x1b0>)
 8003860:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTmrCfgMax;
 8003862:	4b3c      	ldr	r3, [pc, #240]	@ (8003954 <OSDebugInit+0x1b4>)
 8003864:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTmrCfgNameEn;
 8003866:	4b3c      	ldr	r3, [pc, #240]	@ (8003958 <OSDebugInit+0x1b8>)
 8003868:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTmrCfgWheelSize;
 800386a:	4b3c      	ldr	r3, [pc, #240]	@ (800395c <OSDebugInit+0x1bc>)
 800386c:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTmrCfgTicksPerSec;
 800386e:	4b3c      	ldr	r3, [pc, #240]	@ (8003960 <OSDebugInit+0x1c0>)
 8003870:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTmrSize;
 8003872:	4b3c      	ldr	r3, [pc, #240]	@ (8003964 <OSDebugInit+0x1c4>)
 8003874:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTmrTblSize;
 8003876:	4b3c      	ldr	r3, [pc, #240]	@ (8003968 <OSDebugInit+0x1c8>)
 8003878:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSTmrWheelSize;
 800387a:	4b3c      	ldr	r3, [pc, #240]	@ (800396c <OSDebugInit+0x1cc>)
 800387c:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTmrWheelTblSize;
 800387e:	4b3c      	ldr	r3, [pc, #240]	@ (8003970 <OSDebugInit+0x1d0>)
 8003880:	607b      	str	r3, [r7, #4]
#endif

    ptemp = (void *)&OSVersionNbr;
 8003882:	4b3c      	ldr	r3, [pc, #240]	@ (8003974 <OSDebugInit+0x1d4>)
 8003884:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSDataSize;
 8003886:	4b3c      	ldr	r3, [pc, #240]	@ (8003978 <OSDebugInit+0x1d8>)
 8003888:	607b      	str	r3, [r7, #4]

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
 800388a:	bf00      	nop
 800388c:	370c      	adds	r7, #12
 800388e:	46bd      	mov	sp, r7
 8003890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003894:	4770      	bx	lr
 8003896:	bf00      	nop
 8003898:	08005798 	.word	0x08005798
 800389c:	0800579c 	.word	0x0800579c
 80038a0:	080057a2 	.word	0x080057a2
 80038a4:	080057a4 	.word	0x080057a4
 80038a8:	080057a0 	.word	0x080057a0
 80038ac:	080057a6 	.word	0x080057a6
 80038b0:	080057a8 	.word	0x080057a8
 80038b4:	080057aa 	.word	0x080057aa
 80038b8:	080057ac 	.word	0x080057ac
 80038bc:	080057ae 	.word	0x080057ae
 80038c0:	080057b0 	.word	0x080057b0
 80038c4:	080057b2 	.word	0x080057b2
 80038c8:	080057b4 	.word	0x080057b4
 80038cc:	080057b6 	.word	0x080057b6
 80038d0:	080057b8 	.word	0x080057b8
 80038d4:	080057ba 	.word	0x080057ba
 80038d8:	080057bc 	.word	0x080057bc
 80038dc:	080057be 	.word	0x080057be
 80038e0:	080057c0 	.word	0x080057c0
 80038e4:	080057c2 	.word	0x080057c2
 80038e8:	080057c4 	.word	0x080057c4
 80038ec:	080057c6 	.word	0x080057c6
 80038f0:	080057c8 	.word	0x080057c8
 80038f4:	080057ca 	.word	0x080057ca
 80038f8:	080057cc 	.word	0x080057cc
 80038fc:	080057ce 	.word	0x080057ce
 8003900:	080057d0 	.word	0x080057d0
 8003904:	080057d2 	.word	0x080057d2
 8003908:	080057d4 	.word	0x080057d4
 800390c:	080057d6 	.word	0x080057d6
 8003910:	080057d8 	.word	0x080057d8
 8003914:	080057da 	.word	0x080057da
 8003918:	080057dc 	.word	0x080057dc
 800391c:	080057de 	.word	0x080057de
 8003920:	080057e0 	.word	0x080057e0
 8003924:	080057e2 	.word	0x080057e2
 8003928:	080057e4 	.word	0x080057e4
 800392c:	080057e6 	.word	0x080057e6
 8003930:	080057e8 	.word	0x080057e8
 8003934:	080057ea 	.word	0x080057ea
 8003938:	080057ec 	.word	0x080057ec
 800393c:	080057ee 	.word	0x080057ee
 8003940:	080057f0 	.word	0x080057f0
 8003944:	080057f2 	.word	0x080057f2
 8003948:	20002428 	.word	0x20002428
 800394c:	200028ac 	.word	0x200028ac
 8003950:	080057f6 	.word	0x080057f6
 8003954:	080057f8 	.word	0x080057f8
 8003958:	080057fa 	.word	0x080057fa
 800395c:	080057fc 	.word	0x080057fc
 8003960:	080057fe 	.word	0x080057fe
 8003964:	08005800 	.word	0x08005800
 8003968:	08005802 	.word	0x08005802
 800396c:	08005804 	.word	0x08005804
 8003970:	08005806 	.word	0x08005806
 8003974:	080057f4 	.word	0x080057f4
 8003978:	08005808 	.word	0x08005808

0800397c <OSEventNameSet>:

#if (OS_EVENT_EN) && (OS_EVENT_NAME_EN > 0u)
void  OSEventNameSet (OS_EVENT  *pevent,
                      INT8U     *pname,
                      INT8U     *perr)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b086      	sub	sp, #24
 8003980:	af00      	add	r7, sp, #0
 8003982:	60f8      	str	r0, [r7, #12]
 8003984:	60b9      	str	r1, [r7, #8]
 8003986:	607a      	str	r2, [r7, #4]
#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0u;
 8003988:	2300      	movs	r3, #0
 800398a:	617b      	str	r3, [r7, #20]
        return;
    }
#endif

#if OS_ARG_CHK_EN > 0u
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d103      	bne.n	800399a <OSEventNameSet+0x1e>
        *perr = OS_ERR_PEVENT_NULL;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2204      	movs	r2, #4
 8003996:	701a      	strb	r2, [r3, #0]
        return;
 8003998:	e025      	b.n	80039e6 <OSEventNameSet+0x6a>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d103      	bne.n	80039a8 <OSEventNameSet+0x2c>
        *perr = OS_ERR_PNAME_NULL;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	220c      	movs	r2, #12
 80039a4:	701a      	strb	r2, [r3, #0]
        return;
 80039a6:	e01e      	b.n	80039e6 <OSEventNameSet+0x6a>
    }
#endif
    if (OSIntNesting > 0u) {                     /* See if trying to call from an ISR                  */
 80039a8:	4b10      	ldr	r3, [pc, #64]	@ (80039ec <OSEventNameSet+0x70>)
 80039aa:	781b      	ldrb	r3, [r3, #0]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d003      	beq.n	80039b8 <OSEventNameSet+0x3c>
        *perr = OS_ERR_NAME_SET_ISR;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2212      	movs	r2, #18
 80039b4:	701a      	strb	r2, [r3, #0]
        return;
 80039b6:	e016      	b.n	80039e6 <OSEventNameSet+0x6a>
    }
    switch (pevent->OSEventType) {
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	781b      	ldrb	r3, [r3, #0]
 80039bc:	3b01      	subs	r3, #1
 80039be:	2b03      	cmp	r3, #3
 80039c0:	d903      	bls.n	80039ca <OSEventNameSet+0x4e>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2201      	movs	r2, #1
 80039c6:	701a      	strb	r2, [r3, #0]
             return;
 80039c8:	e00d      	b.n	80039e6 <OSEventNameSet+0x6a>
             break;
 80039ca:	bf00      	nop
    }
    OS_ENTER_CRITICAL();
 80039cc:	2040      	movs	r0, #64	@ 0x40
 80039ce:	f7fc fc0a 	bl	80001e6 <OS_CPU_SR_Save>
 80039d2:	6178      	str	r0, [r7, #20]
    pevent->OSEventName = pname;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	68ba      	ldr	r2, [r7, #8]
 80039d8:	615a      	str	r2, [r3, #20]
    OS_EXIT_CRITICAL();
 80039da:	6978      	ldr	r0, [r7, #20]
 80039dc:	f7fc fc11 	bl	8000202 <OS_CPU_SR_Restore>
    OS_TRACE_EVENT_NAME_SET(pevent, pname);
    *perr = OS_ERR_NONE;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2200      	movs	r2, #0
 80039e4:	701a      	strb	r2, [r3, #0]
}
 80039e6:	3718      	adds	r7, #24
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}
 80039ec:	2000181c 	.word	0x2000181c

080039f0 <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	af00      	add	r7, sp, #0
#if defined(OS_TLS_TBL_SIZE) && (OS_TLS_TBL_SIZE > 0u)
    INT8U  err;
#endif
#endif

    OSInitHookBegin();                                           /* Call port specific initialization code   */
 80039f4:	f7ff fc80 	bl	80032f8 <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
 80039f8:	f000 fb64 	bl	80040c4 <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
 80039fc:	f000 fba0 	bl	8004140 <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
 8003a00:	f000 fc1c 	bl	800423c <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
 8003a04:	f000 fb14 	bl	8004030 <OS_InitEventList>

#if (OS_FLAG_EN > 0u) && (OS_MAX_FLAGS > 0u)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
 8003a08:	f000 fea0 	bl	800474c <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0u) && (OS_MAX_MEM_PART > 0u)
    OS_MemInit();                                                /* Initialize the memory manager            */
 8003a0c:	f000 ff10 	bl	8004830 <OS_MemInit>
#endif

#if (OS_Q_EN > 0u) && (OS_MAX_QS > 0u)
    OS_QInit();                                                  /* Initialize the message queue structures  */
 8003a10:	f000 ff4e 	bl	80048b0 <OS_QInit>
        return;
    }
#endif
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
 8003a14:	f000 fbc6 	bl	80041a4 <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0u
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
 8003a18:	f000 fbea 	bl	80041f0 <OS_InitTaskStat>
#endif

#if OS_TMR_EN > 0u
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
 8003a1c:	f001 fc48 	bl	80052b0 <OSTmr_Init>
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
 8003a20:	f7ff fcac 	bl	800337c <OSInitHookEnd>

#if OS_DEBUG_EN > 0u
    OSDebugInit();
 8003a24:	f7ff febc 	bl	80037a0 <OSDebugInit>
#endif
}
 8003a28:	bf00      	nop
 8003a2a:	bd80      	pop	{r7, pc}

08003a2c <OSIntEnter>:
*                 OSIntEnter() is always called with interrupts disabled.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	af00      	add	r7, sp, #0
    if (OSRunning == OS_TRUE) {
 8003a30:	4b09      	ldr	r3, [pc, #36]	@ (8003a58 <OSIntEnter+0x2c>)
 8003a32:	781b      	ldrb	r3, [r3, #0]
 8003a34:	2b01      	cmp	r3, #1
 8003a36:	d109      	bne.n	8003a4c <OSIntEnter+0x20>
        if (OSIntNesting < 255u) {
 8003a38:	4b08      	ldr	r3, [pc, #32]	@ (8003a5c <OSIntEnter+0x30>)
 8003a3a:	781b      	ldrb	r3, [r3, #0]
 8003a3c:	2bff      	cmp	r3, #255	@ 0xff
 8003a3e:	d005      	beq.n	8003a4c <OSIntEnter+0x20>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
 8003a40:	4b06      	ldr	r3, [pc, #24]	@ (8003a5c <OSIntEnter+0x30>)
 8003a42:	781b      	ldrb	r3, [r3, #0]
 8003a44:	3301      	adds	r3, #1
 8003a46:	b2da      	uxtb	r2, r3
 8003a48:	4b04      	ldr	r3, [pc, #16]	@ (8003a5c <OSIntEnter+0x30>)
 8003a4a:	701a      	strb	r2, [r3, #0]
        }
        OS_TRACE_ISR_ENTER();
    }
}
 8003a4c:	bf00      	nop
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a54:	4770      	bx	lr
 8003a56:	bf00      	nop
 8003a58:	2000182c 	.word	0x2000182c
 8003a5c:	2000181c 	.word	0x2000181c

08003a60 <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b082      	sub	sp, #8
 8003a64:	af00      	add	r7, sp, #0
#if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0u;
 8003a66:	2300      	movs	r3, #0
 8003a68:	607b      	str	r3, [r7, #4]
#endif



    if (OSRunning == OS_TRUE) {
 8003a6a:	4b1e      	ldr	r3, [pc, #120]	@ (8003ae4 <OSIntExit+0x84>)
 8003a6c:	781b      	ldrb	r3, [r3, #0]
 8003a6e:	2b01      	cmp	r3, #1
 8003a70:	d134      	bne.n	8003adc <OSIntExit+0x7c>
        OS_ENTER_CRITICAL();
 8003a72:	2040      	movs	r0, #64	@ 0x40
 8003a74:	f7fc fbb7 	bl	80001e6 <OS_CPU_SR_Save>
 8003a78:	6078      	str	r0, [r7, #4]
        if (OSIntNesting > 0u) {                           /* Prevent OSIntNesting from wrapping       */
 8003a7a:	4b1b      	ldr	r3, [pc, #108]	@ (8003ae8 <OSIntExit+0x88>)
 8003a7c:	781b      	ldrb	r3, [r3, #0]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d005      	beq.n	8003a8e <OSIntExit+0x2e>
            OSIntNesting--;
 8003a82:	4b19      	ldr	r3, [pc, #100]	@ (8003ae8 <OSIntExit+0x88>)
 8003a84:	781b      	ldrb	r3, [r3, #0]
 8003a86:	3b01      	subs	r3, #1
 8003a88:	b2da      	uxtb	r2, r3
 8003a8a:	4b17      	ldr	r3, [pc, #92]	@ (8003ae8 <OSIntExit+0x88>)
 8003a8c:	701a      	strb	r2, [r3, #0]
        }
        if (OSIntNesting == 0u) {                          /* Reschedule only if all ISRs complete ... */
 8003a8e:	4b16      	ldr	r3, [pc, #88]	@ (8003ae8 <OSIntExit+0x88>)
 8003a90:	781b      	ldrb	r3, [r3, #0]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d11f      	bne.n	8003ad6 <OSIntExit+0x76>
            if (OSLockNesting == 0u) {                     /* ... and not locked.                      */
 8003a96:	4b15      	ldr	r3, [pc, #84]	@ (8003aec <OSIntExit+0x8c>)
 8003a98:	781b      	ldrb	r3, [r3, #0]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d11b      	bne.n	8003ad6 <OSIntExit+0x76>
                OS_SchedNew();
 8003a9e:	f000 fc77 	bl	8004390 <OS_SchedNew>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
 8003aa2:	4b13      	ldr	r3, [pc, #76]	@ (8003af0 <OSIntExit+0x90>)
 8003aa4:	781b      	ldrb	r3, [r3, #0]
 8003aa6:	461a      	mov	r2, r3
 8003aa8:	4b12      	ldr	r3, [pc, #72]	@ (8003af4 <OSIntExit+0x94>)
 8003aaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003aae:	4a12      	ldr	r2, [pc, #72]	@ (8003af8 <OSIntExit+0x98>)
 8003ab0:	6013      	str	r3, [r2, #0]
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
 8003ab2:	4b0f      	ldr	r3, [pc, #60]	@ (8003af0 <OSIntExit+0x90>)
 8003ab4:	781a      	ldrb	r2, [r3, #0]
 8003ab6:	4b11      	ldr	r3, [pc, #68]	@ (8003afc <OSIntExit+0x9c>)
 8003ab8:	781b      	ldrb	r3, [r3, #0]
 8003aba:	429a      	cmp	r2, r3
 8003abc:	d00b      	beq.n	8003ad6 <OSIntExit+0x76>
#if OS_TASK_PROFILE_EN > 0u
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
 8003abe:	4b0e      	ldr	r3, [pc, #56]	@ (8003af8 <OSIntExit+0x98>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003ac4:	3201      	adds	r2, #1
 8003ac6:	641a      	str	r2, [r3, #64]	@ 0x40
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
 8003ac8:	4b0d      	ldr	r3, [pc, #52]	@ (8003b00 <OSIntExit+0xa0>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	3301      	adds	r3, #1
 8003ace:	4a0c      	ldr	r2, [pc, #48]	@ (8003b00 <OSIntExit+0xa0>)
 8003ad0:	6013      	str	r3, [r2, #0]
                    OS_TLS_TaskSw();
#endif
#endif
                    OS_TRACE_ISR_EXIT_TO_SCHEDULER();

                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
 8003ad2:	f7fc fbdf 	bl	8000294 <OSCtxSw>
            }
        } else {
            OS_TRACE_ISR_EXIT();
        }

        OS_EXIT_CRITICAL();
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	f7fc fb93 	bl	8000202 <OS_CPU_SR_Restore>
    }
}
 8003adc:	bf00      	nop
 8003ade:	3708      	adds	r7, #8
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}
 8003ae4:	2000182c 	.word	0x2000182c
 8003ae8:	2000181c 	.word	0x2000181c
 8003aec:	2000181d 	.word	0x2000181d
 8003af0:	2000181f 	.word	0x2000181f
 8003af4:	20001a44 	.word	0x20001a44
 8003af8:	20001a3c 	.word	0x20001a3c
 8003afc:	2000181e 	.word	0x2000181e
 8003b00:	200014c0 	.word	0x200014c0

08003b04 <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0u
void  OSSchedLock (void)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b082      	sub	sp, #8
 8003b08:	af00      	add	r7, sp, #0
#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0u;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	607b      	str	r3, [r7, #4]
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
 8003b0e:	4b0e      	ldr	r3, [pc, #56]	@ (8003b48 <OSSchedLock+0x44>)
 8003b10:	781b      	ldrb	r3, [r3, #0]
 8003b12:	2b01      	cmp	r3, #1
 8003b14:	d114      	bne.n	8003b40 <OSSchedLock+0x3c>
        OS_ENTER_CRITICAL();
 8003b16:	2040      	movs	r0, #64	@ 0x40
 8003b18:	f7fc fb65 	bl	80001e6 <OS_CPU_SR_Save>
 8003b1c:	6078      	str	r0, [r7, #4]
        if (OSIntNesting == 0u) {                /* Can't call from an ISR                             */
 8003b1e:	4b0b      	ldr	r3, [pc, #44]	@ (8003b4c <OSSchedLock+0x48>)
 8003b20:	781b      	ldrb	r3, [r3, #0]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d109      	bne.n	8003b3a <OSSchedLock+0x36>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
 8003b26:	4b0a      	ldr	r3, [pc, #40]	@ (8003b50 <OSSchedLock+0x4c>)
 8003b28:	781b      	ldrb	r3, [r3, #0]
 8003b2a:	2bff      	cmp	r3, #255	@ 0xff
 8003b2c:	d005      	beq.n	8003b3a <OSSchedLock+0x36>
                OSLockNesting++;                 /* Increment lock nesting level                       */
 8003b2e:	4b08      	ldr	r3, [pc, #32]	@ (8003b50 <OSSchedLock+0x4c>)
 8003b30:	781b      	ldrb	r3, [r3, #0]
 8003b32:	3301      	adds	r3, #1
 8003b34:	b2da      	uxtb	r2, r3
 8003b36:	4b06      	ldr	r3, [pc, #24]	@ (8003b50 <OSSchedLock+0x4c>)
 8003b38:	701a      	strb	r2, [r3, #0]
            }
        }
        OS_EXIT_CRITICAL();
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	f7fc fb61 	bl	8000202 <OS_CPU_SR_Restore>
    }
}
 8003b40:	bf00      	nop
 8003b42:	3708      	adds	r7, #8
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}
 8003b48:	2000182c 	.word	0x2000182c
 8003b4c:	2000181c 	.word	0x2000181c
 8003b50:	2000181d 	.word	0x2000181d

08003b54 <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0u
void  OSSchedUnlock (void)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b082      	sub	sp, #8
 8003b58:	af00      	add	r7, sp, #0
#if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0u;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	607b      	str	r3, [r7, #4]
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
 8003b5e:	4b17      	ldr	r3, [pc, #92]	@ (8003bbc <OSSchedUnlock+0x68>)
 8003b60:	781b      	ldrb	r3, [r3, #0]
 8003b62:	2b01      	cmp	r3, #1
 8003b64:	d126      	bne.n	8003bb4 <OSSchedUnlock+0x60>
        OS_ENTER_CRITICAL();
 8003b66:	2040      	movs	r0, #64	@ 0x40
 8003b68:	f7fc fb3d 	bl	80001e6 <OS_CPU_SR_Save>
 8003b6c:	6078      	str	r0, [r7, #4]
        if (OSIntNesting == 0u) {                          /* Can't call from an ISR                   */
 8003b6e:	4b14      	ldr	r3, [pc, #80]	@ (8003bc0 <OSSchedUnlock+0x6c>)
 8003b70:	781b      	ldrb	r3, [r3, #0]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d11b      	bne.n	8003bae <OSSchedUnlock+0x5a>
            if (OSLockNesting > 0u) {                      /* Do not decrement if already 0            */
 8003b76:	4b13      	ldr	r3, [pc, #76]	@ (8003bc4 <OSSchedUnlock+0x70>)
 8003b78:	781b      	ldrb	r3, [r3, #0]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d013      	beq.n	8003ba6 <OSSchedUnlock+0x52>
                OSLockNesting--;                           /* Decrement lock nesting level             */
 8003b7e:	4b11      	ldr	r3, [pc, #68]	@ (8003bc4 <OSSchedUnlock+0x70>)
 8003b80:	781b      	ldrb	r3, [r3, #0]
 8003b82:	3b01      	subs	r3, #1
 8003b84:	b2da      	uxtb	r2, r3
 8003b86:	4b0f      	ldr	r3, [pc, #60]	@ (8003bc4 <OSSchedUnlock+0x70>)
 8003b88:	701a      	strb	r2, [r3, #0]
                if (OSLockNesting == 0u) {                 /* See if scheduler is enabled              */
 8003b8a:	4b0e      	ldr	r3, [pc, #56]	@ (8003bc4 <OSSchedUnlock+0x70>)
 8003b8c:	781b      	ldrb	r3, [r3, #0]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d105      	bne.n	8003b9e <OSSchedUnlock+0x4a>
                    OS_EXIT_CRITICAL();
 8003b92:	6878      	ldr	r0, [r7, #4]
 8003b94:	f7fc fb35 	bl	8000202 <OS_CPU_SR_Restore>
                    OS_Sched();                            /* See if a HPT is ready                    */
 8003b98:	f000 fbb8 	bl	800430c <OS_Sched>
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
 8003b9c:	e00a      	b.n	8003bb4 <OSSchedUnlock+0x60>
                    OS_EXIT_CRITICAL();
 8003b9e:	6878      	ldr	r0, [r7, #4]
 8003ba0:	f7fc fb2f 	bl	8000202 <OS_CPU_SR_Restore>
}
 8003ba4:	e006      	b.n	8003bb4 <OSSchedUnlock+0x60>
                OS_EXIT_CRITICAL();
 8003ba6:	6878      	ldr	r0, [r7, #4]
 8003ba8:	f7fc fb2b 	bl	8000202 <OS_CPU_SR_Restore>
}
 8003bac:	e002      	b.n	8003bb4 <OSSchedUnlock+0x60>
            OS_EXIT_CRITICAL();
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	f7fc fb27 	bl	8000202 <OS_CPU_SR_Restore>
}
 8003bb4:	bf00      	nop
 8003bb6:	3708      	adds	r7, #8
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd80      	pop	{r7, pc}
 8003bbc:	2000182c 	.word	0x2000182c
 8003bc0:	2000181c 	.word	0x2000181c
 8003bc4:	2000181d 	.word	0x2000181d

08003bc8 <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	af00      	add	r7, sp, #0
    if (OSRunning == OS_FALSE) {
 8003bcc:	4b0c      	ldr	r3, [pc, #48]	@ (8003c00 <OSStart+0x38>)
 8003bce:	781b      	ldrb	r3, [r3, #0]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d113      	bne.n	8003bfc <OSStart+0x34>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
 8003bd4:	f000 fbdc 	bl	8004390 <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
 8003bd8:	4b0a      	ldr	r3, [pc, #40]	@ (8003c04 <OSStart+0x3c>)
 8003bda:	781a      	ldrb	r2, [r3, #0]
 8003bdc:	4b0a      	ldr	r3, [pc, #40]	@ (8003c08 <OSStart+0x40>)
 8003bde:	701a      	strb	r2, [r3, #0]
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
 8003be0:	4b08      	ldr	r3, [pc, #32]	@ (8003c04 <OSStart+0x3c>)
 8003be2:	781b      	ldrb	r3, [r3, #0]
 8003be4:	461a      	mov	r2, r3
 8003be6:	4b09      	ldr	r3, [pc, #36]	@ (8003c0c <OSStart+0x44>)
 8003be8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003bec:	4a08      	ldr	r2, [pc, #32]	@ (8003c10 <OSStart+0x48>)
 8003bee:	6013      	str	r3, [r2, #0]
        OSTCBCur      = OSTCBHighRdy;
 8003bf0:	4b07      	ldr	r3, [pc, #28]	@ (8003c10 <OSStart+0x48>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a07      	ldr	r2, [pc, #28]	@ (8003c14 <OSStart+0x4c>)
 8003bf6:	6013      	str	r3, [r2, #0]
        OSStartHighRdy();                            /* Execute target specific code to start task     */
 8003bf8:	f7fc fb0c 	bl	8000214 <OSStartHighRdy>
    }
}
 8003bfc:	bf00      	nop
 8003bfe:	bd80      	pop	{r7, pc}
 8003c00:	2000182c 	.word	0x2000182c
 8003c04:	2000181f 	.word	0x2000181f
 8003c08:	2000181e 	.word	0x2000181e
 8003c0c:	20001a44 	.word	0x20001a44
 8003c10:	20001a3c 	.word	0x20001a3c
 8003c14:	20001a34 	.word	0x20001a34

08003c18 <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b084      	sub	sp, #16
 8003c1c:	af00      	add	r7, sp, #0
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0u
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0u;
 8003c1e:	2300      	movs	r3, #0
 8003c20:	607b      	str	r3, [r7, #4]
#endif



#if OS_TIME_TICK_HOOK_EN > 0u
    OSTimeTickHook();                                      /* Call user definable hook                     */
 8003c22:	f7ff fd91 	bl	8003748 <OSTimeTickHook>
#endif
#if OS_TIME_GET_SET_EN > 0u
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
 8003c26:	2040      	movs	r0, #64	@ 0x40
 8003c28:	f7fc fadd 	bl	80001e6 <OS_CPU_SR_Save>
 8003c2c:	6078      	str	r0, [r7, #4]
    OSTime++;
 8003c2e:	4b45      	ldr	r3, [pc, #276]	@ (8003d44 <OSTimeTick+0x12c>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	3301      	adds	r3, #1
 8003c34:	4a43      	ldr	r2, [pc, #268]	@ (8003d44 <OSTimeTick+0x12c>)
 8003c36:	6013      	str	r3, [r2, #0]
    OS_TRACE_TICK_INCREMENT(OSTime);
    OS_EXIT_CRITICAL();
 8003c38:	6878      	ldr	r0, [r7, #4]
 8003c3a:	f7fc fae2 	bl	8000202 <OS_CPU_SR_Restore>
#endif
    if (OSRunning == OS_TRUE) {
 8003c3e:	4b42      	ldr	r3, [pc, #264]	@ (8003d48 <OSTimeTick+0x130>)
 8003c40:	781b      	ldrb	r3, [r3, #0]
 8003c42:	2b01      	cmp	r3, #1
 8003c44:	d17a      	bne.n	8003d3c <OSTimeTick+0x124>
#if OS_TICK_STEP_EN > 0u
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
 8003c46:	4b41      	ldr	r3, [pc, #260]	@ (8003d4c <OSTimeTick+0x134>)
 8003c48:	781b      	ldrb	r3, [r3, #0]
 8003c4a:	2b02      	cmp	r3, #2
 8003c4c:	d00c      	beq.n	8003c68 <OSTimeTick+0x50>
 8003c4e:	2b02      	cmp	r3, #2
 8003c50:	dc10      	bgt.n	8003c74 <OSTimeTick+0x5c>
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d002      	beq.n	8003c5c <OSTimeTick+0x44>
 8003c56:	2b01      	cmp	r3, #1
 8003c58:	d003      	beq.n	8003c62 <OSTimeTick+0x4a>
 8003c5a:	e00b      	b.n	8003c74 <OSTimeTick+0x5c>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	72fb      	strb	r3, [r7, #11]
                 break;
 8003c60:	e00e      	b.n	8003c80 <OSTimeTick+0x68>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
 8003c62:	2300      	movs	r3, #0
 8003c64:	72fb      	strb	r3, [r7, #11]
                 break;
 8003c66:	e00b      	b.n	8003c80 <OSTimeTick+0x68>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
 8003c68:	2301      	movs	r3, #1
 8003c6a:	72fb      	strb	r3, [r7, #11]
                 OSTickStepState = OS_TICK_STEP_WAIT;
 8003c6c:	4b37      	ldr	r3, [pc, #220]	@ (8003d4c <OSTimeTick+0x134>)
 8003c6e:	2201      	movs	r2, #1
 8003c70:	701a      	strb	r2, [r3, #0]
                 break;
 8003c72:	e005      	b.n	8003c80 <OSTimeTick+0x68>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
 8003c74:	2301      	movs	r3, #1
 8003c76:	72fb      	strb	r3, [r7, #11]
                 OSTickStepState = OS_TICK_STEP_DIS;
 8003c78:	4b34      	ldr	r3, [pc, #208]	@ (8003d4c <OSTimeTick+0x134>)
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	701a      	strb	r2, [r3, #0]
                 break;
 8003c7e:	bf00      	nop
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
 8003c80:	7afb      	ldrb	r3, [r7, #11]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d059      	beq.n	8003d3a <OSTimeTick+0x122>
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
 8003c86:	4b32      	ldr	r3, [pc, #200]	@ (8003d50 <OSTimeTick+0x138>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	60fb      	str	r3, [r7, #12]
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
 8003c8c:	e04f      	b.n	8003d2e <OSTimeTick+0x116>
            OS_ENTER_CRITICAL();
 8003c8e:	2040      	movs	r0, #64	@ 0x40
 8003c90:	f7fc faa9 	bl	80001e6 <OS_CPU_SR_Save>
 8003c94:	6078      	str	r0, [r7, #4]
            if (ptcb->OSTCBDly != 0u) {                    /* No, Delayed or waiting for event with TO     */
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d041      	beq.n	8003d22 <OSTimeTick+0x10a>
                ptcb->OSTCBDly--;                          /* Decrement nbr of ticks to end of delay       */
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ca2:	1e5a      	subs	r2, r3, #1
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	635a      	str	r2, [r3, #52]	@ 0x34
                if (ptcb->OSTCBDly == 0u) {                /* Check for timeout                            */
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d138      	bne.n	8003d22 <OSTimeTick+0x10a>

                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003cb6:	f003 0337 	and.w	r3, r3, #55	@ 0x37
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d00d      	beq.n	8003cda <OSTimeTick+0xc2>
                        ptcb->OSTCBStat  &= (INT8U)~(INT8U)OS_STAT_PEND_ANY;   /* Yes, Clear status flag   */
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003cc4:	f023 0337 	bic.w	r3, r3, #55	@ 0x37
 8003cc8:	b2da      	uxtb	r2, r3
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 8003cd8:	e003      	b.n	8003ce2 <OSTimeTick+0xca>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003ce8:	f003 0308 	and.w	r3, r3, #8
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d118      	bne.n	8003d22 <OSTimeTick+0x10a>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	f893 203e 	ldrb.w	r2, [r3, #62]	@ 0x3e
 8003cf6:	4b17      	ldr	r3, [pc, #92]	@ (8003d54 <OSTimeTick+0x13c>)
 8003cf8:	781b      	ldrb	r3, [r3, #0]
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	b2da      	uxtb	r2, r3
 8003cfe:	4b15      	ldr	r3, [pc, #84]	@ (8003d54 <OSTimeTick+0x13c>)
 8003d00:	701a      	strb	r2, [r3, #0]
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d08:	461a      	mov	r2, r3
 8003d0a:	4b13      	ldr	r3, [pc, #76]	@ (8003d58 <OSTimeTick+0x140>)
 8003d0c:	5c9a      	ldrb	r2, [r3, r2]
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d14:	68f9      	ldr	r1, [r7, #12]
 8003d16:	f891 103c 	ldrb.w	r1, [r1, #60]	@ 0x3c
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	b2da      	uxtb	r2, r3
 8003d1e:	4b0e      	ldr	r3, [pc, #56]	@ (8003d58 <OSTimeTick+0x140>)
 8003d20:	545a      	strb	r2, [r3, r1]
                        OS_TRACE_TASK_READY(ptcb);
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	695b      	ldr	r3, [r3, #20]
 8003d26:	60fb      	str	r3, [r7, #12]
            OS_EXIT_CRITICAL();
 8003d28:	6878      	ldr	r0, [r7, #4]
 8003d2a:	f7fc fa6a 	bl	8000202 <OS_CPU_SR_Restore>
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8003d34:	2b3f      	cmp	r3, #63	@ 0x3f
 8003d36:	d1aa      	bne.n	8003c8e <OSTimeTick+0x76>
 8003d38:	e000      	b.n	8003d3c <OSTimeTick+0x124>
            return;
 8003d3a:	bf00      	nop
        }
    }
}
 8003d3c:	3710      	adds	r7, #16
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bd80      	pop	{r7, pc}
 8003d42:	bf00      	nop
 8003d44:	20002414 	.word	0x20002414
 8003d48:	2000182c 	.word	0x2000182c
 8003d4c:	2000232c 	.word	0x2000232c
 8003d50:	20001a40 	.word	0x20001a40
 8003d54:	20001820 	.word	0x20001820
 8003d58:	20001824 	.word	0x20001824

08003d5c <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0u
void  OS_Dummy (void)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	af00      	add	r7, sp, #0
}
 8003d60:	bf00      	nop
 8003d62:	46bd      	mov	sp, r7
 8003d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d68:	4770      	bx	lr
	...

08003d6c <OS_EventTaskRdy>:
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT  *pevent,
                        void      *pmsg,
                        INT8U      msk,
                        INT8U      pend_stat)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b086      	sub	sp, #24
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	60f8      	str	r0, [r7, #12]
 8003d74:	60b9      	str	r1, [r7, #8]
 8003d76:	4611      	mov	r1, r2
 8003d78:	461a      	mov	r2, r3
 8003d7a:	460b      	mov	r3, r1
 8003d7c:	71fb      	strb	r3, [r7, #7]
 8003d7e:	4613      	mov	r3, r2
 8003d80:	71bb      	strb	r3, [r7, #6]
    OS_PRIO  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63u
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	7a9b      	ldrb	r3, [r3, #10]
 8003d86:	461a      	mov	r2, r3
 8003d88:	4b2f      	ldr	r3, [pc, #188]	@ (8003e48 <OS_EventTaskRdy+0xdc>)
 8003d8a:	5c9b      	ldrb	r3, [r3, r2]
 8003d8c:	75fb      	strb	r3, [r7, #23]
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
 8003d8e:	7dfb      	ldrb	r3, [r7, #23]
 8003d90:	68fa      	ldr	r2, [r7, #12]
 8003d92:	4413      	add	r3, r2
 8003d94:	7adb      	ldrb	r3, [r3, #11]
 8003d96:	461a      	mov	r2, r3
 8003d98:	4b2b      	ldr	r3, [pc, #172]	@ (8003e48 <OS_EventTaskRdy+0xdc>)
 8003d9a:	5c9b      	ldrb	r3, [r3, r2]
 8003d9c:	75bb      	strb	r3, [r7, #22]
    prio = (INT8U)((y << 3u) + x);                      /* Find priority of task getting the msg       */
 8003d9e:	7dfb      	ldrb	r3, [r7, #23]
 8003da0:	00db      	lsls	r3, r3, #3
 8003da2:	b2da      	uxtb	r2, r3
 8003da4:	7dbb      	ldrb	r3, [r7, #22]
 8003da6:	4413      	add	r3, r2
 8003da8:	757b      	strb	r3, [r7, #21]
        x = OSUnMapTbl[(OS_PRIO)(*ptbl >> 8u) & 0xFFu] + 8u;
    }
    prio = (INT8U)((y << 4u) + x);                      /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
 8003daa:	7d7b      	ldrb	r3, [r7, #21]
 8003dac:	4a27      	ldr	r2, [pc, #156]	@ (8003e4c <OS_EventTaskRdy+0xe0>)
 8003dae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003db2:	613b      	str	r3, [r7, #16]
    ptcb->OSTCBDly        =  0u;                        /* Prevent OSTimeTick() from readying task     */
 8003db4:	693b      	ldr	r3, [r7, #16]
 8003db6:	2200      	movs	r2, #0
 8003db8:	635a      	str	r2, [r3, #52]	@ 0x34
#if ((OS_Q_EN > 0u) && (OS_MAX_QS > 0u)) || (OS_MBOX_EN > 0u)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	68ba      	ldr	r2, [r7, #8]
 8003dbe:	629a      	str	r2, [r3, #40]	@ 0x28
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= (INT8U)~msk;                /* Clear bit associated with event type        */
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	f893 2038 	ldrb.w	r2, [r3, #56]	@ 0x38
 8003dc6:	79fb      	ldrb	r3, [r7, #7]
 8003dc8:	43db      	mvns	r3, r3
 8003dca:	b2db      	uxtb	r3, r3
 8003dcc:	4013      	ands	r3, r2
 8003dce:	b2da      	uxtb	r2, r3
 8003dd0:	693b      	ldr	r3, [r7, #16]
 8003dd2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	79ba      	ldrb	r2, [r7, #6]
 8003dda:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003de4:	f003 0308 	and.w	r3, r3, #8
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d113      	bne.n	8003e14 <OS_EventTaskRdy+0xa8>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	f893 203e 	ldrb.w	r2, [r3, #62]	@ 0x3e
 8003df2:	4b17      	ldr	r3, [pc, #92]	@ (8003e50 <OS_EventTaskRdy+0xe4>)
 8003df4:	781b      	ldrb	r3, [r3, #0]
 8003df6:	4313      	orrs	r3, r2
 8003df8:	b2da      	uxtb	r2, r3
 8003dfa:	4b15      	ldr	r3, [pc, #84]	@ (8003e50 <OS_EventTaskRdy+0xe4>)
 8003dfc:	701a      	strb	r2, [r3, #0]
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
 8003dfe:	7dfb      	ldrb	r3, [r7, #23]
 8003e00:	4a14      	ldr	r2, [pc, #80]	@ (8003e54 <OS_EventTaskRdy+0xe8>)
 8003e02:	5cd1      	ldrb	r1, [r2, r3]
 8003e04:	693b      	ldr	r3, [r7, #16]
 8003e06:	f893 203d 	ldrb.w	r2, [r3, #61]	@ 0x3d
 8003e0a:	7dfb      	ldrb	r3, [r7, #23]
 8003e0c:	430a      	orrs	r2, r1
 8003e0e:	b2d1      	uxtb	r1, r2
 8003e10:	4a10      	ldr	r2, [pc, #64]	@ (8003e54 <OS_EventTaskRdy+0xe8>)
 8003e12:	54d1      	strb	r1, [r2, r3]
        OS_TRACE_TASK_READY(ptcb);
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
 8003e14:	68f9      	ldr	r1, [r7, #12]
 8003e16:	6938      	ldr	r0, [r7, #16]
 8003e18:	f000 f876 	bl	8003f08 <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0u)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
 8003e1c:	693b      	ldr	r3, [r7, #16]
 8003e1e:	6a1b      	ldr	r3, [r3, #32]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d00b      	beq.n	8003e3c <OS_EventTaskRdy+0xd0>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	6a1b      	ldr	r3, [r3, #32]
 8003e28:	4619      	mov	r1, r3
 8003e2a:	6938      	ldr	r0, [r7, #16]
 8003e2c:	f000 f89f 	bl	8003f6e <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventMultiPtr  = (OS_EVENT **)0;     /* No longer pending on multi list             */
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	2200      	movs	r2, #0
 8003e34:	621a      	str	r2, [r3, #32]
        ptcb->OSTCBEventMultiRdy  = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	68fa      	ldr	r2, [r7, #12]
 8003e3a:	625a      	str	r2, [r3, #36]	@ 0x24
    }
#endif

    return (prio);
 8003e3c:	7d7b      	ldrb	r3, [r7, #21]
}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	3718      	adds	r7, #24
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}
 8003e46:	bf00      	nop
 8003e48:	0800580c 	.word	0x0800580c
 8003e4c:	20001a44 	.word	0x20001a44
 8003e50:	20001820 	.word	0x20001820
 8003e54:	20001824 	.word	0x20001824

08003e58 <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b085      	sub	sp, #20
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
 8003e60:	4b26      	ldr	r3, [pc, #152]	@ (8003efc <OS_EventTaskWait+0xa4>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	687a      	ldr	r2, [r7, #4]
 8003e66:	61da      	str	r2, [r3, #28]

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
 8003e68:	4b24      	ldr	r3, [pc, #144]	@ (8003efc <OS_EventTaskWait+0xa4>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e70:	461a      	mov	r2, r3
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	4413      	add	r3, r2
 8003e76:	7ada      	ldrb	r2, [r3, #11]
 8003e78:	4b20      	ldr	r3, [pc, #128]	@ (8003efc <OS_EventTaskWait+0xa4>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e80:	491e      	ldr	r1, [pc, #120]	@ (8003efc <OS_EventTaskWait+0xa4>)
 8003e82:	6809      	ldr	r1, [r1, #0]
 8003e84:	f891 103c 	ldrb.w	r1, [r1, #60]	@ 0x3c
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	b2da      	uxtb	r2, r3
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	440b      	add	r3, r1
 8003e90:	72da      	strb	r2, [r3, #11]
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	7a9a      	ldrb	r2, [r3, #10]
 8003e96:	4b19      	ldr	r3, [pc, #100]	@ (8003efc <OS_EventTaskWait+0xa4>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	b2da      	uxtb	r2, r3
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	729a      	strb	r2, [r3, #10]

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
 8003ea6:	4b15      	ldr	r3, [pc, #84]	@ (8003efc <OS_EventTaskWait+0xa4>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003eae:	73fb      	strb	r3, [r7, #15]
    OSRdyTbl[y]  &= (OS_PRIO)~OSTCBCur->OSTCBBitX;
 8003eb0:	7bfb      	ldrb	r3, [r7, #15]
 8003eb2:	4a13      	ldr	r2, [pc, #76]	@ (8003f00 <OS_EventTaskWait+0xa8>)
 8003eb4:	5cd1      	ldrb	r1, [r2, r3]
 8003eb6:	4b11      	ldr	r3, [pc, #68]	@ (8003efc <OS_EventTaskWait+0xa4>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ebe:	43db      	mvns	r3, r3
 8003ec0:	b2da      	uxtb	r2, r3
 8003ec2:	7bfb      	ldrb	r3, [r7, #15]
 8003ec4:	400a      	ands	r2, r1
 8003ec6:	b2d1      	uxtb	r1, r2
 8003ec8:	4a0d      	ldr	r2, [pc, #52]	@ (8003f00 <OS_EventTaskWait+0xa8>)
 8003eca:	54d1      	strb	r1, [r2, r3]
    OS_TRACE_TASK_SUSPENDED(OSTCBCur);
    if (OSRdyTbl[y] == 0u) {                      /* Clear event grp bit if this was only task pending */
 8003ecc:	7bfb      	ldrb	r3, [r7, #15]
 8003ece:	4a0c      	ldr	r2, [pc, #48]	@ (8003f00 <OS_EventTaskWait+0xa8>)
 8003ed0:	5cd3      	ldrb	r3, [r2, r3]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d10b      	bne.n	8003eee <OS_EventTaskWait+0x96>
        OSRdyGrp &= (OS_PRIO)~OSTCBCur->OSTCBBitY;
 8003ed6:	4b09      	ldr	r3, [pc, #36]	@ (8003efc <OS_EventTaskWait+0xa4>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003ede:	43db      	mvns	r3, r3
 8003ee0:	b2da      	uxtb	r2, r3
 8003ee2:	4b08      	ldr	r3, [pc, #32]	@ (8003f04 <OS_EventTaskWait+0xac>)
 8003ee4:	781b      	ldrb	r3, [r3, #0]
 8003ee6:	4013      	ands	r3, r2
 8003ee8:	b2da      	uxtb	r2, r3
 8003eea:	4b06      	ldr	r3, [pc, #24]	@ (8003f04 <OS_EventTaskWait+0xac>)
 8003eec:	701a      	strb	r2, [r3, #0]
    }
}
 8003eee:	bf00      	nop
 8003ef0:	3714      	adds	r7, #20
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef8:	4770      	bx	lr
 8003efa:	bf00      	nop
 8003efc:	20001a34 	.word	0x20001a34
 8003f00:	20001824 	.word	0x20001824
 8003f04:	20001820 	.word	0x20001820

08003f08 <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	b085      	sub	sp, #20
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
 8003f10:	6039      	str	r1, [r7, #0]
    INT8U  y;


    y                       =  ptcb->OSTCBY;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f18:	73fb      	strb	r3, [r7, #15]
    pevent->OSEventTbl[y]  &= (OS_PRIO)~ptcb->OSTCBBitX;    /* Remove task from wait list              */
 8003f1a:	7bfb      	ldrb	r3, [r7, #15]
 8003f1c:	683a      	ldr	r2, [r7, #0]
 8003f1e:	4413      	add	r3, r2
 8003f20:	7ad9      	ldrb	r1, [r3, #11]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f28:	43db      	mvns	r3, r3
 8003f2a:	b2da      	uxtb	r2, r3
 8003f2c:	7bfb      	ldrb	r3, [r7, #15]
 8003f2e:	400a      	ands	r2, r1
 8003f30:	b2d1      	uxtb	r1, r2
 8003f32:	683a      	ldr	r2, [r7, #0]
 8003f34:	4413      	add	r3, r2
 8003f36:	460a      	mov	r2, r1
 8003f38:	72da      	strb	r2, [r3, #11]
    if (pevent->OSEventTbl[y] == 0u) {
 8003f3a:	7bfb      	ldrb	r3, [r7, #15]
 8003f3c:	683a      	ldr	r2, [r7, #0]
 8003f3e:	4413      	add	r3, r2
 8003f40:	7adb      	ldrb	r3, [r3, #11]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d10a      	bne.n	8003f5c <OS_EventTaskRemove+0x54>
        pevent->OSEventGrp &= (OS_PRIO)~ptcb->OSTCBBitY;
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	7a9a      	ldrb	r2, [r3, #10]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003f50:	43db      	mvns	r3, r3
 8003f52:	b2db      	uxtb	r3, r3
 8003f54:	4013      	ands	r3, r2
 8003f56:	b2da      	uxtb	r2, r3
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	729a      	strb	r2, [r3, #10]
    }
    ptcb->OSTCBEventPtr     = (OS_EVENT  *)0;               /* Unlink OS_EVENT from OS_TCB             */
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	61da      	str	r2, [r3, #28]
}
 8003f62:	bf00      	nop
 8003f64:	3714      	adds	r7, #20
 8003f66:	46bd      	mov	sp, r7
 8003f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6c:	4770      	bx	lr

08003f6e <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0u))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
 8003f6e:	b480      	push	{r7}
 8003f70:	b087      	sub	sp, #28
 8003f72:	af00      	add	r7, sp, #0
 8003f74:	6078      	str	r0, [r7, #4]
 8003f76:	6039      	str	r1, [r7, #0]
    INT8U      y;
    OS_PRIO    bity;
    OS_PRIO    bitx;


    y       =  ptcb->OSTCBY;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f7e:	73fb      	strb	r3, [r7, #15]
    bity    =  ptcb->OSTCBBitY;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003f86:	73bb      	strb	r3, [r7, #14]
    bitx    =  ptcb->OSTCBBitX;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f8e:	737b      	strb	r3, [r7, #13]
    pevents =  pevents_multi;
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	617b      	str	r3, [r7, #20]
    pevent  = *pevents;
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	613b      	str	r3, [r7, #16]
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
 8003f9a:	e022      	b.n	8003fe2 <OS_EventTaskRemoveMulti+0x74>
        pevent->OSEventTbl[y]  &= (OS_PRIO)~bitx;
 8003f9c:	7bfb      	ldrb	r3, [r7, #15]
 8003f9e:	693a      	ldr	r2, [r7, #16]
 8003fa0:	4413      	add	r3, r2
 8003fa2:	7ad9      	ldrb	r1, [r3, #11]
 8003fa4:	7b7b      	ldrb	r3, [r7, #13]
 8003fa6:	43db      	mvns	r3, r3
 8003fa8:	b2da      	uxtb	r2, r3
 8003faa:	7bfb      	ldrb	r3, [r7, #15]
 8003fac:	400a      	ands	r2, r1
 8003fae:	b2d1      	uxtb	r1, r2
 8003fb0:	693a      	ldr	r2, [r7, #16]
 8003fb2:	4413      	add	r3, r2
 8003fb4:	460a      	mov	r2, r1
 8003fb6:	72da      	strb	r2, [r3, #11]
        if (pevent->OSEventTbl[y] == 0u) {
 8003fb8:	7bfb      	ldrb	r3, [r7, #15]
 8003fba:	693a      	ldr	r2, [r7, #16]
 8003fbc:	4413      	add	r3, r2
 8003fbe:	7adb      	ldrb	r3, [r3, #11]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d108      	bne.n	8003fd6 <OS_EventTaskRemoveMulti+0x68>
            pevent->OSEventGrp &= (OS_PRIO)~bity;
 8003fc4:	693b      	ldr	r3, [r7, #16]
 8003fc6:	7a9a      	ldrb	r2, [r3, #10]
 8003fc8:	7bbb      	ldrb	r3, [r7, #14]
 8003fca:	43db      	mvns	r3, r3
 8003fcc:	b2db      	uxtb	r3, r3
 8003fce:	4013      	ands	r3, r2
 8003fd0:	b2da      	uxtb	r2, r3
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	729a      	strb	r2, [r3, #10]
        }
        pevents++;
 8003fd6:	697b      	ldr	r3, [r7, #20]
 8003fd8:	3304      	adds	r3, #4
 8003fda:	617b      	str	r3, [r7, #20]
        pevent = *pevents;
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	613b      	str	r3, [r7, #16]
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d1d9      	bne.n	8003f9c <OS_EventTaskRemoveMulti+0x2e>
    }
}
 8003fe8:	bf00      	nop
 8003fea:	bf00      	nop
 8003fec:	371c      	adds	r7, #28
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff4:	4770      	bx	lr

08003ff6 <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
 8003ff6:	b480      	push	{r7}
 8003ff8:	b085      	sub	sp, #20
 8003ffa:	af00      	add	r7, sp, #0
 8003ffc:	6078      	str	r0, [r7, #4]
    INT8U  i;


    pevent->OSEventGrp = 0u;                     /* No task waiting on event                           */
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2200      	movs	r2, #0
 8004002:	729a      	strb	r2, [r3, #10]
    for (i = 0u; i < OS_EVENT_TBL_SIZE; i++) {
 8004004:	2300      	movs	r3, #0
 8004006:	73fb      	strb	r3, [r7, #15]
 8004008:	e007      	b.n	800401a <OS_EventWaitListInit+0x24>
        pevent->OSEventTbl[i] = 0u;
 800400a:	7bfb      	ldrb	r3, [r7, #15]
 800400c:	687a      	ldr	r2, [r7, #4]
 800400e:	4413      	add	r3, r2
 8004010:	2200      	movs	r2, #0
 8004012:	72da      	strb	r2, [r3, #11]
    for (i = 0u; i < OS_EVENT_TBL_SIZE; i++) {
 8004014:	7bfb      	ldrb	r3, [r7, #15]
 8004016:	3301      	adds	r3, #1
 8004018:	73fb      	strb	r3, [r7, #15]
 800401a:	7bfb      	ldrb	r3, [r7, #15]
 800401c:	2b07      	cmp	r3, #7
 800401e:	d9f4      	bls.n	800400a <OS_EventWaitListInit+0x14>
    }
}
 8004020:	bf00      	nop
 8004022:	bf00      	nop
 8004024:	3714      	adds	r7, #20
 8004026:	46bd      	mov	sp, r7
 8004028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402c:	4770      	bx	lr
	...

08004030 <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b084      	sub	sp, #16
 8004034:	af00      	add	r7, sp, #0
    INT16U     ix_next;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
 8004036:	21f0      	movs	r1, #240	@ 0xf0
 8004038:	481f      	ldr	r0, [pc, #124]	@ (80040b8 <OS_InitEventList+0x88>)
 800403a:	f000 f94d 	bl	80042d8 <OS_MemClr>
    for (ix = 0u; ix < (OS_MAX_EVENTS - 1u); ix++) {        /* Init. list of free EVENT control blocks */
 800403e:	2300      	movs	r3, #0
 8004040:	81fb      	strh	r3, [r7, #14]
 8004042:	e01e      	b.n	8004082 <OS_InitEventList+0x52>
        ix_next = ix + 1u;
 8004044:	89fb      	ldrh	r3, [r7, #14]
 8004046:	3301      	adds	r3, #1
 8004048:	80fb      	strh	r3, [r7, #6]
        pevent1 = &OSEventTbl[ix];
 800404a:	89fa      	ldrh	r2, [r7, #14]
 800404c:	4613      	mov	r3, r2
 800404e:	005b      	lsls	r3, r3, #1
 8004050:	4413      	add	r3, r2
 8004052:	00db      	lsls	r3, r3, #3
 8004054:	4a18      	ldr	r2, [pc, #96]	@ (80040b8 <OS_InitEventList+0x88>)
 8004056:	4413      	add	r3, r2
 8004058:	60bb      	str	r3, [r7, #8]
        pevent2 = &OSEventTbl[ix_next];
 800405a:	88fa      	ldrh	r2, [r7, #6]
 800405c:	4613      	mov	r3, r2
 800405e:	005b      	lsls	r3, r3, #1
 8004060:	4413      	add	r3, r2
 8004062:	00db      	lsls	r3, r3, #3
 8004064:	4a14      	ldr	r2, [pc, #80]	@ (80040b8 <OS_InitEventList+0x88>)
 8004066:	4413      	add	r3, r2
 8004068:	603b      	str	r3, [r7, #0]
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	2200      	movs	r2, #0
 800406e:	701a      	strb	r2, [r3, #0]
        pevent1->OSEventPtr     = pevent2;
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	683a      	ldr	r2, [r7, #0]
 8004074:	605a      	str	r2, [r3, #4]
#if OS_EVENT_NAME_EN > 0u
        pevent1->OSEventName    = (INT8U *)(void *)"?";     /* Unknown name                            */
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	4a10      	ldr	r2, [pc, #64]	@ (80040bc <OS_InitEventList+0x8c>)
 800407a:	615a      	str	r2, [r3, #20]
    for (ix = 0u; ix < (OS_MAX_EVENTS - 1u); ix++) {        /* Init. list of free EVENT control blocks */
 800407c:	89fb      	ldrh	r3, [r7, #14]
 800407e:	3301      	adds	r3, #1
 8004080:	81fb      	strh	r3, [r7, #14]
 8004082:	89fb      	ldrh	r3, [r7, #14]
 8004084:	2b08      	cmp	r3, #8
 8004086:	d9dd      	bls.n	8004044 <OS_InitEventList+0x14>
#endif
    }
    pevent1                         = &OSEventTbl[ix];
 8004088:	89fa      	ldrh	r2, [r7, #14]
 800408a:	4613      	mov	r3, r2
 800408c:	005b      	lsls	r3, r3, #1
 800408e:	4413      	add	r3, r2
 8004090:	00db      	lsls	r3, r3, #3
 8004092:	4a09      	ldr	r2, [pc, #36]	@ (80040b8 <OS_InitEventList+0x88>)
 8004094:	4413      	add	r3, r2
 8004096:	60bb      	str	r3, [r7, #8]
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	2200      	movs	r2, #0
 800409c:	701a      	strb	r2, [r3, #0]
    pevent1->OSEventPtr             = (OS_EVENT *)0;
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	2200      	movs	r2, #0
 80040a2:	605a      	str	r2, [r3, #4]
#if OS_EVENT_NAME_EN > 0u
    pevent1->OSEventName            = (INT8U *)(void *)"?"; /* Unknown name                            */
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	4a05      	ldr	r2, [pc, #20]	@ (80040bc <OS_InitEventList+0x8c>)
 80040a8:	615a      	str	r2, [r3, #20]
#endif
    OSEventFreeList                 = &OSEventTbl[0];
 80040aa:	4b05      	ldr	r3, [pc, #20]	@ (80040c0 <OS_InitEventList+0x90>)
 80040ac:	4a02      	ldr	r2, [pc, #8]	@ (80040b8 <OS_InitEventList+0x88>)
 80040ae:	601a      	str	r2, [r3, #0]
#if OS_EVENT_NAME_EN > 0u
    OSEventFreeList->OSEventName    = (INT8U *)"?";         /* Unknown name                            */
#endif
#endif
#endif
}
 80040b0:	bf00      	nop
 80040b2:	3710      	adds	r7, #16
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bd80      	pop	{r7, pc}
 80040b8:	200014c8 	.word	0x200014c8
 80040bc:	080056e0 	.word	0x080056e0
 80040c0:	200014c4 	.word	0x200014c4

080040c4 <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
 80040c4:	b480      	push	{r7}
 80040c6:	af00      	add	r7, sp, #0
#if OS_TIME_GET_SET_EN > 0u
    OSTime                    = 0uL;                       /* Clear the 32-bit system clock            */
 80040c8:	4b12      	ldr	r3, [pc, #72]	@ (8004114 <OS_InitMisc+0x50>)
 80040ca:	2200      	movs	r2, #0
 80040cc:	601a      	str	r2, [r3, #0]
#endif

    OSIntNesting              = 0u;                        /* Clear the interrupt nesting counter      */
 80040ce:	4b12      	ldr	r3, [pc, #72]	@ (8004118 <OS_InitMisc+0x54>)
 80040d0:	2200      	movs	r2, #0
 80040d2:	701a      	strb	r2, [r3, #0]
    OSLockNesting             = 0u;                        /* Clear the scheduling lock counter        */
 80040d4:	4b11      	ldr	r3, [pc, #68]	@ (800411c <OS_InitMisc+0x58>)
 80040d6:	2200      	movs	r2, #0
 80040d8:	701a      	strb	r2, [r3, #0]

    OSTaskCtr                 = 0u;                        /* Clear the number of tasks                */
 80040da:	4b11      	ldr	r3, [pc, #68]	@ (8004120 <OS_InitMisc+0x5c>)
 80040dc:	2200      	movs	r2, #0
 80040de:	701a      	strb	r2, [r3, #0]

    OSRunning                 = OS_FALSE;                  /* Indicate that multitasking not started   */
 80040e0:	4b10      	ldr	r3, [pc, #64]	@ (8004124 <OS_InitMisc+0x60>)
 80040e2:	2200      	movs	r2, #0
 80040e4:	701a      	strb	r2, [r3, #0]

    OSCtxSwCtr                = 0u;                        /* Clear the context switch counter         */
 80040e6:	4b10      	ldr	r3, [pc, #64]	@ (8004128 <OS_InitMisc+0x64>)
 80040e8:	2200      	movs	r2, #0
 80040ea:	601a      	str	r2, [r3, #0]
    OSIdleCtr                 = 0uL;                       /* Clear the 32-bit idle counter            */
 80040ec:	4b0f      	ldr	r3, [pc, #60]	@ (800412c <OS_InitMisc+0x68>)
 80040ee:	2200      	movs	r2, #0
 80040f0:	601a      	str	r2, [r3, #0]

#if OS_TASK_STAT_EN > 0u
    OSIdleCtrRun              = 0uL;
 80040f2:	4b0f      	ldr	r3, [pc, #60]	@ (8004130 <OS_InitMisc+0x6c>)
 80040f4:	2200      	movs	r2, #0
 80040f6:	601a      	str	r2, [r3, #0]
    OSIdleCtrMax              = 0uL;
 80040f8:	4b0e      	ldr	r3, [pc, #56]	@ (8004134 <OS_InitMisc+0x70>)
 80040fa:	2200      	movs	r2, #0
 80040fc:	601a      	str	r2, [r3, #0]
    OSStatRdy                 = OS_FALSE;                  /* Statistic task is not ready              */
 80040fe:	4b0e      	ldr	r3, [pc, #56]	@ (8004138 <OS_InitMisc+0x74>)
 8004100:	2200      	movs	r2, #0
 8004102:	701a      	strb	r2, [r3, #0]
#ifdef OS_SAFETY_CRITICAL_IEC61508
    OSSafetyCriticalStartFlag = OS_FALSE;                  /* Still allow creation of objects          */
#endif

#if OS_TASK_REG_TBL_SIZE > 0u
    OSTaskRegNextAvailID      = 0u;                        /* Initialize the task register ID          */
 8004104:	4b0d      	ldr	r3, [pc, #52]	@ (800413c <OS_InitMisc+0x78>)
 8004106:	2200      	movs	r2, #0
 8004108:	701a      	strb	r2, [r3, #0]
#endif
}
 800410a:	bf00      	nop
 800410c:	46bd      	mov	sp, r7
 800410e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004112:	4770      	bx	lr
 8004114:	20002414 	.word	0x20002414
 8004118:	2000181c 	.word	0x2000181c
 800411c:	2000181d 	.word	0x2000181d
 8004120:	2000182d 	.word	0x2000182d
 8004124:	2000182c 	.word	0x2000182c
 8004128:	200014c0 	.word	0x200014c0
 800412c:	20001830 	.word	0x20001830
 8004130:	20001614 	.word	0x20001614
 8004134:	20001610 	.word	0x20001610
 8004138:	20001618 	.word	0x20001618
 800413c:	20002410 	.word	0x20002410

08004140 <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
 8004140:	b480      	push	{r7}
 8004142:	b083      	sub	sp, #12
 8004144:	af00      	add	r7, sp, #0
    INT8U  i;


    OSRdyGrp      = 0u;                                    /* Clear the ready list                     */
 8004146:	4b11      	ldr	r3, [pc, #68]	@ (800418c <OS_InitRdyList+0x4c>)
 8004148:	2200      	movs	r2, #0
 800414a:	701a      	strb	r2, [r3, #0]
    for (i = 0u; i < OS_RDY_TBL_SIZE; i++) {
 800414c:	2300      	movs	r3, #0
 800414e:	71fb      	strb	r3, [r7, #7]
 8004150:	e006      	b.n	8004160 <OS_InitRdyList+0x20>
        OSRdyTbl[i] = 0u;
 8004152:	79fb      	ldrb	r3, [r7, #7]
 8004154:	4a0e      	ldr	r2, [pc, #56]	@ (8004190 <OS_InitRdyList+0x50>)
 8004156:	2100      	movs	r1, #0
 8004158:	54d1      	strb	r1, [r2, r3]
    for (i = 0u; i < OS_RDY_TBL_SIZE; i++) {
 800415a:	79fb      	ldrb	r3, [r7, #7]
 800415c:	3301      	adds	r3, #1
 800415e:	71fb      	strb	r3, [r7, #7]
 8004160:	79fb      	ldrb	r3, [r7, #7]
 8004162:	2b07      	cmp	r3, #7
 8004164:	d9f5      	bls.n	8004152 <OS_InitRdyList+0x12>
    }

    OSPrioCur     = 0u;
 8004166:	4b0b      	ldr	r3, [pc, #44]	@ (8004194 <OS_InitRdyList+0x54>)
 8004168:	2200      	movs	r2, #0
 800416a:	701a      	strb	r2, [r3, #0]
    OSPrioHighRdy = 0u;
 800416c:	4b0a      	ldr	r3, [pc, #40]	@ (8004198 <OS_InitRdyList+0x58>)
 800416e:	2200      	movs	r2, #0
 8004170:	701a      	strb	r2, [r3, #0]

    OSTCBHighRdy  = (OS_TCB *)0;
 8004172:	4b0a      	ldr	r3, [pc, #40]	@ (800419c <OS_InitRdyList+0x5c>)
 8004174:	2200      	movs	r2, #0
 8004176:	601a      	str	r2, [r3, #0]
    OSTCBCur      = (OS_TCB *)0;
 8004178:	4b09      	ldr	r3, [pc, #36]	@ (80041a0 <OS_InitRdyList+0x60>)
 800417a:	2200      	movs	r2, #0
 800417c:	601a      	str	r2, [r3, #0]
}
 800417e:	bf00      	nop
 8004180:	370c      	adds	r7, #12
 8004182:	46bd      	mov	sp, r7
 8004184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004188:	4770      	bx	lr
 800418a:	bf00      	nop
 800418c:	20001820 	.word	0x20001820
 8004190:	20001824 	.word	0x20001824
 8004194:	2000181e 	.word	0x2000181e
 8004198:	2000181f 	.word	0x2000181f
 800419c:	20001a3c 	.word	0x20001a3c
 80041a0:	20001a34 	.word	0x20001a34

080041a4 <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b088      	sub	sp, #32
 80041a8:	af06      	add	r7, sp, #24
#endif


#if OS_TASK_CREATE_EXT_EN > 0u
    #if OS_STK_GROWTH == 1u
    (void)OSTaskCreateExt(OS_TaskIdle,
 80041aa:	2303      	movs	r3, #3
 80041ac:	9304      	str	r3, [sp, #16]
 80041ae:	2300      	movs	r3, #0
 80041b0:	9303      	str	r3, [sp, #12]
 80041b2:	2380      	movs	r3, #128	@ 0x80
 80041b4:	9302      	str	r3, [sp, #8]
 80041b6:	4b0a      	ldr	r3, [pc, #40]	@ (80041e0 <OS_InitTaskIdle+0x3c>)
 80041b8:	9301      	str	r3, [sp, #4]
 80041ba:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80041be:	9300      	str	r3, [sp, #0]
 80041c0:	233f      	movs	r3, #63	@ 0x3f
 80041c2:	4a08      	ldr	r2, [pc, #32]	@ (80041e4 <OS_InitTaskIdle+0x40>)
 80041c4:	2100      	movs	r1, #0
 80041c6:	4808      	ldr	r0, [pc, #32]	@ (80041e8 <OS_InitTaskIdle+0x44>)
 80041c8:	f000 fcc6 	bl	8004b58 <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_EN > 0u
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)(void *)"uC/OS-II Idle", &err);
 80041cc:	1dfb      	adds	r3, r7, #7
 80041ce:	461a      	mov	r2, r3
 80041d0:	4906      	ldr	r1, [pc, #24]	@ (80041ec <OS_InitTaskIdle+0x48>)
 80041d2:	203f      	movs	r0, #63	@ 0x3f
 80041d4:	f000 fe24 	bl	8004e20 <OSTaskNameSet>
#endif
}
 80041d8:	bf00      	nop
 80041da:	3708      	adds	r7, #8
 80041dc:	46bd      	mov	sp, r7
 80041de:	bd80      	pop	{r7, pc}
 80041e0:	20001834 	.word	0x20001834
 80041e4:	20001a30 	.word	0x20001a30
 80041e8:	080043d9 	.word	0x080043d9
 80041ec:	080056e4 	.word	0x080056e4

080041f0 <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0u
static  void  OS_InitTaskStat (void)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b088      	sub	sp, #32
 80041f4:	af06      	add	r7, sp, #24
#endif


#if OS_TASK_CREATE_EXT_EN > 0u
    #if OS_STK_GROWTH == 1u
    (void)OSTaskCreateExt(OS_TaskStat,
 80041f6:	2303      	movs	r3, #3
 80041f8:	9304      	str	r3, [sp, #16]
 80041fa:	2300      	movs	r3, #0
 80041fc:	9303      	str	r3, [sp, #12]
 80041fe:	2380      	movs	r3, #128	@ 0x80
 8004200:	9302      	str	r3, [sp, #8]
 8004202:	4b0a      	ldr	r3, [pc, #40]	@ (800422c <OS_InitTaskStat+0x3c>)
 8004204:	9301      	str	r3, [sp, #4]
 8004206:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 800420a:	9300      	str	r3, [sp, #0]
 800420c:	233e      	movs	r3, #62	@ 0x3e
 800420e:	4a08      	ldr	r2, [pc, #32]	@ (8004230 <OS_InitTaskStat+0x40>)
 8004210:	2100      	movs	r1, #0
 8004212:	4808      	ldr	r0, [pc, #32]	@ (8004234 <OS_InitTaskStat+0x44>)
 8004214:	f000 fca0 	bl	8004b58 <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_EN > 0u
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)(void *)"uC/OS-II Stat", &err);
 8004218:	1dfb      	adds	r3, r7, #7
 800421a:	461a      	mov	r2, r3
 800421c:	4906      	ldr	r1, [pc, #24]	@ (8004238 <OS_InitTaskStat+0x48>)
 800421e:	203e      	movs	r0, #62	@ 0x3e
 8004220:	f000 fdfe 	bl	8004e20 <OSTaskNameSet>
#endif
}
 8004224:	bf00      	nop
 8004226:	3708      	adds	r7, #8
 8004228:	46bd      	mov	sp, r7
 800422a:	bd80      	pop	{r7, pc}
 800422c:	2000161c 	.word	0x2000161c
 8004230:	20001818 	.word	0x20001818
 8004234:	08004409 	.word	0x08004409
 8004238:	080056f4 	.word	0x080056f4

0800423c <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b084      	sub	sp, #16
 8004240:	af00      	add	r7, sp, #0
    INT8U    ix_next;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
 8004242:	f44f 61fd 	mov.w	r1, #2024	@ 0x7e8
 8004246:	481f      	ldr	r0, [pc, #124]	@ (80042c4 <OS_InitTCBList+0x88>)
 8004248:	f000 f846 	bl	80042d8 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
 800424c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004250:	481d      	ldr	r0, [pc, #116]	@ (80042c8 <OS_InitTCBList+0x8c>)
 8004252:	f000 f841 	bl	80042d8 <OS_MemClr>
    for (ix = 0u; ix < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1u); ix++) {    /* Init. list of free TCBs     */
 8004256:	2300      	movs	r3, #0
 8004258:	73fb      	strb	r3, [r7, #15]
 800425a:	e019      	b.n	8004290 <OS_InitTCBList+0x54>
        ix_next =  ix + 1u;
 800425c:	7bfb      	ldrb	r3, [r7, #15]
 800425e:	3301      	adds	r3, #1
 8004260:	71fb      	strb	r3, [r7, #7]
        ptcb1   = &OSTCBTbl[ix];
 8004262:	7bfb      	ldrb	r3, [r7, #15]
 8004264:	225c      	movs	r2, #92	@ 0x5c
 8004266:	fb02 f303 	mul.w	r3, r2, r3
 800426a:	4a16      	ldr	r2, [pc, #88]	@ (80042c4 <OS_InitTCBList+0x88>)
 800426c:	4413      	add	r3, r2
 800426e:	60bb      	str	r3, [r7, #8]
        ptcb2   = &OSTCBTbl[ix_next];
 8004270:	79fb      	ldrb	r3, [r7, #7]
 8004272:	225c      	movs	r2, #92	@ 0x5c
 8004274:	fb02 f303 	mul.w	r3, r2, r3
 8004278:	4a12      	ldr	r2, [pc, #72]	@ (80042c4 <OS_InitTCBList+0x88>)
 800427a:	4413      	add	r3, r2
 800427c:	603b      	str	r3, [r7, #0]
        ptcb1->OSTCBNext = ptcb2;
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	683a      	ldr	r2, [r7, #0]
 8004282:	615a      	str	r2, [r3, #20]
#if OS_TASK_NAME_EN > 0u
        ptcb1->OSTCBTaskName = (INT8U *)(void *)"?";             /* Unknown name                       */
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	4a11      	ldr	r2, [pc, #68]	@ (80042cc <OS_InitTCBList+0x90>)
 8004288:	655a      	str	r2, [r3, #84]	@ 0x54
    for (ix = 0u; ix < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1u); ix++) {    /* Init. list of free TCBs     */
 800428a:	7bfb      	ldrb	r3, [r7, #15]
 800428c:	3301      	adds	r3, #1
 800428e:	73fb      	strb	r3, [r7, #15]
 8004290:	7bfb      	ldrb	r3, [r7, #15]
 8004292:	2b14      	cmp	r3, #20
 8004294:	d9e2      	bls.n	800425c <OS_InitTCBList+0x20>
#endif
    }
    ptcb1                   = &OSTCBTbl[ix];
 8004296:	7bfb      	ldrb	r3, [r7, #15]
 8004298:	225c      	movs	r2, #92	@ 0x5c
 800429a:	fb02 f303 	mul.w	r3, r2, r3
 800429e:	4a09      	ldr	r2, [pc, #36]	@ (80042c4 <OS_InitTCBList+0x88>)
 80042a0:	4413      	add	r3, r2
 80042a2:	60bb      	str	r3, [r7, #8]
    ptcb1->OSTCBNext        = (OS_TCB *)0;                       /* Last OS_TCB                        */
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	2200      	movs	r2, #0
 80042a8:	615a      	str	r2, [r3, #20]
#if OS_TASK_NAME_EN > 0u
    ptcb1->OSTCBTaskName    = (INT8U *)(void *)"?";              /* Unknown name                       */
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	4a07      	ldr	r2, [pc, #28]	@ (80042cc <OS_InitTCBList+0x90>)
 80042ae:	655a      	str	r2, [r3, #84]	@ 0x54
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
 80042b0:	4b07      	ldr	r3, [pc, #28]	@ (80042d0 <OS_InitTCBList+0x94>)
 80042b2:	2200      	movs	r2, #0
 80042b4:	601a      	str	r2, [r3, #0]
    OSTCBFreeList           = &OSTCBTbl[0];
 80042b6:	4b07      	ldr	r3, [pc, #28]	@ (80042d4 <OS_InitTCBList+0x98>)
 80042b8:	4a02      	ldr	r2, [pc, #8]	@ (80042c4 <OS_InitTCBList+0x88>)
 80042ba:	601a      	str	r2, [r3, #0]
}
 80042bc:	bf00      	nop
 80042be:	3710      	adds	r7, #16
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bd80      	pop	{r7, pc}
 80042c4:	20001b44 	.word	0x20001b44
 80042c8:	20001a44 	.word	0x20001a44
 80042cc:	080056e0 	.word	0x080056e0
 80042d0:	20001a40 	.word	0x20001a40
 80042d4:	20001a38 	.word	0x20001a38

080042d8 <OS_MemClr>:
*********************************************************************************************************
*/

void  OS_MemClr (INT8U  *pdest,
                 INT16U  size)
{
 80042d8:	b480      	push	{r7}
 80042da:	b083      	sub	sp, #12
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
 80042e0:	460b      	mov	r3, r1
 80042e2:	807b      	strh	r3, [r7, #2]
    while (size > 0u) {
 80042e4:	e007      	b.n	80042f6 <OS_MemClr+0x1e>
        *pdest++ = (INT8U)0;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	1c5a      	adds	r2, r3, #1
 80042ea:	607a      	str	r2, [r7, #4]
 80042ec:	2200      	movs	r2, #0
 80042ee:	701a      	strb	r2, [r3, #0]
        size--;
 80042f0:	887b      	ldrh	r3, [r7, #2]
 80042f2:	3b01      	subs	r3, #1
 80042f4:	807b      	strh	r3, [r7, #2]
    while (size > 0u) {
 80042f6:	887b      	ldrh	r3, [r7, #2]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d1f4      	bne.n	80042e6 <OS_MemClr+0xe>
    }
}
 80042fc:	bf00      	nop
 80042fe:	bf00      	nop
 8004300:	370c      	adds	r7, #12
 8004302:	46bd      	mov	sp, r7
 8004304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004308:	4770      	bx	lr
	...

0800430c <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b082      	sub	sp, #8
 8004310:	af00      	add	r7, sp, #0
#if OS_CRITICAL_METHOD == 3u                           /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0u;
 8004312:	2300      	movs	r3, #0
 8004314:	607b      	str	r3, [r7, #4]
#endif



    OS_ENTER_CRITICAL();
 8004316:	2040      	movs	r0, #64	@ 0x40
 8004318:	f7fb ff65 	bl	80001e6 <OS_CPU_SR_Save>
 800431c:	6078      	str	r0, [r7, #4]
    if (OSIntNesting == 0u) {                          /* Schedule only if all ISRs done and ...       */
 800431e:	4b15      	ldr	r3, [pc, #84]	@ (8004374 <OS_Sched+0x68>)
 8004320:	781b      	ldrb	r3, [r3, #0]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d11f      	bne.n	8004366 <OS_Sched+0x5a>
        if (OSLockNesting == 0u) {                     /* ... scheduler is not locked                  */
 8004326:	4b14      	ldr	r3, [pc, #80]	@ (8004378 <OS_Sched+0x6c>)
 8004328:	781b      	ldrb	r3, [r3, #0]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d11b      	bne.n	8004366 <OS_Sched+0x5a>
            OS_SchedNew();
 800432e:	f000 f82f 	bl	8004390 <OS_SchedNew>
            OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
 8004332:	4b12      	ldr	r3, [pc, #72]	@ (800437c <OS_Sched+0x70>)
 8004334:	781b      	ldrb	r3, [r3, #0]
 8004336:	461a      	mov	r2, r3
 8004338:	4b11      	ldr	r3, [pc, #68]	@ (8004380 <OS_Sched+0x74>)
 800433a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800433e:	4a11      	ldr	r2, [pc, #68]	@ (8004384 <OS_Sched+0x78>)
 8004340:	6013      	str	r3, [r2, #0]
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
 8004342:	4b0e      	ldr	r3, [pc, #56]	@ (800437c <OS_Sched+0x70>)
 8004344:	781a      	ldrb	r2, [r3, #0]
 8004346:	4b10      	ldr	r3, [pc, #64]	@ (8004388 <OS_Sched+0x7c>)
 8004348:	781b      	ldrb	r3, [r3, #0]
 800434a:	429a      	cmp	r2, r3
 800434c:	d00b      	beq.n	8004366 <OS_Sched+0x5a>
#if OS_TASK_PROFILE_EN > 0u
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
 800434e:	4b0d      	ldr	r3, [pc, #52]	@ (8004384 <OS_Sched+0x78>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004354:	3201      	adds	r2, #1
 8004356:	641a      	str	r2, [r3, #64]	@ 0x40
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
 8004358:	4b0c      	ldr	r3, [pc, #48]	@ (800438c <OS_Sched+0x80>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	3301      	adds	r3, #1
 800435e:	4a0b      	ldr	r2, [pc, #44]	@ (800438c <OS_Sched+0x80>)
 8004360:	6013      	str	r3, [r2, #0]
#if defined(OS_TLS_TBL_SIZE) && (OS_TLS_TBL_SIZE > 0u)
                OS_TLS_TaskSw();
#endif
#endif

                OS_TASK_SW();                          /* Perform a context switch                     */
 8004362:	f7fb ff97 	bl	8000294 <OSCtxSw>
            }
        }
    }
    OS_EXIT_CRITICAL();
 8004366:	6878      	ldr	r0, [r7, #4]
 8004368:	f7fb ff4b 	bl	8000202 <OS_CPU_SR_Restore>
}
 800436c:	bf00      	nop
 800436e:	3708      	adds	r7, #8
 8004370:	46bd      	mov	sp, r7
 8004372:	bd80      	pop	{r7, pc}
 8004374:	2000181c 	.word	0x2000181c
 8004378:	2000181d 	.word	0x2000181d
 800437c:	2000181f 	.word	0x2000181f
 8004380:	20001a44 	.word	0x20001a44
 8004384:	20001a3c 	.word	0x20001a3c
 8004388:	2000181e 	.word	0x2000181e
 800438c:	200014c0 	.word	0x200014c0

08004390 <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
 8004390:	b480      	push	{r7}
 8004392:	b083      	sub	sp, #12
 8004394:	af00      	add	r7, sp, #0
#if OS_LOWEST_PRIO <= 63u                        /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
 8004396:	4b0c      	ldr	r3, [pc, #48]	@ (80043c8 <OS_SchedNew+0x38>)
 8004398:	781b      	ldrb	r3, [r3, #0]
 800439a:	461a      	mov	r2, r3
 800439c:	4b0b      	ldr	r3, [pc, #44]	@ (80043cc <OS_SchedNew+0x3c>)
 800439e:	5c9b      	ldrb	r3, [r3, r2]
 80043a0:	71fb      	strb	r3, [r7, #7]
    OSPrioHighRdy = (INT8U)((y << 3u) + OSUnMapTbl[OSRdyTbl[y]]);
 80043a2:	79fb      	ldrb	r3, [r7, #7]
 80043a4:	00db      	lsls	r3, r3, #3
 80043a6:	b2da      	uxtb	r2, r3
 80043a8:	79fb      	ldrb	r3, [r7, #7]
 80043aa:	4909      	ldr	r1, [pc, #36]	@ (80043d0 <OS_SchedNew+0x40>)
 80043ac:	5ccb      	ldrb	r3, [r1, r3]
 80043ae:	4619      	mov	r1, r3
 80043b0:	4b06      	ldr	r3, [pc, #24]	@ (80043cc <OS_SchedNew+0x3c>)
 80043b2:	5c5b      	ldrb	r3, [r3, r1]
 80043b4:	4413      	add	r3, r2
 80043b6:	b2da      	uxtb	r2, r3
 80043b8:	4b06      	ldr	r3, [pc, #24]	@ (80043d4 <OS_SchedNew+0x44>)
 80043ba:	701a      	strb	r2, [r3, #0]
        OSPrioHighRdy = (INT8U)((y << 4u) + OSUnMapTbl[(*ptbl & 0xFFu)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4u) + OSUnMapTbl[(OS_PRIO)(*ptbl >> 8u) & 0xFFu] + 8u);
    }
#endif
}
 80043bc:	bf00      	nop
 80043be:	370c      	adds	r7, #12
 80043c0:	46bd      	mov	sp, r7
 80043c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c6:	4770      	bx	lr
 80043c8:	20001820 	.word	0x20001820
 80043cc:	0800580c 	.word	0x0800580c
 80043d0:	20001824 	.word	0x20001824
 80043d4:	2000181f 	.word	0x2000181f

080043d8 <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b084      	sub	sp, #16
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0u;
 80043e0:	2300      	movs	r3, #0
 80043e2:	60fb      	str	r3, [r7, #12]
#endif

    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
 80043e4:	2040      	movs	r0, #64	@ 0x40
 80043e6:	f7fb fefe 	bl	80001e6 <OS_CPU_SR_Save>
 80043ea:	60f8      	str	r0, [r7, #12]
        OSIdleCtr++;
 80043ec:	4b05      	ldr	r3, [pc, #20]	@ (8004404 <OS_TaskIdle+0x2c>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	3301      	adds	r3, #1
 80043f2:	4a04      	ldr	r2, [pc, #16]	@ (8004404 <OS_TaskIdle+0x2c>)
 80043f4:	6013      	str	r3, [r2, #0]
        OS_EXIT_CRITICAL();
 80043f6:	68f8      	ldr	r0, [r7, #12]
 80043f8:	f7fb ff03 	bl	8000202 <OS_CPU_SR_Restore>
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
 80043fc:	f7fe ffdb 	bl	80033b6 <OSTaskIdleHook>
        OS_ENTER_CRITICAL();
 8004400:	bf00      	nop
 8004402:	e7ef      	b.n	80043e4 <OS_TaskIdle+0xc>
 8004404:	20001830 	.word	0x20001830

08004408 <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0u
void  OS_TaskStat (void *p_arg)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b084      	sub	sp, #16
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
    INT8S  usage;
#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0u;
 8004410:	2300      	movs	r3, #0
 8004412:	60fb      	str	r3, [r7, #12]
#endif



    p_arg = p_arg;                               /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
 8004414:	e002      	b.n	800441c <OS_TaskStat+0x14>
        OSTimeDly(2u * OS_TICKS_PER_SEC / 10u);  /* Wait until statistic task is ready                 */
 8004416:	2014      	movs	r0, #20
 8004418:	f000 fe80 	bl	800511c <OSTimeDly>
    while (OSStatRdy == OS_FALSE) {
 800441c:	4b30      	ldr	r3, [pc, #192]	@ (80044e0 <OS_TaskStat+0xd8>)
 800441e:	781b      	ldrb	r3, [r3, #0]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d0f8      	beq.n	8004416 <OS_TaskStat+0xe>
    }
    OSIdleCtrMax /= 100uL;
 8004424:	4b2f      	ldr	r3, [pc, #188]	@ (80044e4 <OS_TaskStat+0xdc>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a2f      	ldr	r2, [pc, #188]	@ (80044e8 <OS_TaskStat+0xe0>)
 800442a:	fba2 2303 	umull	r2, r3, r2, r3
 800442e:	095b      	lsrs	r3, r3, #5
 8004430:	4a2c      	ldr	r2, [pc, #176]	@ (80044e4 <OS_TaskStat+0xdc>)
 8004432:	6013      	str	r3, [r2, #0]
    if (OSIdleCtrMax == 0uL) {
 8004434:	4b2b      	ldr	r3, [pc, #172]	@ (80044e4 <OS_TaskStat+0xdc>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d105      	bne.n	8004448 <OS_TaskStat+0x40>
        OSCPUUsage = 0u;
 800443c:	4b2b      	ldr	r3, [pc, #172]	@ (80044ec <OS_TaskStat+0xe4>)
 800443e:	2200      	movs	r2, #0
 8004440:	701a      	strb	r2, [r3, #0]
#if OS_TASK_SUSPEND_EN > 0u
        (void)OSTaskSuspend(OS_PRIO_SELF);
 8004442:	20ff      	movs	r0, #255	@ 0xff
 8004444:	f000 fdb4 	bl	8004fb0 <OSTaskSuspend>
        for (;;) {
            OSTimeDly(OS_TICKS_PER_SEC);
        }
#endif
    }
    OS_ENTER_CRITICAL();
 8004448:	2040      	movs	r0, #64	@ 0x40
 800444a:	f7fb fecc 	bl	80001e6 <OS_CPU_SR_Save>
 800444e:	60f8      	str	r0, [r7, #12]
    OSIdleCtr = OSIdleCtrMax * 100uL;            /* Set initial CPU usage as 0%                        */
 8004450:	4b24      	ldr	r3, [pc, #144]	@ (80044e4 <OS_TaskStat+0xdc>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	2264      	movs	r2, #100	@ 0x64
 8004456:	fb02 f303 	mul.w	r3, r2, r3
 800445a:	4a25      	ldr	r2, [pc, #148]	@ (80044f0 <OS_TaskStat+0xe8>)
 800445c:	6013      	str	r3, [r2, #0]
    OS_EXIT_CRITICAL();
 800445e:	68f8      	ldr	r0, [r7, #12]
 8004460:	f7fb fecf 	bl	8000202 <OS_CPU_SR_Restore>
    for (;;) {
        OSTimeDly(1);                            /* Synchronize with clock tick                        */
 8004464:	2001      	movs	r0, #1
 8004466:	f000 fe59 	bl	800511c <OSTimeDly>

        OS_ENTER_CRITICAL();
 800446a:	2040      	movs	r0, #64	@ 0x40
 800446c:	f7fb febb 	bl	80001e6 <OS_CPU_SR_Save>
 8004470:	60f8      	str	r0, [r7, #12]
        OSIdleCtr = 0uL;                        /* Reset the idle counter for the next second         */
 8004472:	4b1f      	ldr	r3, [pc, #124]	@ (80044f0 <OS_TaskStat+0xe8>)
 8004474:	2200      	movs	r2, #0
 8004476:	601a      	str	r2, [r3, #0]
        OS_EXIT_CRITICAL();
 8004478:	68f8      	ldr	r0, [r7, #12]
 800447a:	f7fb fec2 	bl	8000202 <OS_CPU_SR_Restore>

        OSTimeDly(OS_TICKS_PER_SEC / 10u);       /* Accumulate OSIdleCtr for the next 1/10 second      */
 800447e:	200a      	movs	r0, #10
 8004480:	f000 fe4c 	bl	800511c <OSTimeDly>

        OS_ENTER_CRITICAL();
 8004484:	2040      	movs	r0, #64	@ 0x40
 8004486:	f7fb feae 	bl	80001e6 <OS_CPU_SR_Save>
 800448a:	60f8      	str	r0, [r7, #12]
        OSIdleCtrRun = OSIdleCtr;                /* Store number of cycles which elapsed while idle    */
 800448c:	4b18      	ldr	r3, [pc, #96]	@ (80044f0 <OS_TaskStat+0xe8>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a18      	ldr	r2, [pc, #96]	@ (80044f4 <OS_TaskStat+0xec>)
 8004492:	6013      	str	r3, [r2, #0]
        OS_EXIT_CRITICAL();
 8004494:	68f8      	ldr	r0, [r7, #12]
 8004496:	f7fb feb4 	bl	8000202 <OS_CPU_SR_Restore>

        usage            = 100 - (INT8S)(OSIdleCtrRun / OSIdleCtrMax);
 800449a:	4b16      	ldr	r3, [pc, #88]	@ (80044f4 <OS_TaskStat+0xec>)
 800449c:	681a      	ldr	r2, [r3, #0]
 800449e:	4b11      	ldr	r3, [pc, #68]	@ (80044e4 <OS_TaskStat+0xdc>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80044a6:	b2db      	uxtb	r3, r3
 80044a8:	f1c3 0364 	rsb	r3, r3, #100	@ 0x64
 80044ac:	b2db      	uxtb	r3, r3
 80044ae:	72fb      	strb	r3, [r7, #11]
        if (usage >= 0) {                        /* Make sure we don't have a negative percentage      */
 80044b0:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	db03      	blt.n	80044c0 <OS_TaskStat+0xb8>
            OSCPUUsage   = (INT8U)usage;
 80044b8:	7afa      	ldrb	r2, [r7, #11]
 80044ba:	4b0c      	ldr	r3, [pc, #48]	@ (80044ec <OS_TaskStat+0xe4>)
 80044bc:	701a      	strb	r2, [r3, #0]
 80044be:	e00a      	b.n	80044d6 <OS_TaskStat+0xce>
        } else {
            OSCPUUsage   = 0u;
 80044c0:	4b0a      	ldr	r3, [pc, #40]	@ (80044ec <OS_TaskStat+0xe4>)
 80044c2:	2200      	movs	r2, #0
 80044c4:	701a      	strb	r2, [r3, #0]
            OSIdleCtrMax = OSIdleCtrRun / 100uL; /* Update max counter value to current one            */
 80044c6:	4b0b      	ldr	r3, [pc, #44]	@ (80044f4 <OS_TaskStat+0xec>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a07      	ldr	r2, [pc, #28]	@ (80044e8 <OS_TaskStat+0xe0>)
 80044cc:	fba2 2303 	umull	r2, r3, r2, r3
 80044d0:	095b      	lsrs	r3, r3, #5
 80044d2:	4a04      	ldr	r2, [pc, #16]	@ (80044e4 <OS_TaskStat+0xdc>)
 80044d4:	6013      	str	r3, [r2, #0]
        }

        OSTaskStatHook();                        /* Invoke user definable hook                         */
 80044d6:	f7fe ff7f 	bl	80033d8 <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0u) && (OS_TASK_CREATE_EXT_EN > 0u)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
 80044da:	f000 f80d 	bl	80044f8 <OS_TaskStatStkChk>
        OSTimeDly(1);                            /* Synchronize with clock tick                        */
 80044de:	e7c1      	b.n	8004464 <OS_TaskStat+0x5c>
 80044e0:	20001618 	.word	0x20001618
 80044e4:	20001610 	.word	0x20001610
 80044e8:	51eb851f 	.word	0x51eb851f
 80044ec:	2000160c 	.word	0x2000160c
 80044f0:	20001830 	.word	0x20001830
 80044f4:	20001614 	.word	0x20001614

080044f8 <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0u) && (OS_TASK_CREATE_EXT_EN > 0u)
void  OS_TaskStatStkChk (void)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b084      	sub	sp, #16
 80044fc:	af00      	add	r7, sp, #0
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0u; prio <= OS_TASK_IDLE_PRIO; prio++) {
 80044fe:	2300      	movs	r3, #0
 8004500:	73fb      	strb	r3, [r7, #15]
 8004502:	e023      	b.n	800454c <OS_TaskStatStkChk+0x54>
        err = OSTaskStkChk(prio, &stk_data);
 8004504:	463a      	mov	r2, r7
 8004506:	7bfb      	ldrb	r3, [r7, #15]
 8004508:	4611      	mov	r1, r2
 800450a:	4618      	mov	r0, r3
 800450c:	f000 fce2 	bl	8004ed4 <OSTaskStkChk>
 8004510:	4603      	mov	r3, r0
 8004512:	73bb      	strb	r3, [r7, #14]
        if (err == OS_ERR_NONE) {
 8004514:	7bbb      	ldrb	r3, [r7, #14]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d115      	bne.n	8004546 <OS_TaskStatStkChk+0x4e>
            ptcb = OSTCBPrioTbl[prio];
 800451a:	7bfb      	ldrb	r3, [r7, #15]
 800451c:	4a0f      	ldr	r2, [pc, #60]	@ (800455c <OS_TaskStatStkChk+0x64>)
 800451e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004522:	60bb      	str	r3, [r7, #8]
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d00d      	beq.n	8004546 <OS_TaskStatStkChk+0x4e>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	2b01      	cmp	r3, #1
 800452e:	d00a      	beq.n	8004546 <OS_TaskStatStkChk+0x4e>
#if OS_TASK_PROFILE_EN > 0u
                    #if OS_STK_GROWTH == 1u
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	689a      	ldr	r2, [r3, #8]
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	68db      	ldr	r3, [r3, #12]
 8004538:	009b      	lsls	r3, r3, #2
 800453a:	441a      	add	r2, r3
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	64da      	str	r2, [r3, #76]	@ 0x4c
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store number of entries used   */
 8004540:	687a      	ldr	r2, [r7, #4]
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	651a      	str	r2, [r3, #80]	@ 0x50
    for (prio = 0u; prio <= OS_TASK_IDLE_PRIO; prio++) {
 8004546:	7bfb      	ldrb	r3, [r7, #15]
 8004548:	3301      	adds	r3, #1
 800454a:	73fb      	strb	r3, [r7, #15]
 800454c:	7bfb      	ldrb	r3, [r7, #15]
 800454e:	2b3f      	cmp	r3, #63	@ 0x3f
 8004550:	d9d8      	bls.n	8004504 <OS_TaskStatStkChk+0xc>
#endif
                }
            }
        }
    }
}
 8004552:	bf00      	nop
 8004554:	bf00      	nop
 8004556:	3710      	adds	r7, #16
 8004558:	46bd      	mov	sp, r7
 800455a:	bd80      	pop	{r7, pc}
 800455c:	20001a44 	.word	0x20001a44

08004560 <OS_TCBInit>:
                   OS_STK  *pbos,
                   INT16U   id,
                   INT32U   stk_size,
                   void    *pext,
                   INT16U   opt)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b088      	sub	sp, #32
 8004564:	af00      	add	r7, sp, #0
 8004566:	60b9      	str	r1, [r7, #8]
 8004568:	607a      	str	r2, [r7, #4]
 800456a:	461a      	mov	r2, r3
 800456c:	4603      	mov	r3, r0
 800456e:	73fb      	strb	r3, [r7, #15]
 8004570:	4613      	mov	r3, r2
 8004572:	81bb      	strh	r3, [r7, #12]
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0u;
 8004574:	2300      	movs	r3, #0
 8004576:	61bb      	str	r3, [r7, #24]
    INT8U      j;
#endif
#endif


    OS_ENTER_CRITICAL();
 8004578:	2040      	movs	r0, #64	@ 0x40
 800457a:	f7fb fe34 	bl	80001e6 <OS_CPU_SR_Save>
 800457e:	61b8      	str	r0, [r7, #24]
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
 8004580:	4b6b      	ldr	r3, [pc, #428]	@ (8004730 <OS_TCBInit+0x1d0>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	617b      	str	r3, [r7, #20]
    if (ptcb != (OS_TCB *)0) {
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	2b00      	cmp	r3, #0
 800458a:	f000 80c9 	beq.w	8004720 <OS_TCBInit+0x1c0>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	695b      	ldr	r3, [r3, #20]
 8004592:	4a67      	ldr	r2, [pc, #412]	@ (8004730 <OS_TCBInit+0x1d0>)
 8004594:	6013      	str	r3, [r2, #0]
        OS_EXIT_CRITICAL();
 8004596:	69b8      	ldr	r0, [r7, #24]
 8004598:	f7fb fe33 	bl	8000202 <OS_CPU_SR_Restore>
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	68ba      	ldr	r2, [r7, #8]
 80045a0:	601a      	str	r2, [r3, #0]
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	7bfa      	ldrb	r2, [r7, #15]
 80045a6:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	2200      	movs	r2, #0
 80045ae:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	2200      	movs	r2, #0
 80045b6:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        ptcb->OSTCBDly           = 0u;                     /* Task is not delayed                      */
 80045ba:	697b      	ldr	r3, [r7, #20]
 80045bc:	2200      	movs	r2, #0
 80045be:	635a      	str	r2, [r3, #52]	@ 0x34

#if OS_TASK_CREATE_EXT_EN > 0u
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
 80045c0:	697b      	ldr	r3, [r7, #20]
 80045c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80045c4:	605a      	str	r2, [r3, #4]
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80045ca:	60da      	str	r2, [r3, #12]
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	687a      	ldr	r2, [r7, #4]
 80045d0:	609a      	str	r2, [r3, #8]
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
 80045d2:	697b      	ldr	r3, [r7, #20]
 80045d4:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 80045d6:	821a      	strh	r2, [r3, #16]
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	89ba      	ldrh	r2, [r7, #12]
 80045dc:	825a      	strh	r2, [r3, #18]
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0u
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
 80045de:	697b      	ldr	r3, [r7, #20]
 80045e0:	2200      	movs	r2, #0
 80045e2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
#endif

#if OS_LOWEST_PRIO <= 63u                                         /* Pre-compute X, Y                  */
        ptcb->OSTCBY             = (INT8U)(prio >> 3u);
 80045e6:	7bfb      	ldrb	r3, [r7, #15]
 80045e8:	08db      	lsrs	r3, r3, #3
 80045ea:	b2da      	uxtb	r2, r3
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        ptcb->OSTCBX             = (INT8U)(prio & 0x07u);
 80045f2:	7bfb      	ldrb	r3, [r7, #15]
 80045f4:	f003 0307 	and.w	r3, r3, #7
 80045f8:	b2da      	uxtb	r2, r3
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
#else                                                             /* Pre-compute X, Y                  */
        ptcb->OSTCBY             = (INT8U)((INT8U)(prio >> 4u) & 0xFFu);
        ptcb->OSTCBX             = (INT8U) (prio & 0x0Fu);
#endif
                                                                  /* Pre-compute BitX and BitY         */
        ptcb->OSTCBBitY          = (OS_PRIO)(1uL << ptcb->OSTCBY);
 8004600:	697b      	ldr	r3, [r7, #20]
 8004602:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004606:	461a      	mov	r2, r3
 8004608:	2301      	movs	r3, #1
 800460a:	4093      	lsls	r3, r2
 800460c:	b2da      	uxtb	r2, r3
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        ptcb->OSTCBBitX          = (OS_PRIO)(1uL << ptcb->OSTCBX);
 8004614:	697b      	ldr	r3, [r7, #20]
 8004616:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800461a:	461a      	mov	r2, r3
 800461c:	2301      	movs	r3, #1
 800461e:	4093      	lsls	r3, r2
 8004620:	b2da      	uxtb	r2, r3
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
 8004628:	697b      	ldr	r3, [r7, #20]
 800462a:	2200      	movs	r2, #0
 800462c:	61da      	str	r2, [r3, #28]
#if (OS_EVENT_MULTI_EN > 0u)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	2200      	movs	r2, #0
 8004632:	621a      	str	r2, [r3, #32]
        ptcb->OSTCBEventMultiRdy = (OS_EVENT  *)0;         /* No events readied for Multipend          */
 8004634:	697b      	ldr	r3, [r7, #20]
 8004636:	2200      	movs	r2, #0
 8004638:	625a      	str	r2, [r3, #36]	@ 0x24
#endif
#endif

#if (OS_FLAG_EN > 0u) && (OS_MAX_FLAGS > 0u) && (OS_TASK_DEL_EN > 0u)
        ptcb->OSTCBFlagNode      = (OS_FLAG_NODE *)0;      /* Task is not pending on an event flag     */
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	2200      	movs	r2, #0
 800463e:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif

#if (OS_MBOX_EN > 0u) || ((OS_Q_EN > 0u) && (OS_MAX_QS > 0u))
        ptcb->OSTCBMsg           = (void *)0;              /* No message received                      */
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	2200      	movs	r2, #0
 8004644:	629a      	str	r2, [r3, #40]	@ 0x28
#endif

#if OS_TASK_PROFILE_EN > 0u
        ptcb->OSTCBCtxSwCtr      = 0uL;                    /* Initialize profiling variables           */
 8004646:	697b      	ldr	r3, [r7, #20]
 8004648:	2200      	movs	r2, #0
 800464a:	641a      	str	r2, [r3, #64]	@ 0x40
        ptcb->OSTCBCyclesStart   = 0uL;
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	2200      	movs	r2, #0
 8004650:	649a      	str	r2, [r3, #72]	@ 0x48
        ptcb->OSTCBCyclesTot     = 0uL;
 8004652:	697b      	ldr	r3, [r7, #20]
 8004654:	2200      	movs	r2, #0
 8004656:	645a      	str	r2, [r3, #68]	@ 0x44
        ptcb->OSTCBStkBase       = (OS_STK *)0;
 8004658:	697b      	ldr	r3, [r7, #20]
 800465a:	2200      	movs	r2, #0
 800465c:	64da      	str	r2, [r3, #76]	@ 0x4c
        ptcb->OSTCBStkUsed       = 0uL;
 800465e:	697b      	ldr	r3, [r7, #20]
 8004660:	2200      	movs	r2, #0
 8004662:	651a      	str	r2, [r3, #80]	@ 0x50
#endif

#if OS_TASK_NAME_EN > 0u
        ptcb->OSTCBTaskName      = (INT8U *)(void *)"?";
 8004664:	697b      	ldr	r3, [r7, #20]
 8004666:	4a33      	ldr	r2, [pc, #204]	@ (8004734 <OS_TCBInit+0x1d4>)
 8004668:	655a      	str	r2, [r3, #84]	@ 0x54
#endif

#if OS_TASK_REG_TBL_SIZE > 0u                              /* Initialize the task variables            */
        for (i = 0u; i < OS_TASK_REG_TBL_SIZE; i++) {
 800466a:	2300      	movs	r3, #0
 800466c:	77fb      	strb	r3, [r7, #31]
 800466e:	e008      	b.n	8004682 <OS_TCBInit+0x122>
            ptcb->OSTCBRegTbl[i] = 0u;
 8004670:	7ffa      	ldrb	r2, [r7, #31]
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	3216      	adds	r2, #22
 8004676:	2100      	movs	r1, #0
 8004678:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        for (i = 0u; i < OS_TASK_REG_TBL_SIZE; i++) {
 800467c:	7ffb      	ldrb	r3, [r7, #31]
 800467e:	3301      	adds	r3, #1
 8004680:	77fb      	strb	r3, [r7, #31]
 8004682:	7ffb      	ldrb	r3, [r7, #31]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d0f3      	beq.n	8004670 <OS_TCBInit+0x110>
        }
#endif

        OSTCBInitHook(ptcb);
 8004688:	6978      	ldr	r0, [r7, #20]
 800468a:	f7ff f851 	bl	8003730 <OSTCBInitHook>

        OS_ENTER_CRITICAL();
 800468e:	2040      	movs	r0, #64	@ 0x40
 8004690:	f7fb fda9 	bl	80001e6 <OS_CPU_SR_Save>
 8004694:	61b8      	str	r0, [r7, #24]
        OSTCBPrioTbl[prio] = ptcb;
 8004696:	7bfb      	ldrb	r3, [r7, #15]
 8004698:	4927      	ldr	r1, [pc, #156]	@ (8004738 <OS_TCBInit+0x1d8>)
 800469a:	697a      	ldr	r2, [r7, #20]
 800469c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        OS_EXIT_CRITICAL();
 80046a0:	69b8      	ldr	r0, [r7, #24]
 80046a2:	f7fb fdae 	bl	8000202 <OS_CPU_SR_Restore>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
 80046a6:	6978      	ldr	r0, [r7, #20]
 80046a8:	f7fe fe6f 	bl	800338a <OSTaskCreateHook>
        }
        OS_TLS_TaskCreate(ptcb);                           /* Call TLS hook                            */
#endif
#endif

        OS_ENTER_CRITICAL();
 80046ac:	2040      	movs	r0, #64	@ 0x40
 80046ae:	f7fb fd9a 	bl	80001e6 <OS_CPU_SR_Save>
 80046b2:	61b8      	str	r0, [r7, #24]
        ptcb->OSTCBNext = OSTCBList;                       /* Link into TCB chain                      */
 80046b4:	4b21      	ldr	r3, [pc, #132]	@ (800473c <OS_TCBInit+0x1dc>)
 80046b6:	681a      	ldr	r2, [r3, #0]
 80046b8:	697b      	ldr	r3, [r7, #20]
 80046ba:	615a      	str	r2, [r3, #20]
        ptcb->OSTCBPrev = (OS_TCB *)0;
 80046bc:	697b      	ldr	r3, [r7, #20]
 80046be:	2200      	movs	r2, #0
 80046c0:	619a      	str	r2, [r3, #24]
        if (OSTCBList != (OS_TCB *)0) {
 80046c2:	4b1e      	ldr	r3, [pc, #120]	@ (800473c <OS_TCBInit+0x1dc>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d003      	beq.n	80046d2 <OS_TCBInit+0x172>
            OSTCBList->OSTCBPrev = ptcb;
 80046ca:	4b1c      	ldr	r3, [pc, #112]	@ (800473c <OS_TCBInit+0x1dc>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	697a      	ldr	r2, [r7, #20]
 80046d0:	619a      	str	r2, [r3, #24]
        }
        OSTCBList               = ptcb;
 80046d2:	4a1a      	ldr	r2, [pc, #104]	@ (800473c <OS_TCBInit+0x1dc>)
 80046d4:	697b      	ldr	r3, [r7, #20]
 80046d6:	6013      	str	r3, [r2, #0]
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
 80046d8:	697b      	ldr	r3, [r7, #20]
 80046da:	f893 203e 	ldrb.w	r2, [r3, #62]	@ 0x3e
 80046de:	4b18      	ldr	r3, [pc, #96]	@ (8004740 <OS_TCBInit+0x1e0>)
 80046e0:	781b      	ldrb	r3, [r3, #0]
 80046e2:	4313      	orrs	r3, r2
 80046e4:	b2da      	uxtb	r2, r3
 80046e6:	4b16      	ldr	r3, [pc, #88]	@ (8004740 <OS_TCBInit+0x1e0>)
 80046e8:	701a      	strb	r2, [r3, #0]
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80046f0:	461a      	mov	r2, r3
 80046f2:	4b14      	ldr	r3, [pc, #80]	@ (8004744 <OS_TCBInit+0x1e4>)
 80046f4:	5c9a      	ldrb	r2, [r3, r2]
 80046f6:	697b      	ldr	r3, [r7, #20]
 80046f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80046fc:	6979      	ldr	r1, [r7, #20]
 80046fe:	f891 103c 	ldrb.w	r1, [r1, #60]	@ 0x3c
 8004702:	4313      	orrs	r3, r2
 8004704:	b2da      	uxtb	r2, r3
 8004706:	4b0f      	ldr	r3, [pc, #60]	@ (8004744 <OS_TCBInit+0x1e4>)
 8004708:	545a      	strb	r2, [r3, r1]
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
 800470a:	4b0f      	ldr	r3, [pc, #60]	@ (8004748 <OS_TCBInit+0x1e8>)
 800470c:	781b      	ldrb	r3, [r3, #0]
 800470e:	3301      	adds	r3, #1
 8004710:	b2da      	uxtb	r2, r3
 8004712:	4b0d      	ldr	r3, [pc, #52]	@ (8004748 <OS_TCBInit+0x1e8>)
 8004714:	701a      	strb	r2, [r3, #0]
        OS_TRACE_TASK_READY(ptcb);
        OS_EXIT_CRITICAL();
 8004716:	69b8      	ldr	r0, [r7, #24]
 8004718:	f7fb fd73 	bl	8000202 <OS_CPU_SR_Restore>
        return (OS_ERR_NONE);
 800471c:	2300      	movs	r3, #0
 800471e:	e003      	b.n	8004728 <OS_TCBInit+0x1c8>
    }
    OS_EXIT_CRITICAL();
 8004720:	69b8      	ldr	r0, [r7, #24]
 8004722:	f7fb fd6e 	bl	8000202 <OS_CPU_SR_Restore>
    return (OS_ERR_TASK_NO_MORE_TCB);
 8004726:	2342      	movs	r3, #66	@ 0x42
}
 8004728:	4618      	mov	r0, r3
 800472a:	3720      	adds	r7, #32
 800472c:	46bd      	mov	sp, r7
 800472e:	bd80      	pop	{r7, pc}
 8004730:	20001a38 	.word	0x20001a38
 8004734:	080056e0 	.word	0x080056e0
 8004738:	20001a44 	.word	0x20001a44
 800473c:	20001a40 	.word	0x20001a40
 8004740:	20001820 	.word	0x20001820
 8004744:	20001824 	.word	0x20001824
 8004748:	2000182d 	.word	0x2000182d

0800474c <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b084      	sub	sp, #16
 8004750:	af00      	add	r7, sp, #0
    INT16U        ix_next;
    OS_FLAG_GRP  *pgrp1;
    OS_FLAG_GRP  *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
 8004752:	2150      	movs	r1, #80	@ 0x50
 8004754:	481b      	ldr	r0, [pc, #108]	@ (80047c4 <OS_FlagInit+0x78>)
 8004756:	f7ff fdbf 	bl	80042d8 <OS_MemClr>
    for (ix = 0u; ix < (OS_MAX_FLAGS - 1u); ix++) {                 /* Init. list of free EVENT FLAGS  */
 800475a:	2300      	movs	r3, #0
 800475c:	81fb      	strh	r3, [r7, #14]
 800475e:	e018      	b.n	8004792 <OS_FlagInit+0x46>
        ix_next = ix + 1u;
 8004760:	89fb      	ldrh	r3, [r7, #14]
 8004762:	3301      	adds	r3, #1
 8004764:	80fb      	strh	r3, [r7, #6]
        pgrp1 = &OSFlagTbl[ix];
 8004766:	89fb      	ldrh	r3, [r7, #14]
 8004768:	011b      	lsls	r3, r3, #4
 800476a:	4a16      	ldr	r2, [pc, #88]	@ (80047c4 <OS_FlagInit+0x78>)
 800476c:	4413      	add	r3, r2
 800476e:	60bb      	str	r3, [r7, #8]
        pgrp2 = &OSFlagTbl[ix_next];
 8004770:	88fb      	ldrh	r3, [r7, #6]
 8004772:	011b      	lsls	r3, r3, #4
 8004774:	4a13      	ldr	r2, [pc, #76]	@ (80047c4 <OS_FlagInit+0x78>)
 8004776:	4413      	add	r3, r2
 8004778:	603b      	str	r3, [r7, #0]
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	2200      	movs	r2, #0
 800477e:	701a      	strb	r2, [r3, #0]
        pgrp1->OSFlagWaitList = (void *)pgrp2;
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	683a      	ldr	r2, [r7, #0]
 8004784:	605a      	str	r2, [r3, #4]
#if OS_FLAG_NAME_EN > 0u
        pgrp1->OSFlagName     = (INT8U *)(void *)"?";               /* Unknown name                    */
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	4a0f      	ldr	r2, [pc, #60]	@ (80047c8 <OS_FlagInit+0x7c>)
 800478a:	60da      	str	r2, [r3, #12]
    for (ix = 0u; ix < (OS_MAX_FLAGS - 1u); ix++) {                 /* Init. list of free EVENT FLAGS  */
 800478c:	89fb      	ldrh	r3, [r7, #14]
 800478e:	3301      	adds	r3, #1
 8004790:	81fb      	strh	r3, [r7, #14]
 8004792:	89fb      	ldrh	r3, [r7, #14]
 8004794:	2b03      	cmp	r3, #3
 8004796:	d9e3      	bls.n	8004760 <OS_FlagInit+0x14>
#endif
    }
    pgrp1                 = &OSFlagTbl[ix];
 8004798:	89fb      	ldrh	r3, [r7, #14]
 800479a:	011b      	lsls	r3, r3, #4
 800479c:	4a09      	ldr	r2, [pc, #36]	@ (80047c4 <OS_FlagInit+0x78>)
 800479e:	4413      	add	r3, r2
 80047a0:	60bb      	str	r3, [r7, #8]
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	2200      	movs	r2, #0
 80047a6:	701a      	strb	r2, [r3, #0]
    pgrp1->OSFlagWaitList = (void *)0;
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	2200      	movs	r2, #0
 80047ac:	605a      	str	r2, [r3, #4]
#if OS_FLAG_NAME_EN > 0u
    pgrp1->OSFlagName     = (INT8U *)(void *)"?";                   /* Unknown name                    */
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	4a05      	ldr	r2, [pc, #20]	@ (80047c8 <OS_FlagInit+0x7c>)
 80047b2:	60da      	str	r2, [r3, #12]
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
 80047b4:	4b05      	ldr	r3, [pc, #20]	@ (80047cc <OS_FlagInit+0x80>)
 80047b6:	4a03      	ldr	r2, [pc, #12]	@ (80047c4 <OS_FlagInit+0x78>)
 80047b8:	601a      	str	r2, [r3, #0]
#endif
}
 80047ba:	bf00      	nop
 80047bc:	3710      	adds	r7, #16
 80047be:	46bd      	mov	sp, r7
 80047c0:	bd80      	pop	{r7, pc}
 80047c2:	bf00      	nop
 80047c4:	200015b8 	.word	0x200015b8
 80047c8:	08005704 	.word	0x08005704
 80047cc:	20001608 	.word	0x20001608

080047d0 <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b087      	sub	sp, #28
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	617b      	str	r3, [r7, #20]
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	613b      	str	r3, [r7, #16]
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
 80047e4:	697b      	ldr	r3, [r7, #20]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d10c      	bne.n	8004804 <OS_FlagUnlink+0x34>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	68db      	ldr	r3, [r3, #12]
 80047ee:	60fb      	str	r3, [r7, #12]
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	693a      	ldr	r2, [r7, #16]
 80047f4:	605a      	str	r2, [r3, #4]
        if (pnode_next != (OS_FLAG_NODE *)0) {
 80047f6:	693b      	ldr	r3, [r7, #16]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d00c      	beq.n	8004816 <OS_FlagUnlink+0x46>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
 80047fc:	693b      	ldr	r3, [r7, #16]
 80047fe:	2200      	movs	r2, #0
 8004800:	605a      	str	r2, [r3, #4]
 8004802:	e008      	b.n	8004816 <OS_FlagUnlink+0x46>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
 8004804:	697b      	ldr	r3, [r7, #20]
 8004806:	693a      	ldr	r2, [r7, #16]
 8004808:	601a      	str	r2, [r3, #0]
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
 800480a:	693b      	ldr	r3, [r7, #16]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d002      	beq.n	8004816 <OS_FlagUnlink+0x46>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
 8004810:	693b      	ldr	r3, [r7, #16]
 8004812:	697a      	ldr	r2, [r7, #20]
 8004814:	605a      	str	r2, [r3, #4]
        }
    }
#if OS_TASK_DEL_EN > 0u
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	689b      	ldr	r3, [r3, #8]
 800481a:	60bb      	str	r3, [r7, #8]
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	2200      	movs	r2, #0
 8004820:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
}
 8004822:	bf00      	nop
 8004824:	371c      	adds	r7, #28
 8004826:	46bd      	mov	sp, r7
 8004828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482c:	4770      	bx	lr
	...

08004830 <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b082      	sub	sp, #8
 8004834:	af00      	add	r7, sp, #0
#if OS_MAX_MEM_PART >= 2u
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
 8004836:	2178      	movs	r1, #120	@ 0x78
 8004838:	481a      	ldr	r0, [pc, #104]	@ (80048a4 <OS_MemInit+0x74>)
 800483a:	f7ff fd4d 	bl	80042d8 <OS_MemClr>
    for (i = 0u; i < (OS_MAX_MEM_PART - 1u); i++) {       /* Init. list of free memory partitions      */
 800483e:	2300      	movs	r3, #0
 8004840:	80fb      	strh	r3, [r7, #6]
 8004842:	e017      	b.n	8004874 <OS_MemInit+0x44>
        pmem                = &OSMemTbl[i];               /* Point to memory control block (MCB)       */
 8004844:	88fa      	ldrh	r2, [r7, #6]
 8004846:	4613      	mov	r3, r2
 8004848:	005b      	lsls	r3, r3, #1
 800484a:	4413      	add	r3, r2
 800484c:	00db      	lsls	r3, r3, #3
 800484e:	4a15      	ldr	r2, [pc, #84]	@ (80048a4 <OS_MemInit+0x74>)
 8004850:	4413      	add	r3, r2
 8004852:	603b      	str	r3, [r7, #0]
        pmem->OSMemFreeList = (void *)&OSMemTbl[i + 1u];  /* Chain list of free partitions             */
 8004854:	88fb      	ldrh	r3, [r7, #6]
 8004856:	1c5a      	adds	r2, r3, #1
 8004858:	4613      	mov	r3, r2
 800485a:	005b      	lsls	r3, r3, #1
 800485c:	4413      	add	r3, r2
 800485e:	00db      	lsls	r3, r3, #3
 8004860:	4a10      	ldr	r2, [pc, #64]	@ (80048a4 <OS_MemInit+0x74>)
 8004862:	441a      	add	r2, r3
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	605a      	str	r2, [r3, #4]
#if OS_MEM_NAME_EN > 0u
        pmem->OSMemName  = (INT8U *)(void *)"?";
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	4a0f      	ldr	r2, [pc, #60]	@ (80048a8 <OS_MemInit+0x78>)
 800486c:	615a      	str	r2, [r3, #20]
    for (i = 0u; i < (OS_MAX_MEM_PART - 1u); i++) {       /* Init. list of free memory partitions      */
 800486e:	88fb      	ldrh	r3, [r7, #6]
 8004870:	3301      	adds	r3, #1
 8004872:	80fb      	strh	r3, [r7, #6]
 8004874:	88fb      	ldrh	r3, [r7, #6]
 8004876:	2b03      	cmp	r3, #3
 8004878:	d9e4      	bls.n	8004844 <OS_MemInit+0x14>
#endif
    }
    pmem                = &OSMemTbl[i];
 800487a:	88fa      	ldrh	r2, [r7, #6]
 800487c:	4613      	mov	r3, r2
 800487e:	005b      	lsls	r3, r3, #1
 8004880:	4413      	add	r3, r2
 8004882:	00db      	lsls	r3, r3, #3
 8004884:	4a07      	ldr	r2, [pc, #28]	@ (80048a4 <OS_MemInit+0x74>)
 8004886:	4413      	add	r3, r2
 8004888:	603b      	str	r3, [r7, #0]
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	2200      	movs	r2, #0
 800488e:	605a      	str	r2, [r3, #4]
#if OS_MEM_NAME_EN > 0u
    pmem->OSMemName = (INT8U *)(void *)"?";
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	4a05      	ldr	r2, [pc, #20]	@ (80048a8 <OS_MemInit+0x78>)
 8004894:	615a      	str	r2, [r3, #20]
#endif

    OSMemFreeList   = &OSMemTbl[0];                       /* Point to beginning of free list           */
 8004896:	4b05      	ldr	r3, [pc, #20]	@ (80048ac <OS_MemInit+0x7c>)
 8004898:	4a02      	ldr	r2, [pc, #8]	@ (80048a4 <OS_MemInit+0x74>)
 800489a:	601a      	str	r2, [r3, #0]
#endif
}
 800489c:	bf00      	nop
 800489e:	3708      	adds	r7, #8
 80048a0:	46bd      	mov	sp, r7
 80048a2:	bd80      	pop	{r7, pc}
 80048a4:	20002334 	.word	0x20002334
 80048a8:	08005708 	.word	0x08005708
 80048ac:	20002330 	.word	0x20002330

080048b0 <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b084      	sub	sp, #16
 80048b4:	af00      	add	r7, sp, #0
    OS_Q    *pq1;
    OS_Q    *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
 80048b6:	2160      	movs	r1, #96	@ 0x60
 80048b8:	4819      	ldr	r0, [pc, #100]	@ (8004920 <OS_QInit+0x70>)
 80048ba:	f7ff fd0d 	bl	80042d8 <OS_MemClr>
    for (ix = 0u; ix < (OS_MAX_QS - 1u); ix++) {     /* Init. list of free QUEUE control blocks        */
 80048be:	2300      	movs	r3, #0
 80048c0:	81fb      	strh	r3, [r7, #14]
 80048c2:	e018      	b.n	80048f6 <OS_QInit+0x46>
        ix_next = ix + 1u;
 80048c4:	89fb      	ldrh	r3, [r7, #14]
 80048c6:	3301      	adds	r3, #1
 80048c8:	80fb      	strh	r3, [r7, #6]
        pq1 = &OSQTbl[ix];
 80048ca:	89fa      	ldrh	r2, [r7, #14]
 80048cc:	4613      	mov	r3, r2
 80048ce:	005b      	lsls	r3, r3, #1
 80048d0:	4413      	add	r3, r2
 80048d2:	00db      	lsls	r3, r3, #3
 80048d4:	4a12      	ldr	r2, [pc, #72]	@ (8004920 <OS_QInit+0x70>)
 80048d6:	4413      	add	r3, r2
 80048d8:	60bb      	str	r3, [r7, #8]
        pq2 = &OSQTbl[ix_next];
 80048da:	88fa      	ldrh	r2, [r7, #6]
 80048dc:	4613      	mov	r3, r2
 80048de:	005b      	lsls	r3, r3, #1
 80048e0:	4413      	add	r3, r2
 80048e2:	00db      	lsls	r3, r3, #3
 80048e4:	4a0e      	ldr	r2, [pc, #56]	@ (8004920 <OS_QInit+0x70>)
 80048e6:	4413      	add	r3, r2
 80048e8:	603b      	str	r3, [r7, #0]
        pq1->OSQPtr = pq2;
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	683a      	ldr	r2, [r7, #0]
 80048ee:	601a      	str	r2, [r3, #0]
    for (ix = 0u; ix < (OS_MAX_QS - 1u); ix++) {     /* Init. list of free QUEUE control blocks        */
 80048f0:	89fb      	ldrh	r3, [r7, #14]
 80048f2:	3301      	adds	r3, #1
 80048f4:	81fb      	strh	r3, [r7, #14]
 80048f6:	89fb      	ldrh	r3, [r7, #14]
 80048f8:	2b02      	cmp	r3, #2
 80048fa:	d9e3      	bls.n	80048c4 <OS_QInit+0x14>
    }
    pq1         = &OSQTbl[ix];
 80048fc:	89fa      	ldrh	r2, [r7, #14]
 80048fe:	4613      	mov	r3, r2
 8004900:	005b      	lsls	r3, r3, #1
 8004902:	4413      	add	r3, r2
 8004904:	00db      	lsls	r3, r3, #3
 8004906:	4a06      	ldr	r2, [pc, #24]	@ (8004920 <OS_QInit+0x70>)
 8004908:	4413      	add	r3, r2
 800490a:	60bb      	str	r3, [r7, #8]
    pq1->OSQPtr = (OS_Q *)0;
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	2200      	movs	r2, #0
 8004910:	601a      	str	r2, [r3, #0]
    OSQFreeList = &OSQTbl[0];
 8004912:	4b04      	ldr	r3, [pc, #16]	@ (8004924 <OS_QInit+0x74>)
 8004914:	4a02      	ldr	r2, [pc, #8]	@ (8004920 <OS_QInit+0x70>)
 8004916:	601a      	str	r2, [r3, #0]
#endif
}
 8004918:	bf00      	nop
 800491a:	3710      	adds	r7, #16
 800491c:	46bd      	mov	sp, r7
 800491e:	bd80      	pop	{r7, pc}
 8004920:	200023b0 	.word	0x200023b0
 8004924:	200023ac 	.word	0x200023ac

08004928 <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b084      	sub	sp, #16
 800492c:	af00      	add	r7, sp, #0
 800492e:	4603      	mov	r3, r0
 8004930:	80fb      	strh	r3, [r7, #6]
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0u;
 8004932:	2300      	movs	r3, #0
 8004934:	60fb      	str	r3, [r7, #12]
        OS_SAFETY_CRITICAL_EXCEPTION();
        return ((OS_EVENT *)0);
    }
#endif

    if (OSIntNesting > 0u) {                               /* See if called from ISR ...               */
 8004936:	4b18      	ldr	r3, [pc, #96]	@ (8004998 <OSSemCreate+0x70>)
 8004938:	781b      	ldrb	r3, [r3, #0]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d001      	beq.n	8004942 <OSSemCreate+0x1a>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
 800493e:	2300      	movs	r3, #0
 8004940:	e025      	b.n	800498e <OSSemCreate+0x66>
    }
    OS_ENTER_CRITICAL();
 8004942:	2040      	movs	r0, #64	@ 0x40
 8004944:	f7fb fc4f 	bl	80001e6 <OS_CPU_SR_Save>
 8004948:	60f8      	str	r0, [r7, #12]
    pevent = OSEventFreeList;                              /* Get next free event control block        */
 800494a:	4b14      	ldr	r3, [pc, #80]	@ (800499c <OSSemCreate+0x74>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	60bb      	str	r3, [r7, #8]
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
 8004950:	4b12      	ldr	r3, [pc, #72]	@ (800499c <OSSemCreate+0x74>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d004      	beq.n	8004962 <OSSemCreate+0x3a>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
 8004958:	4b10      	ldr	r3, [pc, #64]	@ (800499c <OSSemCreate+0x74>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	4a0f      	ldr	r2, [pc, #60]	@ (800499c <OSSemCreate+0x74>)
 8004960:	6013      	str	r3, [r2, #0]
    }
    OS_EXIT_CRITICAL();
 8004962:	68f8      	ldr	r0, [r7, #12]
 8004964:	f7fb fc4d 	bl	8000202 <OS_CPU_SR_Restore>
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d00e      	beq.n	800498c <OSSemCreate+0x64>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	2203      	movs	r2, #3
 8004972:	701a      	strb	r2, [r3, #0]
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	88fa      	ldrh	r2, [r7, #6]
 8004978:	811a      	strh	r2, [r3, #8]
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	2200      	movs	r2, #0
 800497e:	605a      	str	r2, [r3, #4]
#if OS_EVENT_NAME_EN > 0u
        pevent->OSEventName    = (INT8U *)(void *)"?";
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	4a07      	ldr	r2, [pc, #28]	@ (80049a0 <OSSemCreate+0x78>)
 8004984:	615a      	str	r2, [r3, #20]
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
 8004986:	68b8      	ldr	r0, [r7, #8]
 8004988:	f7ff fb35 	bl	8003ff6 <OS_EventWaitListInit>

        OS_TRACE_SEM_CREATE(pevent, pevent->OSEventName);
    }
    return (pevent);
 800498c:	68bb      	ldr	r3, [r7, #8]
}
 800498e:	4618      	mov	r0, r3
 8004990:	3710      	adds	r7, #16
 8004992:	46bd      	mov	sp, r7
 8004994:	bd80      	pop	{r7, pc}
 8004996:	bf00      	nop
 8004998:	2000181c 	.word	0x2000181c
 800499c:	200014c4 	.word	0x200014c4
 80049a0:	0800570c 	.word	0x0800570c

080049a4 <OSSemPend>:
*/

void  OSSemPend (OS_EVENT  *pevent,
                 INT32U     timeout,
                 INT8U     *perr)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b086      	sub	sp, #24
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	60f8      	str	r0, [r7, #12]
 80049ac:	60b9      	str	r1, [r7, #8]
 80049ae:	607a      	str	r2, [r7, #4]
#if OS_CRITICAL_METHOD == 3u                          /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0u;
 80049b0:	2300      	movs	r3, #0
 80049b2:	617b      	str	r3, [r7, #20]
        return;
    }
#endif

#if OS_ARG_CHK_EN > 0u
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d103      	bne.n	80049c2 <OSSemPend+0x1e>
        *perr = OS_ERR_PEVENT_NULL;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2204      	movs	r2, #4
 80049be:	701a      	strb	r2, [r3, #0]
        return;
 80049c0:	e080      	b.n	8004ac4 <OSSemPend+0x120>
    }
#endif

    OS_TRACE_SEM_PEND_ENTER(pevent, timeout);

    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	781b      	ldrb	r3, [r3, #0]
 80049c6:	2b03      	cmp	r3, #3
 80049c8:	d003      	beq.n	80049d2 <OSSemPend+0x2e>
        *perr = OS_ERR_EVENT_TYPE;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2201      	movs	r2, #1
 80049ce:	701a      	strb	r2, [r3, #0]
        OS_TRACE_SEM_PEND_EXIT(*perr);
        return;
 80049d0:	e078      	b.n	8004ac4 <OSSemPend+0x120>
    }
    if (OSIntNesting > 0u) {                          /* See if called from ISR ...                    */
 80049d2:	4b3e      	ldr	r3, [pc, #248]	@ (8004acc <OSSemPend+0x128>)
 80049d4:	781b      	ldrb	r3, [r3, #0]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d003      	beq.n	80049e2 <OSSemPend+0x3e>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2202      	movs	r2, #2
 80049de:	701a      	strb	r2, [r3, #0]
        OS_TRACE_SEM_PEND_EXIT(*perr);
        return;
 80049e0:	e070      	b.n	8004ac4 <OSSemPend+0x120>
    }
    if (OSLockNesting > 0u) {                         /* See if called with scheduler locked ...       */
 80049e2:	4b3b      	ldr	r3, [pc, #236]	@ (8004ad0 <OSSemPend+0x12c>)
 80049e4:	781b      	ldrb	r3, [r3, #0]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d003      	beq.n	80049f2 <OSSemPend+0x4e>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	220d      	movs	r2, #13
 80049ee:	701a      	strb	r2, [r3, #0]
        OS_TRACE_SEM_PEND_EXIT(*perr);
        return;
 80049f0:	e068      	b.n	8004ac4 <OSSemPend+0x120>
    }
    OS_ENTER_CRITICAL();
 80049f2:	2040      	movs	r0, #64	@ 0x40
 80049f4:	f7fb fbf7 	bl	80001e6 <OS_CPU_SR_Save>
 80049f8:	6178      	str	r0, [r7, #20]
    if (pevent->OSEventCnt > 0u) {                    /* If sem. is positive, resource available ...   */
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	891b      	ldrh	r3, [r3, #8]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d00c      	beq.n	8004a1c <OSSemPend+0x78>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	891b      	ldrh	r3, [r3, #8]
 8004a06:	3b01      	subs	r3, #1
 8004a08:	b29a      	uxth	r2, r3
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	811a      	strh	r2, [r3, #8]
        OS_EXIT_CRITICAL();
 8004a0e:	6978      	ldr	r0, [r7, #20]
 8004a10:	f7fb fbf7 	bl	8000202 <OS_CPU_SR_Restore>
        *perr = OS_ERR_NONE;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2200      	movs	r2, #0
 8004a18:	701a      	strb	r2, [r3, #0]
        OS_TRACE_SEM_PEND_EXIT(*perr);
        return;
 8004a1a:	e053      	b.n	8004ac4 <OSSemPend+0x120>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
 8004a1c:	4b2d      	ldr	r3, [pc, #180]	@ (8004ad4 <OSSemPend+0x130>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f893 2038 	ldrb.w	r2, [r3, #56]	@ 0x38
 8004a24:	4b2b      	ldr	r3, [pc, #172]	@ (8004ad4 <OSSemPend+0x130>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f042 0201 	orr.w	r2, r2, #1
 8004a2c:	b2d2      	uxtb	r2, r2
 8004a2e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 8004a32:	4b28      	ldr	r3, [pc, #160]	@ (8004ad4 <OSSemPend+0x130>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	2200      	movs	r2, #0
 8004a38:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
 8004a3c:	4b25      	ldr	r3, [pc, #148]	@ (8004ad4 <OSSemPend+0x130>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	68ba      	ldr	r2, [r7, #8]
 8004a42:	635a      	str	r2, [r3, #52]	@ 0x34
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
 8004a44:	68f8      	ldr	r0, [r7, #12]
 8004a46:	f7ff fa07 	bl	8003e58 <OS_EventTaskWait>
    OS_EXIT_CRITICAL();
 8004a4a:	6978      	ldr	r0, [r7, #20]
 8004a4c:	f7fb fbd9 	bl	8000202 <OS_CPU_SR_Restore>
    OS_Sched();                                       /* Find next highest priority task ready         */
 8004a50:	f7ff fc5c 	bl	800430c <OS_Sched>
    OS_ENTER_CRITICAL();
 8004a54:	2040      	movs	r0, #64	@ 0x40
 8004a56:	f7fb fbc6 	bl	80001e6 <OS_CPU_SR_Save>
 8004a5a:	6178      	str	r0, [r7, #20]
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
 8004a5c:	4b1d      	ldr	r3, [pc, #116]	@ (8004ad4 <OSSemPend+0x130>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d002      	beq.n	8004a6e <OSSemPend+0xca>
 8004a68:	2b02      	cmp	r3, #2
 8004a6a:	d004      	beq.n	8004a76 <OSSemPend+0xd2>
 8004a6c:	e007      	b.n	8004a7e <OSSemPend+0xda>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2200      	movs	r2, #0
 8004a72:	701a      	strb	r2, [r3, #0]
             break;
 8004a74:	e00d      	b.n	8004a92 <OSSemPend+0xee>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	220e      	movs	r2, #14
 8004a7a:	701a      	strb	r2, [r3, #0]
             break;
 8004a7c:	e009      	b.n	8004a92 <OSSemPend+0xee>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
 8004a7e:	4b15      	ldr	r3, [pc, #84]	@ (8004ad4 <OSSemPend+0x130>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	68f9      	ldr	r1, [r7, #12]
 8004a84:	4618      	mov	r0, r3
 8004a86:	f7ff fa3f 	bl	8003f08 <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	220a      	movs	r2, #10
 8004a8e:	701a      	strb	r2, [r3, #0]
             break;
 8004a90:	bf00      	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
 8004a92:	4b10      	ldr	r3, [pc, #64]	@ (8004ad4 <OSSemPend+0x130>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	2200      	movs	r2, #0
 8004a98:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
 8004a9c:	4b0d      	ldr	r3, [pc, #52]	@ (8004ad4 <OSSemPend+0x130>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
 8004aa6:	4b0b      	ldr	r3, [pc, #44]	@ (8004ad4 <OSSemPend+0x130>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	61da      	str	r2, [r3, #28]
#if (OS_EVENT_MULTI_EN > 0u)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
 8004aae:	4b09      	ldr	r3, [pc, #36]	@ (8004ad4 <OSSemPend+0x130>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	621a      	str	r2, [r3, #32]
    OSTCBCur->OSTCBEventMultiRdy = (OS_EVENT  *)0;
 8004ab6:	4b07      	ldr	r3, [pc, #28]	@ (8004ad4 <OSSemPend+0x130>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	2200      	movs	r2, #0
 8004abc:	625a      	str	r2, [r3, #36]	@ 0x24
#endif
    OS_EXIT_CRITICAL();
 8004abe:	6978      	ldr	r0, [r7, #20]
 8004ac0:	f7fb fb9f 	bl	8000202 <OS_CPU_SR_Restore>

    OS_TRACE_SEM_PEND_EXIT(*perr);
}
 8004ac4:	3718      	adds	r7, #24
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bd80      	pop	{r7, pc}
 8004aca:	bf00      	nop
 8004acc:	2000181c 	.word	0x2000181c
 8004ad0:	2000181d 	.word	0x2000181d
 8004ad4:	20001a34 	.word	0x20001a34

08004ad8 <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b084      	sub	sp, #16
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
#if OS_CRITICAL_METHOD == 3u                          /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0u;
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	60fb      	str	r3, [r7, #12]
#endif


#if OS_ARG_CHK_EN > 0u
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d101      	bne.n	8004aee <OSSemPost+0x16>
        return (OS_ERR_PEVENT_NULL);
 8004aea:	2304      	movs	r3, #4
 8004aec:	e02f      	b.n	8004b4e <OSSemPost+0x76>
    }
#endif

    OS_TRACE_SEM_POST_ENTER(pevent);

    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	781b      	ldrb	r3, [r3, #0]
 8004af2:	2b03      	cmp	r3, #3
 8004af4:	d001      	beq.n	8004afa <OSSemPost+0x22>
        OS_TRACE_SEM_POST_EXIT(OS_ERR_EVENT_TYPE);
        return (OS_ERR_EVENT_TYPE);
 8004af6:	2301      	movs	r3, #1
 8004af8:	e029      	b.n	8004b4e <OSSemPost+0x76>
    }
    OS_ENTER_CRITICAL();
 8004afa:	2040      	movs	r0, #64	@ 0x40
 8004afc:	f7fb fb73 	bl	80001e6 <OS_CPU_SR_Save>
 8004b00:	60f8      	str	r0, [r7, #12]
    if (pevent->OSEventGrp != 0u) {                   /* See if any task waiting for semaphore         */
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	7a9b      	ldrb	r3, [r3, #10]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d00c      	beq.n	8004b24 <OSSemPost+0x4c>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	2201      	movs	r2, #1
 8004b0e:	2100      	movs	r1, #0
 8004b10:	6878      	ldr	r0, [r7, #4]
 8004b12:	f7ff f92b 	bl	8003d6c <OS_EventTaskRdy>
        OS_EXIT_CRITICAL();
 8004b16:	68f8      	ldr	r0, [r7, #12]
 8004b18:	f7fb fb73 	bl	8000202 <OS_CPU_SR_Restore>
        OS_Sched();                                   /* Find HPT ready to run                         */
 8004b1c:	f7ff fbf6 	bl	800430c <OS_Sched>
        OS_TRACE_SEM_POST_EXIT(OS_ERR_NONE);
        return (OS_ERR_NONE);
 8004b20:	2300      	movs	r3, #0
 8004b22:	e014      	b.n	8004b4e <OSSemPost+0x76>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	891b      	ldrh	r3, [r3, #8]
 8004b28:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d00a      	beq.n	8004b46 <OSSemPost+0x6e>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	891b      	ldrh	r3, [r3, #8]
 8004b34:	3301      	adds	r3, #1
 8004b36:	b29a      	uxth	r2, r3
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	811a      	strh	r2, [r3, #8]
        OS_EXIT_CRITICAL();
 8004b3c:	68f8      	ldr	r0, [r7, #12]
 8004b3e:	f7fb fb60 	bl	8000202 <OS_CPU_SR_Restore>
        OS_TRACE_SEM_POST_EXIT(OS_ERR_NONE);
        return (OS_ERR_NONE);
 8004b42:	2300      	movs	r3, #0
 8004b44:	e003      	b.n	8004b4e <OSSemPost+0x76>
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
 8004b46:	68f8      	ldr	r0, [r7, #12]
 8004b48:	f7fb fb5b 	bl	8000202 <OS_CPU_SR_Restore>
    OS_TRACE_SEM_POST_EXIT(OS_ERR_SEM_OVF);

    return (OS_ERR_SEM_OVF);
 8004b4c:	2333      	movs	r3, #51	@ 0x33
}
 8004b4e:	4618      	mov	r0, r3
 8004b50:	3710      	adds	r7, #16
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bd80      	pop	{r7, pc}
	...

08004b58 <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b08c      	sub	sp, #48	@ 0x30
 8004b5c:	af04      	add	r7, sp, #16
 8004b5e:	60f8      	str	r0, [r7, #12]
 8004b60:	60b9      	str	r1, [r7, #8]
 8004b62:	607a      	str	r2, [r7, #4]
 8004b64:	70fb      	strb	r3, [r7, #3]
    OS_STK     *psp;
    INT8U       err;
#if OS_CRITICAL_METHOD == 3u                 /* Allocate storage for CPU status register               */
    OS_CPU_SR   cpu_sr = 0u;
 8004b66:	2300      	movs	r3, #0
 8004b68:	61fb      	str	r3, [r7, #28]
        return (OS_ERR_ILLEGAL_CREATE_RUN_TIME);
    }
#endif

#if OS_ARG_CHK_EN > 0u
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
 8004b6a:	78fb      	ldrb	r3, [r7, #3]
 8004b6c:	2b3f      	cmp	r3, #63	@ 0x3f
 8004b6e:	d901      	bls.n	8004b74 <OSTaskCreateExt+0x1c>
        return (OS_ERR_PRIO_INVALID);
 8004b70:	232a      	movs	r3, #42	@ 0x2a
 8004b72:	e052      	b.n	8004c1a <OSTaskCreateExt+0xc2>
    }
#endif
    OS_ENTER_CRITICAL();
 8004b74:	2040      	movs	r0, #64	@ 0x40
 8004b76:	f7fb fb36 	bl	80001e6 <OS_CPU_SR_Save>
 8004b7a:	61f8      	str	r0, [r7, #28]
    if (OSIntNesting > 0u) {                 /* Make sure we don't create the task from within an ISR  */
 8004b7c:	4b29      	ldr	r3, [pc, #164]	@ (8004c24 <OSTaskCreateExt+0xcc>)
 8004b7e:	781b      	ldrb	r3, [r3, #0]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d004      	beq.n	8004b8e <OSTaskCreateExt+0x36>
        OS_EXIT_CRITICAL();
 8004b84:	69f8      	ldr	r0, [r7, #28]
 8004b86:	f7fb fb3c 	bl	8000202 <OS_CPU_SR_Restore>
        return (OS_ERR_TASK_CREATE_ISR);
 8004b8a:	233c      	movs	r3, #60	@ 0x3c
 8004b8c:	e045      	b.n	8004c1a <OSTaskCreateExt+0xc2>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
 8004b8e:	78fb      	ldrb	r3, [r7, #3]
 8004b90:	4a25      	ldr	r2, [pc, #148]	@ (8004c28 <OSTaskCreateExt+0xd0>)
 8004b92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d13b      	bne.n	8004c12 <OSTaskCreateExt+0xba>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
 8004b9a:	78fb      	ldrb	r3, [r7, #3]
 8004b9c:	4a22      	ldr	r2, [pc, #136]	@ (8004c28 <OSTaskCreateExt+0xd0>)
 8004b9e:	2101      	movs	r1, #1
 8004ba0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
 8004ba4:	69f8      	ldr	r0, [r7, #28]
 8004ba6:	f7fb fb2c 	bl	8000202 <OS_CPU_SR_Restore>

#if (OS_TASK_STAT_STK_CHK_EN > 0u)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
 8004baa:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8004bac:	461a      	mov	r2, r3
 8004bae:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004bb0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004bb2:	f000 fa8f 	bl	80050d4 <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
 8004bb6:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8004bb8:	687a      	ldr	r2, [r7, #4]
 8004bba:	68b9      	ldr	r1, [r7, #8]
 8004bbc:	68f8      	ldr	r0, [r7, #12]
 8004bbe:	f7fe fc11 	bl	80033e4 <OSTaskStkInit>
 8004bc2:	61b8      	str	r0, [r7, #24]
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
 8004bc4:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8004bc6:	78f8      	ldrb	r0, [r7, #3]
 8004bc8:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8004bca:	9302      	str	r3, [sp, #8]
 8004bcc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004bce:	9301      	str	r3, [sp, #4]
 8004bd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bd2:	9300      	str	r3, [sp, #0]
 8004bd4:	4613      	mov	r3, r2
 8004bd6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004bd8:	69b9      	ldr	r1, [r7, #24]
 8004bda:	f7ff fcc1 	bl	8004560 <OS_TCBInit>
 8004bde:	4603      	mov	r3, r0
 8004be0:	75fb      	strb	r3, [r7, #23]
        if (err == OS_ERR_NONE) {
 8004be2:	7dfb      	ldrb	r3, [r7, #23]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d106      	bne.n	8004bf6 <OSTaskCreateExt+0x9e>
            OS_TRACE_TASK_CREATE(OSTCBPrioTbl[prio]);
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
 8004be8:	4b10      	ldr	r3, [pc, #64]	@ (8004c2c <OSTaskCreateExt+0xd4>)
 8004bea:	781b      	ldrb	r3, [r3, #0]
 8004bec:	2b01      	cmp	r3, #1
 8004bee:	d10e      	bne.n	8004c0e <OSTaskCreateExt+0xb6>
                OS_Sched();
 8004bf0:	f7ff fb8c 	bl	800430c <OS_Sched>
 8004bf4:	e00b      	b.n	8004c0e <OSTaskCreateExt+0xb6>
            }
        } else {
            OS_ENTER_CRITICAL();
 8004bf6:	2040      	movs	r0, #64	@ 0x40
 8004bf8:	f7fb faf5 	bl	80001e6 <OS_CPU_SR_Save>
 8004bfc:	61f8      	str	r0, [r7, #28]
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
 8004bfe:	78fb      	ldrb	r3, [r7, #3]
 8004c00:	4a09      	ldr	r2, [pc, #36]	@ (8004c28 <OSTaskCreateExt+0xd0>)
 8004c02:	2100      	movs	r1, #0
 8004c04:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            OS_EXIT_CRITICAL();
 8004c08:	69f8      	ldr	r0, [r7, #28]
 8004c0a:	f7fb fafa 	bl	8000202 <OS_CPU_SR_Restore>
        }
        return (err);
 8004c0e:	7dfb      	ldrb	r3, [r7, #23]
 8004c10:	e003      	b.n	8004c1a <OSTaskCreateExt+0xc2>
    }
    OS_EXIT_CRITICAL();
 8004c12:	69f8      	ldr	r0, [r7, #28]
 8004c14:	f7fb faf5 	bl	8000202 <OS_CPU_SR_Restore>
    return (OS_ERR_PRIO_EXIST);
 8004c18:	2328      	movs	r3, #40	@ 0x28
}
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	3720      	adds	r7, #32
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bd80      	pop	{r7, pc}
 8004c22:	bf00      	nop
 8004c24:	2000181c 	.word	0x2000181c
 8004c28:	20001a44 	.word	0x20001a44
 8004c2c:	2000182c 	.word	0x2000182c

08004c30 <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0u
INT8U  OSTaskDel (INT8U prio)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b086      	sub	sp, #24
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	4603      	mov	r3, r0
 8004c38:	71fb      	strb	r3, [r7, #7]
#if (OS_FLAG_EN > 0u) && (OS_MAX_FLAGS > 0u)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3u                            /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0u;
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	617b      	str	r3, [r7, #20]
        OS_SAFETY_CRITICAL_EXCEPTION();
        return (OS_ERR_ILLEGAL_DEL_RUN_TIME);
    }
#endif

    if (OSIntNesting > 0u) {                            /* See if trying to delete from ISR            */
 8004c3e:	4b6d      	ldr	r3, [pc, #436]	@ (8004df4 <OSTaskDel+0x1c4>)
 8004c40:	781b      	ldrb	r3, [r3, #0]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d001      	beq.n	8004c4a <OSTaskDel+0x1a>
        return (OS_ERR_TASK_DEL_ISR);
 8004c46:	2340      	movs	r3, #64	@ 0x40
 8004c48:	e0d0      	b.n	8004dec <OSTaskDel+0x1bc>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
 8004c4a:	79fb      	ldrb	r3, [r7, #7]
 8004c4c:	2b3f      	cmp	r3, #63	@ 0x3f
 8004c4e:	d101      	bne.n	8004c54 <OSTaskDel+0x24>
        return (OS_ERR_TASK_DEL_IDLE);
 8004c50:	233e      	movs	r3, #62	@ 0x3e
 8004c52:	e0cb      	b.n	8004dec <OSTaskDel+0x1bc>
    }
#if OS_ARG_CHK_EN > 0u
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
 8004c54:	79fb      	ldrb	r3, [r7, #7]
 8004c56:	2b3e      	cmp	r3, #62	@ 0x3e
 8004c58:	d904      	bls.n	8004c64 <OSTaskDel+0x34>
        if (prio != OS_PRIO_SELF) {
 8004c5a:	79fb      	ldrb	r3, [r7, #7]
 8004c5c:	2bff      	cmp	r3, #255	@ 0xff
 8004c5e:	d001      	beq.n	8004c64 <OSTaskDel+0x34>
            return (OS_ERR_PRIO_INVALID);
 8004c60:	232a      	movs	r3, #42	@ 0x2a
 8004c62:	e0c3      	b.n	8004dec <OSTaskDel+0x1bc>
        }
    }
#endif

    OS_ENTER_CRITICAL();
 8004c64:	2040      	movs	r0, #64	@ 0x40
 8004c66:	f7fb fabe 	bl	80001e6 <OS_CPU_SR_Save>
 8004c6a:	6178      	str	r0, [r7, #20]
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
 8004c6c:	79fb      	ldrb	r3, [r7, #7]
 8004c6e:	2bff      	cmp	r3, #255	@ 0xff
 8004c70:	d104      	bne.n	8004c7c <OSTaskDel+0x4c>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
 8004c72:	4b61      	ldr	r3, [pc, #388]	@ (8004df8 <OSTaskDel+0x1c8>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8004c7a:	71fb      	strb	r3, [r7, #7]
    }
    ptcb = OSTCBPrioTbl[prio];
 8004c7c:	79fb      	ldrb	r3, [r7, #7]
 8004c7e:	4a5f      	ldr	r2, [pc, #380]	@ (8004dfc <OSTaskDel+0x1cc>)
 8004c80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c84:	613b      	str	r3, [r7, #16]
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
 8004c86:	693b      	ldr	r3, [r7, #16]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d104      	bne.n	8004c96 <OSTaskDel+0x66>
        OS_EXIT_CRITICAL();
 8004c8c:	6978      	ldr	r0, [r7, #20]
 8004c8e:	f7fb fab8 	bl	8000202 <OS_CPU_SR_Restore>
        return (OS_ERR_TASK_NOT_EXIST);
 8004c92:	2343      	movs	r3, #67	@ 0x43
 8004c94:	e0aa      	b.n	8004dec <OSTaskDel+0x1bc>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
 8004c96:	693b      	ldr	r3, [r7, #16]
 8004c98:	2b01      	cmp	r3, #1
 8004c9a:	d104      	bne.n	8004ca6 <OSTaskDel+0x76>
        OS_EXIT_CRITICAL();
 8004c9c:	6978      	ldr	r0, [r7, #20]
 8004c9e:	f7fb fab0 	bl	8000202 <OS_CPU_SR_Restore>
        return (OS_ERR_TASK_DEL);
 8004ca2:	233d      	movs	r3, #61	@ 0x3d
 8004ca4:	e0a2      	b.n	8004dec <OSTaskDel+0x1bc>
    }

    OSRdyTbl[ptcb->OSTCBY] &= (OS_PRIO)~ptcb->OSTCBBitX;
 8004ca6:	693b      	ldr	r3, [r7, #16]
 8004ca8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004cac:	461a      	mov	r2, r3
 8004cae:	4b54      	ldr	r3, [pc, #336]	@ (8004e00 <OSTaskDel+0x1d0>)
 8004cb0:	5c9a      	ldrb	r2, [r3, r2]
 8004cb2:	693b      	ldr	r3, [r7, #16]
 8004cb4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004cb8:	43db      	mvns	r3, r3
 8004cba:	b2db      	uxtb	r3, r3
 8004cbc:	6939      	ldr	r1, [r7, #16]
 8004cbe:	f891 103c 	ldrb.w	r1, [r1, #60]	@ 0x3c
 8004cc2:	4013      	ands	r3, r2
 8004cc4:	b2da      	uxtb	r2, r3
 8004cc6:	4b4e      	ldr	r3, [pc, #312]	@ (8004e00 <OSTaskDel+0x1d0>)
 8004cc8:	545a      	strb	r2, [r3, r1]
    OS_TRACE_TASK_SUSPENDED(ptcb);
    if (OSRdyTbl[ptcb->OSTCBY] == 0u) {                 /* Make task not ready                         */
 8004cca:	693b      	ldr	r3, [r7, #16]
 8004ccc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004cd0:	461a      	mov	r2, r3
 8004cd2:	4b4b      	ldr	r3, [pc, #300]	@ (8004e00 <OSTaskDel+0x1d0>)
 8004cd4:	5c9b      	ldrb	r3, [r3, r2]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d10a      	bne.n	8004cf0 <OSTaskDel+0xc0>
        OSRdyGrp           &= (OS_PRIO)~ptcb->OSTCBBitY;
 8004cda:	693b      	ldr	r3, [r7, #16]
 8004cdc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004ce0:	43db      	mvns	r3, r3
 8004ce2:	b2da      	uxtb	r2, r3
 8004ce4:	4b47      	ldr	r3, [pc, #284]	@ (8004e04 <OSTaskDel+0x1d4>)
 8004ce6:	781b      	ldrb	r3, [r3, #0]
 8004ce8:	4013      	ands	r3, r2
 8004cea:	b2da      	uxtb	r2, r3
 8004cec:	4b45      	ldr	r3, [pc, #276]	@ (8004e04 <OSTaskDel+0x1d4>)
 8004cee:	701a      	strb	r2, [r3, #0]
    }

#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
 8004cf0:	693b      	ldr	r3, [r7, #16]
 8004cf2:	69db      	ldr	r3, [r3, #28]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d005      	beq.n	8004d04 <OSTaskDel+0xd4>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
 8004cf8:	693b      	ldr	r3, [r7, #16]
 8004cfa:	69db      	ldr	r3, [r3, #28]
 8004cfc:	4619      	mov	r1, r3
 8004cfe:	6938      	ldr	r0, [r7, #16]
 8004d00:	f7ff f902 	bl	8003f08 <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0u)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
 8004d04:	693b      	ldr	r3, [r7, #16]
 8004d06:	6a1b      	ldr	r3, [r3, #32]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d005      	beq.n	8004d18 <OSTaskDel+0xe8>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
 8004d0c:	693b      	ldr	r3, [r7, #16]
 8004d0e:	6a1b      	ldr	r3, [r3, #32]
 8004d10:	4619      	mov	r1, r3
 8004d12:	6938      	ldr	r0, [r7, #16]
 8004d14:	f7ff f92b 	bl	8003f6e <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0u) && (OS_MAX_FLAGS > 0u)
    pnode = ptcb->OSTCBFlagNode;
 8004d18:	693b      	ldr	r3, [r7, #16]
 8004d1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d1c:	60fb      	str	r3, [r7, #12]
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d002      	beq.n	8004d2a <OSTaskDel+0xfa>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
 8004d24:	68f8      	ldr	r0, [r7, #12]
 8004d26:	f7ff fd53 	bl	80047d0 <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0u;                           /* Prevent OSTimeTick() from updating          */
 8004d2a:	693b      	ldr	r3, [r7, #16]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	635a      	str	r2, [r3, #52]	@ 0x34
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
 8004d30:	693b      	ldr	r3, [r7, #16]
 8004d32:	2200      	movs	r2, #0
 8004d34:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
 8004d38:	693b      	ldr	r3, [r7, #16]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
 8004d40:	4b31      	ldr	r3, [pc, #196]	@ (8004e08 <OSTaskDel+0x1d8>)
 8004d42:	781b      	ldrb	r3, [r3, #0]
 8004d44:	2bff      	cmp	r3, #255	@ 0xff
 8004d46:	d005      	beq.n	8004d54 <OSTaskDel+0x124>
        OSLockNesting++;
 8004d48:	4b2f      	ldr	r3, [pc, #188]	@ (8004e08 <OSTaskDel+0x1d8>)
 8004d4a:	781b      	ldrb	r3, [r3, #0]
 8004d4c:	3301      	adds	r3, #1
 8004d4e:	b2da      	uxtb	r2, r3
 8004d50:	4b2d      	ldr	r3, [pc, #180]	@ (8004e08 <OSTaskDel+0x1d8>)
 8004d52:	701a      	strb	r2, [r3, #0]
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
 8004d54:	6978      	ldr	r0, [r7, #20]
 8004d56:	f7fb fa54 	bl	8000202 <OS_CPU_SR_Restore>
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
 8004d5a:	f7fe ffff 	bl	8003d5c <OS_Dummy>
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
 8004d5e:	2040      	movs	r0, #64	@ 0x40
 8004d60:	f7fb fa41 	bl	80001e6 <OS_CPU_SR_Save>
 8004d64:	6178      	str	r0, [r7, #20]
    if (OSLockNesting > 0u) {                           /* Remove context switch lock                  */
 8004d66:	4b28      	ldr	r3, [pc, #160]	@ (8004e08 <OSTaskDel+0x1d8>)
 8004d68:	781b      	ldrb	r3, [r3, #0]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d005      	beq.n	8004d7a <OSTaskDel+0x14a>
        OSLockNesting--;
 8004d6e:	4b26      	ldr	r3, [pc, #152]	@ (8004e08 <OSTaskDel+0x1d8>)
 8004d70:	781b      	ldrb	r3, [r3, #0]
 8004d72:	3b01      	subs	r3, #1
 8004d74:	b2da      	uxtb	r2, r3
 8004d76:	4b24      	ldr	r3, [pc, #144]	@ (8004e08 <OSTaskDel+0x1d8>)
 8004d78:	701a      	strb	r2, [r3, #0]
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
 8004d7a:	6938      	ldr	r0, [r7, #16]
 8004d7c:	f7fe fb10 	bl	80033a0 <OSTaskDelHook>
#if defined(OS_TLS_TBL_SIZE) && (OS_TLS_TBL_SIZE > 0u)
    OS_TLS_TaskDel(ptcb);                               /* Call TLS hook                               */
#endif
#endif

    OSTaskCtr--;                                        /* One less task being managed                 */
 8004d80:	4b22      	ldr	r3, [pc, #136]	@ (8004e0c <OSTaskDel+0x1dc>)
 8004d82:	781b      	ldrb	r3, [r3, #0]
 8004d84:	3b01      	subs	r3, #1
 8004d86:	b2da      	uxtb	r2, r3
 8004d88:	4b20      	ldr	r3, [pc, #128]	@ (8004e0c <OSTaskDel+0x1dc>)
 8004d8a:	701a      	strb	r2, [r3, #0]
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
 8004d8c:	79fb      	ldrb	r3, [r7, #7]
 8004d8e:	4a1b      	ldr	r2, [pc, #108]	@ (8004dfc <OSTaskDel+0x1cc>)
 8004d90:	2100      	movs	r1, #0
 8004d92:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
 8004d96:	693b      	ldr	r3, [r7, #16]
 8004d98:	699b      	ldr	r3, [r3, #24]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d108      	bne.n	8004db0 <OSTaskDel+0x180>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
 8004d9e:	693b      	ldr	r3, [r7, #16]
 8004da0:	695b      	ldr	r3, [r3, #20]
 8004da2:	2200      	movs	r2, #0
 8004da4:	619a      	str	r2, [r3, #24]
        OSTCBList                  = ptcb->OSTCBNext;
 8004da6:	693b      	ldr	r3, [r7, #16]
 8004da8:	695b      	ldr	r3, [r3, #20]
 8004daa:	4a19      	ldr	r2, [pc, #100]	@ (8004e10 <OSTaskDel+0x1e0>)
 8004dac:	6013      	str	r3, [r2, #0]
 8004dae:	e009      	b.n	8004dc4 <OSTaskDel+0x194>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
 8004db0:	693b      	ldr	r3, [r7, #16]
 8004db2:	699b      	ldr	r3, [r3, #24]
 8004db4:	693a      	ldr	r2, [r7, #16]
 8004db6:	6952      	ldr	r2, [r2, #20]
 8004db8:	615a      	str	r2, [r3, #20]
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
 8004dba:	693b      	ldr	r3, [r7, #16]
 8004dbc:	695b      	ldr	r3, [r3, #20]
 8004dbe:	693a      	ldr	r2, [r7, #16]
 8004dc0:	6992      	ldr	r2, [r2, #24]
 8004dc2:	619a      	str	r2, [r3, #24]
    }
    ptcb->OSTCBNext     = OSTCBFreeList;                /* Return TCB to free TCB list                 */
 8004dc4:	4b13      	ldr	r3, [pc, #76]	@ (8004e14 <OSTaskDel+0x1e4>)
 8004dc6:	681a      	ldr	r2, [r3, #0]
 8004dc8:	693b      	ldr	r3, [r7, #16]
 8004dca:	615a      	str	r2, [r3, #20]
    OSTCBFreeList       = ptcb;
 8004dcc:	4a11      	ldr	r2, [pc, #68]	@ (8004e14 <OSTaskDel+0x1e4>)
 8004dce:	693b      	ldr	r3, [r7, #16]
 8004dd0:	6013      	str	r3, [r2, #0]
#if OS_TASK_NAME_EN > 0u
    ptcb->OSTCBTaskName = (INT8U *)(void *)"?";
 8004dd2:	693b      	ldr	r3, [r7, #16]
 8004dd4:	4a10      	ldr	r2, [pc, #64]	@ (8004e18 <OSTaskDel+0x1e8>)
 8004dd6:	655a      	str	r2, [r3, #84]	@ 0x54
#endif
    OS_EXIT_CRITICAL();
 8004dd8:	6978      	ldr	r0, [r7, #20]
 8004dda:	f7fb fa12 	bl	8000202 <OS_CPU_SR_Restore>
    if (OSRunning == OS_TRUE) {
 8004dde:	4b0f      	ldr	r3, [pc, #60]	@ (8004e1c <OSTaskDel+0x1ec>)
 8004de0:	781b      	ldrb	r3, [r3, #0]
 8004de2:	2b01      	cmp	r3, #1
 8004de4:	d101      	bne.n	8004dea <OSTaskDel+0x1ba>
        OS_Sched();                                     /* Find new highest priority task              */
 8004de6:	f7ff fa91 	bl	800430c <OS_Sched>
    }
    return (OS_ERR_NONE);
 8004dea:	2300      	movs	r3, #0
}
 8004dec:	4618      	mov	r0, r3
 8004dee:	3718      	adds	r7, #24
 8004df0:	46bd      	mov	sp, r7
 8004df2:	bd80      	pop	{r7, pc}
 8004df4:	2000181c 	.word	0x2000181c
 8004df8:	20001a34 	.word	0x20001a34
 8004dfc:	20001a44 	.word	0x20001a44
 8004e00:	20001824 	.word	0x20001824
 8004e04:	20001820 	.word	0x20001820
 8004e08:	2000181d 	.word	0x2000181d
 8004e0c:	2000182d 	.word	0x2000182d
 8004e10:	20001a40 	.word	0x20001a40
 8004e14:	20001a38 	.word	0x20001a38
 8004e18:	08005710 	.word	0x08005710
 8004e1c:	2000182c 	.word	0x2000182c

08004e20 <OSTaskNameSet>:
*/
#if OS_TASK_NAME_EN > 0u
void  OSTaskNameSet (INT8U   prio,
                     INT8U  *pname,
                     INT8U  *perr)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b086      	sub	sp, #24
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	4603      	mov	r3, r0
 8004e28:	60b9      	str	r1, [r7, #8]
 8004e2a:	607a      	str	r2, [r7, #4]
 8004e2c:	73fb      	strb	r3, [r7, #15]
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3u                         /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0u;
 8004e2e:	2300      	movs	r3, #0
 8004e30:	617b      	str	r3, [r7, #20]
        return;
    }
#endif

#if OS_ARG_CHK_EN > 0u
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
 8004e32:	7bfb      	ldrb	r3, [r7, #15]
 8004e34:	2b3f      	cmp	r3, #63	@ 0x3f
 8004e36:	d906      	bls.n	8004e46 <OSTaskNameSet+0x26>
        if (prio != OS_PRIO_SELF) {
 8004e38:	7bfb      	ldrb	r3, [r7, #15]
 8004e3a:	2bff      	cmp	r3, #255	@ 0xff
 8004e3c:	d003      	beq.n	8004e46 <OSTaskNameSet+0x26>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	222a      	movs	r2, #42	@ 0x2a
 8004e42:	701a      	strb	r2, [r3, #0]
            return;
 8004e44:	e03c      	b.n	8004ec0 <OSTaskNameSet+0xa0>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d103      	bne.n	8004e54 <OSTaskNameSet+0x34>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	220c      	movs	r2, #12
 8004e50:	701a      	strb	r2, [r3, #0]
        return;
 8004e52:	e035      	b.n	8004ec0 <OSTaskNameSet+0xa0>
    }
#endif
    if (OSIntNesting > 0u) {                         /* See if trying to call from an ISR              */
 8004e54:	4b1c      	ldr	r3, [pc, #112]	@ (8004ec8 <OSTaskNameSet+0xa8>)
 8004e56:	781b      	ldrb	r3, [r3, #0]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d003      	beq.n	8004e64 <OSTaskNameSet+0x44>
        *perr = OS_ERR_NAME_SET_ISR;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2212      	movs	r2, #18
 8004e60:	701a      	strb	r2, [r3, #0]
        return;
 8004e62:	e02d      	b.n	8004ec0 <OSTaskNameSet+0xa0>
    }
    OS_ENTER_CRITICAL();
 8004e64:	2040      	movs	r0, #64	@ 0x40
 8004e66:	f7fb f9be 	bl	80001e6 <OS_CPU_SR_Save>
 8004e6a:	6178      	str	r0, [r7, #20]
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
 8004e6c:	7bfb      	ldrb	r3, [r7, #15]
 8004e6e:	2bff      	cmp	r3, #255	@ 0xff
 8004e70:	d104      	bne.n	8004e7c <OSTaskNameSet+0x5c>
        prio = OSTCBCur->OSTCBPrio;
 8004e72:	4b16      	ldr	r3, [pc, #88]	@ (8004ecc <OSTaskNameSet+0xac>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8004e7a:	73fb      	strb	r3, [r7, #15]
    }
    ptcb = OSTCBPrioTbl[prio];
 8004e7c:	7bfb      	ldrb	r3, [r7, #15]
 8004e7e:	4a14      	ldr	r2, [pc, #80]	@ (8004ed0 <OSTaskNameSet+0xb0>)
 8004e80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e84:	613b      	str	r3, [r7, #16]
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
 8004e86:	693b      	ldr	r3, [r7, #16]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d106      	bne.n	8004e9a <OSTaskNameSet+0x7a>
        OS_EXIT_CRITICAL();                          /* No                                             */
 8004e8c:	6978      	ldr	r0, [r7, #20]
 8004e8e:	f7fb f9b8 	bl	8000202 <OS_CPU_SR_Restore>
        *perr = OS_ERR_TASK_NOT_EXIST;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2243      	movs	r2, #67	@ 0x43
 8004e96:	701a      	strb	r2, [r3, #0]
        return;
 8004e98:	e012      	b.n	8004ec0 <OSTaskNameSet+0xa0>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
 8004e9a:	693b      	ldr	r3, [r7, #16]
 8004e9c:	2b01      	cmp	r3, #1
 8004e9e:	d106      	bne.n	8004eae <OSTaskNameSet+0x8e>
        OS_EXIT_CRITICAL();                          /* Yes                                            */
 8004ea0:	6978      	ldr	r0, [r7, #20]
 8004ea2:	f7fb f9ae 	bl	8000202 <OS_CPU_SR_Restore>
        *perr = OS_ERR_TASK_NOT_EXIST;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2243      	movs	r2, #67	@ 0x43
 8004eaa:	701a      	strb	r2, [r3, #0]
        return;
 8004eac:	e008      	b.n	8004ec0 <OSTaskNameSet+0xa0>
    }
    ptcb->OSTCBTaskName = pname;
 8004eae:	693b      	ldr	r3, [r7, #16]
 8004eb0:	68ba      	ldr	r2, [r7, #8]
 8004eb2:	655a      	str	r2, [r3, #84]	@ 0x54
    OS_TRACE_TASK_NAME_SET(ptcb);
    OS_EXIT_CRITICAL();
 8004eb4:	6978      	ldr	r0, [r7, #20]
 8004eb6:	f7fb f9a4 	bl	8000202 <OS_CPU_SR_Restore>
    *perr               = OS_ERR_NONE;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	701a      	strb	r2, [r3, #0]
}
 8004ec0:	3718      	adds	r7, #24
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bd80      	pop	{r7, pc}
 8004ec6:	bf00      	nop
 8004ec8:	2000181c 	.word	0x2000181c
 8004ecc:	20001a34 	.word	0x20001a34
 8004ed0:	20001a44 	.word	0x20001a44

08004ed4 <OSTaskStkChk>:
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0u) && (OS_TASK_CREATE_EXT_EN > 0u)
INT8U  OSTaskStkChk (INT8U         prio,
                     OS_STK_DATA  *p_stk_data)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b088      	sub	sp, #32
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	4603      	mov	r3, r0
 8004edc:	6039      	str	r1, [r7, #0]
 8004ede:	71fb      	strb	r3, [r7, #7]
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3u                           /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0u;
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	617b      	str	r3, [r7, #20]
#endif



#if OS_ARG_CHK_EN > 0u
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
 8004ee4:	79fb      	ldrb	r3, [r7, #7]
 8004ee6:	2b3f      	cmp	r3, #63	@ 0x3f
 8004ee8:	d904      	bls.n	8004ef4 <OSTaskStkChk+0x20>
        if (prio != OS_PRIO_SELF) {
 8004eea:	79fb      	ldrb	r3, [r7, #7]
 8004eec:	2bff      	cmp	r3, #255	@ 0xff
 8004eee:	d001      	beq.n	8004ef4 <OSTaskStkChk+0x20>
            return (OS_ERR_PRIO_INVALID);
 8004ef0:	232a      	movs	r3, #42	@ 0x2a
 8004ef2:	e054      	b.n	8004f9e <OSTaskStkChk+0xca>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d101      	bne.n	8004efe <OSTaskStkChk+0x2a>
        return (OS_ERR_PDATA_NULL);
 8004efa:	2309      	movs	r3, #9
 8004efc:	e04f      	b.n	8004f9e <OSTaskStkChk+0xca>
    }
#endif
    p_stk_data->OSFree = 0u;                           /* Assume failure, set to 0 size                */
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	2200      	movs	r2, #0
 8004f02:	601a      	str	r2, [r3, #0]
    p_stk_data->OSUsed = 0u;
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	2200      	movs	r2, #0
 8004f08:	605a      	str	r2, [r3, #4]
    OS_ENTER_CRITICAL();
 8004f0a:	2040      	movs	r0, #64	@ 0x40
 8004f0c:	f7fb f96b 	bl	80001e6 <OS_CPU_SR_Save>
 8004f10:	6178      	str	r0, [r7, #20]
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
 8004f12:	79fb      	ldrb	r3, [r7, #7]
 8004f14:	2bff      	cmp	r3, #255	@ 0xff
 8004f16:	d104      	bne.n	8004f22 <OSTaskStkChk+0x4e>
        prio = OSTCBCur->OSTCBPrio;
 8004f18:	4b23      	ldr	r3, [pc, #140]	@ (8004fa8 <OSTaskStkChk+0xd4>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8004f20:	71fb      	strb	r3, [r7, #7]
    }
    ptcb = OSTCBPrioTbl[prio];
 8004f22:	79fb      	ldrb	r3, [r7, #7]
 8004f24:	4a21      	ldr	r2, [pc, #132]	@ (8004fac <OSTaskStkChk+0xd8>)
 8004f26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f2a:	613b      	str	r3, [r7, #16]
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
 8004f2c:	693b      	ldr	r3, [r7, #16]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d104      	bne.n	8004f3c <OSTaskStkChk+0x68>
        OS_EXIT_CRITICAL();
 8004f32:	6978      	ldr	r0, [r7, #20]
 8004f34:	f7fb f965 	bl	8000202 <OS_CPU_SR_Restore>
        return (OS_ERR_TASK_NOT_EXIST);
 8004f38:	2343      	movs	r3, #67	@ 0x43
 8004f3a:	e030      	b.n	8004f9e <OSTaskStkChk+0xca>
    }
    if (ptcb == OS_TCB_RESERVED) {
 8004f3c:	693b      	ldr	r3, [r7, #16]
 8004f3e:	2b01      	cmp	r3, #1
 8004f40:	d104      	bne.n	8004f4c <OSTaskStkChk+0x78>
        OS_EXIT_CRITICAL();
 8004f42:	6978      	ldr	r0, [r7, #20]
 8004f44:	f7fb f95d 	bl	8000202 <OS_CPU_SR_Restore>
        return (OS_ERR_TASK_NOT_EXIST);
 8004f48:	2343      	movs	r3, #67	@ 0x43
 8004f4a:	e028      	b.n	8004f9e <OSTaskStkChk+0xca>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0u) { /* Make sure stack checking option is set      */
 8004f4c:	693b      	ldr	r3, [r7, #16]
 8004f4e:	8a1b      	ldrh	r3, [r3, #16]
 8004f50:	f003 0301 	and.w	r3, r3, #1
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d104      	bne.n	8004f62 <OSTaskStkChk+0x8e>
        OS_EXIT_CRITICAL();
 8004f58:	6978      	ldr	r0, [r7, #20]
 8004f5a:	f7fb f952 	bl	8000202 <OS_CPU_SR_Restore>
        return (OS_ERR_TASK_OPT);
 8004f5e:	2345      	movs	r3, #69	@ 0x45
 8004f60:	e01d      	b.n	8004f9e <OSTaskStkChk+0xca>
    }
    nfree = 0u;
 8004f62:	2300      	movs	r3, #0
 8004f64:	61bb      	str	r3, [r7, #24]
    size  = ptcb->OSTCBStkSize;
 8004f66:	693b      	ldr	r3, [r7, #16]
 8004f68:	68db      	ldr	r3, [r3, #12]
 8004f6a:	60fb      	str	r3, [r7, #12]
    pchk  = ptcb->OSTCBStkBottom;
 8004f6c:	693b      	ldr	r3, [r7, #16]
 8004f6e:	689b      	ldr	r3, [r3, #8]
 8004f70:	61fb      	str	r3, [r7, #28]
    OS_EXIT_CRITICAL();
 8004f72:	6978      	ldr	r0, [r7, #20]
 8004f74:	f7fb f945 	bl	8000202 <OS_CPU_SR_Restore>
#if OS_STK_GROWTH == 1u
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
 8004f78:	e002      	b.n	8004f80 <OSTaskStkChk+0xac>
        nfree++;
 8004f7a:	69bb      	ldr	r3, [r7, #24]
 8004f7c:	3301      	adds	r3, #1
 8004f7e:	61bb      	str	r3, [r7, #24]
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
 8004f80:	69fb      	ldr	r3, [r7, #28]
 8004f82:	1d1a      	adds	r2, r3, #4
 8004f84:	61fa      	str	r2, [r7, #28]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d0f6      	beq.n	8004f7a <OSTaskStkChk+0xa6>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree;                       /* Store   number of free entries on the stk     */
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	69ba      	ldr	r2, [r7, #24]
 8004f90:	601a      	str	r2, [r3, #0]
    p_stk_data->OSUsed = size - nfree;                /* Compute number of entries used on the stk     */
 8004f92:	68fa      	ldr	r2, [r7, #12]
 8004f94:	69bb      	ldr	r3, [r7, #24]
 8004f96:	1ad2      	subs	r2, r2, r3
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	605a      	str	r2, [r3, #4]
    return (OS_ERR_NONE);
 8004f9c:	2300      	movs	r3, #0
}
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	3720      	adds	r7, #32
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	bd80      	pop	{r7, pc}
 8004fa6:	bf00      	nop
 8004fa8:	20001a34 	.word	0x20001a34
 8004fac:	20001a44 	.word	0x20001a44

08004fb0 <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0u
INT8U  OSTaskSuspend (INT8U prio)
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b086      	sub	sp, #24
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	71fb      	strb	r3, [r7, #7]
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0u;
 8004fba:	2300      	movs	r3, #0
 8004fbc:	613b      	str	r3, [r7, #16]
#endif



#if OS_ARG_CHK_EN > 0u
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
 8004fbe:	79fb      	ldrb	r3, [r7, #7]
 8004fc0:	2b3f      	cmp	r3, #63	@ 0x3f
 8004fc2:	d101      	bne.n	8004fc8 <OSTaskSuspend+0x18>
        return (OS_ERR_TASK_SUSPEND_IDLE);
 8004fc4:	2347      	movs	r3, #71	@ 0x47
 8004fc6:	e06a      	b.n	800509e <OSTaskSuspend+0xee>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
 8004fc8:	79fb      	ldrb	r3, [r7, #7]
 8004fca:	2b3e      	cmp	r3, #62	@ 0x3e
 8004fcc:	d904      	bls.n	8004fd8 <OSTaskSuspend+0x28>
        if (prio != OS_PRIO_SELF) {
 8004fce:	79fb      	ldrb	r3, [r7, #7]
 8004fd0:	2bff      	cmp	r3, #255	@ 0xff
 8004fd2:	d001      	beq.n	8004fd8 <OSTaskSuspend+0x28>
            return (OS_ERR_PRIO_INVALID);
 8004fd4:	232a      	movs	r3, #42	@ 0x2a
 8004fd6:	e062      	b.n	800509e <OSTaskSuspend+0xee>
        }
    }
#endif
    OS_ENTER_CRITICAL();
 8004fd8:	2040      	movs	r0, #64	@ 0x40
 8004fda:	f7fb f904 	bl	80001e6 <OS_CPU_SR_Save>
 8004fde:	6138      	str	r0, [r7, #16]
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
 8004fe0:	79fb      	ldrb	r3, [r7, #7]
 8004fe2:	2bff      	cmp	r3, #255	@ 0xff
 8004fe4:	d107      	bne.n	8004ff6 <OSTaskSuspend+0x46>
        prio = OSTCBCur->OSTCBPrio;
 8004fe6:	4b30      	ldr	r3, [pc, #192]	@ (80050a8 <OSTaskSuspend+0xf8>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8004fee:	71fb      	strb	r3, [r7, #7]
        self = OS_TRUE;
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	75fb      	strb	r3, [r7, #23]
 8004ff4:	e00b      	b.n	800500e <OSTaskSuspend+0x5e>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
 8004ff6:	4b2c      	ldr	r3, [pc, #176]	@ (80050a8 <OSTaskSuspend+0xf8>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8004ffe:	79fa      	ldrb	r2, [r7, #7]
 8005000:	429a      	cmp	r2, r3
 8005002:	d102      	bne.n	800500a <OSTaskSuspend+0x5a>
        self = OS_TRUE;
 8005004:	2301      	movs	r3, #1
 8005006:	75fb      	strb	r3, [r7, #23]
 8005008:	e001      	b.n	800500e <OSTaskSuspend+0x5e>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
 800500a:	2300      	movs	r3, #0
 800500c:	75fb      	strb	r3, [r7, #23]
    }
    ptcb = OSTCBPrioTbl[prio];
 800500e:	79fb      	ldrb	r3, [r7, #7]
 8005010:	4a26      	ldr	r2, [pc, #152]	@ (80050ac <OSTaskSuspend+0xfc>)
 8005012:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005016:	60fb      	str	r3, [r7, #12]
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d104      	bne.n	8005028 <OSTaskSuspend+0x78>
        OS_EXIT_CRITICAL();
 800501e:	6938      	ldr	r0, [r7, #16]
 8005020:	f7fb f8ef 	bl	8000202 <OS_CPU_SR_Restore>
        return (OS_ERR_TASK_SUSPEND_PRIO);
 8005024:	2348      	movs	r3, #72	@ 0x48
 8005026:	e03a      	b.n	800509e <OSTaskSuspend+0xee>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	2b01      	cmp	r3, #1
 800502c:	d104      	bne.n	8005038 <OSTaskSuspend+0x88>
        OS_EXIT_CRITICAL();
 800502e:	6938      	ldr	r0, [r7, #16]
 8005030:	f7fb f8e7 	bl	8000202 <OS_CPU_SR_Restore>
        return (OS_ERR_TASK_NOT_EXIST);
 8005034:	2343      	movs	r3, #67	@ 0x43
 8005036:	e032      	b.n	800509e <OSTaskSuspend+0xee>
    }
    y            = ptcb->OSTCBY;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800503e:	72fb      	strb	r3, [r7, #11]
    OSRdyTbl[y] &= (OS_PRIO)~ptcb->OSTCBBitX;                   /* Make task not ready                 */
 8005040:	7afb      	ldrb	r3, [r7, #11]
 8005042:	4a1b      	ldr	r2, [pc, #108]	@ (80050b0 <OSTaskSuspend+0x100>)
 8005044:	5cd1      	ldrb	r1, [r2, r3]
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800504c:	43db      	mvns	r3, r3
 800504e:	b2da      	uxtb	r2, r3
 8005050:	7afb      	ldrb	r3, [r7, #11]
 8005052:	400a      	ands	r2, r1
 8005054:	b2d1      	uxtb	r1, r2
 8005056:	4a16      	ldr	r2, [pc, #88]	@ (80050b0 <OSTaskSuspend+0x100>)
 8005058:	54d1      	strb	r1, [r2, r3]
    if (OSRdyTbl[y] == 0u) {
 800505a:	7afb      	ldrb	r3, [r7, #11]
 800505c:	4a14      	ldr	r2, [pc, #80]	@ (80050b0 <OSTaskSuspend+0x100>)
 800505e:	5cd3      	ldrb	r3, [r2, r3]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d10a      	bne.n	800507a <OSTaskSuspend+0xca>
        OSRdyGrp &= (OS_PRIO)~ptcb->OSTCBBitY;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800506a:	43db      	mvns	r3, r3
 800506c:	b2da      	uxtb	r2, r3
 800506e:	4b11      	ldr	r3, [pc, #68]	@ (80050b4 <OSTaskSuspend+0x104>)
 8005070:	781b      	ldrb	r3, [r3, #0]
 8005072:	4013      	ands	r3, r2
 8005074:	b2da      	uxtb	r2, r3
 8005076:	4b0f      	ldr	r3, [pc, #60]	@ (80050b4 <OSTaskSuspend+0x104>)
 8005078:	701a      	strb	r2, [r3, #0]
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005080:	f043 0308 	orr.w	r3, r3, #8
 8005084:	b2da      	uxtb	r2, r3
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    OS_EXIT_CRITICAL();
 800508c:	6938      	ldr	r0, [r7, #16]
 800508e:	f7fb f8b8 	bl	8000202 <OS_CPU_SR_Restore>
    OS_TRACE_TASK_SUSPEND(ptcb);
    OS_TRACE_TASK_SUSPENDED(ptcb);
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
 8005092:	7dfb      	ldrb	r3, [r7, #23]
 8005094:	2b01      	cmp	r3, #1
 8005096:	d101      	bne.n	800509c <OSTaskSuspend+0xec>
        OS_Sched();                                             /* Find new highest priority task      */
 8005098:	f7ff f938 	bl	800430c <OS_Sched>
    }
    return (OS_ERR_NONE);
 800509c:	2300      	movs	r3, #0
}
 800509e:	4618      	mov	r0, r3
 80050a0:	3718      	adds	r7, #24
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bd80      	pop	{r7, pc}
 80050a6:	bf00      	nop
 80050a8:	20001a34 	.word	0x20001a34
 80050ac:	20001a44 	.word	0x20001a44
 80050b0:	20001824 	.word	0x20001824
 80050b4:	20001820 	.word	0x20001820

080050b8 <OS_TaskReturn>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_TaskReturn (void)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	af00      	add	r7, sp, #0
    OSTaskReturnHook(OSTCBCur);                   /* Call hook to let user decide on what to do        */
 80050bc:	4b04      	ldr	r3, [pc, #16]	@ (80050d0 <OS_TaskReturn+0x18>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4618      	mov	r0, r3
 80050c2:	f7fe f97e 	bl	80033c2 <OSTaskReturnHook>

#if OS_TASK_DEL_EN > 0u
    (void)OSTaskDel(OS_PRIO_SELF);                /* Delete task if it accidentally returns!           */
 80050c6:	20ff      	movs	r0, #255	@ 0xff
 80050c8:	f7ff fdb2 	bl	8004c30 <OSTaskDel>
#else
    for (;;) {
        OSTimeDly(OS_TICKS_PER_SEC);
    }
#endif
}
 80050cc:	bf00      	nop
 80050ce:	bd80      	pop	{r7, pc}
 80050d0:	20001a34 	.word	0x20001a34

080050d4 <OS_TaskStkClr>:
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0u) && (OS_TASK_CREATE_EXT_EN > 0u)
void  OS_TaskStkClr (OS_STK  *pbos,
                     INT32U   size,
                     INT16U   opt)
{
 80050d4:	b480      	push	{r7}
 80050d6:	b085      	sub	sp, #20
 80050d8:	af00      	add	r7, sp, #0
 80050da:	60f8      	str	r0, [r7, #12]
 80050dc:	60b9      	str	r1, [r7, #8]
 80050de:	4613      	mov	r3, r2
 80050e0:	80fb      	strh	r3, [r7, #6]
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000u) {      /* See if stack checking has been enabled       */
 80050e2:	88fb      	ldrh	r3, [r7, #6]
 80050e4:	f003 0301 	and.w	r3, r3, #1
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d010      	beq.n	800510e <OS_TaskStkClr+0x3a>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000u) {  /* See if stack needs to be cleared             */
 80050ec:	88fb      	ldrh	r3, [r7, #6]
 80050ee:	f003 0302 	and.w	r3, r3, #2
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d00b      	beq.n	800510e <OS_TaskStkClr+0x3a>
#if OS_STK_GROWTH == 1u
            while (size > 0u) {                        /* Stack grows from HIGH to LOW memory          */
 80050f6:	e007      	b.n	8005108 <OS_TaskStkClr+0x34>
                size--;
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	3b01      	subs	r3, #1
 80050fc:	60bb      	str	r3, [r7, #8]
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	1d1a      	adds	r2, r3, #4
 8005102:	60fa      	str	r2, [r7, #12]
 8005104:	2200      	movs	r2, #0
 8005106:	601a      	str	r2, [r3, #0]
            while (size > 0u) {                        /* Stack grows from HIGH to LOW memory          */
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d1f4      	bne.n	80050f8 <OS_TaskStkClr+0x24>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
 800510e:	bf00      	nop
 8005110:	3714      	adds	r7, #20
 8005112:	46bd      	mov	sp, r7
 8005114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005118:	4770      	bx	lr
	...

0800511c <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT32U ticks)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b084      	sub	sp, #16
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
    INT8U      y;
#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0u;
 8005124:	2300      	movs	r3, #0
 8005126:	60fb      	str	r3, [r7, #12]
#endif



    if (OSIntNesting > 0u) {                     /* See if trying to call from an ISR                  */
 8005128:	4b21      	ldr	r3, [pc, #132]	@ (80051b0 <OSTimeDly+0x94>)
 800512a:	781b      	ldrb	r3, [r3, #0]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d138      	bne.n	80051a2 <OSTimeDly+0x86>
        return;
    }
    if (OSLockNesting > 0u) {                    /* See if called with scheduler locked                */
 8005130:	4b20      	ldr	r3, [pc, #128]	@ (80051b4 <OSTimeDly+0x98>)
 8005132:	781b      	ldrb	r3, [r3, #0]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d136      	bne.n	80051a6 <OSTimeDly+0x8a>
        return;
    }
    if (ticks > 0u) {                            /* 0 means no delay!                                  */
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d034      	beq.n	80051a8 <OSTimeDly+0x8c>
        OS_ENTER_CRITICAL();
 800513e:	2040      	movs	r0, #64	@ 0x40
 8005140:	f7fb f851 	bl	80001e6 <OS_CPU_SR_Save>
 8005144:	60f8      	str	r0, [r7, #12]
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
 8005146:	4b1c      	ldr	r3, [pc, #112]	@ (80051b8 <OSTimeDly+0x9c>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800514e:	72fb      	strb	r3, [r7, #11]
        OSRdyTbl[y] &= (OS_PRIO)~OSTCBCur->OSTCBBitX;
 8005150:	7afb      	ldrb	r3, [r7, #11]
 8005152:	4a1a      	ldr	r2, [pc, #104]	@ (80051bc <OSTimeDly+0xa0>)
 8005154:	5cd1      	ldrb	r1, [r2, r3]
 8005156:	4b18      	ldr	r3, [pc, #96]	@ (80051b8 <OSTimeDly+0x9c>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800515e:	43db      	mvns	r3, r3
 8005160:	b2da      	uxtb	r2, r3
 8005162:	7afb      	ldrb	r3, [r7, #11]
 8005164:	400a      	ands	r2, r1
 8005166:	b2d1      	uxtb	r1, r2
 8005168:	4a14      	ldr	r2, [pc, #80]	@ (80051bc <OSTimeDly+0xa0>)
 800516a:	54d1      	strb	r1, [r2, r3]
        OS_TRACE_TASK_SUSPENDED(OSTCBCur);
        if (OSRdyTbl[y] == 0u) {
 800516c:	7afb      	ldrb	r3, [r7, #11]
 800516e:	4a13      	ldr	r2, [pc, #76]	@ (80051bc <OSTimeDly+0xa0>)
 8005170:	5cd3      	ldrb	r3, [r2, r3]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d10b      	bne.n	800518e <OSTimeDly+0x72>
            OSRdyGrp &= (OS_PRIO)~OSTCBCur->OSTCBBitY;
 8005176:	4b10      	ldr	r3, [pc, #64]	@ (80051b8 <OSTimeDly+0x9c>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800517e:	43db      	mvns	r3, r3
 8005180:	b2da      	uxtb	r2, r3
 8005182:	4b0f      	ldr	r3, [pc, #60]	@ (80051c0 <OSTimeDly+0xa4>)
 8005184:	781b      	ldrb	r3, [r3, #0]
 8005186:	4013      	ands	r3, r2
 8005188:	b2da      	uxtb	r2, r3
 800518a:	4b0d      	ldr	r3, [pc, #52]	@ (80051c0 <OSTimeDly+0xa4>)
 800518c:	701a      	strb	r2, [r3, #0]
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
 800518e:	4b0a      	ldr	r3, [pc, #40]	@ (80051b8 <OSTimeDly+0x9c>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	687a      	ldr	r2, [r7, #4]
 8005194:	635a      	str	r2, [r3, #52]	@ 0x34
        OS_TRACE_TASK_DLY(ticks);
        OS_EXIT_CRITICAL();
 8005196:	68f8      	ldr	r0, [r7, #12]
 8005198:	f7fb f833 	bl	8000202 <OS_CPU_SR_Restore>
        OS_Sched();                              /* Find next task to run!                             */
 800519c:	f7ff f8b6 	bl	800430c <OS_Sched>
 80051a0:	e002      	b.n	80051a8 <OSTimeDly+0x8c>
        return;
 80051a2:	bf00      	nop
 80051a4:	e000      	b.n	80051a8 <OSTimeDly+0x8c>
        return;
 80051a6:	bf00      	nop
    }
}
 80051a8:	3710      	adds	r7, #16
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bd80      	pop	{r7, pc}
 80051ae:	bf00      	nop
 80051b0:	2000181c 	.word	0x2000181c
 80051b4:	2000181d 	.word	0x2000181d
 80051b8:	20001a34 	.word	0x20001a34
 80051bc:	20001824 	.word	0x20001824
 80051c0:	20001820 	.word	0x20001820

080051c4 <OSTimeDlyHMSM>:
#if OS_TIME_DLY_HMSM_EN > 0u
INT8U  OSTimeDlyHMSM (INT8U   hours,
                      INT8U   minutes,
                      INT8U   seconds,
                      INT16U  ms)
{
 80051c4:	b590      	push	{r4, r7, lr}
 80051c6:	b085      	sub	sp, #20
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	4604      	mov	r4, r0
 80051cc:	4608      	mov	r0, r1
 80051ce:	4611      	mov	r1, r2
 80051d0:	461a      	mov	r2, r3
 80051d2:	4623      	mov	r3, r4
 80051d4:	71fb      	strb	r3, [r7, #7]
 80051d6:	4603      	mov	r3, r0
 80051d8:	71bb      	strb	r3, [r7, #6]
 80051da:	460b      	mov	r3, r1
 80051dc:	717b      	strb	r3, [r7, #5]
 80051de:	4613      	mov	r3, r2
 80051e0:	807b      	strh	r3, [r7, #2]
    INT32U ticks;


    if (OSIntNesting > 0u) {                     /* See if trying to call from an ISR                  */
 80051e2:	4b27      	ldr	r3, [pc, #156]	@ (8005280 <OSTimeDlyHMSM+0xbc>)
 80051e4:	781b      	ldrb	r3, [r3, #0]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d001      	beq.n	80051ee <OSTimeDlyHMSM+0x2a>
        return (OS_ERR_TIME_DLY_ISR);
 80051ea:	2355      	movs	r3, #85	@ 0x55
 80051ec:	e043      	b.n	8005276 <OSTimeDlyHMSM+0xb2>
    }
    if (OSLockNesting > 0u) {                    /* See if called with scheduler locked                */
 80051ee:	4b25      	ldr	r3, [pc, #148]	@ (8005284 <OSTimeDlyHMSM+0xc0>)
 80051f0:	781b      	ldrb	r3, [r3, #0]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d001      	beq.n	80051fa <OSTimeDlyHMSM+0x36>
        return (OS_ERR_SCHED_LOCKED);
 80051f6:	2332      	movs	r3, #50	@ 0x32
 80051f8:	e03d      	b.n	8005276 <OSTimeDlyHMSM+0xb2>
    }
#if OS_ARG_CHK_EN > 0u
    if (hours == 0u) {
 80051fa:	79fb      	ldrb	r3, [r7, #7]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d10a      	bne.n	8005216 <OSTimeDlyHMSM+0x52>
        if (minutes == 0u) {
 8005200:	79bb      	ldrb	r3, [r7, #6]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d107      	bne.n	8005216 <OSTimeDlyHMSM+0x52>
            if (seconds == 0u) {
 8005206:	797b      	ldrb	r3, [r7, #5]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d104      	bne.n	8005216 <OSTimeDlyHMSM+0x52>
                if (ms == 0u) {
 800520c:	887b      	ldrh	r3, [r7, #2]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d101      	bne.n	8005216 <OSTimeDlyHMSM+0x52>
                    return (OS_ERR_TIME_ZERO_DLY);
 8005212:	2354      	movs	r3, #84	@ 0x54
 8005214:	e02f      	b.n	8005276 <OSTimeDlyHMSM+0xb2>
                }
            }
        }
    }
    if (minutes > 59u) {
 8005216:	79bb      	ldrb	r3, [r7, #6]
 8005218:	2b3b      	cmp	r3, #59	@ 0x3b
 800521a:	d901      	bls.n	8005220 <OSTimeDlyHMSM+0x5c>
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
 800521c:	2351      	movs	r3, #81	@ 0x51
 800521e:	e02a      	b.n	8005276 <OSTimeDlyHMSM+0xb2>
    }
    if (seconds > 59u) {
 8005220:	797b      	ldrb	r3, [r7, #5]
 8005222:	2b3b      	cmp	r3, #59	@ 0x3b
 8005224:	d901      	bls.n	800522a <OSTimeDlyHMSM+0x66>
        return (OS_ERR_TIME_INVALID_SECONDS);
 8005226:	2352      	movs	r3, #82	@ 0x52
 8005228:	e025      	b.n	8005276 <OSTimeDlyHMSM+0xb2>
    }
    if (ms > 999u) {
 800522a:	887b      	ldrh	r3, [r7, #2]
 800522c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005230:	d301      	bcc.n	8005236 <OSTimeDlyHMSM+0x72>
        return (OS_ERR_TIME_INVALID_MS);
 8005232:	2353      	movs	r3, #83	@ 0x53
 8005234:	e01f      	b.n	8005276 <OSTimeDlyHMSM+0xb2>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600uL + (INT32U)minutes * 60uL + (INT32U)seconds) * OS_TICKS_PER_SEC
 8005236:	79fb      	ldrb	r3, [r7, #7]
 8005238:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 800523c:	fb02 f103 	mul.w	r1, r2, r3
 8005240:	79ba      	ldrb	r2, [r7, #6]
 8005242:	4613      	mov	r3, r2
 8005244:	011b      	lsls	r3, r3, #4
 8005246:	1a9b      	subs	r3, r3, r2
 8005248:	009b      	lsls	r3, r3, #2
 800524a:	18ca      	adds	r2, r1, r3
 800524c:	797b      	ldrb	r3, [r7, #5]
 800524e:	4413      	add	r3, r2
 8005250:	2264      	movs	r2, #100	@ 0x64
 8005252:	fb03 f202 	mul.w	r2, r3, r2
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500uL / OS_TICKS_PER_SEC) / 1000uL;
 8005256:	887b      	ldrh	r3, [r7, #2]
 8005258:	2164      	movs	r1, #100	@ 0x64
 800525a:	fb01 f303 	mul.w	r3, r1, r3
 800525e:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8005262:	4909      	ldr	r1, [pc, #36]	@ (8005288 <OSTimeDlyHMSM+0xc4>)
 8005264:	fba1 1303 	umull	r1, r3, r1, r3
 8005268:	099b      	lsrs	r3, r3, #6
    ticks = ((INT32U)hours * 3600uL + (INT32U)minutes * 60uL + (INT32U)seconds) * OS_TICKS_PER_SEC
 800526a:	4413      	add	r3, r2
 800526c:	60fb      	str	r3, [r7, #12]
    OSTimeDly(ticks);
 800526e:	68f8      	ldr	r0, [r7, #12]
 8005270:	f7ff ff54 	bl	800511c <OSTimeDly>
    return (OS_ERR_NONE);
 8005274:	2300      	movs	r3, #0
}
 8005276:	4618      	mov	r0, r3
 8005278:	3714      	adds	r7, #20
 800527a:	46bd      	mov	sp, r7
 800527c:	bd90      	pop	{r4, r7, pc}
 800527e:	bf00      	nop
 8005280:	2000181c 	.word	0x2000181c
 8005284:	2000181d 	.word	0x2000181d
 8005288:	10624dd3 	.word	0x10624dd3

0800528c <OSTmrSignal>:
*********************************************************************************************************
*/

#if OS_TMR_EN > 0u
INT8U  OSTmrSignal (void)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b082      	sub	sp, #8
 8005290:	af00      	add	r7, sp, #0
    INT8U  err;


    err = OSSemPost(OSTmrSemSignal);
 8005292:	4b06      	ldr	r3, [pc, #24]	@ (80052ac <OSTmrSignal+0x20>)
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	4618      	mov	r0, r3
 8005298:	f7ff fc1e 	bl	8004ad8 <OSSemPost>
 800529c:	4603      	mov	r3, r0
 800529e:	71fb      	strb	r3, [r7, #7]
    return (err);
 80052a0:	79fb      	ldrb	r3, [r7, #7]
}
 80052a2:	4618      	mov	r0, r3
 80052a4:	3708      	adds	r7, #8
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bd80      	pop	{r7, pc}
 80052aa:	bf00      	nop
 80052ac:	20002424 	.word	0x20002424

080052b0 <OSTmr_Init>:
*********************************************************************************************************
*/

#if OS_TMR_EN > 0u
void  OSTmr_Init (void)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b086      	sub	sp, #24
 80052b4:	af00      	add	r7, sp, #0
    INT16U   ix_next;
    OS_TMR  *ptmr1;
    OS_TMR  *ptmr2;


    OS_MemClr((INT8U *)&OSTmrTbl[0],      sizeof(OSTmrTbl));            /* Clear all the TMRs                         */
 80052b6:	f44f 7120 	mov.w	r1, #640	@ 0x280
 80052ba:	4838      	ldr	r0, [pc, #224]	@ (800539c <OSTmr_Init+0xec>)
 80052bc:	f7ff f80c 	bl	80042d8 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTmrWheelTbl[0], sizeof(OSTmrWheelTbl));       /* Clear the timer wheel                      */
 80052c0:	2138      	movs	r1, #56	@ 0x38
 80052c2:	4837      	ldr	r0, [pc, #220]	@ (80053a0 <OSTmr_Init+0xf0>)
 80052c4:	f7ff f808 	bl	80042d8 <OS_MemClr>

    for (ix = 0u; ix < (OS_TMR_CFG_MAX - 1u); ix++) {                   /* Init. list of free TMRs                    */
 80052c8:	2300      	movs	r3, #0
 80052ca:	82fb      	strh	r3, [r7, #22]
 80052cc:	e022      	b.n	8005314 <OSTmr_Init+0x64>
        ix_next = ix + 1u;
 80052ce:	8afb      	ldrh	r3, [r7, #22]
 80052d0:	3301      	adds	r3, #1
 80052d2:	81fb      	strh	r3, [r7, #14]
        ptmr1 = &OSTmrTbl[ix];
 80052d4:	8afa      	ldrh	r2, [r7, #22]
 80052d6:	4613      	mov	r3, r2
 80052d8:	009b      	lsls	r3, r3, #2
 80052da:	4413      	add	r3, r2
 80052dc:	00db      	lsls	r3, r3, #3
 80052de:	4a2f      	ldr	r2, [pc, #188]	@ (800539c <OSTmr_Init+0xec>)
 80052e0:	4413      	add	r3, r2
 80052e2:	613b      	str	r3, [r7, #16]
        ptmr2 = &OSTmrTbl[ix_next];
 80052e4:	89fa      	ldrh	r2, [r7, #14]
 80052e6:	4613      	mov	r3, r2
 80052e8:	009b      	lsls	r3, r3, #2
 80052ea:	4413      	add	r3, r2
 80052ec:	00db      	lsls	r3, r3, #3
 80052ee:	4a2b      	ldr	r2, [pc, #172]	@ (800539c <OSTmr_Init+0xec>)
 80052f0:	4413      	add	r3, r2
 80052f2:	60bb      	str	r3, [r7, #8]
        ptmr1->OSTmrType    = OS_TMR_TYPE;
 80052f4:	693b      	ldr	r3, [r7, #16]
 80052f6:	2264      	movs	r2, #100	@ 0x64
 80052f8:	701a      	strb	r2, [r3, #0]
        ptmr1->OSTmrState   = OS_TMR_STATE_UNUSED;                      /* Indicate that timer is inactive            */
 80052fa:	693b      	ldr	r3, [r7, #16]
 80052fc:	2200      	movs	r2, #0
 80052fe:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
        ptmr1->OSTmrNext    = (void *)ptmr2;                            /* Link to next timer                         */
 8005302:	693b      	ldr	r3, [r7, #16]
 8005304:	68ba      	ldr	r2, [r7, #8]
 8005306:	60da      	str	r2, [r3, #12]
#if OS_TMR_CFG_NAME_EN > 0u
        ptmr1->OSTmrName    = (INT8U *)(void *)"?";
 8005308:	693b      	ldr	r3, [r7, #16]
 800530a:	4a26      	ldr	r2, [pc, #152]	@ (80053a4 <OSTmr_Init+0xf4>)
 800530c:	621a      	str	r2, [r3, #32]
    for (ix = 0u; ix < (OS_TMR_CFG_MAX - 1u); ix++) {                   /* Init. list of free TMRs                    */
 800530e:	8afb      	ldrh	r3, [r7, #22]
 8005310:	3301      	adds	r3, #1
 8005312:	82fb      	strh	r3, [r7, #22]
 8005314:	8afb      	ldrh	r3, [r7, #22]
 8005316:	2b0e      	cmp	r3, #14
 8005318:	d9d9      	bls.n	80052ce <OSTmr_Init+0x1e>
#endif
    }
    ptmr1               = &OSTmrTbl[ix];
 800531a:	8afa      	ldrh	r2, [r7, #22]
 800531c:	4613      	mov	r3, r2
 800531e:	009b      	lsls	r3, r3, #2
 8005320:	4413      	add	r3, r2
 8005322:	00db      	lsls	r3, r3, #3
 8005324:	4a1d      	ldr	r2, [pc, #116]	@ (800539c <OSTmr_Init+0xec>)
 8005326:	4413      	add	r3, r2
 8005328:	613b      	str	r3, [r7, #16]
    ptmr1->OSTmrType    = OS_TMR_TYPE;
 800532a:	693b      	ldr	r3, [r7, #16]
 800532c:	2264      	movs	r2, #100	@ 0x64
 800532e:	701a      	strb	r2, [r3, #0]
    ptmr1->OSTmrState   = OS_TMR_STATE_UNUSED;                          /* Indicate that timer is inactive            */
 8005330:	693b      	ldr	r3, [r7, #16]
 8005332:	2200      	movs	r2, #0
 8005334:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    ptmr1->OSTmrNext    = (void *)0;                                    /* Last OS_TMR                                */
 8005338:	693b      	ldr	r3, [r7, #16]
 800533a:	2200      	movs	r2, #0
 800533c:	60da      	str	r2, [r3, #12]
#if OS_TMR_CFG_NAME_EN > 0u
    ptmr1->OSTmrName    = (INT8U *)(void *)"?";
 800533e:	693b      	ldr	r3, [r7, #16]
 8005340:	4a18      	ldr	r2, [pc, #96]	@ (80053a4 <OSTmr_Init+0xf4>)
 8005342:	621a      	str	r2, [r3, #32]
#endif
    OSTmrTime           = 0u;
 8005344:	4b18      	ldr	r3, [pc, #96]	@ (80053a8 <OSTmr_Init+0xf8>)
 8005346:	2200      	movs	r2, #0
 8005348:	601a      	str	r2, [r3, #0]
    OSTmrUsed           = 0u;
 800534a:	4b18      	ldr	r3, [pc, #96]	@ (80053ac <OSTmr_Init+0xfc>)
 800534c:	2200      	movs	r2, #0
 800534e:	801a      	strh	r2, [r3, #0]
    OSTmrFree           = OS_TMR_CFG_MAX;
 8005350:	4b17      	ldr	r3, [pc, #92]	@ (80053b0 <OSTmr_Init+0x100>)
 8005352:	2210      	movs	r2, #16
 8005354:	801a      	strh	r2, [r3, #0]
    OSTmrFreeList       = &OSTmrTbl[0];
 8005356:	4b17      	ldr	r3, [pc, #92]	@ (80053b4 <OSTmr_Init+0x104>)
 8005358:	4a10      	ldr	r2, [pc, #64]	@ (800539c <OSTmr_Init+0xec>)
 800535a:	601a      	str	r2, [r3, #0]
    OSTmrSem            = OSSemCreate(1u);
 800535c:	2001      	movs	r0, #1
 800535e:	f7ff fae3 	bl	8004928 <OSSemCreate>
 8005362:	4603      	mov	r3, r0
 8005364:	4a14      	ldr	r2, [pc, #80]	@ (80053b8 <OSTmr_Init+0x108>)
 8005366:	6013      	str	r3, [r2, #0]
    OSTmrSemSignal      = OSSemCreate(0u);
 8005368:	2000      	movs	r0, #0
 800536a:	f7ff fadd 	bl	8004928 <OSSemCreate>
 800536e:	4603      	mov	r3, r0
 8005370:	4a12      	ldr	r2, [pc, #72]	@ (80053bc <OSTmr_Init+0x10c>)
 8005372:	6013      	str	r3, [r2, #0]

#if OS_EVENT_NAME_EN > 0u                                               /* Assign names to semaphores                 */
    OSEventNameSet(OSTmrSem,       (INT8U *)(void *)"uC/OS-II TmrLock",   &err);
 8005374:	4b10      	ldr	r3, [pc, #64]	@ (80053b8 <OSTmr_Init+0x108>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	1dfa      	adds	r2, r7, #7
 800537a:	4911      	ldr	r1, [pc, #68]	@ (80053c0 <OSTmr_Init+0x110>)
 800537c:	4618      	mov	r0, r3
 800537e:	f7fe fafd 	bl	800397c <OSEventNameSet>
    OSEventNameSet(OSTmrSemSignal, (INT8U *)(void *)"uC/OS-II TmrSignal", &err);
 8005382:	4b0e      	ldr	r3, [pc, #56]	@ (80053bc <OSTmr_Init+0x10c>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	1dfa      	adds	r2, r7, #7
 8005388:	490e      	ldr	r1, [pc, #56]	@ (80053c4 <OSTmr_Init+0x114>)
 800538a:	4618      	mov	r0, r3
 800538c:	f7fe faf6 	bl	800397c <OSEventNameSet>
#endif

    OSTmr_InitTask();
 8005390:	f000 f81a 	bl	80053c8 <OSTmr_InitTask>
}
 8005394:	bf00      	nop
 8005396:	3718      	adds	r7, #24
 8005398:	46bd      	mov	sp, r7
 800539a:	bd80      	pop	{r7, pc}
 800539c:	20002428 	.word	0x20002428
 80053a0:	200028ac 	.word	0x200028ac
 80053a4:	08005714 	.word	0x08005714
 80053a8:	2000241c 	.word	0x2000241c
 80053ac:	2000241a 	.word	0x2000241a
 80053b0:	20002418 	.word	0x20002418
 80053b4:	200026a8 	.word	0x200026a8
 80053b8:	20002420 	.word	0x20002420
 80053bc:	20002424 	.word	0x20002424
 80053c0:	08005718 	.word	0x08005718
 80053c4:	0800572c 	.word	0x0800572c

080053c8 <OSTmr_InitTask>:
*********************************************************************************************************
*/

#if OS_TMR_EN > 0u
static  void  OSTmr_InitTask (void)
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b088      	sub	sp, #32
 80053cc:	af06      	add	r7, sp, #24
#endif


#if OS_TASK_CREATE_EXT_EN > 0u
    #if OS_STK_GROWTH == 1u
    (void)OSTaskCreateExt(OSTmr_Task,
 80053ce:	2303      	movs	r3, #3
 80053d0:	9304      	str	r3, [sp, #16]
 80053d2:	2300      	movs	r3, #0
 80053d4:	9303      	str	r3, [sp, #12]
 80053d6:	2380      	movs	r3, #128	@ 0x80
 80053d8:	9302      	str	r3, [sp, #8]
 80053da:	4b0a      	ldr	r3, [pc, #40]	@ (8005404 <OSTmr_InitTask+0x3c>)
 80053dc:	9301      	str	r3, [sp, #4]
 80053de:	f64f 73fd 	movw	r3, #65533	@ 0xfffd
 80053e2:	9300      	str	r3, [sp, #0]
 80053e4:	233d      	movs	r3, #61	@ 0x3d
 80053e6:	4a08      	ldr	r2, [pc, #32]	@ (8005408 <OSTmr_InitTask+0x40>)
 80053e8:	2100      	movs	r1, #0
 80053ea:	4808      	ldr	r0, [pc, #32]	@ (800540c <OSTmr_InitTask+0x44>)
 80053ec:	f7ff fbb4 	bl	8004b58 <OSTaskCreateExt>
                       OS_TASK_TMR_PRIO);
    #endif
#endif

#if OS_TASK_NAME_EN > 0u
    OSTaskNameSet(OS_TASK_TMR_PRIO, (INT8U *)(void *)"uC/OS-II Tmr", &err);
 80053f0:	1dfb      	adds	r3, r7, #7
 80053f2:	461a      	mov	r2, r3
 80053f4:	4906      	ldr	r1, [pc, #24]	@ (8005410 <OSTmr_InitTask+0x48>)
 80053f6:	203d      	movs	r0, #61	@ 0x3d
 80053f8:	f7ff fd12 	bl	8004e20 <OSTaskNameSet>
#endif
}
 80053fc:	bf00      	nop
 80053fe:	3708      	adds	r7, #8
 8005400:	46bd      	mov	sp, r7
 8005402:	bd80      	pop	{r7, pc}
 8005404:	200026ac 	.word	0x200026ac
 8005408:	200028a8 	.word	0x200028a8
 800540c:	08005595 	.word	0x08005595
 8005410:	08005740 	.word	0x08005740

08005414 <OSTmr_Link>:
*/

#if OS_TMR_EN > 0u
static  void  OSTmr_Link (OS_TMR  *ptmr,
                          INT8U    type)
{
 8005414:	b480      	push	{r7}
 8005416:	b087      	sub	sp, #28
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
 800541c:	460b      	mov	r3, r1
 800541e:	70fb      	strb	r3, [r7, #3]
    OS_TMR       *ptmr1;
    OS_TMR_WHEEL *pspoke;
    INT16U        spoke;


    ptmr->OSTmrState = OS_TMR_STATE_RUNNING;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2203      	movs	r2, #3
 8005424:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    if (type == OS_TMR_LINK_PERIODIC) {                            /* Determine when timer will expire                */
 8005428:	78fb      	ldrb	r3, [r7, #3]
 800542a:	2b01      	cmp	r3, #1
 800542c:	d107      	bne.n	800543e <OSTmr_Link+0x2a>
        ptmr->OSTmrMatch = ptmr->OSTmrPeriod + OSTmrTime;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	69da      	ldr	r2, [r3, #28]
 8005432:	4b2b      	ldr	r3, [pc, #172]	@ (80054e0 <OSTmr_Link+0xcc>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	441a      	add	r2, r3
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	615a      	str	r2, [r3, #20]
 800543c:	e012      	b.n	8005464 <OSTmr_Link+0x50>
    } else {
        if (ptmr->OSTmrDly == 0u) {
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	699b      	ldr	r3, [r3, #24]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d107      	bne.n	8005456 <OSTmr_Link+0x42>
            ptmr->OSTmrMatch = ptmr->OSTmrPeriod + OSTmrTime;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	69da      	ldr	r2, [r3, #28]
 800544a:	4b25      	ldr	r3, [pc, #148]	@ (80054e0 <OSTmr_Link+0xcc>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	441a      	add	r2, r3
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	615a      	str	r2, [r3, #20]
 8005454:	e006      	b.n	8005464 <OSTmr_Link+0x50>
        } else {
            ptmr->OSTmrMatch = ptmr->OSTmrDly    + OSTmrTime;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	699a      	ldr	r2, [r3, #24]
 800545a:	4b21      	ldr	r3, [pc, #132]	@ (80054e0 <OSTmr_Link+0xcc>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	441a      	add	r2, r3
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	615a      	str	r2, [r3, #20]
        }
    }
    spoke  = (INT16U)(ptmr->OSTmrMatch % OS_TMR_CFG_WHEEL_SIZE);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	695a      	ldr	r2, [r3, #20]
 8005468:	4b1e      	ldr	r3, [pc, #120]	@ (80054e4 <OSTmr_Link+0xd0>)
 800546a:	fba3 1302 	umull	r1, r3, r3, r2
 800546e:	1ad1      	subs	r1, r2, r3
 8005470:	0849      	lsrs	r1, r1, #1
 8005472:	440b      	add	r3, r1
 8005474:	0899      	lsrs	r1, r3, #2
 8005476:	460b      	mov	r3, r1
 8005478:	00db      	lsls	r3, r3, #3
 800547a:	1a5b      	subs	r3, r3, r1
 800547c:	1ad1      	subs	r1, r2, r3
 800547e:	460b      	mov	r3, r1
 8005480:	82fb      	strh	r3, [r7, #22]
    pspoke = &OSTmrWheelTbl[spoke];
 8005482:	8afb      	ldrh	r3, [r7, #22]
 8005484:	00db      	lsls	r3, r3, #3
 8005486:	4a18      	ldr	r2, [pc, #96]	@ (80054e8 <OSTmr_Link+0xd4>)
 8005488:	4413      	add	r3, r2
 800548a:	613b      	str	r3, [r7, #16]

    if (pspoke->OSTmrFirst == (OS_TMR *)0) {                       /* Link into timer wheel                           */
 800548c:	693b      	ldr	r3, [r7, #16]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d109      	bne.n	80054a8 <OSTmr_Link+0x94>
        pspoke->OSTmrFirst   = ptmr;
 8005494:	693b      	ldr	r3, [r7, #16]
 8005496:	687a      	ldr	r2, [r7, #4]
 8005498:	601a      	str	r2, [r3, #0]
        ptmr->OSTmrNext      = (OS_TMR *)0;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2200      	movs	r2, #0
 800549e:	60da      	str	r2, [r3, #12]
        pspoke->OSTmrEntries = 1u;
 80054a0:	693b      	ldr	r3, [r7, #16]
 80054a2:	2201      	movs	r2, #1
 80054a4:	809a      	strh	r2, [r3, #4]
 80054a6:	e011      	b.n	80054cc <OSTmr_Link+0xb8>
    } else {
        ptmr1                = pspoke->OSTmrFirst;                 /* Point to first timer in the spoke               */
 80054a8:	693b      	ldr	r3, [r7, #16]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	60fb      	str	r3, [r7, #12]
        pspoke->OSTmrFirst   = ptmr;
 80054ae:	693b      	ldr	r3, [r7, #16]
 80054b0:	687a      	ldr	r2, [r7, #4]
 80054b2:	601a      	str	r2, [r3, #0]
        ptmr->OSTmrNext      = (void *)ptmr1;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	68fa      	ldr	r2, [r7, #12]
 80054b8:	60da      	str	r2, [r3, #12]
        ptmr1->OSTmrPrev     = (void *)ptmr;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	687a      	ldr	r2, [r7, #4]
 80054be:	611a      	str	r2, [r3, #16]
        pspoke->OSTmrEntries++;
 80054c0:	693b      	ldr	r3, [r7, #16]
 80054c2:	889b      	ldrh	r3, [r3, #4]
 80054c4:	3301      	adds	r3, #1
 80054c6:	b29a      	uxth	r2, r3
 80054c8:	693b      	ldr	r3, [r7, #16]
 80054ca:	809a      	strh	r2, [r3, #4]
    }
    ptmr->OSTmrPrev = (void *)0;                                   /* Timer always inserted as first node in list     */
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2200      	movs	r2, #0
 80054d0:	611a      	str	r2, [r3, #16]
}
 80054d2:	bf00      	nop
 80054d4:	371c      	adds	r7, #28
 80054d6:	46bd      	mov	sp, r7
 80054d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054dc:	4770      	bx	lr
 80054de:	bf00      	nop
 80054e0:	2000241c 	.word	0x2000241c
 80054e4:	24924925 	.word	0x24924925
 80054e8:	200028ac 	.word	0x200028ac

080054ec <OSTmr_Unlink>:
*********************************************************************************************************
*/

#if OS_TMR_EN > 0u
static  void  OSTmr_Unlink (OS_TMR *ptmr)
{
 80054ec:	b480      	push	{r7}
 80054ee:	b087      	sub	sp, #28
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
    OS_TMR        *ptmr2;
    OS_TMR_WHEEL  *pspoke;
    INT16U         spoke;


    spoke  = (INT16U)(ptmr->OSTmrMatch % OS_TMR_CFG_WHEEL_SIZE);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	695a      	ldr	r2, [r3, #20]
 80054f8:	4b24      	ldr	r3, [pc, #144]	@ (800558c <OSTmr_Unlink+0xa0>)
 80054fa:	fba3 1302 	umull	r1, r3, r3, r2
 80054fe:	1ad1      	subs	r1, r2, r3
 8005500:	0849      	lsrs	r1, r1, #1
 8005502:	440b      	add	r3, r1
 8005504:	0899      	lsrs	r1, r3, #2
 8005506:	460b      	mov	r3, r1
 8005508:	00db      	lsls	r3, r3, #3
 800550a:	1a5b      	subs	r3, r3, r1
 800550c:	1ad1      	subs	r1, r2, r3
 800550e:	460b      	mov	r3, r1
 8005510:	82fb      	strh	r3, [r7, #22]
    pspoke = &OSTmrWheelTbl[spoke];
 8005512:	8afb      	ldrh	r3, [r7, #22]
 8005514:	00db      	lsls	r3, r3, #3
 8005516:	4a1e      	ldr	r2, [pc, #120]	@ (8005590 <OSTmr_Unlink+0xa4>)
 8005518:	4413      	add	r3, r2
 800551a:	613b      	str	r3, [r7, #16]

    if (pspoke->OSTmrFirst == ptmr) {                       /* See if timer to remove is at the beginning of list     */
 800551c:	693b      	ldr	r3, [r7, #16]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	687a      	ldr	r2, [r7, #4]
 8005522:	429a      	cmp	r2, r3
 8005524:	d10c      	bne.n	8005540 <OSTmr_Unlink+0x54>
        ptmr1              = (OS_TMR *)ptmr->OSTmrNext;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	68db      	ldr	r3, [r3, #12]
 800552a:	60fb      	str	r3, [r7, #12]
        pspoke->OSTmrFirst = (OS_TMR *)ptmr1;
 800552c:	693b      	ldr	r3, [r7, #16]
 800552e:	68fa      	ldr	r2, [r7, #12]
 8005530:	601a      	str	r2, [r3, #0]
        if (ptmr1 != (OS_TMR *)0) {
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d012      	beq.n	800555e <OSTmr_Unlink+0x72>
            ptmr1->OSTmrPrev = (void *)0;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	2200      	movs	r2, #0
 800553c:	611a      	str	r2, [r3, #16]
 800553e:	e00e      	b.n	800555e <OSTmr_Unlink+0x72>
        }
    } else {
        ptmr1            = (OS_TMR *)ptmr->OSTmrPrev;       /* Remove timer from somewhere in the list                */
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	691b      	ldr	r3, [r3, #16]
 8005544:	60fb      	str	r3, [r7, #12]
        ptmr2            = (OS_TMR *)ptmr->OSTmrNext;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	68db      	ldr	r3, [r3, #12]
 800554a:	60bb      	str	r3, [r7, #8]
        ptmr1->OSTmrNext = ptmr2;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	68ba      	ldr	r2, [r7, #8]
 8005550:	60da      	str	r2, [r3, #12]
        if (ptmr2 != (OS_TMR *)0) {
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d002      	beq.n	800555e <OSTmr_Unlink+0x72>
            ptmr2->OSTmrPrev = (void *)ptmr1;
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	68fa      	ldr	r2, [r7, #12]
 800555c:	611a      	str	r2, [r3, #16]
        }
    }
    ptmr->OSTmrState = OS_TMR_STATE_STOPPED;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2201      	movs	r2, #1
 8005562:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    ptmr->OSTmrNext  = (void *)0;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2200      	movs	r2, #0
 800556a:	60da      	str	r2, [r3, #12]
    ptmr->OSTmrPrev  = (void *)0;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2200      	movs	r2, #0
 8005570:	611a      	str	r2, [r3, #16]
    pspoke->OSTmrEntries--;
 8005572:	693b      	ldr	r3, [r7, #16]
 8005574:	889b      	ldrh	r3, [r3, #4]
 8005576:	3b01      	subs	r3, #1
 8005578:	b29a      	uxth	r2, r3
 800557a:	693b      	ldr	r3, [r7, #16]
 800557c:	809a      	strh	r2, [r3, #4]
}
 800557e:	bf00      	nop
 8005580:	371c      	adds	r7, #28
 8005582:	46bd      	mov	sp, r7
 8005584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005588:	4770      	bx	lr
 800558a:	bf00      	nop
 800558c:	24924925 	.word	0x24924925
 8005590:	200028ac 	.word	0x200028ac

08005594 <OSTmr_Task>:
*********************************************************************************************************
*/

#if OS_TMR_EN > 0u
static  void  OSTmr_Task (void *p_arg)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b088      	sub	sp, #32
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
    INT16U           spoke;


    p_arg = p_arg;                                               /* Prevent compiler warning for not using 'p_arg'    */
    for (;;) {
        OSSemPend(OSTmrSemSignal, 0u, &err);                     /* Wait for signal indicating time to update timers  */
 800559c:	4b2a      	ldr	r3, [pc, #168]	@ (8005648 <OSTmr_Task+0xb4>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f107 020b 	add.w	r2, r7, #11
 80055a4:	2100      	movs	r1, #0
 80055a6:	4618      	mov	r0, r3
 80055a8:	f7ff f9fc 	bl	80049a4 <OSSemPend>
        OSSchedLock();
 80055ac:	f7fe faaa 	bl	8003b04 <OSSchedLock>
        OSTmrTime++;                                             /* Increment the current time                        */
 80055b0:	4b26      	ldr	r3, [pc, #152]	@ (800564c <OSTmr_Task+0xb8>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	3301      	adds	r3, #1
 80055b6:	4a25      	ldr	r2, [pc, #148]	@ (800564c <OSTmr_Task+0xb8>)
 80055b8:	6013      	str	r3, [r2, #0]
        spoke  = (INT16U)(OSTmrTime % OS_TMR_CFG_WHEEL_SIZE);    /* Position on current timer wheel entry             */
 80055ba:	4b24      	ldr	r3, [pc, #144]	@ (800564c <OSTmr_Task+0xb8>)
 80055bc:	681a      	ldr	r2, [r3, #0]
 80055be:	4b24      	ldr	r3, [pc, #144]	@ (8005650 <OSTmr_Task+0xbc>)
 80055c0:	fba3 1302 	umull	r1, r3, r3, r2
 80055c4:	1ad1      	subs	r1, r2, r3
 80055c6:	0849      	lsrs	r1, r1, #1
 80055c8:	440b      	add	r3, r1
 80055ca:	0899      	lsrs	r1, r3, #2
 80055cc:	460b      	mov	r3, r1
 80055ce:	00db      	lsls	r3, r3, #3
 80055d0:	1a5b      	subs	r3, r3, r1
 80055d2:	1ad1      	subs	r1, r2, r3
 80055d4:	460b      	mov	r3, r1
 80055d6:	837b      	strh	r3, [r7, #26]
        pspoke = &OSTmrWheelTbl[spoke];
 80055d8:	8b7b      	ldrh	r3, [r7, #26]
 80055da:	00db      	lsls	r3, r3, #3
 80055dc:	4a1d      	ldr	r2, [pc, #116]	@ (8005654 <OSTmr_Task+0xc0>)
 80055de:	4413      	add	r3, r2
 80055e0:	617b      	str	r3, [r7, #20]
        ptmr   = pspoke->OSTmrFirst;
 80055e2:	697b      	ldr	r3, [r7, #20]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	61fb      	str	r3, [r7, #28]
        while (ptmr != (OS_TMR *)0) {
 80055e8:	e027      	b.n	800563a <OSTmr_Task+0xa6>
            ptmr_next = (OS_TMR *)ptmr->OSTmrNext;               /* Point to next timer to update because current ... */
 80055ea:	69fb      	ldr	r3, [r7, #28]
 80055ec:	68db      	ldr	r3, [r3, #12]
 80055ee:	613b      	str	r3, [r7, #16]
                                                                 /* ... timer could get unlinked from the wheel.      */
            if (OSTmrTime == ptmr->OSTmrMatch) {                 /* Process each timer that expires                   */
 80055f0:	69fb      	ldr	r3, [r7, #28]
 80055f2:	695a      	ldr	r2, [r3, #20]
 80055f4:	4b15      	ldr	r3, [pc, #84]	@ (800564c <OSTmr_Task+0xb8>)
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	429a      	cmp	r2, r3
 80055fa:	d11c      	bne.n	8005636 <OSTmr_Task+0xa2>
                OS_TRACE_TMR_EXPIRED(ptmr);
                OSTmr_Unlink(ptmr);                              /* Remove from current wheel spoke                   */
 80055fc:	69f8      	ldr	r0, [r7, #28]
 80055fe:	f7ff ff75 	bl	80054ec <OSTmr_Unlink>
                if (ptmr->OSTmrOpt == OS_TMR_OPT_PERIODIC) {
 8005602:	69fb      	ldr	r3, [r7, #28]
 8005604:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005608:	2b02      	cmp	r3, #2
 800560a:	d104      	bne.n	8005616 <OSTmr_Task+0x82>
                    OSTmr_Link(ptmr, OS_TMR_LINK_PERIODIC);      /* Recalculate new position of timer in wheel        */
 800560c:	2101      	movs	r1, #1
 800560e:	69f8      	ldr	r0, [r7, #28]
 8005610:	f7ff ff00 	bl	8005414 <OSTmr_Link>
 8005614:	e003      	b.n	800561e <OSTmr_Task+0x8a>
                } else {
                    ptmr->OSTmrState = OS_TMR_STATE_COMPLETED;   /* Indicate that the timer has completed             */
 8005616:	69fb      	ldr	r3, [r7, #28]
 8005618:	2202      	movs	r2, #2
 800561a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
                }
                pfnct = ptmr->OSTmrCallback;                     /* Execute callback function if available            */
 800561e:	69fb      	ldr	r3, [r7, #28]
 8005620:	685b      	ldr	r3, [r3, #4]
 8005622:	60fb      	str	r3, [r7, #12]
                if (pfnct != (OS_TMR_CALLBACK)0) {
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d005      	beq.n	8005636 <OSTmr_Task+0xa2>
                    (*pfnct)((void *)ptmr, ptmr->OSTmrCallbackArg);
 800562a:	69fb      	ldr	r3, [r7, #28]
 800562c:	689a      	ldr	r2, [r3, #8]
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	4611      	mov	r1, r2
 8005632:	69f8      	ldr	r0, [r7, #28]
 8005634:	4798      	blx	r3
                }
            }
            ptmr = ptmr_next;
 8005636:	693b      	ldr	r3, [r7, #16]
 8005638:	61fb      	str	r3, [r7, #28]
        while (ptmr != (OS_TMR *)0) {
 800563a:	69fb      	ldr	r3, [r7, #28]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d1d4      	bne.n	80055ea <OSTmr_Task+0x56>
        }
        OSSchedUnlock();
 8005640:	f7fe fa88 	bl	8003b54 <OSSchedUnlock>
        OSSemPend(OSTmrSemSignal, 0u, &err);                     /* Wait for signal indicating time to update timers  */
 8005644:	e7aa      	b.n	800559c <OSTmr_Task+0x8>
 8005646:	bf00      	nop
 8005648:	20002424 	.word	0x20002424
 800564c:	2000241c 	.word	0x2000241c
 8005650:	24924925 	.word	0x24924925
 8005654:	200028ac 	.word	0x200028ac

08005658 <memset>:
 8005658:	4402      	add	r2, r0
 800565a:	4603      	mov	r3, r0
 800565c:	4293      	cmp	r3, r2
 800565e:	d100      	bne.n	8005662 <memset+0xa>
 8005660:	4770      	bx	lr
 8005662:	f803 1b01 	strb.w	r1, [r3], #1
 8005666:	e7f9      	b.n	800565c <memset+0x4>

08005668 <__libc_init_array>:
 8005668:	b570      	push	{r4, r5, r6, lr}
 800566a:	4d0d      	ldr	r5, [pc, #52]	@ (80056a0 <__libc_init_array+0x38>)
 800566c:	4c0d      	ldr	r4, [pc, #52]	@ (80056a4 <__libc_init_array+0x3c>)
 800566e:	1b64      	subs	r4, r4, r5
 8005670:	10a4      	asrs	r4, r4, #2
 8005672:	2600      	movs	r6, #0
 8005674:	42a6      	cmp	r6, r4
 8005676:	d109      	bne.n	800568c <__libc_init_array+0x24>
 8005678:	4d0b      	ldr	r5, [pc, #44]	@ (80056a8 <__libc_init_array+0x40>)
 800567a:	4c0c      	ldr	r4, [pc, #48]	@ (80056ac <__libc_init_array+0x44>)
 800567c:	f000 f818 	bl	80056b0 <_init>
 8005680:	1b64      	subs	r4, r4, r5
 8005682:	10a4      	asrs	r4, r4, #2
 8005684:	2600      	movs	r6, #0
 8005686:	42a6      	cmp	r6, r4
 8005688:	d105      	bne.n	8005696 <__libc_init_array+0x2e>
 800568a:	bd70      	pop	{r4, r5, r6, pc}
 800568c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005690:	4798      	blx	r3
 8005692:	3601      	adds	r6, #1
 8005694:	e7ee      	b.n	8005674 <__libc_init_array+0xc>
 8005696:	f855 3b04 	ldr.w	r3, [r5], #4
 800569a:	4798      	blx	r3
 800569c:	3601      	adds	r6, #1
 800569e:	e7f2      	b.n	8005686 <__libc_init_array+0x1e>
 80056a0:	08005914 	.word	0x08005914
 80056a4:	08005914 	.word	0x08005914
 80056a8:	08005914 	.word	0x08005914
 80056ac:	08005918 	.word	0x08005918

080056b0 <_init>:
 80056b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056b2:	bf00      	nop
 80056b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056b6:	bc08      	pop	{r3}
 80056b8:	469e      	mov	lr, r3
 80056ba:	4770      	bx	lr

080056bc <_fini>:
 80056bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056be:	bf00      	nop
 80056c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056c2:	bc08      	pop	{r3}
 80056c4:	469e      	mov	lr, r3
 80056c6:	4770      	bx	lr
