
uCOS-II_EventFlag.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b24  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000022c  08005cac  08005cac  00006cac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ed8  08005ed8  0000700c  2**0
                  CONTENTS
  4 .ARM          00000008  08005ed8  08005ed8  00006ed8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005ee0  08005ee0  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ee0  08005ee0  00006ee0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005ee4  08005ee4  00006ee4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08005ee8  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000020dc  2000000c  08005ef4  0000700c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200020e8  08005ef4  000070e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000108c5  00000000  00000000  0000703c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e2b  00000000  00000000  00017901  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e08  00000000  00000000  0001a730  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a9d  00000000  00000000  0001b538  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028577  00000000  00000000  0001bfd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013b2b  00000000  00000000  0004454c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eb436  00000000  00000000  00058077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001434ad  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003648  00000000  00000000  001434f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000009a  00000000  00000000  00146b38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005c94 	.word	0x08005c94

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08005c94 	.word	0x08005c94

080001c8 <OS_CPU_FP_Reg_Push>:

#if (defined(__VFP_FP__) && !defined(__SOFTFP__))

.thumb_func
OS_CPU_FP_Reg_Push:
    MRS     R1, PSP                                             @ PSP is process stack pointer
 80001c8:	f3ef 8109 	mrs	r1, PSP
    CBZ     R1, OS_CPU_FP_nosave                                @ Skip FP register save the first time
 80001cc:	b121      	cbz	r1, 80001d8 <OS_CPU_FP_nosave>

    VSTMDB  R0!, {S16-S31}
 80001ce:	ed20 8a10 	vstmdb	r0!, {s16-s31}
    LDR     R1, =OSTCBCur
 80001d2:	4951      	ldr	r1, [pc, #324]	@ (8000318 <OS_CPU_PendSVHandler+0x7a>)
    LDR     R2, [R1]
 80001d4:	680a      	ldr	r2, [r1, #0]
    STR     R0, [R2]
 80001d6:	6010      	str	r0, [r2, #0]

080001d8 <OS_CPU_FP_nosave>:
OS_CPU_FP_nosave:
    BX      LR
 80001d8:	4770      	bx	lr

080001da <OS_CPU_FP_Reg_Pop>:

#if (defined(__VFP_FP__) && !defined(__SOFTFP__))

.thumb_func
OS_CPU_FP_Reg_Pop:
    VLDMIA  R0!, {S16-S31}
 80001da:	ecb0 8a10 	vldmia	r0!, {s16-s31}
    LDR     R1, =OSTCBHighRdy
 80001de:	494f      	ldr	r1, [pc, #316]	@ (800031c <OS_CPU_PendSVHandler+0x7e>)
    LDR     R2, [R1]
 80001e0:	680a      	ldr	r2, [r1, #0]
    STR     R0, [R2]
 80001e2:	6010      	str	r0, [r2, #0]
    BX      LR
 80001e4:	4770      	bx	lr

080001e6 <OS_CPU_SR_Save>:
@                      CPSIE i
@********************************************************************************************************

.thumb_func
OS_CPU_SR_Save:
    CPSID   I                                   @ Cortex-M7 errata notice. See Note #2
 80001e6:	b672      	cpsid	i
    PUSH   {R1}
 80001e8:	b402      	push	{r1}
    MRS     R1, BASEPRI
 80001ea:	f3ef 8111 	mrs	r1, BASEPRI
    MSR     BASEPRI, R0
 80001ee:	f380 8811 	msr	BASEPRI, r0
    DSB
 80001f2:	f3bf 8f4f 	dsb	sy
    ISB
 80001f6:	f3bf 8f6f 	isb	sy
    MOV     R0, R1
 80001fa:	4608      	mov	r0, r1
    POP    {R1}
 80001fc:	bc02      	pop	{r1}
    CPSIE   I
 80001fe:	b662      	cpsie	i
    BX      LR
 8000200:	4770      	bx	lr

08000202 <OS_CPU_SR_Restore>:

.thumb_func
OS_CPU_SR_Restore:
    CPSID   I                                   @ Cortex-M7 errata notice. See Note #2
 8000202:	b672      	cpsid	i
    MSR     BASEPRI, R0
 8000204:	f380 8811 	msr	BASEPRI, r0
    DSB
 8000208:	f3bf 8f4f 	dsb	sy
    ISB
 800020c:	f3bf 8f6f 	isb	sy
    CPSIE   I
 8000210:	b662      	cpsie	i
    BX      LR
 8000212:	4770      	bx	lr

08000214 <OSStartHighRdy>:
@              i) Enable interrupts (tasks will run with interrupts enabled).
@********************************************************************************************************

.thumb_func
OSStartHighRdy:
    CPSID   I                                                   @ Prevent interruption during context switch
 8000214:	b672      	cpsid	i
    MOVW    R0, #:lower16:NVIC_SYSPRI14                         @ Set the PendSV exception priority
 8000216:	f64e 5022 	movw	r0, #60706	@ 0xed22
    MOVT    R0, #:upper16:NVIC_SYSPRI14
 800021a:	f2ce 0000 	movt	r0, #57344	@ 0xe000

    MOVW    R1, #:lower16:NVIC_PENDSV_PRI
 800021e:	f240 01ff 	movw	r1, #255	@ 0xff
    MOVT    R1, #:upper16:NVIC_PENDSV_PRI
 8000222:	f2c0 0100 	movt	r1, #0
    STRB    R1, [R0]
 8000226:	7001      	strb	r1, [r0, #0]

    MOVS    R0, #0                                              @ Set the PSP to 0 for initial context switch call
 8000228:	2000      	movs	r0, #0
    MSR     PSP, R0
 800022a:	f380 8809 	msr	PSP, r0

    MOVW    R0, #:lower16:OS_CPU_ExceptStkBase                  @ Initialize the MSP to the OS_CPU_ExceptStkBase
 800022e:	f640 40b8 	movw	r0, #3256	@ 0xcb8
    MOVT    R0, #:upper16:OS_CPU_ExceptStkBase
 8000232:	f2c2 0000 	movt	r0, #8192	@ 0x2000
    LDR     R1, [R0]
 8000236:	6801      	ldr	r1, [r0, #0]
    MSR     MSP, R1
 8000238:	f381 8808 	msr	MSP, r1

    BL      OSTaskSwHook                                        @ Call OSTaskSwHook() for FPU Push & Pop
 800023c:	f003 fa32 	bl	80036a4 <OSTaskSwHook>

    LDR     R0, =OSRunning                                      @ OSRunning = TRUE
 8000240:	4837      	ldr	r0, [pc, #220]	@ (8000320 <OS_CPU_PendSVHandler+0x82>)
    MOVS    R1, #1
 8000242:	2101      	movs	r1, #1
    STRB    R1, [R0]
 8000244:	7001      	strb	r1, [r0, #0]

    MOVW    R0, #:lower16:OSPrioCur                             @ OSPrioCur   = OSPrioHighRdy;
 8000246:	f241 0022 	movw	r0, #4130	@ 0x1022
    MOVT    R0, #:upper16:OSPrioCur
 800024a:	f2c2 0000 	movt	r0, #8192	@ 0x2000
    MOVW    R1, #:lower16:OSPrioHighRdy
 800024e:	f241 0123 	movw	r1, #4131	@ 0x1023
    MOVT    R1, #:upper16:OSPrioHighRdy
 8000252:	f2c2 0100 	movt	r1, #8192	@ 0x2000
    LDRB    R2, [R1]
 8000256:	780a      	ldrb	r2, [r1, #0]
    STRB    R2, [R0]
 8000258:	7002      	strb	r2, [r0, #0]

    MOVW    R0, #:lower16:OSTCBCur                              @ OSTCBCur  = OSTCBHighRdy;
 800025a:	f241 2038 	movw	r0, #4664	@ 0x1238
    MOVT    R0, #:upper16:OSTCBCur
 800025e:	f2c2 0000 	movt	r0, #8192	@ 0x2000
    MOVW    R1, #:lower16:OSTCBHighRdy
 8000262:	f241 2140 	movw	r1, #4672	@ 0x1240
    MOVT    R1, #:upper16:OSTCBHighRdy
 8000266:	f2c2 0100 	movt	r1, #8192	@ 0x2000
    LDR     R2, [R1]
 800026a:	680a      	ldr	r2, [r1, #0]
    STR     R2, [R0]
 800026c:	6002      	str	r2, [r0, #0]

    LDR     R0, [R2]                                            @ R0 is new process SP; SP = OSTCBHighRdy->OSTCBStkPtr;
 800026e:	6810      	ldr	r0, [r2, #0]
    MSR     PSP, R0                                             @ Load PSP with new process SP
 8000270:	f380 8809 	msr	PSP, r0

    MRS     R0, CONTROL
 8000274:	f3ef 8014 	mrs	r0, CONTROL
    ORR     R0, R0, #2
 8000278:	f040 0002 	orr.w	r0, r0, #2
    MSR     CONTROL, R0
 800027c:	f380 8814 	msr	CONTROL, r0
    ISB                                                         @ Sync instruction stream
 8000280:	f3bf 8f6f 	isb	sy

    LDMFD    SP!, {R4-R11, LR}                                  @ Restore r4-11, lr from new process stack
 8000284:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    LDMFD    SP!, {R0-R3}                                       @ Restore r0, r3
 8000288:	bc0f      	pop	{r0, r1, r2, r3}
    LDMFD    SP!, {R12, LR}                                     @ Load R12 and LR
 800028a:	e8bd 5000 	ldmia.w	sp!, {ip, lr}
    LDMFD    SP!, {R1, R2}                                      @ Load PC and discard xPSR
 800028e:	bc06      	pop	{r1, r2}
    CPSIE    I
 8000290:	b662      	cpsie	i
    BX       R1
 8000292:	4708      	bx	r1

08000294 <OSCtxSw>:
@********************************************************************************************************

.thumb_func
OSCtxSw:
OSIntCtxSw:
    LDR     R0, =NVIC_INT_CTRL                                  @ Trigger the PendSV exception (causes context switch)
 8000294:	4823      	ldr	r0, [pc, #140]	@ (8000324 <OS_CPU_PendSVHandler+0x86>)
    LDR     R1, =NVIC_PENDSVSET
 8000296:	f04f 5180 	mov.w	r1, #268435456	@ 0x10000000
    STR     R1, [R0]
 800029a:	6001      	str	r1, [r0, #0]
    BX      LR
 800029c:	4770      	bx	lr

0800029e <OS_CPU_PendSVHandler>:
@                  CPSIE i
@********************************************************************************************************

.thumb_func
OS_CPU_PendSVHandler:
    CPSID   I                                                   @ Cortex-M7 errata notice. See Note #5
 800029e:	b672      	cpsid	i
    MOVW    R2, #:lower16:OS_KA_BASEPRI_Boundary                @ Set BASEPRI priority level required for exception preemption
 80002a0:	f640 42c0 	movw	r2, #3264	@ 0xcc0
    MOVT    R2, #:upper16:OS_KA_BASEPRI_Boundary
 80002a4:	f2c2 0200 	movt	r2, #8192	@ 0x2000
    LDR     R1, [R2]
 80002a8:	6811      	ldr	r1, [r2, #0]
    MSR     BASEPRI, R1
 80002aa:	f381 8811 	msr	BASEPRI, r1
    DSB
 80002ae:	f3bf 8f4f 	dsb	sy
    ISB
 80002b2:	f3bf 8f6f 	isb	sy
    CPSIE   I
 80002b6:	b662      	cpsie	i

    MRS     R0, PSP                                             @ PSP is process stack pointer
 80002b8:	f3ef 8009 	mrs	r0, PSP
    STMFD   R0!, {R4-R11, R14}                                  @ Save remaining regs r4-11, R14 on process stack
 80002bc:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    MOVW    R5, #:lower16:OSTCBCur                              @ OSTCBCur->OSTCBStkPtr = SP;
 80002c0:	f241 2538 	movw	r5, #4664	@ 0x1238
    MOVT    R5, #:upper16:OSTCBCur
 80002c4:	f2c2 0500 	movt	r5, #8192	@ 0x2000
    LDR     R1, [R5]
 80002c8:	6829      	ldr	r1, [r5, #0]
    STR     R0, [R1]                                            @ R0 is SP of process being switched out
 80002ca:	6008      	str	r0, [r1, #0]

                                                                @ At this point, entire context of process has been saved
    MOV     R4, LR                                              @ Save LR exc_return value
 80002cc:	4674      	mov	r4, lr
    BL      OSTaskSwHook                                        @ Call OSTaskSwHook() for FPU Push & Pop
 80002ce:	f003 f9e9 	bl	80036a4 <OSTaskSwHook>

    MOVW    R0, #:lower16:OSPrioCur                             @ OSPrioCur   = OSPrioHighRdy;
 80002d2:	f241 0022 	movw	r0, #4130	@ 0x1022
    MOVT    R0, #:upper16:OSPrioCur
 80002d6:	f2c2 0000 	movt	r0, #8192	@ 0x2000
    MOVW    R1, #:lower16:OSPrioHighRdy
 80002da:	f241 0123 	movw	r1, #4131	@ 0x1023
    MOVT    R1, #:upper16:OSPrioHighRdy
 80002de:	f2c2 0100 	movt	r1, #8192	@ 0x2000
    LDRB    R2, [R1]
 80002e2:	780a      	ldrb	r2, [r1, #0]
    STRB    R2, [R0]
 80002e4:	7002      	strb	r2, [r0, #0]

    MOVW    R1, #:lower16:OSTCBHighRdy                          @ OSTCBCur  = OSTCBHighRdy;
 80002e6:	f241 2140 	movw	r1, #4672	@ 0x1240
    MOVT    R1, #:upper16:OSTCBHighRdy
 80002ea:	f2c2 0100 	movt	r1, #8192	@ 0x2000
    LDR     R2, [R1]
 80002ee:	680a      	ldr	r2, [r1, #0]
    STR     R2, [R5]
 80002f0:	602a      	str	r2, [r5, #0]

    ORR     LR,  R4, #0x04                                      @ Ensure exception return uses process stack
 80002f2:	f044 0e04 	orr.w	lr, r4, #4
    LDR     R0,  [R2]                                           @ R0 is new process SP; SP = OSTCBHighRdy->OSTCBStkPtr;
 80002f6:	6810      	ldr	r0, [r2, #0]
    LDMFD   R0!, {R4-R11, R14}                                  @ Restore r4-11, R14 from new process stack
 80002f8:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    MSR     PSP, R0                                             @ Load PSP with new process SP
 80002fc:	f380 8809 	msr	PSP, r0

    MOV     R2, #0                                              @ Restore BASEPRI priority level to 0
 8000300:	f04f 0200 	mov.w	r2, #0
    CPSID   I
 8000304:	b672      	cpsid	i
    MSR     BASEPRI, R2
 8000306:	f382 8811 	msr	BASEPRI, r2
    DSB
 800030a:	f3bf 8f4f 	dsb	sy
    ISB
 800030e:	f3bf 8f6f 	isb	sy
    CPSIE   I
 8000312:	b662      	cpsie	i
    BX      LR                                                  @ Exception return will restore remaining context
 8000314:	4770      	bx	lr
 8000316:	0000      	.short	0x0000
    LDR     R1, =OSTCBCur
 8000318:	20001238 	.word	0x20001238
    LDR     R1, =OSTCBHighRdy
 800031c:	20001240 	.word	0x20001240
    LDR     R0, =OSRunning                                      @ OSRunning = TRUE
 8000320:	20001030 	.word	0x20001030
    LDR     R0, =NVIC_INT_CTRL                                  @ Trigger the PendSV exception (causes context switch)
 8000324:	e000ed04 	.word	0xe000ed04

08000328 <__aeabi_uldivmod>:
 8000328:	b953      	cbnz	r3, 8000340 <__aeabi_uldivmod+0x18>
 800032a:	b94a      	cbnz	r2, 8000340 <__aeabi_uldivmod+0x18>
 800032c:	2900      	cmp	r1, #0
 800032e:	bf08      	it	eq
 8000330:	2800      	cmpeq	r0, #0
 8000332:	bf1c      	itt	ne
 8000334:	f04f 31ff 	movne.w	r1, #4294967295
 8000338:	f04f 30ff 	movne.w	r0, #4294967295
 800033c:	f000 b96a 	b.w	8000614 <__aeabi_idiv0>
 8000340:	f1ad 0c08 	sub.w	ip, sp, #8
 8000344:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000348:	f000 f806 	bl	8000358 <__udivmoddi4>
 800034c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000350:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000354:	b004      	add	sp, #16
 8000356:	4770      	bx	lr

08000358 <__udivmoddi4>:
 8000358:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800035c:	9d08      	ldr	r5, [sp, #32]
 800035e:	460c      	mov	r4, r1
 8000360:	2b00      	cmp	r3, #0
 8000362:	d14e      	bne.n	8000402 <__udivmoddi4+0xaa>
 8000364:	4694      	mov	ip, r2
 8000366:	458c      	cmp	ip, r1
 8000368:	4686      	mov	lr, r0
 800036a:	fab2 f282 	clz	r2, r2
 800036e:	d962      	bls.n	8000436 <__udivmoddi4+0xde>
 8000370:	b14a      	cbz	r2, 8000386 <__udivmoddi4+0x2e>
 8000372:	f1c2 0320 	rsb	r3, r2, #32
 8000376:	4091      	lsls	r1, r2
 8000378:	fa20 f303 	lsr.w	r3, r0, r3
 800037c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000380:	4319      	orrs	r1, r3
 8000382:	fa00 fe02 	lsl.w	lr, r0, r2
 8000386:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800038a:	fa1f f68c 	uxth.w	r6, ip
 800038e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000392:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000396:	fb07 1114 	mls	r1, r7, r4, r1
 800039a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800039e:	fb04 f106 	mul.w	r1, r4, r6
 80003a2:	4299      	cmp	r1, r3
 80003a4:	d90a      	bls.n	80003bc <__udivmoddi4+0x64>
 80003a6:	eb1c 0303 	adds.w	r3, ip, r3
 80003aa:	f104 30ff 	add.w	r0, r4, #4294967295
 80003ae:	f080 8112 	bcs.w	80005d6 <__udivmoddi4+0x27e>
 80003b2:	4299      	cmp	r1, r3
 80003b4:	f240 810f 	bls.w	80005d6 <__udivmoddi4+0x27e>
 80003b8:	3c02      	subs	r4, #2
 80003ba:	4463      	add	r3, ip
 80003bc:	1a59      	subs	r1, r3, r1
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb1 f0f7 	udiv	r0, r1, r7
 80003c6:	fb07 1110 	mls	r1, r7, r0, r1
 80003ca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ce:	fb00 f606 	mul.w	r6, r0, r6
 80003d2:	429e      	cmp	r6, r3
 80003d4:	d90a      	bls.n	80003ec <__udivmoddi4+0x94>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 31ff 	add.w	r1, r0, #4294967295
 80003de:	f080 80fc 	bcs.w	80005da <__udivmoddi4+0x282>
 80003e2:	429e      	cmp	r6, r3
 80003e4:	f240 80f9 	bls.w	80005da <__udivmoddi4+0x282>
 80003e8:	4463      	add	r3, ip
 80003ea:	3802      	subs	r0, #2
 80003ec:	1b9b      	subs	r3, r3, r6
 80003ee:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003f2:	2100      	movs	r1, #0
 80003f4:	b11d      	cbz	r5, 80003fe <__udivmoddi4+0xa6>
 80003f6:	40d3      	lsrs	r3, r2
 80003f8:	2200      	movs	r2, #0
 80003fa:	e9c5 3200 	strd	r3, r2, [r5]
 80003fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000402:	428b      	cmp	r3, r1
 8000404:	d905      	bls.n	8000412 <__udivmoddi4+0xba>
 8000406:	b10d      	cbz	r5, 800040c <__udivmoddi4+0xb4>
 8000408:	e9c5 0100 	strd	r0, r1, [r5]
 800040c:	2100      	movs	r1, #0
 800040e:	4608      	mov	r0, r1
 8000410:	e7f5      	b.n	80003fe <__udivmoddi4+0xa6>
 8000412:	fab3 f183 	clz	r1, r3
 8000416:	2900      	cmp	r1, #0
 8000418:	d146      	bne.n	80004a8 <__udivmoddi4+0x150>
 800041a:	42a3      	cmp	r3, r4
 800041c:	d302      	bcc.n	8000424 <__udivmoddi4+0xcc>
 800041e:	4290      	cmp	r0, r2
 8000420:	f0c0 80f0 	bcc.w	8000604 <__udivmoddi4+0x2ac>
 8000424:	1a86      	subs	r6, r0, r2
 8000426:	eb64 0303 	sbc.w	r3, r4, r3
 800042a:	2001      	movs	r0, #1
 800042c:	2d00      	cmp	r5, #0
 800042e:	d0e6      	beq.n	80003fe <__udivmoddi4+0xa6>
 8000430:	e9c5 6300 	strd	r6, r3, [r5]
 8000434:	e7e3      	b.n	80003fe <__udivmoddi4+0xa6>
 8000436:	2a00      	cmp	r2, #0
 8000438:	f040 8090 	bne.w	800055c <__udivmoddi4+0x204>
 800043c:	eba1 040c 	sub.w	r4, r1, ip
 8000440:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000444:	fa1f f78c 	uxth.w	r7, ip
 8000448:	2101      	movs	r1, #1
 800044a:	fbb4 f6f8 	udiv	r6, r4, r8
 800044e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000452:	fb08 4416 	mls	r4, r8, r6, r4
 8000456:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800045a:	fb07 f006 	mul.w	r0, r7, r6
 800045e:	4298      	cmp	r0, r3
 8000460:	d908      	bls.n	8000474 <__udivmoddi4+0x11c>
 8000462:	eb1c 0303 	adds.w	r3, ip, r3
 8000466:	f106 34ff 	add.w	r4, r6, #4294967295
 800046a:	d202      	bcs.n	8000472 <__udivmoddi4+0x11a>
 800046c:	4298      	cmp	r0, r3
 800046e:	f200 80cd 	bhi.w	800060c <__udivmoddi4+0x2b4>
 8000472:	4626      	mov	r6, r4
 8000474:	1a1c      	subs	r4, r3, r0
 8000476:	fa1f f38e 	uxth.w	r3, lr
 800047a:	fbb4 f0f8 	udiv	r0, r4, r8
 800047e:	fb08 4410 	mls	r4, r8, r0, r4
 8000482:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000486:	fb00 f707 	mul.w	r7, r0, r7
 800048a:	429f      	cmp	r7, r3
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x148>
 800048e:	eb1c 0303 	adds.w	r3, ip, r3
 8000492:	f100 34ff 	add.w	r4, r0, #4294967295
 8000496:	d202      	bcs.n	800049e <__udivmoddi4+0x146>
 8000498:	429f      	cmp	r7, r3
 800049a:	f200 80b0 	bhi.w	80005fe <__udivmoddi4+0x2a6>
 800049e:	4620      	mov	r0, r4
 80004a0:	1bdb      	subs	r3, r3, r7
 80004a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80004a6:	e7a5      	b.n	80003f4 <__udivmoddi4+0x9c>
 80004a8:	f1c1 0620 	rsb	r6, r1, #32
 80004ac:	408b      	lsls	r3, r1
 80004ae:	fa22 f706 	lsr.w	r7, r2, r6
 80004b2:	431f      	orrs	r7, r3
 80004b4:	fa20 fc06 	lsr.w	ip, r0, r6
 80004b8:	fa04 f301 	lsl.w	r3, r4, r1
 80004bc:	ea43 030c 	orr.w	r3, r3, ip
 80004c0:	40f4      	lsrs	r4, r6
 80004c2:	fa00 f801 	lsl.w	r8, r0, r1
 80004c6:	0c38      	lsrs	r0, r7, #16
 80004c8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80004cc:	fbb4 fef0 	udiv	lr, r4, r0
 80004d0:	fa1f fc87 	uxth.w	ip, r7
 80004d4:	fb00 441e 	mls	r4, r0, lr, r4
 80004d8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004dc:	fb0e f90c 	mul.w	r9, lr, ip
 80004e0:	45a1      	cmp	r9, r4
 80004e2:	fa02 f201 	lsl.w	r2, r2, r1
 80004e6:	d90a      	bls.n	80004fe <__udivmoddi4+0x1a6>
 80004e8:	193c      	adds	r4, r7, r4
 80004ea:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004ee:	f080 8084 	bcs.w	80005fa <__udivmoddi4+0x2a2>
 80004f2:	45a1      	cmp	r9, r4
 80004f4:	f240 8081 	bls.w	80005fa <__udivmoddi4+0x2a2>
 80004f8:	f1ae 0e02 	sub.w	lr, lr, #2
 80004fc:	443c      	add	r4, r7
 80004fe:	eba4 0409 	sub.w	r4, r4, r9
 8000502:	fa1f f983 	uxth.w	r9, r3
 8000506:	fbb4 f3f0 	udiv	r3, r4, r0
 800050a:	fb00 4413 	mls	r4, r0, r3, r4
 800050e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000512:	fb03 fc0c 	mul.w	ip, r3, ip
 8000516:	45a4      	cmp	ip, r4
 8000518:	d907      	bls.n	800052a <__udivmoddi4+0x1d2>
 800051a:	193c      	adds	r4, r7, r4
 800051c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000520:	d267      	bcs.n	80005f2 <__udivmoddi4+0x29a>
 8000522:	45a4      	cmp	ip, r4
 8000524:	d965      	bls.n	80005f2 <__udivmoddi4+0x29a>
 8000526:	3b02      	subs	r3, #2
 8000528:	443c      	add	r4, r7
 800052a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800052e:	fba0 9302 	umull	r9, r3, r0, r2
 8000532:	eba4 040c 	sub.w	r4, r4, ip
 8000536:	429c      	cmp	r4, r3
 8000538:	46ce      	mov	lr, r9
 800053a:	469c      	mov	ip, r3
 800053c:	d351      	bcc.n	80005e2 <__udivmoddi4+0x28a>
 800053e:	d04e      	beq.n	80005de <__udivmoddi4+0x286>
 8000540:	b155      	cbz	r5, 8000558 <__udivmoddi4+0x200>
 8000542:	ebb8 030e 	subs.w	r3, r8, lr
 8000546:	eb64 040c 	sbc.w	r4, r4, ip
 800054a:	fa04 f606 	lsl.w	r6, r4, r6
 800054e:	40cb      	lsrs	r3, r1
 8000550:	431e      	orrs	r6, r3
 8000552:	40cc      	lsrs	r4, r1
 8000554:	e9c5 6400 	strd	r6, r4, [r5]
 8000558:	2100      	movs	r1, #0
 800055a:	e750      	b.n	80003fe <__udivmoddi4+0xa6>
 800055c:	f1c2 0320 	rsb	r3, r2, #32
 8000560:	fa20 f103 	lsr.w	r1, r0, r3
 8000564:	fa0c fc02 	lsl.w	ip, ip, r2
 8000568:	fa24 f303 	lsr.w	r3, r4, r3
 800056c:	4094      	lsls	r4, r2
 800056e:	430c      	orrs	r4, r1
 8000570:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000574:	fa00 fe02 	lsl.w	lr, r0, r2
 8000578:	fa1f f78c 	uxth.w	r7, ip
 800057c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000580:	fb08 3110 	mls	r1, r8, r0, r3
 8000584:	0c23      	lsrs	r3, r4, #16
 8000586:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800058a:	fb00 f107 	mul.w	r1, r0, r7
 800058e:	4299      	cmp	r1, r3
 8000590:	d908      	bls.n	80005a4 <__udivmoddi4+0x24c>
 8000592:	eb1c 0303 	adds.w	r3, ip, r3
 8000596:	f100 36ff 	add.w	r6, r0, #4294967295
 800059a:	d22c      	bcs.n	80005f6 <__udivmoddi4+0x29e>
 800059c:	4299      	cmp	r1, r3
 800059e:	d92a      	bls.n	80005f6 <__udivmoddi4+0x29e>
 80005a0:	3802      	subs	r0, #2
 80005a2:	4463      	add	r3, ip
 80005a4:	1a5b      	subs	r3, r3, r1
 80005a6:	b2a4      	uxth	r4, r4
 80005a8:	fbb3 f1f8 	udiv	r1, r3, r8
 80005ac:	fb08 3311 	mls	r3, r8, r1, r3
 80005b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80005b4:	fb01 f307 	mul.w	r3, r1, r7
 80005b8:	42a3      	cmp	r3, r4
 80005ba:	d908      	bls.n	80005ce <__udivmoddi4+0x276>
 80005bc:	eb1c 0404 	adds.w	r4, ip, r4
 80005c0:	f101 36ff 	add.w	r6, r1, #4294967295
 80005c4:	d213      	bcs.n	80005ee <__udivmoddi4+0x296>
 80005c6:	42a3      	cmp	r3, r4
 80005c8:	d911      	bls.n	80005ee <__udivmoddi4+0x296>
 80005ca:	3902      	subs	r1, #2
 80005cc:	4464      	add	r4, ip
 80005ce:	1ae4      	subs	r4, r4, r3
 80005d0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80005d4:	e739      	b.n	800044a <__udivmoddi4+0xf2>
 80005d6:	4604      	mov	r4, r0
 80005d8:	e6f0      	b.n	80003bc <__udivmoddi4+0x64>
 80005da:	4608      	mov	r0, r1
 80005dc:	e706      	b.n	80003ec <__udivmoddi4+0x94>
 80005de:	45c8      	cmp	r8, r9
 80005e0:	d2ae      	bcs.n	8000540 <__udivmoddi4+0x1e8>
 80005e2:	ebb9 0e02 	subs.w	lr, r9, r2
 80005e6:	eb63 0c07 	sbc.w	ip, r3, r7
 80005ea:	3801      	subs	r0, #1
 80005ec:	e7a8      	b.n	8000540 <__udivmoddi4+0x1e8>
 80005ee:	4631      	mov	r1, r6
 80005f0:	e7ed      	b.n	80005ce <__udivmoddi4+0x276>
 80005f2:	4603      	mov	r3, r0
 80005f4:	e799      	b.n	800052a <__udivmoddi4+0x1d2>
 80005f6:	4630      	mov	r0, r6
 80005f8:	e7d4      	b.n	80005a4 <__udivmoddi4+0x24c>
 80005fa:	46d6      	mov	lr, sl
 80005fc:	e77f      	b.n	80004fe <__udivmoddi4+0x1a6>
 80005fe:	4463      	add	r3, ip
 8000600:	3802      	subs	r0, #2
 8000602:	e74d      	b.n	80004a0 <__udivmoddi4+0x148>
 8000604:	4606      	mov	r6, r0
 8000606:	4623      	mov	r3, r4
 8000608:	4608      	mov	r0, r1
 800060a:	e70f      	b.n	800042c <__udivmoddi4+0xd4>
 800060c:	3e02      	subs	r6, #2
 800060e:	4463      	add	r3, ip
 8000610:	e730      	b.n	8000474 <__udivmoddi4+0x11c>
 8000612:	bf00      	nop

08000614 <__aeabi_idiv0>:
 8000614:	4770      	bx	lr
 8000616:	bf00      	nop

08000618 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b088      	sub	sp, #32
 800061c:	af06      	add	r7, sp, #24
  HAL_Init();
 800061e:	f000 fa47 	bl	8000ab0 <HAL_Init>
  SystemClock_Config();
 8000622:	f000 f865 	bl	80006f0 <SystemClock_Config>
  MX_GPIO_Init();
 8000626:	f000 f8e5 	bl	80007f4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800062a:	f000 f8b3 	bl	8000794 <MX_USART2_UART_Init>

  OSInit();
 800062e:	f003 f9af 	bl	8003990 <OSInit>

  OS_ERR err;
  pFlagGroup = OSFlagCreate(0x00, &err); // Initialize with no flags set
 8000632:	1dfb      	adds	r3, r7, #7
 8000634:	4619      	mov	r1, r3
 8000636:	2000      	movs	r0, #0
 8000638:	f004 f858 	bl	80046ec <OSFlagCreate>
 800063c:	4603      	mov	r3, r0
 800063e:	4a0d      	ldr	r2, [pc, #52]	@ (8000674 <main+0x5c>)
 8000640:	6013      	str	r3, [r2, #0]
  if (err != OS_ERR_NONE) {
      // Handle error
  }

  OSTaskCreateExt(task1,
 8000642:	2300      	movs	r3, #0
 8000644:	9304      	str	r3, [sp, #16]
 8000646:	2300      	movs	r3, #0
 8000648:	9303      	str	r3, [sp, #12]
 800064a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800064e:	9302      	str	r3, [sp, #8]
 8000650:	4b09      	ldr	r3, [pc, #36]	@ (8000678 <main+0x60>)
 8000652:	9301      	str	r3, [sp, #4]
 8000654:	2301      	movs	r3, #1
 8000656:	9300      	str	r3, [sp, #0]
 8000658:	2301      	movs	r3, #1
 800065a:	4a08      	ldr	r2, [pc, #32]	@ (800067c <main+0x64>)
 800065c:	2100      	movs	r1, #0
 800065e:	4808      	ldr	r0, [pc, #32]	@ (8000680 <main+0x68>)
 8000660:	f004 fdd0 	bl	8005204 <OSTaskCreateExt>
      				  task2_stk,
      				  TASK_STACKSIZE,
      				  NULL,
      				  0);*/

  OSStart();
 8000664:	f003 fa80 	bl	8003b68 <OSStart>
  return 0;
 8000668:	2300      	movs	r3, #0
}
 800066a:	4618      	mov	r0, r3
 800066c:	3708      	adds	r7, #8
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	200008b0 	.word	0x200008b0
 8000678:	200000b0 	.word	0x200000b0
 800067c:	200008b0 	.word	0x200008b0
 8000680:	08000685 	.word	0x08000685

08000684 <task1>:

void task1(void *p_arg) {
 8000684:	b580      	push	{r7, lr}
 8000686:	b086      	sub	sp, #24
 8000688:	af02      	add	r7, sp, #8
 800068a:	6078      	str	r0, [r7, #4]
    OS_ERR err;
    while (1) {
    	// Wait for event flag
    	OSFlagPend(pFlagGroup, 0x01, OS_FLAG_WAIT_SET_ALL, 0, &err);
 800068c:	4b0b      	ldr	r3, [pc, #44]	@ (80006bc <task1+0x38>)
 800068e:	6818      	ldr	r0, [r3, #0]
 8000690:	f107 030f 	add.w	r3, r7, #15
 8000694:	9300      	str	r3, [sp, #0]
 8000696:	2300      	movs	r3, #0
 8000698:	2202      	movs	r2, #2
 800069a:	2101      	movs	r1, #1
 800069c:	f004 f86a 	bl	8004774 <OSFlagPend>
    	if (err == OS_ERR_NONE) {
    		// Proceed with task processing
    	}
    	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80006a0:	2120      	movs	r1, #32
 80006a2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006a6:	f000 fd3f 	bl	8001128 <HAL_GPIO_TogglePin>
    	OSFlagPost(pFlagGroup, 0x01, OS_FLAG_CLR, &err);
 80006aa:	4b04      	ldr	r3, [pc, #16]	@ (80006bc <task1+0x38>)
 80006ac:	6818      	ldr	r0, [r3, #0]
 80006ae:	f107 030f 	add.w	r3, r7, #15
 80006b2:	2200      	movs	r2, #0
 80006b4:	2101      	movs	r1, #1
 80006b6:	f004 f9ed 	bl	8004a94 <OSFlagPost>
    	OSFlagPend(pFlagGroup, 0x01, OS_FLAG_WAIT_SET_ALL, 0, &err);
 80006ba:	e7e7      	b.n	800068c <task1+0x8>
 80006bc:	200008b0 	.word	0x200008b0

080006c0 <HAL_GPIO_EXTI_Callback>:
		// Set event flag to notify Task1
		OSFlagPost(pFlagGroup, 0x01, OS_FLAG_SET, &err);
    }
}*/

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b084      	sub	sp, #16
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	4603      	mov	r3, r0
 80006c8:	80fb      	strh	r3, [r7, #6]
    OS_ERR err;
    if(GPIO_Pin == GPIO_PIN_13)
 80006ca:	88fb      	ldrh	r3, [r7, #6]
 80006cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80006d0:	d107      	bne.n	80006e2 <HAL_GPIO_EXTI_Callback+0x22>
    	OSFlagPost(pFlagGroup, 0x01, OS_FLAG_SET, &err);
 80006d2:	4b06      	ldr	r3, [pc, #24]	@ (80006ec <HAL_GPIO_EXTI_Callback+0x2c>)
 80006d4:	6818      	ldr	r0, [r3, #0]
 80006d6:	f107 030f 	add.w	r3, r7, #15
 80006da:	2201      	movs	r2, #1
 80006dc:	2101      	movs	r1, #1
 80006de:	f004 f9d9 	bl	8004a94 <OSFlagPost>
}
 80006e2:	bf00      	nop
 80006e4:	3710      	adds	r7, #16
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	200008b0 	.word	0x200008b0

080006f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b096      	sub	sp, #88	@ 0x58
 80006f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006f6:	f107 0314 	add.w	r3, r7, #20
 80006fa:	2244      	movs	r2, #68	@ 0x44
 80006fc:	2100      	movs	r1, #0
 80006fe:	4618      	mov	r0, r3
 8000700:	f005 fa9c 	bl	8005c3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000704:	463b      	mov	r3, r7
 8000706:	2200      	movs	r2, #0
 8000708:	601a      	str	r2, [r3, #0]
 800070a:	605a      	str	r2, [r3, #4]
 800070c:	609a      	str	r2, [r3, #8]
 800070e:	60da      	str	r2, [r3, #12]
 8000710:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000712:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000716:	f000 fd47 	bl	80011a8 <HAL_PWREx_ControlVoltageScaling>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000720:	f000 f8d6 	bl	80008d0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000724:	2302      	movs	r3, #2
 8000726:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000728:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800072c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800072e:	2310      	movs	r3, #16
 8000730:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000732:	2302      	movs	r3, #2
 8000734:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000736:	2302      	movs	r3, #2
 8000738:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800073a:	2301      	movs	r3, #1
 800073c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800073e:	230a      	movs	r3, #10
 8000740:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000742:	2307      	movs	r3, #7
 8000744:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000746:	2302      	movs	r3, #2
 8000748:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800074a:	2302      	movs	r3, #2
 800074c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800074e:	f107 0314 	add.w	r3, r7, #20
 8000752:	4618      	mov	r0, r3
 8000754:	f000 fd7e 	bl	8001254 <HAL_RCC_OscConfig>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800075e:	f000 f8b7 	bl	80008d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000762:	230f      	movs	r3, #15
 8000764:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000766:	2303      	movs	r3, #3
 8000768:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800076a:	2300      	movs	r3, #0
 800076c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800076e:	2300      	movs	r3, #0
 8000770:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000772:	2300      	movs	r3, #0
 8000774:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000776:	463b      	mov	r3, r7
 8000778:	2104      	movs	r1, #4
 800077a:	4618      	mov	r0, r3
 800077c:	f001 f946 	bl	8001a0c <HAL_RCC_ClockConfig>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000786:	f000 f8a3 	bl	80008d0 <Error_Handler>
  }
}
 800078a:	bf00      	nop
 800078c:	3758      	adds	r7, #88	@ 0x58
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
	...

08000794 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000798:	4b14      	ldr	r3, [pc, #80]	@ (80007ec <MX_USART2_UART_Init+0x58>)
 800079a:	4a15      	ldr	r2, [pc, #84]	@ (80007f0 <MX_USART2_UART_Init+0x5c>)
 800079c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800079e:	4b13      	ldr	r3, [pc, #76]	@ (80007ec <MX_USART2_UART_Init+0x58>)
 80007a0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007a6:	4b11      	ldr	r3, [pc, #68]	@ (80007ec <MX_USART2_UART_Init+0x58>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007ac:	4b0f      	ldr	r3, [pc, #60]	@ (80007ec <MX_USART2_UART_Init+0x58>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007b2:	4b0e      	ldr	r3, [pc, #56]	@ (80007ec <MX_USART2_UART_Init+0x58>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007b8:	4b0c      	ldr	r3, [pc, #48]	@ (80007ec <MX_USART2_UART_Init+0x58>)
 80007ba:	220c      	movs	r2, #12
 80007bc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007be:	4b0b      	ldr	r3, [pc, #44]	@ (80007ec <MX_USART2_UART_Init+0x58>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007c4:	4b09      	ldr	r3, [pc, #36]	@ (80007ec <MX_USART2_UART_Init+0x58>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007ca:	4b08      	ldr	r3, [pc, #32]	@ (80007ec <MX_USART2_UART_Init+0x58>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007d0:	4b06      	ldr	r3, [pc, #24]	@ (80007ec <MX_USART2_UART_Init+0x58>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007d6:	4805      	ldr	r0, [pc, #20]	@ (80007ec <MX_USART2_UART_Init+0x58>)
 80007d8:	f001 fff8 	bl	80027cc <HAL_UART_Init>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80007e2:	f000 f875 	bl	80008d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007e6:	bf00      	nop
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	20000028 	.word	0x20000028
 80007f0:	40004400 	.word	0x40004400

080007f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b08a      	sub	sp, #40	@ 0x28
 80007f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007fa:	f107 0314 	add.w	r3, r7, #20
 80007fe:	2200      	movs	r2, #0
 8000800:	601a      	str	r2, [r3, #0]
 8000802:	605a      	str	r2, [r3, #4]
 8000804:	609a      	str	r2, [r3, #8]
 8000806:	60da      	str	r2, [r3, #12]
 8000808:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800080a:	4b2f      	ldr	r3, [pc, #188]	@ (80008c8 <MX_GPIO_Init+0xd4>)
 800080c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800080e:	4a2e      	ldr	r2, [pc, #184]	@ (80008c8 <MX_GPIO_Init+0xd4>)
 8000810:	f043 0304 	orr.w	r3, r3, #4
 8000814:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000816:	4b2c      	ldr	r3, [pc, #176]	@ (80008c8 <MX_GPIO_Init+0xd4>)
 8000818:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800081a:	f003 0304 	and.w	r3, r3, #4
 800081e:	613b      	str	r3, [r7, #16]
 8000820:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000822:	4b29      	ldr	r3, [pc, #164]	@ (80008c8 <MX_GPIO_Init+0xd4>)
 8000824:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000826:	4a28      	ldr	r2, [pc, #160]	@ (80008c8 <MX_GPIO_Init+0xd4>)
 8000828:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800082c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800082e:	4b26      	ldr	r3, [pc, #152]	@ (80008c8 <MX_GPIO_Init+0xd4>)
 8000830:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000832:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000836:	60fb      	str	r3, [r7, #12]
 8000838:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800083a:	4b23      	ldr	r3, [pc, #140]	@ (80008c8 <MX_GPIO_Init+0xd4>)
 800083c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800083e:	4a22      	ldr	r2, [pc, #136]	@ (80008c8 <MX_GPIO_Init+0xd4>)
 8000840:	f043 0301 	orr.w	r3, r3, #1
 8000844:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000846:	4b20      	ldr	r3, [pc, #128]	@ (80008c8 <MX_GPIO_Init+0xd4>)
 8000848:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800084a:	f003 0301 	and.w	r3, r3, #1
 800084e:	60bb      	str	r3, [r7, #8]
 8000850:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000852:	4b1d      	ldr	r3, [pc, #116]	@ (80008c8 <MX_GPIO_Init+0xd4>)
 8000854:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000856:	4a1c      	ldr	r2, [pc, #112]	@ (80008c8 <MX_GPIO_Init+0xd4>)
 8000858:	f043 0302 	orr.w	r3, r3, #2
 800085c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800085e:	4b1a      	ldr	r3, [pc, #104]	@ (80008c8 <MX_GPIO_Init+0xd4>)
 8000860:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000862:	f003 0302 	and.w	r3, r3, #2
 8000866:	607b      	str	r3, [r7, #4]
 8000868:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800086a:	2200      	movs	r2, #0
 800086c:	2120      	movs	r1, #32
 800086e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000872:	f000 fc41 	bl	80010f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000876:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800087a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800087c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000880:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000882:	2300      	movs	r3, #0
 8000884:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000886:	f107 0314 	add.w	r3, r7, #20
 800088a:	4619      	mov	r1, r3
 800088c:	480f      	ldr	r0, [pc, #60]	@ (80008cc <MX_GPIO_Init+0xd8>)
 800088e:	f000 fa89 	bl	8000da4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000892:	2320      	movs	r3, #32
 8000894:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000896:	2301      	movs	r3, #1
 8000898:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089a:	2300      	movs	r3, #0
 800089c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800089e:	2300      	movs	r3, #0
 80008a0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008a2:	f107 0314 	add.w	r3, r7, #20
 80008a6:	4619      	mov	r1, r3
 80008a8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008ac:	f000 fa7a 	bl	8000da4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80008b0:	2200      	movs	r2, #0
 80008b2:	2105      	movs	r1, #5
 80008b4:	2028      	movs	r0, #40	@ 0x28
 80008b6:	f000 fa3e 	bl	8000d36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80008ba:	2028      	movs	r0, #40	@ 0x28
 80008bc:	f000 fa57 	bl	8000d6e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008c0:	bf00      	nop
 80008c2:	3728      	adds	r7, #40	@ 0x28
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	40021000 	.word	0x40021000
 80008cc:	48000800 	.word	0x48000800

080008d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008d4:	b672      	cpsid	i
}
 80008d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008d8:	bf00      	nop
 80008da:	e7fd      	b.n	80008d8 <Error_Handler+0x8>

080008dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b082      	sub	sp, #8
 80008e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008e2:	4b11      	ldr	r3, [pc, #68]	@ (8000928 <HAL_MspInit+0x4c>)
 80008e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008e6:	4a10      	ldr	r2, [pc, #64]	@ (8000928 <HAL_MspInit+0x4c>)
 80008e8:	f043 0301 	orr.w	r3, r3, #1
 80008ec:	6613      	str	r3, [r2, #96]	@ 0x60
 80008ee:	4b0e      	ldr	r3, [pc, #56]	@ (8000928 <HAL_MspInit+0x4c>)
 80008f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008f2:	f003 0301 	and.w	r3, r3, #1
 80008f6:	607b      	str	r3, [r7, #4]
 80008f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008fa:	4b0b      	ldr	r3, [pc, #44]	@ (8000928 <HAL_MspInit+0x4c>)
 80008fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008fe:	4a0a      	ldr	r2, [pc, #40]	@ (8000928 <HAL_MspInit+0x4c>)
 8000900:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000904:	6593      	str	r3, [r2, #88]	@ 0x58
 8000906:	4b08      	ldr	r3, [pc, #32]	@ (8000928 <HAL_MspInit+0x4c>)
 8000908:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800090a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800090e:	603b      	str	r3, [r7, #0]
 8000910:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000912:	2200      	movs	r2, #0
 8000914:	210f      	movs	r1, #15
 8000916:	f06f 0001 	mvn.w	r0, #1
 800091a:	f000 fa0c 	bl	8000d36 <HAL_NVIC_SetPriority>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800091e:	bf00      	nop
 8000920:	3708      	adds	r7, #8
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	40021000 	.word	0x40021000

0800092c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b0ac      	sub	sp, #176	@ 0xb0
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000934:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000938:	2200      	movs	r2, #0
 800093a:	601a      	str	r2, [r3, #0]
 800093c:	605a      	str	r2, [r3, #4]
 800093e:	609a      	str	r2, [r3, #8]
 8000940:	60da      	str	r2, [r3, #12]
 8000942:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000944:	f107 0314 	add.w	r3, r7, #20
 8000948:	2288      	movs	r2, #136	@ 0x88
 800094a:	2100      	movs	r1, #0
 800094c:	4618      	mov	r0, r3
 800094e:	f005 f975 	bl	8005c3c <memset>
  if(huart->Instance==USART2)
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	4a21      	ldr	r2, [pc, #132]	@ (80009dc <HAL_UART_MspInit+0xb0>)
 8000958:	4293      	cmp	r3, r2
 800095a:	d13b      	bne.n	80009d4 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800095c:	2302      	movs	r3, #2
 800095e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000960:	2300      	movs	r3, #0
 8000962:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000964:	f107 0314 	add.w	r3, r7, #20
 8000968:	4618      	mov	r0, r3
 800096a:	f001 fa73 	bl	8001e54 <HAL_RCCEx_PeriphCLKConfig>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d001      	beq.n	8000978 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000974:	f7ff ffac 	bl	80008d0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000978:	4b19      	ldr	r3, [pc, #100]	@ (80009e0 <HAL_UART_MspInit+0xb4>)
 800097a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800097c:	4a18      	ldr	r2, [pc, #96]	@ (80009e0 <HAL_UART_MspInit+0xb4>)
 800097e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000982:	6593      	str	r3, [r2, #88]	@ 0x58
 8000984:	4b16      	ldr	r3, [pc, #88]	@ (80009e0 <HAL_UART_MspInit+0xb4>)
 8000986:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000988:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800098c:	613b      	str	r3, [r7, #16]
 800098e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000990:	4b13      	ldr	r3, [pc, #76]	@ (80009e0 <HAL_UART_MspInit+0xb4>)
 8000992:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000994:	4a12      	ldr	r2, [pc, #72]	@ (80009e0 <HAL_UART_MspInit+0xb4>)
 8000996:	f043 0301 	orr.w	r3, r3, #1
 800099a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800099c:	4b10      	ldr	r3, [pc, #64]	@ (80009e0 <HAL_UART_MspInit+0xb4>)
 800099e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009a0:	f003 0301 	and.w	r3, r3, #1
 80009a4:	60fb      	str	r3, [r7, #12]
 80009a6:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80009a8:	230c      	movs	r3, #12
 80009aa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ae:	2302      	movs	r3, #2
 80009b0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b4:	2300      	movs	r3, #0
 80009b6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009ba:	2303      	movs	r3, #3
 80009bc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009c0:	2307      	movs	r3, #7
 80009c2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009c6:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80009ca:	4619      	mov	r1, r3
 80009cc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009d0:	f000 f9e8 	bl	8000da4 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80009d4:	bf00      	nop
 80009d6:	37b0      	adds	r7, #176	@ 0xb0
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	40004400 	.word	0x40004400
 80009e0:	40021000 	.word	0x40021000

080009e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009e8:	bf00      	nop
 80009ea:	e7fd      	b.n	80009e8 <NMI_Handler+0x4>

080009ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009f0:	bf00      	nop
 80009f2:	e7fd      	b.n	80009f0 <HardFault_Handler+0x4>

080009f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009f8:	bf00      	nop
 80009fa:	e7fd      	b.n	80009f8 <MemManage_Handler+0x4>

080009fc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a00:	bf00      	nop
 8000a02:	e7fd      	b.n	8000a00 <BusFault_Handler+0x4>

08000a04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a08:	bf00      	nop
 8000a0a:	e7fd      	b.n	8000a08 <UsageFault_Handler+0x4>

08000a0c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a10:	bf00      	nop
 8000a12:	46bd      	mov	sp, r7
 8000a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a18:	4770      	bx	lr

08000a1a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a1a:	b480      	push	{r7}
 8000a1c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a1e:	bf00      	nop
 8000a20:	46bd      	mov	sp, r7
 8000a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a26:	4770      	bx	lr

08000a28 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000a2c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000a30:	f000 fb94 	bl	800115c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000a34:	bf00      	nop
 8000a36:	bd80      	pop	{r7, pc}

08000a38 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000a3c:	4b06      	ldr	r3, [pc, #24]	@ (8000a58 <SystemInit+0x20>)
 8000a3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a42:	4a05      	ldr	r2, [pc, #20]	@ (8000a58 <SystemInit+0x20>)
 8000a44:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a48:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000a4c:	bf00      	nop
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop
 8000a58:	e000ed00 	.word	0xe000ed00

08000a5c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000a5c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000a94 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a60:	f7ff ffea 	bl	8000a38 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a64:	480c      	ldr	r0, [pc, #48]	@ (8000a98 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a66:	490d      	ldr	r1, [pc, #52]	@ (8000a9c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a68:	4a0d      	ldr	r2, [pc, #52]	@ (8000aa0 <LoopForever+0xe>)
  movs r3, #0
 8000a6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a6c:	e002      	b.n	8000a74 <LoopCopyDataInit>

08000a6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a72:	3304      	adds	r3, #4

08000a74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a78:	d3f9      	bcc.n	8000a6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a7a:	4a0a      	ldr	r2, [pc, #40]	@ (8000aa4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a7c:	4c0a      	ldr	r4, [pc, #40]	@ (8000aa8 <LoopForever+0x16>)
  movs r3, #0
 8000a7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a80:	e001      	b.n	8000a86 <LoopFillZerobss>

08000a82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a84:	3204      	adds	r2, #4

08000a86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a88:	d3fb      	bcc.n	8000a82 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a8a:	f005 f8df 	bl	8005c4c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a8e:	f7ff fdc3 	bl	8000618 <main>

08000a92 <LoopForever>:

LoopForever:
    b LoopForever
 8000a92:	e7fe      	b.n	8000a92 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000a94:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000a98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a9c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000aa0:	08005ee8 	.word	0x08005ee8
  ldr r2, =_sbss
 8000aa4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000aa8:	200020e8 	.word	0x200020e8

08000aac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000aac:	e7fe      	b.n	8000aac <ADC1_2_IRQHandler>
	...

08000ab0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000aba:	4b0c      	ldr	r3, [pc, #48]	@ (8000aec <HAL_Init+0x3c>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	4a0b      	ldr	r2, [pc, #44]	@ (8000aec <HAL_Init+0x3c>)
 8000ac0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ac4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ac6:	2003      	movs	r0, #3
 8000ac8:	f000 f92a 	bl	8000d20 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000acc:	2000      	movs	r0, #0
 8000ace:	f000 f80f 	bl	8000af0 <HAL_InitTick>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d002      	beq.n	8000ade <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000ad8:	2301      	movs	r3, #1
 8000ada:	71fb      	strb	r3, [r7, #7]
 8000adc:	e001      	b.n	8000ae2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ade:	f7ff fefd 	bl	80008dc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ae2:	79fb      	ldrb	r3, [r7, #7]
}
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	3708      	adds	r7, #8
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	40022000 	.word	0x40022000

08000af0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b084      	sub	sp, #16
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000af8:	2300      	movs	r3, #0
 8000afa:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000afc:	4b17      	ldr	r3, [pc, #92]	@ (8000b5c <HAL_InitTick+0x6c>)
 8000afe:	781b      	ldrb	r3, [r3, #0]
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d023      	beq.n	8000b4c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000b04:	4b16      	ldr	r3, [pc, #88]	@ (8000b60 <HAL_InitTick+0x70>)
 8000b06:	681a      	ldr	r2, [r3, #0]
 8000b08:	4b14      	ldr	r3, [pc, #80]	@ (8000b5c <HAL_InitTick+0x6c>)
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b12:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b16:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f000 f935 	bl	8000d8a <HAL_SYSTICK_Config>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d10f      	bne.n	8000b46 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	2b0f      	cmp	r3, #15
 8000b2a:	d809      	bhi.n	8000b40 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	6879      	ldr	r1, [r7, #4]
 8000b30:	f04f 30ff 	mov.w	r0, #4294967295
 8000b34:	f000 f8ff 	bl	8000d36 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b38:	4a0a      	ldr	r2, [pc, #40]	@ (8000b64 <HAL_InitTick+0x74>)
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	6013      	str	r3, [r2, #0]
 8000b3e:	e007      	b.n	8000b50 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000b40:	2301      	movs	r3, #1
 8000b42:	73fb      	strb	r3, [r7, #15]
 8000b44:	e004      	b.n	8000b50 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b46:	2301      	movs	r3, #1
 8000b48:	73fb      	strb	r3, [r7, #15]
 8000b4a:	e001      	b.n	8000b50 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000b50:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b52:	4618      	mov	r0, r3
 8000b54:	3710      	adds	r7, #16
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	20000008 	.word	0x20000008
 8000b60:	20000000 	.word	0x20000000
 8000b64:	20000004 	.word	0x20000004

08000b68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b6c:	4b03      	ldr	r3, [pc, #12]	@ (8000b7c <HAL_GetTick+0x14>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
}
 8000b70:	4618      	mov	r0, r3
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop
 8000b7c:	200008b4 	.word	0x200008b4

08000b80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b085      	sub	sp, #20
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	f003 0307 	and.w	r3, r3, #7
 8000b8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b90:	4b0c      	ldr	r3, [pc, #48]	@ (8000bc4 <__NVIC_SetPriorityGrouping+0x44>)
 8000b92:	68db      	ldr	r3, [r3, #12]
 8000b94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b96:	68ba      	ldr	r2, [r7, #8]
 8000b98:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b9c:	4013      	ands	r3, r2
 8000b9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ba4:	68bb      	ldr	r3, [r7, #8]
 8000ba6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ba8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000bac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000bb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bb2:	4a04      	ldr	r2, [pc, #16]	@ (8000bc4 <__NVIC_SetPriorityGrouping+0x44>)
 8000bb4:	68bb      	ldr	r3, [r7, #8]
 8000bb6:	60d3      	str	r3, [r2, #12]
}
 8000bb8:	bf00      	nop
 8000bba:	3714      	adds	r7, #20
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr
 8000bc4:	e000ed00 	.word	0xe000ed00

08000bc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bcc:	4b04      	ldr	r3, [pc, #16]	@ (8000be0 <__NVIC_GetPriorityGrouping+0x18>)
 8000bce:	68db      	ldr	r3, [r3, #12]
 8000bd0:	0a1b      	lsrs	r3, r3, #8
 8000bd2:	f003 0307 	and.w	r3, r3, #7
}
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bde:	4770      	bx	lr
 8000be0:	e000ed00 	.word	0xe000ed00

08000be4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b083      	sub	sp, #12
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	4603      	mov	r3, r0
 8000bec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	db0b      	blt.n	8000c0e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bf6:	79fb      	ldrb	r3, [r7, #7]
 8000bf8:	f003 021f 	and.w	r2, r3, #31
 8000bfc:	4907      	ldr	r1, [pc, #28]	@ (8000c1c <__NVIC_EnableIRQ+0x38>)
 8000bfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c02:	095b      	lsrs	r3, r3, #5
 8000c04:	2001      	movs	r0, #1
 8000c06:	fa00 f202 	lsl.w	r2, r0, r2
 8000c0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c0e:	bf00      	nop
 8000c10:	370c      	adds	r7, #12
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop
 8000c1c:	e000e100 	.word	0xe000e100

08000c20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b083      	sub	sp, #12
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	4603      	mov	r3, r0
 8000c28:	6039      	str	r1, [r7, #0]
 8000c2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	db0a      	blt.n	8000c4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	b2da      	uxtb	r2, r3
 8000c38:	490c      	ldr	r1, [pc, #48]	@ (8000c6c <__NVIC_SetPriority+0x4c>)
 8000c3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c3e:	0112      	lsls	r2, r2, #4
 8000c40:	b2d2      	uxtb	r2, r2
 8000c42:	440b      	add	r3, r1
 8000c44:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c48:	e00a      	b.n	8000c60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	b2da      	uxtb	r2, r3
 8000c4e:	4908      	ldr	r1, [pc, #32]	@ (8000c70 <__NVIC_SetPriority+0x50>)
 8000c50:	79fb      	ldrb	r3, [r7, #7]
 8000c52:	f003 030f 	and.w	r3, r3, #15
 8000c56:	3b04      	subs	r3, #4
 8000c58:	0112      	lsls	r2, r2, #4
 8000c5a:	b2d2      	uxtb	r2, r2
 8000c5c:	440b      	add	r3, r1
 8000c5e:	761a      	strb	r2, [r3, #24]
}
 8000c60:	bf00      	nop
 8000c62:	370c      	adds	r7, #12
 8000c64:	46bd      	mov	sp, r7
 8000c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6a:	4770      	bx	lr
 8000c6c:	e000e100 	.word	0xe000e100
 8000c70:	e000ed00 	.word	0xe000ed00

08000c74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b089      	sub	sp, #36	@ 0x24
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	60f8      	str	r0, [r7, #12]
 8000c7c:	60b9      	str	r1, [r7, #8]
 8000c7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	f003 0307 	and.w	r3, r3, #7
 8000c86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c88:	69fb      	ldr	r3, [r7, #28]
 8000c8a:	f1c3 0307 	rsb	r3, r3, #7
 8000c8e:	2b04      	cmp	r3, #4
 8000c90:	bf28      	it	cs
 8000c92:	2304      	movcs	r3, #4
 8000c94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c96:	69fb      	ldr	r3, [r7, #28]
 8000c98:	3304      	adds	r3, #4
 8000c9a:	2b06      	cmp	r3, #6
 8000c9c:	d902      	bls.n	8000ca4 <NVIC_EncodePriority+0x30>
 8000c9e:	69fb      	ldr	r3, [r7, #28]
 8000ca0:	3b03      	subs	r3, #3
 8000ca2:	e000      	b.n	8000ca6 <NVIC_EncodePriority+0x32>
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ca8:	f04f 32ff 	mov.w	r2, #4294967295
 8000cac:	69bb      	ldr	r3, [r7, #24]
 8000cae:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb2:	43da      	mvns	r2, r3
 8000cb4:	68bb      	ldr	r3, [r7, #8]
 8000cb6:	401a      	ands	r2, r3
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cbc:	f04f 31ff 	mov.w	r1, #4294967295
 8000cc0:	697b      	ldr	r3, [r7, #20]
 8000cc2:	fa01 f303 	lsl.w	r3, r1, r3
 8000cc6:	43d9      	mvns	r1, r3
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ccc:	4313      	orrs	r3, r2
         );
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	3724      	adds	r7, #36	@ 0x24
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr
	...

08000cdc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b082      	sub	sp, #8
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	3b01      	subs	r3, #1
 8000ce8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000cec:	d301      	bcc.n	8000cf2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cee:	2301      	movs	r3, #1
 8000cf0:	e00f      	b.n	8000d12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cf2:	4a0a      	ldr	r2, [pc, #40]	@ (8000d1c <SysTick_Config+0x40>)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	3b01      	subs	r3, #1
 8000cf8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cfa:	210f      	movs	r1, #15
 8000cfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000d00:	f7ff ff8e 	bl	8000c20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d04:	4b05      	ldr	r3, [pc, #20]	@ (8000d1c <SysTick_Config+0x40>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d0a:	4b04      	ldr	r3, [pc, #16]	@ (8000d1c <SysTick_Config+0x40>)
 8000d0c:	2207      	movs	r2, #7
 8000d0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d10:	2300      	movs	r3, #0
}
 8000d12:	4618      	mov	r0, r3
 8000d14:	3708      	adds	r7, #8
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	e000e010 	.word	0xe000e010

08000d20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d28:	6878      	ldr	r0, [r7, #4]
 8000d2a:	f7ff ff29 	bl	8000b80 <__NVIC_SetPriorityGrouping>
}
 8000d2e:	bf00      	nop
 8000d30:	3708      	adds	r7, #8
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}

08000d36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d36:	b580      	push	{r7, lr}
 8000d38:	b086      	sub	sp, #24
 8000d3a:	af00      	add	r7, sp, #0
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	60b9      	str	r1, [r7, #8]
 8000d40:	607a      	str	r2, [r7, #4]
 8000d42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000d44:	2300      	movs	r3, #0
 8000d46:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d48:	f7ff ff3e 	bl	8000bc8 <__NVIC_GetPriorityGrouping>
 8000d4c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d4e:	687a      	ldr	r2, [r7, #4]
 8000d50:	68b9      	ldr	r1, [r7, #8]
 8000d52:	6978      	ldr	r0, [r7, #20]
 8000d54:	f7ff ff8e 	bl	8000c74 <NVIC_EncodePriority>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d5e:	4611      	mov	r1, r2
 8000d60:	4618      	mov	r0, r3
 8000d62:	f7ff ff5d 	bl	8000c20 <__NVIC_SetPriority>
}
 8000d66:	bf00      	nop
 8000d68:	3718      	adds	r7, #24
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}

08000d6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d6e:	b580      	push	{r7, lr}
 8000d70:	b082      	sub	sp, #8
 8000d72:	af00      	add	r7, sp, #0
 8000d74:	4603      	mov	r3, r0
 8000d76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f7ff ff31 	bl	8000be4 <__NVIC_EnableIRQ>
}
 8000d82:	bf00      	nop
 8000d84:	3708      	adds	r7, #8
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}

08000d8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d8a:	b580      	push	{r7, lr}
 8000d8c:	b082      	sub	sp, #8
 8000d8e:	af00      	add	r7, sp, #0
 8000d90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d92:	6878      	ldr	r0, [r7, #4]
 8000d94:	f7ff ffa2 	bl	8000cdc <SysTick_Config>
 8000d98:	4603      	mov	r3, r0
}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	3708      	adds	r7, #8
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
	...

08000da4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b087      	sub	sp, #28
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
 8000dac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000dae:	2300      	movs	r3, #0
 8000db0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000db2:	e17f      	b.n	80010b4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	681a      	ldr	r2, [r3, #0]
 8000db8:	2101      	movs	r1, #1
 8000dba:	697b      	ldr	r3, [r7, #20]
 8000dbc:	fa01 f303 	lsl.w	r3, r1, r3
 8000dc0:	4013      	ands	r3, r2
 8000dc2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	f000 8171 	beq.w	80010ae <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	685b      	ldr	r3, [r3, #4]
 8000dd0:	f003 0303 	and.w	r3, r3, #3
 8000dd4:	2b01      	cmp	r3, #1
 8000dd6:	d005      	beq.n	8000de4 <HAL_GPIO_Init+0x40>
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	685b      	ldr	r3, [r3, #4]
 8000ddc:	f003 0303 	and.w	r3, r3, #3
 8000de0:	2b02      	cmp	r3, #2
 8000de2:	d130      	bne.n	8000e46 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	689b      	ldr	r3, [r3, #8]
 8000de8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000dea:	697b      	ldr	r3, [r7, #20]
 8000dec:	005b      	lsls	r3, r3, #1
 8000dee:	2203      	movs	r2, #3
 8000df0:	fa02 f303 	lsl.w	r3, r2, r3
 8000df4:	43db      	mvns	r3, r3
 8000df6:	693a      	ldr	r2, [r7, #16]
 8000df8:	4013      	ands	r3, r2
 8000dfa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	68da      	ldr	r2, [r3, #12]
 8000e00:	697b      	ldr	r3, [r7, #20]
 8000e02:	005b      	lsls	r3, r3, #1
 8000e04:	fa02 f303 	lsl.w	r3, r2, r3
 8000e08:	693a      	ldr	r2, [r7, #16]
 8000e0a:	4313      	orrs	r3, r2
 8000e0c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	693a      	ldr	r2, [r7, #16]
 8000e12:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e1a:	2201      	movs	r2, #1
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e22:	43db      	mvns	r3, r3
 8000e24:	693a      	ldr	r2, [r7, #16]
 8000e26:	4013      	ands	r3, r2
 8000e28:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	685b      	ldr	r3, [r3, #4]
 8000e2e:	091b      	lsrs	r3, r3, #4
 8000e30:	f003 0201 	and.w	r2, r3, #1
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3a:	693a      	ldr	r2, [r7, #16]
 8000e3c:	4313      	orrs	r3, r2
 8000e3e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	693a      	ldr	r2, [r7, #16]
 8000e44:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	685b      	ldr	r3, [r3, #4]
 8000e4a:	f003 0303 	and.w	r3, r3, #3
 8000e4e:	2b03      	cmp	r3, #3
 8000e50:	d118      	bne.n	8000e84 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e56:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000e58:	2201      	movs	r2, #1
 8000e5a:	697b      	ldr	r3, [r7, #20]
 8000e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e60:	43db      	mvns	r3, r3
 8000e62:	693a      	ldr	r2, [r7, #16]
 8000e64:	4013      	ands	r3, r2
 8000e66:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	08db      	lsrs	r3, r3, #3
 8000e6e:	f003 0201 	and.w	r2, r3, #1
 8000e72:	697b      	ldr	r3, [r7, #20]
 8000e74:	fa02 f303 	lsl.w	r3, r2, r3
 8000e78:	693a      	ldr	r2, [r7, #16]
 8000e7a:	4313      	orrs	r3, r2
 8000e7c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	693a      	ldr	r2, [r7, #16]
 8000e82:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	685b      	ldr	r3, [r3, #4]
 8000e88:	f003 0303 	and.w	r3, r3, #3
 8000e8c:	2b03      	cmp	r3, #3
 8000e8e:	d017      	beq.n	8000ec0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	68db      	ldr	r3, [r3, #12]
 8000e94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000e96:	697b      	ldr	r3, [r7, #20]
 8000e98:	005b      	lsls	r3, r3, #1
 8000e9a:	2203      	movs	r2, #3
 8000e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea0:	43db      	mvns	r3, r3
 8000ea2:	693a      	ldr	r2, [r7, #16]
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	689a      	ldr	r2, [r3, #8]
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	005b      	lsls	r3, r3, #1
 8000eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb4:	693a      	ldr	r2, [r7, #16]
 8000eb6:	4313      	orrs	r3, r2
 8000eb8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	693a      	ldr	r2, [r7, #16]
 8000ebe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	685b      	ldr	r3, [r3, #4]
 8000ec4:	f003 0303 	and.w	r3, r3, #3
 8000ec8:	2b02      	cmp	r3, #2
 8000eca:	d123      	bne.n	8000f14 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	08da      	lsrs	r2, r3, #3
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	3208      	adds	r2, #8
 8000ed4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ed8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000eda:	697b      	ldr	r3, [r7, #20]
 8000edc:	f003 0307 	and.w	r3, r3, #7
 8000ee0:	009b      	lsls	r3, r3, #2
 8000ee2:	220f      	movs	r2, #15
 8000ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee8:	43db      	mvns	r3, r3
 8000eea:	693a      	ldr	r2, [r7, #16]
 8000eec:	4013      	ands	r3, r2
 8000eee:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	691a      	ldr	r2, [r3, #16]
 8000ef4:	697b      	ldr	r3, [r7, #20]
 8000ef6:	f003 0307 	and.w	r3, r3, #7
 8000efa:	009b      	lsls	r3, r3, #2
 8000efc:	fa02 f303 	lsl.w	r3, r2, r3
 8000f00:	693a      	ldr	r2, [r7, #16]
 8000f02:	4313      	orrs	r3, r2
 8000f04:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f06:	697b      	ldr	r3, [r7, #20]
 8000f08:	08da      	lsrs	r2, r3, #3
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	3208      	adds	r2, #8
 8000f0e:	6939      	ldr	r1, [r7, #16]
 8000f10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000f1a:	697b      	ldr	r3, [r7, #20]
 8000f1c:	005b      	lsls	r3, r3, #1
 8000f1e:	2203      	movs	r2, #3
 8000f20:	fa02 f303 	lsl.w	r3, r2, r3
 8000f24:	43db      	mvns	r3, r3
 8000f26:	693a      	ldr	r2, [r7, #16]
 8000f28:	4013      	ands	r3, r2
 8000f2a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	f003 0203 	and.w	r2, r3, #3
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	005b      	lsls	r3, r3, #1
 8000f38:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3c:	693a      	ldr	r2, [r7, #16]
 8000f3e:	4313      	orrs	r3, r2
 8000f40:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	693a      	ldr	r2, [r7, #16]
 8000f46:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	f000 80ac 	beq.w	80010ae <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f56:	4b5f      	ldr	r3, [pc, #380]	@ (80010d4 <HAL_GPIO_Init+0x330>)
 8000f58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f5a:	4a5e      	ldr	r2, [pc, #376]	@ (80010d4 <HAL_GPIO_Init+0x330>)
 8000f5c:	f043 0301 	orr.w	r3, r3, #1
 8000f60:	6613      	str	r3, [r2, #96]	@ 0x60
 8000f62:	4b5c      	ldr	r3, [pc, #368]	@ (80010d4 <HAL_GPIO_Init+0x330>)
 8000f64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f66:	f003 0301 	and.w	r3, r3, #1
 8000f6a:	60bb      	str	r3, [r7, #8]
 8000f6c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000f6e:	4a5a      	ldr	r2, [pc, #360]	@ (80010d8 <HAL_GPIO_Init+0x334>)
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	089b      	lsrs	r3, r3, #2
 8000f74:	3302      	adds	r3, #2
 8000f76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f7a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	f003 0303 	and.w	r3, r3, #3
 8000f82:	009b      	lsls	r3, r3, #2
 8000f84:	220f      	movs	r2, #15
 8000f86:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8a:	43db      	mvns	r3, r3
 8000f8c:	693a      	ldr	r2, [r7, #16]
 8000f8e:	4013      	ands	r3, r2
 8000f90:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000f98:	d025      	beq.n	8000fe6 <HAL_GPIO_Init+0x242>
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	4a4f      	ldr	r2, [pc, #316]	@ (80010dc <HAL_GPIO_Init+0x338>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d01f      	beq.n	8000fe2 <HAL_GPIO_Init+0x23e>
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	4a4e      	ldr	r2, [pc, #312]	@ (80010e0 <HAL_GPIO_Init+0x33c>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d019      	beq.n	8000fde <HAL_GPIO_Init+0x23a>
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	4a4d      	ldr	r2, [pc, #308]	@ (80010e4 <HAL_GPIO_Init+0x340>)
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d013      	beq.n	8000fda <HAL_GPIO_Init+0x236>
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	4a4c      	ldr	r2, [pc, #304]	@ (80010e8 <HAL_GPIO_Init+0x344>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d00d      	beq.n	8000fd6 <HAL_GPIO_Init+0x232>
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	4a4b      	ldr	r2, [pc, #300]	@ (80010ec <HAL_GPIO_Init+0x348>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d007      	beq.n	8000fd2 <HAL_GPIO_Init+0x22e>
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	4a4a      	ldr	r2, [pc, #296]	@ (80010f0 <HAL_GPIO_Init+0x34c>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d101      	bne.n	8000fce <HAL_GPIO_Init+0x22a>
 8000fca:	2306      	movs	r3, #6
 8000fcc:	e00c      	b.n	8000fe8 <HAL_GPIO_Init+0x244>
 8000fce:	2307      	movs	r3, #7
 8000fd0:	e00a      	b.n	8000fe8 <HAL_GPIO_Init+0x244>
 8000fd2:	2305      	movs	r3, #5
 8000fd4:	e008      	b.n	8000fe8 <HAL_GPIO_Init+0x244>
 8000fd6:	2304      	movs	r3, #4
 8000fd8:	e006      	b.n	8000fe8 <HAL_GPIO_Init+0x244>
 8000fda:	2303      	movs	r3, #3
 8000fdc:	e004      	b.n	8000fe8 <HAL_GPIO_Init+0x244>
 8000fde:	2302      	movs	r3, #2
 8000fe0:	e002      	b.n	8000fe8 <HAL_GPIO_Init+0x244>
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	e000      	b.n	8000fe8 <HAL_GPIO_Init+0x244>
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	697a      	ldr	r2, [r7, #20]
 8000fea:	f002 0203 	and.w	r2, r2, #3
 8000fee:	0092      	lsls	r2, r2, #2
 8000ff0:	4093      	lsls	r3, r2
 8000ff2:	693a      	ldr	r2, [r7, #16]
 8000ff4:	4313      	orrs	r3, r2
 8000ff6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000ff8:	4937      	ldr	r1, [pc, #220]	@ (80010d8 <HAL_GPIO_Init+0x334>)
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	089b      	lsrs	r3, r3, #2
 8000ffe:	3302      	adds	r3, #2
 8001000:	693a      	ldr	r2, [r7, #16]
 8001002:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001006:	4b3b      	ldr	r3, [pc, #236]	@ (80010f4 <HAL_GPIO_Init+0x350>)
 8001008:	689b      	ldr	r3, [r3, #8]
 800100a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	43db      	mvns	r3, r3
 8001010:	693a      	ldr	r2, [r7, #16]
 8001012:	4013      	ands	r3, r2
 8001014:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800101e:	2b00      	cmp	r3, #0
 8001020:	d003      	beq.n	800102a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001022:	693a      	ldr	r2, [r7, #16]
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	4313      	orrs	r3, r2
 8001028:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800102a:	4a32      	ldr	r2, [pc, #200]	@ (80010f4 <HAL_GPIO_Init+0x350>)
 800102c:	693b      	ldr	r3, [r7, #16]
 800102e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001030:	4b30      	ldr	r3, [pc, #192]	@ (80010f4 <HAL_GPIO_Init+0x350>)
 8001032:	68db      	ldr	r3, [r3, #12]
 8001034:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	43db      	mvns	r3, r3
 800103a:	693a      	ldr	r2, [r7, #16]
 800103c:	4013      	ands	r3, r2
 800103e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001048:	2b00      	cmp	r3, #0
 800104a:	d003      	beq.n	8001054 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800104c:	693a      	ldr	r2, [r7, #16]
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	4313      	orrs	r3, r2
 8001052:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001054:	4a27      	ldr	r2, [pc, #156]	@ (80010f4 <HAL_GPIO_Init+0x350>)
 8001056:	693b      	ldr	r3, [r7, #16]
 8001058:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800105a:	4b26      	ldr	r3, [pc, #152]	@ (80010f4 <HAL_GPIO_Init+0x350>)
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	43db      	mvns	r3, r3
 8001064:	693a      	ldr	r2, [r7, #16]
 8001066:	4013      	ands	r3, r2
 8001068:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001072:	2b00      	cmp	r3, #0
 8001074:	d003      	beq.n	800107e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001076:	693a      	ldr	r2, [r7, #16]
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	4313      	orrs	r3, r2
 800107c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800107e:	4a1d      	ldr	r2, [pc, #116]	@ (80010f4 <HAL_GPIO_Init+0x350>)
 8001080:	693b      	ldr	r3, [r7, #16]
 8001082:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001084:	4b1b      	ldr	r3, [pc, #108]	@ (80010f4 <HAL_GPIO_Init+0x350>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	43db      	mvns	r3, r3
 800108e:	693a      	ldr	r2, [r7, #16]
 8001090:	4013      	ands	r3, r2
 8001092:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800109c:	2b00      	cmp	r3, #0
 800109e:	d003      	beq.n	80010a8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80010a0:	693a      	ldr	r2, [r7, #16]
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	4313      	orrs	r3, r2
 80010a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80010a8:	4a12      	ldr	r2, [pc, #72]	@ (80010f4 <HAL_GPIO_Init+0x350>)
 80010aa:	693b      	ldr	r3, [r7, #16]
 80010ac:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80010ae:	697b      	ldr	r3, [r7, #20]
 80010b0:	3301      	adds	r3, #1
 80010b2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	681a      	ldr	r2, [r3, #0]
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	fa22 f303 	lsr.w	r3, r2, r3
 80010be:	2b00      	cmp	r3, #0
 80010c0:	f47f ae78 	bne.w	8000db4 <HAL_GPIO_Init+0x10>
  }
}
 80010c4:	bf00      	nop
 80010c6:	bf00      	nop
 80010c8:	371c      	adds	r7, #28
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop
 80010d4:	40021000 	.word	0x40021000
 80010d8:	40010000 	.word	0x40010000
 80010dc:	48000400 	.word	0x48000400
 80010e0:	48000800 	.word	0x48000800
 80010e4:	48000c00 	.word	0x48000c00
 80010e8:	48001000 	.word	0x48001000
 80010ec:	48001400 	.word	0x48001400
 80010f0:	48001800 	.word	0x48001800
 80010f4:	40010400 	.word	0x40010400

080010f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
 8001100:	460b      	mov	r3, r1
 8001102:	807b      	strh	r3, [r7, #2]
 8001104:	4613      	mov	r3, r2
 8001106:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001108:	787b      	ldrb	r3, [r7, #1]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d003      	beq.n	8001116 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800110e:	887a      	ldrh	r2, [r7, #2]
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001114:	e002      	b.n	800111c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001116:	887a      	ldrh	r2, [r7, #2]
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800111c:	bf00      	nop
 800111e:	370c      	adds	r7, #12
 8001120:	46bd      	mov	sp, r7
 8001122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001126:	4770      	bx	lr

08001128 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001128:	b480      	push	{r7}
 800112a:	b085      	sub	sp, #20
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
 8001130:	460b      	mov	r3, r1
 8001132:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	695b      	ldr	r3, [r3, #20]
 8001138:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800113a:	887a      	ldrh	r2, [r7, #2]
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	4013      	ands	r3, r2
 8001140:	041a      	lsls	r2, r3, #16
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	43d9      	mvns	r1, r3
 8001146:	887b      	ldrh	r3, [r7, #2]
 8001148:	400b      	ands	r3, r1
 800114a:	431a      	orrs	r2, r3
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	619a      	str	r2, [r3, #24]
}
 8001150:	bf00      	nop
 8001152:	3714      	adds	r7, #20
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr

0800115c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0
 8001162:	4603      	mov	r3, r0
 8001164:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001166:	4b08      	ldr	r3, [pc, #32]	@ (8001188 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001168:	695a      	ldr	r2, [r3, #20]
 800116a:	88fb      	ldrh	r3, [r7, #6]
 800116c:	4013      	ands	r3, r2
 800116e:	2b00      	cmp	r3, #0
 8001170:	d006      	beq.n	8001180 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001172:	4a05      	ldr	r2, [pc, #20]	@ (8001188 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001174:	88fb      	ldrh	r3, [r7, #6]
 8001176:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001178:	88fb      	ldrh	r3, [r7, #6]
 800117a:	4618      	mov	r0, r3
 800117c:	f7ff faa0 	bl	80006c0 <HAL_GPIO_EXTI_Callback>
  }
}
 8001180:	bf00      	nop
 8001182:	3708      	adds	r7, #8
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	40010400 	.word	0x40010400

0800118c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001190:	4b04      	ldr	r3, [pc, #16]	@ (80011a4 <HAL_PWREx_GetVoltageRange+0x18>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001198:	4618      	mov	r0, r3
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr
 80011a2:	bf00      	nop
 80011a4:	40007000 	.word	0x40007000

080011a8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b085      	sub	sp, #20
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80011b6:	d130      	bne.n	800121a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80011b8:	4b23      	ldr	r3, [pc, #140]	@ (8001248 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80011c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80011c4:	d038      	beq.n	8001238 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80011c6:	4b20      	ldr	r3, [pc, #128]	@ (8001248 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80011ce:	4a1e      	ldr	r2, [pc, #120]	@ (8001248 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011d0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80011d4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80011d6:	4b1d      	ldr	r3, [pc, #116]	@ (800124c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	2232      	movs	r2, #50	@ 0x32
 80011dc:	fb02 f303 	mul.w	r3, r2, r3
 80011e0:	4a1b      	ldr	r2, [pc, #108]	@ (8001250 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80011e2:	fba2 2303 	umull	r2, r3, r2, r3
 80011e6:	0c9b      	lsrs	r3, r3, #18
 80011e8:	3301      	adds	r3, #1
 80011ea:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80011ec:	e002      	b.n	80011f4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	3b01      	subs	r3, #1
 80011f2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80011f4:	4b14      	ldr	r3, [pc, #80]	@ (8001248 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011f6:	695b      	ldr	r3, [r3, #20]
 80011f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80011fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001200:	d102      	bne.n	8001208 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d1f2      	bne.n	80011ee <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001208:	4b0f      	ldr	r3, [pc, #60]	@ (8001248 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800120a:	695b      	ldr	r3, [r3, #20]
 800120c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001210:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001214:	d110      	bne.n	8001238 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001216:	2303      	movs	r3, #3
 8001218:	e00f      	b.n	800123a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800121a:	4b0b      	ldr	r3, [pc, #44]	@ (8001248 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001222:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001226:	d007      	beq.n	8001238 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001228:	4b07      	ldr	r3, [pc, #28]	@ (8001248 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001230:	4a05      	ldr	r2, [pc, #20]	@ (8001248 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001232:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001236:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001238:	2300      	movs	r3, #0
}
 800123a:	4618      	mov	r0, r3
 800123c:	3714      	adds	r7, #20
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr
 8001246:	bf00      	nop
 8001248:	40007000 	.word	0x40007000
 800124c:	20000000 	.word	0x20000000
 8001250:	431bde83 	.word	0x431bde83

08001254 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b088      	sub	sp, #32
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d101      	bne.n	8001266 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001262:	2301      	movs	r3, #1
 8001264:	e3ca      	b.n	80019fc <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001266:	4b97      	ldr	r3, [pc, #604]	@ (80014c4 <HAL_RCC_OscConfig+0x270>)
 8001268:	689b      	ldr	r3, [r3, #8]
 800126a:	f003 030c 	and.w	r3, r3, #12
 800126e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001270:	4b94      	ldr	r3, [pc, #592]	@ (80014c4 <HAL_RCC_OscConfig+0x270>)
 8001272:	68db      	ldr	r3, [r3, #12]
 8001274:	f003 0303 	and.w	r3, r3, #3
 8001278:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f003 0310 	and.w	r3, r3, #16
 8001282:	2b00      	cmp	r3, #0
 8001284:	f000 80e4 	beq.w	8001450 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001288:	69bb      	ldr	r3, [r7, #24]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d007      	beq.n	800129e <HAL_RCC_OscConfig+0x4a>
 800128e:	69bb      	ldr	r3, [r7, #24]
 8001290:	2b0c      	cmp	r3, #12
 8001292:	f040 808b 	bne.w	80013ac <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001296:	697b      	ldr	r3, [r7, #20]
 8001298:	2b01      	cmp	r3, #1
 800129a:	f040 8087 	bne.w	80013ac <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800129e:	4b89      	ldr	r3, [pc, #548]	@ (80014c4 <HAL_RCC_OscConfig+0x270>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f003 0302 	and.w	r3, r3, #2
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d005      	beq.n	80012b6 <HAL_RCC_OscConfig+0x62>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	699b      	ldr	r3, [r3, #24]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d101      	bne.n	80012b6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80012b2:	2301      	movs	r3, #1
 80012b4:	e3a2      	b.n	80019fc <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6a1a      	ldr	r2, [r3, #32]
 80012ba:	4b82      	ldr	r3, [pc, #520]	@ (80014c4 <HAL_RCC_OscConfig+0x270>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f003 0308 	and.w	r3, r3, #8
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d004      	beq.n	80012d0 <HAL_RCC_OscConfig+0x7c>
 80012c6:	4b7f      	ldr	r3, [pc, #508]	@ (80014c4 <HAL_RCC_OscConfig+0x270>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80012ce:	e005      	b.n	80012dc <HAL_RCC_OscConfig+0x88>
 80012d0:	4b7c      	ldr	r3, [pc, #496]	@ (80014c4 <HAL_RCC_OscConfig+0x270>)
 80012d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80012d6:	091b      	lsrs	r3, r3, #4
 80012d8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80012dc:	4293      	cmp	r3, r2
 80012de:	d223      	bcs.n	8001328 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6a1b      	ldr	r3, [r3, #32]
 80012e4:	4618      	mov	r0, r3
 80012e6:	f000 fd55 	bl	8001d94 <RCC_SetFlashLatencyFromMSIRange>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80012f0:	2301      	movs	r3, #1
 80012f2:	e383      	b.n	80019fc <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80012f4:	4b73      	ldr	r3, [pc, #460]	@ (80014c4 <HAL_RCC_OscConfig+0x270>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4a72      	ldr	r2, [pc, #456]	@ (80014c4 <HAL_RCC_OscConfig+0x270>)
 80012fa:	f043 0308 	orr.w	r3, r3, #8
 80012fe:	6013      	str	r3, [r2, #0]
 8001300:	4b70      	ldr	r3, [pc, #448]	@ (80014c4 <HAL_RCC_OscConfig+0x270>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6a1b      	ldr	r3, [r3, #32]
 800130c:	496d      	ldr	r1, [pc, #436]	@ (80014c4 <HAL_RCC_OscConfig+0x270>)
 800130e:	4313      	orrs	r3, r2
 8001310:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001312:	4b6c      	ldr	r3, [pc, #432]	@ (80014c4 <HAL_RCC_OscConfig+0x270>)
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	69db      	ldr	r3, [r3, #28]
 800131e:	021b      	lsls	r3, r3, #8
 8001320:	4968      	ldr	r1, [pc, #416]	@ (80014c4 <HAL_RCC_OscConfig+0x270>)
 8001322:	4313      	orrs	r3, r2
 8001324:	604b      	str	r3, [r1, #4]
 8001326:	e025      	b.n	8001374 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001328:	4b66      	ldr	r3, [pc, #408]	@ (80014c4 <HAL_RCC_OscConfig+0x270>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4a65      	ldr	r2, [pc, #404]	@ (80014c4 <HAL_RCC_OscConfig+0x270>)
 800132e:	f043 0308 	orr.w	r3, r3, #8
 8001332:	6013      	str	r3, [r2, #0]
 8001334:	4b63      	ldr	r3, [pc, #396]	@ (80014c4 <HAL_RCC_OscConfig+0x270>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6a1b      	ldr	r3, [r3, #32]
 8001340:	4960      	ldr	r1, [pc, #384]	@ (80014c4 <HAL_RCC_OscConfig+0x270>)
 8001342:	4313      	orrs	r3, r2
 8001344:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001346:	4b5f      	ldr	r3, [pc, #380]	@ (80014c4 <HAL_RCC_OscConfig+0x270>)
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	69db      	ldr	r3, [r3, #28]
 8001352:	021b      	lsls	r3, r3, #8
 8001354:	495b      	ldr	r1, [pc, #364]	@ (80014c4 <HAL_RCC_OscConfig+0x270>)
 8001356:	4313      	orrs	r3, r2
 8001358:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800135a:	69bb      	ldr	r3, [r7, #24]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d109      	bne.n	8001374 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6a1b      	ldr	r3, [r3, #32]
 8001364:	4618      	mov	r0, r3
 8001366:	f000 fd15 	bl	8001d94 <RCC_SetFlashLatencyFromMSIRange>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d001      	beq.n	8001374 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001370:	2301      	movs	r3, #1
 8001372:	e343      	b.n	80019fc <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001374:	f000 fc4a 	bl	8001c0c <HAL_RCC_GetSysClockFreq>
 8001378:	4602      	mov	r2, r0
 800137a:	4b52      	ldr	r3, [pc, #328]	@ (80014c4 <HAL_RCC_OscConfig+0x270>)
 800137c:	689b      	ldr	r3, [r3, #8]
 800137e:	091b      	lsrs	r3, r3, #4
 8001380:	f003 030f 	and.w	r3, r3, #15
 8001384:	4950      	ldr	r1, [pc, #320]	@ (80014c8 <HAL_RCC_OscConfig+0x274>)
 8001386:	5ccb      	ldrb	r3, [r1, r3]
 8001388:	f003 031f 	and.w	r3, r3, #31
 800138c:	fa22 f303 	lsr.w	r3, r2, r3
 8001390:	4a4e      	ldr	r2, [pc, #312]	@ (80014cc <HAL_RCC_OscConfig+0x278>)
 8001392:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001394:	4b4e      	ldr	r3, [pc, #312]	@ (80014d0 <HAL_RCC_OscConfig+0x27c>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4618      	mov	r0, r3
 800139a:	f7ff fba9 	bl	8000af0 <HAL_InitTick>
 800139e:	4603      	mov	r3, r0
 80013a0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80013a2:	7bfb      	ldrb	r3, [r7, #15]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d052      	beq.n	800144e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80013a8:	7bfb      	ldrb	r3, [r7, #15]
 80013aa:	e327      	b.n	80019fc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	699b      	ldr	r3, [r3, #24]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d032      	beq.n	800141a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80013b4:	4b43      	ldr	r3, [pc, #268]	@ (80014c4 <HAL_RCC_OscConfig+0x270>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a42      	ldr	r2, [pc, #264]	@ (80014c4 <HAL_RCC_OscConfig+0x270>)
 80013ba:	f043 0301 	orr.w	r3, r3, #1
 80013be:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80013c0:	f7ff fbd2 	bl	8000b68 <HAL_GetTick>
 80013c4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80013c6:	e008      	b.n	80013da <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80013c8:	f7ff fbce 	bl	8000b68 <HAL_GetTick>
 80013cc:	4602      	mov	r2, r0
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	1ad3      	subs	r3, r2, r3
 80013d2:	2b02      	cmp	r3, #2
 80013d4:	d901      	bls.n	80013da <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80013d6:	2303      	movs	r3, #3
 80013d8:	e310      	b.n	80019fc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80013da:	4b3a      	ldr	r3, [pc, #232]	@ (80014c4 <HAL_RCC_OscConfig+0x270>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f003 0302 	and.w	r3, r3, #2
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d0f0      	beq.n	80013c8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80013e6:	4b37      	ldr	r3, [pc, #220]	@ (80014c4 <HAL_RCC_OscConfig+0x270>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4a36      	ldr	r2, [pc, #216]	@ (80014c4 <HAL_RCC_OscConfig+0x270>)
 80013ec:	f043 0308 	orr.w	r3, r3, #8
 80013f0:	6013      	str	r3, [r2, #0]
 80013f2:	4b34      	ldr	r3, [pc, #208]	@ (80014c4 <HAL_RCC_OscConfig+0x270>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6a1b      	ldr	r3, [r3, #32]
 80013fe:	4931      	ldr	r1, [pc, #196]	@ (80014c4 <HAL_RCC_OscConfig+0x270>)
 8001400:	4313      	orrs	r3, r2
 8001402:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001404:	4b2f      	ldr	r3, [pc, #188]	@ (80014c4 <HAL_RCC_OscConfig+0x270>)
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	69db      	ldr	r3, [r3, #28]
 8001410:	021b      	lsls	r3, r3, #8
 8001412:	492c      	ldr	r1, [pc, #176]	@ (80014c4 <HAL_RCC_OscConfig+0x270>)
 8001414:	4313      	orrs	r3, r2
 8001416:	604b      	str	r3, [r1, #4]
 8001418:	e01a      	b.n	8001450 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800141a:	4b2a      	ldr	r3, [pc, #168]	@ (80014c4 <HAL_RCC_OscConfig+0x270>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4a29      	ldr	r2, [pc, #164]	@ (80014c4 <HAL_RCC_OscConfig+0x270>)
 8001420:	f023 0301 	bic.w	r3, r3, #1
 8001424:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001426:	f7ff fb9f 	bl	8000b68 <HAL_GetTick>
 800142a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800142c:	e008      	b.n	8001440 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800142e:	f7ff fb9b 	bl	8000b68 <HAL_GetTick>
 8001432:	4602      	mov	r2, r0
 8001434:	693b      	ldr	r3, [r7, #16]
 8001436:	1ad3      	subs	r3, r2, r3
 8001438:	2b02      	cmp	r3, #2
 800143a:	d901      	bls.n	8001440 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800143c:	2303      	movs	r3, #3
 800143e:	e2dd      	b.n	80019fc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001440:	4b20      	ldr	r3, [pc, #128]	@ (80014c4 <HAL_RCC_OscConfig+0x270>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f003 0302 	and.w	r3, r3, #2
 8001448:	2b00      	cmp	r3, #0
 800144a:	d1f0      	bne.n	800142e <HAL_RCC_OscConfig+0x1da>
 800144c:	e000      	b.n	8001450 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800144e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f003 0301 	and.w	r3, r3, #1
 8001458:	2b00      	cmp	r3, #0
 800145a:	d074      	beq.n	8001546 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800145c:	69bb      	ldr	r3, [r7, #24]
 800145e:	2b08      	cmp	r3, #8
 8001460:	d005      	beq.n	800146e <HAL_RCC_OscConfig+0x21a>
 8001462:	69bb      	ldr	r3, [r7, #24]
 8001464:	2b0c      	cmp	r3, #12
 8001466:	d10e      	bne.n	8001486 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	2b03      	cmp	r3, #3
 800146c:	d10b      	bne.n	8001486 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800146e:	4b15      	ldr	r3, [pc, #84]	@ (80014c4 <HAL_RCC_OscConfig+0x270>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001476:	2b00      	cmp	r3, #0
 8001478:	d064      	beq.n	8001544 <HAL_RCC_OscConfig+0x2f0>
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d160      	bne.n	8001544 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001482:	2301      	movs	r3, #1
 8001484:	e2ba      	b.n	80019fc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800148e:	d106      	bne.n	800149e <HAL_RCC_OscConfig+0x24a>
 8001490:	4b0c      	ldr	r3, [pc, #48]	@ (80014c4 <HAL_RCC_OscConfig+0x270>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a0b      	ldr	r2, [pc, #44]	@ (80014c4 <HAL_RCC_OscConfig+0x270>)
 8001496:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800149a:	6013      	str	r3, [r2, #0]
 800149c:	e026      	b.n	80014ec <HAL_RCC_OscConfig+0x298>
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80014a6:	d115      	bne.n	80014d4 <HAL_RCC_OscConfig+0x280>
 80014a8:	4b06      	ldr	r3, [pc, #24]	@ (80014c4 <HAL_RCC_OscConfig+0x270>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a05      	ldr	r2, [pc, #20]	@ (80014c4 <HAL_RCC_OscConfig+0x270>)
 80014ae:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80014b2:	6013      	str	r3, [r2, #0]
 80014b4:	4b03      	ldr	r3, [pc, #12]	@ (80014c4 <HAL_RCC_OscConfig+0x270>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a02      	ldr	r2, [pc, #8]	@ (80014c4 <HAL_RCC_OscConfig+0x270>)
 80014ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014be:	6013      	str	r3, [r2, #0]
 80014c0:	e014      	b.n	80014ec <HAL_RCC_OscConfig+0x298>
 80014c2:	bf00      	nop
 80014c4:	40021000 	.word	0x40021000
 80014c8:	08005d1c 	.word	0x08005d1c
 80014cc:	20000000 	.word	0x20000000
 80014d0:	20000004 	.word	0x20000004
 80014d4:	4ba0      	ldr	r3, [pc, #640]	@ (8001758 <HAL_RCC_OscConfig+0x504>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a9f      	ldr	r2, [pc, #636]	@ (8001758 <HAL_RCC_OscConfig+0x504>)
 80014da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80014de:	6013      	str	r3, [r2, #0]
 80014e0:	4b9d      	ldr	r3, [pc, #628]	@ (8001758 <HAL_RCC_OscConfig+0x504>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a9c      	ldr	r2, [pc, #624]	@ (8001758 <HAL_RCC_OscConfig+0x504>)
 80014e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80014ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d013      	beq.n	800151c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014f4:	f7ff fb38 	bl	8000b68 <HAL_GetTick>
 80014f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014fa:	e008      	b.n	800150e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014fc:	f7ff fb34 	bl	8000b68 <HAL_GetTick>
 8001500:	4602      	mov	r2, r0
 8001502:	693b      	ldr	r3, [r7, #16]
 8001504:	1ad3      	subs	r3, r2, r3
 8001506:	2b64      	cmp	r3, #100	@ 0x64
 8001508:	d901      	bls.n	800150e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800150a:	2303      	movs	r3, #3
 800150c:	e276      	b.n	80019fc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800150e:	4b92      	ldr	r3, [pc, #584]	@ (8001758 <HAL_RCC_OscConfig+0x504>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001516:	2b00      	cmp	r3, #0
 8001518:	d0f0      	beq.n	80014fc <HAL_RCC_OscConfig+0x2a8>
 800151a:	e014      	b.n	8001546 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800151c:	f7ff fb24 	bl	8000b68 <HAL_GetTick>
 8001520:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001522:	e008      	b.n	8001536 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001524:	f7ff fb20 	bl	8000b68 <HAL_GetTick>
 8001528:	4602      	mov	r2, r0
 800152a:	693b      	ldr	r3, [r7, #16]
 800152c:	1ad3      	subs	r3, r2, r3
 800152e:	2b64      	cmp	r3, #100	@ 0x64
 8001530:	d901      	bls.n	8001536 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001532:	2303      	movs	r3, #3
 8001534:	e262      	b.n	80019fc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001536:	4b88      	ldr	r3, [pc, #544]	@ (8001758 <HAL_RCC_OscConfig+0x504>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800153e:	2b00      	cmp	r3, #0
 8001540:	d1f0      	bne.n	8001524 <HAL_RCC_OscConfig+0x2d0>
 8001542:	e000      	b.n	8001546 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001544:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f003 0302 	and.w	r3, r3, #2
 800154e:	2b00      	cmp	r3, #0
 8001550:	d060      	beq.n	8001614 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001552:	69bb      	ldr	r3, [r7, #24]
 8001554:	2b04      	cmp	r3, #4
 8001556:	d005      	beq.n	8001564 <HAL_RCC_OscConfig+0x310>
 8001558:	69bb      	ldr	r3, [r7, #24]
 800155a:	2b0c      	cmp	r3, #12
 800155c:	d119      	bne.n	8001592 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800155e:	697b      	ldr	r3, [r7, #20]
 8001560:	2b02      	cmp	r3, #2
 8001562:	d116      	bne.n	8001592 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001564:	4b7c      	ldr	r3, [pc, #496]	@ (8001758 <HAL_RCC_OscConfig+0x504>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800156c:	2b00      	cmp	r3, #0
 800156e:	d005      	beq.n	800157c <HAL_RCC_OscConfig+0x328>
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	68db      	ldr	r3, [r3, #12]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d101      	bne.n	800157c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001578:	2301      	movs	r3, #1
 800157a:	e23f      	b.n	80019fc <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800157c:	4b76      	ldr	r3, [pc, #472]	@ (8001758 <HAL_RCC_OscConfig+0x504>)
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	691b      	ldr	r3, [r3, #16]
 8001588:	061b      	lsls	r3, r3, #24
 800158a:	4973      	ldr	r1, [pc, #460]	@ (8001758 <HAL_RCC_OscConfig+0x504>)
 800158c:	4313      	orrs	r3, r2
 800158e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001590:	e040      	b.n	8001614 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	68db      	ldr	r3, [r3, #12]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d023      	beq.n	80015e2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800159a:	4b6f      	ldr	r3, [pc, #444]	@ (8001758 <HAL_RCC_OscConfig+0x504>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4a6e      	ldr	r2, [pc, #440]	@ (8001758 <HAL_RCC_OscConfig+0x504>)
 80015a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015a6:	f7ff fadf 	bl	8000b68 <HAL_GetTick>
 80015aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015ac:	e008      	b.n	80015c0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015ae:	f7ff fadb 	bl	8000b68 <HAL_GetTick>
 80015b2:	4602      	mov	r2, r0
 80015b4:	693b      	ldr	r3, [r7, #16]
 80015b6:	1ad3      	subs	r3, r2, r3
 80015b8:	2b02      	cmp	r3, #2
 80015ba:	d901      	bls.n	80015c0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80015bc:	2303      	movs	r3, #3
 80015be:	e21d      	b.n	80019fc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015c0:	4b65      	ldr	r3, [pc, #404]	@ (8001758 <HAL_RCC_OscConfig+0x504>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d0f0      	beq.n	80015ae <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015cc:	4b62      	ldr	r3, [pc, #392]	@ (8001758 <HAL_RCC_OscConfig+0x504>)
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	691b      	ldr	r3, [r3, #16]
 80015d8:	061b      	lsls	r3, r3, #24
 80015da:	495f      	ldr	r1, [pc, #380]	@ (8001758 <HAL_RCC_OscConfig+0x504>)
 80015dc:	4313      	orrs	r3, r2
 80015de:	604b      	str	r3, [r1, #4]
 80015e0:	e018      	b.n	8001614 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015e2:	4b5d      	ldr	r3, [pc, #372]	@ (8001758 <HAL_RCC_OscConfig+0x504>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4a5c      	ldr	r2, [pc, #368]	@ (8001758 <HAL_RCC_OscConfig+0x504>)
 80015e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80015ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015ee:	f7ff fabb 	bl	8000b68 <HAL_GetTick>
 80015f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015f4:	e008      	b.n	8001608 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015f6:	f7ff fab7 	bl	8000b68 <HAL_GetTick>
 80015fa:	4602      	mov	r2, r0
 80015fc:	693b      	ldr	r3, [r7, #16]
 80015fe:	1ad3      	subs	r3, r2, r3
 8001600:	2b02      	cmp	r3, #2
 8001602:	d901      	bls.n	8001608 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001604:	2303      	movs	r3, #3
 8001606:	e1f9      	b.n	80019fc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001608:	4b53      	ldr	r3, [pc, #332]	@ (8001758 <HAL_RCC_OscConfig+0x504>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001610:	2b00      	cmp	r3, #0
 8001612:	d1f0      	bne.n	80015f6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f003 0308 	and.w	r3, r3, #8
 800161c:	2b00      	cmp	r3, #0
 800161e:	d03c      	beq.n	800169a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	695b      	ldr	r3, [r3, #20]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d01c      	beq.n	8001662 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001628:	4b4b      	ldr	r3, [pc, #300]	@ (8001758 <HAL_RCC_OscConfig+0x504>)
 800162a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800162e:	4a4a      	ldr	r2, [pc, #296]	@ (8001758 <HAL_RCC_OscConfig+0x504>)
 8001630:	f043 0301 	orr.w	r3, r3, #1
 8001634:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001638:	f7ff fa96 	bl	8000b68 <HAL_GetTick>
 800163c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800163e:	e008      	b.n	8001652 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001640:	f7ff fa92 	bl	8000b68 <HAL_GetTick>
 8001644:	4602      	mov	r2, r0
 8001646:	693b      	ldr	r3, [r7, #16]
 8001648:	1ad3      	subs	r3, r2, r3
 800164a:	2b02      	cmp	r3, #2
 800164c:	d901      	bls.n	8001652 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800164e:	2303      	movs	r3, #3
 8001650:	e1d4      	b.n	80019fc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001652:	4b41      	ldr	r3, [pc, #260]	@ (8001758 <HAL_RCC_OscConfig+0x504>)
 8001654:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001658:	f003 0302 	and.w	r3, r3, #2
 800165c:	2b00      	cmp	r3, #0
 800165e:	d0ef      	beq.n	8001640 <HAL_RCC_OscConfig+0x3ec>
 8001660:	e01b      	b.n	800169a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001662:	4b3d      	ldr	r3, [pc, #244]	@ (8001758 <HAL_RCC_OscConfig+0x504>)
 8001664:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001668:	4a3b      	ldr	r2, [pc, #236]	@ (8001758 <HAL_RCC_OscConfig+0x504>)
 800166a:	f023 0301 	bic.w	r3, r3, #1
 800166e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001672:	f7ff fa79 	bl	8000b68 <HAL_GetTick>
 8001676:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001678:	e008      	b.n	800168c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800167a:	f7ff fa75 	bl	8000b68 <HAL_GetTick>
 800167e:	4602      	mov	r2, r0
 8001680:	693b      	ldr	r3, [r7, #16]
 8001682:	1ad3      	subs	r3, r2, r3
 8001684:	2b02      	cmp	r3, #2
 8001686:	d901      	bls.n	800168c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001688:	2303      	movs	r3, #3
 800168a:	e1b7      	b.n	80019fc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800168c:	4b32      	ldr	r3, [pc, #200]	@ (8001758 <HAL_RCC_OscConfig+0x504>)
 800168e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001692:	f003 0302 	and.w	r3, r3, #2
 8001696:	2b00      	cmp	r3, #0
 8001698:	d1ef      	bne.n	800167a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f003 0304 	and.w	r3, r3, #4
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	f000 80a6 	beq.w	80017f4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016a8:	2300      	movs	r3, #0
 80016aa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80016ac:	4b2a      	ldr	r3, [pc, #168]	@ (8001758 <HAL_RCC_OscConfig+0x504>)
 80016ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d10d      	bne.n	80016d4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016b8:	4b27      	ldr	r3, [pc, #156]	@ (8001758 <HAL_RCC_OscConfig+0x504>)
 80016ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016bc:	4a26      	ldr	r2, [pc, #152]	@ (8001758 <HAL_RCC_OscConfig+0x504>)
 80016be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016c2:	6593      	str	r3, [r2, #88]	@ 0x58
 80016c4:	4b24      	ldr	r3, [pc, #144]	@ (8001758 <HAL_RCC_OscConfig+0x504>)
 80016c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016cc:	60bb      	str	r3, [r7, #8]
 80016ce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016d0:	2301      	movs	r3, #1
 80016d2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016d4:	4b21      	ldr	r3, [pc, #132]	@ (800175c <HAL_RCC_OscConfig+0x508>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d118      	bne.n	8001712 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80016e0:	4b1e      	ldr	r3, [pc, #120]	@ (800175c <HAL_RCC_OscConfig+0x508>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a1d      	ldr	r2, [pc, #116]	@ (800175c <HAL_RCC_OscConfig+0x508>)
 80016e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016ea:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016ec:	f7ff fa3c 	bl	8000b68 <HAL_GetTick>
 80016f0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016f2:	e008      	b.n	8001706 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016f4:	f7ff fa38 	bl	8000b68 <HAL_GetTick>
 80016f8:	4602      	mov	r2, r0
 80016fa:	693b      	ldr	r3, [r7, #16]
 80016fc:	1ad3      	subs	r3, r2, r3
 80016fe:	2b02      	cmp	r3, #2
 8001700:	d901      	bls.n	8001706 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001702:	2303      	movs	r3, #3
 8001704:	e17a      	b.n	80019fc <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001706:	4b15      	ldr	r3, [pc, #84]	@ (800175c <HAL_RCC_OscConfig+0x508>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800170e:	2b00      	cmp	r3, #0
 8001710:	d0f0      	beq.n	80016f4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	689b      	ldr	r3, [r3, #8]
 8001716:	2b01      	cmp	r3, #1
 8001718:	d108      	bne.n	800172c <HAL_RCC_OscConfig+0x4d8>
 800171a:	4b0f      	ldr	r3, [pc, #60]	@ (8001758 <HAL_RCC_OscConfig+0x504>)
 800171c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001720:	4a0d      	ldr	r2, [pc, #52]	@ (8001758 <HAL_RCC_OscConfig+0x504>)
 8001722:	f043 0301 	orr.w	r3, r3, #1
 8001726:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800172a:	e029      	b.n	8001780 <HAL_RCC_OscConfig+0x52c>
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	689b      	ldr	r3, [r3, #8]
 8001730:	2b05      	cmp	r3, #5
 8001732:	d115      	bne.n	8001760 <HAL_RCC_OscConfig+0x50c>
 8001734:	4b08      	ldr	r3, [pc, #32]	@ (8001758 <HAL_RCC_OscConfig+0x504>)
 8001736:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800173a:	4a07      	ldr	r2, [pc, #28]	@ (8001758 <HAL_RCC_OscConfig+0x504>)
 800173c:	f043 0304 	orr.w	r3, r3, #4
 8001740:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001744:	4b04      	ldr	r3, [pc, #16]	@ (8001758 <HAL_RCC_OscConfig+0x504>)
 8001746:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800174a:	4a03      	ldr	r2, [pc, #12]	@ (8001758 <HAL_RCC_OscConfig+0x504>)
 800174c:	f043 0301 	orr.w	r3, r3, #1
 8001750:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001754:	e014      	b.n	8001780 <HAL_RCC_OscConfig+0x52c>
 8001756:	bf00      	nop
 8001758:	40021000 	.word	0x40021000
 800175c:	40007000 	.word	0x40007000
 8001760:	4b9c      	ldr	r3, [pc, #624]	@ (80019d4 <HAL_RCC_OscConfig+0x780>)
 8001762:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001766:	4a9b      	ldr	r2, [pc, #620]	@ (80019d4 <HAL_RCC_OscConfig+0x780>)
 8001768:	f023 0301 	bic.w	r3, r3, #1
 800176c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001770:	4b98      	ldr	r3, [pc, #608]	@ (80019d4 <HAL_RCC_OscConfig+0x780>)
 8001772:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001776:	4a97      	ldr	r2, [pc, #604]	@ (80019d4 <HAL_RCC_OscConfig+0x780>)
 8001778:	f023 0304 	bic.w	r3, r3, #4
 800177c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	689b      	ldr	r3, [r3, #8]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d016      	beq.n	80017b6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001788:	f7ff f9ee 	bl	8000b68 <HAL_GetTick>
 800178c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800178e:	e00a      	b.n	80017a6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001790:	f7ff f9ea 	bl	8000b68 <HAL_GetTick>
 8001794:	4602      	mov	r2, r0
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800179e:	4293      	cmp	r3, r2
 80017a0:	d901      	bls.n	80017a6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80017a2:	2303      	movs	r3, #3
 80017a4:	e12a      	b.n	80019fc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017a6:	4b8b      	ldr	r3, [pc, #556]	@ (80019d4 <HAL_RCC_OscConfig+0x780>)
 80017a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017ac:	f003 0302 	and.w	r3, r3, #2
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d0ed      	beq.n	8001790 <HAL_RCC_OscConfig+0x53c>
 80017b4:	e015      	b.n	80017e2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017b6:	f7ff f9d7 	bl	8000b68 <HAL_GetTick>
 80017ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80017bc:	e00a      	b.n	80017d4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017be:	f7ff f9d3 	bl	8000b68 <HAL_GetTick>
 80017c2:	4602      	mov	r2, r0
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	1ad3      	subs	r3, r2, r3
 80017c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d901      	bls.n	80017d4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80017d0:	2303      	movs	r3, #3
 80017d2:	e113      	b.n	80019fc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80017d4:	4b7f      	ldr	r3, [pc, #508]	@ (80019d4 <HAL_RCC_OscConfig+0x780>)
 80017d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017da:	f003 0302 	and.w	r3, r3, #2
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d1ed      	bne.n	80017be <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80017e2:	7ffb      	ldrb	r3, [r7, #31]
 80017e4:	2b01      	cmp	r3, #1
 80017e6:	d105      	bne.n	80017f4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017e8:	4b7a      	ldr	r3, [pc, #488]	@ (80019d4 <HAL_RCC_OscConfig+0x780>)
 80017ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017ec:	4a79      	ldr	r2, [pc, #484]	@ (80019d4 <HAL_RCC_OscConfig+0x780>)
 80017ee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80017f2:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	f000 80fe 	beq.w	80019fa <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001802:	2b02      	cmp	r3, #2
 8001804:	f040 80d0 	bne.w	80019a8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001808:	4b72      	ldr	r3, [pc, #456]	@ (80019d4 <HAL_RCC_OscConfig+0x780>)
 800180a:	68db      	ldr	r3, [r3, #12]
 800180c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800180e:	697b      	ldr	r3, [r7, #20]
 8001810:	f003 0203 	and.w	r2, r3, #3
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001818:	429a      	cmp	r2, r3
 800181a:	d130      	bne.n	800187e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001826:	3b01      	subs	r3, #1
 8001828:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800182a:	429a      	cmp	r2, r3
 800182c:	d127      	bne.n	800187e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001838:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800183a:	429a      	cmp	r2, r3
 800183c:	d11f      	bne.n	800187e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800183e:	697b      	ldr	r3, [r7, #20]
 8001840:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001844:	687a      	ldr	r2, [r7, #4]
 8001846:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001848:	2a07      	cmp	r2, #7
 800184a:	bf14      	ite	ne
 800184c:	2201      	movne	r2, #1
 800184e:	2200      	moveq	r2, #0
 8001850:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001852:	4293      	cmp	r3, r2
 8001854:	d113      	bne.n	800187e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001860:	085b      	lsrs	r3, r3, #1
 8001862:	3b01      	subs	r3, #1
 8001864:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001866:	429a      	cmp	r2, r3
 8001868:	d109      	bne.n	800187e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001874:	085b      	lsrs	r3, r3, #1
 8001876:	3b01      	subs	r3, #1
 8001878:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800187a:	429a      	cmp	r2, r3
 800187c:	d06e      	beq.n	800195c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800187e:	69bb      	ldr	r3, [r7, #24]
 8001880:	2b0c      	cmp	r3, #12
 8001882:	d069      	beq.n	8001958 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001884:	4b53      	ldr	r3, [pc, #332]	@ (80019d4 <HAL_RCC_OscConfig+0x780>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800188c:	2b00      	cmp	r3, #0
 800188e:	d105      	bne.n	800189c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001890:	4b50      	ldr	r3, [pc, #320]	@ (80019d4 <HAL_RCC_OscConfig+0x780>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001898:	2b00      	cmp	r3, #0
 800189a:	d001      	beq.n	80018a0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800189c:	2301      	movs	r3, #1
 800189e:	e0ad      	b.n	80019fc <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80018a0:	4b4c      	ldr	r3, [pc, #304]	@ (80019d4 <HAL_RCC_OscConfig+0x780>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a4b      	ldr	r2, [pc, #300]	@ (80019d4 <HAL_RCC_OscConfig+0x780>)
 80018a6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80018aa:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80018ac:	f7ff f95c 	bl	8000b68 <HAL_GetTick>
 80018b0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018b2:	e008      	b.n	80018c6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018b4:	f7ff f958 	bl	8000b68 <HAL_GetTick>
 80018b8:	4602      	mov	r2, r0
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	2b02      	cmp	r3, #2
 80018c0:	d901      	bls.n	80018c6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80018c2:	2303      	movs	r3, #3
 80018c4:	e09a      	b.n	80019fc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018c6:	4b43      	ldr	r3, [pc, #268]	@ (80019d4 <HAL_RCC_OscConfig+0x780>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d1f0      	bne.n	80018b4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018d2:	4b40      	ldr	r3, [pc, #256]	@ (80019d4 <HAL_RCC_OscConfig+0x780>)
 80018d4:	68da      	ldr	r2, [r3, #12]
 80018d6:	4b40      	ldr	r3, [pc, #256]	@ (80019d8 <HAL_RCC_OscConfig+0x784>)
 80018d8:	4013      	ands	r3, r2
 80018da:	687a      	ldr	r2, [r7, #4]
 80018dc:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80018de:	687a      	ldr	r2, [r7, #4]
 80018e0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80018e2:	3a01      	subs	r2, #1
 80018e4:	0112      	lsls	r2, r2, #4
 80018e6:	4311      	orrs	r1, r2
 80018e8:	687a      	ldr	r2, [r7, #4]
 80018ea:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80018ec:	0212      	lsls	r2, r2, #8
 80018ee:	4311      	orrs	r1, r2
 80018f0:	687a      	ldr	r2, [r7, #4]
 80018f2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80018f4:	0852      	lsrs	r2, r2, #1
 80018f6:	3a01      	subs	r2, #1
 80018f8:	0552      	lsls	r2, r2, #21
 80018fa:	4311      	orrs	r1, r2
 80018fc:	687a      	ldr	r2, [r7, #4]
 80018fe:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001900:	0852      	lsrs	r2, r2, #1
 8001902:	3a01      	subs	r2, #1
 8001904:	0652      	lsls	r2, r2, #25
 8001906:	4311      	orrs	r1, r2
 8001908:	687a      	ldr	r2, [r7, #4]
 800190a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800190c:	0912      	lsrs	r2, r2, #4
 800190e:	0452      	lsls	r2, r2, #17
 8001910:	430a      	orrs	r2, r1
 8001912:	4930      	ldr	r1, [pc, #192]	@ (80019d4 <HAL_RCC_OscConfig+0x780>)
 8001914:	4313      	orrs	r3, r2
 8001916:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001918:	4b2e      	ldr	r3, [pc, #184]	@ (80019d4 <HAL_RCC_OscConfig+0x780>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a2d      	ldr	r2, [pc, #180]	@ (80019d4 <HAL_RCC_OscConfig+0x780>)
 800191e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001922:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001924:	4b2b      	ldr	r3, [pc, #172]	@ (80019d4 <HAL_RCC_OscConfig+0x780>)
 8001926:	68db      	ldr	r3, [r3, #12]
 8001928:	4a2a      	ldr	r2, [pc, #168]	@ (80019d4 <HAL_RCC_OscConfig+0x780>)
 800192a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800192e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001930:	f7ff f91a 	bl	8000b68 <HAL_GetTick>
 8001934:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001936:	e008      	b.n	800194a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001938:	f7ff f916 	bl	8000b68 <HAL_GetTick>
 800193c:	4602      	mov	r2, r0
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	1ad3      	subs	r3, r2, r3
 8001942:	2b02      	cmp	r3, #2
 8001944:	d901      	bls.n	800194a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001946:	2303      	movs	r3, #3
 8001948:	e058      	b.n	80019fc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800194a:	4b22      	ldr	r3, [pc, #136]	@ (80019d4 <HAL_RCC_OscConfig+0x780>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001952:	2b00      	cmp	r3, #0
 8001954:	d0f0      	beq.n	8001938 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001956:	e050      	b.n	80019fa <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001958:	2301      	movs	r3, #1
 800195a:	e04f      	b.n	80019fc <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800195c:	4b1d      	ldr	r3, [pc, #116]	@ (80019d4 <HAL_RCC_OscConfig+0x780>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001964:	2b00      	cmp	r3, #0
 8001966:	d148      	bne.n	80019fa <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001968:	4b1a      	ldr	r3, [pc, #104]	@ (80019d4 <HAL_RCC_OscConfig+0x780>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a19      	ldr	r2, [pc, #100]	@ (80019d4 <HAL_RCC_OscConfig+0x780>)
 800196e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001972:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001974:	4b17      	ldr	r3, [pc, #92]	@ (80019d4 <HAL_RCC_OscConfig+0x780>)
 8001976:	68db      	ldr	r3, [r3, #12]
 8001978:	4a16      	ldr	r2, [pc, #88]	@ (80019d4 <HAL_RCC_OscConfig+0x780>)
 800197a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800197e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001980:	f7ff f8f2 	bl	8000b68 <HAL_GetTick>
 8001984:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001986:	e008      	b.n	800199a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001988:	f7ff f8ee 	bl	8000b68 <HAL_GetTick>
 800198c:	4602      	mov	r2, r0
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	1ad3      	subs	r3, r2, r3
 8001992:	2b02      	cmp	r3, #2
 8001994:	d901      	bls.n	800199a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001996:	2303      	movs	r3, #3
 8001998:	e030      	b.n	80019fc <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800199a:	4b0e      	ldr	r3, [pc, #56]	@ (80019d4 <HAL_RCC_OscConfig+0x780>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d0f0      	beq.n	8001988 <HAL_RCC_OscConfig+0x734>
 80019a6:	e028      	b.n	80019fa <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80019a8:	69bb      	ldr	r3, [r7, #24]
 80019aa:	2b0c      	cmp	r3, #12
 80019ac:	d023      	beq.n	80019f6 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019ae:	4b09      	ldr	r3, [pc, #36]	@ (80019d4 <HAL_RCC_OscConfig+0x780>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4a08      	ldr	r2, [pc, #32]	@ (80019d4 <HAL_RCC_OscConfig+0x780>)
 80019b4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80019b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019ba:	f7ff f8d5 	bl	8000b68 <HAL_GetTick>
 80019be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019c0:	e00c      	b.n	80019dc <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019c2:	f7ff f8d1 	bl	8000b68 <HAL_GetTick>
 80019c6:	4602      	mov	r2, r0
 80019c8:	693b      	ldr	r3, [r7, #16]
 80019ca:	1ad3      	subs	r3, r2, r3
 80019cc:	2b02      	cmp	r3, #2
 80019ce:	d905      	bls.n	80019dc <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80019d0:	2303      	movs	r3, #3
 80019d2:	e013      	b.n	80019fc <HAL_RCC_OscConfig+0x7a8>
 80019d4:	40021000 	.word	0x40021000
 80019d8:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019dc:	4b09      	ldr	r3, [pc, #36]	@ (8001a04 <HAL_RCC_OscConfig+0x7b0>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d1ec      	bne.n	80019c2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80019e8:	4b06      	ldr	r3, [pc, #24]	@ (8001a04 <HAL_RCC_OscConfig+0x7b0>)
 80019ea:	68da      	ldr	r2, [r3, #12]
 80019ec:	4905      	ldr	r1, [pc, #20]	@ (8001a04 <HAL_RCC_OscConfig+0x7b0>)
 80019ee:	4b06      	ldr	r3, [pc, #24]	@ (8001a08 <HAL_RCC_OscConfig+0x7b4>)
 80019f0:	4013      	ands	r3, r2
 80019f2:	60cb      	str	r3, [r1, #12]
 80019f4:	e001      	b.n	80019fa <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	e000      	b.n	80019fc <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80019fa:	2300      	movs	r3, #0
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	3720      	adds	r7, #32
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	40021000 	.word	0x40021000
 8001a08:	feeefffc 	.word	0xfeeefffc

08001a0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b084      	sub	sp, #16
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
 8001a14:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d101      	bne.n	8001a20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	e0e7      	b.n	8001bf0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a20:	4b75      	ldr	r3, [pc, #468]	@ (8001bf8 <HAL_RCC_ClockConfig+0x1ec>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f003 0307 	and.w	r3, r3, #7
 8001a28:	683a      	ldr	r2, [r7, #0]
 8001a2a:	429a      	cmp	r2, r3
 8001a2c:	d910      	bls.n	8001a50 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a2e:	4b72      	ldr	r3, [pc, #456]	@ (8001bf8 <HAL_RCC_ClockConfig+0x1ec>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f023 0207 	bic.w	r2, r3, #7
 8001a36:	4970      	ldr	r1, [pc, #448]	@ (8001bf8 <HAL_RCC_ClockConfig+0x1ec>)
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a3e:	4b6e      	ldr	r3, [pc, #440]	@ (8001bf8 <HAL_RCC_ClockConfig+0x1ec>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f003 0307 	and.w	r3, r3, #7
 8001a46:	683a      	ldr	r2, [r7, #0]
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	d001      	beq.n	8001a50 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	e0cf      	b.n	8001bf0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f003 0302 	and.w	r3, r3, #2
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d010      	beq.n	8001a7e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	689a      	ldr	r2, [r3, #8]
 8001a60:	4b66      	ldr	r3, [pc, #408]	@ (8001bfc <HAL_RCC_ClockConfig+0x1f0>)
 8001a62:	689b      	ldr	r3, [r3, #8]
 8001a64:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	d908      	bls.n	8001a7e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a6c:	4b63      	ldr	r3, [pc, #396]	@ (8001bfc <HAL_RCC_ClockConfig+0x1f0>)
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	4960      	ldr	r1, [pc, #384]	@ (8001bfc <HAL_RCC_ClockConfig+0x1f0>)
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f003 0301 	and.w	r3, r3, #1
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d04c      	beq.n	8001b24 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	2b03      	cmp	r3, #3
 8001a90:	d107      	bne.n	8001aa2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a92:	4b5a      	ldr	r3, [pc, #360]	@ (8001bfc <HAL_RCC_ClockConfig+0x1f0>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d121      	bne.n	8001ae2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e0a6      	b.n	8001bf0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	2b02      	cmp	r3, #2
 8001aa8:	d107      	bne.n	8001aba <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001aaa:	4b54      	ldr	r3, [pc, #336]	@ (8001bfc <HAL_RCC_ClockConfig+0x1f0>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d115      	bne.n	8001ae2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e09a      	b.n	8001bf0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d107      	bne.n	8001ad2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ac2:	4b4e      	ldr	r3, [pc, #312]	@ (8001bfc <HAL_RCC_ClockConfig+0x1f0>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f003 0302 	and.w	r3, r3, #2
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d109      	bne.n	8001ae2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e08e      	b.n	8001bf0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ad2:	4b4a      	ldr	r3, [pc, #296]	@ (8001bfc <HAL_RCC_ClockConfig+0x1f0>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d101      	bne.n	8001ae2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	e086      	b.n	8001bf0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001ae2:	4b46      	ldr	r3, [pc, #280]	@ (8001bfc <HAL_RCC_ClockConfig+0x1f0>)
 8001ae4:	689b      	ldr	r3, [r3, #8]
 8001ae6:	f023 0203 	bic.w	r2, r3, #3
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	4943      	ldr	r1, [pc, #268]	@ (8001bfc <HAL_RCC_ClockConfig+0x1f0>)
 8001af0:	4313      	orrs	r3, r2
 8001af2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001af4:	f7ff f838 	bl	8000b68 <HAL_GetTick>
 8001af8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001afa:	e00a      	b.n	8001b12 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001afc:	f7ff f834 	bl	8000b68 <HAL_GetTick>
 8001b00:	4602      	mov	r2, r0
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	1ad3      	subs	r3, r2, r3
 8001b06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d901      	bls.n	8001b12 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001b0e:	2303      	movs	r3, #3
 8001b10:	e06e      	b.n	8001bf0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b12:	4b3a      	ldr	r3, [pc, #232]	@ (8001bfc <HAL_RCC_ClockConfig+0x1f0>)
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	f003 020c 	and.w	r2, r3, #12
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	009b      	lsls	r3, r3, #2
 8001b20:	429a      	cmp	r2, r3
 8001b22:	d1eb      	bne.n	8001afc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f003 0302 	and.w	r3, r3, #2
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d010      	beq.n	8001b52 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	689a      	ldr	r2, [r3, #8]
 8001b34:	4b31      	ldr	r3, [pc, #196]	@ (8001bfc <HAL_RCC_ClockConfig+0x1f0>)
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	d208      	bcs.n	8001b52 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b40:	4b2e      	ldr	r3, [pc, #184]	@ (8001bfc <HAL_RCC_ClockConfig+0x1f0>)
 8001b42:	689b      	ldr	r3, [r3, #8]
 8001b44:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	492b      	ldr	r1, [pc, #172]	@ (8001bfc <HAL_RCC_ClockConfig+0x1f0>)
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b52:	4b29      	ldr	r3, [pc, #164]	@ (8001bf8 <HAL_RCC_ClockConfig+0x1ec>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f003 0307 	and.w	r3, r3, #7
 8001b5a:	683a      	ldr	r2, [r7, #0]
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	d210      	bcs.n	8001b82 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b60:	4b25      	ldr	r3, [pc, #148]	@ (8001bf8 <HAL_RCC_ClockConfig+0x1ec>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f023 0207 	bic.w	r2, r3, #7
 8001b68:	4923      	ldr	r1, [pc, #140]	@ (8001bf8 <HAL_RCC_ClockConfig+0x1ec>)
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b70:	4b21      	ldr	r3, [pc, #132]	@ (8001bf8 <HAL_RCC_ClockConfig+0x1ec>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f003 0307 	and.w	r3, r3, #7
 8001b78:	683a      	ldr	r2, [r7, #0]
 8001b7a:	429a      	cmp	r2, r3
 8001b7c:	d001      	beq.n	8001b82 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e036      	b.n	8001bf0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f003 0304 	and.w	r3, r3, #4
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d008      	beq.n	8001ba0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b8e:	4b1b      	ldr	r3, [pc, #108]	@ (8001bfc <HAL_RCC_ClockConfig+0x1f0>)
 8001b90:	689b      	ldr	r3, [r3, #8]
 8001b92:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	68db      	ldr	r3, [r3, #12]
 8001b9a:	4918      	ldr	r1, [pc, #96]	@ (8001bfc <HAL_RCC_ClockConfig+0x1f0>)
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f003 0308 	and.w	r3, r3, #8
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d009      	beq.n	8001bc0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001bac:	4b13      	ldr	r3, [pc, #76]	@ (8001bfc <HAL_RCC_ClockConfig+0x1f0>)
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	691b      	ldr	r3, [r3, #16]
 8001bb8:	00db      	lsls	r3, r3, #3
 8001bba:	4910      	ldr	r1, [pc, #64]	@ (8001bfc <HAL_RCC_ClockConfig+0x1f0>)
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001bc0:	f000 f824 	bl	8001c0c <HAL_RCC_GetSysClockFreq>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	4b0d      	ldr	r3, [pc, #52]	@ (8001bfc <HAL_RCC_ClockConfig+0x1f0>)
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	091b      	lsrs	r3, r3, #4
 8001bcc:	f003 030f 	and.w	r3, r3, #15
 8001bd0:	490b      	ldr	r1, [pc, #44]	@ (8001c00 <HAL_RCC_ClockConfig+0x1f4>)
 8001bd2:	5ccb      	ldrb	r3, [r1, r3]
 8001bd4:	f003 031f 	and.w	r3, r3, #31
 8001bd8:	fa22 f303 	lsr.w	r3, r2, r3
 8001bdc:	4a09      	ldr	r2, [pc, #36]	@ (8001c04 <HAL_RCC_ClockConfig+0x1f8>)
 8001bde:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001be0:	4b09      	ldr	r3, [pc, #36]	@ (8001c08 <HAL_RCC_ClockConfig+0x1fc>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4618      	mov	r0, r3
 8001be6:	f7fe ff83 	bl	8000af0 <HAL_InitTick>
 8001bea:	4603      	mov	r3, r0
 8001bec:	72fb      	strb	r3, [r7, #11]

  return status;
 8001bee:	7afb      	ldrb	r3, [r7, #11]
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	3710      	adds	r7, #16
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	40022000 	.word	0x40022000
 8001bfc:	40021000 	.word	0x40021000
 8001c00:	08005d1c 	.word	0x08005d1c
 8001c04:	20000000 	.word	0x20000000
 8001c08:	20000004 	.word	0x20000004

08001c0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b089      	sub	sp, #36	@ 0x24
 8001c10:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001c12:	2300      	movs	r3, #0
 8001c14:	61fb      	str	r3, [r7, #28]
 8001c16:	2300      	movs	r3, #0
 8001c18:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c1a:	4b3e      	ldr	r3, [pc, #248]	@ (8001d14 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	f003 030c 	and.w	r3, r3, #12
 8001c22:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c24:	4b3b      	ldr	r3, [pc, #236]	@ (8001d14 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c26:	68db      	ldr	r3, [r3, #12]
 8001c28:	f003 0303 	and.w	r3, r3, #3
 8001c2c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d005      	beq.n	8001c40 <HAL_RCC_GetSysClockFreq+0x34>
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	2b0c      	cmp	r3, #12
 8001c38:	d121      	bne.n	8001c7e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	2b01      	cmp	r3, #1
 8001c3e:	d11e      	bne.n	8001c7e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001c40:	4b34      	ldr	r3, [pc, #208]	@ (8001d14 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f003 0308 	and.w	r3, r3, #8
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d107      	bne.n	8001c5c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001c4c:	4b31      	ldr	r3, [pc, #196]	@ (8001d14 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001c52:	0a1b      	lsrs	r3, r3, #8
 8001c54:	f003 030f 	and.w	r3, r3, #15
 8001c58:	61fb      	str	r3, [r7, #28]
 8001c5a:	e005      	b.n	8001c68 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001c5c:	4b2d      	ldr	r3, [pc, #180]	@ (8001d14 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	091b      	lsrs	r3, r3, #4
 8001c62:	f003 030f 	and.w	r3, r3, #15
 8001c66:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001c68:	4a2b      	ldr	r2, [pc, #172]	@ (8001d18 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001c6a:	69fb      	ldr	r3, [r7, #28]
 8001c6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c70:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d10d      	bne.n	8001c94 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001c78:	69fb      	ldr	r3, [r7, #28]
 8001c7a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c7c:	e00a      	b.n	8001c94 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	2b04      	cmp	r3, #4
 8001c82:	d102      	bne.n	8001c8a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001c84:	4b25      	ldr	r3, [pc, #148]	@ (8001d1c <HAL_RCC_GetSysClockFreq+0x110>)
 8001c86:	61bb      	str	r3, [r7, #24]
 8001c88:	e004      	b.n	8001c94 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	2b08      	cmp	r3, #8
 8001c8e:	d101      	bne.n	8001c94 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001c90:	4b23      	ldr	r3, [pc, #140]	@ (8001d20 <HAL_RCC_GetSysClockFreq+0x114>)
 8001c92:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001c94:	693b      	ldr	r3, [r7, #16]
 8001c96:	2b0c      	cmp	r3, #12
 8001c98:	d134      	bne.n	8001d04 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001c9a:	4b1e      	ldr	r3, [pc, #120]	@ (8001d14 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c9c:	68db      	ldr	r3, [r3, #12]
 8001c9e:	f003 0303 	and.w	r3, r3, #3
 8001ca2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	2b02      	cmp	r3, #2
 8001ca8:	d003      	beq.n	8001cb2 <HAL_RCC_GetSysClockFreq+0xa6>
 8001caa:	68bb      	ldr	r3, [r7, #8]
 8001cac:	2b03      	cmp	r3, #3
 8001cae:	d003      	beq.n	8001cb8 <HAL_RCC_GetSysClockFreq+0xac>
 8001cb0:	e005      	b.n	8001cbe <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001cb2:	4b1a      	ldr	r3, [pc, #104]	@ (8001d1c <HAL_RCC_GetSysClockFreq+0x110>)
 8001cb4:	617b      	str	r3, [r7, #20]
      break;
 8001cb6:	e005      	b.n	8001cc4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001cb8:	4b19      	ldr	r3, [pc, #100]	@ (8001d20 <HAL_RCC_GetSysClockFreq+0x114>)
 8001cba:	617b      	str	r3, [r7, #20]
      break;
 8001cbc:	e002      	b.n	8001cc4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001cbe:	69fb      	ldr	r3, [r7, #28]
 8001cc0:	617b      	str	r3, [r7, #20]
      break;
 8001cc2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001cc4:	4b13      	ldr	r3, [pc, #76]	@ (8001d14 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cc6:	68db      	ldr	r3, [r3, #12]
 8001cc8:	091b      	lsrs	r3, r3, #4
 8001cca:	f003 0307 	and.w	r3, r3, #7
 8001cce:	3301      	adds	r3, #1
 8001cd0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001cd2:	4b10      	ldr	r3, [pc, #64]	@ (8001d14 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cd4:	68db      	ldr	r3, [r3, #12]
 8001cd6:	0a1b      	lsrs	r3, r3, #8
 8001cd8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001cdc:	697a      	ldr	r2, [r7, #20]
 8001cde:	fb03 f202 	mul.w	r2, r3, r2
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ce8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001cea:	4b0a      	ldr	r3, [pc, #40]	@ (8001d14 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cec:	68db      	ldr	r3, [r3, #12]
 8001cee:	0e5b      	lsrs	r3, r3, #25
 8001cf0:	f003 0303 	and.w	r3, r3, #3
 8001cf4:	3301      	adds	r3, #1
 8001cf6:	005b      	lsls	r3, r3, #1
 8001cf8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001cfa:	697a      	ldr	r2, [r7, #20]
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d02:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001d04:	69bb      	ldr	r3, [r7, #24]
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	3724      	adds	r7, #36	@ 0x24
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr
 8001d12:	bf00      	nop
 8001d14:	40021000 	.word	0x40021000
 8001d18:	08005d34 	.word	0x08005d34
 8001d1c:	00f42400 	.word	0x00f42400
 8001d20:	007a1200 	.word	0x007a1200

08001d24 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d24:	b480      	push	{r7}
 8001d26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d28:	4b03      	ldr	r3, [pc, #12]	@ (8001d38 <HAL_RCC_GetHCLKFreq+0x14>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr
 8001d36:	bf00      	nop
 8001d38:	20000000 	.word	0x20000000

08001d3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001d40:	f7ff fff0 	bl	8001d24 <HAL_RCC_GetHCLKFreq>
 8001d44:	4602      	mov	r2, r0
 8001d46:	4b06      	ldr	r3, [pc, #24]	@ (8001d60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	0a1b      	lsrs	r3, r3, #8
 8001d4c:	f003 0307 	and.w	r3, r3, #7
 8001d50:	4904      	ldr	r1, [pc, #16]	@ (8001d64 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001d52:	5ccb      	ldrb	r3, [r1, r3]
 8001d54:	f003 031f 	and.w	r3, r3, #31
 8001d58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	40021000 	.word	0x40021000
 8001d64:	08005d2c 	.word	0x08005d2c

08001d68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001d6c:	f7ff ffda 	bl	8001d24 <HAL_RCC_GetHCLKFreq>
 8001d70:	4602      	mov	r2, r0
 8001d72:	4b06      	ldr	r3, [pc, #24]	@ (8001d8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d74:	689b      	ldr	r3, [r3, #8]
 8001d76:	0adb      	lsrs	r3, r3, #11
 8001d78:	f003 0307 	and.w	r3, r3, #7
 8001d7c:	4904      	ldr	r1, [pc, #16]	@ (8001d90 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001d7e:	5ccb      	ldrb	r3, [r1, r3]
 8001d80:	f003 031f 	and.w	r3, r3, #31
 8001d84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	40021000 	.word	0x40021000
 8001d90:	08005d2c 	.word	0x08005d2c

08001d94 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b086      	sub	sp, #24
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001da0:	4b2a      	ldr	r3, [pc, #168]	@ (8001e4c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001da2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001da4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d003      	beq.n	8001db4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001dac:	f7ff f9ee 	bl	800118c <HAL_PWREx_GetVoltageRange>
 8001db0:	6178      	str	r0, [r7, #20]
 8001db2:	e014      	b.n	8001dde <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001db4:	4b25      	ldr	r3, [pc, #148]	@ (8001e4c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001db6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001db8:	4a24      	ldr	r2, [pc, #144]	@ (8001e4c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001dba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001dbe:	6593      	str	r3, [r2, #88]	@ 0x58
 8001dc0:	4b22      	ldr	r3, [pc, #136]	@ (8001e4c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001dc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dc4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dc8:	60fb      	str	r3, [r7, #12]
 8001dca:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001dcc:	f7ff f9de 	bl	800118c <HAL_PWREx_GetVoltageRange>
 8001dd0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001dd2:	4b1e      	ldr	r3, [pc, #120]	@ (8001e4c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001dd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dd6:	4a1d      	ldr	r2, [pc, #116]	@ (8001e4c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001dd8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001ddc:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001de4:	d10b      	bne.n	8001dfe <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2b80      	cmp	r3, #128	@ 0x80
 8001dea:	d919      	bls.n	8001e20 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2ba0      	cmp	r3, #160	@ 0xa0
 8001df0:	d902      	bls.n	8001df8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001df2:	2302      	movs	r3, #2
 8001df4:	613b      	str	r3, [r7, #16]
 8001df6:	e013      	b.n	8001e20 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001df8:	2301      	movs	r3, #1
 8001dfa:	613b      	str	r3, [r7, #16]
 8001dfc:	e010      	b.n	8001e20 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2b80      	cmp	r3, #128	@ 0x80
 8001e02:	d902      	bls.n	8001e0a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001e04:	2303      	movs	r3, #3
 8001e06:	613b      	str	r3, [r7, #16]
 8001e08:	e00a      	b.n	8001e20 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2b80      	cmp	r3, #128	@ 0x80
 8001e0e:	d102      	bne.n	8001e16 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001e10:	2302      	movs	r3, #2
 8001e12:	613b      	str	r3, [r7, #16]
 8001e14:	e004      	b.n	8001e20 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2b70      	cmp	r3, #112	@ 0x70
 8001e1a:	d101      	bne.n	8001e20 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001e20:	4b0b      	ldr	r3, [pc, #44]	@ (8001e50 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f023 0207 	bic.w	r2, r3, #7
 8001e28:	4909      	ldr	r1, [pc, #36]	@ (8001e50 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001e30:	4b07      	ldr	r3, [pc, #28]	@ (8001e50 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f003 0307 	and.w	r3, r3, #7
 8001e38:	693a      	ldr	r2, [r7, #16]
 8001e3a:	429a      	cmp	r2, r3
 8001e3c:	d001      	beq.n	8001e42 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e000      	b.n	8001e44 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001e42:	2300      	movs	r3, #0
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	3718      	adds	r7, #24
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	40021000 	.word	0x40021000
 8001e50:	40022000 	.word	0x40022000

08001e54 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b086      	sub	sp, #24
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001e60:	2300      	movs	r3, #0
 8001e62:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d041      	beq.n	8001ef4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001e74:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001e78:	d02a      	beq.n	8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001e7a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001e7e:	d824      	bhi.n	8001eca <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001e80:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001e84:	d008      	beq.n	8001e98 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001e86:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001e8a:	d81e      	bhi.n	8001eca <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d00a      	beq.n	8001ea6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001e90:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001e94:	d010      	beq.n	8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001e96:	e018      	b.n	8001eca <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001e98:	4b86      	ldr	r3, [pc, #536]	@ (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e9a:	68db      	ldr	r3, [r3, #12]
 8001e9c:	4a85      	ldr	r2, [pc, #532]	@ (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e9e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ea2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001ea4:	e015      	b.n	8001ed2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	3304      	adds	r3, #4
 8001eaa:	2100      	movs	r1, #0
 8001eac:	4618      	mov	r0, r3
 8001eae:	f000 fabb 	bl	8002428 <RCCEx_PLLSAI1_Config>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001eb6:	e00c      	b.n	8001ed2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	3320      	adds	r3, #32
 8001ebc:	2100      	movs	r1, #0
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f000 fba6 	bl	8002610 <RCCEx_PLLSAI2_Config>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001ec8:	e003      	b.n	8001ed2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	74fb      	strb	r3, [r7, #19]
      break;
 8001ece:	e000      	b.n	8001ed2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001ed0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001ed2:	7cfb      	ldrb	r3, [r7, #19]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d10b      	bne.n	8001ef0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001ed8:	4b76      	ldr	r3, [pc, #472]	@ (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001eda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ede:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001ee6:	4973      	ldr	r1, [pc, #460]	@ (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8001eee:	e001      	b.n	8001ef4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001ef0:	7cfb      	ldrb	r3, [r7, #19]
 8001ef2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d041      	beq.n	8001f84 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001f04:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8001f08:	d02a      	beq.n	8001f60 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8001f0a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8001f0e:	d824      	bhi.n	8001f5a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001f10:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001f14:	d008      	beq.n	8001f28 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001f16:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001f1a:	d81e      	bhi.n	8001f5a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d00a      	beq.n	8001f36 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8001f20:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f24:	d010      	beq.n	8001f48 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001f26:	e018      	b.n	8001f5a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001f28:	4b62      	ldr	r3, [pc, #392]	@ (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f2a:	68db      	ldr	r3, [r3, #12]
 8001f2c:	4a61      	ldr	r2, [pc, #388]	@ (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f2e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f32:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001f34:	e015      	b.n	8001f62 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	3304      	adds	r3, #4
 8001f3a:	2100      	movs	r1, #0
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f000 fa73 	bl	8002428 <RCCEx_PLLSAI1_Config>
 8001f42:	4603      	mov	r3, r0
 8001f44:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001f46:	e00c      	b.n	8001f62 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	3320      	adds	r3, #32
 8001f4c:	2100      	movs	r1, #0
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f000 fb5e 	bl	8002610 <RCCEx_PLLSAI2_Config>
 8001f54:	4603      	mov	r3, r0
 8001f56:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001f58:	e003      	b.n	8001f62 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	74fb      	strb	r3, [r7, #19]
      break;
 8001f5e:	e000      	b.n	8001f62 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8001f60:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001f62:	7cfb      	ldrb	r3, [r7, #19]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d10b      	bne.n	8001f80 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001f68:	4b52      	ldr	r3, [pc, #328]	@ (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f6e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001f76:	494f      	ldr	r1, [pc, #316]	@ (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8001f7e:	e001      	b.n	8001f84 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f80:	7cfb      	ldrb	r3, [r7, #19]
 8001f82:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	f000 80a0 	beq.w	80020d2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f92:	2300      	movs	r3, #0
 8001f94:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001f96:	4b47      	ldr	r3, [pc, #284]	@ (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d101      	bne.n	8001fa6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e000      	b.n	8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d00d      	beq.n	8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fac:	4b41      	ldr	r3, [pc, #260]	@ (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fb0:	4a40      	ldr	r2, [pc, #256]	@ (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fb2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fb6:	6593      	str	r3, [r2, #88]	@ 0x58
 8001fb8:	4b3e      	ldr	r3, [pc, #248]	@ (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fbc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fc0:	60bb      	str	r3, [r7, #8]
 8001fc2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001fc8:	4b3b      	ldr	r3, [pc, #236]	@ (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a3a      	ldr	r2, [pc, #232]	@ (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001fce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fd2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001fd4:	f7fe fdc8 	bl	8000b68 <HAL_GetTick>
 8001fd8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001fda:	e009      	b.n	8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fdc:	f7fe fdc4 	bl	8000b68 <HAL_GetTick>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	1ad3      	subs	r3, r2, r3
 8001fe6:	2b02      	cmp	r3, #2
 8001fe8:	d902      	bls.n	8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8001fea:	2303      	movs	r3, #3
 8001fec:	74fb      	strb	r3, [r7, #19]
        break;
 8001fee:	e005      	b.n	8001ffc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001ff0:	4b31      	ldr	r3, [pc, #196]	@ (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d0ef      	beq.n	8001fdc <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8001ffc:	7cfb      	ldrb	r3, [r7, #19]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d15c      	bne.n	80020bc <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002002:	4b2c      	ldr	r3, [pc, #176]	@ (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002004:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002008:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800200c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d01f      	beq.n	8002054 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800201a:	697a      	ldr	r2, [r7, #20]
 800201c:	429a      	cmp	r2, r3
 800201e:	d019      	beq.n	8002054 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002020:	4b24      	ldr	r3, [pc, #144]	@ (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002022:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002026:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800202a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800202c:	4b21      	ldr	r3, [pc, #132]	@ (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800202e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002032:	4a20      	ldr	r2, [pc, #128]	@ (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002034:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002038:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800203c:	4b1d      	ldr	r3, [pc, #116]	@ (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800203e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002042:	4a1c      	ldr	r2, [pc, #112]	@ (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002044:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002048:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800204c:	4a19      	ldr	r2, [pc, #100]	@ (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	f003 0301 	and.w	r3, r3, #1
 800205a:	2b00      	cmp	r3, #0
 800205c:	d016      	beq.n	800208c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800205e:	f7fe fd83 	bl	8000b68 <HAL_GetTick>
 8002062:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002064:	e00b      	b.n	800207e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002066:	f7fe fd7f 	bl	8000b68 <HAL_GetTick>
 800206a:	4602      	mov	r2, r0
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	1ad3      	subs	r3, r2, r3
 8002070:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002074:	4293      	cmp	r3, r2
 8002076:	d902      	bls.n	800207e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002078:	2303      	movs	r3, #3
 800207a:	74fb      	strb	r3, [r7, #19]
            break;
 800207c:	e006      	b.n	800208c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800207e:	4b0d      	ldr	r3, [pc, #52]	@ (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002080:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002084:	f003 0302 	and.w	r3, r3, #2
 8002088:	2b00      	cmp	r3, #0
 800208a:	d0ec      	beq.n	8002066 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800208c:	7cfb      	ldrb	r3, [r7, #19]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d10c      	bne.n	80020ac <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002092:	4b08      	ldr	r3, [pc, #32]	@ (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002094:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002098:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80020a2:	4904      	ldr	r1, [pc, #16]	@ (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020a4:	4313      	orrs	r3, r2
 80020a6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80020aa:	e009      	b.n	80020c0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80020ac:	7cfb      	ldrb	r3, [r7, #19]
 80020ae:	74bb      	strb	r3, [r7, #18]
 80020b0:	e006      	b.n	80020c0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80020b2:	bf00      	nop
 80020b4:	40021000 	.word	0x40021000
 80020b8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80020bc:	7cfb      	ldrb	r3, [r7, #19]
 80020be:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80020c0:	7c7b      	ldrb	r3, [r7, #17]
 80020c2:	2b01      	cmp	r3, #1
 80020c4:	d105      	bne.n	80020d2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020c6:	4b9e      	ldr	r3, [pc, #632]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020ca:	4a9d      	ldr	r2, [pc, #628]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020cc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80020d0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 0301 	and.w	r3, r3, #1
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d00a      	beq.n	80020f4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80020de:	4b98      	ldr	r3, [pc, #608]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020e4:	f023 0203 	bic.w	r2, r3, #3
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020ec:	4994      	ldr	r1, [pc, #592]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020ee:	4313      	orrs	r3, r2
 80020f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f003 0302 	and.w	r3, r3, #2
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d00a      	beq.n	8002116 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002100:	4b8f      	ldr	r3, [pc, #572]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002102:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002106:	f023 020c 	bic.w	r2, r3, #12
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800210e:	498c      	ldr	r1, [pc, #560]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002110:	4313      	orrs	r3, r2
 8002112:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 0304 	and.w	r3, r3, #4
 800211e:	2b00      	cmp	r3, #0
 8002120:	d00a      	beq.n	8002138 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002122:	4b87      	ldr	r3, [pc, #540]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002124:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002128:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002130:	4983      	ldr	r1, [pc, #524]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002132:	4313      	orrs	r3, r2
 8002134:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f003 0308 	and.w	r3, r3, #8
 8002140:	2b00      	cmp	r3, #0
 8002142:	d00a      	beq.n	800215a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002144:	4b7e      	ldr	r3, [pc, #504]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002146:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800214a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002152:	497b      	ldr	r1, [pc, #492]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002154:	4313      	orrs	r3, r2
 8002156:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 0310 	and.w	r3, r3, #16
 8002162:	2b00      	cmp	r3, #0
 8002164:	d00a      	beq.n	800217c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002166:	4b76      	ldr	r3, [pc, #472]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002168:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800216c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002174:	4972      	ldr	r1, [pc, #456]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002176:	4313      	orrs	r3, r2
 8002178:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f003 0320 	and.w	r3, r3, #32
 8002184:	2b00      	cmp	r3, #0
 8002186:	d00a      	beq.n	800219e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002188:	4b6d      	ldr	r3, [pc, #436]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800218a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800218e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002196:	496a      	ldr	r1, [pc, #424]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002198:	4313      	orrs	r3, r2
 800219a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d00a      	beq.n	80021c0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80021aa:	4b65      	ldr	r3, [pc, #404]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021b0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021b8:	4961      	ldr	r1, [pc, #388]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021ba:	4313      	orrs	r3, r2
 80021bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d00a      	beq.n	80021e2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80021cc:	4b5c      	ldr	r3, [pc, #368]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021d2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021da:	4959      	ldr	r1, [pc, #356]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021dc:	4313      	orrs	r3, r2
 80021de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d00a      	beq.n	8002204 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80021ee:	4b54      	ldr	r3, [pc, #336]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021f4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80021fc:	4950      	ldr	r1, [pc, #320]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021fe:	4313      	orrs	r3, r2
 8002200:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800220c:	2b00      	cmp	r3, #0
 800220e:	d00a      	beq.n	8002226 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002210:	4b4b      	ldr	r3, [pc, #300]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002212:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002216:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800221e:	4948      	ldr	r1, [pc, #288]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002220:	4313      	orrs	r3, r2
 8002222:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800222e:	2b00      	cmp	r3, #0
 8002230:	d00a      	beq.n	8002248 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002232:	4b43      	ldr	r3, [pc, #268]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002234:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002238:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002240:	493f      	ldr	r1, [pc, #252]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002242:	4313      	orrs	r3, r2
 8002244:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002250:	2b00      	cmp	r3, #0
 8002252:	d028      	beq.n	80022a6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002254:	4b3a      	ldr	r3, [pc, #232]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002256:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800225a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002262:	4937      	ldr	r1, [pc, #220]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002264:	4313      	orrs	r3, r2
 8002266:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800226e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002272:	d106      	bne.n	8002282 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002274:	4b32      	ldr	r3, [pc, #200]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002276:	68db      	ldr	r3, [r3, #12]
 8002278:	4a31      	ldr	r2, [pc, #196]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800227a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800227e:	60d3      	str	r3, [r2, #12]
 8002280:	e011      	b.n	80022a6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002286:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800228a:	d10c      	bne.n	80022a6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	3304      	adds	r3, #4
 8002290:	2101      	movs	r1, #1
 8002292:	4618      	mov	r0, r3
 8002294:	f000 f8c8 	bl	8002428 <RCCEx_PLLSAI1_Config>
 8002298:	4603      	mov	r3, r0
 800229a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800229c:	7cfb      	ldrb	r3, [r7, #19]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d001      	beq.n	80022a6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80022a2:	7cfb      	ldrb	r3, [r7, #19]
 80022a4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d028      	beq.n	8002304 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80022b2:	4b23      	ldr	r3, [pc, #140]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022b8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022c0:	491f      	ldr	r1, [pc, #124]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022c2:	4313      	orrs	r3, r2
 80022c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022cc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80022d0:	d106      	bne.n	80022e0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022d2:	4b1b      	ldr	r3, [pc, #108]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022d4:	68db      	ldr	r3, [r3, #12]
 80022d6:	4a1a      	ldr	r2, [pc, #104]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022d8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80022dc:	60d3      	str	r3, [r2, #12]
 80022de:	e011      	b.n	8002304 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022e4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80022e8:	d10c      	bne.n	8002304 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	3304      	adds	r3, #4
 80022ee:	2101      	movs	r1, #1
 80022f0:	4618      	mov	r0, r3
 80022f2:	f000 f899 	bl	8002428 <RCCEx_PLLSAI1_Config>
 80022f6:	4603      	mov	r3, r0
 80022f8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80022fa:	7cfb      	ldrb	r3, [r7, #19]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d001      	beq.n	8002304 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002300:	7cfb      	ldrb	r3, [r7, #19]
 8002302:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800230c:	2b00      	cmp	r3, #0
 800230e:	d02b      	beq.n	8002368 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002310:	4b0b      	ldr	r3, [pc, #44]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002312:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002316:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800231e:	4908      	ldr	r1, [pc, #32]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002320:	4313      	orrs	r3, r2
 8002322:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800232a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800232e:	d109      	bne.n	8002344 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002330:	4b03      	ldr	r3, [pc, #12]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002332:	68db      	ldr	r3, [r3, #12]
 8002334:	4a02      	ldr	r2, [pc, #8]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002336:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800233a:	60d3      	str	r3, [r2, #12]
 800233c:	e014      	b.n	8002368 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800233e:	bf00      	nop
 8002340:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002348:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800234c:	d10c      	bne.n	8002368 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	3304      	adds	r3, #4
 8002352:	2101      	movs	r1, #1
 8002354:	4618      	mov	r0, r3
 8002356:	f000 f867 	bl	8002428 <RCCEx_PLLSAI1_Config>
 800235a:	4603      	mov	r3, r0
 800235c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800235e:	7cfb      	ldrb	r3, [r7, #19]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d001      	beq.n	8002368 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002364:	7cfb      	ldrb	r3, [r7, #19]
 8002366:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002370:	2b00      	cmp	r3, #0
 8002372:	d02f      	beq.n	80023d4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002374:	4b2b      	ldr	r3, [pc, #172]	@ (8002424 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002376:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800237a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002382:	4928      	ldr	r1, [pc, #160]	@ (8002424 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002384:	4313      	orrs	r3, r2
 8002386:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800238e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002392:	d10d      	bne.n	80023b0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	3304      	adds	r3, #4
 8002398:	2102      	movs	r1, #2
 800239a:	4618      	mov	r0, r3
 800239c:	f000 f844 	bl	8002428 <RCCEx_PLLSAI1_Config>
 80023a0:	4603      	mov	r3, r0
 80023a2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80023a4:	7cfb      	ldrb	r3, [r7, #19]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d014      	beq.n	80023d4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80023aa:	7cfb      	ldrb	r3, [r7, #19]
 80023ac:	74bb      	strb	r3, [r7, #18]
 80023ae:	e011      	b.n	80023d4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80023b4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80023b8:	d10c      	bne.n	80023d4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	3320      	adds	r3, #32
 80023be:	2102      	movs	r1, #2
 80023c0:	4618      	mov	r0, r3
 80023c2:	f000 f925 	bl	8002610 <RCCEx_PLLSAI2_Config>
 80023c6:	4603      	mov	r3, r0
 80023c8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80023ca:	7cfb      	ldrb	r3, [r7, #19]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d001      	beq.n	80023d4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80023d0:	7cfb      	ldrb	r3, [r7, #19]
 80023d2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d00a      	beq.n	80023f6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80023e0:	4b10      	ldr	r3, [pc, #64]	@ (8002424 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80023e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023e6:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80023ee:	490d      	ldr	r1, [pc, #52]	@ (8002424 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80023f0:	4313      	orrs	r3, r2
 80023f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d00b      	beq.n	800241a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002402:	4b08      	ldr	r3, [pc, #32]	@ (8002424 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002404:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002408:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002412:	4904      	ldr	r1, [pc, #16]	@ (8002424 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002414:	4313      	orrs	r3, r2
 8002416:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800241a:	7cbb      	ldrb	r3, [r7, #18]
}
 800241c:	4618      	mov	r0, r3
 800241e:	3718      	adds	r7, #24
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}
 8002424:	40021000 	.word	0x40021000

08002428 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b084      	sub	sp, #16
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
 8002430:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002432:	2300      	movs	r3, #0
 8002434:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002436:	4b75      	ldr	r3, [pc, #468]	@ (800260c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002438:	68db      	ldr	r3, [r3, #12]
 800243a:	f003 0303 	and.w	r3, r3, #3
 800243e:	2b00      	cmp	r3, #0
 8002440:	d018      	beq.n	8002474 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002442:	4b72      	ldr	r3, [pc, #456]	@ (800260c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002444:	68db      	ldr	r3, [r3, #12]
 8002446:	f003 0203 	and.w	r2, r3, #3
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	429a      	cmp	r2, r3
 8002450:	d10d      	bne.n	800246e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
       ||
 8002456:	2b00      	cmp	r3, #0
 8002458:	d009      	beq.n	800246e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800245a:	4b6c      	ldr	r3, [pc, #432]	@ (800260c <RCCEx_PLLSAI1_Config+0x1e4>)
 800245c:	68db      	ldr	r3, [r3, #12]
 800245e:	091b      	lsrs	r3, r3, #4
 8002460:	f003 0307 	and.w	r3, r3, #7
 8002464:	1c5a      	adds	r2, r3, #1
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	685b      	ldr	r3, [r3, #4]
       ||
 800246a:	429a      	cmp	r2, r3
 800246c:	d047      	beq.n	80024fe <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	73fb      	strb	r3, [r7, #15]
 8002472:	e044      	b.n	80024fe <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	2b03      	cmp	r3, #3
 800247a:	d018      	beq.n	80024ae <RCCEx_PLLSAI1_Config+0x86>
 800247c:	2b03      	cmp	r3, #3
 800247e:	d825      	bhi.n	80024cc <RCCEx_PLLSAI1_Config+0xa4>
 8002480:	2b01      	cmp	r3, #1
 8002482:	d002      	beq.n	800248a <RCCEx_PLLSAI1_Config+0x62>
 8002484:	2b02      	cmp	r3, #2
 8002486:	d009      	beq.n	800249c <RCCEx_PLLSAI1_Config+0x74>
 8002488:	e020      	b.n	80024cc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800248a:	4b60      	ldr	r3, [pc, #384]	@ (800260c <RCCEx_PLLSAI1_Config+0x1e4>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 0302 	and.w	r3, r3, #2
 8002492:	2b00      	cmp	r3, #0
 8002494:	d11d      	bne.n	80024d2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800249a:	e01a      	b.n	80024d2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800249c:	4b5b      	ldr	r3, [pc, #364]	@ (800260c <RCCEx_PLLSAI1_Config+0x1e4>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d116      	bne.n	80024d6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80024a8:	2301      	movs	r3, #1
 80024aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024ac:	e013      	b.n	80024d6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80024ae:	4b57      	ldr	r3, [pc, #348]	@ (800260c <RCCEx_PLLSAI1_Config+0x1e4>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d10f      	bne.n	80024da <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80024ba:	4b54      	ldr	r3, [pc, #336]	@ (800260c <RCCEx_PLLSAI1_Config+0x1e4>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d109      	bne.n	80024da <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80024ca:	e006      	b.n	80024da <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80024cc:	2301      	movs	r3, #1
 80024ce:	73fb      	strb	r3, [r7, #15]
      break;
 80024d0:	e004      	b.n	80024dc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80024d2:	bf00      	nop
 80024d4:	e002      	b.n	80024dc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80024d6:	bf00      	nop
 80024d8:	e000      	b.n	80024dc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80024da:	bf00      	nop
    }

    if(status == HAL_OK)
 80024dc:	7bfb      	ldrb	r3, [r7, #15]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d10d      	bne.n	80024fe <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80024e2:	4b4a      	ldr	r3, [pc, #296]	@ (800260c <RCCEx_PLLSAI1_Config+0x1e4>)
 80024e4:	68db      	ldr	r3, [r3, #12]
 80024e6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6819      	ldr	r1, [r3, #0]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	3b01      	subs	r3, #1
 80024f4:	011b      	lsls	r3, r3, #4
 80024f6:	430b      	orrs	r3, r1
 80024f8:	4944      	ldr	r1, [pc, #272]	@ (800260c <RCCEx_PLLSAI1_Config+0x1e4>)
 80024fa:	4313      	orrs	r3, r2
 80024fc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80024fe:	7bfb      	ldrb	r3, [r7, #15]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d17d      	bne.n	8002600 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002504:	4b41      	ldr	r3, [pc, #260]	@ (800260c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a40      	ldr	r2, [pc, #256]	@ (800260c <RCCEx_PLLSAI1_Config+0x1e4>)
 800250a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800250e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002510:	f7fe fb2a 	bl	8000b68 <HAL_GetTick>
 8002514:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002516:	e009      	b.n	800252c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002518:	f7fe fb26 	bl	8000b68 <HAL_GetTick>
 800251c:	4602      	mov	r2, r0
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	1ad3      	subs	r3, r2, r3
 8002522:	2b02      	cmp	r3, #2
 8002524:	d902      	bls.n	800252c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002526:	2303      	movs	r3, #3
 8002528:	73fb      	strb	r3, [r7, #15]
        break;
 800252a:	e005      	b.n	8002538 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800252c:	4b37      	ldr	r3, [pc, #220]	@ (800260c <RCCEx_PLLSAI1_Config+0x1e4>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002534:	2b00      	cmp	r3, #0
 8002536:	d1ef      	bne.n	8002518 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002538:	7bfb      	ldrb	r3, [r7, #15]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d160      	bne.n	8002600 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d111      	bne.n	8002568 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002544:	4b31      	ldr	r3, [pc, #196]	@ (800260c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002546:	691b      	ldr	r3, [r3, #16]
 8002548:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800254c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002550:	687a      	ldr	r2, [r7, #4]
 8002552:	6892      	ldr	r2, [r2, #8]
 8002554:	0211      	lsls	r1, r2, #8
 8002556:	687a      	ldr	r2, [r7, #4]
 8002558:	68d2      	ldr	r2, [r2, #12]
 800255a:	0912      	lsrs	r2, r2, #4
 800255c:	0452      	lsls	r2, r2, #17
 800255e:	430a      	orrs	r2, r1
 8002560:	492a      	ldr	r1, [pc, #168]	@ (800260c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002562:	4313      	orrs	r3, r2
 8002564:	610b      	str	r3, [r1, #16]
 8002566:	e027      	b.n	80025b8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	2b01      	cmp	r3, #1
 800256c:	d112      	bne.n	8002594 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800256e:	4b27      	ldr	r3, [pc, #156]	@ (800260c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002570:	691b      	ldr	r3, [r3, #16]
 8002572:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002576:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800257a:	687a      	ldr	r2, [r7, #4]
 800257c:	6892      	ldr	r2, [r2, #8]
 800257e:	0211      	lsls	r1, r2, #8
 8002580:	687a      	ldr	r2, [r7, #4]
 8002582:	6912      	ldr	r2, [r2, #16]
 8002584:	0852      	lsrs	r2, r2, #1
 8002586:	3a01      	subs	r2, #1
 8002588:	0552      	lsls	r2, r2, #21
 800258a:	430a      	orrs	r2, r1
 800258c:	491f      	ldr	r1, [pc, #124]	@ (800260c <RCCEx_PLLSAI1_Config+0x1e4>)
 800258e:	4313      	orrs	r3, r2
 8002590:	610b      	str	r3, [r1, #16]
 8002592:	e011      	b.n	80025b8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002594:	4b1d      	ldr	r3, [pc, #116]	@ (800260c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002596:	691b      	ldr	r3, [r3, #16]
 8002598:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800259c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80025a0:	687a      	ldr	r2, [r7, #4]
 80025a2:	6892      	ldr	r2, [r2, #8]
 80025a4:	0211      	lsls	r1, r2, #8
 80025a6:	687a      	ldr	r2, [r7, #4]
 80025a8:	6952      	ldr	r2, [r2, #20]
 80025aa:	0852      	lsrs	r2, r2, #1
 80025ac:	3a01      	subs	r2, #1
 80025ae:	0652      	lsls	r2, r2, #25
 80025b0:	430a      	orrs	r2, r1
 80025b2:	4916      	ldr	r1, [pc, #88]	@ (800260c <RCCEx_PLLSAI1_Config+0x1e4>)
 80025b4:	4313      	orrs	r3, r2
 80025b6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80025b8:	4b14      	ldr	r3, [pc, #80]	@ (800260c <RCCEx_PLLSAI1_Config+0x1e4>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a13      	ldr	r2, [pc, #76]	@ (800260c <RCCEx_PLLSAI1_Config+0x1e4>)
 80025be:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80025c2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025c4:	f7fe fad0 	bl	8000b68 <HAL_GetTick>
 80025c8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80025ca:	e009      	b.n	80025e0 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80025cc:	f7fe facc 	bl	8000b68 <HAL_GetTick>
 80025d0:	4602      	mov	r2, r0
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	1ad3      	subs	r3, r2, r3
 80025d6:	2b02      	cmp	r3, #2
 80025d8:	d902      	bls.n	80025e0 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80025da:	2303      	movs	r3, #3
 80025dc:	73fb      	strb	r3, [r7, #15]
          break;
 80025de:	e005      	b.n	80025ec <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80025e0:	4b0a      	ldr	r3, [pc, #40]	@ (800260c <RCCEx_PLLSAI1_Config+0x1e4>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d0ef      	beq.n	80025cc <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80025ec:	7bfb      	ldrb	r3, [r7, #15]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d106      	bne.n	8002600 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80025f2:	4b06      	ldr	r3, [pc, #24]	@ (800260c <RCCEx_PLLSAI1_Config+0x1e4>)
 80025f4:	691a      	ldr	r2, [r3, #16]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	699b      	ldr	r3, [r3, #24]
 80025fa:	4904      	ldr	r1, [pc, #16]	@ (800260c <RCCEx_PLLSAI1_Config+0x1e4>)
 80025fc:	4313      	orrs	r3, r2
 80025fe:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002600:	7bfb      	ldrb	r3, [r7, #15]
}
 8002602:	4618      	mov	r0, r3
 8002604:	3710      	adds	r7, #16
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}
 800260a:	bf00      	nop
 800260c:	40021000 	.word	0x40021000

08002610 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b084      	sub	sp, #16
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
 8002618:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800261a:	2300      	movs	r3, #0
 800261c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800261e:	4b6a      	ldr	r3, [pc, #424]	@ (80027c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002620:	68db      	ldr	r3, [r3, #12]
 8002622:	f003 0303 	and.w	r3, r3, #3
 8002626:	2b00      	cmp	r3, #0
 8002628:	d018      	beq.n	800265c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800262a:	4b67      	ldr	r3, [pc, #412]	@ (80027c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800262c:	68db      	ldr	r3, [r3, #12]
 800262e:	f003 0203 	and.w	r2, r3, #3
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	429a      	cmp	r2, r3
 8002638:	d10d      	bne.n	8002656 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
       ||
 800263e:	2b00      	cmp	r3, #0
 8002640:	d009      	beq.n	8002656 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002642:	4b61      	ldr	r3, [pc, #388]	@ (80027c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002644:	68db      	ldr	r3, [r3, #12]
 8002646:	091b      	lsrs	r3, r3, #4
 8002648:	f003 0307 	and.w	r3, r3, #7
 800264c:	1c5a      	adds	r2, r3, #1
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	685b      	ldr	r3, [r3, #4]
       ||
 8002652:	429a      	cmp	r2, r3
 8002654:	d047      	beq.n	80026e6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	73fb      	strb	r3, [r7, #15]
 800265a:	e044      	b.n	80026e6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	2b03      	cmp	r3, #3
 8002662:	d018      	beq.n	8002696 <RCCEx_PLLSAI2_Config+0x86>
 8002664:	2b03      	cmp	r3, #3
 8002666:	d825      	bhi.n	80026b4 <RCCEx_PLLSAI2_Config+0xa4>
 8002668:	2b01      	cmp	r3, #1
 800266a:	d002      	beq.n	8002672 <RCCEx_PLLSAI2_Config+0x62>
 800266c:	2b02      	cmp	r3, #2
 800266e:	d009      	beq.n	8002684 <RCCEx_PLLSAI2_Config+0x74>
 8002670:	e020      	b.n	80026b4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002672:	4b55      	ldr	r3, [pc, #340]	@ (80027c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 0302 	and.w	r3, r3, #2
 800267a:	2b00      	cmp	r3, #0
 800267c:	d11d      	bne.n	80026ba <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002682:	e01a      	b.n	80026ba <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002684:	4b50      	ldr	r3, [pc, #320]	@ (80027c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800268c:	2b00      	cmp	r3, #0
 800268e:	d116      	bne.n	80026be <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002690:	2301      	movs	r3, #1
 8002692:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002694:	e013      	b.n	80026be <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002696:	4b4c      	ldr	r3, [pc, #304]	@ (80027c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d10f      	bne.n	80026c2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80026a2:	4b49      	ldr	r3, [pc, #292]	@ (80027c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d109      	bne.n	80026c2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80026b2:	e006      	b.n	80026c2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80026b4:	2301      	movs	r3, #1
 80026b6:	73fb      	strb	r3, [r7, #15]
      break;
 80026b8:	e004      	b.n	80026c4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80026ba:	bf00      	nop
 80026bc:	e002      	b.n	80026c4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80026be:	bf00      	nop
 80026c0:	e000      	b.n	80026c4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80026c2:	bf00      	nop
    }

    if(status == HAL_OK)
 80026c4:	7bfb      	ldrb	r3, [r7, #15]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d10d      	bne.n	80026e6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80026ca:	4b3f      	ldr	r3, [pc, #252]	@ (80027c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026cc:	68db      	ldr	r3, [r3, #12]
 80026ce:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6819      	ldr	r1, [r3, #0]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	3b01      	subs	r3, #1
 80026dc:	011b      	lsls	r3, r3, #4
 80026de:	430b      	orrs	r3, r1
 80026e0:	4939      	ldr	r1, [pc, #228]	@ (80027c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026e2:	4313      	orrs	r3, r2
 80026e4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80026e6:	7bfb      	ldrb	r3, [r7, #15]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d167      	bne.n	80027bc <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80026ec:	4b36      	ldr	r3, [pc, #216]	@ (80027c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a35      	ldr	r2, [pc, #212]	@ (80027c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026f2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80026f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026f8:	f7fe fa36 	bl	8000b68 <HAL_GetTick>
 80026fc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80026fe:	e009      	b.n	8002714 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002700:	f7fe fa32 	bl	8000b68 <HAL_GetTick>
 8002704:	4602      	mov	r2, r0
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	1ad3      	subs	r3, r2, r3
 800270a:	2b02      	cmp	r3, #2
 800270c:	d902      	bls.n	8002714 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800270e:	2303      	movs	r3, #3
 8002710:	73fb      	strb	r3, [r7, #15]
        break;
 8002712:	e005      	b.n	8002720 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002714:	4b2c      	ldr	r3, [pc, #176]	@ (80027c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800271c:	2b00      	cmp	r3, #0
 800271e:	d1ef      	bne.n	8002700 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002720:	7bfb      	ldrb	r3, [r7, #15]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d14a      	bne.n	80027bc <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d111      	bne.n	8002750 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800272c:	4b26      	ldr	r3, [pc, #152]	@ (80027c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800272e:	695b      	ldr	r3, [r3, #20]
 8002730:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002734:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002738:	687a      	ldr	r2, [r7, #4]
 800273a:	6892      	ldr	r2, [r2, #8]
 800273c:	0211      	lsls	r1, r2, #8
 800273e:	687a      	ldr	r2, [r7, #4]
 8002740:	68d2      	ldr	r2, [r2, #12]
 8002742:	0912      	lsrs	r2, r2, #4
 8002744:	0452      	lsls	r2, r2, #17
 8002746:	430a      	orrs	r2, r1
 8002748:	491f      	ldr	r1, [pc, #124]	@ (80027c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800274a:	4313      	orrs	r3, r2
 800274c:	614b      	str	r3, [r1, #20]
 800274e:	e011      	b.n	8002774 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002750:	4b1d      	ldr	r3, [pc, #116]	@ (80027c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002752:	695b      	ldr	r3, [r3, #20]
 8002754:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002758:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800275c:	687a      	ldr	r2, [r7, #4]
 800275e:	6892      	ldr	r2, [r2, #8]
 8002760:	0211      	lsls	r1, r2, #8
 8002762:	687a      	ldr	r2, [r7, #4]
 8002764:	6912      	ldr	r2, [r2, #16]
 8002766:	0852      	lsrs	r2, r2, #1
 8002768:	3a01      	subs	r2, #1
 800276a:	0652      	lsls	r2, r2, #25
 800276c:	430a      	orrs	r2, r1
 800276e:	4916      	ldr	r1, [pc, #88]	@ (80027c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002770:	4313      	orrs	r3, r2
 8002772:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002774:	4b14      	ldr	r3, [pc, #80]	@ (80027c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a13      	ldr	r2, [pc, #76]	@ (80027c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800277a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800277e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002780:	f7fe f9f2 	bl	8000b68 <HAL_GetTick>
 8002784:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002786:	e009      	b.n	800279c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002788:	f7fe f9ee 	bl	8000b68 <HAL_GetTick>
 800278c:	4602      	mov	r2, r0
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	1ad3      	subs	r3, r2, r3
 8002792:	2b02      	cmp	r3, #2
 8002794:	d902      	bls.n	800279c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002796:	2303      	movs	r3, #3
 8002798:	73fb      	strb	r3, [r7, #15]
          break;
 800279a:	e005      	b.n	80027a8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800279c:	4b0a      	ldr	r3, [pc, #40]	@ (80027c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d0ef      	beq.n	8002788 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80027a8:	7bfb      	ldrb	r3, [r7, #15]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d106      	bne.n	80027bc <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80027ae:	4b06      	ldr	r3, [pc, #24]	@ (80027c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027b0:	695a      	ldr	r2, [r3, #20]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	695b      	ldr	r3, [r3, #20]
 80027b6:	4904      	ldr	r1, [pc, #16]	@ (80027c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027b8:	4313      	orrs	r3, r2
 80027ba:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80027bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80027be:	4618      	mov	r0, r3
 80027c0:	3710      	adds	r7, #16
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}
 80027c6:	bf00      	nop
 80027c8:	40021000 	.word	0x40021000

080027cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b082      	sub	sp, #8
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d101      	bne.n	80027de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	e040      	b.n	8002860 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d106      	bne.n	80027f4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2200      	movs	r2, #0
 80027ea:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	f7fe f89c 	bl	800092c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2224      	movs	r2, #36	@ 0x24
 80027f8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f022 0201 	bic.w	r2, r2, #1
 8002808:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800280e:	2b00      	cmp	r3, #0
 8002810:	d002      	beq.n	8002818 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	f000 fae0 	bl	8002dd8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002818:	6878      	ldr	r0, [r7, #4]
 800281a:	f000 f825 	bl	8002868 <UART_SetConfig>
 800281e:	4603      	mov	r3, r0
 8002820:	2b01      	cmp	r3, #1
 8002822:	d101      	bne.n	8002828 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	e01b      	b.n	8002860 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	685a      	ldr	r2, [r3, #4]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002836:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	689a      	ldr	r2, [r3, #8]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002846:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f042 0201 	orr.w	r2, r2, #1
 8002856:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002858:	6878      	ldr	r0, [r7, #4]
 800285a:	f000 fb5f 	bl	8002f1c <UART_CheckIdleState>
 800285e:	4603      	mov	r3, r0
}
 8002860:	4618      	mov	r0, r3
 8002862:	3708      	adds	r7, #8
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}

08002868 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002868:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800286c:	b08a      	sub	sp, #40	@ 0x28
 800286e:	af00      	add	r7, sp, #0
 8002870:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002872:	2300      	movs	r3, #0
 8002874:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	689a      	ldr	r2, [r3, #8]
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	691b      	ldr	r3, [r3, #16]
 8002880:	431a      	orrs	r2, r3
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	695b      	ldr	r3, [r3, #20]
 8002886:	431a      	orrs	r2, r3
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	69db      	ldr	r3, [r3, #28]
 800288c:	4313      	orrs	r3, r2
 800288e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	4ba4      	ldr	r3, [pc, #656]	@ (8002b28 <UART_SetConfig+0x2c0>)
 8002898:	4013      	ands	r3, r2
 800289a:	68fa      	ldr	r2, [r7, #12]
 800289c:	6812      	ldr	r2, [r2, #0]
 800289e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80028a0:	430b      	orrs	r3, r1
 80028a2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	68da      	ldr	r2, [r3, #12]
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	430a      	orrs	r2, r1
 80028b8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	699b      	ldr	r3, [r3, #24]
 80028be:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a99      	ldr	r2, [pc, #612]	@ (8002b2c <UART_SetConfig+0x2c4>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d004      	beq.n	80028d4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	6a1b      	ldr	r3, [r3, #32]
 80028ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028d0:	4313      	orrs	r3, r2
 80028d2:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028e4:	430a      	orrs	r2, r1
 80028e6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a90      	ldr	r2, [pc, #576]	@ (8002b30 <UART_SetConfig+0x2c8>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d126      	bne.n	8002940 <UART_SetConfig+0xd8>
 80028f2:	4b90      	ldr	r3, [pc, #576]	@ (8002b34 <UART_SetConfig+0x2cc>)
 80028f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028f8:	f003 0303 	and.w	r3, r3, #3
 80028fc:	2b03      	cmp	r3, #3
 80028fe:	d81b      	bhi.n	8002938 <UART_SetConfig+0xd0>
 8002900:	a201      	add	r2, pc, #4	@ (adr r2, 8002908 <UART_SetConfig+0xa0>)
 8002902:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002906:	bf00      	nop
 8002908:	08002919 	.word	0x08002919
 800290c:	08002929 	.word	0x08002929
 8002910:	08002921 	.word	0x08002921
 8002914:	08002931 	.word	0x08002931
 8002918:	2301      	movs	r3, #1
 800291a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800291e:	e116      	b.n	8002b4e <UART_SetConfig+0x2e6>
 8002920:	2302      	movs	r3, #2
 8002922:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002926:	e112      	b.n	8002b4e <UART_SetConfig+0x2e6>
 8002928:	2304      	movs	r3, #4
 800292a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800292e:	e10e      	b.n	8002b4e <UART_SetConfig+0x2e6>
 8002930:	2308      	movs	r3, #8
 8002932:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002936:	e10a      	b.n	8002b4e <UART_SetConfig+0x2e6>
 8002938:	2310      	movs	r3, #16
 800293a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800293e:	e106      	b.n	8002b4e <UART_SetConfig+0x2e6>
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a7c      	ldr	r2, [pc, #496]	@ (8002b38 <UART_SetConfig+0x2d0>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d138      	bne.n	80029bc <UART_SetConfig+0x154>
 800294a:	4b7a      	ldr	r3, [pc, #488]	@ (8002b34 <UART_SetConfig+0x2cc>)
 800294c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002950:	f003 030c 	and.w	r3, r3, #12
 8002954:	2b0c      	cmp	r3, #12
 8002956:	d82d      	bhi.n	80029b4 <UART_SetConfig+0x14c>
 8002958:	a201      	add	r2, pc, #4	@ (adr r2, 8002960 <UART_SetConfig+0xf8>)
 800295a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800295e:	bf00      	nop
 8002960:	08002995 	.word	0x08002995
 8002964:	080029b5 	.word	0x080029b5
 8002968:	080029b5 	.word	0x080029b5
 800296c:	080029b5 	.word	0x080029b5
 8002970:	080029a5 	.word	0x080029a5
 8002974:	080029b5 	.word	0x080029b5
 8002978:	080029b5 	.word	0x080029b5
 800297c:	080029b5 	.word	0x080029b5
 8002980:	0800299d 	.word	0x0800299d
 8002984:	080029b5 	.word	0x080029b5
 8002988:	080029b5 	.word	0x080029b5
 800298c:	080029b5 	.word	0x080029b5
 8002990:	080029ad 	.word	0x080029ad
 8002994:	2300      	movs	r3, #0
 8002996:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800299a:	e0d8      	b.n	8002b4e <UART_SetConfig+0x2e6>
 800299c:	2302      	movs	r3, #2
 800299e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80029a2:	e0d4      	b.n	8002b4e <UART_SetConfig+0x2e6>
 80029a4:	2304      	movs	r3, #4
 80029a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80029aa:	e0d0      	b.n	8002b4e <UART_SetConfig+0x2e6>
 80029ac:	2308      	movs	r3, #8
 80029ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80029b2:	e0cc      	b.n	8002b4e <UART_SetConfig+0x2e6>
 80029b4:	2310      	movs	r3, #16
 80029b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80029ba:	e0c8      	b.n	8002b4e <UART_SetConfig+0x2e6>
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a5e      	ldr	r2, [pc, #376]	@ (8002b3c <UART_SetConfig+0x2d4>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d125      	bne.n	8002a12 <UART_SetConfig+0x1aa>
 80029c6:	4b5b      	ldr	r3, [pc, #364]	@ (8002b34 <UART_SetConfig+0x2cc>)
 80029c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029cc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80029d0:	2b30      	cmp	r3, #48	@ 0x30
 80029d2:	d016      	beq.n	8002a02 <UART_SetConfig+0x19a>
 80029d4:	2b30      	cmp	r3, #48	@ 0x30
 80029d6:	d818      	bhi.n	8002a0a <UART_SetConfig+0x1a2>
 80029d8:	2b20      	cmp	r3, #32
 80029da:	d00a      	beq.n	80029f2 <UART_SetConfig+0x18a>
 80029dc:	2b20      	cmp	r3, #32
 80029de:	d814      	bhi.n	8002a0a <UART_SetConfig+0x1a2>
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d002      	beq.n	80029ea <UART_SetConfig+0x182>
 80029e4:	2b10      	cmp	r3, #16
 80029e6:	d008      	beq.n	80029fa <UART_SetConfig+0x192>
 80029e8:	e00f      	b.n	8002a0a <UART_SetConfig+0x1a2>
 80029ea:	2300      	movs	r3, #0
 80029ec:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80029f0:	e0ad      	b.n	8002b4e <UART_SetConfig+0x2e6>
 80029f2:	2302      	movs	r3, #2
 80029f4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80029f8:	e0a9      	b.n	8002b4e <UART_SetConfig+0x2e6>
 80029fa:	2304      	movs	r3, #4
 80029fc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a00:	e0a5      	b.n	8002b4e <UART_SetConfig+0x2e6>
 8002a02:	2308      	movs	r3, #8
 8002a04:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a08:	e0a1      	b.n	8002b4e <UART_SetConfig+0x2e6>
 8002a0a:	2310      	movs	r3, #16
 8002a0c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a10:	e09d      	b.n	8002b4e <UART_SetConfig+0x2e6>
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a4a      	ldr	r2, [pc, #296]	@ (8002b40 <UART_SetConfig+0x2d8>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d125      	bne.n	8002a68 <UART_SetConfig+0x200>
 8002a1c:	4b45      	ldr	r3, [pc, #276]	@ (8002b34 <UART_SetConfig+0x2cc>)
 8002a1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a22:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002a26:	2bc0      	cmp	r3, #192	@ 0xc0
 8002a28:	d016      	beq.n	8002a58 <UART_SetConfig+0x1f0>
 8002a2a:	2bc0      	cmp	r3, #192	@ 0xc0
 8002a2c:	d818      	bhi.n	8002a60 <UART_SetConfig+0x1f8>
 8002a2e:	2b80      	cmp	r3, #128	@ 0x80
 8002a30:	d00a      	beq.n	8002a48 <UART_SetConfig+0x1e0>
 8002a32:	2b80      	cmp	r3, #128	@ 0x80
 8002a34:	d814      	bhi.n	8002a60 <UART_SetConfig+0x1f8>
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d002      	beq.n	8002a40 <UART_SetConfig+0x1d8>
 8002a3a:	2b40      	cmp	r3, #64	@ 0x40
 8002a3c:	d008      	beq.n	8002a50 <UART_SetConfig+0x1e8>
 8002a3e:	e00f      	b.n	8002a60 <UART_SetConfig+0x1f8>
 8002a40:	2300      	movs	r3, #0
 8002a42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a46:	e082      	b.n	8002b4e <UART_SetConfig+0x2e6>
 8002a48:	2302      	movs	r3, #2
 8002a4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a4e:	e07e      	b.n	8002b4e <UART_SetConfig+0x2e6>
 8002a50:	2304      	movs	r3, #4
 8002a52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a56:	e07a      	b.n	8002b4e <UART_SetConfig+0x2e6>
 8002a58:	2308      	movs	r3, #8
 8002a5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a5e:	e076      	b.n	8002b4e <UART_SetConfig+0x2e6>
 8002a60:	2310      	movs	r3, #16
 8002a62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a66:	e072      	b.n	8002b4e <UART_SetConfig+0x2e6>
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a35      	ldr	r2, [pc, #212]	@ (8002b44 <UART_SetConfig+0x2dc>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d12a      	bne.n	8002ac8 <UART_SetConfig+0x260>
 8002a72:	4b30      	ldr	r3, [pc, #192]	@ (8002b34 <UART_SetConfig+0x2cc>)
 8002a74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a78:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a7c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002a80:	d01a      	beq.n	8002ab8 <UART_SetConfig+0x250>
 8002a82:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002a86:	d81b      	bhi.n	8002ac0 <UART_SetConfig+0x258>
 8002a88:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002a8c:	d00c      	beq.n	8002aa8 <UART_SetConfig+0x240>
 8002a8e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002a92:	d815      	bhi.n	8002ac0 <UART_SetConfig+0x258>
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d003      	beq.n	8002aa0 <UART_SetConfig+0x238>
 8002a98:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002a9c:	d008      	beq.n	8002ab0 <UART_SetConfig+0x248>
 8002a9e:	e00f      	b.n	8002ac0 <UART_SetConfig+0x258>
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002aa6:	e052      	b.n	8002b4e <UART_SetConfig+0x2e6>
 8002aa8:	2302      	movs	r3, #2
 8002aaa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002aae:	e04e      	b.n	8002b4e <UART_SetConfig+0x2e6>
 8002ab0:	2304      	movs	r3, #4
 8002ab2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002ab6:	e04a      	b.n	8002b4e <UART_SetConfig+0x2e6>
 8002ab8:	2308      	movs	r3, #8
 8002aba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002abe:	e046      	b.n	8002b4e <UART_SetConfig+0x2e6>
 8002ac0:	2310      	movs	r3, #16
 8002ac2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002ac6:	e042      	b.n	8002b4e <UART_SetConfig+0x2e6>
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a17      	ldr	r2, [pc, #92]	@ (8002b2c <UART_SetConfig+0x2c4>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d13a      	bne.n	8002b48 <UART_SetConfig+0x2e0>
 8002ad2:	4b18      	ldr	r3, [pc, #96]	@ (8002b34 <UART_SetConfig+0x2cc>)
 8002ad4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ad8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002adc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002ae0:	d01a      	beq.n	8002b18 <UART_SetConfig+0x2b0>
 8002ae2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002ae6:	d81b      	bhi.n	8002b20 <UART_SetConfig+0x2b8>
 8002ae8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002aec:	d00c      	beq.n	8002b08 <UART_SetConfig+0x2a0>
 8002aee:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002af2:	d815      	bhi.n	8002b20 <UART_SetConfig+0x2b8>
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d003      	beq.n	8002b00 <UART_SetConfig+0x298>
 8002af8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002afc:	d008      	beq.n	8002b10 <UART_SetConfig+0x2a8>
 8002afe:	e00f      	b.n	8002b20 <UART_SetConfig+0x2b8>
 8002b00:	2300      	movs	r3, #0
 8002b02:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002b06:	e022      	b.n	8002b4e <UART_SetConfig+0x2e6>
 8002b08:	2302      	movs	r3, #2
 8002b0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002b0e:	e01e      	b.n	8002b4e <UART_SetConfig+0x2e6>
 8002b10:	2304      	movs	r3, #4
 8002b12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002b16:	e01a      	b.n	8002b4e <UART_SetConfig+0x2e6>
 8002b18:	2308      	movs	r3, #8
 8002b1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002b1e:	e016      	b.n	8002b4e <UART_SetConfig+0x2e6>
 8002b20:	2310      	movs	r3, #16
 8002b22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002b26:	e012      	b.n	8002b4e <UART_SetConfig+0x2e6>
 8002b28:	efff69f3 	.word	0xefff69f3
 8002b2c:	40008000 	.word	0x40008000
 8002b30:	40013800 	.word	0x40013800
 8002b34:	40021000 	.word	0x40021000
 8002b38:	40004400 	.word	0x40004400
 8002b3c:	40004800 	.word	0x40004800
 8002b40:	40004c00 	.word	0x40004c00
 8002b44:	40005000 	.word	0x40005000
 8002b48:	2310      	movs	r3, #16
 8002b4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a9f      	ldr	r2, [pc, #636]	@ (8002dd0 <UART_SetConfig+0x568>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d17a      	bne.n	8002c4e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002b58:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002b5c:	2b08      	cmp	r3, #8
 8002b5e:	d824      	bhi.n	8002baa <UART_SetConfig+0x342>
 8002b60:	a201      	add	r2, pc, #4	@ (adr r2, 8002b68 <UART_SetConfig+0x300>)
 8002b62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b66:	bf00      	nop
 8002b68:	08002b8d 	.word	0x08002b8d
 8002b6c:	08002bab 	.word	0x08002bab
 8002b70:	08002b95 	.word	0x08002b95
 8002b74:	08002bab 	.word	0x08002bab
 8002b78:	08002b9b 	.word	0x08002b9b
 8002b7c:	08002bab 	.word	0x08002bab
 8002b80:	08002bab 	.word	0x08002bab
 8002b84:	08002bab 	.word	0x08002bab
 8002b88:	08002ba3 	.word	0x08002ba3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002b8c:	f7ff f8d6 	bl	8001d3c <HAL_RCC_GetPCLK1Freq>
 8002b90:	61f8      	str	r0, [r7, #28]
        break;
 8002b92:	e010      	b.n	8002bb6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002b94:	4b8f      	ldr	r3, [pc, #572]	@ (8002dd4 <UART_SetConfig+0x56c>)
 8002b96:	61fb      	str	r3, [r7, #28]
        break;
 8002b98:	e00d      	b.n	8002bb6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002b9a:	f7ff f837 	bl	8001c0c <HAL_RCC_GetSysClockFreq>
 8002b9e:	61f8      	str	r0, [r7, #28]
        break;
 8002ba0:	e009      	b.n	8002bb6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002ba2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002ba6:	61fb      	str	r3, [r7, #28]
        break;
 8002ba8:	e005      	b.n	8002bb6 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8002baa:	2300      	movs	r3, #0
 8002bac:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8002bb4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002bb6:	69fb      	ldr	r3, [r7, #28]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	f000 80fb 	beq.w	8002db4 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	685a      	ldr	r2, [r3, #4]
 8002bc2:	4613      	mov	r3, r2
 8002bc4:	005b      	lsls	r3, r3, #1
 8002bc6:	4413      	add	r3, r2
 8002bc8:	69fa      	ldr	r2, [r7, #28]
 8002bca:	429a      	cmp	r2, r3
 8002bcc:	d305      	bcc.n	8002bda <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002bd4:	69fa      	ldr	r2, [r7, #28]
 8002bd6:	429a      	cmp	r2, r3
 8002bd8:	d903      	bls.n	8002be2 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002be0:	e0e8      	b.n	8002db4 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002be2:	69fb      	ldr	r3, [r7, #28]
 8002be4:	2200      	movs	r2, #0
 8002be6:	461c      	mov	r4, r3
 8002be8:	4615      	mov	r5, r2
 8002bea:	f04f 0200 	mov.w	r2, #0
 8002bee:	f04f 0300 	mov.w	r3, #0
 8002bf2:	022b      	lsls	r3, r5, #8
 8002bf4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002bf8:	0222      	lsls	r2, r4, #8
 8002bfa:	68f9      	ldr	r1, [r7, #12]
 8002bfc:	6849      	ldr	r1, [r1, #4]
 8002bfe:	0849      	lsrs	r1, r1, #1
 8002c00:	2000      	movs	r0, #0
 8002c02:	4688      	mov	r8, r1
 8002c04:	4681      	mov	r9, r0
 8002c06:	eb12 0a08 	adds.w	sl, r2, r8
 8002c0a:	eb43 0b09 	adc.w	fp, r3, r9
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	2200      	movs	r2, #0
 8002c14:	603b      	str	r3, [r7, #0]
 8002c16:	607a      	str	r2, [r7, #4]
 8002c18:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002c1c:	4650      	mov	r0, sl
 8002c1e:	4659      	mov	r1, fp
 8002c20:	f7fd fb82 	bl	8000328 <__aeabi_uldivmod>
 8002c24:	4602      	mov	r2, r0
 8002c26:	460b      	mov	r3, r1
 8002c28:	4613      	mov	r3, r2
 8002c2a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002c2c:	69bb      	ldr	r3, [r7, #24]
 8002c2e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002c32:	d308      	bcc.n	8002c46 <UART_SetConfig+0x3de>
 8002c34:	69bb      	ldr	r3, [r7, #24]
 8002c36:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002c3a:	d204      	bcs.n	8002c46 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	69ba      	ldr	r2, [r7, #24]
 8002c42:	60da      	str	r2, [r3, #12]
 8002c44:	e0b6      	b.n	8002db4 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002c4c:	e0b2      	b.n	8002db4 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	69db      	ldr	r3, [r3, #28]
 8002c52:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002c56:	d15e      	bne.n	8002d16 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8002c58:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002c5c:	2b08      	cmp	r3, #8
 8002c5e:	d828      	bhi.n	8002cb2 <UART_SetConfig+0x44a>
 8002c60:	a201      	add	r2, pc, #4	@ (adr r2, 8002c68 <UART_SetConfig+0x400>)
 8002c62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c66:	bf00      	nop
 8002c68:	08002c8d 	.word	0x08002c8d
 8002c6c:	08002c95 	.word	0x08002c95
 8002c70:	08002c9d 	.word	0x08002c9d
 8002c74:	08002cb3 	.word	0x08002cb3
 8002c78:	08002ca3 	.word	0x08002ca3
 8002c7c:	08002cb3 	.word	0x08002cb3
 8002c80:	08002cb3 	.word	0x08002cb3
 8002c84:	08002cb3 	.word	0x08002cb3
 8002c88:	08002cab 	.word	0x08002cab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002c8c:	f7ff f856 	bl	8001d3c <HAL_RCC_GetPCLK1Freq>
 8002c90:	61f8      	str	r0, [r7, #28]
        break;
 8002c92:	e014      	b.n	8002cbe <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002c94:	f7ff f868 	bl	8001d68 <HAL_RCC_GetPCLK2Freq>
 8002c98:	61f8      	str	r0, [r7, #28]
        break;
 8002c9a:	e010      	b.n	8002cbe <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002c9c:	4b4d      	ldr	r3, [pc, #308]	@ (8002dd4 <UART_SetConfig+0x56c>)
 8002c9e:	61fb      	str	r3, [r7, #28]
        break;
 8002ca0:	e00d      	b.n	8002cbe <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002ca2:	f7fe ffb3 	bl	8001c0c <HAL_RCC_GetSysClockFreq>
 8002ca6:	61f8      	str	r0, [r7, #28]
        break;
 8002ca8:	e009      	b.n	8002cbe <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002caa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002cae:	61fb      	str	r3, [r7, #28]
        break;
 8002cb0:	e005      	b.n	8002cbe <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8002cbc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002cbe:	69fb      	ldr	r3, [r7, #28]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d077      	beq.n	8002db4 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002cc4:	69fb      	ldr	r3, [r7, #28]
 8002cc6:	005a      	lsls	r2, r3, #1
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	085b      	lsrs	r3, r3, #1
 8002cce:	441a      	add	r2, r3
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cd8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002cda:	69bb      	ldr	r3, [r7, #24]
 8002cdc:	2b0f      	cmp	r3, #15
 8002cde:	d916      	bls.n	8002d0e <UART_SetConfig+0x4a6>
 8002ce0:	69bb      	ldr	r3, [r7, #24]
 8002ce2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ce6:	d212      	bcs.n	8002d0e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002ce8:	69bb      	ldr	r3, [r7, #24]
 8002cea:	b29b      	uxth	r3, r3
 8002cec:	f023 030f 	bic.w	r3, r3, #15
 8002cf0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002cf2:	69bb      	ldr	r3, [r7, #24]
 8002cf4:	085b      	lsrs	r3, r3, #1
 8002cf6:	b29b      	uxth	r3, r3
 8002cf8:	f003 0307 	and.w	r3, r3, #7
 8002cfc:	b29a      	uxth	r2, r3
 8002cfe:	8afb      	ldrh	r3, [r7, #22]
 8002d00:	4313      	orrs	r3, r2
 8002d02:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	8afa      	ldrh	r2, [r7, #22]
 8002d0a:	60da      	str	r2, [r3, #12]
 8002d0c:	e052      	b.n	8002db4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002d14:	e04e      	b.n	8002db4 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002d16:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002d1a:	2b08      	cmp	r3, #8
 8002d1c:	d827      	bhi.n	8002d6e <UART_SetConfig+0x506>
 8002d1e:	a201      	add	r2, pc, #4	@ (adr r2, 8002d24 <UART_SetConfig+0x4bc>)
 8002d20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d24:	08002d49 	.word	0x08002d49
 8002d28:	08002d51 	.word	0x08002d51
 8002d2c:	08002d59 	.word	0x08002d59
 8002d30:	08002d6f 	.word	0x08002d6f
 8002d34:	08002d5f 	.word	0x08002d5f
 8002d38:	08002d6f 	.word	0x08002d6f
 8002d3c:	08002d6f 	.word	0x08002d6f
 8002d40:	08002d6f 	.word	0x08002d6f
 8002d44:	08002d67 	.word	0x08002d67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d48:	f7fe fff8 	bl	8001d3c <HAL_RCC_GetPCLK1Freq>
 8002d4c:	61f8      	str	r0, [r7, #28]
        break;
 8002d4e:	e014      	b.n	8002d7a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002d50:	f7ff f80a 	bl	8001d68 <HAL_RCC_GetPCLK2Freq>
 8002d54:	61f8      	str	r0, [r7, #28]
        break;
 8002d56:	e010      	b.n	8002d7a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002d58:	4b1e      	ldr	r3, [pc, #120]	@ (8002dd4 <UART_SetConfig+0x56c>)
 8002d5a:	61fb      	str	r3, [r7, #28]
        break;
 8002d5c:	e00d      	b.n	8002d7a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002d5e:	f7fe ff55 	bl	8001c0c <HAL_RCC_GetSysClockFreq>
 8002d62:	61f8      	str	r0, [r7, #28]
        break;
 8002d64:	e009      	b.n	8002d7a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002d66:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002d6a:	61fb      	str	r3, [r7, #28]
        break;
 8002d6c:	e005      	b.n	8002d7a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8002d78:	bf00      	nop
    }

    if (pclk != 0U)
 8002d7a:	69fb      	ldr	r3, [r7, #28]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d019      	beq.n	8002db4 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	085a      	lsrs	r2, r3, #1
 8002d86:	69fb      	ldr	r3, [r7, #28]
 8002d88:	441a      	add	r2, r3
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d92:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002d94:	69bb      	ldr	r3, [r7, #24]
 8002d96:	2b0f      	cmp	r3, #15
 8002d98:	d909      	bls.n	8002dae <UART_SetConfig+0x546>
 8002d9a:	69bb      	ldr	r3, [r7, #24]
 8002d9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002da0:	d205      	bcs.n	8002dae <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002da2:	69bb      	ldr	r3, [r7, #24]
 8002da4:	b29a      	uxth	r2, r3
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	60da      	str	r2, [r3, #12]
 8002dac:	e002      	b.n	8002db4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	2200      	movs	r2, #0
 8002db8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8002dc0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	3728      	adds	r7, #40	@ 0x28
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002dce:	bf00      	nop
 8002dd0:	40008000 	.word	0x40008000
 8002dd4:	00f42400 	.word	0x00f42400

08002dd8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b083      	sub	sp, #12
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002de4:	f003 0308 	and.w	r3, r3, #8
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d00a      	beq.n	8002e02 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	430a      	orrs	r2, r1
 8002e00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e06:	f003 0301 	and.w	r3, r3, #1
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d00a      	beq.n	8002e24 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	430a      	orrs	r2, r1
 8002e22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e28:	f003 0302 	and.w	r3, r3, #2
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d00a      	beq.n	8002e46 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	430a      	orrs	r2, r1
 8002e44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e4a:	f003 0304 	and.w	r3, r3, #4
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d00a      	beq.n	8002e68 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	430a      	orrs	r2, r1
 8002e66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e6c:	f003 0310 	and.w	r3, r3, #16
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d00a      	beq.n	8002e8a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	430a      	orrs	r2, r1
 8002e88:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e8e:	f003 0320 	and.w	r3, r3, #32
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d00a      	beq.n	8002eac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	689b      	ldr	r3, [r3, #8]
 8002e9c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	430a      	orrs	r2, r1
 8002eaa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d01a      	beq.n	8002eee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	430a      	orrs	r2, r1
 8002ecc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ed2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002ed6:	d10a      	bne.n	8002eee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	430a      	orrs	r2, r1
 8002eec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ef2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d00a      	beq.n	8002f10 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	430a      	orrs	r2, r1
 8002f0e:	605a      	str	r2, [r3, #4]
  }
}
 8002f10:	bf00      	nop
 8002f12:	370c      	adds	r7, #12
 8002f14:	46bd      	mov	sp, r7
 8002f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1a:	4770      	bx	lr

08002f1c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b098      	sub	sp, #96	@ 0x60
 8002f20:	af02      	add	r7, sp, #8
 8002f22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2200      	movs	r2, #0
 8002f28:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002f2c:	f7fd fe1c 	bl	8000b68 <HAL_GetTick>
 8002f30:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f003 0308 	and.w	r3, r3, #8
 8002f3c:	2b08      	cmp	r3, #8
 8002f3e:	d12e      	bne.n	8002f9e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002f40:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002f44:	9300      	str	r3, [sp, #0]
 8002f46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f48:	2200      	movs	r2, #0
 8002f4a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	f000 f88c 	bl	800306c <UART_WaitOnFlagUntilTimeout>
 8002f54:	4603      	mov	r3, r0
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d021      	beq.n	8002f9e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f62:	e853 3f00 	ldrex	r3, [r3]
 8002f66:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002f68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f6a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002f6e:	653b      	str	r3, [r7, #80]	@ 0x50
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	461a      	mov	r2, r3
 8002f76:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002f78:	647b      	str	r3, [r7, #68]	@ 0x44
 8002f7a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f7c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002f7e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002f80:	e841 2300 	strex	r3, r2, [r1]
 8002f84:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002f86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d1e6      	bne.n	8002f5a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2220      	movs	r2, #32
 8002f90:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2200      	movs	r2, #0
 8002f96:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002f9a:	2303      	movs	r3, #3
 8002f9c:	e062      	b.n	8003064 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f003 0304 	and.w	r3, r3, #4
 8002fa8:	2b04      	cmp	r3, #4
 8002faa:	d149      	bne.n	8003040 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002fac:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002fb0:	9300      	str	r3, [sp, #0]
 8002fb2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8002fba:	6878      	ldr	r0, [r7, #4]
 8002fbc:	f000 f856 	bl	800306c <UART_WaitOnFlagUntilTimeout>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d03c      	beq.n	8003040 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fce:	e853 3f00 	ldrex	r3, [r3]
 8002fd2:	623b      	str	r3, [r7, #32]
   return(result);
 8002fd4:	6a3b      	ldr	r3, [r7, #32]
 8002fd6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002fda:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	461a      	mov	r2, r3
 8002fe2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002fe4:	633b      	str	r3, [r7, #48]	@ 0x30
 8002fe6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fe8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002fea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002fec:	e841 2300 	strex	r3, r2, [r1]
 8002ff0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002ff2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d1e6      	bne.n	8002fc6 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	3308      	adds	r3, #8
 8002ffe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	e853 3f00 	ldrex	r3, [r3]
 8003006:	60fb      	str	r3, [r7, #12]
   return(result);
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	f023 0301 	bic.w	r3, r3, #1
 800300e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	3308      	adds	r3, #8
 8003016:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003018:	61fa      	str	r2, [r7, #28]
 800301a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800301c:	69b9      	ldr	r1, [r7, #24]
 800301e:	69fa      	ldr	r2, [r7, #28]
 8003020:	e841 2300 	strex	r3, r2, [r1]
 8003024:	617b      	str	r3, [r7, #20]
   return(result);
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d1e5      	bne.n	8002ff8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2220      	movs	r2, #32
 8003030:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2200      	movs	r2, #0
 8003038:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800303c:	2303      	movs	r3, #3
 800303e:	e011      	b.n	8003064 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2220      	movs	r2, #32
 8003044:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2220      	movs	r2, #32
 800304a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2200      	movs	r2, #0
 8003052:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2200      	movs	r2, #0
 8003058:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2200      	movs	r2, #0
 800305e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003062:	2300      	movs	r3, #0
}
 8003064:	4618      	mov	r0, r3
 8003066:	3758      	adds	r7, #88	@ 0x58
 8003068:	46bd      	mov	sp, r7
 800306a:	bd80      	pop	{r7, pc}

0800306c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b084      	sub	sp, #16
 8003070:	af00      	add	r7, sp, #0
 8003072:	60f8      	str	r0, [r7, #12]
 8003074:	60b9      	str	r1, [r7, #8]
 8003076:	603b      	str	r3, [r7, #0]
 8003078:	4613      	mov	r3, r2
 800307a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800307c:	e04f      	b.n	800311e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800307e:	69bb      	ldr	r3, [r7, #24]
 8003080:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003084:	d04b      	beq.n	800311e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003086:	f7fd fd6f 	bl	8000b68 <HAL_GetTick>
 800308a:	4602      	mov	r2, r0
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	1ad3      	subs	r3, r2, r3
 8003090:	69ba      	ldr	r2, [r7, #24]
 8003092:	429a      	cmp	r2, r3
 8003094:	d302      	bcc.n	800309c <UART_WaitOnFlagUntilTimeout+0x30>
 8003096:	69bb      	ldr	r3, [r7, #24]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d101      	bne.n	80030a0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800309c:	2303      	movs	r3, #3
 800309e:	e04e      	b.n	800313e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f003 0304 	and.w	r3, r3, #4
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d037      	beq.n	800311e <UART_WaitOnFlagUntilTimeout+0xb2>
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	2b80      	cmp	r3, #128	@ 0x80
 80030b2:	d034      	beq.n	800311e <UART_WaitOnFlagUntilTimeout+0xb2>
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	2b40      	cmp	r3, #64	@ 0x40
 80030b8:	d031      	beq.n	800311e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	69db      	ldr	r3, [r3, #28]
 80030c0:	f003 0308 	and.w	r3, r3, #8
 80030c4:	2b08      	cmp	r3, #8
 80030c6:	d110      	bne.n	80030ea <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	2208      	movs	r2, #8
 80030ce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80030d0:	68f8      	ldr	r0, [r7, #12]
 80030d2:	f000 f838 	bl	8003146 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	2208      	movs	r2, #8
 80030da:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2200      	movs	r2, #0
 80030e2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	e029      	b.n	800313e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	69db      	ldr	r3, [r3, #28]
 80030f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80030f4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80030f8:	d111      	bne.n	800311e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003102:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003104:	68f8      	ldr	r0, [r7, #12]
 8003106:	f000 f81e 	bl	8003146 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2220      	movs	r2, #32
 800310e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	2200      	movs	r2, #0
 8003116:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800311a:	2303      	movs	r3, #3
 800311c:	e00f      	b.n	800313e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	69da      	ldr	r2, [r3, #28]
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	4013      	ands	r3, r2
 8003128:	68ba      	ldr	r2, [r7, #8]
 800312a:	429a      	cmp	r2, r3
 800312c:	bf0c      	ite	eq
 800312e:	2301      	moveq	r3, #1
 8003130:	2300      	movne	r3, #0
 8003132:	b2db      	uxtb	r3, r3
 8003134:	461a      	mov	r2, r3
 8003136:	79fb      	ldrb	r3, [r7, #7]
 8003138:	429a      	cmp	r2, r3
 800313a:	d0a0      	beq.n	800307e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800313c:	2300      	movs	r3, #0
}
 800313e:	4618      	mov	r0, r3
 8003140:	3710      	adds	r7, #16
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}

08003146 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003146:	b480      	push	{r7}
 8003148:	b095      	sub	sp, #84	@ 0x54
 800314a:	af00      	add	r7, sp, #0
 800314c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003154:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003156:	e853 3f00 	ldrex	r3, [r3]
 800315a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800315c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800315e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003162:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	461a      	mov	r2, r3
 800316a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800316c:	643b      	str	r3, [r7, #64]	@ 0x40
 800316e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003170:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003172:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003174:	e841 2300 	strex	r3, r2, [r1]
 8003178:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800317a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800317c:	2b00      	cmp	r3, #0
 800317e:	d1e6      	bne.n	800314e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	3308      	adds	r3, #8
 8003186:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003188:	6a3b      	ldr	r3, [r7, #32]
 800318a:	e853 3f00 	ldrex	r3, [r3]
 800318e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003190:	69fb      	ldr	r3, [r7, #28]
 8003192:	f023 0301 	bic.w	r3, r3, #1
 8003196:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	3308      	adds	r3, #8
 800319e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80031a0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80031a2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031a4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80031a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80031a8:	e841 2300 	strex	r3, r2, [r1]
 80031ac:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80031ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d1e5      	bne.n	8003180 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031b8:	2b01      	cmp	r3, #1
 80031ba:	d118      	bne.n	80031ee <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	e853 3f00 	ldrex	r3, [r3]
 80031c8:	60bb      	str	r3, [r7, #8]
   return(result);
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	f023 0310 	bic.w	r3, r3, #16
 80031d0:	647b      	str	r3, [r7, #68]	@ 0x44
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	461a      	mov	r2, r3
 80031d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80031da:	61bb      	str	r3, [r7, #24]
 80031dc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031de:	6979      	ldr	r1, [r7, #20]
 80031e0:	69ba      	ldr	r2, [r7, #24]
 80031e2:	e841 2300 	strex	r3, r2, [r1]
 80031e6:	613b      	str	r3, [r7, #16]
   return(result);
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d1e6      	bne.n	80031bc <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2220      	movs	r2, #32
 80031f2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2200      	movs	r2, #0
 80031fa:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2200      	movs	r2, #0
 8003200:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003202:	bf00      	nop
 8003204:	3754      	adds	r7, #84	@ 0x54
 8003206:	46bd      	mov	sp, r7
 8003208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320c:	4770      	bx	lr

0800320e <App_TaskCreateHook>:
* Note(s)     : (1) Interrupts are disabled during this call.
*********************************************************************************************************
*/

void  App_TaskCreateHook (OS_TCB *ptcb)
{
 800320e:	b480      	push	{r7}
 8003210:	b083      	sub	sp, #12
 8003212:	af00      	add	r7, sp, #0
 8003214:	6078      	str	r0, [r7, #4]
    (void)ptcb;
}
 8003216:	bf00      	nop
 8003218:	370c      	adds	r7, #12
 800321a:	46bd      	mov	sp, r7
 800321c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003220:	4770      	bx	lr

08003222 <App_TaskDelHook>:
* Note(s)     : (1) Interrupts are disabled during this call.
*********************************************************************************************************
*/

void  App_TaskDelHook (OS_TCB *ptcb)
{
 8003222:	b480      	push	{r7}
 8003224:	b083      	sub	sp, #12
 8003226:	af00      	add	r7, sp, #0
 8003228:	6078      	str	r0, [r7, #4]
    (void)ptcb;
}
 800322a:	bf00      	nop
 800322c:	370c      	adds	r7, #12
 800322e:	46bd      	mov	sp, r7
 8003230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003234:	4770      	bx	lr

08003236 <App_TaskIdleHook>:
*********************************************************************************************************
*/

#if OS_VERSION >= 251
void  App_TaskIdleHook (void)
{
 8003236:	b480      	push	{r7}
 8003238:	af00      	add	r7, sp, #0
}
 800323a:	bf00      	nop
 800323c:	46bd      	mov	sp, r7
 800323e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003242:	4770      	bx	lr

08003244 <App_TaskStatHook>:
* Argument(s) : none.
*********************************************************************************************************
*/

void  App_TaskStatHook (void)
{
 8003244:	b480      	push	{r7}
 8003246:	af00      	add	r7, sp, #0
}
 8003248:	bf00      	nop
 800324a:	46bd      	mov	sp, r7
 800324c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003250:	4770      	bx	lr

08003252 <App_TaskReturnHook>:
*/


#if OS_VERSION >= 289
void  App_TaskReturnHook (OS_TCB  *ptcb)
{
 8003252:	b480      	push	{r7}
 8003254:	b083      	sub	sp, #12
 8003256:	af00      	add	r7, sp, #0
 8003258:	6078      	str	r0, [r7, #4]
    (void)ptcb;
}
 800325a:	bf00      	nop
 800325c:	370c      	adds	r7, #12
 800325e:	46bd      	mov	sp, r7
 8003260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003264:	4770      	bx	lr

08003266 <App_TaskSwHook>:
*********************************************************************************************************
*/

#if OS_TASK_SW_HOOK_EN > 0
void  App_TaskSwHook (void)
{
 8003266:	b480      	push	{r7}
 8003268:	af00      	add	r7, sp, #0

}
 800326a:	bf00      	nop
 800326c:	46bd      	mov	sp, r7
 800326e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003272:	4770      	bx	lr

08003274 <App_TCBInitHook>:
*********************************************************************************************************
*/

#if OS_VERSION >= 204
void  App_TCBInitHook (OS_TCB *ptcb)
{
 8003274:	b480      	push	{r7}
 8003276:	b083      	sub	sp, #12
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
    (void)ptcb;
}
 800327c:	bf00      	nop
 800327e:	370c      	adds	r7, #12
 8003280:	46bd      	mov	sp, r7
 8003282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003286:	4770      	bx	lr

08003288 <App_TimeTickHook>:
*********************************************************************************************************
*/

#if OS_TIME_TICK_HOOK_EN > 0
void  App_TimeTickHook (void)
{
 8003288:	b480      	push	{r7}
 800328a:	af00      	add	r7, sp, #0

}
 800328c:	bf00      	nop
 800328e:	46bd      	mov	sp, r7
 8003290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003294:	4770      	bx	lr
	...

08003298 <OSInitHookBegin>:
*                 b) Set bits ASPEN and LSPEN in FPCCR register.
*********************************************************************************************************
*/
#if OS_CPU_HOOKS_EN > 0u
void  OSInitHookBegin (void)
{
 8003298:	b480      	push	{r7}
 800329a:	b085      	sub	sp, #20
 800329c:	af00      	add	r7, sp, #0
    OS_STK  *pstk;
#if (OS_CPU_ARM_FP_EN > 0u)
    INT32U   reg_val;
#endif
                                                                /* Clear exception stack for stack checking.            */
    pstk = &OS_CPU_ExceptStk[0];
 800329e:	4b19      	ldr	r3, [pc, #100]	@ (8003304 <OSInitHookBegin+0x6c>)
 80032a0:	60bb      	str	r3, [r7, #8]
    size = OS_CPU_EXCEPT_STK_SIZE;
 80032a2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80032a6:	60fb      	str	r3, [r7, #12]
    while (size > 0u) {
 80032a8:	e007      	b.n	80032ba <OSInitHookBegin+0x22>
        size--;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	3b01      	subs	r3, #1
 80032ae:	60fb      	str	r3, [r7, #12]
       *pstk++ = (OS_STK)0;
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	1d1a      	adds	r2, r3, #4
 80032b4:	60ba      	str	r2, [r7, #8]
 80032b6:	2200      	movs	r2, #0
 80032b8:	601a      	str	r2, [r3, #0]
    while (size > 0u) {
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d1f4      	bne.n	80032aa <OSInitHookBegin+0x12>
    }

                                                                /* Align the ISR stack to 8-bytes                       */
    OS_CPU_ExceptStkBase = (OS_STK *)&OS_CPU_ExceptStk[OS_CPU_EXCEPT_STK_SIZE];
 80032c0:	4b11      	ldr	r3, [pc, #68]	@ (8003308 <OSInitHookBegin+0x70>)
 80032c2:	4a12      	ldr	r2, [pc, #72]	@ (800330c <OSInitHookBegin+0x74>)
 80032c4:	601a      	str	r2, [r3, #0]
    OS_CPU_ExceptStkBase = (OS_STK *)((OS_STK)(OS_CPU_ExceptStkBase) & 0xFFFFFFF8);
 80032c6:	4b10      	ldr	r3, [pc, #64]	@ (8003308 <OSInitHookBegin+0x70>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f023 0307 	bic.w	r3, r3, #7
 80032ce:	461a      	mov	r2, r3
 80032d0:	4b0d      	ldr	r3, [pc, #52]	@ (8003308 <OSInitHookBegin+0x70>)
 80032d2:	601a      	str	r2, [r3, #0]

#if (OS_CPU_ARM_FP_EN > 0u)
    reg_val = OS_CPU_CM_FP_FPCCR;                               /* Check the floating point mode.                       */
 80032d4:	4b0e      	ldr	r3, [pc, #56]	@ (8003310 <OSInitHookBegin+0x78>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	607b      	str	r3, [r7, #4]
    if ((reg_val & OS_CPU_CM_FPCCR_LAZY_STK) != OS_CPU_CM_FPCCR_LAZY_STK) {
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80032e0:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80032e4:	d001      	beq.n	80032ea <OSInitHookBegin+0x52>
        while (1u) {                                            /* See Note (2).                                        */
 80032e6:	bf00      	nop
 80032e8:	e7fd      	b.n	80032e6 <OSInitHookBegin+0x4e>
        }
    }
#endif

#if OS_TMR_EN > 0u
    OSTmrCtr = 0u;
 80032ea:	4b0a      	ldr	r3, [pc, #40]	@ (8003314 <OSInitHookBegin+0x7c>)
 80032ec:	2200      	movs	r2, #0
 80032ee:	801a      	strh	r2, [r3, #0]
#endif

                                                                /* Set BASEPRI boundary from the configuration.         */
    OS_KA_BASEPRI_Boundary = (INT32U)(CPU_CFG_KA_IPL_BOUNDARY << (8u - CPU_CFG_NVIC_PRIO_BITS));
 80032f0:	4b09      	ldr	r3, [pc, #36]	@ (8003318 <OSInitHookBegin+0x80>)
 80032f2:	2240      	movs	r2, #64	@ 0x40
 80032f4:	601a      	str	r2, [r3, #0]
}
 80032f6:	bf00      	nop
 80032f8:	3714      	adds	r7, #20
 80032fa:	46bd      	mov	sp, r7
 80032fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003300:	4770      	bx	lr
 8003302:	bf00      	nop
 8003304:	200008b8 	.word	0x200008b8
 8003308:	20000cb8 	.word	0x20000cb8
 800330c:	20000cb8 	.word	0x20000cb8
 8003310:	e000ef34 	.word	0xe000ef34
 8003314:	20000cbc 	.word	0x20000cbc
 8003318:	20000cc0 	.word	0x20000cc0

0800331c <OSInitHookEnd>:
* Note(s)    : 1) Interrupts should be disabled during this call.
*********************************************************************************************************
*/
#if OS_CPU_HOOKS_EN > 0u
void  OSInitHookEnd (void)
{
 800331c:	b480      	push	{r7}
 800331e:	af00      	add	r7, sp, #0

}
 8003320:	bf00      	nop
 8003322:	46bd      	mov	sp, r7
 8003324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003328:	4770      	bx	lr

0800332a <OSTaskCreateHook>:
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
#if OS_CPU_HOOKS_EN > 0u
void  OSTaskCreateHook (OS_TCB *ptcb)
{
 800332a:	b580      	push	{r7, lr}
 800332c:	b082      	sub	sp, #8
 800332e:	af00      	add	r7, sp, #0
 8003330:	6078      	str	r0, [r7, #4]
#if OS_APP_HOOKS_EN > 0u
    App_TaskCreateHook(ptcb);
 8003332:	6878      	ldr	r0, [r7, #4]
 8003334:	f7ff ff6b 	bl	800320e <App_TaskCreateHook>
#else
    (void)ptcb;                                                 /* Prevent compiler warning                             */
#endif
}
 8003338:	bf00      	nop
 800333a:	3708      	adds	r7, #8
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}

08003340 <OSTaskDelHook>:
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
#if OS_CPU_HOOKS_EN > 0u
void  OSTaskDelHook (OS_TCB *ptcb)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b082      	sub	sp, #8
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
#if OS_APP_HOOKS_EN > 0u
    App_TaskDelHook(ptcb);
 8003348:	6878      	ldr	r0, [r7, #4]
 800334a:	f7ff ff6a 	bl	8003222 <App_TaskDelHook>
#else
    (void)ptcb;                                                 /* Prevent compiler warning                             */
#endif
}
 800334e:	bf00      	nop
 8003350:	3708      	adds	r7, #8
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}

08003356 <OSTaskIdleHook>:
* Note(s)    : 1) Interrupts are enabled during this call.
*********************************************************************************************************
*/
#if OS_CPU_HOOKS_EN > 0u
void  OSTaskIdleHook (void)
{
 8003356:	b580      	push	{r7, lr}
 8003358:	af00      	add	r7, sp, #0
#if OS_APP_HOOKS_EN > 0u
    App_TaskIdleHook();
 800335a:	f7ff ff6c 	bl	8003236 <App_TaskIdleHook>
#endif
}
 800335e:	bf00      	nop
 8003360:	bd80      	pop	{r7, pc}

08003362 <OSTaskReturnHook>:
*********************************************************************************************************
*/

#if OS_CPU_HOOKS_EN > 0u
void  OSTaskReturnHook (OS_TCB  *ptcb)
{
 8003362:	b580      	push	{r7, lr}
 8003364:	b082      	sub	sp, #8
 8003366:	af00      	add	r7, sp, #0
 8003368:	6078      	str	r0, [r7, #4]
#if OS_APP_HOOKS_EN > 0u
    App_TaskReturnHook(ptcb);
 800336a:	6878      	ldr	r0, [r7, #4]
 800336c:	f7ff ff71 	bl	8003252 <App_TaskReturnHook>
#else
    (void)ptcb;
#endif
}
 8003370:	bf00      	nop
 8003372:	3708      	adds	r7, #8
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}

08003378 <OSTaskStatHook>:
*********************************************************************************************************
*/

#if OS_CPU_HOOKS_EN > 0u
void  OSTaskStatHook (void)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	af00      	add	r7, sp, #0
#if OS_APP_HOOKS_EN > 0u
    App_TaskStatHook();
 800337c:	f7ff ff62 	bl	8003244 <App_TaskStatHook>
#endif
}
 8003380:	bf00      	nop
 8003382:	bd80      	pop	{r7, pc}

08003384 <OSTaskStkInit>:

OS_STK  *OSTaskStkInit (void    (*task)(void *p_arg),
                        void     *p_arg,
                        OS_STK   *ptos,
                        INT16U    opt)
{
 8003384:	b480      	push	{r7}
 8003386:	b087      	sub	sp, #28
 8003388:	af00      	add	r7, sp, #0
 800338a:	60f8      	str	r0, [r7, #12]
 800338c:	60b9      	str	r1, [r7, #8]
 800338e:	607a      	str	r2, [r7, #4]
 8003390:	807b      	strh	r3, [r7, #2]
    OS_STK  *p_stk;


    (void)opt;                                                  /* 'opt' is not used, prevent warning                   */
    p_stk      = ptos + 1u;                                     /* Load stack pointer                                   */
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	3304      	adds	r3, #4
 8003396:	617b      	str	r3, [r7, #20]
                                                                /* Align the stack to 8-bytes.                          */
    p_stk      = (OS_STK *)((OS_STK)(p_stk) & 0xFFFFFFF8u);
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	f023 0307 	bic.w	r3, r3, #7
 800339e:	617b      	str	r3, [r7, #20]
                                                                /* Registers stacked as if auto-saved on exception      */
#if (OS_CPU_ARM_FP_EN > 0u)                                     /* FPU auto-saved registers.                            */
     --p_stk;
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	3b04      	subs	r3, #4
 80033a4:	617b      	str	r3, [r7, #20]
    *(--p_stk) = (OS_STK)0x02000000u;                           /* FPSCR                                                */
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	3b04      	subs	r3, #4
 80033aa:	617b      	str	r3, [r7, #20]
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80033b2:	601a      	str	r2, [r3, #0]
                                                                /* Initialize S0-S15 floating point registers           */
    *(--p_stk) = (OS_STK)0x41700000u;                           /* S15                                                  */
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	3b04      	subs	r3, #4
 80033b8:	617b      	str	r3, [r7, #20]
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	4a93      	ldr	r2, [pc, #588]	@ (800360c <OSTaskStkInit+0x288>)
 80033be:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x41600000u;                           /* S14                                                  */
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	3b04      	subs	r3, #4
 80033c4:	617b      	str	r3, [r7, #20]
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	4a91      	ldr	r2, [pc, #580]	@ (8003610 <OSTaskStkInit+0x28c>)
 80033ca:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x41500000u;                           /* S13                                                  */
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	3b04      	subs	r3, #4
 80033d0:	617b      	str	r3, [r7, #20]
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	4a8f      	ldr	r2, [pc, #572]	@ (8003614 <OSTaskStkInit+0x290>)
 80033d6:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x41400000u;                           /* S12                                                  */
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	3b04      	subs	r3, #4
 80033dc:	617b      	str	r3, [r7, #20]
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	4a8d      	ldr	r2, [pc, #564]	@ (8003618 <OSTaskStkInit+0x294>)
 80033e2:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x41300000u;                           /* S11                                                  */
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	3b04      	subs	r3, #4
 80033e8:	617b      	str	r3, [r7, #20]
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	4a8b      	ldr	r2, [pc, #556]	@ (800361c <OSTaskStkInit+0x298>)
 80033ee:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x41200000u;                           /* S10                                                  */
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	3b04      	subs	r3, #4
 80033f4:	617b      	str	r3, [r7, #20]
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	4a89      	ldr	r2, [pc, #548]	@ (8003620 <OSTaskStkInit+0x29c>)
 80033fa:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x41100000u;                           /* S9                                                   */
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	3b04      	subs	r3, #4
 8003400:	617b      	str	r3, [r7, #20]
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	4a87      	ldr	r2, [pc, #540]	@ (8003624 <OSTaskStkInit+0x2a0>)
 8003406:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x41000000u;                           /* S8                                                   */
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	3b04      	subs	r3, #4
 800340c:	617b      	str	r3, [r7, #20]
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	f04f 4282 	mov.w	r2, #1090519040	@ 0x41000000
 8003414:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x40E00000u;                           /* S7                                                   */
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	3b04      	subs	r3, #4
 800341a:	617b      	str	r3, [r7, #20]
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	4a82      	ldr	r2, [pc, #520]	@ (8003628 <OSTaskStkInit+0x2a4>)
 8003420:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x40C00000u;                           /* S6                                                   */
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	3b04      	subs	r3, #4
 8003426:	617b      	str	r3, [r7, #20]
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	4a80      	ldr	r2, [pc, #512]	@ (800362c <OSTaskStkInit+0x2a8>)
 800342c:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x40A00000u;                           /* S5                                                   */
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	3b04      	subs	r3, #4
 8003432:	617b      	str	r3, [r7, #20]
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	4a7e      	ldr	r2, [pc, #504]	@ (8003630 <OSTaskStkInit+0x2ac>)
 8003438:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x40800000u;                           /* S4                                                   */
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	3b04      	subs	r3, #4
 800343e:	617b      	str	r3, [r7, #20]
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	f04f 4281 	mov.w	r2, #1082130432	@ 0x40800000
 8003446:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x40400000u;                           /* S3                                                   */
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	3b04      	subs	r3, #4
 800344c:	617b      	str	r3, [r7, #20]
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	4a78      	ldr	r2, [pc, #480]	@ (8003634 <OSTaskStkInit+0x2b0>)
 8003452:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x40000000u;                           /* S2                                                   */
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	3b04      	subs	r3, #4
 8003458:	617b      	str	r3, [r7, #20]
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003460:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x3F800000u;                           /* S1                                                   */
 8003462:	697b      	ldr	r3, [r7, #20]
 8003464:	3b04      	subs	r3, #4
 8003466:	617b      	str	r3, [r7, #20]
 8003468:	697b      	ldr	r3, [r7, #20]
 800346a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800346e:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x00000000u;                           /* S0                                                   */
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	3b04      	subs	r3, #4
 8003474:	617b      	str	r3, [r7, #20]
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	2200      	movs	r2, #0
 800347a:	601a      	str	r2, [r3, #0]
#endif
    *(--p_stk) = (OS_STK)0x01000000uL;                          /* xPSR                                                 */
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	3b04      	subs	r3, #4
 8003480:	617b      	str	r3, [r7, #20]
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003488:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)task;                                  /* Entry Point                                          */
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	3b04      	subs	r3, #4
 800348e:	617b      	str	r3, [r7, #20]
 8003490:	68fa      	ldr	r2, [r7, #12]
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)OS_TaskReturn;                         /* R14 (LR)                                             */
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	3b04      	subs	r3, #4
 800349a:	617b      	str	r3, [r7, #20]
 800349c:	4a66      	ldr	r2, [pc, #408]	@ (8003638 <OSTaskStkInit+0x2b4>)
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x12121212uL;                          /* R12                                                  */
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	3b04      	subs	r3, #4
 80034a6:	617b      	str	r3, [r7, #20]
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	f04f 3212 	mov.w	r2, #303174162	@ 0x12121212
 80034ae:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x03030303uL;                          /* R3                                                   */
 80034b0:	697b      	ldr	r3, [r7, #20]
 80034b2:	3b04      	subs	r3, #4
 80034b4:	617b      	str	r3, [r7, #20]
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	f04f 3203 	mov.w	r2, #50529027	@ 0x3030303
 80034bc:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x02020202uL;                          /* R2                                                   */
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	3b04      	subs	r3, #4
 80034c2:	617b      	str	r3, [r7, #20]
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	f04f 3202 	mov.w	r2, #33686018	@ 0x2020202
 80034ca:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x01010101uL;                          /* R1                                                   */
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	3b04      	subs	r3, #4
 80034d0:	617b      	str	r3, [r7, #20]
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	f04f 3201 	mov.w	r2, #16843009	@ 0x1010101
 80034d8:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)p_arg;                                 /* R0 : argument                                        */
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	3b04      	subs	r3, #4
 80034de:	617b      	str	r3, [r7, #20]
 80034e0:	68ba      	ldr	r2, [r7, #8]
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	601a      	str	r2, [r3, #0]

#if (OS_CPU_ARM_FP_EN > 0u)
    *(--p_stk) = (OS_STK)0xFFFFFFEDuL;                          /* R14: EXEC_RETURN; See Note 5                         */
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	3b04      	subs	r3, #4
 80034ea:	617b      	str	r3, [r7, #20]
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	f06f 0212 	mvn.w	r2, #18
 80034f2:	601a      	str	r2, [r3, #0]
#else
    *(--p_stk) = (OS_STK)0xFFFFFFFDuL;                          /* R14: EXEC_RETURN; See Note 5                         */
#endif
                                                                /* Remaining registers saved on process stack           */
    *(--p_stk) = (OS_STK)0x11111111uL;                          /* R11                                                  */
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	3b04      	subs	r3, #4
 80034f8:	617b      	str	r3, [r7, #20]
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	f04f 3211 	mov.w	r2, #286331153	@ 0x11111111
 8003500:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x10101010uL;                          /* R10                                                  */
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	3b04      	subs	r3, #4
 8003506:	617b      	str	r3, [r7, #20]
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	f04f 3210 	mov.w	r2, #269488144	@ 0x10101010
 800350e:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x09090909uL;                          /* R9                                                   */
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	3b04      	subs	r3, #4
 8003514:	617b      	str	r3, [r7, #20]
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	f04f 3209 	mov.w	r2, #151587081	@ 0x9090909
 800351c:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x08080808uL;                          /* R8                                                   */
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	3b04      	subs	r3, #4
 8003522:	617b      	str	r3, [r7, #20]
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	f04f 3208 	mov.w	r2, #134744072	@ 0x8080808
 800352a:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x07070707uL;                          /* R7                                                   */
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	3b04      	subs	r3, #4
 8003530:	617b      	str	r3, [r7, #20]
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	f04f 3207 	mov.w	r2, #117901063	@ 0x7070707
 8003538:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x06060606uL;                          /* R6                                                   */
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	3b04      	subs	r3, #4
 800353e:	617b      	str	r3, [r7, #20]
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	f04f 3206 	mov.w	r2, #101058054	@ 0x6060606
 8003546:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x05050505uL;                          /* R5                                                   */
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	3b04      	subs	r3, #4
 800354c:	617b      	str	r3, [r7, #20]
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	f04f 3205 	mov.w	r2, #84215045	@ 0x5050505
 8003554:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x04040404uL;                          /* R4                                                   */
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	3b04      	subs	r3, #4
 800355a:	617b      	str	r3, [r7, #20]
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	f04f 3204 	mov.w	r2, #67372036	@ 0x4040404
 8003562:	601a      	str	r2, [r3, #0]

#if (OS_CPU_ARM_FP_EN > 0u)
                                                                /* Initialize S16-S31 floating point registers          */
    *(--p_stk) = (OS_STK)0x41F80000u;                           /* S31                                                  */
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	3b04      	subs	r3, #4
 8003568:	617b      	str	r3, [r7, #20]
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	4a33      	ldr	r2, [pc, #204]	@ (800363c <OSTaskStkInit+0x2b8>)
 800356e:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x41F00000u;                           /* S30                                                  */
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	3b04      	subs	r3, #4
 8003574:	617b      	str	r3, [r7, #20]
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	4a31      	ldr	r2, [pc, #196]	@ (8003640 <OSTaskStkInit+0x2bc>)
 800357a:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x41E80000u;                           /* S29                                                  */
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	3b04      	subs	r3, #4
 8003580:	617b      	str	r3, [r7, #20]
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	4a2f      	ldr	r2, [pc, #188]	@ (8003644 <OSTaskStkInit+0x2c0>)
 8003586:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x41E00000u;                           /* S28                                                  */
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	3b04      	subs	r3, #4
 800358c:	617b      	str	r3, [r7, #20]
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	4a2d      	ldr	r2, [pc, #180]	@ (8003648 <OSTaskStkInit+0x2c4>)
 8003592:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x41D80000u;                           /* S27                                                  */
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	3b04      	subs	r3, #4
 8003598:	617b      	str	r3, [r7, #20]
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	4a2b      	ldr	r2, [pc, #172]	@ (800364c <OSTaskStkInit+0x2c8>)
 800359e:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x41D00000u;                           /* S26                                                  */
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	3b04      	subs	r3, #4
 80035a4:	617b      	str	r3, [r7, #20]
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	4a29      	ldr	r2, [pc, #164]	@ (8003650 <OSTaskStkInit+0x2cc>)
 80035aa:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x41C80000u;                           /* S25                                                  */
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	3b04      	subs	r3, #4
 80035b0:	617b      	str	r3, [r7, #20]
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	4a27      	ldr	r2, [pc, #156]	@ (8003654 <OSTaskStkInit+0x2d0>)
 80035b6:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x41C00000u;                           /* S24                                                  */
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	3b04      	subs	r3, #4
 80035bc:	617b      	str	r3, [r7, #20]
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	4a25      	ldr	r2, [pc, #148]	@ (8003658 <OSTaskStkInit+0x2d4>)
 80035c2:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x41B80000u;                           /* S23                                                  */
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	3b04      	subs	r3, #4
 80035c8:	617b      	str	r3, [r7, #20]
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	4a23      	ldr	r2, [pc, #140]	@ (800365c <OSTaskStkInit+0x2d8>)
 80035ce:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x41B00000u;                           /* S22                                                  */
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	3b04      	subs	r3, #4
 80035d4:	617b      	str	r3, [r7, #20]
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	4a21      	ldr	r2, [pc, #132]	@ (8003660 <OSTaskStkInit+0x2dc>)
 80035da:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x41A80000u;                           /* S21                                                  */
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	3b04      	subs	r3, #4
 80035e0:	617b      	str	r3, [r7, #20]
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	4a1f      	ldr	r2, [pc, #124]	@ (8003664 <OSTaskStkInit+0x2e0>)
 80035e6:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x41A00000u;                           /* S20                                                  */
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	3b04      	subs	r3, #4
 80035ec:	617b      	str	r3, [r7, #20]
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	4a1d      	ldr	r2, [pc, #116]	@ (8003668 <OSTaskStkInit+0x2e4>)
 80035f2:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x41980000u;                           /* S19                                                  */
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	3b04      	subs	r3, #4
 80035f8:	617b      	str	r3, [r7, #20]
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	4a1b      	ldr	r2, [pc, #108]	@ (800366c <OSTaskStkInit+0x2e8>)
 80035fe:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x41900000u;                           /* S18                                                  */
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	3b04      	subs	r3, #4
 8003604:	617b      	str	r3, [r7, #20]
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	e032      	b.n	8003670 <OSTaskStkInit+0x2ec>
 800360a:	bf00      	nop
 800360c:	41700000 	.word	0x41700000
 8003610:	41600000 	.word	0x41600000
 8003614:	41500000 	.word	0x41500000
 8003618:	41400000 	.word	0x41400000
 800361c:	41300000 	.word	0x41300000
 8003620:	41200000 	.word	0x41200000
 8003624:	41100000 	.word	0x41100000
 8003628:	40e00000 	.word	0x40e00000
 800362c:	40c00000 	.word	0x40c00000
 8003630:	40a00000 	.word	0x40a00000
 8003634:	40400000 	.word	0x40400000
 8003638:	08005765 	.word	0x08005765
 800363c:	41f80000 	.word	0x41f80000
 8003640:	41f00000 	.word	0x41f00000
 8003644:	41e80000 	.word	0x41e80000
 8003648:	41e00000 	.word	0x41e00000
 800364c:	41d80000 	.word	0x41d80000
 8003650:	41d00000 	.word	0x41d00000
 8003654:	41c80000 	.word	0x41c80000
 8003658:	41c00000 	.word	0x41c00000
 800365c:	41b80000 	.word	0x41b80000
 8003660:	41b00000 	.word	0x41b00000
 8003664:	41a80000 	.word	0x41a80000
 8003668:	41a00000 	.word	0x41a00000
 800366c:	41980000 	.word	0x41980000
 8003670:	4a0a      	ldr	r2, [pc, #40]	@ (800369c <OSTaskStkInit+0x318>)
 8003672:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x41880000u;                           /* S17                                                  */
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	3b04      	subs	r3, #4
 8003678:	617b      	str	r3, [r7, #20]
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	4a08      	ldr	r2, [pc, #32]	@ (80036a0 <OSTaskStkInit+0x31c>)
 800367e:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x41800000u;                           /* S16                                                  */
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	3b04      	subs	r3, #4
 8003684:	617b      	str	r3, [r7, #20]
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	f04f 4283 	mov.w	r2, #1098907648	@ 0x41800000
 800368c:	601a      	str	r2, [r3, #0]
#endif

    return (p_stk);
 800368e:	697b      	ldr	r3, [r7, #20]
}
 8003690:	4618      	mov	r0, r3
 8003692:	371c      	adds	r7, #28
 8003694:	46bd      	mov	sp, r7
 8003696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369a:	4770      	bx	lr
 800369c:	41900000 	.word	0x41900000
 80036a0:	41880000 	.word	0x41880000

080036a4 <OSTaskSwHook>:
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
#if (OS_CPU_HOOKS_EN > 0u) && (OS_TASK_SW_HOOK_EN > 0u)
void  OSTaskSwHook (void)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	af00      	add	r7, sp, #0

#if (OS_CPU_ARM_FP_EN > 0u)
    OS_CPU_FP_Reg_Push(OSTCBCur->OSTCBStkPtr);                  /* Push the FP registers of the current task.           */
 80036a8:	4b07      	ldr	r3, [pc, #28]	@ (80036c8 <OSTaskSwHook+0x24>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4618      	mov	r0, r3
 80036b0:	f7fc fd8a 	bl	80001c8 <OS_CPU_FP_Reg_Push>
#endif

#if OS_APP_HOOKS_EN > 0u
    App_TaskSwHook();
 80036b4:	f7ff fdd7 	bl	8003266 <App_TaskSwHook>
#endif

    OS_TRACE_TASK_SWITCHED_IN(OSTCBHighRdy);

#if (OS_CPU_ARM_FP_EN > 0u)
    OS_CPU_FP_Reg_Pop(OSTCBHighRdy->OSTCBStkPtr);               /* Pop the FP registers of the highest ready task.      */
 80036b8:	4b04      	ldr	r3, [pc, #16]	@ (80036cc <OSTaskSwHook+0x28>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4618      	mov	r0, r3
 80036c0:	f7fc fd8b 	bl	80001da <OS_CPU_FP_Reg_Pop>
#endif
}
 80036c4:	bf00      	nop
 80036c6:	bd80      	pop	{r7, pc}
 80036c8:	20001238 	.word	0x20001238
 80036cc:	20001240 	.word	0x20001240

080036d0 <OSTCBInitHook>:
* Note(s)    : 1) Interrupts may or may not be ENABLED during this call.
*********************************************************************************************************
*/
#if OS_CPU_HOOKS_EN > 0u
void  OSTCBInitHook (OS_TCB *ptcb)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b082      	sub	sp, #8
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
#if OS_APP_HOOKS_EN > 0u
    App_TCBInitHook(ptcb);
 80036d8:	6878      	ldr	r0, [r7, #4]
 80036da:	f7ff fdcb 	bl	8003274 <App_TCBInitHook>
#else
    (void)ptcb;                                                 /* Prevent compiler warning                             */
#endif
}
 80036de:	bf00      	nop
 80036e0:	3708      	adds	r7, #8
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}
	...

080036e8 <OSTimeTickHook>:
* Note(s)    : 1) Interrupts may or may not be ENABLED during this call.
*********************************************************************************************************
*/
#if (OS_CPU_HOOKS_EN > 0u) && (OS_TIME_TICK_HOOK_EN > 0u)
void  OSTimeTickHook (void)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	af00      	add	r7, sp, #0
#if OS_APP_HOOKS_EN > 0u
    App_TimeTickHook();
 80036ec:	f7ff fdcc 	bl	8003288 <App_TimeTickHook>
#endif

#if OS_TMR_EN > 0u
    OSTmrCtr++;
 80036f0:	4b08      	ldr	r3, [pc, #32]	@ (8003714 <OSTimeTickHook+0x2c>)
 80036f2:	881b      	ldrh	r3, [r3, #0]
 80036f4:	3301      	adds	r3, #1
 80036f6:	b29a      	uxth	r2, r3
 80036f8:	4b06      	ldr	r3, [pc, #24]	@ (8003714 <OSTimeTickHook+0x2c>)
 80036fa:	801a      	strh	r2, [r3, #0]
    if (OSTmrCtr >= (OS_TICKS_PER_SEC / OS_TMR_CFG_TICKS_PER_SEC)) {
 80036fc:	4b05      	ldr	r3, [pc, #20]	@ (8003714 <OSTimeTickHook+0x2c>)
 80036fe:	881b      	ldrh	r3, [r3, #0]
 8003700:	2b09      	cmp	r3, #9
 8003702:	d904      	bls.n	800370e <OSTimeTickHook+0x26>
        OSTmrCtr = 0u;
 8003704:	4b03      	ldr	r3, [pc, #12]	@ (8003714 <OSTimeTickHook+0x2c>)
 8003706:	2200      	movs	r2, #0
 8003708:	801a      	strh	r2, [r3, #0]
        OSTmrSignal();
 800370a:	f002 f8b1 	bl	8005870 <OSTmrSignal>
    }
#endif
}
 800370e:	bf00      	nop
 8003710:	bd80      	pop	{r7, pc}
 8003712:	bf00      	nop
 8003714:	20000cbc 	.word	0x20000cbc

08003718 <OS_CPU_SysTickHandler>:
* Note(s)    : 1) This function MUST be placed on entry 15 of the Cortex-M vector table.
*********************************************************************************************************
*/

void  OS_CPU_SysTickHandler (void)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b082      	sub	sp, #8
 800371c:	af00      	add	r7, sp, #0
#if OS_CRITICAL_METHOD == 3u                                    /* Allocate storage for CPU status register             */
    OS_CPU_SR  cpu_sr;
#endif


    OS_ENTER_CRITICAL();
 800371e:	2040      	movs	r0, #64	@ 0x40
 8003720:	f7fc fd61 	bl	80001e6 <OS_CPU_SR_Save>
 8003724:	6078      	str	r0, [r7, #4]
    OSIntEnter();                                               /* Tell uC/OS-II that we are starting an ISR            */
 8003726:	f000 f951 	bl	80039cc <OSIntEnter>
    OS_EXIT_CRITICAL();
 800372a:	6878      	ldr	r0, [r7, #4]
 800372c:	f7fc fd69 	bl	8000202 <OS_CPU_SR_Restore>

    OSTimeTick();                                               /* Call uC/OS-II's OSTimeTick()                         */
 8003730:	f000 fa42 	bl	8003bb8 <OSTimeTick>

    OSIntExit();                                                /* Tell uC/OS-II that we are leaving the ISR            */
 8003734:	f000 f964 	bl	8003a00 <OSIntExit>
}
 8003738:	bf00      	nop
 800373a:	3708      	adds	r7, #8
 800373c:	46bd      	mov	sp, r7
 800373e:	bd80      	pop	{r7, pc}

08003740 <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0u
void  OSDebugInit (void)
{
 8003740:	b480      	push	{r7}
 8003742:	b083      	sub	sp, #12
 8003744:	af00      	add	r7, sp, #0
    void  *ptemp;


    ptemp = (void *)&OSDebugEn;
 8003746:	4b3c      	ldr	r3, [pc, #240]	@ (8003838 <OSDebugInit+0xf8>)
 8003748:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSEndiannessTest;
 800374a:	4b3c      	ldr	r3, [pc, #240]	@ (800383c <OSDebugInit+0xfc>)
 800374c:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSEventMax;
 800374e:	4b3c      	ldr	r3, [pc, #240]	@ (8003840 <OSDebugInit+0x100>)
 8003750:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSEventNameEn;
 8003752:	4b3c      	ldr	r3, [pc, #240]	@ (8003844 <OSDebugInit+0x104>)
 8003754:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSEventEn;
 8003756:	4b3c      	ldr	r3, [pc, #240]	@ (8003848 <OSDebugInit+0x108>)
 8003758:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSEventSize;
 800375a:	4b3c      	ldr	r3, [pc, #240]	@ (800384c <OSDebugInit+0x10c>)
 800375c:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSEventTblSize;
 800375e:	4b3c      	ldr	r3, [pc, #240]	@ (8003850 <OSDebugInit+0x110>)
 8003760:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSEventMultiEn;
 8003762:	4b3c      	ldr	r3, [pc, #240]	@ (8003854 <OSDebugInit+0x114>)
 8003764:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSFlagEn;
 8003766:	4b3c      	ldr	r3, [pc, #240]	@ (8003858 <OSDebugInit+0x118>)
 8003768:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSFlagGrpSize;
 800376a:	4b3c      	ldr	r3, [pc, #240]	@ (800385c <OSDebugInit+0x11c>)
 800376c:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSFlagNodeSize;
 800376e:	4b3c      	ldr	r3, [pc, #240]	@ (8003860 <OSDebugInit+0x120>)
 8003770:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSFlagWidth;
 8003772:	4b3c      	ldr	r3, [pc, #240]	@ (8003864 <OSDebugInit+0x124>)
 8003774:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSFlagMax;
 8003776:	4b3c      	ldr	r3, [pc, #240]	@ (8003868 <OSDebugInit+0x128>)
 8003778:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSFlagNameEn;
 800377a:	4b3c      	ldr	r3, [pc, #240]	@ (800386c <OSDebugInit+0x12c>)
 800377c:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSLowestPrio;
 800377e:	4b3c      	ldr	r3, [pc, #240]	@ (8003870 <OSDebugInit+0x130>)
 8003780:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSMboxEn;
 8003782:	4b3c      	ldr	r3, [pc, #240]	@ (8003874 <OSDebugInit+0x134>)
 8003784:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSMemEn;
 8003786:	4b3c      	ldr	r3, [pc, #240]	@ (8003878 <OSDebugInit+0x138>)
 8003788:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSMemMax;
 800378a:	4b3c      	ldr	r3, [pc, #240]	@ (800387c <OSDebugInit+0x13c>)
 800378c:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSMemNameEn;
 800378e:	4b3c      	ldr	r3, [pc, #240]	@ (8003880 <OSDebugInit+0x140>)
 8003790:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSMemSize;
 8003792:	4b3c      	ldr	r3, [pc, #240]	@ (8003884 <OSDebugInit+0x144>)
 8003794:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSMemTblSize;
 8003796:	4b3c      	ldr	r3, [pc, #240]	@ (8003888 <OSDebugInit+0x148>)
 8003798:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSMutexEn;
 800379a:	4b3c      	ldr	r3, [pc, #240]	@ (800388c <OSDebugInit+0x14c>)
 800379c:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSPtrSize;
 800379e:	4b3c      	ldr	r3, [pc, #240]	@ (8003890 <OSDebugInit+0x150>)
 80037a0:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSQEn;
 80037a2:	4b3c      	ldr	r3, [pc, #240]	@ (8003894 <OSDebugInit+0x154>)
 80037a4:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSQMax;
 80037a6:	4b3c      	ldr	r3, [pc, #240]	@ (8003898 <OSDebugInit+0x158>)
 80037a8:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSQSize;
 80037aa:	4b3c      	ldr	r3, [pc, #240]	@ (800389c <OSDebugInit+0x15c>)
 80037ac:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSRdyTblSize;
 80037ae:	4b3c      	ldr	r3, [pc, #240]	@ (80038a0 <OSDebugInit+0x160>)
 80037b0:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSSemEn;
 80037b2:	4b3c      	ldr	r3, [pc, #240]	@ (80038a4 <OSDebugInit+0x164>)
 80037b4:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSStkWidth;
 80037b6:	4b3c      	ldr	r3, [pc, #240]	@ (80038a8 <OSDebugInit+0x168>)
 80037b8:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSTaskCreateEn;
 80037ba:	4b3c      	ldr	r3, [pc, #240]	@ (80038ac <OSDebugInit+0x16c>)
 80037bc:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTaskCreateExtEn;
 80037be:	4b3c      	ldr	r3, [pc, #240]	@ (80038b0 <OSDebugInit+0x170>)
 80037c0:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTaskDelEn;
 80037c2:	4b3c      	ldr	r3, [pc, #240]	@ (80038b4 <OSDebugInit+0x174>)
 80037c4:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTaskIdleStkSize;
 80037c6:	4b3c      	ldr	r3, [pc, #240]	@ (80038b8 <OSDebugInit+0x178>)
 80037c8:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTaskProfileEn;
 80037ca:	4b3c      	ldr	r3, [pc, #240]	@ (80038bc <OSDebugInit+0x17c>)
 80037cc:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTaskMax;
 80037ce:	4b3c      	ldr	r3, [pc, #240]	@ (80038c0 <OSDebugInit+0x180>)
 80037d0:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTaskNameEn;
 80037d2:	4b3c      	ldr	r3, [pc, #240]	@ (80038c4 <OSDebugInit+0x184>)
 80037d4:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTaskStatEn;
 80037d6:	4b3c      	ldr	r3, [pc, #240]	@ (80038c8 <OSDebugInit+0x188>)
 80037d8:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTaskStatStkSize;
 80037da:	4b3c      	ldr	r3, [pc, #240]	@ (80038cc <OSDebugInit+0x18c>)
 80037dc:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTaskStatStkChkEn;
 80037de:	4b3c      	ldr	r3, [pc, #240]	@ (80038d0 <OSDebugInit+0x190>)
 80037e0:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTaskSwHookEn;
 80037e2:	4b3c      	ldr	r3, [pc, #240]	@ (80038d4 <OSDebugInit+0x194>)
 80037e4:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSTCBPrioTblMax;
 80037e6:	4b3c      	ldr	r3, [pc, #240]	@ (80038d8 <OSDebugInit+0x198>)
 80037e8:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTCBSize;
 80037ea:	4b3c      	ldr	r3, [pc, #240]	@ (80038dc <OSDebugInit+0x19c>)
 80037ec:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSTicksPerSec;
 80037ee:	4b3c      	ldr	r3, [pc, #240]	@ (80038e0 <OSDebugInit+0x1a0>)
 80037f0:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTimeTickHookEn;
 80037f2:	4b3c      	ldr	r3, [pc, #240]	@ (80038e4 <OSDebugInit+0x1a4>)
 80037f4:	607b      	str	r3, [r7, #4]

#if OS_TMR_EN > 0u
    ptemp = (void *)&OSTmrTbl[0];
 80037f6:	4b3c      	ldr	r3, [pc, #240]	@ (80038e8 <OSDebugInit+0x1a8>)
 80037f8:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTmrWheelTbl[0];
 80037fa:	4b3c      	ldr	r3, [pc, #240]	@ (80038ec <OSDebugInit+0x1ac>)
 80037fc:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSTmrEn;
 80037fe:	4b3c      	ldr	r3, [pc, #240]	@ (80038f0 <OSDebugInit+0x1b0>)
 8003800:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTmrCfgMax;
 8003802:	4b3c      	ldr	r3, [pc, #240]	@ (80038f4 <OSDebugInit+0x1b4>)
 8003804:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTmrCfgNameEn;
 8003806:	4b3c      	ldr	r3, [pc, #240]	@ (80038f8 <OSDebugInit+0x1b8>)
 8003808:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTmrCfgWheelSize;
 800380a:	4b3c      	ldr	r3, [pc, #240]	@ (80038fc <OSDebugInit+0x1bc>)
 800380c:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTmrCfgTicksPerSec;
 800380e:	4b3c      	ldr	r3, [pc, #240]	@ (8003900 <OSDebugInit+0x1c0>)
 8003810:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTmrSize;
 8003812:	4b3c      	ldr	r3, [pc, #240]	@ (8003904 <OSDebugInit+0x1c4>)
 8003814:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTmrTblSize;
 8003816:	4b3c      	ldr	r3, [pc, #240]	@ (8003908 <OSDebugInit+0x1c8>)
 8003818:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSTmrWheelSize;
 800381a:	4b3c      	ldr	r3, [pc, #240]	@ (800390c <OSDebugInit+0x1cc>)
 800381c:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTmrWheelTblSize;
 800381e:	4b3c      	ldr	r3, [pc, #240]	@ (8003910 <OSDebugInit+0x1d0>)
 8003820:	607b      	str	r3, [r7, #4]
#endif

    ptemp = (void *)&OSVersionNbr;
 8003822:	4b3c      	ldr	r3, [pc, #240]	@ (8003914 <OSDebugInit+0x1d4>)
 8003824:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSDataSize;
 8003826:	4b3c      	ldr	r3, [pc, #240]	@ (8003918 <OSDebugInit+0x1d8>)
 8003828:	607b      	str	r3, [r7, #4]

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
 800382a:	bf00      	nop
 800382c:	370c      	adds	r7, #12
 800382e:	46bd      	mov	sp, r7
 8003830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003834:	4770      	bx	lr
 8003836:	bf00      	nop
 8003838:	08005d64 	.word	0x08005d64
 800383c:	08005d68 	.word	0x08005d68
 8003840:	08005d6e 	.word	0x08005d6e
 8003844:	08005d70 	.word	0x08005d70
 8003848:	08005d6c 	.word	0x08005d6c
 800384c:	08005d72 	.word	0x08005d72
 8003850:	08005d74 	.word	0x08005d74
 8003854:	08005d76 	.word	0x08005d76
 8003858:	08005d78 	.word	0x08005d78
 800385c:	08005d7a 	.word	0x08005d7a
 8003860:	08005d7c 	.word	0x08005d7c
 8003864:	08005d7e 	.word	0x08005d7e
 8003868:	08005d80 	.word	0x08005d80
 800386c:	08005d82 	.word	0x08005d82
 8003870:	08005d84 	.word	0x08005d84
 8003874:	08005d86 	.word	0x08005d86
 8003878:	08005d88 	.word	0x08005d88
 800387c:	08005d8a 	.word	0x08005d8a
 8003880:	08005d8c 	.word	0x08005d8c
 8003884:	08005d8e 	.word	0x08005d8e
 8003888:	08005d90 	.word	0x08005d90
 800388c:	08005d92 	.word	0x08005d92
 8003890:	08005d94 	.word	0x08005d94
 8003894:	08005d96 	.word	0x08005d96
 8003898:	08005d98 	.word	0x08005d98
 800389c:	08005d9a 	.word	0x08005d9a
 80038a0:	08005d9c 	.word	0x08005d9c
 80038a4:	08005d9e 	.word	0x08005d9e
 80038a8:	08005da0 	.word	0x08005da0
 80038ac:	08005da2 	.word	0x08005da2
 80038b0:	08005da4 	.word	0x08005da4
 80038b4:	08005da6 	.word	0x08005da6
 80038b8:	08005da8 	.word	0x08005da8
 80038bc:	08005daa 	.word	0x08005daa
 80038c0:	08005dac 	.word	0x08005dac
 80038c4:	08005dae 	.word	0x08005dae
 80038c8:	08005db0 	.word	0x08005db0
 80038cc:	08005db2 	.word	0x08005db2
 80038d0:	08005db4 	.word	0x08005db4
 80038d4:	08005db6 	.word	0x08005db6
 80038d8:	08005db8 	.word	0x08005db8
 80038dc:	08005dba 	.word	0x08005dba
 80038e0:	08005dbc 	.word	0x08005dbc
 80038e4:	08005dbe 	.word	0x08005dbe
 80038e8:	20001c2c 	.word	0x20001c2c
 80038ec:	200020b0 	.word	0x200020b0
 80038f0:	08005dc2 	.word	0x08005dc2
 80038f4:	08005dc4 	.word	0x08005dc4
 80038f8:	08005dc6 	.word	0x08005dc6
 80038fc:	08005dc8 	.word	0x08005dc8
 8003900:	08005dca 	.word	0x08005dca
 8003904:	08005dcc 	.word	0x08005dcc
 8003908:	08005dce 	.word	0x08005dce
 800390c:	08005dd0 	.word	0x08005dd0
 8003910:	08005dd2 	.word	0x08005dd2
 8003914:	08005dc0 	.word	0x08005dc0
 8003918:	08005dd4 	.word	0x08005dd4

0800391c <OSEventNameSet>:

#if (OS_EVENT_EN) && (OS_EVENT_NAME_EN > 0u)
void  OSEventNameSet (OS_EVENT  *pevent,
                      INT8U     *pname,
                      INT8U     *perr)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b086      	sub	sp, #24
 8003920:	af00      	add	r7, sp, #0
 8003922:	60f8      	str	r0, [r7, #12]
 8003924:	60b9      	str	r1, [r7, #8]
 8003926:	607a      	str	r2, [r7, #4]
#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0u;
 8003928:	2300      	movs	r3, #0
 800392a:	617b      	str	r3, [r7, #20]
        return;
    }
#endif

#if OS_ARG_CHK_EN > 0u
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d103      	bne.n	800393a <OSEventNameSet+0x1e>
        *perr = OS_ERR_PEVENT_NULL;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2204      	movs	r2, #4
 8003936:	701a      	strb	r2, [r3, #0]
        return;
 8003938:	e025      	b.n	8003986 <OSEventNameSet+0x6a>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d103      	bne.n	8003948 <OSEventNameSet+0x2c>
        *perr = OS_ERR_PNAME_NULL;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	220c      	movs	r2, #12
 8003944:	701a      	strb	r2, [r3, #0]
        return;
 8003946:	e01e      	b.n	8003986 <OSEventNameSet+0x6a>
    }
#endif
    if (OSIntNesting > 0u) {                     /* See if trying to call from an ISR                  */
 8003948:	4b10      	ldr	r3, [pc, #64]	@ (800398c <OSEventNameSet+0x70>)
 800394a:	781b      	ldrb	r3, [r3, #0]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d003      	beq.n	8003958 <OSEventNameSet+0x3c>
        *perr = OS_ERR_NAME_SET_ISR;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2212      	movs	r2, #18
 8003954:	701a      	strb	r2, [r3, #0]
        return;
 8003956:	e016      	b.n	8003986 <OSEventNameSet+0x6a>
    }
    switch (pevent->OSEventType) {
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	781b      	ldrb	r3, [r3, #0]
 800395c:	3b01      	subs	r3, #1
 800395e:	2b03      	cmp	r3, #3
 8003960:	d903      	bls.n	800396a <OSEventNameSet+0x4e>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2201      	movs	r2, #1
 8003966:	701a      	strb	r2, [r3, #0]
             return;
 8003968:	e00d      	b.n	8003986 <OSEventNameSet+0x6a>
             break;
 800396a:	bf00      	nop
    }
    OS_ENTER_CRITICAL();
 800396c:	2040      	movs	r0, #64	@ 0x40
 800396e:	f7fc fc3a 	bl	80001e6 <OS_CPU_SR_Save>
 8003972:	6178      	str	r0, [r7, #20]
    pevent->OSEventName = pname;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	68ba      	ldr	r2, [r7, #8]
 8003978:	615a      	str	r2, [r3, #20]
    OS_EXIT_CRITICAL();
 800397a:	6978      	ldr	r0, [r7, #20]
 800397c:	f7fc fc41 	bl	8000202 <OS_CPU_SR_Restore>
    OS_TRACE_EVENT_NAME_SET(pevent, pname);
    *perr = OS_ERR_NONE;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2200      	movs	r2, #0
 8003984:	701a      	strb	r2, [r3, #0]
}
 8003986:	3718      	adds	r7, #24
 8003988:	46bd      	mov	sp, r7
 800398a:	bd80      	pop	{r7, pc}
 800398c:	20001020 	.word	0x20001020

08003990 <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	af00      	add	r7, sp, #0
#if defined(OS_TLS_TBL_SIZE) && (OS_TLS_TBL_SIZE > 0u)
    INT8U  err;
#endif
#endif

    OSInitHookBegin();                                           /* Call port specific initialization code   */
 8003994:	f7ff fc80 	bl	8003298 <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
 8003998:	f000 fb64 	bl	8004064 <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
 800399c:	f000 fba0 	bl	80040e0 <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
 80039a0:	f000 fc1c 	bl	80041dc <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
 80039a4:	f000 fb14 	bl	8003fd0 <OS_InitEventList>

#if (OS_FLAG_EN > 0u) && (OS_MAX_FLAGS > 0u)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
 80039a8:	f001 f9d8 	bl	8004d5c <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0u) && (OS_MAX_MEM_PART > 0u)
    OS_MemInit();                                                /* Initialize the memory manager            */
 80039ac:	f001 fa96 	bl	8004edc <OS_MemInit>
#endif

#if (OS_Q_EN > 0u) && (OS_MAX_QS > 0u)
    OS_QInit();                                                  /* Initialize the message queue structures  */
 80039b0:	f001 fad4 	bl	8004f5c <OS_QInit>
        return;
    }
#endif
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
 80039b4:	f000 fbc6 	bl	8004144 <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0u
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
 80039b8:	f000 fbea 	bl	8004190 <OS_InitTaskStat>
#endif

#if OS_TMR_EN > 0u
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
 80039bc:	f001 ff6a 	bl	8005894 <OSTmr_Init>
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
 80039c0:	f7ff fcac 	bl	800331c <OSInitHookEnd>

#if OS_DEBUG_EN > 0u
    OSDebugInit();
 80039c4:	f7ff febc 	bl	8003740 <OSDebugInit>
#endif
}
 80039c8:	bf00      	nop
 80039ca:	bd80      	pop	{r7, pc}

080039cc <OSIntEnter>:
*                 OSIntEnter() is always called with interrupts disabled.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
 80039cc:	b480      	push	{r7}
 80039ce:	af00      	add	r7, sp, #0
    if (OSRunning == OS_TRUE) {
 80039d0:	4b09      	ldr	r3, [pc, #36]	@ (80039f8 <OSIntEnter+0x2c>)
 80039d2:	781b      	ldrb	r3, [r3, #0]
 80039d4:	2b01      	cmp	r3, #1
 80039d6:	d109      	bne.n	80039ec <OSIntEnter+0x20>
        if (OSIntNesting < 255u) {
 80039d8:	4b08      	ldr	r3, [pc, #32]	@ (80039fc <OSIntEnter+0x30>)
 80039da:	781b      	ldrb	r3, [r3, #0]
 80039dc:	2bff      	cmp	r3, #255	@ 0xff
 80039de:	d005      	beq.n	80039ec <OSIntEnter+0x20>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
 80039e0:	4b06      	ldr	r3, [pc, #24]	@ (80039fc <OSIntEnter+0x30>)
 80039e2:	781b      	ldrb	r3, [r3, #0]
 80039e4:	3301      	adds	r3, #1
 80039e6:	b2da      	uxtb	r2, r3
 80039e8:	4b04      	ldr	r3, [pc, #16]	@ (80039fc <OSIntEnter+0x30>)
 80039ea:	701a      	strb	r2, [r3, #0]
        }
        OS_TRACE_ISR_ENTER();
    }
}
 80039ec:	bf00      	nop
 80039ee:	46bd      	mov	sp, r7
 80039f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f4:	4770      	bx	lr
 80039f6:	bf00      	nop
 80039f8:	20001030 	.word	0x20001030
 80039fc:	20001020 	.word	0x20001020

08003a00 <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b082      	sub	sp, #8
 8003a04:	af00      	add	r7, sp, #0
#if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0u;
 8003a06:	2300      	movs	r3, #0
 8003a08:	607b      	str	r3, [r7, #4]
#endif



    if (OSRunning == OS_TRUE) {
 8003a0a:	4b1e      	ldr	r3, [pc, #120]	@ (8003a84 <OSIntExit+0x84>)
 8003a0c:	781b      	ldrb	r3, [r3, #0]
 8003a0e:	2b01      	cmp	r3, #1
 8003a10:	d134      	bne.n	8003a7c <OSIntExit+0x7c>
        OS_ENTER_CRITICAL();
 8003a12:	2040      	movs	r0, #64	@ 0x40
 8003a14:	f7fc fbe7 	bl	80001e6 <OS_CPU_SR_Save>
 8003a18:	6078      	str	r0, [r7, #4]
        if (OSIntNesting > 0u) {                           /* Prevent OSIntNesting from wrapping       */
 8003a1a:	4b1b      	ldr	r3, [pc, #108]	@ (8003a88 <OSIntExit+0x88>)
 8003a1c:	781b      	ldrb	r3, [r3, #0]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d005      	beq.n	8003a2e <OSIntExit+0x2e>
            OSIntNesting--;
 8003a22:	4b19      	ldr	r3, [pc, #100]	@ (8003a88 <OSIntExit+0x88>)
 8003a24:	781b      	ldrb	r3, [r3, #0]
 8003a26:	3b01      	subs	r3, #1
 8003a28:	b2da      	uxtb	r2, r3
 8003a2a:	4b17      	ldr	r3, [pc, #92]	@ (8003a88 <OSIntExit+0x88>)
 8003a2c:	701a      	strb	r2, [r3, #0]
        }
        if (OSIntNesting == 0u) {                          /* Reschedule only if all ISRs complete ... */
 8003a2e:	4b16      	ldr	r3, [pc, #88]	@ (8003a88 <OSIntExit+0x88>)
 8003a30:	781b      	ldrb	r3, [r3, #0]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d11f      	bne.n	8003a76 <OSIntExit+0x76>
            if (OSLockNesting == 0u) {                     /* ... and not locked.                      */
 8003a36:	4b15      	ldr	r3, [pc, #84]	@ (8003a8c <OSIntExit+0x8c>)
 8003a38:	781b      	ldrb	r3, [r3, #0]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d11b      	bne.n	8003a76 <OSIntExit+0x76>
                OS_SchedNew();
 8003a3e:	f000 fc77 	bl	8004330 <OS_SchedNew>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
 8003a42:	4b13      	ldr	r3, [pc, #76]	@ (8003a90 <OSIntExit+0x90>)
 8003a44:	781b      	ldrb	r3, [r3, #0]
 8003a46:	461a      	mov	r2, r3
 8003a48:	4b12      	ldr	r3, [pc, #72]	@ (8003a94 <OSIntExit+0x94>)
 8003a4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a4e:	4a12      	ldr	r2, [pc, #72]	@ (8003a98 <OSIntExit+0x98>)
 8003a50:	6013      	str	r3, [r2, #0]
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
 8003a52:	4b0f      	ldr	r3, [pc, #60]	@ (8003a90 <OSIntExit+0x90>)
 8003a54:	781a      	ldrb	r2, [r3, #0]
 8003a56:	4b11      	ldr	r3, [pc, #68]	@ (8003a9c <OSIntExit+0x9c>)
 8003a58:	781b      	ldrb	r3, [r3, #0]
 8003a5a:	429a      	cmp	r2, r3
 8003a5c:	d00b      	beq.n	8003a76 <OSIntExit+0x76>
#if OS_TASK_PROFILE_EN > 0u
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
 8003a5e:	4b0e      	ldr	r3, [pc, #56]	@ (8003a98 <OSIntExit+0x98>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003a64:	3201      	adds	r2, #1
 8003a66:	641a      	str	r2, [r3, #64]	@ 0x40
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
 8003a68:	4b0d      	ldr	r3, [pc, #52]	@ (8003aa0 <OSIntExit+0xa0>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	3301      	adds	r3, #1
 8003a6e:	4a0c      	ldr	r2, [pc, #48]	@ (8003aa0 <OSIntExit+0xa0>)
 8003a70:	6013      	str	r3, [r2, #0]
                    OS_TLS_TaskSw();
#endif
#endif
                    OS_TRACE_ISR_EXIT_TO_SCHEDULER();

                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
 8003a72:	f7fc fc0f 	bl	8000294 <OSCtxSw>
            }
        } else {
            OS_TRACE_ISR_EXIT();
        }

        OS_EXIT_CRITICAL();
 8003a76:	6878      	ldr	r0, [r7, #4]
 8003a78:	f7fc fbc3 	bl	8000202 <OS_CPU_SR_Restore>
    }
}
 8003a7c:	bf00      	nop
 8003a7e:	3708      	adds	r7, #8
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd80      	pop	{r7, pc}
 8003a84:	20001030 	.word	0x20001030
 8003a88:	20001020 	.word	0x20001020
 8003a8c:	20001021 	.word	0x20001021
 8003a90:	20001023 	.word	0x20001023
 8003a94:	20001248 	.word	0x20001248
 8003a98:	20001240 	.word	0x20001240
 8003a9c:	20001022 	.word	0x20001022
 8003aa0:	20000cc4 	.word	0x20000cc4

08003aa4 <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0u
void  OSSchedLock (void)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b082      	sub	sp, #8
 8003aa8:	af00      	add	r7, sp, #0
#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0u;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	607b      	str	r3, [r7, #4]
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
 8003aae:	4b0e      	ldr	r3, [pc, #56]	@ (8003ae8 <OSSchedLock+0x44>)
 8003ab0:	781b      	ldrb	r3, [r3, #0]
 8003ab2:	2b01      	cmp	r3, #1
 8003ab4:	d114      	bne.n	8003ae0 <OSSchedLock+0x3c>
        OS_ENTER_CRITICAL();
 8003ab6:	2040      	movs	r0, #64	@ 0x40
 8003ab8:	f7fc fb95 	bl	80001e6 <OS_CPU_SR_Save>
 8003abc:	6078      	str	r0, [r7, #4]
        if (OSIntNesting == 0u) {                /* Can't call from an ISR                             */
 8003abe:	4b0b      	ldr	r3, [pc, #44]	@ (8003aec <OSSchedLock+0x48>)
 8003ac0:	781b      	ldrb	r3, [r3, #0]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d109      	bne.n	8003ada <OSSchedLock+0x36>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
 8003ac6:	4b0a      	ldr	r3, [pc, #40]	@ (8003af0 <OSSchedLock+0x4c>)
 8003ac8:	781b      	ldrb	r3, [r3, #0]
 8003aca:	2bff      	cmp	r3, #255	@ 0xff
 8003acc:	d005      	beq.n	8003ada <OSSchedLock+0x36>
                OSLockNesting++;                 /* Increment lock nesting level                       */
 8003ace:	4b08      	ldr	r3, [pc, #32]	@ (8003af0 <OSSchedLock+0x4c>)
 8003ad0:	781b      	ldrb	r3, [r3, #0]
 8003ad2:	3301      	adds	r3, #1
 8003ad4:	b2da      	uxtb	r2, r3
 8003ad6:	4b06      	ldr	r3, [pc, #24]	@ (8003af0 <OSSchedLock+0x4c>)
 8003ad8:	701a      	strb	r2, [r3, #0]
            }
        }
        OS_EXIT_CRITICAL();
 8003ada:	6878      	ldr	r0, [r7, #4]
 8003adc:	f7fc fb91 	bl	8000202 <OS_CPU_SR_Restore>
    }
}
 8003ae0:	bf00      	nop
 8003ae2:	3708      	adds	r7, #8
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}
 8003ae8:	20001030 	.word	0x20001030
 8003aec:	20001020 	.word	0x20001020
 8003af0:	20001021 	.word	0x20001021

08003af4 <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0u
void  OSSchedUnlock (void)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b082      	sub	sp, #8
 8003af8:	af00      	add	r7, sp, #0
#if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0u;
 8003afa:	2300      	movs	r3, #0
 8003afc:	607b      	str	r3, [r7, #4]
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
 8003afe:	4b17      	ldr	r3, [pc, #92]	@ (8003b5c <OSSchedUnlock+0x68>)
 8003b00:	781b      	ldrb	r3, [r3, #0]
 8003b02:	2b01      	cmp	r3, #1
 8003b04:	d126      	bne.n	8003b54 <OSSchedUnlock+0x60>
        OS_ENTER_CRITICAL();
 8003b06:	2040      	movs	r0, #64	@ 0x40
 8003b08:	f7fc fb6d 	bl	80001e6 <OS_CPU_SR_Save>
 8003b0c:	6078      	str	r0, [r7, #4]
        if (OSIntNesting == 0u) {                          /* Can't call from an ISR                   */
 8003b0e:	4b14      	ldr	r3, [pc, #80]	@ (8003b60 <OSSchedUnlock+0x6c>)
 8003b10:	781b      	ldrb	r3, [r3, #0]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d11b      	bne.n	8003b4e <OSSchedUnlock+0x5a>
            if (OSLockNesting > 0u) {                      /* Do not decrement if already 0            */
 8003b16:	4b13      	ldr	r3, [pc, #76]	@ (8003b64 <OSSchedUnlock+0x70>)
 8003b18:	781b      	ldrb	r3, [r3, #0]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d013      	beq.n	8003b46 <OSSchedUnlock+0x52>
                OSLockNesting--;                           /* Decrement lock nesting level             */
 8003b1e:	4b11      	ldr	r3, [pc, #68]	@ (8003b64 <OSSchedUnlock+0x70>)
 8003b20:	781b      	ldrb	r3, [r3, #0]
 8003b22:	3b01      	subs	r3, #1
 8003b24:	b2da      	uxtb	r2, r3
 8003b26:	4b0f      	ldr	r3, [pc, #60]	@ (8003b64 <OSSchedUnlock+0x70>)
 8003b28:	701a      	strb	r2, [r3, #0]
                if (OSLockNesting == 0u) {                 /* See if scheduler is enabled              */
 8003b2a:	4b0e      	ldr	r3, [pc, #56]	@ (8003b64 <OSSchedUnlock+0x70>)
 8003b2c:	781b      	ldrb	r3, [r3, #0]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d105      	bne.n	8003b3e <OSSchedUnlock+0x4a>
                    OS_EXIT_CRITICAL();
 8003b32:	6878      	ldr	r0, [r7, #4]
 8003b34:	f7fc fb65 	bl	8000202 <OS_CPU_SR_Restore>
                    OS_Sched();                            /* See if a HPT is ready                    */
 8003b38:	f000 fbb8 	bl	80042ac <OS_Sched>
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
 8003b3c:	e00a      	b.n	8003b54 <OSSchedUnlock+0x60>
                    OS_EXIT_CRITICAL();
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	f7fc fb5f 	bl	8000202 <OS_CPU_SR_Restore>
}
 8003b44:	e006      	b.n	8003b54 <OSSchedUnlock+0x60>
                OS_EXIT_CRITICAL();
 8003b46:	6878      	ldr	r0, [r7, #4]
 8003b48:	f7fc fb5b 	bl	8000202 <OS_CPU_SR_Restore>
}
 8003b4c:	e002      	b.n	8003b54 <OSSchedUnlock+0x60>
            OS_EXIT_CRITICAL();
 8003b4e:	6878      	ldr	r0, [r7, #4]
 8003b50:	f7fc fb57 	bl	8000202 <OS_CPU_SR_Restore>
}
 8003b54:	bf00      	nop
 8003b56:	3708      	adds	r7, #8
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bd80      	pop	{r7, pc}
 8003b5c:	20001030 	.word	0x20001030
 8003b60:	20001020 	.word	0x20001020
 8003b64:	20001021 	.word	0x20001021

08003b68 <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	af00      	add	r7, sp, #0
    if (OSRunning == OS_FALSE) {
 8003b6c:	4b0c      	ldr	r3, [pc, #48]	@ (8003ba0 <OSStart+0x38>)
 8003b6e:	781b      	ldrb	r3, [r3, #0]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d113      	bne.n	8003b9c <OSStart+0x34>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
 8003b74:	f000 fbdc 	bl	8004330 <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
 8003b78:	4b0a      	ldr	r3, [pc, #40]	@ (8003ba4 <OSStart+0x3c>)
 8003b7a:	781a      	ldrb	r2, [r3, #0]
 8003b7c:	4b0a      	ldr	r3, [pc, #40]	@ (8003ba8 <OSStart+0x40>)
 8003b7e:	701a      	strb	r2, [r3, #0]
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
 8003b80:	4b08      	ldr	r3, [pc, #32]	@ (8003ba4 <OSStart+0x3c>)
 8003b82:	781b      	ldrb	r3, [r3, #0]
 8003b84:	461a      	mov	r2, r3
 8003b86:	4b09      	ldr	r3, [pc, #36]	@ (8003bac <OSStart+0x44>)
 8003b88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b8c:	4a08      	ldr	r2, [pc, #32]	@ (8003bb0 <OSStart+0x48>)
 8003b8e:	6013      	str	r3, [r2, #0]
        OSTCBCur      = OSTCBHighRdy;
 8003b90:	4b07      	ldr	r3, [pc, #28]	@ (8003bb0 <OSStart+0x48>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a07      	ldr	r2, [pc, #28]	@ (8003bb4 <OSStart+0x4c>)
 8003b96:	6013      	str	r3, [r2, #0]
        OSStartHighRdy();                            /* Execute target specific code to start task     */
 8003b98:	f7fc fb3c 	bl	8000214 <OSStartHighRdy>
    }
}
 8003b9c:	bf00      	nop
 8003b9e:	bd80      	pop	{r7, pc}
 8003ba0:	20001030 	.word	0x20001030
 8003ba4:	20001023 	.word	0x20001023
 8003ba8:	20001022 	.word	0x20001022
 8003bac:	20001248 	.word	0x20001248
 8003bb0:	20001240 	.word	0x20001240
 8003bb4:	20001238 	.word	0x20001238

08003bb8 <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b084      	sub	sp, #16
 8003bbc:	af00      	add	r7, sp, #0
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0u
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0u;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	607b      	str	r3, [r7, #4]
#endif



#if OS_TIME_TICK_HOOK_EN > 0u
    OSTimeTickHook();                                      /* Call user definable hook                     */
 8003bc2:	f7ff fd91 	bl	80036e8 <OSTimeTickHook>
#endif
#if OS_TIME_GET_SET_EN > 0u
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
 8003bc6:	2040      	movs	r0, #64	@ 0x40
 8003bc8:	f7fc fb0d 	bl	80001e6 <OS_CPU_SR_Save>
 8003bcc:	6078      	str	r0, [r7, #4]
    OSTime++;
 8003bce:	4b45      	ldr	r3, [pc, #276]	@ (8003ce4 <OSTimeTick+0x12c>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	3301      	adds	r3, #1
 8003bd4:	4a43      	ldr	r2, [pc, #268]	@ (8003ce4 <OSTimeTick+0x12c>)
 8003bd6:	6013      	str	r3, [r2, #0]
    OS_TRACE_TICK_INCREMENT(OSTime);
    OS_EXIT_CRITICAL();
 8003bd8:	6878      	ldr	r0, [r7, #4]
 8003bda:	f7fc fb12 	bl	8000202 <OS_CPU_SR_Restore>
#endif
    if (OSRunning == OS_TRUE) {
 8003bde:	4b42      	ldr	r3, [pc, #264]	@ (8003ce8 <OSTimeTick+0x130>)
 8003be0:	781b      	ldrb	r3, [r3, #0]
 8003be2:	2b01      	cmp	r3, #1
 8003be4:	d17a      	bne.n	8003cdc <OSTimeTick+0x124>
#if OS_TICK_STEP_EN > 0u
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
 8003be6:	4b41      	ldr	r3, [pc, #260]	@ (8003cec <OSTimeTick+0x134>)
 8003be8:	781b      	ldrb	r3, [r3, #0]
 8003bea:	2b02      	cmp	r3, #2
 8003bec:	d00c      	beq.n	8003c08 <OSTimeTick+0x50>
 8003bee:	2b02      	cmp	r3, #2
 8003bf0:	dc10      	bgt.n	8003c14 <OSTimeTick+0x5c>
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d002      	beq.n	8003bfc <OSTimeTick+0x44>
 8003bf6:	2b01      	cmp	r3, #1
 8003bf8:	d003      	beq.n	8003c02 <OSTimeTick+0x4a>
 8003bfa:	e00b      	b.n	8003c14 <OSTimeTick+0x5c>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	72fb      	strb	r3, [r7, #11]
                 break;
 8003c00:	e00e      	b.n	8003c20 <OSTimeTick+0x68>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
 8003c02:	2300      	movs	r3, #0
 8003c04:	72fb      	strb	r3, [r7, #11]
                 break;
 8003c06:	e00b      	b.n	8003c20 <OSTimeTick+0x68>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
 8003c08:	2301      	movs	r3, #1
 8003c0a:	72fb      	strb	r3, [r7, #11]
                 OSTickStepState = OS_TICK_STEP_WAIT;
 8003c0c:	4b37      	ldr	r3, [pc, #220]	@ (8003cec <OSTimeTick+0x134>)
 8003c0e:	2201      	movs	r2, #1
 8003c10:	701a      	strb	r2, [r3, #0]
                 break;
 8003c12:	e005      	b.n	8003c20 <OSTimeTick+0x68>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
 8003c14:	2301      	movs	r3, #1
 8003c16:	72fb      	strb	r3, [r7, #11]
                 OSTickStepState = OS_TICK_STEP_DIS;
 8003c18:	4b34      	ldr	r3, [pc, #208]	@ (8003cec <OSTimeTick+0x134>)
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	701a      	strb	r2, [r3, #0]
                 break;
 8003c1e:	bf00      	nop
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
 8003c20:	7afb      	ldrb	r3, [r7, #11]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d059      	beq.n	8003cda <OSTimeTick+0x122>
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
 8003c26:	4b32      	ldr	r3, [pc, #200]	@ (8003cf0 <OSTimeTick+0x138>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	60fb      	str	r3, [r7, #12]
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
 8003c2c:	e04f      	b.n	8003cce <OSTimeTick+0x116>
            OS_ENTER_CRITICAL();
 8003c2e:	2040      	movs	r0, #64	@ 0x40
 8003c30:	f7fc fad9 	bl	80001e6 <OS_CPU_SR_Save>
 8003c34:	6078      	str	r0, [r7, #4]
            if (ptcb->OSTCBDly != 0u) {                    /* No, Delayed or waiting for event with TO     */
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d041      	beq.n	8003cc2 <OSTimeTick+0x10a>
                ptcb->OSTCBDly--;                          /* Decrement nbr of ticks to end of delay       */
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c42:	1e5a      	subs	r2, r3, #1
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	635a      	str	r2, [r3, #52]	@ 0x34
                if (ptcb->OSTCBDly == 0u) {                /* Check for timeout                            */
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d138      	bne.n	8003cc2 <OSTimeTick+0x10a>

                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003c56:	f003 0337 	and.w	r3, r3, #55	@ 0x37
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d00d      	beq.n	8003c7a <OSTimeTick+0xc2>
                        ptcb->OSTCBStat  &= (INT8U)~(INT8U)OS_STAT_PEND_ANY;   /* Yes, Clear status flag   */
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003c64:	f023 0337 	bic.w	r3, r3, #55	@ 0x37
 8003c68:	b2da      	uxtb	r2, r3
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2201      	movs	r2, #1
 8003c74:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 8003c78:	e003      	b.n	8003c82 <OSTimeTick+0xca>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003c88:	f003 0308 	and.w	r3, r3, #8
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d118      	bne.n	8003cc2 <OSTimeTick+0x10a>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	f893 203e 	ldrb.w	r2, [r3, #62]	@ 0x3e
 8003c96:	4b17      	ldr	r3, [pc, #92]	@ (8003cf4 <OSTimeTick+0x13c>)
 8003c98:	781b      	ldrb	r3, [r3, #0]
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	b2da      	uxtb	r2, r3
 8003c9e:	4b15      	ldr	r3, [pc, #84]	@ (8003cf4 <OSTimeTick+0x13c>)
 8003ca0:	701a      	strb	r2, [r3, #0]
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ca8:	461a      	mov	r2, r3
 8003caa:	4b13      	ldr	r3, [pc, #76]	@ (8003cf8 <OSTimeTick+0x140>)
 8003cac:	5c9a      	ldrb	r2, [r3, r2]
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003cb4:	68f9      	ldr	r1, [r7, #12]
 8003cb6:	f891 103c 	ldrb.w	r1, [r1, #60]	@ 0x3c
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	b2da      	uxtb	r2, r3
 8003cbe:	4b0e      	ldr	r3, [pc, #56]	@ (8003cf8 <OSTimeTick+0x140>)
 8003cc0:	545a      	strb	r2, [r3, r1]
                        OS_TRACE_TASK_READY(ptcb);
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	695b      	ldr	r3, [r3, #20]
 8003cc6:	60fb      	str	r3, [r7, #12]
            OS_EXIT_CRITICAL();
 8003cc8:	6878      	ldr	r0, [r7, #4]
 8003cca:	f7fc fa9a 	bl	8000202 <OS_CPU_SR_Restore>
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8003cd4:	2b3f      	cmp	r3, #63	@ 0x3f
 8003cd6:	d1aa      	bne.n	8003c2e <OSTimeTick+0x76>
 8003cd8:	e000      	b.n	8003cdc <OSTimeTick+0x124>
            return;
 8003cda:	bf00      	nop
        }
    }
}
 8003cdc:	3710      	adds	r7, #16
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}
 8003ce2:	bf00      	nop
 8003ce4:	20001c18 	.word	0x20001c18
 8003ce8:	20001030 	.word	0x20001030
 8003cec:	20001b30 	.word	0x20001b30
 8003cf0:	20001244 	.word	0x20001244
 8003cf4:	20001024 	.word	0x20001024
 8003cf8:	20001028 	.word	0x20001028

08003cfc <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0u
void  OS_Dummy (void)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	af00      	add	r7, sp, #0
}
 8003d00:	bf00      	nop
 8003d02:	46bd      	mov	sp, r7
 8003d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d08:	4770      	bx	lr
	...

08003d0c <OS_EventTaskRdy>:
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT  *pevent,
                        void      *pmsg,
                        INT8U      msk,
                        INT8U      pend_stat)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b086      	sub	sp, #24
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	60f8      	str	r0, [r7, #12]
 8003d14:	60b9      	str	r1, [r7, #8]
 8003d16:	4611      	mov	r1, r2
 8003d18:	461a      	mov	r2, r3
 8003d1a:	460b      	mov	r3, r1
 8003d1c:	71fb      	strb	r3, [r7, #7]
 8003d1e:	4613      	mov	r3, r2
 8003d20:	71bb      	strb	r3, [r7, #6]
    OS_PRIO  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63u
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	7a9b      	ldrb	r3, [r3, #10]
 8003d26:	461a      	mov	r2, r3
 8003d28:	4b2f      	ldr	r3, [pc, #188]	@ (8003de8 <OS_EventTaskRdy+0xdc>)
 8003d2a:	5c9b      	ldrb	r3, [r3, r2]
 8003d2c:	75fb      	strb	r3, [r7, #23]
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
 8003d2e:	7dfb      	ldrb	r3, [r7, #23]
 8003d30:	68fa      	ldr	r2, [r7, #12]
 8003d32:	4413      	add	r3, r2
 8003d34:	7adb      	ldrb	r3, [r3, #11]
 8003d36:	461a      	mov	r2, r3
 8003d38:	4b2b      	ldr	r3, [pc, #172]	@ (8003de8 <OS_EventTaskRdy+0xdc>)
 8003d3a:	5c9b      	ldrb	r3, [r3, r2]
 8003d3c:	75bb      	strb	r3, [r7, #22]
    prio = (INT8U)((y << 3u) + x);                      /* Find priority of task getting the msg       */
 8003d3e:	7dfb      	ldrb	r3, [r7, #23]
 8003d40:	00db      	lsls	r3, r3, #3
 8003d42:	b2da      	uxtb	r2, r3
 8003d44:	7dbb      	ldrb	r3, [r7, #22]
 8003d46:	4413      	add	r3, r2
 8003d48:	757b      	strb	r3, [r7, #21]
        x = OSUnMapTbl[(OS_PRIO)(*ptbl >> 8u) & 0xFFu] + 8u;
    }
    prio = (INT8U)((y << 4u) + x);                      /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
 8003d4a:	7d7b      	ldrb	r3, [r7, #21]
 8003d4c:	4a27      	ldr	r2, [pc, #156]	@ (8003dec <OS_EventTaskRdy+0xe0>)
 8003d4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d52:	613b      	str	r3, [r7, #16]
    ptcb->OSTCBDly        =  0u;                        /* Prevent OSTimeTick() from readying task     */
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	2200      	movs	r2, #0
 8003d58:	635a      	str	r2, [r3, #52]	@ 0x34
#if ((OS_Q_EN > 0u) && (OS_MAX_QS > 0u)) || (OS_MBOX_EN > 0u)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	68ba      	ldr	r2, [r7, #8]
 8003d5e:	629a      	str	r2, [r3, #40]	@ 0x28
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= (INT8U)~msk;                /* Clear bit associated with event type        */
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	f893 2038 	ldrb.w	r2, [r3, #56]	@ 0x38
 8003d66:	79fb      	ldrb	r3, [r7, #7]
 8003d68:	43db      	mvns	r3, r3
 8003d6a:	b2db      	uxtb	r3, r3
 8003d6c:	4013      	ands	r3, r2
 8003d6e:	b2da      	uxtb	r2, r3
 8003d70:	693b      	ldr	r3, [r7, #16]
 8003d72:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	79ba      	ldrb	r2, [r7, #6]
 8003d7a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003d84:	f003 0308 	and.w	r3, r3, #8
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d113      	bne.n	8003db4 <OS_EventTaskRdy+0xa8>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	f893 203e 	ldrb.w	r2, [r3, #62]	@ 0x3e
 8003d92:	4b17      	ldr	r3, [pc, #92]	@ (8003df0 <OS_EventTaskRdy+0xe4>)
 8003d94:	781b      	ldrb	r3, [r3, #0]
 8003d96:	4313      	orrs	r3, r2
 8003d98:	b2da      	uxtb	r2, r3
 8003d9a:	4b15      	ldr	r3, [pc, #84]	@ (8003df0 <OS_EventTaskRdy+0xe4>)
 8003d9c:	701a      	strb	r2, [r3, #0]
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
 8003d9e:	7dfb      	ldrb	r3, [r7, #23]
 8003da0:	4a14      	ldr	r2, [pc, #80]	@ (8003df4 <OS_EventTaskRdy+0xe8>)
 8003da2:	5cd1      	ldrb	r1, [r2, r3]
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	f893 203d 	ldrb.w	r2, [r3, #61]	@ 0x3d
 8003daa:	7dfb      	ldrb	r3, [r7, #23]
 8003dac:	430a      	orrs	r2, r1
 8003dae:	b2d1      	uxtb	r1, r2
 8003db0:	4a10      	ldr	r2, [pc, #64]	@ (8003df4 <OS_EventTaskRdy+0xe8>)
 8003db2:	54d1      	strb	r1, [r2, r3]
        OS_TRACE_TASK_READY(ptcb);
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
 8003db4:	68f9      	ldr	r1, [r7, #12]
 8003db6:	6938      	ldr	r0, [r7, #16]
 8003db8:	f000 f876 	bl	8003ea8 <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0u)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	6a1b      	ldr	r3, [r3, #32]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d00b      	beq.n	8003ddc <OS_EventTaskRdy+0xd0>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
 8003dc4:	693b      	ldr	r3, [r7, #16]
 8003dc6:	6a1b      	ldr	r3, [r3, #32]
 8003dc8:	4619      	mov	r1, r3
 8003dca:	6938      	ldr	r0, [r7, #16]
 8003dcc:	f000 f89f 	bl	8003f0e <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventMultiPtr  = (OS_EVENT **)0;     /* No longer pending on multi list             */
 8003dd0:	693b      	ldr	r3, [r7, #16]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	621a      	str	r2, [r3, #32]
        ptcb->OSTCBEventMultiRdy  = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	68fa      	ldr	r2, [r7, #12]
 8003dda:	625a      	str	r2, [r3, #36]	@ 0x24
    }
#endif

    return (prio);
 8003ddc:	7d7b      	ldrb	r3, [r7, #21]
}
 8003dde:	4618      	mov	r0, r3
 8003de0:	3718      	adds	r7, #24
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd80      	pop	{r7, pc}
 8003de6:	bf00      	nop
 8003de8:	08005dd8 	.word	0x08005dd8
 8003dec:	20001248 	.word	0x20001248
 8003df0:	20001024 	.word	0x20001024
 8003df4:	20001028 	.word	0x20001028

08003df8 <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	b085      	sub	sp, #20
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
 8003e00:	4b26      	ldr	r3, [pc, #152]	@ (8003e9c <OS_EventTaskWait+0xa4>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	687a      	ldr	r2, [r7, #4]
 8003e06:	61da      	str	r2, [r3, #28]

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
 8003e08:	4b24      	ldr	r3, [pc, #144]	@ (8003e9c <OS_EventTaskWait+0xa4>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e10:	461a      	mov	r2, r3
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	4413      	add	r3, r2
 8003e16:	7ada      	ldrb	r2, [r3, #11]
 8003e18:	4b20      	ldr	r3, [pc, #128]	@ (8003e9c <OS_EventTaskWait+0xa4>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e20:	491e      	ldr	r1, [pc, #120]	@ (8003e9c <OS_EventTaskWait+0xa4>)
 8003e22:	6809      	ldr	r1, [r1, #0]
 8003e24:	f891 103c 	ldrb.w	r1, [r1, #60]	@ 0x3c
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	b2da      	uxtb	r2, r3
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	440b      	add	r3, r1
 8003e30:	72da      	strb	r2, [r3, #11]
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	7a9a      	ldrb	r2, [r3, #10]
 8003e36:	4b19      	ldr	r3, [pc, #100]	@ (8003e9c <OS_EventTaskWait+0xa4>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	b2da      	uxtb	r2, r3
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	729a      	strb	r2, [r3, #10]

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
 8003e46:	4b15      	ldr	r3, [pc, #84]	@ (8003e9c <OS_EventTaskWait+0xa4>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e4e:	73fb      	strb	r3, [r7, #15]
    OSRdyTbl[y]  &= (OS_PRIO)~OSTCBCur->OSTCBBitX;
 8003e50:	7bfb      	ldrb	r3, [r7, #15]
 8003e52:	4a13      	ldr	r2, [pc, #76]	@ (8003ea0 <OS_EventTaskWait+0xa8>)
 8003e54:	5cd1      	ldrb	r1, [r2, r3]
 8003e56:	4b11      	ldr	r3, [pc, #68]	@ (8003e9c <OS_EventTaskWait+0xa4>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e5e:	43db      	mvns	r3, r3
 8003e60:	b2da      	uxtb	r2, r3
 8003e62:	7bfb      	ldrb	r3, [r7, #15]
 8003e64:	400a      	ands	r2, r1
 8003e66:	b2d1      	uxtb	r1, r2
 8003e68:	4a0d      	ldr	r2, [pc, #52]	@ (8003ea0 <OS_EventTaskWait+0xa8>)
 8003e6a:	54d1      	strb	r1, [r2, r3]
    OS_TRACE_TASK_SUSPENDED(OSTCBCur);
    if (OSRdyTbl[y] == 0u) {                      /* Clear event grp bit if this was only task pending */
 8003e6c:	7bfb      	ldrb	r3, [r7, #15]
 8003e6e:	4a0c      	ldr	r2, [pc, #48]	@ (8003ea0 <OS_EventTaskWait+0xa8>)
 8003e70:	5cd3      	ldrb	r3, [r2, r3]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d10b      	bne.n	8003e8e <OS_EventTaskWait+0x96>
        OSRdyGrp &= (OS_PRIO)~OSTCBCur->OSTCBBitY;
 8003e76:	4b09      	ldr	r3, [pc, #36]	@ (8003e9c <OS_EventTaskWait+0xa4>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003e7e:	43db      	mvns	r3, r3
 8003e80:	b2da      	uxtb	r2, r3
 8003e82:	4b08      	ldr	r3, [pc, #32]	@ (8003ea4 <OS_EventTaskWait+0xac>)
 8003e84:	781b      	ldrb	r3, [r3, #0]
 8003e86:	4013      	ands	r3, r2
 8003e88:	b2da      	uxtb	r2, r3
 8003e8a:	4b06      	ldr	r3, [pc, #24]	@ (8003ea4 <OS_EventTaskWait+0xac>)
 8003e8c:	701a      	strb	r2, [r3, #0]
    }
}
 8003e8e:	bf00      	nop
 8003e90:	3714      	adds	r7, #20
 8003e92:	46bd      	mov	sp, r7
 8003e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e98:	4770      	bx	lr
 8003e9a:	bf00      	nop
 8003e9c:	20001238 	.word	0x20001238
 8003ea0:	20001028 	.word	0x20001028
 8003ea4:	20001024 	.word	0x20001024

08003ea8 <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	b085      	sub	sp, #20
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
 8003eb0:	6039      	str	r1, [r7, #0]
    INT8U  y;


    y                       =  ptcb->OSTCBY;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003eb8:	73fb      	strb	r3, [r7, #15]
    pevent->OSEventTbl[y]  &= (OS_PRIO)~ptcb->OSTCBBitX;    /* Remove task from wait list              */
 8003eba:	7bfb      	ldrb	r3, [r7, #15]
 8003ebc:	683a      	ldr	r2, [r7, #0]
 8003ebe:	4413      	add	r3, r2
 8003ec0:	7ad9      	ldrb	r1, [r3, #11]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ec8:	43db      	mvns	r3, r3
 8003eca:	b2da      	uxtb	r2, r3
 8003ecc:	7bfb      	ldrb	r3, [r7, #15]
 8003ece:	400a      	ands	r2, r1
 8003ed0:	b2d1      	uxtb	r1, r2
 8003ed2:	683a      	ldr	r2, [r7, #0]
 8003ed4:	4413      	add	r3, r2
 8003ed6:	460a      	mov	r2, r1
 8003ed8:	72da      	strb	r2, [r3, #11]
    if (pevent->OSEventTbl[y] == 0u) {
 8003eda:	7bfb      	ldrb	r3, [r7, #15]
 8003edc:	683a      	ldr	r2, [r7, #0]
 8003ede:	4413      	add	r3, r2
 8003ee0:	7adb      	ldrb	r3, [r3, #11]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d10a      	bne.n	8003efc <OS_EventTaskRemove+0x54>
        pevent->OSEventGrp &= (OS_PRIO)~ptcb->OSTCBBitY;
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	7a9a      	ldrb	r2, [r3, #10]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003ef0:	43db      	mvns	r3, r3
 8003ef2:	b2db      	uxtb	r3, r3
 8003ef4:	4013      	ands	r3, r2
 8003ef6:	b2da      	uxtb	r2, r3
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	729a      	strb	r2, [r3, #10]
    }
    ptcb->OSTCBEventPtr     = (OS_EVENT  *)0;               /* Unlink OS_EVENT from OS_TCB             */
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2200      	movs	r2, #0
 8003f00:	61da      	str	r2, [r3, #28]
}
 8003f02:	bf00      	nop
 8003f04:	3714      	adds	r7, #20
 8003f06:	46bd      	mov	sp, r7
 8003f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0c:	4770      	bx	lr

08003f0e <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0u))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
 8003f0e:	b480      	push	{r7}
 8003f10:	b087      	sub	sp, #28
 8003f12:	af00      	add	r7, sp, #0
 8003f14:	6078      	str	r0, [r7, #4]
 8003f16:	6039      	str	r1, [r7, #0]
    INT8U      y;
    OS_PRIO    bity;
    OS_PRIO    bitx;


    y       =  ptcb->OSTCBY;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f1e:	73fb      	strb	r3, [r7, #15]
    bity    =  ptcb->OSTCBBitY;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003f26:	73bb      	strb	r3, [r7, #14]
    bitx    =  ptcb->OSTCBBitX;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f2e:	737b      	strb	r3, [r7, #13]
    pevents =  pevents_multi;
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	617b      	str	r3, [r7, #20]
    pevent  = *pevents;
 8003f34:	697b      	ldr	r3, [r7, #20]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	613b      	str	r3, [r7, #16]
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
 8003f3a:	e022      	b.n	8003f82 <OS_EventTaskRemoveMulti+0x74>
        pevent->OSEventTbl[y]  &= (OS_PRIO)~bitx;
 8003f3c:	7bfb      	ldrb	r3, [r7, #15]
 8003f3e:	693a      	ldr	r2, [r7, #16]
 8003f40:	4413      	add	r3, r2
 8003f42:	7ad9      	ldrb	r1, [r3, #11]
 8003f44:	7b7b      	ldrb	r3, [r7, #13]
 8003f46:	43db      	mvns	r3, r3
 8003f48:	b2da      	uxtb	r2, r3
 8003f4a:	7bfb      	ldrb	r3, [r7, #15]
 8003f4c:	400a      	ands	r2, r1
 8003f4e:	b2d1      	uxtb	r1, r2
 8003f50:	693a      	ldr	r2, [r7, #16]
 8003f52:	4413      	add	r3, r2
 8003f54:	460a      	mov	r2, r1
 8003f56:	72da      	strb	r2, [r3, #11]
        if (pevent->OSEventTbl[y] == 0u) {
 8003f58:	7bfb      	ldrb	r3, [r7, #15]
 8003f5a:	693a      	ldr	r2, [r7, #16]
 8003f5c:	4413      	add	r3, r2
 8003f5e:	7adb      	ldrb	r3, [r3, #11]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d108      	bne.n	8003f76 <OS_EventTaskRemoveMulti+0x68>
            pevent->OSEventGrp &= (OS_PRIO)~bity;
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	7a9a      	ldrb	r2, [r3, #10]
 8003f68:	7bbb      	ldrb	r3, [r7, #14]
 8003f6a:	43db      	mvns	r3, r3
 8003f6c:	b2db      	uxtb	r3, r3
 8003f6e:	4013      	ands	r3, r2
 8003f70:	b2da      	uxtb	r2, r3
 8003f72:	693b      	ldr	r3, [r7, #16]
 8003f74:	729a      	strb	r2, [r3, #10]
        }
        pevents++;
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	3304      	adds	r3, #4
 8003f7a:	617b      	str	r3, [r7, #20]
        pevent = *pevents;
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	613b      	str	r3, [r7, #16]
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
 8003f82:	693b      	ldr	r3, [r7, #16]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d1d9      	bne.n	8003f3c <OS_EventTaskRemoveMulti+0x2e>
    }
}
 8003f88:	bf00      	nop
 8003f8a:	bf00      	nop
 8003f8c:	371c      	adds	r7, #28
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f94:	4770      	bx	lr

08003f96 <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
 8003f96:	b480      	push	{r7}
 8003f98:	b085      	sub	sp, #20
 8003f9a:	af00      	add	r7, sp, #0
 8003f9c:	6078      	str	r0, [r7, #4]
    INT8U  i;


    pevent->OSEventGrp = 0u;                     /* No task waiting on event                           */
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	729a      	strb	r2, [r3, #10]
    for (i = 0u; i < OS_EVENT_TBL_SIZE; i++) {
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	73fb      	strb	r3, [r7, #15]
 8003fa8:	e007      	b.n	8003fba <OS_EventWaitListInit+0x24>
        pevent->OSEventTbl[i] = 0u;
 8003faa:	7bfb      	ldrb	r3, [r7, #15]
 8003fac:	687a      	ldr	r2, [r7, #4]
 8003fae:	4413      	add	r3, r2
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	72da      	strb	r2, [r3, #11]
    for (i = 0u; i < OS_EVENT_TBL_SIZE; i++) {
 8003fb4:	7bfb      	ldrb	r3, [r7, #15]
 8003fb6:	3301      	adds	r3, #1
 8003fb8:	73fb      	strb	r3, [r7, #15]
 8003fba:	7bfb      	ldrb	r3, [r7, #15]
 8003fbc:	2b07      	cmp	r3, #7
 8003fbe:	d9f4      	bls.n	8003faa <OS_EventWaitListInit+0x14>
    }
}
 8003fc0:	bf00      	nop
 8003fc2:	bf00      	nop
 8003fc4:	3714      	adds	r7, #20
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fcc:	4770      	bx	lr
	...

08003fd0 <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b084      	sub	sp, #16
 8003fd4:	af00      	add	r7, sp, #0
    INT16U     ix_next;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
 8003fd6:	21f0      	movs	r1, #240	@ 0xf0
 8003fd8:	481f      	ldr	r0, [pc, #124]	@ (8004058 <OS_InitEventList+0x88>)
 8003fda:	f000 f94d 	bl	8004278 <OS_MemClr>
    for (ix = 0u; ix < (OS_MAX_EVENTS - 1u); ix++) {        /* Init. list of free EVENT control blocks */
 8003fde:	2300      	movs	r3, #0
 8003fe0:	81fb      	strh	r3, [r7, #14]
 8003fe2:	e01e      	b.n	8004022 <OS_InitEventList+0x52>
        ix_next = ix + 1u;
 8003fe4:	89fb      	ldrh	r3, [r7, #14]
 8003fe6:	3301      	adds	r3, #1
 8003fe8:	80fb      	strh	r3, [r7, #6]
        pevent1 = &OSEventTbl[ix];
 8003fea:	89fa      	ldrh	r2, [r7, #14]
 8003fec:	4613      	mov	r3, r2
 8003fee:	005b      	lsls	r3, r3, #1
 8003ff0:	4413      	add	r3, r2
 8003ff2:	00db      	lsls	r3, r3, #3
 8003ff4:	4a18      	ldr	r2, [pc, #96]	@ (8004058 <OS_InitEventList+0x88>)
 8003ff6:	4413      	add	r3, r2
 8003ff8:	60bb      	str	r3, [r7, #8]
        pevent2 = &OSEventTbl[ix_next];
 8003ffa:	88fa      	ldrh	r2, [r7, #6]
 8003ffc:	4613      	mov	r3, r2
 8003ffe:	005b      	lsls	r3, r3, #1
 8004000:	4413      	add	r3, r2
 8004002:	00db      	lsls	r3, r3, #3
 8004004:	4a14      	ldr	r2, [pc, #80]	@ (8004058 <OS_InitEventList+0x88>)
 8004006:	4413      	add	r3, r2
 8004008:	603b      	str	r3, [r7, #0]
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	2200      	movs	r2, #0
 800400e:	701a      	strb	r2, [r3, #0]
        pevent1->OSEventPtr     = pevent2;
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	683a      	ldr	r2, [r7, #0]
 8004014:	605a      	str	r2, [r3, #4]
#if OS_EVENT_NAME_EN > 0u
        pevent1->OSEventName    = (INT8U *)(void *)"?";     /* Unknown name                            */
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	4a10      	ldr	r2, [pc, #64]	@ (800405c <OS_InitEventList+0x8c>)
 800401a:	615a      	str	r2, [r3, #20]
    for (ix = 0u; ix < (OS_MAX_EVENTS - 1u); ix++) {        /* Init. list of free EVENT control blocks */
 800401c:	89fb      	ldrh	r3, [r7, #14]
 800401e:	3301      	adds	r3, #1
 8004020:	81fb      	strh	r3, [r7, #14]
 8004022:	89fb      	ldrh	r3, [r7, #14]
 8004024:	2b08      	cmp	r3, #8
 8004026:	d9dd      	bls.n	8003fe4 <OS_InitEventList+0x14>
#endif
    }
    pevent1                         = &OSEventTbl[ix];
 8004028:	89fa      	ldrh	r2, [r7, #14]
 800402a:	4613      	mov	r3, r2
 800402c:	005b      	lsls	r3, r3, #1
 800402e:	4413      	add	r3, r2
 8004030:	00db      	lsls	r3, r3, #3
 8004032:	4a09      	ldr	r2, [pc, #36]	@ (8004058 <OS_InitEventList+0x88>)
 8004034:	4413      	add	r3, r2
 8004036:	60bb      	str	r3, [r7, #8]
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	2200      	movs	r2, #0
 800403c:	701a      	strb	r2, [r3, #0]
    pevent1->OSEventPtr             = (OS_EVENT *)0;
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	2200      	movs	r2, #0
 8004042:	605a      	str	r2, [r3, #4]
#if OS_EVENT_NAME_EN > 0u
    pevent1->OSEventName            = (INT8U *)(void *)"?"; /* Unknown name                            */
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	4a05      	ldr	r2, [pc, #20]	@ (800405c <OS_InitEventList+0x8c>)
 8004048:	615a      	str	r2, [r3, #20]
#endif
    OSEventFreeList                 = &OSEventTbl[0];
 800404a:	4b05      	ldr	r3, [pc, #20]	@ (8004060 <OS_InitEventList+0x90>)
 800404c:	4a02      	ldr	r2, [pc, #8]	@ (8004058 <OS_InitEventList+0x88>)
 800404e:	601a      	str	r2, [r3, #0]
#if OS_EVENT_NAME_EN > 0u
    OSEventFreeList->OSEventName    = (INT8U *)"?";         /* Unknown name                            */
#endif
#endif
#endif
}
 8004050:	bf00      	nop
 8004052:	3710      	adds	r7, #16
 8004054:	46bd      	mov	sp, r7
 8004056:	bd80      	pop	{r7, pc}
 8004058:	20000ccc 	.word	0x20000ccc
 800405c:	08005cac 	.word	0x08005cac
 8004060:	20000cc8 	.word	0x20000cc8

08004064 <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
 8004064:	b480      	push	{r7}
 8004066:	af00      	add	r7, sp, #0
#if OS_TIME_GET_SET_EN > 0u
    OSTime                    = 0uL;                       /* Clear the 32-bit system clock            */
 8004068:	4b12      	ldr	r3, [pc, #72]	@ (80040b4 <OS_InitMisc+0x50>)
 800406a:	2200      	movs	r2, #0
 800406c:	601a      	str	r2, [r3, #0]
#endif

    OSIntNesting              = 0u;                        /* Clear the interrupt nesting counter      */
 800406e:	4b12      	ldr	r3, [pc, #72]	@ (80040b8 <OS_InitMisc+0x54>)
 8004070:	2200      	movs	r2, #0
 8004072:	701a      	strb	r2, [r3, #0]
    OSLockNesting             = 0u;                        /* Clear the scheduling lock counter        */
 8004074:	4b11      	ldr	r3, [pc, #68]	@ (80040bc <OS_InitMisc+0x58>)
 8004076:	2200      	movs	r2, #0
 8004078:	701a      	strb	r2, [r3, #0]

    OSTaskCtr                 = 0u;                        /* Clear the number of tasks                */
 800407a:	4b11      	ldr	r3, [pc, #68]	@ (80040c0 <OS_InitMisc+0x5c>)
 800407c:	2200      	movs	r2, #0
 800407e:	701a      	strb	r2, [r3, #0]

    OSRunning                 = OS_FALSE;                  /* Indicate that multitasking not started   */
 8004080:	4b10      	ldr	r3, [pc, #64]	@ (80040c4 <OS_InitMisc+0x60>)
 8004082:	2200      	movs	r2, #0
 8004084:	701a      	strb	r2, [r3, #0]

    OSCtxSwCtr                = 0u;                        /* Clear the context switch counter         */
 8004086:	4b10      	ldr	r3, [pc, #64]	@ (80040c8 <OS_InitMisc+0x64>)
 8004088:	2200      	movs	r2, #0
 800408a:	601a      	str	r2, [r3, #0]
    OSIdleCtr                 = 0uL;                       /* Clear the 32-bit idle counter            */
 800408c:	4b0f      	ldr	r3, [pc, #60]	@ (80040cc <OS_InitMisc+0x68>)
 800408e:	2200      	movs	r2, #0
 8004090:	601a      	str	r2, [r3, #0]

#if OS_TASK_STAT_EN > 0u
    OSIdleCtrRun              = 0uL;
 8004092:	4b0f      	ldr	r3, [pc, #60]	@ (80040d0 <OS_InitMisc+0x6c>)
 8004094:	2200      	movs	r2, #0
 8004096:	601a      	str	r2, [r3, #0]
    OSIdleCtrMax              = 0uL;
 8004098:	4b0e      	ldr	r3, [pc, #56]	@ (80040d4 <OS_InitMisc+0x70>)
 800409a:	2200      	movs	r2, #0
 800409c:	601a      	str	r2, [r3, #0]
    OSStatRdy                 = OS_FALSE;                  /* Statistic task is not ready              */
 800409e:	4b0e      	ldr	r3, [pc, #56]	@ (80040d8 <OS_InitMisc+0x74>)
 80040a0:	2200      	movs	r2, #0
 80040a2:	701a      	strb	r2, [r3, #0]
#ifdef OS_SAFETY_CRITICAL_IEC61508
    OSSafetyCriticalStartFlag = OS_FALSE;                  /* Still allow creation of objects          */
#endif

#if OS_TASK_REG_TBL_SIZE > 0u
    OSTaskRegNextAvailID      = 0u;                        /* Initialize the task register ID          */
 80040a4:	4b0d      	ldr	r3, [pc, #52]	@ (80040dc <OS_InitMisc+0x78>)
 80040a6:	2200      	movs	r2, #0
 80040a8:	701a      	strb	r2, [r3, #0]
#endif
}
 80040aa:	bf00      	nop
 80040ac:	46bd      	mov	sp, r7
 80040ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b2:	4770      	bx	lr
 80040b4:	20001c18 	.word	0x20001c18
 80040b8:	20001020 	.word	0x20001020
 80040bc:	20001021 	.word	0x20001021
 80040c0:	20001031 	.word	0x20001031
 80040c4:	20001030 	.word	0x20001030
 80040c8:	20000cc4 	.word	0x20000cc4
 80040cc:	20001034 	.word	0x20001034
 80040d0:	20000e18 	.word	0x20000e18
 80040d4:	20000e14 	.word	0x20000e14
 80040d8:	20000e1c 	.word	0x20000e1c
 80040dc:	20001c14 	.word	0x20001c14

080040e0 <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
 80040e0:	b480      	push	{r7}
 80040e2:	b083      	sub	sp, #12
 80040e4:	af00      	add	r7, sp, #0
    INT8U  i;


    OSRdyGrp      = 0u;                                    /* Clear the ready list                     */
 80040e6:	4b11      	ldr	r3, [pc, #68]	@ (800412c <OS_InitRdyList+0x4c>)
 80040e8:	2200      	movs	r2, #0
 80040ea:	701a      	strb	r2, [r3, #0]
    for (i = 0u; i < OS_RDY_TBL_SIZE; i++) {
 80040ec:	2300      	movs	r3, #0
 80040ee:	71fb      	strb	r3, [r7, #7]
 80040f0:	e006      	b.n	8004100 <OS_InitRdyList+0x20>
        OSRdyTbl[i] = 0u;
 80040f2:	79fb      	ldrb	r3, [r7, #7]
 80040f4:	4a0e      	ldr	r2, [pc, #56]	@ (8004130 <OS_InitRdyList+0x50>)
 80040f6:	2100      	movs	r1, #0
 80040f8:	54d1      	strb	r1, [r2, r3]
    for (i = 0u; i < OS_RDY_TBL_SIZE; i++) {
 80040fa:	79fb      	ldrb	r3, [r7, #7]
 80040fc:	3301      	adds	r3, #1
 80040fe:	71fb      	strb	r3, [r7, #7]
 8004100:	79fb      	ldrb	r3, [r7, #7]
 8004102:	2b07      	cmp	r3, #7
 8004104:	d9f5      	bls.n	80040f2 <OS_InitRdyList+0x12>
    }

    OSPrioCur     = 0u;
 8004106:	4b0b      	ldr	r3, [pc, #44]	@ (8004134 <OS_InitRdyList+0x54>)
 8004108:	2200      	movs	r2, #0
 800410a:	701a      	strb	r2, [r3, #0]
    OSPrioHighRdy = 0u;
 800410c:	4b0a      	ldr	r3, [pc, #40]	@ (8004138 <OS_InitRdyList+0x58>)
 800410e:	2200      	movs	r2, #0
 8004110:	701a      	strb	r2, [r3, #0]

    OSTCBHighRdy  = (OS_TCB *)0;
 8004112:	4b0a      	ldr	r3, [pc, #40]	@ (800413c <OS_InitRdyList+0x5c>)
 8004114:	2200      	movs	r2, #0
 8004116:	601a      	str	r2, [r3, #0]
    OSTCBCur      = (OS_TCB *)0;
 8004118:	4b09      	ldr	r3, [pc, #36]	@ (8004140 <OS_InitRdyList+0x60>)
 800411a:	2200      	movs	r2, #0
 800411c:	601a      	str	r2, [r3, #0]
}
 800411e:	bf00      	nop
 8004120:	370c      	adds	r7, #12
 8004122:	46bd      	mov	sp, r7
 8004124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004128:	4770      	bx	lr
 800412a:	bf00      	nop
 800412c:	20001024 	.word	0x20001024
 8004130:	20001028 	.word	0x20001028
 8004134:	20001022 	.word	0x20001022
 8004138:	20001023 	.word	0x20001023
 800413c:	20001240 	.word	0x20001240
 8004140:	20001238 	.word	0x20001238

08004144 <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b088      	sub	sp, #32
 8004148:	af06      	add	r7, sp, #24
#endif


#if OS_TASK_CREATE_EXT_EN > 0u
    #if OS_STK_GROWTH == 1u
    (void)OSTaskCreateExt(OS_TaskIdle,
 800414a:	2303      	movs	r3, #3
 800414c:	9304      	str	r3, [sp, #16]
 800414e:	2300      	movs	r3, #0
 8004150:	9303      	str	r3, [sp, #12]
 8004152:	2380      	movs	r3, #128	@ 0x80
 8004154:	9302      	str	r3, [sp, #8]
 8004156:	4b0a      	ldr	r3, [pc, #40]	@ (8004180 <OS_InitTaskIdle+0x3c>)
 8004158:	9301      	str	r3, [sp, #4]
 800415a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800415e:	9300      	str	r3, [sp, #0]
 8004160:	233f      	movs	r3, #63	@ 0x3f
 8004162:	4a08      	ldr	r2, [pc, #32]	@ (8004184 <OS_InitTaskIdle+0x40>)
 8004164:	2100      	movs	r1, #0
 8004166:	4808      	ldr	r0, [pc, #32]	@ (8004188 <OS_InitTaskIdle+0x44>)
 8004168:	f001 f84c 	bl	8005204 <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_EN > 0u
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)(void *)"uC/OS-II Idle", &err);
 800416c:	1dfb      	adds	r3, r7, #7
 800416e:	461a      	mov	r2, r3
 8004170:	4906      	ldr	r1, [pc, #24]	@ (800418c <OS_InitTaskIdle+0x48>)
 8004172:	203f      	movs	r0, #63	@ 0x3f
 8004174:	f001 f9aa 	bl	80054cc <OSTaskNameSet>
#endif
}
 8004178:	bf00      	nop
 800417a:	3708      	adds	r7, #8
 800417c:	46bd      	mov	sp, r7
 800417e:	bd80      	pop	{r7, pc}
 8004180:	20001038 	.word	0x20001038
 8004184:	20001234 	.word	0x20001234
 8004188:	08004379 	.word	0x08004379
 800418c:	08005cb0 	.word	0x08005cb0

08004190 <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0u
static  void  OS_InitTaskStat (void)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b088      	sub	sp, #32
 8004194:	af06      	add	r7, sp, #24
#endif


#if OS_TASK_CREATE_EXT_EN > 0u
    #if OS_STK_GROWTH == 1u
    (void)OSTaskCreateExt(OS_TaskStat,
 8004196:	2303      	movs	r3, #3
 8004198:	9304      	str	r3, [sp, #16]
 800419a:	2300      	movs	r3, #0
 800419c:	9303      	str	r3, [sp, #12]
 800419e:	2380      	movs	r3, #128	@ 0x80
 80041a0:	9302      	str	r3, [sp, #8]
 80041a2:	4b0a      	ldr	r3, [pc, #40]	@ (80041cc <OS_InitTaskStat+0x3c>)
 80041a4:	9301      	str	r3, [sp, #4]
 80041a6:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 80041aa:	9300      	str	r3, [sp, #0]
 80041ac:	233e      	movs	r3, #62	@ 0x3e
 80041ae:	4a08      	ldr	r2, [pc, #32]	@ (80041d0 <OS_InitTaskStat+0x40>)
 80041b0:	2100      	movs	r1, #0
 80041b2:	4808      	ldr	r0, [pc, #32]	@ (80041d4 <OS_InitTaskStat+0x44>)
 80041b4:	f001 f826 	bl	8005204 <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_EN > 0u
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)(void *)"uC/OS-II Stat", &err);
 80041b8:	1dfb      	adds	r3, r7, #7
 80041ba:	461a      	mov	r2, r3
 80041bc:	4906      	ldr	r1, [pc, #24]	@ (80041d8 <OS_InitTaskStat+0x48>)
 80041be:	203e      	movs	r0, #62	@ 0x3e
 80041c0:	f001 f984 	bl	80054cc <OSTaskNameSet>
#endif
}
 80041c4:	bf00      	nop
 80041c6:	3708      	adds	r7, #8
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bd80      	pop	{r7, pc}
 80041cc:	20000e20 	.word	0x20000e20
 80041d0:	2000101c 	.word	0x2000101c
 80041d4:	080043a9 	.word	0x080043a9
 80041d8:	08005cc0 	.word	0x08005cc0

080041dc <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b084      	sub	sp, #16
 80041e0:	af00      	add	r7, sp, #0
    INT8U    ix_next;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
 80041e2:	f44f 61fd 	mov.w	r1, #2024	@ 0x7e8
 80041e6:	481f      	ldr	r0, [pc, #124]	@ (8004264 <OS_InitTCBList+0x88>)
 80041e8:	f000 f846 	bl	8004278 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
 80041ec:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80041f0:	481d      	ldr	r0, [pc, #116]	@ (8004268 <OS_InitTCBList+0x8c>)
 80041f2:	f000 f841 	bl	8004278 <OS_MemClr>
    for (ix = 0u; ix < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1u); ix++) {    /* Init. list of free TCBs     */
 80041f6:	2300      	movs	r3, #0
 80041f8:	73fb      	strb	r3, [r7, #15]
 80041fa:	e019      	b.n	8004230 <OS_InitTCBList+0x54>
        ix_next =  ix + 1u;
 80041fc:	7bfb      	ldrb	r3, [r7, #15]
 80041fe:	3301      	adds	r3, #1
 8004200:	71fb      	strb	r3, [r7, #7]
        ptcb1   = &OSTCBTbl[ix];
 8004202:	7bfb      	ldrb	r3, [r7, #15]
 8004204:	225c      	movs	r2, #92	@ 0x5c
 8004206:	fb02 f303 	mul.w	r3, r2, r3
 800420a:	4a16      	ldr	r2, [pc, #88]	@ (8004264 <OS_InitTCBList+0x88>)
 800420c:	4413      	add	r3, r2
 800420e:	60bb      	str	r3, [r7, #8]
        ptcb2   = &OSTCBTbl[ix_next];
 8004210:	79fb      	ldrb	r3, [r7, #7]
 8004212:	225c      	movs	r2, #92	@ 0x5c
 8004214:	fb02 f303 	mul.w	r3, r2, r3
 8004218:	4a12      	ldr	r2, [pc, #72]	@ (8004264 <OS_InitTCBList+0x88>)
 800421a:	4413      	add	r3, r2
 800421c:	603b      	str	r3, [r7, #0]
        ptcb1->OSTCBNext = ptcb2;
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	683a      	ldr	r2, [r7, #0]
 8004222:	615a      	str	r2, [r3, #20]
#if OS_TASK_NAME_EN > 0u
        ptcb1->OSTCBTaskName = (INT8U *)(void *)"?";             /* Unknown name                       */
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	4a11      	ldr	r2, [pc, #68]	@ (800426c <OS_InitTCBList+0x90>)
 8004228:	655a      	str	r2, [r3, #84]	@ 0x54
    for (ix = 0u; ix < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1u); ix++) {    /* Init. list of free TCBs     */
 800422a:	7bfb      	ldrb	r3, [r7, #15]
 800422c:	3301      	adds	r3, #1
 800422e:	73fb      	strb	r3, [r7, #15]
 8004230:	7bfb      	ldrb	r3, [r7, #15]
 8004232:	2b14      	cmp	r3, #20
 8004234:	d9e2      	bls.n	80041fc <OS_InitTCBList+0x20>
#endif
    }
    ptcb1                   = &OSTCBTbl[ix];
 8004236:	7bfb      	ldrb	r3, [r7, #15]
 8004238:	225c      	movs	r2, #92	@ 0x5c
 800423a:	fb02 f303 	mul.w	r3, r2, r3
 800423e:	4a09      	ldr	r2, [pc, #36]	@ (8004264 <OS_InitTCBList+0x88>)
 8004240:	4413      	add	r3, r2
 8004242:	60bb      	str	r3, [r7, #8]
    ptcb1->OSTCBNext        = (OS_TCB *)0;                       /* Last OS_TCB                        */
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	2200      	movs	r2, #0
 8004248:	615a      	str	r2, [r3, #20]
#if OS_TASK_NAME_EN > 0u
    ptcb1->OSTCBTaskName    = (INT8U *)(void *)"?";              /* Unknown name                       */
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	4a07      	ldr	r2, [pc, #28]	@ (800426c <OS_InitTCBList+0x90>)
 800424e:	655a      	str	r2, [r3, #84]	@ 0x54
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
 8004250:	4b07      	ldr	r3, [pc, #28]	@ (8004270 <OS_InitTCBList+0x94>)
 8004252:	2200      	movs	r2, #0
 8004254:	601a      	str	r2, [r3, #0]
    OSTCBFreeList           = &OSTCBTbl[0];
 8004256:	4b07      	ldr	r3, [pc, #28]	@ (8004274 <OS_InitTCBList+0x98>)
 8004258:	4a02      	ldr	r2, [pc, #8]	@ (8004264 <OS_InitTCBList+0x88>)
 800425a:	601a      	str	r2, [r3, #0]
}
 800425c:	bf00      	nop
 800425e:	3710      	adds	r7, #16
 8004260:	46bd      	mov	sp, r7
 8004262:	bd80      	pop	{r7, pc}
 8004264:	20001348 	.word	0x20001348
 8004268:	20001248 	.word	0x20001248
 800426c:	08005cac 	.word	0x08005cac
 8004270:	20001244 	.word	0x20001244
 8004274:	2000123c 	.word	0x2000123c

08004278 <OS_MemClr>:
*********************************************************************************************************
*/

void  OS_MemClr (INT8U  *pdest,
                 INT16U  size)
{
 8004278:	b480      	push	{r7}
 800427a:	b083      	sub	sp, #12
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
 8004280:	460b      	mov	r3, r1
 8004282:	807b      	strh	r3, [r7, #2]
    while (size > 0u) {
 8004284:	e007      	b.n	8004296 <OS_MemClr+0x1e>
        *pdest++ = (INT8U)0;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	1c5a      	adds	r2, r3, #1
 800428a:	607a      	str	r2, [r7, #4]
 800428c:	2200      	movs	r2, #0
 800428e:	701a      	strb	r2, [r3, #0]
        size--;
 8004290:	887b      	ldrh	r3, [r7, #2]
 8004292:	3b01      	subs	r3, #1
 8004294:	807b      	strh	r3, [r7, #2]
    while (size > 0u) {
 8004296:	887b      	ldrh	r3, [r7, #2]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d1f4      	bne.n	8004286 <OS_MemClr+0xe>
    }
}
 800429c:	bf00      	nop
 800429e:	bf00      	nop
 80042a0:	370c      	adds	r7, #12
 80042a2:	46bd      	mov	sp, r7
 80042a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a8:	4770      	bx	lr
	...

080042ac <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b082      	sub	sp, #8
 80042b0:	af00      	add	r7, sp, #0
#if OS_CRITICAL_METHOD == 3u                           /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0u;
 80042b2:	2300      	movs	r3, #0
 80042b4:	607b      	str	r3, [r7, #4]
#endif



    OS_ENTER_CRITICAL();
 80042b6:	2040      	movs	r0, #64	@ 0x40
 80042b8:	f7fb ff95 	bl	80001e6 <OS_CPU_SR_Save>
 80042bc:	6078      	str	r0, [r7, #4]
    if (OSIntNesting == 0u) {                          /* Schedule only if all ISRs done and ...       */
 80042be:	4b15      	ldr	r3, [pc, #84]	@ (8004314 <OS_Sched+0x68>)
 80042c0:	781b      	ldrb	r3, [r3, #0]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d11f      	bne.n	8004306 <OS_Sched+0x5a>
        if (OSLockNesting == 0u) {                     /* ... scheduler is not locked                  */
 80042c6:	4b14      	ldr	r3, [pc, #80]	@ (8004318 <OS_Sched+0x6c>)
 80042c8:	781b      	ldrb	r3, [r3, #0]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d11b      	bne.n	8004306 <OS_Sched+0x5a>
            OS_SchedNew();
 80042ce:	f000 f82f 	bl	8004330 <OS_SchedNew>
            OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
 80042d2:	4b12      	ldr	r3, [pc, #72]	@ (800431c <OS_Sched+0x70>)
 80042d4:	781b      	ldrb	r3, [r3, #0]
 80042d6:	461a      	mov	r2, r3
 80042d8:	4b11      	ldr	r3, [pc, #68]	@ (8004320 <OS_Sched+0x74>)
 80042da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80042de:	4a11      	ldr	r2, [pc, #68]	@ (8004324 <OS_Sched+0x78>)
 80042e0:	6013      	str	r3, [r2, #0]
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
 80042e2:	4b0e      	ldr	r3, [pc, #56]	@ (800431c <OS_Sched+0x70>)
 80042e4:	781a      	ldrb	r2, [r3, #0]
 80042e6:	4b10      	ldr	r3, [pc, #64]	@ (8004328 <OS_Sched+0x7c>)
 80042e8:	781b      	ldrb	r3, [r3, #0]
 80042ea:	429a      	cmp	r2, r3
 80042ec:	d00b      	beq.n	8004306 <OS_Sched+0x5a>
#if OS_TASK_PROFILE_EN > 0u
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
 80042ee:	4b0d      	ldr	r3, [pc, #52]	@ (8004324 <OS_Sched+0x78>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80042f4:	3201      	adds	r2, #1
 80042f6:	641a      	str	r2, [r3, #64]	@ 0x40
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
 80042f8:	4b0c      	ldr	r3, [pc, #48]	@ (800432c <OS_Sched+0x80>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	3301      	adds	r3, #1
 80042fe:	4a0b      	ldr	r2, [pc, #44]	@ (800432c <OS_Sched+0x80>)
 8004300:	6013      	str	r3, [r2, #0]
#if defined(OS_TLS_TBL_SIZE) && (OS_TLS_TBL_SIZE > 0u)
                OS_TLS_TaskSw();
#endif
#endif

                OS_TASK_SW();                          /* Perform a context switch                     */
 8004302:	f7fb ffc7 	bl	8000294 <OSCtxSw>
            }
        }
    }
    OS_EXIT_CRITICAL();
 8004306:	6878      	ldr	r0, [r7, #4]
 8004308:	f7fb ff7b 	bl	8000202 <OS_CPU_SR_Restore>
}
 800430c:	bf00      	nop
 800430e:	3708      	adds	r7, #8
 8004310:	46bd      	mov	sp, r7
 8004312:	bd80      	pop	{r7, pc}
 8004314:	20001020 	.word	0x20001020
 8004318:	20001021 	.word	0x20001021
 800431c:	20001023 	.word	0x20001023
 8004320:	20001248 	.word	0x20001248
 8004324:	20001240 	.word	0x20001240
 8004328:	20001022 	.word	0x20001022
 800432c:	20000cc4 	.word	0x20000cc4

08004330 <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
 8004330:	b480      	push	{r7}
 8004332:	b083      	sub	sp, #12
 8004334:	af00      	add	r7, sp, #0
#if OS_LOWEST_PRIO <= 63u                        /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
 8004336:	4b0c      	ldr	r3, [pc, #48]	@ (8004368 <OS_SchedNew+0x38>)
 8004338:	781b      	ldrb	r3, [r3, #0]
 800433a:	461a      	mov	r2, r3
 800433c:	4b0b      	ldr	r3, [pc, #44]	@ (800436c <OS_SchedNew+0x3c>)
 800433e:	5c9b      	ldrb	r3, [r3, r2]
 8004340:	71fb      	strb	r3, [r7, #7]
    OSPrioHighRdy = (INT8U)((y << 3u) + OSUnMapTbl[OSRdyTbl[y]]);
 8004342:	79fb      	ldrb	r3, [r7, #7]
 8004344:	00db      	lsls	r3, r3, #3
 8004346:	b2da      	uxtb	r2, r3
 8004348:	79fb      	ldrb	r3, [r7, #7]
 800434a:	4909      	ldr	r1, [pc, #36]	@ (8004370 <OS_SchedNew+0x40>)
 800434c:	5ccb      	ldrb	r3, [r1, r3]
 800434e:	4619      	mov	r1, r3
 8004350:	4b06      	ldr	r3, [pc, #24]	@ (800436c <OS_SchedNew+0x3c>)
 8004352:	5c5b      	ldrb	r3, [r3, r1]
 8004354:	4413      	add	r3, r2
 8004356:	b2da      	uxtb	r2, r3
 8004358:	4b06      	ldr	r3, [pc, #24]	@ (8004374 <OS_SchedNew+0x44>)
 800435a:	701a      	strb	r2, [r3, #0]
        OSPrioHighRdy = (INT8U)((y << 4u) + OSUnMapTbl[(*ptbl & 0xFFu)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4u) + OSUnMapTbl[(OS_PRIO)(*ptbl >> 8u) & 0xFFu] + 8u);
    }
#endif
}
 800435c:	bf00      	nop
 800435e:	370c      	adds	r7, #12
 8004360:	46bd      	mov	sp, r7
 8004362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004366:	4770      	bx	lr
 8004368:	20001024 	.word	0x20001024
 800436c:	08005dd8 	.word	0x08005dd8
 8004370:	20001028 	.word	0x20001028
 8004374:	20001023 	.word	0x20001023

08004378 <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b084      	sub	sp, #16
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0u;
 8004380:	2300      	movs	r3, #0
 8004382:	60fb      	str	r3, [r7, #12]
#endif

    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
 8004384:	2040      	movs	r0, #64	@ 0x40
 8004386:	f7fb ff2e 	bl	80001e6 <OS_CPU_SR_Save>
 800438a:	60f8      	str	r0, [r7, #12]
        OSIdleCtr++;
 800438c:	4b05      	ldr	r3, [pc, #20]	@ (80043a4 <OS_TaskIdle+0x2c>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	3301      	adds	r3, #1
 8004392:	4a04      	ldr	r2, [pc, #16]	@ (80043a4 <OS_TaskIdle+0x2c>)
 8004394:	6013      	str	r3, [r2, #0]
        OS_EXIT_CRITICAL();
 8004396:	68f8      	ldr	r0, [r7, #12]
 8004398:	f7fb ff33 	bl	8000202 <OS_CPU_SR_Restore>
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
 800439c:	f7fe ffdb 	bl	8003356 <OSTaskIdleHook>
        OS_ENTER_CRITICAL();
 80043a0:	bf00      	nop
 80043a2:	e7ef      	b.n	8004384 <OS_TaskIdle+0xc>
 80043a4:	20001034 	.word	0x20001034

080043a8 <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0u
void  OS_TaskStat (void *p_arg)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b084      	sub	sp, #16
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
    INT8S  usage;
#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0u;
 80043b0:	2300      	movs	r3, #0
 80043b2:	60fb      	str	r3, [r7, #12]
#endif



    p_arg = p_arg;                               /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
 80043b4:	e002      	b.n	80043bc <OS_TaskStat+0x14>
        OSTimeDly(2u * OS_TICKS_PER_SEC / 10u);  /* Wait until statistic task is ready                 */
 80043b6:	2014      	movs	r0, #20
 80043b8:	f001 fa06 	bl	80057c8 <OSTimeDly>
    while (OSStatRdy == OS_FALSE) {
 80043bc:	4b30      	ldr	r3, [pc, #192]	@ (8004480 <OS_TaskStat+0xd8>)
 80043be:	781b      	ldrb	r3, [r3, #0]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d0f8      	beq.n	80043b6 <OS_TaskStat+0xe>
    }
    OSIdleCtrMax /= 100uL;
 80043c4:	4b2f      	ldr	r3, [pc, #188]	@ (8004484 <OS_TaskStat+0xdc>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a2f      	ldr	r2, [pc, #188]	@ (8004488 <OS_TaskStat+0xe0>)
 80043ca:	fba2 2303 	umull	r2, r3, r2, r3
 80043ce:	095b      	lsrs	r3, r3, #5
 80043d0:	4a2c      	ldr	r2, [pc, #176]	@ (8004484 <OS_TaskStat+0xdc>)
 80043d2:	6013      	str	r3, [r2, #0]
    if (OSIdleCtrMax == 0uL) {
 80043d4:	4b2b      	ldr	r3, [pc, #172]	@ (8004484 <OS_TaskStat+0xdc>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d105      	bne.n	80043e8 <OS_TaskStat+0x40>
        OSCPUUsage = 0u;
 80043dc:	4b2b      	ldr	r3, [pc, #172]	@ (800448c <OS_TaskStat+0xe4>)
 80043de:	2200      	movs	r2, #0
 80043e0:	701a      	strb	r2, [r3, #0]
#if OS_TASK_SUSPEND_EN > 0u
        (void)OSTaskSuspend(OS_PRIO_SELF);
 80043e2:	20ff      	movs	r0, #255	@ 0xff
 80043e4:	f001 f93a 	bl	800565c <OSTaskSuspend>
        for (;;) {
            OSTimeDly(OS_TICKS_PER_SEC);
        }
#endif
    }
    OS_ENTER_CRITICAL();
 80043e8:	2040      	movs	r0, #64	@ 0x40
 80043ea:	f7fb fefc 	bl	80001e6 <OS_CPU_SR_Save>
 80043ee:	60f8      	str	r0, [r7, #12]
    OSIdleCtr = OSIdleCtrMax * 100uL;            /* Set initial CPU usage as 0%                        */
 80043f0:	4b24      	ldr	r3, [pc, #144]	@ (8004484 <OS_TaskStat+0xdc>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	2264      	movs	r2, #100	@ 0x64
 80043f6:	fb02 f303 	mul.w	r3, r2, r3
 80043fa:	4a25      	ldr	r2, [pc, #148]	@ (8004490 <OS_TaskStat+0xe8>)
 80043fc:	6013      	str	r3, [r2, #0]
    OS_EXIT_CRITICAL();
 80043fe:	68f8      	ldr	r0, [r7, #12]
 8004400:	f7fb feff 	bl	8000202 <OS_CPU_SR_Restore>
    for (;;) {
        OSTimeDly(1);                            /* Synchronize with clock tick                        */
 8004404:	2001      	movs	r0, #1
 8004406:	f001 f9df 	bl	80057c8 <OSTimeDly>

        OS_ENTER_CRITICAL();
 800440a:	2040      	movs	r0, #64	@ 0x40
 800440c:	f7fb feeb 	bl	80001e6 <OS_CPU_SR_Save>
 8004410:	60f8      	str	r0, [r7, #12]
        OSIdleCtr = 0uL;                        /* Reset the idle counter for the next second         */
 8004412:	4b1f      	ldr	r3, [pc, #124]	@ (8004490 <OS_TaskStat+0xe8>)
 8004414:	2200      	movs	r2, #0
 8004416:	601a      	str	r2, [r3, #0]
        OS_EXIT_CRITICAL();
 8004418:	68f8      	ldr	r0, [r7, #12]
 800441a:	f7fb fef2 	bl	8000202 <OS_CPU_SR_Restore>

        OSTimeDly(OS_TICKS_PER_SEC / 10u);       /* Accumulate OSIdleCtr for the next 1/10 second      */
 800441e:	200a      	movs	r0, #10
 8004420:	f001 f9d2 	bl	80057c8 <OSTimeDly>

        OS_ENTER_CRITICAL();
 8004424:	2040      	movs	r0, #64	@ 0x40
 8004426:	f7fb fede 	bl	80001e6 <OS_CPU_SR_Save>
 800442a:	60f8      	str	r0, [r7, #12]
        OSIdleCtrRun = OSIdleCtr;                /* Store number of cycles which elapsed while idle    */
 800442c:	4b18      	ldr	r3, [pc, #96]	@ (8004490 <OS_TaskStat+0xe8>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a18      	ldr	r2, [pc, #96]	@ (8004494 <OS_TaskStat+0xec>)
 8004432:	6013      	str	r3, [r2, #0]
        OS_EXIT_CRITICAL();
 8004434:	68f8      	ldr	r0, [r7, #12]
 8004436:	f7fb fee4 	bl	8000202 <OS_CPU_SR_Restore>

        usage            = 100 - (INT8S)(OSIdleCtrRun / OSIdleCtrMax);
 800443a:	4b16      	ldr	r3, [pc, #88]	@ (8004494 <OS_TaskStat+0xec>)
 800443c:	681a      	ldr	r2, [r3, #0]
 800443e:	4b11      	ldr	r3, [pc, #68]	@ (8004484 <OS_TaskStat+0xdc>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	fbb2 f3f3 	udiv	r3, r2, r3
 8004446:	b2db      	uxtb	r3, r3
 8004448:	f1c3 0364 	rsb	r3, r3, #100	@ 0x64
 800444c:	b2db      	uxtb	r3, r3
 800444e:	72fb      	strb	r3, [r7, #11]
        if (usage >= 0) {                        /* Make sure we don't have a negative percentage      */
 8004450:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8004454:	2b00      	cmp	r3, #0
 8004456:	db03      	blt.n	8004460 <OS_TaskStat+0xb8>
            OSCPUUsage   = (INT8U)usage;
 8004458:	7afa      	ldrb	r2, [r7, #11]
 800445a:	4b0c      	ldr	r3, [pc, #48]	@ (800448c <OS_TaskStat+0xe4>)
 800445c:	701a      	strb	r2, [r3, #0]
 800445e:	e00a      	b.n	8004476 <OS_TaskStat+0xce>
        } else {
            OSCPUUsage   = 0u;
 8004460:	4b0a      	ldr	r3, [pc, #40]	@ (800448c <OS_TaskStat+0xe4>)
 8004462:	2200      	movs	r2, #0
 8004464:	701a      	strb	r2, [r3, #0]
            OSIdleCtrMax = OSIdleCtrRun / 100uL; /* Update max counter value to current one            */
 8004466:	4b0b      	ldr	r3, [pc, #44]	@ (8004494 <OS_TaskStat+0xec>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4a07      	ldr	r2, [pc, #28]	@ (8004488 <OS_TaskStat+0xe0>)
 800446c:	fba2 2303 	umull	r2, r3, r2, r3
 8004470:	095b      	lsrs	r3, r3, #5
 8004472:	4a04      	ldr	r2, [pc, #16]	@ (8004484 <OS_TaskStat+0xdc>)
 8004474:	6013      	str	r3, [r2, #0]
        }

        OSTaskStatHook();                        /* Invoke user definable hook                         */
 8004476:	f7fe ff7f 	bl	8003378 <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0u) && (OS_TASK_CREATE_EXT_EN > 0u)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
 800447a:	f000 f80d 	bl	8004498 <OS_TaskStatStkChk>
        OSTimeDly(1);                            /* Synchronize with clock tick                        */
 800447e:	e7c1      	b.n	8004404 <OS_TaskStat+0x5c>
 8004480:	20000e1c 	.word	0x20000e1c
 8004484:	20000e14 	.word	0x20000e14
 8004488:	51eb851f 	.word	0x51eb851f
 800448c:	20000e10 	.word	0x20000e10
 8004490:	20001034 	.word	0x20001034
 8004494:	20000e18 	.word	0x20000e18

08004498 <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0u) && (OS_TASK_CREATE_EXT_EN > 0u)
void  OS_TaskStatStkChk (void)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b084      	sub	sp, #16
 800449c:	af00      	add	r7, sp, #0
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0u; prio <= OS_TASK_IDLE_PRIO; prio++) {
 800449e:	2300      	movs	r3, #0
 80044a0:	73fb      	strb	r3, [r7, #15]
 80044a2:	e023      	b.n	80044ec <OS_TaskStatStkChk+0x54>
        err = OSTaskStkChk(prio, &stk_data);
 80044a4:	463a      	mov	r2, r7
 80044a6:	7bfb      	ldrb	r3, [r7, #15]
 80044a8:	4611      	mov	r1, r2
 80044aa:	4618      	mov	r0, r3
 80044ac:	f001 f868 	bl	8005580 <OSTaskStkChk>
 80044b0:	4603      	mov	r3, r0
 80044b2:	73bb      	strb	r3, [r7, #14]
        if (err == OS_ERR_NONE) {
 80044b4:	7bbb      	ldrb	r3, [r7, #14]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d115      	bne.n	80044e6 <OS_TaskStatStkChk+0x4e>
            ptcb = OSTCBPrioTbl[prio];
 80044ba:	7bfb      	ldrb	r3, [r7, #15]
 80044bc:	4a0f      	ldr	r2, [pc, #60]	@ (80044fc <OS_TaskStatStkChk+0x64>)
 80044be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044c2:	60bb      	str	r3, [r7, #8]
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d00d      	beq.n	80044e6 <OS_TaskStatStkChk+0x4e>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	2b01      	cmp	r3, #1
 80044ce:	d00a      	beq.n	80044e6 <OS_TaskStatStkChk+0x4e>
#if OS_TASK_PROFILE_EN > 0u
                    #if OS_STK_GROWTH == 1u
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	689a      	ldr	r2, [r3, #8]
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	68db      	ldr	r3, [r3, #12]
 80044d8:	009b      	lsls	r3, r3, #2
 80044da:	441a      	add	r2, r3
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	64da      	str	r2, [r3, #76]	@ 0x4c
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store number of entries used   */
 80044e0:	687a      	ldr	r2, [r7, #4]
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	651a      	str	r2, [r3, #80]	@ 0x50
    for (prio = 0u; prio <= OS_TASK_IDLE_PRIO; prio++) {
 80044e6:	7bfb      	ldrb	r3, [r7, #15]
 80044e8:	3301      	adds	r3, #1
 80044ea:	73fb      	strb	r3, [r7, #15]
 80044ec:	7bfb      	ldrb	r3, [r7, #15]
 80044ee:	2b3f      	cmp	r3, #63	@ 0x3f
 80044f0:	d9d8      	bls.n	80044a4 <OS_TaskStatStkChk+0xc>
#endif
                }
            }
        }
    }
}
 80044f2:	bf00      	nop
 80044f4:	bf00      	nop
 80044f6:	3710      	adds	r7, #16
 80044f8:	46bd      	mov	sp, r7
 80044fa:	bd80      	pop	{r7, pc}
 80044fc:	20001248 	.word	0x20001248

08004500 <OS_TCBInit>:
                   OS_STK  *pbos,
                   INT16U   id,
                   INT32U   stk_size,
                   void    *pext,
                   INT16U   opt)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b088      	sub	sp, #32
 8004504:	af00      	add	r7, sp, #0
 8004506:	60b9      	str	r1, [r7, #8]
 8004508:	607a      	str	r2, [r7, #4]
 800450a:	461a      	mov	r2, r3
 800450c:	4603      	mov	r3, r0
 800450e:	73fb      	strb	r3, [r7, #15]
 8004510:	4613      	mov	r3, r2
 8004512:	81bb      	strh	r3, [r7, #12]
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0u;
 8004514:	2300      	movs	r3, #0
 8004516:	61bb      	str	r3, [r7, #24]
    INT8U      j;
#endif
#endif


    OS_ENTER_CRITICAL();
 8004518:	2040      	movs	r0, #64	@ 0x40
 800451a:	f7fb fe64 	bl	80001e6 <OS_CPU_SR_Save>
 800451e:	61b8      	str	r0, [r7, #24]
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
 8004520:	4b6b      	ldr	r3, [pc, #428]	@ (80046d0 <OS_TCBInit+0x1d0>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	617b      	str	r3, [r7, #20]
    if (ptcb != (OS_TCB *)0) {
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	2b00      	cmp	r3, #0
 800452a:	f000 80c9 	beq.w	80046c0 <OS_TCBInit+0x1c0>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
 800452e:	697b      	ldr	r3, [r7, #20]
 8004530:	695b      	ldr	r3, [r3, #20]
 8004532:	4a67      	ldr	r2, [pc, #412]	@ (80046d0 <OS_TCBInit+0x1d0>)
 8004534:	6013      	str	r3, [r2, #0]
        OS_EXIT_CRITICAL();
 8004536:	69b8      	ldr	r0, [r7, #24]
 8004538:	f7fb fe63 	bl	8000202 <OS_CPU_SR_Restore>
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	68ba      	ldr	r2, [r7, #8]
 8004540:	601a      	str	r2, [r3, #0]
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	7bfa      	ldrb	r2, [r7, #15]
 8004546:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	2200      	movs	r2, #0
 800454e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
 8004552:	697b      	ldr	r3, [r7, #20]
 8004554:	2200      	movs	r2, #0
 8004556:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        ptcb->OSTCBDly           = 0u;                     /* Task is not delayed                      */
 800455a:	697b      	ldr	r3, [r7, #20]
 800455c:	2200      	movs	r2, #0
 800455e:	635a      	str	r2, [r3, #52]	@ 0x34

#if OS_TASK_CREATE_EXT_EN > 0u
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
 8004560:	697b      	ldr	r3, [r7, #20]
 8004562:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004564:	605a      	str	r2, [r3, #4]
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
 8004566:	697b      	ldr	r3, [r7, #20]
 8004568:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800456a:	60da      	str	r2, [r3, #12]
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
 800456c:	697b      	ldr	r3, [r7, #20]
 800456e:	687a      	ldr	r2, [r7, #4]
 8004570:	609a      	str	r2, [r3, #8]
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8004576:	821a      	strh	r2, [r3, #16]
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	89ba      	ldrh	r2, [r7, #12]
 800457c:	825a      	strh	r2, [r3, #18]
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0u
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
 800457e:	697b      	ldr	r3, [r7, #20]
 8004580:	2200      	movs	r2, #0
 8004582:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
#endif

#if OS_LOWEST_PRIO <= 63u                                         /* Pre-compute X, Y                  */
        ptcb->OSTCBY             = (INT8U)(prio >> 3u);
 8004586:	7bfb      	ldrb	r3, [r7, #15]
 8004588:	08db      	lsrs	r3, r3, #3
 800458a:	b2da      	uxtb	r2, r3
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        ptcb->OSTCBX             = (INT8U)(prio & 0x07u);
 8004592:	7bfb      	ldrb	r3, [r7, #15]
 8004594:	f003 0307 	and.w	r3, r3, #7
 8004598:	b2da      	uxtb	r2, r3
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
#else                                                             /* Pre-compute X, Y                  */
        ptcb->OSTCBY             = (INT8U)((INT8U)(prio >> 4u) & 0xFFu);
        ptcb->OSTCBX             = (INT8U) (prio & 0x0Fu);
#endif
                                                                  /* Pre-compute BitX and BitY         */
        ptcb->OSTCBBitY          = (OS_PRIO)(1uL << ptcb->OSTCBY);
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80045a6:	461a      	mov	r2, r3
 80045a8:	2301      	movs	r3, #1
 80045aa:	4093      	lsls	r3, r2
 80045ac:	b2da      	uxtb	r2, r3
 80045ae:	697b      	ldr	r3, [r7, #20]
 80045b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        ptcb->OSTCBBitX          = (OS_PRIO)(1uL << ptcb->OSTCBX);
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 80045ba:	461a      	mov	r2, r3
 80045bc:	2301      	movs	r3, #1
 80045be:	4093      	lsls	r3, r2
 80045c0:	b2da      	uxtb	r2, r3
 80045c2:	697b      	ldr	r3, [r7, #20]
 80045c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
 80045c8:	697b      	ldr	r3, [r7, #20]
 80045ca:	2200      	movs	r2, #0
 80045cc:	61da      	str	r2, [r3, #28]
#if (OS_EVENT_MULTI_EN > 0u)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
 80045ce:	697b      	ldr	r3, [r7, #20]
 80045d0:	2200      	movs	r2, #0
 80045d2:	621a      	str	r2, [r3, #32]
        ptcb->OSTCBEventMultiRdy = (OS_EVENT  *)0;         /* No events readied for Multipend          */
 80045d4:	697b      	ldr	r3, [r7, #20]
 80045d6:	2200      	movs	r2, #0
 80045d8:	625a      	str	r2, [r3, #36]	@ 0x24
#endif
#endif

#if (OS_FLAG_EN > 0u) && (OS_MAX_FLAGS > 0u) && (OS_TASK_DEL_EN > 0u)
        ptcb->OSTCBFlagNode      = (OS_FLAG_NODE *)0;      /* Task is not pending on an event flag     */
 80045da:	697b      	ldr	r3, [r7, #20]
 80045dc:	2200      	movs	r2, #0
 80045de:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif

#if (OS_MBOX_EN > 0u) || ((OS_Q_EN > 0u) && (OS_MAX_QS > 0u))
        ptcb->OSTCBMsg           = (void *)0;              /* No message received                      */
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	2200      	movs	r2, #0
 80045e4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif

#if OS_TASK_PROFILE_EN > 0u
        ptcb->OSTCBCtxSwCtr      = 0uL;                    /* Initialize profiling variables           */
 80045e6:	697b      	ldr	r3, [r7, #20]
 80045e8:	2200      	movs	r2, #0
 80045ea:	641a      	str	r2, [r3, #64]	@ 0x40
        ptcb->OSTCBCyclesStart   = 0uL;
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	2200      	movs	r2, #0
 80045f0:	649a      	str	r2, [r3, #72]	@ 0x48
        ptcb->OSTCBCyclesTot     = 0uL;
 80045f2:	697b      	ldr	r3, [r7, #20]
 80045f4:	2200      	movs	r2, #0
 80045f6:	645a      	str	r2, [r3, #68]	@ 0x44
        ptcb->OSTCBStkBase       = (OS_STK *)0;
 80045f8:	697b      	ldr	r3, [r7, #20]
 80045fa:	2200      	movs	r2, #0
 80045fc:	64da      	str	r2, [r3, #76]	@ 0x4c
        ptcb->OSTCBStkUsed       = 0uL;
 80045fe:	697b      	ldr	r3, [r7, #20]
 8004600:	2200      	movs	r2, #0
 8004602:	651a      	str	r2, [r3, #80]	@ 0x50
#endif

#if OS_TASK_NAME_EN > 0u
        ptcb->OSTCBTaskName      = (INT8U *)(void *)"?";
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	4a33      	ldr	r2, [pc, #204]	@ (80046d4 <OS_TCBInit+0x1d4>)
 8004608:	655a      	str	r2, [r3, #84]	@ 0x54
#endif

#if OS_TASK_REG_TBL_SIZE > 0u                              /* Initialize the task variables            */
        for (i = 0u; i < OS_TASK_REG_TBL_SIZE; i++) {
 800460a:	2300      	movs	r3, #0
 800460c:	77fb      	strb	r3, [r7, #31]
 800460e:	e008      	b.n	8004622 <OS_TCBInit+0x122>
            ptcb->OSTCBRegTbl[i] = 0u;
 8004610:	7ffa      	ldrb	r2, [r7, #31]
 8004612:	697b      	ldr	r3, [r7, #20]
 8004614:	3216      	adds	r2, #22
 8004616:	2100      	movs	r1, #0
 8004618:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        for (i = 0u; i < OS_TASK_REG_TBL_SIZE; i++) {
 800461c:	7ffb      	ldrb	r3, [r7, #31]
 800461e:	3301      	adds	r3, #1
 8004620:	77fb      	strb	r3, [r7, #31]
 8004622:	7ffb      	ldrb	r3, [r7, #31]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d0f3      	beq.n	8004610 <OS_TCBInit+0x110>
        }
#endif

        OSTCBInitHook(ptcb);
 8004628:	6978      	ldr	r0, [r7, #20]
 800462a:	f7ff f851 	bl	80036d0 <OSTCBInitHook>

        OS_ENTER_CRITICAL();
 800462e:	2040      	movs	r0, #64	@ 0x40
 8004630:	f7fb fdd9 	bl	80001e6 <OS_CPU_SR_Save>
 8004634:	61b8      	str	r0, [r7, #24]
        OSTCBPrioTbl[prio] = ptcb;
 8004636:	7bfb      	ldrb	r3, [r7, #15]
 8004638:	4927      	ldr	r1, [pc, #156]	@ (80046d8 <OS_TCBInit+0x1d8>)
 800463a:	697a      	ldr	r2, [r7, #20]
 800463c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        OS_EXIT_CRITICAL();
 8004640:	69b8      	ldr	r0, [r7, #24]
 8004642:	f7fb fdde 	bl	8000202 <OS_CPU_SR_Restore>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
 8004646:	6978      	ldr	r0, [r7, #20]
 8004648:	f7fe fe6f 	bl	800332a <OSTaskCreateHook>
        }
        OS_TLS_TaskCreate(ptcb);                           /* Call TLS hook                            */
#endif
#endif

        OS_ENTER_CRITICAL();
 800464c:	2040      	movs	r0, #64	@ 0x40
 800464e:	f7fb fdca 	bl	80001e6 <OS_CPU_SR_Save>
 8004652:	61b8      	str	r0, [r7, #24]
        ptcb->OSTCBNext = OSTCBList;                       /* Link into TCB chain                      */
 8004654:	4b21      	ldr	r3, [pc, #132]	@ (80046dc <OS_TCBInit+0x1dc>)
 8004656:	681a      	ldr	r2, [r3, #0]
 8004658:	697b      	ldr	r3, [r7, #20]
 800465a:	615a      	str	r2, [r3, #20]
        ptcb->OSTCBPrev = (OS_TCB *)0;
 800465c:	697b      	ldr	r3, [r7, #20]
 800465e:	2200      	movs	r2, #0
 8004660:	619a      	str	r2, [r3, #24]
        if (OSTCBList != (OS_TCB *)0) {
 8004662:	4b1e      	ldr	r3, [pc, #120]	@ (80046dc <OS_TCBInit+0x1dc>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d003      	beq.n	8004672 <OS_TCBInit+0x172>
            OSTCBList->OSTCBPrev = ptcb;
 800466a:	4b1c      	ldr	r3, [pc, #112]	@ (80046dc <OS_TCBInit+0x1dc>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	697a      	ldr	r2, [r7, #20]
 8004670:	619a      	str	r2, [r3, #24]
        }
        OSTCBList               = ptcb;
 8004672:	4a1a      	ldr	r2, [pc, #104]	@ (80046dc <OS_TCBInit+0x1dc>)
 8004674:	697b      	ldr	r3, [r7, #20]
 8004676:	6013      	str	r3, [r2, #0]
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	f893 203e 	ldrb.w	r2, [r3, #62]	@ 0x3e
 800467e:	4b18      	ldr	r3, [pc, #96]	@ (80046e0 <OS_TCBInit+0x1e0>)
 8004680:	781b      	ldrb	r3, [r3, #0]
 8004682:	4313      	orrs	r3, r2
 8004684:	b2da      	uxtb	r2, r3
 8004686:	4b16      	ldr	r3, [pc, #88]	@ (80046e0 <OS_TCBInit+0x1e0>)
 8004688:	701a      	strb	r2, [r3, #0]
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 800468a:	697b      	ldr	r3, [r7, #20]
 800468c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004690:	461a      	mov	r2, r3
 8004692:	4b14      	ldr	r3, [pc, #80]	@ (80046e4 <OS_TCBInit+0x1e4>)
 8004694:	5c9a      	ldrb	r2, [r3, r2]
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800469c:	6979      	ldr	r1, [r7, #20]
 800469e:	f891 103c 	ldrb.w	r1, [r1, #60]	@ 0x3c
 80046a2:	4313      	orrs	r3, r2
 80046a4:	b2da      	uxtb	r2, r3
 80046a6:	4b0f      	ldr	r3, [pc, #60]	@ (80046e4 <OS_TCBInit+0x1e4>)
 80046a8:	545a      	strb	r2, [r3, r1]
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
 80046aa:	4b0f      	ldr	r3, [pc, #60]	@ (80046e8 <OS_TCBInit+0x1e8>)
 80046ac:	781b      	ldrb	r3, [r3, #0]
 80046ae:	3301      	adds	r3, #1
 80046b0:	b2da      	uxtb	r2, r3
 80046b2:	4b0d      	ldr	r3, [pc, #52]	@ (80046e8 <OS_TCBInit+0x1e8>)
 80046b4:	701a      	strb	r2, [r3, #0]
        OS_TRACE_TASK_READY(ptcb);
        OS_EXIT_CRITICAL();
 80046b6:	69b8      	ldr	r0, [r7, #24]
 80046b8:	f7fb fda3 	bl	8000202 <OS_CPU_SR_Restore>
        return (OS_ERR_NONE);
 80046bc:	2300      	movs	r3, #0
 80046be:	e003      	b.n	80046c8 <OS_TCBInit+0x1c8>
    }
    OS_EXIT_CRITICAL();
 80046c0:	69b8      	ldr	r0, [r7, #24]
 80046c2:	f7fb fd9e 	bl	8000202 <OS_CPU_SR_Restore>
    return (OS_ERR_TASK_NO_MORE_TCB);
 80046c6:	2342      	movs	r3, #66	@ 0x42
}
 80046c8:	4618      	mov	r0, r3
 80046ca:	3720      	adds	r7, #32
 80046cc:	46bd      	mov	sp, r7
 80046ce:	bd80      	pop	{r7, pc}
 80046d0:	2000123c 	.word	0x2000123c
 80046d4:	08005cac 	.word	0x08005cac
 80046d8:	20001248 	.word	0x20001248
 80046dc:	20001244 	.word	0x20001244
 80046e0:	20001024 	.word	0x20001024
 80046e4:	20001028 	.word	0x20001028
 80046e8:	20001031 	.word	0x20001031

080046ec <OSFlagCreate>:
*********************************************************************************************************
*/

OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS  flags,
                            INT8U    *perr)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b084      	sub	sp, #16
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	4603      	mov	r3, r0
 80046f4:	6039      	str	r1, [r7, #0]
 80046f6:	80fb      	strh	r3, [r7, #6]
    OS_FLAG_GRP *pgrp;
#if OS_CRITICAL_METHOD == 3u                        /* Allocate storage for CPU status register        */
    OS_CPU_SR    cpu_sr = 0u;
 80046f8:	2300      	movs	r3, #0
 80046fa:	60fb      	str	r3, [r7, #12]
        *perr = OS_ERR_ILLEGAL_CREATE_RUN_TIME;
        return ((OS_FLAG_GRP *)0);
    }
#endif

    if (OSIntNesting > 0u) {                        /* See if called from ISR ...                      */
 80046fc:	4b1a      	ldr	r3, [pc, #104]	@ (8004768 <OSFlagCreate+0x7c>)
 80046fe:	781b      	ldrb	r3, [r3, #0]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d004      	beq.n	800470e <OSFlagCreate+0x22>
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	2210      	movs	r2, #16
 8004708:	701a      	strb	r2, [r3, #0]
        return ((OS_FLAG_GRP *)0);
 800470a:	2300      	movs	r3, #0
 800470c:	e028      	b.n	8004760 <OSFlagCreate+0x74>
    }
    OS_ENTER_CRITICAL();
 800470e:	2040      	movs	r0, #64	@ 0x40
 8004710:	f7fb fd69 	bl	80001e6 <OS_CPU_SR_Save>
 8004714:	60f8      	str	r0, [r7, #12]
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
 8004716:	4b15      	ldr	r3, [pc, #84]	@ (800476c <OSFlagCreate+0x80>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	60bb      	str	r3, [r7, #8]
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d017      	beq.n	8004752 <OSFlagCreate+0x66>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
 8004722:	4b12      	ldr	r3, [pc, #72]	@ (800476c <OSFlagCreate+0x80>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	4a10      	ldr	r2, [pc, #64]	@ (800476c <OSFlagCreate+0x80>)
 800472a:	6013      	str	r3, [r2, #0]
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	2205      	movs	r2, #5
 8004730:	701a      	strb	r2, [r3, #0]
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	88fa      	ldrh	r2, [r7, #6]
 8004736:	811a      	strh	r2, [r3, #8]
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	2200      	movs	r2, #0
 800473c:	605a      	str	r2, [r3, #4]
#if OS_FLAG_NAME_EN > 0u
        pgrp->OSFlagName     = (INT8U *)(void *)"?";
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	4a0b      	ldr	r2, [pc, #44]	@ (8004770 <OSFlagCreate+0x84>)
 8004742:	60da      	str	r2, [r3, #12]
#endif
        OS_TRACE_FLAG_CREATE(pgrp, pgrp->OSFlagName);
        OS_EXIT_CRITICAL();
 8004744:	68f8      	ldr	r0, [r7, #12]
 8004746:	f7fb fd5c 	bl	8000202 <OS_CPU_SR_Restore>
        *perr                = OS_ERR_NONE;
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	2200      	movs	r2, #0
 800474e:	701a      	strb	r2, [r3, #0]
 8004750:	e005      	b.n	800475e <OSFlagCreate+0x72>
    } else {
        OS_EXIT_CRITICAL();
 8004752:	68f8      	ldr	r0, [r7, #12]
 8004754:	f7fb fd55 	bl	8000202 <OS_CPU_SR_Restore>
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	2272      	movs	r2, #114	@ 0x72
 800475c:	701a      	strb	r2, [r3, #0]
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
 800475e:	68bb      	ldr	r3, [r7, #8]
}
 8004760:	4618      	mov	r0, r3
 8004762:	3710      	adds	r7, #16
 8004764:	46bd      	mov	sp, r7
 8004766:	bd80      	pop	{r7, pc}
 8004768:	20001020 	.word	0x20001020
 800476c:	20000e0c 	.word	0x20000e0c
 8004770:	08005cd0 	.word	0x08005cd0

08004774 <OSFlagPend>:
OS_FLAGS  OSFlagPend (OS_FLAG_GRP  *pgrp,
                      OS_FLAGS      flags,
                      INT8U         wait_type,
                      INT32U        timeout,
                      INT8U        *perr)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b090      	sub	sp, #64	@ 0x40
 8004778:	af02      	add	r7, sp, #8
 800477a:	60f8      	str	r0, [r7, #12]
 800477c:	607b      	str	r3, [r7, #4]
 800477e:	460b      	mov	r3, r1
 8004780:	817b      	strh	r3, [r7, #10]
 8004782:	4613      	mov	r3, r2
 8004784:	727b      	strb	r3, [r7, #9]
    OS_FLAGS      flags_rdy;
    INT8U         result;
    INT8U         pend_stat;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0u;
 8004786:	2300      	movs	r3, #0
 8004788:	633b      	str	r3, [r7, #48]	@ 0x30
        return ((OS_FLAGS)0);
    }
#endif

#if OS_ARG_CHK_EN > 0u
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d104      	bne.n	800479a <OSFlagPend+0x26>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 8004790:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004792:	226e      	movs	r2, #110	@ 0x6e
 8004794:	701a      	strb	r2, [r3, #0]
        return ((OS_FLAGS)0);
 8004796:	2300      	movs	r3, #0
 8004798:	e176      	b.n	8004a88 <OSFlagPend+0x314>
    }
#endif

    OS_TRACE_FLAG_PEND_ENTER(pgrp, flags, timeout, wait_type);

    if (OSIntNesting > 0u) {                               /* See if called from ISR ...               */
 800479a:	4b9f      	ldr	r3, [pc, #636]	@ (8004a18 <OSFlagPend+0x2a4>)
 800479c:	781b      	ldrb	r3, [r3, #0]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d004      	beq.n	80047ac <OSFlagPend+0x38>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
 80047a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80047a4:	2202      	movs	r2, #2
 80047a6:	701a      	strb	r2, [r3, #0]
        OS_TRACE_FLAG_PEND_EXIT(*perr);
        return ((OS_FLAGS)0);
 80047a8:	2300      	movs	r3, #0
 80047aa:	e16d      	b.n	8004a88 <OSFlagPend+0x314>
    }
    if (OSLockNesting > 0u) {                              /* See if called with scheduler locked ...  */
 80047ac:	4b9b      	ldr	r3, [pc, #620]	@ (8004a1c <OSFlagPend+0x2a8>)
 80047ae:	781b      	ldrb	r3, [r3, #0]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d004      	beq.n	80047be <OSFlagPend+0x4a>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
 80047b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80047b6:	220d      	movs	r2, #13
 80047b8:	701a      	strb	r2, [r3, #0]
        OS_TRACE_FLAG_PEND_EXIT(*perr);
        return ((OS_FLAGS)0);
 80047ba:	2300      	movs	r3, #0
 80047bc:	e164      	b.n	8004a88 <OSFlagPend+0x314>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	781b      	ldrb	r3, [r3, #0]
 80047c2:	2b05      	cmp	r3, #5
 80047c4:	d004      	beq.n	80047d0 <OSFlagPend+0x5c>
        *perr = OS_ERR_EVENT_TYPE;
 80047c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80047c8:	2201      	movs	r2, #1
 80047ca:	701a      	strb	r2, [r3, #0]
        OS_TRACE_FLAG_PEND_EXIT(*perr);
        return ((OS_FLAGS)0);
 80047cc:	2300      	movs	r3, #0
 80047ce:	e15b      	b.n	8004a88 <OSFlagPend+0x314>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
 80047d0:	7a7b      	ldrb	r3, [r7, #9]
 80047d2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80047d6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
 80047da:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d007      	beq.n	80047f2 <OSFlagPend+0x7e>
        wait_type &= (INT8U)~(INT8U)OS_FLAG_CONSUME;
 80047e2:	7a7b      	ldrb	r3, [r7, #9]
 80047e4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80047e8:	727b      	strb	r3, [r7, #9]
        consume    = OS_TRUE;
 80047ea:	2301      	movs	r3, #1
 80047ec:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80047f0:	e002      	b.n	80047f8 <OSFlagPend+0x84>
    } else {
        consume    = OS_FALSE;
 80047f2:	2300      	movs	r3, #0
 80047f4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    }

    OS_ENTER_CRITICAL();
 80047f8:	2040      	movs	r0, #64	@ 0x40
 80047fa:	f7fb fcf4 	bl	80001e6 <OS_CPU_SR_Save>
 80047fe:	6338      	str	r0, [r7, #48]	@ 0x30
    switch (wait_type) {
 8004800:	7a7b      	ldrb	r3, [r7, #9]
 8004802:	2b03      	cmp	r3, #3
 8004804:	f200 80ca 	bhi.w	800499c <OSFlagPend+0x228>
 8004808:	a201      	add	r2, pc, #4	@ (adr r2, 8004810 <OSFlagPend+0x9c>)
 800480a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800480e:	bf00      	nop
 8004810:	080048df 	.word	0x080048df
 8004814:	0800493f 	.word	0x0800493f
 8004818:	08004821 	.word	0x08004821
 800481c:	08004881 	.word	0x08004881
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	891a      	ldrh	r2, [r3, #8]
 8004824:	897b      	ldrh	r3, [r7, #10]
 8004826:	4013      	ands	r3, r2
 8004828:	85bb      	strh	r3, [r7, #44]	@ 0x2c
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
 800482a:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 800482c:	897b      	ldrh	r3, [r7, #10]
 800482e:	429a      	cmp	r2, r3
 8004830:	d118      	bne.n	8004864 <OSFlagPend+0xf0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 8004832:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8004836:	2b01      	cmp	r3, #1
 8004838:	d108      	bne.n	800484c <OSFlagPend+0xd8>
                     pgrp->OSFlagFlags &= (OS_FLAGS)~flags_rdy;   /* Clear ONLY the flags we wanted    */
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	891a      	ldrh	r2, [r3, #8]
 800483e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8004840:	43db      	mvns	r3, r3
 8004842:	b29b      	uxth	r3, r3
 8004844:	4013      	ands	r3, r2
 8004846:	b29a      	uxth	r2, r3
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	811a      	strh	r2, [r3, #8]
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
 800484c:	4b74      	ldr	r3, [pc, #464]	@ (8004a20 <OSFlagPend+0x2ac>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8004852:	861a      	strh	r2, [r3, #48]	@ 0x30
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
 8004854:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004856:	f7fb fcd4 	bl	8000202 <OS_CPU_SR_Restore>
                 *perr                   = OS_ERR_NONE;
 800485a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800485c:	2200      	movs	r2, #0
 800485e:	701a      	strb	r2, [r3, #0]
                 OS_TRACE_FLAG_PEND_EXIT(*perr);
                 return (flags_rdy);
 8004860:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8004862:	e111      	b.n	8004a88 <OSFlagPend+0x314>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 8004864:	7a78      	ldrb	r0, [r7, #9]
 8004866:	897a      	ldrh	r2, [r7, #10]
 8004868:	f107 0114 	add.w	r1, r7, #20
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	9300      	str	r3, [sp, #0]
 8004870:	4603      	mov	r3, r0
 8004872:	68f8      	ldr	r0, [r7, #12]
 8004874:	f000 f9fe 	bl	8004c74 <OS_FlagBlock>
                 OS_EXIT_CRITICAL();
 8004878:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800487a:	f7fb fcc2 	bl	8000202 <OS_CPU_SR_Restore>
             }
             break;
 800487e:	e097      	b.n	80049b0 <OSFlagPend+0x23c>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	891a      	ldrh	r2, [r3, #8]
 8004884:	897b      	ldrh	r3, [r7, #10]
 8004886:	4013      	ands	r3, r2
 8004888:	85bb      	strh	r3, [r7, #44]	@ 0x2c
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
 800488a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800488c:	2b00      	cmp	r3, #0
 800488e:	d018      	beq.n	80048c2 <OSFlagPend+0x14e>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 8004890:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8004894:	2b01      	cmp	r3, #1
 8004896:	d108      	bne.n	80048aa <OSFlagPend+0x136>
                     pgrp->OSFlagFlags &= (OS_FLAGS)~flags_rdy;    /* Clear ONLY the flags that we got */
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	891a      	ldrh	r2, [r3, #8]
 800489c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800489e:	43db      	mvns	r3, r3
 80048a0:	b29b      	uxth	r3, r3
 80048a2:	4013      	ands	r3, r2
 80048a4:	b29a      	uxth	r2, r3
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	811a      	strh	r2, [r3, #8]
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
 80048aa:	4b5d      	ldr	r3, [pc, #372]	@ (8004a20 <OSFlagPend+0x2ac>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 80048b0:	861a      	strh	r2, [r3, #48]	@ 0x30
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
 80048b2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80048b4:	f7fb fca5 	bl	8000202 <OS_CPU_SR_Restore>
                 *perr                   = OS_ERR_NONE;
 80048b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80048ba:	2200      	movs	r2, #0
 80048bc:	701a      	strb	r2, [r3, #0]
                 OS_TRACE_FLAG_PEND_EXIT(*perr);
                 return (flags_rdy);
 80048be:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80048c0:	e0e2      	b.n	8004a88 <OSFlagPend+0x314>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 80048c2:	7a78      	ldrb	r0, [r7, #9]
 80048c4:	897a      	ldrh	r2, [r7, #10]
 80048c6:	f107 0114 	add.w	r1, r7, #20
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	9300      	str	r3, [sp, #0]
 80048ce:	4603      	mov	r3, r0
 80048d0:	68f8      	ldr	r0, [r7, #12]
 80048d2:	f000 f9cf 	bl	8004c74 <OS_FlagBlock>
                 OS_EXIT_CRITICAL();
 80048d6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80048d8:	f7fb fc93 	bl	8000202 <OS_CPU_SR_Restore>
             }
             break;
 80048dc:	e068      	b.n	80049b0 <OSFlagPend+0x23c>

#if OS_FLAG_WAIT_CLR_EN > 0u
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)~pgrp->OSFlagFlags & flags;    /* Extract only the bits we want     */
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	891b      	ldrh	r3, [r3, #8]
 80048e2:	43db      	mvns	r3, r3
 80048e4:	b29a      	uxth	r2, r3
 80048e6:	897b      	ldrh	r3, [r7, #10]
 80048e8:	4013      	ands	r3, r2
 80048ea:	85bb      	strh	r3, [r7, #44]	@ 0x2c
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
 80048ec:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 80048ee:	897b      	ldrh	r3, [r7, #10]
 80048f0:	429a      	cmp	r2, r3
 80048f2:	d116      	bne.n	8004922 <OSFlagPend+0x1ae>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 80048f4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80048f8:	2b01      	cmp	r3, #1
 80048fa:	d106      	bne.n	800490a <OSFlagPend+0x196>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	891a      	ldrh	r2, [r3, #8]
 8004900:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8004902:	4313      	orrs	r3, r2
 8004904:	b29a      	uxth	r2, r3
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	811a      	strh	r2, [r3, #8]
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
 800490a:	4b45      	ldr	r3, [pc, #276]	@ (8004a20 <OSFlagPend+0x2ac>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8004910:	861a      	strh	r2, [r3, #48]	@ 0x30
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
 8004912:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004914:	f7fb fc75 	bl	8000202 <OS_CPU_SR_Restore>
                 *perr                   = OS_ERR_NONE;
 8004918:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800491a:	2200      	movs	r2, #0
 800491c:	701a      	strb	r2, [r3, #0]
                 OS_TRACE_FLAG_PEND_EXIT(*perr);
                 return (flags_rdy);
 800491e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8004920:	e0b2      	b.n	8004a88 <OSFlagPend+0x314>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 8004922:	7a78      	ldrb	r0, [r7, #9]
 8004924:	897a      	ldrh	r2, [r7, #10]
 8004926:	f107 0114 	add.w	r1, r7, #20
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	9300      	str	r3, [sp, #0]
 800492e:	4603      	mov	r3, r0
 8004930:	68f8      	ldr	r0, [r7, #12]
 8004932:	f000 f99f 	bl	8004c74 <OS_FlagBlock>
                 OS_EXIT_CRITICAL();
 8004936:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004938:	f7fb fc63 	bl	8000202 <OS_CPU_SR_Restore>
             }
             break;
 800493c:	e038      	b.n	80049b0 <OSFlagPend+0x23c>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)~pgrp->OSFlagFlags & flags;   /* Extract only the bits we want      */
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	891b      	ldrh	r3, [r3, #8]
 8004942:	43db      	mvns	r3, r3
 8004944:	b29a      	uxth	r2, r3
 8004946:	897b      	ldrh	r3, [r7, #10]
 8004948:	4013      	ands	r3, r2
 800494a:	85bb      	strh	r3, [r7, #44]	@ 0x2c
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
 800494c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800494e:	2b00      	cmp	r3, #0
 8004950:	d016      	beq.n	8004980 <OSFlagPend+0x20c>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 8004952:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8004956:	2b01      	cmp	r3, #1
 8004958:	d106      	bne.n	8004968 <OSFlagPend+0x1f4>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	891a      	ldrh	r2, [r3, #8]
 800495e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8004960:	4313      	orrs	r3, r2
 8004962:	b29a      	uxth	r2, r3
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	811a      	strh	r2, [r3, #8]
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
 8004968:	4b2d      	ldr	r3, [pc, #180]	@ (8004a20 <OSFlagPend+0x2ac>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 800496e:	861a      	strh	r2, [r3, #48]	@ 0x30
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
 8004970:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004972:	f7fb fc46 	bl	8000202 <OS_CPU_SR_Restore>
                 *perr                   = OS_ERR_NONE;
 8004976:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004978:	2200      	movs	r2, #0
 800497a:	701a      	strb	r2, [r3, #0]
                 OS_TRACE_FLAG_PEND_EXIT(*perr);
                 return (flags_rdy);
 800497c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800497e:	e083      	b.n	8004a88 <OSFlagPend+0x314>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 8004980:	7a78      	ldrb	r0, [r7, #9]
 8004982:	897a      	ldrh	r2, [r7, #10]
 8004984:	f107 0114 	add.w	r1, r7, #20
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	9300      	str	r3, [sp, #0]
 800498c:	4603      	mov	r3, r0
 800498e:	68f8      	ldr	r0, [r7, #12]
 8004990:	f000 f970 	bl	8004c74 <OS_FlagBlock>
                 OS_EXIT_CRITICAL();
 8004994:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004996:	f7fb fc34 	bl	8000202 <OS_CPU_SR_Restore>
             }
             break;
 800499a:	e009      	b.n	80049b0 <OSFlagPend+0x23c>
#endif

        default:
             OS_EXIT_CRITICAL();
 800499c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800499e:	f7fb fc30 	bl	8000202 <OS_CPU_SR_Restore>
             flags_rdy = (OS_FLAGS)0;
 80049a2:	2300      	movs	r3, #0
 80049a4:	85bb      	strh	r3, [r7, #44]	@ 0x2c
             *perr      = OS_ERR_FLAG_WAIT_TYPE;
 80049a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80049a8:	226f      	movs	r2, #111	@ 0x6f
 80049aa:	701a      	strb	r2, [r3, #0]
             OS_TRACE_FLAG_PEND_EXIT(*perr);
             return (flags_rdy);
 80049ac:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80049ae:	e06b      	b.n	8004a88 <OSFlagPend+0x314>
    }

    OS_Sched();                                            /* Find next HPT ready to run               */
 80049b0:	f7ff fc7c 	bl	80042ac <OS_Sched>
    OS_ENTER_CRITICAL();
 80049b4:	2040      	movs	r0, #64	@ 0x40
 80049b6:	f7fb fc16 	bl	80001e6 <OS_CPU_SR_Save>
 80049ba:	6338      	str	r0, [r7, #48]	@ 0x30
    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
 80049bc:	4b18      	ldr	r3, [pc, #96]	@ (8004a20 <OSFlagPend+0x2ac>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d02d      	beq.n	8004a24 <OSFlagPend+0x2b0>
        pend_stat                = OSTCBCur->OSTCBStatPend;
 80049c8:	4b15      	ldr	r3, [pc, #84]	@ (8004a20 <OSFlagPend+0x2ac>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80049d0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 80049d4:	4b12      	ldr	r3, [pc, #72]	@ (8004a20 <OSFlagPend+0x2ac>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	2200      	movs	r2, #0
 80049da:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        OS_FlagUnlink(&node);
 80049de:	f107 0314 	add.w	r3, r7, #20
 80049e2:	4618      	mov	r0, r3
 80049e4:	f000 fa4a 	bl	8004e7c <OS_FlagUnlink>
        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
 80049e8:	4b0d      	ldr	r3, [pc, #52]	@ (8004a20 <OSFlagPend+0x2ac>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	2200      	movs	r2, #0
 80049ee:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        OS_EXIT_CRITICAL();
 80049f2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80049f4:	f7fb fc05 	bl	8000202 <OS_CPU_SR_Restore>
        flags_rdy                = (OS_FLAGS)0;
 80049f8:	2300      	movs	r3, #0
 80049fa:	85bb      	strh	r3, [r7, #44]	@ 0x2c
        switch (pend_stat) {
 80049fc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004a00:	2b02      	cmp	r3, #2
 8004a02:	d103      	bne.n	8004a0c <OSFlagPend+0x298>
            case OS_STAT_PEND_ABORT:
                 *perr = OS_ERR_PEND_ABORT;                /* Indicate that we aborted   waiting       */
 8004a04:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004a06:	220e      	movs	r2, #14
 8004a08:	701a      	strb	r2, [r3, #0]
                 break;
 8004a0a:	e003      	b.n	8004a14 <OSFlagPend+0x2a0>

            case OS_STAT_PEND_TO:
            default:
                 *perr = OS_ERR_TIMEOUT;                   /* Indicate that we timed-out waiting       */
 8004a0c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004a0e:	220a      	movs	r2, #10
 8004a10:	701a      	strb	r2, [r3, #0]
                 break;
 8004a12:	bf00      	nop
        }
        OS_TRACE_FLAG_PEND_EXIT(*perr);
        return (flags_rdy);
 8004a14:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8004a16:	e037      	b.n	8004a88 <OSFlagPend+0x314>
 8004a18:	20001020 	.word	0x20001020
 8004a1c:	20001021 	.word	0x20001021
 8004a20:	20001238 	.word	0x20001238
    }
    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
 8004a24:	4b1a      	ldr	r3, [pc, #104]	@ (8004a90 <OSFlagPend+0x31c>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8004a2a:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
 8004a2c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8004a30:	2b01      	cmp	r3, #1
 8004a32:	d122      	bne.n	8004a7a <OSFlagPend+0x306>
        switch (wait_type) {
 8004a34:	7a7b      	ldrb	r3, [r7, #9]
 8004a36:	2b01      	cmp	r3, #1
 8004a38:	dc02      	bgt.n	8004a40 <OSFlagPend+0x2cc>
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	da0d      	bge.n	8004a5a <OSFlagPend+0x2e6>
 8004a3e:	e014      	b.n	8004a6a <OSFlagPend+0x2f6>
 8004a40:	3b02      	subs	r3, #2
 8004a42:	2b01      	cmp	r3, #1
 8004a44:	d811      	bhi.n	8004a6a <OSFlagPend+0x2f6>
            case OS_FLAG_WAIT_SET_ALL:
            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
                 pgrp->OSFlagFlags &= (OS_FLAGS)~flags_rdy;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	891a      	ldrh	r2, [r3, #8]
 8004a4a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8004a4c:	43db      	mvns	r3, r3
 8004a4e:	b29b      	uxth	r3, r3
 8004a50:	4013      	ands	r3, r2
 8004a52:	b29a      	uxth	r2, r3
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	811a      	strh	r2, [r3, #8]
                 break;
 8004a58:	e00f      	b.n	8004a7a <OSFlagPend+0x306>

#if OS_FLAG_WAIT_CLR_EN > 0u
            case OS_FLAG_WAIT_CLR_ALL:
            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
                 pgrp->OSFlagFlags |=  flags_rdy;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	891a      	ldrh	r2, [r3, #8]
 8004a5e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8004a60:	4313      	orrs	r3, r2
 8004a62:	b29a      	uxth	r2, r3
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	811a      	strh	r2, [r3, #8]
                 break;
 8004a68:	e007      	b.n	8004a7a <OSFlagPend+0x306>
#endif
            default:
                 OS_EXIT_CRITICAL();
 8004a6a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004a6c:	f7fb fbc9 	bl	8000202 <OS_CPU_SR_Restore>
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
 8004a70:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004a72:	226f      	movs	r2, #111	@ 0x6f
 8004a74:	701a      	strb	r2, [r3, #0]
                 OS_TRACE_FLAG_PEND_EXIT(*perr);
                 return ((OS_FLAGS)0);
 8004a76:	2300      	movs	r3, #0
 8004a78:	e006      	b.n	8004a88 <OSFlagPend+0x314>
        }
    }
    OS_EXIT_CRITICAL();
 8004a7a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004a7c:	f7fb fbc1 	bl	8000202 <OS_CPU_SR_Restore>
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
 8004a80:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004a82:	2200      	movs	r2, #0
 8004a84:	701a      	strb	r2, [r3, #0]
    OS_TRACE_FLAG_PEND_EXIT(*perr);
    return (flags_rdy);
 8004a86:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
}
 8004a88:	4618      	mov	r0, r3
 8004a8a:	3738      	adds	r7, #56	@ 0x38
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bd80      	pop	{r7, pc}
 8004a90:	20001238 	.word	0x20001238

08004a94 <OSFlagPost>:
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP  *pgrp,
                      OS_FLAGS      flags,
                      INT8U         opt,
                      INT8U        *perr)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b08a      	sub	sp, #40	@ 0x28
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	60f8      	str	r0, [r7, #12]
 8004a9c:	607b      	str	r3, [r7, #4]
 8004a9e:	460b      	mov	r3, r1
 8004aa0:	817b      	strh	r3, [r7, #10]
 8004aa2:	4613      	mov	r3, r2
 8004aa4:	727b      	strb	r3, [r7, #9]
    BOOLEAN       sched;
    OS_FLAGS      flags_cur;
    OS_FLAGS      flags_rdy;
    BOOLEAN       rdy;
#if OS_CRITICAL_METHOD == 3u                         /* Allocate storage for CPU status register       */
    OS_CPU_SR     cpu_sr = 0u;
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	61fb      	str	r3, [r7, #28]
        return ((OS_FLAGS)0);
    }
#endif

#if OS_ARG_CHK_EN > 0u
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d104      	bne.n	8004aba <OSFlagPost+0x26>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	226e      	movs	r2, #110	@ 0x6e
 8004ab4:	701a      	strb	r2, [r3, #0]
        return ((OS_FLAGS)0);
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	e0d7      	b.n	8004c6a <OSFlagPost+0x1d6>
    }
#endif

    OS_TRACE_FLAG_POST_ENTER(pgrp, flags, opt);

    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	781b      	ldrb	r3, [r3, #0]
 8004abe:	2b05      	cmp	r3, #5
 8004ac0:	d004      	beq.n	8004acc <OSFlagPost+0x38>
        *perr = OS_ERR_EVENT_TYPE;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2201      	movs	r2, #1
 8004ac6:	701a      	strb	r2, [r3, #0]
        OS_TRACE_FLAG_POST_EXIT(*perr);
        return ((OS_FLAGS)0);
 8004ac8:	2300      	movs	r3, #0
 8004aca:	e0ce      	b.n	8004c6a <OSFlagPost+0x1d6>
    }

    OS_ENTER_CRITICAL();
 8004acc:	2040      	movs	r0, #64	@ 0x40
 8004ace:	f7fb fb8a 	bl	80001e6 <OS_CPU_SR_Save>
 8004ad2:	61f8      	str	r0, [r7, #28]
    switch (opt) {
 8004ad4:	7a7b      	ldrb	r3, [r7, #9]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d002      	beq.n	8004ae0 <OSFlagPost+0x4c>
 8004ada:	2b01      	cmp	r3, #1
 8004adc:	d00a      	beq.n	8004af4 <OSFlagPost+0x60>
 8004ade:	e011      	b.n	8004b04 <OSFlagPost+0x70>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= (OS_FLAGS)~flags;  /* Clear the flags specified in the group         */
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	891a      	ldrh	r2, [r3, #8]
 8004ae4:	897b      	ldrh	r3, [r7, #10]
 8004ae6:	43db      	mvns	r3, r3
 8004ae8:	b29b      	uxth	r3, r3
 8004aea:	4013      	ands	r3, r2
 8004aec:	b29a      	uxth	r2, r3
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	811a      	strh	r2, [r3, #8]
             break;
 8004af2:	e00f      	b.n	8004b14 <OSFlagPost+0x80>

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	891a      	ldrh	r2, [r3, #8]
 8004af8:	897b      	ldrh	r3, [r7, #10]
 8004afa:	4313      	orrs	r3, r2
 8004afc:	b29a      	uxth	r2, r3
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	811a      	strh	r2, [r3, #8]
             break;
 8004b02:	e007      	b.n	8004b14 <OSFlagPost+0x80>

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
 8004b04:	69f8      	ldr	r0, [r7, #28]
 8004b06:	f7fb fb7c 	bl	8000202 <OS_CPU_SR_Restore>
             *perr = OS_ERR_FLAG_INVALID_OPT;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2271      	movs	r2, #113	@ 0x71
 8004b0e:	701a      	strb	r2, [r3, #0]
             OS_TRACE_FLAG_POST_EXIT(*perr);
             return ((OS_FLAGS)0);
 8004b10:	2300      	movs	r3, #0
 8004b12:	e0aa      	b.n	8004c6a <OSFlagPost+0x1d6>
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
 8004b14:	2300      	movs	r3, #0
 8004b16:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	627b      	str	r3, [r7, #36]	@ 0x24
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
 8004b20:	e088      	b.n	8004c34 <OSFlagPost+0x1a0>
        switch (pnode->OSFlagNodeWaitType) {
 8004b22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b24:	7c9b      	ldrb	r3, [r3, #18]
 8004b26:	2b03      	cmp	r3, #3
 8004b28:	d872      	bhi.n	8004c10 <OSFlagPost+0x17c>
 8004b2a:	a201      	add	r2, pc, #4	@ (adr r2, 8004b30 <OSFlagPost+0x9c>)
 8004b2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b30:	08004ba5 	.word	0x08004ba5
 8004b34:	08004bdd 	.word	0x08004bdd
 8004b38:	08004b41 	.word	0x08004b41
 8004b3c:	08004b75 	.word	0x08004b75
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	891a      	ldrh	r2, [r3, #8]
 8004b44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b46:	8a1b      	ldrh	r3, [r3, #16]
 8004b48:	4013      	ands	r3, r2
 8004b4a:	833b      	strh	r3, [r7, #24]
                 if (flags_rdy == pnode->OSFlagNodeFlags) {   /* Make task RTR, event(s) Rx'd          */
 8004b4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b4e:	8a1b      	ldrh	r3, [r3, #16]
 8004b50:	8b3a      	ldrh	r2, [r7, #24]
 8004b52:	429a      	cmp	r2, r3
 8004b54:	d164      	bne.n	8004c20 <OSFlagPost+0x18c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy, OS_STAT_PEND_OK);
 8004b56:	8b3b      	ldrh	r3, [r7, #24]
 8004b58:	2200      	movs	r2, #0
 8004b5a:	4619      	mov	r1, r3
 8004b5c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004b5e:	f000 f93f 	bl	8004de0 <OS_FlagTaskRdy>
 8004b62:	4603      	mov	r3, r0
 8004b64:	75fb      	strb	r3, [r7, #23]
                     if (rdy == OS_TRUE) {
 8004b66:	7dfb      	ldrb	r3, [r7, #23]
 8004b68:	2b01      	cmp	r3, #1
 8004b6a:	d159      	bne.n	8004c20 <OSFlagPost+0x18c>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
                     }
                 }
                 break;
 8004b72:	e055      	b.n	8004c20 <OSFlagPost+0x18c>

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	891a      	ldrh	r2, [r3, #8]
 8004b78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b7a:	8a1b      	ldrh	r3, [r3, #16]
 8004b7c:	4013      	ands	r3, r2
 8004b7e:	833b      	strh	r3, [r7, #24]
                 if (flags_rdy != (OS_FLAGS)0) {              /* Make task RTR, event(s) Rx'd          */
 8004b80:	8b3b      	ldrh	r3, [r7, #24]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d04e      	beq.n	8004c24 <OSFlagPost+0x190>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy, OS_STAT_PEND_OK);
 8004b86:	8b3b      	ldrh	r3, [r7, #24]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	4619      	mov	r1, r3
 8004b8c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004b8e:	f000 f927 	bl	8004de0 <OS_FlagTaskRdy>
 8004b92:	4603      	mov	r3, r0
 8004b94:	75fb      	strb	r3, [r7, #23]
                     if (rdy == OS_TRUE) {
 8004b96:	7dfb      	ldrb	r3, [r7, #23]
 8004b98:	2b01      	cmp	r3, #1
 8004b9a:	d143      	bne.n	8004c24 <OSFlagPost+0x190>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
                     }
                 }
                 break;
 8004ba2:	e03f      	b.n	8004c24 <OSFlagPost+0x190>

#if OS_FLAG_WAIT_CLR_EN > 0u
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	891b      	ldrh	r3, [r3, #8]
 8004ba8:	43db      	mvns	r3, r3
 8004baa:	b29a      	uxth	r2, r3
 8004bac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bae:	8a1b      	ldrh	r3, [r3, #16]
 8004bb0:	4013      	ands	r3, r2
 8004bb2:	833b      	strh	r3, [r7, #24]
                 if (flags_rdy == pnode->OSFlagNodeFlags) {   /* Make task RTR, event(s) Rx'd          */
 8004bb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bb6:	8a1b      	ldrh	r3, [r3, #16]
 8004bb8:	8b3a      	ldrh	r2, [r7, #24]
 8004bba:	429a      	cmp	r2, r3
 8004bbc:	d134      	bne.n	8004c28 <OSFlagPost+0x194>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy, OS_STAT_PEND_OK);
 8004bbe:	8b3b      	ldrh	r3, [r7, #24]
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	4619      	mov	r1, r3
 8004bc4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004bc6:	f000 f90b 	bl	8004de0 <OS_FlagTaskRdy>
 8004bca:	4603      	mov	r3, r0
 8004bcc:	75fb      	strb	r3, [r7, #23]
                     if (rdy == OS_TRUE) {
 8004bce:	7dfb      	ldrb	r3, [r7, #23]
 8004bd0:	2b01      	cmp	r3, #1
 8004bd2:	d129      	bne.n	8004c28 <OSFlagPost+0x194>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
                     }
                 }
                 break;
 8004bda:	e025      	b.n	8004c28 <OSFlagPost+0x194>

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	891b      	ldrh	r3, [r3, #8]
 8004be0:	43db      	mvns	r3, r3
 8004be2:	b29a      	uxth	r2, r3
 8004be4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004be6:	8a1b      	ldrh	r3, [r3, #16]
 8004be8:	4013      	ands	r3, r2
 8004bea:	833b      	strh	r3, [r7, #24]
                 if (flags_rdy != (OS_FLAGS)0) {              /* Make task RTR, event(s) Rx'd          */
 8004bec:	8b3b      	ldrh	r3, [r7, #24]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d01c      	beq.n	8004c2c <OSFlagPost+0x198>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy, OS_STAT_PEND_OK);
 8004bf2:	8b3b      	ldrh	r3, [r7, #24]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	4619      	mov	r1, r3
 8004bf8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004bfa:	f000 f8f1 	bl	8004de0 <OS_FlagTaskRdy>
 8004bfe:	4603      	mov	r3, r0
 8004c00:	75fb      	strb	r3, [r7, #23]
                     if (rdy == OS_TRUE) {
 8004c02:	7dfb      	ldrb	r3, [r7, #23]
 8004c04:	2b01      	cmp	r3, #1
 8004c06:	d111      	bne.n	8004c2c <OSFlagPost+0x198>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
 8004c08:	2301      	movs	r3, #1
 8004c0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
                     }
                 }
                 break;
 8004c0e:	e00d      	b.n	8004c2c <OSFlagPost+0x198>
#endif
            default:
                 OS_EXIT_CRITICAL();
 8004c10:	69f8      	ldr	r0, [r7, #28]
 8004c12:	f7fb faf6 	bl	8000202 <OS_CPU_SR_Restore>
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	226f      	movs	r2, #111	@ 0x6f
 8004c1a:	701a      	strb	r2, [r3, #0]
                 OS_TRACE_FLAG_POST_EXIT(*perr);
                 return ((OS_FLAGS)0);
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	e024      	b.n	8004c6a <OSFlagPost+0x1d6>
                 break;
 8004c20:	bf00      	nop
 8004c22:	e004      	b.n	8004c2e <OSFlagPost+0x19a>
                 break;
 8004c24:	bf00      	nop
 8004c26:	e002      	b.n	8004c2e <OSFlagPost+0x19a>
                 break;
 8004c28:	bf00      	nop
 8004c2a:	e000      	b.n	8004c2e <OSFlagPost+0x19a>
                 break;
 8004c2c:	bf00      	nop
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
 8004c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	627b      	str	r3, [r7, #36]	@ 0x24
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
 8004c34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	f47f af73 	bne.w	8004b22 <OSFlagPost+0x8e>
    }
    OS_EXIT_CRITICAL();
 8004c3c:	69f8      	ldr	r0, [r7, #28]
 8004c3e:	f7fb fae0 	bl	8000202 <OS_CPU_SR_Restore>
    if (sched == OS_TRUE) {
 8004c42:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004c46:	2b01      	cmp	r3, #1
 8004c48:	d101      	bne.n	8004c4e <OSFlagPost+0x1ba>
        OS_Sched();
 8004c4a:	f7ff fb2f 	bl	80042ac <OS_Sched>
    }
    OS_ENTER_CRITICAL();
 8004c4e:	2040      	movs	r0, #64	@ 0x40
 8004c50:	f7fb fac9 	bl	80001e6 <OS_CPU_SR_Save>
 8004c54:	61f8      	str	r0, [r7, #28]
    flags_cur = pgrp->OSFlagFlags;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	891b      	ldrh	r3, [r3, #8]
 8004c5a:	837b      	strh	r3, [r7, #26]
    OS_EXIT_CRITICAL();
 8004c5c:	69f8      	ldr	r0, [r7, #28]
 8004c5e:	f7fb fad0 	bl	8000202 <OS_CPU_SR_Restore>
    *perr     = OS_ERR_NONE;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2200      	movs	r2, #0
 8004c66:	701a      	strb	r2, [r3, #0]
    OS_TRACE_FLAG_POST_EXIT(*perr);

    return (flags_cur);
 8004c68:	8b7b      	ldrh	r3, [r7, #26]
}
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	3728      	adds	r7, #40	@ 0x28
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd80      	pop	{r7, pc}
 8004c72:	bf00      	nop

08004c74 <OS_FlagBlock>:
static  void  OS_FlagBlock (OS_FLAG_GRP  *pgrp,
                            OS_FLAG_NODE *pnode,
                            OS_FLAGS      flags,
                            INT8U         wait_type,
                            INT32U        timeout)
{
 8004c74:	b480      	push	{r7}
 8004c76:	b087      	sub	sp, #28
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	60f8      	str	r0, [r7, #12]
 8004c7c:	60b9      	str	r1, [r7, #8]
 8004c7e:	4611      	mov	r1, r2
 8004c80:	461a      	mov	r2, r3
 8004c82:	460b      	mov	r3, r1
 8004c84:	80fb      	strh	r3, [r7, #6]
 8004c86:	4613      	mov	r3, r2
 8004c88:	717b      	strb	r3, [r7, #5]
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
 8004c8a:	4b31      	ldr	r3, [pc, #196]	@ (8004d50 <OS_FlagBlock+0xdc>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f893 2038 	ldrb.w	r2, [r3, #56]	@ 0x38
 8004c92:	4b2f      	ldr	r3, [pc, #188]	@ (8004d50 <OS_FlagBlock+0xdc>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f042 0220 	orr.w	r2, r2, #32
 8004c9a:	b2d2      	uxtb	r2, r2
 8004c9c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
 8004ca0:	4b2b      	ldr	r3, [pc, #172]	@ (8004d50 <OS_FlagBlock+0xdc>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
 8004caa:	4b29      	ldr	r3, [pc, #164]	@ (8004d50 <OS_FlagBlock+0xdc>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	6a3a      	ldr	r2, [r7, #32]
 8004cb0:	635a      	str	r2, [r3, #52]	@ 0x34
#if OS_TASK_DEL_EN > 0u
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
 8004cb2:	4b27      	ldr	r3, [pc, #156]	@ (8004d50 <OS_FlagBlock+0xdc>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	68ba      	ldr	r2, [r7, #8]
 8004cb8:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	88fa      	ldrh	r2, [r7, #6]
 8004cbe:	821a      	strh	r2, [r3, #16]
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	797a      	ldrb	r2, [r7, #5]
 8004cc4:	749a      	strb	r2, [r3, #18]
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
 8004cc6:	4b22      	ldr	r3, [pc, #136]	@ (8004d50 <OS_FlagBlock+0xdc>)
 8004cc8:	681a      	ldr	r2, [r3, #0]
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	609a      	str	r2, [r3, #8]
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	685a      	ldr	r2, [r3, #4]
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	601a      	str	r2, [r3, #0]
    pnode->OSFlagNodePrev     = (void *)0;
 8004cd6:	68bb      	ldr	r3, [r7, #8]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	605a      	str	r2, [r3, #4]
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	68fa      	ldr	r2, [r7, #12]
 8004ce0:	60da      	str	r2, [r3, #12]
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	685b      	ldr	r3, [r3, #4]
 8004ce6:	617b      	str	r3, [r7, #20]
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d002      	beq.n	8004cf4 <OS_FlagBlock+0x80>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
 8004cee:	697b      	ldr	r3, [r7, #20]
 8004cf0:	68ba      	ldr	r2, [r7, #8]
 8004cf2:	605a      	str	r2, [r3, #4]
    }
    pgrp->OSFlagWaitList = (void *)pnode;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	68ba      	ldr	r2, [r7, #8]
 8004cf8:	605a      	str	r2, [r3, #4]

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
 8004cfa:	4b15      	ldr	r3, [pc, #84]	@ (8004d50 <OS_FlagBlock+0xdc>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004d02:	74fb      	strb	r3, [r7, #19]
    OSRdyTbl[y] &= (OS_PRIO)~OSTCBCur->OSTCBBitX;
 8004d04:	7cfb      	ldrb	r3, [r7, #19]
 8004d06:	4a13      	ldr	r2, [pc, #76]	@ (8004d54 <OS_FlagBlock+0xe0>)
 8004d08:	5cd1      	ldrb	r1, [r2, r3]
 8004d0a:	4b11      	ldr	r3, [pc, #68]	@ (8004d50 <OS_FlagBlock+0xdc>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d12:	43db      	mvns	r3, r3
 8004d14:	b2da      	uxtb	r2, r3
 8004d16:	7cfb      	ldrb	r3, [r7, #19]
 8004d18:	400a      	ands	r2, r1
 8004d1a:	b2d1      	uxtb	r1, r2
 8004d1c:	4a0d      	ldr	r2, [pc, #52]	@ (8004d54 <OS_FlagBlock+0xe0>)
 8004d1e:	54d1      	strb	r1, [r2, r3]
    OS_TRACE_TASK_SUSPENDED(OSTCBCur);
    if (OSRdyTbl[y] == 0x00u) {
 8004d20:	7cfb      	ldrb	r3, [r7, #19]
 8004d22:	4a0c      	ldr	r2, [pc, #48]	@ (8004d54 <OS_FlagBlock+0xe0>)
 8004d24:	5cd3      	ldrb	r3, [r2, r3]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d10b      	bne.n	8004d42 <OS_FlagBlock+0xce>
        OSRdyGrp &= (OS_PRIO)~OSTCBCur->OSTCBBitY;
 8004d2a:	4b09      	ldr	r3, [pc, #36]	@ (8004d50 <OS_FlagBlock+0xdc>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004d32:	43db      	mvns	r3, r3
 8004d34:	b2da      	uxtb	r2, r3
 8004d36:	4b08      	ldr	r3, [pc, #32]	@ (8004d58 <OS_FlagBlock+0xe4>)
 8004d38:	781b      	ldrb	r3, [r3, #0]
 8004d3a:	4013      	ands	r3, r2
 8004d3c:	b2da      	uxtb	r2, r3
 8004d3e:	4b06      	ldr	r3, [pc, #24]	@ (8004d58 <OS_FlagBlock+0xe4>)
 8004d40:	701a      	strb	r2, [r3, #0]
    }
}
 8004d42:	bf00      	nop
 8004d44:	371c      	adds	r7, #28
 8004d46:	46bd      	mov	sp, r7
 8004d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4c:	4770      	bx	lr
 8004d4e:	bf00      	nop
 8004d50:	20001238 	.word	0x20001238
 8004d54:	20001028 	.word	0x20001028
 8004d58:	20001024 	.word	0x20001024

08004d5c <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b084      	sub	sp, #16
 8004d60:	af00      	add	r7, sp, #0
    INT16U        ix_next;
    OS_FLAG_GRP  *pgrp1;
    OS_FLAG_GRP  *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
 8004d62:	2150      	movs	r1, #80	@ 0x50
 8004d64:	481b      	ldr	r0, [pc, #108]	@ (8004dd4 <OS_FlagInit+0x78>)
 8004d66:	f7ff fa87 	bl	8004278 <OS_MemClr>
    for (ix = 0u; ix < (OS_MAX_FLAGS - 1u); ix++) {                 /* Init. list of free EVENT FLAGS  */
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	81fb      	strh	r3, [r7, #14]
 8004d6e:	e018      	b.n	8004da2 <OS_FlagInit+0x46>
        ix_next = ix + 1u;
 8004d70:	89fb      	ldrh	r3, [r7, #14]
 8004d72:	3301      	adds	r3, #1
 8004d74:	80fb      	strh	r3, [r7, #6]
        pgrp1 = &OSFlagTbl[ix];
 8004d76:	89fb      	ldrh	r3, [r7, #14]
 8004d78:	011b      	lsls	r3, r3, #4
 8004d7a:	4a16      	ldr	r2, [pc, #88]	@ (8004dd4 <OS_FlagInit+0x78>)
 8004d7c:	4413      	add	r3, r2
 8004d7e:	60bb      	str	r3, [r7, #8]
        pgrp2 = &OSFlagTbl[ix_next];
 8004d80:	88fb      	ldrh	r3, [r7, #6]
 8004d82:	011b      	lsls	r3, r3, #4
 8004d84:	4a13      	ldr	r2, [pc, #76]	@ (8004dd4 <OS_FlagInit+0x78>)
 8004d86:	4413      	add	r3, r2
 8004d88:	603b      	str	r3, [r7, #0]
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	701a      	strb	r2, [r3, #0]
        pgrp1->OSFlagWaitList = (void *)pgrp2;
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	683a      	ldr	r2, [r7, #0]
 8004d94:	605a      	str	r2, [r3, #4]
#if OS_FLAG_NAME_EN > 0u
        pgrp1->OSFlagName     = (INT8U *)(void *)"?";               /* Unknown name                    */
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	4a0f      	ldr	r2, [pc, #60]	@ (8004dd8 <OS_FlagInit+0x7c>)
 8004d9a:	60da      	str	r2, [r3, #12]
    for (ix = 0u; ix < (OS_MAX_FLAGS - 1u); ix++) {                 /* Init. list of free EVENT FLAGS  */
 8004d9c:	89fb      	ldrh	r3, [r7, #14]
 8004d9e:	3301      	adds	r3, #1
 8004da0:	81fb      	strh	r3, [r7, #14]
 8004da2:	89fb      	ldrh	r3, [r7, #14]
 8004da4:	2b03      	cmp	r3, #3
 8004da6:	d9e3      	bls.n	8004d70 <OS_FlagInit+0x14>
#endif
    }
    pgrp1                 = &OSFlagTbl[ix];
 8004da8:	89fb      	ldrh	r3, [r7, #14]
 8004daa:	011b      	lsls	r3, r3, #4
 8004dac:	4a09      	ldr	r2, [pc, #36]	@ (8004dd4 <OS_FlagInit+0x78>)
 8004dae:	4413      	add	r3, r2
 8004db0:	60bb      	str	r3, [r7, #8]
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	2200      	movs	r2, #0
 8004db6:	701a      	strb	r2, [r3, #0]
    pgrp1->OSFlagWaitList = (void *)0;
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	605a      	str	r2, [r3, #4]
#if OS_FLAG_NAME_EN > 0u
    pgrp1->OSFlagName     = (INT8U *)(void *)"?";                   /* Unknown name                    */
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	4a05      	ldr	r2, [pc, #20]	@ (8004dd8 <OS_FlagInit+0x7c>)
 8004dc2:	60da      	str	r2, [r3, #12]
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
 8004dc4:	4b05      	ldr	r3, [pc, #20]	@ (8004ddc <OS_FlagInit+0x80>)
 8004dc6:	4a03      	ldr	r2, [pc, #12]	@ (8004dd4 <OS_FlagInit+0x78>)
 8004dc8:	601a      	str	r2, [r3, #0]
#endif
}
 8004dca:	bf00      	nop
 8004dcc:	3710      	adds	r7, #16
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	bd80      	pop	{r7, pc}
 8004dd2:	bf00      	nop
 8004dd4:	20000dbc 	.word	0x20000dbc
 8004dd8:	08005cd0 	.word	0x08005cd0
 8004ddc:	20000e0c 	.word	0x20000e0c

08004de0 <OS_FlagTaskRdy>:
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode,
                                 OS_FLAGS      flags_rdy,
                                 INT8U         pend_stat)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b084      	sub	sp, #16
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
 8004de8:	460b      	mov	r3, r1
 8004dea:	807b      	strh	r3, [r7, #2]
 8004dec:	4613      	mov	r3, r2
 8004dee:	707b      	strb	r3, [r7, #1]
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	689b      	ldr	r3, [r3, #8]
 8004df4:	60bb      	str	r3, [r7, #8]
    ptcb->OSTCBDly       = 0u;
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	635a      	str	r2, [r3, #52]	@ 0x34
    ptcb->OSTCBFlagsRdy  = flags_rdy;
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	887a      	ldrh	r2, [r7, #2]
 8004e00:	861a      	strh	r2, [r3, #48]	@ 0x30
    ptcb->OSTCBStat     &= (INT8U)~(INT8U)OS_STAT_FLAG;
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004e08:	f023 0320 	bic.w	r3, r3, #32
 8004e0c:	b2da      	uxtb	r2, r3
 8004e0e:	68bb      	ldr	r3, [r7, #8]
 8004e10:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    ptcb->OSTCBStatPend  = pend_stat;
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	787a      	ldrb	r2, [r7, #1]
 8004e18:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d11b      	bne.n	8004e5e <OS_FlagTaskRdy+0x7e>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
 8004e26:	68bb      	ldr	r3, [r7, #8]
 8004e28:	f893 203e 	ldrb.w	r2, [r3, #62]	@ 0x3e
 8004e2c:	4b11      	ldr	r3, [pc, #68]	@ (8004e74 <OS_FlagTaskRdy+0x94>)
 8004e2e:	781b      	ldrb	r3, [r3, #0]
 8004e30:	4313      	orrs	r3, r2
 8004e32:	b2da      	uxtb	r2, r3
 8004e34:	4b0f      	ldr	r3, [pc, #60]	@ (8004e74 <OS_FlagTaskRdy+0x94>)
 8004e36:	701a      	strb	r2, [r3, #0]
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004e3e:	461a      	mov	r2, r3
 8004e40:	4b0d      	ldr	r3, [pc, #52]	@ (8004e78 <OS_FlagTaskRdy+0x98>)
 8004e42:	5c9a      	ldrb	r2, [r3, r2]
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e4a:	68b9      	ldr	r1, [r7, #8]
 8004e4c:	f891 103c 	ldrb.w	r1, [r1, #60]	@ 0x3c
 8004e50:	4313      	orrs	r3, r2
 8004e52:	b2da      	uxtb	r2, r3
 8004e54:	4b08      	ldr	r3, [pc, #32]	@ (8004e78 <OS_FlagTaskRdy+0x98>)
 8004e56:	545a      	strb	r2, [r3, r1]
        OS_TRACE_TASK_READY(ptcb);
        sched                   = OS_TRUE;
 8004e58:	2301      	movs	r3, #1
 8004e5a:	73fb      	strb	r3, [r7, #15]
 8004e5c:	e001      	b.n	8004e62 <OS_FlagTaskRdy+0x82>
    } else {
        sched                   = OS_FALSE;
 8004e5e:	2300      	movs	r3, #0
 8004e60:	73fb      	strb	r3, [r7, #15]
    }
    OS_FlagUnlink(pnode);
 8004e62:	6878      	ldr	r0, [r7, #4]
 8004e64:	f000 f80a 	bl	8004e7c <OS_FlagUnlink>
    return (sched);
 8004e68:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	3710      	adds	r7, #16
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bd80      	pop	{r7, pc}
 8004e72:	bf00      	nop
 8004e74:	20001024 	.word	0x20001024
 8004e78:	20001028 	.word	0x20001028

08004e7c <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b087      	sub	sp, #28
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	617b      	str	r3, [r7, #20]
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	613b      	str	r3, [r7, #16]
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
 8004e90:	697b      	ldr	r3, [r7, #20]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d10c      	bne.n	8004eb0 <OS_FlagUnlink+0x34>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	68db      	ldr	r3, [r3, #12]
 8004e9a:	60fb      	str	r3, [r7, #12]
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	693a      	ldr	r2, [r7, #16]
 8004ea0:	605a      	str	r2, [r3, #4]
        if (pnode_next != (OS_FLAG_NODE *)0) {
 8004ea2:	693b      	ldr	r3, [r7, #16]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d00c      	beq.n	8004ec2 <OS_FlagUnlink+0x46>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
 8004ea8:	693b      	ldr	r3, [r7, #16]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	605a      	str	r2, [r3, #4]
 8004eae:	e008      	b.n	8004ec2 <OS_FlagUnlink+0x46>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
 8004eb0:	697b      	ldr	r3, [r7, #20]
 8004eb2:	693a      	ldr	r2, [r7, #16]
 8004eb4:	601a      	str	r2, [r3, #0]
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
 8004eb6:	693b      	ldr	r3, [r7, #16]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d002      	beq.n	8004ec2 <OS_FlagUnlink+0x46>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
 8004ebc:	693b      	ldr	r3, [r7, #16]
 8004ebe:	697a      	ldr	r2, [r7, #20]
 8004ec0:	605a      	str	r2, [r3, #4]
        }
    }
#if OS_TASK_DEL_EN > 0u
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	689b      	ldr	r3, [r3, #8]
 8004ec6:	60bb      	str	r3, [r7, #8]
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
}
 8004ece:	bf00      	nop
 8004ed0:	371c      	adds	r7, #28
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed8:	4770      	bx	lr
	...

08004edc <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b082      	sub	sp, #8
 8004ee0:	af00      	add	r7, sp, #0
#if OS_MAX_MEM_PART >= 2u
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
 8004ee2:	2178      	movs	r1, #120	@ 0x78
 8004ee4:	481a      	ldr	r0, [pc, #104]	@ (8004f50 <OS_MemInit+0x74>)
 8004ee6:	f7ff f9c7 	bl	8004278 <OS_MemClr>
    for (i = 0u; i < (OS_MAX_MEM_PART - 1u); i++) {       /* Init. list of free memory partitions      */
 8004eea:	2300      	movs	r3, #0
 8004eec:	80fb      	strh	r3, [r7, #6]
 8004eee:	e017      	b.n	8004f20 <OS_MemInit+0x44>
        pmem                = &OSMemTbl[i];               /* Point to memory control block (MCB)       */
 8004ef0:	88fa      	ldrh	r2, [r7, #6]
 8004ef2:	4613      	mov	r3, r2
 8004ef4:	005b      	lsls	r3, r3, #1
 8004ef6:	4413      	add	r3, r2
 8004ef8:	00db      	lsls	r3, r3, #3
 8004efa:	4a15      	ldr	r2, [pc, #84]	@ (8004f50 <OS_MemInit+0x74>)
 8004efc:	4413      	add	r3, r2
 8004efe:	603b      	str	r3, [r7, #0]
        pmem->OSMemFreeList = (void *)&OSMemTbl[i + 1u];  /* Chain list of free partitions             */
 8004f00:	88fb      	ldrh	r3, [r7, #6]
 8004f02:	1c5a      	adds	r2, r3, #1
 8004f04:	4613      	mov	r3, r2
 8004f06:	005b      	lsls	r3, r3, #1
 8004f08:	4413      	add	r3, r2
 8004f0a:	00db      	lsls	r3, r3, #3
 8004f0c:	4a10      	ldr	r2, [pc, #64]	@ (8004f50 <OS_MemInit+0x74>)
 8004f0e:	441a      	add	r2, r3
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	605a      	str	r2, [r3, #4]
#if OS_MEM_NAME_EN > 0u
        pmem->OSMemName  = (INT8U *)(void *)"?";
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	4a0f      	ldr	r2, [pc, #60]	@ (8004f54 <OS_MemInit+0x78>)
 8004f18:	615a      	str	r2, [r3, #20]
    for (i = 0u; i < (OS_MAX_MEM_PART - 1u); i++) {       /* Init. list of free memory partitions      */
 8004f1a:	88fb      	ldrh	r3, [r7, #6]
 8004f1c:	3301      	adds	r3, #1
 8004f1e:	80fb      	strh	r3, [r7, #6]
 8004f20:	88fb      	ldrh	r3, [r7, #6]
 8004f22:	2b03      	cmp	r3, #3
 8004f24:	d9e4      	bls.n	8004ef0 <OS_MemInit+0x14>
#endif
    }
    pmem                = &OSMemTbl[i];
 8004f26:	88fa      	ldrh	r2, [r7, #6]
 8004f28:	4613      	mov	r3, r2
 8004f2a:	005b      	lsls	r3, r3, #1
 8004f2c:	4413      	add	r3, r2
 8004f2e:	00db      	lsls	r3, r3, #3
 8004f30:	4a07      	ldr	r2, [pc, #28]	@ (8004f50 <OS_MemInit+0x74>)
 8004f32:	4413      	add	r3, r2
 8004f34:	603b      	str	r3, [r7, #0]
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	2200      	movs	r2, #0
 8004f3a:	605a      	str	r2, [r3, #4]
#if OS_MEM_NAME_EN > 0u
    pmem->OSMemName = (INT8U *)(void *)"?";
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	4a05      	ldr	r2, [pc, #20]	@ (8004f54 <OS_MemInit+0x78>)
 8004f40:	615a      	str	r2, [r3, #20]
#endif

    OSMemFreeList   = &OSMemTbl[0];                       /* Point to beginning of free list           */
 8004f42:	4b05      	ldr	r3, [pc, #20]	@ (8004f58 <OS_MemInit+0x7c>)
 8004f44:	4a02      	ldr	r2, [pc, #8]	@ (8004f50 <OS_MemInit+0x74>)
 8004f46:	601a      	str	r2, [r3, #0]
#endif
}
 8004f48:	bf00      	nop
 8004f4a:	3708      	adds	r7, #8
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bd80      	pop	{r7, pc}
 8004f50:	20001b38 	.word	0x20001b38
 8004f54:	08005cd4 	.word	0x08005cd4
 8004f58:	20001b34 	.word	0x20001b34

08004f5c <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b084      	sub	sp, #16
 8004f60:	af00      	add	r7, sp, #0
    OS_Q    *pq1;
    OS_Q    *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
 8004f62:	2160      	movs	r1, #96	@ 0x60
 8004f64:	4819      	ldr	r0, [pc, #100]	@ (8004fcc <OS_QInit+0x70>)
 8004f66:	f7ff f987 	bl	8004278 <OS_MemClr>
    for (ix = 0u; ix < (OS_MAX_QS - 1u); ix++) {     /* Init. list of free QUEUE control blocks        */
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	81fb      	strh	r3, [r7, #14]
 8004f6e:	e018      	b.n	8004fa2 <OS_QInit+0x46>
        ix_next = ix + 1u;
 8004f70:	89fb      	ldrh	r3, [r7, #14]
 8004f72:	3301      	adds	r3, #1
 8004f74:	80fb      	strh	r3, [r7, #6]
        pq1 = &OSQTbl[ix];
 8004f76:	89fa      	ldrh	r2, [r7, #14]
 8004f78:	4613      	mov	r3, r2
 8004f7a:	005b      	lsls	r3, r3, #1
 8004f7c:	4413      	add	r3, r2
 8004f7e:	00db      	lsls	r3, r3, #3
 8004f80:	4a12      	ldr	r2, [pc, #72]	@ (8004fcc <OS_QInit+0x70>)
 8004f82:	4413      	add	r3, r2
 8004f84:	60bb      	str	r3, [r7, #8]
        pq2 = &OSQTbl[ix_next];
 8004f86:	88fa      	ldrh	r2, [r7, #6]
 8004f88:	4613      	mov	r3, r2
 8004f8a:	005b      	lsls	r3, r3, #1
 8004f8c:	4413      	add	r3, r2
 8004f8e:	00db      	lsls	r3, r3, #3
 8004f90:	4a0e      	ldr	r2, [pc, #56]	@ (8004fcc <OS_QInit+0x70>)
 8004f92:	4413      	add	r3, r2
 8004f94:	603b      	str	r3, [r7, #0]
        pq1->OSQPtr = pq2;
 8004f96:	68bb      	ldr	r3, [r7, #8]
 8004f98:	683a      	ldr	r2, [r7, #0]
 8004f9a:	601a      	str	r2, [r3, #0]
    for (ix = 0u; ix < (OS_MAX_QS - 1u); ix++) {     /* Init. list of free QUEUE control blocks        */
 8004f9c:	89fb      	ldrh	r3, [r7, #14]
 8004f9e:	3301      	adds	r3, #1
 8004fa0:	81fb      	strh	r3, [r7, #14]
 8004fa2:	89fb      	ldrh	r3, [r7, #14]
 8004fa4:	2b02      	cmp	r3, #2
 8004fa6:	d9e3      	bls.n	8004f70 <OS_QInit+0x14>
    }
    pq1         = &OSQTbl[ix];
 8004fa8:	89fa      	ldrh	r2, [r7, #14]
 8004faa:	4613      	mov	r3, r2
 8004fac:	005b      	lsls	r3, r3, #1
 8004fae:	4413      	add	r3, r2
 8004fb0:	00db      	lsls	r3, r3, #3
 8004fb2:	4a06      	ldr	r2, [pc, #24]	@ (8004fcc <OS_QInit+0x70>)
 8004fb4:	4413      	add	r3, r2
 8004fb6:	60bb      	str	r3, [r7, #8]
    pq1->OSQPtr = (OS_Q *)0;
 8004fb8:	68bb      	ldr	r3, [r7, #8]
 8004fba:	2200      	movs	r2, #0
 8004fbc:	601a      	str	r2, [r3, #0]
    OSQFreeList = &OSQTbl[0];
 8004fbe:	4b04      	ldr	r3, [pc, #16]	@ (8004fd0 <OS_QInit+0x74>)
 8004fc0:	4a02      	ldr	r2, [pc, #8]	@ (8004fcc <OS_QInit+0x70>)
 8004fc2:	601a      	str	r2, [r3, #0]
#endif
}
 8004fc4:	bf00      	nop
 8004fc6:	3710      	adds	r7, #16
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	bd80      	pop	{r7, pc}
 8004fcc:	20001bb4 	.word	0x20001bb4
 8004fd0:	20001bb0 	.word	0x20001bb0

08004fd4 <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b084      	sub	sp, #16
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	4603      	mov	r3, r0
 8004fdc:	80fb      	strh	r3, [r7, #6]
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0u;
 8004fde:	2300      	movs	r3, #0
 8004fe0:	60fb      	str	r3, [r7, #12]
        OS_SAFETY_CRITICAL_EXCEPTION();
        return ((OS_EVENT *)0);
    }
#endif

    if (OSIntNesting > 0u) {                               /* See if called from ISR ...               */
 8004fe2:	4b18      	ldr	r3, [pc, #96]	@ (8005044 <OSSemCreate+0x70>)
 8004fe4:	781b      	ldrb	r3, [r3, #0]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d001      	beq.n	8004fee <OSSemCreate+0x1a>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
 8004fea:	2300      	movs	r3, #0
 8004fec:	e025      	b.n	800503a <OSSemCreate+0x66>
    }
    OS_ENTER_CRITICAL();
 8004fee:	2040      	movs	r0, #64	@ 0x40
 8004ff0:	f7fb f8f9 	bl	80001e6 <OS_CPU_SR_Save>
 8004ff4:	60f8      	str	r0, [r7, #12]
    pevent = OSEventFreeList;                              /* Get next free event control block        */
 8004ff6:	4b14      	ldr	r3, [pc, #80]	@ (8005048 <OSSemCreate+0x74>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	60bb      	str	r3, [r7, #8]
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
 8004ffc:	4b12      	ldr	r3, [pc, #72]	@ (8005048 <OSSemCreate+0x74>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d004      	beq.n	800500e <OSSemCreate+0x3a>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
 8005004:	4b10      	ldr	r3, [pc, #64]	@ (8005048 <OSSemCreate+0x74>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	685b      	ldr	r3, [r3, #4]
 800500a:	4a0f      	ldr	r2, [pc, #60]	@ (8005048 <OSSemCreate+0x74>)
 800500c:	6013      	str	r3, [r2, #0]
    }
    OS_EXIT_CRITICAL();
 800500e:	68f8      	ldr	r0, [r7, #12]
 8005010:	f7fb f8f7 	bl	8000202 <OS_CPU_SR_Restore>
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d00e      	beq.n	8005038 <OSSemCreate+0x64>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	2203      	movs	r2, #3
 800501e:	701a      	strb	r2, [r3, #0]
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	88fa      	ldrh	r2, [r7, #6]
 8005024:	811a      	strh	r2, [r3, #8]
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
 8005026:	68bb      	ldr	r3, [r7, #8]
 8005028:	2200      	movs	r2, #0
 800502a:	605a      	str	r2, [r3, #4]
#if OS_EVENT_NAME_EN > 0u
        pevent->OSEventName    = (INT8U *)(void *)"?";
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	4a07      	ldr	r2, [pc, #28]	@ (800504c <OSSemCreate+0x78>)
 8005030:	615a      	str	r2, [r3, #20]
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
 8005032:	68b8      	ldr	r0, [r7, #8]
 8005034:	f7fe ffaf 	bl	8003f96 <OS_EventWaitListInit>

        OS_TRACE_SEM_CREATE(pevent, pevent->OSEventName);
    }
    return (pevent);
 8005038:	68bb      	ldr	r3, [r7, #8]
}
 800503a:	4618      	mov	r0, r3
 800503c:	3710      	adds	r7, #16
 800503e:	46bd      	mov	sp, r7
 8005040:	bd80      	pop	{r7, pc}
 8005042:	bf00      	nop
 8005044:	20001020 	.word	0x20001020
 8005048:	20000cc8 	.word	0x20000cc8
 800504c:	08005cd8 	.word	0x08005cd8

08005050 <OSSemPend>:
*/

void  OSSemPend (OS_EVENT  *pevent,
                 INT32U     timeout,
                 INT8U     *perr)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b086      	sub	sp, #24
 8005054:	af00      	add	r7, sp, #0
 8005056:	60f8      	str	r0, [r7, #12]
 8005058:	60b9      	str	r1, [r7, #8]
 800505a:	607a      	str	r2, [r7, #4]
#if OS_CRITICAL_METHOD == 3u                          /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0u;
 800505c:	2300      	movs	r3, #0
 800505e:	617b      	str	r3, [r7, #20]
        return;
    }
#endif

#if OS_ARG_CHK_EN > 0u
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d103      	bne.n	800506e <OSSemPend+0x1e>
        *perr = OS_ERR_PEVENT_NULL;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2204      	movs	r2, #4
 800506a:	701a      	strb	r2, [r3, #0]
        return;
 800506c:	e080      	b.n	8005170 <OSSemPend+0x120>
    }
#endif

    OS_TRACE_SEM_PEND_ENTER(pevent, timeout);

    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	781b      	ldrb	r3, [r3, #0]
 8005072:	2b03      	cmp	r3, #3
 8005074:	d003      	beq.n	800507e <OSSemPend+0x2e>
        *perr = OS_ERR_EVENT_TYPE;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2201      	movs	r2, #1
 800507a:	701a      	strb	r2, [r3, #0]
        OS_TRACE_SEM_PEND_EXIT(*perr);
        return;
 800507c:	e078      	b.n	8005170 <OSSemPend+0x120>
    }
    if (OSIntNesting > 0u) {                          /* See if called from ISR ...                    */
 800507e:	4b3e      	ldr	r3, [pc, #248]	@ (8005178 <OSSemPend+0x128>)
 8005080:	781b      	ldrb	r3, [r3, #0]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d003      	beq.n	800508e <OSSemPend+0x3e>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2202      	movs	r2, #2
 800508a:	701a      	strb	r2, [r3, #0]
        OS_TRACE_SEM_PEND_EXIT(*perr);
        return;
 800508c:	e070      	b.n	8005170 <OSSemPend+0x120>
    }
    if (OSLockNesting > 0u) {                         /* See if called with scheduler locked ...       */
 800508e:	4b3b      	ldr	r3, [pc, #236]	@ (800517c <OSSemPend+0x12c>)
 8005090:	781b      	ldrb	r3, [r3, #0]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d003      	beq.n	800509e <OSSemPend+0x4e>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	220d      	movs	r2, #13
 800509a:	701a      	strb	r2, [r3, #0]
        OS_TRACE_SEM_PEND_EXIT(*perr);
        return;
 800509c:	e068      	b.n	8005170 <OSSemPend+0x120>
    }
    OS_ENTER_CRITICAL();
 800509e:	2040      	movs	r0, #64	@ 0x40
 80050a0:	f7fb f8a1 	bl	80001e6 <OS_CPU_SR_Save>
 80050a4:	6178      	str	r0, [r7, #20]
    if (pevent->OSEventCnt > 0u) {                    /* If sem. is positive, resource available ...   */
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	891b      	ldrh	r3, [r3, #8]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d00c      	beq.n	80050c8 <OSSemPend+0x78>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	891b      	ldrh	r3, [r3, #8]
 80050b2:	3b01      	subs	r3, #1
 80050b4:	b29a      	uxth	r2, r3
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	811a      	strh	r2, [r3, #8]
        OS_EXIT_CRITICAL();
 80050ba:	6978      	ldr	r0, [r7, #20]
 80050bc:	f7fb f8a1 	bl	8000202 <OS_CPU_SR_Restore>
        *perr = OS_ERR_NONE;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2200      	movs	r2, #0
 80050c4:	701a      	strb	r2, [r3, #0]
        OS_TRACE_SEM_PEND_EXIT(*perr);
        return;
 80050c6:	e053      	b.n	8005170 <OSSemPend+0x120>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
 80050c8:	4b2d      	ldr	r3, [pc, #180]	@ (8005180 <OSSemPend+0x130>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f893 2038 	ldrb.w	r2, [r3, #56]	@ 0x38
 80050d0:	4b2b      	ldr	r3, [pc, #172]	@ (8005180 <OSSemPend+0x130>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f042 0201 	orr.w	r2, r2, #1
 80050d8:	b2d2      	uxtb	r2, r2
 80050da:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 80050de:	4b28      	ldr	r3, [pc, #160]	@ (8005180 <OSSemPend+0x130>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	2200      	movs	r2, #0
 80050e4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
 80050e8:	4b25      	ldr	r3, [pc, #148]	@ (8005180 <OSSemPend+0x130>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	68ba      	ldr	r2, [r7, #8]
 80050ee:	635a      	str	r2, [r3, #52]	@ 0x34
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
 80050f0:	68f8      	ldr	r0, [r7, #12]
 80050f2:	f7fe fe81 	bl	8003df8 <OS_EventTaskWait>
    OS_EXIT_CRITICAL();
 80050f6:	6978      	ldr	r0, [r7, #20]
 80050f8:	f7fb f883 	bl	8000202 <OS_CPU_SR_Restore>
    OS_Sched();                                       /* Find next highest priority task ready         */
 80050fc:	f7ff f8d6 	bl	80042ac <OS_Sched>
    OS_ENTER_CRITICAL();
 8005100:	2040      	movs	r0, #64	@ 0x40
 8005102:	f7fb f870 	bl	80001e6 <OS_CPU_SR_Save>
 8005106:	6178      	str	r0, [r7, #20]
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
 8005108:	4b1d      	ldr	r3, [pc, #116]	@ (8005180 <OSSemPend+0x130>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8005110:	2b00      	cmp	r3, #0
 8005112:	d002      	beq.n	800511a <OSSemPend+0xca>
 8005114:	2b02      	cmp	r3, #2
 8005116:	d004      	beq.n	8005122 <OSSemPend+0xd2>
 8005118:	e007      	b.n	800512a <OSSemPend+0xda>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2200      	movs	r2, #0
 800511e:	701a      	strb	r2, [r3, #0]
             break;
 8005120:	e00d      	b.n	800513e <OSSemPend+0xee>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	220e      	movs	r2, #14
 8005126:	701a      	strb	r2, [r3, #0]
             break;
 8005128:	e009      	b.n	800513e <OSSemPend+0xee>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
 800512a:	4b15      	ldr	r3, [pc, #84]	@ (8005180 <OSSemPend+0x130>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	68f9      	ldr	r1, [r7, #12]
 8005130:	4618      	mov	r0, r3
 8005132:	f7fe feb9 	bl	8003ea8 <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	220a      	movs	r2, #10
 800513a:	701a      	strb	r2, [r3, #0]
             break;
 800513c:	bf00      	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
 800513e:	4b10      	ldr	r3, [pc, #64]	@ (8005180 <OSSemPend+0x130>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	2200      	movs	r2, #0
 8005144:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
 8005148:	4b0d      	ldr	r3, [pc, #52]	@ (8005180 <OSSemPend+0x130>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	2200      	movs	r2, #0
 800514e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
 8005152:	4b0b      	ldr	r3, [pc, #44]	@ (8005180 <OSSemPend+0x130>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	2200      	movs	r2, #0
 8005158:	61da      	str	r2, [r3, #28]
#if (OS_EVENT_MULTI_EN > 0u)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
 800515a:	4b09      	ldr	r3, [pc, #36]	@ (8005180 <OSSemPend+0x130>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	2200      	movs	r2, #0
 8005160:	621a      	str	r2, [r3, #32]
    OSTCBCur->OSTCBEventMultiRdy = (OS_EVENT  *)0;
 8005162:	4b07      	ldr	r3, [pc, #28]	@ (8005180 <OSSemPend+0x130>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	2200      	movs	r2, #0
 8005168:	625a      	str	r2, [r3, #36]	@ 0x24
#endif
    OS_EXIT_CRITICAL();
 800516a:	6978      	ldr	r0, [r7, #20]
 800516c:	f7fb f849 	bl	8000202 <OS_CPU_SR_Restore>

    OS_TRACE_SEM_PEND_EXIT(*perr);
}
 8005170:	3718      	adds	r7, #24
 8005172:	46bd      	mov	sp, r7
 8005174:	bd80      	pop	{r7, pc}
 8005176:	bf00      	nop
 8005178:	20001020 	.word	0x20001020
 800517c:	20001021 	.word	0x20001021
 8005180:	20001238 	.word	0x20001238

08005184 <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b084      	sub	sp, #16
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
#if OS_CRITICAL_METHOD == 3u                          /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0u;
 800518c:	2300      	movs	r3, #0
 800518e:	60fb      	str	r3, [r7, #12]
#endif


#if OS_ARG_CHK_EN > 0u
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d101      	bne.n	800519a <OSSemPost+0x16>
        return (OS_ERR_PEVENT_NULL);
 8005196:	2304      	movs	r3, #4
 8005198:	e02f      	b.n	80051fa <OSSemPost+0x76>
    }
#endif

    OS_TRACE_SEM_POST_ENTER(pevent);

    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	781b      	ldrb	r3, [r3, #0]
 800519e:	2b03      	cmp	r3, #3
 80051a0:	d001      	beq.n	80051a6 <OSSemPost+0x22>
        OS_TRACE_SEM_POST_EXIT(OS_ERR_EVENT_TYPE);
        return (OS_ERR_EVENT_TYPE);
 80051a2:	2301      	movs	r3, #1
 80051a4:	e029      	b.n	80051fa <OSSemPost+0x76>
    }
    OS_ENTER_CRITICAL();
 80051a6:	2040      	movs	r0, #64	@ 0x40
 80051a8:	f7fb f81d 	bl	80001e6 <OS_CPU_SR_Save>
 80051ac:	60f8      	str	r0, [r7, #12]
    if (pevent->OSEventGrp != 0u) {                   /* See if any task waiting for semaphore         */
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	7a9b      	ldrb	r3, [r3, #10]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d00c      	beq.n	80051d0 <OSSemPost+0x4c>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
 80051b6:	2300      	movs	r3, #0
 80051b8:	2201      	movs	r2, #1
 80051ba:	2100      	movs	r1, #0
 80051bc:	6878      	ldr	r0, [r7, #4]
 80051be:	f7fe fda5 	bl	8003d0c <OS_EventTaskRdy>
        OS_EXIT_CRITICAL();
 80051c2:	68f8      	ldr	r0, [r7, #12]
 80051c4:	f7fb f81d 	bl	8000202 <OS_CPU_SR_Restore>
        OS_Sched();                                   /* Find HPT ready to run                         */
 80051c8:	f7ff f870 	bl	80042ac <OS_Sched>
        OS_TRACE_SEM_POST_EXIT(OS_ERR_NONE);
        return (OS_ERR_NONE);
 80051cc:	2300      	movs	r3, #0
 80051ce:	e014      	b.n	80051fa <OSSemPost+0x76>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	891b      	ldrh	r3, [r3, #8]
 80051d4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80051d8:	4293      	cmp	r3, r2
 80051da:	d00a      	beq.n	80051f2 <OSSemPost+0x6e>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	891b      	ldrh	r3, [r3, #8]
 80051e0:	3301      	adds	r3, #1
 80051e2:	b29a      	uxth	r2, r3
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	811a      	strh	r2, [r3, #8]
        OS_EXIT_CRITICAL();
 80051e8:	68f8      	ldr	r0, [r7, #12]
 80051ea:	f7fb f80a 	bl	8000202 <OS_CPU_SR_Restore>
        OS_TRACE_SEM_POST_EXIT(OS_ERR_NONE);
        return (OS_ERR_NONE);
 80051ee:	2300      	movs	r3, #0
 80051f0:	e003      	b.n	80051fa <OSSemPost+0x76>
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
 80051f2:	68f8      	ldr	r0, [r7, #12]
 80051f4:	f7fb f805 	bl	8000202 <OS_CPU_SR_Restore>
    OS_TRACE_SEM_POST_EXIT(OS_ERR_SEM_OVF);

    return (OS_ERR_SEM_OVF);
 80051f8:	2333      	movs	r3, #51	@ 0x33
}
 80051fa:	4618      	mov	r0, r3
 80051fc:	3710      	adds	r7, #16
 80051fe:	46bd      	mov	sp, r7
 8005200:	bd80      	pop	{r7, pc}
	...

08005204 <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b08c      	sub	sp, #48	@ 0x30
 8005208:	af04      	add	r7, sp, #16
 800520a:	60f8      	str	r0, [r7, #12]
 800520c:	60b9      	str	r1, [r7, #8]
 800520e:	607a      	str	r2, [r7, #4]
 8005210:	70fb      	strb	r3, [r7, #3]
    OS_STK     *psp;
    INT8U       err;
#if OS_CRITICAL_METHOD == 3u                 /* Allocate storage for CPU status register               */
    OS_CPU_SR   cpu_sr = 0u;
 8005212:	2300      	movs	r3, #0
 8005214:	61fb      	str	r3, [r7, #28]
        return (OS_ERR_ILLEGAL_CREATE_RUN_TIME);
    }
#endif

#if OS_ARG_CHK_EN > 0u
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
 8005216:	78fb      	ldrb	r3, [r7, #3]
 8005218:	2b3f      	cmp	r3, #63	@ 0x3f
 800521a:	d901      	bls.n	8005220 <OSTaskCreateExt+0x1c>
        return (OS_ERR_PRIO_INVALID);
 800521c:	232a      	movs	r3, #42	@ 0x2a
 800521e:	e052      	b.n	80052c6 <OSTaskCreateExt+0xc2>
    }
#endif
    OS_ENTER_CRITICAL();
 8005220:	2040      	movs	r0, #64	@ 0x40
 8005222:	f7fa ffe0 	bl	80001e6 <OS_CPU_SR_Save>
 8005226:	61f8      	str	r0, [r7, #28]
    if (OSIntNesting > 0u) {                 /* Make sure we don't create the task from within an ISR  */
 8005228:	4b29      	ldr	r3, [pc, #164]	@ (80052d0 <OSTaskCreateExt+0xcc>)
 800522a:	781b      	ldrb	r3, [r3, #0]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d004      	beq.n	800523a <OSTaskCreateExt+0x36>
        OS_EXIT_CRITICAL();
 8005230:	69f8      	ldr	r0, [r7, #28]
 8005232:	f7fa ffe6 	bl	8000202 <OS_CPU_SR_Restore>
        return (OS_ERR_TASK_CREATE_ISR);
 8005236:	233c      	movs	r3, #60	@ 0x3c
 8005238:	e045      	b.n	80052c6 <OSTaskCreateExt+0xc2>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
 800523a:	78fb      	ldrb	r3, [r7, #3]
 800523c:	4a25      	ldr	r2, [pc, #148]	@ (80052d4 <OSTaskCreateExt+0xd0>)
 800523e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d13b      	bne.n	80052be <OSTaskCreateExt+0xba>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
 8005246:	78fb      	ldrb	r3, [r7, #3]
 8005248:	4a22      	ldr	r2, [pc, #136]	@ (80052d4 <OSTaskCreateExt+0xd0>)
 800524a:	2101      	movs	r1, #1
 800524c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
 8005250:	69f8      	ldr	r0, [r7, #28]
 8005252:	f7fa ffd6 	bl	8000202 <OS_CPU_SR_Restore>

#if (OS_TASK_STAT_STK_CHK_EN > 0u)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
 8005256:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8005258:	461a      	mov	r2, r3
 800525a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800525c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800525e:	f000 fa8f 	bl	8005780 <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
 8005262:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8005264:	687a      	ldr	r2, [r7, #4]
 8005266:	68b9      	ldr	r1, [r7, #8]
 8005268:	68f8      	ldr	r0, [r7, #12]
 800526a:	f7fe f88b 	bl	8003384 <OSTaskStkInit>
 800526e:	61b8      	str	r0, [r7, #24]
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
 8005270:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8005272:	78f8      	ldrb	r0, [r7, #3]
 8005274:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8005276:	9302      	str	r3, [sp, #8]
 8005278:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800527a:	9301      	str	r3, [sp, #4]
 800527c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800527e:	9300      	str	r3, [sp, #0]
 8005280:	4613      	mov	r3, r2
 8005282:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005284:	69b9      	ldr	r1, [r7, #24]
 8005286:	f7ff f93b 	bl	8004500 <OS_TCBInit>
 800528a:	4603      	mov	r3, r0
 800528c:	75fb      	strb	r3, [r7, #23]
        if (err == OS_ERR_NONE) {
 800528e:	7dfb      	ldrb	r3, [r7, #23]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d106      	bne.n	80052a2 <OSTaskCreateExt+0x9e>
            OS_TRACE_TASK_CREATE(OSTCBPrioTbl[prio]);
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
 8005294:	4b10      	ldr	r3, [pc, #64]	@ (80052d8 <OSTaskCreateExt+0xd4>)
 8005296:	781b      	ldrb	r3, [r3, #0]
 8005298:	2b01      	cmp	r3, #1
 800529a:	d10e      	bne.n	80052ba <OSTaskCreateExt+0xb6>
                OS_Sched();
 800529c:	f7ff f806 	bl	80042ac <OS_Sched>
 80052a0:	e00b      	b.n	80052ba <OSTaskCreateExt+0xb6>
            }
        } else {
            OS_ENTER_CRITICAL();
 80052a2:	2040      	movs	r0, #64	@ 0x40
 80052a4:	f7fa ff9f 	bl	80001e6 <OS_CPU_SR_Save>
 80052a8:	61f8      	str	r0, [r7, #28]
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
 80052aa:	78fb      	ldrb	r3, [r7, #3]
 80052ac:	4a09      	ldr	r2, [pc, #36]	@ (80052d4 <OSTaskCreateExt+0xd0>)
 80052ae:	2100      	movs	r1, #0
 80052b0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            OS_EXIT_CRITICAL();
 80052b4:	69f8      	ldr	r0, [r7, #28]
 80052b6:	f7fa ffa4 	bl	8000202 <OS_CPU_SR_Restore>
        }
        return (err);
 80052ba:	7dfb      	ldrb	r3, [r7, #23]
 80052bc:	e003      	b.n	80052c6 <OSTaskCreateExt+0xc2>
    }
    OS_EXIT_CRITICAL();
 80052be:	69f8      	ldr	r0, [r7, #28]
 80052c0:	f7fa ff9f 	bl	8000202 <OS_CPU_SR_Restore>
    return (OS_ERR_PRIO_EXIST);
 80052c4:	2328      	movs	r3, #40	@ 0x28
}
 80052c6:	4618      	mov	r0, r3
 80052c8:	3720      	adds	r7, #32
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}
 80052ce:	bf00      	nop
 80052d0:	20001020 	.word	0x20001020
 80052d4:	20001248 	.word	0x20001248
 80052d8:	20001030 	.word	0x20001030

080052dc <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0u
INT8U  OSTaskDel (INT8U prio)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b086      	sub	sp, #24
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	4603      	mov	r3, r0
 80052e4:	71fb      	strb	r3, [r7, #7]
#if (OS_FLAG_EN > 0u) && (OS_MAX_FLAGS > 0u)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3u                            /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0u;
 80052e6:	2300      	movs	r3, #0
 80052e8:	617b      	str	r3, [r7, #20]
        OS_SAFETY_CRITICAL_EXCEPTION();
        return (OS_ERR_ILLEGAL_DEL_RUN_TIME);
    }
#endif

    if (OSIntNesting > 0u) {                            /* See if trying to delete from ISR            */
 80052ea:	4b6d      	ldr	r3, [pc, #436]	@ (80054a0 <OSTaskDel+0x1c4>)
 80052ec:	781b      	ldrb	r3, [r3, #0]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d001      	beq.n	80052f6 <OSTaskDel+0x1a>
        return (OS_ERR_TASK_DEL_ISR);
 80052f2:	2340      	movs	r3, #64	@ 0x40
 80052f4:	e0d0      	b.n	8005498 <OSTaskDel+0x1bc>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
 80052f6:	79fb      	ldrb	r3, [r7, #7]
 80052f8:	2b3f      	cmp	r3, #63	@ 0x3f
 80052fa:	d101      	bne.n	8005300 <OSTaskDel+0x24>
        return (OS_ERR_TASK_DEL_IDLE);
 80052fc:	233e      	movs	r3, #62	@ 0x3e
 80052fe:	e0cb      	b.n	8005498 <OSTaskDel+0x1bc>
    }
#if OS_ARG_CHK_EN > 0u
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
 8005300:	79fb      	ldrb	r3, [r7, #7]
 8005302:	2b3e      	cmp	r3, #62	@ 0x3e
 8005304:	d904      	bls.n	8005310 <OSTaskDel+0x34>
        if (prio != OS_PRIO_SELF) {
 8005306:	79fb      	ldrb	r3, [r7, #7]
 8005308:	2bff      	cmp	r3, #255	@ 0xff
 800530a:	d001      	beq.n	8005310 <OSTaskDel+0x34>
            return (OS_ERR_PRIO_INVALID);
 800530c:	232a      	movs	r3, #42	@ 0x2a
 800530e:	e0c3      	b.n	8005498 <OSTaskDel+0x1bc>
        }
    }
#endif

    OS_ENTER_CRITICAL();
 8005310:	2040      	movs	r0, #64	@ 0x40
 8005312:	f7fa ff68 	bl	80001e6 <OS_CPU_SR_Save>
 8005316:	6178      	str	r0, [r7, #20]
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
 8005318:	79fb      	ldrb	r3, [r7, #7]
 800531a:	2bff      	cmp	r3, #255	@ 0xff
 800531c:	d104      	bne.n	8005328 <OSTaskDel+0x4c>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
 800531e:	4b61      	ldr	r3, [pc, #388]	@ (80054a4 <OSTaskDel+0x1c8>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8005326:	71fb      	strb	r3, [r7, #7]
    }
    ptcb = OSTCBPrioTbl[prio];
 8005328:	79fb      	ldrb	r3, [r7, #7]
 800532a:	4a5f      	ldr	r2, [pc, #380]	@ (80054a8 <OSTaskDel+0x1cc>)
 800532c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005330:	613b      	str	r3, [r7, #16]
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d104      	bne.n	8005342 <OSTaskDel+0x66>
        OS_EXIT_CRITICAL();
 8005338:	6978      	ldr	r0, [r7, #20]
 800533a:	f7fa ff62 	bl	8000202 <OS_CPU_SR_Restore>
        return (OS_ERR_TASK_NOT_EXIST);
 800533e:	2343      	movs	r3, #67	@ 0x43
 8005340:	e0aa      	b.n	8005498 <OSTaskDel+0x1bc>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
 8005342:	693b      	ldr	r3, [r7, #16]
 8005344:	2b01      	cmp	r3, #1
 8005346:	d104      	bne.n	8005352 <OSTaskDel+0x76>
        OS_EXIT_CRITICAL();
 8005348:	6978      	ldr	r0, [r7, #20]
 800534a:	f7fa ff5a 	bl	8000202 <OS_CPU_SR_Restore>
        return (OS_ERR_TASK_DEL);
 800534e:	233d      	movs	r3, #61	@ 0x3d
 8005350:	e0a2      	b.n	8005498 <OSTaskDel+0x1bc>
    }

    OSRdyTbl[ptcb->OSTCBY] &= (OS_PRIO)~ptcb->OSTCBBitX;
 8005352:	693b      	ldr	r3, [r7, #16]
 8005354:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005358:	461a      	mov	r2, r3
 800535a:	4b54      	ldr	r3, [pc, #336]	@ (80054ac <OSTaskDel+0x1d0>)
 800535c:	5c9a      	ldrb	r2, [r3, r2]
 800535e:	693b      	ldr	r3, [r7, #16]
 8005360:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005364:	43db      	mvns	r3, r3
 8005366:	b2db      	uxtb	r3, r3
 8005368:	6939      	ldr	r1, [r7, #16]
 800536a:	f891 103c 	ldrb.w	r1, [r1, #60]	@ 0x3c
 800536e:	4013      	ands	r3, r2
 8005370:	b2da      	uxtb	r2, r3
 8005372:	4b4e      	ldr	r3, [pc, #312]	@ (80054ac <OSTaskDel+0x1d0>)
 8005374:	545a      	strb	r2, [r3, r1]
    OS_TRACE_TASK_SUSPENDED(ptcb);
    if (OSRdyTbl[ptcb->OSTCBY] == 0u) {                 /* Make task not ready                         */
 8005376:	693b      	ldr	r3, [r7, #16]
 8005378:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800537c:	461a      	mov	r2, r3
 800537e:	4b4b      	ldr	r3, [pc, #300]	@ (80054ac <OSTaskDel+0x1d0>)
 8005380:	5c9b      	ldrb	r3, [r3, r2]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d10a      	bne.n	800539c <OSTaskDel+0xc0>
        OSRdyGrp           &= (OS_PRIO)~ptcb->OSTCBBitY;
 8005386:	693b      	ldr	r3, [r7, #16]
 8005388:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800538c:	43db      	mvns	r3, r3
 800538e:	b2da      	uxtb	r2, r3
 8005390:	4b47      	ldr	r3, [pc, #284]	@ (80054b0 <OSTaskDel+0x1d4>)
 8005392:	781b      	ldrb	r3, [r3, #0]
 8005394:	4013      	ands	r3, r2
 8005396:	b2da      	uxtb	r2, r3
 8005398:	4b45      	ldr	r3, [pc, #276]	@ (80054b0 <OSTaskDel+0x1d4>)
 800539a:	701a      	strb	r2, [r3, #0]
    }

#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
 800539c:	693b      	ldr	r3, [r7, #16]
 800539e:	69db      	ldr	r3, [r3, #28]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d005      	beq.n	80053b0 <OSTaskDel+0xd4>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
 80053a4:	693b      	ldr	r3, [r7, #16]
 80053a6:	69db      	ldr	r3, [r3, #28]
 80053a8:	4619      	mov	r1, r3
 80053aa:	6938      	ldr	r0, [r7, #16]
 80053ac:	f7fe fd7c 	bl	8003ea8 <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0u)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
 80053b0:	693b      	ldr	r3, [r7, #16]
 80053b2:	6a1b      	ldr	r3, [r3, #32]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d005      	beq.n	80053c4 <OSTaskDel+0xe8>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
 80053b8:	693b      	ldr	r3, [r7, #16]
 80053ba:	6a1b      	ldr	r3, [r3, #32]
 80053bc:	4619      	mov	r1, r3
 80053be:	6938      	ldr	r0, [r7, #16]
 80053c0:	f7fe fda5 	bl	8003f0e <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0u) && (OS_MAX_FLAGS > 0u)
    pnode = ptcb->OSTCBFlagNode;
 80053c4:	693b      	ldr	r3, [r7, #16]
 80053c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053c8:	60fb      	str	r3, [r7, #12]
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d002      	beq.n	80053d6 <OSTaskDel+0xfa>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
 80053d0:	68f8      	ldr	r0, [r7, #12]
 80053d2:	f7ff fd53 	bl	8004e7c <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0u;                           /* Prevent OSTimeTick() from updating          */
 80053d6:	693b      	ldr	r3, [r7, #16]
 80053d8:	2200      	movs	r2, #0
 80053da:	635a      	str	r2, [r3, #52]	@ 0x34
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
 80053dc:	693b      	ldr	r3, [r7, #16]
 80053de:	2200      	movs	r2, #0
 80053e0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
 80053e4:	693b      	ldr	r3, [r7, #16]
 80053e6:	2200      	movs	r2, #0
 80053e8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
 80053ec:	4b31      	ldr	r3, [pc, #196]	@ (80054b4 <OSTaskDel+0x1d8>)
 80053ee:	781b      	ldrb	r3, [r3, #0]
 80053f0:	2bff      	cmp	r3, #255	@ 0xff
 80053f2:	d005      	beq.n	8005400 <OSTaskDel+0x124>
        OSLockNesting++;
 80053f4:	4b2f      	ldr	r3, [pc, #188]	@ (80054b4 <OSTaskDel+0x1d8>)
 80053f6:	781b      	ldrb	r3, [r3, #0]
 80053f8:	3301      	adds	r3, #1
 80053fa:	b2da      	uxtb	r2, r3
 80053fc:	4b2d      	ldr	r3, [pc, #180]	@ (80054b4 <OSTaskDel+0x1d8>)
 80053fe:	701a      	strb	r2, [r3, #0]
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
 8005400:	6978      	ldr	r0, [r7, #20]
 8005402:	f7fa fefe 	bl	8000202 <OS_CPU_SR_Restore>
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
 8005406:	f7fe fc79 	bl	8003cfc <OS_Dummy>
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
 800540a:	2040      	movs	r0, #64	@ 0x40
 800540c:	f7fa feeb 	bl	80001e6 <OS_CPU_SR_Save>
 8005410:	6178      	str	r0, [r7, #20]
    if (OSLockNesting > 0u) {                           /* Remove context switch lock                  */
 8005412:	4b28      	ldr	r3, [pc, #160]	@ (80054b4 <OSTaskDel+0x1d8>)
 8005414:	781b      	ldrb	r3, [r3, #0]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d005      	beq.n	8005426 <OSTaskDel+0x14a>
        OSLockNesting--;
 800541a:	4b26      	ldr	r3, [pc, #152]	@ (80054b4 <OSTaskDel+0x1d8>)
 800541c:	781b      	ldrb	r3, [r3, #0]
 800541e:	3b01      	subs	r3, #1
 8005420:	b2da      	uxtb	r2, r3
 8005422:	4b24      	ldr	r3, [pc, #144]	@ (80054b4 <OSTaskDel+0x1d8>)
 8005424:	701a      	strb	r2, [r3, #0]
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
 8005426:	6938      	ldr	r0, [r7, #16]
 8005428:	f7fd ff8a 	bl	8003340 <OSTaskDelHook>
#if defined(OS_TLS_TBL_SIZE) && (OS_TLS_TBL_SIZE > 0u)
    OS_TLS_TaskDel(ptcb);                               /* Call TLS hook                               */
#endif
#endif

    OSTaskCtr--;                                        /* One less task being managed                 */
 800542c:	4b22      	ldr	r3, [pc, #136]	@ (80054b8 <OSTaskDel+0x1dc>)
 800542e:	781b      	ldrb	r3, [r3, #0]
 8005430:	3b01      	subs	r3, #1
 8005432:	b2da      	uxtb	r2, r3
 8005434:	4b20      	ldr	r3, [pc, #128]	@ (80054b8 <OSTaskDel+0x1dc>)
 8005436:	701a      	strb	r2, [r3, #0]
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
 8005438:	79fb      	ldrb	r3, [r7, #7]
 800543a:	4a1b      	ldr	r2, [pc, #108]	@ (80054a8 <OSTaskDel+0x1cc>)
 800543c:	2100      	movs	r1, #0
 800543e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
 8005442:	693b      	ldr	r3, [r7, #16]
 8005444:	699b      	ldr	r3, [r3, #24]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d108      	bne.n	800545c <OSTaskDel+0x180>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
 800544a:	693b      	ldr	r3, [r7, #16]
 800544c:	695b      	ldr	r3, [r3, #20]
 800544e:	2200      	movs	r2, #0
 8005450:	619a      	str	r2, [r3, #24]
        OSTCBList                  = ptcb->OSTCBNext;
 8005452:	693b      	ldr	r3, [r7, #16]
 8005454:	695b      	ldr	r3, [r3, #20]
 8005456:	4a19      	ldr	r2, [pc, #100]	@ (80054bc <OSTaskDel+0x1e0>)
 8005458:	6013      	str	r3, [r2, #0]
 800545a:	e009      	b.n	8005470 <OSTaskDel+0x194>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
 800545c:	693b      	ldr	r3, [r7, #16]
 800545e:	699b      	ldr	r3, [r3, #24]
 8005460:	693a      	ldr	r2, [r7, #16]
 8005462:	6952      	ldr	r2, [r2, #20]
 8005464:	615a      	str	r2, [r3, #20]
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
 8005466:	693b      	ldr	r3, [r7, #16]
 8005468:	695b      	ldr	r3, [r3, #20]
 800546a:	693a      	ldr	r2, [r7, #16]
 800546c:	6992      	ldr	r2, [r2, #24]
 800546e:	619a      	str	r2, [r3, #24]
    }
    ptcb->OSTCBNext     = OSTCBFreeList;                /* Return TCB to free TCB list                 */
 8005470:	4b13      	ldr	r3, [pc, #76]	@ (80054c0 <OSTaskDel+0x1e4>)
 8005472:	681a      	ldr	r2, [r3, #0]
 8005474:	693b      	ldr	r3, [r7, #16]
 8005476:	615a      	str	r2, [r3, #20]
    OSTCBFreeList       = ptcb;
 8005478:	4a11      	ldr	r2, [pc, #68]	@ (80054c0 <OSTaskDel+0x1e4>)
 800547a:	693b      	ldr	r3, [r7, #16]
 800547c:	6013      	str	r3, [r2, #0]
#if OS_TASK_NAME_EN > 0u
    ptcb->OSTCBTaskName = (INT8U *)(void *)"?";
 800547e:	693b      	ldr	r3, [r7, #16]
 8005480:	4a10      	ldr	r2, [pc, #64]	@ (80054c4 <OSTaskDel+0x1e8>)
 8005482:	655a      	str	r2, [r3, #84]	@ 0x54
#endif
    OS_EXIT_CRITICAL();
 8005484:	6978      	ldr	r0, [r7, #20]
 8005486:	f7fa febc 	bl	8000202 <OS_CPU_SR_Restore>
    if (OSRunning == OS_TRUE) {
 800548a:	4b0f      	ldr	r3, [pc, #60]	@ (80054c8 <OSTaskDel+0x1ec>)
 800548c:	781b      	ldrb	r3, [r3, #0]
 800548e:	2b01      	cmp	r3, #1
 8005490:	d101      	bne.n	8005496 <OSTaskDel+0x1ba>
        OS_Sched();                                     /* Find new highest priority task              */
 8005492:	f7fe ff0b 	bl	80042ac <OS_Sched>
    }
    return (OS_ERR_NONE);
 8005496:	2300      	movs	r3, #0
}
 8005498:	4618      	mov	r0, r3
 800549a:	3718      	adds	r7, #24
 800549c:	46bd      	mov	sp, r7
 800549e:	bd80      	pop	{r7, pc}
 80054a0:	20001020 	.word	0x20001020
 80054a4:	20001238 	.word	0x20001238
 80054a8:	20001248 	.word	0x20001248
 80054ac:	20001028 	.word	0x20001028
 80054b0:	20001024 	.word	0x20001024
 80054b4:	20001021 	.word	0x20001021
 80054b8:	20001031 	.word	0x20001031
 80054bc:	20001244 	.word	0x20001244
 80054c0:	2000123c 	.word	0x2000123c
 80054c4:	08005cdc 	.word	0x08005cdc
 80054c8:	20001030 	.word	0x20001030

080054cc <OSTaskNameSet>:
*/
#if OS_TASK_NAME_EN > 0u
void  OSTaskNameSet (INT8U   prio,
                     INT8U  *pname,
                     INT8U  *perr)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b086      	sub	sp, #24
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	4603      	mov	r3, r0
 80054d4:	60b9      	str	r1, [r7, #8]
 80054d6:	607a      	str	r2, [r7, #4]
 80054d8:	73fb      	strb	r3, [r7, #15]
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3u                         /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0u;
 80054da:	2300      	movs	r3, #0
 80054dc:	617b      	str	r3, [r7, #20]
        return;
    }
#endif

#if OS_ARG_CHK_EN > 0u
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
 80054de:	7bfb      	ldrb	r3, [r7, #15]
 80054e0:	2b3f      	cmp	r3, #63	@ 0x3f
 80054e2:	d906      	bls.n	80054f2 <OSTaskNameSet+0x26>
        if (prio != OS_PRIO_SELF) {
 80054e4:	7bfb      	ldrb	r3, [r7, #15]
 80054e6:	2bff      	cmp	r3, #255	@ 0xff
 80054e8:	d003      	beq.n	80054f2 <OSTaskNameSet+0x26>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	222a      	movs	r2, #42	@ 0x2a
 80054ee:	701a      	strb	r2, [r3, #0]
            return;
 80054f0:	e03c      	b.n	800556c <OSTaskNameSet+0xa0>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
 80054f2:	68bb      	ldr	r3, [r7, #8]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d103      	bne.n	8005500 <OSTaskNameSet+0x34>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	220c      	movs	r2, #12
 80054fc:	701a      	strb	r2, [r3, #0]
        return;
 80054fe:	e035      	b.n	800556c <OSTaskNameSet+0xa0>
    }
#endif
    if (OSIntNesting > 0u) {                         /* See if trying to call from an ISR              */
 8005500:	4b1c      	ldr	r3, [pc, #112]	@ (8005574 <OSTaskNameSet+0xa8>)
 8005502:	781b      	ldrb	r3, [r3, #0]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d003      	beq.n	8005510 <OSTaskNameSet+0x44>
        *perr = OS_ERR_NAME_SET_ISR;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2212      	movs	r2, #18
 800550c:	701a      	strb	r2, [r3, #0]
        return;
 800550e:	e02d      	b.n	800556c <OSTaskNameSet+0xa0>
    }
    OS_ENTER_CRITICAL();
 8005510:	2040      	movs	r0, #64	@ 0x40
 8005512:	f7fa fe68 	bl	80001e6 <OS_CPU_SR_Save>
 8005516:	6178      	str	r0, [r7, #20]
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
 8005518:	7bfb      	ldrb	r3, [r7, #15]
 800551a:	2bff      	cmp	r3, #255	@ 0xff
 800551c:	d104      	bne.n	8005528 <OSTaskNameSet+0x5c>
        prio = OSTCBCur->OSTCBPrio;
 800551e:	4b16      	ldr	r3, [pc, #88]	@ (8005578 <OSTaskNameSet+0xac>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8005526:	73fb      	strb	r3, [r7, #15]
    }
    ptcb = OSTCBPrioTbl[prio];
 8005528:	7bfb      	ldrb	r3, [r7, #15]
 800552a:	4a14      	ldr	r2, [pc, #80]	@ (800557c <OSTaskNameSet+0xb0>)
 800552c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005530:	613b      	str	r3, [r7, #16]
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
 8005532:	693b      	ldr	r3, [r7, #16]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d106      	bne.n	8005546 <OSTaskNameSet+0x7a>
        OS_EXIT_CRITICAL();                          /* No                                             */
 8005538:	6978      	ldr	r0, [r7, #20]
 800553a:	f7fa fe62 	bl	8000202 <OS_CPU_SR_Restore>
        *perr = OS_ERR_TASK_NOT_EXIST;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2243      	movs	r2, #67	@ 0x43
 8005542:	701a      	strb	r2, [r3, #0]
        return;
 8005544:	e012      	b.n	800556c <OSTaskNameSet+0xa0>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
 8005546:	693b      	ldr	r3, [r7, #16]
 8005548:	2b01      	cmp	r3, #1
 800554a:	d106      	bne.n	800555a <OSTaskNameSet+0x8e>
        OS_EXIT_CRITICAL();                          /* Yes                                            */
 800554c:	6978      	ldr	r0, [r7, #20]
 800554e:	f7fa fe58 	bl	8000202 <OS_CPU_SR_Restore>
        *perr = OS_ERR_TASK_NOT_EXIST;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2243      	movs	r2, #67	@ 0x43
 8005556:	701a      	strb	r2, [r3, #0]
        return;
 8005558:	e008      	b.n	800556c <OSTaskNameSet+0xa0>
    }
    ptcb->OSTCBTaskName = pname;
 800555a:	693b      	ldr	r3, [r7, #16]
 800555c:	68ba      	ldr	r2, [r7, #8]
 800555e:	655a      	str	r2, [r3, #84]	@ 0x54
    OS_TRACE_TASK_NAME_SET(ptcb);
    OS_EXIT_CRITICAL();
 8005560:	6978      	ldr	r0, [r7, #20]
 8005562:	f7fa fe4e 	bl	8000202 <OS_CPU_SR_Restore>
    *perr               = OS_ERR_NONE;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2200      	movs	r2, #0
 800556a:	701a      	strb	r2, [r3, #0]
}
 800556c:	3718      	adds	r7, #24
 800556e:	46bd      	mov	sp, r7
 8005570:	bd80      	pop	{r7, pc}
 8005572:	bf00      	nop
 8005574:	20001020 	.word	0x20001020
 8005578:	20001238 	.word	0x20001238
 800557c:	20001248 	.word	0x20001248

08005580 <OSTaskStkChk>:
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0u) && (OS_TASK_CREATE_EXT_EN > 0u)
INT8U  OSTaskStkChk (INT8U         prio,
                     OS_STK_DATA  *p_stk_data)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b088      	sub	sp, #32
 8005584:	af00      	add	r7, sp, #0
 8005586:	4603      	mov	r3, r0
 8005588:	6039      	str	r1, [r7, #0]
 800558a:	71fb      	strb	r3, [r7, #7]
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3u                           /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0u;
 800558c:	2300      	movs	r3, #0
 800558e:	617b      	str	r3, [r7, #20]
#endif



#if OS_ARG_CHK_EN > 0u
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
 8005590:	79fb      	ldrb	r3, [r7, #7]
 8005592:	2b3f      	cmp	r3, #63	@ 0x3f
 8005594:	d904      	bls.n	80055a0 <OSTaskStkChk+0x20>
        if (prio != OS_PRIO_SELF) {
 8005596:	79fb      	ldrb	r3, [r7, #7]
 8005598:	2bff      	cmp	r3, #255	@ 0xff
 800559a:	d001      	beq.n	80055a0 <OSTaskStkChk+0x20>
            return (OS_ERR_PRIO_INVALID);
 800559c:	232a      	movs	r3, #42	@ 0x2a
 800559e:	e054      	b.n	800564a <OSTaskStkChk+0xca>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d101      	bne.n	80055aa <OSTaskStkChk+0x2a>
        return (OS_ERR_PDATA_NULL);
 80055a6:	2309      	movs	r3, #9
 80055a8:	e04f      	b.n	800564a <OSTaskStkChk+0xca>
    }
#endif
    p_stk_data->OSFree = 0u;                           /* Assume failure, set to 0 size                */
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	2200      	movs	r2, #0
 80055ae:	601a      	str	r2, [r3, #0]
    p_stk_data->OSUsed = 0u;
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	2200      	movs	r2, #0
 80055b4:	605a      	str	r2, [r3, #4]
    OS_ENTER_CRITICAL();
 80055b6:	2040      	movs	r0, #64	@ 0x40
 80055b8:	f7fa fe15 	bl	80001e6 <OS_CPU_SR_Save>
 80055bc:	6178      	str	r0, [r7, #20]
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
 80055be:	79fb      	ldrb	r3, [r7, #7]
 80055c0:	2bff      	cmp	r3, #255	@ 0xff
 80055c2:	d104      	bne.n	80055ce <OSTaskStkChk+0x4e>
        prio = OSTCBCur->OSTCBPrio;
 80055c4:	4b23      	ldr	r3, [pc, #140]	@ (8005654 <OSTaskStkChk+0xd4>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 80055cc:	71fb      	strb	r3, [r7, #7]
    }
    ptcb = OSTCBPrioTbl[prio];
 80055ce:	79fb      	ldrb	r3, [r7, #7]
 80055d0:	4a21      	ldr	r2, [pc, #132]	@ (8005658 <OSTaskStkChk+0xd8>)
 80055d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055d6:	613b      	str	r3, [r7, #16]
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
 80055d8:	693b      	ldr	r3, [r7, #16]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d104      	bne.n	80055e8 <OSTaskStkChk+0x68>
        OS_EXIT_CRITICAL();
 80055de:	6978      	ldr	r0, [r7, #20]
 80055e0:	f7fa fe0f 	bl	8000202 <OS_CPU_SR_Restore>
        return (OS_ERR_TASK_NOT_EXIST);
 80055e4:	2343      	movs	r3, #67	@ 0x43
 80055e6:	e030      	b.n	800564a <OSTaskStkChk+0xca>
    }
    if (ptcb == OS_TCB_RESERVED) {
 80055e8:	693b      	ldr	r3, [r7, #16]
 80055ea:	2b01      	cmp	r3, #1
 80055ec:	d104      	bne.n	80055f8 <OSTaskStkChk+0x78>
        OS_EXIT_CRITICAL();
 80055ee:	6978      	ldr	r0, [r7, #20]
 80055f0:	f7fa fe07 	bl	8000202 <OS_CPU_SR_Restore>
        return (OS_ERR_TASK_NOT_EXIST);
 80055f4:	2343      	movs	r3, #67	@ 0x43
 80055f6:	e028      	b.n	800564a <OSTaskStkChk+0xca>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0u) { /* Make sure stack checking option is set      */
 80055f8:	693b      	ldr	r3, [r7, #16]
 80055fa:	8a1b      	ldrh	r3, [r3, #16]
 80055fc:	f003 0301 	and.w	r3, r3, #1
 8005600:	2b00      	cmp	r3, #0
 8005602:	d104      	bne.n	800560e <OSTaskStkChk+0x8e>
        OS_EXIT_CRITICAL();
 8005604:	6978      	ldr	r0, [r7, #20]
 8005606:	f7fa fdfc 	bl	8000202 <OS_CPU_SR_Restore>
        return (OS_ERR_TASK_OPT);
 800560a:	2345      	movs	r3, #69	@ 0x45
 800560c:	e01d      	b.n	800564a <OSTaskStkChk+0xca>
    }
    nfree = 0u;
 800560e:	2300      	movs	r3, #0
 8005610:	61bb      	str	r3, [r7, #24]
    size  = ptcb->OSTCBStkSize;
 8005612:	693b      	ldr	r3, [r7, #16]
 8005614:	68db      	ldr	r3, [r3, #12]
 8005616:	60fb      	str	r3, [r7, #12]
    pchk  = ptcb->OSTCBStkBottom;
 8005618:	693b      	ldr	r3, [r7, #16]
 800561a:	689b      	ldr	r3, [r3, #8]
 800561c:	61fb      	str	r3, [r7, #28]
    OS_EXIT_CRITICAL();
 800561e:	6978      	ldr	r0, [r7, #20]
 8005620:	f7fa fdef 	bl	8000202 <OS_CPU_SR_Restore>
#if OS_STK_GROWTH == 1u
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
 8005624:	e002      	b.n	800562c <OSTaskStkChk+0xac>
        nfree++;
 8005626:	69bb      	ldr	r3, [r7, #24]
 8005628:	3301      	adds	r3, #1
 800562a:	61bb      	str	r3, [r7, #24]
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
 800562c:	69fb      	ldr	r3, [r7, #28]
 800562e:	1d1a      	adds	r2, r3, #4
 8005630:	61fa      	str	r2, [r7, #28]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d0f6      	beq.n	8005626 <OSTaskStkChk+0xa6>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree;                       /* Store   number of free entries on the stk     */
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	69ba      	ldr	r2, [r7, #24]
 800563c:	601a      	str	r2, [r3, #0]
    p_stk_data->OSUsed = size - nfree;                /* Compute number of entries used on the stk     */
 800563e:	68fa      	ldr	r2, [r7, #12]
 8005640:	69bb      	ldr	r3, [r7, #24]
 8005642:	1ad2      	subs	r2, r2, r3
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	605a      	str	r2, [r3, #4]
    return (OS_ERR_NONE);
 8005648:	2300      	movs	r3, #0
}
 800564a:	4618      	mov	r0, r3
 800564c:	3720      	adds	r7, #32
 800564e:	46bd      	mov	sp, r7
 8005650:	bd80      	pop	{r7, pc}
 8005652:	bf00      	nop
 8005654:	20001238 	.word	0x20001238
 8005658:	20001248 	.word	0x20001248

0800565c <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0u
INT8U  OSTaskSuspend (INT8U prio)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b086      	sub	sp, #24
 8005660:	af00      	add	r7, sp, #0
 8005662:	4603      	mov	r3, r0
 8005664:	71fb      	strb	r3, [r7, #7]
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0u;
 8005666:	2300      	movs	r3, #0
 8005668:	613b      	str	r3, [r7, #16]
#endif



#if OS_ARG_CHK_EN > 0u
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
 800566a:	79fb      	ldrb	r3, [r7, #7]
 800566c:	2b3f      	cmp	r3, #63	@ 0x3f
 800566e:	d101      	bne.n	8005674 <OSTaskSuspend+0x18>
        return (OS_ERR_TASK_SUSPEND_IDLE);
 8005670:	2347      	movs	r3, #71	@ 0x47
 8005672:	e06a      	b.n	800574a <OSTaskSuspend+0xee>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
 8005674:	79fb      	ldrb	r3, [r7, #7]
 8005676:	2b3e      	cmp	r3, #62	@ 0x3e
 8005678:	d904      	bls.n	8005684 <OSTaskSuspend+0x28>
        if (prio != OS_PRIO_SELF) {
 800567a:	79fb      	ldrb	r3, [r7, #7]
 800567c:	2bff      	cmp	r3, #255	@ 0xff
 800567e:	d001      	beq.n	8005684 <OSTaskSuspend+0x28>
            return (OS_ERR_PRIO_INVALID);
 8005680:	232a      	movs	r3, #42	@ 0x2a
 8005682:	e062      	b.n	800574a <OSTaskSuspend+0xee>
        }
    }
#endif
    OS_ENTER_CRITICAL();
 8005684:	2040      	movs	r0, #64	@ 0x40
 8005686:	f7fa fdae 	bl	80001e6 <OS_CPU_SR_Save>
 800568a:	6138      	str	r0, [r7, #16]
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
 800568c:	79fb      	ldrb	r3, [r7, #7]
 800568e:	2bff      	cmp	r3, #255	@ 0xff
 8005690:	d107      	bne.n	80056a2 <OSTaskSuspend+0x46>
        prio = OSTCBCur->OSTCBPrio;
 8005692:	4b30      	ldr	r3, [pc, #192]	@ (8005754 <OSTaskSuspend+0xf8>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800569a:	71fb      	strb	r3, [r7, #7]
        self = OS_TRUE;
 800569c:	2301      	movs	r3, #1
 800569e:	75fb      	strb	r3, [r7, #23]
 80056a0:	e00b      	b.n	80056ba <OSTaskSuspend+0x5e>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
 80056a2:	4b2c      	ldr	r3, [pc, #176]	@ (8005754 <OSTaskSuspend+0xf8>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 80056aa:	79fa      	ldrb	r2, [r7, #7]
 80056ac:	429a      	cmp	r2, r3
 80056ae:	d102      	bne.n	80056b6 <OSTaskSuspend+0x5a>
        self = OS_TRUE;
 80056b0:	2301      	movs	r3, #1
 80056b2:	75fb      	strb	r3, [r7, #23]
 80056b4:	e001      	b.n	80056ba <OSTaskSuspend+0x5e>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
 80056b6:	2300      	movs	r3, #0
 80056b8:	75fb      	strb	r3, [r7, #23]
    }
    ptcb = OSTCBPrioTbl[prio];
 80056ba:	79fb      	ldrb	r3, [r7, #7]
 80056bc:	4a26      	ldr	r2, [pc, #152]	@ (8005758 <OSTaskSuspend+0xfc>)
 80056be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056c2:	60fb      	str	r3, [r7, #12]
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d104      	bne.n	80056d4 <OSTaskSuspend+0x78>
        OS_EXIT_CRITICAL();
 80056ca:	6938      	ldr	r0, [r7, #16]
 80056cc:	f7fa fd99 	bl	8000202 <OS_CPU_SR_Restore>
        return (OS_ERR_TASK_SUSPEND_PRIO);
 80056d0:	2348      	movs	r3, #72	@ 0x48
 80056d2:	e03a      	b.n	800574a <OSTaskSuspend+0xee>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	2b01      	cmp	r3, #1
 80056d8:	d104      	bne.n	80056e4 <OSTaskSuspend+0x88>
        OS_EXIT_CRITICAL();
 80056da:	6938      	ldr	r0, [r7, #16]
 80056dc:	f7fa fd91 	bl	8000202 <OS_CPU_SR_Restore>
        return (OS_ERR_TASK_NOT_EXIST);
 80056e0:	2343      	movs	r3, #67	@ 0x43
 80056e2:	e032      	b.n	800574a <OSTaskSuspend+0xee>
    }
    y            = ptcb->OSTCBY;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80056ea:	72fb      	strb	r3, [r7, #11]
    OSRdyTbl[y] &= (OS_PRIO)~ptcb->OSTCBBitX;                   /* Make task not ready                 */
 80056ec:	7afb      	ldrb	r3, [r7, #11]
 80056ee:	4a1b      	ldr	r2, [pc, #108]	@ (800575c <OSTaskSuspend+0x100>)
 80056f0:	5cd1      	ldrb	r1, [r2, r3]
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80056f8:	43db      	mvns	r3, r3
 80056fa:	b2da      	uxtb	r2, r3
 80056fc:	7afb      	ldrb	r3, [r7, #11]
 80056fe:	400a      	ands	r2, r1
 8005700:	b2d1      	uxtb	r1, r2
 8005702:	4a16      	ldr	r2, [pc, #88]	@ (800575c <OSTaskSuspend+0x100>)
 8005704:	54d1      	strb	r1, [r2, r3]
    if (OSRdyTbl[y] == 0u) {
 8005706:	7afb      	ldrb	r3, [r7, #11]
 8005708:	4a14      	ldr	r2, [pc, #80]	@ (800575c <OSTaskSuspend+0x100>)
 800570a:	5cd3      	ldrb	r3, [r2, r3]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d10a      	bne.n	8005726 <OSTaskSuspend+0xca>
        OSRdyGrp &= (OS_PRIO)~ptcb->OSTCBBitY;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005716:	43db      	mvns	r3, r3
 8005718:	b2da      	uxtb	r2, r3
 800571a:	4b11      	ldr	r3, [pc, #68]	@ (8005760 <OSTaskSuspend+0x104>)
 800571c:	781b      	ldrb	r3, [r3, #0]
 800571e:	4013      	ands	r3, r2
 8005720:	b2da      	uxtb	r2, r3
 8005722:	4b0f      	ldr	r3, [pc, #60]	@ (8005760 <OSTaskSuspend+0x104>)
 8005724:	701a      	strb	r2, [r3, #0]
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800572c:	f043 0308 	orr.w	r3, r3, #8
 8005730:	b2da      	uxtb	r2, r3
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    OS_EXIT_CRITICAL();
 8005738:	6938      	ldr	r0, [r7, #16]
 800573a:	f7fa fd62 	bl	8000202 <OS_CPU_SR_Restore>
    OS_TRACE_TASK_SUSPEND(ptcb);
    OS_TRACE_TASK_SUSPENDED(ptcb);
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
 800573e:	7dfb      	ldrb	r3, [r7, #23]
 8005740:	2b01      	cmp	r3, #1
 8005742:	d101      	bne.n	8005748 <OSTaskSuspend+0xec>
        OS_Sched();                                             /* Find new highest priority task      */
 8005744:	f7fe fdb2 	bl	80042ac <OS_Sched>
    }
    return (OS_ERR_NONE);
 8005748:	2300      	movs	r3, #0
}
 800574a:	4618      	mov	r0, r3
 800574c:	3718      	adds	r7, #24
 800574e:	46bd      	mov	sp, r7
 8005750:	bd80      	pop	{r7, pc}
 8005752:	bf00      	nop
 8005754:	20001238 	.word	0x20001238
 8005758:	20001248 	.word	0x20001248
 800575c:	20001028 	.word	0x20001028
 8005760:	20001024 	.word	0x20001024

08005764 <OS_TaskReturn>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_TaskReturn (void)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	af00      	add	r7, sp, #0
    OSTaskReturnHook(OSTCBCur);                   /* Call hook to let user decide on what to do        */
 8005768:	4b04      	ldr	r3, [pc, #16]	@ (800577c <OS_TaskReturn+0x18>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	4618      	mov	r0, r3
 800576e:	f7fd fdf8 	bl	8003362 <OSTaskReturnHook>

#if OS_TASK_DEL_EN > 0u
    (void)OSTaskDel(OS_PRIO_SELF);                /* Delete task if it accidentally returns!           */
 8005772:	20ff      	movs	r0, #255	@ 0xff
 8005774:	f7ff fdb2 	bl	80052dc <OSTaskDel>
#else
    for (;;) {
        OSTimeDly(OS_TICKS_PER_SEC);
    }
#endif
}
 8005778:	bf00      	nop
 800577a:	bd80      	pop	{r7, pc}
 800577c:	20001238 	.word	0x20001238

08005780 <OS_TaskStkClr>:
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0u) && (OS_TASK_CREATE_EXT_EN > 0u)
void  OS_TaskStkClr (OS_STK  *pbos,
                     INT32U   size,
                     INT16U   opt)
{
 8005780:	b480      	push	{r7}
 8005782:	b085      	sub	sp, #20
 8005784:	af00      	add	r7, sp, #0
 8005786:	60f8      	str	r0, [r7, #12]
 8005788:	60b9      	str	r1, [r7, #8]
 800578a:	4613      	mov	r3, r2
 800578c:	80fb      	strh	r3, [r7, #6]
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000u) {      /* See if stack checking has been enabled       */
 800578e:	88fb      	ldrh	r3, [r7, #6]
 8005790:	f003 0301 	and.w	r3, r3, #1
 8005794:	2b00      	cmp	r3, #0
 8005796:	d010      	beq.n	80057ba <OS_TaskStkClr+0x3a>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000u) {  /* See if stack needs to be cleared             */
 8005798:	88fb      	ldrh	r3, [r7, #6]
 800579a:	f003 0302 	and.w	r3, r3, #2
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d00b      	beq.n	80057ba <OS_TaskStkClr+0x3a>
#if OS_STK_GROWTH == 1u
            while (size > 0u) {                        /* Stack grows from HIGH to LOW memory          */
 80057a2:	e007      	b.n	80057b4 <OS_TaskStkClr+0x34>
                size--;
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	3b01      	subs	r3, #1
 80057a8:	60bb      	str	r3, [r7, #8]
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	1d1a      	adds	r2, r3, #4
 80057ae:	60fa      	str	r2, [r7, #12]
 80057b0:	2200      	movs	r2, #0
 80057b2:	601a      	str	r2, [r3, #0]
            while (size > 0u) {                        /* Stack grows from HIGH to LOW memory          */
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d1f4      	bne.n	80057a4 <OS_TaskStkClr+0x24>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
 80057ba:	bf00      	nop
 80057bc:	3714      	adds	r7, #20
 80057be:	46bd      	mov	sp, r7
 80057c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c4:	4770      	bx	lr
	...

080057c8 <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT32U ticks)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b084      	sub	sp, #16
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
    INT8U      y;
#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0u;
 80057d0:	2300      	movs	r3, #0
 80057d2:	60fb      	str	r3, [r7, #12]
#endif



    if (OSIntNesting > 0u) {                     /* See if trying to call from an ISR                  */
 80057d4:	4b21      	ldr	r3, [pc, #132]	@ (800585c <OSTimeDly+0x94>)
 80057d6:	781b      	ldrb	r3, [r3, #0]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d138      	bne.n	800584e <OSTimeDly+0x86>
        return;
    }
    if (OSLockNesting > 0u) {                    /* See if called with scheduler locked                */
 80057dc:	4b20      	ldr	r3, [pc, #128]	@ (8005860 <OSTimeDly+0x98>)
 80057de:	781b      	ldrb	r3, [r3, #0]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d136      	bne.n	8005852 <OSTimeDly+0x8a>
        return;
    }
    if (ticks > 0u) {                            /* 0 means no delay!                                  */
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d034      	beq.n	8005854 <OSTimeDly+0x8c>
        OS_ENTER_CRITICAL();
 80057ea:	2040      	movs	r0, #64	@ 0x40
 80057ec:	f7fa fcfb 	bl	80001e6 <OS_CPU_SR_Save>
 80057f0:	60f8      	str	r0, [r7, #12]
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
 80057f2:	4b1c      	ldr	r3, [pc, #112]	@ (8005864 <OSTimeDly+0x9c>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80057fa:	72fb      	strb	r3, [r7, #11]
        OSRdyTbl[y] &= (OS_PRIO)~OSTCBCur->OSTCBBitX;
 80057fc:	7afb      	ldrb	r3, [r7, #11]
 80057fe:	4a1a      	ldr	r2, [pc, #104]	@ (8005868 <OSTimeDly+0xa0>)
 8005800:	5cd1      	ldrb	r1, [r2, r3]
 8005802:	4b18      	ldr	r3, [pc, #96]	@ (8005864 <OSTimeDly+0x9c>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800580a:	43db      	mvns	r3, r3
 800580c:	b2da      	uxtb	r2, r3
 800580e:	7afb      	ldrb	r3, [r7, #11]
 8005810:	400a      	ands	r2, r1
 8005812:	b2d1      	uxtb	r1, r2
 8005814:	4a14      	ldr	r2, [pc, #80]	@ (8005868 <OSTimeDly+0xa0>)
 8005816:	54d1      	strb	r1, [r2, r3]
        OS_TRACE_TASK_SUSPENDED(OSTCBCur);
        if (OSRdyTbl[y] == 0u) {
 8005818:	7afb      	ldrb	r3, [r7, #11]
 800581a:	4a13      	ldr	r2, [pc, #76]	@ (8005868 <OSTimeDly+0xa0>)
 800581c:	5cd3      	ldrb	r3, [r2, r3]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d10b      	bne.n	800583a <OSTimeDly+0x72>
            OSRdyGrp &= (OS_PRIO)~OSTCBCur->OSTCBBitY;
 8005822:	4b10      	ldr	r3, [pc, #64]	@ (8005864 <OSTimeDly+0x9c>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800582a:	43db      	mvns	r3, r3
 800582c:	b2da      	uxtb	r2, r3
 800582e:	4b0f      	ldr	r3, [pc, #60]	@ (800586c <OSTimeDly+0xa4>)
 8005830:	781b      	ldrb	r3, [r3, #0]
 8005832:	4013      	ands	r3, r2
 8005834:	b2da      	uxtb	r2, r3
 8005836:	4b0d      	ldr	r3, [pc, #52]	@ (800586c <OSTimeDly+0xa4>)
 8005838:	701a      	strb	r2, [r3, #0]
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
 800583a:	4b0a      	ldr	r3, [pc, #40]	@ (8005864 <OSTimeDly+0x9c>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	687a      	ldr	r2, [r7, #4]
 8005840:	635a      	str	r2, [r3, #52]	@ 0x34
        OS_TRACE_TASK_DLY(ticks);
        OS_EXIT_CRITICAL();
 8005842:	68f8      	ldr	r0, [r7, #12]
 8005844:	f7fa fcdd 	bl	8000202 <OS_CPU_SR_Restore>
        OS_Sched();                              /* Find next task to run!                             */
 8005848:	f7fe fd30 	bl	80042ac <OS_Sched>
 800584c:	e002      	b.n	8005854 <OSTimeDly+0x8c>
        return;
 800584e:	bf00      	nop
 8005850:	e000      	b.n	8005854 <OSTimeDly+0x8c>
        return;
 8005852:	bf00      	nop
    }
}
 8005854:	3710      	adds	r7, #16
 8005856:	46bd      	mov	sp, r7
 8005858:	bd80      	pop	{r7, pc}
 800585a:	bf00      	nop
 800585c:	20001020 	.word	0x20001020
 8005860:	20001021 	.word	0x20001021
 8005864:	20001238 	.word	0x20001238
 8005868:	20001028 	.word	0x20001028
 800586c:	20001024 	.word	0x20001024

08005870 <OSTmrSignal>:
*********************************************************************************************************
*/

#if OS_TMR_EN > 0u
INT8U  OSTmrSignal (void)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b082      	sub	sp, #8
 8005874:	af00      	add	r7, sp, #0
    INT8U  err;


    err = OSSemPost(OSTmrSemSignal);
 8005876:	4b06      	ldr	r3, [pc, #24]	@ (8005890 <OSTmrSignal+0x20>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4618      	mov	r0, r3
 800587c:	f7ff fc82 	bl	8005184 <OSSemPost>
 8005880:	4603      	mov	r3, r0
 8005882:	71fb      	strb	r3, [r7, #7]
    return (err);
 8005884:	79fb      	ldrb	r3, [r7, #7]
}
 8005886:	4618      	mov	r0, r3
 8005888:	3708      	adds	r7, #8
 800588a:	46bd      	mov	sp, r7
 800588c:	bd80      	pop	{r7, pc}
 800588e:	bf00      	nop
 8005890:	20001c28 	.word	0x20001c28

08005894 <OSTmr_Init>:
*********************************************************************************************************
*/

#if OS_TMR_EN > 0u
void  OSTmr_Init (void)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b086      	sub	sp, #24
 8005898:	af00      	add	r7, sp, #0
    INT16U   ix_next;
    OS_TMR  *ptmr1;
    OS_TMR  *ptmr2;


    OS_MemClr((INT8U *)&OSTmrTbl[0],      sizeof(OSTmrTbl));            /* Clear all the TMRs                         */
 800589a:	f44f 7120 	mov.w	r1, #640	@ 0x280
 800589e:	4838      	ldr	r0, [pc, #224]	@ (8005980 <OSTmr_Init+0xec>)
 80058a0:	f7fe fcea 	bl	8004278 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTmrWheelTbl[0], sizeof(OSTmrWheelTbl));       /* Clear the timer wheel                      */
 80058a4:	2138      	movs	r1, #56	@ 0x38
 80058a6:	4837      	ldr	r0, [pc, #220]	@ (8005984 <OSTmr_Init+0xf0>)
 80058a8:	f7fe fce6 	bl	8004278 <OS_MemClr>

    for (ix = 0u; ix < (OS_TMR_CFG_MAX - 1u); ix++) {                   /* Init. list of free TMRs                    */
 80058ac:	2300      	movs	r3, #0
 80058ae:	82fb      	strh	r3, [r7, #22]
 80058b0:	e022      	b.n	80058f8 <OSTmr_Init+0x64>
        ix_next = ix + 1u;
 80058b2:	8afb      	ldrh	r3, [r7, #22]
 80058b4:	3301      	adds	r3, #1
 80058b6:	81fb      	strh	r3, [r7, #14]
        ptmr1 = &OSTmrTbl[ix];
 80058b8:	8afa      	ldrh	r2, [r7, #22]
 80058ba:	4613      	mov	r3, r2
 80058bc:	009b      	lsls	r3, r3, #2
 80058be:	4413      	add	r3, r2
 80058c0:	00db      	lsls	r3, r3, #3
 80058c2:	4a2f      	ldr	r2, [pc, #188]	@ (8005980 <OSTmr_Init+0xec>)
 80058c4:	4413      	add	r3, r2
 80058c6:	613b      	str	r3, [r7, #16]
        ptmr2 = &OSTmrTbl[ix_next];
 80058c8:	89fa      	ldrh	r2, [r7, #14]
 80058ca:	4613      	mov	r3, r2
 80058cc:	009b      	lsls	r3, r3, #2
 80058ce:	4413      	add	r3, r2
 80058d0:	00db      	lsls	r3, r3, #3
 80058d2:	4a2b      	ldr	r2, [pc, #172]	@ (8005980 <OSTmr_Init+0xec>)
 80058d4:	4413      	add	r3, r2
 80058d6:	60bb      	str	r3, [r7, #8]
        ptmr1->OSTmrType    = OS_TMR_TYPE;
 80058d8:	693b      	ldr	r3, [r7, #16]
 80058da:	2264      	movs	r2, #100	@ 0x64
 80058dc:	701a      	strb	r2, [r3, #0]
        ptmr1->OSTmrState   = OS_TMR_STATE_UNUSED;                      /* Indicate that timer is inactive            */
 80058de:	693b      	ldr	r3, [r7, #16]
 80058e0:	2200      	movs	r2, #0
 80058e2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
        ptmr1->OSTmrNext    = (void *)ptmr2;                            /* Link to next timer                         */
 80058e6:	693b      	ldr	r3, [r7, #16]
 80058e8:	68ba      	ldr	r2, [r7, #8]
 80058ea:	60da      	str	r2, [r3, #12]
#if OS_TMR_CFG_NAME_EN > 0u
        ptmr1->OSTmrName    = (INT8U *)(void *)"?";
 80058ec:	693b      	ldr	r3, [r7, #16]
 80058ee:	4a26      	ldr	r2, [pc, #152]	@ (8005988 <OSTmr_Init+0xf4>)
 80058f0:	621a      	str	r2, [r3, #32]
    for (ix = 0u; ix < (OS_TMR_CFG_MAX - 1u); ix++) {                   /* Init. list of free TMRs                    */
 80058f2:	8afb      	ldrh	r3, [r7, #22]
 80058f4:	3301      	adds	r3, #1
 80058f6:	82fb      	strh	r3, [r7, #22]
 80058f8:	8afb      	ldrh	r3, [r7, #22]
 80058fa:	2b0e      	cmp	r3, #14
 80058fc:	d9d9      	bls.n	80058b2 <OSTmr_Init+0x1e>
#endif
    }
    ptmr1               = &OSTmrTbl[ix];
 80058fe:	8afa      	ldrh	r2, [r7, #22]
 8005900:	4613      	mov	r3, r2
 8005902:	009b      	lsls	r3, r3, #2
 8005904:	4413      	add	r3, r2
 8005906:	00db      	lsls	r3, r3, #3
 8005908:	4a1d      	ldr	r2, [pc, #116]	@ (8005980 <OSTmr_Init+0xec>)
 800590a:	4413      	add	r3, r2
 800590c:	613b      	str	r3, [r7, #16]
    ptmr1->OSTmrType    = OS_TMR_TYPE;
 800590e:	693b      	ldr	r3, [r7, #16]
 8005910:	2264      	movs	r2, #100	@ 0x64
 8005912:	701a      	strb	r2, [r3, #0]
    ptmr1->OSTmrState   = OS_TMR_STATE_UNUSED;                          /* Indicate that timer is inactive            */
 8005914:	693b      	ldr	r3, [r7, #16]
 8005916:	2200      	movs	r2, #0
 8005918:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    ptmr1->OSTmrNext    = (void *)0;                                    /* Last OS_TMR                                */
 800591c:	693b      	ldr	r3, [r7, #16]
 800591e:	2200      	movs	r2, #0
 8005920:	60da      	str	r2, [r3, #12]
#if OS_TMR_CFG_NAME_EN > 0u
    ptmr1->OSTmrName    = (INT8U *)(void *)"?";
 8005922:	693b      	ldr	r3, [r7, #16]
 8005924:	4a18      	ldr	r2, [pc, #96]	@ (8005988 <OSTmr_Init+0xf4>)
 8005926:	621a      	str	r2, [r3, #32]
#endif
    OSTmrTime           = 0u;
 8005928:	4b18      	ldr	r3, [pc, #96]	@ (800598c <OSTmr_Init+0xf8>)
 800592a:	2200      	movs	r2, #0
 800592c:	601a      	str	r2, [r3, #0]
    OSTmrUsed           = 0u;
 800592e:	4b18      	ldr	r3, [pc, #96]	@ (8005990 <OSTmr_Init+0xfc>)
 8005930:	2200      	movs	r2, #0
 8005932:	801a      	strh	r2, [r3, #0]
    OSTmrFree           = OS_TMR_CFG_MAX;
 8005934:	4b17      	ldr	r3, [pc, #92]	@ (8005994 <OSTmr_Init+0x100>)
 8005936:	2210      	movs	r2, #16
 8005938:	801a      	strh	r2, [r3, #0]
    OSTmrFreeList       = &OSTmrTbl[0];
 800593a:	4b17      	ldr	r3, [pc, #92]	@ (8005998 <OSTmr_Init+0x104>)
 800593c:	4a10      	ldr	r2, [pc, #64]	@ (8005980 <OSTmr_Init+0xec>)
 800593e:	601a      	str	r2, [r3, #0]
    OSTmrSem            = OSSemCreate(1u);
 8005940:	2001      	movs	r0, #1
 8005942:	f7ff fb47 	bl	8004fd4 <OSSemCreate>
 8005946:	4603      	mov	r3, r0
 8005948:	4a14      	ldr	r2, [pc, #80]	@ (800599c <OSTmr_Init+0x108>)
 800594a:	6013      	str	r3, [r2, #0]
    OSTmrSemSignal      = OSSemCreate(0u);
 800594c:	2000      	movs	r0, #0
 800594e:	f7ff fb41 	bl	8004fd4 <OSSemCreate>
 8005952:	4603      	mov	r3, r0
 8005954:	4a12      	ldr	r2, [pc, #72]	@ (80059a0 <OSTmr_Init+0x10c>)
 8005956:	6013      	str	r3, [r2, #0]

#if OS_EVENT_NAME_EN > 0u                                               /* Assign names to semaphores                 */
    OSEventNameSet(OSTmrSem,       (INT8U *)(void *)"uC/OS-II TmrLock",   &err);
 8005958:	4b10      	ldr	r3, [pc, #64]	@ (800599c <OSTmr_Init+0x108>)
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	1dfa      	adds	r2, r7, #7
 800595e:	4911      	ldr	r1, [pc, #68]	@ (80059a4 <OSTmr_Init+0x110>)
 8005960:	4618      	mov	r0, r3
 8005962:	f7fd ffdb 	bl	800391c <OSEventNameSet>
    OSEventNameSet(OSTmrSemSignal, (INT8U *)(void *)"uC/OS-II TmrSignal", &err);
 8005966:	4b0e      	ldr	r3, [pc, #56]	@ (80059a0 <OSTmr_Init+0x10c>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	1dfa      	adds	r2, r7, #7
 800596c:	490e      	ldr	r1, [pc, #56]	@ (80059a8 <OSTmr_Init+0x114>)
 800596e:	4618      	mov	r0, r3
 8005970:	f7fd ffd4 	bl	800391c <OSEventNameSet>
#endif

    OSTmr_InitTask();
 8005974:	f000 f81a 	bl	80059ac <OSTmr_InitTask>
}
 8005978:	bf00      	nop
 800597a:	3718      	adds	r7, #24
 800597c:	46bd      	mov	sp, r7
 800597e:	bd80      	pop	{r7, pc}
 8005980:	20001c2c 	.word	0x20001c2c
 8005984:	200020b0 	.word	0x200020b0
 8005988:	08005ce0 	.word	0x08005ce0
 800598c:	20001c20 	.word	0x20001c20
 8005990:	20001c1e 	.word	0x20001c1e
 8005994:	20001c1c 	.word	0x20001c1c
 8005998:	20001eac 	.word	0x20001eac
 800599c:	20001c24 	.word	0x20001c24
 80059a0:	20001c28 	.word	0x20001c28
 80059a4:	08005ce4 	.word	0x08005ce4
 80059a8:	08005cf8 	.word	0x08005cf8

080059ac <OSTmr_InitTask>:
*********************************************************************************************************
*/

#if OS_TMR_EN > 0u
static  void  OSTmr_InitTask (void)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b088      	sub	sp, #32
 80059b0:	af06      	add	r7, sp, #24
#endif


#if OS_TASK_CREATE_EXT_EN > 0u
    #if OS_STK_GROWTH == 1u
    (void)OSTaskCreateExt(OSTmr_Task,
 80059b2:	2303      	movs	r3, #3
 80059b4:	9304      	str	r3, [sp, #16]
 80059b6:	2300      	movs	r3, #0
 80059b8:	9303      	str	r3, [sp, #12]
 80059ba:	2380      	movs	r3, #128	@ 0x80
 80059bc:	9302      	str	r3, [sp, #8]
 80059be:	4b0a      	ldr	r3, [pc, #40]	@ (80059e8 <OSTmr_InitTask+0x3c>)
 80059c0:	9301      	str	r3, [sp, #4]
 80059c2:	f64f 73fd 	movw	r3, #65533	@ 0xfffd
 80059c6:	9300      	str	r3, [sp, #0]
 80059c8:	233d      	movs	r3, #61	@ 0x3d
 80059ca:	4a08      	ldr	r2, [pc, #32]	@ (80059ec <OSTmr_InitTask+0x40>)
 80059cc:	2100      	movs	r1, #0
 80059ce:	4808      	ldr	r0, [pc, #32]	@ (80059f0 <OSTmr_InitTask+0x44>)
 80059d0:	f7ff fc18 	bl	8005204 <OSTaskCreateExt>
                       OS_TASK_TMR_PRIO);
    #endif
#endif

#if OS_TASK_NAME_EN > 0u
    OSTaskNameSet(OS_TASK_TMR_PRIO, (INT8U *)(void *)"uC/OS-II Tmr", &err);
 80059d4:	1dfb      	adds	r3, r7, #7
 80059d6:	461a      	mov	r2, r3
 80059d8:	4906      	ldr	r1, [pc, #24]	@ (80059f4 <OSTmr_InitTask+0x48>)
 80059da:	203d      	movs	r0, #61	@ 0x3d
 80059dc:	f7ff fd76 	bl	80054cc <OSTaskNameSet>
#endif
}
 80059e0:	bf00      	nop
 80059e2:	3708      	adds	r7, #8
 80059e4:	46bd      	mov	sp, r7
 80059e6:	bd80      	pop	{r7, pc}
 80059e8:	20001eb0 	.word	0x20001eb0
 80059ec:	200020ac 	.word	0x200020ac
 80059f0:	08005b79 	.word	0x08005b79
 80059f4:	08005d0c 	.word	0x08005d0c

080059f8 <OSTmr_Link>:
*/

#if OS_TMR_EN > 0u
static  void  OSTmr_Link (OS_TMR  *ptmr,
                          INT8U    type)
{
 80059f8:	b480      	push	{r7}
 80059fa:	b087      	sub	sp, #28
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
 8005a00:	460b      	mov	r3, r1
 8005a02:	70fb      	strb	r3, [r7, #3]
    OS_TMR       *ptmr1;
    OS_TMR_WHEEL *pspoke;
    INT16U        spoke;


    ptmr->OSTmrState = OS_TMR_STATE_RUNNING;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2203      	movs	r2, #3
 8005a08:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    if (type == OS_TMR_LINK_PERIODIC) {                            /* Determine when timer will expire                */
 8005a0c:	78fb      	ldrb	r3, [r7, #3]
 8005a0e:	2b01      	cmp	r3, #1
 8005a10:	d107      	bne.n	8005a22 <OSTmr_Link+0x2a>
        ptmr->OSTmrMatch = ptmr->OSTmrPeriod + OSTmrTime;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	69da      	ldr	r2, [r3, #28]
 8005a16:	4b2b      	ldr	r3, [pc, #172]	@ (8005ac4 <OSTmr_Link+0xcc>)
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	441a      	add	r2, r3
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	615a      	str	r2, [r3, #20]
 8005a20:	e012      	b.n	8005a48 <OSTmr_Link+0x50>
    } else {
        if (ptmr->OSTmrDly == 0u) {
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	699b      	ldr	r3, [r3, #24]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d107      	bne.n	8005a3a <OSTmr_Link+0x42>
            ptmr->OSTmrMatch = ptmr->OSTmrPeriod + OSTmrTime;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	69da      	ldr	r2, [r3, #28]
 8005a2e:	4b25      	ldr	r3, [pc, #148]	@ (8005ac4 <OSTmr_Link+0xcc>)
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	441a      	add	r2, r3
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	615a      	str	r2, [r3, #20]
 8005a38:	e006      	b.n	8005a48 <OSTmr_Link+0x50>
        } else {
            ptmr->OSTmrMatch = ptmr->OSTmrDly    + OSTmrTime;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	699a      	ldr	r2, [r3, #24]
 8005a3e:	4b21      	ldr	r3, [pc, #132]	@ (8005ac4 <OSTmr_Link+0xcc>)
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	441a      	add	r2, r3
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	615a      	str	r2, [r3, #20]
        }
    }
    spoke  = (INT16U)(ptmr->OSTmrMatch % OS_TMR_CFG_WHEEL_SIZE);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	695a      	ldr	r2, [r3, #20]
 8005a4c:	4b1e      	ldr	r3, [pc, #120]	@ (8005ac8 <OSTmr_Link+0xd0>)
 8005a4e:	fba3 1302 	umull	r1, r3, r3, r2
 8005a52:	1ad1      	subs	r1, r2, r3
 8005a54:	0849      	lsrs	r1, r1, #1
 8005a56:	440b      	add	r3, r1
 8005a58:	0899      	lsrs	r1, r3, #2
 8005a5a:	460b      	mov	r3, r1
 8005a5c:	00db      	lsls	r3, r3, #3
 8005a5e:	1a5b      	subs	r3, r3, r1
 8005a60:	1ad1      	subs	r1, r2, r3
 8005a62:	460b      	mov	r3, r1
 8005a64:	82fb      	strh	r3, [r7, #22]
    pspoke = &OSTmrWheelTbl[spoke];
 8005a66:	8afb      	ldrh	r3, [r7, #22]
 8005a68:	00db      	lsls	r3, r3, #3
 8005a6a:	4a18      	ldr	r2, [pc, #96]	@ (8005acc <OSTmr_Link+0xd4>)
 8005a6c:	4413      	add	r3, r2
 8005a6e:	613b      	str	r3, [r7, #16]

    if (pspoke->OSTmrFirst == (OS_TMR *)0) {                       /* Link into timer wheel                           */
 8005a70:	693b      	ldr	r3, [r7, #16]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d109      	bne.n	8005a8c <OSTmr_Link+0x94>
        pspoke->OSTmrFirst   = ptmr;
 8005a78:	693b      	ldr	r3, [r7, #16]
 8005a7a:	687a      	ldr	r2, [r7, #4]
 8005a7c:	601a      	str	r2, [r3, #0]
        ptmr->OSTmrNext      = (OS_TMR *)0;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2200      	movs	r2, #0
 8005a82:	60da      	str	r2, [r3, #12]
        pspoke->OSTmrEntries = 1u;
 8005a84:	693b      	ldr	r3, [r7, #16]
 8005a86:	2201      	movs	r2, #1
 8005a88:	809a      	strh	r2, [r3, #4]
 8005a8a:	e011      	b.n	8005ab0 <OSTmr_Link+0xb8>
    } else {
        ptmr1                = pspoke->OSTmrFirst;                 /* Point to first timer in the spoke               */
 8005a8c:	693b      	ldr	r3, [r7, #16]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	60fb      	str	r3, [r7, #12]
        pspoke->OSTmrFirst   = ptmr;
 8005a92:	693b      	ldr	r3, [r7, #16]
 8005a94:	687a      	ldr	r2, [r7, #4]
 8005a96:	601a      	str	r2, [r3, #0]
        ptmr->OSTmrNext      = (void *)ptmr1;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	68fa      	ldr	r2, [r7, #12]
 8005a9c:	60da      	str	r2, [r3, #12]
        ptmr1->OSTmrPrev     = (void *)ptmr;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	687a      	ldr	r2, [r7, #4]
 8005aa2:	611a      	str	r2, [r3, #16]
        pspoke->OSTmrEntries++;
 8005aa4:	693b      	ldr	r3, [r7, #16]
 8005aa6:	889b      	ldrh	r3, [r3, #4]
 8005aa8:	3301      	adds	r3, #1
 8005aaa:	b29a      	uxth	r2, r3
 8005aac:	693b      	ldr	r3, [r7, #16]
 8005aae:	809a      	strh	r2, [r3, #4]
    }
    ptmr->OSTmrPrev = (void *)0;                                   /* Timer always inserted as first node in list     */
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	611a      	str	r2, [r3, #16]
}
 8005ab6:	bf00      	nop
 8005ab8:	371c      	adds	r7, #28
 8005aba:	46bd      	mov	sp, r7
 8005abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac0:	4770      	bx	lr
 8005ac2:	bf00      	nop
 8005ac4:	20001c20 	.word	0x20001c20
 8005ac8:	24924925 	.word	0x24924925
 8005acc:	200020b0 	.word	0x200020b0

08005ad0 <OSTmr_Unlink>:
*********************************************************************************************************
*/

#if OS_TMR_EN > 0u
static  void  OSTmr_Unlink (OS_TMR *ptmr)
{
 8005ad0:	b480      	push	{r7}
 8005ad2:	b087      	sub	sp, #28
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
    OS_TMR        *ptmr2;
    OS_TMR_WHEEL  *pspoke;
    INT16U         spoke;


    spoke  = (INT16U)(ptmr->OSTmrMatch % OS_TMR_CFG_WHEEL_SIZE);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	695a      	ldr	r2, [r3, #20]
 8005adc:	4b24      	ldr	r3, [pc, #144]	@ (8005b70 <OSTmr_Unlink+0xa0>)
 8005ade:	fba3 1302 	umull	r1, r3, r3, r2
 8005ae2:	1ad1      	subs	r1, r2, r3
 8005ae4:	0849      	lsrs	r1, r1, #1
 8005ae6:	440b      	add	r3, r1
 8005ae8:	0899      	lsrs	r1, r3, #2
 8005aea:	460b      	mov	r3, r1
 8005aec:	00db      	lsls	r3, r3, #3
 8005aee:	1a5b      	subs	r3, r3, r1
 8005af0:	1ad1      	subs	r1, r2, r3
 8005af2:	460b      	mov	r3, r1
 8005af4:	82fb      	strh	r3, [r7, #22]
    pspoke = &OSTmrWheelTbl[spoke];
 8005af6:	8afb      	ldrh	r3, [r7, #22]
 8005af8:	00db      	lsls	r3, r3, #3
 8005afa:	4a1e      	ldr	r2, [pc, #120]	@ (8005b74 <OSTmr_Unlink+0xa4>)
 8005afc:	4413      	add	r3, r2
 8005afe:	613b      	str	r3, [r7, #16]

    if (pspoke->OSTmrFirst == ptmr) {                       /* See if timer to remove is at the beginning of list     */
 8005b00:	693b      	ldr	r3, [r7, #16]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	687a      	ldr	r2, [r7, #4]
 8005b06:	429a      	cmp	r2, r3
 8005b08:	d10c      	bne.n	8005b24 <OSTmr_Unlink+0x54>
        ptmr1              = (OS_TMR *)ptmr->OSTmrNext;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	68db      	ldr	r3, [r3, #12]
 8005b0e:	60fb      	str	r3, [r7, #12]
        pspoke->OSTmrFirst = (OS_TMR *)ptmr1;
 8005b10:	693b      	ldr	r3, [r7, #16]
 8005b12:	68fa      	ldr	r2, [r7, #12]
 8005b14:	601a      	str	r2, [r3, #0]
        if (ptmr1 != (OS_TMR *)0) {
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d012      	beq.n	8005b42 <OSTmr_Unlink+0x72>
            ptmr1->OSTmrPrev = (void *)0;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	2200      	movs	r2, #0
 8005b20:	611a      	str	r2, [r3, #16]
 8005b22:	e00e      	b.n	8005b42 <OSTmr_Unlink+0x72>
        }
    } else {
        ptmr1            = (OS_TMR *)ptmr->OSTmrPrev;       /* Remove timer from somewhere in the list                */
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	691b      	ldr	r3, [r3, #16]
 8005b28:	60fb      	str	r3, [r7, #12]
        ptmr2            = (OS_TMR *)ptmr->OSTmrNext;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	68db      	ldr	r3, [r3, #12]
 8005b2e:	60bb      	str	r3, [r7, #8]
        ptmr1->OSTmrNext = ptmr2;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	68ba      	ldr	r2, [r7, #8]
 8005b34:	60da      	str	r2, [r3, #12]
        if (ptmr2 != (OS_TMR *)0) {
 8005b36:	68bb      	ldr	r3, [r7, #8]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d002      	beq.n	8005b42 <OSTmr_Unlink+0x72>
            ptmr2->OSTmrPrev = (void *)ptmr1;
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	68fa      	ldr	r2, [r7, #12]
 8005b40:	611a      	str	r2, [r3, #16]
        }
    }
    ptmr->OSTmrState = OS_TMR_STATE_STOPPED;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2201      	movs	r2, #1
 8005b46:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    ptmr->OSTmrNext  = (void *)0;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	60da      	str	r2, [r3, #12]
    ptmr->OSTmrPrev  = (void *)0;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2200      	movs	r2, #0
 8005b54:	611a      	str	r2, [r3, #16]
    pspoke->OSTmrEntries--;
 8005b56:	693b      	ldr	r3, [r7, #16]
 8005b58:	889b      	ldrh	r3, [r3, #4]
 8005b5a:	3b01      	subs	r3, #1
 8005b5c:	b29a      	uxth	r2, r3
 8005b5e:	693b      	ldr	r3, [r7, #16]
 8005b60:	809a      	strh	r2, [r3, #4]
}
 8005b62:	bf00      	nop
 8005b64:	371c      	adds	r7, #28
 8005b66:	46bd      	mov	sp, r7
 8005b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6c:	4770      	bx	lr
 8005b6e:	bf00      	nop
 8005b70:	24924925 	.word	0x24924925
 8005b74:	200020b0 	.word	0x200020b0

08005b78 <OSTmr_Task>:
*********************************************************************************************************
*/

#if OS_TMR_EN > 0u
static  void  OSTmr_Task (void *p_arg)
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b088      	sub	sp, #32
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
    INT16U           spoke;


    p_arg = p_arg;                                               /* Prevent compiler warning for not using 'p_arg'    */
    for (;;) {
        OSSemPend(OSTmrSemSignal, 0u, &err);                     /* Wait for signal indicating time to update timers  */
 8005b80:	4b2a      	ldr	r3, [pc, #168]	@ (8005c2c <OSTmr_Task+0xb4>)
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f107 020b 	add.w	r2, r7, #11
 8005b88:	2100      	movs	r1, #0
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	f7ff fa60 	bl	8005050 <OSSemPend>
        OSSchedLock();
 8005b90:	f7fd ff88 	bl	8003aa4 <OSSchedLock>
        OSTmrTime++;                                             /* Increment the current time                        */
 8005b94:	4b26      	ldr	r3, [pc, #152]	@ (8005c30 <OSTmr_Task+0xb8>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	3301      	adds	r3, #1
 8005b9a:	4a25      	ldr	r2, [pc, #148]	@ (8005c30 <OSTmr_Task+0xb8>)
 8005b9c:	6013      	str	r3, [r2, #0]
        spoke  = (INT16U)(OSTmrTime % OS_TMR_CFG_WHEEL_SIZE);    /* Position on current timer wheel entry             */
 8005b9e:	4b24      	ldr	r3, [pc, #144]	@ (8005c30 <OSTmr_Task+0xb8>)
 8005ba0:	681a      	ldr	r2, [r3, #0]
 8005ba2:	4b24      	ldr	r3, [pc, #144]	@ (8005c34 <OSTmr_Task+0xbc>)
 8005ba4:	fba3 1302 	umull	r1, r3, r3, r2
 8005ba8:	1ad1      	subs	r1, r2, r3
 8005baa:	0849      	lsrs	r1, r1, #1
 8005bac:	440b      	add	r3, r1
 8005bae:	0899      	lsrs	r1, r3, #2
 8005bb0:	460b      	mov	r3, r1
 8005bb2:	00db      	lsls	r3, r3, #3
 8005bb4:	1a5b      	subs	r3, r3, r1
 8005bb6:	1ad1      	subs	r1, r2, r3
 8005bb8:	460b      	mov	r3, r1
 8005bba:	837b      	strh	r3, [r7, #26]
        pspoke = &OSTmrWheelTbl[spoke];
 8005bbc:	8b7b      	ldrh	r3, [r7, #26]
 8005bbe:	00db      	lsls	r3, r3, #3
 8005bc0:	4a1d      	ldr	r2, [pc, #116]	@ (8005c38 <OSTmr_Task+0xc0>)
 8005bc2:	4413      	add	r3, r2
 8005bc4:	617b      	str	r3, [r7, #20]
        ptmr   = pspoke->OSTmrFirst;
 8005bc6:	697b      	ldr	r3, [r7, #20]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	61fb      	str	r3, [r7, #28]
        while (ptmr != (OS_TMR *)0) {
 8005bcc:	e027      	b.n	8005c1e <OSTmr_Task+0xa6>
            ptmr_next = (OS_TMR *)ptmr->OSTmrNext;               /* Point to next timer to update because current ... */
 8005bce:	69fb      	ldr	r3, [r7, #28]
 8005bd0:	68db      	ldr	r3, [r3, #12]
 8005bd2:	613b      	str	r3, [r7, #16]
                                                                 /* ... timer could get unlinked from the wheel.      */
            if (OSTmrTime == ptmr->OSTmrMatch) {                 /* Process each timer that expires                   */
 8005bd4:	69fb      	ldr	r3, [r7, #28]
 8005bd6:	695a      	ldr	r2, [r3, #20]
 8005bd8:	4b15      	ldr	r3, [pc, #84]	@ (8005c30 <OSTmr_Task+0xb8>)
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	429a      	cmp	r2, r3
 8005bde:	d11c      	bne.n	8005c1a <OSTmr_Task+0xa2>
                OS_TRACE_TMR_EXPIRED(ptmr);
                OSTmr_Unlink(ptmr);                              /* Remove from current wheel spoke                   */
 8005be0:	69f8      	ldr	r0, [r7, #28]
 8005be2:	f7ff ff75 	bl	8005ad0 <OSTmr_Unlink>
                if (ptmr->OSTmrOpt == OS_TMR_OPT_PERIODIC) {
 8005be6:	69fb      	ldr	r3, [r7, #28]
 8005be8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005bec:	2b02      	cmp	r3, #2
 8005bee:	d104      	bne.n	8005bfa <OSTmr_Task+0x82>
                    OSTmr_Link(ptmr, OS_TMR_LINK_PERIODIC);      /* Recalculate new position of timer in wheel        */
 8005bf0:	2101      	movs	r1, #1
 8005bf2:	69f8      	ldr	r0, [r7, #28]
 8005bf4:	f7ff ff00 	bl	80059f8 <OSTmr_Link>
 8005bf8:	e003      	b.n	8005c02 <OSTmr_Task+0x8a>
                } else {
                    ptmr->OSTmrState = OS_TMR_STATE_COMPLETED;   /* Indicate that the timer has completed             */
 8005bfa:	69fb      	ldr	r3, [r7, #28]
 8005bfc:	2202      	movs	r2, #2
 8005bfe:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
                }
                pfnct = ptmr->OSTmrCallback;                     /* Execute callback function if available            */
 8005c02:	69fb      	ldr	r3, [r7, #28]
 8005c04:	685b      	ldr	r3, [r3, #4]
 8005c06:	60fb      	str	r3, [r7, #12]
                if (pfnct != (OS_TMR_CALLBACK)0) {
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d005      	beq.n	8005c1a <OSTmr_Task+0xa2>
                    (*pfnct)((void *)ptmr, ptmr->OSTmrCallbackArg);
 8005c0e:	69fb      	ldr	r3, [r7, #28]
 8005c10:	689a      	ldr	r2, [r3, #8]
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	4611      	mov	r1, r2
 8005c16:	69f8      	ldr	r0, [r7, #28]
 8005c18:	4798      	blx	r3
                }
            }
            ptmr = ptmr_next;
 8005c1a:	693b      	ldr	r3, [r7, #16]
 8005c1c:	61fb      	str	r3, [r7, #28]
        while (ptmr != (OS_TMR *)0) {
 8005c1e:	69fb      	ldr	r3, [r7, #28]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d1d4      	bne.n	8005bce <OSTmr_Task+0x56>
        }
        OSSchedUnlock();
 8005c24:	f7fd ff66 	bl	8003af4 <OSSchedUnlock>
        OSSemPend(OSTmrSemSignal, 0u, &err);                     /* Wait for signal indicating time to update timers  */
 8005c28:	e7aa      	b.n	8005b80 <OSTmr_Task+0x8>
 8005c2a:	bf00      	nop
 8005c2c:	20001c28 	.word	0x20001c28
 8005c30:	20001c20 	.word	0x20001c20
 8005c34:	24924925 	.word	0x24924925
 8005c38:	200020b0 	.word	0x200020b0

08005c3c <memset>:
 8005c3c:	4402      	add	r2, r0
 8005c3e:	4603      	mov	r3, r0
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d100      	bne.n	8005c46 <memset+0xa>
 8005c44:	4770      	bx	lr
 8005c46:	f803 1b01 	strb.w	r1, [r3], #1
 8005c4a:	e7f9      	b.n	8005c40 <memset+0x4>

08005c4c <__libc_init_array>:
 8005c4c:	b570      	push	{r4, r5, r6, lr}
 8005c4e:	4d0d      	ldr	r5, [pc, #52]	@ (8005c84 <__libc_init_array+0x38>)
 8005c50:	4c0d      	ldr	r4, [pc, #52]	@ (8005c88 <__libc_init_array+0x3c>)
 8005c52:	1b64      	subs	r4, r4, r5
 8005c54:	10a4      	asrs	r4, r4, #2
 8005c56:	2600      	movs	r6, #0
 8005c58:	42a6      	cmp	r6, r4
 8005c5a:	d109      	bne.n	8005c70 <__libc_init_array+0x24>
 8005c5c:	4d0b      	ldr	r5, [pc, #44]	@ (8005c8c <__libc_init_array+0x40>)
 8005c5e:	4c0c      	ldr	r4, [pc, #48]	@ (8005c90 <__libc_init_array+0x44>)
 8005c60:	f000 f818 	bl	8005c94 <_init>
 8005c64:	1b64      	subs	r4, r4, r5
 8005c66:	10a4      	asrs	r4, r4, #2
 8005c68:	2600      	movs	r6, #0
 8005c6a:	42a6      	cmp	r6, r4
 8005c6c:	d105      	bne.n	8005c7a <__libc_init_array+0x2e>
 8005c6e:	bd70      	pop	{r4, r5, r6, pc}
 8005c70:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c74:	4798      	blx	r3
 8005c76:	3601      	adds	r6, #1
 8005c78:	e7ee      	b.n	8005c58 <__libc_init_array+0xc>
 8005c7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c7e:	4798      	blx	r3
 8005c80:	3601      	adds	r6, #1
 8005c82:	e7f2      	b.n	8005c6a <__libc_init_array+0x1e>
 8005c84:	08005ee0 	.word	0x08005ee0
 8005c88:	08005ee0 	.word	0x08005ee0
 8005c8c:	08005ee0 	.word	0x08005ee0
 8005c90:	08005ee4 	.word	0x08005ee4

08005c94 <_init>:
 8005c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c96:	bf00      	nop
 8005c98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c9a:	bc08      	pop	{r3}
 8005c9c:	469e      	mov	lr, r3
 8005c9e:	4770      	bx	lr

08005ca0 <_fini>:
 8005ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ca2:	bf00      	nop
 8005ca4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ca6:	bc08      	pop	{r3}
 8005ca8:	469e      	mov	lr, r3
 8005caa:	4770      	bx	lr
