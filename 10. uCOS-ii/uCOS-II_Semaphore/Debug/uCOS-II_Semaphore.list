
uCOS-II_Semaphore.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a84  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002d0  08006c14  08006c14  00007c14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006ee4  08006ee4  00008068  2**0
                  CONTENTS
  4 .ARM          00000008  08006ee4  08006ee4  00007ee4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006eec  08006eec  00008068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006eec  08006eec  00007eec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006ef0  08006ef0  00007ef0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08006ef4  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002a30  20000068  08006f5c  00008068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002a98  08006f5c  00008a98  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011dbd  00000000  00000000  00008098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000032da  00000000  00000000  00019e55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ef8  00000000  00000000  0001d130  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b45  00000000  00000000  0001e028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029f10  00000000  00000000  0001eb6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000155aa  00000000  00000000  00048a7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000edd27  00000000  00000000  0005e027  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014bd4e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000041d8  00000000  00000000  0014bd94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000009a  00000000  00000000  0014ff6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006bfc 	.word	0x08006bfc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08006bfc 	.word	0x08006bfc

080001d0 <OS_CPU_FP_Reg_Push>:

#if (defined(__VFP_FP__) && !defined(__SOFTFP__))

.thumb_func
OS_CPU_FP_Reg_Push:
    MRS     R1, PSP                                             @ PSP is process stack pointer
 80001d0:	f3ef 8109 	mrs	r1, PSP
    CBZ     R1, OS_CPU_FP_nosave                                @ Skip FP register save the first time
 80001d4:	b121      	cbz	r1, 80001e0 <OS_CPU_FP_nosave>

    VSTMDB  R0!, {S16-S31}
 80001d6:	ed20 8a10 	vstmdb	r0!, {s16-s31}
    LDR     R1, =OSTCBCur
 80001da:	4951      	ldr	r1, [pc, #324]	@ (8000320 <OS_CPU_PendSVHandler+0x7a>)
    LDR     R2, [R1]
 80001dc:	680a      	ldr	r2, [r1, #0]
    STR     R0, [R2]
 80001de:	6010      	str	r0, [r2, #0]

080001e0 <OS_CPU_FP_nosave>:
OS_CPU_FP_nosave:
    BX      LR
 80001e0:	4770      	bx	lr

080001e2 <OS_CPU_FP_Reg_Pop>:

#if (defined(__VFP_FP__) && !defined(__SOFTFP__))

.thumb_func
OS_CPU_FP_Reg_Pop:
    VLDMIA  R0!, {S16-S31}
 80001e2:	ecb0 8a10 	vldmia	r0!, {s16-s31}
    LDR     R1, =OSTCBHighRdy
 80001e6:	494f      	ldr	r1, [pc, #316]	@ (8000324 <OS_CPU_PendSVHandler+0x7e>)
    LDR     R2, [R1]
 80001e8:	680a      	ldr	r2, [r1, #0]
    STR     R0, [R2]
 80001ea:	6010      	str	r0, [r2, #0]
    BX      LR
 80001ec:	4770      	bx	lr

080001ee <OS_CPU_SR_Save>:
@                      CPSIE i
@********************************************************************************************************

.thumb_func
OS_CPU_SR_Save:
    CPSID   I                                   @ Cortex-M7 errata notice. See Note #2
 80001ee:	b672      	cpsid	i
    PUSH   {R1}
 80001f0:	b402      	push	{r1}
    MRS     R1, BASEPRI
 80001f2:	f3ef 8111 	mrs	r1, BASEPRI
    MSR     BASEPRI, R0
 80001f6:	f380 8811 	msr	BASEPRI, r0
    DSB
 80001fa:	f3bf 8f4f 	dsb	sy
    ISB
 80001fe:	f3bf 8f6f 	isb	sy
    MOV     R0, R1
 8000202:	4608      	mov	r0, r1
    POP    {R1}
 8000204:	bc02      	pop	{r1}
    CPSIE   I
 8000206:	b662      	cpsie	i
    BX      LR
 8000208:	4770      	bx	lr

0800020a <OS_CPU_SR_Restore>:

.thumb_func
OS_CPU_SR_Restore:
    CPSID   I                                   @ Cortex-M7 errata notice. See Note #2
 800020a:	b672      	cpsid	i
    MSR     BASEPRI, R0
 800020c:	f380 8811 	msr	BASEPRI, r0
    DSB
 8000210:	f3bf 8f4f 	dsb	sy
    ISB
 8000214:	f3bf 8f6f 	isb	sy
    CPSIE   I
 8000218:	b662      	cpsie	i
    BX      LR
 800021a:	4770      	bx	lr

0800021c <OSStartHighRdy>:
@              i) Enable interrupts (tasks will run with interrupts enabled).
@********************************************************************************************************

.thumb_func
OSStartHighRdy:
    CPSID   I                                                   @ Prevent interruption during context switch
 800021c:	b672      	cpsid	i
    MOVW    R0, #:lower16:NVIC_SYSPRI14                         @ Set the PendSV exception priority
 800021e:	f64e 5022 	movw	r0, #60706	@ 0xed22
    MOVT    R0, #:upper16:NVIC_SYSPRI14
 8000222:	f2ce 0000 	movt	r0, #57344	@ 0xe000

    MOVW    R1, #:lower16:NVIC_PENDSV_PRI
 8000226:	f240 01ff 	movw	r1, #255	@ 0xff
    MOVT    R1, #:upper16:NVIC_PENDSV_PRI
 800022a:	f2c0 0100 	movt	r1, #0
    STRB    R1, [R0]
 800022e:	7001      	strb	r1, [r0, #0]

    MOVS    R0, #0                                              @ Set the PSP to 0 for initial context switch call
 8000230:	2000      	movs	r0, #0
    MSR     PSP, R0
 8000232:	f380 8809 	msr	PSP, r0

    MOVW    R0, #:lower16:OS_CPU_ExceptStkBase                  @ Initialize the MSP to the OS_CPU_ExceptStkBase
 8000236:	f241 501c 	movw	r0, #5404	@ 0x151c
    MOVT    R0, #:upper16:OS_CPU_ExceptStkBase
 800023a:	f2c2 0000 	movt	r0, #8192	@ 0x2000
    LDR     R1, [R0]
 800023e:	6801      	ldr	r1, [r0, #0]
    MSR     MSP, R1
 8000240:	f381 8808 	msr	MSP, r1

    BL      OSTaskSwHook                                        @ Call OSTaskSwHook() for FPU Push & Pop
 8000244:	f003 fcf2 	bl	8003c2c <OSTaskSwHook>

    LDR     R0, =OSRunning                                      @ OSRunning = TRUE
 8000248:	4837      	ldr	r0, [pc, #220]	@ (8000328 <OS_CPU_PendSVHandler+0x82>)
    MOVS    R1, #1
 800024a:	2101      	movs	r1, #1
    STRB    R1, [R0]
 800024c:	7001      	strb	r1, [r0, #0]

    MOVW    R0, #:lower16:OSPrioCur                             @ OSPrioCur   = OSPrioHighRdy;
 800024e:	f641 0086 	movw	r0, #6278	@ 0x1886
    MOVT    R0, #:upper16:OSPrioCur
 8000252:	f2c2 0000 	movt	r0, #8192	@ 0x2000
    MOVW    R1, #:lower16:OSPrioHighRdy
 8000256:	f641 0187 	movw	r1, #6279	@ 0x1887
    MOVT    R1, #:upper16:OSPrioHighRdy
 800025a:	f2c2 0100 	movt	r1, #8192	@ 0x2000
    LDRB    R2, [R1]
 800025e:	780a      	ldrb	r2, [r1, #0]
    STRB    R2, [R0]
 8000260:	7002      	strb	r2, [r0, #0]

    MOVW    R0, #:lower16:OSTCBCur                              @ OSTCBCur  = OSTCBHighRdy;
 8000262:	f641 209c 	movw	r0, #6812	@ 0x1a9c
    MOVT    R0, #:upper16:OSTCBCur
 8000266:	f2c2 0000 	movt	r0, #8192	@ 0x2000
    MOVW    R1, #:lower16:OSTCBHighRdy
 800026a:	f641 21a4 	movw	r1, #6820	@ 0x1aa4
    MOVT    R1, #:upper16:OSTCBHighRdy
 800026e:	f2c2 0100 	movt	r1, #8192	@ 0x2000
    LDR     R2, [R1]
 8000272:	680a      	ldr	r2, [r1, #0]
    STR     R2, [R0]
 8000274:	6002      	str	r2, [r0, #0]

    LDR     R0, [R2]                                            @ R0 is new process SP; SP = OSTCBHighRdy->OSTCBStkPtr;
 8000276:	6810      	ldr	r0, [r2, #0]
    MSR     PSP, R0                                             @ Load PSP with new process SP
 8000278:	f380 8809 	msr	PSP, r0

    MRS     R0, CONTROL
 800027c:	f3ef 8014 	mrs	r0, CONTROL
    ORR     R0, R0, #2
 8000280:	f040 0002 	orr.w	r0, r0, #2
    MSR     CONTROL, R0
 8000284:	f380 8814 	msr	CONTROL, r0
    ISB                                                         @ Sync instruction stream
 8000288:	f3bf 8f6f 	isb	sy

    LDMFD    SP!, {R4-R11, LR}                                  @ Restore r4-11, lr from new process stack
 800028c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    LDMFD    SP!, {R0-R3}                                       @ Restore r0, r3
 8000290:	bc0f      	pop	{r0, r1, r2, r3}
    LDMFD    SP!, {R12, LR}                                     @ Load R12 and LR
 8000292:	e8bd 5000 	ldmia.w	sp!, {ip, lr}
    LDMFD    SP!, {R1, R2}                                      @ Load PC and discard xPSR
 8000296:	bc06      	pop	{r1, r2}
    CPSIE    I
 8000298:	b662      	cpsie	i
    BX       R1
 800029a:	4708      	bx	r1

0800029c <OSCtxSw>:
@********************************************************************************************************

.thumb_func
OSCtxSw:
OSIntCtxSw:
    LDR     R0, =NVIC_INT_CTRL                                  @ Trigger the PendSV exception (causes context switch)
 800029c:	4823      	ldr	r0, [pc, #140]	@ (800032c <OS_CPU_PendSVHandler+0x86>)
    LDR     R1, =NVIC_PENDSVSET
 800029e:	f04f 5180 	mov.w	r1, #268435456	@ 0x10000000
    STR     R1, [R0]
 80002a2:	6001      	str	r1, [r0, #0]
    BX      LR
 80002a4:	4770      	bx	lr

080002a6 <OS_CPU_PendSVHandler>:
@                  CPSIE i
@********************************************************************************************************

.thumb_func
OS_CPU_PendSVHandler:
    CPSID   I                                                   @ Cortex-M7 errata notice. See Note #5
 80002a6:	b672      	cpsid	i
    MOVW    R2, #:lower16:OS_KA_BASEPRI_Boundary                @ Set BASEPRI priority level required for exception preemption
 80002a8:	f241 5224 	movw	r2, #5412	@ 0x1524
    MOVT    R2, #:upper16:OS_KA_BASEPRI_Boundary
 80002ac:	f2c2 0200 	movt	r2, #8192	@ 0x2000
    LDR     R1, [R2]
 80002b0:	6811      	ldr	r1, [r2, #0]
    MSR     BASEPRI, R1
 80002b2:	f381 8811 	msr	BASEPRI, r1
    DSB
 80002b6:	f3bf 8f4f 	dsb	sy
    ISB
 80002ba:	f3bf 8f6f 	isb	sy
    CPSIE   I
 80002be:	b662      	cpsie	i

    MRS     R0, PSP                                             @ PSP is process stack pointer
 80002c0:	f3ef 8009 	mrs	r0, PSP
    STMFD   R0!, {R4-R11, R14}                                  @ Save remaining regs r4-11, R14 on process stack
 80002c4:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    MOVW    R5, #:lower16:OSTCBCur                              @ OSTCBCur->OSTCBStkPtr = SP;
 80002c8:	f641 259c 	movw	r5, #6812	@ 0x1a9c
    MOVT    R5, #:upper16:OSTCBCur
 80002cc:	f2c2 0500 	movt	r5, #8192	@ 0x2000
    LDR     R1, [R5]
 80002d0:	6829      	ldr	r1, [r5, #0]
    STR     R0, [R1]                                            @ R0 is SP of process being switched out
 80002d2:	6008      	str	r0, [r1, #0]

                                                                @ At this point, entire context of process has been saved
    MOV     R4, LR                                              @ Save LR exc_return value
 80002d4:	4674      	mov	r4, lr
    BL      OSTaskSwHook                                        @ Call OSTaskSwHook() for FPU Push & Pop
 80002d6:	f003 fca9 	bl	8003c2c <OSTaskSwHook>

    MOVW    R0, #:lower16:OSPrioCur                             @ OSPrioCur   = OSPrioHighRdy;
 80002da:	f641 0086 	movw	r0, #6278	@ 0x1886
    MOVT    R0, #:upper16:OSPrioCur
 80002de:	f2c2 0000 	movt	r0, #8192	@ 0x2000
    MOVW    R1, #:lower16:OSPrioHighRdy
 80002e2:	f641 0187 	movw	r1, #6279	@ 0x1887
    MOVT    R1, #:upper16:OSPrioHighRdy
 80002e6:	f2c2 0100 	movt	r1, #8192	@ 0x2000
    LDRB    R2, [R1]
 80002ea:	780a      	ldrb	r2, [r1, #0]
    STRB    R2, [R0]
 80002ec:	7002      	strb	r2, [r0, #0]

    MOVW    R1, #:lower16:OSTCBHighRdy                          @ OSTCBCur  = OSTCBHighRdy;
 80002ee:	f641 21a4 	movw	r1, #6820	@ 0x1aa4
    MOVT    R1, #:upper16:OSTCBHighRdy
 80002f2:	f2c2 0100 	movt	r1, #8192	@ 0x2000
    LDR     R2, [R1]
 80002f6:	680a      	ldr	r2, [r1, #0]
    STR     R2, [R5]
 80002f8:	602a      	str	r2, [r5, #0]

    ORR     LR,  R4, #0x04                                      @ Ensure exception return uses process stack
 80002fa:	f044 0e04 	orr.w	lr, r4, #4
    LDR     R0,  [R2]                                           @ R0 is new process SP; SP = OSTCBHighRdy->OSTCBStkPtr;
 80002fe:	6810      	ldr	r0, [r2, #0]
    LDMFD   R0!, {R4-R11, R14}                                  @ Restore r4-11, R14 from new process stack
 8000300:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    MSR     PSP, R0                                             @ Load PSP with new process SP
 8000304:	f380 8809 	msr	PSP, r0

    MOV     R2, #0                                              @ Restore BASEPRI priority level to 0
 8000308:	f04f 0200 	mov.w	r2, #0
    CPSID   I
 800030c:	b672      	cpsid	i
    MSR     BASEPRI, R2
 800030e:	f382 8811 	msr	BASEPRI, r2
    DSB
 8000312:	f3bf 8f4f 	dsb	sy
    ISB
 8000316:	f3bf 8f6f 	isb	sy
    CPSIE   I
 800031a:	b662      	cpsie	i
    BX      LR                                                  @ Exception return will restore remaining context
 800031c:	4770      	bx	lr
 800031e:	0000      	.short	0x0000
    LDR     R1, =OSTCBCur
 8000320:	20001a9c 	.word	0x20001a9c
    LDR     R1, =OSTCBHighRdy
 8000324:	20001aa4 	.word	0x20001aa4
    LDR     R0, =OSRunning                                      @ OSRunning = TRUE
 8000328:	20001894 	.word	0x20001894
    LDR     R0, =NVIC_INT_CTRL                                  @ Trigger the PendSV exception (causes context switch)
 800032c:	e000ed04 	.word	0xe000ed04

08000330 <strlen>:
 8000330:	4603      	mov	r3, r0
 8000332:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000336:	2a00      	cmp	r2, #0
 8000338:	d1fb      	bne.n	8000332 <strlen+0x2>
 800033a:	1a18      	subs	r0, r3, r0
 800033c:	3801      	subs	r0, #1
 800033e:	4770      	bx	lr

08000340 <memchr>:
 8000340:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000344:	2a10      	cmp	r2, #16
 8000346:	db2b      	blt.n	80003a0 <memchr+0x60>
 8000348:	f010 0f07 	tst.w	r0, #7
 800034c:	d008      	beq.n	8000360 <memchr+0x20>
 800034e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000352:	3a01      	subs	r2, #1
 8000354:	428b      	cmp	r3, r1
 8000356:	d02d      	beq.n	80003b4 <memchr+0x74>
 8000358:	f010 0f07 	tst.w	r0, #7
 800035c:	b342      	cbz	r2, 80003b0 <memchr+0x70>
 800035e:	d1f6      	bne.n	800034e <memchr+0xe>
 8000360:	b4f0      	push	{r4, r5, r6, r7}
 8000362:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000366:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800036a:	f022 0407 	bic.w	r4, r2, #7
 800036e:	f07f 0700 	mvns.w	r7, #0
 8000372:	2300      	movs	r3, #0
 8000374:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000378:	3c08      	subs	r4, #8
 800037a:	ea85 0501 	eor.w	r5, r5, r1
 800037e:	ea86 0601 	eor.w	r6, r6, r1
 8000382:	fa85 f547 	uadd8	r5, r5, r7
 8000386:	faa3 f587 	sel	r5, r3, r7
 800038a:	fa86 f647 	uadd8	r6, r6, r7
 800038e:	faa5 f687 	sel	r6, r5, r7
 8000392:	b98e      	cbnz	r6, 80003b8 <memchr+0x78>
 8000394:	d1ee      	bne.n	8000374 <memchr+0x34>
 8000396:	bcf0      	pop	{r4, r5, r6, r7}
 8000398:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800039c:	f002 0207 	and.w	r2, r2, #7
 80003a0:	b132      	cbz	r2, 80003b0 <memchr+0x70>
 80003a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80003a6:	3a01      	subs	r2, #1
 80003a8:	ea83 0301 	eor.w	r3, r3, r1
 80003ac:	b113      	cbz	r3, 80003b4 <memchr+0x74>
 80003ae:	d1f8      	bne.n	80003a2 <memchr+0x62>
 80003b0:	2000      	movs	r0, #0
 80003b2:	4770      	bx	lr
 80003b4:	3801      	subs	r0, #1
 80003b6:	4770      	bx	lr
 80003b8:	2d00      	cmp	r5, #0
 80003ba:	bf06      	itte	eq
 80003bc:	4635      	moveq	r5, r6
 80003be:	3803      	subeq	r0, #3
 80003c0:	3807      	subne	r0, #7
 80003c2:	f015 0f01 	tst.w	r5, #1
 80003c6:	d107      	bne.n	80003d8 <memchr+0x98>
 80003c8:	3001      	adds	r0, #1
 80003ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80003ce:	bf02      	ittt	eq
 80003d0:	3001      	addeq	r0, #1
 80003d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003d6:	3001      	addeq	r0, #1
 80003d8:	bcf0      	pop	{r4, r5, r6, r7}
 80003da:	3801      	subs	r0, #1
 80003dc:	4770      	bx	lr
 80003de:	bf00      	nop

080003e0 <__aeabi_uldivmod>:
 80003e0:	b953      	cbnz	r3, 80003f8 <__aeabi_uldivmod+0x18>
 80003e2:	b94a      	cbnz	r2, 80003f8 <__aeabi_uldivmod+0x18>
 80003e4:	2900      	cmp	r1, #0
 80003e6:	bf08      	it	eq
 80003e8:	2800      	cmpeq	r0, #0
 80003ea:	bf1c      	itt	ne
 80003ec:	f04f 31ff 	movne.w	r1, #4294967295
 80003f0:	f04f 30ff 	movne.w	r0, #4294967295
 80003f4:	f000 b96a 	b.w	80006cc <__aeabi_idiv0>
 80003f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000400:	f000 f806 	bl	8000410 <__udivmoddi4>
 8000404:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000408:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800040c:	b004      	add	sp, #16
 800040e:	4770      	bx	lr

08000410 <__udivmoddi4>:
 8000410:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000414:	9d08      	ldr	r5, [sp, #32]
 8000416:	460c      	mov	r4, r1
 8000418:	2b00      	cmp	r3, #0
 800041a:	d14e      	bne.n	80004ba <__udivmoddi4+0xaa>
 800041c:	4694      	mov	ip, r2
 800041e:	458c      	cmp	ip, r1
 8000420:	4686      	mov	lr, r0
 8000422:	fab2 f282 	clz	r2, r2
 8000426:	d962      	bls.n	80004ee <__udivmoddi4+0xde>
 8000428:	b14a      	cbz	r2, 800043e <__udivmoddi4+0x2e>
 800042a:	f1c2 0320 	rsb	r3, r2, #32
 800042e:	4091      	lsls	r1, r2
 8000430:	fa20 f303 	lsr.w	r3, r0, r3
 8000434:	fa0c fc02 	lsl.w	ip, ip, r2
 8000438:	4319      	orrs	r1, r3
 800043a:	fa00 fe02 	lsl.w	lr, r0, r2
 800043e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000442:	fa1f f68c 	uxth.w	r6, ip
 8000446:	fbb1 f4f7 	udiv	r4, r1, r7
 800044a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800044e:	fb07 1114 	mls	r1, r7, r4, r1
 8000452:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000456:	fb04 f106 	mul.w	r1, r4, r6
 800045a:	4299      	cmp	r1, r3
 800045c:	d90a      	bls.n	8000474 <__udivmoddi4+0x64>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f104 30ff 	add.w	r0, r4, #4294967295
 8000466:	f080 8112 	bcs.w	800068e <__udivmoddi4+0x27e>
 800046a:	4299      	cmp	r1, r3
 800046c:	f240 810f 	bls.w	800068e <__udivmoddi4+0x27e>
 8000470:	3c02      	subs	r4, #2
 8000472:	4463      	add	r3, ip
 8000474:	1a59      	subs	r1, r3, r1
 8000476:	fa1f f38e 	uxth.w	r3, lr
 800047a:	fbb1 f0f7 	udiv	r0, r1, r7
 800047e:	fb07 1110 	mls	r1, r7, r0, r1
 8000482:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000486:	fb00 f606 	mul.w	r6, r0, r6
 800048a:	429e      	cmp	r6, r3
 800048c:	d90a      	bls.n	80004a4 <__udivmoddi4+0x94>
 800048e:	eb1c 0303 	adds.w	r3, ip, r3
 8000492:	f100 31ff 	add.w	r1, r0, #4294967295
 8000496:	f080 80fc 	bcs.w	8000692 <__udivmoddi4+0x282>
 800049a:	429e      	cmp	r6, r3
 800049c:	f240 80f9 	bls.w	8000692 <__udivmoddi4+0x282>
 80004a0:	4463      	add	r3, ip
 80004a2:	3802      	subs	r0, #2
 80004a4:	1b9b      	subs	r3, r3, r6
 80004a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80004aa:	2100      	movs	r1, #0
 80004ac:	b11d      	cbz	r5, 80004b6 <__udivmoddi4+0xa6>
 80004ae:	40d3      	lsrs	r3, r2
 80004b0:	2200      	movs	r2, #0
 80004b2:	e9c5 3200 	strd	r3, r2, [r5]
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	428b      	cmp	r3, r1
 80004bc:	d905      	bls.n	80004ca <__udivmoddi4+0xba>
 80004be:	b10d      	cbz	r5, 80004c4 <__udivmoddi4+0xb4>
 80004c0:	e9c5 0100 	strd	r0, r1, [r5]
 80004c4:	2100      	movs	r1, #0
 80004c6:	4608      	mov	r0, r1
 80004c8:	e7f5      	b.n	80004b6 <__udivmoddi4+0xa6>
 80004ca:	fab3 f183 	clz	r1, r3
 80004ce:	2900      	cmp	r1, #0
 80004d0:	d146      	bne.n	8000560 <__udivmoddi4+0x150>
 80004d2:	42a3      	cmp	r3, r4
 80004d4:	d302      	bcc.n	80004dc <__udivmoddi4+0xcc>
 80004d6:	4290      	cmp	r0, r2
 80004d8:	f0c0 80f0 	bcc.w	80006bc <__udivmoddi4+0x2ac>
 80004dc:	1a86      	subs	r6, r0, r2
 80004de:	eb64 0303 	sbc.w	r3, r4, r3
 80004e2:	2001      	movs	r0, #1
 80004e4:	2d00      	cmp	r5, #0
 80004e6:	d0e6      	beq.n	80004b6 <__udivmoddi4+0xa6>
 80004e8:	e9c5 6300 	strd	r6, r3, [r5]
 80004ec:	e7e3      	b.n	80004b6 <__udivmoddi4+0xa6>
 80004ee:	2a00      	cmp	r2, #0
 80004f0:	f040 8090 	bne.w	8000614 <__udivmoddi4+0x204>
 80004f4:	eba1 040c 	sub.w	r4, r1, ip
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa1f f78c 	uxth.w	r7, ip
 8000500:	2101      	movs	r1, #1
 8000502:	fbb4 f6f8 	udiv	r6, r4, r8
 8000506:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800050a:	fb08 4416 	mls	r4, r8, r6, r4
 800050e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000512:	fb07 f006 	mul.w	r0, r7, r6
 8000516:	4298      	cmp	r0, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x11c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000522:	d202      	bcs.n	800052a <__udivmoddi4+0x11a>
 8000524:	4298      	cmp	r0, r3
 8000526:	f200 80cd 	bhi.w	80006c4 <__udivmoddi4+0x2b4>
 800052a:	4626      	mov	r6, r4
 800052c:	1a1c      	subs	r4, r3, r0
 800052e:	fa1f f38e 	uxth.w	r3, lr
 8000532:	fbb4 f0f8 	udiv	r0, r4, r8
 8000536:	fb08 4410 	mls	r4, r8, r0, r4
 800053a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800053e:	fb00 f707 	mul.w	r7, r0, r7
 8000542:	429f      	cmp	r7, r3
 8000544:	d908      	bls.n	8000558 <__udivmoddi4+0x148>
 8000546:	eb1c 0303 	adds.w	r3, ip, r3
 800054a:	f100 34ff 	add.w	r4, r0, #4294967295
 800054e:	d202      	bcs.n	8000556 <__udivmoddi4+0x146>
 8000550:	429f      	cmp	r7, r3
 8000552:	f200 80b0 	bhi.w	80006b6 <__udivmoddi4+0x2a6>
 8000556:	4620      	mov	r0, r4
 8000558:	1bdb      	subs	r3, r3, r7
 800055a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800055e:	e7a5      	b.n	80004ac <__udivmoddi4+0x9c>
 8000560:	f1c1 0620 	rsb	r6, r1, #32
 8000564:	408b      	lsls	r3, r1
 8000566:	fa22 f706 	lsr.w	r7, r2, r6
 800056a:	431f      	orrs	r7, r3
 800056c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000570:	fa04 f301 	lsl.w	r3, r4, r1
 8000574:	ea43 030c 	orr.w	r3, r3, ip
 8000578:	40f4      	lsrs	r4, r6
 800057a:	fa00 f801 	lsl.w	r8, r0, r1
 800057e:	0c38      	lsrs	r0, r7, #16
 8000580:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000584:	fbb4 fef0 	udiv	lr, r4, r0
 8000588:	fa1f fc87 	uxth.w	ip, r7
 800058c:	fb00 441e 	mls	r4, r0, lr, r4
 8000590:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000594:	fb0e f90c 	mul.w	r9, lr, ip
 8000598:	45a1      	cmp	r9, r4
 800059a:	fa02 f201 	lsl.w	r2, r2, r1
 800059e:	d90a      	bls.n	80005b6 <__udivmoddi4+0x1a6>
 80005a0:	193c      	adds	r4, r7, r4
 80005a2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80005a6:	f080 8084 	bcs.w	80006b2 <__udivmoddi4+0x2a2>
 80005aa:	45a1      	cmp	r9, r4
 80005ac:	f240 8081 	bls.w	80006b2 <__udivmoddi4+0x2a2>
 80005b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80005b4:	443c      	add	r4, r7
 80005b6:	eba4 0409 	sub.w	r4, r4, r9
 80005ba:	fa1f f983 	uxth.w	r9, r3
 80005be:	fbb4 f3f0 	udiv	r3, r4, r0
 80005c2:	fb00 4413 	mls	r4, r0, r3, r4
 80005c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80005ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80005ce:	45a4      	cmp	ip, r4
 80005d0:	d907      	bls.n	80005e2 <__udivmoddi4+0x1d2>
 80005d2:	193c      	adds	r4, r7, r4
 80005d4:	f103 30ff 	add.w	r0, r3, #4294967295
 80005d8:	d267      	bcs.n	80006aa <__udivmoddi4+0x29a>
 80005da:	45a4      	cmp	ip, r4
 80005dc:	d965      	bls.n	80006aa <__udivmoddi4+0x29a>
 80005de:	3b02      	subs	r3, #2
 80005e0:	443c      	add	r4, r7
 80005e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80005e6:	fba0 9302 	umull	r9, r3, r0, r2
 80005ea:	eba4 040c 	sub.w	r4, r4, ip
 80005ee:	429c      	cmp	r4, r3
 80005f0:	46ce      	mov	lr, r9
 80005f2:	469c      	mov	ip, r3
 80005f4:	d351      	bcc.n	800069a <__udivmoddi4+0x28a>
 80005f6:	d04e      	beq.n	8000696 <__udivmoddi4+0x286>
 80005f8:	b155      	cbz	r5, 8000610 <__udivmoddi4+0x200>
 80005fa:	ebb8 030e 	subs.w	r3, r8, lr
 80005fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000602:	fa04 f606 	lsl.w	r6, r4, r6
 8000606:	40cb      	lsrs	r3, r1
 8000608:	431e      	orrs	r6, r3
 800060a:	40cc      	lsrs	r4, r1
 800060c:	e9c5 6400 	strd	r6, r4, [r5]
 8000610:	2100      	movs	r1, #0
 8000612:	e750      	b.n	80004b6 <__udivmoddi4+0xa6>
 8000614:	f1c2 0320 	rsb	r3, r2, #32
 8000618:	fa20 f103 	lsr.w	r1, r0, r3
 800061c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000620:	fa24 f303 	lsr.w	r3, r4, r3
 8000624:	4094      	lsls	r4, r2
 8000626:	430c      	orrs	r4, r1
 8000628:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800062c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000630:	fa1f f78c 	uxth.w	r7, ip
 8000634:	fbb3 f0f8 	udiv	r0, r3, r8
 8000638:	fb08 3110 	mls	r1, r8, r0, r3
 800063c:	0c23      	lsrs	r3, r4, #16
 800063e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000642:	fb00 f107 	mul.w	r1, r0, r7
 8000646:	4299      	cmp	r1, r3
 8000648:	d908      	bls.n	800065c <__udivmoddi4+0x24c>
 800064a:	eb1c 0303 	adds.w	r3, ip, r3
 800064e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000652:	d22c      	bcs.n	80006ae <__udivmoddi4+0x29e>
 8000654:	4299      	cmp	r1, r3
 8000656:	d92a      	bls.n	80006ae <__udivmoddi4+0x29e>
 8000658:	3802      	subs	r0, #2
 800065a:	4463      	add	r3, ip
 800065c:	1a5b      	subs	r3, r3, r1
 800065e:	b2a4      	uxth	r4, r4
 8000660:	fbb3 f1f8 	udiv	r1, r3, r8
 8000664:	fb08 3311 	mls	r3, r8, r1, r3
 8000668:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800066c:	fb01 f307 	mul.w	r3, r1, r7
 8000670:	42a3      	cmp	r3, r4
 8000672:	d908      	bls.n	8000686 <__udivmoddi4+0x276>
 8000674:	eb1c 0404 	adds.w	r4, ip, r4
 8000678:	f101 36ff 	add.w	r6, r1, #4294967295
 800067c:	d213      	bcs.n	80006a6 <__udivmoddi4+0x296>
 800067e:	42a3      	cmp	r3, r4
 8000680:	d911      	bls.n	80006a6 <__udivmoddi4+0x296>
 8000682:	3902      	subs	r1, #2
 8000684:	4464      	add	r4, ip
 8000686:	1ae4      	subs	r4, r4, r3
 8000688:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800068c:	e739      	b.n	8000502 <__udivmoddi4+0xf2>
 800068e:	4604      	mov	r4, r0
 8000690:	e6f0      	b.n	8000474 <__udivmoddi4+0x64>
 8000692:	4608      	mov	r0, r1
 8000694:	e706      	b.n	80004a4 <__udivmoddi4+0x94>
 8000696:	45c8      	cmp	r8, r9
 8000698:	d2ae      	bcs.n	80005f8 <__udivmoddi4+0x1e8>
 800069a:	ebb9 0e02 	subs.w	lr, r9, r2
 800069e:	eb63 0c07 	sbc.w	ip, r3, r7
 80006a2:	3801      	subs	r0, #1
 80006a4:	e7a8      	b.n	80005f8 <__udivmoddi4+0x1e8>
 80006a6:	4631      	mov	r1, r6
 80006a8:	e7ed      	b.n	8000686 <__udivmoddi4+0x276>
 80006aa:	4603      	mov	r3, r0
 80006ac:	e799      	b.n	80005e2 <__udivmoddi4+0x1d2>
 80006ae:	4630      	mov	r0, r6
 80006b0:	e7d4      	b.n	800065c <__udivmoddi4+0x24c>
 80006b2:	46d6      	mov	lr, sl
 80006b4:	e77f      	b.n	80005b6 <__udivmoddi4+0x1a6>
 80006b6:	4463      	add	r3, ip
 80006b8:	3802      	subs	r0, #2
 80006ba:	e74d      	b.n	8000558 <__udivmoddi4+0x148>
 80006bc:	4606      	mov	r6, r0
 80006be:	4623      	mov	r3, r4
 80006c0:	4608      	mov	r0, r1
 80006c2:	e70f      	b.n	80004e4 <__udivmoddi4+0xd4>
 80006c4:	3e02      	subs	r6, #2
 80006c6:	4463      	add	r3, ip
 80006c8:	e730      	b.n	800052c <__udivmoddi4+0x11c>
 80006ca:	bf00      	nop

080006cc <__aeabi_idiv0>:
 80006cc:	4770      	bx	lr
 80006ce:	bf00      	nop

080006d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b086      	sub	sp, #24
 80006d4:	af06      	add	r7, sp, #24
  HAL_Init();
 80006d6:	f000 fbbb 	bl	8000e50 <HAL_Init>
  SystemClock_Config();
 80006da:	f000 f8f3 	bl	80008c4 <SystemClock_Config>
  MX_GPIO_Init();
 80006de:	f000 f973 	bl	80009c8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80006e2:	f000 f941 	bl	8000968 <MX_USART2_UART_Init>
  RetargetInit(&huart2);
 80006e6:	4819      	ldr	r0, [pc, #100]	@ (800074c <main+0x7c>)
 80006e8:	f000 f9da 	bl	8000aa0 <RetargetInit>

  OSInit();
 80006ec:	f003 fc14 	bl	8003f18 <OSInit>

  Semaphore1 = OSSemCreate(1);
 80006f0:	2001      	movs	r0, #1
 80006f2:	f004 fbad 	bl	8004e50 <OSSemCreate>
 80006f6:	4603      	mov	r3, r0
 80006f8:	4a15      	ldr	r2, [pc, #84]	@ (8000750 <main+0x80>)
 80006fa:	6013      	str	r3, [r2, #0]

  OSTaskCreateExt(task1,
 80006fc:	2300      	movs	r3, #0
 80006fe:	9304      	str	r3, [sp, #16]
 8000700:	2300      	movs	r3, #0
 8000702:	9303      	str	r3, [sp, #12]
 8000704:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000708:	9302      	str	r3, [sp, #8]
 800070a:	4b12      	ldr	r3, [pc, #72]	@ (8000754 <main+0x84>)
 800070c:	9301      	str	r3, [sp, #4]
 800070e:	2301      	movs	r3, #1
 8000710:	9300      	str	r3, [sp, #0]
 8000712:	2301      	movs	r3, #1
 8000714:	4a10      	ldr	r2, [pc, #64]	@ (8000758 <main+0x88>)
 8000716:	2100      	movs	r1, #0
 8000718:	4810      	ldr	r0, [pc, #64]	@ (800075c <main+0x8c>)
 800071a:	f004 fcb1 	bl	8005080 <OSTaskCreateExt>
  				  task1_stk,
  				  TASK_STACKSIZE,
  				  NULL,
  				  0);

  OSTaskCreateExt(task2,
 800071e:	2300      	movs	r3, #0
 8000720:	9304      	str	r3, [sp, #16]
 8000722:	2300      	movs	r3, #0
 8000724:	9303      	str	r3, [sp, #12]
 8000726:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800072a:	9302      	str	r3, [sp, #8]
 800072c:	4b0c      	ldr	r3, [pc, #48]	@ (8000760 <main+0x90>)
 800072e:	9301      	str	r3, [sp, #4]
 8000730:	2302      	movs	r3, #2
 8000732:	9300      	str	r3, [sp, #0]
 8000734:	2302      	movs	r3, #2
 8000736:	4a0b      	ldr	r2, [pc, #44]	@ (8000764 <main+0x94>)
 8000738:	2100      	movs	r1, #0
 800073a:	480b      	ldr	r0, [pc, #44]	@ (8000768 <main+0x98>)
 800073c:	f004 fca0 	bl	8005080 <OSTaskCreateExt>
    				  task2_stk,
    				  TASK_STACKSIZE,
    				  NULL,
    				  0);

  OSStart();
 8000740:	f003 fcd6 	bl	80040f0 <OSStart>
  return 0;
 8000744:	2300      	movs	r3, #0
}
 8000746:	4618      	mov	r0, r3
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}
 800074c:	20000084 	.word	0x20000084
 8000750:	2000110c 	.word	0x2000110c
 8000754:	2000010c 	.word	0x2000010c
 8000758:	2000090c 	.word	0x2000090c
 800075c:	0800076d 	.word	0x0800076d
 8000760:	2000090c 	.word	0x2000090c
 8000764:	2000110c 	.word	0x2000110c
 8000768:	08000815 	.word	0x08000815

0800076c <task1>:

/* Definition of Task1 ----------------------------------------------------------- */
void task1(void* pdata) {
 800076c:	b580      	push	{r7, lr}
 800076e:	b08c      	sub	sp, #48	@ 0x30
 8000770:	af02      	add	r7, sp, #8
 8000772:	6078      	str	r0, [r7, #4]
	INT8U errorcode;
	int t_start;
	int t_end;
	int t_prev = 0;
 8000774:	2300      	movs	r3, #0
 8000776:	623b      	str	r3, [r7, #32]
	while (1) {
		t_start = OSTimeGet();
 8000778:	f005 f81c 	bl	80057b4 <OSTimeGet>
 800077c:	4603      	mov	r3, r0
 800077e:	61fb      	str	r3, [r7, #28]
		char text1[] = "First 1\r\n";
 8000780:	4a21      	ldr	r2, [pc, #132]	@ (8000808 <task1+0x9c>)
 8000782:	f107 030c 	add.w	r3, r7, #12
 8000786:	ca07      	ldmia	r2, {r0, r1, r2}
 8000788:	c303      	stmia	r3!, {r0, r1}
 800078a:	801a      	strh	r2, [r3, #0]
		int i;
		OSSemPend(Semaphore1, 0, &errorcode);
 800078c:	4b1f      	ldr	r3, [pc, #124]	@ (800080c <task1+0xa0>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	f107 0217 	add.w	r2, r7, #23
 8000794:	2100      	movs	r1, #0
 8000796:	4618      	mov	r0, r3
 8000798:	f004 fb98 	bl	8004ecc <OSSemPend>
		for (i = 0; i < strlen(text1); i++) {
 800079c:	2300      	movs	r3, #0
 800079e:	627b      	str	r3, [r7, #36]	@ 0x24
 80007a0:	e00a      	b.n	80007b8 <task1+0x4c>
			putchar(text1[i]);
 80007a2:	f107 020c 	add.w	r2, r7, #12
 80007a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007a8:	4413      	add	r3, r2
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	4618      	mov	r0, r3
 80007ae:	f005 fad1 	bl	8005d54 <putchar>
		for (i = 0; i < strlen(text1); i++) {
 80007b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007b4:	3301      	adds	r3, #1
 80007b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80007b8:	f107 030c 	add.w	r3, r7, #12
 80007bc:	4618      	mov	r0, r3
 80007be:	f7ff fdb7 	bl	8000330 <strlen>
 80007c2:	4602      	mov	r2, r0
 80007c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007c6:	429a      	cmp	r2, r3
 80007c8:	d8eb      	bhi.n	80007a2 <task1+0x36>
		}
		t_end = OSTimeGet();
 80007ca:	f004 fff3 	bl	80057b4 <OSTimeGet>
 80007ce:	4603      	mov	r3, r0
 80007d0:	61bb      	str	r3, [r7, #24]
		printf("T1: (Start,End,Ex.T.,P): (%d, %d, %d, %d)\r\n", t_start, t_end, t_end-t_start, t_start-t_prev);
 80007d2:	69ba      	ldr	r2, [r7, #24]
 80007d4:	69fb      	ldr	r3, [r7, #28]
 80007d6:	1ad1      	subs	r1, r2, r3
 80007d8:	69fa      	ldr	r2, [r7, #28]
 80007da:	6a3b      	ldr	r3, [r7, #32]
 80007dc:	1ad3      	subs	r3, r2, r3
 80007de:	9300      	str	r3, [sp, #0]
 80007e0:	460b      	mov	r3, r1
 80007e2:	69ba      	ldr	r2, [r7, #24]
 80007e4:	69f9      	ldr	r1, [r7, #28]
 80007e6:	480a      	ldr	r0, [pc, #40]	@ (8000810 <task1+0xa4>)
 80007e8:	f005 faa2 	bl	8005d30 <iprintf>
		OSSemPost(Semaphore1);
 80007ec:	4b07      	ldr	r3, [pc, #28]	@ (800080c <task1+0xa0>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	4618      	mov	r0, r3
 80007f2:	f004 fc05 	bl	8005000 <OSSemPost>
		t_start = t_prev;
 80007f6:	6a3b      	ldr	r3, [r7, #32]
 80007f8:	61fb      	str	r3, [r7, #28]
		OSTimeDlyHMSM(0, 0, 1, 0);
 80007fa:	2300      	movs	r3, #0
 80007fc:	2201      	movs	r2, #1
 80007fe:	2100      	movs	r1, #0
 8000800:	2000      	movs	r0, #0
 8000802:	f004 ff73 	bl	80056ec <OSTimeDlyHMSM>
	while (1) {
 8000806:	e7b7      	b.n	8000778 <task1+0xc>
 8000808:	08006c40 	.word	0x08006c40
 800080c:	2000110c 	.word	0x2000110c
 8000810:	08006c14 	.word	0x08006c14

08000814 <task2>:
	}
}

/* Definition of Task2 ----------------------------------------------------------- */
void task2(void* pdata) {
 8000814:	b580      	push	{r7, lr}
 8000816:	b08c      	sub	sp, #48	@ 0x30
 8000818:	af02      	add	r7, sp, #8
 800081a:	6078      	str	r0, [r7, #4]
	INT8U errorcode;
	int t_start;
	int t_end;
	int t_prev = 0;
 800081c:	2300      	movs	r3, #0
 800081e:	623b      	str	r3, [r7, #32]
	while (1) {
		t_start = OSTimeGet();
 8000820:	f004 ffc8 	bl	80057b4 <OSTimeGet>
 8000824:	4603      	mov	r3, r0
 8000826:	61fb      	str	r3, [r7, #28]
		char text2[] = "Second 2\r\n";
 8000828:	4a23      	ldr	r2, [pc, #140]	@ (80008b8 <task2+0xa4>)
 800082a:	f107 030c 	add.w	r3, r7, #12
 800082e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000830:	c303      	stmia	r3!, {r0, r1}
 8000832:	801a      	strh	r2, [r3, #0]
 8000834:	3302      	adds	r3, #2
 8000836:	0c12      	lsrs	r2, r2, #16
 8000838:	701a      	strb	r2, [r3, #0]
		int i;
		OSSemPend(Semaphore1, 0, &errorcode);
 800083a:	4b20      	ldr	r3, [pc, #128]	@ (80008bc <task2+0xa8>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	f107 0217 	add.w	r2, r7, #23
 8000842:	2100      	movs	r1, #0
 8000844:	4618      	mov	r0, r3
 8000846:	f004 fb41 	bl	8004ecc <OSSemPend>
		for (i = 0; i < strlen(text2); i++) {
 800084a:	2300      	movs	r3, #0
 800084c:	627b      	str	r3, [r7, #36]	@ 0x24
 800084e:	e00a      	b.n	8000866 <task2+0x52>
			putchar(text2[i]);
 8000850:	f107 020c 	add.w	r2, r7, #12
 8000854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000856:	4413      	add	r3, r2
 8000858:	781b      	ldrb	r3, [r3, #0]
 800085a:	4618      	mov	r0, r3
 800085c:	f005 fa7a 	bl	8005d54 <putchar>
		for (i = 0; i < strlen(text2); i++) {
 8000860:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000862:	3301      	adds	r3, #1
 8000864:	627b      	str	r3, [r7, #36]	@ 0x24
 8000866:	f107 030c 	add.w	r3, r7, #12
 800086a:	4618      	mov	r0, r3
 800086c:	f7ff fd60 	bl	8000330 <strlen>
 8000870:	4602      	mov	r2, r0
 8000872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000874:	429a      	cmp	r2, r3
 8000876:	d8eb      	bhi.n	8000850 <task2+0x3c>
		}
		t_end = OSTimeGet();
 8000878:	f004 ff9c 	bl	80057b4 <OSTimeGet>
 800087c:	4603      	mov	r3, r0
 800087e:	61bb      	str	r3, [r7, #24]
		printf("T2: (Start,End,Ex.T.,P): (%d, %d, %d, %d)\r\n", t_start, t_end, t_end-t_start, t_start-t_prev);
 8000880:	69ba      	ldr	r2, [r7, #24]
 8000882:	69fb      	ldr	r3, [r7, #28]
 8000884:	1ad1      	subs	r1, r2, r3
 8000886:	69fa      	ldr	r2, [r7, #28]
 8000888:	6a3b      	ldr	r3, [r7, #32]
 800088a:	1ad3      	subs	r3, r2, r3
 800088c:	9300      	str	r3, [sp, #0]
 800088e:	460b      	mov	r3, r1
 8000890:	69ba      	ldr	r2, [r7, #24]
 8000892:	69f9      	ldr	r1, [r7, #28]
 8000894:	480a      	ldr	r0, [pc, #40]	@ (80008c0 <task2+0xac>)
 8000896:	f005 fa4b 	bl	8005d30 <iprintf>
		OSSemPost(Semaphore1);
 800089a:	4b08      	ldr	r3, [pc, #32]	@ (80008bc <task2+0xa8>)
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	4618      	mov	r0, r3
 80008a0:	f004 fbae 	bl	8005000 <OSSemPost>
		t_start = t_prev;
 80008a4:	6a3b      	ldr	r3, [r7, #32]
 80008a6:	61fb      	str	r3, [r7, #28]
		OSTimeDlyHMSM(0, 0, 1, 0);
 80008a8:	2300      	movs	r3, #0
 80008aa:	2201      	movs	r2, #1
 80008ac:	2100      	movs	r1, #0
 80008ae:	2000      	movs	r0, #0
 80008b0:	f004 ff1c 	bl	80056ec <OSTimeDlyHMSM>
	while (1) {
 80008b4:	e7b4      	b.n	8000820 <task2+0xc>
 80008b6:	bf00      	nop
 80008b8:	08006c78 	.word	0x08006c78
 80008bc:	2000110c 	.word	0x2000110c
 80008c0:	08006c4c 	.word	0x08006c4c

080008c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b096      	sub	sp, #88	@ 0x58
 80008c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008ca:	f107 0314 	add.w	r3, r7, #20
 80008ce:	2244      	movs	r2, #68	@ 0x44
 80008d0:	2100      	movs	r1, #0
 80008d2:	4618      	mov	r0, r3
 80008d4:	f005 fb3d 	bl	8005f52 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008d8:	463b      	mov	r3, r7
 80008da:	2200      	movs	r2, #0
 80008dc:	601a      	str	r2, [r3, #0]
 80008de:	605a      	str	r2, [r3, #4]
 80008e0:	609a      	str	r2, [r3, #8]
 80008e2:	60da      	str	r2, [r3, #12]
 80008e4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80008e6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80008ea:	f000 fdcf 	bl	800148c <HAL_PWREx_ControlVoltageScaling>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80008f4:	f000 f8ce 	bl	8000a94 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008f8:	2302      	movs	r3, #2
 80008fa:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008fc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000900:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000902:	2310      	movs	r3, #16
 8000904:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000906:	2302      	movs	r3, #2
 8000908:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800090a:	2302      	movs	r3, #2
 800090c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800090e:	2301      	movs	r3, #1
 8000910:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000912:	230a      	movs	r3, #10
 8000914:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000916:	2307      	movs	r3, #7
 8000918:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800091a:	2302      	movs	r3, #2
 800091c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800091e:	2302      	movs	r3, #2
 8000920:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000922:	f107 0314 	add.w	r3, r7, #20
 8000926:	4618      	mov	r0, r3
 8000928:	f000 fe06 	bl	8001538 <HAL_RCC_OscConfig>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000932:	f000 f8af 	bl	8000a94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000936:	230f      	movs	r3, #15
 8000938:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800093a:	2303      	movs	r3, #3
 800093c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800093e:	2300      	movs	r3, #0
 8000940:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000942:	2300      	movs	r3, #0
 8000944:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000946:	2300      	movs	r3, #0
 8000948:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800094a:	463b      	mov	r3, r7
 800094c:	2104      	movs	r1, #4
 800094e:	4618      	mov	r0, r3
 8000950:	f001 f9ce 	bl	8001cf0 <HAL_RCC_ClockConfig>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800095a:	f000 f89b 	bl	8000a94 <Error_Handler>
  }
}
 800095e:	bf00      	nop
 8000960:	3758      	adds	r7, #88	@ 0x58
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
	...

08000968 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800096c:	4b14      	ldr	r3, [pc, #80]	@ (80009c0 <MX_USART2_UART_Init+0x58>)
 800096e:	4a15      	ldr	r2, [pc, #84]	@ (80009c4 <MX_USART2_UART_Init+0x5c>)
 8000970:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000972:	4b13      	ldr	r3, [pc, #76]	@ (80009c0 <MX_USART2_UART_Init+0x58>)
 8000974:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000978:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800097a:	4b11      	ldr	r3, [pc, #68]	@ (80009c0 <MX_USART2_UART_Init+0x58>)
 800097c:	2200      	movs	r2, #0
 800097e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000980:	4b0f      	ldr	r3, [pc, #60]	@ (80009c0 <MX_USART2_UART_Init+0x58>)
 8000982:	2200      	movs	r2, #0
 8000984:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000986:	4b0e      	ldr	r3, [pc, #56]	@ (80009c0 <MX_USART2_UART_Init+0x58>)
 8000988:	2200      	movs	r2, #0
 800098a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800098c:	4b0c      	ldr	r3, [pc, #48]	@ (80009c0 <MX_USART2_UART_Init+0x58>)
 800098e:	220c      	movs	r2, #12
 8000990:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000992:	4b0b      	ldr	r3, [pc, #44]	@ (80009c0 <MX_USART2_UART_Init+0x58>)
 8000994:	2200      	movs	r2, #0
 8000996:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000998:	4b09      	ldr	r3, [pc, #36]	@ (80009c0 <MX_USART2_UART_Init+0x58>)
 800099a:	2200      	movs	r2, #0
 800099c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800099e:	4b08      	ldr	r3, [pc, #32]	@ (80009c0 <MX_USART2_UART_Init+0x58>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009a4:	4b06      	ldr	r3, [pc, #24]	@ (80009c0 <MX_USART2_UART_Init+0x58>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009aa:	4805      	ldr	r0, [pc, #20]	@ (80009c0 <MX_USART2_UART_Init+0x58>)
 80009ac:	f002 f880 	bl	8002ab0 <HAL_UART_Init>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80009b6:	f000 f86d 	bl	8000a94 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009ba:	bf00      	nop
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	20000084 	.word	0x20000084
 80009c4:	40004400 	.word	0x40004400

080009c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b08a      	sub	sp, #40	@ 0x28
 80009cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ce:	f107 0314 	add.w	r3, r7, #20
 80009d2:	2200      	movs	r2, #0
 80009d4:	601a      	str	r2, [r3, #0]
 80009d6:	605a      	str	r2, [r3, #4]
 80009d8:	609a      	str	r2, [r3, #8]
 80009da:	60da      	str	r2, [r3, #12]
 80009dc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009de:	4b2b      	ldr	r3, [pc, #172]	@ (8000a8c <MX_GPIO_Init+0xc4>)
 80009e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009e2:	4a2a      	ldr	r2, [pc, #168]	@ (8000a8c <MX_GPIO_Init+0xc4>)
 80009e4:	f043 0304 	orr.w	r3, r3, #4
 80009e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009ea:	4b28      	ldr	r3, [pc, #160]	@ (8000a8c <MX_GPIO_Init+0xc4>)
 80009ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009ee:	f003 0304 	and.w	r3, r3, #4
 80009f2:	613b      	str	r3, [r7, #16]
 80009f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009f6:	4b25      	ldr	r3, [pc, #148]	@ (8000a8c <MX_GPIO_Init+0xc4>)
 80009f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009fa:	4a24      	ldr	r2, [pc, #144]	@ (8000a8c <MX_GPIO_Init+0xc4>)
 80009fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a00:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a02:	4b22      	ldr	r3, [pc, #136]	@ (8000a8c <MX_GPIO_Init+0xc4>)
 8000a04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a0a:	60fb      	str	r3, [r7, #12]
 8000a0c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a0e:	4b1f      	ldr	r3, [pc, #124]	@ (8000a8c <MX_GPIO_Init+0xc4>)
 8000a10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a12:	4a1e      	ldr	r2, [pc, #120]	@ (8000a8c <MX_GPIO_Init+0xc4>)
 8000a14:	f043 0301 	orr.w	r3, r3, #1
 8000a18:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a1a:	4b1c      	ldr	r3, [pc, #112]	@ (8000a8c <MX_GPIO_Init+0xc4>)
 8000a1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a1e:	f003 0301 	and.w	r3, r3, #1
 8000a22:	60bb      	str	r3, [r7, #8]
 8000a24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a26:	4b19      	ldr	r3, [pc, #100]	@ (8000a8c <MX_GPIO_Init+0xc4>)
 8000a28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a2a:	4a18      	ldr	r2, [pc, #96]	@ (8000a8c <MX_GPIO_Init+0xc4>)
 8000a2c:	f043 0302 	orr.w	r3, r3, #2
 8000a30:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a32:	4b16      	ldr	r3, [pc, #88]	@ (8000a8c <MX_GPIO_Init+0xc4>)
 8000a34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a36:	f003 0302 	and.w	r3, r3, #2
 8000a3a:	607b      	str	r3, [r7, #4]
 8000a3c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a3e:	2200      	movs	r2, #0
 8000a40:	2120      	movs	r1, #32
 8000a42:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a46:	f000 fcfb 	bl	8001440 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a4a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a50:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000a54:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a56:	2300      	movs	r3, #0
 8000a58:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a5a:	f107 0314 	add.w	r3, r7, #20
 8000a5e:	4619      	mov	r1, r3
 8000a60:	480b      	ldr	r0, [pc, #44]	@ (8000a90 <MX_GPIO_Init+0xc8>)
 8000a62:	f000 fb43 	bl	80010ec <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a66:	2320      	movs	r3, #32
 8000a68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a72:	2300      	movs	r3, #0
 8000a74:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a76:	f107 0314 	add.w	r3, r7, #20
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a80:	f000 fb34 	bl	80010ec <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a84:	bf00      	nop
 8000a86:	3728      	adds	r7, #40	@ 0x28
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	40021000 	.word	0x40021000
 8000a90:	48000800 	.word	0x48000800

08000a94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a98:	b672      	cpsid	i
}
 8000a9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a9c:	bf00      	nop
 8000a9e:	e7fd      	b.n	8000a9c <Error_Handler+0x8>

08000aa0 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8000aa8:	4a07      	ldr	r2, [pc, #28]	@ (8000ac8 <RetargetInit+0x28>)
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8000aae:	4b07      	ldr	r3, [pc, #28]	@ (8000acc <RetargetInit+0x2c>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	6898      	ldr	r0, [r3, #8]
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	2202      	movs	r2, #2
 8000ab8:	2100      	movs	r1, #0
 8000aba:	f005 f953 	bl	8005d64 <setvbuf>
}
 8000abe:	bf00      	nop
 8000ac0:	3708      	adds	r7, #8
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	20001110 	.word	0x20001110
 8000acc:	20000018 	.word	0x20000018

08000ad0 <_isatty>:

int _isatty(int fd) {
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	db04      	blt.n	8000ae8 <_isatty+0x18>
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	2b02      	cmp	r3, #2
 8000ae2:	dc01      	bgt.n	8000ae8 <_isatty+0x18>
    return 1;
 8000ae4:	2301      	movs	r3, #1
 8000ae6:	e005      	b.n	8000af4 <_isatty+0x24>

  errno = EBADF;
 8000ae8:	f005 fa82 	bl	8005ff0 <__errno>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2209      	movs	r2, #9
 8000af0:	601a      	str	r2, [r3, #0]
  return 0;
 8000af2:	2300      	movs	r3, #0
}
 8000af4:	4618      	mov	r0, r3
 8000af6:	3708      	adds	r7, #8
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}

08000afc <_write>:

int _write(int fd, char* ptr, int len) {
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b086      	sub	sp, #24
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	60f8      	str	r0, [r7, #12]
 8000b04:	60b9      	str	r1, [r7, #8]
 8000b06:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	2b01      	cmp	r3, #1
 8000b0c:	d002      	beq.n	8000b14 <_write+0x18>
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	2b02      	cmp	r3, #2
 8000b12:	d111      	bne.n	8000b38 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8000b14:	4b0e      	ldr	r3, [pc, #56]	@ (8000b50 <_write+0x54>)
 8000b16:	6818      	ldr	r0, [r3, #0]
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	b29a      	uxth	r2, r3
 8000b1c:	f04f 33ff 	mov.w	r3, #4294967295
 8000b20:	68b9      	ldr	r1, [r7, #8]
 8000b22:	f002 f813 	bl	8002b4c <HAL_UART_Transmit>
 8000b26:	4603      	mov	r3, r0
 8000b28:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8000b2a:	7dfb      	ldrb	r3, [r7, #23]
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d101      	bne.n	8000b34 <_write+0x38>
      return len;
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	e008      	b.n	8000b46 <_write+0x4a>
    else
      return EIO;
 8000b34:	2305      	movs	r3, #5
 8000b36:	e006      	b.n	8000b46 <_write+0x4a>
  }
  errno = EBADF;
 8000b38:	f005 fa5a 	bl	8005ff0 <__errno>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2209      	movs	r2, #9
 8000b40:	601a      	str	r2, [r3, #0]
  return -1;
 8000b42:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b46:	4618      	mov	r0, r3
 8000b48:	3718      	adds	r7, #24
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	20001110 	.word	0x20001110

08000b54 <_close>:

int _close(int fd) {
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	db04      	blt.n	8000b6c <_close+0x18>
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	2b02      	cmp	r3, #2
 8000b66:	dc01      	bgt.n	8000b6c <_close+0x18>
    return 0;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	e006      	b.n	8000b7a <_close+0x26>

  errno = EBADF;
 8000b6c:	f005 fa40 	bl	8005ff0 <__errno>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2209      	movs	r2, #9
 8000b74:	601a      	str	r2, [r3, #0]
  return -1;
 8000b76:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	3708      	adds	r7, #8
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
	...

08000b84 <_read>:

int _read(int fd, char* ptr, int len) {
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b086      	sub	sp, #24
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	60f8      	str	r0, [r7, #12]
 8000b8c:	60b9      	str	r1, [r7, #8]
 8000b8e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d110      	bne.n	8000bb8 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8000b96:	4b0e      	ldr	r3, [pc, #56]	@ (8000bd0 <_read+0x4c>)
 8000b98:	6818      	ldr	r0, [r3, #0]
 8000b9a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	68b9      	ldr	r1, [r7, #8]
 8000ba2:	f002 f85c 	bl	8002c5e <HAL_UART_Receive>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8000baa:	7dfb      	ldrb	r3, [r7, #23]
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d101      	bne.n	8000bb4 <_read+0x30>
      return 1;
 8000bb0:	2301      	movs	r3, #1
 8000bb2:	e008      	b.n	8000bc6 <_read+0x42>
    else
      return EIO;
 8000bb4:	2305      	movs	r3, #5
 8000bb6:	e006      	b.n	8000bc6 <_read+0x42>
  }
  errno = EBADF;
 8000bb8:	f005 fa1a 	bl	8005ff0 <__errno>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2209      	movs	r2, #9
 8000bc0:	601a      	str	r2, [r3, #0]
  return -1;
 8000bc2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	3718      	adds	r7, #24
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	20001110 	.word	0x20001110

08000bd4 <_fstat>:

int _fstat(int fd, struct stat* st) {
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
 8000bdc:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	db08      	blt.n	8000bf6 <_fstat+0x22>
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	2b02      	cmp	r3, #2
 8000be8:	dc05      	bgt.n	8000bf6 <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8000bea:	683b      	ldr	r3, [r7, #0]
 8000bec:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000bf0:	605a      	str	r2, [r3, #4]
    return 0;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	e005      	b.n	8000c02 <_fstat+0x2e>
  }

  errno = EBADF;
 8000bf6:	f005 f9fb 	bl	8005ff0 <__errno>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2209      	movs	r2, #9
 8000bfe:	601a      	str	r2, [r3, #0]
  return 0;
 8000c00:	2300      	movs	r3, #0
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	3708      	adds	r7, #8
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
	...

08000c0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b083      	sub	sp, #12
 8000c10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c12:	4b0f      	ldr	r3, [pc, #60]	@ (8000c50 <HAL_MspInit+0x44>)
 8000c14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c16:	4a0e      	ldr	r2, [pc, #56]	@ (8000c50 <HAL_MspInit+0x44>)
 8000c18:	f043 0301 	orr.w	r3, r3, #1
 8000c1c:	6613      	str	r3, [r2, #96]	@ 0x60
 8000c1e:	4b0c      	ldr	r3, [pc, #48]	@ (8000c50 <HAL_MspInit+0x44>)
 8000c20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c22:	f003 0301 	and.w	r3, r3, #1
 8000c26:	607b      	str	r3, [r7, #4]
 8000c28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c2a:	4b09      	ldr	r3, [pc, #36]	@ (8000c50 <HAL_MspInit+0x44>)
 8000c2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c2e:	4a08      	ldr	r2, [pc, #32]	@ (8000c50 <HAL_MspInit+0x44>)
 8000c30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c34:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c36:	4b06      	ldr	r3, [pc, #24]	@ (8000c50 <HAL_MspInit+0x44>)
 8000c38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c3e:	603b      	str	r3, [r7, #0]
 8000c40:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c42:	bf00      	nop
 8000c44:	370c      	adds	r7, #12
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop
 8000c50:	40021000 	.word	0x40021000

08000c54 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b0ac      	sub	sp, #176	@ 0xb0
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c5c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000c60:	2200      	movs	r2, #0
 8000c62:	601a      	str	r2, [r3, #0]
 8000c64:	605a      	str	r2, [r3, #4]
 8000c66:	609a      	str	r2, [r3, #8]
 8000c68:	60da      	str	r2, [r3, #12]
 8000c6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c6c:	f107 0314 	add.w	r3, r7, #20
 8000c70:	2288      	movs	r2, #136	@ 0x88
 8000c72:	2100      	movs	r1, #0
 8000c74:	4618      	mov	r0, r3
 8000c76:	f005 f96c 	bl	8005f52 <memset>
  if(huart->Instance==USART2)
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	4a21      	ldr	r2, [pc, #132]	@ (8000d04 <HAL_UART_MspInit+0xb0>)
 8000c80:	4293      	cmp	r3, r2
 8000c82:	d13b      	bne.n	8000cfc <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000c84:	2302      	movs	r3, #2
 8000c86:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c8c:	f107 0314 	add.w	r3, r7, #20
 8000c90:	4618      	mov	r0, r3
 8000c92:	f001 fa51 	bl	8002138 <HAL_RCCEx_PeriphCLKConfig>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000c9c:	f7ff fefa 	bl	8000a94 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ca0:	4b19      	ldr	r3, [pc, #100]	@ (8000d08 <HAL_UART_MspInit+0xb4>)
 8000ca2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ca4:	4a18      	ldr	r2, [pc, #96]	@ (8000d08 <HAL_UART_MspInit+0xb4>)
 8000ca6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000caa:	6593      	str	r3, [r2, #88]	@ 0x58
 8000cac:	4b16      	ldr	r3, [pc, #88]	@ (8000d08 <HAL_UART_MspInit+0xb4>)
 8000cae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cb0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000cb4:	613b      	str	r3, [r7, #16]
 8000cb6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cb8:	4b13      	ldr	r3, [pc, #76]	@ (8000d08 <HAL_UART_MspInit+0xb4>)
 8000cba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cbc:	4a12      	ldr	r2, [pc, #72]	@ (8000d08 <HAL_UART_MspInit+0xb4>)
 8000cbe:	f043 0301 	orr.w	r3, r3, #1
 8000cc2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cc4:	4b10      	ldr	r3, [pc, #64]	@ (8000d08 <HAL_UART_MspInit+0xb4>)
 8000cc6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cc8:	f003 0301 	and.w	r3, r3, #1
 8000ccc:	60fb      	str	r3, [r7, #12]
 8000cce:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000cd0:	230c      	movs	r3, #12
 8000cd2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd6:	2302      	movs	r3, #2
 8000cd8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ce2:	2303      	movs	r3, #3
 8000ce4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ce8:	2307      	movs	r3, #7
 8000cea:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cee:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cf8:	f000 f9f8 	bl	80010ec <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000cfc:	bf00      	nop
 8000cfe:	37b0      	adds	r7, #176	@ 0xb0
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	40004400 	.word	0x40004400
 8000d08:	40021000 	.word	0x40021000

08000d0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d10:	bf00      	nop
 8000d12:	e7fd      	b.n	8000d10 <NMI_Handler+0x4>

08000d14 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d18:	bf00      	nop
 8000d1a:	e7fd      	b.n	8000d18 <HardFault_Handler+0x4>

08000d1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d20:	bf00      	nop
 8000d22:	e7fd      	b.n	8000d20 <MemManage_Handler+0x4>

08000d24 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d28:	bf00      	nop
 8000d2a:	e7fd      	b.n	8000d28 <BusFault_Handler+0x4>

08000d2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d30:	bf00      	nop
 8000d32:	e7fd      	b.n	8000d30 <UsageFault_Handler+0x4>

08000d34 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d38:	bf00      	nop
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr

08000d42 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d42:	b480      	push	{r7}
 8000d44:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d46:	bf00      	nop
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr

08000d50 <_lseek>:
  (void)file;
  return 1;
}*/

int _lseek(int file, int ptr, int dir)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b085      	sub	sp, #20
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	60f8      	str	r0, [r7, #12]
 8000d58:	60b9      	str	r1, [r7, #8]
 8000d5a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d5c:	2300      	movs	r3, #0
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	3714      	adds	r7, #20
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr
	...

08000d6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b086      	sub	sp, #24
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d74:	4a14      	ldr	r2, [pc, #80]	@ (8000dc8 <_sbrk+0x5c>)
 8000d76:	4b15      	ldr	r3, [pc, #84]	@ (8000dcc <_sbrk+0x60>)
 8000d78:	1ad3      	subs	r3, r2, r3
 8000d7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d7c:	697b      	ldr	r3, [r7, #20]
 8000d7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d80:	4b13      	ldr	r3, [pc, #76]	@ (8000dd0 <_sbrk+0x64>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d102      	bne.n	8000d8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d88:	4b11      	ldr	r3, [pc, #68]	@ (8000dd0 <_sbrk+0x64>)
 8000d8a:	4a12      	ldr	r2, [pc, #72]	@ (8000dd4 <_sbrk+0x68>)
 8000d8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d8e:	4b10      	ldr	r3, [pc, #64]	@ (8000dd0 <_sbrk+0x64>)
 8000d90:	681a      	ldr	r2, [r3, #0]
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	4413      	add	r3, r2
 8000d96:	693a      	ldr	r2, [r7, #16]
 8000d98:	429a      	cmp	r2, r3
 8000d9a:	d207      	bcs.n	8000dac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d9c:	f005 f928 	bl	8005ff0 <__errno>
 8000da0:	4603      	mov	r3, r0
 8000da2:	220c      	movs	r2, #12
 8000da4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000da6:	f04f 33ff 	mov.w	r3, #4294967295
 8000daa:	e009      	b.n	8000dc0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000dac:	4b08      	ldr	r3, [pc, #32]	@ (8000dd0 <_sbrk+0x64>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000db2:	4b07      	ldr	r3, [pc, #28]	@ (8000dd0 <_sbrk+0x64>)
 8000db4:	681a      	ldr	r2, [r3, #0]
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	4413      	add	r3, r2
 8000dba:	4a05      	ldr	r2, [pc, #20]	@ (8000dd0 <_sbrk+0x64>)
 8000dbc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dbe:	68fb      	ldr	r3, [r7, #12]
}
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	3718      	adds	r7, #24
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	20018000 	.word	0x20018000
 8000dcc:	00000400 	.word	0x00000400
 8000dd0:	20001114 	.word	0x20001114
 8000dd4:	20002a98 	.word	0x20002a98

08000dd8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000ddc:	4b06      	ldr	r3, [pc, #24]	@ (8000df8 <SystemInit+0x20>)
 8000dde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000de2:	4a05      	ldr	r2, [pc, #20]	@ (8000df8 <SystemInit+0x20>)
 8000de4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000de8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000dec:	bf00      	nop
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop
 8000df8:	e000ed00 	.word	0xe000ed00

08000dfc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000dfc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e34 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e00:	f7ff ffea 	bl	8000dd8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e04:	480c      	ldr	r0, [pc, #48]	@ (8000e38 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e06:	490d      	ldr	r1, [pc, #52]	@ (8000e3c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e08:	4a0d      	ldr	r2, [pc, #52]	@ (8000e40 <LoopForever+0xe>)
  movs r3, #0
 8000e0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e0c:	e002      	b.n	8000e14 <LoopCopyDataInit>

08000e0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e12:	3304      	adds	r3, #4

08000e14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e18:	d3f9      	bcc.n	8000e0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e1a:	4a0a      	ldr	r2, [pc, #40]	@ (8000e44 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e1c:	4c0a      	ldr	r4, [pc, #40]	@ (8000e48 <LoopForever+0x16>)
  movs r3, #0
 8000e1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e20:	e001      	b.n	8000e26 <LoopFillZerobss>

08000e22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e24:	3204      	adds	r2, #4

08000e26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e28:	d3fb      	bcc.n	8000e22 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e2a:	f005 f8e7 	bl	8005ffc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e2e:	f7ff fc4f 	bl	80006d0 <main>

08000e32 <LoopForever>:

LoopForever:
    b LoopForever
 8000e32:	e7fe      	b.n	8000e32 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000e34:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000e38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e3c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000e40:	08006ef4 	.word	0x08006ef4
  ldr r2, =_sbss
 8000e44:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000e48:	20002a98 	.word	0x20002a98

08000e4c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e4c:	e7fe      	b.n	8000e4c <ADC1_2_IRQHandler>
	...

08000e50 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e56:	2300      	movs	r3, #0
 8000e58:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e5a:	4b0c      	ldr	r3, [pc, #48]	@ (8000e8c <HAL_Init+0x3c>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	4a0b      	ldr	r2, [pc, #44]	@ (8000e8c <HAL_Init+0x3c>)
 8000e60:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e64:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e66:	2003      	movs	r0, #3
 8000e68:	f000 f90c 	bl	8001084 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e6c:	2000      	movs	r0, #0
 8000e6e:	f000 f80f 	bl	8000e90 <HAL_InitTick>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d002      	beq.n	8000e7e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000e78:	2301      	movs	r3, #1
 8000e7a:	71fb      	strb	r3, [r7, #7]
 8000e7c:	e001      	b.n	8000e82 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e7e:	f7ff fec5 	bl	8000c0c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e82:	79fb      	ldrb	r3, [r7, #7]
}
 8000e84:	4618      	mov	r0, r3
 8000e86:	3708      	adds	r7, #8
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	40022000 	.word	0x40022000

08000e90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b084      	sub	sp, #16
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000e9c:	4b17      	ldr	r3, [pc, #92]	@ (8000efc <HAL_InitTick+0x6c>)
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d023      	beq.n	8000eec <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000ea4:	4b16      	ldr	r3, [pc, #88]	@ (8000f00 <HAL_InitTick+0x70>)
 8000ea6:	681a      	ldr	r2, [r3, #0]
 8000ea8:	4b14      	ldr	r3, [pc, #80]	@ (8000efc <HAL_InitTick+0x6c>)
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	4619      	mov	r1, r3
 8000eae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000eb2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000eb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f000 f909 	bl	80010d2 <HAL_SYSTICK_Config>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d10f      	bne.n	8000ee6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	2b0f      	cmp	r3, #15
 8000eca:	d809      	bhi.n	8000ee0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ecc:	2200      	movs	r2, #0
 8000ece:	6879      	ldr	r1, [r7, #4]
 8000ed0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ed4:	f000 f8e1 	bl	800109a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ed8:	4a0a      	ldr	r2, [pc, #40]	@ (8000f04 <HAL_InitTick+0x74>)
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	6013      	str	r3, [r2, #0]
 8000ede:	e007      	b.n	8000ef0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	73fb      	strb	r3, [r7, #15]
 8000ee4:	e004      	b.n	8000ef0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	73fb      	strb	r3, [r7, #15]
 8000eea:	e001      	b.n	8000ef0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000eec:	2301      	movs	r3, #1
 8000eee:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ef0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	3710      	adds	r7, #16
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	20000008 	.word	0x20000008
 8000f00:	20000000 	.word	0x20000000
 8000f04:	20000004 	.word	0x20000004

08000f08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f0c:	4b03      	ldr	r3, [pc, #12]	@ (8000f1c <HAL_GetTick+0x14>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	20001118 	.word	0x20001118

08000f20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b085      	sub	sp, #20
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	f003 0307 	and.w	r3, r3, #7
 8000f2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f30:	4b0c      	ldr	r3, [pc, #48]	@ (8000f64 <__NVIC_SetPriorityGrouping+0x44>)
 8000f32:	68db      	ldr	r3, [r3, #12]
 8000f34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f36:	68ba      	ldr	r2, [r7, #8]
 8000f38:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f44:	68bb      	ldr	r3, [r7, #8]
 8000f46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f48:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f4c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f52:	4a04      	ldr	r2, [pc, #16]	@ (8000f64 <__NVIC_SetPriorityGrouping+0x44>)
 8000f54:	68bb      	ldr	r3, [r7, #8]
 8000f56:	60d3      	str	r3, [r2, #12]
}
 8000f58:	bf00      	nop
 8000f5a:	3714      	adds	r7, #20
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f62:	4770      	bx	lr
 8000f64:	e000ed00 	.word	0xe000ed00

08000f68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f6c:	4b04      	ldr	r3, [pc, #16]	@ (8000f80 <__NVIC_GetPriorityGrouping+0x18>)
 8000f6e:	68db      	ldr	r3, [r3, #12]
 8000f70:	0a1b      	lsrs	r3, r3, #8
 8000f72:	f003 0307 	and.w	r3, r3, #7
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7e:	4770      	bx	lr
 8000f80:	e000ed00 	.word	0xe000ed00

08000f84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	6039      	str	r1, [r7, #0]
 8000f8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	db0a      	blt.n	8000fae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	b2da      	uxtb	r2, r3
 8000f9c:	490c      	ldr	r1, [pc, #48]	@ (8000fd0 <__NVIC_SetPriority+0x4c>)
 8000f9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa2:	0112      	lsls	r2, r2, #4
 8000fa4:	b2d2      	uxtb	r2, r2
 8000fa6:	440b      	add	r3, r1
 8000fa8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fac:	e00a      	b.n	8000fc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	b2da      	uxtb	r2, r3
 8000fb2:	4908      	ldr	r1, [pc, #32]	@ (8000fd4 <__NVIC_SetPriority+0x50>)
 8000fb4:	79fb      	ldrb	r3, [r7, #7]
 8000fb6:	f003 030f 	and.w	r3, r3, #15
 8000fba:	3b04      	subs	r3, #4
 8000fbc:	0112      	lsls	r2, r2, #4
 8000fbe:	b2d2      	uxtb	r2, r2
 8000fc0:	440b      	add	r3, r1
 8000fc2:	761a      	strb	r2, [r3, #24]
}
 8000fc4:	bf00      	nop
 8000fc6:	370c      	adds	r7, #12
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr
 8000fd0:	e000e100 	.word	0xe000e100
 8000fd4:	e000ed00 	.word	0xe000ed00

08000fd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b089      	sub	sp, #36	@ 0x24
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	60f8      	str	r0, [r7, #12]
 8000fe0:	60b9      	str	r1, [r7, #8]
 8000fe2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	f003 0307 	and.w	r3, r3, #7
 8000fea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fec:	69fb      	ldr	r3, [r7, #28]
 8000fee:	f1c3 0307 	rsb	r3, r3, #7
 8000ff2:	2b04      	cmp	r3, #4
 8000ff4:	bf28      	it	cs
 8000ff6:	2304      	movcs	r3, #4
 8000ff8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ffa:	69fb      	ldr	r3, [r7, #28]
 8000ffc:	3304      	adds	r3, #4
 8000ffe:	2b06      	cmp	r3, #6
 8001000:	d902      	bls.n	8001008 <NVIC_EncodePriority+0x30>
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	3b03      	subs	r3, #3
 8001006:	e000      	b.n	800100a <NVIC_EncodePriority+0x32>
 8001008:	2300      	movs	r3, #0
 800100a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800100c:	f04f 32ff 	mov.w	r2, #4294967295
 8001010:	69bb      	ldr	r3, [r7, #24]
 8001012:	fa02 f303 	lsl.w	r3, r2, r3
 8001016:	43da      	mvns	r2, r3
 8001018:	68bb      	ldr	r3, [r7, #8]
 800101a:	401a      	ands	r2, r3
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001020:	f04f 31ff 	mov.w	r1, #4294967295
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	fa01 f303 	lsl.w	r3, r1, r3
 800102a:	43d9      	mvns	r1, r3
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001030:	4313      	orrs	r3, r2
         );
}
 8001032:	4618      	mov	r0, r3
 8001034:	3724      	adds	r7, #36	@ 0x24
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr
	...

08001040 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	3b01      	subs	r3, #1
 800104c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001050:	d301      	bcc.n	8001056 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001052:	2301      	movs	r3, #1
 8001054:	e00f      	b.n	8001076 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001056:	4a0a      	ldr	r2, [pc, #40]	@ (8001080 <SysTick_Config+0x40>)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	3b01      	subs	r3, #1
 800105c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800105e:	210f      	movs	r1, #15
 8001060:	f04f 30ff 	mov.w	r0, #4294967295
 8001064:	f7ff ff8e 	bl	8000f84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001068:	4b05      	ldr	r3, [pc, #20]	@ (8001080 <SysTick_Config+0x40>)
 800106a:	2200      	movs	r2, #0
 800106c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800106e:	4b04      	ldr	r3, [pc, #16]	@ (8001080 <SysTick_Config+0x40>)
 8001070:	2207      	movs	r2, #7
 8001072:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001074:	2300      	movs	r3, #0
}
 8001076:	4618      	mov	r0, r3
 8001078:	3708      	adds	r7, #8
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	e000e010 	.word	0xe000e010

08001084 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800108c:	6878      	ldr	r0, [r7, #4]
 800108e:	f7ff ff47 	bl	8000f20 <__NVIC_SetPriorityGrouping>
}
 8001092:	bf00      	nop
 8001094:	3708      	adds	r7, #8
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}

0800109a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800109a:	b580      	push	{r7, lr}
 800109c:	b086      	sub	sp, #24
 800109e:	af00      	add	r7, sp, #0
 80010a0:	4603      	mov	r3, r0
 80010a2:	60b9      	str	r1, [r7, #8]
 80010a4:	607a      	str	r2, [r7, #4]
 80010a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80010a8:	2300      	movs	r3, #0
 80010aa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80010ac:	f7ff ff5c 	bl	8000f68 <__NVIC_GetPriorityGrouping>
 80010b0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010b2:	687a      	ldr	r2, [r7, #4]
 80010b4:	68b9      	ldr	r1, [r7, #8]
 80010b6:	6978      	ldr	r0, [r7, #20]
 80010b8:	f7ff ff8e 	bl	8000fd8 <NVIC_EncodePriority>
 80010bc:	4602      	mov	r2, r0
 80010be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010c2:	4611      	mov	r1, r2
 80010c4:	4618      	mov	r0, r3
 80010c6:	f7ff ff5d 	bl	8000f84 <__NVIC_SetPriority>
}
 80010ca:	bf00      	nop
 80010cc:	3718      	adds	r7, #24
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}

080010d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010d2:	b580      	push	{r7, lr}
 80010d4:	b082      	sub	sp, #8
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010da:	6878      	ldr	r0, [r7, #4]
 80010dc:	f7ff ffb0 	bl	8001040 <SysTick_Config>
 80010e0:	4603      	mov	r3, r0
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
	...

080010ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b087      	sub	sp, #28
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
 80010f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80010f6:	2300      	movs	r3, #0
 80010f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010fa:	e17f      	b.n	80013fc <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	681a      	ldr	r2, [r3, #0]
 8001100:	2101      	movs	r1, #1
 8001102:	697b      	ldr	r3, [r7, #20]
 8001104:	fa01 f303 	lsl.w	r3, r1, r3
 8001108:	4013      	ands	r3, r2
 800110a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	2b00      	cmp	r3, #0
 8001110:	f000 8171 	beq.w	80013f6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	f003 0303 	and.w	r3, r3, #3
 800111c:	2b01      	cmp	r3, #1
 800111e:	d005      	beq.n	800112c <HAL_GPIO_Init+0x40>
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	f003 0303 	and.w	r3, r3, #3
 8001128:	2b02      	cmp	r3, #2
 800112a:	d130      	bne.n	800118e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	689b      	ldr	r3, [r3, #8]
 8001130:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001132:	697b      	ldr	r3, [r7, #20]
 8001134:	005b      	lsls	r3, r3, #1
 8001136:	2203      	movs	r2, #3
 8001138:	fa02 f303 	lsl.w	r3, r2, r3
 800113c:	43db      	mvns	r3, r3
 800113e:	693a      	ldr	r2, [r7, #16]
 8001140:	4013      	ands	r3, r2
 8001142:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	68da      	ldr	r2, [r3, #12]
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	005b      	lsls	r3, r3, #1
 800114c:	fa02 f303 	lsl.w	r3, r2, r3
 8001150:	693a      	ldr	r2, [r7, #16]
 8001152:	4313      	orrs	r3, r2
 8001154:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	693a      	ldr	r2, [r7, #16]
 800115a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001162:	2201      	movs	r2, #1
 8001164:	697b      	ldr	r3, [r7, #20]
 8001166:	fa02 f303 	lsl.w	r3, r2, r3
 800116a:	43db      	mvns	r3, r3
 800116c:	693a      	ldr	r2, [r7, #16]
 800116e:	4013      	ands	r3, r2
 8001170:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	091b      	lsrs	r3, r3, #4
 8001178:	f003 0201 	and.w	r2, r3, #1
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	fa02 f303 	lsl.w	r3, r2, r3
 8001182:	693a      	ldr	r2, [r7, #16]
 8001184:	4313      	orrs	r3, r2
 8001186:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	693a      	ldr	r2, [r7, #16]
 800118c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	f003 0303 	and.w	r3, r3, #3
 8001196:	2b03      	cmp	r3, #3
 8001198:	d118      	bne.n	80011cc <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800119e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80011a0:	2201      	movs	r2, #1
 80011a2:	697b      	ldr	r3, [r7, #20]
 80011a4:	fa02 f303 	lsl.w	r3, r2, r3
 80011a8:	43db      	mvns	r3, r3
 80011aa:	693a      	ldr	r2, [r7, #16]
 80011ac:	4013      	ands	r3, r2
 80011ae:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	08db      	lsrs	r3, r3, #3
 80011b6:	f003 0201 	and.w	r2, r3, #1
 80011ba:	697b      	ldr	r3, [r7, #20]
 80011bc:	fa02 f303 	lsl.w	r3, r2, r3
 80011c0:	693a      	ldr	r2, [r7, #16]
 80011c2:	4313      	orrs	r3, r2
 80011c4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	693a      	ldr	r2, [r7, #16]
 80011ca:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	f003 0303 	and.w	r3, r3, #3
 80011d4:	2b03      	cmp	r3, #3
 80011d6:	d017      	beq.n	8001208 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	68db      	ldr	r3, [r3, #12]
 80011dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80011de:	697b      	ldr	r3, [r7, #20]
 80011e0:	005b      	lsls	r3, r3, #1
 80011e2:	2203      	movs	r2, #3
 80011e4:	fa02 f303 	lsl.w	r3, r2, r3
 80011e8:	43db      	mvns	r3, r3
 80011ea:	693a      	ldr	r2, [r7, #16]
 80011ec:	4013      	ands	r3, r2
 80011ee:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	689a      	ldr	r2, [r3, #8]
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	005b      	lsls	r3, r3, #1
 80011f8:	fa02 f303 	lsl.w	r3, r2, r3
 80011fc:	693a      	ldr	r2, [r7, #16]
 80011fe:	4313      	orrs	r3, r2
 8001200:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	693a      	ldr	r2, [r7, #16]
 8001206:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	f003 0303 	and.w	r3, r3, #3
 8001210:	2b02      	cmp	r3, #2
 8001212:	d123      	bne.n	800125c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	08da      	lsrs	r2, r3, #3
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	3208      	adds	r2, #8
 800121c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001220:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	f003 0307 	and.w	r3, r3, #7
 8001228:	009b      	lsls	r3, r3, #2
 800122a:	220f      	movs	r2, #15
 800122c:	fa02 f303 	lsl.w	r3, r2, r3
 8001230:	43db      	mvns	r3, r3
 8001232:	693a      	ldr	r2, [r7, #16]
 8001234:	4013      	ands	r3, r2
 8001236:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	691a      	ldr	r2, [r3, #16]
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	f003 0307 	and.w	r3, r3, #7
 8001242:	009b      	lsls	r3, r3, #2
 8001244:	fa02 f303 	lsl.w	r3, r2, r3
 8001248:	693a      	ldr	r2, [r7, #16]
 800124a:	4313      	orrs	r3, r2
 800124c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	08da      	lsrs	r2, r3, #3
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	3208      	adds	r2, #8
 8001256:	6939      	ldr	r1, [r7, #16]
 8001258:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001262:	697b      	ldr	r3, [r7, #20]
 8001264:	005b      	lsls	r3, r3, #1
 8001266:	2203      	movs	r2, #3
 8001268:	fa02 f303 	lsl.w	r3, r2, r3
 800126c:	43db      	mvns	r3, r3
 800126e:	693a      	ldr	r2, [r7, #16]
 8001270:	4013      	ands	r3, r2
 8001272:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	f003 0203 	and.w	r2, r3, #3
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	005b      	lsls	r3, r3, #1
 8001280:	fa02 f303 	lsl.w	r3, r2, r3
 8001284:	693a      	ldr	r2, [r7, #16]
 8001286:	4313      	orrs	r3, r2
 8001288:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	693a      	ldr	r2, [r7, #16]
 800128e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001298:	2b00      	cmp	r3, #0
 800129a:	f000 80ac 	beq.w	80013f6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800129e:	4b5f      	ldr	r3, [pc, #380]	@ (800141c <HAL_GPIO_Init+0x330>)
 80012a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012a2:	4a5e      	ldr	r2, [pc, #376]	@ (800141c <HAL_GPIO_Init+0x330>)
 80012a4:	f043 0301 	orr.w	r3, r3, #1
 80012a8:	6613      	str	r3, [r2, #96]	@ 0x60
 80012aa:	4b5c      	ldr	r3, [pc, #368]	@ (800141c <HAL_GPIO_Init+0x330>)
 80012ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012ae:	f003 0301 	and.w	r3, r3, #1
 80012b2:	60bb      	str	r3, [r7, #8]
 80012b4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80012b6:	4a5a      	ldr	r2, [pc, #360]	@ (8001420 <HAL_GPIO_Init+0x334>)
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	089b      	lsrs	r3, r3, #2
 80012bc:	3302      	adds	r3, #2
 80012be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012c2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	f003 0303 	and.w	r3, r3, #3
 80012ca:	009b      	lsls	r3, r3, #2
 80012cc:	220f      	movs	r2, #15
 80012ce:	fa02 f303 	lsl.w	r3, r2, r3
 80012d2:	43db      	mvns	r3, r3
 80012d4:	693a      	ldr	r2, [r7, #16]
 80012d6:	4013      	ands	r3, r2
 80012d8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80012e0:	d025      	beq.n	800132e <HAL_GPIO_Init+0x242>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	4a4f      	ldr	r2, [pc, #316]	@ (8001424 <HAL_GPIO_Init+0x338>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d01f      	beq.n	800132a <HAL_GPIO_Init+0x23e>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	4a4e      	ldr	r2, [pc, #312]	@ (8001428 <HAL_GPIO_Init+0x33c>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d019      	beq.n	8001326 <HAL_GPIO_Init+0x23a>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	4a4d      	ldr	r2, [pc, #308]	@ (800142c <HAL_GPIO_Init+0x340>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d013      	beq.n	8001322 <HAL_GPIO_Init+0x236>
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	4a4c      	ldr	r2, [pc, #304]	@ (8001430 <HAL_GPIO_Init+0x344>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d00d      	beq.n	800131e <HAL_GPIO_Init+0x232>
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	4a4b      	ldr	r2, [pc, #300]	@ (8001434 <HAL_GPIO_Init+0x348>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d007      	beq.n	800131a <HAL_GPIO_Init+0x22e>
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	4a4a      	ldr	r2, [pc, #296]	@ (8001438 <HAL_GPIO_Init+0x34c>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d101      	bne.n	8001316 <HAL_GPIO_Init+0x22a>
 8001312:	2306      	movs	r3, #6
 8001314:	e00c      	b.n	8001330 <HAL_GPIO_Init+0x244>
 8001316:	2307      	movs	r3, #7
 8001318:	e00a      	b.n	8001330 <HAL_GPIO_Init+0x244>
 800131a:	2305      	movs	r3, #5
 800131c:	e008      	b.n	8001330 <HAL_GPIO_Init+0x244>
 800131e:	2304      	movs	r3, #4
 8001320:	e006      	b.n	8001330 <HAL_GPIO_Init+0x244>
 8001322:	2303      	movs	r3, #3
 8001324:	e004      	b.n	8001330 <HAL_GPIO_Init+0x244>
 8001326:	2302      	movs	r3, #2
 8001328:	e002      	b.n	8001330 <HAL_GPIO_Init+0x244>
 800132a:	2301      	movs	r3, #1
 800132c:	e000      	b.n	8001330 <HAL_GPIO_Init+0x244>
 800132e:	2300      	movs	r3, #0
 8001330:	697a      	ldr	r2, [r7, #20]
 8001332:	f002 0203 	and.w	r2, r2, #3
 8001336:	0092      	lsls	r2, r2, #2
 8001338:	4093      	lsls	r3, r2
 800133a:	693a      	ldr	r2, [r7, #16]
 800133c:	4313      	orrs	r3, r2
 800133e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001340:	4937      	ldr	r1, [pc, #220]	@ (8001420 <HAL_GPIO_Init+0x334>)
 8001342:	697b      	ldr	r3, [r7, #20]
 8001344:	089b      	lsrs	r3, r3, #2
 8001346:	3302      	adds	r3, #2
 8001348:	693a      	ldr	r2, [r7, #16]
 800134a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800134e:	4b3b      	ldr	r3, [pc, #236]	@ (800143c <HAL_GPIO_Init+0x350>)
 8001350:	689b      	ldr	r3, [r3, #8]
 8001352:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	43db      	mvns	r3, r3
 8001358:	693a      	ldr	r2, [r7, #16]
 800135a:	4013      	ands	r3, r2
 800135c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001366:	2b00      	cmp	r3, #0
 8001368:	d003      	beq.n	8001372 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800136a:	693a      	ldr	r2, [r7, #16]
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	4313      	orrs	r3, r2
 8001370:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001372:	4a32      	ldr	r2, [pc, #200]	@ (800143c <HAL_GPIO_Init+0x350>)
 8001374:	693b      	ldr	r3, [r7, #16]
 8001376:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001378:	4b30      	ldr	r3, [pc, #192]	@ (800143c <HAL_GPIO_Init+0x350>)
 800137a:	68db      	ldr	r3, [r3, #12]
 800137c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	43db      	mvns	r3, r3
 8001382:	693a      	ldr	r2, [r7, #16]
 8001384:	4013      	ands	r3, r2
 8001386:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001390:	2b00      	cmp	r3, #0
 8001392:	d003      	beq.n	800139c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001394:	693a      	ldr	r2, [r7, #16]
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	4313      	orrs	r3, r2
 800139a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800139c:	4a27      	ldr	r2, [pc, #156]	@ (800143c <HAL_GPIO_Init+0x350>)
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80013a2:	4b26      	ldr	r3, [pc, #152]	@ (800143c <HAL_GPIO_Init+0x350>)
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	43db      	mvns	r3, r3
 80013ac:	693a      	ldr	r2, [r7, #16]
 80013ae:	4013      	ands	r3, r2
 80013b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d003      	beq.n	80013c6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80013be:	693a      	ldr	r2, [r7, #16]
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	4313      	orrs	r3, r2
 80013c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80013c6:	4a1d      	ldr	r2, [pc, #116]	@ (800143c <HAL_GPIO_Init+0x350>)
 80013c8:	693b      	ldr	r3, [r7, #16]
 80013ca:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80013cc:	4b1b      	ldr	r3, [pc, #108]	@ (800143c <HAL_GPIO_Init+0x350>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	43db      	mvns	r3, r3
 80013d6:	693a      	ldr	r2, [r7, #16]
 80013d8:	4013      	ands	r3, r2
 80013da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d003      	beq.n	80013f0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80013e8:	693a      	ldr	r2, [r7, #16]
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	4313      	orrs	r3, r2
 80013ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80013f0:	4a12      	ldr	r2, [pc, #72]	@ (800143c <HAL_GPIO_Init+0x350>)
 80013f2:	693b      	ldr	r3, [r7, #16]
 80013f4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80013f6:	697b      	ldr	r3, [r7, #20]
 80013f8:	3301      	adds	r3, #1
 80013fa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	681a      	ldr	r2, [r3, #0]
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	fa22 f303 	lsr.w	r3, r2, r3
 8001406:	2b00      	cmp	r3, #0
 8001408:	f47f ae78 	bne.w	80010fc <HAL_GPIO_Init+0x10>
  }
}
 800140c:	bf00      	nop
 800140e:	bf00      	nop
 8001410:	371c      	adds	r7, #28
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr
 800141a:	bf00      	nop
 800141c:	40021000 	.word	0x40021000
 8001420:	40010000 	.word	0x40010000
 8001424:	48000400 	.word	0x48000400
 8001428:	48000800 	.word	0x48000800
 800142c:	48000c00 	.word	0x48000c00
 8001430:	48001000 	.word	0x48001000
 8001434:	48001400 	.word	0x48001400
 8001438:	48001800 	.word	0x48001800
 800143c:	40010400 	.word	0x40010400

08001440 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001440:	b480      	push	{r7}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
 8001448:	460b      	mov	r3, r1
 800144a:	807b      	strh	r3, [r7, #2]
 800144c:	4613      	mov	r3, r2
 800144e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001450:	787b      	ldrb	r3, [r7, #1]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d003      	beq.n	800145e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001456:	887a      	ldrh	r2, [r7, #2]
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800145c:	e002      	b.n	8001464 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800145e:	887a      	ldrh	r2, [r7, #2]
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001464:	bf00      	nop
 8001466:	370c      	adds	r7, #12
 8001468:	46bd      	mov	sp, r7
 800146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146e:	4770      	bx	lr

08001470 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001474:	4b04      	ldr	r3, [pc, #16]	@ (8001488 <HAL_PWREx_GetVoltageRange+0x18>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800147c:	4618      	mov	r0, r3
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr
 8001486:	bf00      	nop
 8001488:	40007000 	.word	0x40007000

0800148c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800148c:	b480      	push	{r7}
 800148e:	b085      	sub	sp, #20
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800149a:	d130      	bne.n	80014fe <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800149c:	4b23      	ldr	r3, [pc, #140]	@ (800152c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80014a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80014a8:	d038      	beq.n	800151c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80014aa:	4b20      	ldr	r3, [pc, #128]	@ (800152c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80014b2:	4a1e      	ldr	r2, [pc, #120]	@ (800152c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014b4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80014b8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80014ba:	4b1d      	ldr	r3, [pc, #116]	@ (8001530 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	2232      	movs	r2, #50	@ 0x32
 80014c0:	fb02 f303 	mul.w	r3, r2, r3
 80014c4:	4a1b      	ldr	r2, [pc, #108]	@ (8001534 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80014c6:	fba2 2303 	umull	r2, r3, r2, r3
 80014ca:	0c9b      	lsrs	r3, r3, #18
 80014cc:	3301      	adds	r3, #1
 80014ce:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80014d0:	e002      	b.n	80014d8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	3b01      	subs	r3, #1
 80014d6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80014d8:	4b14      	ldr	r3, [pc, #80]	@ (800152c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014da:	695b      	ldr	r3, [r3, #20]
 80014dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80014e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80014e4:	d102      	bne.n	80014ec <HAL_PWREx_ControlVoltageScaling+0x60>
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d1f2      	bne.n	80014d2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80014ec:	4b0f      	ldr	r3, [pc, #60]	@ (800152c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014ee:	695b      	ldr	r3, [r3, #20]
 80014f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80014f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80014f8:	d110      	bne.n	800151c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80014fa:	2303      	movs	r3, #3
 80014fc:	e00f      	b.n	800151e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80014fe:	4b0b      	ldr	r3, [pc, #44]	@ (800152c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001506:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800150a:	d007      	beq.n	800151c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800150c:	4b07      	ldr	r3, [pc, #28]	@ (800152c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001514:	4a05      	ldr	r2, [pc, #20]	@ (800152c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001516:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800151a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800151c:	2300      	movs	r3, #0
}
 800151e:	4618      	mov	r0, r3
 8001520:	3714      	adds	r7, #20
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr
 800152a:	bf00      	nop
 800152c:	40007000 	.word	0x40007000
 8001530:	20000000 	.word	0x20000000
 8001534:	431bde83 	.word	0x431bde83

08001538 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b088      	sub	sp, #32
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d101      	bne.n	800154a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001546:	2301      	movs	r3, #1
 8001548:	e3ca      	b.n	8001ce0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800154a:	4b97      	ldr	r3, [pc, #604]	@ (80017a8 <HAL_RCC_OscConfig+0x270>)
 800154c:	689b      	ldr	r3, [r3, #8]
 800154e:	f003 030c 	and.w	r3, r3, #12
 8001552:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001554:	4b94      	ldr	r3, [pc, #592]	@ (80017a8 <HAL_RCC_OscConfig+0x270>)
 8001556:	68db      	ldr	r3, [r3, #12]
 8001558:	f003 0303 	and.w	r3, r3, #3
 800155c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f003 0310 	and.w	r3, r3, #16
 8001566:	2b00      	cmp	r3, #0
 8001568:	f000 80e4 	beq.w	8001734 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800156c:	69bb      	ldr	r3, [r7, #24]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d007      	beq.n	8001582 <HAL_RCC_OscConfig+0x4a>
 8001572:	69bb      	ldr	r3, [r7, #24]
 8001574:	2b0c      	cmp	r3, #12
 8001576:	f040 808b 	bne.w	8001690 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800157a:	697b      	ldr	r3, [r7, #20]
 800157c:	2b01      	cmp	r3, #1
 800157e:	f040 8087 	bne.w	8001690 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001582:	4b89      	ldr	r3, [pc, #548]	@ (80017a8 <HAL_RCC_OscConfig+0x270>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f003 0302 	and.w	r3, r3, #2
 800158a:	2b00      	cmp	r3, #0
 800158c:	d005      	beq.n	800159a <HAL_RCC_OscConfig+0x62>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	699b      	ldr	r3, [r3, #24]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d101      	bne.n	800159a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001596:	2301      	movs	r3, #1
 8001598:	e3a2      	b.n	8001ce0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6a1a      	ldr	r2, [r3, #32]
 800159e:	4b82      	ldr	r3, [pc, #520]	@ (80017a8 <HAL_RCC_OscConfig+0x270>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f003 0308 	and.w	r3, r3, #8
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d004      	beq.n	80015b4 <HAL_RCC_OscConfig+0x7c>
 80015aa:	4b7f      	ldr	r3, [pc, #508]	@ (80017a8 <HAL_RCC_OscConfig+0x270>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80015b2:	e005      	b.n	80015c0 <HAL_RCC_OscConfig+0x88>
 80015b4:	4b7c      	ldr	r3, [pc, #496]	@ (80017a8 <HAL_RCC_OscConfig+0x270>)
 80015b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80015ba:	091b      	lsrs	r3, r3, #4
 80015bc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80015c0:	4293      	cmp	r3, r2
 80015c2:	d223      	bcs.n	800160c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6a1b      	ldr	r3, [r3, #32]
 80015c8:	4618      	mov	r0, r3
 80015ca:	f000 fd55 	bl	8002078 <RCC_SetFlashLatencyFromMSIRange>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d001      	beq.n	80015d8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80015d4:	2301      	movs	r3, #1
 80015d6:	e383      	b.n	8001ce0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015d8:	4b73      	ldr	r3, [pc, #460]	@ (80017a8 <HAL_RCC_OscConfig+0x270>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a72      	ldr	r2, [pc, #456]	@ (80017a8 <HAL_RCC_OscConfig+0x270>)
 80015de:	f043 0308 	orr.w	r3, r3, #8
 80015e2:	6013      	str	r3, [r2, #0]
 80015e4:	4b70      	ldr	r3, [pc, #448]	@ (80017a8 <HAL_RCC_OscConfig+0x270>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6a1b      	ldr	r3, [r3, #32]
 80015f0:	496d      	ldr	r1, [pc, #436]	@ (80017a8 <HAL_RCC_OscConfig+0x270>)
 80015f2:	4313      	orrs	r3, r2
 80015f4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015f6:	4b6c      	ldr	r3, [pc, #432]	@ (80017a8 <HAL_RCC_OscConfig+0x270>)
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	69db      	ldr	r3, [r3, #28]
 8001602:	021b      	lsls	r3, r3, #8
 8001604:	4968      	ldr	r1, [pc, #416]	@ (80017a8 <HAL_RCC_OscConfig+0x270>)
 8001606:	4313      	orrs	r3, r2
 8001608:	604b      	str	r3, [r1, #4]
 800160a:	e025      	b.n	8001658 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800160c:	4b66      	ldr	r3, [pc, #408]	@ (80017a8 <HAL_RCC_OscConfig+0x270>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a65      	ldr	r2, [pc, #404]	@ (80017a8 <HAL_RCC_OscConfig+0x270>)
 8001612:	f043 0308 	orr.w	r3, r3, #8
 8001616:	6013      	str	r3, [r2, #0]
 8001618:	4b63      	ldr	r3, [pc, #396]	@ (80017a8 <HAL_RCC_OscConfig+0x270>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6a1b      	ldr	r3, [r3, #32]
 8001624:	4960      	ldr	r1, [pc, #384]	@ (80017a8 <HAL_RCC_OscConfig+0x270>)
 8001626:	4313      	orrs	r3, r2
 8001628:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800162a:	4b5f      	ldr	r3, [pc, #380]	@ (80017a8 <HAL_RCC_OscConfig+0x270>)
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	69db      	ldr	r3, [r3, #28]
 8001636:	021b      	lsls	r3, r3, #8
 8001638:	495b      	ldr	r1, [pc, #364]	@ (80017a8 <HAL_RCC_OscConfig+0x270>)
 800163a:	4313      	orrs	r3, r2
 800163c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800163e:	69bb      	ldr	r3, [r7, #24]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d109      	bne.n	8001658 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6a1b      	ldr	r3, [r3, #32]
 8001648:	4618      	mov	r0, r3
 800164a:	f000 fd15 	bl	8002078 <RCC_SetFlashLatencyFromMSIRange>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d001      	beq.n	8001658 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001654:	2301      	movs	r3, #1
 8001656:	e343      	b.n	8001ce0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001658:	f000 fc4a 	bl	8001ef0 <HAL_RCC_GetSysClockFreq>
 800165c:	4602      	mov	r2, r0
 800165e:	4b52      	ldr	r3, [pc, #328]	@ (80017a8 <HAL_RCC_OscConfig+0x270>)
 8001660:	689b      	ldr	r3, [r3, #8]
 8001662:	091b      	lsrs	r3, r3, #4
 8001664:	f003 030f 	and.w	r3, r3, #15
 8001668:	4950      	ldr	r1, [pc, #320]	@ (80017ac <HAL_RCC_OscConfig+0x274>)
 800166a:	5ccb      	ldrb	r3, [r1, r3]
 800166c:	f003 031f 	and.w	r3, r3, #31
 8001670:	fa22 f303 	lsr.w	r3, r2, r3
 8001674:	4a4e      	ldr	r2, [pc, #312]	@ (80017b0 <HAL_RCC_OscConfig+0x278>)
 8001676:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001678:	4b4e      	ldr	r3, [pc, #312]	@ (80017b4 <HAL_RCC_OscConfig+0x27c>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4618      	mov	r0, r3
 800167e:	f7ff fc07 	bl	8000e90 <HAL_InitTick>
 8001682:	4603      	mov	r3, r0
 8001684:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001686:	7bfb      	ldrb	r3, [r7, #15]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d052      	beq.n	8001732 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800168c:	7bfb      	ldrb	r3, [r7, #15]
 800168e:	e327      	b.n	8001ce0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	699b      	ldr	r3, [r3, #24]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d032      	beq.n	80016fe <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001698:	4b43      	ldr	r3, [pc, #268]	@ (80017a8 <HAL_RCC_OscConfig+0x270>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a42      	ldr	r2, [pc, #264]	@ (80017a8 <HAL_RCC_OscConfig+0x270>)
 800169e:	f043 0301 	orr.w	r3, r3, #1
 80016a2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80016a4:	f7ff fc30 	bl	8000f08 <HAL_GetTick>
 80016a8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80016aa:	e008      	b.n	80016be <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80016ac:	f7ff fc2c 	bl	8000f08 <HAL_GetTick>
 80016b0:	4602      	mov	r2, r0
 80016b2:	693b      	ldr	r3, [r7, #16]
 80016b4:	1ad3      	subs	r3, r2, r3
 80016b6:	2b02      	cmp	r3, #2
 80016b8:	d901      	bls.n	80016be <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80016ba:	2303      	movs	r3, #3
 80016bc:	e310      	b.n	8001ce0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80016be:	4b3a      	ldr	r3, [pc, #232]	@ (80017a8 <HAL_RCC_OscConfig+0x270>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f003 0302 	and.w	r3, r3, #2
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d0f0      	beq.n	80016ac <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80016ca:	4b37      	ldr	r3, [pc, #220]	@ (80017a8 <HAL_RCC_OscConfig+0x270>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4a36      	ldr	r2, [pc, #216]	@ (80017a8 <HAL_RCC_OscConfig+0x270>)
 80016d0:	f043 0308 	orr.w	r3, r3, #8
 80016d4:	6013      	str	r3, [r2, #0]
 80016d6:	4b34      	ldr	r3, [pc, #208]	@ (80017a8 <HAL_RCC_OscConfig+0x270>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6a1b      	ldr	r3, [r3, #32]
 80016e2:	4931      	ldr	r1, [pc, #196]	@ (80017a8 <HAL_RCC_OscConfig+0x270>)
 80016e4:	4313      	orrs	r3, r2
 80016e6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80016e8:	4b2f      	ldr	r3, [pc, #188]	@ (80017a8 <HAL_RCC_OscConfig+0x270>)
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	69db      	ldr	r3, [r3, #28]
 80016f4:	021b      	lsls	r3, r3, #8
 80016f6:	492c      	ldr	r1, [pc, #176]	@ (80017a8 <HAL_RCC_OscConfig+0x270>)
 80016f8:	4313      	orrs	r3, r2
 80016fa:	604b      	str	r3, [r1, #4]
 80016fc:	e01a      	b.n	8001734 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80016fe:	4b2a      	ldr	r3, [pc, #168]	@ (80017a8 <HAL_RCC_OscConfig+0x270>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a29      	ldr	r2, [pc, #164]	@ (80017a8 <HAL_RCC_OscConfig+0x270>)
 8001704:	f023 0301 	bic.w	r3, r3, #1
 8001708:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800170a:	f7ff fbfd 	bl	8000f08 <HAL_GetTick>
 800170e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001710:	e008      	b.n	8001724 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001712:	f7ff fbf9 	bl	8000f08 <HAL_GetTick>
 8001716:	4602      	mov	r2, r0
 8001718:	693b      	ldr	r3, [r7, #16]
 800171a:	1ad3      	subs	r3, r2, r3
 800171c:	2b02      	cmp	r3, #2
 800171e:	d901      	bls.n	8001724 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001720:	2303      	movs	r3, #3
 8001722:	e2dd      	b.n	8001ce0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001724:	4b20      	ldr	r3, [pc, #128]	@ (80017a8 <HAL_RCC_OscConfig+0x270>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f003 0302 	and.w	r3, r3, #2
 800172c:	2b00      	cmp	r3, #0
 800172e:	d1f0      	bne.n	8001712 <HAL_RCC_OscConfig+0x1da>
 8001730:	e000      	b.n	8001734 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001732:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f003 0301 	and.w	r3, r3, #1
 800173c:	2b00      	cmp	r3, #0
 800173e:	d074      	beq.n	800182a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001740:	69bb      	ldr	r3, [r7, #24]
 8001742:	2b08      	cmp	r3, #8
 8001744:	d005      	beq.n	8001752 <HAL_RCC_OscConfig+0x21a>
 8001746:	69bb      	ldr	r3, [r7, #24]
 8001748:	2b0c      	cmp	r3, #12
 800174a:	d10e      	bne.n	800176a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	2b03      	cmp	r3, #3
 8001750:	d10b      	bne.n	800176a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001752:	4b15      	ldr	r3, [pc, #84]	@ (80017a8 <HAL_RCC_OscConfig+0x270>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800175a:	2b00      	cmp	r3, #0
 800175c:	d064      	beq.n	8001828 <HAL_RCC_OscConfig+0x2f0>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d160      	bne.n	8001828 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001766:	2301      	movs	r3, #1
 8001768:	e2ba      	b.n	8001ce0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001772:	d106      	bne.n	8001782 <HAL_RCC_OscConfig+0x24a>
 8001774:	4b0c      	ldr	r3, [pc, #48]	@ (80017a8 <HAL_RCC_OscConfig+0x270>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a0b      	ldr	r2, [pc, #44]	@ (80017a8 <HAL_RCC_OscConfig+0x270>)
 800177a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800177e:	6013      	str	r3, [r2, #0]
 8001780:	e026      	b.n	80017d0 <HAL_RCC_OscConfig+0x298>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800178a:	d115      	bne.n	80017b8 <HAL_RCC_OscConfig+0x280>
 800178c:	4b06      	ldr	r3, [pc, #24]	@ (80017a8 <HAL_RCC_OscConfig+0x270>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a05      	ldr	r2, [pc, #20]	@ (80017a8 <HAL_RCC_OscConfig+0x270>)
 8001792:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001796:	6013      	str	r3, [r2, #0]
 8001798:	4b03      	ldr	r3, [pc, #12]	@ (80017a8 <HAL_RCC_OscConfig+0x270>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a02      	ldr	r2, [pc, #8]	@ (80017a8 <HAL_RCC_OscConfig+0x270>)
 800179e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017a2:	6013      	str	r3, [r2, #0]
 80017a4:	e014      	b.n	80017d0 <HAL_RCC_OscConfig+0x298>
 80017a6:	bf00      	nop
 80017a8:	40021000 	.word	0x40021000
 80017ac:	08006cf4 	.word	0x08006cf4
 80017b0:	20000000 	.word	0x20000000
 80017b4:	20000004 	.word	0x20000004
 80017b8:	4ba0      	ldr	r3, [pc, #640]	@ (8001a3c <HAL_RCC_OscConfig+0x504>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a9f      	ldr	r2, [pc, #636]	@ (8001a3c <HAL_RCC_OscConfig+0x504>)
 80017be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80017c2:	6013      	str	r3, [r2, #0]
 80017c4:	4b9d      	ldr	r3, [pc, #628]	@ (8001a3c <HAL_RCC_OscConfig+0x504>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a9c      	ldr	r2, [pc, #624]	@ (8001a3c <HAL_RCC_OscConfig+0x504>)
 80017ca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80017ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d013      	beq.n	8001800 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017d8:	f7ff fb96 	bl	8000f08 <HAL_GetTick>
 80017dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017de:	e008      	b.n	80017f2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017e0:	f7ff fb92 	bl	8000f08 <HAL_GetTick>
 80017e4:	4602      	mov	r2, r0
 80017e6:	693b      	ldr	r3, [r7, #16]
 80017e8:	1ad3      	subs	r3, r2, r3
 80017ea:	2b64      	cmp	r3, #100	@ 0x64
 80017ec:	d901      	bls.n	80017f2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80017ee:	2303      	movs	r3, #3
 80017f0:	e276      	b.n	8001ce0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017f2:	4b92      	ldr	r3, [pc, #584]	@ (8001a3c <HAL_RCC_OscConfig+0x504>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d0f0      	beq.n	80017e0 <HAL_RCC_OscConfig+0x2a8>
 80017fe:	e014      	b.n	800182a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001800:	f7ff fb82 	bl	8000f08 <HAL_GetTick>
 8001804:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001806:	e008      	b.n	800181a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001808:	f7ff fb7e 	bl	8000f08 <HAL_GetTick>
 800180c:	4602      	mov	r2, r0
 800180e:	693b      	ldr	r3, [r7, #16]
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	2b64      	cmp	r3, #100	@ 0x64
 8001814:	d901      	bls.n	800181a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001816:	2303      	movs	r3, #3
 8001818:	e262      	b.n	8001ce0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800181a:	4b88      	ldr	r3, [pc, #544]	@ (8001a3c <HAL_RCC_OscConfig+0x504>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001822:	2b00      	cmp	r3, #0
 8001824:	d1f0      	bne.n	8001808 <HAL_RCC_OscConfig+0x2d0>
 8001826:	e000      	b.n	800182a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001828:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f003 0302 	and.w	r3, r3, #2
 8001832:	2b00      	cmp	r3, #0
 8001834:	d060      	beq.n	80018f8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001836:	69bb      	ldr	r3, [r7, #24]
 8001838:	2b04      	cmp	r3, #4
 800183a:	d005      	beq.n	8001848 <HAL_RCC_OscConfig+0x310>
 800183c:	69bb      	ldr	r3, [r7, #24]
 800183e:	2b0c      	cmp	r3, #12
 8001840:	d119      	bne.n	8001876 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	2b02      	cmp	r3, #2
 8001846:	d116      	bne.n	8001876 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001848:	4b7c      	ldr	r3, [pc, #496]	@ (8001a3c <HAL_RCC_OscConfig+0x504>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001850:	2b00      	cmp	r3, #0
 8001852:	d005      	beq.n	8001860 <HAL_RCC_OscConfig+0x328>
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	68db      	ldr	r3, [r3, #12]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d101      	bne.n	8001860 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800185c:	2301      	movs	r3, #1
 800185e:	e23f      	b.n	8001ce0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001860:	4b76      	ldr	r3, [pc, #472]	@ (8001a3c <HAL_RCC_OscConfig+0x504>)
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	691b      	ldr	r3, [r3, #16]
 800186c:	061b      	lsls	r3, r3, #24
 800186e:	4973      	ldr	r1, [pc, #460]	@ (8001a3c <HAL_RCC_OscConfig+0x504>)
 8001870:	4313      	orrs	r3, r2
 8001872:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001874:	e040      	b.n	80018f8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	68db      	ldr	r3, [r3, #12]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d023      	beq.n	80018c6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800187e:	4b6f      	ldr	r3, [pc, #444]	@ (8001a3c <HAL_RCC_OscConfig+0x504>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a6e      	ldr	r2, [pc, #440]	@ (8001a3c <HAL_RCC_OscConfig+0x504>)
 8001884:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001888:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800188a:	f7ff fb3d 	bl	8000f08 <HAL_GetTick>
 800188e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001890:	e008      	b.n	80018a4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001892:	f7ff fb39 	bl	8000f08 <HAL_GetTick>
 8001896:	4602      	mov	r2, r0
 8001898:	693b      	ldr	r3, [r7, #16]
 800189a:	1ad3      	subs	r3, r2, r3
 800189c:	2b02      	cmp	r3, #2
 800189e:	d901      	bls.n	80018a4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80018a0:	2303      	movs	r3, #3
 80018a2:	e21d      	b.n	8001ce0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018a4:	4b65      	ldr	r3, [pc, #404]	@ (8001a3c <HAL_RCC_OscConfig+0x504>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d0f0      	beq.n	8001892 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018b0:	4b62      	ldr	r3, [pc, #392]	@ (8001a3c <HAL_RCC_OscConfig+0x504>)
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	691b      	ldr	r3, [r3, #16]
 80018bc:	061b      	lsls	r3, r3, #24
 80018be:	495f      	ldr	r1, [pc, #380]	@ (8001a3c <HAL_RCC_OscConfig+0x504>)
 80018c0:	4313      	orrs	r3, r2
 80018c2:	604b      	str	r3, [r1, #4]
 80018c4:	e018      	b.n	80018f8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018c6:	4b5d      	ldr	r3, [pc, #372]	@ (8001a3c <HAL_RCC_OscConfig+0x504>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4a5c      	ldr	r2, [pc, #368]	@ (8001a3c <HAL_RCC_OscConfig+0x504>)
 80018cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80018d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018d2:	f7ff fb19 	bl	8000f08 <HAL_GetTick>
 80018d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80018d8:	e008      	b.n	80018ec <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018da:	f7ff fb15 	bl	8000f08 <HAL_GetTick>
 80018de:	4602      	mov	r2, r0
 80018e0:	693b      	ldr	r3, [r7, #16]
 80018e2:	1ad3      	subs	r3, r2, r3
 80018e4:	2b02      	cmp	r3, #2
 80018e6:	d901      	bls.n	80018ec <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80018e8:	2303      	movs	r3, #3
 80018ea:	e1f9      	b.n	8001ce0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80018ec:	4b53      	ldr	r3, [pc, #332]	@ (8001a3c <HAL_RCC_OscConfig+0x504>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d1f0      	bne.n	80018da <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f003 0308 	and.w	r3, r3, #8
 8001900:	2b00      	cmp	r3, #0
 8001902:	d03c      	beq.n	800197e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	695b      	ldr	r3, [r3, #20]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d01c      	beq.n	8001946 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800190c:	4b4b      	ldr	r3, [pc, #300]	@ (8001a3c <HAL_RCC_OscConfig+0x504>)
 800190e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001912:	4a4a      	ldr	r2, [pc, #296]	@ (8001a3c <HAL_RCC_OscConfig+0x504>)
 8001914:	f043 0301 	orr.w	r3, r3, #1
 8001918:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800191c:	f7ff faf4 	bl	8000f08 <HAL_GetTick>
 8001920:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001922:	e008      	b.n	8001936 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001924:	f7ff faf0 	bl	8000f08 <HAL_GetTick>
 8001928:	4602      	mov	r2, r0
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	2b02      	cmp	r3, #2
 8001930:	d901      	bls.n	8001936 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001932:	2303      	movs	r3, #3
 8001934:	e1d4      	b.n	8001ce0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001936:	4b41      	ldr	r3, [pc, #260]	@ (8001a3c <HAL_RCC_OscConfig+0x504>)
 8001938:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800193c:	f003 0302 	and.w	r3, r3, #2
 8001940:	2b00      	cmp	r3, #0
 8001942:	d0ef      	beq.n	8001924 <HAL_RCC_OscConfig+0x3ec>
 8001944:	e01b      	b.n	800197e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001946:	4b3d      	ldr	r3, [pc, #244]	@ (8001a3c <HAL_RCC_OscConfig+0x504>)
 8001948:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800194c:	4a3b      	ldr	r2, [pc, #236]	@ (8001a3c <HAL_RCC_OscConfig+0x504>)
 800194e:	f023 0301 	bic.w	r3, r3, #1
 8001952:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001956:	f7ff fad7 	bl	8000f08 <HAL_GetTick>
 800195a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800195c:	e008      	b.n	8001970 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800195e:	f7ff fad3 	bl	8000f08 <HAL_GetTick>
 8001962:	4602      	mov	r2, r0
 8001964:	693b      	ldr	r3, [r7, #16]
 8001966:	1ad3      	subs	r3, r2, r3
 8001968:	2b02      	cmp	r3, #2
 800196a:	d901      	bls.n	8001970 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800196c:	2303      	movs	r3, #3
 800196e:	e1b7      	b.n	8001ce0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001970:	4b32      	ldr	r3, [pc, #200]	@ (8001a3c <HAL_RCC_OscConfig+0x504>)
 8001972:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001976:	f003 0302 	and.w	r3, r3, #2
 800197a:	2b00      	cmp	r3, #0
 800197c:	d1ef      	bne.n	800195e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f003 0304 	and.w	r3, r3, #4
 8001986:	2b00      	cmp	r3, #0
 8001988:	f000 80a6 	beq.w	8001ad8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800198c:	2300      	movs	r3, #0
 800198e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001990:	4b2a      	ldr	r3, [pc, #168]	@ (8001a3c <HAL_RCC_OscConfig+0x504>)
 8001992:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001994:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001998:	2b00      	cmp	r3, #0
 800199a:	d10d      	bne.n	80019b8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800199c:	4b27      	ldr	r3, [pc, #156]	@ (8001a3c <HAL_RCC_OscConfig+0x504>)
 800199e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019a0:	4a26      	ldr	r2, [pc, #152]	@ (8001a3c <HAL_RCC_OscConfig+0x504>)
 80019a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019a6:	6593      	str	r3, [r2, #88]	@ 0x58
 80019a8:	4b24      	ldr	r3, [pc, #144]	@ (8001a3c <HAL_RCC_OscConfig+0x504>)
 80019aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019b0:	60bb      	str	r3, [r7, #8]
 80019b2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019b4:	2301      	movs	r3, #1
 80019b6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019b8:	4b21      	ldr	r3, [pc, #132]	@ (8001a40 <HAL_RCC_OscConfig+0x508>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d118      	bne.n	80019f6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80019c4:	4b1e      	ldr	r3, [pc, #120]	@ (8001a40 <HAL_RCC_OscConfig+0x508>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a1d      	ldr	r2, [pc, #116]	@ (8001a40 <HAL_RCC_OscConfig+0x508>)
 80019ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019ce:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019d0:	f7ff fa9a 	bl	8000f08 <HAL_GetTick>
 80019d4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019d6:	e008      	b.n	80019ea <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019d8:	f7ff fa96 	bl	8000f08 <HAL_GetTick>
 80019dc:	4602      	mov	r2, r0
 80019de:	693b      	ldr	r3, [r7, #16]
 80019e0:	1ad3      	subs	r3, r2, r3
 80019e2:	2b02      	cmp	r3, #2
 80019e4:	d901      	bls.n	80019ea <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80019e6:	2303      	movs	r3, #3
 80019e8:	e17a      	b.n	8001ce0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019ea:	4b15      	ldr	r3, [pc, #84]	@ (8001a40 <HAL_RCC_OscConfig+0x508>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d0f0      	beq.n	80019d8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	689b      	ldr	r3, [r3, #8]
 80019fa:	2b01      	cmp	r3, #1
 80019fc:	d108      	bne.n	8001a10 <HAL_RCC_OscConfig+0x4d8>
 80019fe:	4b0f      	ldr	r3, [pc, #60]	@ (8001a3c <HAL_RCC_OscConfig+0x504>)
 8001a00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a04:	4a0d      	ldr	r2, [pc, #52]	@ (8001a3c <HAL_RCC_OscConfig+0x504>)
 8001a06:	f043 0301 	orr.w	r3, r3, #1
 8001a0a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001a0e:	e029      	b.n	8001a64 <HAL_RCC_OscConfig+0x52c>
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	2b05      	cmp	r3, #5
 8001a16:	d115      	bne.n	8001a44 <HAL_RCC_OscConfig+0x50c>
 8001a18:	4b08      	ldr	r3, [pc, #32]	@ (8001a3c <HAL_RCC_OscConfig+0x504>)
 8001a1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a1e:	4a07      	ldr	r2, [pc, #28]	@ (8001a3c <HAL_RCC_OscConfig+0x504>)
 8001a20:	f043 0304 	orr.w	r3, r3, #4
 8001a24:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001a28:	4b04      	ldr	r3, [pc, #16]	@ (8001a3c <HAL_RCC_OscConfig+0x504>)
 8001a2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a2e:	4a03      	ldr	r2, [pc, #12]	@ (8001a3c <HAL_RCC_OscConfig+0x504>)
 8001a30:	f043 0301 	orr.w	r3, r3, #1
 8001a34:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001a38:	e014      	b.n	8001a64 <HAL_RCC_OscConfig+0x52c>
 8001a3a:	bf00      	nop
 8001a3c:	40021000 	.word	0x40021000
 8001a40:	40007000 	.word	0x40007000
 8001a44:	4b9c      	ldr	r3, [pc, #624]	@ (8001cb8 <HAL_RCC_OscConfig+0x780>)
 8001a46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a4a:	4a9b      	ldr	r2, [pc, #620]	@ (8001cb8 <HAL_RCC_OscConfig+0x780>)
 8001a4c:	f023 0301 	bic.w	r3, r3, #1
 8001a50:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001a54:	4b98      	ldr	r3, [pc, #608]	@ (8001cb8 <HAL_RCC_OscConfig+0x780>)
 8001a56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a5a:	4a97      	ldr	r2, [pc, #604]	@ (8001cb8 <HAL_RCC_OscConfig+0x780>)
 8001a5c:	f023 0304 	bic.w	r3, r3, #4
 8001a60:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d016      	beq.n	8001a9a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a6c:	f7ff fa4c 	bl	8000f08 <HAL_GetTick>
 8001a70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a72:	e00a      	b.n	8001a8a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a74:	f7ff fa48 	bl	8000f08 <HAL_GetTick>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	1ad3      	subs	r3, r2, r3
 8001a7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d901      	bls.n	8001a8a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001a86:	2303      	movs	r3, #3
 8001a88:	e12a      	b.n	8001ce0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a8a:	4b8b      	ldr	r3, [pc, #556]	@ (8001cb8 <HAL_RCC_OscConfig+0x780>)
 8001a8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a90:	f003 0302 	and.w	r3, r3, #2
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d0ed      	beq.n	8001a74 <HAL_RCC_OscConfig+0x53c>
 8001a98:	e015      	b.n	8001ac6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a9a:	f7ff fa35 	bl	8000f08 <HAL_GetTick>
 8001a9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001aa0:	e00a      	b.n	8001ab8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001aa2:	f7ff fa31 	bl	8000f08 <HAL_GetTick>
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	1ad3      	subs	r3, r2, r3
 8001aac:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d901      	bls.n	8001ab8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001ab4:	2303      	movs	r3, #3
 8001ab6:	e113      	b.n	8001ce0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ab8:	4b7f      	ldr	r3, [pc, #508]	@ (8001cb8 <HAL_RCC_OscConfig+0x780>)
 8001aba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001abe:	f003 0302 	and.w	r3, r3, #2
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d1ed      	bne.n	8001aa2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ac6:	7ffb      	ldrb	r3, [r7, #31]
 8001ac8:	2b01      	cmp	r3, #1
 8001aca:	d105      	bne.n	8001ad8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001acc:	4b7a      	ldr	r3, [pc, #488]	@ (8001cb8 <HAL_RCC_OscConfig+0x780>)
 8001ace:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ad0:	4a79      	ldr	r2, [pc, #484]	@ (8001cb8 <HAL_RCC_OscConfig+0x780>)
 8001ad2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001ad6:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	f000 80fe 	beq.w	8001cde <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ae6:	2b02      	cmp	r3, #2
 8001ae8:	f040 80d0 	bne.w	8001c8c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001aec:	4b72      	ldr	r3, [pc, #456]	@ (8001cb8 <HAL_RCC_OscConfig+0x780>)
 8001aee:	68db      	ldr	r3, [r3, #12]
 8001af0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	f003 0203 	and.w	r2, r3, #3
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d130      	bne.n	8001b62 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b0a:	3b01      	subs	r3, #1
 8001b0c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b0e:	429a      	cmp	r2, r3
 8001b10:	d127      	bne.n	8001b62 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b1c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b1e:	429a      	cmp	r2, r3
 8001b20:	d11f      	bne.n	8001b62 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b28:	687a      	ldr	r2, [r7, #4]
 8001b2a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001b2c:	2a07      	cmp	r2, #7
 8001b2e:	bf14      	ite	ne
 8001b30:	2201      	movne	r2, #1
 8001b32:	2200      	moveq	r2, #0
 8001b34:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d113      	bne.n	8001b62 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b44:	085b      	lsrs	r3, r3, #1
 8001b46:	3b01      	subs	r3, #1
 8001b48:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001b4a:	429a      	cmp	r2, r3
 8001b4c:	d109      	bne.n	8001b62 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001b4e:	697b      	ldr	r3, [r7, #20]
 8001b50:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b58:	085b      	lsrs	r3, r3, #1
 8001b5a:	3b01      	subs	r3, #1
 8001b5c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b5e:	429a      	cmp	r2, r3
 8001b60:	d06e      	beq.n	8001c40 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b62:	69bb      	ldr	r3, [r7, #24]
 8001b64:	2b0c      	cmp	r3, #12
 8001b66:	d069      	beq.n	8001c3c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001b68:	4b53      	ldr	r3, [pc, #332]	@ (8001cb8 <HAL_RCC_OscConfig+0x780>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d105      	bne.n	8001b80 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001b74:	4b50      	ldr	r3, [pc, #320]	@ (8001cb8 <HAL_RCC_OscConfig+0x780>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d001      	beq.n	8001b84 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001b80:	2301      	movs	r3, #1
 8001b82:	e0ad      	b.n	8001ce0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001b84:	4b4c      	ldr	r3, [pc, #304]	@ (8001cb8 <HAL_RCC_OscConfig+0x780>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a4b      	ldr	r2, [pc, #300]	@ (8001cb8 <HAL_RCC_OscConfig+0x780>)
 8001b8a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001b8e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001b90:	f7ff f9ba 	bl	8000f08 <HAL_GetTick>
 8001b94:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b96:	e008      	b.n	8001baa <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b98:	f7ff f9b6 	bl	8000f08 <HAL_GetTick>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	1ad3      	subs	r3, r2, r3
 8001ba2:	2b02      	cmp	r3, #2
 8001ba4:	d901      	bls.n	8001baa <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001ba6:	2303      	movs	r3, #3
 8001ba8:	e09a      	b.n	8001ce0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001baa:	4b43      	ldr	r3, [pc, #268]	@ (8001cb8 <HAL_RCC_OscConfig+0x780>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d1f0      	bne.n	8001b98 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bb6:	4b40      	ldr	r3, [pc, #256]	@ (8001cb8 <HAL_RCC_OscConfig+0x780>)
 8001bb8:	68da      	ldr	r2, [r3, #12]
 8001bba:	4b40      	ldr	r3, [pc, #256]	@ (8001cbc <HAL_RCC_OscConfig+0x784>)
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	687a      	ldr	r2, [r7, #4]
 8001bc0:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001bc2:	687a      	ldr	r2, [r7, #4]
 8001bc4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001bc6:	3a01      	subs	r2, #1
 8001bc8:	0112      	lsls	r2, r2, #4
 8001bca:	4311      	orrs	r1, r2
 8001bcc:	687a      	ldr	r2, [r7, #4]
 8001bce:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001bd0:	0212      	lsls	r2, r2, #8
 8001bd2:	4311      	orrs	r1, r2
 8001bd4:	687a      	ldr	r2, [r7, #4]
 8001bd6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001bd8:	0852      	lsrs	r2, r2, #1
 8001bda:	3a01      	subs	r2, #1
 8001bdc:	0552      	lsls	r2, r2, #21
 8001bde:	4311      	orrs	r1, r2
 8001be0:	687a      	ldr	r2, [r7, #4]
 8001be2:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001be4:	0852      	lsrs	r2, r2, #1
 8001be6:	3a01      	subs	r2, #1
 8001be8:	0652      	lsls	r2, r2, #25
 8001bea:	4311      	orrs	r1, r2
 8001bec:	687a      	ldr	r2, [r7, #4]
 8001bee:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001bf0:	0912      	lsrs	r2, r2, #4
 8001bf2:	0452      	lsls	r2, r2, #17
 8001bf4:	430a      	orrs	r2, r1
 8001bf6:	4930      	ldr	r1, [pc, #192]	@ (8001cb8 <HAL_RCC_OscConfig+0x780>)
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001bfc:	4b2e      	ldr	r3, [pc, #184]	@ (8001cb8 <HAL_RCC_OscConfig+0x780>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a2d      	ldr	r2, [pc, #180]	@ (8001cb8 <HAL_RCC_OscConfig+0x780>)
 8001c02:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001c06:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c08:	4b2b      	ldr	r3, [pc, #172]	@ (8001cb8 <HAL_RCC_OscConfig+0x780>)
 8001c0a:	68db      	ldr	r3, [r3, #12]
 8001c0c:	4a2a      	ldr	r2, [pc, #168]	@ (8001cb8 <HAL_RCC_OscConfig+0x780>)
 8001c0e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001c12:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001c14:	f7ff f978 	bl	8000f08 <HAL_GetTick>
 8001c18:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c1a:	e008      	b.n	8001c2e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c1c:	f7ff f974 	bl	8000f08 <HAL_GetTick>
 8001c20:	4602      	mov	r2, r0
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	1ad3      	subs	r3, r2, r3
 8001c26:	2b02      	cmp	r3, #2
 8001c28:	d901      	bls.n	8001c2e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001c2a:	2303      	movs	r3, #3
 8001c2c:	e058      	b.n	8001ce0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c2e:	4b22      	ldr	r3, [pc, #136]	@ (8001cb8 <HAL_RCC_OscConfig+0x780>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d0f0      	beq.n	8001c1c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c3a:	e050      	b.n	8001cde <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	e04f      	b.n	8001ce0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c40:	4b1d      	ldr	r3, [pc, #116]	@ (8001cb8 <HAL_RCC_OscConfig+0x780>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d148      	bne.n	8001cde <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001c4c:	4b1a      	ldr	r3, [pc, #104]	@ (8001cb8 <HAL_RCC_OscConfig+0x780>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a19      	ldr	r2, [pc, #100]	@ (8001cb8 <HAL_RCC_OscConfig+0x780>)
 8001c52:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001c56:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c58:	4b17      	ldr	r3, [pc, #92]	@ (8001cb8 <HAL_RCC_OscConfig+0x780>)
 8001c5a:	68db      	ldr	r3, [r3, #12]
 8001c5c:	4a16      	ldr	r2, [pc, #88]	@ (8001cb8 <HAL_RCC_OscConfig+0x780>)
 8001c5e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001c62:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001c64:	f7ff f950 	bl	8000f08 <HAL_GetTick>
 8001c68:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c6a:	e008      	b.n	8001c7e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c6c:	f7ff f94c 	bl	8000f08 <HAL_GetTick>
 8001c70:	4602      	mov	r2, r0
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	1ad3      	subs	r3, r2, r3
 8001c76:	2b02      	cmp	r3, #2
 8001c78:	d901      	bls.n	8001c7e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001c7a:	2303      	movs	r3, #3
 8001c7c:	e030      	b.n	8001ce0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c7e:	4b0e      	ldr	r3, [pc, #56]	@ (8001cb8 <HAL_RCC_OscConfig+0x780>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d0f0      	beq.n	8001c6c <HAL_RCC_OscConfig+0x734>
 8001c8a:	e028      	b.n	8001cde <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c8c:	69bb      	ldr	r3, [r7, #24]
 8001c8e:	2b0c      	cmp	r3, #12
 8001c90:	d023      	beq.n	8001cda <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c92:	4b09      	ldr	r3, [pc, #36]	@ (8001cb8 <HAL_RCC_OscConfig+0x780>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a08      	ldr	r2, [pc, #32]	@ (8001cb8 <HAL_RCC_OscConfig+0x780>)
 8001c98:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001c9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c9e:	f7ff f933 	bl	8000f08 <HAL_GetTick>
 8001ca2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ca4:	e00c      	b.n	8001cc0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ca6:	f7ff f92f 	bl	8000f08 <HAL_GetTick>
 8001caa:	4602      	mov	r2, r0
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	1ad3      	subs	r3, r2, r3
 8001cb0:	2b02      	cmp	r3, #2
 8001cb2:	d905      	bls.n	8001cc0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001cb4:	2303      	movs	r3, #3
 8001cb6:	e013      	b.n	8001ce0 <HAL_RCC_OscConfig+0x7a8>
 8001cb8:	40021000 	.word	0x40021000
 8001cbc:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cc0:	4b09      	ldr	r3, [pc, #36]	@ (8001ce8 <HAL_RCC_OscConfig+0x7b0>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d1ec      	bne.n	8001ca6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001ccc:	4b06      	ldr	r3, [pc, #24]	@ (8001ce8 <HAL_RCC_OscConfig+0x7b0>)
 8001cce:	68da      	ldr	r2, [r3, #12]
 8001cd0:	4905      	ldr	r1, [pc, #20]	@ (8001ce8 <HAL_RCC_OscConfig+0x7b0>)
 8001cd2:	4b06      	ldr	r3, [pc, #24]	@ (8001cec <HAL_RCC_OscConfig+0x7b4>)
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	60cb      	str	r3, [r1, #12]
 8001cd8:	e001      	b.n	8001cde <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e000      	b.n	8001ce0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001cde:	2300      	movs	r3, #0
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	3720      	adds	r7, #32
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	40021000 	.word	0x40021000
 8001cec:	feeefffc 	.word	0xfeeefffc

08001cf0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b084      	sub	sp, #16
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
 8001cf8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d101      	bne.n	8001d04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d00:	2301      	movs	r3, #1
 8001d02:	e0e7      	b.n	8001ed4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d04:	4b75      	ldr	r3, [pc, #468]	@ (8001edc <HAL_RCC_ClockConfig+0x1ec>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f003 0307 	and.w	r3, r3, #7
 8001d0c:	683a      	ldr	r2, [r7, #0]
 8001d0e:	429a      	cmp	r2, r3
 8001d10:	d910      	bls.n	8001d34 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d12:	4b72      	ldr	r3, [pc, #456]	@ (8001edc <HAL_RCC_ClockConfig+0x1ec>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f023 0207 	bic.w	r2, r3, #7
 8001d1a:	4970      	ldr	r1, [pc, #448]	@ (8001edc <HAL_RCC_ClockConfig+0x1ec>)
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d22:	4b6e      	ldr	r3, [pc, #440]	@ (8001edc <HAL_RCC_ClockConfig+0x1ec>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f003 0307 	and.w	r3, r3, #7
 8001d2a:	683a      	ldr	r2, [r7, #0]
 8001d2c:	429a      	cmp	r2, r3
 8001d2e:	d001      	beq.n	8001d34 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001d30:	2301      	movs	r3, #1
 8001d32:	e0cf      	b.n	8001ed4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f003 0302 	and.w	r3, r3, #2
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d010      	beq.n	8001d62 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	689a      	ldr	r2, [r3, #8]
 8001d44:	4b66      	ldr	r3, [pc, #408]	@ (8001ee0 <HAL_RCC_ClockConfig+0x1f0>)
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001d4c:	429a      	cmp	r2, r3
 8001d4e:	d908      	bls.n	8001d62 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d50:	4b63      	ldr	r3, [pc, #396]	@ (8001ee0 <HAL_RCC_ClockConfig+0x1f0>)
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	689b      	ldr	r3, [r3, #8]
 8001d5c:	4960      	ldr	r1, [pc, #384]	@ (8001ee0 <HAL_RCC_ClockConfig+0x1f0>)
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 0301 	and.w	r3, r3, #1
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d04c      	beq.n	8001e08 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	2b03      	cmp	r3, #3
 8001d74:	d107      	bne.n	8001d86 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d76:	4b5a      	ldr	r3, [pc, #360]	@ (8001ee0 <HAL_RCC_ClockConfig+0x1f0>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d121      	bne.n	8001dc6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	e0a6      	b.n	8001ed4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	2b02      	cmp	r3, #2
 8001d8c:	d107      	bne.n	8001d9e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d8e:	4b54      	ldr	r3, [pc, #336]	@ (8001ee0 <HAL_RCC_ClockConfig+0x1f0>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d115      	bne.n	8001dc6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e09a      	b.n	8001ed4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d107      	bne.n	8001db6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001da6:	4b4e      	ldr	r3, [pc, #312]	@ (8001ee0 <HAL_RCC_ClockConfig+0x1f0>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f003 0302 	and.w	r3, r3, #2
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d109      	bne.n	8001dc6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	e08e      	b.n	8001ed4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001db6:	4b4a      	ldr	r3, [pc, #296]	@ (8001ee0 <HAL_RCC_ClockConfig+0x1f0>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d101      	bne.n	8001dc6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e086      	b.n	8001ed4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001dc6:	4b46      	ldr	r3, [pc, #280]	@ (8001ee0 <HAL_RCC_ClockConfig+0x1f0>)
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	f023 0203 	bic.w	r2, r3, #3
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	4943      	ldr	r1, [pc, #268]	@ (8001ee0 <HAL_RCC_ClockConfig+0x1f0>)
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001dd8:	f7ff f896 	bl	8000f08 <HAL_GetTick>
 8001ddc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dde:	e00a      	b.n	8001df6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001de0:	f7ff f892 	bl	8000f08 <HAL_GetTick>
 8001de4:	4602      	mov	r2, r0
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	1ad3      	subs	r3, r2, r3
 8001dea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d901      	bls.n	8001df6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001df2:	2303      	movs	r3, #3
 8001df4:	e06e      	b.n	8001ed4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001df6:	4b3a      	ldr	r3, [pc, #232]	@ (8001ee0 <HAL_RCC_ClockConfig+0x1f0>)
 8001df8:	689b      	ldr	r3, [r3, #8]
 8001dfa:	f003 020c 	and.w	r2, r3, #12
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	009b      	lsls	r3, r3, #2
 8001e04:	429a      	cmp	r2, r3
 8001e06:	d1eb      	bne.n	8001de0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f003 0302 	and.w	r3, r3, #2
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d010      	beq.n	8001e36 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	689a      	ldr	r2, [r3, #8]
 8001e18:	4b31      	ldr	r3, [pc, #196]	@ (8001ee0 <HAL_RCC_ClockConfig+0x1f0>)
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001e20:	429a      	cmp	r2, r3
 8001e22:	d208      	bcs.n	8001e36 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e24:	4b2e      	ldr	r3, [pc, #184]	@ (8001ee0 <HAL_RCC_ClockConfig+0x1f0>)
 8001e26:	689b      	ldr	r3, [r3, #8]
 8001e28:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	689b      	ldr	r3, [r3, #8]
 8001e30:	492b      	ldr	r1, [pc, #172]	@ (8001ee0 <HAL_RCC_ClockConfig+0x1f0>)
 8001e32:	4313      	orrs	r3, r2
 8001e34:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e36:	4b29      	ldr	r3, [pc, #164]	@ (8001edc <HAL_RCC_ClockConfig+0x1ec>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f003 0307 	and.w	r3, r3, #7
 8001e3e:	683a      	ldr	r2, [r7, #0]
 8001e40:	429a      	cmp	r2, r3
 8001e42:	d210      	bcs.n	8001e66 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e44:	4b25      	ldr	r3, [pc, #148]	@ (8001edc <HAL_RCC_ClockConfig+0x1ec>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f023 0207 	bic.w	r2, r3, #7
 8001e4c:	4923      	ldr	r1, [pc, #140]	@ (8001edc <HAL_RCC_ClockConfig+0x1ec>)
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	4313      	orrs	r3, r2
 8001e52:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e54:	4b21      	ldr	r3, [pc, #132]	@ (8001edc <HAL_RCC_ClockConfig+0x1ec>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f003 0307 	and.w	r3, r3, #7
 8001e5c:	683a      	ldr	r2, [r7, #0]
 8001e5e:	429a      	cmp	r2, r3
 8001e60:	d001      	beq.n	8001e66 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
 8001e64:	e036      	b.n	8001ed4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 0304 	and.w	r3, r3, #4
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d008      	beq.n	8001e84 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e72:	4b1b      	ldr	r3, [pc, #108]	@ (8001ee0 <HAL_RCC_ClockConfig+0x1f0>)
 8001e74:	689b      	ldr	r3, [r3, #8]
 8001e76:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	68db      	ldr	r3, [r3, #12]
 8001e7e:	4918      	ldr	r1, [pc, #96]	@ (8001ee0 <HAL_RCC_ClockConfig+0x1f0>)
 8001e80:	4313      	orrs	r3, r2
 8001e82:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f003 0308 	and.w	r3, r3, #8
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d009      	beq.n	8001ea4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e90:	4b13      	ldr	r3, [pc, #76]	@ (8001ee0 <HAL_RCC_ClockConfig+0x1f0>)
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	691b      	ldr	r3, [r3, #16]
 8001e9c:	00db      	lsls	r3, r3, #3
 8001e9e:	4910      	ldr	r1, [pc, #64]	@ (8001ee0 <HAL_RCC_ClockConfig+0x1f0>)
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001ea4:	f000 f824 	bl	8001ef0 <HAL_RCC_GetSysClockFreq>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	4b0d      	ldr	r3, [pc, #52]	@ (8001ee0 <HAL_RCC_ClockConfig+0x1f0>)
 8001eac:	689b      	ldr	r3, [r3, #8]
 8001eae:	091b      	lsrs	r3, r3, #4
 8001eb0:	f003 030f 	and.w	r3, r3, #15
 8001eb4:	490b      	ldr	r1, [pc, #44]	@ (8001ee4 <HAL_RCC_ClockConfig+0x1f4>)
 8001eb6:	5ccb      	ldrb	r3, [r1, r3]
 8001eb8:	f003 031f 	and.w	r3, r3, #31
 8001ebc:	fa22 f303 	lsr.w	r3, r2, r3
 8001ec0:	4a09      	ldr	r2, [pc, #36]	@ (8001ee8 <HAL_RCC_ClockConfig+0x1f8>)
 8001ec2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001ec4:	4b09      	ldr	r3, [pc, #36]	@ (8001eec <HAL_RCC_ClockConfig+0x1fc>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f7fe ffe1 	bl	8000e90 <HAL_InitTick>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	72fb      	strb	r3, [r7, #11]

  return status;
 8001ed2:	7afb      	ldrb	r3, [r7, #11]
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	3710      	adds	r7, #16
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}
 8001edc:	40022000 	.word	0x40022000
 8001ee0:	40021000 	.word	0x40021000
 8001ee4:	08006cf4 	.word	0x08006cf4
 8001ee8:	20000000 	.word	0x20000000
 8001eec:	20000004 	.word	0x20000004

08001ef0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b089      	sub	sp, #36	@ 0x24
 8001ef4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	61fb      	str	r3, [r7, #28]
 8001efa:	2300      	movs	r3, #0
 8001efc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001efe:	4b3e      	ldr	r3, [pc, #248]	@ (8001ff8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	f003 030c 	and.w	r3, r3, #12
 8001f06:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f08:	4b3b      	ldr	r3, [pc, #236]	@ (8001ff8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f0a:	68db      	ldr	r3, [r3, #12]
 8001f0c:	f003 0303 	and.w	r3, r3, #3
 8001f10:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d005      	beq.n	8001f24 <HAL_RCC_GetSysClockFreq+0x34>
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	2b0c      	cmp	r3, #12
 8001f1c:	d121      	bne.n	8001f62 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	2b01      	cmp	r3, #1
 8001f22:	d11e      	bne.n	8001f62 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001f24:	4b34      	ldr	r3, [pc, #208]	@ (8001ff8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f003 0308 	and.w	r3, r3, #8
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d107      	bne.n	8001f40 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001f30:	4b31      	ldr	r3, [pc, #196]	@ (8001ff8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f32:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f36:	0a1b      	lsrs	r3, r3, #8
 8001f38:	f003 030f 	and.w	r3, r3, #15
 8001f3c:	61fb      	str	r3, [r7, #28]
 8001f3e:	e005      	b.n	8001f4c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001f40:	4b2d      	ldr	r3, [pc, #180]	@ (8001ff8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	091b      	lsrs	r3, r3, #4
 8001f46:	f003 030f 	and.w	r3, r3, #15
 8001f4a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001f4c:	4a2b      	ldr	r2, [pc, #172]	@ (8001ffc <HAL_RCC_GetSysClockFreq+0x10c>)
 8001f4e:	69fb      	ldr	r3, [r7, #28]
 8001f50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f54:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d10d      	bne.n	8001f78 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001f5c:	69fb      	ldr	r3, [r7, #28]
 8001f5e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f60:	e00a      	b.n	8001f78 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	2b04      	cmp	r3, #4
 8001f66:	d102      	bne.n	8001f6e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001f68:	4b25      	ldr	r3, [pc, #148]	@ (8002000 <HAL_RCC_GetSysClockFreq+0x110>)
 8001f6a:	61bb      	str	r3, [r7, #24]
 8001f6c:	e004      	b.n	8001f78 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	2b08      	cmp	r3, #8
 8001f72:	d101      	bne.n	8001f78 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001f74:	4b23      	ldr	r3, [pc, #140]	@ (8002004 <HAL_RCC_GetSysClockFreq+0x114>)
 8001f76:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	2b0c      	cmp	r3, #12
 8001f7c:	d134      	bne.n	8001fe8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001f7e:	4b1e      	ldr	r3, [pc, #120]	@ (8001ff8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f80:	68db      	ldr	r3, [r3, #12]
 8001f82:	f003 0303 	and.w	r3, r3, #3
 8001f86:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	2b02      	cmp	r3, #2
 8001f8c:	d003      	beq.n	8001f96 <HAL_RCC_GetSysClockFreq+0xa6>
 8001f8e:	68bb      	ldr	r3, [r7, #8]
 8001f90:	2b03      	cmp	r3, #3
 8001f92:	d003      	beq.n	8001f9c <HAL_RCC_GetSysClockFreq+0xac>
 8001f94:	e005      	b.n	8001fa2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001f96:	4b1a      	ldr	r3, [pc, #104]	@ (8002000 <HAL_RCC_GetSysClockFreq+0x110>)
 8001f98:	617b      	str	r3, [r7, #20]
      break;
 8001f9a:	e005      	b.n	8001fa8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001f9c:	4b19      	ldr	r3, [pc, #100]	@ (8002004 <HAL_RCC_GetSysClockFreq+0x114>)
 8001f9e:	617b      	str	r3, [r7, #20]
      break;
 8001fa0:	e002      	b.n	8001fa8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001fa2:	69fb      	ldr	r3, [r7, #28]
 8001fa4:	617b      	str	r3, [r7, #20]
      break;
 8001fa6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001fa8:	4b13      	ldr	r3, [pc, #76]	@ (8001ff8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001faa:	68db      	ldr	r3, [r3, #12]
 8001fac:	091b      	lsrs	r3, r3, #4
 8001fae:	f003 0307 	and.w	r3, r3, #7
 8001fb2:	3301      	adds	r3, #1
 8001fb4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001fb6:	4b10      	ldr	r3, [pc, #64]	@ (8001ff8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fb8:	68db      	ldr	r3, [r3, #12]
 8001fba:	0a1b      	lsrs	r3, r3, #8
 8001fbc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001fc0:	697a      	ldr	r2, [r7, #20]
 8001fc2:	fb03 f202 	mul.w	r2, r3, r2
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fcc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001fce:	4b0a      	ldr	r3, [pc, #40]	@ (8001ff8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fd0:	68db      	ldr	r3, [r3, #12]
 8001fd2:	0e5b      	lsrs	r3, r3, #25
 8001fd4:	f003 0303 	and.w	r3, r3, #3
 8001fd8:	3301      	adds	r3, #1
 8001fda:	005b      	lsls	r3, r3, #1
 8001fdc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001fde:	697a      	ldr	r2, [r7, #20]
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fe6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001fe8:	69bb      	ldr	r3, [r7, #24]
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	3724      	adds	r7, #36	@ 0x24
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff4:	4770      	bx	lr
 8001ff6:	bf00      	nop
 8001ff8:	40021000 	.word	0x40021000
 8001ffc:	08006d0c 	.word	0x08006d0c
 8002000:	00f42400 	.word	0x00f42400
 8002004:	007a1200 	.word	0x007a1200

08002008 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002008:	b480      	push	{r7}
 800200a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800200c:	4b03      	ldr	r3, [pc, #12]	@ (800201c <HAL_RCC_GetHCLKFreq+0x14>)
 800200e:	681b      	ldr	r3, [r3, #0]
}
 8002010:	4618      	mov	r0, r3
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr
 800201a:	bf00      	nop
 800201c:	20000000 	.word	0x20000000

08002020 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002024:	f7ff fff0 	bl	8002008 <HAL_RCC_GetHCLKFreq>
 8002028:	4602      	mov	r2, r0
 800202a:	4b06      	ldr	r3, [pc, #24]	@ (8002044 <HAL_RCC_GetPCLK1Freq+0x24>)
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	0a1b      	lsrs	r3, r3, #8
 8002030:	f003 0307 	and.w	r3, r3, #7
 8002034:	4904      	ldr	r1, [pc, #16]	@ (8002048 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002036:	5ccb      	ldrb	r3, [r1, r3]
 8002038:	f003 031f 	and.w	r3, r3, #31
 800203c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002040:	4618      	mov	r0, r3
 8002042:	bd80      	pop	{r7, pc}
 8002044:	40021000 	.word	0x40021000
 8002048:	08006d04 	.word	0x08006d04

0800204c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002050:	f7ff ffda 	bl	8002008 <HAL_RCC_GetHCLKFreq>
 8002054:	4602      	mov	r2, r0
 8002056:	4b06      	ldr	r3, [pc, #24]	@ (8002070 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	0adb      	lsrs	r3, r3, #11
 800205c:	f003 0307 	and.w	r3, r3, #7
 8002060:	4904      	ldr	r1, [pc, #16]	@ (8002074 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002062:	5ccb      	ldrb	r3, [r1, r3]
 8002064:	f003 031f 	and.w	r3, r3, #31
 8002068:	fa22 f303 	lsr.w	r3, r2, r3
}
 800206c:	4618      	mov	r0, r3
 800206e:	bd80      	pop	{r7, pc}
 8002070:	40021000 	.word	0x40021000
 8002074:	08006d04 	.word	0x08006d04

08002078 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b086      	sub	sp, #24
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002080:	2300      	movs	r3, #0
 8002082:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002084:	4b2a      	ldr	r3, [pc, #168]	@ (8002130 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002086:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002088:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800208c:	2b00      	cmp	r3, #0
 800208e:	d003      	beq.n	8002098 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002090:	f7ff f9ee 	bl	8001470 <HAL_PWREx_GetVoltageRange>
 8002094:	6178      	str	r0, [r7, #20]
 8002096:	e014      	b.n	80020c2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002098:	4b25      	ldr	r3, [pc, #148]	@ (8002130 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800209a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800209c:	4a24      	ldr	r2, [pc, #144]	@ (8002130 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800209e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020a2:	6593      	str	r3, [r2, #88]	@ 0x58
 80020a4:	4b22      	ldr	r3, [pc, #136]	@ (8002130 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020ac:	60fb      	str	r3, [r7, #12]
 80020ae:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80020b0:	f7ff f9de 	bl	8001470 <HAL_PWREx_GetVoltageRange>
 80020b4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80020b6:	4b1e      	ldr	r3, [pc, #120]	@ (8002130 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020ba:	4a1d      	ldr	r2, [pc, #116]	@ (8002130 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020bc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80020c0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80020c8:	d10b      	bne.n	80020e2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2b80      	cmp	r3, #128	@ 0x80
 80020ce:	d919      	bls.n	8002104 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2ba0      	cmp	r3, #160	@ 0xa0
 80020d4:	d902      	bls.n	80020dc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80020d6:	2302      	movs	r3, #2
 80020d8:	613b      	str	r3, [r7, #16]
 80020da:	e013      	b.n	8002104 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80020dc:	2301      	movs	r3, #1
 80020de:	613b      	str	r3, [r7, #16]
 80020e0:	e010      	b.n	8002104 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2b80      	cmp	r3, #128	@ 0x80
 80020e6:	d902      	bls.n	80020ee <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80020e8:	2303      	movs	r3, #3
 80020ea:	613b      	str	r3, [r7, #16]
 80020ec:	e00a      	b.n	8002104 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2b80      	cmp	r3, #128	@ 0x80
 80020f2:	d102      	bne.n	80020fa <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80020f4:	2302      	movs	r3, #2
 80020f6:	613b      	str	r3, [r7, #16]
 80020f8:	e004      	b.n	8002104 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2b70      	cmp	r3, #112	@ 0x70
 80020fe:	d101      	bne.n	8002104 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002100:	2301      	movs	r3, #1
 8002102:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002104:	4b0b      	ldr	r3, [pc, #44]	@ (8002134 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f023 0207 	bic.w	r2, r3, #7
 800210c:	4909      	ldr	r1, [pc, #36]	@ (8002134 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	4313      	orrs	r3, r2
 8002112:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002114:	4b07      	ldr	r3, [pc, #28]	@ (8002134 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f003 0307 	and.w	r3, r3, #7
 800211c:	693a      	ldr	r2, [r7, #16]
 800211e:	429a      	cmp	r2, r3
 8002120:	d001      	beq.n	8002126 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	e000      	b.n	8002128 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002126:	2300      	movs	r3, #0
}
 8002128:	4618      	mov	r0, r3
 800212a:	3718      	adds	r7, #24
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}
 8002130:	40021000 	.word	0x40021000
 8002134:	40022000 	.word	0x40022000

08002138 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b086      	sub	sp, #24
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002140:	2300      	movs	r3, #0
 8002142:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002144:	2300      	movs	r3, #0
 8002146:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002150:	2b00      	cmp	r3, #0
 8002152:	d041      	beq.n	80021d8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002158:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800215c:	d02a      	beq.n	80021b4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800215e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002162:	d824      	bhi.n	80021ae <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002164:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002168:	d008      	beq.n	800217c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800216a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800216e:	d81e      	bhi.n	80021ae <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002170:	2b00      	cmp	r3, #0
 8002172:	d00a      	beq.n	800218a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002174:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002178:	d010      	beq.n	800219c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800217a:	e018      	b.n	80021ae <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800217c:	4b86      	ldr	r3, [pc, #536]	@ (8002398 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800217e:	68db      	ldr	r3, [r3, #12]
 8002180:	4a85      	ldr	r2, [pc, #532]	@ (8002398 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002182:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002186:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002188:	e015      	b.n	80021b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	3304      	adds	r3, #4
 800218e:	2100      	movs	r1, #0
 8002190:	4618      	mov	r0, r3
 8002192:	f000 fabb 	bl	800270c <RCCEx_PLLSAI1_Config>
 8002196:	4603      	mov	r3, r0
 8002198:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800219a:	e00c      	b.n	80021b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	3320      	adds	r3, #32
 80021a0:	2100      	movs	r1, #0
 80021a2:	4618      	mov	r0, r3
 80021a4:	f000 fba6 	bl	80028f4 <RCCEx_PLLSAI2_Config>
 80021a8:	4603      	mov	r3, r0
 80021aa:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80021ac:	e003      	b.n	80021b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80021ae:	2301      	movs	r3, #1
 80021b0:	74fb      	strb	r3, [r7, #19]
      break;
 80021b2:	e000      	b.n	80021b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80021b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80021b6:	7cfb      	ldrb	r3, [r7, #19]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d10b      	bne.n	80021d4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80021bc:	4b76      	ldr	r3, [pc, #472]	@ (8002398 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021c2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80021ca:	4973      	ldr	r1, [pc, #460]	@ (8002398 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021cc:	4313      	orrs	r3, r2
 80021ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80021d2:	e001      	b.n	80021d8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80021d4:	7cfb      	ldrb	r3, [r7, #19]
 80021d6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d041      	beq.n	8002268 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80021e8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80021ec:	d02a      	beq.n	8002244 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80021ee:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80021f2:	d824      	bhi.n	800223e <HAL_RCCEx_PeriphCLKConfig+0x106>
 80021f4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80021f8:	d008      	beq.n	800220c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80021fa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80021fe:	d81e      	bhi.n	800223e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002200:	2b00      	cmp	r3, #0
 8002202:	d00a      	beq.n	800221a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002204:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002208:	d010      	beq.n	800222c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800220a:	e018      	b.n	800223e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800220c:	4b62      	ldr	r3, [pc, #392]	@ (8002398 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800220e:	68db      	ldr	r3, [r3, #12]
 8002210:	4a61      	ldr	r2, [pc, #388]	@ (8002398 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002212:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002216:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002218:	e015      	b.n	8002246 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	3304      	adds	r3, #4
 800221e:	2100      	movs	r1, #0
 8002220:	4618      	mov	r0, r3
 8002222:	f000 fa73 	bl	800270c <RCCEx_PLLSAI1_Config>
 8002226:	4603      	mov	r3, r0
 8002228:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800222a:	e00c      	b.n	8002246 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	3320      	adds	r3, #32
 8002230:	2100      	movs	r1, #0
 8002232:	4618      	mov	r0, r3
 8002234:	f000 fb5e 	bl	80028f4 <RCCEx_PLLSAI2_Config>
 8002238:	4603      	mov	r3, r0
 800223a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800223c:	e003      	b.n	8002246 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	74fb      	strb	r3, [r7, #19]
      break;
 8002242:	e000      	b.n	8002246 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002244:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002246:	7cfb      	ldrb	r3, [r7, #19]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d10b      	bne.n	8002264 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800224c:	4b52      	ldr	r3, [pc, #328]	@ (8002398 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800224e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002252:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800225a:	494f      	ldr	r1, [pc, #316]	@ (8002398 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800225c:	4313      	orrs	r3, r2
 800225e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002262:	e001      	b.n	8002268 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002264:	7cfb      	ldrb	r3, [r7, #19]
 8002266:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002270:	2b00      	cmp	r3, #0
 8002272:	f000 80a0 	beq.w	80023b6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002276:	2300      	movs	r3, #0
 8002278:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800227a:	4b47      	ldr	r3, [pc, #284]	@ (8002398 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800227c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800227e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002282:	2b00      	cmp	r3, #0
 8002284:	d101      	bne.n	800228a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002286:	2301      	movs	r3, #1
 8002288:	e000      	b.n	800228c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800228a:	2300      	movs	r3, #0
 800228c:	2b00      	cmp	r3, #0
 800228e:	d00d      	beq.n	80022ac <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002290:	4b41      	ldr	r3, [pc, #260]	@ (8002398 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002292:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002294:	4a40      	ldr	r2, [pc, #256]	@ (8002398 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002296:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800229a:	6593      	str	r3, [r2, #88]	@ 0x58
 800229c:	4b3e      	ldr	r3, [pc, #248]	@ (8002398 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800229e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022a4:	60bb      	str	r3, [r7, #8]
 80022a6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022a8:	2301      	movs	r3, #1
 80022aa:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80022ac:	4b3b      	ldr	r3, [pc, #236]	@ (800239c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a3a      	ldr	r2, [pc, #232]	@ (800239c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80022b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022b6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80022b8:	f7fe fe26 	bl	8000f08 <HAL_GetTick>
 80022bc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80022be:	e009      	b.n	80022d4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022c0:	f7fe fe22 	bl	8000f08 <HAL_GetTick>
 80022c4:	4602      	mov	r2, r0
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	1ad3      	subs	r3, r2, r3
 80022ca:	2b02      	cmp	r3, #2
 80022cc:	d902      	bls.n	80022d4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80022ce:	2303      	movs	r3, #3
 80022d0:	74fb      	strb	r3, [r7, #19]
        break;
 80022d2:	e005      	b.n	80022e0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80022d4:	4b31      	ldr	r3, [pc, #196]	@ (800239c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d0ef      	beq.n	80022c0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80022e0:	7cfb      	ldrb	r3, [r7, #19]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d15c      	bne.n	80023a0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80022e6:	4b2c      	ldr	r3, [pc, #176]	@ (8002398 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022ec:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80022f0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d01f      	beq.n	8002338 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80022fe:	697a      	ldr	r2, [r7, #20]
 8002300:	429a      	cmp	r2, r3
 8002302:	d019      	beq.n	8002338 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002304:	4b24      	ldr	r3, [pc, #144]	@ (8002398 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002306:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800230a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800230e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002310:	4b21      	ldr	r3, [pc, #132]	@ (8002398 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002312:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002316:	4a20      	ldr	r2, [pc, #128]	@ (8002398 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002318:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800231c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002320:	4b1d      	ldr	r3, [pc, #116]	@ (8002398 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002322:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002326:	4a1c      	ldr	r2, [pc, #112]	@ (8002398 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002328:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800232c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002330:	4a19      	ldr	r2, [pc, #100]	@ (8002398 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	f003 0301 	and.w	r3, r3, #1
 800233e:	2b00      	cmp	r3, #0
 8002340:	d016      	beq.n	8002370 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002342:	f7fe fde1 	bl	8000f08 <HAL_GetTick>
 8002346:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002348:	e00b      	b.n	8002362 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800234a:	f7fe fddd 	bl	8000f08 <HAL_GetTick>
 800234e:	4602      	mov	r2, r0
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	1ad3      	subs	r3, r2, r3
 8002354:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002358:	4293      	cmp	r3, r2
 800235a:	d902      	bls.n	8002362 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800235c:	2303      	movs	r3, #3
 800235e:	74fb      	strb	r3, [r7, #19]
            break;
 8002360:	e006      	b.n	8002370 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002362:	4b0d      	ldr	r3, [pc, #52]	@ (8002398 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002364:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002368:	f003 0302 	and.w	r3, r3, #2
 800236c:	2b00      	cmp	r3, #0
 800236e:	d0ec      	beq.n	800234a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002370:	7cfb      	ldrb	r3, [r7, #19]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d10c      	bne.n	8002390 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002376:	4b08      	ldr	r3, [pc, #32]	@ (8002398 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002378:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800237c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002386:	4904      	ldr	r1, [pc, #16]	@ (8002398 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002388:	4313      	orrs	r3, r2
 800238a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800238e:	e009      	b.n	80023a4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002390:	7cfb      	ldrb	r3, [r7, #19]
 8002392:	74bb      	strb	r3, [r7, #18]
 8002394:	e006      	b.n	80023a4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002396:	bf00      	nop
 8002398:	40021000 	.word	0x40021000
 800239c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023a0:	7cfb      	ldrb	r3, [r7, #19]
 80023a2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80023a4:	7c7b      	ldrb	r3, [r7, #17]
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	d105      	bne.n	80023b6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023aa:	4b9e      	ldr	r3, [pc, #632]	@ (8002624 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023ae:	4a9d      	ldr	r2, [pc, #628]	@ (8002624 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023b0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80023b4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 0301 	and.w	r3, r3, #1
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d00a      	beq.n	80023d8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80023c2:	4b98      	ldr	r3, [pc, #608]	@ (8002624 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023c8:	f023 0203 	bic.w	r2, r3, #3
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023d0:	4994      	ldr	r1, [pc, #592]	@ (8002624 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023d2:	4313      	orrs	r3, r2
 80023d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f003 0302 	and.w	r3, r3, #2
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d00a      	beq.n	80023fa <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80023e4:	4b8f      	ldr	r3, [pc, #572]	@ (8002624 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023ea:	f023 020c 	bic.w	r2, r3, #12
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023f2:	498c      	ldr	r1, [pc, #560]	@ (8002624 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023f4:	4313      	orrs	r3, r2
 80023f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 0304 	and.w	r3, r3, #4
 8002402:	2b00      	cmp	r3, #0
 8002404:	d00a      	beq.n	800241c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002406:	4b87      	ldr	r3, [pc, #540]	@ (8002624 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002408:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800240c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002414:	4983      	ldr	r1, [pc, #524]	@ (8002624 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002416:	4313      	orrs	r3, r2
 8002418:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f003 0308 	and.w	r3, r3, #8
 8002424:	2b00      	cmp	r3, #0
 8002426:	d00a      	beq.n	800243e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002428:	4b7e      	ldr	r3, [pc, #504]	@ (8002624 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800242a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800242e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002436:	497b      	ldr	r1, [pc, #492]	@ (8002624 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002438:	4313      	orrs	r3, r2
 800243a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f003 0310 	and.w	r3, r3, #16
 8002446:	2b00      	cmp	r3, #0
 8002448:	d00a      	beq.n	8002460 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800244a:	4b76      	ldr	r3, [pc, #472]	@ (8002624 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800244c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002450:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002458:	4972      	ldr	r1, [pc, #456]	@ (8002624 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800245a:	4313      	orrs	r3, r2
 800245c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f003 0320 	and.w	r3, r3, #32
 8002468:	2b00      	cmp	r3, #0
 800246a:	d00a      	beq.n	8002482 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800246c:	4b6d      	ldr	r3, [pc, #436]	@ (8002624 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800246e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002472:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800247a:	496a      	ldr	r1, [pc, #424]	@ (8002624 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800247c:	4313      	orrs	r3, r2
 800247e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800248a:	2b00      	cmp	r3, #0
 800248c:	d00a      	beq.n	80024a4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800248e:	4b65      	ldr	r3, [pc, #404]	@ (8002624 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002490:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002494:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800249c:	4961      	ldr	r1, [pc, #388]	@ (8002624 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800249e:	4313      	orrs	r3, r2
 80024a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d00a      	beq.n	80024c6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80024b0:	4b5c      	ldr	r3, [pc, #368]	@ (8002624 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024b6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024be:	4959      	ldr	r1, [pc, #356]	@ (8002624 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024c0:	4313      	orrs	r3, r2
 80024c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d00a      	beq.n	80024e8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80024d2:	4b54      	ldr	r3, [pc, #336]	@ (8002624 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024d8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80024e0:	4950      	ldr	r1, [pc, #320]	@ (8002624 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024e2:	4313      	orrs	r3, r2
 80024e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d00a      	beq.n	800250a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80024f4:	4b4b      	ldr	r3, [pc, #300]	@ (8002624 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024fa:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002502:	4948      	ldr	r1, [pc, #288]	@ (8002624 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002504:	4313      	orrs	r3, r2
 8002506:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002512:	2b00      	cmp	r3, #0
 8002514:	d00a      	beq.n	800252c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002516:	4b43      	ldr	r3, [pc, #268]	@ (8002624 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002518:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800251c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002524:	493f      	ldr	r1, [pc, #252]	@ (8002624 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002526:	4313      	orrs	r3, r2
 8002528:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002534:	2b00      	cmp	r3, #0
 8002536:	d028      	beq.n	800258a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002538:	4b3a      	ldr	r3, [pc, #232]	@ (8002624 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800253a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800253e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002546:	4937      	ldr	r1, [pc, #220]	@ (8002624 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002548:	4313      	orrs	r3, r2
 800254a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002552:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002556:	d106      	bne.n	8002566 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002558:	4b32      	ldr	r3, [pc, #200]	@ (8002624 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800255a:	68db      	ldr	r3, [r3, #12]
 800255c:	4a31      	ldr	r2, [pc, #196]	@ (8002624 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800255e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002562:	60d3      	str	r3, [r2, #12]
 8002564:	e011      	b.n	800258a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800256a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800256e:	d10c      	bne.n	800258a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	3304      	adds	r3, #4
 8002574:	2101      	movs	r1, #1
 8002576:	4618      	mov	r0, r3
 8002578:	f000 f8c8 	bl	800270c <RCCEx_PLLSAI1_Config>
 800257c:	4603      	mov	r3, r0
 800257e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002580:	7cfb      	ldrb	r3, [r7, #19]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d001      	beq.n	800258a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002586:	7cfb      	ldrb	r3, [r7, #19]
 8002588:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002592:	2b00      	cmp	r3, #0
 8002594:	d028      	beq.n	80025e8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002596:	4b23      	ldr	r3, [pc, #140]	@ (8002624 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002598:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800259c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025a4:	491f      	ldr	r1, [pc, #124]	@ (8002624 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025a6:	4313      	orrs	r3, r2
 80025a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025b0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80025b4:	d106      	bne.n	80025c4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80025b6:	4b1b      	ldr	r3, [pc, #108]	@ (8002624 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025b8:	68db      	ldr	r3, [r3, #12]
 80025ba:	4a1a      	ldr	r2, [pc, #104]	@ (8002624 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025bc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80025c0:	60d3      	str	r3, [r2, #12]
 80025c2:	e011      	b.n	80025e8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025c8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80025cc:	d10c      	bne.n	80025e8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	3304      	adds	r3, #4
 80025d2:	2101      	movs	r1, #1
 80025d4:	4618      	mov	r0, r3
 80025d6:	f000 f899 	bl	800270c <RCCEx_PLLSAI1_Config>
 80025da:	4603      	mov	r3, r0
 80025dc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80025de:	7cfb      	ldrb	r3, [r7, #19]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d001      	beq.n	80025e8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80025e4:	7cfb      	ldrb	r3, [r7, #19]
 80025e6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d02b      	beq.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80025f4:	4b0b      	ldr	r3, [pc, #44]	@ (8002624 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025fa:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002602:	4908      	ldr	r1, [pc, #32]	@ (8002624 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002604:	4313      	orrs	r3, r2
 8002606:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800260e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002612:	d109      	bne.n	8002628 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002614:	4b03      	ldr	r3, [pc, #12]	@ (8002624 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002616:	68db      	ldr	r3, [r3, #12]
 8002618:	4a02      	ldr	r2, [pc, #8]	@ (8002624 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800261a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800261e:	60d3      	str	r3, [r2, #12]
 8002620:	e014      	b.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002622:	bf00      	nop
 8002624:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800262c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002630:	d10c      	bne.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	3304      	adds	r3, #4
 8002636:	2101      	movs	r1, #1
 8002638:	4618      	mov	r0, r3
 800263a:	f000 f867 	bl	800270c <RCCEx_PLLSAI1_Config>
 800263e:	4603      	mov	r3, r0
 8002640:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002642:	7cfb      	ldrb	r3, [r7, #19]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d001      	beq.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002648:	7cfb      	ldrb	r3, [r7, #19]
 800264a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002654:	2b00      	cmp	r3, #0
 8002656:	d02f      	beq.n	80026b8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002658:	4b2b      	ldr	r3, [pc, #172]	@ (8002708 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800265a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800265e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002666:	4928      	ldr	r1, [pc, #160]	@ (8002708 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002668:	4313      	orrs	r3, r2
 800266a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002672:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002676:	d10d      	bne.n	8002694 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	3304      	adds	r3, #4
 800267c:	2102      	movs	r1, #2
 800267e:	4618      	mov	r0, r3
 8002680:	f000 f844 	bl	800270c <RCCEx_PLLSAI1_Config>
 8002684:	4603      	mov	r3, r0
 8002686:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002688:	7cfb      	ldrb	r3, [r7, #19]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d014      	beq.n	80026b8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800268e:	7cfb      	ldrb	r3, [r7, #19]
 8002690:	74bb      	strb	r3, [r7, #18]
 8002692:	e011      	b.n	80026b8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002698:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800269c:	d10c      	bne.n	80026b8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	3320      	adds	r3, #32
 80026a2:	2102      	movs	r1, #2
 80026a4:	4618      	mov	r0, r3
 80026a6:	f000 f925 	bl	80028f4 <RCCEx_PLLSAI2_Config>
 80026aa:	4603      	mov	r3, r0
 80026ac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80026ae:	7cfb      	ldrb	r3, [r7, #19]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d001      	beq.n	80026b8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80026b4:	7cfb      	ldrb	r3, [r7, #19]
 80026b6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d00a      	beq.n	80026da <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80026c4:	4b10      	ldr	r3, [pc, #64]	@ (8002708 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80026c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026ca:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80026d2:	490d      	ldr	r1, [pc, #52]	@ (8002708 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80026d4:	4313      	orrs	r3, r2
 80026d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d00b      	beq.n	80026fe <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80026e6:	4b08      	ldr	r3, [pc, #32]	@ (8002708 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80026e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026ec:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80026f6:	4904      	ldr	r1, [pc, #16]	@ (8002708 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80026f8:	4313      	orrs	r3, r2
 80026fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80026fe:	7cbb      	ldrb	r3, [r7, #18]
}
 8002700:	4618      	mov	r0, r3
 8002702:	3718      	adds	r7, #24
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}
 8002708:	40021000 	.word	0x40021000

0800270c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b084      	sub	sp, #16
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
 8002714:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002716:	2300      	movs	r3, #0
 8002718:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800271a:	4b75      	ldr	r3, [pc, #468]	@ (80028f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800271c:	68db      	ldr	r3, [r3, #12]
 800271e:	f003 0303 	and.w	r3, r3, #3
 8002722:	2b00      	cmp	r3, #0
 8002724:	d018      	beq.n	8002758 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002726:	4b72      	ldr	r3, [pc, #456]	@ (80028f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002728:	68db      	ldr	r3, [r3, #12]
 800272a:	f003 0203 	and.w	r2, r3, #3
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	429a      	cmp	r2, r3
 8002734:	d10d      	bne.n	8002752 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
       ||
 800273a:	2b00      	cmp	r3, #0
 800273c:	d009      	beq.n	8002752 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800273e:	4b6c      	ldr	r3, [pc, #432]	@ (80028f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002740:	68db      	ldr	r3, [r3, #12]
 8002742:	091b      	lsrs	r3, r3, #4
 8002744:	f003 0307 	and.w	r3, r3, #7
 8002748:	1c5a      	adds	r2, r3, #1
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	685b      	ldr	r3, [r3, #4]
       ||
 800274e:	429a      	cmp	r2, r3
 8002750:	d047      	beq.n	80027e2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	73fb      	strb	r3, [r7, #15]
 8002756:	e044      	b.n	80027e2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	2b03      	cmp	r3, #3
 800275e:	d018      	beq.n	8002792 <RCCEx_PLLSAI1_Config+0x86>
 8002760:	2b03      	cmp	r3, #3
 8002762:	d825      	bhi.n	80027b0 <RCCEx_PLLSAI1_Config+0xa4>
 8002764:	2b01      	cmp	r3, #1
 8002766:	d002      	beq.n	800276e <RCCEx_PLLSAI1_Config+0x62>
 8002768:	2b02      	cmp	r3, #2
 800276a:	d009      	beq.n	8002780 <RCCEx_PLLSAI1_Config+0x74>
 800276c:	e020      	b.n	80027b0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800276e:	4b60      	ldr	r3, [pc, #384]	@ (80028f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 0302 	and.w	r3, r3, #2
 8002776:	2b00      	cmp	r3, #0
 8002778:	d11d      	bne.n	80027b6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800277e:	e01a      	b.n	80027b6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002780:	4b5b      	ldr	r3, [pc, #364]	@ (80028f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002788:	2b00      	cmp	r3, #0
 800278a:	d116      	bne.n	80027ba <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800278c:	2301      	movs	r3, #1
 800278e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002790:	e013      	b.n	80027ba <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002792:	4b57      	ldr	r3, [pc, #348]	@ (80028f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800279a:	2b00      	cmp	r3, #0
 800279c:	d10f      	bne.n	80027be <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800279e:	4b54      	ldr	r3, [pc, #336]	@ (80028f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d109      	bne.n	80027be <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80027ae:	e006      	b.n	80027be <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80027b0:	2301      	movs	r3, #1
 80027b2:	73fb      	strb	r3, [r7, #15]
      break;
 80027b4:	e004      	b.n	80027c0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80027b6:	bf00      	nop
 80027b8:	e002      	b.n	80027c0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80027ba:	bf00      	nop
 80027bc:	e000      	b.n	80027c0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80027be:	bf00      	nop
    }

    if(status == HAL_OK)
 80027c0:	7bfb      	ldrb	r3, [r7, #15]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d10d      	bne.n	80027e2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80027c6:	4b4a      	ldr	r3, [pc, #296]	@ (80028f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027c8:	68db      	ldr	r3, [r3, #12]
 80027ca:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6819      	ldr	r1, [r3, #0]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	3b01      	subs	r3, #1
 80027d8:	011b      	lsls	r3, r3, #4
 80027da:	430b      	orrs	r3, r1
 80027dc:	4944      	ldr	r1, [pc, #272]	@ (80028f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027de:	4313      	orrs	r3, r2
 80027e0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80027e2:	7bfb      	ldrb	r3, [r7, #15]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d17d      	bne.n	80028e4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80027e8:	4b41      	ldr	r3, [pc, #260]	@ (80028f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a40      	ldr	r2, [pc, #256]	@ (80028f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027ee:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80027f2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027f4:	f7fe fb88 	bl	8000f08 <HAL_GetTick>
 80027f8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80027fa:	e009      	b.n	8002810 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80027fc:	f7fe fb84 	bl	8000f08 <HAL_GetTick>
 8002800:	4602      	mov	r2, r0
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	1ad3      	subs	r3, r2, r3
 8002806:	2b02      	cmp	r3, #2
 8002808:	d902      	bls.n	8002810 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800280a:	2303      	movs	r3, #3
 800280c:	73fb      	strb	r3, [r7, #15]
        break;
 800280e:	e005      	b.n	800281c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002810:	4b37      	ldr	r3, [pc, #220]	@ (80028f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002818:	2b00      	cmp	r3, #0
 800281a:	d1ef      	bne.n	80027fc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800281c:	7bfb      	ldrb	r3, [r7, #15]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d160      	bne.n	80028e4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d111      	bne.n	800284c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002828:	4b31      	ldr	r3, [pc, #196]	@ (80028f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800282a:	691b      	ldr	r3, [r3, #16]
 800282c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002830:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002834:	687a      	ldr	r2, [r7, #4]
 8002836:	6892      	ldr	r2, [r2, #8]
 8002838:	0211      	lsls	r1, r2, #8
 800283a:	687a      	ldr	r2, [r7, #4]
 800283c:	68d2      	ldr	r2, [r2, #12]
 800283e:	0912      	lsrs	r2, r2, #4
 8002840:	0452      	lsls	r2, r2, #17
 8002842:	430a      	orrs	r2, r1
 8002844:	492a      	ldr	r1, [pc, #168]	@ (80028f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002846:	4313      	orrs	r3, r2
 8002848:	610b      	str	r3, [r1, #16]
 800284a:	e027      	b.n	800289c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	2b01      	cmp	r3, #1
 8002850:	d112      	bne.n	8002878 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002852:	4b27      	ldr	r3, [pc, #156]	@ (80028f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002854:	691b      	ldr	r3, [r3, #16]
 8002856:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800285a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800285e:	687a      	ldr	r2, [r7, #4]
 8002860:	6892      	ldr	r2, [r2, #8]
 8002862:	0211      	lsls	r1, r2, #8
 8002864:	687a      	ldr	r2, [r7, #4]
 8002866:	6912      	ldr	r2, [r2, #16]
 8002868:	0852      	lsrs	r2, r2, #1
 800286a:	3a01      	subs	r2, #1
 800286c:	0552      	lsls	r2, r2, #21
 800286e:	430a      	orrs	r2, r1
 8002870:	491f      	ldr	r1, [pc, #124]	@ (80028f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002872:	4313      	orrs	r3, r2
 8002874:	610b      	str	r3, [r1, #16]
 8002876:	e011      	b.n	800289c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002878:	4b1d      	ldr	r3, [pc, #116]	@ (80028f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800287a:	691b      	ldr	r3, [r3, #16]
 800287c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002880:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002884:	687a      	ldr	r2, [r7, #4]
 8002886:	6892      	ldr	r2, [r2, #8]
 8002888:	0211      	lsls	r1, r2, #8
 800288a:	687a      	ldr	r2, [r7, #4]
 800288c:	6952      	ldr	r2, [r2, #20]
 800288e:	0852      	lsrs	r2, r2, #1
 8002890:	3a01      	subs	r2, #1
 8002892:	0652      	lsls	r2, r2, #25
 8002894:	430a      	orrs	r2, r1
 8002896:	4916      	ldr	r1, [pc, #88]	@ (80028f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002898:	4313      	orrs	r3, r2
 800289a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800289c:	4b14      	ldr	r3, [pc, #80]	@ (80028f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a13      	ldr	r2, [pc, #76]	@ (80028f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028a2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80028a6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028a8:	f7fe fb2e 	bl	8000f08 <HAL_GetTick>
 80028ac:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80028ae:	e009      	b.n	80028c4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80028b0:	f7fe fb2a 	bl	8000f08 <HAL_GetTick>
 80028b4:	4602      	mov	r2, r0
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	1ad3      	subs	r3, r2, r3
 80028ba:	2b02      	cmp	r3, #2
 80028bc:	d902      	bls.n	80028c4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80028be:	2303      	movs	r3, #3
 80028c0:	73fb      	strb	r3, [r7, #15]
          break;
 80028c2:	e005      	b.n	80028d0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80028c4:	4b0a      	ldr	r3, [pc, #40]	@ (80028f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d0ef      	beq.n	80028b0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80028d0:	7bfb      	ldrb	r3, [r7, #15]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d106      	bne.n	80028e4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80028d6:	4b06      	ldr	r3, [pc, #24]	@ (80028f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028d8:	691a      	ldr	r2, [r3, #16]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	699b      	ldr	r3, [r3, #24]
 80028de:	4904      	ldr	r1, [pc, #16]	@ (80028f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028e0:	4313      	orrs	r3, r2
 80028e2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80028e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	3710      	adds	r7, #16
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}
 80028ee:	bf00      	nop
 80028f0:	40021000 	.word	0x40021000

080028f4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b084      	sub	sp, #16
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
 80028fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80028fe:	2300      	movs	r3, #0
 8002900:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002902:	4b6a      	ldr	r3, [pc, #424]	@ (8002aac <RCCEx_PLLSAI2_Config+0x1b8>)
 8002904:	68db      	ldr	r3, [r3, #12]
 8002906:	f003 0303 	and.w	r3, r3, #3
 800290a:	2b00      	cmp	r3, #0
 800290c:	d018      	beq.n	8002940 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800290e:	4b67      	ldr	r3, [pc, #412]	@ (8002aac <RCCEx_PLLSAI2_Config+0x1b8>)
 8002910:	68db      	ldr	r3, [r3, #12]
 8002912:	f003 0203 	and.w	r2, r3, #3
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	429a      	cmp	r2, r3
 800291c:	d10d      	bne.n	800293a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
       ||
 8002922:	2b00      	cmp	r3, #0
 8002924:	d009      	beq.n	800293a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002926:	4b61      	ldr	r3, [pc, #388]	@ (8002aac <RCCEx_PLLSAI2_Config+0x1b8>)
 8002928:	68db      	ldr	r3, [r3, #12]
 800292a:	091b      	lsrs	r3, r3, #4
 800292c:	f003 0307 	and.w	r3, r3, #7
 8002930:	1c5a      	adds	r2, r3, #1
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	685b      	ldr	r3, [r3, #4]
       ||
 8002936:	429a      	cmp	r2, r3
 8002938:	d047      	beq.n	80029ca <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	73fb      	strb	r3, [r7, #15]
 800293e:	e044      	b.n	80029ca <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	2b03      	cmp	r3, #3
 8002946:	d018      	beq.n	800297a <RCCEx_PLLSAI2_Config+0x86>
 8002948:	2b03      	cmp	r3, #3
 800294a:	d825      	bhi.n	8002998 <RCCEx_PLLSAI2_Config+0xa4>
 800294c:	2b01      	cmp	r3, #1
 800294e:	d002      	beq.n	8002956 <RCCEx_PLLSAI2_Config+0x62>
 8002950:	2b02      	cmp	r3, #2
 8002952:	d009      	beq.n	8002968 <RCCEx_PLLSAI2_Config+0x74>
 8002954:	e020      	b.n	8002998 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002956:	4b55      	ldr	r3, [pc, #340]	@ (8002aac <RCCEx_PLLSAI2_Config+0x1b8>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f003 0302 	and.w	r3, r3, #2
 800295e:	2b00      	cmp	r3, #0
 8002960:	d11d      	bne.n	800299e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002966:	e01a      	b.n	800299e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002968:	4b50      	ldr	r3, [pc, #320]	@ (8002aac <RCCEx_PLLSAI2_Config+0x1b8>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002970:	2b00      	cmp	r3, #0
 8002972:	d116      	bne.n	80029a2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002974:	2301      	movs	r3, #1
 8002976:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002978:	e013      	b.n	80029a2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800297a:	4b4c      	ldr	r3, [pc, #304]	@ (8002aac <RCCEx_PLLSAI2_Config+0x1b8>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002982:	2b00      	cmp	r3, #0
 8002984:	d10f      	bne.n	80029a6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002986:	4b49      	ldr	r3, [pc, #292]	@ (8002aac <RCCEx_PLLSAI2_Config+0x1b8>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800298e:	2b00      	cmp	r3, #0
 8002990:	d109      	bne.n	80029a6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002996:	e006      	b.n	80029a6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002998:	2301      	movs	r3, #1
 800299a:	73fb      	strb	r3, [r7, #15]
      break;
 800299c:	e004      	b.n	80029a8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800299e:	bf00      	nop
 80029a0:	e002      	b.n	80029a8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80029a2:	bf00      	nop
 80029a4:	e000      	b.n	80029a8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80029a6:	bf00      	nop
    }

    if(status == HAL_OK)
 80029a8:	7bfb      	ldrb	r3, [r7, #15]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d10d      	bne.n	80029ca <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80029ae:	4b3f      	ldr	r3, [pc, #252]	@ (8002aac <RCCEx_PLLSAI2_Config+0x1b8>)
 80029b0:	68db      	ldr	r3, [r3, #12]
 80029b2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6819      	ldr	r1, [r3, #0]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	3b01      	subs	r3, #1
 80029c0:	011b      	lsls	r3, r3, #4
 80029c2:	430b      	orrs	r3, r1
 80029c4:	4939      	ldr	r1, [pc, #228]	@ (8002aac <RCCEx_PLLSAI2_Config+0x1b8>)
 80029c6:	4313      	orrs	r3, r2
 80029c8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80029ca:	7bfb      	ldrb	r3, [r7, #15]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d167      	bne.n	8002aa0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80029d0:	4b36      	ldr	r3, [pc, #216]	@ (8002aac <RCCEx_PLLSAI2_Config+0x1b8>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a35      	ldr	r2, [pc, #212]	@ (8002aac <RCCEx_PLLSAI2_Config+0x1b8>)
 80029d6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80029da:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029dc:	f7fe fa94 	bl	8000f08 <HAL_GetTick>
 80029e0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80029e2:	e009      	b.n	80029f8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80029e4:	f7fe fa90 	bl	8000f08 <HAL_GetTick>
 80029e8:	4602      	mov	r2, r0
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	1ad3      	subs	r3, r2, r3
 80029ee:	2b02      	cmp	r3, #2
 80029f0:	d902      	bls.n	80029f8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80029f2:	2303      	movs	r3, #3
 80029f4:	73fb      	strb	r3, [r7, #15]
        break;
 80029f6:	e005      	b.n	8002a04 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80029f8:	4b2c      	ldr	r3, [pc, #176]	@ (8002aac <RCCEx_PLLSAI2_Config+0x1b8>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d1ef      	bne.n	80029e4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002a04:	7bfb      	ldrb	r3, [r7, #15]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d14a      	bne.n	8002aa0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d111      	bne.n	8002a34 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002a10:	4b26      	ldr	r3, [pc, #152]	@ (8002aac <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a12:	695b      	ldr	r3, [r3, #20]
 8002a14:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002a18:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a1c:	687a      	ldr	r2, [r7, #4]
 8002a1e:	6892      	ldr	r2, [r2, #8]
 8002a20:	0211      	lsls	r1, r2, #8
 8002a22:	687a      	ldr	r2, [r7, #4]
 8002a24:	68d2      	ldr	r2, [r2, #12]
 8002a26:	0912      	lsrs	r2, r2, #4
 8002a28:	0452      	lsls	r2, r2, #17
 8002a2a:	430a      	orrs	r2, r1
 8002a2c:	491f      	ldr	r1, [pc, #124]	@ (8002aac <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	614b      	str	r3, [r1, #20]
 8002a32:	e011      	b.n	8002a58 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002a34:	4b1d      	ldr	r3, [pc, #116]	@ (8002aac <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a36:	695b      	ldr	r3, [r3, #20]
 8002a38:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002a3c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002a40:	687a      	ldr	r2, [r7, #4]
 8002a42:	6892      	ldr	r2, [r2, #8]
 8002a44:	0211      	lsls	r1, r2, #8
 8002a46:	687a      	ldr	r2, [r7, #4]
 8002a48:	6912      	ldr	r2, [r2, #16]
 8002a4a:	0852      	lsrs	r2, r2, #1
 8002a4c:	3a01      	subs	r2, #1
 8002a4e:	0652      	lsls	r2, r2, #25
 8002a50:	430a      	orrs	r2, r1
 8002a52:	4916      	ldr	r1, [pc, #88]	@ (8002aac <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a54:	4313      	orrs	r3, r2
 8002a56:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002a58:	4b14      	ldr	r3, [pc, #80]	@ (8002aac <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a13      	ldr	r2, [pc, #76]	@ (8002aac <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a5e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a62:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a64:	f7fe fa50 	bl	8000f08 <HAL_GetTick>
 8002a68:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002a6a:	e009      	b.n	8002a80 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002a6c:	f7fe fa4c 	bl	8000f08 <HAL_GetTick>
 8002a70:	4602      	mov	r2, r0
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	1ad3      	subs	r3, r2, r3
 8002a76:	2b02      	cmp	r3, #2
 8002a78:	d902      	bls.n	8002a80 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002a7a:	2303      	movs	r3, #3
 8002a7c:	73fb      	strb	r3, [r7, #15]
          break;
 8002a7e:	e005      	b.n	8002a8c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002a80:	4b0a      	ldr	r3, [pc, #40]	@ (8002aac <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d0ef      	beq.n	8002a6c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002a8c:	7bfb      	ldrb	r3, [r7, #15]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d106      	bne.n	8002aa0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002a92:	4b06      	ldr	r3, [pc, #24]	@ (8002aac <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a94:	695a      	ldr	r2, [r3, #20]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	695b      	ldr	r3, [r3, #20]
 8002a9a:	4904      	ldr	r1, [pc, #16]	@ (8002aac <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002aa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	3710      	adds	r7, #16
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}
 8002aaa:	bf00      	nop
 8002aac:	40021000 	.word	0x40021000

08002ab0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b082      	sub	sp, #8
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d101      	bne.n	8002ac2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e040      	b.n	8002b44 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d106      	bne.n	8002ad8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2200      	movs	r2, #0
 8002ace:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	f7fe f8be 	bl	8000c54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2224      	movs	r2, #36	@ 0x24
 8002adc:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	681a      	ldr	r2, [r3, #0]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f022 0201 	bic.w	r2, r2, #1
 8002aec:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d002      	beq.n	8002afc <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	f000 fc32 	bl	8003360 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002afc:	6878      	ldr	r0, [r7, #4]
 8002afe:	f000 f977 	bl	8002df0 <UART_SetConfig>
 8002b02:	4603      	mov	r3, r0
 8002b04:	2b01      	cmp	r3, #1
 8002b06:	d101      	bne.n	8002b0c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	e01b      	b.n	8002b44 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	685a      	ldr	r2, [r3, #4]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002b1a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	689a      	ldr	r2, [r3, #8]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002b2a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	681a      	ldr	r2, [r3, #0]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f042 0201 	orr.w	r2, r2, #1
 8002b3a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002b3c:	6878      	ldr	r0, [r7, #4]
 8002b3e:	f000 fcb1 	bl	80034a4 <UART_CheckIdleState>
 8002b42:	4603      	mov	r3, r0
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	3708      	adds	r7, #8
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}

08002b4c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b08a      	sub	sp, #40	@ 0x28
 8002b50:	af02      	add	r7, sp, #8
 8002b52:	60f8      	str	r0, [r7, #12]
 8002b54:	60b9      	str	r1, [r7, #8]
 8002b56:	603b      	str	r3, [r7, #0]
 8002b58:	4613      	mov	r3, r2
 8002b5a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002b60:	2b20      	cmp	r3, #32
 8002b62:	d177      	bne.n	8002c54 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d002      	beq.n	8002b70 <HAL_UART_Transmit+0x24>
 8002b6a:	88fb      	ldrh	r3, [r7, #6]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d101      	bne.n	8002b74 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002b70:	2301      	movs	r3, #1
 8002b72:	e070      	b.n	8002c56 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	2200      	movs	r2, #0
 8002b78:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	2221      	movs	r2, #33	@ 0x21
 8002b80:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002b82:	f7fe f9c1 	bl	8000f08 <HAL_GetTick>
 8002b86:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	88fa      	ldrh	r2, [r7, #6]
 8002b8c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	88fa      	ldrh	r2, [r7, #6]
 8002b94:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ba0:	d108      	bne.n	8002bb4 <HAL_UART_Transmit+0x68>
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	691b      	ldr	r3, [r3, #16]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d104      	bne.n	8002bb4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002baa:	2300      	movs	r3, #0
 8002bac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	61bb      	str	r3, [r7, #24]
 8002bb2:	e003      	b.n	8002bbc <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002bbc:	e02f      	b.n	8002c1e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	9300      	str	r3, [sp, #0]
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	2180      	movs	r1, #128	@ 0x80
 8002bc8:	68f8      	ldr	r0, [r7, #12]
 8002bca:	f000 fd13 	bl	80035f4 <UART_WaitOnFlagUntilTimeout>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d004      	beq.n	8002bde <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	2220      	movs	r2, #32
 8002bd8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8002bda:	2303      	movs	r3, #3
 8002bdc:	e03b      	b.n	8002c56 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8002bde:	69fb      	ldr	r3, [r7, #28]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d10b      	bne.n	8002bfc <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002be4:	69bb      	ldr	r3, [r7, #24]
 8002be6:	881a      	ldrh	r2, [r3, #0]
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002bf0:	b292      	uxth	r2, r2
 8002bf2:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002bf4:	69bb      	ldr	r3, [r7, #24]
 8002bf6:	3302      	adds	r3, #2
 8002bf8:	61bb      	str	r3, [r7, #24]
 8002bfa:	e007      	b.n	8002c0c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002bfc:	69fb      	ldr	r3, [r7, #28]
 8002bfe:	781a      	ldrb	r2, [r3, #0]
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002c06:	69fb      	ldr	r3, [r7, #28]
 8002c08:	3301      	adds	r3, #1
 8002c0a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002c12:	b29b      	uxth	r3, r3
 8002c14:	3b01      	subs	r3, #1
 8002c16:	b29a      	uxth	r2, r3
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002c24:	b29b      	uxth	r3, r3
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d1c9      	bne.n	8002bbe <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	9300      	str	r3, [sp, #0]
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	2200      	movs	r2, #0
 8002c32:	2140      	movs	r1, #64	@ 0x40
 8002c34:	68f8      	ldr	r0, [r7, #12]
 8002c36:	f000 fcdd 	bl	80035f4 <UART_WaitOnFlagUntilTimeout>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d004      	beq.n	8002c4a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2220      	movs	r2, #32
 8002c44:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8002c46:	2303      	movs	r3, #3
 8002c48:	e005      	b.n	8002c56 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	2220      	movs	r2, #32
 8002c4e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002c50:	2300      	movs	r3, #0
 8002c52:	e000      	b.n	8002c56 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8002c54:	2302      	movs	r3, #2
  }
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	3720      	adds	r7, #32
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}

08002c5e <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c5e:	b580      	push	{r7, lr}
 8002c60:	b08a      	sub	sp, #40	@ 0x28
 8002c62:	af02      	add	r7, sp, #8
 8002c64:	60f8      	str	r0, [r7, #12]
 8002c66:	60b9      	str	r1, [r7, #8]
 8002c68:	603b      	str	r3, [r7, #0]
 8002c6a:	4613      	mov	r3, r2
 8002c6c:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002c74:	2b20      	cmp	r3, #32
 8002c76:	f040 80b6 	bne.w	8002de6 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d002      	beq.n	8002c86 <HAL_UART_Receive+0x28>
 8002c80:	88fb      	ldrh	r3, [r7, #6]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d101      	bne.n	8002c8a <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	e0ae      	b.n	8002de8 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	2222      	movs	r2, #34	@ 0x22
 8002c96:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002ca0:	f7fe f932 	bl	8000f08 <HAL_GetTick>
 8002ca4:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	88fa      	ldrh	r2, [r7, #6]
 8002caa:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	88fa      	ldrh	r2, [r7, #6]
 8002cb2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002cbe:	d10e      	bne.n	8002cde <HAL_UART_Receive+0x80>
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	691b      	ldr	r3, [r3, #16]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d105      	bne.n	8002cd4 <HAL_UART_Receive+0x76>
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8002cce:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8002cd2:	e02d      	b.n	8002d30 <HAL_UART_Receive+0xd2>
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	22ff      	movs	r2, #255	@ 0xff
 8002cd8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8002cdc:	e028      	b.n	8002d30 <HAL_UART_Receive+0xd2>
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d10d      	bne.n	8002d02 <HAL_UART_Receive+0xa4>
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	691b      	ldr	r3, [r3, #16]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d104      	bne.n	8002cf8 <HAL_UART_Receive+0x9a>
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	22ff      	movs	r2, #255	@ 0xff
 8002cf2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8002cf6:	e01b      	b.n	8002d30 <HAL_UART_Receive+0xd2>
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	227f      	movs	r2, #127	@ 0x7f
 8002cfc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8002d00:	e016      	b.n	8002d30 <HAL_UART_Receive+0xd2>
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002d0a:	d10d      	bne.n	8002d28 <HAL_UART_Receive+0xca>
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	691b      	ldr	r3, [r3, #16]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d104      	bne.n	8002d1e <HAL_UART_Receive+0xc0>
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	227f      	movs	r2, #127	@ 0x7f
 8002d18:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8002d1c:	e008      	b.n	8002d30 <HAL_UART_Receive+0xd2>
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	223f      	movs	r2, #63	@ 0x3f
 8002d22:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8002d26:	e003      	b.n	8002d30 <HAL_UART_Receive+0xd2>
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8002d36:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d40:	d108      	bne.n	8002d54 <HAL_UART_Receive+0xf6>
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	691b      	ldr	r3, [r3, #16]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d104      	bne.n	8002d54 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	61bb      	str	r3, [r7, #24]
 8002d52:	e003      	b.n	8002d5c <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8002d5c:	e037      	b.n	8002dce <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	9300      	str	r3, [sp, #0]
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	2200      	movs	r2, #0
 8002d66:	2120      	movs	r1, #32
 8002d68:	68f8      	ldr	r0, [r7, #12]
 8002d6a:	f000 fc43 	bl	80035f4 <UART_WaitOnFlagUntilTimeout>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d005      	beq.n	8002d80 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	2220      	movs	r2, #32
 8002d78:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 8002d7c:	2303      	movs	r3, #3
 8002d7e:	e033      	b.n	8002de8 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8002d80:	69fb      	ldr	r3, [r7, #28]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d10c      	bne.n	8002da0 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8002d8c:	b29a      	uxth	r2, r3
 8002d8e:	8a7b      	ldrh	r3, [r7, #18]
 8002d90:	4013      	ands	r3, r2
 8002d92:	b29a      	uxth	r2, r3
 8002d94:	69bb      	ldr	r3, [r7, #24]
 8002d96:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002d98:	69bb      	ldr	r3, [r7, #24]
 8002d9a:	3302      	adds	r3, #2
 8002d9c:	61bb      	str	r3, [r7, #24]
 8002d9e:	e00d      	b.n	8002dbc <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8002da6:	b29b      	uxth	r3, r3
 8002da8:	b2da      	uxtb	r2, r3
 8002daa:	8a7b      	ldrh	r3, [r7, #18]
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	4013      	ands	r3, r2
 8002db0:	b2da      	uxtb	r2, r3
 8002db2:	69fb      	ldr	r3, [r7, #28]
 8002db4:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8002db6:	69fb      	ldr	r3, [r7, #28]
 8002db8:	3301      	adds	r3, #1
 8002dba:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002dc2:	b29b      	uxth	r3, r3
 8002dc4:	3b01      	subs	r3, #1
 8002dc6:	b29a      	uxth	r2, r3
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002dd4:	b29b      	uxth	r3, r3
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d1c1      	bne.n	8002d5e <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	2220      	movs	r2, #32
 8002dde:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 8002de2:	2300      	movs	r3, #0
 8002de4:	e000      	b.n	8002de8 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8002de6:	2302      	movs	r3, #2
  }
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	3720      	adds	r7, #32
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}

08002df0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002df0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002df4:	b08a      	sub	sp, #40	@ 0x28
 8002df6:	af00      	add	r7, sp, #0
 8002df8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	689a      	ldr	r2, [r3, #8]
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	691b      	ldr	r3, [r3, #16]
 8002e08:	431a      	orrs	r2, r3
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	695b      	ldr	r3, [r3, #20]
 8002e0e:	431a      	orrs	r2, r3
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	69db      	ldr	r3, [r3, #28]
 8002e14:	4313      	orrs	r3, r2
 8002e16:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	681a      	ldr	r2, [r3, #0]
 8002e1e:	4ba4      	ldr	r3, [pc, #656]	@ (80030b0 <UART_SetConfig+0x2c0>)
 8002e20:	4013      	ands	r3, r2
 8002e22:	68fa      	ldr	r2, [r7, #12]
 8002e24:	6812      	ldr	r2, [r2, #0]
 8002e26:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002e28:	430b      	orrs	r3, r1
 8002e2a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	68da      	ldr	r2, [r3, #12]
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	430a      	orrs	r2, r1
 8002e40:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	699b      	ldr	r3, [r3, #24]
 8002e46:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a99      	ldr	r2, [pc, #612]	@ (80030b4 <UART_SetConfig+0x2c4>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d004      	beq.n	8002e5c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	6a1b      	ldr	r3, [r3, #32]
 8002e56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e6c:	430a      	orrs	r2, r1
 8002e6e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a90      	ldr	r2, [pc, #576]	@ (80030b8 <UART_SetConfig+0x2c8>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d126      	bne.n	8002ec8 <UART_SetConfig+0xd8>
 8002e7a:	4b90      	ldr	r3, [pc, #576]	@ (80030bc <UART_SetConfig+0x2cc>)
 8002e7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e80:	f003 0303 	and.w	r3, r3, #3
 8002e84:	2b03      	cmp	r3, #3
 8002e86:	d81b      	bhi.n	8002ec0 <UART_SetConfig+0xd0>
 8002e88:	a201      	add	r2, pc, #4	@ (adr r2, 8002e90 <UART_SetConfig+0xa0>)
 8002e8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e8e:	bf00      	nop
 8002e90:	08002ea1 	.word	0x08002ea1
 8002e94:	08002eb1 	.word	0x08002eb1
 8002e98:	08002ea9 	.word	0x08002ea9
 8002e9c:	08002eb9 	.word	0x08002eb9
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002ea6:	e116      	b.n	80030d6 <UART_SetConfig+0x2e6>
 8002ea8:	2302      	movs	r3, #2
 8002eaa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002eae:	e112      	b.n	80030d6 <UART_SetConfig+0x2e6>
 8002eb0:	2304      	movs	r3, #4
 8002eb2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002eb6:	e10e      	b.n	80030d6 <UART_SetConfig+0x2e6>
 8002eb8:	2308      	movs	r3, #8
 8002eba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002ebe:	e10a      	b.n	80030d6 <UART_SetConfig+0x2e6>
 8002ec0:	2310      	movs	r3, #16
 8002ec2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002ec6:	e106      	b.n	80030d6 <UART_SetConfig+0x2e6>
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a7c      	ldr	r2, [pc, #496]	@ (80030c0 <UART_SetConfig+0x2d0>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d138      	bne.n	8002f44 <UART_SetConfig+0x154>
 8002ed2:	4b7a      	ldr	r3, [pc, #488]	@ (80030bc <UART_SetConfig+0x2cc>)
 8002ed4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ed8:	f003 030c 	and.w	r3, r3, #12
 8002edc:	2b0c      	cmp	r3, #12
 8002ede:	d82d      	bhi.n	8002f3c <UART_SetConfig+0x14c>
 8002ee0:	a201      	add	r2, pc, #4	@ (adr r2, 8002ee8 <UART_SetConfig+0xf8>)
 8002ee2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ee6:	bf00      	nop
 8002ee8:	08002f1d 	.word	0x08002f1d
 8002eec:	08002f3d 	.word	0x08002f3d
 8002ef0:	08002f3d 	.word	0x08002f3d
 8002ef4:	08002f3d 	.word	0x08002f3d
 8002ef8:	08002f2d 	.word	0x08002f2d
 8002efc:	08002f3d 	.word	0x08002f3d
 8002f00:	08002f3d 	.word	0x08002f3d
 8002f04:	08002f3d 	.word	0x08002f3d
 8002f08:	08002f25 	.word	0x08002f25
 8002f0c:	08002f3d 	.word	0x08002f3d
 8002f10:	08002f3d 	.word	0x08002f3d
 8002f14:	08002f3d 	.word	0x08002f3d
 8002f18:	08002f35 	.word	0x08002f35
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f22:	e0d8      	b.n	80030d6 <UART_SetConfig+0x2e6>
 8002f24:	2302      	movs	r3, #2
 8002f26:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f2a:	e0d4      	b.n	80030d6 <UART_SetConfig+0x2e6>
 8002f2c:	2304      	movs	r3, #4
 8002f2e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f32:	e0d0      	b.n	80030d6 <UART_SetConfig+0x2e6>
 8002f34:	2308      	movs	r3, #8
 8002f36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f3a:	e0cc      	b.n	80030d6 <UART_SetConfig+0x2e6>
 8002f3c:	2310      	movs	r3, #16
 8002f3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f42:	e0c8      	b.n	80030d6 <UART_SetConfig+0x2e6>
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a5e      	ldr	r2, [pc, #376]	@ (80030c4 <UART_SetConfig+0x2d4>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d125      	bne.n	8002f9a <UART_SetConfig+0x1aa>
 8002f4e:	4b5b      	ldr	r3, [pc, #364]	@ (80030bc <UART_SetConfig+0x2cc>)
 8002f50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f54:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002f58:	2b30      	cmp	r3, #48	@ 0x30
 8002f5a:	d016      	beq.n	8002f8a <UART_SetConfig+0x19a>
 8002f5c:	2b30      	cmp	r3, #48	@ 0x30
 8002f5e:	d818      	bhi.n	8002f92 <UART_SetConfig+0x1a2>
 8002f60:	2b20      	cmp	r3, #32
 8002f62:	d00a      	beq.n	8002f7a <UART_SetConfig+0x18a>
 8002f64:	2b20      	cmp	r3, #32
 8002f66:	d814      	bhi.n	8002f92 <UART_SetConfig+0x1a2>
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d002      	beq.n	8002f72 <UART_SetConfig+0x182>
 8002f6c:	2b10      	cmp	r3, #16
 8002f6e:	d008      	beq.n	8002f82 <UART_SetConfig+0x192>
 8002f70:	e00f      	b.n	8002f92 <UART_SetConfig+0x1a2>
 8002f72:	2300      	movs	r3, #0
 8002f74:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f78:	e0ad      	b.n	80030d6 <UART_SetConfig+0x2e6>
 8002f7a:	2302      	movs	r3, #2
 8002f7c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f80:	e0a9      	b.n	80030d6 <UART_SetConfig+0x2e6>
 8002f82:	2304      	movs	r3, #4
 8002f84:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f88:	e0a5      	b.n	80030d6 <UART_SetConfig+0x2e6>
 8002f8a:	2308      	movs	r3, #8
 8002f8c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f90:	e0a1      	b.n	80030d6 <UART_SetConfig+0x2e6>
 8002f92:	2310      	movs	r3, #16
 8002f94:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f98:	e09d      	b.n	80030d6 <UART_SetConfig+0x2e6>
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a4a      	ldr	r2, [pc, #296]	@ (80030c8 <UART_SetConfig+0x2d8>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d125      	bne.n	8002ff0 <UART_SetConfig+0x200>
 8002fa4:	4b45      	ldr	r3, [pc, #276]	@ (80030bc <UART_SetConfig+0x2cc>)
 8002fa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002faa:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002fae:	2bc0      	cmp	r3, #192	@ 0xc0
 8002fb0:	d016      	beq.n	8002fe0 <UART_SetConfig+0x1f0>
 8002fb2:	2bc0      	cmp	r3, #192	@ 0xc0
 8002fb4:	d818      	bhi.n	8002fe8 <UART_SetConfig+0x1f8>
 8002fb6:	2b80      	cmp	r3, #128	@ 0x80
 8002fb8:	d00a      	beq.n	8002fd0 <UART_SetConfig+0x1e0>
 8002fba:	2b80      	cmp	r3, #128	@ 0x80
 8002fbc:	d814      	bhi.n	8002fe8 <UART_SetConfig+0x1f8>
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d002      	beq.n	8002fc8 <UART_SetConfig+0x1d8>
 8002fc2:	2b40      	cmp	r3, #64	@ 0x40
 8002fc4:	d008      	beq.n	8002fd8 <UART_SetConfig+0x1e8>
 8002fc6:	e00f      	b.n	8002fe8 <UART_SetConfig+0x1f8>
 8002fc8:	2300      	movs	r3, #0
 8002fca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002fce:	e082      	b.n	80030d6 <UART_SetConfig+0x2e6>
 8002fd0:	2302      	movs	r3, #2
 8002fd2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002fd6:	e07e      	b.n	80030d6 <UART_SetConfig+0x2e6>
 8002fd8:	2304      	movs	r3, #4
 8002fda:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002fde:	e07a      	b.n	80030d6 <UART_SetConfig+0x2e6>
 8002fe0:	2308      	movs	r3, #8
 8002fe2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002fe6:	e076      	b.n	80030d6 <UART_SetConfig+0x2e6>
 8002fe8:	2310      	movs	r3, #16
 8002fea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002fee:	e072      	b.n	80030d6 <UART_SetConfig+0x2e6>
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a35      	ldr	r2, [pc, #212]	@ (80030cc <UART_SetConfig+0x2dc>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d12a      	bne.n	8003050 <UART_SetConfig+0x260>
 8002ffa:	4b30      	ldr	r3, [pc, #192]	@ (80030bc <UART_SetConfig+0x2cc>)
 8002ffc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003000:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003004:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003008:	d01a      	beq.n	8003040 <UART_SetConfig+0x250>
 800300a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800300e:	d81b      	bhi.n	8003048 <UART_SetConfig+0x258>
 8003010:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003014:	d00c      	beq.n	8003030 <UART_SetConfig+0x240>
 8003016:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800301a:	d815      	bhi.n	8003048 <UART_SetConfig+0x258>
 800301c:	2b00      	cmp	r3, #0
 800301e:	d003      	beq.n	8003028 <UART_SetConfig+0x238>
 8003020:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003024:	d008      	beq.n	8003038 <UART_SetConfig+0x248>
 8003026:	e00f      	b.n	8003048 <UART_SetConfig+0x258>
 8003028:	2300      	movs	r3, #0
 800302a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800302e:	e052      	b.n	80030d6 <UART_SetConfig+0x2e6>
 8003030:	2302      	movs	r3, #2
 8003032:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003036:	e04e      	b.n	80030d6 <UART_SetConfig+0x2e6>
 8003038:	2304      	movs	r3, #4
 800303a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800303e:	e04a      	b.n	80030d6 <UART_SetConfig+0x2e6>
 8003040:	2308      	movs	r3, #8
 8003042:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003046:	e046      	b.n	80030d6 <UART_SetConfig+0x2e6>
 8003048:	2310      	movs	r3, #16
 800304a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800304e:	e042      	b.n	80030d6 <UART_SetConfig+0x2e6>
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a17      	ldr	r2, [pc, #92]	@ (80030b4 <UART_SetConfig+0x2c4>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d13a      	bne.n	80030d0 <UART_SetConfig+0x2e0>
 800305a:	4b18      	ldr	r3, [pc, #96]	@ (80030bc <UART_SetConfig+0x2cc>)
 800305c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003060:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003064:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003068:	d01a      	beq.n	80030a0 <UART_SetConfig+0x2b0>
 800306a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800306e:	d81b      	bhi.n	80030a8 <UART_SetConfig+0x2b8>
 8003070:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003074:	d00c      	beq.n	8003090 <UART_SetConfig+0x2a0>
 8003076:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800307a:	d815      	bhi.n	80030a8 <UART_SetConfig+0x2b8>
 800307c:	2b00      	cmp	r3, #0
 800307e:	d003      	beq.n	8003088 <UART_SetConfig+0x298>
 8003080:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003084:	d008      	beq.n	8003098 <UART_SetConfig+0x2a8>
 8003086:	e00f      	b.n	80030a8 <UART_SetConfig+0x2b8>
 8003088:	2300      	movs	r3, #0
 800308a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800308e:	e022      	b.n	80030d6 <UART_SetConfig+0x2e6>
 8003090:	2302      	movs	r3, #2
 8003092:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003096:	e01e      	b.n	80030d6 <UART_SetConfig+0x2e6>
 8003098:	2304      	movs	r3, #4
 800309a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800309e:	e01a      	b.n	80030d6 <UART_SetConfig+0x2e6>
 80030a0:	2308      	movs	r3, #8
 80030a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80030a6:	e016      	b.n	80030d6 <UART_SetConfig+0x2e6>
 80030a8:	2310      	movs	r3, #16
 80030aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80030ae:	e012      	b.n	80030d6 <UART_SetConfig+0x2e6>
 80030b0:	efff69f3 	.word	0xefff69f3
 80030b4:	40008000 	.word	0x40008000
 80030b8:	40013800 	.word	0x40013800
 80030bc:	40021000 	.word	0x40021000
 80030c0:	40004400 	.word	0x40004400
 80030c4:	40004800 	.word	0x40004800
 80030c8:	40004c00 	.word	0x40004c00
 80030cc:	40005000 	.word	0x40005000
 80030d0:	2310      	movs	r3, #16
 80030d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a9f      	ldr	r2, [pc, #636]	@ (8003358 <UART_SetConfig+0x568>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d17a      	bne.n	80031d6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80030e0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80030e4:	2b08      	cmp	r3, #8
 80030e6:	d824      	bhi.n	8003132 <UART_SetConfig+0x342>
 80030e8:	a201      	add	r2, pc, #4	@ (adr r2, 80030f0 <UART_SetConfig+0x300>)
 80030ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030ee:	bf00      	nop
 80030f0:	08003115 	.word	0x08003115
 80030f4:	08003133 	.word	0x08003133
 80030f8:	0800311d 	.word	0x0800311d
 80030fc:	08003133 	.word	0x08003133
 8003100:	08003123 	.word	0x08003123
 8003104:	08003133 	.word	0x08003133
 8003108:	08003133 	.word	0x08003133
 800310c:	08003133 	.word	0x08003133
 8003110:	0800312b 	.word	0x0800312b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003114:	f7fe ff84 	bl	8002020 <HAL_RCC_GetPCLK1Freq>
 8003118:	61f8      	str	r0, [r7, #28]
        break;
 800311a:	e010      	b.n	800313e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800311c:	4b8f      	ldr	r3, [pc, #572]	@ (800335c <UART_SetConfig+0x56c>)
 800311e:	61fb      	str	r3, [r7, #28]
        break;
 8003120:	e00d      	b.n	800313e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003122:	f7fe fee5 	bl	8001ef0 <HAL_RCC_GetSysClockFreq>
 8003126:	61f8      	str	r0, [r7, #28]
        break;
 8003128:	e009      	b.n	800313e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800312a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800312e:	61fb      	str	r3, [r7, #28]
        break;
 8003130:	e005      	b.n	800313e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003132:	2300      	movs	r3, #0
 8003134:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800313c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800313e:	69fb      	ldr	r3, [r7, #28]
 8003140:	2b00      	cmp	r3, #0
 8003142:	f000 80fb 	beq.w	800333c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	685a      	ldr	r2, [r3, #4]
 800314a:	4613      	mov	r3, r2
 800314c:	005b      	lsls	r3, r3, #1
 800314e:	4413      	add	r3, r2
 8003150:	69fa      	ldr	r2, [r7, #28]
 8003152:	429a      	cmp	r2, r3
 8003154:	d305      	bcc.n	8003162 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800315c:	69fa      	ldr	r2, [r7, #28]
 800315e:	429a      	cmp	r2, r3
 8003160:	d903      	bls.n	800316a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003168:	e0e8      	b.n	800333c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800316a:	69fb      	ldr	r3, [r7, #28]
 800316c:	2200      	movs	r2, #0
 800316e:	461c      	mov	r4, r3
 8003170:	4615      	mov	r5, r2
 8003172:	f04f 0200 	mov.w	r2, #0
 8003176:	f04f 0300 	mov.w	r3, #0
 800317a:	022b      	lsls	r3, r5, #8
 800317c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003180:	0222      	lsls	r2, r4, #8
 8003182:	68f9      	ldr	r1, [r7, #12]
 8003184:	6849      	ldr	r1, [r1, #4]
 8003186:	0849      	lsrs	r1, r1, #1
 8003188:	2000      	movs	r0, #0
 800318a:	4688      	mov	r8, r1
 800318c:	4681      	mov	r9, r0
 800318e:	eb12 0a08 	adds.w	sl, r2, r8
 8003192:	eb43 0b09 	adc.w	fp, r3, r9
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	2200      	movs	r2, #0
 800319c:	603b      	str	r3, [r7, #0]
 800319e:	607a      	str	r2, [r7, #4]
 80031a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80031a4:	4650      	mov	r0, sl
 80031a6:	4659      	mov	r1, fp
 80031a8:	f7fd f91a 	bl	80003e0 <__aeabi_uldivmod>
 80031ac:	4602      	mov	r2, r0
 80031ae:	460b      	mov	r3, r1
 80031b0:	4613      	mov	r3, r2
 80031b2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80031b4:	69bb      	ldr	r3, [r7, #24]
 80031b6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80031ba:	d308      	bcc.n	80031ce <UART_SetConfig+0x3de>
 80031bc:	69bb      	ldr	r3, [r7, #24]
 80031be:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80031c2:	d204      	bcs.n	80031ce <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	69ba      	ldr	r2, [r7, #24]
 80031ca:	60da      	str	r2, [r3, #12]
 80031cc:	e0b6      	b.n	800333c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80031d4:	e0b2      	b.n	800333c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	69db      	ldr	r3, [r3, #28]
 80031da:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80031de:	d15e      	bne.n	800329e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80031e0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80031e4:	2b08      	cmp	r3, #8
 80031e6:	d828      	bhi.n	800323a <UART_SetConfig+0x44a>
 80031e8:	a201      	add	r2, pc, #4	@ (adr r2, 80031f0 <UART_SetConfig+0x400>)
 80031ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031ee:	bf00      	nop
 80031f0:	08003215 	.word	0x08003215
 80031f4:	0800321d 	.word	0x0800321d
 80031f8:	08003225 	.word	0x08003225
 80031fc:	0800323b 	.word	0x0800323b
 8003200:	0800322b 	.word	0x0800322b
 8003204:	0800323b 	.word	0x0800323b
 8003208:	0800323b 	.word	0x0800323b
 800320c:	0800323b 	.word	0x0800323b
 8003210:	08003233 	.word	0x08003233
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003214:	f7fe ff04 	bl	8002020 <HAL_RCC_GetPCLK1Freq>
 8003218:	61f8      	str	r0, [r7, #28]
        break;
 800321a:	e014      	b.n	8003246 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800321c:	f7fe ff16 	bl	800204c <HAL_RCC_GetPCLK2Freq>
 8003220:	61f8      	str	r0, [r7, #28]
        break;
 8003222:	e010      	b.n	8003246 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003224:	4b4d      	ldr	r3, [pc, #308]	@ (800335c <UART_SetConfig+0x56c>)
 8003226:	61fb      	str	r3, [r7, #28]
        break;
 8003228:	e00d      	b.n	8003246 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800322a:	f7fe fe61 	bl	8001ef0 <HAL_RCC_GetSysClockFreq>
 800322e:	61f8      	str	r0, [r7, #28]
        break;
 8003230:	e009      	b.n	8003246 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003232:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003236:	61fb      	str	r3, [r7, #28]
        break;
 8003238:	e005      	b.n	8003246 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800323a:	2300      	movs	r3, #0
 800323c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003244:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003246:	69fb      	ldr	r3, [r7, #28]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d077      	beq.n	800333c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800324c:	69fb      	ldr	r3, [r7, #28]
 800324e:	005a      	lsls	r2, r3, #1
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	085b      	lsrs	r3, r3, #1
 8003256:	441a      	add	r2, r3
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003260:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003262:	69bb      	ldr	r3, [r7, #24]
 8003264:	2b0f      	cmp	r3, #15
 8003266:	d916      	bls.n	8003296 <UART_SetConfig+0x4a6>
 8003268:	69bb      	ldr	r3, [r7, #24]
 800326a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800326e:	d212      	bcs.n	8003296 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003270:	69bb      	ldr	r3, [r7, #24]
 8003272:	b29b      	uxth	r3, r3
 8003274:	f023 030f 	bic.w	r3, r3, #15
 8003278:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800327a:	69bb      	ldr	r3, [r7, #24]
 800327c:	085b      	lsrs	r3, r3, #1
 800327e:	b29b      	uxth	r3, r3
 8003280:	f003 0307 	and.w	r3, r3, #7
 8003284:	b29a      	uxth	r2, r3
 8003286:	8afb      	ldrh	r3, [r7, #22]
 8003288:	4313      	orrs	r3, r2
 800328a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	8afa      	ldrh	r2, [r7, #22]
 8003292:	60da      	str	r2, [r3, #12]
 8003294:	e052      	b.n	800333c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800329c:	e04e      	b.n	800333c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800329e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80032a2:	2b08      	cmp	r3, #8
 80032a4:	d827      	bhi.n	80032f6 <UART_SetConfig+0x506>
 80032a6:	a201      	add	r2, pc, #4	@ (adr r2, 80032ac <UART_SetConfig+0x4bc>)
 80032a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032ac:	080032d1 	.word	0x080032d1
 80032b0:	080032d9 	.word	0x080032d9
 80032b4:	080032e1 	.word	0x080032e1
 80032b8:	080032f7 	.word	0x080032f7
 80032bc:	080032e7 	.word	0x080032e7
 80032c0:	080032f7 	.word	0x080032f7
 80032c4:	080032f7 	.word	0x080032f7
 80032c8:	080032f7 	.word	0x080032f7
 80032cc:	080032ef 	.word	0x080032ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032d0:	f7fe fea6 	bl	8002020 <HAL_RCC_GetPCLK1Freq>
 80032d4:	61f8      	str	r0, [r7, #28]
        break;
 80032d6:	e014      	b.n	8003302 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80032d8:	f7fe feb8 	bl	800204c <HAL_RCC_GetPCLK2Freq>
 80032dc:	61f8      	str	r0, [r7, #28]
        break;
 80032de:	e010      	b.n	8003302 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80032e0:	4b1e      	ldr	r3, [pc, #120]	@ (800335c <UART_SetConfig+0x56c>)
 80032e2:	61fb      	str	r3, [r7, #28]
        break;
 80032e4:	e00d      	b.n	8003302 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80032e6:	f7fe fe03 	bl	8001ef0 <HAL_RCC_GetSysClockFreq>
 80032ea:	61f8      	str	r0, [r7, #28]
        break;
 80032ec:	e009      	b.n	8003302 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80032ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80032f2:	61fb      	str	r3, [r7, #28]
        break;
 80032f4:	e005      	b.n	8003302 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80032f6:	2300      	movs	r3, #0
 80032f8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003300:	bf00      	nop
    }

    if (pclk != 0U)
 8003302:	69fb      	ldr	r3, [r7, #28]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d019      	beq.n	800333c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	085a      	lsrs	r2, r3, #1
 800330e:	69fb      	ldr	r3, [r7, #28]
 8003310:	441a      	add	r2, r3
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	fbb2 f3f3 	udiv	r3, r2, r3
 800331a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800331c:	69bb      	ldr	r3, [r7, #24]
 800331e:	2b0f      	cmp	r3, #15
 8003320:	d909      	bls.n	8003336 <UART_SetConfig+0x546>
 8003322:	69bb      	ldr	r3, [r7, #24]
 8003324:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003328:	d205      	bcs.n	8003336 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800332a:	69bb      	ldr	r3, [r7, #24]
 800332c:	b29a      	uxth	r2, r3
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	60da      	str	r2, [r3, #12]
 8003334:	e002      	b.n	800333c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	2200      	movs	r2, #0
 8003340:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	2200      	movs	r2, #0
 8003346:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003348:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 800334c:	4618      	mov	r0, r3
 800334e:	3728      	adds	r7, #40	@ 0x28
 8003350:	46bd      	mov	sp, r7
 8003352:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003356:	bf00      	nop
 8003358:	40008000 	.word	0x40008000
 800335c:	00f42400 	.word	0x00f42400

08003360 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003360:	b480      	push	{r7}
 8003362:	b083      	sub	sp, #12
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800336c:	f003 0308 	and.w	r3, r3, #8
 8003370:	2b00      	cmp	r3, #0
 8003372:	d00a      	beq.n	800338a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	430a      	orrs	r2, r1
 8003388:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800338e:	f003 0301 	and.w	r3, r3, #1
 8003392:	2b00      	cmp	r3, #0
 8003394:	d00a      	beq.n	80033ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	430a      	orrs	r2, r1
 80033aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033b0:	f003 0302 	and.w	r3, r3, #2
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d00a      	beq.n	80033ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	430a      	orrs	r2, r1
 80033cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033d2:	f003 0304 	and.w	r3, r3, #4
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d00a      	beq.n	80033f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	430a      	orrs	r2, r1
 80033ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033f4:	f003 0310 	and.w	r3, r3, #16
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d00a      	beq.n	8003412 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	430a      	orrs	r2, r1
 8003410:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003416:	f003 0320 	and.w	r3, r3, #32
 800341a:	2b00      	cmp	r3, #0
 800341c:	d00a      	beq.n	8003434 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	430a      	orrs	r2, r1
 8003432:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003438:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800343c:	2b00      	cmp	r3, #0
 800343e:	d01a      	beq.n	8003476 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	430a      	orrs	r2, r1
 8003454:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800345a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800345e:	d10a      	bne.n	8003476 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	430a      	orrs	r2, r1
 8003474:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800347a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800347e:	2b00      	cmp	r3, #0
 8003480:	d00a      	beq.n	8003498 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	430a      	orrs	r2, r1
 8003496:	605a      	str	r2, [r3, #4]
  }
}
 8003498:	bf00      	nop
 800349a:	370c      	adds	r7, #12
 800349c:	46bd      	mov	sp, r7
 800349e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a2:	4770      	bx	lr

080034a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b098      	sub	sp, #96	@ 0x60
 80034a8:	af02      	add	r7, sp, #8
 80034aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2200      	movs	r2, #0
 80034b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80034b4:	f7fd fd28 	bl	8000f08 <HAL_GetTick>
 80034b8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f003 0308 	and.w	r3, r3, #8
 80034c4:	2b08      	cmp	r3, #8
 80034c6:	d12e      	bne.n	8003526 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80034c8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80034cc:	9300      	str	r3, [sp, #0]
 80034ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034d0:	2200      	movs	r2, #0
 80034d2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f000 f88c 	bl	80035f4 <UART_WaitOnFlagUntilTimeout>
 80034dc:	4603      	mov	r3, r0
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d021      	beq.n	8003526 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034ea:	e853 3f00 	ldrex	r3, [r3]
 80034ee:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80034f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034f2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80034f6:	653b      	str	r3, [r7, #80]	@ 0x50
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	461a      	mov	r2, r3
 80034fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003500:	647b      	str	r3, [r7, #68]	@ 0x44
 8003502:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003504:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003506:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003508:	e841 2300 	strex	r3, r2, [r1]
 800350c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800350e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003510:	2b00      	cmp	r3, #0
 8003512:	d1e6      	bne.n	80034e2 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2220      	movs	r2, #32
 8003518:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2200      	movs	r2, #0
 800351e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003522:	2303      	movs	r3, #3
 8003524:	e062      	b.n	80035ec <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f003 0304 	and.w	r3, r3, #4
 8003530:	2b04      	cmp	r3, #4
 8003532:	d149      	bne.n	80035c8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003534:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003538:	9300      	str	r3, [sp, #0]
 800353a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800353c:	2200      	movs	r2, #0
 800353e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f000 f856 	bl	80035f4 <UART_WaitOnFlagUntilTimeout>
 8003548:	4603      	mov	r3, r0
 800354a:	2b00      	cmp	r3, #0
 800354c:	d03c      	beq.n	80035c8 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003554:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003556:	e853 3f00 	ldrex	r3, [r3]
 800355a:	623b      	str	r3, [r7, #32]
   return(result);
 800355c:	6a3b      	ldr	r3, [r7, #32]
 800355e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003562:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	461a      	mov	r2, r3
 800356a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800356c:	633b      	str	r3, [r7, #48]	@ 0x30
 800356e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003570:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003572:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003574:	e841 2300 	strex	r3, r2, [r1]
 8003578:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800357a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800357c:	2b00      	cmp	r3, #0
 800357e:	d1e6      	bne.n	800354e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	3308      	adds	r3, #8
 8003586:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003588:	693b      	ldr	r3, [r7, #16]
 800358a:	e853 3f00 	ldrex	r3, [r3]
 800358e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	f023 0301 	bic.w	r3, r3, #1
 8003596:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	3308      	adds	r3, #8
 800359e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80035a0:	61fa      	str	r2, [r7, #28]
 80035a2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035a4:	69b9      	ldr	r1, [r7, #24]
 80035a6:	69fa      	ldr	r2, [r7, #28]
 80035a8:	e841 2300 	strex	r3, r2, [r1]
 80035ac:	617b      	str	r3, [r7, #20]
   return(result);
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d1e5      	bne.n	8003580 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2220      	movs	r2, #32
 80035b8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2200      	movs	r2, #0
 80035c0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80035c4:	2303      	movs	r3, #3
 80035c6:	e011      	b.n	80035ec <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2220      	movs	r2, #32
 80035cc:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2220      	movs	r2, #32
 80035d2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2200      	movs	r2, #0
 80035da:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2200      	movs	r2, #0
 80035e0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2200      	movs	r2, #0
 80035e6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80035ea:	2300      	movs	r3, #0
}
 80035ec:	4618      	mov	r0, r3
 80035ee:	3758      	adds	r7, #88	@ 0x58
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bd80      	pop	{r7, pc}

080035f4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b084      	sub	sp, #16
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	60f8      	str	r0, [r7, #12]
 80035fc:	60b9      	str	r1, [r7, #8]
 80035fe:	603b      	str	r3, [r7, #0]
 8003600:	4613      	mov	r3, r2
 8003602:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003604:	e04f      	b.n	80036a6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003606:	69bb      	ldr	r3, [r7, #24]
 8003608:	f1b3 3fff 	cmp.w	r3, #4294967295
 800360c:	d04b      	beq.n	80036a6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800360e:	f7fd fc7b 	bl	8000f08 <HAL_GetTick>
 8003612:	4602      	mov	r2, r0
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	1ad3      	subs	r3, r2, r3
 8003618:	69ba      	ldr	r2, [r7, #24]
 800361a:	429a      	cmp	r2, r3
 800361c:	d302      	bcc.n	8003624 <UART_WaitOnFlagUntilTimeout+0x30>
 800361e:	69bb      	ldr	r3, [r7, #24]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d101      	bne.n	8003628 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003624:	2303      	movs	r3, #3
 8003626:	e04e      	b.n	80036c6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f003 0304 	and.w	r3, r3, #4
 8003632:	2b00      	cmp	r3, #0
 8003634:	d037      	beq.n	80036a6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	2b80      	cmp	r3, #128	@ 0x80
 800363a:	d034      	beq.n	80036a6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	2b40      	cmp	r3, #64	@ 0x40
 8003640:	d031      	beq.n	80036a6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	69db      	ldr	r3, [r3, #28]
 8003648:	f003 0308 	and.w	r3, r3, #8
 800364c:	2b08      	cmp	r3, #8
 800364e:	d110      	bne.n	8003672 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	2208      	movs	r2, #8
 8003656:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003658:	68f8      	ldr	r0, [r7, #12]
 800365a:	f000 f838 	bl	80036ce <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	2208      	movs	r2, #8
 8003662:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	2200      	movs	r2, #0
 800366a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	e029      	b.n	80036c6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	69db      	ldr	r3, [r3, #28]
 8003678:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800367c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003680:	d111      	bne.n	80036a6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800368a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800368c:	68f8      	ldr	r0, [r7, #12]
 800368e:	f000 f81e 	bl	80036ce <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	2220      	movs	r2, #32
 8003696:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	2200      	movs	r2, #0
 800369e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80036a2:	2303      	movs	r3, #3
 80036a4:	e00f      	b.n	80036c6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	69da      	ldr	r2, [r3, #28]
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	4013      	ands	r3, r2
 80036b0:	68ba      	ldr	r2, [r7, #8]
 80036b2:	429a      	cmp	r2, r3
 80036b4:	bf0c      	ite	eq
 80036b6:	2301      	moveq	r3, #1
 80036b8:	2300      	movne	r3, #0
 80036ba:	b2db      	uxtb	r3, r3
 80036bc:	461a      	mov	r2, r3
 80036be:	79fb      	ldrb	r3, [r7, #7]
 80036c0:	429a      	cmp	r2, r3
 80036c2:	d0a0      	beq.n	8003606 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80036c4:	2300      	movs	r3, #0
}
 80036c6:	4618      	mov	r0, r3
 80036c8:	3710      	adds	r7, #16
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}

080036ce <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80036ce:	b480      	push	{r7}
 80036d0:	b095      	sub	sp, #84	@ 0x54
 80036d2:	af00      	add	r7, sp, #0
 80036d4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036de:	e853 3f00 	ldrex	r3, [r3]
 80036e2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80036e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036e6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80036ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	461a      	mov	r2, r3
 80036f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80036f4:	643b      	str	r3, [r7, #64]	@ 0x40
 80036f6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036f8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80036fa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80036fc:	e841 2300 	strex	r3, r2, [r1]
 8003700:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003702:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003704:	2b00      	cmp	r3, #0
 8003706:	d1e6      	bne.n	80036d6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	3308      	adds	r3, #8
 800370e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003710:	6a3b      	ldr	r3, [r7, #32]
 8003712:	e853 3f00 	ldrex	r3, [r3]
 8003716:	61fb      	str	r3, [r7, #28]
   return(result);
 8003718:	69fb      	ldr	r3, [r7, #28]
 800371a:	f023 0301 	bic.w	r3, r3, #1
 800371e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	3308      	adds	r3, #8
 8003726:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003728:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800372a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800372c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800372e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003730:	e841 2300 	strex	r3, r2, [r1]
 8003734:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003738:	2b00      	cmp	r3, #0
 800373a:	d1e5      	bne.n	8003708 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003740:	2b01      	cmp	r3, #1
 8003742:	d118      	bne.n	8003776 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	e853 3f00 	ldrex	r3, [r3]
 8003750:	60bb      	str	r3, [r7, #8]
   return(result);
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	f023 0310 	bic.w	r3, r3, #16
 8003758:	647b      	str	r3, [r7, #68]	@ 0x44
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	461a      	mov	r2, r3
 8003760:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003762:	61bb      	str	r3, [r7, #24]
 8003764:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003766:	6979      	ldr	r1, [r7, #20]
 8003768:	69ba      	ldr	r2, [r7, #24]
 800376a:	e841 2300 	strex	r3, r2, [r1]
 800376e:	613b      	str	r3, [r7, #16]
   return(result);
 8003770:	693b      	ldr	r3, [r7, #16]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d1e6      	bne.n	8003744 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2220      	movs	r2, #32
 800377a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2200      	movs	r2, #0
 8003782:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2200      	movs	r2, #0
 8003788:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800378a:	bf00      	nop
 800378c:	3754      	adds	r7, #84	@ 0x54
 800378e:	46bd      	mov	sp, r7
 8003790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003794:	4770      	bx	lr

08003796 <App_TaskCreateHook>:
* Note(s)     : (1) Interrupts are disabled during this call.
*********************************************************************************************************
*/

void  App_TaskCreateHook (OS_TCB *ptcb)
{
 8003796:	b480      	push	{r7}
 8003798:	b083      	sub	sp, #12
 800379a:	af00      	add	r7, sp, #0
 800379c:	6078      	str	r0, [r7, #4]
    (void)ptcb;
}
 800379e:	bf00      	nop
 80037a0:	370c      	adds	r7, #12
 80037a2:	46bd      	mov	sp, r7
 80037a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a8:	4770      	bx	lr

080037aa <App_TaskDelHook>:
* Note(s)     : (1) Interrupts are disabled during this call.
*********************************************************************************************************
*/

void  App_TaskDelHook (OS_TCB *ptcb)
{
 80037aa:	b480      	push	{r7}
 80037ac:	b083      	sub	sp, #12
 80037ae:	af00      	add	r7, sp, #0
 80037b0:	6078      	str	r0, [r7, #4]
    (void)ptcb;
}
 80037b2:	bf00      	nop
 80037b4:	370c      	adds	r7, #12
 80037b6:	46bd      	mov	sp, r7
 80037b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037bc:	4770      	bx	lr

080037be <App_TaskIdleHook>:
*********************************************************************************************************
*/

#if OS_VERSION >= 251
void  App_TaskIdleHook (void)
{
 80037be:	b480      	push	{r7}
 80037c0:	af00      	add	r7, sp, #0
}
 80037c2:	bf00      	nop
 80037c4:	46bd      	mov	sp, r7
 80037c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ca:	4770      	bx	lr

080037cc <App_TaskStatHook>:
* Argument(s) : none.
*********************************************************************************************************
*/

void  App_TaskStatHook (void)
{
 80037cc:	b480      	push	{r7}
 80037ce:	af00      	add	r7, sp, #0
}
 80037d0:	bf00      	nop
 80037d2:	46bd      	mov	sp, r7
 80037d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d8:	4770      	bx	lr

080037da <App_TaskReturnHook>:
*/


#if OS_VERSION >= 289
void  App_TaskReturnHook (OS_TCB  *ptcb)
{
 80037da:	b480      	push	{r7}
 80037dc:	b083      	sub	sp, #12
 80037de:	af00      	add	r7, sp, #0
 80037e0:	6078      	str	r0, [r7, #4]
    (void)ptcb;
}
 80037e2:	bf00      	nop
 80037e4:	370c      	adds	r7, #12
 80037e6:	46bd      	mov	sp, r7
 80037e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ec:	4770      	bx	lr

080037ee <App_TaskSwHook>:
*********************************************************************************************************
*/

#if OS_TASK_SW_HOOK_EN > 0
void  App_TaskSwHook (void)
{
 80037ee:	b480      	push	{r7}
 80037f0:	af00      	add	r7, sp, #0

}
 80037f2:	bf00      	nop
 80037f4:	46bd      	mov	sp, r7
 80037f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fa:	4770      	bx	lr

080037fc <App_TCBInitHook>:
*********************************************************************************************************
*/

#if OS_VERSION >= 204
void  App_TCBInitHook (OS_TCB *ptcb)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b083      	sub	sp, #12
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
    (void)ptcb;
}
 8003804:	bf00      	nop
 8003806:	370c      	adds	r7, #12
 8003808:	46bd      	mov	sp, r7
 800380a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380e:	4770      	bx	lr

08003810 <App_TimeTickHook>:
*********************************************************************************************************
*/

#if OS_TIME_TICK_HOOK_EN > 0
void  App_TimeTickHook (void)
{
 8003810:	b480      	push	{r7}
 8003812:	af00      	add	r7, sp, #0

}
 8003814:	bf00      	nop
 8003816:	46bd      	mov	sp, r7
 8003818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381c:	4770      	bx	lr
	...

08003820 <OSInitHookBegin>:
*                 b) Set bits ASPEN and LSPEN in FPCCR register.
*********************************************************************************************************
*/
#if OS_CPU_HOOKS_EN > 0u
void  OSInitHookBegin (void)
{
 8003820:	b480      	push	{r7}
 8003822:	b085      	sub	sp, #20
 8003824:	af00      	add	r7, sp, #0
    OS_STK  *pstk;
#if (OS_CPU_ARM_FP_EN > 0u)
    INT32U   reg_val;
#endif
                                                                /* Clear exception stack for stack checking.            */
    pstk = &OS_CPU_ExceptStk[0];
 8003826:	4b19      	ldr	r3, [pc, #100]	@ (800388c <OSInitHookBegin+0x6c>)
 8003828:	60bb      	str	r3, [r7, #8]
    size = OS_CPU_EXCEPT_STK_SIZE;
 800382a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800382e:	60fb      	str	r3, [r7, #12]
    while (size > 0u) {
 8003830:	e007      	b.n	8003842 <OSInitHookBegin+0x22>
        size--;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	3b01      	subs	r3, #1
 8003836:	60fb      	str	r3, [r7, #12]
       *pstk++ = (OS_STK)0;
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	1d1a      	adds	r2, r3, #4
 800383c:	60ba      	str	r2, [r7, #8]
 800383e:	2200      	movs	r2, #0
 8003840:	601a      	str	r2, [r3, #0]
    while (size > 0u) {
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d1f4      	bne.n	8003832 <OSInitHookBegin+0x12>
    }

                                                                /* Align the ISR stack to 8-bytes                       */
    OS_CPU_ExceptStkBase = (OS_STK *)&OS_CPU_ExceptStk[OS_CPU_EXCEPT_STK_SIZE];
 8003848:	4b11      	ldr	r3, [pc, #68]	@ (8003890 <OSInitHookBegin+0x70>)
 800384a:	4a12      	ldr	r2, [pc, #72]	@ (8003894 <OSInitHookBegin+0x74>)
 800384c:	601a      	str	r2, [r3, #0]
    OS_CPU_ExceptStkBase = (OS_STK *)((OS_STK)(OS_CPU_ExceptStkBase) & 0xFFFFFFF8);
 800384e:	4b10      	ldr	r3, [pc, #64]	@ (8003890 <OSInitHookBegin+0x70>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f023 0307 	bic.w	r3, r3, #7
 8003856:	461a      	mov	r2, r3
 8003858:	4b0d      	ldr	r3, [pc, #52]	@ (8003890 <OSInitHookBegin+0x70>)
 800385a:	601a      	str	r2, [r3, #0]

#if (OS_CPU_ARM_FP_EN > 0u)
    reg_val = OS_CPU_CM_FP_FPCCR;                               /* Check the floating point mode.                       */
 800385c:	4b0e      	ldr	r3, [pc, #56]	@ (8003898 <OSInitHookBegin+0x78>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	607b      	str	r3, [r7, #4]
    if ((reg_val & OS_CPU_CM_FPCCR_LAZY_STK) != OS_CPU_CM_FPCCR_LAZY_STK) {
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8003868:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800386c:	d001      	beq.n	8003872 <OSInitHookBegin+0x52>
        while (1u) {                                            /* See Note (2).                                        */
 800386e:	bf00      	nop
 8003870:	e7fd      	b.n	800386e <OSInitHookBegin+0x4e>
        }
    }
#endif

#if OS_TMR_EN > 0u
    OSTmrCtr = 0u;
 8003872:	4b0a      	ldr	r3, [pc, #40]	@ (800389c <OSInitHookBegin+0x7c>)
 8003874:	2200      	movs	r2, #0
 8003876:	801a      	strh	r2, [r3, #0]
#endif

                                                                /* Set BASEPRI boundary from the configuration.         */
    OS_KA_BASEPRI_Boundary = (INT32U)(CPU_CFG_KA_IPL_BOUNDARY << (8u - CPU_CFG_NVIC_PRIO_BITS));
 8003878:	4b09      	ldr	r3, [pc, #36]	@ (80038a0 <OSInitHookBegin+0x80>)
 800387a:	2240      	movs	r2, #64	@ 0x40
 800387c:	601a      	str	r2, [r3, #0]
}
 800387e:	bf00      	nop
 8003880:	3714      	adds	r7, #20
 8003882:	46bd      	mov	sp, r7
 8003884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003888:	4770      	bx	lr
 800388a:	bf00      	nop
 800388c:	2000111c 	.word	0x2000111c
 8003890:	2000151c 	.word	0x2000151c
 8003894:	2000151c 	.word	0x2000151c
 8003898:	e000ef34 	.word	0xe000ef34
 800389c:	20001520 	.word	0x20001520
 80038a0:	20001524 	.word	0x20001524

080038a4 <OSInitHookEnd>:
* Note(s)    : 1) Interrupts should be disabled during this call.
*********************************************************************************************************
*/
#if OS_CPU_HOOKS_EN > 0u
void  OSInitHookEnd (void)
{
 80038a4:	b480      	push	{r7}
 80038a6:	af00      	add	r7, sp, #0

}
 80038a8:	bf00      	nop
 80038aa:	46bd      	mov	sp, r7
 80038ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b0:	4770      	bx	lr

080038b2 <OSTaskCreateHook>:
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
#if OS_CPU_HOOKS_EN > 0u
void  OSTaskCreateHook (OS_TCB *ptcb)
{
 80038b2:	b580      	push	{r7, lr}
 80038b4:	b082      	sub	sp, #8
 80038b6:	af00      	add	r7, sp, #0
 80038b8:	6078      	str	r0, [r7, #4]
#if OS_APP_HOOKS_EN > 0u
    App_TaskCreateHook(ptcb);
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	f7ff ff6b 	bl	8003796 <App_TaskCreateHook>
#else
    (void)ptcb;                                                 /* Prevent compiler warning                             */
#endif
}
 80038c0:	bf00      	nop
 80038c2:	3708      	adds	r7, #8
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}

080038c8 <OSTaskDelHook>:
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
#if OS_CPU_HOOKS_EN > 0u
void  OSTaskDelHook (OS_TCB *ptcb)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b082      	sub	sp, #8
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
#if OS_APP_HOOKS_EN > 0u
    App_TaskDelHook(ptcb);
 80038d0:	6878      	ldr	r0, [r7, #4]
 80038d2:	f7ff ff6a 	bl	80037aa <App_TaskDelHook>
#else
    (void)ptcb;                                                 /* Prevent compiler warning                             */
#endif
}
 80038d6:	bf00      	nop
 80038d8:	3708      	adds	r7, #8
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}

080038de <OSTaskIdleHook>:
* Note(s)    : 1) Interrupts are enabled during this call.
*********************************************************************************************************
*/
#if OS_CPU_HOOKS_EN > 0u
void  OSTaskIdleHook (void)
{
 80038de:	b580      	push	{r7, lr}
 80038e0:	af00      	add	r7, sp, #0
#if OS_APP_HOOKS_EN > 0u
    App_TaskIdleHook();
 80038e2:	f7ff ff6c 	bl	80037be <App_TaskIdleHook>
#endif
}
 80038e6:	bf00      	nop
 80038e8:	bd80      	pop	{r7, pc}

080038ea <OSTaskReturnHook>:
*********************************************************************************************************
*/

#if OS_CPU_HOOKS_EN > 0u
void  OSTaskReturnHook (OS_TCB  *ptcb)
{
 80038ea:	b580      	push	{r7, lr}
 80038ec:	b082      	sub	sp, #8
 80038ee:	af00      	add	r7, sp, #0
 80038f0:	6078      	str	r0, [r7, #4]
#if OS_APP_HOOKS_EN > 0u
    App_TaskReturnHook(ptcb);
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	f7ff ff71 	bl	80037da <App_TaskReturnHook>
#else
    (void)ptcb;
#endif
}
 80038f8:	bf00      	nop
 80038fa:	3708      	adds	r7, #8
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}

08003900 <OSTaskStatHook>:
*********************************************************************************************************
*/

#if OS_CPU_HOOKS_EN > 0u
void  OSTaskStatHook (void)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	af00      	add	r7, sp, #0
#if OS_APP_HOOKS_EN > 0u
    App_TaskStatHook();
 8003904:	f7ff ff62 	bl	80037cc <App_TaskStatHook>
#endif
}
 8003908:	bf00      	nop
 800390a:	bd80      	pop	{r7, pc}

0800390c <OSTaskStkInit>:

OS_STK  *OSTaskStkInit (void    (*task)(void *p_arg),
                        void     *p_arg,
                        OS_STK   *ptos,
                        INT16U    opt)
{
 800390c:	b480      	push	{r7}
 800390e:	b087      	sub	sp, #28
 8003910:	af00      	add	r7, sp, #0
 8003912:	60f8      	str	r0, [r7, #12]
 8003914:	60b9      	str	r1, [r7, #8]
 8003916:	607a      	str	r2, [r7, #4]
 8003918:	807b      	strh	r3, [r7, #2]
    OS_STK  *p_stk;


    (void)opt;                                                  /* 'opt' is not used, prevent warning                   */
    p_stk      = ptos + 1u;                                     /* Load stack pointer                                   */
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	3304      	adds	r3, #4
 800391e:	617b      	str	r3, [r7, #20]
                                                                /* Align the stack to 8-bytes.                          */
    p_stk      = (OS_STK *)((OS_STK)(p_stk) & 0xFFFFFFF8u);
 8003920:	697b      	ldr	r3, [r7, #20]
 8003922:	f023 0307 	bic.w	r3, r3, #7
 8003926:	617b      	str	r3, [r7, #20]
                                                                /* Registers stacked as if auto-saved on exception      */
#if (OS_CPU_ARM_FP_EN > 0u)                                     /* FPU auto-saved registers.                            */
     --p_stk;
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	3b04      	subs	r3, #4
 800392c:	617b      	str	r3, [r7, #20]
    *(--p_stk) = (OS_STK)0x02000000u;                           /* FPSCR                                                */
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	3b04      	subs	r3, #4
 8003932:	617b      	str	r3, [r7, #20]
 8003934:	697b      	ldr	r3, [r7, #20]
 8003936:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800393a:	601a      	str	r2, [r3, #0]
                                                                /* Initialize S0-S15 floating point registers           */
    *(--p_stk) = (OS_STK)0x41700000u;                           /* S15                                                  */
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	3b04      	subs	r3, #4
 8003940:	617b      	str	r3, [r7, #20]
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	4a93      	ldr	r2, [pc, #588]	@ (8003b94 <OSTaskStkInit+0x288>)
 8003946:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x41600000u;                           /* S14                                                  */
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	3b04      	subs	r3, #4
 800394c:	617b      	str	r3, [r7, #20]
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	4a91      	ldr	r2, [pc, #580]	@ (8003b98 <OSTaskStkInit+0x28c>)
 8003952:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x41500000u;                           /* S13                                                  */
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	3b04      	subs	r3, #4
 8003958:	617b      	str	r3, [r7, #20]
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	4a8f      	ldr	r2, [pc, #572]	@ (8003b9c <OSTaskStkInit+0x290>)
 800395e:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x41400000u;                           /* S12                                                  */
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	3b04      	subs	r3, #4
 8003964:	617b      	str	r3, [r7, #20]
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	4a8d      	ldr	r2, [pc, #564]	@ (8003ba0 <OSTaskStkInit+0x294>)
 800396a:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x41300000u;                           /* S11                                                  */
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	3b04      	subs	r3, #4
 8003970:	617b      	str	r3, [r7, #20]
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	4a8b      	ldr	r2, [pc, #556]	@ (8003ba4 <OSTaskStkInit+0x298>)
 8003976:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x41200000u;                           /* S10                                                  */
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	3b04      	subs	r3, #4
 800397c:	617b      	str	r3, [r7, #20]
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	4a89      	ldr	r2, [pc, #548]	@ (8003ba8 <OSTaskStkInit+0x29c>)
 8003982:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x41100000u;                           /* S9                                                   */
 8003984:	697b      	ldr	r3, [r7, #20]
 8003986:	3b04      	subs	r3, #4
 8003988:	617b      	str	r3, [r7, #20]
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	4a87      	ldr	r2, [pc, #540]	@ (8003bac <OSTaskStkInit+0x2a0>)
 800398e:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x41000000u;                           /* S8                                                   */
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	3b04      	subs	r3, #4
 8003994:	617b      	str	r3, [r7, #20]
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	f04f 4282 	mov.w	r2, #1090519040	@ 0x41000000
 800399c:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x40E00000u;                           /* S7                                                   */
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	3b04      	subs	r3, #4
 80039a2:	617b      	str	r3, [r7, #20]
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	4a82      	ldr	r2, [pc, #520]	@ (8003bb0 <OSTaskStkInit+0x2a4>)
 80039a8:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x40C00000u;                           /* S6                                                   */
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	3b04      	subs	r3, #4
 80039ae:	617b      	str	r3, [r7, #20]
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	4a80      	ldr	r2, [pc, #512]	@ (8003bb4 <OSTaskStkInit+0x2a8>)
 80039b4:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x40A00000u;                           /* S5                                                   */
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	3b04      	subs	r3, #4
 80039ba:	617b      	str	r3, [r7, #20]
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	4a7e      	ldr	r2, [pc, #504]	@ (8003bb8 <OSTaskStkInit+0x2ac>)
 80039c0:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x40800000u;                           /* S4                                                   */
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	3b04      	subs	r3, #4
 80039c6:	617b      	str	r3, [r7, #20]
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	f04f 4281 	mov.w	r2, #1082130432	@ 0x40800000
 80039ce:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x40400000u;                           /* S3                                                   */
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	3b04      	subs	r3, #4
 80039d4:	617b      	str	r3, [r7, #20]
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	4a78      	ldr	r2, [pc, #480]	@ (8003bbc <OSTaskStkInit+0x2b0>)
 80039da:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x40000000u;                           /* S2                                                   */
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	3b04      	subs	r3, #4
 80039e0:	617b      	str	r3, [r7, #20]
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80039e8:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x3F800000u;                           /* S1                                                   */
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	3b04      	subs	r3, #4
 80039ee:	617b      	str	r3, [r7, #20]
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80039f6:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x00000000u;                           /* S0                                                   */
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	3b04      	subs	r3, #4
 80039fc:	617b      	str	r3, [r7, #20]
 80039fe:	697b      	ldr	r3, [r7, #20]
 8003a00:	2200      	movs	r2, #0
 8003a02:	601a      	str	r2, [r3, #0]
#endif
    *(--p_stk) = (OS_STK)0x01000000uL;                          /* xPSR                                                 */
 8003a04:	697b      	ldr	r3, [r7, #20]
 8003a06:	3b04      	subs	r3, #4
 8003a08:	617b      	str	r3, [r7, #20]
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003a10:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)task;                                  /* Entry Point                                          */
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	3b04      	subs	r3, #4
 8003a16:	617b      	str	r3, [r7, #20]
 8003a18:	68fa      	ldr	r2, [r7, #12]
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)OS_TaskReturn;                         /* R14 (LR)                                             */
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	3b04      	subs	r3, #4
 8003a22:	617b      	str	r3, [r7, #20]
 8003a24:	4a66      	ldr	r2, [pc, #408]	@ (8003bc0 <OSTaskStkInit+0x2b4>)
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x12121212uL;                          /* R12                                                  */
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	3b04      	subs	r3, #4
 8003a2e:	617b      	str	r3, [r7, #20]
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	f04f 3212 	mov.w	r2, #303174162	@ 0x12121212
 8003a36:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x03030303uL;                          /* R3                                                   */
 8003a38:	697b      	ldr	r3, [r7, #20]
 8003a3a:	3b04      	subs	r3, #4
 8003a3c:	617b      	str	r3, [r7, #20]
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	f04f 3203 	mov.w	r2, #50529027	@ 0x3030303
 8003a44:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x02020202uL;                          /* R2                                                   */
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	3b04      	subs	r3, #4
 8003a4a:	617b      	str	r3, [r7, #20]
 8003a4c:	697b      	ldr	r3, [r7, #20]
 8003a4e:	f04f 3202 	mov.w	r2, #33686018	@ 0x2020202
 8003a52:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x01010101uL;                          /* R1                                                   */
 8003a54:	697b      	ldr	r3, [r7, #20]
 8003a56:	3b04      	subs	r3, #4
 8003a58:	617b      	str	r3, [r7, #20]
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	f04f 3201 	mov.w	r2, #16843009	@ 0x1010101
 8003a60:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)p_arg;                                 /* R0 : argument                                        */
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	3b04      	subs	r3, #4
 8003a66:	617b      	str	r3, [r7, #20]
 8003a68:	68ba      	ldr	r2, [r7, #8]
 8003a6a:	697b      	ldr	r3, [r7, #20]
 8003a6c:	601a      	str	r2, [r3, #0]

#if (OS_CPU_ARM_FP_EN > 0u)
    *(--p_stk) = (OS_STK)0xFFFFFFEDuL;                          /* R14: EXEC_RETURN; See Note 5                         */
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	3b04      	subs	r3, #4
 8003a72:	617b      	str	r3, [r7, #20]
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	f06f 0212 	mvn.w	r2, #18
 8003a7a:	601a      	str	r2, [r3, #0]
#else
    *(--p_stk) = (OS_STK)0xFFFFFFFDuL;                          /* R14: EXEC_RETURN; See Note 5                         */
#endif
                                                                /* Remaining registers saved on process stack           */
    *(--p_stk) = (OS_STK)0x11111111uL;                          /* R11                                                  */
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	3b04      	subs	r3, #4
 8003a80:	617b      	str	r3, [r7, #20]
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	f04f 3211 	mov.w	r2, #286331153	@ 0x11111111
 8003a88:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x10101010uL;                          /* R10                                                  */
 8003a8a:	697b      	ldr	r3, [r7, #20]
 8003a8c:	3b04      	subs	r3, #4
 8003a8e:	617b      	str	r3, [r7, #20]
 8003a90:	697b      	ldr	r3, [r7, #20]
 8003a92:	f04f 3210 	mov.w	r2, #269488144	@ 0x10101010
 8003a96:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x09090909uL;                          /* R9                                                   */
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	3b04      	subs	r3, #4
 8003a9c:	617b      	str	r3, [r7, #20]
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	f04f 3209 	mov.w	r2, #151587081	@ 0x9090909
 8003aa4:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x08080808uL;                          /* R8                                                   */
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	3b04      	subs	r3, #4
 8003aaa:	617b      	str	r3, [r7, #20]
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	f04f 3208 	mov.w	r2, #134744072	@ 0x8080808
 8003ab2:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x07070707uL;                          /* R7                                                   */
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	3b04      	subs	r3, #4
 8003ab8:	617b      	str	r3, [r7, #20]
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	f04f 3207 	mov.w	r2, #117901063	@ 0x7070707
 8003ac0:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x06060606uL;                          /* R6                                                   */
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	3b04      	subs	r3, #4
 8003ac6:	617b      	str	r3, [r7, #20]
 8003ac8:	697b      	ldr	r3, [r7, #20]
 8003aca:	f04f 3206 	mov.w	r2, #101058054	@ 0x6060606
 8003ace:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x05050505uL;                          /* R5                                                   */
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	3b04      	subs	r3, #4
 8003ad4:	617b      	str	r3, [r7, #20]
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	f04f 3205 	mov.w	r2, #84215045	@ 0x5050505
 8003adc:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x04040404uL;                          /* R4                                                   */
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	3b04      	subs	r3, #4
 8003ae2:	617b      	str	r3, [r7, #20]
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	f04f 3204 	mov.w	r2, #67372036	@ 0x4040404
 8003aea:	601a      	str	r2, [r3, #0]

#if (OS_CPU_ARM_FP_EN > 0u)
                                                                /* Initialize S16-S31 floating point registers          */
    *(--p_stk) = (OS_STK)0x41F80000u;                           /* S31                                                  */
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	3b04      	subs	r3, #4
 8003af0:	617b      	str	r3, [r7, #20]
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	4a33      	ldr	r2, [pc, #204]	@ (8003bc4 <OSTaskStkInit+0x2b8>)
 8003af6:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x41F00000u;                           /* S30                                                  */
 8003af8:	697b      	ldr	r3, [r7, #20]
 8003afa:	3b04      	subs	r3, #4
 8003afc:	617b      	str	r3, [r7, #20]
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	4a31      	ldr	r2, [pc, #196]	@ (8003bc8 <OSTaskStkInit+0x2bc>)
 8003b02:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x41E80000u;                           /* S29                                                  */
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	3b04      	subs	r3, #4
 8003b08:	617b      	str	r3, [r7, #20]
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	4a2f      	ldr	r2, [pc, #188]	@ (8003bcc <OSTaskStkInit+0x2c0>)
 8003b0e:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x41E00000u;                           /* S28                                                  */
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	3b04      	subs	r3, #4
 8003b14:	617b      	str	r3, [r7, #20]
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	4a2d      	ldr	r2, [pc, #180]	@ (8003bd0 <OSTaskStkInit+0x2c4>)
 8003b1a:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x41D80000u;                           /* S27                                                  */
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	3b04      	subs	r3, #4
 8003b20:	617b      	str	r3, [r7, #20]
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	4a2b      	ldr	r2, [pc, #172]	@ (8003bd4 <OSTaskStkInit+0x2c8>)
 8003b26:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x41D00000u;                           /* S26                                                  */
 8003b28:	697b      	ldr	r3, [r7, #20]
 8003b2a:	3b04      	subs	r3, #4
 8003b2c:	617b      	str	r3, [r7, #20]
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	4a29      	ldr	r2, [pc, #164]	@ (8003bd8 <OSTaskStkInit+0x2cc>)
 8003b32:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x41C80000u;                           /* S25                                                  */
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	3b04      	subs	r3, #4
 8003b38:	617b      	str	r3, [r7, #20]
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	4a27      	ldr	r2, [pc, #156]	@ (8003bdc <OSTaskStkInit+0x2d0>)
 8003b3e:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x41C00000u;                           /* S24                                                  */
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	3b04      	subs	r3, #4
 8003b44:	617b      	str	r3, [r7, #20]
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	4a25      	ldr	r2, [pc, #148]	@ (8003be0 <OSTaskStkInit+0x2d4>)
 8003b4a:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x41B80000u;                           /* S23                                                  */
 8003b4c:	697b      	ldr	r3, [r7, #20]
 8003b4e:	3b04      	subs	r3, #4
 8003b50:	617b      	str	r3, [r7, #20]
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	4a23      	ldr	r2, [pc, #140]	@ (8003be4 <OSTaskStkInit+0x2d8>)
 8003b56:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x41B00000u;                           /* S22                                                  */
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	3b04      	subs	r3, #4
 8003b5c:	617b      	str	r3, [r7, #20]
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	4a21      	ldr	r2, [pc, #132]	@ (8003be8 <OSTaskStkInit+0x2dc>)
 8003b62:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x41A80000u;                           /* S21                                                  */
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	3b04      	subs	r3, #4
 8003b68:	617b      	str	r3, [r7, #20]
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	4a1f      	ldr	r2, [pc, #124]	@ (8003bec <OSTaskStkInit+0x2e0>)
 8003b6e:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x41A00000u;                           /* S20                                                  */
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	3b04      	subs	r3, #4
 8003b74:	617b      	str	r3, [r7, #20]
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	4a1d      	ldr	r2, [pc, #116]	@ (8003bf0 <OSTaskStkInit+0x2e4>)
 8003b7a:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x41980000u;                           /* S19                                                  */
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	3b04      	subs	r3, #4
 8003b80:	617b      	str	r3, [r7, #20]
 8003b82:	697b      	ldr	r3, [r7, #20]
 8003b84:	4a1b      	ldr	r2, [pc, #108]	@ (8003bf4 <OSTaskStkInit+0x2e8>)
 8003b86:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x41900000u;                           /* S18                                                  */
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	3b04      	subs	r3, #4
 8003b8c:	617b      	str	r3, [r7, #20]
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	e032      	b.n	8003bf8 <OSTaskStkInit+0x2ec>
 8003b92:	bf00      	nop
 8003b94:	41700000 	.word	0x41700000
 8003b98:	41600000 	.word	0x41600000
 8003b9c:	41500000 	.word	0x41500000
 8003ba0:	41400000 	.word	0x41400000
 8003ba4:	41300000 	.word	0x41300000
 8003ba8:	41200000 	.word	0x41200000
 8003bac:	41100000 	.word	0x41100000
 8003bb0:	40e00000 	.word	0x40e00000
 8003bb4:	40c00000 	.word	0x40c00000
 8003bb8:	40a00000 	.word	0x40a00000
 8003bbc:	40400000 	.word	0x40400000
 8003bc0:	080055e1 	.word	0x080055e1
 8003bc4:	41f80000 	.word	0x41f80000
 8003bc8:	41f00000 	.word	0x41f00000
 8003bcc:	41e80000 	.word	0x41e80000
 8003bd0:	41e00000 	.word	0x41e00000
 8003bd4:	41d80000 	.word	0x41d80000
 8003bd8:	41d00000 	.word	0x41d00000
 8003bdc:	41c80000 	.word	0x41c80000
 8003be0:	41c00000 	.word	0x41c00000
 8003be4:	41b80000 	.word	0x41b80000
 8003be8:	41b00000 	.word	0x41b00000
 8003bec:	41a80000 	.word	0x41a80000
 8003bf0:	41a00000 	.word	0x41a00000
 8003bf4:	41980000 	.word	0x41980000
 8003bf8:	4a0a      	ldr	r2, [pc, #40]	@ (8003c24 <OSTaskStkInit+0x318>)
 8003bfa:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x41880000u;                           /* S17                                                  */
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	3b04      	subs	r3, #4
 8003c00:	617b      	str	r3, [r7, #20]
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	4a08      	ldr	r2, [pc, #32]	@ (8003c28 <OSTaskStkInit+0x31c>)
 8003c06:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x41800000u;                           /* S16                                                  */
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	3b04      	subs	r3, #4
 8003c0c:	617b      	str	r3, [r7, #20]
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	f04f 4283 	mov.w	r2, #1098907648	@ 0x41800000
 8003c14:	601a      	str	r2, [r3, #0]
#endif

    return (p_stk);
 8003c16:	697b      	ldr	r3, [r7, #20]
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	371c      	adds	r7, #28
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c22:	4770      	bx	lr
 8003c24:	41900000 	.word	0x41900000
 8003c28:	41880000 	.word	0x41880000

08003c2c <OSTaskSwHook>:
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
#if (OS_CPU_HOOKS_EN > 0u) && (OS_TASK_SW_HOOK_EN > 0u)
void  OSTaskSwHook (void)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	af00      	add	r7, sp, #0

#if (OS_CPU_ARM_FP_EN > 0u)
    OS_CPU_FP_Reg_Push(OSTCBCur->OSTCBStkPtr);                  /* Push the FP registers of the current task.           */
 8003c30:	4b07      	ldr	r3, [pc, #28]	@ (8003c50 <OSTaskSwHook+0x24>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4618      	mov	r0, r3
 8003c38:	f7fc faca 	bl	80001d0 <OS_CPU_FP_Reg_Push>
#endif

#if OS_APP_HOOKS_EN > 0u
    App_TaskSwHook();
 8003c3c:	f7ff fdd7 	bl	80037ee <App_TaskSwHook>
#endif

    OS_TRACE_TASK_SWITCHED_IN(OSTCBHighRdy);

#if (OS_CPU_ARM_FP_EN > 0u)
    OS_CPU_FP_Reg_Pop(OSTCBHighRdy->OSTCBStkPtr);               /* Pop the FP registers of the highest ready task.      */
 8003c40:	4b04      	ldr	r3, [pc, #16]	@ (8003c54 <OSTaskSwHook+0x28>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4618      	mov	r0, r3
 8003c48:	f7fc facb 	bl	80001e2 <OS_CPU_FP_Reg_Pop>
#endif
}
 8003c4c:	bf00      	nop
 8003c4e:	bd80      	pop	{r7, pc}
 8003c50:	20001a9c 	.word	0x20001a9c
 8003c54:	20001aa4 	.word	0x20001aa4

08003c58 <OSTCBInitHook>:
* Note(s)    : 1) Interrupts may or may not be ENABLED during this call.
*********************************************************************************************************
*/
#if OS_CPU_HOOKS_EN > 0u
void  OSTCBInitHook (OS_TCB *ptcb)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b082      	sub	sp, #8
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
#if OS_APP_HOOKS_EN > 0u
    App_TCBInitHook(ptcb);
 8003c60:	6878      	ldr	r0, [r7, #4]
 8003c62:	f7ff fdcb 	bl	80037fc <App_TCBInitHook>
#else
    (void)ptcb;                                                 /* Prevent compiler warning                             */
#endif
}
 8003c66:	bf00      	nop
 8003c68:	3708      	adds	r7, #8
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd80      	pop	{r7, pc}
	...

08003c70 <OSTimeTickHook>:
* Note(s)    : 1) Interrupts may or may not be ENABLED during this call.
*********************************************************************************************************
*/
#if (OS_CPU_HOOKS_EN > 0u) && (OS_TIME_TICK_HOOK_EN > 0u)
void  OSTimeTickHook (void)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	af00      	add	r7, sp, #0
#if OS_APP_HOOKS_EN > 0u
    App_TimeTickHook();
 8003c74:	f7ff fdcc 	bl	8003810 <App_TimeTickHook>
#endif

#if OS_TMR_EN > 0u
    OSTmrCtr++;
 8003c78:	4b08      	ldr	r3, [pc, #32]	@ (8003c9c <OSTimeTickHook+0x2c>)
 8003c7a:	881b      	ldrh	r3, [r3, #0]
 8003c7c:	3301      	adds	r3, #1
 8003c7e:	b29a      	uxth	r2, r3
 8003c80:	4b06      	ldr	r3, [pc, #24]	@ (8003c9c <OSTimeTickHook+0x2c>)
 8003c82:	801a      	strh	r2, [r3, #0]
    if (OSTmrCtr >= (OS_TICKS_PER_SEC / OS_TMR_CFG_TICKS_PER_SEC)) {
 8003c84:	4b05      	ldr	r3, [pc, #20]	@ (8003c9c <OSTimeTickHook+0x2c>)
 8003c86:	881b      	ldrh	r3, [r3, #0]
 8003c88:	2b09      	cmp	r3, #9
 8003c8a:	d904      	bls.n	8003c96 <OSTimeTickHook+0x26>
        OSTmrCtr = 0u;
 8003c8c:	4b03      	ldr	r3, [pc, #12]	@ (8003c9c <OSTimeTickHook+0x2c>)
 8003c8e:	2200      	movs	r2, #0
 8003c90:	801a      	strh	r2, [r3, #0]
        OSTmrSignal();
 8003c92:	f001 fda5 	bl	80057e0 <OSTmrSignal>
    }
#endif
}
 8003c96:	bf00      	nop
 8003c98:	bd80      	pop	{r7, pc}
 8003c9a:	bf00      	nop
 8003c9c:	20001520 	.word	0x20001520

08003ca0 <OS_CPU_SysTickHandler>:
* Note(s)    : 1) This function MUST be placed on entry 15 of the Cortex-M vector table.
*********************************************************************************************************
*/

void  OS_CPU_SysTickHandler (void)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b082      	sub	sp, #8
 8003ca4:	af00      	add	r7, sp, #0
#if OS_CRITICAL_METHOD == 3u                                    /* Allocate storage for CPU status register             */
    OS_CPU_SR  cpu_sr;
#endif


    OS_ENTER_CRITICAL();
 8003ca6:	2040      	movs	r0, #64	@ 0x40
 8003ca8:	f7fc faa1 	bl	80001ee <OS_CPU_SR_Save>
 8003cac:	6078      	str	r0, [r7, #4]
    OSIntEnter();                                               /* Tell uC/OS-II that we are starting an ISR            */
 8003cae:	f000 f951 	bl	8003f54 <OSIntEnter>
    OS_EXIT_CRITICAL();
 8003cb2:	6878      	ldr	r0, [r7, #4]
 8003cb4:	f7fc faa9 	bl	800020a <OS_CPU_SR_Restore>

    OSTimeTick();                                               /* Call uC/OS-II's OSTimeTick()                         */
 8003cb8:	f000 fa42 	bl	8004140 <OSTimeTick>

    OSIntExit();                                                /* Tell uC/OS-II that we are leaving the ISR            */
 8003cbc:	f000 f964 	bl	8003f88 <OSIntExit>
}
 8003cc0:	bf00      	nop
 8003cc2:	3708      	adds	r7, #8
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bd80      	pop	{r7, pc}

08003cc8 <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0u
void  OSDebugInit (void)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b083      	sub	sp, #12
 8003ccc:	af00      	add	r7, sp, #0
    void  *ptemp;


    ptemp = (void *)&OSDebugEn;
 8003cce:	4b3c      	ldr	r3, [pc, #240]	@ (8003dc0 <OSDebugInit+0xf8>)
 8003cd0:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSEndiannessTest;
 8003cd2:	4b3c      	ldr	r3, [pc, #240]	@ (8003dc4 <OSDebugInit+0xfc>)
 8003cd4:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSEventMax;
 8003cd6:	4b3c      	ldr	r3, [pc, #240]	@ (8003dc8 <OSDebugInit+0x100>)
 8003cd8:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSEventNameEn;
 8003cda:	4b3c      	ldr	r3, [pc, #240]	@ (8003dcc <OSDebugInit+0x104>)
 8003cdc:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSEventEn;
 8003cde:	4b3c      	ldr	r3, [pc, #240]	@ (8003dd0 <OSDebugInit+0x108>)
 8003ce0:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSEventSize;
 8003ce2:	4b3c      	ldr	r3, [pc, #240]	@ (8003dd4 <OSDebugInit+0x10c>)
 8003ce4:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSEventTblSize;
 8003ce6:	4b3c      	ldr	r3, [pc, #240]	@ (8003dd8 <OSDebugInit+0x110>)
 8003ce8:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSEventMultiEn;
 8003cea:	4b3c      	ldr	r3, [pc, #240]	@ (8003ddc <OSDebugInit+0x114>)
 8003cec:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSFlagEn;
 8003cee:	4b3c      	ldr	r3, [pc, #240]	@ (8003de0 <OSDebugInit+0x118>)
 8003cf0:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSFlagGrpSize;
 8003cf2:	4b3c      	ldr	r3, [pc, #240]	@ (8003de4 <OSDebugInit+0x11c>)
 8003cf4:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSFlagNodeSize;
 8003cf6:	4b3c      	ldr	r3, [pc, #240]	@ (8003de8 <OSDebugInit+0x120>)
 8003cf8:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSFlagWidth;
 8003cfa:	4b3c      	ldr	r3, [pc, #240]	@ (8003dec <OSDebugInit+0x124>)
 8003cfc:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSFlagMax;
 8003cfe:	4b3c      	ldr	r3, [pc, #240]	@ (8003df0 <OSDebugInit+0x128>)
 8003d00:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSFlagNameEn;
 8003d02:	4b3c      	ldr	r3, [pc, #240]	@ (8003df4 <OSDebugInit+0x12c>)
 8003d04:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSLowestPrio;
 8003d06:	4b3c      	ldr	r3, [pc, #240]	@ (8003df8 <OSDebugInit+0x130>)
 8003d08:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSMboxEn;
 8003d0a:	4b3c      	ldr	r3, [pc, #240]	@ (8003dfc <OSDebugInit+0x134>)
 8003d0c:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSMemEn;
 8003d0e:	4b3c      	ldr	r3, [pc, #240]	@ (8003e00 <OSDebugInit+0x138>)
 8003d10:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSMemMax;
 8003d12:	4b3c      	ldr	r3, [pc, #240]	@ (8003e04 <OSDebugInit+0x13c>)
 8003d14:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSMemNameEn;
 8003d16:	4b3c      	ldr	r3, [pc, #240]	@ (8003e08 <OSDebugInit+0x140>)
 8003d18:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSMemSize;
 8003d1a:	4b3c      	ldr	r3, [pc, #240]	@ (8003e0c <OSDebugInit+0x144>)
 8003d1c:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSMemTblSize;
 8003d1e:	4b3c      	ldr	r3, [pc, #240]	@ (8003e10 <OSDebugInit+0x148>)
 8003d20:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSMutexEn;
 8003d22:	4b3c      	ldr	r3, [pc, #240]	@ (8003e14 <OSDebugInit+0x14c>)
 8003d24:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSPtrSize;
 8003d26:	4b3c      	ldr	r3, [pc, #240]	@ (8003e18 <OSDebugInit+0x150>)
 8003d28:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSQEn;
 8003d2a:	4b3c      	ldr	r3, [pc, #240]	@ (8003e1c <OSDebugInit+0x154>)
 8003d2c:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSQMax;
 8003d2e:	4b3c      	ldr	r3, [pc, #240]	@ (8003e20 <OSDebugInit+0x158>)
 8003d30:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSQSize;
 8003d32:	4b3c      	ldr	r3, [pc, #240]	@ (8003e24 <OSDebugInit+0x15c>)
 8003d34:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSRdyTblSize;
 8003d36:	4b3c      	ldr	r3, [pc, #240]	@ (8003e28 <OSDebugInit+0x160>)
 8003d38:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSSemEn;
 8003d3a:	4b3c      	ldr	r3, [pc, #240]	@ (8003e2c <OSDebugInit+0x164>)
 8003d3c:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSStkWidth;
 8003d3e:	4b3c      	ldr	r3, [pc, #240]	@ (8003e30 <OSDebugInit+0x168>)
 8003d40:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSTaskCreateEn;
 8003d42:	4b3c      	ldr	r3, [pc, #240]	@ (8003e34 <OSDebugInit+0x16c>)
 8003d44:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTaskCreateExtEn;
 8003d46:	4b3c      	ldr	r3, [pc, #240]	@ (8003e38 <OSDebugInit+0x170>)
 8003d48:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTaskDelEn;
 8003d4a:	4b3c      	ldr	r3, [pc, #240]	@ (8003e3c <OSDebugInit+0x174>)
 8003d4c:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTaskIdleStkSize;
 8003d4e:	4b3c      	ldr	r3, [pc, #240]	@ (8003e40 <OSDebugInit+0x178>)
 8003d50:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTaskProfileEn;
 8003d52:	4b3c      	ldr	r3, [pc, #240]	@ (8003e44 <OSDebugInit+0x17c>)
 8003d54:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTaskMax;
 8003d56:	4b3c      	ldr	r3, [pc, #240]	@ (8003e48 <OSDebugInit+0x180>)
 8003d58:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTaskNameEn;
 8003d5a:	4b3c      	ldr	r3, [pc, #240]	@ (8003e4c <OSDebugInit+0x184>)
 8003d5c:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTaskStatEn;
 8003d5e:	4b3c      	ldr	r3, [pc, #240]	@ (8003e50 <OSDebugInit+0x188>)
 8003d60:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTaskStatStkSize;
 8003d62:	4b3c      	ldr	r3, [pc, #240]	@ (8003e54 <OSDebugInit+0x18c>)
 8003d64:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTaskStatStkChkEn;
 8003d66:	4b3c      	ldr	r3, [pc, #240]	@ (8003e58 <OSDebugInit+0x190>)
 8003d68:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTaskSwHookEn;
 8003d6a:	4b3c      	ldr	r3, [pc, #240]	@ (8003e5c <OSDebugInit+0x194>)
 8003d6c:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSTCBPrioTblMax;
 8003d6e:	4b3c      	ldr	r3, [pc, #240]	@ (8003e60 <OSDebugInit+0x198>)
 8003d70:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTCBSize;
 8003d72:	4b3c      	ldr	r3, [pc, #240]	@ (8003e64 <OSDebugInit+0x19c>)
 8003d74:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSTicksPerSec;
 8003d76:	4b3c      	ldr	r3, [pc, #240]	@ (8003e68 <OSDebugInit+0x1a0>)
 8003d78:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTimeTickHookEn;
 8003d7a:	4b3c      	ldr	r3, [pc, #240]	@ (8003e6c <OSDebugInit+0x1a4>)
 8003d7c:	607b      	str	r3, [r7, #4]

#if OS_TMR_EN > 0u
    ptemp = (void *)&OSTmrTbl[0];
 8003d7e:	4b3c      	ldr	r3, [pc, #240]	@ (8003e70 <OSDebugInit+0x1a8>)
 8003d80:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTmrWheelTbl[0];
 8003d82:	4b3c      	ldr	r3, [pc, #240]	@ (8003e74 <OSDebugInit+0x1ac>)
 8003d84:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSTmrEn;
 8003d86:	4b3c      	ldr	r3, [pc, #240]	@ (8003e78 <OSDebugInit+0x1b0>)
 8003d88:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTmrCfgMax;
 8003d8a:	4b3c      	ldr	r3, [pc, #240]	@ (8003e7c <OSDebugInit+0x1b4>)
 8003d8c:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTmrCfgNameEn;
 8003d8e:	4b3c      	ldr	r3, [pc, #240]	@ (8003e80 <OSDebugInit+0x1b8>)
 8003d90:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTmrCfgWheelSize;
 8003d92:	4b3c      	ldr	r3, [pc, #240]	@ (8003e84 <OSDebugInit+0x1bc>)
 8003d94:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTmrCfgTicksPerSec;
 8003d96:	4b3c      	ldr	r3, [pc, #240]	@ (8003e88 <OSDebugInit+0x1c0>)
 8003d98:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTmrSize;
 8003d9a:	4b3c      	ldr	r3, [pc, #240]	@ (8003e8c <OSDebugInit+0x1c4>)
 8003d9c:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTmrTblSize;
 8003d9e:	4b3c      	ldr	r3, [pc, #240]	@ (8003e90 <OSDebugInit+0x1c8>)
 8003da0:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSTmrWheelSize;
 8003da2:	4b3c      	ldr	r3, [pc, #240]	@ (8003e94 <OSDebugInit+0x1cc>)
 8003da4:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTmrWheelTblSize;
 8003da6:	4b3c      	ldr	r3, [pc, #240]	@ (8003e98 <OSDebugInit+0x1d0>)
 8003da8:	607b      	str	r3, [r7, #4]
#endif

    ptemp = (void *)&OSVersionNbr;
 8003daa:	4b3c      	ldr	r3, [pc, #240]	@ (8003e9c <OSDebugInit+0x1d4>)
 8003dac:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSDataSize;
 8003dae:	4b3c      	ldr	r3, [pc, #240]	@ (8003ea0 <OSDebugInit+0x1d8>)
 8003db0:	607b      	str	r3, [r7, #4]

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
 8003db2:	bf00      	nop
 8003db4:	370c      	adds	r7, #12
 8003db6:	46bd      	mov	sp, r7
 8003db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbc:	4770      	bx	lr
 8003dbe:	bf00      	nop
 8003dc0:	08006d3c 	.word	0x08006d3c
 8003dc4:	08006d40 	.word	0x08006d40
 8003dc8:	08006d46 	.word	0x08006d46
 8003dcc:	08006d48 	.word	0x08006d48
 8003dd0:	08006d44 	.word	0x08006d44
 8003dd4:	08006d4a 	.word	0x08006d4a
 8003dd8:	08006d4c 	.word	0x08006d4c
 8003ddc:	08006d4e 	.word	0x08006d4e
 8003de0:	08006d50 	.word	0x08006d50
 8003de4:	08006d52 	.word	0x08006d52
 8003de8:	08006d54 	.word	0x08006d54
 8003dec:	08006d56 	.word	0x08006d56
 8003df0:	08006d58 	.word	0x08006d58
 8003df4:	08006d5a 	.word	0x08006d5a
 8003df8:	08006d5c 	.word	0x08006d5c
 8003dfc:	08006d5e 	.word	0x08006d5e
 8003e00:	08006d60 	.word	0x08006d60
 8003e04:	08006d62 	.word	0x08006d62
 8003e08:	08006d64 	.word	0x08006d64
 8003e0c:	08006d66 	.word	0x08006d66
 8003e10:	08006d68 	.word	0x08006d68
 8003e14:	08006d6a 	.word	0x08006d6a
 8003e18:	08006d6c 	.word	0x08006d6c
 8003e1c:	08006d6e 	.word	0x08006d6e
 8003e20:	08006d70 	.word	0x08006d70
 8003e24:	08006d72 	.word	0x08006d72
 8003e28:	08006d74 	.word	0x08006d74
 8003e2c:	08006d76 	.word	0x08006d76
 8003e30:	08006d78 	.word	0x08006d78
 8003e34:	08006d7a 	.word	0x08006d7a
 8003e38:	08006d7c 	.word	0x08006d7c
 8003e3c:	08006d7e 	.word	0x08006d7e
 8003e40:	08006d80 	.word	0x08006d80
 8003e44:	08006d82 	.word	0x08006d82
 8003e48:	08006d84 	.word	0x08006d84
 8003e4c:	08006d86 	.word	0x08006d86
 8003e50:	08006d88 	.word	0x08006d88
 8003e54:	08006d8a 	.word	0x08006d8a
 8003e58:	08006d8c 	.word	0x08006d8c
 8003e5c:	08006d8e 	.word	0x08006d8e
 8003e60:	08006d90 	.word	0x08006d90
 8003e64:	08006d92 	.word	0x08006d92
 8003e68:	08006d94 	.word	0x08006d94
 8003e6c:	08006d96 	.word	0x08006d96
 8003e70:	20002490 	.word	0x20002490
 8003e74:	20002914 	.word	0x20002914
 8003e78:	08006d9a 	.word	0x08006d9a
 8003e7c:	08006d9c 	.word	0x08006d9c
 8003e80:	08006d9e 	.word	0x08006d9e
 8003e84:	08006da0 	.word	0x08006da0
 8003e88:	08006da2 	.word	0x08006da2
 8003e8c:	08006da4 	.word	0x08006da4
 8003e90:	08006da6 	.word	0x08006da6
 8003e94:	08006da8 	.word	0x08006da8
 8003e98:	08006daa 	.word	0x08006daa
 8003e9c:	08006d98 	.word	0x08006d98
 8003ea0:	08006dac 	.word	0x08006dac

08003ea4 <OSEventNameSet>:

#if (OS_EVENT_EN) && (OS_EVENT_NAME_EN > 0u)
void  OSEventNameSet (OS_EVENT  *pevent,
                      INT8U     *pname,
                      INT8U     *perr)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b086      	sub	sp, #24
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	60f8      	str	r0, [r7, #12]
 8003eac:	60b9      	str	r1, [r7, #8]
 8003eae:	607a      	str	r2, [r7, #4]
#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0u;
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	617b      	str	r3, [r7, #20]
        return;
    }
#endif

#if OS_ARG_CHK_EN > 0u
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d103      	bne.n	8003ec2 <OSEventNameSet+0x1e>
        *perr = OS_ERR_PEVENT_NULL;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2204      	movs	r2, #4
 8003ebe:	701a      	strb	r2, [r3, #0]
        return;
 8003ec0:	e025      	b.n	8003f0e <OSEventNameSet+0x6a>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d103      	bne.n	8003ed0 <OSEventNameSet+0x2c>
        *perr = OS_ERR_PNAME_NULL;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	220c      	movs	r2, #12
 8003ecc:	701a      	strb	r2, [r3, #0]
        return;
 8003ece:	e01e      	b.n	8003f0e <OSEventNameSet+0x6a>
    }
#endif
    if (OSIntNesting > 0u) {                     /* See if trying to call from an ISR                  */
 8003ed0:	4b10      	ldr	r3, [pc, #64]	@ (8003f14 <OSEventNameSet+0x70>)
 8003ed2:	781b      	ldrb	r3, [r3, #0]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d003      	beq.n	8003ee0 <OSEventNameSet+0x3c>
        *perr = OS_ERR_NAME_SET_ISR;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2212      	movs	r2, #18
 8003edc:	701a      	strb	r2, [r3, #0]
        return;
 8003ede:	e016      	b.n	8003f0e <OSEventNameSet+0x6a>
    }
    switch (pevent->OSEventType) {
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	781b      	ldrb	r3, [r3, #0]
 8003ee4:	3b01      	subs	r3, #1
 8003ee6:	2b03      	cmp	r3, #3
 8003ee8:	d903      	bls.n	8003ef2 <OSEventNameSet+0x4e>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2201      	movs	r2, #1
 8003eee:	701a      	strb	r2, [r3, #0]
             return;
 8003ef0:	e00d      	b.n	8003f0e <OSEventNameSet+0x6a>
             break;
 8003ef2:	bf00      	nop
    }
    OS_ENTER_CRITICAL();
 8003ef4:	2040      	movs	r0, #64	@ 0x40
 8003ef6:	f7fc f97a 	bl	80001ee <OS_CPU_SR_Save>
 8003efa:	6178      	str	r0, [r7, #20]
    pevent->OSEventName = pname;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	68ba      	ldr	r2, [r7, #8]
 8003f00:	615a      	str	r2, [r3, #20]
    OS_EXIT_CRITICAL();
 8003f02:	6978      	ldr	r0, [r7, #20]
 8003f04:	f7fc f981 	bl	800020a <OS_CPU_SR_Restore>
    OS_TRACE_EVENT_NAME_SET(pevent, pname);
    *perr = OS_ERR_NONE;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	701a      	strb	r2, [r3, #0]
}
 8003f0e:	3718      	adds	r7, #24
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bd80      	pop	{r7, pc}
 8003f14:	20001884 	.word	0x20001884

08003f18 <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	af00      	add	r7, sp, #0
#if defined(OS_TLS_TBL_SIZE) && (OS_TLS_TBL_SIZE > 0u)
    INT8U  err;
#endif
#endif

    OSInitHookBegin();                                           /* Call port specific initialization code   */
 8003f1c:	f7ff fc80 	bl	8003820 <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
 8003f20:	f000 fb64 	bl	80045ec <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
 8003f24:	f000 fba0 	bl	8004668 <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
 8003f28:	f000 fc1c 	bl	8004764 <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
 8003f2c:	f000 fb14 	bl	8004558 <OS_InitEventList>

#if (OS_FLAG_EN > 0u) && (OS_MAX_FLAGS > 0u)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
 8003f30:	f000 fea0 	bl	8004c74 <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0u) && (OS_MAX_MEM_PART > 0u)
    OS_MemInit();                                                /* Initialize the memory manager            */
 8003f34:	f000 ff10 	bl	8004d58 <OS_MemInit>
#endif

#if (OS_Q_EN > 0u) && (OS_MAX_QS > 0u)
    OS_QInit();                                                  /* Initialize the message queue structures  */
 8003f38:	f000 ff4e 	bl	8004dd8 <OS_QInit>
        return;
    }
#endif
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
 8003f3c:	f000 fbc6 	bl	80046cc <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0u
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
 8003f40:	f000 fbea 	bl	8004718 <OS_InitTaskStat>
#endif

#if OS_TMR_EN > 0u
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
 8003f44:	f001 fc5e 	bl	8005804 <OSTmr_Init>
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
 8003f48:	f7ff fcac 	bl	80038a4 <OSInitHookEnd>

#if OS_DEBUG_EN > 0u
    OSDebugInit();
 8003f4c:	f7ff febc 	bl	8003cc8 <OSDebugInit>
#endif
}
 8003f50:	bf00      	nop
 8003f52:	bd80      	pop	{r7, pc}

08003f54 <OSIntEnter>:
*                 OSIntEnter() is always called with interrupts disabled.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
 8003f54:	b480      	push	{r7}
 8003f56:	af00      	add	r7, sp, #0
    if (OSRunning == OS_TRUE) {
 8003f58:	4b09      	ldr	r3, [pc, #36]	@ (8003f80 <OSIntEnter+0x2c>)
 8003f5a:	781b      	ldrb	r3, [r3, #0]
 8003f5c:	2b01      	cmp	r3, #1
 8003f5e:	d109      	bne.n	8003f74 <OSIntEnter+0x20>
        if (OSIntNesting < 255u) {
 8003f60:	4b08      	ldr	r3, [pc, #32]	@ (8003f84 <OSIntEnter+0x30>)
 8003f62:	781b      	ldrb	r3, [r3, #0]
 8003f64:	2bff      	cmp	r3, #255	@ 0xff
 8003f66:	d005      	beq.n	8003f74 <OSIntEnter+0x20>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
 8003f68:	4b06      	ldr	r3, [pc, #24]	@ (8003f84 <OSIntEnter+0x30>)
 8003f6a:	781b      	ldrb	r3, [r3, #0]
 8003f6c:	3301      	adds	r3, #1
 8003f6e:	b2da      	uxtb	r2, r3
 8003f70:	4b04      	ldr	r3, [pc, #16]	@ (8003f84 <OSIntEnter+0x30>)
 8003f72:	701a      	strb	r2, [r3, #0]
        }
        OS_TRACE_ISR_ENTER();
    }
}
 8003f74:	bf00      	nop
 8003f76:	46bd      	mov	sp, r7
 8003f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7c:	4770      	bx	lr
 8003f7e:	bf00      	nop
 8003f80:	20001894 	.word	0x20001894
 8003f84:	20001884 	.word	0x20001884

08003f88 <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b082      	sub	sp, #8
 8003f8c:	af00      	add	r7, sp, #0
#if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0u;
 8003f8e:	2300      	movs	r3, #0
 8003f90:	607b      	str	r3, [r7, #4]
#endif



    if (OSRunning == OS_TRUE) {
 8003f92:	4b1e      	ldr	r3, [pc, #120]	@ (800400c <OSIntExit+0x84>)
 8003f94:	781b      	ldrb	r3, [r3, #0]
 8003f96:	2b01      	cmp	r3, #1
 8003f98:	d134      	bne.n	8004004 <OSIntExit+0x7c>
        OS_ENTER_CRITICAL();
 8003f9a:	2040      	movs	r0, #64	@ 0x40
 8003f9c:	f7fc f927 	bl	80001ee <OS_CPU_SR_Save>
 8003fa0:	6078      	str	r0, [r7, #4]
        if (OSIntNesting > 0u) {                           /* Prevent OSIntNesting from wrapping       */
 8003fa2:	4b1b      	ldr	r3, [pc, #108]	@ (8004010 <OSIntExit+0x88>)
 8003fa4:	781b      	ldrb	r3, [r3, #0]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d005      	beq.n	8003fb6 <OSIntExit+0x2e>
            OSIntNesting--;
 8003faa:	4b19      	ldr	r3, [pc, #100]	@ (8004010 <OSIntExit+0x88>)
 8003fac:	781b      	ldrb	r3, [r3, #0]
 8003fae:	3b01      	subs	r3, #1
 8003fb0:	b2da      	uxtb	r2, r3
 8003fb2:	4b17      	ldr	r3, [pc, #92]	@ (8004010 <OSIntExit+0x88>)
 8003fb4:	701a      	strb	r2, [r3, #0]
        }
        if (OSIntNesting == 0u) {                          /* Reschedule only if all ISRs complete ... */
 8003fb6:	4b16      	ldr	r3, [pc, #88]	@ (8004010 <OSIntExit+0x88>)
 8003fb8:	781b      	ldrb	r3, [r3, #0]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d11f      	bne.n	8003ffe <OSIntExit+0x76>
            if (OSLockNesting == 0u) {                     /* ... and not locked.                      */
 8003fbe:	4b15      	ldr	r3, [pc, #84]	@ (8004014 <OSIntExit+0x8c>)
 8003fc0:	781b      	ldrb	r3, [r3, #0]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d11b      	bne.n	8003ffe <OSIntExit+0x76>
                OS_SchedNew();
 8003fc6:	f000 fc77 	bl	80048b8 <OS_SchedNew>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
 8003fca:	4b13      	ldr	r3, [pc, #76]	@ (8004018 <OSIntExit+0x90>)
 8003fcc:	781b      	ldrb	r3, [r3, #0]
 8003fce:	461a      	mov	r2, r3
 8003fd0:	4b12      	ldr	r3, [pc, #72]	@ (800401c <OSIntExit+0x94>)
 8003fd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003fd6:	4a12      	ldr	r2, [pc, #72]	@ (8004020 <OSIntExit+0x98>)
 8003fd8:	6013      	str	r3, [r2, #0]
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
 8003fda:	4b0f      	ldr	r3, [pc, #60]	@ (8004018 <OSIntExit+0x90>)
 8003fdc:	781a      	ldrb	r2, [r3, #0]
 8003fde:	4b11      	ldr	r3, [pc, #68]	@ (8004024 <OSIntExit+0x9c>)
 8003fe0:	781b      	ldrb	r3, [r3, #0]
 8003fe2:	429a      	cmp	r2, r3
 8003fe4:	d00b      	beq.n	8003ffe <OSIntExit+0x76>
#if OS_TASK_PROFILE_EN > 0u
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
 8003fe6:	4b0e      	ldr	r3, [pc, #56]	@ (8004020 <OSIntExit+0x98>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003fec:	3201      	adds	r2, #1
 8003fee:	641a      	str	r2, [r3, #64]	@ 0x40
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
 8003ff0:	4b0d      	ldr	r3, [pc, #52]	@ (8004028 <OSIntExit+0xa0>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	3301      	adds	r3, #1
 8003ff6:	4a0c      	ldr	r2, [pc, #48]	@ (8004028 <OSIntExit+0xa0>)
 8003ff8:	6013      	str	r3, [r2, #0]
                    OS_TLS_TaskSw();
#endif
#endif
                    OS_TRACE_ISR_EXIT_TO_SCHEDULER();

                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
 8003ffa:	f7fc f94f 	bl	800029c <OSCtxSw>
            }
        } else {
            OS_TRACE_ISR_EXIT();
        }

        OS_EXIT_CRITICAL();
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	f7fc f903 	bl	800020a <OS_CPU_SR_Restore>
    }
}
 8004004:	bf00      	nop
 8004006:	3708      	adds	r7, #8
 8004008:	46bd      	mov	sp, r7
 800400a:	bd80      	pop	{r7, pc}
 800400c:	20001894 	.word	0x20001894
 8004010:	20001884 	.word	0x20001884
 8004014:	20001885 	.word	0x20001885
 8004018:	20001887 	.word	0x20001887
 800401c:	20001aac 	.word	0x20001aac
 8004020:	20001aa4 	.word	0x20001aa4
 8004024:	20001886 	.word	0x20001886
 8004028:	20001528 	.word	0x20001528

0800402c <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0u
void  OSSchedLock (void)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b082      	sub	sp, #8
 8004030:	af00      	add	r7, sp, #0
#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0u;
 8004032:	2300      	movs	r3, #0
 8004034:	607b      	str	r3, [r7, #4]
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
 8004036:	4b0e      	ldr	r3, [pc, #56]	@ (8004070 <OSSchedLock+0x44>)
 8004038:	781b      	ldrb	r3, [r3, #0]
 800403a:	2b01      	cmp	r3, #1
 800403c:	d114      	bne.n	8004068 <OSSchedLock+0x3c>
        OS_ENTER_CRITICAL();
 800403e:	2040      	movs	r0, #64	@ 0x40
 8004040:	f7fc f8d5 	bl	80001ee <OS_CPU_SR_Save>
 8004044:	6078      	str	r0, [r7, #4]
        if (OSIntNesting == 0u) {                /* Can't call from an ISR                             */
 8004046:	4b0b      	ldr	r3, [pc, #44]	@ (8004074 <OSSchedLock+0x48>)
 8004048:	781b      	ldrb	r3, [r3, #0]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d109      	bne.n	8004062 <OSSchedLock+0x36>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
 800404e:	4b0a      	ldr	r3, [pc, #40]	@ (8004078 <OSSchedLock+0x4c>)
 8004050:	781b      	ldrb	r3, [r3, #0]
 8004052:	2bff      	cmp	r3, #255	@ 0xff
 8004054:	d005      	beq.n	8004062 <OSSchedLock+0x36>
                OSLockNesting++;                 /* Increment lock nesting level                       */
 8004056:	4b08      	ldr	r3, [pc, #32]	@ (8004078 <OSSchedLock+0x4c>)
 8004058:	781b      	ldrb	r3, [r3, #0]
 800405a:	3301      	adds	r3, #1
 800405c:	b2da      	uxtb	r2, r3
 800405e:	4b06      	ldr	r3, [pc, #24]	@ (8004078 <OSSchedLock+0x4c>)
 8004060:	701a      	strb	r2, [r3, #0]
            }
        }
        OS_EXIT_CRITICAL();
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	f7fc f8d1 	bl	800020a <OS_CPU_SR_Restore>
    }
}
 8004068:	bf00      	nop
 800406a:	3708      	adds	r7, #8
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}
 8004070:	20001894 	.word	0x20001894
 8004074:	20001884 	.word	0x20001884
 8004078:	20001885 	.word	0x20001885

0800407c <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0u
void  OSSchedUnlock (void)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b082      	sub	sp, #8
 8004080:	af00      	add	r7, sp, #0
#if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0u;
 8004082:	2300      	movs	r3, #0
 8004084:	607b      	str	r3, [r7, #4]
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
 8004086:	4b17      	ldr	r3, [pc, #92]	@ (80040e4 <OSSchedUnlock+0x68>)
 8004088:	781b      	ldrb	r3, [r3, #0]
 800408a:	2b01      	cmp	r3, #1
 800408c:	d126      	bne.n	80040dc <OSSchedUnlock+0x60>
        OS_ENTER_CRITICAL();
 800408e:	2040      	movs	r0, #64	@ 0x40
 8004090:	f7fc f8ad 	bl	80001ee <OS_CPU_SR_Save>
 8004094:	6078      	str	r0, [r7, #4]
        if (OSIntNesting == 0u) {                          /* Can't call from an ISR                   */
 8004096:	4b14      	ldr	r3, [pc, #80]	@ (80040e8 <OSSchedUnlock+0x6c>)
 8004098:	781b      	ldrb	r3, [r3, #0]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d11b      	bne.n	80040d6 <OSSchedUnlock+0x5a>
            if (OSLockNesting > 0u) {                      /* Do not decrement if already 0            */
 800409e:	4b13      	ldr	r3, [pc, #76]	@ (80040ec <OSSchedUnlock+0x70>)
 80040a0:	781b      	ldrb	r3, [r3, #0]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d013      	beq.n	80040ce <OSSchedUnlock+0x52>
                OSLockNesting--;                           /* Decrement lock nesting level             */
 80040a6:	4b11      	ldr	r3, [pc, #68]	@ (80040ec <OSSchedUnlock+0x70>)
 80040a8:	781b      	ldrb	r3, [r3, #0]
 80040aa:	3b01      	subs	r3, #1
 80040ac:	b2da      	uxtb	r2, r3
 80040ae:	4b0f      	ldr	r3, [pc, #60]	@ (80040ec <OSSchedUnlock+0x70>)
 80040b0:	701a      	strb	r2, [r3, #0]
                if (OSLockNesting == 0u) {                 /* See if scheduler is enabled              */
 80040b2:	4b0e      	ldr	r3, [pc, #56]	@ (80040ec <OSSchedUnlock+0x70>)
 80040b4:	781b      	ldrb	r3, [r3, #0]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d105      	bne.n	80040c6 <OSSchedUnlock+0x4a>
                    OS_EXIT_CRITICAL();
 80040ba:	6878      	ldr	r0, [r7, #4]
 80040bc:	f7fc f8a5 	bl	800020a <OS_CPU_SR_Restore>
                    OS_Sched();                            /* See if a HPT is ready                    */
 80040c0:	f000 fbb8 	bl	8004834 <OS_Sched>
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
 80040c4:	e00a      	b.n	80040dc <OSSchedUnlock+0x60>
                    OS_EXIT_CRITICAL();
 80040c6:	6878      	ldr	r0, [r7, #4]
 80040c8:	f7fc f89f 	bl	800020a <OS_CPU_SR_Restore>
}
 80040cc:	e006      	b.n	80040dc <OSSchedUnlock+0x60>
                OS_EXIT_CRITICAL();
 80040ce:	6878      	ldr	r0, [r7, #4]
 80040d0:	f7fc f89b 	bl	800020a <OS_CPU_SR_Restore>
}
 80040d4:	e002      	b.n	80040dc <OSSchedUnlock+0x60>
            OS_EXIT_CRITICAL();
 80040d6:	6878      	ldr	r0, [r7, #4]
 80040d8:	f7fc f897 	bl	800020a <OS_CPU_SR_Restore>
}
 80040dc:	bf00      	nop
 80040de:	3708      	adds	r7, #8
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bd80      	pop	{r7, pc}
 80040e4:	20001894 	.word	0x20001894
 80040e8:	20001884 	.word	0x20001884
 80040ec:	20001885 	.word	0x20001885

080040f0 <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	af00      	add	r7, sp, #0
    if (OSRunning == OS_FALSE) {
 80040f4:	4b0c      	ldr	r3, [pc, #48]	@ (8004128 <OSStart+0x38>)
 80040f6:	781b      	ldrb	r3, [r3, #0]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d113      	bne.n	8004124 <OSStart+0x34>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
 80040fc:	f000 fbdc 	bl	80048b8 <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
 8004100:	4b0a      	ldr	r3, [pc, #40]	@ (800412c <OSStart+0x3c>)
 8004102:	781a      	ldrb	r2, [r3, #0]
 8004104:	4b0a      	ldr	r3, [pc, #40]	@ (8004130 <OSStart+0x40>)
 8004106:	701a      	strb	r2, [r3, #0]
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
 8004108:	4b08      	ldr	r3, [pc, #32]	@ (800412c <OSStart+0x3c>)
 800410a:	781b      	ldrb	r3, [r3, #0]
 800410c:	461a      	mov	r2, r3
 800410e:	4b09      	ldr	r3, [pc, #36]	@ (8004134 <OSStart+0x44>)
 8004110:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004114:	4a08      	ldr	r2, [pc, #32]	@ (8004138 <OSStart+0x48>)
 8004116:	6013      	str	r3, [r2, #0]
        OSTCBCur      = OSTCBHighRdy;
 8004118:	4b07      	ldr	r3, [pc, #28]	@ (8004138 <OSStart+0x48>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a07      	ldr	r2, [pc, #28]	@ (800413c <OSStart+0x4c>)
 800411e:	6013      	str	r3, [r2, #0]
        OSStartHighRdy();                            /* Execute target specific code to start task     */
 8004120:	f7fc f87c 	bl	800021c <OSStartHighRdy>
    }
}
 8004124:	bf00      	nop
 8004126:	bd80      	pop	{r7, pc}
 8004128:	20001894 	.word	0x20001894
 800412c:	20001887 	.word	0x20001887
 8004130:	20001886 	.word	0x20001886
 8004134:	20001aac 	.word	0x20001aac
 8004138:	20001aa4 	.word	0x20001aa4
 800413c:	20001a9c 	.word	0x20001a9c

08004140 <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b084      	sub	sp, #16
 8004144:	af00      	add	r7, sp, #0
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0u
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0u;
 8004146:	2300      	movs	r3, #0
 8004148:	607b      	str	r3, [r7, #4]
#endif



#if OS_TIME_TICK_HOOK_EN > 0u
    OSTimeTickHook();                                      /* Call user definable hook                     */
 800414a:	f7ff fd91 	bl	8003c70 <OSTimeTickHook>
#endif
#if OS_TIME_GET_SET_EN > 0u
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
 800414e:	2040      	movs	r0, #64	@ 0x40
 8004150:	f7fc f84d 	bl	80001ee <OS_CPU_SR_Save>
 8004154:	6078      	str	r0, [r7, #4]
    OSTime++;
 8004156:	4b45      	ldr	r3, [pc, #276]	@ (800426c <OSTimeTick+0x12c>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	3301      	adds	r3, #1
 800415c:	4a43      	ldr	r2, [pc, #268]	@ (800426c <OSTimeTick+0x12c>)
 800415e:	6013      	str	r3, [r2, #0]
    OS_TRACE_TICK_INCREMENT(OSTime);
    OS_EXIT_CRITICAL();
 8004160:	6878      	ldr	r0, [r7, #4]
 8004162:	f7fc f852 	bl	800020a <OS_CPU_SR_Restore>
#endif
    if (OSRunning == OS_TRUE) {
 8004166:	4b42      	ldr	r3, [pc, #264]	@ (8004270 <OSTimeTick+0x130>)
 8004168:	781b      	ldrb	r3, [r3, #0]
 800416a:	2b01      	cmp	r3, #1
 800416c:	d17a      	bne.n	8004264 <OSTimeTick+0x124>
#if OS_TICK_STEP_EN > 0u
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
 800416e:	4b41      	ldr	r3, [pc, #260]	@ (8004274 <OSTimeTick+0x134>)
 8004170:	781b      	ldrb	r3, [r3, #0]
 8004172:	2b02      	cmp	r3, #2
 8004174:	d00c      	beq.n	8004190 <OSTimeTick+0x50>
 8004176:	2b02      	cmp	r3, #2
 8004178:	dc10      	bgt.n	800419c <OSTimeTick+0x5c>
 800417a:	2b00      	cmp	r3, #0
 800417c:	d002      	beq.n	8004184 <OSTimeTick+0x44>
 800417e:	2b01      	cmp	r3, #1
 8004180:	d003      	beq.n	800418a <OSTimeTick+0x4a>
 8004182:	e00b      	b.n	800419c <OSTimeTick+0x5c>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
 8004184:	2301      	movs	r3, #1
 8004186:	72fb      	strb	r3, [r7, #11]
                 break;
 8004188:	e00e      	b.n	80041a8 <OSTimeTick+0x68>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
 800418a:	2300      	movs	r3, #0
 800418c:	72fb      	strb	r3, [r7, #11]
                 break;
 800418e:	e00b      	b.n	80041a8 <OSTimeTick+0x68>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
 8004190:	2301      	movs	r3, #1
 8004192:	72fb      	strb	r3, [r7, #11]
                 OSTickStepState = OS_TICK_STEP_WAIT;
 8004194:	4b37      	ldr	r3, [pc, #220]	@ (8004274 <OSTimeTick+0x134>)
 8004196:	2201      	movs	r2, #1
 8004198:	701a      	strb	r2, [r3, #0]
                 break;
 800419a:	e005      	b.n	80041a8 <OSTimeTick+0x68>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
 800419c:	2301      	movs	r3, #1
 800419e:	72fb      	strb	r3, [r7, #11]
                 OSTickStepState = OS_TICK_STEP_DIS;
 80041a0:	4b34      	ldr	r3, [pc, #208]	@ (8004274 <OSTimeTick+0x134>)
 80041a2:	2200      	movs	r2, #0
 80041a4:	701a      	strb	r2, [r3, #0]
                 break;
 80041a6:	bf00      	nop
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
 80041a8:	7afb      	ldrb	r3, [r7, #11]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d059      	beq.n	8004262 <OSTimeTick+0x122>
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
 80041ae:	4b32      	ldr	r3, [pc, #200]	@ (8004278 <OSTimeTick+0x138>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	60fb      	str	r3, [r7, #12]
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
 80041b4:	e04f      	b.n	8004256 <OSTimeTick+0x116>
            OS_ENTER_CRITICAL();
 80041b6:	2040      	movs	r0, #64	@ 0x40
 80041b8:	f7fc f819 	bl	80001ee <OS_CPU_SR_Save>
 80041bc:	6078      	str	r0, [r7, #4]
            if (ptcb->OSTCBDly != 0u) {                    /* No, Delayed or waiting for event with TO     */
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d041      	beq.n	800424a <OSTimeTick+0x10a>
                ptcb->OSTCBDly--;                          /* Decrement nbr of ticks to end of delay       */
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041ca:	1e5a      	subs	r2, r3, #1
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	635a      	str	r2, [r3, #52]	@ 0x34
                if (ptcb->OSTCBDly == 0u) {                /* Check for timeout                            */
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d138      	bne.n	800424a <OSTimeTick+0x10a>

                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80041de:	f003 0337 	and.w	r3, r3, #55	@ 0x37
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d00d      	beq.n	8004202 <OSTimeTick+0xc2>
                        ptcb->OSTCBStat  &= (INT8U)~(INT8U)OS_STAT_PEND_ANY;   /* Yes, Clear status flag   */
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80041ec:	f023 0337 	bic.w	r3, r3, #55	@ 0x37
 80041f0:	b2da      	uxtb	r2, r3
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	2201      	movs	r2, #1
 80041fc:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 8004200:	e003      	b.n	800420a <OSTimeTick+0xca>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	2200      	movs	r2, #0
 8004206:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004210:	f003 0308 	and.w	r3, r3, #8
 8004214:	2b00      	cmp	r3, #0
 8004216:	d118      	bne.n	800424a <OSTimeTick+0x10a>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	f893 203e 	ldrb.w	r2, [r3, #62]	@ 0x3e
 800421e:	4b17      	ldr	r3, [pc, #92]	@ (800427c <OSTimeTick+0x13c>)
 8004220:	781b      	ldrb	r3, [r3, #0]
 8004222:	4313      	orrs	r3, r2
 8004224:	b2da      	uxtb	r2, r3
 8004226:	4b15      	ldr	r3, [pc, #84]	@ (800427c <OSTimeTick+0x13c>)
 8004228:	701a      	strb	r2, [r3, #0]
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004230:	461a      	mov	r2, r3
 8004232:	4b13      	ldr	r3, [pc, #76]	@ (8004280 <OSTimeTick+0x140>)
 8004234:	5c9a      	ldrb	r2, [r3, r2]
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800423c:	68f9      	ldr	r1, [r7, #12]
 800423e:	f891 103c 	ldrb.w	r1, [r1, #60]	@ 0x3c
 8004242:	4313      	orrs	r3, r2
 8004244:	b2da      	uxtb	r2, r3
 8004246:	4b0e      	ldr	r3, [pc, #56]	@ (8004280 <OSTimeTick+0x140>)
 8004248:	545a      	strb	r2, [r3, r1]
                        OS_TRACE_TASK_READY(ptcb);
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	695b      	ldr	r3, [r3, #20]
 800424e:	60fb      	str	r3, [r7, #12]
            OS_EXIT_CRITICAL();
 8004250:	6878      	ldr	r0, [r7, #4]
 8004252:	f7fb ffda 	bl	800020a <OS_CPU_SR_Restore>
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800425c:	2b3f      	cmp	r3, #63	@ 0x3f
 800425e:	d1aa      	bne.n	80041b6 <OSTimeTick+0x76>
 8004260:	e000      	b.n	8004264 <OSTimeTick+0x124>
            return;
 8004262:	bf00      	nop
        }
    }
}
 8004264:	3710      	adds	r7, #16
 8004266:	46bd      	mov	sp, r7
 8004268:	bd80      	pop	{r7, pc}
 800426a:	bf00      	nop
 800426c:	2000247c 	.word	0x2000247c
 8004270:	20001894 	.word	0x20001894
 8004274:	20002394 	.word	0x20002394
 8004278:	20001aa8 	.word	0x20001aa8
 800427c:	20001888 	.word	0x20001888
 8004280:	2000188c 	.word	0x2000188c

08004284 <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0u
void  OS_Dummy (void)
{
 8004284:	b480      	push	{r7}
 8004286:	af00      	add	r7, sp, #0
}
 8004288:	bf00      	nop
 800428a:	46bd      	mov	sp, r7
 800428c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004290:	4770      	bx	lr
	...

08004294 <OS_EventTaskRdy>:
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT  *pevent,
                        void      *pmsg,
                        INT8U      msk,
                        INT8U      pend_stat)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b086      	sub	sp, #24
 8004298:	af00      	add	r7, sp, #0
 800429a:	60f8      	str	r0, [r7, #12]
 800429c:	60b9      	str	r1, [r7, #8]
 800429e:	4611      	mov	r1, r2
 80042a0:	461a      	mov	r2, r3
 80042a2:	460b      	mov	r3, r1
 80042a4:	71fb      	strb	r3, [r7, #7]
 80042a6:	4613      	mov	r3, r2
 80042a8:	71bb      	strb	r3, [r7, #6]
    OS_PRIO  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63u
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	7a9b      	ldrb	r3, [r3, #10]
 80042ae:	461a      	mov	r2, r3
 80042b0:	4b2f      	ldr	r3, [pc, #188]	@ (8004370 <OS_EventTaskRdy+0xdc>)
 80042b2:	5c9b      	ldrb	r3, [r3, r2]
 80042b4:	75fb      	strb	r3, [r7, #23]
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
 80042b6:	7dfb      	ldrb	r3, [r7, #23]
 80042b8:	68fa      	ldr	r2, [r7, #12]
 80042ba:	4413      	add	r3, r2
 80042bc:	7adb      	ldrb	r3, [r3, #11]
 80042be:	461a      	mov	r2, r3
 80042c0:	4b2b      	ldr	r3, [pc, #172]	@ (8004370 <OS_EventTaskRdy+0xdc>)
 80042c2:	5c9b      	ldrb	r3, [r3, r2]
 80042c4:	75bb      	strb	r3, [r7, #22]
    prio = (INT8U)((y << 3u) + x);                      /* Find priority of task getting the msg       */
 80042c6:	7dfb      	ldrb	r3, [r7, #23]
 80042c8:	00db      	lsls	r3, r3, #3
 80042ca:	b2da      	uxtb	r2, r3
 80042cc:	7dbb      	ldrb	r3, [r7, #22]
 80042ce:	4413      	add	r3, r2
 80042d0:	757b      	strb	r3, [r7, #21]
        x = OSUnMapTbl[(OS_PRIO)(*ptbl >> 8u) & 0xFFu] + 8u;
    }
    prio = (INT8U)((y << 4u) + x);                      /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
 80042d2:	7d7b      	ldrb	r3, [r7, #21]
 80042d4:	4a27      	ldr	r2, [pc, #156]	@ (8004374 <OS_EventTaskRdy+0xe0>)
 80042d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042da:	613b      	str	r3, [r7, #16]
    ptcb->OSTCBDly        =  0u;                        /* Prevent OSTimeTick() from readying task     */
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	2200      	movs	r2, #0
 80042e0:	635a      	str	r2, [r3, #52]	@ 0x34
#if ((OS_Q_EN > 0u) && (OS_MAX_QS > 0u)) || (OS_MBOX_EN > 0u)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	68ba      	ldr	r2, [r7, #8]
 80042e6:	629a      	str	r2, [r3, #40]	@ 0x28
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= (INT8U)~msk;                /* Clear bit associated with event type        */
 80042e8:	693b      	ldr	r3, [r7, #16]
 80042ea:	f893 2038 	ldrb.w	r2, [r3, #56]	@ 0x38
 80042ee:	79fb      	ldrb	r3, [r7, #7]
 80042f0:	43db      	mvns	r3, r3
 80042f2:	b2db      	uxtb	r3, r3
 80042f4:	4013      	ands	r3, r2
 80042f6:	b2da      	uxtb	r2, r3
 80042f8:	693b      	ldr	r3, [r7, #16]
 80042fa:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
 80042fe:	693b      	ldr	r3, [r7, #16]
 8004300:	79ba      	ldrb	r2, [r7, #6]
 8004302:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800430c:	f003 0308 	and.w	r3, r3, #8
 8004310:	2b00      	cmp	r3, #0
 8004312:	d113      	bne.n	800433c <OS_EventTaskRdy+0xa8>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
 8004314:	693b      	ldr	r3, [r7, #16]
 8004316:	f893 203e 	ldrb.w	r2, [r3, #62]	@ 0x3e
 800431a:	4b17      	ldr	r3, [pc, #92]	@ (8004378 <OS_EventTaskRdy+0xe4>)
 800431c:	781b      	ldrb	r3, [r3, #0]
 800431e:	4313      	orrs	r3, r2
 8004320:	b2da      	uxtb	r2, r3
 8004322:	4b15      	ldr	r3, [pc, #84]	@ (8004378 <OS_EventTaskRdy+0xe4>)
 8004324:	701a      	strb	r2, [r3, #0]
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
 8004326:	7dfb      	ldrb	r3, [r7, #23]
 8004328:	4a14      	ldr	r2, [pc, #80]	@ (800437c <OS_EventTaskRdy+0xe8>)
 800432a:	5cd1      	ldrb	r1, [r2, r3]
 800432c:	693b      	ldr	r3, [r7, #16]
 800432e:	f893 203d 	ldrb.w	r2, [r3, #61]	@ 0x3d
 8004332:	7dfb      	ldrb	r3, [r7, #23]
 8004334:	430a      	orrs	r2, r1
 8004336:	b2d1      	uxtb	r1, r2
 8004338:	4a10      	ldr	r2, [pc, #64]	@ (800437c <OS_EventTaskRdy+0xe8>)
 800433a:	54d1      	strb	r1, [r2, r3]
        OS_TRACE_TASK_READY(ptcb);
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
 800433c:	68f9      	ldr	r1, [r7, #12]
 800433e:	6938      	ldr	r0, [r7, #16]
 8004340:	f000 f876 	bl	8004430 <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0u)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
 8004344:	693b      	ldr	r3, [r7, #16]
 8004346:	6a1b      	ldr	r3, [r3, #32]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d00b      	beq.n	8004364 <OS_EventTaskRdy+0xd0>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
 800434c:	693b      	ldr	r3, [r7, #16]
 800434e:	6a1b      	ldr	r3, [r3, #32]
 8004350:	4619      	mov	r1, r3
 8004352:	6938      	ldr	r0, [r7, #16]
 8004354:	f000 f89f 	bl	8004496 <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventMultiPtr  = (OS_EVENT **)0;     /* No longer pending on multi list             */
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	2200      	movs	r2, #0
 800435c:	621a      	str	r2, [r3, #32]
        ptcb->OSTCBEventMultiRdy  = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	68fa      	ldr	r2, [r7, #12]
 8004362:	625a      	str	r2, [r3, #36]	@ 0x24
    }
#endif

    return (prio);
 8004364:	7d7b      	ldrb	r3, [r7, #21]
}
 8004366:	4618      	mov	r0, r3
 8004368:	3718      	adds	r7, #24
 800436a:	46bd      	mov	sp, r7
 800436c:	bd80      	pop	{r7, pc}
 800436e:	bf00      	nop
 8004370:	08006db0 	.word	0x08006db0
 8004374:	20001aac 	.word	0x20001aac
 8004378:	20001888 	.word	0x20001888
 800437c:	2000188c 	.word	0x2000188c

08004380 <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
 8004380:	b480      	push	{r7}
 8004382:	b085      	sub	sp, #20
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
 8004388:	4b26      	ldr	r3, [pc, #152]	@ (8004424 <OS_EventTaskWait+0xa4>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	687a      	ldr	r2, [r7, #4]
 800438e:	61da      	str	r2, [r3, #28]

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
 8004390:	4b24      	ldr	r3, [pc, #144]	@ (8004424 <OS_EventTaskWait+0xa4>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004398:	461a      	mov	r2, r3
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	4413      	add	r3, r2
 800439e:	7ada      	ldrb	r2, [r3, #11]
 80043a0:	4b20      	ldr	r3, [pc, #128]	@ (8004424 <OS_EventTaskWait+0xa4>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80043a8:	491e      	ldr	r1, [pc, #120]	@ (8004424 <OS_EventTaskWait+0xa4>)
 80043aa:	6809      	ldr	r1, [r1, #0]
 80043ac:	f891 103c 	ldrb.w	r1, [r1, #60]	@ 0x3c
 80043b0:	4313      	orrs	r3, r2
 80043b2:	b2da      	uxtb	r2, r3
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	440b      	add	r3, r1
 80043b8:	72da      	strb	r2, [r3, #11]
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	7a9a      	ldrb	r2, [r3, #10]
 80043be:	4b19      	ldr	r3, [pc, #100]	@ (8004424 <OS_EventTaskWait+0xa4>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80043c6:	4313      	orrs	r3, r2
 80043c8:	b2da      	uxtb	r2, r3
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	729a      	strb	r2, [r3, #10]

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
 80043ce:	4b15      	ldr	r3, [pc, #84]	@ (8004424 <OS_EventTaskWait+0xa4>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80043d6:	73fb      	strb	r3, [r7, #15]
    OSRdyTbl[y]  &= (OS_PRIO)~OSTCBCur->OSTCBBitX;
 80043d8:	7bfb      	ldrb	r3, [r7, #15]
 80043da:	4a13      	ldr	r2, [pc, #76]	@ (8004428 <OS_EventTaskWait+0xa8>)
 80043dc:	5cd1      	ldrb	r1, [r2, r3]
 80043de:	4b11      	ldr	r3, [pc, #68]	@ (8004424 <OS_EventTaskWait+0xa4>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80043e6:	43db      	mvns	r3, r3
 80043e8:	b2da      	uxtb	r2, r3
 80043ea:	7bfb      	ldrb	r3, [r7, #15]
 80043ec:	400a      	ands	r2, r1
 80043ee:	b2d1      	uxtb	r1, r2
 80043f0:	4a0d      	ldr	r2, [pc, #52]	@ (8004428 <OS_EventTaskWait+0xa8>)
 80043f2:	54d1      	strb	r1, [r2, r3]
    OS_TRACE_TASK_SUSPENDED(OSTCBCur);
    if (OSRdyTbl[y] == 0u) {                      /* Clear event grp bit if this was only task pending */
 80043f4:	7bfb      	ldrb	r3, [r7, #15]
 80043f6:	4a0c      	ldr	r2, [pc, #48]	@ (8004428 <OS_EventTaskWait+0xa8>)
 80043f8:	5cd3      	ldrb	r3, [r2, r3]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d10b      	bne.n	8004416 <OS_EventTaskWait+0x96>
        OSRdyGrp &= (OS_PRIO)~OSTCBCur->OSTCBBitY;
 80043fe:	4b09      	ldr	r3, [pc, #36]	@ (8004424 <OS_EventTaskWait+0xa4>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004406:	43db      	mvns	r3, r3
 8004408:	b2da      	uxtb	r2, r3
 800440a:	4b08      	ldr	r3, [pc, #32]	@ (800442c <OS_EventTaskWait+0xac>)
 800440c:	781b      	ldrb	r3, [r3, #0]
 800440e:	4013      	ands	r3, r2
 8004410:	b2da      	uxtb	r2, r3
 8004412:	4b06      	ldr	r3, [pc, #24]	@ (800442c <OS_EventTaskWait+0xac>)
 8004414:	701a      	strb	r2, [r3, #0]
    }
}
 8004416:	bf00      	nop
 8004418:	3714      	adds	r7, #20
 800441a:	46bd      	mov	sp, r7
 800441c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004420:	4770      	bx	lr
 8004422:	bf00      	nop
 8004424:	20001a9c 	.word	0x20001a9c
 8004428:	2000188c 	.word	0x2000188c
 800442c:	20001888 	.word	0x20001888

08004430 <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
 8004430:	b480      	push	{r7}
 8004432:	b085      	sub	sp, #20
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
 8004438:	6039      	str	r1, [r7, #0]
    INT8U  y;


    y                       =  ptcb->OSTCBY;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004440:	73fb      	strb	r3, [r7, #15]
    pevent->OSEventTbl[y]  &= (OS_PRIO)~ptcb->OSTCBBitX;    /* Remove task from wait list              */
 8004442:	7bfb      	ldrb	r3, [r7, #15]
 8004444:	683a      	ldr	r2, [r7, #0]
 8004446:	4413      	add	r3, r2
 8004448:	7ad9      	ldrb	r1, [r3, #11]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004450:	43db      	mvns	r3, r3
 8004452:	b2da      	uxtb	r2, r3
 8004454:	7bfb      	ldrb	r3, [r7, #15]
 8004456:	400a      	ands	r2, r1
 8004458:	b2d1      	uxtb	r1, r2
 800445a:	683a      	ldr	r2, [r7, #0]
 800445c:	4413      	add	r3, r2
 800445e:	460a      	mov	r2, r1
 8004460:	72da      	strb	r2, [r3, #11]
    if (pevent->OSEventTbl[y] == 0u) {
 8004462:	7bfb      	ldrb	r3, [r7, #15]
 8004464:	683a      	ldr	r2, [r7, #0]
 8004466:	4413      	add	r3, r2
 8004468:	7adb      	ldrb	r3, [r3, #11]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d10a      	bne.n	8004484 <OS_EventTaskRemove+0x54>
        pevent->OSEventGrp &= (OS_PRIO)~ptcb->OSTCBBitY;
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	7a9a      	ldrb	r2, [r3, #10]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004478:	43db      	mvns	r3, r3
 800447a:	b2db      	uxtb	r3, r3
 800447c:	4013      	ands	r3, r2
 800447e:	b2da      	uxtb	r2, r3
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	729a      	strb	r2, [r3, #10]
    }
    ptcb->OSTCBEventPtr     = (OS_EVENT  *)0;               /* Unlink OS_EVENT from OS_TCB             */
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2200      	movs	r2, #0
 8004488:	61da      	str	r2, [r3, #28]
}
 800448a:	bf00      	nop
 800448c:	3714      	adds	r7, #20
 800448e:	46bd      	mov	sp, r7
 8004490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004494:	4770      	bx	lr

08004496 <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0u))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
 8004496:	b480      	push	{r7}
 8004498:	b087      	sub	sp, #28
 800449a:	af00      	add	r7, sp, #0
 800449c:	6078      	str	r0, [r7, #4]
 800449e:	6039      	str	r1, [r7, #0]
    INT8U      y;
    OS_PRIO    bity;
    OS_PRIO    bitx;


    y       =  ptcb->OSTCBY;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80044a6:	73fb      	strb	r3, [r7, #15]
    bity    =  ptcb->OSTCBBitY;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80044ae:	73bb      	strb	r3, [r7, #14]
    bitx    =  ptcb->OSTCBBitX;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80044b6:	737b      	strb	r3, [r7, #13]
    pevents =  pevents_multi;
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	617b      	str	r3, [r7, #20]
    pevent  = *pevents;
 80044bc:	697b      	ldr	r3, [r7, #20]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	613b      	str	r3, [r7, #16]
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
 80044c2:	e022      	b.n	800450a <OS_EventTaskRemoveMulti+0x74>
        pevent->OSEventTbl[y]  &= (OS_PRIO)~bitx;
 80044c4:	7bfb      	ldrb	r3, [r7, #15]
 80044c6:	693a      	ldr	r2, [r7, #16]
 80044c8:	4413      	add	r3, r2
 80044ca:	7ad9      	ldrb	r1, [r3, #11]
 80044cc:	7b7b      	ldrb	r3, [r7, #13]
 80044ce:	43db      	mvns	r3, r3
 80044d0:	b2da      	uxtb	r2, r3
 80044d2:	7bfb      	ldrb	r3, [r7, #15]
 80044d4:	400a      	ands	r2, r1
 80044d6:	b2d1      	uxtb	r1, r2
 80044d8:	693a      	ldr	r2, [r7, #16]
 80044da:	4413      	add	r3, r2
 80044dc:	460a      	mov	r2, r1
 80044de:	72da      	strb	r2, [r3, #11]
        if (pevent->OSEventTbl[y] == 0u) {
 80044e0:	7bfb      	ldrb	r3, [r7, #15]
 80044e2:	693a      	ldr	r2, [r7, #16]
 80044e4:	4413      	add	r3, r2
 80044e6:	7adb      	ldrb	r3, [r3, #11]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d108      	bne.n	80044fe <OS_EventTaskRemoveMulti+0x68>
            pevent->OSEventGrp &= (OS_PRIO)~bity;
 80044ec:	693b      	ldr	r3, [r7, #16]
 80044ee:	7a9a      	ldrb	r2, [r3, #10]
 80044f0:	7bbb      	ldrb	r3, [r7, #14]
 80044f2:	43db      	mvns	r3, r3
 80044f4:	b2db      	uxtb	r3, r3
 80044f6:	4013      	ands	r3, r2
 80044f8:	b2da      	uxtb	r2, r3
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	729a      	strb	r2, [r3, #10]
        }
        pevents++;
 80044fe:	697b      	ldr	r3, [r7, #20]
 8004500:	3304      	adds	r3, #4
 8004502:	617b      	str	r3, [r7, #20]
        pevent = *pevents;
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	613b      	str	r3, [r7, #16]
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
 800450a:	693b      	ldr	r3, [r7, #16]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d1d9      	bne.n	80044c4 <OS_EventTaskRemoveMulti+0x2e>
    }
}
 8004510:	bf00      	nop
 8004512:	bf00      	nop
 8004514:	371c      	adds	r7, #28
 8004516:	46bd      	mov	sp, r7
 8004518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451c:	4770      	bx	lr

0800451e <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
 800451e:	b480      	push	{r7}
 8004520:	b085      	sub	sp, #20
 8004522:	af00      	add	r7, sp, #0
 8004524:	6078      	str	r0, [r7, #4]
    INT8U  i;


    pevent->OSEventGrp = 0u;                     /* No task waiting on event                           */
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2200      	movs	r2, #0
 800452a:	729a      	strb	r2, [r3, #10]
    for (i = 0u; i < OS_EVENT_TBL_SIZE; i++) {
 800452c:	2300      	movs	r3, #0
 800452e:	73fb      	strb	r3, [r7, #15]
 8004530:	e007      	b.n	8004542 <OS_EventWaitListInit+0x24>
        pevent->OSEventTbl[i] = 0u;
 8004532:	7bfb      	ldrb	r3, [r7, #15]
 8004534:	687a      	ldr	r2, [r7, #4]
 8004536:	4413      	add	r3, r2
 8004538:	2200      	movs	r2, #0
 800453a:	72da      	strb	r2, [r3, #11]
    for (i = 0u; i < OS_EVENT_TBL_SIZE; i++) {
 800453c:	7bfb      	ldrb	r3, [r7, #15]
 800453e:	3301      	adds	r3, #1
 8004540:	73fb      	strb	r3, [r7, #15]
 8004542:	7bfb      	ldrb	r3, [r7, #15]
 8004544:	2b07      	cmp	r3, #7
 8004546:	d9f4      	bls.n	8004532 <OS_EventWaitListInit+0x14>
    }
}
 8004548:	bf00      	nop
 800454a:	bf00      	nop
 800454c:	3714      	adds	r7, #20
 800454e:	46bd      	mov	sp, r7
 8004550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004554:	4770      	bx	lr
	...

08004558 <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b084      	sub	sp, #16
 800455c:	af00      	add	r7, sp, #0
    INT16U     ix_next;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
 800455e:	21f0      	movs	r1, #240	@ 0xf0
 8004560:	481f      	ldr	r0, [pc, #124]	@ (80045e0 <OS_InitEventList+0x88>)
 8004562:	f000 f94d 	bl	8004800 <OS_MemClr>
    for (ix = 0u; ix < (OS_MAX_EVENTS - 1u); ix++) {        /* Init. list of free EVENT control blocks */
 8004566:	2300      	movs	r3, #0
 8004568:	81fb      	strh	r3, [r7, #14]
 800456a:	e01e      	b.n	80045aa <OS_InitEventList+0x52>
        ix_next = ix + 1u;
 800456c:	89fb      	ldrh	r3, [r7, #14]
 800456e:	3301      	adds	r3, #1
 8004570:	80fb      	strh	r3, [r7, #6]
        pevent1 = &OSEventTbl[ix];
 8004572:	89fa      	ldrh	r2, [r7, #14]
 8004574:	4613      	mov	r3, r2
 8004576:	005b      	lsls	r3, r3, #1
 8004578:	4413      	add	r3, r2
 800457a:	00db      	lsls	r3, r3, #3
 800457c:	4a18      	ldr	r2, [pc, #96]	@ (80045e0 <OS_InitEventList+0x88>)
 800457e:	4413      	add	r3, r2
 8004580:	60bb      	str	r3, [r7, #8]
        pevent2 = &OSEventTbl[ix_next];
 8004582:	88fa      	ldrh	r2, [r7, #6]
 8004584:	4613      	mov	r3, r2
 8004586:	005b      	lsls	r3, r3, #1
 8004588:	4413      	add	r3, r2
 800458a:	00db      	lsls	r3, r3, #3
 800458c:	4a14      	ldr	r2, [pc, #80]	@ (80045e0 <OS_InitEventList+0x88>)
 800458e:	4413      	add	r3, r2
 8004590:	603b      	str	r3, [r7, #0]
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
 8004592:	68bb      	ldr	r3, [r7, #8]
 8004594:	2200      	movs	r2, #0
 8004596:	701a      	strb	r2, [r3, #0]
        pevent1->OSEventPtr     = pevent2;
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	683a      	ldr	r2, [r7, #0]
 800459c:	605a      	str	r2, [r3, #4]
#if OS_EVENT_NAME_EN > 0u
        pevent1->OSEventName    = (INT8U *)(void *)"?";     /* Unknown name                            */
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	4a10      	ldr	r2, [pc, #64]	@ (80045e4 <OS_InitEventList+0x8c>)
 80045a2:	615a      	str	r2, [r3, #20]
    for (ix = 0u; ix < (OS_MAX_EVENTS - 1u); ix++) {        /* Init. list of free EVENT control blocks */
 80045a4:	89fb      	ldrh	r3, [r7, #14]
 80045a6:	3301      	adds	r3, #1
 80045a8:	81fb      	strh	r3, [r7, #14]
 80045aa:	89fb      	ldrh	r3, [r7, #14]
 80045ac:	2b08      	cmp	r3, #8
 80045ae:	d9dd      	bls.n	800456c <OS_InitEventList+0x14>
#endif
    }
    pevent1                         = &OSEventTbl[ix];
 80045b0:	89fa      	ldrh	r2, [r7, #14]
 80045b2:	4613      	mov	r3, r2
 80045b4:	005b      	lsls	r3, r3, #1
 80045b6:	4413      	add	r3, r2
 80045b8:	00db      	lsls	r3, r3, #3
 80045ba:	4a09      	ldr	r2, [pc, #36]	@ (80045e0 <OS_InitEventList+0x88>)
 80045bc:	4413      	add	r3, r2
 80045be:	60bb      	str	r3, [r7, #8]
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	2200      	movs	r2, #0
 80045c4:	701a      	strb	r2, [r3, #0]
    pevent1->OSEventPtr             = (OS_EVENT *)0;
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	2200      	movs	r2, #0
 80045ca:	605a      	str	r2, [r3, #4]
#if OS_EVENT_NAME_EN > 0u
    pevent1->OSEventName            = (INT8U *)(void *)"?"; /* Unknown name                            */
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	4a05      	ldr	r2, [pc, #20]	@ (80045e4 <OS_InitEventList+0x8c>)
 80045d0:	615a      	str	r2, [r3, #20]
#endif
    OSEventFreeList                 = &OSEventTbl[0];
 80045d2:	4b05      	ldr	r3, [pc, #20]	@ (80045e8 <OS_InitEventList+0x90>)
 80045d4:	4a02      	ldr	r2, [pc, #8]	@ (80045e0 <OS_InitEventList+0x88>)
 80045d6:	601a      	str	r2, [r3, #0]
#if OS_EVENT_NAME_EN > 0u
    OSEventFreeList->OSEventName    = (INT8U *)"?";         /* Unknown name                            */
#endif
#endif
#endif
}
 80045d8:	bf00      	nop
 80045da:	3710      	adds	r7, #16
 80045dc:	46bd      	mov	sp, r7
 80045de:	bd80      	pop	{r7, pc}
 80045e0:	20001530 	.word	0x20001530
 80045e4:	08006c84 	.word	0x08006c84
 80045e8:	2000152c 	.word	0x2000152c

080045ec <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
 80045ec:	b480      	push	{r7}
 80045ee:	af00      	add	r7, sp, #0
#if OS_TIME_GET_SET_EN > 0u
    OSTime                    = 0uL;                       /* Clear the 32-bit system clock            */
 80045f0:	4b12      	ldr	r3, [pc, #72]	@ (800463c <OS_InitMisc+0x50>)
 80045f2:	2200      	movs	r2, #0
 80045f4:	601a      	str	r2, [r3, #0]
#endif

    OSIntNesting              = 0u;                        /* Clear the interrupt nesting counter      */
 80045f6:	4b12      	ldr	r3, [pc, #72]	@ (8004640 <OS_InitMisc+0x54>)
 80045f8:	2200      	movs	r2, #0
 80045fa:	701a      	strb	r2, [r3, #0]
    OSLockNesting             = 0u;                        /* Clear the scheduling lock counter        */
 80045fc:	4b11      	ldr	r3, [pc, #68]	@ (8004644 <OS_InitMisc+0x58>)
 80045fe:	2200      	movs	r2, #0
 8004600:	701a      	strb	r2, [r3, #0]

    OSTaskCtr                 = 0u;                        /* Clear the number of tasks                */
 8004602:	4b11      	ldr	r3, [pc, #68]	@ (8004648 <OS_InitMisc+0x5c>)
 8004604:	2200      	movs	r2, #0
 8004606:	701a      	strb	r2, [r3, #0]

    OSRunning                 = OS_FALSE;                  /* Indicate that multitasking not started   */
 8004608:	4b10      	ldr	r3, [pc, #64]	@ (800464c <OS_InitMisc+0x60>)
 800460a:	2200      	movs	r2, #0
 800460c:	701a      	strb	r2, [r3, #0]

    OSCtxSwCtr                = 0u;                        /* Clear the context switch counter         */
 800460e:	4b10      	ldr	r3, [pc, #64]	@ (8004650 <OS_InitMisc+0x64>)
 8004610:	2200      	movs	r2, #0
 8004612:	601a      	str	r2, [r3, #0]
    OSIdleCtr                 = 0uL;                       /* Clear the 32-bit idle counter            */
 8004614:	4b0f      	ldr	r3, [pc, #60]	@ (8004654 <OS_InitMisc+0x68>)
 8004616:	2200      	movs	r2, #0
 8004618:	601a      	str	r2, [r3, #0]

#if OS_TASK_STAT_EN > 0u
    OSIdleCtrRun              = 0uL;
 800461a:	4b0f      	ldr	r3, [pc, #60]	@ (8004658 <OS_InitMisc+0x6c>)
 800461c:	2200      	movs	r2, #0
 800461e:	601a      	str	r2, [r3, #0]
    OSIdleCtrMax              = 0uL;
 8004620:	4b0e      	ldr	r3, [pc, #56]	@ (800465c <OS_InitMisc+0x70>)
 8004622:	2200      	movs	r2, #0
 8004624:	601a      	str	r2, [r3, #0]
    OSStatRdy                 = OS_FALSE;                  /* Statistic task is not ready              */
 8004626:	4b0e      	ldr	r3, [pc, #56]	@ (8004660 <OS_InitMisc+0x74>)
 8004628:	2200      	movs	r2, #0
 800462a:	701a      	strb	r2, [r3, #0]
#ifdef OS_SAFETY_CRITICAL_IEC61508
    OSSafetyCriticalStartFlag = OS_FALSE;                  /* Still allow creation of objects          */
#endif

#if OS_TASK_REG_TBL_SIZE > 0u
    OSTaskRegNextAvailID      = 0u;                        /* Initialize the task register ID          */
 800462c:	4b0d      	ldr	r3, [pc, #52]	@ (8004664 <OS_InitMisc+0x78>)
 800462e:	2200      	movs	r2, #0
 8004630:	701a      	strb	r2, [r3, #0]
#endif
}
 8004632:	bf00      	nop
 8004634:	46bd      	mov	sp, r7
 8004636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463a:	4770      	bx	lr
 800463c:	2000247c 	.word	0x2000247c
 8004640:	20001884 	.word	0x20001884
 8004644:	20001885 	.word	0x20001885
 8004648:	20001895 	.word	0x20001895
 800464c:	20001894 	.word	0x20001894
 8004650:	20001528 	.word	0x20001528
 8004654:	20001898 	.word	0x20001898
 8004658:	2000167c 	.word	0x2000167c
 800465c:	20001678 	.word	0x20001678
 8004660:	20001680 	.word	0x20001680
 8004664:	20002478 	.word	0x20002478

08004668 <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
 8004668:	b480      	push	{r7}
 800466a:	b083      	sub	sp, #12
 800466c:	af00      	add	r7, sp, #0
    INT8U  i;


    OSRdyGrp      = 0u;                                    /* Clear the ready list                     */
 800466e:	4b11      	ldr	r3, [pc, #68]	@ (80046b4 <OS_InitRdyList+0x4c>)
 8004670:	2200      	movs	r2, #0
 8004672:	701a      	strb	r2, [r3, #0]
    for (i = 0u; i < OS_RDY_TBL_SIZE; i++) {
 8004674:	2300      	movs	r3, #0
 8004676:	71fb      	strb	r3, [r7, #7]
 8004678:	e006      	b.n	8004688 <OS_InitRdyList+0x20>
        OSRdyTbl[i] = 0u;
 800467a:	79fb      	ldrb	r3, [r7, #7]
 800467c:	4a0e      	ldr	r2, [pc, #56]	@ (80046b8 <OS_InitRdyList+0x50>)
 800467e:	2100      	movs	r1, #0
 8004680:	54d1      	strb	r1, [r2, r3]
    for (i = 0u; i < OS_RDY_TBL_SIZE; i++) {
 8004682:	79fb      	ldrb	r3, [r7, #7]
 8004684:	3301      	adds	r3, #1
 8004686:	71fb      	strb	r3, [r7, #7]
 8004688:	79fb      	ldrb	r3, [r7, #7]
 800468a:	2b07      	cmp	r3, #7
 800468c:	d9f5      	bls.n	800467a <OS_InitRdyList+0x12>
    }

    OSPrioCur     = 0u;
 800468e:	4b0b      	ldr	r3, [pc, #44]	@ (80046bc <OS_InitRdyList+0x54>)
 8004690:	2200      	movs	r2, #0
 8004692:	701a      	strb	r2, [r3, #0]
    OSPrioHighRdy = 0u;
 8004694:	4b0a      	ldr	r3, [pc, #40]	@ (80046c0 <OS_InitRdyList+0x58>)
 8004696:	2200      	movs	r2, #0
 8004698:	701a      	strb	r2, [r3, #0]

    OSTCBHighRdy  = (OS_TCB *)0;
 800469a:	4b0a      	ldr	r3, [pc, #40]	@ (80046c4 <OS_InitRdyList+0x5c>)
 800469c:	2200      	movs	r2, #0
 800469e:	601a      	str	r2, [r3, #0]
    OSTCBCur      = (OS_TCB *)0;
 80046a0:	4b09      	ldr	r3, [pc, #36]	@ (80046c8 <OS_InitRdyList+0x60>)
 80046a2:	2200      	movs	r2, #0
 80046a4:	601a      	str	r2, [r3, #0]
}
 80046a6:	bf00      	nop
 80046a8:	370c      	adds	r7, #12
 80046aa:	46bd      	mov	sp, r7
 80046ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b0:	4770      	bx	lr
 80046b2:	bf00      	nop
 80046b4:	20001888 	.word	0x20001888
 80046b8:	2000188c 	.word	0x2000188c
 80046bc:	20001886 	.word	0x20001886
 80046c0:	20001887 	.word	0x20001887
 80046c4:	20001aa4 	.word	0x20001aa4
 80046c8:	20001a9c 	.word	0x20001a9c

080046cc <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b088      	sub	sp, #32
 80046d0:	af06      	add	r7, sp, #24
#endif


#if OS_TASK_CREATE_EXT_EN > 0u
    #if OS_STK_GROWTH == 1u
    (void)OSTaskCreateExt(OS_TaskIdle,
 80046d2:	2303      	movs	r3, #3
 80046d4:	9304      	str	r3, [sp, #16]
 80046d6:	2300      	movs	r3, #0
 80046d8:	9303      	str	r3, [sp, #12]
 80046da:	2380      	movs	r3, #128	@ 0x80
 80046dc:	9302      	str	r3, [sp, #8]
 80046de:	4b0a      	ldr	r3, [pc, #40]	@ (8004708 <OS_InitTaskIdle+0x3c>)
 80046e0:	9301      	str	r3, [sp, #4]
 80046e2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80046e6:	9300      	str	r3, [sp, #0]
 80046e8:	233f      	movs	r3, #63	@ 0x3f
 80046ea:	4a08      	ldr	r2, [pc, #32]	@ (800470c <OS_InitTaskIdle+0x40>)
 80046ec:	2100      	movs	r1, #0
 80046ee:	4808      	ldr	r0, [pc, #32]	@ (8004710 <OS_InitTaskIdle+0x44>)
 80046f0:	f000 fcc6 	bl	8005080 <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_EN > 0u
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)(void *)"uC/OS-II Idle", &err);
 80046f4:	1dfb      	adds	r3, r7, #7
 80046f6:	461a      	mov	r2, r3
 80046f8:	4906      	ldr	r1, [pc, #24]	@ (8004714 <OS_InitTaskIdle+0x48>)
 80046fa:	203f      	movs	r0, #63	@ 0x3f
 80046fc:	f000 fe24 	bl	8005348 <OSTaskNameSet>
#endif
}
 8004700:	bf00      	nop
 8004702:	3708      	adds	r7, #8
 8004704:	46bd      	mov	sp, r7
 8004706:	bd80      	pop	{r7, pc}
 8004708:	2000189c 	.word	0x2000189c
 800470c:	20001a98 	.word	0x20001a98
 8004710:	08004901 	.word	0x08004901
 8004714:	08006c88 	.word	0x08006c88

08004718 <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0u
static  void  OS_InitTaskStat (void)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b088      	sub	sp, #32
 800471c:	af06      	add	r7, sp, #24
#endif


#if OS_TASK_CREATE_EXT_EN > 0u
    #if OS_STK_GROWTH == 1u
    (void)OSTaskCreateExt(OS_TaskStat,
 800471e:	2303      	movs	r3, #3
 8004720:	9304      	str	r3, [sp, #16]
 8004722:	2300      	movs	r3, #0
 8004724:	9303      	str	r3, [sp, #12]
 8004726:	2380      	movs	r3, #128	@ 0x80
 8004728:	9302      	str	r3, [sp, #8]
 800472a:	4b0a      	ldr	r3, [pc, #40]	@ (8004754 <OS_InitTaskStat+0x3c>)
 800472c:	9301      	str	r3, [sp, #4]
 800472e:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 8004732:	9300      	str	r3, [sp, #0]
 8004734:	233e      	movs	r3, #62	@ 0x3e
 8004736:	4a08      	ldr	r2, [pc, #32]	@ (8004758 <OS_InitTaskStat+0x40>)
 8004738:	2100      	movs	r1, #0
 800473a:	4808      	ldr	r0, [pc, #32]	@ (800475c <OS_InitTaskStat+0x44>)
 800473c:	f000 fca0 	bl	8005080 <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_EN > 0u
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)(void *)"uC/OS-II Stat", &err);
 8004740:	1dfb      	adds	r3, r7, #7
 8004742:	461a      	mov	r2, r3
 8004744:	4906      	ldr	r1, [pc, #24]	@ (8004760 <OS_InitTaskStat+0x48>)
 8004746:	203e      	movs	r0, #62	@ 0x3e
 8004748:	f000 fdfe 	bl	8005348 <OSTaskNameSet>
#endif
}
 800474c:	bf00      	nop
 800474e:	3708      	adds	r7, #8
 8004750:	46bd      	mov	sp, r7
 8004752:	bd80      	pop	{r7, pc}
 8004754:	20001684 	.word	0x20001684
 8004758:	20001880 	.word	0x20001880
 800475c:	08004931 	.word	0x08004931
 8004760:	08006c98 	.word	0x08006c98

08004764 <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b084      	sub	sp, #16
 8004768:	af00      	add	r7, sp, #0
    INT8U    ix_next;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
 800476a:	f44f 61fd 	mov.w	r1, #2024	@ 0x7e8
 800476e:	481f      	ldr	r0, [pc, #124]	@ (80047ec <OS_InitTCBList+0x88>)
 8004770:	f000 f846 	bl	8004800 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
 8004774:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004778:	481d      	ldr	r0, [pc, #116]	@ (80047f0 <OS_InitTCBList+0x8c>)
 800477a:	f000 f841 	bl	8004800 <OS_MemClr>
    for (ix = 0u; ix < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1u); ix++) {    /* Init. list of free TCBs     */
 800477e:	2300      	movs	r3, #0
 8004780:	73fb      	strb	r3, [r7, #15]
 8004782:	e019      	b.n	80047b8 <OS_InitTCBList+0x54>
        ix_next =  ix + 1u;
 8004784:	7bfb      	ldrb	r3, [r7, #15]
 8004786:	3301      	adds	r3, #1
 8004788:	71fb      	strb	r3, [r7, #7]
        ptcb1   = &OSTCBTbl[ix];
 800478a:	7bfb      	ldrb	r3, [r7, #15]
 800478c:	225c      	movs	r2, #92	@ 0x5c
 800478e:	fb02 f303 	mul.w	r3, r2, r3
 8004792:	4a16      	ldr	r2, [pc, #88]	@ (80047ec <OS_InitTCBList+0x88>)
 8004794:	4413      	add	r3, r2
 8004796:	60bb      	str	r3, [r7, #8]
        ptcb2   = &OSTCBTbl[ix_next];
 8004798:	79fb      	ldrb	r3, [r7, #7]
 800479a:	225c      	movs	r2, #92	@ 0x5c
 800479c:	fb02 f303 	mul.w	r3, r2, r3
 80047a0:	4a12      	ldr	r2, [pc, #72]	@ (80047ec <OS_InitTCBList+0x88>)
 80047a2:	4413      	add	r3, r2
 80047a4:	603b      	str	r3, [r7, #0]
        ptcb1->OSTCBNext = ptcb2;
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	683a      	ldr	r2, [r7, #0]
 80047aa:	615a      	str	r2, [r3, #20]
#if OS_TASK_NAME_EN > 0u
        ptcb1->OSTCBTaskName = (INT8U *)(void *)"?";             /* Unknown name                       */
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	4a11      	ldr	r2, [pc, #68]	@ (80047f4 <OS_InitTCBList+0x90>)
 80047b0:	655a      	str	r2, [r3, #84]	@ 0x54
    for (ix = 0u; ix < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1u); ix++) {    /* Init. list of free TCBs     */
 80047b2:	7bfb      	ldrb	r3, [r7, #15]
 80047b4:	3301      	adds	r3, #1
 80047b6:	73fb      	strb	r3, [r7, #15]
 80047b8:	7bfb      	ldrb	r3, [r7, #15]
 80047ba:	2b14      	cmp	r3, #20
 80047bc:	d9e2      	bls.n	8004784 <OS_InitTCBList+0x20>
#endif
    }
    ptcb1                   = &OSTCBTbl[ix];
 80047be:	7bfb      	ldrb	r3, [r7, #15]
 80047c0:	225c      	movs	r2, #92	@ 0x5c
 80047c2:	fb02 f303 	mul.w	r3, r2, r3
 80047c6:	4a09      	ldr	r2, [pc, #36]	@ (80047ec <OS_InitTCBList+0x88>)
 80047c8:	4413      	add	r3, r2
 80047ca:	60bb      	str	r3, [r7, #8]
    ptcb1->OSTCBNext        = (OS_TCB *)0;                       /* Last OS_TCB                        */
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	2200      	movs	r2, #0
 80047d0:	615a      	str	r2, [r3, #20]
#if OS_TASK_NAME_EN > 0u
    ptcb1->OSTCBTaskName    = (INT8U *)(void *)"?";              /* Unknown name                       */
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	4a07      	ldr	r2, [pc, #28]	@ (80047f4 <OS_InitTCBList+0x90>)
 80047d6:	655a      	str	r2, [r3, #84]	@ 0x54
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
 80047d8:	4b07      	ldr	r3, [pc, #28]	@ (80047f8 <OS_InitTCBList+0x94>)
 80047da:	2200      	movs	r2, #0
 80047dc:	601a      	str	r2, [r3, #0]
    OSTCBFreeList           = &OSTCBTbl[0];
 80047de:	4b07      	ldr	r3, [pc, #28]	@ (80047fc <OS_InitTCBList+0x98>)
 80047e0:	4a02      	ldr	r2, [pc, #8]	@ (80047ec <OS_InitTCBList+0x88>)
 80047e2:	601a      	str	r2, [r3, #0]
}
 80047e4:	bf00      	nop
 80047e6:	3710      	adds	r7, #16
 80047e8:	46bd      	mov	sp, r7
 80047ea:	bd80      	pop	{r7, pc}
 80047ec:	20001bac 	.word	0x20001bac
 80047f0:	20001aac 	.word	0x20001aac
 80047f4:	08006c84 	.word	0x08006c84
 80047f8:	20001aa8 	.word	0x20001aa8
 80047fc:	20001aa0 	.word	0x20001aa0

08004800 <OS_MemClr>:
*********************************************************************************************************
*/

void  OS_MemClr (INT8U  *pdest,
                 INT16U  size)
{
 8004800:	b480      	push	{r7}
 8004802:	b083      	sub	sp, #12
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
 8004808:	460b      	mov	r3, r1
 800480a:	807b      	strh	r3, [r7, #2]
    while (size > 0u) {
 800480c:	e007      	b.n	800481e <OS_MemClr+0x1e>
        *pdest++ = (INT8U)0;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	1c5a      	adds	r2, r3, #1
 8004812:	607a      	str	r2, [r7, #4]
 8004814:	2200      	movs	r2, #0
 8004816:	701a      	strb	r2, [r3, #0]
        size--;
 8004818:	887b      	ldrh	r3, [r7, #2]
 800481a:	3b01      	subs	r3, #1
 800481c:	807b      	strh	r3, [r7, #2]
    while (size > 0u) {
 800481e:	887b      	ldrh	r3, [r7, #2]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d1f4      	bne.n	800480e <OS_MemClr+0xe>
    }
}
 8004824:	bf00      	nop
 8004826:	bf00      	nop
 8004828:	370c      	adds	r7, #12
 800482a:	46bd      	mov	sp, r7
 800482c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004830:	4770      	bx	lr
	...

08004834 <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b082      	sub	sp, #8
 8004838:	af00      	add	r7, sp, #0
#if OS_CRITICAL_METHOD == 3u                           /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0u;
 800483a:	2300      	movs	r3, #0
 800483c:	607b      	str	r3, [r7, #4]
#endif



    OS_ENTER_CRITICAL();
 800483e:	2040      	movs	r0, #64	@ 0x40
 8004840:	f7fb fcd5 	bl	80001ee <OS_CPU_SR_Save>
 8004844:	6078      	str	r0, [r7, #4]
    if (OSIntNesting == 0u) {                          /* Schedule only if all ISRs done and ...       */
 8004846:	4b15      	ldr	r3, [pc, #84]	@ (800489c <OS_Sched+0x68>)
 8004848:	781b      	ldrb	r3, [r3, #0]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d11f      	bne.n	800488e <OS_Sched+0x5a>
        if (OSLockNesting == 0u) {                     /* ... scheduler is not locked                  */
 800484e:	4b14      	ldr	r3, [pc, #80]	@ (80048a0 <OS_Sched+0x6c>)
 8004850:	781b      	ldrb	r3, [r3, #0]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d11b      	bne.n	800488e <OS_Sched+0x5a>
            OS_SchedNew();
 8004856:	f000 f82f 	bl	80048b8 <OS_SchedNew>
            OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
 800485a:	4b12      	ldr	r3, [pc, #72]	@ (80048a4 <OS_Sched+0x70>)
 800485c:	781b      	ldrb	r3, [r3, #0]
 800485e:	461a      	mov	r2, r3
 8004860:	4b11      	ldr	r3, [pc, #68]	@ (80048a8 <OS_Sched+0x74>)
 8004862:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004866:	4a11      	ldr	r2, [pc, #68]	@ (80048ac <OS_Sched+0x78>)
 8004868:	6013      	str	r3, [r2, #0]
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
 800486a:	4b0e      	ldr	r3, [pc, #56]	@ (80048a4 <OS_Sched+0x70>)
 800486c:	781a      	ldrb	r2, [r3, #0]
 800486e:	4b10      	ldr	r3, [pc, #64]	@ (80048b0 <OS_Sched+0x7c>)
 8004870:	781b      	ldrb	r3, [r3, #0]
 8004872:	429a      	cmp	r2, r3
 8004874:	d00b      	beq.n	800488e <OS_Sched+0x5a>
#if OS_TASK_PROFILE_EN > 0u
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
 8004876:	4b0d      	ldr	r3, [pc, #52]	@ (80048ac <OS_Sched+0x78>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800487c:	3201      	adds	r2, #1
 800487e:	641a      	str	r2, [r3, #64]	@ 0x40
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
 8004880:	4b0c      	ldr	r3, [pc, #48]	@ (80048b4 <OS_Sched+0x80>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	3301      	adds	r3, #1
 8004886:	4a0b      	ldr	r2, [pc, #44]	@ (80048b4 <OS_Sched+0x80>)
 8004888:	6013      	str	r3, [r2, #0]
#if defined(OS_TLS_TBL_SIZE) && (OS_TLS_TBL_SIZE > 0u)
                OS_TLS_TaskSw();
#endif
#endif

                OS_TASK_SW();                          /* Perform a context switch                     */
 800488a:	f7fb fd07 	bl	800029c <OSCtxSw>
            }
        }
    }
    OS_EXIT_CRITICAL();
 800488e:	6878      	ldr	r0, [r7, #4]
 8004890:	f7fb fcbb 	bl	800020a <OS_CPU_SR_Restore>
}
 8004894:	bf00      	nop
 8004896:	3708      	adds	r7, #8
 8004898:	46bd      	mov	sp, r7
 800489a:	bd80      	pop	{r7, pc}
 800489c:	20001884 	.word	0x20001884
 80048a0:	20001885 	.word	0x20001885
 80048a4:	20001887 	.word	0x20001887
 80048a8:	20001aac 	.word	0x20001aac
 80048ac:	20001aa4 	.word	0x20001aa4
 80048b0:	20001886 	.word	0x20001886
 80048b4:	20001528 	.word	0x20001528

080048b8 <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
 80048b8:	b480      	push	{r7}
 80048ba:	b083      	sub	sp, #12
 80048bc:	af00      	add	r7, sp, #0
#if OS_LOWEST_PRIO <= 63u                        /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
 80048be:	4b0c      	ldr	r3, [pc, #48]	@ (80048f0 <OS_SchedNew+0x38>)
 80048c0:	781b      	ldrb	r3, [r3, #0]
 80048c2:	461a      	mov	r2, r3
 80048c4:	4b0b      	ldr	r3, [pc, #44]	@ (80048f4 <OS_SchedNew+0x3c>)
 80048c6:	5c9b      	ldrb	r3, [r3, r2]
 80048c8:	71fb      	strb	r3, [r7, #7]
    OSPrioHighRdy = (INT8U)((y << 3u) + OSUnMapTbl[OSRdyTbl[y]]);
 80048ca:	79fb      	ldrb	r3, [r7, #7]
 80048cc:	00db      	lsls	r3, r3, #3
 80048ce:	b2da      	uxtb	r2, r3
 80048d0:	79fb      	ldrb	r3, [r7, #7]
 80048d2:	4909      	ldr	r1, [pc, #36]	@ (80048f8 <OS_SchedNew+0x40>)
 80048d4:	5ccb      	ldrb	r3, [r1, r3]
 80048d6:	4619      	mov	r1, r3
 80048d8:	4b06      	ldr	r3, [pc, #24]	@ (80048f4 <OS_SchedNew+0x3c>)
 80048da:	5c5b      	ldrb	r3, [r3, r1]
 80048dc:	4413      	add	r3, r2
 80048de:	b2da      	uxtb	r2, r3
 80048e0:	4b06      	ldr	r3, [pc, #24]	@ (80048fc <OS_SchedNew+0x44>)
 80048e2:	701a      	strb	r2, [r3, #0]
        OSPrioHighRdy = (INT8U)((y << 4u) + OSUnMapTbl[(*ptbl & 0xFFu)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4u) + OSUnMapTbl[(OS_PRIO)(*ptbl >> 8u) & 0xFFu] + 8u);
    }
#endif
}
 80048e4:	bf00      	nop
 80048e6:	370c      	adds	r7, #12
 80048e8:	46bd      	mov	sp, r7
 80048ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ee:	4770      	bx	lr
 80048f0:	20001888 	.word	0x20001888
 80048f4:	08006db0 	.word	0x08006db0
 80048f8:	2000188c 	.word	0x2000188c
 80048fc:	20001887 	.word	0x20001887

08004900 <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b084      	sub	sp, #16
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0u;
 8004908:	2300      	movs	r3, #0
 800490a:	60fb      	str	r3, [r7, #12]
#endif

    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
 800490c:	2040      	movs	r0, #64	@ 0x40
 800490e:	f7fb fc6e 	bl	80001ee <OS_CPU_SR_Save>
 8004912:	60f8      	str	r0, [r7, #12]
        OSIdleCtr++;
 8004914:	4b05      	ldr	r3, [pc, #20]	@ (800492c <OS_TaskIdle+0x2c>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	3301      	adds	r3, #1
 800491a:	4a04      	ldr	r2, [pc, #16]	@ (800492c <OS_TaskIdle+0x2c>)
 800491c:	6013      	str	r3, [r2, #0]
        OS_EXIT_CRITICAL();
 800491e:	68f8      	ldr	r0, [r7, #12]
 8004920:	f7fb fc73 	bl	800020a <OS_CPU_SR_Restore>
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
 8004924:	f7fe ffdb 	bl	80038de <OSTaskIdleHook>
        OS_ENTER_CRITICAL();
 8004928:	bf00      	nop
 800492a:	e7ef      	b.n	800490c <OS_TaskIdle+0xc>
 800492c:	20001898 	.word	0x20001898

08004930 <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0u
void  OS_TaskStat (void *p_arg)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b084      	sub	sp, #16
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
    INT8S  usage;
#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0u;
 8004938:	2300      	movs	r3, #0
 800493a:	60fb      	str	r3, [r7, #12]
#endif



    p_arg = p_arg;                               /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
 800493c:	e002      	b.n	8004944 <OS_TaskStat+0x14>
        OSTimeDly(2u * OS_TICKS_PER_SEC / 10u);  /* Wait until statistic task is ready                 */
 800493e:	2014      	movs	r0, #20
 8004940:	f000 fe80 	bl	8005644 <OSTimeDly>
    while (OSStatRdy == OS_FALSE) {
 8004944:	4b30      	ldr	r3, [pc, #192]	@ (8004a08 <OS_TaskStat+0xd8>)
 8004946:	781b      	ldrb	r3, [r3, #0]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d0f8      	beq.n	800493e <OS_TaskStat+0xe>
    }
    OSIdleCtrMax /= 100uL;
 800494c:	4b2f      	ldr	r3, [pc, #188]	@ (8004a0c <OS_TaskStat+0xdc>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a2f      	ldr	r2, [pc, #188]	@ (8004a10 <OS_TaskStat+0xe0>)
 8004952:	fba2 2303 	umull	r2, r3, r2, r3
 8004956:	095b      	lsrs	r3, r3, #5
 8004958:	4a2c      	ldr	r2, [pc, #176]	@ (8004a0c <OS_TaskStat+0xdc>)
 800495a:	6013      	str	r3, [r2, #0]
    if (OSIdleCtrMax == 0uL) {
 800495c:	4b2b      	ldr	r3, [pc, #172]	@ (8004a0c <OS_TaskStat+0xdc>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d105      	bne.n	8004970 <OS_TaskStat+0x40>
        OSCPUUsage = 0u;
 8004964:	4b2b      	ldr	r3, [pc, #172]	@ (8004a14 <OS_TaskStat+0xe4>)
 8004966:	2200      	movs	r2, #0
 8004968:	701a      	strb	r2, [r3, #0]
#if OS_TASK_SUSPEND_EN > 0u
        (void)OSTaskSuspend(OS_PRIO_SELF);
 800496a:	20ff      	movs	r0, #255	@ 0xff
 800496c:	f000 fdb4 	bl	80054d8 <OSTaskSuspend>
        for (;;) {
            OSTimeDly(OS_TICKS_PER_SEC);
        }
#endif
    }
    OS_ENTER_CRITICAL();
 8004970:	2040      	movs	r0, #64	@ 0x40
 8004972:	f7fb fc3c 	bl	80001ee <OS_CPU_SR_Save>
 8004976:	60f8      	str	r0, [r7, #12]
    OSIdleCtr = OSIdleCtrMax * 100uL;            /* Set initial CPU usage as 0%                        */
 8004978:	4b24      	ldr	r3, [pc, #144]	@ (8004a0c <OS_TaskStat+0xdc>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	2264      	movs	r2, #100	@ 0x64
 800497e:	fb02 f303 	mul.w	r3, r2, r3
 8004982:	4a25      	ldr	r2, [pc, #148]	@ (8004a18 <OS_TaskStat+0xe8>)
 8004984:	6013      	str	r3, [r2, #0]
    OS_EXIT_CRITICAL();
 8004986:	68f8      	ldr	r0, [r7, #12]
 8004988:	f7fb fc3f 	bl	800020a <OS_CPU_SR_Restore>
    for (;;) {
        OSTimeDly(1);                            /* Synchronize with clock tick                        */
 800498c:	2001      	movs	r0, #1
 800498e:	f000 fe59 	bl	8005644 <OSTimeDly>

        OS_ENTER_CRITICAL();
 8004992:	2040      	movs	r0, #64	@ 0x40
 8004994:	f7fb fc2b 	bl	80001ee <OS_CPU_SR_Save>
 8004998:	60f8      	str	r0, [r7, #12]
        OSIdleCtr = 0uL;                        /* Reset the idle counter for the next second         */
 800499a:	4b1f      	ldr	r3, [pc, #124]	@ (8004a18 <OS_TaskStat+0xe8>)
 800499c:	2200      	movs	r2, #0
 800499e:	601a      	str	r2, [r3, #0]
        OS_EXIT_CRITICAL();
 80049a0:	68f8      	ldr	r0, [r7, #12]
 80049a2:	f7fb fc32 	bl	800020a <OS_CPU_SR_Restore>

        OSTimeDly(OS_TICKS_PER_SEC / 10u);       /* Accumulate OSIdleCtr for the next 1/10 second      */
 80049a6:	200a      	movs	r0, #10
 80049a8:	f000 fe4c 	bl	8005644 <OSTimeDly>

        OS_ENTER_CRITICAL();
 80049ac:	2040      	movs	r0, #64	@ 0x40
 80049ae:	f7fb fc1e 	bl	80001ee <OS_CPU_SR_Save>
 80049b2:	60f8      	str	r0, [r7, #12]
        OSIdleCtrRun = OSIdleCtr;                /* Store number of cycles which elapsed while idle    */
 80049b4:	4b18      	ldr	r3, [pc, #96]	@ (8004a18 <OS_TaskStat+0xe8>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a18      	ldr	r2, [pc, #96]	@ (8004a1c <OS_TaskStat+0xec>)
 80049ba:	6013      	str	r3, [r2, #0]
        OS_EXIT_CRITICAL();
 80049bc:	68f8      	ldr	r0, [r7, #12]
 80049be:	f7fb fc24 	bl	800020a <OS_CPU_SR_Restore>

        usage            = 100 - (INT8S)(OSIdleCtrRun / OSIdleCtrMax);
 80049c2:	4b16      	ldr	r3, [pc, #88]	@ (8004a1c <OS_TaskStat+0xec>)
 80049c4:	681a      	ldr	r2, [r3, #0]
 80049c6:	4b11      	ldr	r3, [pc, #68]	@ (8004a0c <OS_TaskStat+0xdc>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80049ce:	b2db      	uxtb	r3, r3
 80049d0:	f1c3 0364 	rsb	r3, r3, #100	@ 0x64
 80049d4:	b2db      	uxtb	r3, r3
 80049d6:	72fb      	strb	r3, [r7, #11]
        if (usage >= 0) {                        /* Make sure we don't have a negative percentage      */
 80049d8:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	db03      	blt.n	80049e8 <OS_TaskStat+0xb8>
            OSCPUUsage   = (INT8U)usage;
 80049e0:	7afa      	ldrb	r2, [r7, #11]
 80049e2:	4b0c      	ldr	r3, [pc, #48]	@ (8004a14 <OS_TaskStat+0xe4>)
 80049e4:	701a      	strb	r2, [r3, #0]
 80049e6:	e00a      	b.n	80049fe <OS_TaskStat+0xce>
        } else {
            OSCPUUsage   = 0u;
 80049e8:	4b0a      	ldr	r3, [pc, #40]	@ (8004a14 <OS_TaskStat+0xe4>)
 80049ea:	2200      	movs	r2, #0
 80049ec:	701a      	strb	r2, [r3, #0]
            OSIdleCtrMax = OSIdleCtrRun / 100uL; /* Update max counter value to current one            */
 80049ee:	4b0b      	ldr	r3, [pc, #44]	@ (8004a1c <OS_TaskStat+0xec>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4a07      	ldr	r2, [pc, #28]	@ (8004a10 <OS_TaskStat+0xe0>)
 80049f4:	fba2 2303 	umull	r2, r3, r2, r3
 80049f8:	095b      	lsrs	r3, r3, #5
 80049fa:	4a04      	ldr	r2, [pc, #16]	@ (8004a0c <OS_TaskStat+0xdc>)
 80049fc:	6013      	str	r3, [r2, #0]
        }

        OSTaskStatHook();                        /* Invoke user definable hook                         */
 80049fe:	f7fe ff7f 	bl	8003900 <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0u) && (OS_TASK_CREATE_EXT_EN > 0u)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
 8004a02:	f000 f80d 	bl	8004a20 <OS_TaskStatStkChk>
        OSTimeDly(1);                            /* Synchronize with clock tick                        */
 8004a06:	e7c1      	b.n	800498c <OS_TaskStat+0x5c>
 8004a08:	20001680 	.word	0x20001680
 8004a0c:	20001678 	.word	0x20001678
 8004a10:	51eb851f 	.word	0x51eb851f
 8004a14:	20001674 	.word	0x20001674
 8004a18:	20001898 	.word	0x20001898
 8004a1c:	2000167c 	.word	0x2000167c

08004a20 <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0u) && (OS_TASK_CREATE_EXT_EN > 0u)
void  OS_TaskStatStkChk (void)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b084      	sub	sp, #16
 8004a24:	af00      	add	r7, sp, #0
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0u; prio <= OS_TASK_IDLE_PRIO; prio++) {
 8004a26:	2300      	movs	r3, #0
 8004a28:	73fb      	strb	r3, [r7, #15]
 8004a2a:	e023      	b.n	8004a74 <OS_TaskStatStkChk+0x54>
        err = OSTaskStkChk(prio, &stk_data);
 8004a2c:	463a      	mov	r2, r7
 8004a2e:	7bfb      	ldrb	r3, [r7, #15]
 8004a30:	4611      	mov	r1, r2
 8004a32:	4618      	mov	r0, r3
 8004a34:	f000 fce2 	bl	80053fc <OSTaskStkChk>
 8004a38:	4603      	mov	r3, r0
 8004a3a:	73bb      	strb	r3, [r7, #14]
        if (err == OS_ERR_NONE) {
 8004a3c:	7bbb      	ldrb	r3, [r7, #14]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d115      	bne.n	8004a6e <OS_TaskStatStkChk+0x4e>
            ptcb = OSTCBPrioTbl[prio];
 8004a42:	7bfb      	ldrb	r3, [r7, #15]
 8004a44:	4a0f      	ldr	r2, [pc, #60]	@ (8004a84 <OS_TaskStatStkChk+0x64>)
 8004a46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a4a:	60bb      	str	r3, [r7, #8]
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d00d      	beq.n	8004a6e <OS_TaskStatStkChk+0x4e>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	2b01      	cmp	r3, #1
 8004a56:	d00a      	beq.n	8004a6e <OS_TaskStatStkChk+0x4e>
#if OS_TASK_PROFILE_EN > 0u
                    #if OS_STK_GROWTH == 1u
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	689a      	ldr	r2, [r3, #8]
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	68db      	ldr	r3, [r3, #12]
 8004a60:	009b      	lsls	r3, r3, #2
 8004a62:	441a      	add	r2, r3
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	64da      	str	r2, [r3, #76]	@ 0x4c
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store number of entries used   */
 8004a68:	687a      	ldr	r2, [r7, #4]
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	651a      	str	r2, [r3, #80]	@ 0x50
    for (prio = 0u; prio <= OS_TASK_IDLE_PRIO; prio++) {
 8004a6e:	7bfb      	ldrb	r3, [r7, #15]
 8004a70:	3301      	adds	r3, #1
 8004a72:	73fb      	strb	r3, [r7, #15]
 8004a74:	7bfb      	ldrb	r3, [r7, #15]
 8004a76:	2b3f      	cmp	r3, #63	@ 0x3f
 8004a78:	d9d8      	bls.n	8004a2c <OS_TaskStatStkChk+0xc>
#endif
                }
            }
        }
    }
}
 8004a7a:	bf00      	nop
 8004a7c:	bf00      	nop
 8004a7e:	3710      	adds	r7, #16
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bd80      	pop	{r7, pc}
 8004a84:	20001aac 	.word	0x20001aac

08004a88 <OS_TCBInit>:
                   OS_STK  *pbos,
                   INT16U   id,
                   INT32U   stk_size,
                   void    *pext,
                   INT16U   opt)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b088      	sub	sp, #32
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	60b9      	str	r1, [r7, #8]
 8004a90:	607a      	str	r2, [r7, #4]
 8004a92:	461a      	mov	r2, r3
 8004a94:	4603      	mov	r3, r0
 8004a96:	73fb      	strb	r3, [r7, #15]
 8004a98:	4613      	mov	r3, r2
 8004a9a:	81bb      	strh	r3, [r7, #12]
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0u;
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	61bb      	str	r3, [r7, #24]
    INT8U      j;
#endif
#endif


    OS_ENTER_CRITICAL();
 8004aa0:	2040      	movs	r0, #64	@ 0x40
 8004aa2:	f7fb fba4 	bl	80001ee <OS_CPU_SR_Save>
 8004aa6:	61b8      	str	r0, [r7, #24]
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
 8004aa8:	4b6b      	ldr	r3, [pc, #428]	@ (8004c58 <OS_TCBInit+0x1d0>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	617b      	str	r3, [r7, #20]
    if (ptcb != (OS_TCB *)0) {
 8004aae:	697b      	ldr	r3, [r7, #20]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	f000 80c9 	beq.w	8004c48 <OS_TCBInit+0x1c0>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	695b      	ldr	r3, [r3, #20]
 8004aba:	4a67      	ldr	r2, [pc, #412]	@ (8004c58 <OS_TCBInit+0x1d0>)
 8004abc:	6013      	str	r3, [r2, #0]
        OS_EXIT_CRITICAL();
 8004abe:	69b8      	ldr	r0, [r7, #24]
 8004ac0:	f7fb fba3 	bl	800020a <OS_CPU_SR_Restore>
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	68ba      	ldr	r2, [r7, #8]
 8004ac8:	601a      	str	r2, [r3, #0]
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	7bfa      	ldrb	r2, [r7, #15]
 8004ace:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	2200      	movs	r2, #0
 8004ade:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        ptcb->OSTCBDly           = 0u;                     /* Task is not delayed                      */
 8004ae2:	697b      	ldr	r3, [r7, #20]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	635a      	str	r2, [r3, #52]	@ 0x34

#if OS_TASK_CREATE_EXT_EN > 0u
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
 8004ae8:	697b      	ldr	r3, [r7, #20]
 8004aea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004aec:	605a      	str	r2, [r3, #4]
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
 8004aee:	697b      	ldr	r3, [r7, #20]
 8004af0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004af2:	60da      	str	r2, [r3, #12]
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
 8004af4:	697b      	ldr	r3, [r7, #20]
 8004af6:	687a      	ldr	r2, [r7, #4]
 8004af8:	609a      	str	r2, [r3, #8]
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
 8004afa:	697b      	ldr	r3, [r7, #20]
 8004afc:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8004afe:	821a      	strh	r2, [r3, #16]
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
 8004b00:	697b      	ldr	r3, [r7, #20]
 8004b02:	89ba      	ldrh	r2, [r7, #12]
 8004b04:	825a      	strh	r2, [r3, #18]
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0u
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
 8004b06:	697b      	ldr	r3, [r7, #20]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
#endif

#if OS_LOWEST_PRIO <= 63u                                         /* Pre-compute X, Y                  */
        ptcb->OSTCBY             = (INT8U)(prio >> 3u);
 8004b0e:	7bfb      	ldrb	r3, [r7, #15]
 8004b10:	08db      	lsrs	r3, r3, #3
 8004b12:	b2da      	uxtb	r2, r3
 8004b14:	697b      	ldr	r3, [r7, #20]
 8004b16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        ptcb->OSTCBX             = (INT8U)(prio & 0x07u);
 8004b1a:	7bfb      	ldrb	r3, [r7, #15]
 8004b1c:	f003 0307 	and.w	r3, r3, #7
 8004b20:	b2da      	uxtb	r2, r3
 8004b22:	697b      	ldr	r3, [r7, #20]
 8004b24:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
#else                                                             /* Pre-compute X, Y                  */
        ptcb->OSTCBY             = (INT8U)((INT8U)(prio >> 4u) & 0xFFu);
        ptcb->OSTCBX             = (INT8U) (prio & 0x0Fu);
#endif
                                                                  /* Pre-compute BitX and BitY         */
        ptcb->OSTCBBitY          = (OS_PRIO)(1uL << ptcb->OSTCBY);
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b2e:	461a      	mov	r2, r3
 8004b30:	2301      	movs	r3, #1
 8004b32:	4093      	lsls	r3, r2
 8004b34:	b2da      	uxtb	r2, r3
 8004b36:	697b      	ldr	r3, [r7, #20]
 8004b38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        ptcb->OSTCBBitX          = (OS_PRIO)(1uL << ptcb->OSTCBX);
 8004b3c:	697b      	ldr	r3, [r7, #20]
 8004b3e:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 8004b42:	461a      	mov	r2, r3
 8004b44:	2301      	movs	r3, #1
 8004b46:	4093      	lsls	r3, r2
 8004b48:	b2da      	uxtb	r2, r3
 8004b4a:	697b      	ldr	r3, [r7, #20]
 8004b4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
 8004b50:	697b      	ldr	r3, [r7, #20]
 8004b52:	2200      	movs	r2, #0
 8004b54:	61da      	str	r2, [r3, #28]
#if (OS_EVENT_MULTI_EN > 0u)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
 8004b56:	697b      	ldr	r3, [r7, #20]
 8004b58:	2200      	movs	r2, #0
 8004b5a:	621a      	str	r2, [r3, #32]
        ptcb->OSTCBEventMultiRdy = (OS_EVENT  *)0;         /* No events readied for Multipend          */
 8004b5c:	697b      	ldr	r3, [r7, #20]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	625a      	str	r2, [r3, #36]	@ 0x24
#endif
#endif

#if (OS_FLAG_EN > 0u) && (OS_MAX_FLAGS > 0u) && (OS_TASK_DEL_EN > 0u)
        ptcb->OSTCBFlagNode      = (OS_FLAG_NODE *)0;      /* Task is not pending on an event flag     */
 8004b62:	697b      	ldr	r3, [r7, #20]
 8004b64:	2200      	movs	r2, #0
 8004b66:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif

#if (OS_MBOX_EN > 0u) || ((OS_Q_EN > 0u) && (OS_MAX_QS > 0u))
        ptcb->OSTCBMsg           = (void *)0;              /* No message received                      */
 8004b68:	697b      	ldr	r3, [r7, #20]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif

#if OS_TASK_PROFILE_EN > 0u
        ptcb->OSTCBCtxSwCtr      = 0uL;                    /* Initialize profiling variables           */
 8004b6e:	697b      	ldr	r3, [r7, #20]
 8004b70:	2200      	movs	r2, #0
 8004b72:	641a      	str	r2, [r3, #64]	@ 0x40
        ptcb->OSTCBCyclesStart   = 0uL;
 8004b74:	697b      	ldr	r3, [r7, #20]
 8004b76:	2200      	movs	r2, #0
 8004b78:	649a      	str	r2, [r3, #72]	@ 0x48
        ptcb->OSTCBCyclesTot     = 0uL;
 8004b7a:	697b      	ldr	r3, [r7, #20]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	645a      	str	r2, [r3, #68]	@ 0x44
        ptcb->OSTCBStkBase       = (OS_STK *)0;
 8004b80:	697b      	ldr	r3, [r7, #20]
 8004b82:	2200      	movs	r2, #0
 8004b84:	64da      	str	r2, [r3, #76]	@ 0x4c
        ptcb->OSTCBStkUsed       = 0uL;
 8004b86:	697b      	ldr	r3, [r7, #20]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	651a      	str	r2, [r3, #80]	@ 0x50
#endif

#if OS_TASK_NAME_EN > 0u
        ptcb->OSTCBTaskName      = (INT8U *)(void *)"?";
 8004b8c:	697b      	ldr	r3, [r7, #20]
 8004b8e:	4a33      	ldr	r2, [pc, #204]	@ (8004c5c <OS_TCBInit+0x1d4>)
 8004b90:	655a      	str	r2, [r3, #84]	@ 0x54
#endif

#if OS_TASK_REG_TBL_SIZE > 0u                              /* Initialize the task variables            */
        for (i = 0u; i < OS_TASK_REG_TBL_SIZE; i++) {
 8004b92:	2300      	movs	r3, #0
 8004b94:	77fb      	strb	r3, [r7, #31]
 8004b96:	e008      	b.n	8004baa <OS_TCBInit+0x122>
            ptcb->OSTCBRegTbl[i] = 0u;
 8004b98:	7ffa      	ldrb	r2, [r7, #31]
 8004b9a:	697b      	ldr	r3, [r7, #20]
 8004b9c:	3216      	adds	r2, #22
 8004b9e:	2100      	movs	r1, #0
 8004ba0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        for (i = 0u; i < OS_TASK_REG_TBL_SIZE; i++) {
 8004ba4:	7ffb      	ldrb	r3, [r7, #31]
 8004ba6:	3301      	adds	r3, #1
 8004ba8:	77fb      	strb	r3, [r7, #31]
 8004baa:	7ffb      	ldrb	r3, [r7, #31]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d0f3      	beq.n	8004b98 <OS_TCBInit+0x110>
        }
#endif

        OSTCBInitHook(ptcb);
 8004bb0:	6978      	ldr	r0, [r7, #20]
 8004bb2:	f7ff f851 	bl	8003c58 <OSTCBInitHook>

        OS_ENTER_CRITICAL();
 8004bb6:	2040      	movs	r0, #64	@ 0x40
 8004bb8:	f7fb fb19 	bl	80001ee <OS_CPU_SR_Save>
 8004bbc:	61b8      	str	r0, [r7, #24]
        OSTCBPrioTbl[prio] = ptcb;
 8004bbe:	7bfb      	ldrb	r3, [r7, #15]
 8004bc0:	4927      	ldr	r1, [pc, #156]	@ (8004c60 <OS_TCBInit+0x1d8>)
 8004bc2:	697a      	ldr	r2, [r7, #20]
 8004bc4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        OS_EXIT_CRITICAL();
 8004bc8:	69b8      	ldr	r0, [r7, #24]
 8004bca:	f7fb fb1e 	bl	800020a <OS_CPU_SR_Restore>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
 8004bce:	6978      	ldr	r0, [r7, #20]
 8004bd0:	f7fe fe6f 	bl	80038b2 <OSTaskCreateHook>
        }
        OS_TLS_TaskCreate(ptcb);                           /* Call TLS hook                            */
#endif
#endif

        OS_ENTER_CRITICAL();
 8004bd4:	2040      	movs	r0, #64	@ 0x40
 8004bd6:	f7fb fb0a 	bl	80001ee <OS_CPU_SR_Save>
 8004bda:	61b8      	str	r0, [r7, #24]
        ptcb->OSTCBNext = OSTCBList;                       /* Link into TCB chain                      */
 8004bdc:	4b21      	ldr	r3, [pc, #132]	@ (8004c64 <OS_TCBInit+0x1dc>)
 8004bde:	681a      	ldr	r2, [r3, #0]
 8004be0:	697b      	ldr	r3, [r7, #20]
 8004be2:	615a      	str	r2, [r3, #20]
        ptcb->OSTCBPrev = (OS_TCB *)0;
 8004be4:	697b      	ldr	r3, [r7, #20]
 8004be6:	2200      	movs	r2, #0
 8004be8:	619a      	str	r2, [r3, #24]
        if (OSTCBList != (OS_TCB *)0) {
 8004bea:	4b1e      	ldr	r3, [pc, #120]	@ (8004c64 <OS_TCBInit+0x1dc>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d003      	beq.n	8004bfa <OS_TCBInit+0x172>
            OSTCBList->OSTCBPrev = ptcb;
 8004bf2:	4b1c      	ldr	r3, [pc, #112]	@ (8004c64 <OS_TCBInit+0x1dc>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	697a      	ldr	r2, [r7, #20]
 8004bf8:	619a      	str	r2, [r3, #24]
        }
        OSTCBList               = ptcb;
 8004bfa:	4a1a      	ldr	r2, [pc, #104]	@ (8004c64 <OS_TCBInit+0x1dc>)
 8004bfc:	697b      	ldr	r3, [r7, #20]
 8004bfe:	6013      	str	r3, [r2, #0]
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	f893 203e 	ldrb.w	r2, [r3, #62]	@ 0x3e
 8004c06:	4b18      	ldr	r3, [pc, #96]	@ (8004c68 <OS_TCBInit+0x1e0>)
 8004c08:	781b      	ldrb	r3, [r3, #0]
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	b2da      	uxtb	r2, r3
 8004c0e:	4b16      	ldr	r3, [pc, #88]	@ (8004c68 <OS_TCBInit+0x1e0>)
 8004c10:	701a      	strb	r2, [r3, #0]
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 8004c12:	697b      	ldr	r3, [r7, #20]
 8004c14:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004c18:	461a      	mov	r2, r3
 8004c1a:	4b14      	ldr	r3, [pc, #80]	@ (8004c6c <OS_TCBInit+0x1e4>)
 8004c1c:	5c9a      	ldrb	r2, [r3, r2]
 8004c1e:	697b      	ldr	r3, [r7, #20]
 8004c20:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c24:	6979      	ldr	r1, [r7, #20]
 8004c26:	f891 103c 	ldrb.w	r1, [r1, #60]	@ 0x3c
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	b2da      	uxtb	r2, r3
 8004c2e:	4b0f      	ldr	r3, [pc, #60]	@ (8004c6c <OS_TCBInit+0x1e4>)
 8004c30:	545a      	strb	r2, [r3, r1]
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
 8004c32:	4b0f      	ldr	r3, [pc, #60]	@ (8004c70 <OS_TCBInit+0x1e8>)
 8004c34:	781b      	ldrb	r3, [r3, #0]
 8004c36:	3301      	adds	r3, #1
 8004c38:	b2da      	uxtb	r2, r3
 8004c3a:	4b0d      	ldr	r3, [pc, #52]	@ (8004c70 <OS_TCBInit+0x1e8>)
 8004c3c:	701a      	strb	r2, [r3, #0]
        OS_TRACE_TASK_READY(ptcb);
        OS_EXIT_CRITICAL();
 8004c3e:	69b8      	ldr	r0, [r7, #24]
 8004c40:	f7fb fae3 	bl	800020a <OS_CPU_SR_Restore>
        return (OS_ERR_NONE);
 8004c44:	2300      	movs	r3, #0
 8004c46:	e003      	b.n	8004c50 <OS_TCBInit+0x1c8>
    }
    OS_EXIT_CRITICAL();
 8004c48:	69b8      	ldr	r0, [r7, #24]
 8004c4a:	f7fb fade 	bl	800020a <OS_CPU_SR_Restore>
    return (OS_ERR_TASK_NO_MORE_TCB);
 8004c4e:	2342      	movs	r3, #66	@ 0x42
}
 8004c50:	4618      	mov	r0, r3
 8004c52:	3720      	adds	r7, #32
 8004c54:	46bd      	mov	sp, r7
 8004c56:	bd80      	pop	{r7, pc}
 8004c58:	20001aa0 	.word	0x20001aa0
 8004c5c:	08006c84 	.word	0x08006c84
 8004c60:	20001aac 	.word	0x20001aac
 8004c64:	20001aa8 	.word	0x20001aa8
 8004c68:	20001888 	.word	0x20001888
 8004c6c:	2000188c 	.word	0x2000188c
 8004c70:	20001895 	.word	0x20001895

08004c74 <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b084      	sub	sp, #16
 8004c78:	af00      	add	r7, sp, #0
    INT16U        ix_next;
    OS_FLAG_GRP  *pgrp1;
    OS_FLAG_GRP  *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
 8004c7a:	2150      	movs	r1, #80	@ 0x50
 8004c7c:	481b      	ldr	r0, [pc, #108]	@ (8004cec <OS_FlagInit+0x78>)
 8004c7e:	f7ff fdbf 	bl	8004800 <OS_MemClr>
    for (ix = 0u; ix < (OS_MAX_FLAGS - 1u); ix++) {                 /* Init. list of free EVENT FLAGS  */
 8004c82:	2300      	movs	r3, #0
 8004c84:	81fb      	strh	r3, [r7, #14]
 8004c86:	e018      	b.n	8004cba <OS_FlagInit+0x46>
        ix_next = ix + 1u;
 8004c88:	89fb      	ldrh	r3, [r7, #14]
 8004c8a:	3301      	adds	r3, #1
 8004c8c:	80fb      	strh	r3, [r7, #6]
        pgrp1 = &OSFlagTbl[ix];
 8004c8e:	89fb      	ldrh	r3, [r7, #14]
 8004c90:	011b      	lsls	r3, r3, #4
 8004c92:	4a16      	ldr	r2, [pc, #88]	@ (8004cec <OS_FlagInit+0x78>)
 8004c94:	4413      	add	r3, r2
 8004c96:	60bb      	str	r3, [r7, #8]
        pgrp2 = &OSFlagTbl[ix_next];
 8004c98:	88fb      	ldrh	r3, [r7, #6]
 8004c9a:	011b      	lsls	r3, r3, #4
 8004c9c:	4a13      	ldr	r2, [pc, #76]	@ (8004cec <OS_FlagInit+0x78>)
 8004c9e:	4413      	add	r3, r2
 8004ca0:	603b      	str	r3, [r7, #0]
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	701a      	strb	r2, [r3, #0]
        pgrp1->OSFlagWaitList = (void *)pgrp2;
 8004ca8:	68bb      	ldr	r3, [r7, #8]
 8004caa:	683a      	ldr	r2, [r7, #0]
 8004cac:	605a      	str	r2, [r3, #4]
#if OS_FLAG_NAME_EN > 0u
        pgrp1->OSFlagName     = (INT8U *)(void *)"?";               /* Unknown name                    */
 8004cae:	68bb      	ldr	r3, [r7, #8]
 8004cb0:	4a0f      	ldr	r2, [pc, #60]	@ (8004cf0 <OS_FlagInit+0x7c>)
 8004cb2:	60da      	str	r2, [r3, #12]
    for (ix = 0u; ix < (OS_MAX_FLAGS - 1u); ix++) {                 /* Init. list of free EVENT FLAGS  */
 8004cb4:	89fb      	ldrh	r3, [r7, #14]
 8004cb6:	3301      	adds	r3, #1
 8004cb8:	81fb      	strh	r3, [r7, #14]
 8004cba:	89fb      	ldrh	r3, [r7, #14]
 8004cbc:	2b03      	cmp	r3, #3
 8004cbe:	d9e3      	bls.n	8004c88 <OS_FlagInit+0x14>
#endif
    }
    pgrp1                 = &OSFlagTbl[ix];
 8004cc0:	89fb      	ldrh	r3, [r7, #14]
 8004cc2:	011b      	lsls	r3, r3, #4
 8004cc4:	4a09      	ldr	r2, [pc, #36]	@ (8004cec <OS_FlagInit+0x78>)
 8004cc6:	4413      	add	r3, r2
 8004cc8:	60bb      	str	r3, [r7, #8]
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	701a      	strb	r2, [r3, #0]
    pgrp1->OSFlagWaitList = (void *)0;
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	605a      	str	r2, [r3, #4]
#if OS_FLAG_NAME_EN > 0u
    pgrp1->OSFlagName     = (INT8U *)(void *)"?";                   /* Unknown name                    */
 8004cd6:	68bb      	ldr	r3, [r7, #8]
 8004cd8:	4a05      	ldr	r2, [pc, #20]	@ (8004cf0 <OS_FlagInit+0x7c>)
 8004cda:	60da      	str	r2, [r3, #12]
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
 8004cdc:	4b05      	ldr	r3, [pc, #20]	@ (8004cf4 <OS_FlagInit+0x80>)
 8004cde:	4a03      	ldr	r2, [pc, #12]	@ (8004cec <OS_FlagInit+0x78>)
 8004ce0:	601a      	str	r2, [r3, #0]
#endif
}
 8004ce2:	bf00      	nop
 8004ce4:	3710      	adds	r7, #16
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bd80      	pop	{r7, pc}
 8004cea:	bf00      	nop
 8004cec:	20001620 	.word	0x20001620
 8004cf0:	08006ca8 	.word	0x08006ca8
 8004cf4:	20001670 	.word	0x20001670

08004cf8 <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b087      	sub	sp, #28
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	617b      	str	r3, [r7, #20]
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	613b      	str	r3, [r7, #16]
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d10c      	bne.n	8004d2c <OS_FlagUnlink+0x34>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	68db      	ldr	r3, [r3, #12]
 8004d16:	60fb      	str	r3, [r7, #12]
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	693a      	ldr	r2, [r7, #16]
 8004d1c:	605a      	str	r2, [r3, #4]
        if (pnode_next != (OS_FLAG_NODE *)0) {
 8004d1e:	693b      	ldr	r3, [r7, #16]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d00c      	beq.n	8004d3e <OS_FlagUnlink+0x46>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
 8004d24:	693b      	ldr	r3, [r7, #16]
 8004d26:	2200      	movs	r2, #0
 8004d28:	605a      	str	r2, [r3, #4]
 8004d2a:	e008      	b.n	8004d3e <OS_FlagUnlink+0x46>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
 8004d2c:	697b      	ldr	r3, [r7, #20]
 8004d2e:	693a      	ldr	r2, [r7, #16]
 8004d30:	601a      	str	r2, [r3, #0]
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
 8004d32:	693b      	ldr	r3, [r7, #16]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d002      	beq.n	8004d3e <OS_FlagUnlink+0x46>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
 8004d38:	693b      	ldr	r3, [r7, #16]
 8004d3a:	697a      	ldr	r2, [r7, #20]
 8004d3c:	605a      	str	r2, [r3, #4]
        }
    }
#if OS_TASK_DEL_EN > 0u
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	689b      	ldr	r3, [r3, #8]
 8004d42:	60bb      	str	r3, [r7, #8]
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	2200      	movs	r2, #0
 8004d48:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
}
 8004d4a:	bf00      	nop
 8004d4c:	371c      	adds	r7, #28
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d54:	4770      	bx	lr
	...

08004d58 <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b082      	sub	sp, #8
 8004d5c:	af00      	add	r7, sp, #0
#if OS_MAX_MEM_PART >= 2u
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
 8004d5e:	2178      	movs	r1, #120	@ 0x78
 8004d60:	481a      	ldr	r0, [pc, #104]	@ (8004dcc <OS_MemInit+0x74>)
 8004d62:	f7ff fd4d 	bl	8004800 <OS_MemClr>
    for (i = 0u; i < (OS_MAX_MEM_PART - 1u); i++) {       /* Init. list of free memory partitions      */
 8004d66:	2300      	movs	r3, #0
 8004d68:	80fb      	strh	r3, [r7, #6]
 8004d6a:	e017      	b.n	8004d9c <OS_MemInit+0x44>
        pmem                = &OSMemTbl[i];               /* Point to memory control block (MCB)       */
 8004d6c:	88fa      	ldrh	r2, [r7, #6]
 8004d6e:	4613      	mov	r3, r2
 8004d70:	005b      	lsls	r3, r3, #1
 8004d72:	4413      	add	r3, r2
 8004d74:	00db      	lsls	r3, r3, #3
 8004d76:	4a15      	ldr	r2, [pc, #84]	@ (8004dcc <OS_MemInit+0x74>)
 8004d78:	4413      	add	r3, r2
 8004d7a:	603b      	str	r3, [r7, #0]
        pmem->OSMemFreeList = (void *)&OSMemTbl[i + 1u];  /* Chain list of free partitions             */
 8004d7c:	88fb      	ldrh	r3, [r7, #6]
 8004d7e:	1c5a      	adds	r2, r3, #1
 8004d80:	4613      	mov	r3, r2
 8004d82:	005b      	lsls	r3, r3, #1
 8004d84:	4413      	add	r3, r2
 8004d86:	00db      	lsls	r3, r3, #3
 8004d88:	4a10      	ldr	r2, [pc, #64]	@ (8004dcc <OS_MemInit+0x74>)
 8004d8a:	441a      	add	r2, r3
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	605a      	str	r2, [r3, #4]
#if OS_MEM_NAME_EN > 0u
        pmem->OSMemName  = (INT8U *)(void *)"?";
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	4a0f      	ldr	r2, [pc, #60]	@ (8004dd0 <OS_MemInit+0x78>)
 8004d94:	615a      	str	r2, [r3, #20]
    for (i = 0u; i < (OS_MAX_MEM_PART - 1u); i++) {       /* Init. list of free memory partitions      */
 8004d96:	88fb      	ldrh	r3, [r7, #6]
 8004d98:	3301      	adds	r3, #1
 8004d9a:	80fb      	strh	r3, [r7, #6]
 8004d9c:	88fb      	ldrh	r3, [r7, #6]
 8004d9e:	2b03      	cmp	r3, #3
 8004da0:	d9e4      	bls.n	8004d6c <OS_MemInit+0x14>
#endif
    }
    pmem                = &OSMemTbl[i];
 8004da2:	88fa      	ldrh	r2, [r7, #6]
 8004da4:	4613      	mov	r3, r2
 8004da6:	005b      	lsls	r3, r3, #1
 8004da8:	4413      	add	r3, r2
 8004daa:	00db      	lsls	r3, r3, #3
 8004dac:	4a07      	ldr	r2, [pc, #28]	@ (8004dcc <OS_MemInit+0x74>)
 8004dae:	4413      	add	r3, r2
 8004db0:	603b      	str	r3, [r7, #0]
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	2200      	movs	r2, #0
 8004db6:	605a      	str	r2, [r3, #4]
#if OS_MEM_NAME_EN > 0u
    pmem->OSMemName = (INT8U *)(void *)"?";
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	4a05      	ldr	r2, [pc, #20]	@ (8004dd0 <OS_MemInit+0x78>)
 8004dbc:	615a      	str	r2, [r3, #20]
#endif

    OSMemFreeList   = &OSMemTbl[0];                       /* Point to beginning of free list           */
 8004dbe:	4b05      	ldr	r3, [pc, #20]	@ (8004dd4 <OS_MemInit+0x7c>)
 8004dc0:	4a02      	ldr	r2, [pc, #8]	@ (8004dcc <OS_MemInit+0x74>)
 8004dc2:	601a      	str	r2, [r3, #0]
#endif
}
 8004dc4:	bf00      	nop
 8004dc6:	3708      	adds	r7, #8
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	bd80      	pop	{r7, pc}
 8004dcc:	2000239c 	.word	0x2000239c
 8004dd0:	08006cac 	.word	0x08006cac
 8004dd4:	20002398 	.word	0x20002398

08004dd8 <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b084      	sub	sp, #16
 8004ddc:	af00      	add	r7, sp, #0
    OS_Q    *pq1;
    OS_Q    *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
 8004dde:	2160      	movs	r1, #96	@ 0x60
 8004de0:	4819      	ldr	r0, [pc, #100]	@ (8004e48 <OS_QInit+0x70>)
 8004de2:	f7ff fd0d 	bl	8004800 <OS_MemClr>
    for (ix = 0u; ix < (OS_MAX_QS - 1u); ix++) {     /* Init. list of free QUEUE control blocks        */
 8004de6:	2300      	movs	r3, #0
 8004de8:	81fb      	strh	r3, [r7, #14]
 8004dea:	e018      	b.n	8004e1e <OS_QInit+0x46>
        ix_next = ix + 1u;
 8004dec:	89fb      	ldrh	r3, [r7, #14]
 8004dee:	3301      	adds	r3, #1
 8004df0:	80fb      	strh	r3, [r7, #6]
        pq1 = &OSQTbl[ix];
 8004df2:	89fa      	ldrh	r2, [r7, #14]
 8004df4:	4613      	mov	r3, r2
 8004df6:	005b      	lsls	r3, r3, #1
 8004df8:	4413      	add	r3, r2
 8004dfa:	00db      	lsls	r3, r3, #3
 8004dfc:	4a12      	ldr	r2, [pc, #72]	@ (8004e48 <OS_QInit+0x70>)
 8004dfe:	4413      	add	r3, r2
 8004e00:	60bb      	str	r3, [r7, #8]
        pq2 = &OSQTbl[ix_next];
 8004e02:	88fa      	ldrh	r2, [r7, #6]
 8004e04:	4613      	mov	r3, r2
 8004e06:	005b      	lsls	r3, r3, #1
 8004e08:	4413      	add	r3, r2
 8004e0a:	00db      	lsls	r3, r3, #3
 8004e0c:	4a0e      	ldr	r2, [pc, #56]	@ (8004e48 <OS_QInit+0x70>)
 8004e0e:	4413      	add	r3, r2
 8004e10:	603b      	str	r3, [r7, #0]
        pq1->OSQPtr = pq2;
 8004e12:	68bb      	ldr	r3, [r7, #8]
 8004e14:	683a      	ldr	r2, [r7, #0]
 8004e16:	601a      	str	r2, [r3, #0]
    for (ix = 0u; ix < (OS_MAX_QS - 1u); ix++) {     /* Init. list of free QUEUE control blocks        */
 8004e18:	89fb      	ldrh	r3, [r7, #14]
 8004e1a:	3301      	adds	r3, #1
 8004e1c:	81fb      	strh	r3, [r7, #14]
 8004e1e:	89fb      	ldrh	r3, [r7, #14]
 8004e20:	2b02      	cmp	r3, #2
 8004e22:	d9e3      	bls.n	8004dec <OS_QInit+0x14>
    }
    pq1         = &OSQTbl[ix];
 8004e24:	89fa      	ldrh	r2, [r7, #14]
 8004e26:	4613      	mov	r3, r2
 8004e28:	005b      	lsls	r3, r3, #1
 8004e2a:	4413      	add	r3, r2
 8004e2c:	00db      	lsls	r3, r3, #3
 8004e2e:	4a06      	ldr	r2, [pc, #24]	@ (8004e48 <OS_QInit+0x70>)
 8004e30:	4413      	add	r3, r2
 8004e32:	60bb      	str	r3, [r7, #8]
    pq1->OSQPtr = (OS_Q *)0;
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	2200      	movs	r2, #0
 8004e38:	601a      	str	r2, [r3, #0]
    OSQFreeList = &OSQTbl[0];
 8004e3a:	4b04      	ldr	r3, [pc, #16]	@ (8004e4c <OS_QInit+0x74>)
 8004e3c:	4a02      	ldr	r2, [pc, #8]	@ (8004e48 <OS_QInit+0x70>)
 8004e3e:	601a      	str	r2, [r3, #0]
#endif
}
 8004e40:	bf00      	nop
 8004e42:	3710      	adds	r7, #16
 8004e44:	46bd      	mov	sp, r7
 8004e46:	bd80      	pop	{r7, pc}
 8004e48:	20002418 	.word	0x20002418
 8004e4c:	20002414 	.word	0x20002414

08004e50 <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b084      	sub	sp, #16
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	4603      	mov	r3, r0
 8004e58:	80fb      	strh	r3, [r7, #6]
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0u;
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	60fb      	str	r3, [r7, #12]
        OS_SAFETY_CRITICAL_EXCEPTION();
        return ((OS_EVENT *)0);
    }
#endif

    if (OSIntNesting > 0u) {                               /* See if called from ISR ...               */
 8004e5e:	4b18      	ldr	r3, [pc, #96]	@ (8004ec0 <OSSemCreate+0x70>)
 8004e60:	781b      	ldrb	r3, [r3, #0]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d001      	beq.n	8004e6a <OSSemCreate+0x1a>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
 8004e66:	2300      	movs	r3, #0
 8004e68:	e025      	b.n	8004eb6 <OSSemCreate+0x66>
    }
    OS_ENTER_CRITICAL();
 8004e6a:	2040      	movs	r0, #64	@ 0x40
 8004e6c:	f7fb f9bf 	bl	80001ee <OS_CPU_SR_Save>
 8004e70:	60f8      	str	r0, [r7, #12]
    pevent = OSEventFreeList;                              /* Get next free event control block        */
 8004e72:	4b14      	ldr	r3, [pc, #80]	@ (8004ec4 <OSSemCreate+0x74>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	60bb      	str	r3, [r7, #8]
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
 8004e78:	4b12      	ldr	r3, [pc, #72]	@ (8004ec4 <OSSemCreate+0x74>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d004      	beq.n	8004e8a <OSSemCreate+0x3a>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
 8004e80:	4b10      	ldr	r3, [pc, #64]	@ (8004ec4 <OSSemCreate+0x74>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	4a0f      	ldr	r2, [pc, #60]	@ (8004ec4 <OSSemCreate+0x74>)
 8004e88:	6013      	str	r3, [r2, #0]
    }
    OS_EXIT_CRITICAL();
 8004e8a:	68f8      	ldr	r0, [r7, #12]
 8004e8c:	f7fb f9bd 	bl	800020a <OS_CPU_SR_Restore>
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d00e      	beq.n	8004eb4 <OSSemCreate+0x64>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
 8004e96:	68bb      	ldr	r3, [r7, #8]
 8004e98:	2203      	movs	r2, #3
 8004e9a:	701a      	strb	r2, [r3, #0]
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	88fa      	ldrh	r2, [r7, #6]
 8004ea0:	811a      	strh	r2, [r3, #8]
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
 8004ea2:	68bb      	ldr	r3, [r7, #8]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	605a      	str	r2, [r3, #4]
#if OS_EVENT_NAME_EN > 0u
        pevent->OSEventName    = (INT8U *)(void *)"?";
 8004ea8:	68bb      	ldr	r3, [r7, #8]
 8004eaa:	4a07      	ldr	r2, [pc, #28]	@ (8004ec8 <OSSemCreate+0x78>)
 8004eac:	615a      	str	r2, [r3, #20]
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
 8004eae:	68b8      	ldr	r0, [r7, #8]
 8004eb0:	f7ff fb35 	bl	800451e <OS_EventWaitListInit>

        OS_TRACE_SEM_CREATE(pevent, pevent->OSEventName);
    }
    return (pevent);
 8004eb4:	68bb      	ldr	r3, [r7, #8]
}
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	3710      	adds	r7, #16
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd80      	pop	{r7, pc}
 8004ebe:	bf00      	nop
 8004ec0:	20001884 	.word	0x20001884
 8004ec4:	2000152c 	.word	0x2000152c
 8004ec8:	08006cb0 	.word	0x08006cb0

08004ecc <OSSemPend>:
*/

void  OSSemPend (OS_EVENT  *pevent,
                 INT32U     timeout,
                 INT8U     *perr)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b086      	sub	sp, #24
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	60f8      	str	r0, [r7, #12]
 8004ed4:	60b9      	str	r1, [r7, #8]
 8004ed6:	607a      	str	r2, [r7, #4]
#if OS_CRITICAL_METHOD == 3u                          /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0u;
 8004ed8:	2300      	movs	r3, #0
 8004eda:	617b      	str	r3, [r7, #20]
        return;
    }
#endif

#if OS_ARG_CHK_EN > 0u
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d103      	bne.n	8004eea <OSSemPend+0x1e>
        *perr = OS_ERR_PEVENT_NULL;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2204      	movs	r2, #4
 8004ee6:	701a      	strb	r2, [r3, #0]
        return;
 8004ee8:	e080      	b.n	8004fec <OSSemPend+0x120>
    }
#endif

    OS_TRACE_SEM_PEND_ENTER(pevent, timeout);

    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	781b      	ldrb	r3, [r3, #0]
 8004eee:	2b03      	cmp	r3, #3
 8004ef0:	d003      	beq.n	8004efa <OSSemPend+0x2e>
        *perr = OS_ERR_EVENT_TYPE;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2201      	movs	r2, #1
 8004ef6:	701a      	strb	r2, [r3, #0]
        OS_TRACE_SEM_PEND_EXIT(*perr);
        return;
 8004ef8:	e078      	b.n	8004fec <OSSemPend+0x120>
    }
    if (OSIntNesting > 0u) {                          /* See if called from ISR ...                    */
 8004efa:	4b3e      	ldr	r3, [pc, #248]	@ (8004ff4 <OSSemPend+0x128>)
 8004efc:	781b      	ldrb	r3, [r3, #0]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d003      	beq.n	8004f0a <OSSemPend+0x3e>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2202      	movs	r2, #2
 8004f06:	701a      	strb	r2, [r3, #0]
        OS_TRACE_SEM_PEND_EXIT(*perr);
        return;
 8004f08:	e070      	b.n	8004fec <OSSemPend+0x120>
    }
    if (OSLockNesting > 0u) {                         /* See if called with scheduler locked ...       */
 8004f0a:	4b3b      	ldr	r3, [pc, #236]	@ (8004ff8 <OSSemPend+0x12c>)
 8004f0c:	781b      	ldrb	r3, [r3, #0]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d003      	beq.n	8004f1a <OSSemPend+0x4e>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	220d      	movs	r2, #13
 8004f16:	701a      	strb	r2, [r3, #0]
        OS_TRACE_SEM_PEND_EXIT(*perr);
        return;
 8004f18:	e068      	b.n	8004fec <OSSemPend+0x120>
    }
    OS_ENTER_CRITICAL();
 8004f1a:	2040      	movs	r0, #64	@ 0x40
 8004f1c:	f7fb f967 	bl	80001ee <OS_CPU_SR_Save>
 8004f20:	6178      	str	r0, [r7, #20]
    if (pevent->OSEventCnt > 0u) {                    /* If sem. is positive, resource available ...   */
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	891b      	ldrh	r3, [r3, #8]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d00c      	beq.n	8004f44 <OSSemPend+0x78>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	891b      	ldrh	r3, [r3, #8]
 8004f2e:	3b01      	subs	r3, #1
 8004f30:	b29a      	uxth	r2, r3
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	811a      	strh	r2, [r3, #8]
        OS_EXIT_CRITICAL();
 8004f36:	6978      	ldr	r0, [r7, #20]
 8004f38:	f7fb f967 	bl	800020a <OS_CPU_SR_Restore>
        *perr = OS_ERR_NONE;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	701a      	strb	r2, [r3, #0]
        OS_TRACE_SEM_PEND_EXIT(*perr);
        return;
 8004f42:	e053      	b.n	8004fec <OSSemPend+0x120>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
 8004f44:	4b2d      	ldr	r3, [pc, #180]	@ (8004ffc <OSSemPend+0x130>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f893 2038 	ldrb.w	r2, [r3, #56]	@ 0x38
 8004f4c:	4b2b      	ldr	r3, [pc, #172]	@ (8004ffc <OSSemPend+0x130>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f042 0201 	orr.w	r2, r2, #1
 8004f54:	b2d2      	uxtb	r2, r2
 8004f56:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 8004f5a:	4b28      	ldr	r3, [pc, #160]	@ (8004ffc <OSSemPend+0x130>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
 8004f64:	4b25      	ldr	r3, [pc, #148]	@ (8004ffc <OSSemPend+0x130>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	68ba      	ldr	r2, [r7, #8]
 8004f6a:	635a      	str	r2, [r3, #52]	@ 0x34
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
 8004f6c:	68f8      	ldr	r0, [r7, #12]
 8004f6e:	f7ff fa07 	bl	8004380 <OS_EventTaskWait>
    OS_EXIT_CRITICAL();
 8004f72:	6978      	ldr	r0, [r7, #20]
 8004f74:	f7fb f949 	bl	800020a <OS_CPU_SR_Restore>
    OS_Sched();                                       /* Find next highest priority task ready         */
 8004f78:	f7ff fc5c 	bl	8004834 <OS_Sched>
    OS_ENTER_CRITICAL();
 8004f7c:	2040      	movs	r0, #64	@ 0x40
 8004f7e:	f7fb f936 	bl	80001ee <OS_CPU_SR_Save>
 8004f82:	6178      	str	r0, [r7, #20]
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
 8004f84:	4b1d      	ldr	r3, [pc, #116]	@ (8004ffc <OSSemPend+0x130>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d002      	beq.n	8004f96 <OSSemPend+0xca>
 8004f90:	2b02      	cmp	r3, #2
 8004f92:	d004      	beq.n	8004f9e <OSSemPend+0xd2>
 8004f94:	e007      	b.n	8004fa6 <OSSemPend+0xda>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2200      	movs	r2, #0
 8004f9a:	701a      	strb	r2, [r3, #0]
             break;
 8004f9c:	e00d      	b.n	8004fba <OSSemPend+0xee>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	220e      	movs	r2, #14
 8004fa2:	701a      	strb	r2, [r3, #0]
             break;
 8004fa4:	e009      	b.n	8004fba <OSSemPend+0xee>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
 8004fa6:	4b15      	ldr	r3, [pc, #84]	@ (8004ffc <OSSemPend+0x130>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	68f9      	ldr	r1, [r7, #12]
 8004fac:	4618      	mov	r0, r3
 8004fae:	f7ff fa3f 	bl	8004430 <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	220a      	movs	r2, #10
 8004fb6:	701a      	strb	r2, [r3, #0]
             break;
 8004fb8:	bf00      	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
 8004fba:	4b10      	ldr	r3, [pc, #64]	@ (8004ffc <OSSemPend+0x130>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
 8004fc4:	4b0d      	ldr	r3, [pc, #52]	@ (8004ffc <OSSemPend+0x130>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	2200      	movs	r2, #0
 8004fca:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
 8004fce:	4b0b      	ldr	r3, [pc, #44]	@ (8004ffc <OSSemPend+0x130>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	61da      	str	r2, [r3, #28]
#if (OS_EVENT_MULTI_EN > 0u)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
 8004fd6:	4b09      	ldr	r3, [pc, #36]	@ (8004ffc <OSSemPend+0x130>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	621a      	str	r2, [r3, #32]
    OSTCBCur->OSTCBEventMultiRdy = (OS_EVENT  *)0;
 8004fde:	4b07      	ldr	r3, [pc, #28]	@ (8004ffc <OSSemPend+0x130>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	625a      	str	r2, [r3, #36]	@ 0x24
#endif
    OS_EXIT_CRITICAL();
 8004fe6:	6978      	ldr	r0, [r7, #20]
 8004fe8:	f7fb f90f 	bl	800020a <OS_CPU_SR_Restore>

    OS_TRACE_SEM_PEND_EXIT(*perr);
}
 8004fec:	3718      	adds	r7, #24
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bd80      	pop	{r7, pc}
 8004ff2:	bf00      	nop
 8004ff4:	20001884 	.word	0x20001884
 8004ff8:	20001885 	.word	0x20001885
 8004ffc:	20001a9c 	.word	0x20001a9c

08005000 <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b084      	sub	sp, #16
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
#if OS_CRITICAL_METHOD == 3u                          /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0u;
 8005008:	2300      	movs	r3, #0
 800500a:	60fb      	str	r3, [r7, #12]
#endif


#if OS_ARG_CHK_EN > 0u
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d101      	bne.n	8005016 <OSSemPost+0x16>
        return (OS_ERR_PEVENT_NULL);
 8005012:	2304      	movs	r3, #4
 8005014:	e02f      	b.n	8005076 <OSSemPost+0x76>
    }
#endif

    OS_TRACE_SEM_POST_ENTER(pevent);

    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	781b      	ldrb	r3, [r3, #0]
 800501a:	2b03      	cmp	r3, #3
 800501c:	d001      	beq.n	8005022 <OSSemPost+0x22>
        OS_TRACE_SEM_POST_EXIT(OS_ERR_EVENT_TYPE);
        return (OS_ERR_EVENT_TYPE);
 800501e:	2301      	movs	r3, #1
 8005020:	e029      	b.n	8005076 <OSSemPost+0x76>
    }
    OS_ENTER_CRITICAL();
 8005022:	2040      	movs	r0, #64	@ 0x40
 8005024:	f7fb f8e3 	bl	80001ee <OS_CPU_SR_Save>
 8005028:	60f8      	str	r0, [r7, #12]
    if (pevent->OSEventGrp != 0u) {                   /* See if any task waiting for semaphore         */
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	7a9b      	ldrb	r3, [r3, #10]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d00c      	beq.n	800504c <OSSemPost+0x4c>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
 8005032:	2300      	movs	r3, #0
 8005034:	2201      	movs	r2, #1
 8005036:	2100      	movs	r1, #0
 8005038:	6878      	ldr	r0, [r7, #4]
 800503a:	f7ff f92b 	bl	8004294 <OS_EventTaskRdy>
        OS_EXIT_CRITICAL();
 800503e:	68f8      	ldr	r0, [r7, #12]
 8005040:	f7fb f8e3 	bl	800020a <OS_CPU_SR_Restore>
        OS_Sched();                                   /* Find HPT ready to run                         */
 8005044:	f7ff fbf6 	bl	8004834 <OS_Sched>
        OS_TRACE_SEM_POST_EXIT(OS_ERR_NONE);
        return (OS_ERR_NONE);
 8005048:	2300      	movs	r3, #0
 800504a:	e014      	b.n	8005076 <OSSemPost+0x76>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	891b      	ldrh	r3, [r3, #8]
 8005050:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005054:	4293      	cmp	r3, r2
 8005056:	d00a      	beq.n	800506e <OSSemPost+0x6e>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	891b      	ldrh	r3, [r3, #8]
 800505c:	3301      	adds	r3, #1
 800505e:	b29a      	uxth	r2, r3
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	811a      	strh	r2, [r3, #8]
        OS_EXIT_CRITICAL();
 8005064:	68f8      	ldr	r0, [r7, #12]
 8005066:	f7fb f8d0 	bl	800020a <OS_CPU_SR_Restore>
        OS_TRACE_SEM_POST_EXIT(OS_ERR_NONE);
        return (OS_ERR_NONE);
 800506a:	2300      	movs	r3, #0
 800506c:	e003      	b.n	8005076 <OSSemPost+0x76>
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
 800506e:	68f8      	ldr	r0, [r7, #12]
 8005070:	f7fb f8cb 	bl	800020a <OS_CPU_SR_Restore>
    OS_TRACE_SEM_POST_EXIT(OS_ERR_SEM_OVF);

    return (OS_ERR_SEM_OVF);
 8005074:	2333      	movs	r3, #51	@ 0x33
}
 8005076:	4618      	mov	r0, r3
 8005078:	3710      	adds	r7, #16
 800507a:	46bd      	mov	sp, r7
 800507c:	bd80      	pop	{r7, pc}
	...

08005080 <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b08c      	sub	sp, #48	@ 0x30
 8005084:	af04      	add	r7, sp, #16
 8005086:	60f8      	str	r0, [r7, #12]
 8005088:	60b9      	str	r1, [r7, #8]
 800508a:	607a      	str	r2, [r7, #4]
 800508c:	70fb      	strb	r3, [r7, #3]
    OS_STK     *psp;
    INT8U       err;
#if OS_CRITICAL_METHOD == 3u                 /* Allocate storage for CPU status register               */
    OS_CPU_SR   cpu_sr = 0u;
 800508e:	2300      	movs	r3, #0
 8005090:	61fb      	str	r3, [r7, #28]
        return (OS_ERR_ILLEGAL_CREATE_RUN_TIME);
    }
#endif

#if OS_ARG_CHK_EN > 0u
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
 8005092:	78fb      	ldrb	r3, [r7, #3]
 8005094:	2b3f      	cmp	r3, #63	@ 0x3f
 8005096:	d901      	bls.n	800509c <OSTaskCreateExt+0x1c>
        return (OS_ERR_PRIO_INVALID);
 8005098:	232a      	movs	r3, #42	@ 0x2a
 800509a:	e052      	b.n	8005142 <OSTaskCreateExt+0xc2>
    }
#endif
    OS_ENTER_CRITICAL();
 800509c:	2040      	movs	r0, #64	@ 0x40
 800509e:	f7fb f8a6 	bl	80001ee <OS_CPU_SR_Save>
 80050a2:	61f8      	str	r0, [r7, #28]
    if (OSIntNesting > 0u) {                 /* Make sure we don't create the task from within an ISR  */
 80050a4:	4b29      	ldr	r3, [pc, #164]	@ (800514c <OSTaskCreateExt+0xcc>)
 80050a6:	781b      	ldrb	r3, [r3, #0]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d004      	beq.n	80050b6 <OSTaskCreateExt+0x36>
        OS_EXIT_CRITICAL();
 80050ac:	69f8      	ldr	r0, [r7, #28]
 80050ae:	f7fb f8ac 	bl	800020a <OS_CPU_SR_Restore>
        return (OS_ERR_TASK_CREATE_ISR);
 80050b2:	233c      	movs	r3, #60	@ 0x3c
 80050b4:	e045      	b.n	8005142 <OSTaskCreateExt+0xc2>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
 80050b6:	78fb      	ldrb	r3, [r7, #3]
 80050b8:	4a25      	ldr	r2, [pc, #148]	@ (8005150 <OSTaskCreateExt+0xd0>)
 80050ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d13b      	bne.n	800513a <OSTaskCreateExt+0xba>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
 80050c2:	78fb      	ldrb	r3, [r7, #3]
 80050c4:	4a22      	ldr	r2, [pc, #136]	@ (8005150 <OSTaskCreateExt+0xd0>)
 80050c6:	2101      	movs	r1, #1
 80050c8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
 80050cc:	69f8      	ldr	r0, [r7, #28]
 80050ce:	f7fb f89c 	bl	800020a <OS_CPU_SR_Restore>

#if (OS_TASK_STAT_STK_CHK_EN > 0u)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
 80050d2:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80050d4:	461a      	mov	r2, r3
 80050d6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80050d8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80050da:	f000 fa8f 	bl	80055fc <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
 80050de:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80050e0:	687a      	ldr	r2, [r7, #4]
 80050e2:	68b9      	ldr	r1, [r7, #8]
 80050e4:	68f8      	ldr	r0, [r7, #12]
 80050e6:	f7fe fc11 	bl	800390c <OSTaskStkInit>
 80050ea:	61b8      	str	r0, [r7, #24]
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
 80050ec:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80050ee:	78f8      	ldrb	r0, [r7, #3]
 80050f0:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80050f2:	9302      	str	r3, [sp, #8]
 80050f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050f6:	9301      	str	r3, [sp, #4]
 80050f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050fa:	9300      	str	r3, [sp, #0]
 80050fc:	4613      	mov	r3, r2
 80050fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005100:	69b9      	ldr	r1, [r7, #24]
 8005102:	f7ff fcc1 	bl	8004a88 <OS_TCBInit>
 8005106:	4603      	mov	r3, r0
 8005108:	75fb      	strb	r3, [r7, #23]
        if (err == OS_ERR_NONE) {
 800510a:	7dfb      	ldrb	r3, [r7, #23]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d106      	bne.n	800511e <OSTaskCreateExt+0x9e>
            OS_TRACE_TASK_CREATE(OSTCBPrioTbl[prio]);
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
 8005110:	4b10      	ldr	r3, [pc, #64]	@ (8005154 <OSTaskCreateExt+0xd4>)
 8005112:	781b      	ldrb	r3, [r3, #0]
 8005114:	2b01      	cmp	r3, #1
 8005116:	d10e      	bne.n	8005136 <OSTaskCreateExt+0xb6>
                OS_Sched();
 8005118:	f7ff fb8c 	bl	8004834 <OS_Sched>
 800511c:	e00b      	b.n	8005136 <OSTaskCreateExt+0xb6>
            }
        } else {
            OS_ENTER_CRITICAL();
 800511e:	2040      	movs	r0, #64	@ 0x40
 8005120:	f7fb f865 	bl	80001ee <OS_CPU_SR_Save>
 8005124:	61f8      	str	r0, [r7, #28]
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
 8005126:	78fb      	ldrb	r3, [r7, #3]
 8005128:	4a09      	ldr	r2, [pc, #36]	@ (8005150 <OSTaskCreateExt+0xd0>)
 800512a:	2100      	movs	r1, #0
 800512c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            OS_EXIT_CRITICAL();
 8005130:	69f8      	ldr	r0, [r7, #28]
 8005132:	f7fb f86a 	bl	800020a <OS_CPU_SR_Restore>
        }
        return (err);
 8005136:	7dfb      	ldrb	r3, [r7, #23]
 8005138:	e003      	b.n	8005142 <OSTaskCreateExt+0xc2>
    }
    OS_EXIT_CRITICAL();
 800513a:	69f8      	ldr	r0, [r7, #28]
 800513c:	f7fb f865 	bl	800020a <OS_CPU_SR_Restore>
    return (OS_ERR_PRIO_EXIST);
 8005140:	2328      	movs	r3, #40	@ 0x28
}
 8005142:	4618      	mov	r0, r3
 8005144:	3720      	adds	r7, #32
 8005146:	46bd      	mov	sp, r7
 8005148:	bd80      	pop	{r7, pc}
 800514a:	bf00      	nop
 800514c:	20001884 	.word	0x20001884
 8005150:	20001aac 	.word	0x20001aac
 8005154:	20001894 	.word	0x20001894

08005158 <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0u
INT8U  OSTaskDel (INT8U prio)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b086      	sub	sp, #24
 800515c:	af00      	add	r7, sp, #0
 800515e:	4603      	mov	r3, r0
 8005160:	71fb      	strb	r3, [r7, #7]
#if (OS_FLAG_EN > 0u) && (OS_MAX_FLAGS > 0u)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3u                            /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0u;
 8005162:	2300      	movs	r3, #0
 8005164:	617b      	str	r3, [r7, #20]
        OS_SAFETY_CRITICAL_EXCEPTION();
        return (OS_ERR_ILLEGAL_DEL_RUN_TIME);
    }
#endif

    if (OSIntNesting > 0u) {                            /* See if trying to delete from ISR            */
 8005166:	4b6d      	ldr	r3, [pc, #436]	@ (800531c <OSTaskDel+0x1c4>)
 8005168:	781b      	ldrb	r3, [r3, #0]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d001      	beq.n	8005172 <OSTaskDel+0x1a>
        return (OS_ERR_TASK_DEL_ISR);
 800516e:	2340      	movs	r3, #64	@ 0x40
 8005170:	e0d0      	b.n	8005314 <OSTaskDel+0x1bc>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
 8005172:	79fb      	ldrb	r3, [r7, #7]
 8005174:	2b3f      	cmp	r3, #63	@ 0x3f
 8005176:	d101      	bne.n	800517c <OSTaskDel+0x24>
        return (OS_ERR_TASK_DEL_IDLE);
 8005178:	233e      	movs	r3, #62	@ 0x3e
 800517a:	e0cb      	b.n	8005314 <OSTaskDel+0x1bc>
    }
#if OS_ARG_CHK_EN > 0u
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
 800517c:	79fb      	ldrb	r3, [r7, #7]
 800517e:	2b3e      	cmp	r3, #62	@ 0x3e
 8005180:	d904      	bls.n	800518c <OSTaskDel+0x34>
        if (prio != OS_PRIO_SELF) {
 8005182:	79fb      	ldrb	r3, [r7, #7]
 8005184:	2bff      	cmp	r3, #255	@ 0xff
 8005186:	d001      	beq.n	800518c <OSTaskDel+0x34>
            return (OS_ERR_PRIO_INVALID);
 8005188:	232a      	movs	r3, #42	@ 0x2a
 800518a:	e0c3      	b.n	8005314 <OSTaskDel+0x1bc>
        }
    }
#endif

    OS_ENTER_CRITICAL();
 800518c:	2040      	movs	r0, #64	@ 0x40
 800518e:	f7fb f82e 	bl	80001ee <OS_CPU_SR_Save>
 8005192:	6178      	str	r0, [r7, #20]
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
 8005194:	79fb      	ldrb	r3, [r7, #7]
 8005196:	2bff      	cmp	r3, #255	@ 0xff
 8005198:	d104      	bne.n	80051a4 <OSTaskDel+0x4c>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
 800519a:	4b61      	ldr	r3, [pc, #388]	@ (8005320 <OSTaskDel+0x1c8>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 80051a2:	71fb      	strb	r3, [r7, #7]
    }
    ptcb = OSTCBPrioTbl[prio];
 80051a4:	79fb      	ldrb	r3, [r7, #7]
 80051a6:	4a5f      	ldr	r2, [pc, #380]	@ (8005324 <OSTaskDel+0x1cc>)
 80051a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051ac:	613b      	str	r3, [r7, #16]
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
 80051ae:	693b      	ldr	r3, [r7, #16]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d104      	bne.n	80051be <OSTaskDel+0x66>
        OS_EXIT_CRITICAL();
 80051b4:	6978      	ldr	r0, [r7, #20]
 80051b6:	f7fb f828 	bl	800020a <OS_CPU_SR_Restore>
        return (OS_ERR_TASK_NOT_EXIST);
 80051ba:	2343      	movs	r3, #67	@ 0x43
 80051bc:	e0aa      	b.n	8005314 <OSTaskDel+0x1bc>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
 80051be:	693b      	ldr	r3, [r7, #16]
 80051c0:	2b01      	cmp	r3, #1
 80051c2:	d104      	bne.n	80051ce <OSTaskDel+0x76>
        OS_EXIT_CRITICAL();
 80051c4:	6978      	ldr	r0, [r7, #20]
 80051c6:	f7fb f820 	bl	800020a <OS_CPU_SR_Restore>
        return (OS_ERR_TASK_DEL);
 80051ca:	233d      	movs	r3, #61	@ 0x3d
 80051cc:	e0a2      	b.n	8005314 <OSTaskDel+0x1bc>
    }

    OSRdyTbl[ptcb->OSTCBY] &= (OS_PRIO)~ptcb->OSTCBBitX;
 80051ce:	693b      	ldr	r3, [r7, #16]
 80051d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80051d4:	461a      	mov	r2, r3
 80051d6:	4b54      	ldr	r3, [pc, #336]	@ (8005328 <OSTaskDel+0x1d0>)
 80051d8:	5c9a      	ldrb	r2, [r3, r2]
 80051da:	693b      	ldr	r3, [r7, #16]
 80051dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80051e0:	43db      	mvns	r3, r3
 80051e2:	b2db      	uxtb	r3, r3
 80051e4:	6939      	ldr	r1, [r7, #16]
 80051e6:	f891 103c 	ldrb.w	r1, [r1, #60]	@ 0x3c
 80051ea:	4013      	ands	r3, r2
 80051ec:	b2da      	uxtb	r2, r3
 80051ee:	4b4e      	ldr	r3, [pc, #312]	@ (8005328 <OSTaskDel+0x1d0>)
 80051f0:	545a      	strb	r2, [r3, r1]
    OS_TRACE_TASK_SUSPENDED(ptcb);
    if (OSRdyTbl[ptcb->OSTCBY] == 0u) {                 /* Make task not ready                         */
 80051f2:	693b      	ldr	r3, [r7, #16]
 80051f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80051f8:	461a      	mov	r2, r3
 80051fa:	4b4b      	ldr	r3, [pc, #300]	@ (8005328 <OSTaskDel+0x1d0>)
 80051fc:	5c9b      	ldrb	r3, [r3, r2]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d10a      	bne.n	8005218 <OSTaskDel+0xc0>
        OSRdyGrp           &= (OS_PRIO)~ptcb->OSTCBBitY;
 8005202:	693b      	ldr	r3, [r7, #16]
 8005204:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005208:	43db      	mvns	r3, r3
 800520a:	b2da      	uxtb	r2, r3
 800520c:	4b47      	ldr	r3, [pc, #284]	@ (800532c <OSTaskDel+0x1d4>)
 800520e:	781b      	ldrb	r3, [r3, #0]
 8005210:	4013      	ands	r3, r2
 8005212:	b2da      	uxtb	r2, r3
 8005214:	4b45      	ldr	r3, [pc, #276]	@ (800532c <OSTaskDel+0x1d4>)
 8005216:	701a      	strb	r2, [r3, #0]
    }

#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
 8005218:	693b      	ldr	r3, [r7, #16]
 800521a:	69db      	ldr	r3, [r3, #28]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d005      	beq.n	800522c <OSTaskDel+0xd4>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
 8005220:	693b      	ldr	r3, [r7, #16]
 8005222:	69db      	ldr	r3, [r3, #28]
 8005224:	4619      	mov	r1, r3
 8005226:	6938      	ldr	r0, [r7, #16]
 8005228:	f7ff f902 	bl	8004430 <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0u)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
 800522c:	693b      	ldr	r3, [r7, #16]
 800522e:	6a1b      	ldr	r3, [r3, #32]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d005      	beq.n	8005240 <OSTaskDel+0xe8>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
 8005234:	693b      	ldr	r3, [r7, #16]
 8005236:	6a1b      	ldr	r3, [r3, #32]
 8005238:	4619      	mov	r1, r3
 800523a:	6938      	ldr	r0, [r7, #16]
 800523c:	f7ff f92b 	bl	8004496 <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0u) && (OS_MAX_FLAGS > 0u)
    pnode = ptcb->OSTCBFlagNode;
 8005240:	693b      	ldr	r3, [r7, #16]
 8005242:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005244:	60fb      	str	r3, [r7, #12]
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d002      	beq.n	8005252 <OSTaskDel+0xfa>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
 800524c:	68f8      	ldr	r0, [r7, #12]
 800524e:	f7ff fd53 	bl	8004cf8 <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0u;                           /* Prevent OSTimeTick() from updating          */
 8005252:	693b      	ldr	r3, [r7, #16]
 8005254:	2200      	movs	r2, #0
 8005256:	635a      	str	r2, [r3, #52]	@ 0x34
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
 8005258:	693b      	ldr	r3, [r7, #16]
 800525a:	2200      	movs	r2, #0
 800525c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
 8005260:	693b      	ldr	r3, [r7, #16]
 8005262:	2200      	movs	r2, #0
 8005264:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
 8005268:	4b31      	ldr	r3, [pc, #196]	@ (8005330 <OSTaskDel+0x1d8>)
 800526a:	781b      	ldrb	r3, [r3, #0]
 800526c:	2bff      	cmp	r3, #255	@ 0xff
 800526e:	d005      	beq.n	800527c <OSTaskDel+0x124>
        OSLockNesting++;
 8005270:	4b2f      	ldr	r3, [pc, #188]	@ (8005330 <OSTaskDel+0x1d8>)
 8005272:	781b      	ldrb	r3, [r3, #0]
 8005274:	3301      	adds	r3, #1
 8005276:	b2da      	uxtb	r2, r3
 8005278:	4b2d      	ldr	r3, [pc, #180]	@ (8005330 <OSTaskDel+0x1d8>)
 800527a:	701a      	strb	r2, [r3, #0]
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
 800527c:	6978      	ldr	r0, [r7, #20]
 800527e:	f7fa ffc4 	bl	800020a <OS_CPU_SR_Restore>
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
 8005282:	f7fe ffff 	bl	8004284 <OS_Dummy>
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
 8005286:	2040      	movs	r0, #64	@ 0x40
 8005288:	f7fa ffb1 	bl	80001ee <OS_CPU_SR_Save>
 800528c:	6178      	str	r0, [r7, #20]
    if (OSLockNesting > 0u) {                           /* Remove context switch lock                  */
 800528e:	4b28      	ldr	r3, [pc, #160]	@ (8005330 <OSTaskDel+0x1d8>)
 8005290:	781b      	ldrb	r3, [r3, #0]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d005      	beq.n	80052a2 <OSTaskDel+0x14a>
        OSLockNesting--;
 8005296:	4b26      	ldr	r3, [pc, #152]	@ (8005330 <OSTaskDel+0x1d8>)
 8005298:	781b      	ldrb	r3, [r3, #0]
 800529a:	3b01      	subs	r3, #1
 800529c:	b2da      	uxtb	r2, r3
 800529e:	4b24      	ldr	r3, [pc, #144]	@ (8005330 <OSTaskDel+0x1d8>)
 80052a0:	701a      	strb	r2, [r3, #0]
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
 80052a2:	6938      	ldr	r0, [r7, #16]
 80052a4:	f7fe fb10 	bl	80038c8 <OSTaskDelHook>
#if defined(OS_TLS_TBL_SIZE) && (OS_TLS_TBL_SIZE > 0u)
    OS_TLS_TaskDel(ptcb);                               /* Call TLS hook                               */
#endif
#endif

    OSTaskCtr--;                                        /* One less task being managed                 */
 80052a8:	4b22      	ldr	r3, [pc, #136]	@ (8005334 <OSTaskDel+0x1dc>)
 80052aa:	781b      	ldrb	r3, [r3, #0]
 80052ac:	3b01      	subs	r3, #1
 80052ae:	b2da      	uxtb	r2, r3
 80052b0:	4b20      	ldr	r3, [pc, #128]	@ (8005334 <OSTaskDel+0x1dc>)
 80052b2:	701a      	strb	r2, [r3, #0]
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
 80052b4:	79fb      	ldrb	r3, [r7, #7]
 80052b6:	4a1b      	ldr	r2, [pc, #108]	@ (8005324 <OSTaskDel+0x1cc>)
 80052b8:	2100      	movs	r1, #0
 80052ba:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
 80052be:	693b      	ldr	r3, [r7, #16]
 80052c0:	699b      	ldr	r3, [r3, #24]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d108      	bne.n	80052d8 <OSTaskDel+0x180>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	695b      	ldr	r3, [r3, #20]
 80052ca:	2200      	movs	r2, #0
 80052cc:	619a      	str	r2, [r3, #24]
        OSTCBList                  = ptcb->OSTCBNext;
 80052ce:	693b      	ldr	r3, [r7, #16]
 80052d0:	695b      	ldr	r3, [r3, #20]
 80052d2:	4a19      	ldr	r2, [pc, #100]	@ (8005338 <OSTaskDel+0x1e0>)
 80052d4:	6013      	str	r3, [r2, #0]
 80052d6:	e009      	b.n	80052ec <OSTaskDel+0x194>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
 80052d8:	693b      	ldr	r3, [r7, #16]
 80052da:	699b      	ldr	r3, [r3, #24]
 80052dc:	693a      	ldr	r2, [r7, #16]
 80052de:	6952      	ldr	r2, [r2, #20]
 80052e0:	615a      	str	r2, [r3, #20]
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
 80052e2:	693b      	ldr	r3, [r7, #16]
 80052e4:	695b      	ldr	r3, [r3, #20]
 80052e6:	693a      	ldr	r2, [r7, #16]
 80052e8:	6992      	ldr	r2, [r2, #24]
 80052ea:	619a      	str	r2, [r3, #24]
    }
    ptcb->OSTCBNext     = OSTCBFreeList;                /* Return TCB to free TCB list                 */
 80052ec:	4b13      	ldr	r3, [pc, #76]	@ (800533c <OSTaskDel+0x1e4>)
 80052ee:	681a      	ldr	r2, [r3, #0]
 80052f0:	693b      	ldr	r3, [r7, #16]
 80052f2:	615a      	str	r2, [r3, #20]
    OSTCBFreeList       = ptcb;
 80052f4:	4a11      	ldr	r2, [pc, #68]	@ (800533c <OSTaskDel+0x1e4>)
 80052f6:	693b      	ldr	r3, [r7, #16]
 80052f8:	6013      	str	r3, [r2, #0]
#if OS_TASK_NAME_EN > 0u
    ptcb->OSTCBTaskName = (INT8U *)(void *)"?";
 80052fa:	693b      	ldr	r3, [r7, #16]
 80052fc:	4a10      	ldr	r2, [pc, #64]	@ (8005340 <OSTaskDel+0x1e8>)
 80052fe:	655a      	str	r2, [r3, #84]	@ 0x54
#endif
    OS_EXIT_CRITICAL();
 8005300:	6978      	ldr	r0, [r7, #20]
 8005302:	f7fa ff82 	bl	800020a <OS_CPU_SR_Restore>
    if (OSRunning == OS_TRUE) {
 8005306:	4b0f      	ldr	r3, [pc, #60]	@ (8005344 <OSTaskDel+0x1ec>)
 8005308:	781b      	ldrb	r3, [r3, #0]
 800530a:	2b01      	cmp	r3, #1
 800530c:	d101      	bne.n	8005312 <OSTaskDel+0x1ba>
        OS_Sched();                                     /* Find new highest priority task              */
 800530e:	f7ff fa91 	bl	8004834 <OS_Sched>
    }
    return (OS_ERR_NONE);
 8005312:	2300      	movs	r3, #0
}
 8005314:	4618      	mov	r0, r3
 8005316:	3718      	adds	r7, #24
 8005318:	46bd      	mov	sp, r7
 800531a:	bd80      	pop	{r7, pc}
 800531c:	20001884 	.word	0x20001884
 8005320:	20001a9c 	.word	0x20001a9c
 8005324:	20001aac 	.word	0x20001aac
 8005328:	2000188c 	.word	0x2000188c
 800532c:	20001888 	.word	0x20001888
 8005330:	20001885 	.word	0x20001885
 8005334:	20001895 	.word	0x20001895
 8005338:	20001aa8 	.word	0x20001aa8
 800533c:	20001aa0 	.word	0x20001aa0
 8005340:	08006cb4 	.word	0x08006cb4
 8005344:	20001894 	.word	0x20001894

08005348 <OSTaskNameSet>:
*/
#if OS_TASK_NAME_EN > 0u
void  OSTaskNameSet (INT8U   prio,
                     INT8U  *pname,
                     INT8U  *perr)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b086      	sub	sp, #24
 800534c:	af00      	add	r7, sp, #0
 800534e:	4603      	mov	r3, r0
 8005350:	60b9      	str	r1, [r7, #8]
 8005352:	607a      	str	r2, [r7, #4]
 8005354:	73fb      	strb	r3, [r7, #15]
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3u                         /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0u;
 8005356:	2300      	movs	r3, #0
 8005358:	617b      	str	r3, [r7, #20]
        return;
    }
#endif

#if OS_ARG_CHK_EN > 0u
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
 800535a:	7bfb      	ldrb	r3, [r7, #15]
 800535c:	2b3f      	cmp	r3, #63	@ 0x3f
 800535e:	d906      	bls.n	800536e <OSTaskNameSet+0x26>
        if (prio != OS_PRIO_SELF) {
 8005360:	7bfb      	ldrb	r3, [r7, #15]
 8005362:	2bff      	cmp	r3, #255	@ 0xff
 8005364:	d003      	beq.n	800536e <OSTaskNameSet+0x26>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	222a      	movs	r2, #42	@ 0x2a
 800536a:	701a      	strb	r2, [r3, #0]
            return;
 800536c:	e03c      	b.n	80053e8 <OSTaskNameSet+0xa0>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d103      	bne.n	800537c <OSTaskNameSet+0x34>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	220c      	movs	r2, #12
 8005378:	701a      	strb	r2, [r3, #0]
        return;
 800537a:	e035      	b.n	80053e8 <OSTaskNameSet+0xa0>
    }
#endif
    if (OSIntNesting > 0u) {                         /* See if trying to call from an ISR              */
 800537c:	4b1c      	ldr	r3, [pc, #112]	@ (80053f0 <OSTaskNameSet+0xa8>)
 800537e:	781b      	ldrb	r3, [r3, #0]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d003      	beq.n	800538c <OSTaskNameSet+0x44>
        *perr = OS_ERR_NAME_SET_ISR;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2212      	movs	r2, #18
 8005388:	701a      	strb	r2, [r3, #0]
        return;
 800538a:	e02d      	b.n	80053e8 <OSTaskNameSet+0xa0>
    }
    OS_ENTER_CRITICAL();
 800538c:	2040      	movs	r0, #64	@ 0x40
 800538e:	f7fa ff2e 	bl	80001ee <OS_CPU_SR_Save>
 8005392:	6178      	str	r0, [r7, #20]
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
 8005394:	7bfb      	ldrb	r3, [r7, #15]
 8005396:	2bff      	cmp	r3, #255	@ 0xff
 8005398:	d104      	bne.n	80053a4 <OSTaskNameSet+0x5c>
        prio = OSTCBCur->OSTCBPrio;
 800539a:	4b16      	ldr	r3, [pc, #88]	@ (80053f4 <OSTaskNameSet+0xac>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 80053a2:	73fb      	strb	r3, [r7, #15]
    }
    ptcb = OSTCBPrioTbl[prio];
 80053a4:	7bfb      	ldrb	r3, [r7, #15]
 80053a6:	4a14      	ldr	r2, [pc, #80]	@ (80053f8 <OSTaskNameSet+0xb0>)
 80053a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80053ac:	613b      	str	r3, [r7, #16]
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
 80053ae:	693b      	ldr	r3, [r7, #16]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d106      	bne.n	80053c2 <OSTaskNameSet+0x7a>
        OS_EXIT_CRITICAL();                          /* No                                             */
 80053b4:	6978      	ldr	r0, [r7, #20]
 80053b6:	f7fa ff28 	bl	800020a <OS_CPU_SR_Restore>
        *perr = OS_ERR_TASK_NOT_EXIST;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2243      	movs	r2, #67	@ 0x43
 80053be:	701a      	strb	r2, [r3, #0]
        return;
 80053c0:	e012      	b.n	80053e8 <OSTaskNameSet+0xa0>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
 80053c2:	693b      	ldr	r3, [r7, #16]
 80053c4:	2b01      	cmp	r3, #1
 80053c6:	d106      	bne.n	80053d6 <OSTaskNameSet+0x8e>
        OS_EXIT_CRITICAL();                          /* Yes                                            */
 80053c8:	6978      	ldr	r0, [r7, #20]
 80053ca:	f7fa ff1e 	bl	800020a <OS_CPU_SR_Restore>
        *perr = OS_ERR_TASK_NOT_EXIST;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2243      	movs	r2, #67	@ 0x43
 80053d2:	701a      	strb	r2, [r3, #0]
        return;
 80053d4:	e008      	b.n	80053e8 <OSTaskNameSet+0xa0>
    }
    ptcb->OSTCBTaskName = pname;
 80053d6:	693b      	ldr	r3, [r7, #16]
 80053d8:	68ba      	ldr	r2, [r7, #8]
 80053da:	655a      	str	r2, [r3, #84]	@ 0x54
    OS_TRACE_TASK_NAME_SET(ptcb);
    OS_EXIT_CRITICAL();
 80053dc:	6978      	ldr	r0, [r7, #20]
 80053de:	f7fa ff14 	bl	800020a <OS_CPU_SR_Restore>
    *perr               = OS_ERR_NONE;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2200      	movs	r2, #0
 80053e6:	701a      	strb	r2, [r3, #0]
}
 80053e8:	3718      	adds	r7, #24
 80053ea:	46bd      	mov	sp, r7
 80053ec:	bd80      	pop	{r7, pc}
 80053ee:	bf00      	nop
 80053f0:	20001884 	.word	0x20001884
 80053f4:	20001a9c 	.word	0x20001a9c
 80053f8:	20001aac 	.word	0x20001aac

080053fc <OSTaskStkChk>:
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0u) && (OS_TASK_CREATE_EXT_EN > 0u)
INT8U  OSTaskStkChk (INT8U         prio,
                     OS_STK_DATA  *p_stk_data)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b088      	sub	sp, #32
 8005400:	af00      	add	r7, sp, #0
 8005402:	4603      	mov	r3, r0
 8005404:	6039      	str	r1, [r7, #0]
 8005406:	71fb      	strb	r3, [r7, #7]
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3u                           /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0u;
 8005408:	2300      	movs	r3, #0
 800540a:	617b      	str	r3, [r7, #20]
#endif



#if OS_ARG_CHK_EN > 0u
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
 800540c:	79fb      	ldrb	r3, [r7, #7]
 800540e:	2b3f      	cmp	r3, #63	@ 0x3f
 8005410:	d904      	bls.n	800541c <OSTaskStkChk+0x20>
        if (prio != OS_PRIO_SELF) {
 8005412:	79fb      	ldrb	r3, [r7, #7]
 8005414:	2bff      	cmp	r3, #255	@ 0xff
 8005416:	d001      	beq.n	800541c <OSTaskStkChk+0x20>
            return (OS_ERR_PRIO_INVALID);
 8005418:	232a      	movs	r3, #42	@ 0x2a
 800541a:	e054      	b.n	80054c6 <OSTaskStkChk+0xca>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d101      	bne.n	8005426 <OSTaskStkChk+0x2a>
        return (OS_ERR_PDATA_NULL);
 8005422:	2309      	movs	r3, #9
 8005424:	e04f      	b.n	80054c6 <OSTaskStkChk+0xca>
    }
#endif
    p_stk_data->OSFree = 0u;                           /* Assume failure, set to 0 size                */
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	2200      	movs	r2, #0
 800542a:	601a      	str	r2, [r3, #0]
    p_stk_data->OSUsed = 0u;
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	2200      	movs	r2, #0
 8005430:	605a      	str	r2, [r3, #4]
    OS_ENTER_CRITICAL();
 8005432:	2040      	movs	r0, #64	@ 0x40
 8005434:	f7fa fedb 	bl	80001ee <OS_CPU_SR_Save>
 8005438:	6178      	str	r0, [r7, #20]
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
 800543a:	79fb      	ldrb	r3, [r7, #7]
 800543c:	2bff      	cmp	r3, #255	@ 0xff
 800543e:	d104      	bne.n	800544a <OSTaskStkChk+0x4e>
        prio = OSTCBCur->OSTCBPrio;
 8005440:	4b23      	ldr	r3, [pc, #140]	@ (80054d0 <OSTaskStkChk+0xd4>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8005448:	71fb      	strb	r3, [r7, #7]
    }
    ptcb = OSTCBPrioTbl[prio];
 800544a:	79fb      	ldrb	r3, [r7, #7]
 800544c:	4a21      	ldr	r2, [pc, #132]	@ (80054d4 <OSTaskStkChk+0xd8>)
 800544e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005452:	613b      	str	r3, [r7, #16]
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
 8005454:	693b      	ldr	r3, [r7, #16]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d104      	bne.n	8005464 <OSTaskStkChk+0x68>
        OS_EXIT_CRITICAL();
 800545a:	6978      	ldr	r0, [r7, #20]
 800545c:	f7fa fed5 	bl	800020a <OS_CPU_SR_Restore>
        return (OS_ERR_TASK_NOT_EXIST);
 8005460:	2343      	movs	r3, #67	@ 0x43
 8005462:	e030      	b.n	80054c6 <OSTaskStkChk+0xca>
    }
    if (ptcb == OS_TCB_RESERVED) {
 8005464:	693b      	ldr	r3, [r7, #16]
 8005466:	2b01      	cmp	r3, #1
 8005468:	d104      	bne.n	8005474 <OSTaskStkChk+0x78>
        OS_EXIT_CRITICAL();
 800546a:	6978      	ldr	r0, [r7, #20]
 800546c:	f7fa fecd 	bl	800020a <OS_CPU_SR_Restore>
        return (OS_ERR_TASK_NOT_EXIST);
 8005470:	2343      	movs	r3, #67	@ 0x43
 8005472:	e028      	b.n	80054c6 <OSTaskStkChk+0xca>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0u) { /* Make sure stack checking option is set      */
 8005474:	693b      	ldr	r3, [r7, #16]
 8005476:	8a1b      	ldrh	r3, [r3, #16]
 8005478:	f003 0301 	and.w	r3, r3, #1
 800547c:	2b00      	cmp	r3, #0
 800547e:	d104      	bne.n	800548a <OSTaskStkChk+0x8e>
        OS_EXIT_CRITICAL();
 8005480:	6978      	ldr	r0, [r7, #20]
 8005482:	f7fa fec2 	bl	800020a <OS_CPU_SR_Restore>
        return (OS_ERR_TASK_OPT);
 8005486:	2345      	movs	r3, #69	@ 0x45
 8005488:	e01d      	b.n	80054c6 <OSTaskStkChk+0xca>
    }
    nfree = 0u;
 800548a:	2300      	movs	r3, #0
 800548c:	61bb      	str	r3, [r7, #24]
    size  = ptcb->OSTCBStkSize;
 800548e:	693b      	ldr	r3, [r7, #16]
 8005490:	68db      	ldr	r3, [r3, #12]
 8005492:	60fb      	str	r3, [r7, #12]
    pchk  = ptcb->OSTCBStkBottom;
 8005494:	693b      	ldr	r3, [r7, #16]
 8005496:	689b      	ldr	r3, [r3, #8]
 8005498:	61fb      	str	r3, [r7, #28]
    OS_EXIT_CRITICAL();
 800549a:	6978      	ldr	r0, [r7, #20]
 800549c:	f7fa feb5 	bl	800020a <OS_CPU_SR_Restore>
#if OS_STK_GROWTH == 1u
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
 80054a0:	e002      	b.n	80054a8 <OSTaskStkChk+0xac>
        nfree++;
 80054a2:	69bb      	ldr	r3, [r7, #24]
 80054a4:	3301      	adds	r3, #1
 80054a6:	61bb      	str	r3, [r7, #24]
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
 80054a8:	69fb      	ldr	r3, [r7, #28]
 80054aa:	1d1a      	adds	r2, r3, #4
 80054ac:	61fa      	str	r2, [r7, #28]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d0f6      	beq.n	80054a2 <OSTaskStkChk+0xa6>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree;                       /* Store   number of free entries on the stk     */
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	69ba      	ldr	r2, [r7, #24]
 80054b8:	601a      	str	r2, [r3, #0]
    p_stk_data->OSUsed = size - nfree;                /* Compute number of entries used on the stk     */
 80054ba:	68fa      	ldr	r2, [r7, #12]
 80054bc:	69bb      	ldr	r3, [r7, #24]
 80054be:	1ad2      	subs	r2, r2, r3
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	605a      	str	r2, [r3, #4]
    return (OS_ERR_NONE);
 80054c4:	2300      	movs	r3, #0
}
 80054c6:	4618      	mov	r0, r3
 80054c8:	3720      	adds	r7, #32
 80054ca:	46bd      	mov	sp, r7
 80054cc:	bd80      	pop	{r7, pc}
 80054ce:	bf00      	nop
 80054d0:	20001a9c 	.word	0x20001a9c
 80054d4:	20001aac 	.word	0x20001aac

080054d8 <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0u
INT8U  OSTaskSuspend (INT8U prio)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b086      	sub	sp, #24
 80054dc:	af00      	add	r7, sp, #0
 80054de:	4603      	mov	r3, r0
 80054e0:	71fb      	strb	r3, [r7, #7]
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0u;
 80054e2:	2300      	movs	r3, #0
 80054e4:	613b      	str	r3, [r7, #16]
#endif



#if OS_ARG_CHK_EN > 0u
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
 80054e6:	79fb      	ldrb	r3, [r7, #7]
 80054e8:	2b3f      	cmp	r3, #63	@ 0x3f
 80054ea:	d101      	bne.n	80054f0 <OSTaskSuspend+0x18>
        return (OS_ERR_TASK_SUSPEND_IDLE);
 80054ec:	2347      	movs	r3, #71	@ 0x47
 80054ee:	e06a      	b.n	80055c6 <OSTaskSuspend+0xee>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
 80054f0:	79fb      	ldrb	r3, [r7, #7]
 80054f2:	2b3e      	cmp	r3, #62	@ 0x3e
 80054f4:	d904      	bls.n	8005500 <OSTaskSuspend+0x28>
        if (prio != OS_PRIO_SELF) {
 80054f6:	79fb      	ldrb	r3, [r7, #7]
 80054f8:	2bff      	cmp	r3, #255	@ 0xff
 80054fa:	d001      	beq.n	8005500 <OSTaskSuspend+0x28>
            return (OS_ERR_PRIO_INVALID);
 80054fc:	232a      	movs	r3, #42	@ 0x2a
 80054fe:	e062      	b.n	80055c6 <OSTaskSuspend+0xee>
        }
    }
#endif
    OS_ENTER_CRITICAL();
 8005500:	2040      	movs	r0, #64	@ 0x40
 8005502:	f7fa fe74 	bl	80001ee <OS_CPU_SR_Save>
 8005506:	6138      	str	r0, [r7, #16]
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
 8005508:	79fb      	ldrb	r3, [r7, #7]
 800550a:	2bff      	cmp	r3, #255	@ 0xff
 800550c:	d107      	bne.n	800551e <OSTaskSuspend+0x46>
        prio = OSTCBCur->OSTCBPrio;
 800550e:	4b30      	ldr	r3, [pc, #192]	@ (80055d0 <OSTaskSuspend+0xf8>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8005516:	71fb      	strb	r3, [r7, #7]
        self = OS_TRUE;
 8005518:	2301      	movs	r3, #1
 800551a:	75fb      	strb	r3, [r7, #23]
 800551c:	e00b      	b.n	8005536 <OSTaskSuspend+0x5e>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
 800551e:	4b2c      	ldr	r3, [pc, #176]	@ (80055d0 <OSTaskSuspend+0xf8>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8005526:	79fa      	ldrb	r2, [r7, #7]
 8005528:	429a      	cmp	r2, r3
 800552a:	d102      	bne.n	8005532 <OSTaskSuspend+0x5a>
        self = OS_TRUE;
 800552c:	2301      	movs	r3, #1
 800552e:	75fb      	strb	r3, [r7, #23]
 8005530:	e001      	b.n	8005536 <OSTaskSuspend+0x5e>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
 8005532:	2300      	movs	r3, #0
 8005534:	75fb      	strb	r3, [r7, #23]
    }
    ptcb = OSTCBPrioTbl[prio];
 8005536:	79fb      	ldrb	r3, [r7, #7]
 8005538:	4a26      	ldr	r2, [pc, #152]	@ (80055d4 <OSTaskSuspend+0xfc>)
 800553a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800553e:	60fb      	str	r3, [r7, #12]
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d104      	bne.n	8005550 <OSTaskSuspend+0x78>
        OS_EXIT_CRITICAL();
 8005546:	6938      	ldr	r0, [r7, #16]
 8005548:	f7fa fe5f 	bl	800020a <OS_CPU_SR_Restore>
        return (OS_ERR_TASK_SUSPEND_PRIO);
 800554c:	2348      	movs	r3, #72	@ 0x48
 800554e:	e03a      	b.n	80055c6 <OSTaskSuspend+0xee>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	2b01      	cmp	r3, #1
 8005554:	d104      	bne.n	8005560 <OSTaskSuspend+0x88>
        OS_EXIT_CRITICAL();
 8005556:	6938      	ldr	r0, [r7, #16]
 8005558:	f7fa fe57 	bl	800020a <OS_CPU_SR_Restore>
        return (OS_ERR_TASK_NOT_EXIST);
 800555c:	2343      	movs	r3, #67	@ 0x43
 800555e:	e032      	b.n	80055c6 <OSTaskSuspend+0xee>
    }
    y            = ptcb->OSTCBY;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005566:	72fb      	strb	r3, [r7, #11]
    OSRdyTbl[y] &= (OS_PRIO)~ptcb->OSTCBBitX;                   /* Make task not ready                 */
 8005568:	7afb      	ldrb	r3, [r7, #11]
 800556a:	4a1b      	ldr	r2, [pc, #108]	@ (80055d8 <OSTaskSuspend+0x100>)
 800556c:	5cd1      	ldrb	r1, [r2, r3]
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005574:	43db      	mvns	r3, r3
 8005576:	b2da      	uxtb	r2, r3
 8005578:	7afb      	ldrb	r3, [r7, #11]
 800557a:	400a      	ands	r2, r1
 800557c:	b2d1      	uxtb	r1, r2
 800557e:	4a16      	ldr	r2, [pc, #88]	@ (80055d8 <OSTaskSuspend+0x100>)
 8005580:	54d1      	strb	r1, [r2, r3]
    if (OSRdyTbl[y] == 0u) {
 8005582:	7afb      	ldrb	r3, [r7, #11]
 8005584:	4a14      	ldr	r2, [pc, #80]	@ (80055d8 <OSTaskSuspend+0x100>)
 8005586:	5cd3      	ldrb	r3, [r2, r3]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d10a      	bne.n	80055a2 <OSTaskSuspend+0xca>
        OSRdyGrp &= (OS_PRIO)~ptcb->OSTCBBitY;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005592:	43db      	mvns	r3, r3
 8005594:	b2da      	uxtb	r2, r3
 8005596:	4b11      	ldr	r3, [pc, #68]	@ (80055dc <OSTaskSuspend+0x104>)
 8005598:	781b      	ldrb	r3, [r3, #0]
 800559a:	4013      	ands	r3, r2
 800559c:	b2da      	uxtb	r2, r3
 800559e:	4b0f      	ldr	r3, [pc, #60]	@ (80055dc <OSTaskSuspend+0x104>)
 80055a0:	701a      	strb	r2, [r3, #0]
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80055a8:	f043 0308 	orr.w	r3, r3, #8
 80055ac:	b2da      	uxtb	r2, r3
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    OS_EXIT_CRITICAL();
 80055b4:	6938      	ldr	r0, [r7, #16]
 80055b6:	f7fa fe28 	bl	800020a <OS_CPU_SR_Restore>
    OS_TRACE_TASK_SUSPEND(ptcb);
    OS_TRACE_TASK_SUSPENDED(ptcb);
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
 80055ba:	7dfb      	ldrb	r3, [r7, #23]
 80055bc:	2b01      	cmp	r3, #1
 80055be:	d101      	bne.n	80055c4 <OSTaskSuspend+0xec>
        OS_Sched();                                             /* Find new highest priority task      */
 80055c0:	f7ff f938 	bl	8004834 <OS_Sched>
    }
    return (OS_ERR_NONE);
 80055c4:	2300      	movs	r3, #0
}
 80055c6:	4618      	mov	r0, r3
 80055c8:	3718      	adds	r7, #24
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bd80      	pop	{r7, pc}
 80055ce:	bf00      	nop
 80055d0:	20001a9c 	.word	0x20001a9c
 80055d4:	20001aac 	.word	0x20001aac
 80055d8:	2000188c 	.word	0x2000188c
 80055dc:	20001888 	.word	0x20001888

080055e0 <OS_TaskReturn>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_TaskReturn (void)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	af00      	add	r7, sp, #0
    OSTaskReturnHook(OSTCBCur);                   /* Call hook to let user decide on what to do        */
 80055e4:	4b04      	ldr	r3, [pc, #16]	@ (80055f8 <OS_TaskReturn+0x18>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4618      	mov	r0, r3
 80055ea:	f7fe f97e 	bl	80038ea <OSTaskReturnHook>

#if OS_TASK_DEL_EN > 0u
    (void)OSTaskDel(OS_PRIO_SELF);                /* Delete task if it accidentally returns!           */
 80055ee:	20ff      	movs	r0, #255	@ 0xff
 80055f0:	f7ff fdb2 	bl	8005158 <OSTaskDel>
#else
    for (;;) {
        OSTimeDly(OS_TICKS_PER_SEC);
    }
#endif
}
 80055f4:	bf00      	nop
 80055f6:	bd80      	pop	{r7, pc}
 80055f8:	20001a9c 	.word	0x20001a9c

080055fc <OS_TaskStkClr>:
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0u) && (OS_TASK_CREATE_EXT_EN > 0u)
void  OS_TaskStkClr (OS_STK  *pbos,
                     INT32U   size,
                     INT16U   opt)
{
 80055fc:	b480      	push	{r7}
 80055fe:	b085      	sub	sp, #20
 8005600:	af00      	add	r7, sp, #0
 8005602:	60f8      	str	r0, [r7, #12]
 8005604:	60b9      	str	r1, [r7, #8]
 8005606:	4613      	mov	r3, r2
 8005608:	80fb      	strh	r3, [r7, #6]
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000u) {      /* See if stack checking has been enabled       */
 800560a:	88fb      	ldrh	r3, [r7, #6]
 800560c:	f003 0301 	and.w	r3, r3, #1
 8005610:	2b00      	cmp	r3, #0
 8005612:	d010      	beq.n	8005636 <OS_TaskStkClr+0x3a>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000u) {  /* See if stack needs to be cleared             */
 8005614:	88fb      	ldrh	r3, [r7, #6]
 8005616:	f003 0302 	and.w	r3, r3, #2
 800561a:	2b00      	cmp	r3, #0
 800561c:	d00b      	beq.n	8005636 <OS_TaskStkClr+0x3a>
#if OS_STK_GROWTH == 1u
            while (size > 0u) {                        /* Stack grows from HIGH to LOW memory          */
 800561e:	e007      	b.n	8005630 <OS_TaskStkClr+0x34>
                size--;
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	3b01      	subs	r3, #1
 8005624:	60bb      	str	r3, [r7, #8]
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	1d1a      	adds	r2, r3, #4
 800562a:	60fa      	str	r2, [r7, #12]
 800562c:	2200      	movs	r2, #0
 800562e:	601a      	str	r2, [r3, #0]
            while (size > 0u) {                        /* Stack grows from HIGH to LOW memory          */
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d1f4      	bne.n	8005620 <OS_TaskStkClr+0x24>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
 8005636:	bf00      	nop
 8005638:	3714      	adds	r7, #20
 800563a:	46bd      	mov	sp, r7
 800563c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005640:	4770      	bx	lr
	...

08005644 <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT32U ticks)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b084      	sub	sp, #16
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
    INT8U      y;
#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0u;
 800564c:	2300      	movs	r3, #0
 800564e:	60fb      	str	r3, [r7, #12]
#endif



    if (OSIntNesting > 0u) {                     /* See if trying to call from an ISR                  */
 8005650:	4b21      	ldr	r3, [pc, #132]	@ (80056d8 <OSTimeDly+0x94>)
 8005652:	781b      	ldrb	r3, [r3, #0]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d138      	bne.n	80056ca <OSTimeDly+0x86>
        return;
    }
    if (OSLockNesting > 0u) {                    /* See if called with scheduler locked                */
 8005658:	4b20      	ldr	r3, [pc, #128]	@ (80056dc <OSTimeDly+0x98>)
 800565a:	781b      	ldrb	r3, [r3, #0]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d136      	bne.n	80056ce <OSTimeDly+0x8a>
        return;
    }
    if (ticks > 0u) {                            /* 0 means no delay!                                  */
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d034      	beq.n	80056d0 <OSTimeDly+0x8c>
        OS_ENTER_CRITICAL();
 8005666:	2040      	movs	r0, #64	@ 0x40
 8005668:	f7fa fdc1 	bl	80001ee <OS_CPU_SR_Save>
 800566c:	60f8      	str	r0, [r7, #12]
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
 800566e:	4b1c      	ldr	r3, [pc, #112]	@ (80056e0 <OSTimeDly+0x9c>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005676:	72fb      	strb	r3, [r7, #11]
        OSRdyTbl[y] &= (OS_PRIO)~OSTCBCur->OSTCBBitX;
 8005678:	7afb      	ldrb	r3, [r7, #11]
 800567a:	4a1a      	ldr	r2, [pc, #104]	@ (80056e4 <OSTimeDly+0xa0>)
 800567c:	5cd1      	ldrb	r1, [r2, r3]
 800567e:	4b18      	ldr	r3, [pc, #96]	@ (80056e0 <OSTimeDly+0x9c>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005686:	43db      	mvns	r3, r3
 8005688:	b2da      	uxtb	r2, r3
 800568a:	7afb      	ldrb	r3, [r7, #11]
 800568c:	400a      	ands	r2, r1
 800568e:	b2d1      	uxtb	r1, r2
 8005690:	4a14      	ldr	r2, [pc, #80]	@ (80056e4 <OSTimeDly+0xa0>)
 8005692:	54d1      	strb	r1, [r2, r3]
        OS_TRACE_TASK_SUSPENDED(OSTCBCur);
        if (OSRdyTbl[y] == 0u) {
 8005694:	7afb      	ldrb	r3, [r7, #11]
 8005696:	4a13      	ldr	r2, [pc, #76]	@ (80056e4 <OSTimeDly+0xa0>)
 8005698:	5cd3      	ldrb	r3, [r2, r3]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d10b      	bne.n	80056b6 <OSTimeDly+0x72>
            OSRdyGrp &= (OS_PRIO)~OSTCBCur->OSTCBBitY;
 800569e:	4b10      	ldr	r3, [pc, #64]	@ (80056e0 <OSTimeDly+0x9c>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80056a6:	43db      	mvns	r3, r3
 80056a8:	b2da      	uxtb	r2, r3
 80056aa:	4b0f      	ldr	r3, [pc, #60]	@ (80056e8 <OSTimeDly+0xa4>)
 80056ac:	781b      	ldrb	r3, [r3, #0]
 80056ae:	4013      	ands	r3, r2
 80056b0:	b2da      	uxtb	r2, r3
 80056b2:	4b0d      	ldr	r3, [pc, #52]	@ (80056e8 <OSTimeDly+0xa4>)
 80056b4:	701a      	strb	r2, [r3, #0]
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
 80056b6:	4b0a      	ldr	r3, [pc, #40]	@ (80056e0 <OSTimeDly+0x9c>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	687a      	ldr	r2, [r7, #4]
 80056bc:	635a      	str	r2, [r3, #52]	@ 0x34
        OS_TRACE_TASK_DLY(ticks);
        OS_EXIT_CRITICAL();
 80056be:	68f8      	ldr	r0, [r7, #12]
 80056c0:	f7fa fda3 	bl	800020a <OS_CPU_SR_Restore>
        OS_Sched();                              /* Find next task to run!                             */
 80056c4:	f7ff f8b6 	bl	8004834 <OS_Sched>
 80056c8:	e002      	b.n	80056d0 <OSTimeDly+0x8c>
        return;
 80056ca:	bf00      	nop
 80056cc:	e000      	b.n	80056d0 <OSTimeDly+0x8c>
        return;
 80056ce:	bf00      	nop
    }
}
 80056d0:	3710      	adds	r7, #16
 80056d2:	46bd      	mov	sp, r7
 80056d4:	bd80      	pop	{r7, pc}
 80056d6:	bf00      	nop
 80056d8:	20001884 	.word	0x20001884
 80056dc:	20001885 	.word	0x20001885
 80056e0:	20001a9c 	.word	0x20001a9c
 80056e4:	2000188c 	.word	0x2000188c
 80056e8:	20001888 	.word	0x20001888

080056ec <OSTimeDlyHMSM>:
#if OS_TIME_DLY_HMSM_EN > 0u
INT8U  OSTimeDlyHMSM (INT8U   hours,
                      INT8U   minutes,
                      INT8U   seconds,
                      INT16U  ms)
{
 80056ec:	b590      	push	{r4, r7, lr}
 80056ee:	b085      	sub	sp, #20
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	4604      	mov	r4, r0
 80056f4:	4608      	mov	r0, r1
 80056f6:	4611      	mov	r1, r2
 80056f8:	461a      	mov	r2, r3
 80056fa:	4623      	mov	r3, r4
 80056fc:	71fb      	strb	r3, [r7, #7]
 80056fe:	4603      	mov	r3, r0
 8005700:	71bb      	strb	r3, [r7, #6]
 8005702:	460b      	mov	r3, r1
 8005704:	717b      	strb	r3, [r7, #5]
 8005706:	4613      	mov	r3, r2
 8005708:	807b      	strh	r3, [r7, #2]
    INT32U ticks;


    if (OSIntNesting > 0u) {                     /* See if trying to call from an ISR                  */
 800570a:	4b27      	ldr	r3, [pc, #156]	@ (80057a8 <OSTimeDlyHMSM+0xbc>)
 800570c:	781b      	ldrb	r3, [r3, #0]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d001      	beq.n	8005716 <OSTimeDlyHMSM+0x2a>
        return (OS_ERR_TIME_DLY_ISR);
 8005712:	2355      	movs	r3, #85	@ 0x55
 8005714:	e043      	b.n	800579e <OSTimeDlyHMSM+0xb2>
    }
    if (OSLockNesting > 0u) {                    /* See if called with scheduler locked                */
 8005716:	4b25      	ldr	r3, [pc, #148]	@ (80057ac <OSTimeDlyHMSM+0xc0>)
 8005718:	781b      	ldrb	r3, [r3, #0]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d001      	beq.n	8005722 <OSTimeDlyHMSM+0x36>
        return (OS_ERR_SCHED_LOCKED);
 800571e:	2332      	movs	r3, #50	@ 0x32
 8005720:	e03d      	b.n	800579e <OSTimeDlyHMSM+0xb2>
    }
#if OS_ARG_CHK_EN > 0u
    if (hours == 0u) {
 8005722:	79fb      	ldrb	r3, [r7, #7]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d10a      	bne.n	800573e <OSTimeDlyHMSM+0x52>
        if (minutes == 0u) {
 8005728:	79bb      	ldrb	r3, [r7, #6]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d107      	bne.n	800573e <OSTimeDlyHMSM+0x52>
            if (seconds == 0u) {
 800572e:	797b      	ldrb	r3, [r7, #5]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d104      	bne.n	800573e <OSTimeDlyHMSM+0x52>
                if (ms == 0u) {
 8005734:	887b      	ldrh	r3, [r7, #2]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d101      	bne.n	800573e <OSTimeDlyHMSM+0x52>
                    return (OS_ERR_TIME_ZERO_DLY);
 800573a:	2354      	movs	r3, #84	@ 0x54
 800573c:	e02f      	b.n	800579e <OSTimeDlyHMSM+0xb2>
                }
            }
        }
    }
    if (minutes > 59u) {
 800573e:	79bb      	ldrb	r3, [r7, #6]
 8005740:	2b3b      	cmp	r3, #59	@ 0x3b
 8005742:	d901      	bls.n	8005748 <OSTimeDlyHMSM+0x5c>
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
 8005744:	2351      	movs	r3, #81	@ 0x51
 8005746:	e02a      	b.n	800579e <OSTimeDlyHMSM+0xb2>
    }
    if (seconds > 59u) {
 8005748:	797b      	ldrb	r3, [r7, #5]
 800574a:	2b3b      	cmp	r3, #59	@ 0x3b
 800574c:	d901      	bls.n	8005752 <OSTimeDlyHMSM+0x66>
        return (OS_ERR_TIME_INVALID_SECONDS);
 800574e:	2352      	movs	r3, #82	@ 0x52
 8005750:	e025      	b.n	800579e <OSTimeDlyHMSM+0xb2>
    }
    if (ms > 999u) {
 8005752:	887b      	ldrh	r3, [r7, #2]
 8005754:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005758:	d301      	bcc.n	800575e <OSTimeDlyHMSM+0x72>
        return (OS_ERR_TIME_INVALID_MS);
 800575a:	2353      	movs	r3, #83	@ 0x53
 800575c:	e01f      	b.n	800579e <OSTimeDlyHMSM+0xb2>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600uL + (INT32U)minutes * 60uL + (INT32U)seconds) * OS_TICKS_PER_SEC
 800575e:	79fb      	ldrb	r3, [r7, #7]
 8005760:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8005764:	fb02 f103 	mul.w	r1, r2, r3
 8005768:	79ba      	ldrb	r2, [r7, #6]
 800576a:	4613      	mov	r3, r2
 800576c:	011b      	lsls	r3, r3, #4
 800576e:	1a9b      	subs	r3, r3, r2
 8005770:	009b      	lsls	r3, r3, #2
 8005772:	18ca      	adds	r2, r1, r3
 8005774:	797b      	ldrb	r3, [r7, #5]
 8005776:	4413      	add	r3, r2
 8005778:	2264      	movs	r2, #100	@ 0x64
 800577a:	fb03 f202 	mul.w	r2, r3, r2
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500uL / OS_TICKS_PER_SEC) / 1000uL;
 800577e:	887b      	ldrh	r3, [r7, #2]
 8005780:	2164      	movs	r1, #100	@ 0x64
 8005782:	fb01 f303 	mul.w	r3, r1, r3
 8005786:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 800578a:	4909      	ldr	r1, [pc, #36]	@ (80057b0 <OSTimeDlyHMSM+0xc4>)
 800578c:	fba1 1303 	umull	r1, r3, r1, r3
 8005790:	099b      	lsrs	r3, r3, #6
    ticks = ((INT32U)hours * 3600uL + (INT32U)minutes * 60uL + (INT32U)seconds) * OS_TICKS_PER_SEC
 8005792:	4413      	add	r3, r2
 8005794:	60fb      	str	r3, [r7, #12]
    OSTimeDly(ticks);
 8005796:	68f8      	ldr	r0, [r7, #12]
 8005798:	f7ff ff54 	bl	8005644 <OSTimeDly>
    return (OS_ERR_NONE);
 800579c:	2300      	movs	r3, #0
}
 800579e:	4618      	mov	r0, r3
 80057a0:	3714      	adds	r7, #20
 80057a2:	46bd      	mov	sp, r7
 80057a4:	bd90      	pop	{r4, r7, pc}
 80057a6:	bf00      	nop
 80057a8:	20001884 	.word	0x20001884
 80057ac:	20001885 	.word	0x20001885
 80057b0:	10624dd3 	.word	0x10624dd3

080057b4 <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0u
INT32U  OSTimeGet (void)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b082      	sub	sp, #8
 80057b8:	af00      	add	r7, sp, #0
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0u;
 80057ba:	2300      	movs	r3, #0
 80057bc:	607b      	str	r3, [r7, #4]
#endif



    OS_ENTER_CRITICAL();
 80057be:	2040      	movs	r0, #64	@ 0x40
 80057c0:	f7fa fd15 	bl	80001ee <OS_CPU_SR_Save>
 80057c4:	6078      	str	r0, [r7, #4]
    ticks = OSTime;
 80057c6:	4b05      	ldr	r3, [pc, #20]	@ (80057dc <OSTimeGet+0x28>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	603b      	str	r3, [r7, #0]
    OS_EXIT_CRITICAL();
 80057cc:	6878      	ldr	r0, [r7, #4]
 80057ce:	f7fa fd1c 	bl	800020a <OS_CPU_SR_Restore>
    return (ticks);
 80057d2:	683b      	ldr	r3, [r7, #0]
}
 80057d4:	4618      	mov	r0, r3
 80057d6:	3708      	adds	r7, #8
 80057d8:	46bd      	mov	sp, r7
 80057da:	bd80      	pop	{r7, pc}
 80057dc:	2000247c 	.word	0x2000247c

080057e0 <OSTmrSignal>:
*********************************************************************************************************
*/

#if OS_TMR_EN > 0u
INT8U  OSTmrSignal (void)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b082      	sub	sp, #8
 80057e4:	af00      	add	r7, sp, #0
    INT8U  err;


    err = OSSemPost(OSTmrSemSignal);
 80057e6:	4b06      	ldr	r3, [pc, #24]	@ (8005800 <OSTmrSignal+0x20>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4618      	mov	r0, r3
 80057ec:	f7ff fc08 	bl	8005000 <OSSemPost>
 80057f0:	4603      	mov	r3, r0
 80057f2:	71fb      	strb	r3, [r7, #7]
    return (err);
 80057f4:	79fb      	ldrb	r3, [r7, #7]
}
 80057f6:	4618      	mov	r0, r3
 80057f8:	3708      	adds	r7, #8
 80057fa:	46bd      	mov	sp, r7
 80057fc:	bd80      	pop	{r7, pc}
 80057fe:	bf00      	nop
 8005800:	2000248c 	.word	0x2000248c

08005804 <OSTmr_Init>:
*********************************************************************************************************
*/

#if OS_TMR_EN > 0u
void  OSTmr_Init (void)
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b086      	sub	sp, #24
 8005808:	af00      	add	r7, sp, #0
    INT16U   ix_next;
    OS_TMR  *ptmr1;
    OS_TMR  *ptmr2;


    OS_MemClr((INT8U *)&OSTmrTbl[0],      sizeof(OSTmrTbl));            /* Clear all the TMRs                         */
 800580a:	f44f 7120 	mov.w	r1, #640	@ 0x280
 800580e:	4838      	ldr	r0, [pc, #224]	@ (80058f0 <OSTmr_Init+0xec>)
 8005810:	f7fe fff6 	bl	8004800 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTmrWheelTbl[0], sizeof(OSTmrWheelTbl));       /* Clear the timer wheel                      */
 8005814:	2138      	movs	r1, #56	@ 0x38
 8005816:	4837      	ldr	r0, [pc, #220]	@ (80058f4 <OSTmr_Init+0xf0>)
 8005818:	f7fe fff2 	bl	8004800 <OS_MemClr>

    for (ix = 0u; ix < (OS_TMR_CFG_MAX - 1u); ix++) {                   /* Init. list of free TMRs                    */
 800581c:	2300      	movs	r3, #0
 800581e:	82fb      	strh	r3, [r7, #22]
 8005820:	e022      	b.n	8005868 <OSTmr_Init+0x64>
        ix_next = ix + 1u;
 8005822:	8afb      	ldrh	r3, [r7, #22]
 8005824:	3301      	adds	r3, #1
 8005826:	81fb      	strh	r3, [r7, #14]
        ptmr1 = &OSTmrTbl[ix];
 8005828:	8afa      	ldrh	r2, [r7, #22]
 800582a:	4613      	mov	r3, r2
 800582c:	009b      	lsls	r3, r3, #2
 800582e:	4413      	add	r3, r2
 8005830:	00db      	lsls	r3, r3, #3
 8005832:	4a2f      	ldr	r2, [pc, #188]	@ (80058f0 <OSTmr_Init+0xec>)
 8005834:	4413      	add	r3, r2
 8005836:	613b      	str	r3, [r7, #16]
        ptmr2 = &OSTmrTbl[ix_next];
 8005838:	89fa      	ldrh	r2, [r7, #14]
 800583a:	4613      	mov	r3, r2
 800583c:	009b      	lsls	r3, r3, #2
 800583e:	4413      	add	r3, r2
 8005840:	00db      	lsls	r3, r3, #3
 8005842:	4a2b      	ldr	r2, [pc, #172]	@ (80058f0 <OSTmr_Init+0xec>)
 8005844:	4413      	add	r3, r2
 8005846:	60bb      	str	r3, [r7, #8]
        ptmr1->OSTmrType    = OS_TMR_TYPE;
 8005848:	693b      	ldr	r3, [r7, #16]
 800584a:	2264      	movs	r2, #100	@ 0x64
 800584c:	701a      	strb	r2, [r3, #0]
        ptmr1->OSTmrState   = OS_TMR_STATE_UNUSED;                      /* Indicate that timer is inactive            */
 800584e:	693b      	ldr	r3, [r7, #16]
 8005850:	2200      	movs	r2, #0
 8005852:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
        ptmr1->OSTmrNext    = (void *)ptmr2;                            /* Link to next timer                         */
 8005856:	693b      	ldr	r3, [r7, #16]
 8005858:	68ba      	ldr	r2, [r7, #8]
 800585a:	60da      	str	r2, [r3, #12]
#if OS_TMR_CFG_NAME_EN > 0u
        ptmr1->OSTmrName    = (INT8U *)(void *)"?";
 800585c:	693b      	ldr	r3, [r7, #16]
 800585e:	4a26      	ldr	r2, [pc, #152]	@ (80058f8 <OSTmr_Init+0xf4>)
 8005860:	621a      	str	r2, [r3, #32]
    for (ix = 0u; ix < (OS_TMR_CFG_MAX - 1u); ix++) {                   /* Init. list of free TMRs                    */
 8005862:	8afb      	ldrh	r3, [r7, #22]
 8005864:	3301      	adds	r3, #1
 8005866:	82fb      	strh	r3, [r7, #22]
 8005868:	8afb      	ldrh	r3, [r7, #22]
 800586a:	2b0e      	cmp	r3, #14
 800586c:	d9d9      	bls.n	8005822 <OSTmr_Init+0x1e>
#endif
    }
    ptmr1               = &OSTmrTbl[ix];
 800586e:	8afa      	ldrh	r2, [r7, #22]
 8005870:	4613      	mov	r3, r2
 8005872:	009b      	lsls	r3, r3, #2
 8005874:	4413      	add	r3, r2
 8005876:	00db      	lsls	r3, r3, #3
 8005878:	4a1d      	ldr	r2, [pc, #116]	@ (80058f0 <OSTmr_Init+0xec>)
 800587a:	4413      	add	r3, r2
 800587c:	613b      	str	r3, [r7, #16]
    ptmr1->OSTmrType    = OS_TMR_TYPE;
 800587e:	693b      	ldr	r3, [r7, #16]
 8005880:	2264      	movs	r2, #100	@ 0x64
 8005882:	701a      	strb	r2, [r3, #0]
    ptmr1->OSTmrState   = OS_TMR_STATE_UNUSED;                          /* Indicate that timer is inactive            */
 8005884:	693b      	ldr	r3, [r7, #16]
 8005886:	2200      	movs	r2, #0
 8005888:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    ptmr1->OSTmrNext    = (void *)0;                                    /* Last OS_TMR                                */
 800588c:	693b      	ldr	r3, [r7, #16]
 800588e:	2200      	movs	r2, #0
 8005890:	60da      	str	r2, [r3, #12]
#if OS_TMR_CFG_NAME_EN > 0u
    ptmr1->OSTmrName    = (INT8U *)(void *)"?";
 8005892:	693b      	ldr	r3, [r7, #16]
 8005894:	4a18      	ldr	r2, [pc, #96]	@ (80058f8 <OSTmr_Init+0xf4>)
 8005896:	621a      	str	r2, [r3, #32]
#endif
    OSTmrTime           = 0u;
 8005898:	4b18      	ldr	r3, [pc, #96]	@ (80058fc <OSTmr_Init+0xf8>)
 800589a:	2200      	movs	r2, #0
 800589c:	601a      	str	r2, [r3, #0]
    OSTmrUsed           = 0u;
 800589e:	4b18      	ldr	r3, [pc, #96]	@ (8005900 <OSTmr_Init+0xfc>)
 80058a0:	2200      	movs	r2, #0
 80058a2:	801a      	strh	r2, [r3, #0]
    OSTmrFree           = OS_TMR_CFG_MAX;
 80058a4:	4b17      	ldr	r3, [pc, #92]	@ (8005904 <OSTmr_Init+0x100>)
 80058a6:	2210      	movs	r2, #16
 80058a8:	801a      	strh	r2, [r3, #0]
    OSTmrFreeList       = &OSTmrTbl[0];
 80058aa:	4b17      	ldr	r3, [pc, #92]	@ (8005908 <OSTmr_Init+0x104>)
 80058ac:	4a10      	ldr	r2, [pc, #64]	@ (80058f0 <OSTmr_Init+0xec>)
 80058ae:	601a      	str	r2, [r3, #0]
    OSTmrSem            = OSSemCreate(1u);
 80058b0:	2001      	movs	r0, #1
 80058b2:	f7ff facd 	bl	8004e50 <OSSemCreate>
 80058b6:	4603      	mov	r3, r0
 80058b8:	4a14      	ldr	r2, [pc, #80]	@ (800590c <OSTmr_Init+0x108>)
 80058ba:	6013      	str	r3, [r2, #0]
    OSTmrSemSignal      = OSSemCreate(0u);
 80058bc:	2000      	movs	r0, #0
 80058be:	f7ff fac7 	bl	8004e50 <OSSemCreate>
 80058c2:	4603      	mov	r3, r0
 80058c4:	4a12      	ldr	r2, [pc, #72]	@ (8005910 <OSTmr_Init+0x10c>)
 80058c6:	6013      	str	r3, [r2, #0]

#if OS_EVENT_NAME_EN > 0u                                               /* Assign names to semaphores                 */
    OSEventNameSet(OSTmrSem,       (INT8U *)(void *)"uC/OS-II TmrLock",   &err);
 80058c8:	4b10      	ldr	r3, [pc, #64]	@ (800590c <OSTmr_Init+0x108>)
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	1dfa      	adds	r2, r7, #7
 80058ce:	4911      	ldr	r1, [pc, #68]	@ (8005914 <OSTmr_Init+0x110>)
 80058d0:	4618      	mov	r0, r3
 80058d2:	f7fe fae7 	bl	8003ea4 <OSEventNameSet>
    OSEventNameSet(OSTmrSemSignal, (INT8U *)(void *)"uC/OS-II TmrSignal", &err);
 80058d6:	4b0e      	ldr	r3, [pc, #56]	@ (8005910 <OSTmr_Init+0x10c>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	1dfa      	adds	r2, r7, #7
 80058dc:	490e      	ldr	r1, [pc, #56]	@ (8005918 <OSTmr_Init+0x114>)
 80058de:	4618      	mov	r0, r3
 80058e0:	f7fe fae0 	bl	8003ea4 <OSEventNameSet>
#endif

    OSTmr_InitTask();
 80058e4:	f000 f81a 	bl	800591c <OSTmr_InitTask>
}
 80058e8:	bf00      	nop
 80058ea:	3718      	adds	r7, #24
 80058ec:	46bd      	mov	sp, r7
 80058ee:	bd80      	pop	{r7, pc}
 80058f0:	20002490 	.word	0x20002490
 80058f4:	20002914 	.word	0x20002914
 80058f8:	08006cb8 	.word	0x08006cb8
 80058fc:	20002484 	.word	0x20002484
 8005900:	20002482 	.word	0x20002482
 8005904:	20002480 	.word	0x20002480
 8005908:	20002710 	.word	0x20002710
 800590c:	20002488 	.word	0x20002488
 8005910:	2000248c 	.word	0x2000248c
 8005914:	08006cbc 	.word	0x08006cbc
 8005918:	08006cd0 	.word	0x08006cd0

0800591c <OSTmr_InitTask>:
*********************************************************************************************************
*/

#if OS_TMR_EN > 0u
static  void  OSTmr_InitTask (void)
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b088      	sub	sp, #32
 8005920:	af06      	add	r7, sp, #24
#endif


#if OS_TASK_CREATE_EXT_EN > 0u
    #if OS_STK_GROWTH == 1u
    (void)OSTaskCreateExt(OSTmr_Task,
 8005922:	2303      	movs	r3, #3
 8005924:	9304      	str	r3, [sp, #16]
 8005926:	2300      	movs	r3, #0
 8005928:	9303      	str	r3, [sp, #12]
 800592a:	2380      	movs	r3, #128	@ 0x80
 800592c:	9302      	str	r3, [sp, #8]
 800592e:	4b0a      	ldr	r3, [pc, #40]	@ (8005958 <OSTmr_InitTask+0x3c>)
 8005930:	9301      	str	r3, [sp, #4]
 8005932:	f64f 73fd 	movw	r3, #65533	@ 0xfffd
 8005936:	9300      	str	r3, [sp, #0]
 8005938:	233d      	movs	r3, #61	@ 0x3d
 800593a:	4a08      	ldr	r2, [pc, #32]	@ (800595c <OSTmr_InitTask+0x40>)
 800593c:	2100      	movs	r1, #0
 800593e:	4808      	ldr	r0, [pc, #32]	@ (8005960 <OSTmr_InitTask+0x44>)
 8005940:	f7ff fb9e 	bl	8005080 <OSTaskCreateExt>
                       OS_TASK_TMR_PRIO);
    #endif
#endif

#if OS_TASK_NAME_EN > 0u
    OSTaskNameSet(OS_TASK_TMR_PRIO, (INT8U *)(void *)"uC/OS-II Tmr", &err);
 8005944:	1dfb      	adds	r3, r7, #7
 8005946:	461a      	mov	r2, r3
 8005948:	4906      	ldr	r1, [pc, #24]	@ (8005964 <OSTmr_InitTask+0x48>)
 800594a:	203d      	movs	r0, #61	@ 0x3d
 800594c:	f7ff fcfc 	bl	8005348 <OSTaskNameSet>
#endif
}
 8005950:	bf00      	nop
 8005952:	3708      	adds	r7, #8
 8005954:	46bd      	mov	sp, r7
 8005956:	bd80      	pop	{r7, pc}
 8005958:	20002714 	.word	0x20002714
 800595c:	20002910 	.word	0x20002910
 8005960:	08005ae9 	.word	0x08005ae9
 8005964:	08006ce4 	.word	0x08006ce4

08005968 <OSTmr_Link>:
*/

#if OS_TMR_EN > 0u
static  void  OSTmr_Link (OS_TMR  *ptmr,
                          INT8U    type)
{
 8005968:	b480      	push	{r7}
 800596a:	b087      	sub	sp, #28
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
 8005970:	460b      	mov	r3, r1
 8005972:	70fb      	strb	r3, [r7, #3]
    OS_TMR       *ptmr1;
    OS_TMR_WHEEL *pspoke;
    INT16U        spoke;


    ptmr->OSTmrState = OS_TMR_STATE_RUNNING;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2203      	movs	r2, #3
 8005978:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    if (type == OS_TMR_LINK_PERIODIC) {                            /* Determine when timer will expire                */
 800597c:	78fb      	ldrb	r3, [r7, #3]
 800597e:	2b01      	cmp	r3, #1
 8005980:	d107      	bne.n	8005992 <OSTmr_Link+0x2a>
        ptmr->OSTmrMatch = ptmr->OSTmrPeriod + OSTmrTime;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	69da      	ldr	r2, [r3, #28]
 8005986:	4b2b      	ldr	r3, [pc, #172]	@ (8005a34 <OSTmr_Link+0xcc>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	441a      	add	r2, r3
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	615a      	str	r2, [r3, #20]
 8005990:	e012      	b.n	80059b8 <OSTmr_Link+0x50>
    } else {
        if (ptmr->OSTmrDly == 0u) {
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	699b      	ldr	r3, [r3, #24]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d107      	bne.n	80059aa <OSTmr_Link+0x42>
            ptmr->OSTmrMatch = ptmr->OSTmrPeriod + OSTmrTime;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	69da      	ldr	r2, [r3, #28]
 800599e:	4b25      	ldr	r3, [pc, #148]	@ (8005a34 <OSTmr_Link+0xcc>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	441a      	add	r2, r3
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	615a      	str	r2, [r3, #20]
 80059a8:	e006      	b.n	80059b8 <OSTmr_Link+0x50>
        } else {
            ptmr->OSTmrMatch = ptmr->OSTmrDly    + OSTmrTime;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	699a      	ldr	r2, [r3, #24]
 80059ae:	4b21      	ldr	r3, [pc, #132]	@ (8005a34 <OSTmr_Link+0xcc>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	441a      	add	r2, r3
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	615a      	str	r2, [r3, #20]
        }
    }
    spoke  = (INT16U)(ptmr->OSTmrMatch % OS_TMR_CFG_WHEEL_SIZE);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	695a      	ldr	r2, [r3, #20]
 80059bc:	4b1e      	ldr	r3, [pc, #120]	@ (8005a38 <OSTmr_Link+0xd0>)
 80059be:	fba3 1302 	umull	r1, r3, r3, r2
 80059c2:	1ad1      	subs	r1, r2, r3
 80059c4:	0849      	lsrs	r1, r1, #1
 80059c6:	440b      	add	r3, r1
 80059c8:	0899      	lsrs	r1, r3, #2
 80059ca:	460b      	mov	r3, r1
 80059cc:	00db      	lsls	r3, r3, #3
 80059ce:	1a5b      	subs	r3, r3, r1
 80059d0:	1ad1      	subs	r1, r2, r3
 80059d2:	460b      	mov	r3, r1
 80059d4:	82fb      	strh	r3, [r7, #22]
    pspoke = &OSTmrWheelTbl[spoke];
 80059d6:	8afb      	ldrh	r3, [r7, #22]
 80059d8:	00db      	lsls	r3, r3, #3
 80059da:	4a18      	ldr	r2, [pc, #96]	@ (8005a3c <OSTmr_Link+0xd4>)
 80059dc:	4413      	add	r3, r2
 80059de:	613b      	str	r3, [r7, #16]

    if (pspoke->OSTmrFirst == (OS_TMR *)0) {                       /* Link into timer wheel                           */
 80059e0:	693b      	ldr	r3, [r7, #16]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d109      	bne.n	80059fc <OSTmr_Link+0x94>
        pspoke->OSTmrFirst   = ptmr;
 80059e8:	693b      	ldr	r3, [r7, #16]
 80059ea:	687a      	ldr	r2, [r7, #4]
 80059ec:	601a      	str	r2, [r3, #0]
        ptmr->OSTmrNext      = (OS_TMR *)0;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2200      	movs	r2, #0
 80059f2:	60da      	str	r2, [r3, #12]
        pspoke->OSTmrEntries = 1u;
 80059f4:	693b      	ldr	r3, [r7, #16]
 80059f6:	2201      	movs	r2, #1
 80059f8:	809a      	strh	r2, [r3, #4]
 80059fa:	e011      	b.n	8005a20 <OSTmr_Link+0xb8>
    } else {
        ptmr1                = pspoke->OSTmrFirst;                 /* Point to first timer in the spoke               */
 80059fc:	693b      	ldr	r3, [r7, #16]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	60fb      	str	r3, [r7, #12]
        pspoke->OSTmrFirst   = ptmr;
 8005a02:	693b      	ldr	r3, [r7, #16]
 8005a04:	687a      	ldr	r2, [r7, #4]
 8005a06:	601a      	str	r2, [r3, #0]
        ptmr->OSTmrNext      = (void *)ptmr1;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	68fa      	ldr	r2, [r7, #12]
 8005a0c:	60da      	str	r2, [r3, #12]
        ptmr1->OSTmrPrev     = (void *)ptmr;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	687a      	ldr	r2, [r7, #4]
 8005a12:	611a      	str	r2, [r3, #16]
        pspoke->OSTmrEntries++;
 8005a14:	693b      	ldr	r3, [r7, #16]
 8005a16:	889b      	ldrh	r3, [r3, #4]
 8005a18:	3301      	adds	r3, #1
 8005a1a:	b29a      	uxth	r2, r3
 8005a1c:	693b      	ldr	r3, [r7, #16]
 8005a1e:	809a      	strh	r2, [r3, #4]
    }
    ptmr->OSTmrPrev = (void *)0;                                   /* Timer always inserted as first node in list     */
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2200      	movs	r2, #0
 8005a24:	611a      	str	r2, [r3, #16]
}
 8005a26:	bf00      	nop
 8005a28:	371c      	adds	r7, #28
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a30:	4770      	bx	lr
 8005a32:	bf00      	nop
 8005a34:	20002484 	.word	0x20002484
 8005a38:	24924925 	.word	0x24924925
 8005a3c:	20002914 	.word	0x20002914

08005a40 <OSTmr_Unlink>:
*********************************************************************************************************
*/

#if OS_TMR_EN > 0u
static  void  OSTmr_Unlink (OS_TMR *ptmr)
{
 8005a40:	b480      	push	{r7}
 8005a42:	b087      	sub	sp, #28
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
    OS_TMR        *ptmr2;
    OS_TMR_WHEEL  *pspoke;
    INT16U         spoke;


    spoke  = (INT16U)(ptmr->OSTmrMatch % OS_TMR_CFG_WHEEL_SIZE);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	695a      	ldr	r2, [r3, #20]
 8005a4c:	4b24      	ldr	r3, [pc, #144]	@ (8005ae0 <OSTmr_Unlink+0xa0>)
 8005a4e:	fba3 1302 	umull	r1, r3, r3, r2
 8005a52:	1ad1      	subs	r1, r2, r3
 8005a54:	0849      	lsrs	r1, r1, #1
 8005a56:	440b      	add	r3, r1
 8005a58:	0899      	lsrs	r1, r3, #2
 8005a5a:	460b      	mov	r3, r1
 8005a5c:	00db      	lsls	r3, r3, #3
 8005a5e:	1a5b      	subs	r3, r3, r1
 8005a60:	1ad1      	subs	r1, r2, r3
 8005a62:	460b      	mov	r3, r1
 8005a64:	82fb      	strh	r3, [r7, #22]
    pspoke = &OSTmrWheelTbl[spoke];
 8005a66:	8afb      	ldrh	r3, [r7, #22]
 8005a68:	00db      	lsls	r3, r3, #3
 8005a6a:	4a1e      	ldr	r2, [pc, #120]	@ (8005ae4 <OSTmr_Unlink+0xa4>)
 8005a6c:	4413      	add	r3, r2
 8005a6e:	613b      	str	r3, [r7, #16]

    if (pspoke->OSTmrFirst == ptmr) {                       /* See if timer to remove is at the beginning of list     */
 8005a70:	693b      	ldr	r3, [r7, #16]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	687a      	ldr	r2, [r7, #4]
 8005a76:	429a      	cmp	r2, r3
 8005a78:	d10c      	bne.n	8005a94 <OSTmr_Unlink+0x54>
        ptmr1              = (OS_TMR *)ptmr->OSTmrNext;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	68db      	ldr	r3, [r3, #12]
 8005a7e:	60fb      	str	r3, [r7, #12]
        pspoke->OSTmrFirst = (OS_TMR *)ptmr1;
 8005a80:	693b      	ldr	r3, [r7, #16]
 8005a82:	68fa      	ldr	r2, [r7, #12]
 8005a84:	601a      	str	r2, [r3, #0]
        if (ptmr1 != (OS_TMR *)0) {
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d012      	beq.n	8005ab2 <OSTmr_Unlink+0x72>
            ptmr1->OSTmrPrev = (void *)0;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	2200      	movs	r2, #0
 8005a90:	611a      	str	r2, [r3, #16]
 8005a92:	e00e      	b.n	8005ab2 <OSTmr_Unlink+0x72>
        }
    } else {
        ptmr1            = (OS_TMR *)ptmr->OSTmrPrev;       /* Remove timer from somewhere in the list                */
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	691b      	ldr	r3, [r3, #16]
 8005a98:	60fb      	str	r3, [r7, #12]
        ptmr2            = (OS_TMR *)ptmr->OSTmrNext;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	68db      	ldr	r3, [r3, #12]
 8005a9e:	60bb      	str	r3, [r7, #8]
        ptmr1->OSTmrNext = ptmr2;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	68ba      	ldr	r2, [r7, #8]
 8005aa4:	60da      	str	r2, [r3, #12]
        if (ptmr2 != (OS_TMR *)0) {
 8005aa6:	68bb      	ldr	r3, [r7, #8]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d002      	beq.n	8005ab2 <OSTmr_Unlink+0x72>
            ptmr2->OSTmrPrev = (void *)ptmr1;
 8005aac:	68bb      	ldr	r3, [r7, #8]
 8005aae:	68fa      	ldr	r2, [r7, #12]
 8005ab0:	611a      	str	r2, [r3, #16]
        }
    }
    ptmr->OSTmrState = OS_TMR_STATE_STOPPED;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2201      	movs	r2, #1
 8005ab6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    ptmr->OSTmrNext  = (void *)0;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2200      	movs	r2, #0
 8005abe:	60da      	str	r2, [r3, #12]
    ptmr->OSTmrPrev  = (void *)0;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	611a      	str	r2, [r3, #16]
    pspoke->OSTmrEntries--;
 8005ac6:	693b      	ldr	r3, [r7, #16]
 8005ac8:	889b      	ldrh	r3, [r3, #4]
 8005aca:	3b01      	subs	r3, #1
 8005acc:	b29a      	uxth	r2, r3
 8005ace:	693b      	ldr	r3, [r7, #16]
 8005ad0:	809a      	strh	r2, [r3, #4]
}
 8005ad2:	bf00      	nop
 8005ad4:	371c      	adds	r7, #28
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005adc:	4770      	bx	lr
 8005ade:	bf00      	nop
 8005ae0:	24924925 	.word	0x24924925
 8005ae4:	20002914 	.word	0x20002914

08005ae8 <OSTmr_Task>:
*********************************************************************************************************
*/

#if OS_TMR_EN > 0u
static  void  OSTmr_Task (void *p_arg)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b088      	sub	sp, #32
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
    INT16U           spoke;


    p_arg = p_arg;                                               /* Prevent compiler warning for not using 'p_arg'    */
    for (;;) {
        OSSemPend(OSTmrSemSignal, 0u, &err);                     /* Wait for signal indicating time to update timers  */
 8005af0:	4b2a      	ldr	r3, [pc, #168]	@ (8005b9c <OSTmr_Task+0xb4>)
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f107 020b 	add.w	r2, r7, #11
 8005af8:	2100      	movs	r1, #0
 8005afa:	4618      	mov	r0, r3
 8005afc:	f7ff f9e6 	bl	8004ecc <OSSemPend>
        OSSchedLock();
 8005b00:	f7fe fa94 	bl	800402c <OSSchedLock>
        OSTmrTime++;                                             /* Increment the current time                        */
 8005b04:	4b26      	ldr	r3, [pc, #152]	@ (8005ba0 <OSTmr_Task+0xb8>)
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	3301      	adds	r3, #1
 8005b0a:	4a25      	ldr	r2, [pc, #148]	@ (8005ba0 <OSTmr_Task+0xb8>)
 8005b0c:	6013      	str	r3, [r2, #0]
        spoke  = (INT16U)(OSTmrTime % OS_TMR_CFG_WHEEL_SIZE);    /* Position on current timer wheel entry             */
 8005b0e:	4b24      	ldr	r3, [pc, #144]	@ (8005ba0 <OSTmr_Task+0xb8>)
 8005b10:	681a      	ldr	r2, [r3, #0]
 8005b12:	4b24      	ldr	r3, [pc, #144]	@ (8005ba4 <OSTmr_Task+0xbc>)
 8005b14:	fba3 1302 	umull	r1, r3, r3, r2
 8005b18:	1ad1      	subs	r1, r2, r3
 8005b1a:	0849      	lsrs	r1, r1, #1
 8005b1c:	440b      	add	r3, r1
 8005b1e:	0899      	lsrs	r1, r3, #2
 8005b20:	460b      	mov	r3, r1
 8005b22:	00db      	lsls	r3, r3, #3
 8005b24:	1a5b      	subs	r3, r3, r1
 8005b26:	1ad1      	subs	r1, r2, r3
 8005b28:	460b      	mov	r3, r1
 8005b2a:	837b      	strh	r3, [r7, #26]
        pspoke = &OSTmrWheelTbl[spoke];
 8005b2c:	8b7b      	ldrh	r3, [r7, #26]
 8005b2e:	00db      	lsls	r3, r3, #3
 8005b30:	4a1d      	ldr	r2, [pc, #116]	@ (8005ba8 <OSTmr_Task+0xc0>)
 8005b32:	4413      	add	r3, r2
 8005b34:	617b      	str	r3, [r7, #20]
        ptmr   = pspoke->OSTmrFirst;
 8005b36:	697b      	ldr	r3, [r7, #20]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	61fb      	str	r3, [r7, #28]
        while (ptmr != (OS_TMR *)0) {
 8005b3c:	e027      	b.n	8005b8e <OSTmr_Task+0xa6>
            ptmr_next = (OS_TMR *)ptmr->OSTmrNext;               /* Point to next timer to update because current ... */
 8005b3e:	69fb      	ldr	r3, [r7, #28]
 8005b40:	68db      	ldr	r3, [r3, #12]
 8005b42:	613b      	str	r3, [r7, #16]
                                                                 /* ... timer could get unlinked from the wheel.      */
            if (OSTmrTime == ptmr->OSTmrMatch) {                 /* Process each timer that expires                   */
 8005b44:	69fb      	ldr	r3, [r7, #28]
 8005b46:	695a      	ldr	r2, [r3, #20]
 8005b48:	4b15      	ldr	r3, [pc, #84]	@ (8005ba0 <OSTmr_Task+0xb8>)
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	429a      	cmp	r2, r3
 8005b4e:	d11c      	bne.n	8005b8a <OSTmr_Task+0xa2>
                OS_TRACE_TMR_EXPIRED(ptmr);
                OSTmr_Unlink(ptmr);                              /* Remove from current wheel spoke                   */
 8005b50:	69f8      	ldr	r0, [r7, #28]
 8005b52:	f7ff ff75 	bl	8005a40 <OSTmr_Unlink>
                if (ptmr->OSTmrOpt == OS_TMR_OPT_PERIODIC) {
 8005b56:	69fb      	ldr	r3, [r7, #28]
 8005b58:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005b5c:	2b02      	cmp	r3, #2
 8005b5e:	d104      	bne.n	8005b6a <OSTmr_Task+0x82>
                    OSTmr_Link(ptmr, OS_TMR_LINK_PERIODIC);      /* Recalculate new position of timer in wheel        */
 8005b60:	2101      	movs	r1, #1
 8005b62:	69f8      	ldr	r0, [r7, #28]
 8005b64:	f7ff ff00 	bl	8005968 <OSTmr_Link>
 8005b68:	e003      	b.n	8005b72 <OSTmr_Task+0x8a>
                } else {
                    ptmr->OSTmrState = OS_TMR_STATE_COMPLETED;   /* Indicate that the timer has completed             */
 8005b6a:	69fb      	ldr	r3, [r7, #28]
 8005b6c:	2202      	movs	r2, #2
 8005b6e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
                }
                pfnct = ptmr->OSTmrCallback;                     /* Execute callback function if available            */
 8005b72:	69fb      	ldr	r3, [r7, #28]
 8005b74:	685b      	ldr	r3, [r3, #4]
 8005b76:	60fb      	str	r3, [r7, #12]
                if (pfnct != (OS_TMR_CALLBACK)0) {
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d005      	beq.n	8005b8a <OSTmr_Task+0xa2>
                    (*pfnct)((void *)ptmr, ptmr->OSTmrCallbackArg);
 8005b7e:	69fb      	ldr	r3, [r7, #28]
 8005b80:	689a      	ldr	r2, [r3, #8]
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	4611      	mov	r1, r2
 8005b86:	69f8      	ldr	r0, [r7, #28]
 8005b88:	4798      	blx	r3
                }
            }
            ptmr = ptmr_next;
 8005b8a:	693b      	ldr	r3, [r7, #16]
 8005b8c:	61fb      	str	r3, [r7, #28]
        while (ptmr != (OS_TMR *)0) {
 8005b8e:	69fb      	ldr	r3, [r7, #28]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d1d4      	bne.n	8005b3e <OSTmr_Task+0x56>
        }
        OSSchedUnlock();
 8005b94:	f7fe fa72 	bl	800407c <OSSchedUnlock>
        OSSemPend(OSTmrSemSignal, 0u, &err);                     /* Wait for signal indicating time to update timers  */
 8005b98:	e7aa      	b.n	8005af0 <OSTmr_Task+0x8>
 8005b9a:	bf00      	nop
 8005b9c:	2000248c 	.word	0x2000248c
 8005ba0:	20002484 	.word	0x20002484
 8005ba4:	24924925 	.word	0x24924925
 8005ba8:	20002914 	.word	0x20002914

08005bac <std>:
 8005bac:	2300      	movs	r3, #0
 8005bae:	b510      	push	{r4, lr}
 8005bb0:	4604      	mov	r4, r0
 8005bb2:	e9c0 3300 	strd	r3, r3, [r0]
 8005bb6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005bba:	6083      	str	r3, [r0, #8]
 8005bbc:	8181      	strh	r1, [r0, #12]
 8005bbe:	6643      	str	r3, [r0, #100]	@ 0x64
 8005bc0:	81c2      	strh	r2, [r0, #14]
 8005bc2:	6183      	str	r3, [r0, #24]
 8005bc4:	4619      	mov	r1, r3
 8005bc6:	2208      	movs	r2, #8
 8005bc8:	305c      	adds	r0, #92	@ 0x5c
 8005bca:	f000 f9c2 	bl	8005f52 <memset>
 8005bce:	4b0d      	ldr	r3, [pc, #52]	@ (8005c04 <std+0x58>)
 8005bd0:	6263      	str	r3, [r4, #36]	@ 0x24
 8005bd2:	4b0d      	ldr	r3, [pc, #52]	@ (8005c08 <std+0x5c>)
 8005bd4:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005bd6:	4b0d      	ldr	r3, [pc, #52]	@ (8005c0c <std+0x60>)
 8005bd8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005bda:	4b0d      	ldr	r3, [pc, #52]	@ (8005c10 <std+0x64>)
 8005bdc:	6323      	str	r3, [r4, #48]	@ 0x30
 8005bde:	4b0d      	ldr	r3, [pc, #52]	@ (8005c14 <std+0x68>)
 8005be0:	6224      	str	r4, [r4, #32]
 8005be2:	429c      	cmp	r4, r3
 8005be4:	d006      	beq.n	8005bf4 <std+0x48>
 8005be6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005bea:	4294      	cmp	r4, r2
 8005bec:	d002      	beq.n	8005bf4 <std+0x48>
 8005bee:	33d0      	adds	r3, #208	@ 0xd0
 8005bf0:	429c      	cmp	r4, r3
 8005bf2:	d105      	bne.n	8005c00 <std+0x54>
 8005bf4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005bf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005bfc:	f000 ba22 	b.w	8006044 <__retarget_lock_init_recursive>
 8005c00:	bd10      	pop	{r4, pc}
 8005c02:	bf00      	nop
 8005c04:	08005ecd 	.word	0x08005ecd
 8005c08:	08005eef 	.word	0x08005eef
 8005c0c:	08005f27 	.word	0x08005f27
 8005c10:	08005f4b 	.word	0x08005f4b
 8005c14:	2000294c 	.word	0x2000294c

08005c18 <stdio_exit_handler>:
 8005c18:	4a02      	ldr	r2, [pc, #8]	@ (8005c24 <stdio_exit_handler+0xc>)
 8005c1a:	4903      	ldr	r1, [pc, #12]	@ (8005c28 <stdio_exit_handler+0x10>)
 8005c1c:	4803      	ldr	r0, [pc, #12]	@ (8005c2c <stdio_exit_handler+0x14>)
 8005c1e:	f000 b869 	b.w	8005cf4 <_fwalk_sglue>
 8005c22:	bf00      	nop
 8005c24:	2000000c 	.word	0x2000000c
 8005c28:	080068f5 	.word	0x080068f5
 8005c2c:	2000001c 	.word	0x2000001c

08005c30 <cleanup_stdio>:
 8005c30:	6841      	ldr	r1, [r0, #4]
 8005c32:	4b0c      	ldr	r3, [pc, #48]	@ (8005c64 <cleanup_stdio+0x34>)
 8005c34:	4299      	cmp	r1, r3
 8005c36:	b510      	push	{r4, lr}
 8005c38:	4604      	mov	r4, r0
 8005c3a:	d001      	beq.n	8005c40 <cleanup_stdio+0x10>
 8005c3c:	f000 fe5a 	bl	80068f4 <_fflush_r>
 8005c40:	68a1      	ldr	r1, [r4, #8]
 8005c42:	4b09      	ldr	r3, [pc, #36]	@ (8005c68 <cleanup_stdio+0x38>)
 8005c44:	4299      	cmp	r1, r3
 8005c46:	d002      	beq.n	8005c4e <cleanup_stdio+0x1e>
 8005c48:	4620      	mov	r0, r4
 8005c4a:	f000 fe53 	bl	80068f4 <_fflush_r>
 8005c4e:	68e1      	ldr	r1, [r4, #12]
 8005c50:	4b06      	ldr	r3, [pc, #24]	@ (8005c6c <cleanup_stdio+0x3c>)
 8005c52:	4299      	cmp	r1, r3
 8005c54:	d004      	beq.n	8005c60 <cleanup_stdio+0x30>
 8005c56:	4620      	mov	r0, r4
 8005c58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c5c:	f000 be4a 	b.w	80068f4 <_fflush_r>
 8005c60:	bd10      	pop	{r4, pc}
 8005c62:	bf00      	nop
 8005c64:	2000294c 	.word	0x2000294c
 8005c68:	200029b4 	.word	0x200029b4
 8005c6c:	20002a1c 	.word	0x20002a1c

08005c70 <global_stdio_init.part.0>:
 8005c70:	b510      	push	{r4, lr}
 8005c72:	4b0b      	ldr	r3, [pc, #44]	@ (8005ca0 <global_stdio_init.part.0+0x30>)
 8005c74:	4c0b      	ldr	r4, [pc, #44]	@ (8005ca4 <global_stdio_init.part.0+0x34>)
 8005c76:	4a0c      	ldr	r2, [pc, #48]	@ (8005ca8 <global_stdio_init.part.0+0x38>)
 8005c78:	601a      	str	r2, [r3, #0]
 8005c7a:	4620      	mov	r0, r4
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	2104      	movs	r1, #4
 8005c80:	f7ff ff94 	bl	8005bac <std>
 8005c84:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005c88:	2201      	movs	r2, #1
 8005c8a:	2109      	movs	r1, #9
 8005c8c:	f7ff ff8e 	bl	8005bac <std>
 8005c90:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005c94:	2202      	movs	r2, #2
 8005c96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c9a:	2112      	movs	r1, #18
 8005c9c:	f7ff bf86 	b.w	8005bac <std>
 8005ca0:	20002a84 	.word	0x20002a84
 8005ca4:	2000294c 	.word	0x2000294c
 8005ca8:	08005c19 	.word	0x08005c19

08005cac <__sfp_lock_acquire>:
 8005cac:	4801      	ldr	r0, [pc, #4]	@ (8005cb4 <__sfp_lock_acquire+0x8>)
 8005cae:	f000 b9ca 	b.w	8006046 <__retarget_lock_acquire_recursive>
 8005cb2:	bf00      	nop
 8005cb4:	20002a8d 	.word	0x20002a8d

08005cb8 <__sfp_lock_release>:
 8005cb8:	4801      	ldr	r0, [pc, #4]	@ (8005cc0 <__sfp_lock_release+0x8>)
 8005cba:	f000 b9c5 	b.w	8006048 <__retarget_lock_release_recursive>
 8005cbe:	bf00      	nop
 8005cc0:	20002a8d 	.word	0x20002a8d

08005cc4 <__sinit>:
 8005cc4:	b510      	push	{r4, lr}
 8005cc6:	4604      	mov	r4, r0
 8005cc8:	f7ff fff0 	bl	8005cac <__sfp_lock_acquire>
 8005ccc:	6a23      	ldr	r3, [r4, #32]
 8005cce:	b11b      	cbz	r3, 8005cd8 <__sinit+0x14>
 8005cd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005cd4:	f7ff bff0 	b.w	8005cb8 <__sfp_lock_release>
 8005cd8:	4b04      	ldr	r3, [pc, #16]	@ (8005cec <__sinit+0x28>)
 8005cda:	6223      	str	r3, [r4, #32]
 8005cdc:	4b04      	ldr	r3, [pc, #16]	@ (8005cf0 <__sinit+0x2c>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d1f5      	bne.n	8005cd0 <__sinit+0xc>
 8005ce4:	f7ff ffc4 	bl	8005c70 <global_stdio_init.part.0>
 8005ce8:	e7f2      	b.n	8005cd0 <__sinit+0xc>
 8005cea:	bf00      	nop
 8005cec:	08005c31 	.word	0x08005c31
 8005cf0:	20002a84 	.word	0x20002a84

08005cf4 <_fwalk_sglue>:
 8005cf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005cf8:	4607      	mov	r7, r0
 8005cfa:	4688      	mov	r8, r1
 8005cfc:	4614      	mov	r4, r2
 8005cfe:	2600      	movs	r6, #0
 8005d00:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005d04:	f1b9 0901 	subs.w	r9, r9, #1
 8005d08:	d505      	bpl.n	8005d16 <_fwalk_sglue+0x22>
 8005d0a:	6824      	ldr	r4, [r4, #0]
 8005d0c:	2c00      	cmp	r4, #0
 8005d0e:	d1f7      	bne.n	8005d00 <_fwalk_sglue+0xc>
 8005d10:	4630      	mov	r0, r6
 8005d12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005d16:	89ab      	ldrh	r3, [r5, #12]
 8005d18:	2b01      	cmp	r3, #1
 8005d1a:	d907      	bls.n	8005d2c <_fwalk_sglue+0x38>
 8005d1c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005d20:	3301      	adds	r3, #1
 8005d22:	d003      	beq.n	8005d2c <_fwalk_sglue+0x38>
 8005d24:	4629      	mov	r1, r5
 8005d26:	4638      	mov	r0, r7
 8005d28:	47c0      	blx	r8
 8005d2a:	4306      	orrs	r6, r0
 8005d2c:	3568      	adds	r5, #104	@ 0x68
 8005d2e:	e7e9      	b.n	8005d04 <_fwalk_sglue+0x10>

08005d30 <iprintf>:
 8005d30:	b40f      	push	{r0, r1, r2, r3}
 8005d32:	b507      	push	{r0, r1, r2, lr}
 8005d34:	4906      	ldr	r1, [pc, #24]	@ (8005d50 <iprintf+0x20>)
 8005d36:	ab04      	add	r3, sp, #16
 8005d38:	6808      	ldr	r0, [r1, #0]
 8005d3a:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d3e:	6881      	ldr	r1, [r0, #8]
 8005d40:	9301      	str	r3, [sp, #4]
 8005d42:	f000 faad 	bl	80062a0 <_vfiprintf_r>
 8005d46:	b003      	add	sp, #12
 8005d48:	f85d eb04 	ldr.w	lr, [sp], #4
 8005d4c:	b004      	add	sp, #16
 8005d4e:	4770      	bx	lr
 8005d50:	20000018 	.word	0x20000018

08005d54 <putchar>:
 8005d54:	4b02      	ldr	r3, [pc, #8]	@ (8005d60 <putchar+0xc>)
 8005d56:	4601      	mov	r1, r0
 8005d58:	6818      	ldr	r0, [r3, #0]
 8005d5a:	6882      	ldr	r2, [r0, #8]
 8005d5c:	f000 be54 	b.w	8006a08 <_putc_r>
 8005d60:	20000018 	.word	0x20000018

08005d64 <setvbuf>:
 8005d64:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005d68:	461d      	mov	r5, r3
 8005d6a:	4b57      	ldr	r3, [pc, #348]	@ (8005ec8 <setvbuf+0x164>)
 8005d6c:	681f      	ldr	r7, [r3, #0]
 8005d6e:	4604      	mov	r4, r0
 8005d70:	460e      	mov	r6, r1
 8005d72:	4690      	mov	r8, r2
 8005d74:	b127      	cbz	r7, 8005d80 <setvbuf+0x1c>
 8005d76:	6a3b      	ldr	r3, [r7, #32]
 8005d78:	b913      	cbnz	r3, 8005d80 <setvbuf+0x1c>
 8005d7a:	4638      	mov	r0, r7
 8005d7c:	f7ff ffa2 	bl	8005cc4 <__sinit>
 8005d80:	f1b8 0f02 	cmp.w	r8, #2
 8005d84:	d006      	beq.n	8005d94 <setvbuf+0x30>
 8005d86:	f1b8 0f01 	cmp.w	r8, #1
 8005d8a:	f200 809a 	bhi.w	8005ec2 <setvbuf+0x15e>
 8005d8e:	2d00      	cmp	r5, #0
 8005d90:	f2c0 8097 	blt.w	8005ec2 <setvbuf+0x15e>
 8005d94:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005d96:	07d9      	lsls	r1, r3, #31
 8005d98:	d405      	bmi.n	8005da6 <setvbuf+0x42>
 8005d9a:	89a3      	ldrh	r3, [r4, #12]
 8005d9c:	059a      	lsls	r2, r3, #22
 8005d9e:	d402      	bmi.n	8005da6 <setvbuf+0x42>
 8005da0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005da2:	f000 f950 	bl	8006046 <__retarget_lock_acquire_recursive>
 8005da6:	4621      	mov	r1, r4
 8005da8:	4638      	mov	r0, r7
 8005daa:	f000 fda3 	bl	80068f4 <_fflush_r>
 8005dae:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005db0:	b141      	cbz	r1, 8005dc4 <setvbuf+0x60>
 8005db2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005db6:	4299      	cmp	r1, r3
 8005db8:	d002      	beq.n	8005dc0 <setvbuf+0x5c>
 8005dba:	4638      	mov	r0, r7
 8005dbc:	f000 f946 	bl	800604c <_free_r>
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	6363      	str	r3, [r4, #52]	@ 0x34
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	61a3      	str	r3, [r4, #24]
 8005dc8:	6063      	str	r3, [r4, #4]
 8005dca:	89a3      	ldrh	r3, [r4, #12]
 8005dcc:	061b      	lsls	r3, r3, #24
 8005dce:	d503      	bpl.n	8005dd8 <setvbuf+0x74>
 8005dd0:	6921      	ldr	r1, [r4, #16]
 8005dd2:	4638      	mov	r0, r7
 8005dd4:	f000 f93a 	bl	800604c <_free_r>
 8005dd8:	89a3      	ldrh	r3, [r4, #12]
 8005dda:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 8005dde:	f023 0303 	bic.w	r3, r3, #3
 8005de2:	f1b8 0f02 	cmp.w	r8, #2
 8005de6:	81a3      	strh	r3, [r4, #12]
 8005de8:	d061      	beq.n	8005eae <setvbuf+0x14a>
 8005dea:	ab01      	add	r3, sp, #4
 8005dec:	466a      	mov	r2, sp
 8005dee:	4621      	mov	r1, r4
 8005df0:	4638      	mov	r0, r7
 8005df2:	f000 fda7 	bl	8006944 <__swhatbuf_r>
 8005df6:	89a3      	ldrh	r3, [r4, #12]
 8005df8:	4318      	orrs	r0, r3
 8005dfa:	81a0      	strh	r0, [r4, #12]
 8005dfc:	bb2d      	cbnz	r5, 8005e4a <setvbuf+0xe6>
 8005dfe:	9d00      	ldr	r5, [sp, #0]
 8005e00:	4628      	mov	r0, r5
 8005e02:	f000 f96d 	bl	80060e0 <malloc>
 8005e06:	4606      	mov	r6, r0
 8005e08:	2800      	cmp	r0, #0
 8005e0a:	d152      	bne.n	8005eb2 <setvbuf+0x14e>
 8005e0c:	f8dd 9000 	ldr.w	r9, [sp]
 8005e10:	45a9      	cmp	r9, r5
 8005e12:	d140      	bne.n	8005e96 <setvbuf+0x132>
 8005e14:	f04f 35ff 	mov.w	r5, #4294967295
 8005e18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e1c:	f043 0202 	orr.w	r2, r3, #2
 8005e20:	81a2      	strh	r2, [r4, #12]
 8005e22:	2200      	movs	r2, #0
 8005e24:	60a2      	str	r2, [r4, #8]
 8005e26:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 8005e2a:	6022      	str	r2, [r4, #0]
 8005e2c:	6122      	str	r2, [r4, #16]
 8005e2e:	2201      	movs	r2, #1
 8005e30:	6162      	str	r2, [r4, #20]
 8005e32:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005e34:	07d6      	lsls	r6, r2, #31
 8005e36:	d404      	bmi.n	8005e42 <setvbuf+0xde>
 8005e38:	0598      	lsls	r0, r3, #22
 8005e3a:	d402      	bmi.n	8005e42 <setvbuf+0xde>
 8005e3c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005e3e:	f000 f903 	bl	8006048 <__retarget_lock_release_recursive>
 8005e42:	4628      	mov	r0, r5
 8005e44:	b003      	add	sp, #12
 8005e46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005e4a:	2e00      	cmp	r6, #0
 8005e4c:	d0d8      	beq.n	8005e00 <setvbuf+0x9c>
 8005e4e:	6a3b      	ldr	r3, [r7, #32]
 8005e50:	b913      	cbnz	r3, 8005e58 <setvbuf+0xf4>
 8005e52:	4638      	mov	r0, r7
 8005e54:	f7ff ff36 	bl	8005cc4 <__sinit>
 8005e58:	f1b8 0f01 	cmp.w	r8, #1
 8005e5c:	bf08      	it	eq
 8005e5e:	89a3      	ldrheq	r3, [r4, #12]
 8005e60:	6026      	str	r6, [r4, #0]
 8005e62:	bf04      	itt	eq
 8005e64:	f043 0301 	orreq.w	r3, r3, #1
 8005e68:	81a3      	strheq	r3, [r4, #12]
 8005e6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e6e:	f013 0208 	ands.w	r2, r3, #8
 8005e72:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8005e76:	d01e      	beq.n	8005eb6 <setvbuf+0x152>
 8005e78:	07d9      	lsls	r1, r3, #31
 8005e7a:	bf41      	itttt	mi
 8005e7c:	2200      	movmi	r2, #0
 8005e7e:	426d      	negmi	r5, r5
 8005e80:	60a2      	strmi	r2, [r4, #8]
 8005e82:	61a5      	strmi	r5, [r4, #24]
 8005e84:	bf58      	it	pl
 8005e86:	60a5      	strpl	r5, [r4, #8]
 8005e88:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005e8a:	07d2      	lsls	r2, r2, #31
 8005e8c:	d401      	bmi.n	8005e92 <setvbuf+0x12e>
 8005e8e:	059b      	lsls	r3, r3, #22
 8005e90:	d513      	bpl.n	8005eba <setvbuf+0x156>
 8005e92:	2500      	movs	r5, #0
 8005e94:	e7d5      	b.n	8005e42 <setvbuf+0xde>
 8005e96:	4648      	mov	r0, r9
 8005e98:	f000 f922 	bl	80060e0 <malloc>
 8005e9c:	4606      	mov	r6, r0
 8005e9e:	2800      	cmp	r0, #0
 8005ea0:	d0b8      	beq.n	8005e14 <setvbuf+0xb0>
 8005ea2:	89a3      	ldrh	r3, [r4, #12]
 8005ea4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ea8:	81a3      	strh	r3, [r4, #12]
 8005eaa:	464d      	mov	r5, r9
 8005eac:	e7cf      	b.n	8005e4e <setvbuf+0xea>
 8005eae:	2500      	movs	r5, #0
 8005eb0:	e7b2      	b.n	8005e18 <setvbuf+0xb4>
 8005eb2:	46a9      	mov	r9, r5
 8005eb4:	e7f5      	b.n	8005ea2 <setvbuf+0x13e>
 8005eb6:	60a2      	str	r2, [r4, #8]
 8005eb8:	e7e6      	b.n	8005e88 <setvbuf+0x124>
 8005eba:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005ebc:	f000 f8c4 	bl	8006048 <__retarget_lock_release_recursive>
 8005ec0:	e7e7      	b.n	8005e92 <setvbuf+0x12e>
 8005ec2:	f04f 35ff 	mov.w	r5, #4294967295
 8005ec6:	e7bc      	b.n	8005e42 <setvbuf+0xde>
 8005ec8:	20000018 	.word	0x20000018

08005ecc <__sread>:
 8005ecc:	b510      	push	{r4, lr}
 8005ece:	460c      	mov	r4, r1
 8005ed0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ed4:	f000 f868 	bl	8005fa8 <_read_r>
 8005ed8:	2800      	cmp	r0, #0
 8005eda:	bfab      	itete	ge
 8005edc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005ede:	89a3      	ldrhlt	r3, [r4, #12]
 8005ee0:	181b      	addge	r3, r3, r0
 8005ee2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005ee6:	bfac      	ite	ge
 8005ee8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005eea:	81a3      	strhlt	r3, [r4, #12]
 8005eec:	bd10      	pop	{r4, pc}

08005eee <__swrite>:
 8005eee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ef2:	461f      	mov	r7, r3
 8005ef4:	898b      	ldrh	r3, [r1, #12]
 8005ef6:	05db      	lsls	r3, r3, #23
 8005ef8:	4605      	mov	r5, r0
 8005efa:	460c      	mov	r4, r1
 8005efc:	4616      	mov	r6, r2
 8005efe:	d505      	bpl.n	8005f0c <__swrite+0x1e>
 8005f00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f04:	2302      	movs	r3, #2
 8005f06:	2200      	movs	r2, #0
 8005f08:	f000 f83c 	bl	8005f84 <_lseek_r>
 8005f0c:	89a3      	ldrh	r3, [r4, #12]
 8005f0e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005f12:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005f16:	81a3      	strh	r3, [r4, #12]
 8005f18:	4632      	mov	r2, r6
 8005f1a:	463b      	mov	r3, r7
 8005f1c:	4628      	mov	r0, r5
 8005f1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005f22:	f000 b853 	b.w	8005fcc <_write_r>

08005f26 <__sseek>:
 8005f26:	b510      	push	{r4, lr}
 8005f28:	460c      	mov	r4, r1
 8005f2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f2e:	f000 f829 	bl	8005f84 <_lseek_r>
 8005f32:	1c43      	adds	r3, r0, #1
 8005f34:	89a3      	ldrh	r3, [r4, #12]
 8005f36:	bf15      	itete	ne
 8005f38:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005f3a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005f3e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005f42:	81a3      	strheq	r3, [r4, #12]
 8005f44:	bf18      	it	ne
 8005f46:	81a3      	strhne	r3, [r4, #12]
 8005f48:	bd10      	pop	{r4, pc}

08005f4a <__sclose>:
 8005f4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f4e:	f000 b809 	b.w	8005f64 <_close_r>

08005f52 <memset>:
 8005f52:	4402      	add	r2, r0
 8005f54:	4603      	mov	r3, r0
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d100      	bne.n	8005f5c <memset+0xa>
 8005f5a:	4770      	bx	lr
 8005f5c:	f803 1b01 	strb.w	r1, [r3], #1
 8005f60:	e7f9      	b.n	8005f56 <memset+0x4>
	...

08005f64 <_close_r>:
 8005f64:	b538      	push	{r3, r4, r5, lr}
 8005f66:	4d06      	ldr	r5, [pc, #24]	@ (8005f80 <_close_r+0x1c>)
 8005f68:	2300      	movs	r3, #0
 8005f6a:	4604      	mov	r4, r0
 8005f6c:	4608      	mov	r0, r1
 8005f6e:	602b      	str	r3, [r5, #0]
 8005f70:	f7fa fdf0 	bl	8000b54 <_close>
 8005f74:	1c43      	adds	r3, r0, #1
 8005f76:	d102      	bne.n	8005f7e <_close_r+0x1a>
 8005f78:	682b      	ldr	r3, [r5, #0]
 8005f7a:	b103      	cbz	r3, 8005f7e <_close_r+0x1a>
 8005f7c:	6023      	str	r3, [r4, #0]
 8005f7e:	bd38      	pop	{r3, r4, r5, pc}
 8005f80:	20002a88 	.word	0x20002a88

08005f84 <_lseek_r>:
 8005f84:	b538      	push	{r3, r4, r5, lr}
 8005f86:	4d07      	ldr	r5, [pc, #28]	@ (8005fa4 <_lseek_r+0x20>)
 8005f88:	4604      	mov	r4, r0
 8005f8a:	4608      	mov	r0, r1
 8005f8c:	4611      	mov	r1, r2
 8005f8e:	2200      	movs	r2, #0
 8005f90:	602a      	str	r2, [r5, #0]
 8005f92:	461a      	mov	r2, r3
 8005f94:	f7fa fedc 	bl	8000d50 <_lseek>
 8005f98:	1c43      	adds	r3, r0, #1
 8005f9a:	d102      	bne.n	8005fa2 <_lseek_r+0x1e>
 8005f9c:	682b      	ldr	r3, [r5, #0]
 8005f9e:	b103      	cbz	r3, 8005fa2 <_lseek_r+0x1e>
 8005fa0:	6023      	str	r3, [r4, #0]
 8005fa2:	bd38      	pop	{r3, r4, r5, pc}
 8005fa4:	20002a88 	.word	0x20002a88

08005fa8 <_read_r>:
 8005fa8:	b538      	push	{r3, r4, r5, lr}
 8005faa:	4d07      	ldr	r5, [pc, #28]	@ (8005fc8 <_read_r+0x20>)
 8005fac:	4604      	mov	r4, r0
 8005fae:	4608      	mov	r0, r1
 8005fb0:	4611      	mov	r1, r2
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	602a      	str	r2, [r5, #0]
 8005fb6:	461a      	mov	r2, r3
 8005fb8:	f7fa fde4 	bl	8000b84 <_read>
 8005fbc:	1c43      	adds	r3, r0, #1
 8005fbe:	d102      	bne.n	8005fc6 <_read_r+0x1e>
 8005fc0:	682b      	ldr	r3, [r5, #0]
 8005fc2:	b103      	cbz	r3, 8005fc6 <_read_r+0x1e>
 8005fc4:	6023      	str	r3, [r4, #0]
 8005fc6:	bd38      	pop	{r3, r4, r5, pc}
 8005fc8:	20002a88 	.word	0x20002a88

08005fcc <_write_r>:
 8005fcc:	b538      	push	{r3, r4, r5, lr}
 8005fce:	4d07      	ldr	r5, [pc, #28]	@ (8005fec <_write_r+0x20>)
 8005fd0:	4604      	mov	r4, r0
 8005fd2:	4608      	mov	r0, r1
 8005fd4:	4611      	mov	r1, r2
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	602a      	str	r2, [r5, #0]
 8005fda:	461a      	mov	r2, r3
 8005fdc:	f7fa fd8e 	bl	8000afc <_write>
 8005fe0:	1c43      	adds	r3, r0, #1
 8005fe2:	d102      	bne.n	8005fea <_write_r+0x1e>
 8005fe4:	682b      	ldr	r3, [r5, #0]
 8005fe6:	b103      	cbz	r3, 8005fea <_write_r+0x1e>
 8005fe8:	6023      	str	r3, [r4, #0]
 8005fea:	bd38      	pop	{r3, r4, r5, pc}
 8005fec:	20002a88 	.word	0x20002a88

08005ff0 <__errno>:
 8005ff0:	4b01      	ldr	r3, [pc, #4]	@ (8005ff8 <__errno+0x8>)
 8005ff2:	6818      	ldr	r0, [r3, #0]
 8005ff4:	4770      	bx	lr
 8005ff6:	bf00      	nop
 8005ff8:	20000018 	.word	0x20000018

08005ffc <__libc_init_array>:
 8005ffc:	b570      	push	{r4, r5, r6, lr}
 8005ffe:	4d0d      	ldr	r5, [pc, #52]	@ (8006034 <__libc_init_array+0x38>)
 8006000:	4c0d      	ldr	r4, [pc, #52]	@ (8006038 <__libc_init_array+0x3c>)
 8006002:	1b64      	subs	r4, r4, r5
 8006004:	10a4      	asrs	r4, r4, #2
 8006006:	2600      	movs	r6, #0
 8006008:	42a6      	cmp	r6, r4
 800600a:	d109      	bne.n	8006020 <__libc_init_array+0x24>
 800600c:	4d0b      	ldr	r5, [pc, #44]	@ (800603c <__libc_init_array+0x40>)
 800600e:	4c0c      	ldr	r4, [pc, #48]	@ (8006040 <__libc_init_array+0x44>)
 8006010:	f000 fdf4 	bl	8006bfc <_init>
 8006014:	1b64      	subs	r4, r4, r5
 8006016:	10a4      	asrs	r4, r4, #2
 8006018:	2600      	movs	r6, #0
 800601a:	42a6      	cmp	r6, r4
 800601c:	d105      	bne.n	800602a <__libc_init_array+0x2e>
 800601e:	bd70      	pop	{r4, r5, r6, pc}
 8006020:	f855 3b04 	ldr.w	r3, [r5], #4
 8006024:	4798      	blx	r3
 8006026:	3601      	adds	r6, #1
 8006028:	e7ee      	b.n	8006008 <__libc_init_array+0xc>
 800602a:	f855 3b04 	ldr.w	r3, [r5], #4
 800602e:	4798      	blx	r3
 8006030:	3601      	adds	r6, #1
 8006032:	e7f2      	b.n	800601a <__libc_init_array+0x1e>
 8006034:	08006eec 	.word	0x08006eec
 8006038:	08006eec 	.word	0x08006eec
 800603c:	08006eec 	.word	0x08006eec
 8006040:	08006ef0 	.word	0x08006ef0

08006044 <__retarget_lock_init_recursive>:
 8006044:	4770      	bx	lr

08006046 <__retarget_lock_acquire_recursive>:
 8006046:	4770      	bx	lr

08006048 <__retarget_lock_release_recursive>:
 8006048:	4770      	bx	lr
	...

0800604c <_free_r>:
 800604c:	b538      	push	{r3, r4, r5, lr}
 800604e:	4605      	mov	r5, r0
 8006050:	2900      	cmp	r1, #0
 8006052:	d041      	beq.n	80060d8 <_free_r+0x8c>
 8006054:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006058:	1f0c      	subs	r4, r1, #4
 800605a:	2b00      	cmp	r3, #0
 800605c:	bfb8      	it	lt
 800605e:	18e4      	addlt	r4, r4, r3
 8006060:	f000 f8e8 	bl	8006234 <__malloc_lock>
 8006064:	4a1d      	ldr	r2, [pc, #116]	@ (80060dc <_free_r+0x90>)
 8006066:	6813      	ldr	r3, [r2, #0]
 8006068:	b933      	cbnz	r3, 8006078 <_free_r+0x2c>
 800606a:	6063      	str	r3, [r4, #4]
 800606c:	6014      	str	r4, [r2, #0]
 800606e:	4628      	mov	r0, r5
 8006070:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006074:	f000 b8e4 	b.w	8006240 <__malloc_unlock>
 8006078:	42a3      	cmp	r3, r4
 800607a:	d908      	bls.n	800608e <_free_r+0x42>
 800607c:	6820      	ldr	r0, [r4, #0]
 800607e:	1821      	adds	r1, r4, r0
 8006080:	428b      	cmp	r3, r1
 8006082:	bf01      	itttt	eq
 8006084:	6819      	ldreq	r1, [r3, #0]
 8006086:	685b      	ldreq	r3, [r3, #4]
 8006088:	1809      	addeq	r1, r1, r0
 800608a:	6021      	streq	r1, [r4, #0]
 800608c:	e7ed      	b.n	800606a <_free_r+0x1e>
 800608e:	461a      	mov	r2, r3
 8006090:	685b      	ldr	r3, [r3, #4]
 8006092:	b10b      	cbz	r3, 8006098 <_free_r+0x4c>
 8006094:	42a3      	cmp	r3, r4
 8006096:	d9fa      	bls.n	800608e <_free_r+0x42>
 8006098:	6811      	ldr	r1, [r2, #0]
 800609a:	1850      	adds	r0, r2, r1
 800609c:	42a0      	cmp	r0, r4
 800609e:	d10b      	bne.n	80060b8 <_free_r+0x6c>
 80060a0:	6820      	ldr	r0, [r4, #0]
 80060a2:	4401      	add	r1, r0
 80060a4:	1850      	adds	r0, r2, r1
 80060a6:	4283      	cmp	r3, r0
 80060a8:	6011      	str	r1, [r2, #0]
 80060aa:	d1e0      	bne.n	800606e <_free_r+0x22>
 80060ac:	6818      	ldr	r0, [r3, #0]
 80060ae:	685b      	ldr	r3, [r3, #4]
 80060b0:	6053      	str	r3, [r2, #4]
 80060b2:	4408      	add	r0, r1
 80060b4:	6010      	str	r0, [r2, #0]
 80060b6:	e7da      	b.n	800606e <_free_r+0x22>
 80060b8:	d902      	bls.n	80060c0 <_free_r+0x74>
 80060ba:	230c      	movs	r3, #12
 80060bc:	602b      	str	r3, [r5, #0]
 80060be:	e7d6      	b.n	800606e <_free_r+0x22>
 80060c0:	6820      	ldr	r0, [r4, #0]
 80060c2:	1821      	adds	r1, r4, r0
 80060c4:	428b      	cmp	r3, r1
 80060c6:	bf04      	itt	eq
 80060c8:	6819      	ldreq	r1, [r3, #0]
 80060ca:	685b      	ldreq	r3, [r3, #4]
 80060cc:	6063      	str	r3, [r4, #4]
 80060ce:	bf04      	itt	eq
 80060d0:	1809      	addeq	r1, r1, r0
 80060d2:	6021      	streq	r1, [r4, #0]
 80060d4:	6054      	str	r4, [r2, #4]
 80060d6:	e7ca      	b.n	800606e <_free_r+0x22>
 80060d8:	bd38      	pop	{r3, r4, r5, pc}
 80060da:	bf00      	nop
 80060dc:	20002a94 	.word	0x20002a94

080060e0 <malloc>:
 80060e0:	4b02      	ldr	r3, [pc, #8]	@ (80060ec <malloc+0xc>)
 80060e2:	4601      	mov	r1, r0
 80060e4:	6818      	ldr	r0, [r3, #0]
 80060e6:	f000 b825 	b.w	8006134 <_malloc_r>
 80060ea:	bf00      	nop
 80060ec:	20000018 	.word	0x20000018

080060f0 <sbrk_aligned>:
 80060f0:	b570      	push	{r4, r5, r6, lr}
 80060f2:	4e0f      	ldr	r6, [pc, #60]	@ (8006130 <sbrk_aligned+0x40>)
 80060f4:	460c      	mov	r4, r1
 80060f6:	6831      	ldr	r1, [r6, #0]
 80060f8:	4605      	mov	r5, r0
 80060fa:	b911      	cbnz	r1, 8006102 <sbrk_aligned+0x12>
 80060fc:	f000 fd6e 	bl	8006bdc <_sbrk_r>
 8006100:	6030      	str	r0, [r6, #0]
 8006102:	4621      	mov	r1, r4
 8006104:	4628      	mov	r0, r5
 8006106:	f000 fd69 	bl	8006bdc <_sbrk_r>
 800610a:	1c43      	adds	r3, r0, #1
 800610c:	d103      	bne.n	8006116 <sbrk_aligned+0x26>
 800610e:	f04f 34ff 	mov.w	r4, #4294967295
 8006112:	4620      	mov	r0, r4
 8006114:	bd70      	pop	{r4, r5, r6, pc}
 8006116:	1cc4      	adds	r4, r0, #3
 8006118:	f024 0403 	bic.w	r4, r4, #3
 800611c:	42a0      	cmp	r0, r4
 800611e:	d0f8      	beq.n	8006112 <sbrk_aligned+0x22>
 8006120:	1a21      	subs	r1, r4, r0
 8006122:	4628      	mov	r0, r5
 8006124:	f000 fd5a 	bl	8006bdc <_sbrk_r>
 8006128:	3001      	adds	r0, #1
 800612a:	d1f2      	bne.n	8006112 <sbrk_aligned+0x22>
 800612c:	e7ef      	b.n	800610e <sbrk_aligned+0x1e>
 800612e:	bf00      	nop
 8006130:	20002a90 	.word	0x20002a90

08006134 <_malloc_r>:
 8006134:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006138:	1ccd      	adds	r5, r1, #3
 800613a:	f025 0503 	bic.w	r5, r5, #3
 800613e:	3508      	adds	r5, #8
 8006140:	2d0c      	cmp	r5, #12
 8006142:	bf38      	it	cc
 8006144:	250c      	movcc	r5, #12
 8006146:	2d00      	cmp	r5, #0
 8006148:	4606      	mov	r6, r0
 800614a:	db01      	blt.n	8006150 <_malloc_r+0x1c>
 800614c:	42a9      	cmp	r1, r5
 800614e:	d904      	bls.n	800615a <_malloc_r+0x26>
 8006150:	230c      	movs	r3, #12
 8006152:	6033      	str	r3, [r6, #0]
 8006154:	2000      	movs	r0, #0
 8006156:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800615a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006230 <_malloc_r+0xfc>
 800615e:	f000 f869 	bl	8006234 <__malloc_lock>
 8006162:	f8d8 3000 	ldr.w	r3, [r8]
 8006166:	461c      	mov	r4, r3
 8006168:	bb44      	cbnz	r4, 80061bc <_malloc_r+0x88>
 800616a:	4629      	mov	r1, r5
 800616c:	4630      	mov	r0, r6
 800616e:	f7ff ffbf 	bl	80060f0 <sbrk_aligned>
 8006172:	1c43      	adds	r3, r0, #1
 8006174:	4604      	mov	r4, r0
 8006176:	d158      	bne.n	800622a <_malloc_r+0xf6>
 8006178:	f8d8 4000 	ldr.w	r4, [r8]
 800617c:	4627      	mov	r7, r4
 800617e:	2f00      	cmp	r7, #0
 8006180:	d143      	bne.n	800620a <_malloc_r+0xd6>
 8006182:	2c00      	cmp	r4, #0
 8006184:	d04b      	beq.n	800621e <_malloc_r+0xea>
 8006186:	6823      	ldr	r3, [r4, #0]
 8006188:	4639      	mov	r1, r7
 800618a:	4630      	mov	r0, r6
 800618c:	eb04 0903 	add.w	r9, r4, r3
 8006190:	f000 fd24 	bl	8006bdc <_sbrk_r>
 8006194:	4581      	cmp	r9, r0
 8006196:	d142      	bne.n	800621e <_malloc_r+0xea>
 8006198:	6821      	ldr	r1, [r4, #0]
 800619a:	1a6d      	subs	r5, r5, r1
 800619c:	4629      	mov	r1, r5
 800619e:	4630      	mov	r0, r6
 80061a0:	f7ff ffa6 	bl	80060f0 <sbrk_aligned>
 80061a4:	3001      	adds	r0, #1
 80061a6:	d03a      	beq.n	800621e <_malloc_r+0xea>
 80061a8:	6823      	ldr	r3, [r4, #0]
 80061aa:	442b      	add	r3, r5
 80061ac:	6023      	str	r3, [r4, #0]
 80061ae:	f8d8 3000 	ldr.w	r3, [r8]
 80061b2:	685a      	ldr	r2, [r3, #4]
 80061b4:	bb62      	cbnz	r2, 8006210 <_malloc_r+0xdc>
 80061b6:	f8c8 7000 	str.w	r7, [r8]
 80061ba:	e00f      	b.n	80061dc <_malloc_r+0xa8>
 80061bc:	6822      	ldr	r2, [r4, #0]
 80061be:	1b52      	subs	r2, r2, r5
 80061c0:	d420      	bmi.n	8006204 <_malloc_r+0xd0>
 80061c2:	2a0b      	cmp	r2, #11
 80061c4:	d917      	bls.n	80061f6 <_malloc_r+0xc2>
 80061c6:	1961      	adds	r1, r4, r5
 80061c8:	42a3      	cmp	r3, r4
 80061ca:	6025      	str	r5, [r4, #0]
 80061cc:	bf18      	it	ne
 80061ce:	6059      	strne	r1, [r3, #4]
 80061d0:	6863      	ldr	r3, [r4, #4]
 80061d2:	bf08      	it	eq
 80061d4:	f8c8 1000 	streq.w	r1, [r8]
 80061d8:	5162      	str	r2, [r4, r5]
 80061da:	604b      	str	r3, [r1, #4]
 80061dc:	4630      	mov	r0, r6
 80061de:	f000 f82f 	bl	8006240 <__malloc_unlock>
 80061e2:	f104 000b 	add.w	r0, r4, #11
 80061e6:	1d23      	adds	r3, r4, #4
 80061e8:	f020 0007 	bic.w	r0, r0, #7
 80061ec:	1ac2      	subs	r2, r0, r3
 80061ee:	bf1c      	itt	ne
 80061f0:	1a1b      	subne	r3, r3, r0
 80061f2:	50a3      	strne	r3, [r4, r2]
 80061f4:	e7af      	b.n	8006156 <_malloc_r+0x22>
 80061f6:	6862      	ldr	r2, [r4, #4]
 80061f8:	42a3      	cmp	r3, r4
 80061fa:	bf0c      	ite	eq
 80061fc:	f8c8 2000 	streq.w	r2, [r8]
 8006200:	605a      	strne	r2, [r3, #4]
 8006202:	e7eb      	b.n	80061dc <_malloc_r+0xa8>
 8006204:	4623      	mov	r3, r4
 8006206:	6864      	ldr	r4, [r4, #4]
 8006208:	e7ae      	b.n	8006168 <_malloc_r+0x34>
 800620a:	463c      	mov	r4, r7
 800620c:	687f      	ldr	r7, [r7, #4]
 800620e:	e7b6      	b.n	800617e <_malloc_r+0x4a>
 8006210:	461a      	mov	r2, r3
 8006212:	685b      	ldr	r3, [r3, #4]
 8006214:	42a3      	cmp	r3, r4
 8006216:	d1fb      	bne.n	8006210 <_malloc_r+0xdc>
 8006218:	2300      	movs	r3, #0
 800621a:	6053      	str	r3, [r2, #4]
 800621c:	e7de      	b.n	80061dc <_malloc_r+0xa8>
 800621e:	230c      	movs	r3, #12
 8006220:	6033      	str	r3, [r6, #0]
 8006222:	4630      	mov	r0, r6
 8006224:	f000 f80c 	bl	8006240 <__malloc_unlock>
 8006228:	e794      	b.n	8006154 <_malloc_r+0x20>
 800622a:	6005      	str	r5, [r0, #0]
 800622c:	e7d6      	b.n	80061dc <_malloc_r+0xa8>
 800622e:	bf00      	nop
 8006230:	20002a94 	.word	0x20002a94

08006234 <__malloc_lock>:
 8006234:	4801      	ldr	r0, [pc, #4]	@ (800623c <__malloc_lock+0x8>)
 8006236:	f7ff bf06 	b.w	8006046 <__retarget_lock_acquire_recursive>
 800623a:	bf00      	nop
 800623c:	20002a8c 	.word	0x20002a8c

08006240 <__malloc_unlock>:
 8006240:	4801      	ldr	r0, [pc, #4]	@ (8006248 <__malloc_unlock+0x8>)
 8006242:	f7ff bf01 	b.w	8006048 <__retarget_lock_release_recursive>
 8006246:	bf00      	nop
 8006248:	20002a8c 	.word	0x20002a8c

0800624c <__sfputc_r>:
 800624c:	6893      	ldr	r3, [r2, #8]
 800624e:	3b01      	subs	r3, #1
 8006250:	2b00      	cmp	r3, #0
 8006252:	b410      	push	{r4}
 8006254:	6093      	str	r3, [r2, #8]
 8006256:	da08      	bge.n	800626a <__sfputc_r+0x1e>
 8006258:	6994      	ldr	r4, [r2, #24]
 800625a:	42a3      	cmp	r3, r4
 800625c:	db01      	blt.n	8006262 <__sfputc_r+0x16>
 800625e:	290a      	cmp	r1, #10
 8006260:	d103      	bne.n	800626a <__sfputc_r+0x1e>
 8006262:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006266:	f000 bc03 	b.w	8006a70 <__swbuf_r>
 800626a:	6813      	ldr	r3, [r2, #0]
 800626c:	1c58      	adds	r0, r3, #1
 800626e:	6010      	str	r0, [r2, #0]
 8006270:	7019      	strb	r1, [r3, #0]
 8006272:	4608      	mov	r0, r1
 8006274:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006278:	4770      	bx	lr

0800627a <__sfputs_r>:
 800627a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800627c:	4606      	mov	r6, r0
 800627e:	460f      	mov	r7, r1
 8006280:	4614      	mov	r4, r2
 8006282:	18d5      	adds	r5, r2, r3
 8006284:	42ac      	cmp	r4, r5
 8006286:	d101      	bne.n	800628c <__sfputs_r+0x12>
 8006288:	2000      	movs	r0, #0
 800628a:	e007      	b.n	800629c <__sfputs_r+0x22>
 800628c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006290:	463a      	mov	r2, r7
 8006292:	4630      	mov	r0, r6
 8006294:	f7ff ffda 	bl	800624c <__sfputc_r>
 8006298:	1c43      	adds	r3, r0, #1
 800629a:	d1f3      	bne.n	8006284 <__sfputs_r+0xa>
 800629c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080062a0 <_vfiprintf_r>:
 80062a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062a4:	460d      	mov	r5, r1
 80062a6:	b09d      	sub	sp, #116	@ 0x74
 80062a8:	4614      	mov	r4, r2
 80062aa:	4698      	mov	r8, r3
 80062ac:	4606      	mov	r6, r0
 80062ae:	b118      	cbz	r0, 80062b8 <_vfiprintf_r+0x18>
 80062b0:	6a03      	ldr	r3, [r0, #32]
 80062b2:	b90b      	cbnz	r3, 80062b8 <_vfiprintf_r+0x18>
 80062b4:	f7ff fd06 	bl	8005cc4 <__sinit>
 80062b8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80062ba:	07d9      	lsls	r1, r3, #31
 80062bc:	d405      	bmi.n	80062ca <_vfiprintf_r+0x2a>
 80062be:	89ab      	ldrh	r3, [r5, #12]
 80062c0:	059a      	lsls	r2, r3, #22
 80062c2:	d402      	bmi.n	80062ca <_vfiprintf_r+0x2a>
 80062c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80062c6:	f7ff febe 	bl	8006046 <__retarget_lock_acquire_recursive>
 80062ca:	89ab      	ldrh	r3, [r5, #12]
 80062cc:	071b      	lsls	r3, r3, #28
 80062ce:	d501      	bpl.n	80062d4 <_vfiprintf_r+0x34>
 80062d0:	692b      	ldr	r3, [r5, #16]
 80062d2:	b99b      	cbnz	r3, 80062fc <_vfiprintf_r+0x5c>
 80062d4:	4629      	mov	r1, r5
 80062d6:	4630      	mov	r0, r6
 80062d8:	f000 fc08 	bl	8006aec <__swsetup_r>
 80062dc:	b170      	cbz	r0, 80062fc <_vfiprintf_r+0x5c>
 80062de:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80062e0:	07dc      	lsls	r4, r3, #31
 80062e2:	d504      	bpl.n	80062ee <_vfiprintf_r+0x4e>
 80062e4:	f04f 30ff 	mov.w	r0, #4294967295
 80062e8:	b01d      	add	sp, #116	@ 0x74
 80062ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062ee:	89ab      	ldrh	r3, [r5, #12]
 80062f0:	0598      	lsls	r0, r3, #22
 80062f2:	d4f7      	bmi.n	80062e4 <_vfiprintf_r+0x44>
 80062f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80062f6:	f7ff fea7 	bl	8006048 <__retarget_lock_release_recursive>
 80062fa:	e7f3      	b.n	80062e4 <_vfiprintf_r+0x44>
 80062fc:	2300      	movs	r3, #0
 80062fe:	9309      	str	r3, [sp, #36]	@ 0x24
 8006300:	2320      	movs	r3, #32
 8006302:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006306:	f8cd 800c 	str.w	r8, [sp, #12]
 800630a:	2330      	movs	r3, #48	@ 0x30
 800630c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80064bc <_vfiprintf_r+0x21c>
 8006310:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006314:	f04f 0901 	mov.w	r9, #1
 8006318:	4623      	mov	r3, r4
 800631a:	469a      	mov	sl, r3
 800631c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006320:	b10a      	cbz	r2, 8006326 <_vfiprintf_r+0x86>
 8006322:	2a25      	cmp	r2, #37	@ 0x25
 8006324:	d1f9      	bne.n	800631a <_vfiprintf_r+0x7a>
 8006326:	ebba 0b04 	subs.w	fp, sl, r4
 800632a:	d00b      	beq.n	8006344 <_vfiprintf_r+0xa4>
 800632c:	465b      	mov	r3, fp
 800632e:	4622      	mov	r2, r4
 8006330:	4629      	mov	r1, r5
 8006332:	4630      	mov	r0, r6
 8006334:	f7ff ffa1 	bl	800627a <__sfputs_r>
 8006338:	3001      	adds	r0, #1
 800633a:	f000 80a7 	beq.w	800648c <_vfiprintf_r+0x1ec>
 800633e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006340:	445a      	add	r2, fp
 8006342:	9209      	str	r2, [sp, #36]	@ 0x24
 8006344:	f89a 3000 	ldrb.w	r3, [sl]
 8006348:	2b00      	cmp	r3, #0
 800634a:	f000 809f 	beq.w	800648c <_vfiprintf_r+0x1ec>
 800634e:	2300      	movs	r3, #0
 8006350:	f04f 32ff 	mov.w	r2, #4294967295
 8006354:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006358:	f10a 0a01 	add.w	sl, sl, #1
 800635c:	9304      	str	r3, [sp, #16]
 800635e:	9307      	str	r3, [sp, #28]
 8006360:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006364:	931a      	str	r3, [sp, #104]	@ 0x68
 8006366:	4654      	mov	r4, sl
 8006368:	2205      	movs	r2, #5
 800636a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800636e:	4853      	ldr	r0, [pc, #332]	@ (80064bc <_vfiprintf_r+0x21c>)
 8006370:	f7f9 ffe6 	bl	8000340 <memchr>
 8006374:	9a04      	ldr	r2, [sp, #16]
 8006376:	b9d8      	cbnz	r0, 80063b0 <_vfiprintf_r+0x110>
 8006378:	06d1      	lsls	r1, r2, #27
 800637a:	bf44      	itt	mi
 800637c:	2320      	movmi	r3, #32
 800637e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006382:	0713      	lsls	r3, r2, #28
 8006384:	bf44      	itt	mi
 8006386:	232b      	movmi	r3, #43	@ 0x2b
 8006388:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800638c:	f89a 3000 	ldrb.w	r3, [sl]
 8006390:	2b2a      	cmp	r3, #42	@ 0x2a
 8006392:	d015      	beq.n	80063c0 <_vfiprintf_r+0x120>
 8006394:	9a07      	ldr	r2, [sp, #28]
 8006396:	4654      	mov	r4, sl
 8006398:	2000      	movs	r0, #0
 800639a:	f04f 0c0a 	mov.w	ip, #10
 800639e:	4621      	mov	r1, r4
 80063a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80063a4:	3b30      	subs	r3, #48	@ 0x30
 80063a6:	2b09      	cmp	r3, #9
 80063a8:	d94b      	bls.n	8006442 <_vfiprintf_r+0x1a2>
 80063aa:	b1b0      	cbz	r0, 80063da <_vfiprintf_r+0x13a>
 80063ac:	9207      	str	r2, [sp, #28]
 80063ae:	e014      	b.n	80063da <_vfiprintf_r+0x13a>
 80063b0:	eba0 0308 	sub.w	r3, r0, r8
 80063b4:	fa09 f303 	lsl.w	r3, r9, r3
 80063b8:	4313      	orrs	r3, r2
 80063ba:	9304      	str	r3, [sp, #16]
 80063bc:	46a2      	mov	sl, r4
 80063be:	e7d2      	b.n	8006366 <_vfiprintf_r+0xc6>
 80063c0:	9b03      	ldr	r3, [sp, #12]
 80063c2:	1d19      	adds	r1, r3, #4
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	9103      	str	r1, [sp, #12]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	bfbb      	ittet	lt
 80063cc:	425b      	neglt	r3, r3
 80063ce:	f042 0202 	orrlt.w	r2, r2, #2
 80063d2:	9307      	strge	r3, [sp, #28]
 80063d4:	9307      	strlt	r3, [sp, #28]
 80063d6:	bfb8      	it	lt
 80063d8:	9204      	strlt	r2, [sp, #16]
 80063da:	7823      	ldrb	r3, [r4, #0]
 80063dc:	2b2e      	cmp	r3, #46	@ 0x2e
 80063de:	d10a      	bne.n	80063f6 <_vfiprintf_r+0x156>
 80063e0:	7863      	ldrb	r3, [r4, #1]
 80063e2:	2b2a      	cmp	r3, #42	@ 0x2a
 80063e4:	d132      	bne.n	800644c <_vfiprintf_r+0x1ac>
 80063e6:	9b03      	ldr	r3, [sp, #12]
 80063e8:	1d1a      	adds	r2, r3, #4
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	9203      	str	r2, [sp, #12]
 80063ee:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80063f2:	3402      	adds	r4, #2
 80063f4:	9305      	str	r3, [sp, #20]
 80063f6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80064cc <_vfiprintf_r+0x22c>
 80063fa:	7821      	ldrb	r1, [r4, #0]
 80063fc:	2203      	movs	r2, #3
 80063fe:	4650      	mov	r0, sl
 8006400:	f7f9 ff9e 	bl	8000340 <memchr>
 8006404:	b138      	cbz	r0, 8006416 <_vfiprintf_r+0x176>
 8006406:	9b04      	ldr	r3, [sp, #16]
 8006408:	eba0 000a 	sub.w	r0, r0, sl
 800640c:	2240      	movs	r2, #64	@ 0x40
 800640e:	4082      	lsls	r2, r0
 8006410:	4313      	orrs	r3, r2
 8006412:	3401      	adds	r4, #1
 8006414:	9304      	str	r3, [sp, #16]
 8006416:	f814 1b01 	ldrb.w	r1, [r4], #1
 800641a:	4829      	ldr	r0, [pc, #164]	@ (80064c0 <_vfiprintf_r+0x220>)
 800641c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006420:	2206      	movs	r2, #6
 8006422:	f7f9 ff8d 	bl	8000340 <memchr>
 8006426:	2800      	cmp	r0, #0
 8006428:	d03f      	beq.n	80064aa <_vfiprintf_r+0x20a>
 800642a:	4b26      	ldr	r3, [pc, #152]	@ (80064c4 <_vfiprintf_r+0x224>)
 800642c:	bb1b      	cbnz	r3, 8006476 <_vfiprintf_r+0x1d6>
 800642e:	9b03      	ldr	r3, [sp, #12]
 8006430:	3307      	adds	r3, #7
 8006432:	f023 0307 	bic.w	r3, r3, #7
 8006436:	3308      	adds	r3, #8
 8006438:	9303      	str	r3, [sp, #12]
 800643a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800643c:	443b      	add	r3, r7
 800643e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006440:	e76a      	b.n	8006318 <_vfiprintf_r+0x78>
 8006442:	fb0c 3202 	mla	r2, ip, r2, r3
 8006446:	460c      	mov	r4, r1
 8006448:	2001      	movs	r0, #1
 800644a:	e7a8      	b.n	800639e <_vfiprintf_r+0xfe>
 800644c:	2300      	movs	r3, #0
 800644e:	3401      	adds	r4, #1
 8006450:	9305      	str	r3, [sp, #20]
 8006452:	4619      	mov	r1, r3
 8006454:	f04f 0c0a 	mov.w	ip, #10
 8006458:	4620      	mov	r0, r4
 800645a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800645e:	3a30      	subs	r2, #48	@ 0x30
 8006460:	2a09      	cmp	r2, #9
 8006462:	d903      	bls.n	800646c <_vfiprintf_r+0x1cc>
 8006464:	2b00      	cmp	r3, #0
 8006466:	d0c6      	beq.n	80063f6 <_vfiprintf_r+0x156>
 8006468:	9105      	str	r1, [sp, #20]
 800646a:	e7c4      	b.n	80063f6 <_vfiprintf_r+0x156>
 800646c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006470:	4604      	mov	r4, r0
 8006472:	2301      	movs	r3, #1
 8006474:	e7f0      	b.n	8006458 <_vfiprintf_r+0x1b8>
 8006476:	ab03      	add	r3, sp, #12
 8006478:	9300      	str	r3, [sp, #0]
 800647a:	462a      	mov	r2, r5
 800647c:	4b12      	ldr	r3, [pc, #72]	@ (80064c8 <_vfiprintf_r+0x228>)
 800647e:	a904      	add	r1, sp, #16
 8006480:	4630      	mov	r0, r6
 8006482:	f3af 8000 	nop.w
 8006486:	4607      	mov	r7, r0
 8006488:	1c78      	adds	r0, r7, #1
 800648a:	d1d6      	bne.n	800643a <_vfiprintf_r+0x19a>
 800648c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800648e:	07d9      	lsls	r1, r3, #31
 8006490:	d405      	bmi.n	800649e <_vfiprintf_r+0x1fe>
 8006492:	89ab      	ldrh	r3, [r5, #12]
 8006494:	059a      	lsls	r2, r3, #22
 8006496:	d402      	bmi.n	800649e <_vfiprintf_r+0x1fe>
 8006498:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800649a:	f7ff fdd5 	bl	8006048 <__retarget_lock_release_recursive>
 800649e:	89ab      	ldrh	r3, [r5, #12]
 80064a0:	065b      	lsls	r3, r3, #25
 80064a2:	f53f af1f 	bmi.w	80062e4 <_vfiprintf_r+0x44>
 80064a6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80064a8:	e71e      	b.n	80062e8 <_vfiprintf_r+0x48>
 80064aa:	ab03      	add	r3, sp, #12
 80064ac:	9300      	str	r3, [sp, #0]
 80064ae:	462a      	mov	r2, r5
 80064b0:	4b05      	ldr	r3, [pc, #20]	@ (80064c8 <_vfiprintf_r+0x228>)
 80064b2:	a904      	add	r1, sp, #16
 80064b4:	4630      	mov	r0, r6
 80064b6:	f000 f879 	bl	80065ac <_printf_i>
 80064ba:	e7e4      	b.n	8006486 <_vfiprintf_r+0x1e6>
 80064bc:	08006eb0 	.word	0x08006eb0
 80064c0:	08006eba 	.word	0x08006eba
 80064c4:	00000000 	.word	0x00000000
 80064c8:	0800627b 	.word	0x0800627b
 80064cc:	08006eb6 	.word	0x08006eb6

080064d0 <_printf_common>:
 80064d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80064d4:	4616      	mov	r6, r2
 80064d6:	4698      	mov	r8, r3
 80064d8:	688a      	ldr	r2, [r1, #8]
 80064da:	690b      	ldr	r3, [r1, #16]
 80064dc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80064e0:	4293      	cmp	r3, r2
 80064e2:	bfb8      	it	lt
 80064e4:	4613      	movlt	r3, r2
 80064e6:	6033      	str	r3, [r6, #0]
 80064e8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80064ec:	4607      	mov	r7, r0
 80064ee:	460c      	mov	r4, r1
 80064f0:	b10a      	cbz	r2, 80064f6 <_printf_common+0x26>
 80064f2:	3301      	adds	r3, #1
 80064f4:	6033      	str	r3, [r6, #0]
 80064f6:	6823      	ldr	r3, [r4, #0]
 80064f8:	0699      	lsls	r1, r3, #26
 80064fa:	bf42      	ittt	mi
 80064fc:	6833      	ldrmi	r3, [r6, #0]
 80064fe:	3302      	addmi	r3, #2
 8006500:	6033      	strmi	r3, [r6, #0]
 8006502:	6825      	ldr	r5, [r4, #0]
 8006504:	f015 0506 	ands.w	r5, r5, #6
 8006508:	d106      	bne.n	8006518 <_printf_common+0x48>
 800650a:	f104 0a19 	add.w	sl, r4, #25
 800650e:	68e3      	ldr	r3, [r4, #12]
 8006510:	6832      	ldr	r2, [r6, #0]
 8006512:	1a9b      	subs	r3, r3, r2
 8006514:	42ab      	cmp	r3, r5
 8006516:	dc26      	bgt.n	8006566 <_printf_common+0x96>
 8006518:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800651c:	6822      	ldr	r2, [r4, #0]
 800651e:	3b00      	subs	r3, #0
 8006520:	bf18      	it	ne
 8006522:	2301      	movne	r3, #1
 8006524:	0692      	lsls	r2, r2, #26
 8006526:	d42b      	bmi.n	8006580 <_printf_common+0xb0>
 8006528:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800652c:	4641      	mov	r1, r8
 800652e:	4638      	mov	r0, r7
 8006530:	47c8      	blx	r9
 8006532:	3001      	adds	r0, #1
 8006534:	d01e      	beq.n	8006574 <_printf_common+0xa4>
 8006536:	6823      	ldr	r3, [r4, #0]
 8006538:	6922      	ldr	r2, [r4, #16]
 800653a:	f003 0306 	and.w	r3, r3, #6
 800653e:	2b04      	cmp	r3, #4
 8006540:	bf02      	ittt	eq
 8006542:	68e5      	ldreq	r5, [r4, #12]
 8006544:	6833      	ldreq	r3, [r6, #0]
 8006546:	1aed      	subeq	r5, r5, r3
 8006548:	68a3      	ldr	r3, [r4, #8]
 800654a:	bf0c      	ite	eq
 800654c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006550:	2500      	movne	r5, #0
 8006552:	4293      	cmp	r3, r2
 8006554:	bfc4      	itt	gt
 8006556:	1a9b      	subgt	r3, r3, r2
 8006558:	18ed      	addgt	r5, r5, r3
 800655a:	2600      	movs	r6, #0
 800655c:	341a      	adds	r4, #26
 800655e:	42b5      	cmp	r5, r6
 8006560:	d11a      	bne.n	8006598 <_printf_common+0xc8>
 8006562:	2000      	movs	r0, #0
 8006564:	e008      	b.n	8006578 <_printf_common+0xa8>
 8006566:	2301      	movs	r3, #1
 8006568:	4652      	mov	r2, sl
 800656a:	4641      	mov	r1, r8
 800656c:	4638      	mov	r0, r7
 800656e:	47c8      	blx	r9
 8006570:	3001      	adds	r0, #1
 8006572:	d103      	bne.n	800657c <_printf_common+0xac>
 8006574:	f04f 30ff 	mov.w	r0, #4294967295
 8006578:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800657c:	3501      	adds	r5, #1
 800657e:	e7c6      	b.n	800650e <_printf_common+0x3e>
 8006580:	18e1      	adds	r1, r4, r3
 8006582:	1c5a      	adds	r2, r3, #1
 8006584:	2030      	movs	r0, #48	@ 0x30
 8006586:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800658a:	4422      	add	r2, r4
 800658c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006590:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006594:	3302      	adds	r3, #2
 8006596:	e7c7      	b.n	8006528 <_printf_common+0x58>
 8006598:	2301      	movs	r3, #1
 800659a:	4622      	mov	r2, r4
 800659c:	4641      	mov	r1, r8
 800659e:	4638      	mov	r0, r7
 80065a0:	47c8      	blx	r9
 80065a2:	3001      	adds	r0, #1
 80065a4:	d0e6      	beq.n	8006574 <_printf_common+0xa4>
 80065a6:	3601      	adds	r6, #1
 80065a8:	e7d9      	b.n	800655e <_printf_common+0x8e>
	...

080065ac <_printf_i>:
 80065ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80065b0:	7e0f      	ldrb	r7, [r1, #24]
 80065b2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80065b4:	2f78      	cmp	r7, #120	@ 0x78
 80065b6:	4691      	mov	r9, r2
 80065b8:	4680      	mov	r8, r0
 80065ba:	460c      	mov	r4, r1
 80065bc:	469a      	mov	sl, r3
 80065be:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80065c2:	d807      	bhi.n	80065d4 <_printf_i+0x28>
 80065c4:	2f62      	cmp	r7, #98	@ 0x62
 80065c6:	d80a      	bhi.n	80065de <_printf_i+0x32>
 80065c8:	2f00      	cmp	r7, #0
 80065ca:	f000 80d2 	beq.w	8006772 <_printf_i+0x1c6>
 80065ce:	2f58      	cmp	r7, #88	@ 0x58
 80065d0:	f000 80b9 	beq.w	8006746 <_printf_i+0x19a>
 80065d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80065d8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80065dc:	e03a      	b.n	8006654 <_printf_i+0xa8>
 80065de:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80065e2:	2b15      	cmp	r3, #21
 80065e4:	d8f6      	bhi.n	80065d4 <_printf_i+0x28>
 80065e6:	a101      	add	r1, pc, #4	@ (adr r1, 80065ec <_printf_i+0x40>)
 80065e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80065ec:	08006645 	.word	0x08006645
 80065f0:	08006659 	.word	0x08006659
 80065f4:	080065d5 	.word	0x080065d5
 80065f8:	080065d5 	.word	0x080065d5
 80065fc:	080065d5 	.word	0x080065d5
 8006600:	080065d5 	.word	0x080065d5
 8006604:	08006659 	.word	0x08006659
 8006608:	080065d5 	.word	0x080065d5
 800660c:	080065d5 	.word	0x080065d5
 8006610:	080065d5 	.word	0x080065d5
 8006614:	080065d5 	.word	0x080065d5
 8006618:	08006759 	.word	0x08006759
 800661c:	08006683 	.word	0x08006683
 8006620:	08006713 	.word	0x08006713
 8006624:	080065d5 	.word	0x080065d5
 8006628:	080065d5 	.word	0x080065d5
 800662c:	0800677b 	.word	0x0800677b
 8006630:	080065d5 	.word	0x080065d5
 8006634:	08006683 	.word	0x08006683
 8006638:	080065d5 	.word	0x080065d5
 800663c:	080065d5 	.word	0x080065d5
 8006640:	0800671b 	.word	0x0800671b
 8006644:	6833      	ldr	r3, [r6, #0]
 8006646:	1d1a      	adds	r2, r3, #4
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	6032      	str	r2, [r6, #0]
 800664c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006650:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006654:	2301      	movs	r3, #1
 8006656:	e09d      	b.n	8006794 <_printf_i+0x1e8>
 8006658:	6833      	ldr	r3, [r6, #0]
 800665a:	6820      	ldr	r0, [r4, #0]
 800665c:	1d19      	adds	r1, r3, #4
 800665e:	6031      	str	r1, [r6, #0]
 8006660:	0606      	lsls	r6, r0, #24
 8006662:	d501      	bpl.n	8006668 <_printf_i+0xbc>
 8006664:	681d      	ldr	r5, [r3, #0]
 8006666:	e003      	b.n	8006670 <_printf_i+0xc4>
 8006668:	0645      	lsls	r5, r0, #25
 800666a:	d5fb      	bpl.n	8006664 <_printf_i+0xb8>
 800666c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006670:	2d00      	cmp	r5, #0
 8006672:	da03      	bge.n	800667c <_printf_i+0xd0>
 8006674:	232d      	movs	r3, #45	@ 0x2d
 8006676:	426d      	negs	r5, r5
 8006678:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800667c:	4859      	ldr	r0, [pc, #356]	@ (80067e4 <_printf_i+0x238>)
 800667e:	230a      	movs	r3, #10
 8006680:	e011      	b.n	80066a6 <_printf_i+0xfa>
 8006682:	6821      	ldr	r1, [r4, #0]
 8006684:	6833      	ldr	r3, [r6, #0]
 8006686:	0608      	lsls	r0, r1, #24
 8006688:	f853 5b04 	ldr.w	r5, [r3], #4
 800668c:	d402      	bmi.n	8006694 <_printf_i+0xe8>
 800668e:	0649      	lsls	r1, r1, #25
 8006690:	bf48      	it	mi
 8006692:	b2ad      	uxthmi	r5, r5
 8006694:	2f6f      	cmp	r7, #111	@ 0x6f
 8006696:	4853      	ldr	r0, [pc, #332]	@ (80067e4 <_printf_i+0x238>)
 8006698:	6033      	str	r3, [r6, #0]
 800669a:	bf14      	ite	ne
 800669c:	230a      	movne	r3, #10
 800669e:	2308      	moveq	r3, #8
 80066a0:	2100      	movs	r1, #0
 80066a2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80066a6:	6866      	ldr	r6, [r4, #4]
 80066a8:	60a6      	str	r6, [r4, #8]
 80066aa:	2e00      	cmp	r6, #0
 80066ac:	bfa2      	ittt	ge
 80066ae:	6821      	ldrge	r1, [r4, #0]
 80066b0:	f021 0104 	bicge.w	r1, r1, #4
 80066b4:	6021      	strge	r1, [r4, #0]
 80066b6:	b90d      	cbnz	r5, 80066bc <_printf_i+0x110>
 80066b8:	2e00      	cmp	r6, #0
 80066ba:	d04b      	beq.n	8006754 <_printf_i+0x1a8>
 80066bc:	4616      	mov	r6, r2
 80066be:	fbb5 f1f3 	udiv	r1, r5, r3
 80066c2:	fb03 5711 	mls	r7, r3, r1, r5
 80066c6:	5dc7      	ldrb	r7, [r0, r7]
 80066c8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80066cc:	462f      	mov	r7, r5
 80066ce:	42bb      	cmp	r3, r7
 80066d0:	460d      	mov	r5, r1
 80066d2:	d9f4      	bls.n	80066be <_printf_i+0x112>
 80066d4:	2b08      	cmp	r3, #8
 80066d6:	d10b      	bne.n	80066f0 <_printf_i+0x144>
 80066d8:	6823      	ldr	r3, [r4, #0]
 80066da:	07df      	lsls	r7, r3, #31
 80066dc:	d508      	bpl.n	80066f0 <_printf_i+0x144>
 80066de:	6923      	ldr	r3, [r4, #16]
 80066e0:	6861      	ldr	r1, [r4, #4]
 80066e2:	4299      	cmp	r1, r3
 80066e4:	bfde      	ittt	le
 80066e6:	2330      	movle	r3, #48	@ 0x30
 80066e8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80066ec:	f106 36ff 	addle.w	r6, r6, #4294967295
 80066f0:	1b92      	subs	r2, r2, r6
 80066f2:	6122      	str	r2, [r4, #16]
 80066f4:	f8cd a000 	str.w	sl, [sp]
 80066f8:	464b      	mov	r3, r9
 80066fa:	aa03      	add	r2, sp, #12
 80066fc:	4621      	mov	r1, r4
 80066fe:	4640      	mov	r0, r8
 8006700:	f7ff fee6 	bl	80064d0 <_printf_common>
 8006704:	3001      	adds	r0, #1
 8006706:	d14a      	bne.n	800679e <_printf_i+0x1f2>
 8006708:	f04f 30ff 	mov.w	r0, #4294967295
 800670c:	b004      	add	sp, #16
 800670e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006712:	6823      	ldr	r3, [r4, #0]
 8006714:	f043 0320 	orr.w	r3, r3, #32
 8006718:	6023      	str	r3, [r4, #0]
 800671a:	4833      	ldr	r0, [pc, #204]	@ (80067e8 <_printf_i+0x23c>)
 800671c:	2778      	movs	r7, #120	@ 0x78
 800671e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006722:	6823      	ldr	r3, [r4, #0]
 8006724:	6831      	ldr	r1, [r6, #0]
 8006726:	061f      	lsls	r7, r3, #24
 8006728:	f851 5b04 	ldr.w	r5, [r1], #4
 800672c:	d402      	bmi.n	8006734 <_printf_i+0x188>
 800672e:	065f      	lsls	r7, r3, #25
 8006730:	bf48      	it	mi
 8006732:	b2ad      	uxthmi	r5, r5
 8006734:	6031      	str	r1, [r6, #0]
 8006736:	07d9      	lsls	r1, r3, #31
 8006738:	bf44      	itt	mi
 800673a:	f043 0320 	orrmi.w	r3, r3, #32
 800673e:	6023      	strmi	r3, [r4, #0]
 8006740:	b11d      	cbz	r5, 800674a <_printf_i+0x19e>
 8006742:	2310      	movs	r3, #16
 8006744:	e7ac      	b.n	80066a0 <_printf_i+0xf4>
 8006746:	4827      	ldr	r0, [pc, #156]	@ (80067e4 <_printf_i+0x238>)
 8006748:	e7e9      	b.n	800671e <_printf_i+0x172>
 800674a:	6823      	ldr	r3, [r4, #0]
 800674c:	f023 0320 	bic.w	r3, r3, #32
 8006750:	6023      	str	r3, [r4, #0]
 8006752:	e7f6      	b.n	8006742 <_printf_i+0x196>
 8006754:	4616      	mov	r6, r2
 8006756:	e7bd      	b.n	80066d4 <_printf_i+0x128>
 8006758:	6833      	ldr	r3, [r6, #0]
 800675a:	6825      	ldr	r5, [r4, #0]
 800675c:	6961      	ldr	r1, [r4, #20]
 800675e:	1d18      	adds	r0, r3, #4
 8006760:	6030      	str	r0, [r6, #0]
 8006762:	062e      	lsls	r6, r5, #24
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	d501      	bpl.n	800676c <_printf_i+0x1c0>
 8006768:	6019      	str	r1, [r3, #0]
 800676a:	e002      	b.n	8006772 <_printf_i+0x1c6>
 800676c:	0668      	lsls	r0, r5, #25
 800676e:	d5fb      	bpl.n	8006768 <_printf_i+0x1bc>
 8006770:	8019      	strh	r1, [r3, #0]
 8006772:	2300      	movs	r3, #0
 8006774:	6123      	str	r3, [r4, #16]
 8006776:	4616      	mov	r6, r2
 8006778:	e7bc      	b.n	80066f4 <_printf_i+0x148>
 800677a:	6833      	ldr	r3, [r6, #0]
 800677c:	1d1a      	adds	r2, r3, #4
 800677e:	6032      	str	r2, [r6, #0]
 8006780:	681e      	ldr	r6, [r3, #0]
 8006782:	6862      	ldr	r2, [r4, #4]
 8006784:	2100      	movs	r1, #0
 8006786:	4630      	mov	r0, r6
 8006788:	f7f9 fdda 	bl	8000340 <memchr>
 800678c:	b108      	cbz	r0, 8006792 <_printf_i+0x1e6>
 800678e:	1b80      	subs	r0, r0, r6
 8006790:	6060      	str	r0, [r4, #4]
 8006792:	6863      	ldr	r3, [r4, #4]
 8006794:	6123      	str	r3, [r4, #16]
 8006796:	2300      	movs	r3, #0
 8006798:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800679c:	e7aa      	b.n	80066f4 <_printf_i+0x148>
 800679e:	6923      	ldr	r3, [r4, #16]
 80067a0:	4632      	mov	r2, r6
 80067a2:	4649      	mov	r1, r9
 80067a4:	4640      	mov	r0, r8
 80067a6:	47d0      	blx	sl
 80067a8:	3001      	adds	r0, #1
 80067aa:	d0ad      	beq.n	8006708 <_printf_i+0x15c>
 80067ac:	6823      	ldr	r3, [r4, #0]
 80067ae:	079b      	lsls	r3, r3, #30
 80067b0:	d413      	bmi.n	80067da <_printf_i+0x22e>
 80067b2:	68e0      	ldr	r0, [r4, #12]
 80067b4:	9b03      	ldr	r3, [sp, #12]
 80067b6:	4298      	cmp	r0, r3
 80067b8:	bfb8      	it	lt
 80067ba:	4618      	movlt	r0, r3
 80067bc:	e7a6      	b.n	800670c <_printf_i+0x160>
 80067be:	2301      	movs	r3, #1
 80067c0:	4632      	mov	r2, r6
 80067c2:	4649      	mov	r1, r9
 80067c4:	4640      	mov	r0, r8
 80067c6:	47d0      	blx	sl
 80067c8:	3001      	adds	r0, #1
 80067ca:	d09d      	beq.n	8006708 <_printf_i+0x15c>
 80067cc:	3501      	adds	r5, #1
 80067ce:	68e3      	ldr	r3, [r4, #12]
 80067d0:	9903      	ldr	r1, [sp, #12]
 80067d2:	1a5b      	subs	r3, r3, r1
 80067d4:	42ab      	cmp	r3, r5
 80067d6:	dcf2      	bgt.n	80067be <_printf_i+0x212>
 80067d8:	e7eb      	b.n	80067b2 <_printf_i+0x206>
 80067da:	2500      	movs	r5, #0
 80067dc:	f104 0619 	add.w	r6, r4, #25
 80067e0:	e7f5      	b.n	80067ce <_printf_i+0x222>
 80067e2:	bf00      	nop
 80067e4:	08006ec1 	.word	0x08006ec1
 80067e8:	08006ed2 	.word	0x08006ed2

080067ec <__sflush_r>:
 80067ec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80067f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067f4:	0716      	lsls	r6, r2, #28
 80067f6:	4605      	mov	r5, r0
 80067f8:	460c      	mov	r4, r1
 80067fa:	d454      	bmi.n	80068a6 <__sflush_r+0xba>
 80067fc:	684b      	ldr	r3, [r1, #4]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	dc02      	bgt.n	8006808 <__sflush_r+0x1c>
 8006802:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006804:	2b00      	cmp	r3, #0
 8006806:	dd48      	ble.n	800689a <__sflush_r+0xae>
 8006808:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800680a:	2e00      	cmp	r6, #0
 800680c:	d045      	beq.n	800689a <__sflush_r+0xae>
 800680e:	2300      	movs	r3, #0
 8006810:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006814:	682f      	ldr	r7, [r5, #0]
 8006816:	6a21      	ldr	r1, [r4, #32]
 8006818:	602b      	str	r3, [r5, #0]
 800681a:	d030      	beq.n	800687e <__sflush_r+0x92>
 800681c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800681e:	89a3      	ldrh	r3, [r4, #12]
 8006820:	0759      	lsls	r1, r3, #29
 8006822:	d505      	bpl.n	8006830 <__sflush_r+0x44>
 8006824:	6863      	ldr	r3, [r4, #4]
 8006826:	1ad2      	subs	r2, r2, r3
 8006828:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800682a:	b10b      	cbz	r3, 8006830 <__sflush_r+0x44>
 800682c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800682e:	1ad2      	subs	r2, r2, r3
 8006830:	2300      	movs	r3, #0
 8006832:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006834:	6a21      	ldr	r1, [r4, #32]
 8006836:	4628      	mov	r0, r5
 8006838:	47b0      	blx	r6
 800683a:	1c43      	adds	r3, r0, #1
 800683c:	89a3      	ldrh	r3, [r4, #12]
 800683e:	d106      	bne.n	800684e <__sflush_r+0x62>
 8006840:	6829      	ldr	r1, [r5, #0]
 8006842:	291d      	cmp	r1, #29
 8006844:	d82b      	bhi.n	800689e <__sflush_r+0xb2>
 8006846:	4a2a      	ldr	r2, [pc, #168]	@ (80068f0 <__sflush_r+0x104>)
 8006848:	410a      	asrs	r2, r1
 800684a:	07d6      	lsls	r6, r2, #31
 800684c:	d427      	bmi.n	800689e <__sflush_r+0xb2>
 800684e:	2200      	movs	r2, #0
 8006850:	6062      	str	r2, [r4, #4]
 8006852:	04d9      	lsls	r1, r3, #19
 8006854:	6922      	ldr	r2, [r4, #16]
 8006856:	6022      	str	r2, [r4, #0]
 8006858:	d504      	bpl.n	8006864 <__sflush_r+0x78>
 800685a:	1c42      	adds	r2, r0, #1
 800685c:	d101      	bne.n	8006862 <__sflush_r+0x76>
 800685e:	682b      	ldr	r3, [r5, #0]
 8006860:	b903      	cbnz	r3, 8006864 <__sflush_r+0x78>
 8006862:	6560      	str	r0, [r4, #84]	@ 0x54
 8006864:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006866:	602f      	str	r7, [r5, #0]
 8006868:	b1b9      	cbz	r1, 800689a <__sflush_r+0xae>
 800686a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800686e:	4299      	cmp	r1, r3
 8006870:	d002      	beq.n	8006878 <__sflush_r+0x8c>
 8006872:	4628      	mov	r0, r5
 8006874:	f7ff fbea 	bl	800604c <_free_r>
 8006878:	2300      	movs	r3, #0
 800687a:	6363      	str	r3, [r4, #52]	@ 0x34
 800687c:	e00d      	b.n	800689a <__sflush_r+0xae>
 800687e:	2301      	movs	r3, #1
 8006880:	4628      	mov	r0, r5
 8006882:	47b0      	blx	r6
 8006884:	4602      	mov	r2, r0
 8006886:	1c50      	adds	r0, r2, #1
 8006888:	d1c9      	bne.n	800681e <__sflush_r+0x32>
 800688a:	682b      	ldr	r3, [r5, #0]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d0c6      	beq.n	800681e <__sflush_r+0x32>
 8006890:	2b1d      	cmp	r3, #29
 8006892:	d001      	beq.n	8006898 <__sflush_r+0xac>
 8006894:	2b16      	cmp	r3, #22
 8006896:	d11e      	bne.n	80068d6 <__sflush_r+0xea>
 8006898:	602f      	str	r7, [r5, #0]
 800689a:	2000      	movs	r0, #0
 800689c:	e022      	b.n	80068e4 <__sflush_r+0xf8>
 800689e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80068a2:	b21b      	sxth	r3, r3
 80068a4:	e01b      	b.n	80068de <__sflush_r+0xf2>
 80068a6:	690f      	ldr	r7, [r1, #16]
 80068a8:	2f00      	cmp	r7, #0
 80068aa:	d0f6      	beq.n	800689a <__sflush_r+0xae>
 80068ac:	0793      	lsls	r3, r2, #30
 80068ae:	680e      	ldr	r6, [r1, #0]
 80068b0:	bf08      	it	eq
 80068b2:	694b      	ldreq	r3, [r1, #20]
 80068b4:	600f      	str	r7, [r1, #0]
 80068b6:	bf18      	it	ne
 80068b8:	2300      	movne	r3, #0
 80068ba:	eba6 0807 	sub.w	r8, r6, r7
 80068be:	608b      	str	r3, [r1, #8]
 80068c0:	f1b8 0f00 	cmp.w	r8, #0
 80068c4:	dde9      	ble.n	800689a <__sflush_r+0xae>
 80068c6:	6a21      	ldr	r1, [r4, #32]
 80068c8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80068ca:	4643      	mov	r3, r8
 80068cc:	463a      	mov	r2, r7
 80068ce:	4628      	mov	r0, r5
 80068d0:	47b0      	blx	r6
 80068d2:	2800      	cmp	r0, #0
 80068d4:	dc08      	bgt.n	80068e8 <__sflush_r+0xfc>
 80068d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80068da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80068de:	81a3      	strh	r3, [r4, #12]
 80068e0:	f04f 30ff 	mov.w	r0, #4294967295
 80068e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80068e8:	4407      	add	r7, r0
 80068ea:	eba8 0800 	sub.w	r8, r8, r0
 80068ee:	e7e7      	b.n	80068c0 <__sflush_r+0xd4>
 80068f0:	dfbffffe 	.word	0xdfbffffe

080068f4 <_fflush_r>:
 80068f4:	b538      	push	{r3, r4, r5, lr}
 80068f6:	690b      	ldr	r3, [r1, #16]
 80068f8:	4605      	mov	r5, r0
 80068fa:	460c      	mov	r4, r1
 80068fc:	b913      	cbnz	r3, 8006904 <_fflush_r+0x10>
 80068fe:	2500      	movs	r5, #0
 8006900:	4628      	mov	r0, r5
 8006902:	bd38      	pop	{r3, r4, r5, pc}
 8006904:	b118      	cbz	r0, 800690e <_fflush_r+0x1a>
 8006906:	6a03      	ldr	r3, [r0, #32]
 8006908:	b90b      	cbnz	r3, 800690e <_fflush_r+0x1a>
 800690a:	f7ff f9db 	bl	8005cc4 <__sinit>
 800690e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d0f3      	beq.n	80068fe <_fflush_r+0xa>
 8006916:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006918:	07d0      	lsls	r0, r2, #31
 800691a:	d404      	bmi.n	8006926 <_fflush_r+0x32>
 800691c:	0599      	lsls	r1, r3, #22
 800691e:	d402      	bmi.n	8006926 <_fflush_r+0x32>
 8006920:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006922:	f7ff fb90 	bl	8006046 <__retarget_lock_acquire_recursive>
 8006926:	4628      	mov	r0, r5
 8006928:	4621      	mov	r1, r4
 800692a:	f7ff ff5f 	bl	80067ec <__sflush_r>
 800692e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006930:	07da      	lsls	r2, r3, #31
 8006932:	4605      	mov	r5, r0
 8006934:	d4e4      	bmi.n	8006900 <_fflush_r+0xc>
 8006936:	89a3      	ldrh	r3, [r4, #12]
 8006938:	059b      	lsls	r3, r3, #22
 800693a:	d4e1      	bmi.n	8006900 <_fflush_r+0xc>
 800693c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800693e:	f7ff fb83 	bl	8006048 <__retarget_lock_release_recursive>
 8006942:	e7dd      	b.n	8006900 <_fflush_r+0xc>

08006944 <__swhatbuf_r>:
 8006944:	b570      	push	{r4, r5, r6, lr}
 8006946:	460c      	mov	r4, r1
 8006948:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800694c:	2900      	cmp	r1, #0
 800694e:	b096      	sub	sp, #88	@ 0x58
 8006950:	4615      	mov	r5, r2
 8006952:	461e      	mov	r6, r3
 8006954:	da0d      	bge.n	8006972 <__swhatbuf_r+0x2e>
 8006956:	89a3      	ldrh	r3, [r4, #12]
 8006958:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800695c:	f04f 0100 	mov.w	r1, #0
 8006960:	bf14      	ite	ne
 8006962:	2340      	movne	r3, #64	@ 0x40
 8006964:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006968:	2000      	movs	r0, #0
 800696a:	6031      	str	r1, [r6, #0]
 800696c:	602b      	str	r3, [r5, #0]
 800696e:	b016      	add	sp, #88	@ 0x58
 8006970:	bd70      	pop	{r4, r5, r6, pc}
 8006972:	466a      	mov	r2, sp
 8006974:	f000 f910 	bl	8006b98 <_fstat_r>
 8006978:	2800      	cmp	r0, #0
 800697a:	dbec      	blt.n	8006956 <__swhatbuf_r+0x12>
 800697c:	9901      	ldr	r1, [sp, #4]
 800697e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006982:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006986:	4259      	negs	r1, r3
 8006988:	4159      	adcs	r1, r3
 800698a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800698e:	e7eb      	b.n	8006968 <__swhatbuf_r+0x24>

08006990 <__smakebuf_r>:
 8006990:	898b      	ldrh	r3, [r1, #12]
 8006992:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006994:	079d      	lsls	r5, r3, #30
 8006996:	4606      	mov	r6, r0
 8006998:	460c      	mov	r4, r1
 800699a:	d507      	bpl.n	80069ac <__smakebuf_r+0x1c>
 800699c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80069a0:	6023      	str	r3, [r4, #0]
 80069a2:	6123      	str	r3, [r4, #16]
 80069a4:	2301      	movs	r3, #1
 80069a6:	6163      	str	r3, [r4, #20]
 80069a8:	b003      	add	sp, #12
 80069aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80069ac:	ab01      	add	r3, sp, #4
 80069ae:	466a      	mov	r2, sp
 80069b0:	f7ff ffc8 	bl	8006944 <__swhatbuf_r>
 80069b4:	9f00      	ldr	r7, [sp, #0]
 80069b6:	4605      	mov	r5, r0
 80069b8:	4639      	mov	r1, r7
 80069ba:	4630      	mov	r0, r6
 80069bc:	f7ff fbba 	bl	8006134 <_malloc_r>
 80069c0:	b948      	cbnz	r0, 80069d6 <__smakebuf_r+0x46>
 80069c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80069c6:	059a      	lsls	r2, r3, #22
 80069c8:	d4ee      	bmi.n	80069a8 <__smakebuf_r+0x18>
 80069ca:	f023 0303 	bic.w	r3, r3, #3
 80069ce:	f043 0302 	orr.w	r3, r3, #2
 80069d2:	81a3      	strh	r3, [r4, #12]
 80069d4:	e7e2      	b.n	800699c <__smakebuf_r+0xc>
 80069d6:	89a3      	ldrh	r3, [r4, #12]
 80069d8:	6020      	str	r0, [r4, #0]
 80069da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80069de:	81a3      	strh	r3, [r4, #12]
 80069e0:	9b01      	ldr	r3, [sp, #4]
 80069e2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80069e6:	b15b      	cbz	r3, 8006a00 <__smakebuf_r+0x70>
 80069e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80069ec:	4630      	mov	r0, r6
 80069ee:	f000 f8e5 	bl	8006bbc <_isatty_r>
 80069f2:	b128      	cbz	r0, 8006a00 <__smakebuf_r+0x70>
 80069f4:	89a3      	ldrh	r3, [r4, #12]
 80069f6:	f023 0303 	bic.w	r3, r3, #3
 80069fa:	f043 0301 	orr.w	r3, r3, #1
 80069fe:	81a3      	strh	r3, [r4, #12]
 8006a00:	89a3      	ldrh	r3, [r4, #12]
 8006a02:	431d      	orrs	r5, r3
 8006a04:	81a5      	strh	r5, [r4, #12]
 8006a06:	e7cf      	b.n	80069a8 <__smakebuf_r+0x18>

08006a08 <_putc_r>:
 8006a08:	b570      	push	{r4, r5, r6, lr}
 8006a0a:	460d      	mov	r5, r1
 8006a0c:	4614      	mov	r4, r2
 8006a0e:	4606      	mov	r6, r0
 8006a10:	b118      	cbz	r0, 8006a1a <_putc_r+0x12>
 8006a12:	6a03      	ldr	r3, [r0, #32]
 8006a14:	b90b      	cbnz	r3, 8006a1a <_putc_r+0x12>
 8006a16:	f7ff f955 	bl	8005cc4 <__sinit>
 8006a1a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006a1c:	07d8      	lsls	r0, r3, #31
 8006a1e:	d405      	bmi.n	8006a2c <_putc_r+0x24>
 8006a20:	89a3      	ldrh	r3, [r4, #12]
 8006a22:	0599      	lsls	r1, r3, #22
 8006a24:	d402      	bmi.n	8006a2c <_putc_r+0x24>
 8006a26:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006a28:	f7ff fb0d 	bl	8006046 <__retarget_lock_acquire_recursive>
 8006a2c:	68a3      	ldr	r3, [r4, #8]
 8006a2e:	3b01      	subs	r3, #1
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	60a3      	str	r3, [r4, #8]
 8006a34:	da05      	bge.n	8006a42 <_putc_r+0x3a>
 8006a36:	69a2      	ldr	r2, [r4, #24]
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	db12      	blt.n	8006a62 <_putc_r+0x5a>
 8006a3c:	b2eb      	uxtb	r3, r5
 8006a3e:	2b0a      	cmp	r3, #10
 8006a40:	d00f      	beq.n	8006a62 <_putc_r+0x5a>
 8006a42:	6823      	ldr	r3, [r4, #0]
 8006a44:	1c5a      	adds	r2, r3, #1
 8006a46:	6022      	str	r2, [r4, #0]
 8006a48:	701d      	strb	r5, [r3, #0]
 8006a4a:	b2ed      	uxtb	r5, r5
 8006a4c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006a4e:	07da      	lsls	r2, r3, #31
 8006a50:	d405      	bmi.n	8006a5e <_putc_r+0x56>
 8006a52:	89a3      	ldrh	r3, [r4, #12]
 8006a54:	059b      	lsls	r3, r3, #22
 8006a56:	d402      	bmi.n	8006a5e <_putc_r+0x56>
 8006a58:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006a5a:	f7ff faf5 	bl	8006048 <__retarget_lock_release_recursive>
 8006a5e:	4628      	mov	r0, r5
 8006a60:	bd70      	pop	{r4, r5, r6, pc}
 8006a62:	4629      	mov	r1, r5
 8006a64:	4622      	mov	r2, r4
 8006a66:	4630      	mov	r0, r6
 8006a68:	f000 f802 	bl	8006a70 <__swbuf_r>
 8006a6c:	4605      	mov	r5, r0
 8006a6e:	e7ed      	b.n	8006a4c <_putc_r+0x44>

08006a70 <__swbuf_r>:
 8006a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a72:	460e      	mov	r6, r1
 8006a74:	4614      	mov	r4, r2
 8006a76:	4605      	mov	r5, r0
 8006a78:	b118      	cbz	r0, 8006a82 <__swbuf_r+0x12>
 8006a7a:	6a03      	ldr	r3, [r0, #32]
 8006a7c:	b90b      	cbnz	r3, 8006a82 <__swbuf_r+0x12>
 8006a7e:	f7ff f921 	bl	8005cc4 <__sinit>
 8006a82:	69a3      	ldr	r3, [r4, #24]
 8006a84:	60a3      	str	r3, [r4, #8]
 8006a86:	89a3      	ldrh	r3, [r4, #12]
 8006a88:	071a      	lsls	r2, r3, #28
 8006a8a:	d501      	bpl.n	8006a90 <__swbuf_r+0x20>
 8006a8c:	6923      	ldr	r3, [r4, #16]
 8006a8e:	b943      	cbnz	r3, 8006aa2 <__swbuf_r+0x32>
 8006a90:	4621      	mov	r1, r4
 8006a92:	4628      	mov	r0, r5
 8006a94:	f000 f82a 	bl	8006aec <__swsetup_r>
 8006a98:	b118      	cbz	r0, 8006aa2 <__swbuf_r+0x32>
 8006a9a:	f04f 37ff 	mov.w	r7, #4294967295
 8006a9e:	4638      	mov	r0, r7
 8006aa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006aa2:	6823      	ldr	r3, [r4, #0]
 8006aa4:	6922      	ldr	r2, [r4, #16]
 8006aa6:	1a98      	subs	r0, r3, r2
 8006aa8:	6963      	ldr	r3, [r4, #20]
 8006aaa:	b2f6      	uxtb	r6, r6
 8006aac:	4283      	cmp	r3, r0
 8006aae:	4637      	mov	r7, r6
 8006ab0:	dc05      	bgt.n	8006abe <__swbuf_r+0x4e>
 8006ab2:	4621      	mov	r1, r4
 8006ab4:	4628      	mov	r0, r5
 8006ab6:	f7ff ff1d 	bl	80068f4 <_fflush_r>
 8006aba:	2800      	cmp	r0, #0
 8006abc:	d1ed      	bne.n	8006a9a <__swbuf_r+0x2a>
 8006abe:	68a3      	ldr	r3, [r4, #8]
 8006ac0:	3b01      	subs	r3, #1
 8006ac2:	60a3      	str	r3, [r4, #8]
 8006ac4:	6823      	ldr	r3, [r4, #0]
 8006ac6:	1c5a      	adds	r2, r3, #1
 8006ac8:	6022      	str	r2, [r4, #0]
 8006aca:	701e      	strb	r6, [r3, #0]
 8006acc:	6962      	ldr	r2, [r4, #20]
 8006ace:	1c43      	adds	r3, r0, #1
 8006ad0:	429a      	cmp	r2, r3
 8006ad2:	d004      	beq.n	8006ade <__swbuf_r+0x6e>
 8006ad4:	89a3      	ldrh	r3, [r4, #12]
 8006ad6:	07db      	lsls	r3, r3, #31
 8006ad8:	d5e1      	bpl.n	8006a9e <__swbuf_r+0x2e>
 8006ada:	2e0a      	cmp	r6, #10
 8006adc:	d1df      	bne.n	8006a9e <__swbuf_r+0x2e>
 8006ade:	4621      	mov	r1, r4
 8006ae0:	4628      	mov	r0, r5
 8006ae2:	f7ff ff07 	bl	80068f4 <_fflush_r>
 8006ae6:	2800      	cmp	r0, #0
 8006ae8:	d0d9      	beq.n	8006a9e <__swbuf_r+0x2e>
 8006aea:	e7d6      	b.n	8006a9a <__swbuf_r+0x2a>

08006aec <__swsetup_r>:
 8006aec:	b538      	push	{r3, r4, r5, lr}
 8006aee:	4b29      	ldr	r3, [pc, #164]	@ (8006b94 <__swsetup_r+0xa8>)
 8006af0:	4605      	mov	r5, r0
 8006af2:	6818      	ldr	r0, [r3, #0]
 8006af4:	460c      	mov	r4, r1
 8006af6:	b118      	cbz	r0, 8006b00 <__swsetup_r+0x14>
 8006af8:	6a03      	ldr	r3, [r0, #32]
 8006afa:	b90b      	cbnz	r3, 8006b00 <__swsetup_r+0x14>
 8006afc:	f7ff f8e2 	bl	8005cc4 <__sinit>
 8006b00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b04:	0719      	lsls	r1, r3, #28
 8006b06:	d422      	bmi.n	8006b4e <__swsetup_r+0x62>
 8006b08:	06da      	lsls	r2, r3, #27
 8006b0a:	d407      	bmi.n	8006b1c <__swsetup_r+0x30>
 8006b0c:	2209      	movs	r2, #9
 8006b0e:	602a      	str	r2, [r5, #0]
 8006b10:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006b14:	81a3      	strh	r3, [r4, #12]
 8006b16:	f04f 30ff 	mov.w	r0, #4294967295
 8006b1a:	e033      	b.n	8006b84 <__swsetup_r+0x98>
 8006b1c:	0758      	lsls	r0, r3, #29
 8006b1e:	d512      	bpl.n	8006b46 <__swsetup_r+0x5a>
 8006b20:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006b22:	b141      	cbz	r1, 8006b36 <__swsetup_r+0x4a>
 8006b24:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006b28:	4299      	cmp	r1, r3
 8006b2a:	d002      	beq.n	8006b32 <__swsetup_r+0x46>
 8006b2c:	4628      	mov	r0, r5
 8006b2e:	f7ff fa8d 	bl	800604c <_free_r>
 8006b32:	2300      	movs	r3, #0
 8006b34:	6363      	str	r3, [r4, #52]	@ 0x34
 8006b36:	89a3      	ldrh	r3, [r4, #12]
 8006b38:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006b3c:	81a3      	strh	r3, [r4, #12]
 8006b3e:	2300      	movs	r3, #0
 8006b40:	6063      	str	r3, [r4, #4]
 8006b42:	6923      	ldr	r3, [r4, #16]
 8006b44:	6023      	str	r3, [r4, #0]
 8006b46:	89a3      	ldrh	r3, [r4, #12]
 8006b48:	f043 0308 	orr.w	r3, r3, #8
 8006b4c:	81a3      	strh	r3, [r4, #12]
 8006b4e:	6923      	ldr	r3, [r4, #16]
 8006b50:	b94b      	cbnz	r3, 8006b66 <__swsetup_r+0x7a>
 8006b52:	89a3      	ldrh	r3, [r4, #12]
 8006b54:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006b58:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006b5c:	d003      	beq.n	8006b66 <__swsetup_r+0x7a>
 8006b5e:	4621      	mov	r1, r4
 8006b60:	4628      	mov	r0, r5
 8006b62:	f7ff ff15 	bl	8006990 <__smakebuf_r>
 8006b66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b6a:	f013 0201 	ands.w	r2, r3, #1
 8006b6e:	d00a      	beq.n	8006b86 <__swsetup_r+0x9a>
 8006b70:	2200      	movs	r2, #0
 8006b72:	60a2      	str	r2, [r4, #8]
 8006b74:	6962      	ldr	r2, [r4, #20]
 8006b76:	4252      	negs	r2, r2
 8006b78:	61a2      	str	r2, [r4, #24]
 8006b7a:	6922      	ldr	r2, [r4, #16]
 8006b7c:	b942      	cbnz	r2, 8006b90 <__swsetup_r+0xa4>
 8006b7e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006b82:	d1c5      	bne.n	8006b10 <__swsetup_r+0x24>
 8006b84:	bd38      	pop	{r3, r4, r5, pc}
 8006b86:	0799      	lsls	r1, r3, #30
 8006b88:	bf58      	it	pl
 8006b8a:	6962      	ldrpl	r2, [r4, #20]
 8006b8c:	60a2      	str	r2, [r4, #8]
 8006b8e:	e7f4      	b.n	8006b7a <__swsetup_r+0x8e>
 8006b90:	2000      	movs	r0, #0
 8006b92:	e7f7      	b.n	8006b84 <__swsetup_r+0x98>
 8006b94:	20000018 	.word	0x20000018

08006b98 <_fstat_r>:
 8006b98:	b538      	push	{r3, r4, r5, lr}
 8006b9a:	4d07      	ldr	r5, [pc, #28]	@ (8006bb8 <_fstat_r+0x20>)
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	4604      	mov	r4, r0
 8006ba0:	4608      	mov	r0, r1
 8006ba2:	4611      	mov	r1, r2
 8006ba4:	602b      	str	r3, [r5, #0]
 8006ba6:	f7fa f815 	bl	8000bd4 <_fstat>
 8006baa:	1c43      	adds	r3, r0, #1
 8006bac:	d102      	bne.n	8006bb4 <_fstat_r+0x1c>
 8006bae:	682b      	ldr	r3, [r5, #0]
 8006bb0:	b103      	cbz	r3, 8006bb4 <_fstat_r+0x1c>
 8006bb2:	6023      	str	r3, [r4, #0]
 8006bb4:	bd38      	pop	{r3, r4, r5, pc}
 8006bb6:	bf00      	nop
 8006bb8:	20002a88 	.word	0x20002a88

08006bbc <_isatty_r>:
 8006bbc:	b538      	push	{r3, r4, r5, lr}
 8006bbe:	4d06      	ldr	r5, [pc, #24]	@ (8006bd8 <_isatty_r+0x1c>)
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	4604      	mov	r4, r0
 8006bc4:	4608      	mov	r0, r1
 8006bc6:	602b      	str	r3, [r5, #0]
 8006bc8:	f7f9 ff82 	bl	8000ad0 <_isatty>
 8006bcc:	1c43      	adds	r3, r0, #1
 8006bce:	d102      	bne.n	8006bd6 <_isatty_r+0x1a>
 8006bd0:	682b      	ldr	r3, [r5, #0]
 8006bd2:	b103      	cbz	r3, 8006bd6 <_isatty_r+0x1a>
 8006bd4:	6023      	str	r3, [r4, #0]
 8006bd6:	bd38      	pop	{r3, r4, r5, pc}
 8006bd8:	20002a88 	.word	0x20002a88

08006bdc <_sbrk_r>:
 8006bdc:	b538      	push	{r3, r4, r5, lr}
 8006bde:	4d06      	ldr	r5, [pc, #24]	@ (8006bf8 <_sbrk_r+0x1c>)
 8006be0:	2300      	movs	r3, #0
 8006be2:	4604      	mov	r4, r0
 8006be4:	4608      	mov	r0, r1
 8006be6:	602b      	str	r3, [r5, #0]
 8006be8:	f7fa f8c0 	bl	8000d6c <_sbrk>
 8006bec:	1c43      	adds	r3, r0, #1
 8006bee:	d102      	bne.n	8006bf6 <_sbrk_r+0x1a>
 8006bf0:	682b      	ldr	r3, [r5, #0]
 8006bf2:	b103      	cbz	r3, 8006bf6 <_sbrk_r+0x1a>
 8006bf4:	6023      	str	r3, [r4, #0]
 8006bf6:	bd38      	pop	{r3, r4, r5, pc}
 8006bf8:	20002a88 	.word	0x20002a88

08006bfc <_init>:
 8006bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bfe:	bf00      	nop
 8006c00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c02:	bc08      	pop	{r3}
 8006c04:	469e      	mov	lr, r3
 8006c06:	4770      	bx	lr

08006c08 <_fini>:
 8006c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c0a:	bf00      	nop
 8006c0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c0e:	bc08      	pop	{r3}
 8006c10:	469e      	mov	lr, r3
 8006c12:	4770      	bx	lr
