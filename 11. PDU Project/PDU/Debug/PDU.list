
PDU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bd54  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c00  0800bee8  0800bee8  0000cee8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cae8  0800cae8  0000e1d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800cae8  0800cae8  0000dae8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800caf0  0800caf0  0000e1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800caf0  0800caf0  0000daf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800caf4  0800caf4  0000daf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800caf8  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006adc  200001d8  0800ccd0  0000e1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20006cb4  0800ccd0  0000ecb4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016846  00000000  00000000  0000e208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003975  00000000  00000000  00024a4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001308  00000000  00000000  000283c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e79  00000000  00000000  000296d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002bf5f  00000000  00000000  0002a549  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019997  00000000  00000000  000564a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001013b2  00000000  00000000  0006fe3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001711f1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d44  00000000  00000000  00171234  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008c  00000000  00000000  00176f78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800becc 	.word	0x0800becc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	0800becc 	.word	0x0800becc

080001d0 <OS_CPU_FP_Reg_Push>:

#if (defined(__VFP_FP__) && !defined(__SOFTFP__))

.thumb_func
OS_CPU_FP_Reg_Push:
    MRS     R1, PSP                                             @ PSP is process stack pointer
 80001d0:	f3ef 8109 	mrs	r1, PSP
    CBZ     R1, OS_CPU_FP_nosave                                @ Skip FP register save the first time
 80001d4:	b121      	cbz	r1, 80001e0 <OS_CPU_FP_nosave>

    VSTMDB  R0!, {S16-S31}
 80001d6:	ed20 8a10 	vstmdb	r0!, {s16-s31}
    LDR     R1, =OSTCBCur
 80001da:	4951      	ldr	r1, [pc, #324]	@ (8000320 <OS_CPU_PendSVHandler+0x7a>)
    LDR     R2, [R1]
 80001dc:	680a      	ldr	r2, [r1, #0]
    STR     R0, [R2]
 80001de:	6010      	str	r0, [r2, #0]

080001e0 <OS_CPU_FP_nosave>:
OS_CPU_FP_nosave:
    BX      LR
 80001e0:	4770      	bx	lr

080001e2 <OS_CPU_FP_Reg_Pop>:

#if (defined(__VFP_FP__) && !defined(__SOFTFP__))

.thumb_func
OS_CPU_FP_Reg_Pop:
    VLDMIA  R0!, {S16-S31}
 80001e2:	ecb0 8a10 	vldmia	r0!, {s16-s31}
    LDR     R1, =OSTCBHighRdy
 80001e6:	494f      	ldr	r1, [pc, #316]	@ (8000324 <OS_CPU_PendSVHandler+0x7e>)
    LDR     R2, [R1]
 80001e8:	680a      	ldr	r2, [r1, #0]
    STR     R0, [R2]
 80001ea:	6010      	str	r0, [r2, #0]
    BX      LR
 80001ec:	4770      	bx	lr

080001ee <OS_CPU_SR_Save>:
@                      CPSIE i
@********************************************************************************************************

.thumb_func
OS_CPU_SR_Save:
    CPSID   I                                   @ Cortex-M7 errata notice. See Note #2
 80001ee:	b672      	cpsid	i
    PUSH   {R1}
 80001f0:	b402      	push	{r1}
    MRS     R1, BASEPRI
 80001f2:	f3ef 8111 	mrs	r1, BASEPRI
    MSR     BASEPRI, R0
 80001f6:	f380 8811 	msr	BASEPRI, r0
    DSB
 80001fa:	f3bf 8f4f 	dsb	sy
    ISB
 80001fe:	f3bf 8f6f 	isb	sy
    MOV     R0, R1
 8000202:	4608      	mov	r0, r1
    POP    {R1}
 8000204:	bc02      	pop	{r1}
    CPSIE   I
 8000206:	b662      	cpsie	i
    BX      LR
 8000208:	4770      	bx	lr

0800020a <OS_CPU_SR_Restore>:

.thumb_func
OS_CPU_SR_Restore:
    CPSID   I                                   @ Cortex-M7 errata notice. See Note #2
 800020a:	b672      	cpsid	i
    MSR     BASEPRI, R0
 800020c:	f380 8811 	msr	BASEPRI, r0
    DSB
 8000210:	f3bf 8f4f 	dsb	sy
    ISB
 8000214:	f3bf 8f6f 	isb	sy
    CPSIE   I
 8000218:	b662      	cpsie	i
    BX      LR
 800021a:	4770      	bx	lr

0800021c <OSStartHighRdy>:
@              i) Enable interrupts (tasks will run with interrupts enabled).
@********************************************************************************************************

.thumb_func
OSStartHighRdy:
    CPSID   I                                                   @ Prevent interruption during context switch
 800021c:	b672      	cpsid	i
    MOVW    R0, #:lower16:NVIC_SYSPRI14                         @ Set the PendSV exception priority
 800021e:	f64e 5022 	movw	r0, #60706	@ 0xed22
    MOVT    R0, #:upper16:NVIC_SYSPRI14
 8000222:	f2ce 0000 	movt	r0, #57344	@ 0xe000

    MOVW    R1, #:lower16:NVIC_PENDSV_PRI
 8000226:	f240 01ff 	movw	r1, #255	@ 0xff
    MOVT    R1, #:upper16:NVIC_PENDSV_PRI
 800022a:	f2c0 0100 	movt	r1, #0
    STRB    R1, [R0]
 800022e:	7001      	strb	r1, [r0, #0]

    MOVS    R0, #0                                              @ Set the PSP to 0 for initial context switch call
 8000230:	2000      	movs	r0, #0
    MSR     PSP, R0
 8000232:	f380 8809 	msr	PSP, r0

    MOVW    R0, #:lower16:OS_CPU_ExceptStkBase                  @ Initialize the MSP to the OS_CPU_ExceptStkBase
 8000236:	f245 7038 	movw	r0, #22328	@ 0x5738
    MOVT    R0, #:upper16:OS_CPU_ExceptStkBase
 800023a:	f2c2 0000 	movt	r0, #8192	@ 0x2000
    LDR     R1, [R0]
 800023e:	6801      	ldr	r1, [r0, #0]
    MSR     MSP, R1
 8000240:	f381 8808 	msr	MSP, r1

    BL      OSTaskSwHook                                        @ Call OSTaskSwHook() for FPU Push & Pop
 8000244:	f006 fbce 	bl	80069e4 <OSTaskSwHook>

    LDR     R0, =OSRunning                                      @ OSRunning = TRUE
 8000248:	4837      	ldr	r0, [pc, #220]	@ (8000328 <OS_CPU_PendSVHandler+0x82>)
    MOVS    R1, #1
 800024a:	2101      	movs	r1, #1
    STRB    R1, [R0]
 800024c:	7001      	strb	r1, [r0, #0]

    MOVW    R0, #:lower16:OSPrioCur                             @ OSPrioCur   = OSPrioHighRdy;
 800024e:	f645 20a2 	movw	r0, #23202	@ 0x5aa2
    MOVT    R0, #:upper16:OSPrioCur
 8000252:	f2c2 0000 	movt	r0, #8192	@ 0x2000
    MOVW    R1, #:lower16:OSPrioHighRdy
 8000256:	f645 21a3 	movw	r1, #23203	@ 0x5aa3
    MOVT    R1, #:upper16:OSPrioHighRdy
 800025a:	f2c2 0100 	movt	r1, #8192	@ 0x2000
    LDRB    R2, [R1]
 800025e:	780a      	ldrb	r2, [r1, #0]
    STRB    R2, [R0]
 8000260:	7002      	strb	r2, [r0, #0]

    MOVW    R0, #:lower16:OSTCBCur                              @ OSTCBCur  = OSTCBHighRdy;
 8000262:	f645 40b8 	movw	r0, #23736	@ 0x5cb8
    MOVT    R0, #:upper16:OSTCBCur
 8000266:	f2c2 0000 	movt	r0, #8192	@ 0x2000
    MOVW    R1, #:lower16:OSTCBHighRdy
 800026a:	f645 41c0 	movw	r1, #23744	@ 0x5cc0
    MOVT    R1, #:upper16:OSTCBHighRdy
 800026e:	f2c2 0100 	movt	r1, #8192	@ 0x2000
    LDR     R2, [R1]
 8000272:	680a      	ldr	r2, [r1, #0]
    STR     R2, [R0]
 8000274:	6002      	str	r2, [r0, #0]

    LDR     R0, [R2]                                            @ R0 is new process SP; SP = OSTCBHighRdy->OSTCBStkPtr;
 8000276:	6810      	ldr	r0, [r2, #0]
    MSR     PSP, R0                                             @ Load PSP with new process SP
 8000278:	f380 8809 	msr	PSP, r0

    MRS     R0, CONTROL
 800027c:	f3ef 8014 	mrs	r0, CONTROL
    ORR     R0, R0, #2
 8000280:	f040 0002 	orr.w	r0, r0, #2
    MSR     CONTROL, R0
 8000284:	f380 8814 	msr	CONTROL, r0
    ISB                                                         @ Sync instruction stream
 8000288:	f3bf 8f6f 	isb	sy

    LDMFD    SP!, {R4-R11, LR}                                  @ Restore r4-11, lr from new process stack
 800028c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    LDMFD    SP!, {R0-R3}                                       @ Restore r0, r3
 8000290:	bc0f      	pop	{r0, r1, r2, r3}
    LDMFD    SP!, {R12, LR}                                     @ Load R12 and LR
 8000292:	e8bd 5000 	ldmia.w	sp!, {ip, lr}
    LDMFD    SP!, {R1, R2}                                      @ Load PC and discard xPSR
 8000296:	bc06      	pop	{r1, r2}
    CPSIE    I
 8000298:	b662      	cpsie	i
    BX       R1
 800029a:	4708      	bx	r1

0800029c <OSCtxSw>:
@********************************************************************************************************

.thumb_func
OSCtxSw:
OSIntCtxSw:
    LDR     R0, =NVIC_INT_CTRL                                  @ Trigger the PendSV exception (causes context switch)
 800029c:	4823      	ldr	r0, [pc, #140]	@ (800032c <OS_CPU_PendSVHandler+0x86>)
    LDR     R1, =NVIC_PENDSVSET
 800029e:	f04f 5180 	mov.w	r1, #268435456	@ 0x10000000
    STR     R1, [R0]
 80002a2:	6001      	str	r1, [r0, #0]
    BX      LR
 80002a4:	4770      	bx	lr

080002a6 <OS_CPU_PendSVHandler>:
@                  CPSIE i
@********************************************************************************************************

.thumb_func
OS_CPU_PendSVHandler:
    CPSID   I                                                   @ Cortex-M7 errata notice. See Note #5
 80002a6:	b672      	cpsid	i
    MOVW    R2, #:lower16:OS_KA_BASEPRI_Boundary                @ Set BASEPRI priority level required for exception preemption
 80002a8:	f245 7240 	movw	r2, #22336	@ 0x5740
    MOVT    R2, #:upper16:OS_KA_BASEPRI_Boundary
 80002ac:	f2c2 0200 	movt	r2, #8192	@ 0x2000
    LDR     R1, [R2]
 80002b0:	6811      	ldr	r1, [r2, #0]
    MSR     BASEPRI, R1
 80002b2:	f381 8811 	msr	BASEPRI, r1
    DSB
 80002b6:	f3bf 8f4f 	dsb	sy
    ISB
 80002ba:	f3bf 8f6f 	isb	sy
    CPSIE   I
 80002be:	b662      	cpsie	i

    MRS     R0, PSP                                             @ PSP is process stack pointer
 80002c0:	f3ef 8009 	mrs	r0, PSP
    STMFD   R0!, {R4-R11, R14}                                  @ Save remaining regs r4-11, R14 on process stack
 80002c4:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    MOVW    R5, #:lower16:OSTCBCur                              @ OSTCBCur->OSTCBStkPtr = SP;
 80002c8:	f645 45b8 	movw	r5, #23736	@ 0x5cb8
    MOVT    R5, #:upper16:OSTCBCur
 80002cc:	f2c2 0500 	movt	r5, #8192	@ 0x2000
    LDR     R1, [R5]
 80002d0:	6829      	ldr	r1, [r5, #0]
    STR     R0, [R1]                                            @ R0 is SP of process being switched out
 80002d2:	6008      	str	r0, [r1, #0]

                                                                @ At this point, entire context of process has been saved
    MOV     R4, LR                                              @ Save LR exc_return value
 80002d4:	4674      	mov	r4, lr
    BL      OSTaskSwHook                                        @ Call OSTaskSwHook() for FPU Push & Pop
 80002d6:	f006 fb85 	bl	80069e4 <OSTaskSwHook>

    MOVW    R0, #:lower16:OSPrioCur                             @ OSPrioCur   = OSPrioHighRdy;
 80002da:	f645 20a2 	movw	r0, #23202	@ 0x5aa2
    MOVT    R0, #:upper16:OSPrioCur
 80002de:	f2c2 0000 	movt	r0, #8192	@ 0x2000
    MOVW    R1, #:lower16:OSPrioHighRdy
 80002e2:	f645 21a3 	movw	r1, #23203	@ 0x5aa3
    MOVT    R1, #:upper16:OSPrioHighRdy
 80002e6:	f2c2 0100 	movt	r1, #8192	@ 0x2000
    LDRB    R2, [R1]
 80002ea:	780a      	ldrb	r2, [r1, #0]
    STRB    R2, [R0]
 80002ec:	7002      	strb	r2, [r0, #0]

    MOVW    R1, #:lower16:OSTCBHighRdy                          @ OSTCBCur  = OSTCBHighRdy;
 80002ee:	f645 41c0 	movw	r1, #23744	@ 0x5cc0
    MOVT    R1, #:upper16:OSTCBHighRdy
 80002f2:	f2c2 0100 	movt	r1, #8192	@ 0x2000
    LDR     R2, [R1]
 80002f6:	680a      	ldr	r2, [r1, #0]
    STR     R2, [R5]
 80002f8:	602a      	str	r2, [r5, #0]

    ORR     LR,  R4, #0x04                                      @ Ensure exception return uses process stack
 80002fa:	f044 0e04 	orr.w	lr, r4, #4
    LDR     R0,  [R2]                                           @ R0 is new process SP; SP = OSTCBHighRdy->OSTCBStkPtr;
 80002fe:	6810      	ldr	r0, [r2, #0]
    LDMFD   R0!, {R4-R11, R14}                                  @ Restore r4-11, R14 from new process stack
 8000300:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    MSR     PSP, R0                                             @ Load PSP with new process SP
 8000304:	f380 8809 	msr	PSP, r0

    MOV     R2, #0                                              @ Restore BASEPRI priority level to 0
 8000308:	f04f 0200 	mov.w	r2, #0
    CPSID   I
 800030c:	b672      	cpsid	i
    MSR     BASEPRI, R2
 800030e:	f382 8811 	msr	BASEPRI, r2
    DSB
 8000312:	f3bf 8f4f 	dsb	sy
    ISB
 8000316:	f3bf 8f6f 	isb	sy
    CPSIE   I
 800031a:	b662      	cpsie	i
    BX      LR                                                  @ Exception return will restore remaining context
 800031c:	4770      	bx	lr
 800031e:	0000      	.short	0x0000
    LDR     R1, =OSTCBCur
 8000320:	20005cb8 	.word	0x20005cb8
    LDR     R1, =OSTCBHighRdy
 8000324:	20005cc0 	.word	0x20005cc0
    LDR     R0, =OSRunning                                      @ OSRunning = TRUE
 8000328:	20005ab0 	.word	0x20005ab0
    LDR     R0, =NVIC_INT_CTRL                                  @ Trigger the PendSV exception (causes context switch)
 800032c:	e000ed04 	.word	0xe000ed04

08000330 <memchr>:
 8000330:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000334:	2a10      	cmp	r2, #16
 8000336:	db2b      	blt.n	8000390 <memchr+0x60>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	d008      	beq.n	8000350 <memchr+0x20>
 800033e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000342:	3a01      	subs	r2, #1
 8000344:	428b      	cmp	r3, r1
 8000346:	d02d      	beq.n	80003a4 <memchr+0x74>
 8000348:	f010 0f07 	tst.w	r0, #7
 800034c:	b342      	cbz	r2, 80003a0 <memchr+0x70>
 800034e:	d1f6      	bne.n	800033e <memchr+0xe>
 8000350:	b4f0      	push	{r4, r5, r6, r7}
 8000352:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000356:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800035a:	f022 0407 	bic.w	r4, r2, #7
 800035e:	f07f 0700 	mvns.w	r7, #0
 8000362:	2300      	movs	r3, #0
 8000364:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000368:	3c08      	subs	r4, #8
 800036a:	ea85 0501 	eor.w	r5, r5, r1
 800036e:	ea86 0601 	eor.w	r6, r6, r1
 8000372:	fa85 f547 	uadd8	r5, r5, r7
 8000376:	faa3 f587 	sel	r5, r3, r7
 800037a:	fa86 f647 	uadd8	r6, r6, r7
 800037e:	faa5 f687 	sel	r6, r5, r7
 8000382:	b98e      	cbnz	r6, 80003a8 <memchr+0x78>
 8000384:	d1ee      	bne.n	8000364 <memchr+0x34>
 8000386:	bcf0      	pop	{r4, r5, r6, r7}
 8000388:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800038c:	f002 0207 	and.w	r2, r2, #7
 8000390:	b132      	cbz	r2, 80003a0 <memchr+0x70>
 8000392:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000396:	3a01      	subs	r2, #1
 8000398:	ea83 0301 	eor.w	r3, r3, r1
 800039c:	b113      	cbz	r3, 80003a4 <memchr+0x74>
 800039e:	d1f8      	bne.n	8000392 <memchr+0x62>
 80003a0:	2000      	movs	r0, #0
 80003a2:	4770      	bx	lr
 80003a4:	3801      	subs	r0, #1
 80003a6:	4770      	bx	lr
 80003a8:	2d00      	cmp	r5, #0
 80003aa:	bf06      	itte	eq
 80003ac:	4635      	moveq	r5, r6
 80003ae:	3803      	subeq	r0, #3
 80003b0:	3807      	subne	r0, #7
 80003b2:	f015 0f01 	tst.w	r5, #1
 80003b6:	d107      	bne.n	80003c8 <memchr+0x98>
 80003b8:	3001      	adds	r0, #1
 80003ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80003be:	bf02      	ittt	eq
 80003c0:	3001      	addeq	r0, #1
 80003c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003c6:	3001      	addeq	r0, #1
 80003c8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ca:	3801      	subs	r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	bf00      	nop

080003d0 <strlen>:
 80003d0:	4603      	mov	r3, r0
 80003d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003d6:	2a00      	cmp	r2, #0
 80003d8:	d1fb      	bne.n	80003d2 <strlen+0x2>
 80003da:	1a18      	subs	r0, r3, r0
 80003dc:	3801      	subs	r0, #1
 80003de:	4770      	bx	lr

080003e0 <__aeabi_drsub>:
 80003e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003e4:	e002      	b.n	80003ec <__adddf3>
 80003e6:	bf00      	nop

080003e8 <__aeabi_dsub>:
 80003e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003ec <__adddf3>:
 80003ec:	b530      	push	{r4, r5, lr}
 80003ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	bf1f      	itttt	ne
 8000402:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000406:	ea55 0c02 	orrsne.w	ip, r5, r2
 800040a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800040e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000412:	f000 80e2 	beq.w	80005da <__adddf3+0x1ee>
 8000416:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800041a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800041e:	bfb8      	it	lt
 8000420:	426d      	neglt	r5, r5
 8000422:	dd0c      	ble.n	800043e <__adddf3+0x52>
 8000424:	442c      	add	r4, r5
 8000426:	ea80 0202 	eor.w	r2, r0, r2
 800042a:	ea81 0303 	eor.w	r3, r1, r3
 800042e:	ea82 0000 	eor.w	r0, r2, r0
 8000432:	ea83 0101 	eor.w	r1, r3, r1
 8000436:	ea80 0202 	eor.w	r2, r0, r2
 800043a:	ea81 0303 	eor.w	r3, r1, r3
 800043e:	2d36      	cmp	r5, #54	@ 0x36
 8000440:	bf88      	it	hi
 8000442:	bd30      	pophi	{r4, r5, pc}
 8000444:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000448:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800044c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000450:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000454:	d002      	beq.n	800045c <__adddf3+0x70>
 8000456:	4240      	negs	r0, r0
 8000458:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800045c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000460:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000464:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000468:	d002      	beq.n	8000470 <__adddf3+0x84>
 800046a:	4252      	negs	r2, r2
 800046c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000470:	ea94 0f05 	teq	r4, r5
 8000474:	f000 80a7 	beq.w	80005c6 <__adddf3+0x1da>
 8000478:	f1a4 0401 	sub.w	r4, r4, #1
 800047c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000480:	db0d      	blt.n	800049e <__adddf3+0xb2>
 8000482:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000486:	fa22 f205 	lsr.w	r2, r2, r5
 800048a:	1880      	adds	r0, r0, r2
 800048c:	f141 0100 	adc.w	r1, r1, #0
 8000490:	fa03 f20e 	lsl.w	r2, r3, lr
 8000494:	1880      	adds	r0, r0, r2
 8000496:	fa43 f305 	asr.w	r3, r3, r5
 800049a:	4159      	adcs	r1, r3
 800049c:	e00e      	b.n	80004bc <__adddf3+0xd0>
 800049e:	f1a5 0520 	sub.w	r5, r5, #32
 80004a2:	f10e 0e20 	add.w	lr, lr, #32
 80004a6:	2a01      	cmp	r2, #1
 80004a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004ac:	bf28      	it	cs
 80004ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004b2:	fa43 f305 	asr.w	r3, r3, r5
 80004b6:	18c0      	adds	r0, r0, r3
 80004b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004c0:	d507      	bpl.n	80004d2 <__adddf3+0xe6>
 80004c2:	f04f 0e00 	mov.w	lr, #0
 80004c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80004ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80004d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80004d6:	d31b      	bcc.n	8000510 <__adddf3+0x124>
 80004d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80004dc:	d30c      	bcc.n	80004f8 <__adddf3+0x10c>
 80004de:	0849      	lsrs	r1, r1, #1
 80004e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004e8:	f104 0401 	add.w	r4, r4, #1
 80004ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004f4:	f080 809a 	bcs.w	800062c <__adddf3+0x240>
 80004f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004fc:	bf08      	it	eq
 80004fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000502:	f150 0000 	adcs.w	r0, r0, #0
 8000506:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800050a:	ea41 0105 	orr.w	r1, r1, r5
 800050e:	bd30      	pop	{r4, r5, pc}
 8000510:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000514:	4140      	adcs	r0, r0
 8000516:	eb41 0101 	adc.w	r1, r1, r1
 800051a:	3c01      	subs	r4, #1
 800051c:	bf28      	it	cs
 800051e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000522:	d2e9      	bcs.n	80004f8 <__adddf3+0x10c>
 8000524:	f091 0f00 	teq	r1, #0
 8000528:	bf04      	itt	eq
 800052a:	4601      	moveq	r1, r0
 800052c:	2000      	moveq	r0, #0
 800052e:	fab1 f381 	clz	r3, r1
 8000532:	bf08      	it	eq
 8000534:	3320      	addeq	r3, #32
 8000536:	f1a3 030b 	sub.w	r3, r3, #11
 800053a:	f1b3 0220 	subs.w	r2, r3, #32
 800053e:	da0c      	bge.n	800055a <__adddf3+0x16e>
 8000540:	320c      	adds	r2, #12
 8000542:	dd08      	ble.n	8000556 <__adddf3+0x16a>
 8000544:	f102 0c14 	add.w	ip, r2, #20
 8000548:	f1c2 020c 	rsb	r2, r2, #12
 800054c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000550:	fa21 f102 	lsr.w	r1, r1, r2
 8000554:	e00c      	b.n	8000570 <__adddf3+0x184>
 8000556:	f102 0214 	add.w	r2, r2, #20
 800055a:	bfd8      	it	le
 800055c:	f1c2 0c20 	rsble	ip, r2, #32
 8000560:	fa01 f102 	lsl.w	r1, r1, r2
 8000564:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000568:	bfdc      	itt	le
 800056a:	ea41 010c 	orrle.w	r1, r1, ip
 800056e:	4090      	lslle	r0, r2
 8000570:	1ae4      	subs	r4, r4, r3
 8000572:	bfa2      	ittt	ge
 8000574:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000578:	4329      	orrge	r1, r5
 800057a:	bd30      	popge	{r4, r5, pc}
 800057c:	ea6f 0404 	mvn.w	r4, r4
 8000580:	3c1f      	subs	r4, #31
 8000582:	da1c      	bge.n	80005be <__adddf3+0x1d2>
 8000584:	340c      	adds	r4, #12
 8000586:	dc0e      	bgt.n	80005a6 <__adddf3+0x1ba>
 8000588:	f104 0414 	add.w	r4, r4, #20
 800058c:	f1c4 0220 	rsb	r2, r4, #32
 8000590:	fa20 f004 	lsr.w	r0, r0, r4
 8000594:	fa01 f302 	lsl.w	r3, r1, r2
 8000598:	ea40 0003 	orr.w	r0, r0, r3
 800059c:	fa21 f304 	lsr.w	r3, r1, r4
 80005a0:	ea45 0103 	orr.w	r1, r5, r3
 80005a4:	bd30      	pop	{r4, r5, pc}
 80005a6:	f1c4 040c 	rsb	r4, r4, #12
 80005aa:	f1c4 0220 	rsb	r2, r4, #32
 80005ae:	fa20 f002 	lsr.w	r0, r0, r2
 80005b2:	fa01 f304 	lsl.w	r3, r1, r4
 80005b6:	ea40 0003 	orr.w	r0, r0, r3
 80005ba:	4629      	mov	r1, r5
 80005bc:	bd30      	pop	{r4, r5, pc}
 80005be:	fa21 f004 	lsr.w	r0, r1, r4
 80005c2:	4629      	mov	r1, r5
 80005c4:	bd30      	pop	{r4, r5, pc}
 80005c6:	f094 0f00 	teq	r4, #0
 80005ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80005ce:	bf06      	itte	eq
 80005d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80005d4:	3401      	addeq	r4, #1
 80005d6:	3d01      	subne	r5, #1
 80005d8:	e74e      	b.n	8000478 <__adddf3+0x8c>
 80005da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005de:	bf18      	it	ne
 80005e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005e4:	d029      	beq.n	800063a <__adddf3+0x24e>
 80005e6:	ea94 0f05 	teq	r4, r5
 80005ea:	bf08      	it	eq
 80005ec:	ea90 0f02 	teqeq	r0, r2
 80005f0:	d005      	beq.n	80005fe <__adddf3+0x212>
 80005f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005f6:	bf04      	itt	eq
 80005f8:	4619      	moveq	r1, r3
 80005fa:	4610      	moveq	r0, r2
 80005fc:	bd30      	pop	{r4, r5, pc}
 80005fe:	ea91 0f03 	teq	r1, r3
 8000602:	bf1e      	ittt	ne
 8000604:	2100      	movne	r1, #0
 8000606:	2000      	movne	r0, #0
 8000608:	bd30      	popne	{r4, r5, pc}
 800060a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800060e:	d105      	bne.n	800061c <__adddf3+0x230>
 8000610:	0040      	lsls	r0, r0, #1
 8000612:	4149      	adcs	r1, r1
 8000614:	bf28      	it	cs
 8000616:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800061a:	bd30      	pop	{r4, r5, pc}
 800061c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000620:	bf3c      	itt	cc
 8000622:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000626:	bd30      	popcc	{r4, r5, pc}
 8000628:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800062c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000630:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000634:	f04f 0000 	mov.w	r0, #0
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800063e:	bf1a      	itte	ne
 8000640:	4619      	movne	r1, r3
 8000642:	4610      	movne	r0, r2
 8000644:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000648:	bf1c      	itt	ne
 800064a:	460b      	movne	r3, r1
 800064c:	4602      	movne	r2, r0
 800064e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000652:	bf06      	itte	eq
 8000654:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000658:	ea91 0f03 	teqeq	r1, r3
 800065c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000660:	bd30      	pop	{r4, r5, pc}
 8000662:	bf00      	nop

08000664 <__aeabi_ui2d>:
 8000664:	f090 0f00 	teq	r0, #0
 8000668:	bf04      	itt	eq
 800066a:	2100      	moveq	r1, #0
 800066c:	4770      	bxeq	lr
 800066e:	b530      	push	{r4, r5, lr}
 8000670:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000674:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000678:	f04f 0500 	mov.w	r5, #0
 800067c:	f04f 0100 	mov.w	r1, #0
 8000680:	e750      	b.n	8000524 <__adddf3+0x138>
 8000682:	bf00      	nop

08000684 <__aeabi_i2d>:
 8000684:	f090 0f00 	teq	r0, #0
 8000688:	bf04      	itt	eq
 800068a:	2100      	moveq	r1, #0
 800068c:	4770      	bxeq	lr
 800068e:	b530      	push	{r4, r5, lr}
 8000690:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000694:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000698:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800069c:	bf48      	it	mi
 800069e:	4240      	negmi	r0, r0
 80006a0:	f04f 0100 	mov.w	r1, #0
 80006a4:	e73e      	b.n	8000524 <__adddf3+0x138>
 80006a6:	bf00      	nop

080006a8 <__aeabi_f2d>:
 80006a8:	0042      	lsls	r2, r0, #1
 80006aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80006b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006b6:	bf1f      	itttt	ne
 80006b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80006bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80006c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80006c4:	4770      	bxne	lr
 80006c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80006ca:	bf08      	it	eq
 80006cc:	4770      	bxeq	lr
 80006ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80006d2:	bf04      	itt	eq
 80006d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80006d8:	4770      	bxeq	lr
 80006da:	b530      	push	{r4, r5, lr}
 80006dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006e8:	e71c      	b.n	8000524 <__adddf3+0x138>
 80006ea:	bf00      	nop

080006ec <__aeabi_ul2d>:
 80006ec:	ea50 0201 	orrs.w	r2, r0, r1
 80006f0:	bf08      	it	eq
 80006f2:	4770      	bxeq	lr
 80006f4:	b530      	push	{r4, r5, lr}
 80006f6:	f04f 0500 	mov.w	r5, #0
 80006fa:	e00a      	b.n	8000712 <__aeabi_l2d+0x16>

080006fc <__aeabi_l2d>:
 80006fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000700:	bf08      	it	eq
 8000702:	4770      	bxeq	lr
 8000704:	b530      	push	{r4, r5, lr}
 8000706:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800070a:	d502      	bpl.n	8000712 <__aeabi_l2d+0x16>
 800070c:	4240      	negs	r0, r0
 800070e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000712:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000716:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800071a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800071e:	f43f aed8 	beq.w	80004d2 <__adddf3+0xe6>
 8000722:	f04f 0203 	mov.w	r2, #3
 8000726:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800072a:	bf18      	it	ne
 800072c:	3203      	addne	r2, #3
 800072e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000732:	bf18      	it	ne
 8000734:	3203      	addne	r2, #3
 8000736:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800073a:	f1c2 0320 	rsb	r3, r2, #32
 800073e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000742:	fa20 f002 	lsr.w	r0, r0, r2
 8000746:	fa01 fe03 	lsl.w	lr, r1, r3
 800074a:	ea40 000e 	orr.w	r0, r0, lr
 800074e:	fa21 f102 	lsr.w	r1, r1, r2
 8000752:	4414      	add	r4, r2
 8000754:	e6bd      	b.n	80004d2 <__adddf3+0xe6>
 8000756:	bf00      	nop

08000758 <__aeabi_dmul>:
 8000758:	b570      	push	{r4, r5, r6, lr}
 800075a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800075e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000762:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000766:	bf1d      	ittte	ne
 8000768:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800076c:	ea94 0f0c 	teqne	r4, ip
 8000770:	ea95 0f0c 	teqne	r5, ip
 8000774:	f000 f8de 	bleq	8000934 <__aeabi_dmul+0x1dc>
 8000778:	442c      	add	r4, r5
 800077a:	ea81 0603 	eor.w	r6, r1, r3
 800077e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000782:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000786:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800078a:	bf18      	it	ne
 800078c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000790:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000794:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000798:	d038      	beq.n	800080c <__aeabi_dmul+0xb4>
 800079a:	fba0 ce02 	umull	ip, lr, r0, r2
 800079e:	f04f 0500 	mov.w	r5, #0
 80007a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80007a6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80007aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80007ae:	f04f 0600 	mov.w	r6, #0
 80007b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80007b6:	f09c 0f00 	teq	ip, #0
 80007ba:	bf18      	it	ne
 80007bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80007c0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80007c4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80007c8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80007cc:	d204      	bcs.n	80007d8 <__aeabi_dmul+0x80>
 80007ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80007d2:	416d      	adcs	r5, r5
 80007d4:	eb46 0606 	adc.w	r6, r6, r6
 80007d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80007dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80007e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80007e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80007e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80007ec:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80007f0:	bf88      	it	hi
 80007f2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80007f6:	d81e      	bhi.n	8000836 <__aeabi_dmul+0xde>
 80007f8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80007fc:	bf08      	it	eq
 80007fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000802:	f150 0000 	adcs.w	r0, r0, #0
 8000806:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800080a:	bd70      	pop	{r4, r5, r6, pc}
 800080c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000810:	ea46 0101 	orr.w	r1, r6, r1
 8000814:	ea40 0002 	orr.w	r0, r0, r2
 8000818:	ea81 0103 	eor.w	r1, r1, r3
 800081c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000820:	bfc2      	ittt	gt
 8000822:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000826:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800082a:	bd70      	popgt	{r4, r5, r6, pc}
 800082c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000830:	f04f 0e00 	mov.w	lr, #0
 8000834:	3c01      	subs	r4, #1
 8000836:	f300 80ab 	bgt.w	8000990 <__aeabi_dmul+0x238>
 800083a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800083e:	bfde      	ittt	le
 8000840:	2000      	movle	r0, #0
 8000842:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000846:	bd70      	pople	{r4, r5, r6, pc}
 8000848:	f1c4 0400 	rsb	r4, r4, #0
 800084c:	3c20      	subs	r4, #32
 800084e:	da35      	bge.n	80008bc <__aeabi_dmul+0x164>
 8000850:	340c      	adds	r4, #12
 8000852:	dc1b      	bgt.n	800088c <__aeabi_dmul+0x134>
 8000854:	f104 0414 	add.w	r4, r4, #20
 8000858:	f1c4 0520 	rsb	r5, r4, #32
 800085c:	fa00 f305 	lsl.w	r3, r0, r5
 8000860:	fa20 f004 	lsr.w	r0, r0, r4
 8000864:	fa01 f205 	lsl.w	r2, r1, r5
 8000868:	ea40 0002 	orr.w	r0, r0, r2
 800086c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000870:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000878:	fa21 f604 	lsr.w	r6, r1, r4
 800087c:	eb42 0106 	adc.w	r1, r2, r6
 8000880:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000884:	bf08      	it	eq
 8000886:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800088a:	bd70      	pop	{r4, r5, r6, pc}
 800088c:	f1c4 040c 	rsb	r4, r4, #12
 8000890:	f1c4 0520 	rsb	r5, r4, #32
 8000894:	fa00 f304 	lsl.w	r3, r0, r4
 8000898:	fa20 f005 	lsr.w	r0, r0, r5
 800089c:	fa01 f204 	lsl.w	r2, r1, r4
 80008a0:	ea40 0002 	orr.w	r0, r0, r2
 80008a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80008a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80008ac:	f141 0100 	adc.w	r1, r1, #0
 80008b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80008b4:	bf08      	it	eq
 80008b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80008ba:	bd70      	pop	{r4, r5, r6, pc}
 80008bc:	f1c4 0520 	rsb	r5, r4, #32
 80008c0:	fa00 f205 	lsl.w	r2, r0, r5
 80008c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80008c8:	fa20 f304 	lsr.w	r3, r0, r4
 80008cc:	fa01 f205 	lsl.w	r2, r1, r5
 80008d0:	ea43 0302 	orr.w	r3, r3, r2
 80008d4:	fa21 f004 	lsr.w	r0, r1, r4
 80008d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80008dc:	fa21 f204 	lsr.w	r2, r1, r4
 80008e0:	ea20 0002 	bic.w	r0, r0, r2
 80008e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80008e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80008ec:	bf08      	it	eq
 80008ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80008f2:	bd70      	pop	{r4, r5, r6, pc}
 80008f4:	f094 0f00 	teq	r4, #0
 80008f8:	d10f      	bne.n	800091a <__aeabi_dmul+0x1c2>
 80008fa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80008fe:	0040      	lsls	r0, r0, #1
 8000900:	eb41 0101 	adc.w	r1, r1, r1
 8000904:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000908:	bf08      	it	eq
 800090a:	3c01      	subeq	r4, #1
 800090c:	d0f7      	beq.n	80008fe <__aeabi_dmul+0x1a6>
 800090e:	ea41 0106 	orr.w	r1, r1, r6
 8000912:	f095 0f00 	teq	r5, #0
 8000916:	bf18      	it	ne
 8000918:	4770      	bxne	lr
 800091a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800091e:	0052      	lsls	r2, r2, #1
 8000920:	eb43 0303 	adc.w	r3, r3, r3
 8000924:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000928:	bf08      	it	eq
 800092a:	3d01      	subeq	r5, #1
 800092c:	d0f7      	beq.n	800091e <__aeabi_dmul+0x1c6>
 800092e:	ea43 0306 	orr.w	r3, r3, r6
 8000932:	4770      	bx	lr
 8000934:	ea94 0f0c 	teq	r4, ip
 8000938:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800093c:	bf18      	it	ne
 800093e:	ea95 0f0c 	teqne	r5, ip
 8000942:	d00c      	beq.n	800095e <__aeabi_dmul+0x206>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	d1d1      	bne.n	80008f4 <__aeabi_dmul+0x19c>
 8000950:	ea81 0103 	eor.w	r1, r1, r3
 8000954:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000958:	f04f 0000 	mov.w	r0, #0
 800095c:	bd70      	pop	{r4, r5, r6, pc}
 800095e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000962:	bf06      	itte	eq
 8000964:	4610      	moveq	r0, r2
 8000966:	4619      	moveq	r1, r3
 8000968:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800096c:	d019      	beq.n	80009a2 <__aeabi_dmul+0x24a>
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	d102      	bne.n	800097a <__aeabi_dmul+0x222>
 8000974:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000978:	d113      	bne.n	80009a2 <__aeabi_dmul+0x24a>
 800097a:	ea95 0f0c 	teq	r5, ip
 800097e:	d105      	bne.n	800098c <__aeabi_dmul+0x234>
 8000980:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000984:	bf1c      	itt	ne
 8000986:	4610      	movne	r0, r2
 8000988:	4619      	movne	r1, r3
 800098a:	d10a      	bne.n	80009a2 <__aeabi_dmul+0x24a>
 800098c:	ea81 0103 	eor.w	r1, r1, r3
 8000990:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000994:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000998:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800099c:	f04f 0000 	mov.w	r0, #0
 80009a0:	bd70      	pop	{r4, r5, r6, pc}
 80009a2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80009a6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80009aa:	bd70      	pop	{r4, r5, r6, pc}

080009ac <__aeabi_ddiv>:
 80009ac:	b570      	push	{r4, r5, r6, lr}
 80009ae:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80009b2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80009b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80009ba:	bf1d      	ittte	ne
 80009bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80009c0:	ea94 0f0c 	teqne	r4, ip
 80009c4:	ea95 0f0c 	teqne	r5, ip
 80009c8:	f000 f8a7 	bleq	8000b1a <__aeabi_ddiv+0x16e>
 80009cc:	eba4 0405 	sub.w	r4, r4, r5
 80009d0:	ea81 0e03 	eor.w	lr, r1, r3
 80009d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80009dc:	f000 8088 	beq.w	8000af0 <__aeabi_ddiv+0x144>
 80009e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80009e4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80009e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80009ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80009f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80009f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80009f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80009fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000a00:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000a04:	429d      	cmp	r5, r3
 8000a06:	bf08      	it	eq
 8000a08:	4296      	cmpeq	r6, r2
 8000a0a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000a0e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000a12:	d202      	bcs.n	8000a1a <__aeabi_ddiv+0x6e>
 8000a14:	085b      	lsrs	r3, r3, #1
 8000a16:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a1a:	1ab6      	subs	r6, r6, r2
 8000a1c:	eb65 0503 	sbc.w	r5, r5, r3
 8000a20:	085b      	lsrs	r3, r3, #1
 8000a22:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a26:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000a2a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000a2e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a32:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a36:	bf22      	ittt	cs
 8000a38:	1ab6      	subcs	r6, r6, r2
 8000a3a:	4675      	movcs	r5, lr
 8000a3c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000a40:	085b      	lsrs	r3, r3, #1
 8000a42:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a46:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a4a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a4e:	bf22      	ittt	cs
 8000a50:	1ab6      	subcs	r6, r6, r2
 8000a52:	4675      	movcs	r5, lr
 8000a54:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000a58:	085b      	lsrs	r3, r3, #1
 8000a5a:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a5e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a62:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a66:	bf22      	ittt	cs
 8000a68:	1ab6      	subcs	r6, r6, r2
 8000a6a:	4675      	movcs	r5, lr
 8000a6c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a70:	085b      	lsrs	r3, r3, #1
 8000a72:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a76:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a7a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a7e:	bf22      	ittt	cs
 8000a80:	1ab6      	subcs	r6, r6, r2
 8000a82:	4675      	movcs	r5, lr
 8000a84:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a88:	ea55 0e06 	orrs.w	lr, r5, r6
 8000a8c:	d018      	beq.n	8000ac0 <__aeabi_ddiv+0x114>
 8000a8e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000a92:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000a96:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000a9a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000a9e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000aa2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000aa6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000aaa:	d1c0      	bne.n	8000a2e <__aeabi_ddiv+0x82>
 8000aac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000ab0:	d10b      	bne.n	8000aca <__aeabi_ddiv+0x11e>
 8000ab2:	ea41 0100 	orr.w	r1, r1, r0
 8000ab6:	f04f 0000 	mov.w	r0, #0
 8000aba:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000abe:	e7b6      	b.n	8000a2e <__aeabi_ddiv+0x82>
 8000ac0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000ac4:	bf04      	itt	eq
 8000ac6:	4301      	orreq	r1, r0
 8000ac8:	2000      	moveq	r0, #0
 8000aca:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000ace:	bf88      	it	hi
 8000ad0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000ad4:	f63f aeaf 	bhi.w	8000836 <__aeabi_dmul+0xde>
 8000ad8:	ebb5 0c03 	subs.w	ip, r5, r3
 8000adc:	bf04      	itt	eq
 8000ade:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000ae2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000ae6:	f150 0000 	adcs.w	r0, r0, #0
 8000aea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000aee:	bd70      	pop	{r4, r5, r6, pc}
 8000af0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000af4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000af8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000afc:	bfc2      	ittt	gt
 8000afe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000b02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000b06:	bd70      	popgt	{r4, r5, r6, pc}
 8000b08:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0c:	f04f 0e00 	mov.w	lr, #0
 8000b10:	3c01      	subs	r4, #1
 8000b12:	e690      	b.n	8000836 <__aeabi_dmul+0xde>
 8000b14:	ea45 0e06 	orr.w	lr, r5, r6
 8000b18:	e68d      	b.n	8000836 <__aeabi_dmul+0xde>
 8000b1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000b1e:	ea94 0f0c 	teq	r4, ip
 8000b22:	bf08      	it	eq
 8000b24:	ea95 0f0c 	teqeq	r5, ip
 8000b28:	f43f af3b 	beq.w	80009a2 <__aeabi_dmul+0x24a>
 8000b2c:	ea94 0f0c 	teq	r4, ip
 8000b30:	d10a      	bne.n	8000b48 <__aeabi_ddiv+0x19c>
 8000b32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000b36:	f47f af34 	bne.w	80009a2 <__aeabi_dmul+0x24a>
 8000b3a:	ea95 0f0c 	teq	r5, ip
 8000b3e:	f47f af25 	bne.w	800098c <__aeabi_dmul+0x234>
 8000b42:	4610      	mov	r0, r2
 8000b44:	4619      	mov	r1, r3
 8000b46:	e72c      	b.n	80009a2 <__aeabi_dmul+0x24a>
 8000b48:	ea95 0f0c 	teq	r5, ip
 8000b4c:	d106      	bne.n	8000b5c <__aeabi_ddiv+0x1b0>
 8000b4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000b52:	f43f aefd 	beq.w	8000950 <__aeabi_dmul+0x1f8>
 8000b56:	4610      	mov	r0, r2
 8000b58:	4619      	mov	r1, r3
 8000b5a:	e722      	b.n	80009a2 <__aeabi_dmul+0x24a>
 8000b5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000b60:	bf18      	it	ne
 8000b62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000b66:	f47f aec5 	bne.w	80008f4 <__aeabi_dmul+0x19c>
 8000b6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000b6e:	f47f af0d 	bne.w	800098c <__aeabi_dmul+0x234>
 8000b72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000b76:	f47f aeeb 	bne.w	8000950 <__aeabi_dmul+0x1f8>
 8000b7a:	e712      	b.n	80009a2 <__aeabi_dmul+0x24a>

08000b7c <__gedf2>:
 8000b7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000b80:	e006      	b.n	8000b90 <__cmpdf2+0x4>
 8000b82:	bf00      	nop

08000b84 <__ledf2>:
 8000b84:	f04f 0c01 	mov.w	ip, #1
 8000b88:	e002      	b.n	8000b90 <__cmpdf2+0x4>
 8000b8a:	bf00      	nop

08000b8c <__cmpdf2>:
 8000b8c:	f04f 0c01 	mov.w	ip, #1
 8000b90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	bf18      	it	ne
 8000ba2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000ba6:	d01b      	beq.n	8000be0 <__cmpdf2+0x54>
 8000ba8:	b001      	add	sp, #4
 8000baa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000bae:	bf0c      	ite	eq
 8000bb0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000bb4:	ea91 0f03 	teqne	r1, r3
 8000bb8:	bf02      	ittt	eq
 8000bba:	ea90 0f02 	teqeq	r0, r2
 8000bbe:	2000      	moveq	r0, #0
 8000bc0:	4770      	bxeq	lr
 8000bc2:	f110 0f00 	cmn.w	r0, #0
 8000bc6:	ea91 0f03 	teq	r1, r3
 8000bca:	bf58      	it	pl
 8000bcc:	4299      	cmppl	r1, r3
 8000bce:	bf08      	it	eq
 8000bd0:	4290      	cmpeq	r0, r2
 8000bd2:	bf2c      	ite	cs
 8000bd4:	17d8      	asrcs	r0, r3, #31
 8000bd6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000bda:	f040 0001 	orr.w	r0, r0, #1
 8000bde:	4770      	bx	lr
 8000be0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000be4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000be8:	d102      	bne.n	8000bf0 <__cmpdf2+0x64>
 8000bea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000bee:	d107      	bne.n	8000c00 <__cmpdf2+0x74>
 8000bf0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bf4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bf8:	d1d6      	bne.n	8000ba8 <__cmpdf2+0x1c>
 8000bfa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bfe:	d0d3      	beq.n	8000ba8 <__cmpdf2+0x1c>
 8000c00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_cdrcmple>:
 8000c08:	4684      	mov	ip, r0
 8000c0a:	4610      	mov	r0, r2
 8000c0c:	4662      	mov	r2, ip
 8000c0e:	468c      	mov	ip, r1
 8000c10:	4619      	mov	r1, r3
 8000c12:	4663      	mov	r3, ip
 8000c14:	e000      	b.n	8000c18 <__aeabi_cdcmpeq>
 8000c16:	bf00      	nop

08000c18 <__aeabi_cdcmpeq>:
 8000c18:	b501      	push	{r0, lr}
 8000c1a:	f7ff ffb7 	bl	8000b8c <__cmpdf2>
 8000c1e:	2800      	cmp	r0, #0
 8000c20:	bf48      	it	mi
 8000c22:	f110 0f00 	cmnmi.w	r0, #0
 8000c26:	bd01      	pop	{r0, pc}

08000c28 <__aeabi_dcmpeq>:
 8000c28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c2c:	f7ff fff4 	bl	8000c18 <__aeabi_cdcmpeq>
 8000c30:	bf0c      	ite	eq
 8000c32:	2001      	moveq	r0, #1
 8000c34:	2000      	movne	r0, #0
 8000c36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c3a:	bf00      	nop

08000c3c <__aeabi_dcmplt>:
 8000c3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c40:	f7ff ffea 	bl	8000c18 <__aeabi_cdcmpeq>
 8000c44:	bf34      	ite	cc
 8000c46:	2001      	movcc	r0, #1
 8000c48:	2000      	movcs	r0, #0
 8000c4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c4e:	bf00      	nop

08000c50 <__aeabi_dcmple>:
 8000c50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c54:	f7ff ffe0 	bl	8000c18 <__aeabi_cdcmpeq>
 8000c58:	bf94      	ite	ls
 8000c5a:	2001      	movls	r0, #1
 8000c5c:	2000      	movhi	r0, #0
 8000c5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c62:	bf00      	nop

08000c64 <__aeabi_dcmpge>:
 8000c64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c68:	f7ff ffce 	bl	8000c08 <__aeabi_cdrcmple>
 8000c6c:	bf94      	ite	ls
 8000c6e:	2001      	movls	r0, #1
 8000c70:	2000      	movhi	r0, #0
 8000c72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c76:	bf00      	nop

08000c78 <__aeabi_dcmpgt>:
 8000c78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c7c:	f7ff ffc4 	bl	8000c08 <__aeabi_cdrcmple>
 8000c80:	bf34      	ite	cc
 8000c82:	2001      	movcc	r0, #1
 8000c84:	2000      	movcs	r0, #0
 8000c86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c8a:	bf00      	nop

08000c8c <__aeabi_dcmpun>:
 8000c8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000c90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c94:	d102      	bne.n	8000c9c <__aeabi_dcmpun+0x10>
 8000c96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000c9a:	d10a      	bne.n	8000cb2 <__aeabi_dcmpun+0x26>
 8000c9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ca0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ca4:	d102      	bne.n	8000cac <__aeabi_dcmpun+0x20>
 8000ca6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000caa:	d102      	bne.n	8000cb2 <__aeabi_dcmpun+0x26>
 8000cac:	f04f 0000 	mov.w	r0, #0
 8000cb0:	4770      	bx	lr
 8000cb2:	f04f 0001 	mov.w	r0, #1
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2iz>:
 8000cb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000cbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000cc0:	d215      	bcs.n	8000cee <__aeabi_d2iz+0x36>
 8000cc2:	d511      	bpl.n	8000ce8 <__aeabi_d2iz+0x30>
 8000cc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000cc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ccc:	d912      	bls.n	8000cf4 <__aeabi_d2iz+0x3c>
 8000cce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000cd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000cda:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000cde:	fa23 f002 	lsr.w	r0, r3, r2
 8000ce2:	bf18      	it	ne
 8000ce4:	4240      	negne	r0, r0
 8000ce6:	4770      	bx	lr
 8000ce8:	f04f 0000 	mov.w	r0, #0
 8000cec:	4770      	bx	lr
 8000cee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000cf2:	d105      	bne.n	8000d00 <__aeabi_d2iz+0x48>
 8000cf4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000cf8:	bf08      	it	eq
 8000cfa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000cfe:	4770      	bx	lr
 8000d00:	f04f 0000 	mov.w	r0, #0
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2f>:
 8000d08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000d0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000d10:	bf24      	itt	cs
 8000d12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000d16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000d1a:	d90d      	bls.n	8000d38 <__aeabi_d2f+0x30>
 8000d1c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000d20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000d24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000d28:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000d2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000d30:	bf08      	it	eq
 8000d32:	f020 0001 	biceq.w	r0, r0, #1
 8000d36:	4770      	bx	lr
 8000d38:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000d3c:	d121      	bne.n	8000d82 <__aeabi_d2f+0x7a>
 8000d3e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000d42:	bfbc      	itt	lt
 8000d44:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000d48:	4770      	bxlt	lr
 8000d4a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000d4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000d52:	f1c2 0218 	rsb	r2, r2, #24
 8000d56:	f1c2 0c20 	rsb	ip, r2, #32
 8000d5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000d5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000d62:	bf18      	it	ne
 8000d64:	f040 0001 	orrne.w	r0, r0, #1
 8000d68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000d6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000d70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000d74:	ea40 000c 	orr.w	r0, r0, ip
 8000d78:	fa23 f302 	lsr.w	r3, r3, r2
 8000d7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000d80:	e7cc      	b.n	8000d1c <__aeabi_d2f+0x14>
 8000d82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000d86:	d107      	bne.n	8000d98 <__aeabi_d2f+0x90>
 8000d88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000d92:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000d96:	4770      	bxne	lr
 8000d98:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000d9c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000da0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop

08000da8 <__aeabi_uldivmod>:
 8000da8:	b953      	cbnz	r3, 8000dc0 <__aeabi_uldivmod+0x18>
 8000daa:	b94a      	cbnz	r2, 8000dc0 <__aeabi_uldivmod+0x18>
 8000dac:	2900      	cmp	r1, #0
 8000dae:	bf08      	it	eq
 8000db0:	2800      	cmpeq	r0, #0
 8000db2:	bf1c      	itt	ne
 8000db4:	f04f 31ff 	movne.w	r1, #4294967295
 8000db8:	f04f 30ff 	movne.w	r0, #4294967295
 8000dbc:	f000 b96a 	b.w	8001094 <__aeabi_idiv0>
 8000dc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000dc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000dc8:	f000 f806 	bl	8000dd8 <__udivmoddi4>
 8000dcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000dd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000dd4:	b004      	add	sp, #16
 8000dd6:	4770      	bx	lr

08000dd8 <__udivmoddi4>:
 8000dd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ddc:	9d08      	ldr	r5, [sp, #32]
 8000dde:	460c      	mov	r4, r1
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d14e      	bne.n	8000e82 <__udivmoddi4+0xaa>
 8000de4:	4694      	mov	ip, r2
 8000de6:	458c      	cmp	ip, r1
 8000de8:	4686      	mov	lr, r0
 8000dea:	fab2 f282 	clz	r2, r2
 8000dee:	d962      	bls.n	8000eb6 <__udivmoddi4+0xde>
 8000df0:	b14a      	cbz	r2, 8000e06 <__udivmoddi4+0x2e>
 8000df2:	f1c2 0320 	rsb	r3, r2, #32
 8000df6:	4091      	lsls	r1, r2
 8000df8:	fa20 f303 	lsr.w	r3, r0, r3
 8000dfc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e00:	4319      	orrs	r1, r3
 8000e02:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e0a:	fa1f f68c 	uxth.w	r6, ip
 8000e0e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000e12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e16:	fb07 1114 	mls	r1, r7, r4, r1
 8000e1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e1e:	fb04 f106 	mul.w	r1, r4, r6
 8000e22:	4299      	cmp	r1, r3
 8000e24:	d90a      	bls.n	8000e3c <__udivmoddi4+0x64>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000e2e:	f080 8112 	bcs.w	8001056 <__udivmoddi4+0x27e>
 8000e32:	4299      	cmp	r1, r3
 8000e34:	f240 810f 	bls.w	8001056 <__udivmoddi4+0x27e>
 8000e38:	3c02      	subs	r4, #2
 8000e3a:	4463      	add	r3, ip
 8000e3c:	1a59      	subs	r1, r3, r1
 8000e3e:	fa1f f38e 	uxth.w	r3, lr
 8000e42:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e46:	fb07 1110 	mls	r1, r7, r0, r1
 8000e4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e4e:	fb00 f606 	mul.w	r6, r0, r6
 8000e52:	429e      	cmp	r6, r3
 8000e54:	d90a      	bls.n	8000e6c <__udivmoddi4+0x94>
 8000e56:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e5e:	f080 80fc 	bcs.w	800105a <__udivmoddi4+0x282>
 8000e62:	429e      	cmp	r6, r3
 8000e64:	f240 80f9 	bls.w	800105a <__udivmoddi4+0x282>
 8000e68:	4463      	add	r3, ip
 8000e6a:	3802      	subs	r0, #2
 8000e6c:	1b9b      	subs	r3, r3, r6
 8000e6e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e72:	2100      	movs	r1, #0
 8000e74:	b11d      	cbz	r5, 8000e7e <__udivmoddi4+0xa6>
 8000e76:	40d3      	lsrs	r3, r2
 8000e78:	2200      	movs	r2, #0
 8000e7a:	e9c5 3200 	strd	r3, r2, [r5]
 8000e7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e82:	428b      	cmp	r3, r1
 8000e84:	d905      	bls.n	8000e92 <__udivmoddi4+0xba>
 8000e86:	b10d      	cbz	r5, 8000e8c <__udivmoddi4+0xb4>
 8000e88:	e9c5 0100 	strd	r0, r1, [r5]
 8000e8c:	2100      	movs	r1, #0
 8000e8e:	4608      	mov	r0, r1
 8000e90:	e7f5      	b.n	8000e7e <__udivmoddi4+0xa6>
 8000e92:	fab3 f183 	clz	r1, r3
 8000e96:	2900      	cmp	r1, #0
 8000e98:	d146      	bne.n	8000f28 <__udivmoddi4+0x150>
 8000e9a:	42a3      	cmp	r3, r4
 8000e9c:	d302      	bcc.n	8000ea4 <__udivmoddi4+0xcc>
 8000e9e:	4290      	cmp	r0, r2
 8000ea0:	f0c0 80f0 	bcc.w	8001084 <__udivmoddi4+0x2ac>
 8000ea4:	1a86      	subs	r6, r0, r2
 8000ea6:	eb64 0303 	sbc.w	r3, r4, r3
 8000eaa:	2001      	movs	r0, #1
 8000eac:	2d00      	cmp	r5, #0
 8000eae:	d0e6      	beq.n	8000e7e <__udivmoddi4+0xa6>
 8000eb0:	e9c5 6300 	strd	r6, r3, [r5]
 8000eb4:	e7e3      	b.n	8000e7e <__udivmoddi4+0xa6>
 8000eb6:	2a00      	cmp	r2, #0
 8000eb8:	f040 8090 	bne.w	8000fdc <__udivmoddi4+0x204>
 8000ebc:	eba1 040c 	sub.w	r4, r1, ip
 8000ec0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ec4:	fa1f f78c 	uxth.w	r7, ip
 8000ec8:	2101      	movs	r1, #1
 8000eca:	fbb4 f6f8 	udiv	r6, r4, r8
 8000ece:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ed2:	fb08 4416 	mls	r4, r8, r6, r4
 8000ed6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000eda:	fb07 f006 	mul.w	r0, r7, r6
 8000ede:	4298      	cmp	r0, r3
 8000ee0:	d908      	bls.n	8000ef4 <__udivmoddi4+0x11c>
 8000ee2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ee6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000eea:	d202      	bcs.n	8000ef2 <__udivmoddi4+0x11a>
 8000eec:	4298      	cmp	r0, r3
 8000eee:	f200 80cd 	bhi.w	800108c <__udivmoddi4+0x2b4>
 8000ef2:	4626      	mov	r6, r4
 8000ef4:	1a1c      	subs	r4, r3, r0
 8000ef6:	fa1f f38e 	uxth.w	r3, lr
 8000efa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000efe:	fb08 4410 	mls	r4, r8, r0, r4
 8000f02:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000f06:	fb00 f707 	mul.w	r7, r0, r7
 8000f0a:	429f      	cmp	r7, r3
 8000f0c:	d908      	bls.n	8000f20 <__udivmoddi4+0x148>
 8000f0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f12:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f16:	d202      	bcs.n	8000f1e <__udivmoddi4+0x146>
 8000f18:	429f      	cmp	r7, r3
 8000f1a:	f200 80b0 	bhi.w	800107e <__udivmoddi4+0x2a6>
 8000f1e:	4620      	mov	r0, r4
 8000f20:	1bdb      	subs	r3, r3, r7
 8000f22:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000f26:	e7a5      	b.n	8000e74 <__udivmoddi4+0x9c>
 8000f28:	f1c1 0620 	rsb	r6, r1, #32
 8000f2c:	408b      	lsls	r3, r1
 8000f2e:	fa22 f706 	lsr.w	r7, r2, r6
 8000f32:	431f      	orrs	r7, r3
 8000f34:	fa20 fc06 	lsr.w	ip, r0, r6
 8000f38:	fa04 f301 	lsl.w	r3, r4, r1
 8000f3c:	ea43 030c 	orr.w	r3, r3, ip
 8000f40:	40f4      	lsrs	r4, r6
 8000f42:	fa00 f801 	lsl.w	r8, r0, r1
 8000f46:	0c38      	lsrs	r0, r7, #16
 8000f48:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000f4c:	fbb4 fef0 	udiv	lr, r4, r0
 8000f50:	fa1f fc87 	uxth.w	ip, r7
 8000f54:	fb00 441e 	mls	r4, r0, lr, r4
 8000f58:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f5c:	fb0e f90c 	mul.w	r9, lr, ip
 8000f60:	45a1      	cmp	r9, r4
 8000f62:	fa02 f201 	lsl.w	r2, r2, r1
 8000f66:	d90a      	bls.n	8000f7e <__udivmoddi4+0x1a6>
 8000f68:	193c      	adds	r4, r7, r4
 8000f6a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000f6e:	f080 8084 	bcs.w	800107a <__udivmoddi4+0x2a2>
 8000f72:	45a1      	cmp	r9, r4
 8000f74:	f240 8081 	bls.w	800107a <__udivmoddi4+0x2a2>
 8000f78:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f7c:	443c      	add	r4, r7
 8000f7e:	eba4 0409 	sub.w	r4, r4, r9
 8000f82:	fa1f f983 	uxth.w	r9, r3
 8000f86:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f8a:	fb00 4413 	mls	r4, r0, r3, r4
 8000f8e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f92:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f96:	45a4      	cmp	ip, r4
 8000f98:	d907      	bls.n	8000faa <__udivmoddi4+0x1d2>
 8000f9a:	193c      	adds	r4, r7, r4
 8000f9c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000fa0:	d267      	bcs.n	8001072 <__udivmoddi4+0x29a>
 8000fa2:	45a4      	cmp	ip, r4
 8000fa4:	d965      	bls.n	8001072 <__udivmoddi4+0x29a>
 8000fa6:	3b02      	subs	r3, #2
 8000fa8:	443c      	add	r4, r7
 8000faa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000fae:	fba0 9302 	umull	r9, r3, r0, r2
 8000fb2:	eba4 040c 	sub.w	r4, r4, ip
 8000fb6:	429c      	cmp	r4, r3
 8000fb8:	46ce      	mov	lr, r9
 8000fba:	469c      	mov	ip, r3
 8000fbc:	d351      	bcc.n	8001062 <__udivmoddi4+0x28a>
 8000fbe:	d04e      	beq.n	800105e <__udivmoddi4+0x286>
 8000fc0:	b155      	cbz	r5, 8000fd8 <__udivmoddi4+0x200>
 8000fc2:	ebb8 030e 	subs.w	r3, r8, lr
 8000fc6:	eb64 040c 	sbc.w	r4, r4, ip
 8000fca:	fa04 f606 	lsl.w	r6, r4, r6
 8000fce:	40cb      	lsrs	r3, r1
 8000fd0:	431e      	orrs	r6, r3
 8000fd2:	40cc      	lsrs	r4, r1
 8000fd4:	e9c5 6400 	strd	r6, r4, [r5]
 8000fd8:	2100      	movs	r1, #0
 8000fda:	e750      	b.n	8000e7e <__udivmoddi4+0xa6>
 8000fdc:	f1c2 0320 	rsb	r3, r2, #32
 8000fe0:	fa20 f103 	lsr.w	r1, r0, r3
 8000fe4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000fe8:	fa24 f303 	lsr.w	r3, r4, r3
 8000fec:	4094      	lsls	r4, r2
 8000fee:	430c      	orrs	r4, r1
 8000ff0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ff4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ff8:	fa1f f78c 	uxth.w	r7, ip
 8000ffc:	fbb3 f0f8 	udiv	r0, r3, r8
 8001000:	fb08 3110 	mls	r1, r8, r0, r3
 8001004:	0c23      	lsrs	r3, r4, #16
 8001006:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800100a:	fb00 f107 	mul.w	r1, r0, r7
 800100e:	4299      	cmp	r1, r3
 8001010:	d908      	bls.n	8001024 <__udivmoddi4+0x24c>
 8001012:	eb1c 0303 	adds.w	r3, ip, r3
 8001016:	f100 36ff 	add.w	r6, r0, #4294967295
 800101a:	d22c      	bcs.n	8001076 <__udivmoddi4+0x29e>
 800101c:	4299      	cmp	r1, r3
 800101e:	d92a      	bls.n	8001076 <__udivmoddi4+0x29e>
 8001020:	3802      	subs	r0, #2
 8001022:	4463      	add	r3, ip
 8001024:	1a5b      	subs	r3, r3, r1
 8001026:	b2a4      	uxth	r4, r4
 8001028:	fbb3 f1f8 	udiv	r1, r3, r8
 800102c:	fb08 3311 	mls	r3, r8, r1, r3
 8001030:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001034:	fb01 f307 	mul.w	r3, r1, r7
 8001038:	42a3      	cmp	r3, r4
 800103a:	d908      	bls.n	800104e <__udivmoddi4+0x276>
 800103c:	eb1c 0404 	adds.w	r4, ip, r4
 8001040:	f101 36ff 	add.w	r6, r1, #4294967295
 8001044:	d213      	bcs.n	800106e <__udivmoddi4+0x296>
 8001046:	42a3      	cmp	r3, r4
 8001048:	d911      	bls.n	800106e <__udivmoddi4+0x296>
 800104a:	3902      	subs	r1, #2
 800104c:	4464      	add	r4, ip
 800104e:	1ae4      	subs	r4, r4, r3
 8001050:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001054:	e739      	b.n	8000eca <__udivmoddi4+0xf2>
 8001056:	4604      	mov	r4, r0
 8001058:	e6f0      	b.n	8000e3c <__udivmoddi4+0x64>
 800105a:	4608      	mov	r0, r1
 800105c:	e706      	b.n	8000e6c <__udivmoddi4+0x94>
 800105e:	45c8      	cmp	r8, r9
 8001060:	d2ae      	bcs.n	8000fc0 <__udivmoddi4+0x1e8>
 8001062:	ebb9 0e02 	subs.w	lr, r9, r2
 8001066:	eb63 0c07 	sbc.w	ip, r3, r7
 800106a:	3801      	subs	r0, #1
 800106c:	e7a8      	b.n	8000fc0 <__udivmoddi4+0x1e8>
 800106e:	4631      	mov	r1, r6
 8001070:	e7ed      	b.n	800104e <__udivmoddi4+0x276>
 8001072:	4603      	mov	r3, r0
 8001074:	e799      	b.n	8000faa <__udivmoddi4+0x1d2>
 8001076:	4630      	mov	r0, r6
 8001078:	e7d4      	b.n	8001024 <__udivmoddi4+0x24c>
 800107a:	46d6      	mov	lr, sl
 800107c:	e77f      	b.n	8000f7e <__udivmoddi4+0x1a6>
 800107e:	4463      	add	r3, ip
 8001080:	3802      	subs	r0, #2
 8001082:	e74d      	b.n	8000f20 <__udivmoddi4+0x148>
 8001084:	4606      	mov	r6, r0
 8001086:	4623      	mov	r3, r4
 8001088:	4608      	mov	r0, r1
 800108a:	e70f      	b.n	8000eac <__udivmoddi4+0xd4>
 800108c:	3e02      	subs	r6, #2
 800108e:	4463      	add	r3, ip
 8001090:	e730      	b.n	8000ef4 <__udivmoddi4+0x11c>
 8001092:	bf00      	nop

08001094 <__aeabi_idiv0>:
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop

08001098 <main>:
const char *led_frequency_message = "Enter LED blink frequency(ms): ";
const char *adc_offset_message = "Enter ADC offset: ";

/* Main Function -------------------------------------------------------------*/
int main(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b088      	sub	sp, #32
 800109c:	af06      	add	r7, sp, #24
  HAL_Init();
 800109e:	f001 f9df 	bl	8002460 <HAL_Init>
  SystemClock_Config();
 80010a2:	f000 fe4d 	bl	8001d40 <SystemClock_Config>
  MX_GPIO_Init();
 80010a6:	f000 ff21 	bl	8001eec <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80010aa:	f000 fef5 	bl	8001e98 <MX_USART2_UART_Init>
  RetargetInit(&huart2);
 80010ae:	483d      	ldr	r0, [pc, #244]	@ (80011a4 <main+0x10c>)
 80010b0:	f000 ff90 	bl	8001fd4 <RetargetInit>
  MX_ADC3_Init();
 80010b4:	f000 fe96 	bl	8001de4 <MX_ADC3_Init>
  OS_ERR err;

  // Initialize µC/OS-II
  OSInit();
 80010b8:	f005 fe0a 	bl	8006cd0 <OSInit>

  // Create Event Object
  event_flags = OSFlagCreate(0x00, &err); // Initial flags = 0
 80010bc:	1dfb      	adds	r3, r7, #7
 80010be:	4619      	mov	r1, r3
 80010c0:	2000      	movs	r0, #0
 80010c2:	f006 fcb3 	bl	8007a2c <OSFlagCreate>
 80010c6:	4603      	mov	r3, r0
 80010c8:	4a37      	ldr	r2, [pc, #220]	@ (80011a8 <main+0x110>)
 80010ca:	6013      	str	r3, [r2, #0]

  // Create the queue
  tx_queue = OSQCreate((void **)&pdu_queue_buffer[0], QUEUE_SIZE);
 80010cc:	2110      	movs	r1, #16
 80010ce:	4837      	ldr	r0, [pc, #220]	@ (80011ac <main+0x114>)
 80010d0:	f007 f8e4 	bl	800829c <OSQCreate>
 80010d4:	4603      	mov	r3, r0
 80010d6:	4a36      	ldr	r2, [pc, #216]	@ (80011b0 <main+0x118>)
 80010d8:	6013      	str	r3, [r2, #0]
  if (tx_queue == NULL) {
 80010da:	4b35      	ldr	r3, [pc, #212]	@ (80011b0 <main+0x118>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d104      	bne.n	80010ec <main+0x54>
	  printf("Queue initialization failed\r\n");
 80010e2:	4834      	ldr	r0, [pc, #208]	@ (80011b4 <main+0x11c>)
 80010e4:	f008 fece 	bl	8009e84 <puts>
	  Error_Handler();
 80010e8:	f000 ff6e 	bl	8001fc8 <Error_Handler>
  }
  //printf("Queue initialized at address: %p\r\n", tx_queue); // Debug print

  OSTaskCreateExt(TaskReceive,
 80010ec:	2303      	movs	r3, #3
 80010ee:	9304      	str	r3, [sp, #16]
 80010f0:	2300      	movs	r3, #0
 80010f2:	9303      	str	r3, [sp, #12]
 80010f4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80010f8:	9302      	str	r3, [sp, #8]
 80010fa:	4b2f      	ldr	r3, [pc, #188]	@ (80011b8 <main+0x120>)
 80010fc:	9301      	str	r3, [sp, #4]
 80010fe:	2309      	movs	r3, #9
 8001100:	9300      	str	r3, [sp, #0]
 8001102:	2309      	movs	r3, #9
 8001104:	4a2d      	ldr	r2, [pc, #180]	@ (80011bc <main+0x124>)
 8001106:	2100      	movs	r1, #0
 8001108:	482d      	ldr	r0, [pc, #180]	@ (80011c0 <main+0x128>)
 800110a:	f007 fba3 	bl	8008854 <OSTaskCreateExt>
    				  TASK_STACKSIZE,
    				  NULL,
					  OS_TASK_OPT_STK_CHK | OS_TASK_OPT_STK_CLR
					  );

  OSTaskCreateExt(TaskTransmit,
 800110e:	2303      	movs	r3, #3
 8001110:	9304      	str	r3, [sp, #16]
 8001112:	2300      	movs	r3, #0
 8001114:	9303      	str	r3, [sp, #12]
 8001116:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800111a:	9302      	str	r3, [sp, #8]
 800111c:	4b29      	ldr	r3, [pc, #164]	@ (80011c4 <main+0x12c>)
 800111e:	9301      	str	r3, [sp, #4]
 8001120:	2308      	movs	r3, #8
 8001122:	9300      	str	r3, [sp, #0]
 8001124:	2308      	movs	r3, #8
 8001126:	4a28      	ldr	r2, [pc, #160]	@ (80011c8 <main+0x130>)
 8001128:	2100      	movs	r1, #0
 800112a:	4828      	ldr	r0, [pc, #160]	@ (80011cc <main+0x134>)
 800112c:	f007 fb92 	bl	8008854 <OSTaskCreateExt>
      				  TASK_STACKSIZE,
      				  NULL,
					  OS_TASK_OPT_STK_CHK | OS_TASK_OPT_STK_CLR
					  );

  OSTaskCreateExt(TaskButton,
 8001130:	2303      	movs	r3, #3
 8001132:	9304      	str	r3, [sp, #16]
 8001134:	2300      	movs	r3, #0
 8001136:	9303      	str	r3, [sp, #12]
 8001138:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800113c:	9302      	str	r3, [sp, #8]
 800113e:	4b24      	ldr	r3, [pc, #144]	@ (80011d0 <main+0x138>)
 8001140:	9301      	str	r3, [sp, #4]
 8001142:	2307      	movs	r3, #7
 8001144:	9300      	str	r3, [sp, #0]
 8001146:	2307      	movs	r3, #7
 8001148:	4a22      	ldr	r2, [pc, #136]	@ (80011d4 <main+0x13c>)
 800114a:	2100      	movs	r1, #0
 800114c:	4822      	ldr	r0, [pc, #136]	@ (80011d8 <main+0x140>)
 800114e:	f007 fb81 	bl	8008854 <OSTaskCreateExt>
      				  TASK_STACKSIZE,
      				  NULL,
					  OS_TASK_OPT_STK_CHK | OS_TASK_OPT_STK_CLR
					  );

  OSTaskCreateExt(TaskLED,
 8001152:	2303      	movs	r3, #3
 8001154:	9304      	str	r3, [sp, #16]
 8001156:	2300      	movs	r3, #0
 8001158:	9303      	str	r3, [sp, #12]
 800115a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800115e:	9302      	str	r3, [sp, #8]
 8001160:	4b1e      	ldr	r3, [pc, #120]	@ (80011dc <main+0x144>)
 8001162:	9301      	str	r3, [sp, #4]
 8001164:	2306      	movs	r3, #6
 8001166:	9300      	str	r3, [sp, #0]
 8001168:	2306      	movs	r3, #6
 800116a:	4a1d      	ldr	r2, [pc, #116]	@ (80011e0 <main+0x148>)
 800116c:	2100      	movs	r1, #0
 800116e:	481d      	ldr	r0, [pc, #116]	@ (80011e4 <main+0x14c>)
 8001170:	f007 fb70 	bl	8008854 <OSTaskCreateExt>
      				  TASK_STACKSIZE,
      				  NULL,
					  OS_TASK_OPT_STK_CHK | OS_TASK_OPT_STK_CLR
					  );

  OSTaskCreateExt(TaskADC,
 8001174:	2303      	movs	r3, #3
 8001176:	9304      	str	r3, [sp, #16]
 8001178:	2300      	movs	r3, #0
 800117a:	9303      	str	r3, [sp, #12]
 800117c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001180:	9302      	str	r3, [sp, #8]
 8001182:	4b19      	ldr	r3, [pc, #100]	@ (80011e8 <main+0x150>)
 8001184:	9301      	str	r3, [sp, #4]
 8001186:	2305      	movs	r3, #5
 8001188:	9300      	str	r3, [sp, #0]
 800118a:	2305      	movs	r3, #5
 800118c:	4a17      	ldr	r2, [pc, #92]	@ (80011ec <main+0x154>)
 800118e:	2100      	movs	r1, #0
 8001190:	4817      	ldr	r0, [pc, #92]	@ (80011f0 <main+0x158>)
 8001192:	f007 fb5f 	bl	8008854 <OSTaskCreateExt>
      				  TASK_STACKSIZE,
      				  NULL,
					  OS_TASK_OPT_STK_CHK | OS_TASK_OPT_STK_CLR
					  );

  OSStart();
 8001196:	f005 fe87 	bl	8006ea8 <OSStart>
  return 0;
 800119a:	2300      	movs	r3, #0
}
 800119c:	4618      	mov	r0, r3
 800119e:	3708      	adds	r7, #8
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	20000258 	.word	0x20000258
 80011a8:	20005324 	.word	0x20005324
 80011ac:	200052e0 	.word	0x200052e0
 80011b0:	20005320 	.word	0x20005320
 80011b4:	0800bf78 	.word	0x0800bf78
 80011b8:	200002e0 	.word	0x200002e0
 80011bc:	200012e0 	.word	0x200012e0
 80011c0:	080012d9 	.word	0x080012d9
 80011c4:	200012e0 	.word	0x200012e0
 80011c8:	200022e0 	.word	0x200022e0
 80011cc:	080011f5 	.word	0x080011f5
 80011d0:	200022e0 	.word	0x200022e0
 80011d4:	200032e0 	.word	0x200032e0
 80011d8:	080018e1 	.word	0x080018e1
 80011dc:	200032e0 	.word	0x200032e0
 80011e0:	200042e0 	.word	0x200042e0
 80011e4:	080019d1 	.word	0x080019d1
 80011e8:	200042e0 	.word	0x200042e0
 80011ec:	200052e0 	.word	0x200052e0
 80011f0:	08001b09 	.word	0x08001b09

080011f4 <TaskTransmit>:

/* Definition of Task Transmit ----------------------------------------------------------- */
void TaskTransmit(void *pdata) {
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b086      	sub	sp, #24
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef hal_status;
	PDU *pdu_rx;
	INT8U err;
	printf("Task Transmit start\r\n");
 80011fc:	482b      	ldr	r0, [pc, #172]	@ (80012ac <TaskTransmit+0xb8>)
 80011fe:	f008 fe41 	bl	8009e84 <puts>
    while (1) {
    	// Wait for a PDU from the queue
        pdu_rx = (PDU *)OSQPend(tx_queue, 0, &err);
 8001202:	4b2b      	ldr	r3, [pc, #172]	@ (80012b0 <TaskTransmit+0xbc>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f107 020e 	add.w	r2, r7, #14
 800120a:	2100      	movs	r1, #0
 800120c:	4618      	mov	r0, r3
 800120e:	f007 f8b9 	bl	8008384 <OSQPend>
 8001212:	6138      	str	r0, [r7, #16]
        if (err != OS_ERR_NONE) {
 8001214:	7bbb      	ldrb	r3, [r7, #14]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d004      	beq.n	8001224 <TaskTransmit+0x30>
        	printf("transmit receive queue error\r\n");
 800121a:	4826      	ldr	r0, [pc, #152]	@ (80012b4 <TaskTransmit+0xc0>)
 800121c:	f008 fe32 	bl	8009e84 <puts>
			Error_Handler();
 8001220:	f000 fed2 	bl	8001fc8 <Error_Handler>
		}

        // Print the PDU contents
        printf("Transmit Task received a PDU:\r\n");
 8001224:	4824      	ldr	r0, [pc, #144]	@ (80012b8 <TaskTransmit+0xc4>)
 8001226:	f008 fe2d 	bl	8009e84 <puts>
		printf("  Header: 0x%02X\r\n", pdu_rx->header);
 800122a:	693b      	ldr	r3, [r7, #16]
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	4619      	mov	r1, r3
 8001230:	4822      	ldr	r0, [pc, #136]	@ (80012bc <TaskTransmit+0xc8>)
 8001232:	f008 fdbf 	bl	8009db4 <iprintf>
		printf("  SID: 0x%02X\r\n", pdu_rx->sid);
 8001236:	693b      	ldr	r3, [r7, #16]
 8001238:	785b      	ldrb	r3, [r3, #1]
 800123a:	4619      	mov	r1, r3
 800123c:	4820      	ldr	r0, [pc, #128]	@ (80012c0 <TaskTransmit+0xcc>)
 800123e:	f008 fdb9 	bl	8009db4 <iprintf>
		printf("  Payload: ");
 8001242:	4820      	ldr	r0, [pc, #128]	@ (80012c4 <TaskTransmit+0xd0>)
 8001244:	f008 fdb6 	bl	8009db4 <iprintf>
		for (int i = 0; i < 6; i++) {
 8001248:	2300      	movs	r3, #0
 800124a:	617b      	str	r3, [r7, #20]
 800124c:	e00b      	b.n	8001266 <TaskTransmit+0x72>
			printf("0x%02X ", pdu_rx->data[i]);
 800124e:	693a      	ldr	r2, [r7, #16]
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	4413      	add	r3, r2
 8001254:	3302      	adds	r3, #2
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	4619      	mov	r1, r3
 800125a:	481b      	ldr	r0, [pc, #108]	@ (80012c8 <TaskTransmit+0xd4>)
 800125c:	f008 fdaa 	bl	8009db4 <iprintf>
		for (int i = 0; i < 6; i++) {
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	3301      	adds	r3, #1
 8001264:	617b      	str	r3, [r7, #20]
 8001266:	697b      	ldr	r3, [r7, #20]
 8001268:	2b05      	cmp	r3, #5
 800126a:	ddf0      	ble.n	800124e <TaskTransmit+0x5a>
		}
		printf("\r\n");
 800126c:	4817      	ldr	r0, [pc, #92]	@ (80012cc <TaskTransmit+0xd8>)
 800126e:	f008 fe09 	bl	8009e84 <puts>

		// Delay or wait for the next PDU
		OSTimeDlyHMSM(0, 0, 1, 0); // Delay for 1s
 8001272:	2300      	movs	r3, #0
 8001274:	2201      	movs	r2, #1
 8001276:	2100      	movs	r1, #0
 8001278:	2000      	movs	r0, #0
 800127a:	f007 fe21 	bl	8008ec0 <OSTimeDlyHMSM>

		// Handle negative responses
		if (pdu_rx->sid == SID_NEG_RESPONSE) {
 800127e:	693b      	ldr	r3, [r7, #16]
 8001280:	785b      	ldrb	r3, [r3, #1]
 8001282:	2b7f      	cmp	r3, #127	@ 0x7f
 8001284:	d102      	bne.n	800128c <TaskTransmit+0x98>
			printf("Error: Negative response received\r\n");
 8001286:	4812      	ldr	r0, [pc, #72]	@ (80012d0 <TaskTransmit+0xdc>)
 8001288:	f008 fdfc 	bl	8009e84 <puts>
		}

		// Transmit the PDU over UART
		hal_status = HAL_UART_Transmit(&huart2, (uint8_t*)pdu_rx, sizeof(PDU), HAL_MAX_DELAY);
 800128c:	f04f 33ff 	mov.w	r3, #4294967295
 8001290:	2208      	movs	r2, #8
 8001292:	6939      	ldr	r1, [r7, #16]
 8001294:	480f      	ldr	r0, [pc, #60]	@ (80012d4 <TaskTransmit+0xe0>)
 8001296:	f004 fb35 	bl	8005904 <HAL_UART_Transmit>
 800129a:	4603      	mov	r3, r0
 800129c:	73fb      	strb	r3, [r7, #15]
		if (hal_status != HAL_OK) {
 800129e:	7bfb      	ldrb	r3, [r7, #15]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d0ae      	beq.n	8001202 <TaskTransmit+0xe>
			Error_Handler(); 			// Call Error_Handler on failure
 80012a4:	f000 fe90 	bl	8001fc8 <Error_Handler>
        pdu_rx = (PDU *)OSQPend(tx_queue, 0, &err);
 80012a8:	e7ab      	b.n	8001202 <TaskTransmit+0xe>
 80012aa:	bf00      	nop
 80012ac:	0800bf98 	.word	0x0800bf98
 80012b0:	20005320 	.word	0x20005320
 80012b4:	0800bfb0 	.word	0x0800bfb0
 80012b8:	0800bfd0 	.word	0x0800bfd0
 80012bc:	0800bff0 	.word	0x0800bff0
 80012c0:	0800c004 	.word	0x0800c004
 80012c4:	0800c014 	.word	0x0800c014
 80012c8:	0800c020 	.word	0x0800c020
 80012cc:	0800c028 	.word	0x0800c028
 80012d0:	0800c02c 	.word	0x0800c02c
 80012d4:	20000258 	.word	0x20000258

080012d8 <TaskReceive>:
		}
    }
}

/* Definition of Task Receive ----------------------------------------------------------- */
void TaskReceive(void* pdata) {
 80012d8:	b590      	push	{r4, r7, lr}
 80012da:	b095      	sub	sp, #84	@ 0x54
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
	uint8_t rx_buffer[10] = {0}; // Buffer to store user input
 80012e0:	2300      	movs	r3, #0
 80012e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80012e4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80012e8:	2200      	movs	r2, #0
 80012ea:	601a      	str	r2, [r3, #0]
 80012ec:	809a      	strh	r2, [r3, #4]
	uint8_t rx_index = 0;
 80012ee:	2300      	movs	r3, #0
 80012f0:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
	uint8_t choice = 0;
 80012f4:	2300      	movs	r3, #0
 80012f6:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
	int16_t offset = 0;
 80012fa:	2300      	movs	r3, #0
 80012fc:	877b      	strh	r3, [r7, #58]	@ 0x3a
	INT8U err;
	HAL_StatusTypeDef hal_status;
	PDU pdu_tx;

	printf("TaskReceive started\r\n"); // Debug print
 80012fe:	48a2      	ldr	r0, [pc, #648]	@ (8001588 <TaskReceive+0x2b0>)
 8001300:	f008 fdc0 	bl	8009e84 <puts>

	while (1) {
		// Handle input based on current state
		switch (current_state) {
 8001304:	4ba1      	ldr	r3, [pc, #644]	@ (800158c <TaskReceive+0x2b4>)
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	2b02      	cmp	r3, #2
 800130a:	f000 81eb 	beq.w	80016e4 <TaskReceive+0x40c>
 800130e:	2b02      	cmp	r3, #2
 8001310:	f300 82b4 	bgt.w	800187c <TaskReceive+0x5a4>
 8001314:	2b00      	cmp	r3, #0
 8001316:	d003      	beq.n	8001320 <TaskReceive+0x48>
 8001318:	2b01      	cmp	r3, #1
 800131a:	f000 80d3 	beq.w	80014c4 <TaskReceive+0x1ec>
 800131e:	e2ad      	b.n	800187c <TaskReceive+0x5a4>
			case STATE_MAIN_MENU:
				printf("MAIN MENU start\r\n"); // Debug print
 8001320:	489b      	ldr	r0, [pc, #620]	@ (8001590 <TaskReceive+0x2b8>)
 8001322:	f008 fdaf 	bl	8009e84 <puts>
				// Send Welcome Message
				HAL_UART_Transmit(&huart2, (uint8_t*)welcome_message, strlen(welcome_message), HAL_MAX_DELAY);
 8001326:	4b9b      	ldr	r3, [pc, #620]	@ (8001594 <TaskReceive+0x2bc>)
 8001328:	681c      	ldr	r4, [r3, #0]
 800132a:	4b9a      	ldr	r3, [pc, #616]	@ (8001594 <TaskReceive+0x2bc>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4618      	mov	r0, r3
 8001330:	f7ff f84e 	bl	80003d0 <strlen>
 8001334:	4603      	mov	r3, r0
 8001336:	b29a      	uxth	r2, r3
 8001338:	f04f 33ff 	mov.w	r3, #4294967295
 800133c:	4621      	mov	r1, r4
 800133e:	4896      	ldr	r0, [pc, #600]	@ (8001598 <TaskReceive+0x2c0>)
 8001340:	f004 fae0 	bl	8005904 <HAL_UART_Transmit>

				// Receive a single character
				hal_status = HAL_UART_Receive(&huart2, &rx_buffer[rx_index], 1, HAL_MAX_DELAY);
 8001344:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001348:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 800134c:	18d1      	adds	r1, r2, r3
 800134e:	f04f 33ff 	mov.w	r3, #4294967295
 8001352:	2201      	movs	r2, #1
 8001354:	4890      	ldr	r0, [pc, #576]	@ (8001598 <TaskReceive+0x2c0>)
 8001356:	f004 fb5e 	bl	8005a16 <HAL_UART_Receive>
 800135a:	4603      	mov	r3, r0
 800135c:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
				if (hal_status != HAL_OK) {
 8001360:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001364:	2b00      	cmp	r3, #0
 8001366:	d001      	beq.n	800136c <TaskReceive+0x94>
					Error_Handler(); 			// Call Error_Handler on failure
 8001368:	f000 fe2e 	bl	8001fc8 <Error_Handler>
				}

				OSTimeDlyHMSM(0, 0, 5, 0); // Delay for 1 second
 800136c:	2300      	movs	r3, #0
 800136e:	2205      	movs	r2, #5
 8001370:	2100      	movs	r1, #0
 8001372:	2000      	movs	r0, #0
 8001374:	f007 fda4 	bl	8008ec0 <OSTimeDlyHMSM>
				printf("Received character: %c\r\n", rx_buffer[rx_index]); // Debug print
 8001378:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800137c:	3350      	adds	r3, #80	@ 0x50
 800137e:	443b      	add	r3, r7
 8001380:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8001384:	4619      	mov	r1, r3
 8001386:	4885      	ldr	r0, [pc, #532]	@ (800159c <TaskReceive+0x2c4>)
 8001388:	f008 fd14 	bl	8009db4 <iprintf>

				// Process menu choice
				if (rx_buffer[rx_index] >= '0' && rx_buffer[rx_index] <= '9') {
 800138c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001390:	3350      	adds	r3, #80	@ 0x50
 8001392:	443b      	add	r3, r7
 8001394:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8001398:	2b2f      	cmp	r3, #47	@ 0x2f
 800139a:	d976      	bls.n	800148a <TaskReceive+0x1b2>
 800139c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80013a0:	3350      	adds	r3, #80	@ 0x50
 80013a2:	443b      	add	r3, r7
 80013a4:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 80013a8:	2b39      	cmp	r3, #57	@ 0x39
 80013aa:	d86e      	bhi.n	800148a <TaskReceive+0x1b2>
					choice = rx_buffer[rx_index] - '0'; // Convert character to number
 80013ac:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80013b0:	3350      	adds	r3, #80	@ 0x50
 80013b2:	443b      	add	r3, r7
 80013b4:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 80013b8:	3b30      	subs	r3, #48	@ 0x30
 80013ba:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
					printf("Parsed choice: %d\r\n", choice); // Debug print
 80013be:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 80013c2:	4619      	mov	r1, r3
 80013c4:	4876      	ldr	r0, [pc, #472]	@ (80015a0 <TaskReceive+0x2c8>)
 80013c6:	f008 fcf5 	bl	8009db4 <iprintf>

					switch (choice) {
 80013ca:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 80013ce:	2b01      	cmp	r3, #1
 80013d0:	d002      	beq.n	80013d8 <TaskReceive+0x100>
 80013d2:	2b02      	cmp	r3, #2
 80013d4:	d011      	beq.n	80013fa <TaskReceive+0x122>
 80013d6:	e037      	b.n	8001448 <TaskReceive+0x170>
						case 1:
							// LED Control chosen
							current_state = STATE_LED_FREQUENCY;
 80013d8:	4b6c      	ldr	r3, [pc, #432]	@ (800158c <TaskReceive+0x2b4>)
 80013da:	2201      	movs	r2, #1
 80013dc:	701a      	strb	r2, [r3, #0]
							printf("State changed to STATE_LED_FREQUENCY\r\n"); // Debug print
 80013de:	4871      	ldr	r0, [pc, #452]	@ (80015a4 <TaskReceive+0x2cc>)
 80013e0:	f008 fd50 	bl	8009e84 <puts>
							// Reset buffer and index
							rx_index = 0;
 80013e4:	2300      	movs	r3, #0
 80013e6:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
							memset(rx_buffer, 0, sizeof(rx_buffer));
 80013ea:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80013ee:	220a      	movs	r2, #10
 80013f0:	2100      	movs	r1, #0
 80013f2:	4618      	mov	r0, r3
 80013f4:	f008 feda 	bl	800a1ac <memset>
							//if (hal_status != HAL_OK) {
							//	Error_Handler();
							//}
							//OSTimeDlyHMSM(0, 0, 30, 0); // Delay for 1 second

							break;
 80013f8:	e045      	b.n	8001486 <TaskReceive+0x1ae>

						case 2:
							// ADC Reading chosen
							current_state = STATE_ADC_OFFSET;
 80013fa:	4b64      	ldr	r3, [pc, #400]	@ (800158c <TaskReceive+0x2b4>)
 80013fc:	2202      	movs	r2, #2
 80013fe:	701a      	strb	r2, [r3, #0]
							printf("State changed to STATE_ADC_OFFSET\r\n"); // Debug print
 8001400:	4869      	ldr	r0, [pc, #420]	@ (80015a8 <TaskReceive+0x2d0>)
 8001402:	f008 fd3f 	bl	8009e84 <puts>
							// Reset buffer and index
							rx_index = 0;
 8001406:	2300      	movs	r3, #0
 8001408:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
							memset(rx_buffer, 0, sizeof(rx_buffer));
 800140c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001410:	220a      	movs	r2, #10
 8001412:	2100      	movs	r1, #0
 8001414:	4618      	mov	r0, r3
 8001416:	f008 fec9 	bl	800a1ac <memset>
							// Display ADC offset options
							const char *adc_offset_options = "Choose ADC offset:\r\n"
 800141a:	4b64      	ldr	r3, [pc, #400]	@ (80015ac <TaskReceive+0x2d4>)
 800141c:	64bb      	str	r3, [r7, #72]	@ 0x48
															 "1. 0\r\n"
															 "2. 5\r\n"
															 "3. 10\r\n"
															 "Enter your choice (1, 2, or 3): ";
							hal_status = HAL_UART_Transmit(&huart2, (uint8_t*)adc_offset_options, strlen(adc_offset_options), HAL_MAX_DELAY);
 800141e:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8001420:	f7fe ffd6 	bl	80003d0 <strlen>
 8001424:	4603      	mov	r3, r0
 8001426:	b29a      	uxth	r2, r3
 8001428:	f04f 33ff 	mov.w	r3, #4294967295
 800142c:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800142e:	485a      	ldr	r0, [pc, #360]	@ (8001598 <TaskReceive+0x2c0>)
 8001430:	f004 fa68 	bl	8005904 <HAL_UART_Transmit>
 8001434:	4603      	mov	r3, r0
 8001436:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
							if (hal_status != HAL_OK) {
 800143a:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800143e:	2b00      	cmp	r3, #0
 8001440:	d01e      	beq.n	8001480 <TaskReceive+0x1a8>
								Error_Handler();
 8001442:	f000 fdc1 	bl	8001fc8 <Error_Handler>
							}
							break;
 8001446:	e01b      	b.n	8001480 <TaskReceive+0x1a8>

						default:
							// Invalid choice: Send negative response
							printf("Invalid choice\r\n"); // Debug print
 8001448:	4859      	ldr	r0, [pc, #356]	@ (80015b0 <TaskReceive+0x2d8>)
 800144a:	f008 fd1b 	bl	8009e84 <puts>
							PDU neg_response_pdu = {PDU_HEADER, SID_NEG_RESPONSE, {0}};
 800144e:	4a59      	ldr	r2, [pc, #356]	@ (80015b4 <TaskReceive+0x2dc>)
 8001450:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001454:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001458:	e883 0003 	stmia.w	r3, {r0, r1}
							err = OSQPost(tx_queue, (void*)&neg_response_pdu);
 800145c:	4b56      	ldr	r3, [pc, #344]	@ (80015b8 <TaskReceive+0x2e0>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8001464:	4611      	mov	r1, r2
 8001466:	4618      	mov	r0, r3
 8001468:	f007 f84c 	bl	8008504 <OSQPost>
 800146c:	4603      	mov	r3, r0
 800146e:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
							if (err != OS_ERR_NONE) {
 8001472:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8001476:	2b00      	cmp	r3, #0
 8001478:	d004      	beq.n	8001484 <TaskReceive+0x1ac>
								Error_Handler();
 800147a:	f000 fda5 	bl	8001fc8 <Error_Handler>
							}
							break;
 800147e:	e001      	b.n	8001484 <TaskReceive+0x1ac>
							break;
 8001480:	bf00      	nop
 8001482:	e000      	b.n	8001486 <TaskReceive+0x1ae>
							break;
 8001484:	bf00      	nop
					switch (choice) {
 8001486:	bf00      	nop
					err = OSQPost(tx_queue, (void*)&neg_response_pdu);
					if (err != OS_ERR_NONE) {
						Error_Handler();
					}
				}
				break;
 8001488:	e1f3      	b.n	8001872 <TaskReceive+0x59a>
					printf("Invalid input\r\n"); // Debug print
 800148a:	484c      	ldr	r0, [pc, #304]	@ (80015bc <TaskReceive+0x2e4>)
 800148c:	f008 fcfa 	bl	8009e84 <puts>
					PDU neg_response_pdu = {PDU_HEADER, SID_NEG_RESPONSE, {0}};
 8001490:	4a48      	ldr	r2, [pc, #288]	@ (80015b4 <TaskReceive+0x2dc>)
 8001492:	f107 0320 	add.w	r3, r7, #32
 8001496:	e892 0003 	ldmia.w	r2, {r0, r1}
 800149a:	e883 0003 	stmia.w	r3, {r0, r1}
					err = OSQPost(tx_queue, (void*)&neg_response_pdu);
 800149e:	4b46      	ldr	r3, [pc, #280]	@ (80015b8 <TaskReceive+0x2e0>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f107 0220 	add.w	r2, r7, #32
 80014a6:	4611      	mov	r1, r2
 80014a8:	4618      	mov	r0, r3
 80014aa:	f007 f82b 	bl	8008504 <OSQPost>
 80014ae:	4603      	mov	r3, r0
 80014b0:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
					if (err != OS_ERR_NONE) {
 80014b4:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	f000 81da 	beq.w	8001872 <TaskReceive+0x59a>
						Error_Handler();
 80014be:	f000 fd83 	bl	8001fc8 <Error_Handler>
				break;
 80014c2:	e1d6      	b.n	8001872 <TaskReceive+0x59a>

			case STATE_LED_FREQUENCY:
				printf("Enter LED blink frequency (3 digits): \r\n");
 80014c4:	483e      	ldr	r0, [pc, #248]	@ (80015c0 <TaskReceive+0x2e8>)
 80014c6:	f008 fcdd 	bl	8009e84 <puts>
				// Read 3 digits from the user
				for (rx_index = 0; rx_index < 3; rx_index++) {
 80014ca:	2300      	movs	r3, #0
 80014cc:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 80014d0:	e081      	b.n	80015d6 <TaskReceive+0x2fe>
					hal_status = HAL_UART_Receive(&huart2, &rx_buffer[rx_index], 1, HAL_MAX_DELAY);
 80014d2:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80014d6:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 80014da:	18d1      	adds	r1, r2, r3
 80014dc:	f04f 33ff 	mov.w	r3, #4294967295
 80014e0:	2201      	movs	r2, #1
 80014e2:	482d      	ldr	r0, [pc, #180]	@ (8001598 <TaskReceive+0x2c0>)
 80014e4:	f004 fa97 	bl	8005a16 <HAL_UART_Receive>
 80014e8:	4603      	mov	r3, r0
 80014ea:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
					if (hal_status != HAL_OK) {
 80014ee:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <TaskReceive+0x222>
						Error_Handler();
 80014f6:	f000 fd67 	bl	8001fc8 <Error_Handler>
					}

					// Echo the character back to the terminal
					HAL_UART_Transmit(&huart2, &rx_buffer[rx_index], 1, HAL_MAX_DELAY);
 80014fa:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80014fe:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8001502:	18d1      	adds	r1, r2, r3
 8001504:	f04f 33ff 	mov.w	r3, #4294967295
 8001508:	2201      	movs	r2, #1
 800150a:	4823      	ldr	r0, [pc, #140]	@ (8001598 <TaskReceive+0x2c0>)
 800150c:	f004 f9fa 	bl	8005904 <HAL_UART_Transmit>

					// Validate input (must be a digit)
					if (rx_buffer[rx_index] < '0' || rx_buffer[rx_index] > '9') {
 8001510:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001514:	3350      	adds	r3, #80	@ 0x50
 8001516:	443b      	add	r3, r7
 8001518:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 800151c:	2b2f      	cmp	r3, #47	@ 0x2f
 800151e:	d907      	bls.n	8001530 <TaskReceive+0x258>
 8001520:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001524:	3350      	adds	r3, #80	@ 0x50
 8001526:	443b      	add	r3, r7
 8001528:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 800152c:	2b39      	cmp	r3, #57	@ 0x39
 800152e:	d94d      	bls.n	80015cc <TaskReceive+0x2f4>
						printf("\r\nInvalid input. Please enter 3 digits.\r\n");
 8001530:	4824      	ldr	r0, [pc, #144]	@ (80015c4 <TaskReceive+0x2ec>)
 8001532:	f008 fca7 	bl	8009e84 <puts>

						// Invalid input: Send negative response
						PDU neg_response_pdu = {PDU_HEADER, SID_NEG_RESPONSE, {0}};
 8001536:	4a1f      	ldr	r2, [pc, #124]	@ (80015b4 <TaskReceive+0x2dc>)
 8001538:	f107 0318 	add.w	r3, r7, #24
 800153c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001540:	e883 0003 	stmia.w	r3, {r0, r1}
						err = OSQPost(tx_queue, (void*)&neg_response_pdu);
 8001544:	4b1c      	ldr	r3, [pc, #112]	@ (80015b8 <TaskReceive+0x2e0>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f107 0218 	add.w	r2, r7, #24
 800154c:	4611      	mov	r1, r2
 800154e:	4618      	mov	r0, r3
 8001550:	f006 ffd8 	bl	8008504 <OSQPost>
 8001554:	4603      	mov	r3, r0
 8001556:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
						if (err != OS_ERR_NONE) {
 800155a:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800155e:	2b00      	cmp	r3, #0
 8001560:	d004      	beq.n	800156c <TaskReceive+0x294>
							printf("Error in sending neg response from receiveLEDfrequency! ");
 8001562:	4819      	ldr	r0, [pc, #100]	@ (80015c8 <TaskReceive+0x2f0>)
 8001564:	f008 fc26 	bl	8009db4 <iprintf>
							Error_Handler();
 8001568:	f000 fd2e 	bl	8001fc8 <Error_Handler>
						}

						current_state = STATE_MAIN_MENU; // Return to main menu
 800156c:	4b07      	ldr	r3, [pc, #28]	@ (800158c <TaskReceive+0x2b4>)
 800156e:	2200      	movs	r2, #0
 8001570:	701a      	strb	r2, [r3, #0]
						rx_index = 0;
 8001572:	2300      	movs	r3, #0
 8001574:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
						memset(rx_buffer, 0, sizeof(rx_buffer));
 8001578:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800157c:	220a      	movs	r2, #10
 800157e:	2100      	movs	r1, #0
 8001580:	4618      	mov	r0, r3
 8001582:	f008 fe13 	bl	800a1ac <memset>
						break;
 8001586:	e02b      	b.n	80015e0 <TaskReceive+0x308>
 8001588:	0800c050 	.word	0x0800c050
 800158c:	20005328 	.word	0x20005328
 8001590:	0800c068 	.word	0x0800c068
 8001594:	20000000 	.word	0x20000000
 8001598:	20000258 	.word	0x20000258
 800159c:	0800c07c 	.word	0x0800c07c
 80015a0:	0800c098 	.word	0x0800c098
 80015a4:	0800c0ac 	.word	0x0800c0ac
 80015a8:	0800c0d4 	.word	0x0800c0d4
 80015ac:	0800c0f8 	.word	0x0800c0f8
 80015b0:	0800c140 	.word	0x0800c140
 80015b4:	0800c328 	.word	0x0800c328
 80015b8:	20005320 	.word	0x20005320
 80015bc:	0800c150 	.word	0x0800c150
 80015c0:	0800c160 	.word	0x0800c160
 80015c4:	0800c188 	.word	0x0800c188
 80015c8:	0800c1b4 	.word	0x0800c1b4
				for (rx_index = 0; rx_index < 3; rx_index++) {
 80015cc:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80015d0:	3301      	adds	r3, #1
 80015d2:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 80015d6:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80015da:	2b02      	cmp	r3, #2
 80015dc:	f67f af79 	bls.w	80014d2 <TaskReceive+0x1fa>
					}
				}
				// If 3 digits were successfully entered
				if (rx_index == 3) {
 80015e0:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80015e4:	2b03      	cmp	r3, #3
 80015e6:	f040 8146 	bne.w	8001876 <TaskReceive+0x59e>
					// Convert the 3-digit input to an integer
					uint16_t frequency = (rx_buffer[0] - '0') * 100 +
 80015ea:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 80015ee:	3b30      	subs	r3, #48	@ 0x30
 80015f0:	b29b      	uxth	r3, r3
 80015f2:	461a      	mov	r2, r3
 80015f4:	0092      	lsls	r2, r2, #2
 80015f6:	4413      	add	r3, r2
 80015f8:	461a      	mov	r2, r3
 80015fa:	0091      	lsls	r1, r2, #2
 80015fc:	461a      	mov	r2, r3
 80015fe:	460b      	mov	r3, r1
 8001600:	4413      	add	r3, r2
 8001602:	009b      	lsls	r3, r3, #2
 8001604:	b29a      	uxth	r2, r3
										 (rx_buffer[1] - '0') * 10 +
 8001606:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 800160a:	3b30      	subs	r3, #48	@ 0x30
					uint16_t frequency = (rx_buffer[0] - '0') * 100 +
 800160c:	b29b      	uxth	r3, r3
 800160e:	4619      	mov	r1, r3
 8001610:	0089      	lsls	r1, r1, #2
 8001612:	440b      	add	r3, r1
 8001614:	005b      	lsls	r3, r3, #1
 8001616:	b29b      	uxth	r3, r3
 8001618:	4413      	add	r3, r2
 800161a:	b29b      	uxth	r3, r3
										 (rx_buffer[2] - '0');
 800161c:	f897 203e 	ldrb.w	r2, [r7, #62]	@ 0x3e
										 (rx_buffer[1] - '0') * 10 +
 8001620:	4413      	add	r3, r2
 8001622:	b29b      	uxth	r3, r3
 8001624:	3b30      	subs	r3, #48	@ 0x30
 8001626:	b29b      	uxth	r3, r3
					uint16_t frequency = (rx_buffer[0] - '0') * 100 +
 8001628:	82fb      	strh	r3, [r7, #22]

					printf("\r\nFrequency set to: %d ms\r\n", frequency);
 800162a:	8afb      	ldrh	r3, [r7, #22]
 800162c:	4619      	mov	r1, r3
 800162e:	4899      	ldr	r0, [pc, #612]	@ (8001894 <TaskReceive+0x5bc>)
 8001630:	f008 fbc0 	bl	8009db4 <iprintf>
					// Set LED frequency
					pdu_tx.header = PDU_HEADER;
 8001634:	235a      	movs	r3, #90	@ 0x5a
 8001636:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
					//printf("Header added");
					pdu_tx.sid = SID_LED_BLINK;
 800163a:	2318      	movs	r3, #24
 800163c:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
					//printf("SID added");
					memset(pdu_tx.data, 0, sizeof(pdu_tx.data)); // Clear previous data
 8001640:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001644:	3302      	adds	r3, #2
 8001646:	2206      	movs	r2, #6
 8001648:	2100      	movs	r1, #0
 800164a:	4618      	mov	r0, r3
 800164c:	f008 fdae 	bl	800a1ac <memset>
					//printf("Data cleared");
					memcpy(pdu_tx.data, &frequency, sizeof(frequency)); // Store frequency in PDU payload
 8001650:	8afb      	ldrh	r3, [r7, #22]
 8001652:	867b      	strh	r3, [r7, #50]	@ 0x32
					printf("LED PDU prepared!\r\n");
 8001654:	4890      	ldr	r0, [pc, #576]	@ (8001898 <TaskReceive+0x5c0>)
 8001656:	f008 fc15 	bl	8009e84 <puts>
					OSFlagPost(event_flags, LED_EVENT, OS_FLAG_SET, &err); // Trigger LED blink
 800165a:	4b90      	ldr	r3, [pc, #576]	@ (800189c <TaskReceive+0x5c4>)
 800165c:	6818      	ldr	r0, [r3, #0]
 800165e:	f107 0339 	add.w	r3, r7, #57	@ 0x39
 8001662:	2201      	movs	r2, #1
 8001664:	2101      	movs	r1, #1
 8001666:	f006 fbb5 	bl	8007dd4 <OSFlagPost>
					printf("LED Flag Post! \r\n");
 800166a:	488d      	ldr	r0, [pc, #564]	@ (80018a0 <TaskReceive+0x5c8>)
 800166c:	f008 fc0a 	bl	8009e84 <puts>
					if (err != OS_ERR_NONE) {
 8001670:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8001674:	2b00      	cmp	r3, #0
 8001676:	d001      	beq.n	800167c <TaskReceive+0x3a4>
						Error_Handler();
 8001678:	f000 fca6 	bl	8001fc8 <Error_Handler>
					}

					// Send Positive Response
					err = OSQPost(tx_queue, (void *)&pdu_tx);
 800167c:	4b89      	ldr	r3, [pc, #548]	@ (80018a4 <TaskReceive+0x5cc>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8001684:	4611      	mov	r1, r2
 8001686:	4618      	mov	r0, r3
 8001688:	f006 ff3c 	bl	8008504 <OSQPost>
 800168c:	4603      	mov	r3, r0
 800168e:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
					if (err != OS_ERR_NONE) {
 8001692:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8001696:	2b00      	cmp	r3, #0
 8001698:	d007      	beq.n	80016aa <TaskReceive+0x3d2>
						printf("Error posting to queue: %d\r\n", err);
 800169a:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800169e:	4619      	mov	r1, r3
 80016a0:	4881      	ldr	r0, [pc, #516]	@ (80018a8 <TaskReceive+0x5d0>)
 80016a2:	f008 fb87 	bl	8009db4 <iprintf>
						Error_Handler();
 80016a6:	f000 fc8f 	bl	8001fc8 <Error_Handler>
					}
					printf("Receive task Queue post no err\r\n");
 80016aa:	4880      	ldr	r0, [pc, #512]	@ (80018ac <TaskReceive+0x5d4>)
 80016ac:	f008 fbea 	bl	8009e84 <puts>

					OSTimeDlyHMSM(0, 1, 0, 0);
 80016b0:	2300      	movs	r3, #0
 80016b2:	2200      	movs	r2, #0
 80016b4:	2101      	movs	r1, #1
 80016b6:	2000      	movs	r0, #0
 80016b8:	f007 fc02 	bl	8008ec0 <OSTimeDlyHMSM>
					printf("Post 1");
 80016bc:	487c      	ldr	r0, [pc, #496]	@ (80018b0 <TaskReceive+0x5d8>)
 80016be:	f008 fb79 	bl	8009db4 <iprintf>
					// Reset state and buffer
					current_state = STATE_MAIN_MENU;
 80016c2:	4b7c      	ldr	r3, [pc, #496]	@ (80018b4 <TaskReceive+0x5dc>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	701a      	strb	r2, [r3, #0]
					rx_index = 0;
 80016c8:	2300      	movs	r3, #0
 80016ca:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
					memset(rx_buffer, 0, sizeof(rx_buffer));
 80016ce:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80016d2:	220a      	movs	r2, #10
 80016d4:	2100      	movs	r1, #0
 80016d6:	4618      	mov	r0, r3
 80016d8:	f008 fd68 	bl	800a1ac <memset>
					printf("Returned to MAIN MENU\r\n"); // Debug print
 80016dc:	4876      	ldr	r0, [pc, #472]	@ (80018b8 <TaskReceive+0x5e0>)
 80016de:	f008 fbd1 	bl	8009e84 <puts>
				}
				break;
 80016e2:	e0c8      	b.n	8001876 <TaskReceive+0x59e>

			case STATE_ADC_OFFSET:
				// Wait for user input
				hal_status = HAL_UART_Receive(&huart2, &rx_buffer[rx_index], 1, HAL_MAX_DELAY);
 80016e4:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80016e8:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 80016ec:	18d1      	adds	r1, r2, r3
 80016ee:	f04f 33ff 	mov.w	r3, #4294967295
 80016f2:	2201      	movs	r2, #1
 80016f4:	4871      	ldr	r0, [pc, #452]	@ (80018bc <TaskReceive+0x5e4>)
 80016f6:	f004 f98e 	bl	8005a16 <HAL_UART_Receive>
 80016fa:	4603      	mov	r3, r0
 80016fc:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
				if (hal_status != HAL_OK) {
 8001700:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001704:	2b00      	cmp	r3, #0
 8001706:	d001      	beq.n	800170c <TaskReceive+0x434>
					Error_Handler();
 8001708:	f000 fc5e 	bl	8001fc8 <Error_Handler>
				}
				// Handle ADC offset choice
				if (rx_buffer[rx_index] >= '1' && rx_buffer[rx_index] <= '3') {
 800170c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001710:	3350      	adds	r3, #80	@ 0x50
 8001712:	443b      	add	r3, r7
 8001714:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8001718:	2b30      	cmp	r3, #48	@ 0x30
 800171a:	f240 808e 	bls.w	800183a <TaskReceive+0x562>
 800171e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001722:	3350      	adds	r3, #80	@ 0x50
 8001724:	443b      	add	r3, r7
 8001726:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 800172a:	2b33      	cmp	r3, #51	@ 0x33
 800172c:	f200 8085 	bhi.w	800183a <TaskReceive+0x562>
					choice = rx_buffer[rx_index] - '0'; // Convert character to number
 8001730:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001734:	3350      	adds	r3, #80	@ 0x50
 8001736:	443b      	add	r3, r7
 8001738:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 800173c:	3b30      	subs	r3, #48	@ 0x30
 800173e:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
					printf("Parsed ADC offset choice: %d\r\n", choice); // Debug print
 8001742:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8001746:	4619      	mov	r1, r3
 8001748:	485d      	ldr	r0, [pc, #372]	@ (80018c0 <TaskReceive+0x5e8>)
 800174a:	f008 fb33 	bl	8009db4 <iprintf>

					// Set offset based on choice
					switch (choice) {
 800174e:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8001752:	2b03      	cmp	r3, #3
 8001754:	d00c      	beq.n	8001770 <TaskReceive+0x498>
 8001756:	2b03      	cmp	r3, #3
 8001758:	dc0d      	bgt.n	8001776 <TaskReceive+0x49e>
 800175a:	2b01      	cmp	r3, #1
 800175c:	d002      	beq.n	8001764 <TaskReceive+0x48c>
 800175e:	2b02      	cmp	r3, #2
 8001760:	d003      	beq.n	800176a <TaskReceive+0x492>
 8001762:	e008      	b.n	8001776 <TaskReceive+0x49e>
						case 1:
							offset = 0;
 8001764:	2300      	movs	r3, #0
 8001766:	877b      	strh	r3, [r7, #58]	@ 0x3a
							break;
 8001768:	e005      	b.n	8001776 <TaskReceive+0x49e>
						case 2:
							offset = 5;
 800176a:	2305      	movs	r3, #5
 800176c:	877b      	strh	r3, [r7, #58]	@ 0x3a
							break;
 800176e:	e002      	b.n	8001776 <TaskReceive+0x49e>
						case 3:
							offset = 10;
 8001770:	230a      	movs	r3, #10
 8001772:	877b      	strh	r3, [r7, #58]	@ 0x3a
							break;
 8001774:	bf00      	nop
					}
					// Set LED frequency
					pdu_tx.header = PDU_HEADER;
 8001776:	235a      	movs	r3, #90	@ 0x5a
 8001778:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
					printf("Header added");
 800177c:	4851      	ldr	r0, [pc, #324]	@ (80018c4 <TaskReceive+0x5ec>)
 800177e:	f008 fb19 	bl	8009db4 <iprintf>
					pdu_tx.sid = SID_ADC_READ;
 8001782:	2338      	movs	r3, #56	@ 0x38
 8001784:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
					printf("SID added");
 8001788:	484f      	ldr	r0, [pc, #316]	@ (80018c8 <TaskReceive+0x5f0>)
 800178a:	f008 fb13 	bl	8009db4 <iprintf>
					memset(pdu_tx.data, 0, sizeof(pdu_tx.data)); // Clear previous data
 800178e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001792:	3302      	adds	r3, #2
 8001794:	2206      	movs	r2, #6
 8001796:	2100      	movs	r1, #0
 8001798:	4618      	mov	r0, r3
 800179a:	f008 fd07 	bl	800a1ac <memset>
					printf("Data cleared");
 800179e:	484b      	ldr	r0, [pc, #300]	@ (80018cc <TaskReceive+0x5f4>)
 80017a0:	f008 fb08 	bl	8009db4 <iprintf>
					pdu_tx.data[0] = 2;  // Payload Type 2 (send ADC value)
 80017a4:	2302      	movs	r3, #2
 80017a6:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
					memcpy(&pdu_tx.data[1], &offset, sizeof(offset)); // Store offset in PDU payload
 80017aa:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80017ac:	f8a7 3033 	strh.w	r3, [r7, #51]	@ 0x33
					printf("Copy handled, sent offset = %d\r\n", offset);
 80017b0:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	@ 0x3a
 80017b4:	4619      	mov	r1, r3
 80017b6:	4846      	ldr	r0, [pc, #280]	@ (80018d0 <TaskReceive+0x5f8>)
 80017b8:	f008 fafc 	bl	8009db4 <iprintf>
					OSFlagPost(event_flags, ADC_EVENT, OS_FLAG_SET, &err); // Trigger ADC read
 80017bc:	4b37      	ldr	r3, [pc, #220]	@ (800189c <TaskReceive+0x5c4>)
 80017be:	6818      	ldr	r0, [r3, #0]
 80017c0:	f107 0339 	add.w	r3, r7, #57	@ 0x39
 80017c4:	2201      	movs	r2, #1
 80017c6:	2102      	movs	r1, #2
 80017c8:	f006 fb04 	bl	8007dd4 <OSFlagPost>
					if (err != OS_ERR_NONE) {
 80017cc:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d001      	beq.n	80017d8 <TaskReceive+0x500>
						Error_Handler();
 80017d4:	f000 fbf8 	bl	8001fc8 <Error_Handler>
					}
					//pdu_tx.data[0] = 0x01; // Example payload

					// Send Positive Response
					err = OSQPost(tx_queue, (void *)&pdu_tx);
 80017d8:	4b32      	ldr	r3, [pc, #200]	@ (80018a4 <TaskReceive+0x5cc>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80017e0:	4611      	mov	r1, r2
 80017e2:	4618      	mov	r0, r3
 80017e4:	f006 fe8e 	bl	8008504 <OSQPost>
 80017e8:	4603      	mov	r3, r0
 80017ea:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
					if (err != OS_ERR_NONE) {
 80017ee:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d007      	beq.n	8001806 <TaskReceive+0x52e>
						printf("Error posting to queue: %d\r\n", err);
 80017f6:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80017fa:	4619      	mov	r1, r3
 80017fc:	482a      	ldr	r0, [pc, #168]	@ (80018a8 <TaskReceive+0x5d0>)
 80017fe:	f008 fad9 	bl	8009db4 <iprintf>
						Error_Handler();
 8001802:	f000 fbe1 	bl	8001fc8 <Error_Handler>
					}
					printf("Receive task Queue post no err \r\n");
 8001806:	4833      	ldr	r0, [pc, #204]	@ (80018d4 <TaskReceive+0x5fc>)
 8001808:	f008 fb3c 	bl	8009e84 <puts>
					OSTimeDlyHMSM(0, 1, 0, 0);
 800180c:	2300      	movs	r3, #0
 800180e:	2200      	movs	r2, #0
 8001810:	2101      	movs	r1, #1
 8001812:	2000      	movs	r0, #0
 8001814:	f007 fb54 	bl	8008ec0 <OSTimeDlyHMSM>
					//printf("Post 1");
					// Reset state and buffer
					current_state = STATE_MAIN_MENU;
 8001818:	4b26      	ldr	r3, [pc, #152]	@ (80018b4 <TaskReceive+0x5dc>)
 800181a:	2200      	movs	r2, #0
 800181c:	701a      	strb	r2, [r3, #0]
					rx_index = 0;
 800181e:	2300      	movs	r3, #0
 8001820:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
					memset(rx_buffer, 0, sizeof(rx_buffer));
 8001824:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001828:	220a      	movs	r2, #10
 800182a:	2100      	movs	r1, #0
 800182c:	4618      	mov	r0, r3
 800182e:	f008 fcbd 	bl	800a1ac <memset>
					printf("Returned to MAIN MENU\r\n"); // Debug print
 8001832:	4821      	ldr	r0, [pc, #132]	@ (80018b8 <TaskReceive+0x5e0>)
 8001834:	f008 fb26 	bl	8009e84 <puts>
					err = OSQPost(tx_queue, (void*)&neg_response_pdu);
					if (err != OS_ERR_NONE) {
						Error_Handler();
					}
				}
				break;
 8001838:	e01f      	b.n	800187a <TaskReceive+0x5a2>
					printf("Invalid input\r\n"); // Debug print
 800183a:	4827      	ldr	r0, [pc, #156]	@ (80018d8 <TaskReceive+0x600>)
 800183c:	f008 fb22 	bl	8009e84 <puts>
					PDU neg_response_pdu = {PDU_HEADER, SID_NEG_RESPONSE, {0}};
 8001840:	4a26      	ldr	r2, [pc, #152]	@ (80018dc <TaskReceive+0x604>)
 8001842:	f107 030c 	add.w	r3, r7, #12
 8001846:	e892 0003 	ldmia.w	r2, {r0, r1}
 800184a:	e883 0003 	stmia.w	r3, {r0, r1}
					err = OSQPost(tx_queue, (void*)&neg_response_pdu);
 800184e:	4b15      	ldr	r3, [pc, #84]	@ (80018a4 <TaskReceive+0x5cc>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f107 020c 	add.w	r2, r7, #12
 8001856:	4611      	mov	r1, r2
 8001858:	4618      	mov	r0, r3
 800185a:	f006 fe53 	bl	8008504 <OSQPost>
 800185e:	4603      	mov	r3, r0
 8001860:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
					if (err != OS_ERR_NONE) {
 8001864:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8001868:	2b00      	cmp	r3, #0
 800186a:	d006      	beq.n	800187a <TaskReceive+0x5a2>
						Error_Handler();
 800186c:	f000 fbac 	bl	8001fc8 <Error_Handler>
				break;
 8001870:	e003      	b.n	800187a <TaskReceive+0x5a2>
				break;
 8001872:	bf00      	nop
 8001874:	e002      	b.n	800187c <TaskReceive+0x5a4>
				break;
 8001876:	bf00      	nop
 8001878:	e000      	b.n	800187c <TaskReceive+0x5a4>
				break;
 800187a:	bf00      	nop
		}

		// Reset buffer and index
		rx_index = 0;
 800187c:	2300      	movs	r3, #0
 800187e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
		memset(rx_buffer, 0, sizeof(rx_buffer));
 8001882:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001886:	220a      	movs	r2, #10
 8001888:	2100      	movs	r1, #0
 800188a:	4618      	mov	r0, r3
 800188c:	f008 fc8e 	bl	800a1ac <memset>
		switch (current_state) {
 8001890:	e538      	b.n	8001304 <TaskReceive+0x2c>
 8001892:	bf00      	nop
 8001894:	0800c1f0 	.word	0x0800c1f0
 8001898:	0800c20c 	.word	0x0800c20c
 800189c:	20005324 	.word	0x20005324
 80018a0:	0800c220 	.word	0x0800c220
 80018a4:	20005320 	.word	0x20005320
 80018a8:	0800c234 	.word	0x0800c234
 80018ac:	0800c254 	.word	0x0800c254
 80018b0:	0800c274 	.word	0x0800c274
 80018b4:	20005328 	.word	0x20005328
 80018b8:	0800c27c 	.word	0x0800c27c
 80018bc:	20000258 	.word	0x20000258
 80018c0:	0800c294 	.word	0x0800c294
 80018c4:	0800c2b4 	.word	0x0800c2b4
 80018c8:	0800c2c4 	.word	0x0800c2c4
 80018cc:	0800c2d0 	.word	0x0800c2d0
 80018d0:	0800c2e0 	.word	0x0800c2e0
 80018d4:	0800c304 	.word	0x0800c304
 80018d8:	0800c150 	.word	0x0800c150
 80018dc:	0800c328 	.word	0x0800c328

080018e0 <TaskButton>:
	}
}
/* Button Event Task ----------------------------------------------------------------*/
void TaskButton(void *pdata) {
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b088      	sub	sp, #32
 80018e4:	af02      	add	r7, sp, #8
 80018e6:	6078      	str	r0, [r7, #4]
	PDU pdu_tx = {PDU_HEADER, SID_POS_RESPONSE, {0}};
 80018e8:	4a1d      	ldr	r2, [pc, #116]	@ (8001960 <TaskButton+0x80>)
 80018ea:	f107 030c 	add.w	r3, r7, #12
 80018ee:	e892 0003 	ldmia.w	r2, {r0, r1}
 80018f2:	e883 0003 	stmia.w	r3, {r0, r1}
	INT8U err;
	OS_FLAGS flags;
	printf("Task Button\r\n");
 80018f6:	481b      	ldr	r0, [pc, #108]	@ (8001964 <TaskButton+0x84>)
 80018f8:	f008 fac4 	bl	8009e84 <puts>

	while (1) {
		// Wait for BUTTON_EVENT (button press)
		flags = OSFlagPend(event_flags, BUTTON_EVENT, OS_FLAG_WAIT_SET_ALL, 0, &err);
 80018fc:	4b1a      	ldr	r3, [pc, #104]	@ (8001968 <TaskButton+0x88>)
 80018fe:	6818      	ldr	r0, [r3, #0]
 8001900:	f107 030b 	add.w	r3, r7, #11
 8001904:	9300      	str	r3, [sp, #0]
 8001906:	2300      	movs	r3, #0
 8001908:	2202      	movs	r2, #2
 800190a:	2104      	movs	r1, #4
 800190c:	f006 f8d2 	bl	8007ab4 <OSFlagPend>
 8001910:	4603      	mov	r3, r0
 8001912:	82fb      	strh	r3, [r7, #22]
		if (err != OS_ERR_NONE) {
 8001914:	7afb      	ldrb	r3, [r7, #11]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d001      	beq.n	800191e <TaskButton+0x3e>
			Error_Handler();
 800191a:	f000 fb55 	bl	8001fc8 <Error_Handler>
		}

		if (flags & BUTTON_EVENT) {
 800191e:	8afb      	ldrh	r3, [r7, #22]
 8001920:	f003 0304 	and.w	r3, r3, #4
 8001924:	2b00      	cmp	r3, #0
 8001926:	d0e9      	beq.n	80018fc <TaskButton+0x1c>
			// Process Event
			//const char msg[30] = "The Button is Pressed!\r\n";
			//HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
			printf("Button: The push button is pressed!\r\n");
 8001928:	4810      	ldr	r0, [pc, #64]	@ (800196c <TaskButton+0x8c>)
 800192a:	f008 faab 	bl	8009e84 <puts>

			// Send Positive Response
			err = OSQPost(tx_queue, (void*)&pdu_tx); // Post to transmit queue
 800192e:	4b10      	ldr	r3, [pc, #64]	@ (8001970 <TaskButton+0x90>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f107 020c 	add.w	r2, r7, #12
 8001936:	4611      	mov	r1, r2
 8001938:	4618      	mov	r0, r3
 800193a:	f006 fde3 	bl	8008504 <OSQPost>
 800193e:	4603      	mov	r3, r0
 8001940:	72fb      	strb	r3, [r7, #11]
			if (err != OS_ERR_NONE) {
 8001942:	7afb      	ldrb	r3, [r7, #11]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d001      	beq.n	800194c <TaskButton+0x6c>
				Error_Handler();
 8001948:	f000 fb3e 	bl	8001fc8 <Error_Handler>
			}
			OSFlagPost(event_flags, BUTTON_EVENT, OS_FLAG_CLR, &err); // Manually clear the flag
 800194c:	4b06      	ldr	r3, [pc, #24]	@ (8001968 <TaskButton+0x88>)
 800194e:	6818      	ldr	r0, [r3, #0]
 8001950:	f107 030b 	add.w	r3, r7, #11
 8001954:	2200      	movs	r2, #0
 8001956:	2104      	movs	r1, #4
 8001958:	f006 fa3c 	bl	8007dd4 <OSFlagPost>
		flags = OSFlagPend(event_flags, BUTTON_EVENT, OS_FLAG_WAIT_SET_ALL, 0, &err);
 800195c:	e7ce      	b.n	80018fc <TaskButton+0x1c>
 800195e:	bf00      	nop
 8001960:	0800c368 	.word	0x0800c368
 8001964:	0800c330 	.word	0x0800c330
 8001968:	20005324 	.word	0x20005324
 800196c:	0800c340 	.word	0x0800c340
 8001970:	20005320 	.word	0x20005320

08001974 <LEDBlink.0>:
    OS_FLAGS flags;
    uint16_t blink_frequency;
    printf("Task LED\r\n");

    // LED Blink Function
    void LEDBlink(INT32U blink_frequency_ms) {
 8001974:	b580      	push	{r7, lr}
 8001976:	b086      	sub	sp, #24
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
 800197c:	f8c7 c000 	str.w	ip, [r7]
        INT32U start_time = OSTimeGet();
 8001980:	f007 fb02 	bl	8008f88 <OSTimeGet>
 8001984:	6178      	str	r0, [r7, #20]
        INT32U current_time;
        INT32U total_duration_ms = 5000; // Blink for 5 seconds
 8001986:	f241 3388 	movw	r3, #5000	@ 0x1388
 800198a:	613b      	str	r3, [r7, #16]

        while (1) {
        	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800198c:	2120      	movs	r1, #32
 800198e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001992:	f002 fc17 	bl	80041c4 <HAL_GPIO_TogglePin>
            OSTimeDlyHMSM(0, 0, 0, blink_frequency_ms);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	b29b      	uxth	r3, r3
 800199a:	2200      	movs	r2, #0
 800199c:	2100      	movs	r1, #0
 800199e:	2000      	movs	r0, #0
 80019a0:	f007 fa8e 	bl	8008ec0 <OSTimeDlyHMSM>

            current_time = OSTimeGet();
 80019a4:	f007 faf0 	bl	8008f88 <OSTimeGet>
 80019a8:	60f8      	str	r0, [r7, #12]
            if ((current_time - start_time) >= total_duration_ms) {
 80019aa:	68fa      	ldr	r2, [r7, #12]
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	1ad3      	subs	r3, r2, r3
 80019b0:	693a      	ldr	r2, [r7, #16]
 80019b2:	429a      	cmp	r2, r3
 80019b4:	d900      	bls.n	80019b8 <LEDBlink.0+0x44>
        	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80019b6:	e7e9      	b.n	800198c <LEDBlink.0+0x18>
                break; // Exit loop if total duration has elapsed
 80019b8:	bf00      	nop
            }
        }
        // Ensure the LED is off after blinking completes
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET); // Turn LED off
 80019ba:	2200      	movs	r2, #0
 80019bc:	2120      	movs	r1, #32
 80019be:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80019c2:	f002 fbe7 	bl	8004194 <HAL_GPIO_WritePin>
    }
 80019c6:	bf00      	nop
 80019c8:	3718      	adds	r7, #24
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
	...

080019d0 <TaskLED>:
void TaskLED(void *pdata) {
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b08a      	sub	sp, #40	@ 0x28
 80019d4:	af02      	add	r7, sp, #8
 80019d6:	6078      	str	r0, [r7, #4]
 80019d8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80019dc:	60bb      	str	r3, [r7, #8]
    PDU pdu_tx = {PDU_HEADER, SID_POS_RESPONSE, {0}}; //???????
 80019de:	4a3d      	ldr	r2, [pc, #244]	@ (8001ad4 <TaskLED+0x104>)
 80019e0:	f107 0310 	add.w	r3, r7, #16
 80019e4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80019e8:	e883 0003 	stmia.w	r3, {r0, r1}
    printf("Task LED\r\n");
 80019ec:	483a      	ldr	r0, [pc, #232]	@ (8001ad8 <TaskLED+0x108>)
 80019ee:	f008 fa49 	bl	8009e84 <puts>

    while (1) {
        // Wait for LED_EVENT
        flags = OSFlagPend(event_flags, LED_EVENT, OS_FLAG_WAIT_SET_ALL + OS_FLAG_CONSUME, 0, &err);
 80019f2:	4b3a      	ldr	r3, [pc, #232]	@ (8001adc <TaskLED+0x10c>)
 80019f4:	6818      	ldr	r0, [r3, #0]
 80019f6:	f107 030f 	add.w	r3, r7, #15
 80019fa:	9300      	str	r3, [sp, #0]
 80019fc:	2300      	movs	r3, #0
 80019fe:	2282      	movs	r2, #130	@ 0x82
 8001a00:	2101      	movs	r1, #1
 8001a02:	f006 f857 	bl	8007ab4 <OSFlagPend>
 8001a06:	4603      	mov	r3, r0
 8001a08:	83fb      	strh	r3, [r7, #30]
        printf("Pend happened LED\r\n");
 8001a0a:	4835      	ldr	r0, [pc, #212]	@ (8001ae0 <TaskLED+0x110>)
 8001a0c:	f008 fa3a 	bl	8009e84 <puts>
        if (err != OS_ERR_NONE) {
 8001a10:	7bfb      	ldrb	r3, [r7, #15]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d001      	beq.n	8001a1a <TaskLED+0x4a>
			Error_Handler();			 // Call Error_Handler on failure
 8001a16:	f000 fad7 	bl	8001fc8 <Error_Handler>
		}

        if (flags & LED_EVENT) {
 8001a1a:	8bfb      	ldrh	r3, [r7, #30]
 8001a1c:	f003 0301 	and.w	r3, r3, #1
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d0e6      	beq.n	80019f2 <TaskLED+0x22>
        	printf("LED flag condition TRUE\r\n");
 8001a24:	482f      	ldr	r0, [pc, #188]	@ (8001ae4 <TaskLED+0x114>)
 8001a26:	f008 fa2d 	bl	8009e84 <puts>
        	//Get the PDU pointer (address)
			//pdu_rx = &led_pdu;
        	// Wait for a PDU from the queue
			pdu_rx = (PDU *)OSQPend(tx_queue, 0, &err);
 8001a2a:	4b2f      	ldr	r3, [pc, #188]	@ (8001ae8 <TaskLED+0x118>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f107 020f 	add.w	r2, r7, #15
 8001a32:	2100      	movs	r1, #0
 8001a34:	4618      	mov	r0, r3
 8001a36:	f006 fca5 	bl	8008384 <OSQPend>
 8001a3a:	61b8      	str	r0, [r7, #24]
			if (err != OS_ERR_NONE) {
 8001a3c:	7bfb      	ldrb	r3, [r7, #15]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d004      	beq.n	8001a4c <TaskLED+0x7c>
				printf("LED receive queue error\r\n");
 8001a42:	482a      	ldr	r0, [pc, #168]	@ (8001aec <TaskLED+0x11c>)
 8001a44:	f008 fa1e 	bl	8009e84 <puts>
				Error_Handler();
 8001a48:	f000 fabe 	bl	8001fc8 <Error_Handler>
			}
			printf("LED received the queue\r\n");
 8001a4c:	4828      	ldr	r0, [pc, #160]	@ (8001af0 <TaskLED+0x120>)
 8001a4e:	f008 fa19 	bl	8009e84 <puts>

			// Extract frequency from PDU payload
			memcpy(&blink_frequency, pdu_rx->data, sizeof(blink_frequency));
 8001a52:	69bb      	ldr	r3, [r7, #24]
 8001a54:	3302      	adds	r3, #2
 8001a56:	881b      	ldrh	r3, [r3, #0]
 8001a58:	b29b      	uxth	r3, r3
 8001a5a:	81bb      	strh	r3, [r7, #12]
			printf("frequency = %d\r\n", blink_frequency);
 8001a5c:	89bb      	ldrh	r3, [r7, #12]
 8001a5e:	4619      	mov	r1, r3
 8001a60:	4824      	ldr	r0, [pc, #144]	@ (8001af4 <TaskLED+0x124>)
 8001a62:	f008 f9a7 	bl	8009db4 <iprintf>

            // Blink LED
			LEDBlink(blink_frequency);
 8001a66:	89bb      	ldrh	r3, [r7, #12]
 8001a68:	461a      	mov	r2, r3
 8001a6a:	f107 0308 	add.w	r3, r7, #8
 8001a6e:	469c      	mov	ip, r3
 8001a70:	4610      	mov	r0, r2
 8001a72:	f7ff ff7f 	bl	8001974 <LEDBlink.0>
			printf("Payane blink\r\n");
 8001a76:	4820      	ldr	r0, [pc, #128]	@ (8001af8 <TaskLED+0x128>)
 8001a78:	f008 fa04 	bl	8009e84 <puts>
			pdu_tx.data[0] = 0x01; // Example payload
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	74bb      	strb	r3, [r7, #18]

            // Send Positive Response
			err = OSQPost(tx_queue, (void *)&pdu_tx);
 8001a80:	4b19      	ldr	r3, [pc, #100]	@ (8001ae8 <TaskLED+0x118>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f107 0210 	add.w	r2, r7, #16
 8001a88:	4611      	mov	r1, r2
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f006 fd3a 	bl	8008504 <OSQPost>
 8001a90:	4603      	mov	r3, r0
 8001a92:	73fb      	strb	r3, [r7, #15]
            if (err != OS_ERR_NONE) {
 8001a94:	7bfb      	ldrb	r3, [r7, #15]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d006      	beq.n	8001aa8 <TaskLED+0xd8>
				printf("Error posting to queue: %d\r\n", err);
 8001a9a:	7bfb      	ldrb	r3, [r7, #15]
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	4817      	ldr	r0, [pc, #92]	@ (8001afc <TaskLED+0x12c>)
 8001aa0:	f008 f988 	bl	8009db4 <iprintf>
				Error_Handler();
 8001aa4:	f000 fa90 	bl	8001fc8 <Error_Handler>
			}

            printf("LED Queue post no err\r\n");
 8001aa8:	4815      	ldr	r0, [pc, #84]	@ (8001b00 <TaskLED+0x130>)
 8001aaa:	f008 f9eb 	bl	8009e84 <puts>
            OSTimeDlyHMSM(0, 0, 1, 0); // Delay for 1 second
 8001aae:	2300      	movs	r3, #0
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	2100      	movs	r1, #0
 8001ab4:	2000      	movs	r0, #0
 8001ab6:	f007 fa03 	bl	8008ec0 <OSTimeDlyHMSM>
            OSFlagPost(event_flags, LED_EVENT, OS_FLAG_CLR, &err); // Manually clear the flag
 8001aba:	4b08      	ldr	r3, [pc, #32]	@ (8001adc <TaskLED+0x10c>)
 8001abc:	6818      	ldr	r0, [r3, #0]
 8001abe:	f107 030f 	add.w	r3, r7, #15
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	2101      	movs	r1, #1
 8001ac6:	f006 f985 	bl	8007dd4 <OSFlagPost>
            printf("LED Clear flag\r\n");
 8001aca:	480e      	ldr	r0, [pc, #56]	@ (8001b04 <TaskLED+0x134>)
 8001acc:	f008 f9da 	bl	8009e84 <puts>
        flags = OSFlagPend(event_flags, LED_EVENT, OS_FLAG_WAIT_SET_ALL + OS_FLAG_CONSUME, 0, &err);
 8001ad0:	e78f      	b.n	80019f2 <TaskLED+0x22>
 8001ad2:	bf00      	nop
 8001ad4:	0800c368 	.word	0x0800c368
 8001ad8:	0800c370 	.word	0x0800c370
 8001adc:	20005324 	.word	0x20005324
 8001ae0:	0800c37c 	.word	0x0800c37c
 8001ae4:	0800c390 	.word	0x0800c390
 8001ae8:	20005320 	.word	0x20005320
 8001aec:	0800c3ac 	.word	0x0800c3ac
 8001af0:	0800c3c8 	.word	0x0800c3c8
 8001af4:	0800c3e0 	.word	0x0800c3e0
 8001af8:	0800c3f4 	.word	0x0800c3f4
 8001afc:	0800c234 	.word	0x0800c234
 8001b00:	0800c404 	.word	0x0800c404
 8001b04:	0800c41c 	.word	0x0800c41c

08001b08 <TaskADC>:
        }
    }
}

/* ADC_Read Task -------------------------------------------------------------------*/
void TaskADC(void *pdata) {
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b08c      	sub	sp, #48	@ 0x30
 8001b0c:	af02      	add	r7, sp, #8
 8001b0e:	6078      	str	r0, [r7, #4]
    OS_FLAGS flags;
    float temp;
    PDU pdu_tx;
    PDU *pdu_rx;
    INT8U err;
    printf("Task ADC\r\n");
 8001b10:	486b      	ldr	r0, [pc, #428]	@ (8001cc0 <TaskADC+0x1b8>)
 8001b12:	f008 f9b7 	bl	8009e84 <puts>

    while (1) {
        // Wait for ADC_EVENT
        flags = OSFlagPend(event_flags, ADC_EVENT, OS_FLAG_WAIT_SET_ALL, 0, &err);
 8001b16:	4b6b      	ldr	r3, [pc, #428]	@ (8001cc4 <TaskADC+0x1bc>)
 8001b18:	6818      	ldr	r0, [r3, #0]
 8001b1a:	f107 030f 	add.w	r3, r7, #15
 8001b1e:	9300      	str	r3, [sp, #0]
 8001b20:	2300      	movs	r3, #0
 8001b22:	2202      	movs	r2, #2
 8001b24:	2102      	movs	r1, #2
 8001b26:	f005 ffc5 	bl	8007ab4 <OSFlagPend>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	84fb      	strh	r3, [r7, #38]	@ 0x26
        printf("Pend happened ADC\r\n");
 8001b2e:	4866      	ldr	r0, [pc, #408]	@ (8001cc8 <TaskADC+0x1c0>)
 8001b30:	f008 f9a8 	bl	8009e84 <puts>
        if (err != OS_ERR_NONE) {
 8001b34:	7bfb      	ldrb	r3, [r7, #15]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d001      	beq.n	8001b3e <TaskADC+0x36>
			Error_Handler();
 8001b3a:	f000 fa45 	bl	8001fc8 <Error_Handler>
		}

        if (flags & ADC_EVENT) {
 8001b3e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001b40:	f003 0302 	and.w	r3, r3, #2
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d0e6      	beq.n	8001b16 <TaskADC+0xe>
        	printf("ADC flag condition TRUE\r\n");
 8001b48:	4860      	ldr	r0, [pc, #384]	@ (8001ccc <TaskADC+0x1c4>)
 8001b4a:	f008 f99b 	bl	8009e84 <puts>
            // Read ADC Value
        	HAL_ADCEx_Calibration_Start(&hadc3, ADC_SINGLE_ENDED);
 8001b4e:	217f      	movs	r1, #127	@ 0x7f
 8001b50:	485f      	ldr	r0, [pc, #380]	@ (8001cd0 <TaskADC+0x1c8>)
 8001b52:	f002 f803 	bl	8003b5c <HAL_ADCEx_Calibration_Start>
            HAL_ADC_Start(&hadc3);
 8001b56:	485e      	ldr	r0, [pc, #376]	@ (8001cd0 <TaskADC+0x1c8>)
 8001b58:	f001 f86c 	bl	8002c34 <HAL_ADC_Start>
            HAL_ADC_PollForConversion(&hadc3, HAL_MAX_DELAY);
 8001b5c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b60:	485b      	ldr	r0, [pc, #364]	@ (8001cd0 <TaskADC+0x1c8>)
 8001b62:	f001 f955 	bl	8002e10 <HAL_ADC_PollForConversion>
            adc_value = HAL_ADC_GetValue(&hadc3);
 8001b66:	485a      	ldr	r0, [pc, #360]	@ (8001cd0 <TaskADC+0x1c8>)
 8001b68:	f001 fa2a 	bl	8002fc0 <HAL_ADC_GetValue>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	84bb      	strh	r3, [r7, #36]	@ 0x24
            printf("ADC value measured: %d\r\n", adc_value);
 8001b70:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001b72:	4619      	mov	r1, r3
 8001b74:	4857      	ldr	r0, [pc, #348]	@ (8001cd4 <TaskADC+0x1cc>)
 8001b76:	f008 f91d 	bl	8009db4 <iprintf>
            HAL_ADC_Stop(&hadc3);
 8001b7a:	4855      	ldr	r0, [pc, #340]	@ (8001cd0 <TaskADC+0x1c8>)
 8001b7c:	f001 f914 	bl	8002da8 <HAL_ADC_Stop>

            temp = ((float)adc_value) / 4095 * 3300;
 8001b80:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001b82:	ee07 3a90 	vmov	s15, r3
 8001b86:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001b8a:	eddf 6a53 	vldr	s13, [pc, #332]	@ 8001cd8 <TaskADC+0x1d0>
 8001b8e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b92:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 8001cdc <TaskADC+0x1d4>
 8001b96:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b9a:	edc7 7a06 	vstr	s15, [r7, #24]
            temp = ((temp - 760.0) / 2.5) + 25;
 8001b9e:	69bb      	ldr	r3, [r7, #24]
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f7fe fd81 	bl	80006a8 <__aeabi_f2d>
 8001ba6:	f04f 0200 	mov.w	r2, #0
 8001baa:	4b4d      	ldr	r3, [pc, #308]	@ (8001ce0 <TaskADC+0x1d8>)
 8001bac:	f7fe fc1c 	bl	80003e8 <__aeabi_dsub>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	460b      	mov	r3, r1
 8001bb4:	4610      	mov	r0, r2
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	f04f 0200 	mov.w	r2, #0
 8001bbc:	4b49      	ldr	r3, [pc, #292]	@ (8001ce4 <TaskADC+0x1dc>)
 8001bbe:	f7fe fef5 	bl	80009ac <__aeabi_ddiv>
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	460b      	mov	r3, r1
 8001bc6:	4610      	mov	r0, r2
 8001bc8:	4619      	mov	r1, r3
 8001bca:	f04f 0200 	mov.w	r2, #0
 8001bce:	4b46      	ldr	r3, [pc, #280]	@ (8001ce8 <TaskADC+0x1e0>)
 8001bd0:	f7fe fc0c 	bl	80003ec <__adddf3>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	460b      	mov	r3, r1
 8001bd8:	4610      	mov	r0, r2
 8001bda:	4619      	mov	r1, r3
 8001bdc:	f7ff f894 	bl	8000d08 <__aeabi_d2f>
 8001be0:	4603      	mov	r3, r0
 8001be2:	61bb      	str	r3, [r7, #24]
            printf("temp value measured = %f\r\n", temp);
 8001be4:	69bb      	ldr	r3, [r7, #24]
 8001be6:	4618      	mov	r0, r3
 8001be8:	f7fe fd5e 	bl	80006a8 <__aeabi_f2d>
 8001bec:	4602      	mov	r2, r0
 8001bee:	460b      	mov	r3, r1
 8001bf0:	483e      	ldr	r0, [pc, #248]	@ (8001cec <TaskADC+0x1e4>)
 8001bf2:	f008 f8df 	bl	8009db4 <iprintf>

            //Get the PDU from Queue
            pdu_rx = (PDU *)OSQPend(tx_queue, 0, &err);
 8001bf6:	4b3e      	ldr	r3, [pc, #248]	@ (8001cf0 <TaskADC+0x1e8>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f107 020f 	add.w	r2, r7, #15
 8001bfe:	2100      	movs	r1, #0
 8001c00:	4618      	mov	r0, r3
 8001c02:	f006 fbbf 	bl	8008384 <OSQPend>
 8001c06:	6238      	str	r0, [r7, #32]
			if (err != OS_ERR_NONE) {
 8001c08:	7bfb      	ldrb	r3, [r7, #15]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d004      	beq.n	8001c18 <TaskADC+0x110>
				printf("ADC receive queue error\r\n");
 8001c0e:	4839      	ldr	r0, [pc, #228]	@ (8001cf4 <TaskADC+0x1ec>)
 8001c10:	f008 f938 	bl	8009e84 <puts>
				Error_Handler();
 8001c14:	f000 f9d8 	bl	8001fc8 <Error_Handler>
			}
			printf("ADC received the queue\r\n");
 8001c18:	4837      	ldr	r0, [pc, #220]	@ (8001cf8 <TaskADC+0x1f0>)
 8001c1a:	f008 f933 	bl	8009e84 <puts>

			// Extract frequency from PDU payload
			memcpy(&offset, &pdu_rx->data[1], sizeof(offset));
 8001c1e:	6a3b      	ldr	r3, [r7, #32]
 8001c20:	3303      	adds	r3, #3
 8001c22:	881b      	ldrh	r3, [r3, #0]
 8001c24:	b29b      	uxth	r3, r3
 8001c26:	83fb      	strh	r3, [r7, #30]
			printf("Offset = %d\r\n", offset);
 8001c28:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	4833      	ldr	r0, [pc, #204]	@ (8001cfc <TaskADC+0x1f4>)
 8001c30:	f008 f8c0 	bl	8009db4 <iprintf>
			temp = temp + offset;
 8001c34:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001c38:	ee07 3a90 	vmov	s15, r3
 8001c3c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c40:	edd7 7a06 	vldr	s15, [r7, #24]
 8001c44:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c48:	edc7 7a06 	vstr	s15, [r7, #24]
			printf("temp + offset = %f\r\n", temp);
 8001c4c:	69bb      	ldr	r3, [r7, #24]
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f7fe fd2a 	bl	80006a8 <__aeabi_f2d>
 8001c54:	4602      	mov	r2, r0
 8001c56:	460b      	mov	r3, r1
 8001c58:	4829      	ldr	r0, [pc, #164]	@ (8001d00 <TaskADC+0x1f8>)
 8001c5a:	f008 f8ab 	bl	8009db4 <iprintf>
			// Prepare PDU with ADC Value
            pdu_tx.header = PDU_HEADER;
 8001c5e:	235a      	movs	r3, #90	@ 0x5a
 8001c60:	743b      	strb	r3, [r7, #16]
            pdu_tx.sid = SID_POS_RESPONSE;
 8001c62:	23aa      	movs	r3, #170	@ 0xaa
 8001c64:	747b      	strb	r3, [r7, #17]
            pdu_tx.data[0] = 2;  // Payload Type 2 (send ADC value)
 8001c66:	2302      	movs	r3, #2
 8001c68:	74bb      	strb	r3, [r7, #18]

            memcpy(&pdu_tx.data[1], &temp, sizeof(temp));  // Store temp in payload
 8001c6a:	69bb      	ldr	r3, [r7, #24]
 8001c6c:	f8c7 3013 	str.w	r3, [r7, #19]
            printf("ADC task make PDU\r\n");
 8001c70:	4824      	ldr	r0, [pc, #144]	@ (8001d04 <TaskADC+0x1fc>)
 8001c72:	f008 f907 	bl	8009e84 <puts>

            // Send PDU
            err = OSQPost(tx_queue, (void*)&pdu_tx); // Post to transmit queue
 8001c76:	4b1e      	ldr	r3, [pc, #120]	@ (8001cf0 <TaskADC+0x1e8>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f107 0210 	add.w	r2, r7, #16
 8001c7e:	4611      	mov	r1, r2
 8001c80:	4618      	mov	r0, r3
 8001c82:	f006 fc3f 	bl	8008504 <OSQPost>
 8001c86:	4603      	mov	r3, r0
 8001c88:	73fb      	strb	r3, [r7, #15]
            if (err != OS_ERR_NONE) {
 8001c8a:	7bfb      	ldrb	r3, [r7, #15]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d004      	beq.n	8001c9a <TaskADC+0x192>
            	printf("Error! ADC task sends Queue\r\n");
 8001c90:	481d      	ldr	r0, [pc, #116]	@ (8001d08 <TaskADC+0x200>)
 8001c92:	f008 f8f7 	bl	8009e84 <puts>
				Error_Handler();
 8001c96:	f000 f997 	bl	8001fc8 <Error_Handler>
			}
            printf("ADC task sends Queue\r\n");
 8001c9a:	481c      	ldr	r0, [pc, #112]	@ (8001d0c <TaskADC+0x204>)
 8001c9c:	f008 f8f2 	bl	8009e84 <puts>
            OSFlagPost(event_flags, ADC_EVENT, OS_FLAG_CLR, &err); // Manually clear the flag
 8001ca0:	4b08      	ldr	r3, [pc, #32]	@ (8001cc4 <TaskADC+0x1bc>)
 8001ca2:	6818      	ldr	r0, [r3, #0]
 8001ca4:	f107 030f 	add.w	r3, r7, #15
 8001ca8:	2200      	movs	r2, #0
 8001caa:	2102      	movs	r1, #2
 8001cac:	f006 f892 	bl	8007dd4 <OSFlagPost>
            OSTimeDlyHMSM(0, 0, 5, 0); // Delay for 1 second
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	2205      	movs	r2, #5
 8001cb4:	2100      	movs	r1, #0
 8001cb6:	2000      	movs	r0, #0
 8001cb8:	f007 f902 	bl	8008ec0 <OSTimeDlyHMSM>
        flags = OSFlagPend(event_flags, ADC_EVENT, OS_FLAG_WAIT_SET_ALL, 0, &err);
 8001cbc:	e72b      	b.n	8001b16 <TaskADC+0xe>
 8001cbe:	bf00      	nop
 8001cc0:	0800c42c 	.word	0x0800c42c
 8001cc4:	20005324 	.word	0x20005324
 8001cc8:	0800c438 	.word	0x0800c438
 8001ccc:	0800c44c 	.word	0x0800c44c
 8001cd0:	200001f4 	.word	0x200001f4
 8001cd4:	0800c468 	.word	0x0800c468
 8001cd8:	457ff000 	.word	0x457ff000
 8001cdc:	454e4000 	.word	0x454e4000
 8001ce0:	4087c000 	.word	0x4087c000
 8001ce4:	40040000 	.word	0x40040000
 8001ce8:	40390000 	.word	0x40390000
 8001cec:	0800c484 	.word	0x0800c484
 8001cf0:	20005320 	.word	0x20005320
 8001cf4:	0800c4a0 	.word	0x0800c4a0
 8001cf8:	0800c4bc 	.word	0x0800c4bc
 8001cfc:	0800c4d4 	.word	0x0800c4d4
 8001d00:	0800c4e4 	.word	0x0800c4e4
 8001d04:	0800c4fc 	.word	0x0800c4fc
 8001d08:	0800c510 	.word	0x0800c510
 8001d0c:	0800c530 	.word	0x0800c530

08001d10 <HAL_GPIO_EXTI_Callback>:
        }
    }
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b084      	sub	sp, #16
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	4603      	mov	r3, r0
 8001d18:	80fb      	strh	r3, [r7, #6]
    OS_ERR err;
    if(GPIO_Pin == GPIO_PIN_13)
 8001d1a:	88fb      	ldrh	r3, [r7, #6]
 8001d1c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001d20:	d107      	bne.n	8001d32 <HAL_GPIO_EXTI_Callback+0x22>
    	OSFlagPost(event_flags, BUTTON_EVENT, OS_FLAG_SET, &err);
 8001d22:	4b06      	ldr	r3, [pc, #24]	@ (8001d3c <HAL_GPIO_EXTI_Callback+0x2c>)
 8001d24:	6818      	ldr	r0, [r3, #0]
 8001d26:	f107 030f 	add.w	r3, r7, #15
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	2104      	movs	r1, #4
 8001d2e:	f006 f851 	bl	8007dd4 <OSFlagPost>
}
 8001d32:	bf00      	nop
 8001d34:	3710      	adds	r7, #16
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	20005324 	.word	0x20005324

08001d40 <SystemClock_Config>:

void SystemClock_Config(void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b096      	sub	sp, #88	@ 0x58
 8001d44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d46:	f107 0314 	add.w	r3, r7, #20
 8001d4a:	2244      	movs	r2, #68	@ 0x44
 8001d4c:	2100      	movs	r1, #0
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f008 fa2c 	bl	800a1ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d54:	463b      	mov	r3, r7
 8001d56:	2200      	movs	r2, #0
 8001d58:	601a      	str	r2, [r3, #0]
 8001d5a:	605a      	str	r2, [r3, #4]
 8001d5c:	609a      	str	r2, [r3, #8]
 8001d5e:	60da      	str	r2, [r3, #12]
 8001d60:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001d62:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001d66:	f002 fa6d 	bl	8004244 <HAL_PWREx_ControlVoltageScaling>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d001      	beq.n	8001d74 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001d70:	f000 f92a 	bl	8001fc8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001d74:	2302      	movs	r3, #2
 8001d76:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d78:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001d7c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001d7e:	2310      	movs	r3, #16
 8001d80:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d82:	2302      	movs	r3, #2
 8001d84:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001d86:	2302      	movs	r3, #2
 8001d88:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 9;
 8001d8e:	2309      	movs	r3, #9
 8001d90:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001d92:	2307      	movs	r3, #7
 8001d94:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001d96:	2302      	movs	r3, #2
 8001d98:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001d9a:	2302      	movs	r3, #2
 8001d9c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d9e:	f107 0314 	add.w	r3, r7, #20
 8001da2:	4618      	mov	r0, r3
 8001da4:	f002 faa4 	bl	80042f0 <HAL_RCC_OscConfig>
 8001da8:	4603      	mov	r3, r0
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d001      	beq.n	8001db2 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001dae:	f000 f90b 	bl	8001fc8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001db2:	230f      	movs	r3, #15
 8001db4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001db6:	2303      	movs	r3, #3
 8001db8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001dc6:	463b      	mov	r3, r7
 8001dc8:	2104      	movs	r1, #4
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f002 fe6c 	bl	8004aa8 <HAL_RCC_ClockConfig>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d001      	beq.n	8001dda <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001dd6:	f000 f8f7 	bl	8001fc8 <Error_Handler>
  }
}
 8001dda:	bf00      	nop
 8001ddc:	3758      	adds	r7, #88	@ 0x58
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
	...

08001de4 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b086      	sub	sp, #24
 8001de8:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8001dea:	463b      	mov	r3, r7
 8001dec:	2200      	movs	r2, #0
 8001dee:	601a      	str	r2, [r3, #0]
 8001df0:	605a      	str	r2, [r3, #4]
 8001df2:	609a      	str	r2, [r3, #8]
 8001df4:	60da      	str	r2, [r3, #12]
 8001df6:	611a      	str	r2, [r3, #16]
 8001df8:	615a      	str	r2, [r3, #20]
  hadc3.Instance = ADC3;
 8001dfa:	4b24      	ldr	r3, [pc, #144]	@ (8001e8c <MX_ADC3_Init+0xa8>)
 8001dfc:	4a24      	ldr	r2, [pc, #144]	@ (8001e90 <MX_ADC3_Init+0xac>)
 8001dfe:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8001e00:	4b22      	ldr	r3, [pc, #136]	@ (8001e8c <MX_ADC3_Init+0xa8>)
 8001e02:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001e06:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001e08:	4b20      	ldr	r3, [pc, #128]	@ (8001e8c <MX_ADC3_Init+0xa8>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001e0e:	4b1f      	ldr	r3, [pc, #124]	@ (8001e8c <MX_ADC3_Init+0xa8>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001e14:	4b1d      	ldr	r3, [pc, #116]	@ (8001e8c <MX_ADC3_Init+0xa8>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001e1a:	4b1c      	ldr	r3, [pc, #112]	@ (8001e8c <MX_ADC3_Init+0xa8>)
 8001e1c:	2204      	movs	r2, #4
 8001e1e:	615a      	str	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8001e20:	4b1a      	ldr	r3, [pc, #104]	@ (8001e8c <MX_ADC3_Init+0xa8>)
 8001e22:	2201      	movs	r2, #1
 8001e24:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 8001e26:	4b19      	ldr	r3, [pc, #100]	@ (8001e8c <MX_ADC3_Init+0xa8>)
 8001e28:	2201      	movs	r2, #1
 8001e2a:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001e2c:	4b17      	ldr	r3, [pc, #92]	@ (8001e8c <MX_ADC3_Init+0xa8>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001e34:	4b15      	ldr	r3, [pc, #84]	@ (8001e8c <MX_ADC3_Init+0xa8>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001e3a:	4b14      	ldr	r3, [pc, #80]	@ (8001e8c <MX_ADC3_Init+0xa8>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8001e40:	4b12      	ldr	r3, [pc, #72]	@ (8001e8c <MX_ADC3_Init+0xa8>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001e48:	4810      	ldr	r0, [pc, #64]	@ (8001e8c <MX_ADC3_Init+0xa8>)
 8001e4a:	f000 fda3 	bl	8002994 <HAL_ADC_Init>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d001      	beq.n	8001e58 <MX_ADC3_Init+0x74>
  {
    Error_Handler();
 8001e54:	f000 f8b8 	bl	8001fc8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001e58:	4b0e      	ldr	r3, [pc, #56]	@ (8001e94 <MX_ADC3_Init+0xb0>)
 8001e5a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001e5c:	2306      	movs	r3, #6
 8001e5e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001e60:	2300      	movs	r3, #0
 8001e62:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001e64:	237f      	movs	r3, #127	@ 0x7f
 8001e66:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001e68:	2304      	movs	r3, #4
 8001e6a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001e70:	463b      	mov	r3, r7
 8001e72:	4619      	mov	r1, r3
 8001e74:	4805      	ldr	r0, [pc, #20]	@ (8001e8c <MX_ADC3_Init+0xa8>)
 8001e76:	f001 f8b1 	bl	8002fdc <HAL_ADC_ConfigChannel>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d001      	beq.n	8001e84 <MX_ADC3_Init+0xa0>
  {
    Error_Handler();
 8001e80:	f000 f8a2 	bl	8001fc8 <Error_Handler>
  }
}
 8001e84:	bf00      	nop
 8001e86:	3718      	adds	r7, #24
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	200001f4 	.word	0x200001f4
 8001e90:	50040200 	.word	0x50040200
 8001e94:	c7520000 	.word	0xc7520000

08001e98 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	af00      	add	r7, sp, #0
  huart2.Instance = USART2;
 8001e9c:	4b11      	ldr	r3, [pc, #68]	@ (8001ee4 <MX_USART2_UART_Init+0x4c>)
 8001e9e:	4a12      	ldr	r2, [pc, #72]	@ (8001ee8 <MX_USART2_UART_Init+0x50>)
 8001ea0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001ea2:	4b10      	ldr	r3, [pc, #64]	@ (8001ee4 <MX_USART2_UART_Init+0x4c>)
 8001ea4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001ea8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001eaa:	4b0e      	ldr	r3, [pc, #56]	@ (8001ee4 <MX_USART2_UART_Init+0x4c>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001eb0:	4b0c      	ldr	r3, [pc, #48]	@ (8001ee4 <MX_USART2_UART_Init+0x4c>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001eb6:	4b0b      	ldr	r3, [pc, #44]	@ (8001ee4 <MX_USART2_UART_Init+0x4c>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ebc:	4b09      	ldr	r3, [pc, #36]	@ (8001ee4 <MX_USART2_UART_Init+0x4c>)
 8001ebe:	220c      	movs	r2, #12
 8001ec0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ec2:	4b08      	ldr	r3, [pc, #32]	@ (8001ee4 <MX_USART2_UART_Init+0x4c>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ec8:	4b06      	ldr	r3, [pc, #24]	@ (8001ee4 <MX_USART2_UART_Init+0x4c>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001ece:	4805      	ldr	r0, [pc, #20]	@ (8001ee4 <MX_USART2_UART_Init+0x4c>)
 8001ed0:	f003 fcca 	bl	8005868 <HAL_UART_Init>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d001      	beq.n	8001ede <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001eda:	f000 f875 	bl	8001fc8 <Error_Handler>
  }
}
 8001ede:	bf00      	nop
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	20000258 	.word	0x20000258
 8001ee8:	40004400 	.word	0x40004400

08001eec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b08a      	sub	sp, #40	@ 0x28
 8001ef0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ef2:	f107 0314 	add.w	r3, r7, #20
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	601a      	str	r2, [r3, #0]
 8001efa:	605a      	str	r2, [r3, #4]
 8001efc:	609a      	str	r2, [r3, #8]
 8001efe:	60da      	str	r2, [r3, #12]
 8001f00:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f02:	4b2f      	ldr	r3, [pc, #188]	@ (8001fc0 <MX_GPIO_Init+0xd4>)
 8001f04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f06:	4a2e      	ldr	r2, [pc, #184]	@ (8001fc0 <MX_GPIO_Init+0xd4>)
 8001f08:	f043 0304 	orr.w	r3, r3, #4
 8001f0c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f0e:	4b2c      	ldr	r3, [pc, #176]	@ (8001fc0 <MX_GPIO_Init+0xd4>)
 8001f10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f12:	f003 0304 	and.w	r3, r3, #4
 8001f16:	613b      	str	r3, [r7, #16]
 8001f18:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f1a:	4b29      	ldr	r3, [pc, #164]	@ (8001fc0 <MX_GPIO_Init+0xd4>)
 8001f1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f1e:	4a28      	ldr	r2, [pc, #160]	@ (8001fc0 <MX_GPIO_Init+0xd4>)
 8001f20:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001f24:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f26:	4b26      	ldr	r3, [pc, #152]	@ (8001fc0 <MX_GPIO_Init+0xd4>)
 8001f28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f2e:	60fb      	str	r3, [r7, #12]
 8001f30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f32:	4b23      	ldr	r3, [pc, #140]	@ (8001fc0 <MX_GPIO_Init+0xd4>)
 8001f34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f36:	4a22      	ldr	r2, [pc, #136]	@ (8001fc0 <MX_GPIO_Init+0xd4>)
 8001f38:	f043 0301 	orr.w	r3, r3, #1
 8001f3c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f3e:	4b20      	ldr	r3, [pc, #128]	@ (8001fc0 <MX_GPIO_Init+0xd4>)
 8001f40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f42:	f003 0301 	and.w	r3, r3, #1
 8001f46:	60bb      	str	r3, [r7, #8]
 8001f48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f4a:	4b1d      	ldr	r3, [pc, #116]	@ (8001fc0 <MX_GPIO_Init+0xd4>)
 8001f4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f4e:	4a1c      	ldr	r2, [pc, #112]	@ (8001fc0 <MX_GPIO_Init+0xd4>)
 8001f50:	f043 0302 	orr.w	r3, r3, #2
 8001f54:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f56:	4b1a      	ldr	r3, [pc, #104]	@ (8001fc0 <MX_GPIO_Init+0xd4>)
 8001f58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f5a:	f003 0302 	and.w	r3, r3, #2
 8001f5e:	607b      	str	r3, [r7, #4]
 8001f60:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001f62:	2200      	movs	r2, #0
 8001f64:	2120      	movs	r1, #32
 8001f66:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f6a:	f002 f913 	bl	8004194 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001f6e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001f72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001f74:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001f78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001f7e:	f107 0314 	add.w	r3, r7, #20
 8001f82:	4619      	mov	r1, r3
 8001f84:	480f      	ldr	r0, [pc, #60]	@ (8001fc4 <MX_GPIO_Init+0xd8>)
 8001f86:	f001 ff5b 	bl	8003e40 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001f8a:	2320      	movs	r3, #32
 8001f8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f92:	2300      	movs	r3, #0
 8001f94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f96:	2300      	movs	r3, #0
 8001f98:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001f9a:	f107 0314 	add.w	r3, r7, #20
 8001f9e:	4619      	mov	r1, r3
 8001fa0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001fa4:	f001 ff4c 	bl	8003e40 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001fa8:	2200      	movs	r2, #0
 8001faa:	2100      	movs	r1, #0
 8001fac:	2028      	movs	r0, #40	@ 0x28
 8001fae:	f001 ff10 	bl	8003dd2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001fb2:	2028      	movs	r0, #40	@ 0x28
 8001fb4:	f001 ff29 	bl	8003e0a <HAL_NVIC_EnableIRQ>
}
 8001fb8:	bf00      	nop
 8001fba:	3728      	adds	r7, #40	@ 0x28
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}
 8001fc0:	40021000 	.word	0x40021000
 8001fc4:	48000800 	.word	0x48000800

08001fc8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001fcc:	b672      	cpsid	i
}
 8001fce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001fd0:	bf00      	nop
 8001fd2:	e7fd      	b.n	8001fd0 <Error_Handler+0x8>

08001fd4 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b082      	sub	sp, #8
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8001fdc:	4a07      	ldr	r2, [pc, #28]	@ (8001ffc <RetargetInit+0x28>)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8001fe2:	4b07      	ldr	r3, [pc, #28]	@ (8002000 <RetargetInit+0x2c>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	6898      	ldr	r0, [r3, #8]
 8001fe8:	2300      	movs	r3, #0
 8001fea:	2202      	movs	r2, #2
 8001fec:	2100      	movs	r1, #0
 8001fee:	f007 ff51 	bl	8009e94 <setvbuf>
}
 8001ff2:	bf00      	nop
 8001ff4:	3708      	adds	r7, #8
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	2000532c 	.word	0x2000532c
 8002000:	2000001c 	.word	0x2000001c

08002004 <_isatty>:

int _isatty(int fd) {
 8002004:	b580      	push	{r7, lr}
 8002006:	b082      	sub	sp, #8
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2b00      	cmp	r3, #0
 8002010:	db04      	blt.n	800201c <_isatty+0x18>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2b02      	cmp	r3, #2
 8002016:	dc01      	bgt.n	800201c <_isatty+0x18>
    return 1;
 8002018:	2301      	movs	r3, #1
 800201a:	e005      	b.n	8002028 <_isatty+0x24>

  errno = EBADF;
 800201c:	f008 f918 	bl	800a250 <__errno>
 8002020:	4603      	mov	r3, r0
 8002022:	2209      	movs	r2, #9
 8002024:	601a      	str	r2, [r3, #0]
  return 0;
 8002026:	2300      	movs	r3, #0
}
 8002028:	4618      	mov	r0, r3
 800202a:	3708      	adds	r7, #8
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}

08002030 <_write>:

int _write(int fd, char* ptr, int len) {
 8002030:	b580      	push	{r7, lr}
 8002032:	b086      	sub	sp, #24
 8002034:	af00      	add	r7, sp, #0
 8002036:	60f8      	str	r0, [r7, #12]
 8002038:	60b9      	str	r1, [r7, #8]
 800203a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	2b01      	cmp	r3, #1
 8002040:	d002      	beq.n	8002048 <_write+0x18>
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	2b02      	cmp	r3, #2
 8002046:	d111      	bne.n	800206c <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8002048:	4b0e      	ldr	r3, [pc, #56]	@ (8002084 <_write+0x54>)
 800204a:	6818      	ldr	r0, [r3, #0]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	b29a      	uxth	r2, r3
 8002050:	f04f 33ff 	mov.w	r3, #4294967295
 8002054:	68b9      	ldr	r1, [r7, #8]
 8002056:	f003 fc55 	bl	8005904 <HAL_UART_Transmit>
 800205a:	4603      	mov	r3, r0
 800205c:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 800205e:	7dfb      	ldrb	r3, [r7, #23]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d101      	bne.n	8002068 <_write+0x38>
      return len;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	e008      	b.n	800207a <_write+0x4a>
    else
      return EIO;
 8002068:	2305      	movs	r3, #5
 800206a:	e006      	b.n	800207a <_write+0x4a>
  }
  errno = EBADF;
 800206c:	f008 f8f0 	bl	800a250 <__errno>
 8002070:	4603      	mov	r3, r0
 8002072:	2209      	movs	r2, #9
 8002074:	601a      	str	r2, [r3, #0]
  return -1;
 8002076:	f04f 33ff 	mov.w	r3, #4294967295
}
 800207a:	4618      	mov	r0, r3
 800207c:	3718      	adds	r7, #24
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	2000532c 	.word	0x2000532c

08002088 <_close>:

int _close(int fd) {
 8002088:	b580      	push	{r7, lr}
 800208a:	b082      	sub	sp, #8
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2b00      	cmp	r3, #0
 8002094:	db04      	blt.n	80020a0 <_close+0x18>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2b02      	cmp	r3, #2
 800209a:	dc01      	bgt.n	80020a0 <_close+0x18>
    return 0;
 800209c:	2300      	movs	r3, #0
 800209e:	e006      	b.n	80020ae <_close+0x26>

  errno = EBADF;
 80020a0:	f008 f8d6 	bl	800a250 <__errno>
 80020a4:	4603      	mov	r3, r0
 80020a6:	2209      	movs	r2, #9
 80020a8:	601a      	str	r2, [r3, #0]
  return -1;
 80020aa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3708      	adds	r7, #8
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
	...

080020b8 <_read>:

int _read(int fd, char* ptr, int len) {
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b086      	sub	sp, #24
 80020bc:	af00      	add	r7, sp, #0
 80020be:	60f8      	str	r0, [r7, #12]
 80020c0:	60b9      	str	r1, [r7, #8]
 80020c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d110      	bne.n	80020ec <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 80020ca:	4b0e      	ldr	r3, [pc, #56]	@ (8002104 <_read+0x4c>)
 80020cc:	6818      	ldr	r0, [r3, #0]
 80020ce:	f04f 33ff 	mov.w	r3, #4294967295
 80020d2:	2201      	movs	r2, #1
 80020d4:	68b9      	ldr	r1, [r7, #8]
 80020d6:	f003 fc9e 	bl	8005a16 <HAL_UART_Receive>
 80020da:	4603      	mov	r3, r0
 80020dc:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 80020de:	7dfb      	ldrb	r3, [r7, #23]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d101      	bne.n	80020e8 <_read+0x30>
      return 1;
 80020e4:	2301      	movs	r3, #1
 80020e6:	e008      	b.n	80020fa <_read+0x42>
    else
      return EIO;
 80020e8:	2305      	movs	r3, #5
 80020ea:	e006      	b.n	80020fa <_read+0x42>
  }
  errno = EBADF;
 80020ec:	f008 f8b0 	bl	800a250 <__errno>
 80020f0:	4603      	mov	r3, r0
 80020f2:	2209      	movs	r2, #9
 80020f4:	601a      	str	r2, [r3, #0]
  return -1;
 80020f6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	3718      	adds	r7, #24
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	2000532c 	.word	0x2000532c

08002108 <_fstat>:

int _fstat(int fd, struct stat* st) {
 8002108:	b580      	push	{r7, lr}
 800210a:	b082      	sub	sp, #8
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
 8002110:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2b00      	cmp	r3, #0
 8002116:	db08      	blt.n	800212a <_fstat+0x22>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2b02      	cmp	r3, #2
 800211c:	dc05      	bgt.n	800212a <_fstat+0x22>
    st->st_mode = S_IFCHR;
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002124:	605a      	str	r2, [r3, #4]
    return 0;
 8002126:	2300      	movs	r3, #0
 8002128:	e005      	b.n	8002136 <_fstat+0x2e>
  }

  errno = EBADF;
 800212a:	f008 f891 	bl	800a250 <__errno>
 800212e:	4603      	mov	r3, r0
 8002130:	2209      	movs	r2, #9
 8002132:	601a      	str	r2, [r3, #0]
  return 0;
 8002134:	2300      	movs	r3, #0
}
 8002136:	4618      	mov	r0, r3
 8002138:	3708      	adds	r7, #8
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
	...

08002140 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002140:	b480      	push	{r7}
 8002142:	b083      	sub	sp, #12
 8002144:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002146:	4b0f      	ldr	r3, [pc, #60]	@ (8002184 <HAL_MspInit+0x44>)
 8002148:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800214a:	4a0e      	ldr	r2, [pc, #56]	@ (8002184 <HAL_MspInit+0x44>)
 800214c:	f043 0301 	orr.w	r3, r3, #1
 8002150:	6613      	str	r3, [r2, #96]	@ 0x60
 8002152:	4b0c      	ldr	r3, [pc, #48]	@ (8002184 <HAL_MspInit+0x44>)
 8002154:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002156:	f003 0301 	and.w	r3, r3, #1
 800215a:	607b      	str	r3, [r7, #4]
 800215c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800215e:	4b09      	ldr	r3, [pc, #36]	@ (8002184 <HAL_MspInit+0x44>)
 8002160:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002162:	4a08      	ldr	r2, [pc, #32]	@ (8002184 <HAL_MspInit+0x44>)
 8002164:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002168:	6593      	str	r3, [r2, #88]	@ 0x58
 800216a:	4b06      	ldr	r3, [pc, #24]	@ (8002184 <HAL_MspInit+0x44>)
 800216c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800216e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002172:	603b      	str	r3, [r7, #0]
 8002174:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002176:	bf00      	nop
 8002178:	370c      	adds	r7, #12
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr
 8002182:	bf00      	nop
 8002184:	40021000 	.word	0x40021000

08002188 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b0a6      	sub	sp, #152	@ 0x98
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002190:	f107 0310 	add.w	r3, r7, #16
 8002194:	2288      	movs	r2, #136	@ 0x88
 8002196:	2100      	movs	r1, #0
 8002198:	4618      	mov	r0, r3
 800219a:	f008 f807 	bl	800a1ac <memset>
  if(hadc->Instance==ADC3)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a19      	ldr	r2, [pc, #100]	@ (8002208 <HAL_ADC_MspInit+0x80>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d12b      	bne.n	8002200 <HAL_ADC_MspInit+0x78>

  /* USER CODE END ADC3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80021a8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80021ac:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80021ae:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80021b2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 80021b6:	2302      	movs	r3, #2
 80021b8:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80021ba:	2301      	movs	r3, #1
 80021bc:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80021be:	2308      	movs	r3, #8
 80021c0:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80021c2:	2307      	movs	r3, #7
 80021c4:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80021c6:	2302      	movs	r3, #2
 80021c8:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80021ca:	2302      	movs	r3, #2
 80021cc:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80021ce:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80021d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80021d4:	f107 0310 	add.w	r3, r7, #16
 80021d8:	4618      	mov	r0, r3
 80021da:	f002 fe89 	bl	8004ef0 <HAL_RCCEx_PeriphCLKConfig>
 80021de:	4603      	mov	r3, r0
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d001      	beq.n	80021e8 <HAL_ADC_MspInit+0x60>
    {
      Error_Handler();
 80021e4:	f7ff fef0 	bl	8001fc8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80021e8:	4b08      	ldr	r3, [pc, #32]	@ (800220c <HAL_ADC_MspInit+0x84>)
 80021ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021ec:	4a07      	ldr	r2, [pc, #28]	@ (800220c <HAL_ADC_MspInit+0x84>)
 80021ee:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80021f2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80021f4:	4b05      	ldr	r3, [pc, #20]	@ (800220c <HAL_ADC_MspInit+0x84>)
 80021f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021f8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80021fc:	60fb      	str	r3, [r7, #12]
 80021fe:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END ADC3_MspInit 1 */

  }

}
 8002200:	bf00      	nop
 8002202:	3798      	adds	r7, #152	@ 0x98
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}
 8002208:	50040200 	.word	0x50040200
 800220c:	40021000 	.word	0x40021000

08002210 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b0ac      	sub	sp, #176	@ 0xb0
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002218:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800221c:	2200      	movs	r2, #0
 800221e:	601a      	str	r2, [r3, #0]
 8002220:	605a      	str	r2, [r3, #4]
 8002222:	609a      	str	r2, [r3, #8]
 8002224:	60da      	str	r2, [r3, #12]
 8002226:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002228:	f107 0314 	add.w	r3, r7, #20
 800222c:	2288      	movs	r2, #136	@ 0x88
 800222e:	2100      	movs	r1, #0
 8002230:	4618      	mov	r0, r3
 8002232:	f007 ffbb 	bl	800a1ac <memset>
  if(huart->Instance==USART2)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a21      	ldr	r2, [pc, #132]	@ (80022c0 <HAL_UART_MspInit+0xb0>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d13b      	bne.n	80022b8 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002240:	2302      	movs	r3, #2
 8002242:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002244:	2300      	movs	r3, #0
 8002246:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002248:	f107 0314 	add.w	r3, r7, #20
 800224c:	4618      	mov	r0, r3
 800224e:	f002 fe4f 	bl	8004ef0 <HAL_RCCEx_PeriphCLKConfig>
 8002252:	4603      	mov	r3, r0
 8002254:	2b00      	cmp	r3, #0
 8002256:	d001      	beq.n	800225c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002258:	f7ff feb6 	bl	8001fc8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800225c:	4b19      	ldr	r3, [pc, #100]	@ (80022c4 <HAL_UART_MspInit+0xb4>)
 800225e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002260:	4a18      	ldr	r2, [pc, #96]	@ (80022c4 <HAL_UART_MspInit+0xb4>)
 8002262:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002266:	6593      	str	r3, [r2, #88]	@ 0x58
 8002268:	4b16      	ldr	r3, [pc, #88]	@ (80022c4 <HAL_UART_MspInit+0xb4>)
 800226a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800226c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002270:	613b      	str	r3, [r7, #16]
 8002272:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002274:	4b13      	ldr	r3, [pc, #76]	@ (80022c4 <HAL_UART_MspInit+0xb4>)
 8002276:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002278:	4a12      	ldr	r2, [pc, #72]	@ (80022c4 <HAL_UART_MspInit+0xb4>)
 800227a:	f043 0301 	orr.w	r3, r3, #1
 800227e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002280:	4b10      	ldr	r3, [pc, #64]	@ (80022c4 <HAL_UART_MspInit+0xb4>)
 8002282:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002284:	f003 0301 	and.w	r3, r3, #1
 8002288:	60fb      	str	r3, [r7, #12]
 800228a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800228c:	230c      	movs	r3, #12
 800228e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002292:	2302      	movs	r3, #2
 8002294:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002298:	2300      	movs	r3, #0
 800229a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800229e:	2303      	movs	r3, #3
 80022a0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80022a4:	2307      	movs	r3, #7
 80022a6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022aa:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80022ae:	4619      	mov	r1, r3
 80022b0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80022b4:	f001 fdc4 	bl	8003e40 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80022b8:	bf00      	nop
 80022ba:	37b0      	adds	r7, #176	@ 0xb0
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}
 80022c0:	40004400 	.word	0x40004400
 80022c4:	40021000 	.word	0x40021000

080022c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022c8:	b480      	push	{r7}
 80022ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80022cc:	bf00      	nop
 80022ce:	e7fd      	b.n	80022cc <NMI_Handler+0x4>

080022d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022d0:	b480      	push	{r7}
 80022d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022d4:	bf00      	nop
 80022d6:	e7fd      	b.n	80022d4 <HardFault_Handler+0x4>

080022d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022d8:	b480      	push	{r7}
 80022da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022dc:	bf00      	nop
 80022de:	e7fd      	b.n	80022dc <MemManage_Handler+0x4>

080022e0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022e0:	b480      	push	{r7}
 80022e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022e4:	bf00      	nop
 80022e6:	e7fd      	b.n	80022e4 <BusFault_Handler+0x4>

080022e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022e8:	b480      	push	{r7}
 80022ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022ec:	bf00      	nop
 80022ee:	e7fd      	b.n	80022ec <UsageFault_Handler+0x4>

080022f0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022f0:	b480      	push	{r7}
 80022f2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80022f4:	bf00      	nop
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr

080022fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022fe:	b480      	push	{r7}
 8002300:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002302:	bf00      	nop
 8002304:	46bd      	mov	sp, r7
 8002306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230a:	4770      	bx	lr

0800230c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002310:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002314:	f001 ff70 	bl	80041f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002318:	bf00      	nop
 800231a:	bd80      	pop	{r7, pc}

0800231c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800231c:	b480      	push	{r7}
 800231e:	af00      	add	r7, sp, #0
  return 1;
 8002320:	2301      	movs	r3, #1
}
 8002322:	4618      	mov	r0, r3
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr

0800232c <_kill>:

int _kill(int pid, int sig)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b082      	sub	sp, #8
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
 8002334:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002336:	f007 ff8b 	bl	800a250 <__errno>
 800233a:	4603      	mov	r3, r0
 800233c:	2216      	movs	r2, #22
 800233e:	601a      	str	r2, [r3, #0]
  return -1;
 8002340:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002344:	4618      	mov	r0, r3
 8002346:	3708      	adds	r7, #8
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}

0800234c <_exit>:

void _exit (int status)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b082      	sub	sp, #8
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002354:	f04f 31ff 	mov.w	r1, #4294967295
 8002358:	6878      	ldr	r0, [r7, #4]
 800235a:	f7ff ffe7 	bl	800232c <_kill>
  while (1) {}    /* Make sure we hang here */
 800235e:	bf00      	nop
 8002360:	e7fd      	b.n	800235e <_exit+0x12>

08002362 <_lseek>:
  (void)file;
  return 1;
}
*/
int _lseek(int file, int ptr, int dir)
{
 8002362:	b480      	push	{r7}
 8002364:	b085      	sub	sp, #20
 8002366:	af00      	add	r7, sp, #0
 8002368:	60f8      	str	r0, [r7, #12]
 800236a:	60b9      	str	r1, [r7, #8]
 800236c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800236e:	2300      	movs	r3, #0
}
 8002370:	4618      	mov	r0, r3
 8002372:	3714      	adds	r7, #20
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr

0800237c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b086      	sub	sp, #24
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002384:	4a14      	ldr	r2, [pc, #80]	@ (80023d8 <_sbrk+0x5c>)
 8002386:	4b15      	ldr	r3, [pc, #84]	@ (80023dc <_sbrk+0x60>)
 8002388:	1ad3      	subs	r3, r2, r3
 800238a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002390:	4b13      	ldr	r3, [pc, #76]	@ (80023e0 <_sbrk+0x64>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d102      	bne.n	800239e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002398:	4b11      	ldr	r3, [pc, #68]	@ (80023e0 <_sbrk+0x64>)
 800239a:	4a12      	ldr	r2, [pc, #72]	@ (80023e4 <_sbrk+0x68>)
 800239c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800239e:	4b10      	ldr	r3, [pc, #64]	@ (80023e0 <_sbrk+0x64>)
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	4413      	add	r3, r2
 80023a6:	693a      	ldr	r2, [r7, #16]
 80023a8:	429a      	cmp	r2, r3
 80023aa:	d207      	bcs.n	80023bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80023ac:	f007 ff50 	bl	800a250 <__errno>
 80023b0:	4603      	mov	r3, r0
 80023b2:	220c      	movs	r2, #12
 80023b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80023b6:	f04f 33ff 	mov.w	r3, #4294967295
 80023ba:	e009      	b.n	80023d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023bc:	4b08      	ldr	r3, [pc, #32]	@ (80023e0 <_sbrk+0x64>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023c2:	4b07      	ldr	r3, [pc, #28]	@ (80023e0 <_sbrk+0x64>)
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	4413      	add	r3, r2
 80023ca:	4a05      	ldr	r2, [pc, #20]	@ (80023e0 <_sbrk+0x64>)
 80023cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023ce:	68fb      	ldr	r3, [r7, #12]
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	3718      	adds	r7, #24
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	20018000 	.word	0x20018000
 80023dc:	00000400 	.word	0x00000400
 80023e0:	20005330 	.word	0x20005330
 80023e4:	20006cb8 	.word	0x20006cb8

080023e8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80023e8:	b480      	push	{r7}
 80023ea:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80023ec:	4b06      	ldr	r3, [pc, #24]	@ (8002408 <SystemInit+0x20>)
 80023ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023f2:	4a05      	ldr	r2, [pc, #20]	@ (8002408 <SystemInit+0x20>)
 80023f4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80023f8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80023fc:	bf00      	nop
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr
 8002406:	bf00      	nop
 8002408:	e000ed00 	.word	0xe000ed00

0800240c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800240c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002444 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002410:	f7ff ffea 	bl	80023e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002414:	480c      	ldr	r0, [pc, #48]	@ (8002448 <LoopForever+0x6>)
  ldr r1, =_edata
 8002416:	490d      	ldr	r1, [pc, #52]	@ (800244c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002418:	4a0d      	ldr	r2, [pc, #52]	@ (8002450 <LoopForever+0xe>)
  movs r3, #0
 800241a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800241c:	e002      	b.n	8002424 <LoopCopyDataInit>

0800241e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800241e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002420:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002422:	3304      	adds	r3, #4

08002424 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002424:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002426:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002428:	d3f9      	bcc.n	800241e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800242a:	4a0a      	ldr	r2, [pc, #40]	@ (8002454 <LoopForever+0x12>)
  ldr r4, =_ebss
 800242c:	4c0a      	ldr	r4, [pc, #40]	@ (8002458 <LoopForever+0x16>)
  movs r3, #0
 800242e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002430:	e001      	b.n	8002436 <LoopFillZerobss>

08002432 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002432:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002434:	3204      	adds	r2, #4

08002436 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002436:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002438:	d3fb      	bcc.n	8002432 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800243a:	f007 ff0f 	bl	800a25c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800243e:	f7fe fe2b 	bl	8001098 <main>

08002442 <LoopForever>:

LoopForever:
    b LoopForever
 8002442:	e7fe      	b.n	8002442 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002444:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002448:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800244c:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8002450:	0800caf8 	.word	0x0800caf8
  ldr r2, =_sbss
 8002454:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8002458:	20006cb4 	.word	0x20006cb4

0800245c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800245c:	e7fe      	b.n	800245c <ADC1_2_IRQHandler>
	...

08002460 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b082      	sub	sp, #8
 8002464:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002466:	2300      	movs	r3, #0
 8002468:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800246a:	4b0c      	ldr	r3, [pc, #48]	@ (800249c <HAL_Init+0x3c>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a0b      	ldr	r2, [pc, #44]	@ (800249c <HAL_Init+0x3c>)
 8002470:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002474:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002476:	2003      	movs	r0, #3
 8002478:	f001 fca0 	bl	8003dbc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800247c:	2000      	movs	r0, #0
 800247e:	f000 f80f 	bl	80024a0 <HAL_InitTick>
 8002482:	4603      	mov	r3, r0
 8002484:	2b00      	cmp	r3, #0
 8002486:	d002      	beq.n	800248e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	71fb      	strb	r3, [r7, #7]
 800248c:	e001      	b.n	8002492 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800248e:	f7ff fe57 	bl	8002140 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002492:	79fb      	ldrb	r3, [r7, #7]
}
 8002494:	4618      	mov	r0, r3
 8002496:	3708      	adds	r7, #8
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}
 800249c:	40022000 	.word	0x40022000

080024a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b084      	sub	sp, #16
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80024a8:	2300      	movs	r3, #0
 80024aa:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80024ac:	4b17      	ldr	r3, [pc, #92]	@ (800250c <HAL_InitTick+0x6c>)
 80024ae:	781b      	ldrb	r3, [r3, #0]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d023      	beq.n	80024fc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80024b4:	4b16      	ldr	r3, [pc, #88]	@ (8002510 <HAL_InitTick+0x70>)
 80024b6:	681a      	ldr	r2, [r3, #0]
 80024b8:	4b14      	ldr	r3, [pc, #80]	@ (800250c <HAL_InitTick+0x6c>)
 80024ba:	781b      	ldrb	r3, [r3, #0]
 80024bc:	4619      	mov	r1, r3
 80024be:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80024c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80024c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80024ca:	4618      	mov	r0, r3
 80024cc:	f001 fcab 	bl	8003e26 <HAL_SYSTICK_Config>
 80024d0:	4603      	mov	r3, r0
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d10f      	bne.n	80024f6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2b0f      	cmp	r3, #15
 80024da:	d809      	bhi.n	80024f0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024dc:	2200      	movs	r2, #0
 80024de:	6879      	ldr	r1, [r7, #4]
 80024e0:	f04f 30ff 	mov.w	r0, #4294967295
 80024e4:	f001 fc75 	bl	8003dd2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80024e8:	4a0a      	ldr	r2, [pc, #40]	@ (8002514 <HAL_InitTick+0x74>)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6013      	str	r3, [r2, #0]
 80024ee:	e007      	b.n	8002500 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80024f0:	2301      	movs	r3, #1
 80024f2:	73fb      	strb	r3, [r7, #15]
 80024f4:	e004      	b.n	8002500 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	73fb      	strb	r3, [r7, #15]
 80024fa:	e001      	b.n	8002500 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
 80024fe:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002500:	7bfb      	ldrb	r3, [r7, #15]
}
 8002502:	4618      	mov	r0, r3
 8002504:	3710      	adds	r7, #16
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	2000000c 	.word	0x2000000c
 8002510:	20000004 	.word	0x20000004
 8002514:	20000008 	.word	0x20000008

08002518 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002518:	b480      	push	{r7}
 800251a:	af00      	add	r7, sp, #0
  return uwTick;
 800251c:	4b03      	ldr	r3, [pc, #12]	@ (800252c <HAL_GetTick+0x14>)
 800251e:	681b      	ldr	r3, [r3, #0]
}
 8002520:	4618      	mov	r0, r3
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr
 800252a:	bf00      	nop
 800252c:	20005334 	.word	0x20005334

08002530 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002530:	b480      	push	{r7}
 8002532:	b083      	sub	sp, #12
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
 8002538:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	431a      	orrs	r2, r3
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	609a      	str	r2, [r3, #8]
}
 800254a:	bf00      	nop
 800254c:	370c      	adds	r7, #12
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr

08002556 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002556:	b480      	push	{r7}
 8002558:	b083      	sub	sp, #12
 800255a:	af00      	add	r7, sp, #0
 800255c:	6078      	str	r0, [r7, #4]
 800255e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	689b      	ldr	r3, [r3, #8]
 8002564:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	431a      	orrs	r2, r3
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	609a      	str	r2, [r3, #8]
}
 8002570:	bf00      	nop
 8002572:	370c      	adds	r7, #12
 8002574:	46bd      	mov	sp, r7
 8002576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257a:	4770      	bx	lr

0800257c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800257c:	b480      	push	{r7}
 800257e:	b083      	sub	sp, #12
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800258c:	4618      	mov	r0, r3
 800258e:	370c      	adds	r7, #12
 8002590:	46bd      	mov	sp, r7
 8002592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002596:	4770      	bx	lr

08002598 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002598:	b480      	push	{r7}
 800259a:	b087      	sub	sp, #28
 800259c:	af00      	add	r7, sp, #0
 800259e:	60f8      	str	r0, [r7, #12]
 80025a0:	60b9      	str	r1, [r7, #8]
 80025a2:	607a      	str	r2, [r7, #4]
 80025a4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	3360      	adds	r3, #96	@ 0x60
 80025aa:	461a      	mov	r2, r3
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	009b      	lsls	r3, r3, #2
 80025b0:	4413      	add	r3, r2
 80025b2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	681a      	ldr	r2, [r3, #0]
 80025b8:	4b08      	ldr	r3, [pc, #32]	@ (80025dc <LL_ADC_SetOffset+0x44>)
 80025ba:	4013      	ands	r3, r2
 80025bc:	687a      	ldr	r2, [r7, #4]
 80025be:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80025c2:	683a      	ldr	r2, [r7, #0]
 80025c4:	430a      	orrs	r2, r1
 80025c6:	4313      	orrs	r3, r2
 80025c8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80025d0:	bf00      	nop
 80025d2:	371c      	adds	r7, #28
 80025d4:	46bd      	mov	sp, r7
 80025d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025da:	4770      	bx	lr
 80025dc:	03fff000 	.word	0x03fff000

080025e0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b085      	sub	sp, #20
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
 80025e8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	3360      	adds	r3, #96	@ 0x60
 80025ee:	461a      	mov	r2, r3
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	009b      	lsls	r3, r3, #2
 80025f4:	4413      	add	r3, r2
 80025f6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002600:	4618      	mov	r0, r3
 8002602:	3714      	adds	r7, #20
 8002604:	46bd      	mov	sp, r7
 8002606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260a:	4770      	bx	lr

0800260c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800260c:	b480      	push	{r7}
 800260e:	b087      	sub	sp, #28
 8002610:	af00      	add	r7, sp, #0
 8002612:	60f8      	str	r0, [r7, #12]
 8002614:	60b9      	str	r1, [r7, #8]
 8002616:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	3360      	adds	r3, #96	@ 0x60
 800261c:	461a      	mov	r2, r3
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	009b      	lsls	r3, r3, #2
 8002622:	4413      	add	r3, r2
 8002624:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	431a      	orrs	r2, r3
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002636:	bf00      	nop
 8002638:	371c      	adds	r7, #28
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr

08002642 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002642:	b480      	push	{r7}
 8002644:	b083      	sub	sp, #12
 8002646:	af00      	add	r7, sp, #0
 8002648:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	68db      	ldr	r3, [r3, #12]
 800264e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002652:	2b00      	cmp	r3, #0
 8002654:	d101      	bne.n	800265a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002656:	2301      	movs	r3, #1
 8002658:	e000      	b.n	800265c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800265a:	2300      	movs	r3, #0
}
 800265c:	4618      	mov	r0, r3
 800265e:	370c      	adds	r7, #12
 8002660:	46bd      	mov	sp, r7
 8002662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002666:	4770      	bx	lr

08002668 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002668:	b480      	push	{r7}
 800266a:	b087      	sub	sp, #28
 800266c:	af00      	add	r7, sp, #0
 800266e:	60f8      	str	r0, [r7, #12]
 8002670:	60b9      	str	r1, [r7, #8]
 8002672:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	3330      	adds	r3, #48	@ 0x30
 8002678:	461a      	mov	r2, r3
 800267a:	68bb      	ldr	r3, [r7, #8]
 800267c:	0a1b      	lsrs	r3, r3, #8
 800267e:	009b      	lsls	r3, r3, #2
 8002680:	f003 030c 	and.w	r3, r3, #12
 8002684:	4413      	add	r3, r2
 8002686:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	681a      	ldr	r2, [r3, #0]
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	f003 031f 	and.w	r3, r3, #31
 8002692:	211f      	movs	r1, #31
 8002694:	fa01 f303 	lsl.w	r3, r1, r3
 8002698:	43db      	mvns	r3, r3
 800269a:	401a      	ands	r2, r3
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	0e9b      	lsrs	r3, r3, #26
 80026a0:	f003 011f 	and.w	r1, r3, #31
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	f003 031f 	and.w	r3, r3, #31
 80026aa:	fa01 f303 	lsl.w	r3, r1, r3
 80026ae:	431a      	orrs	r2, r3
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80026b4:	bf00      	nop
 80026b6:	371c      	adds	r7, #28
 80026b8:	46bd      	mov	sp, r7
 80026ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026be:	4770      	bx	lr

080026c0 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b087      	sub	sp, #28
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	60f8      	str	r0, [r7, #12]
 80026c8:	60b9      	str	r1, [r7, #8]
 80026ca:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	3314      	adds	r3, #20
 80026d0:	461a      	mov	r2, r3
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	0e5b      	lsrs	r3, r3, #25
 80026d6:	009b      	lsls	r3, r3, #2
 80026d8:	f003 0304 	and.w	r3, r3, #4
 80026dc:	4413      	add	r3, r2
 80026de:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	681a      	ldr	r2, [r3, #0]
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	0d1b      	lsrs	r3, r3, #20
 80026e8:	f003 031f 	and.w	r3, r3, #31
 80026ec:	2107      	movs	r1, #7
 80026ee:	fa01 f303 	lsl.w	r3, r1, r3
 80026f2:	43db      	mvns	r3, r3
 80026f4:	401a      	ands	r2, r3
 80026f6:	68bb      	ldr	r3, [r7, #8]
 80026f8:	0d1b      	lsrs	r3, r3, #20
 80026fa:	f003 031f 	and.w	r3, r3, #31
 80026fe:	6879      	ldr	r1, [r7, #4]
 8002700:	fa01 f303 	lsl.w	r3, r1, r3
 8002704:	431a      	orrs	r2, r3
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800270a:	bf00      	nop
 800270c:	371c      	adds	r7, #28
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr
	...

08002718 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002718:	b480      	push	{r7}
 800271a:	b085      	sub	sp, #20
 800271c:	af00      	add	r7, sp, #0
 800271e:	60f8      	str	r0, [r7, #12]
 8002720:	60b9      	str	r1, [r7, #8]
 8002722:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002730:	43db      	mvns	r3, r3
 8002732:	401a      	ands	r2, r3
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	f003 0318 	and.w	r3, r3, #24
 800273a:	4908      	ldr	r1, [pc, #32]	@ (800275c <LL_ADC_SetChannelSingleDiff+0x44>)
 800273c:	40d9      	lsrs	r1, r3
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	400b      	ands	r3, r1
 8002742:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002746:	431a      	orrs	r2, r3
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800274e:	bf00      	nop
 8002750:	3714      	adds	r7, #20
 8002752:	46bd      	mov	sp, r7
 8002754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002758:	4770      	bx	lr
 800275a:	bf00      	nop
 800275c:	0007ffff 	.word	0x0007ffff

08002760 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002760:	b480      	push	{r7}
 8002762:	b083      	sub	sp, #12
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	f003 031f 	and.w	r3, r3, #31
}
 8002770:	4618      	mov	r0, r3
 8002772:	370c      	adds	r7, #12
 8002774:	46bd      	mov	sp, r7
 8002776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277a:	4770      	bx	lr

0800277c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800277c:	b480      	push	{r7}
 800277e:	b083      	sub	sp, #12
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 800278c:	4618      	mov	r0, r3
 800278e:	370c      	adds	r7, #12
 8002790:	46bd      	mov	sp, r7
 8002792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002796:	4770      	bx	lr

08002798 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002798:	b480      	push	{r7}
 800279a:	b083      	sub	sp, #12
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80027a8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80027ac:	687a      	ldr	r2, [r7, #4]
 80027ae:	6093      	str	r3, [r2, #8]
}
 80027b0:	bf00      	nop
 80027b2:	370c      	adds	r7, #12
 80027b4:	46bd      	mov	sp, r7
 80027b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ba:	4770      	bx	lr

080027bc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80027bc:	b480      	push	{r7}
 80027be:	b083      	sub	sp, #12
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80027cc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80027d0:	d101      	bne.n	80027d6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80027d2:	2301      	movs	r3, #1
 80027d4:	e000      	b.n	80027d8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80027d6:	2300      	movs	r3, #0
}
 80027d8:	4618      	mov	r0, r3
 80027da:	370c      	adds	r7, #12
 80027dc:	46bd      	mov	sp, r7
 80027de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e2:	4770      	bx	lr

080027e4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b083      	sub	sp, #12
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80027f4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80027f8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002800:	bf00      	nop
 8002802:	370c      	adds	r7, #12
 8002804:	46bd      	mov	sp, r7
 8002806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280a:	4770      	bx	lr

0800280c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800280c:	b480      	push	{r7}
 800280e:	b083      	sub	sp, #12
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800281c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002820:	d101      	bne.n	8002826 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002822:	2301      	movs	r3, #1
 8002824:	e000      	b.n	8002828 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002826:	2300      	movs	r3, #0
}
 8002828:	4618      	mov	r0, r3
 800282a:	370c      	adds	r7, #12
 800282c:	46bd      	mov	sp, r7
 800282e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002832:	4770      	bx	lr

08002834 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002834:	b480      	push	{r7}
 8002836:	b083      	sub	sp, #12
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002844:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002848:	f043 0201 	orr.w	r2, r3, #1
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002850:	bf00      	nop
 8002852:	370c      	adds	r7, #12
 8002854:	46bd      	mov	sp, r7
 8002856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285a:	4770      	bx	lr

0800285c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800285c:	b480      	push	{r7}
 800285e:	b083      	sub	sp, #12
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800286c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002870:	f043 0202 	orr.w	r2, r3, #2
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002878:	bf00      	nop
 800287a:	370c      	adds	r7, #12
 800287c:	46bd      	mov	sp, r7
 800287e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002882:	4770      	bx	lr

08002884 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002884:	b480      	push	{r7}
 8002886:	b083      	sub	sp, #12
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	f003 0301 	and.w	r3, r3, #1
 8002894:	2b01      	cmp	r3, #1
 8002896:	d101      	bne.n	800289c <LL_ADC_IsEnabled+0x18>
 8002898:	2301      	movs	r3, #1
 800289a:	e000      	b.n	800289e <LL_ADC_IsEnabled+0x1a>
 800289c:	2300      	movs	r3, #0
}
 800289e:	4618      	mov	r0, r3
 80028a0:	370c      	adds	r7, #12
 80028a2:	46bd      	mov	sp, r7
 80028a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a8:	4770      	bx	lr

080028aa <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80028aa:	b480      	push	{r7}
 80028ac:	b083      	sub	sp, #12
 80028ae:	af00      	add	r7, sp, #0
 80028b0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	f003 0302 	and.w	r3, r3, #2
 80028ba:	2b02      	cmp	r3, #2
 80028bc:	d101      	bne.n	80028c2 <LL_ADC_IsDisableOngoing+0x18>
 80028be:	2301      	movs	r3, #1
 80028c0:	e000      	b.n	80028c4 <LL_ADC_IsDisableOngoing+0x1a>
 80028c2:	2300      	movs	r3, #0
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	370c      	adds	r7, #12
 80028c8:	46bd      	mov	sp, r7
 80028ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ce:	4770      	bx	lr

080028d0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b083      	sub	sp, #12
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80028e0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80028e4:	f043 0204 	orr.w	r2, r3, #4
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80028ec:	bf00      	nop
 80028ee:	370c      	adds	r7, #12
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr

080028f8 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b083      	sub	sp, #12
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002908:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800290c:	f043 0210 	orr.w	r2, r3, #16
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002914:	bf00      	nop
 8002916:	370c      	adds	r7, #12
 8002918:	46bd      	mov	sp, r7
 800291a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291e:	4770      	bx	lr

08002920 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002920:	b480      	push	{r7}
 8002922:	b083      	sub	sp, #12
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	f003 0304 	and.w	r3, r3, #4
 8002930:	2b04      	cmp	r3, #4
 8002932:	d101      	bne.n	8002938 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002934:	2301      	movs	r3, #1
 8002936:	e000      	b.n	800293a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002938:	2300      	movs	r3, #0
}
 800293a:	4618      	mov	r0, r3
 800293c:	370c      	adds	r7, #12
 800293e:	46bd      	mov	sp, r7
 8002940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002944:	4770      	bx	lr

08002946 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8002946:	b480      	push	{r7}
 8002948:	b083      	sub	sp, #12
 800294a:	af00      	add	r7, sp, #0
 800294c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002956:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800295a:	f043 0220 	orr.w	r2, r3, #32
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8002962:	bf00      	nop
 8002964:	370c      	adds	r7, #12
 8002966:	46bd      	mov	sp, r7
 8002968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296c:	4770      	bx	lr

0800296e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800296e:	b480      	push	{r7}
 8002970:	b083      	sub	sp, #12
 8002972:	af00      	add	r7, sp, #0
 8002974:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	f003 0308 	and.w	r3, r3, #8
 800297e:	2b08      	cmp	r3, #8
 8002980:	d101      	bne.n	8002986 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002982:	2301      	movs	r3, #1
 8002984:	e000      	b.n	8002988 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002986:	2300      	movs	r3, #0
}
 8002988:	4618      	mov	r0, r3
 800298a:	370c      	adds	r7, #12
 800298c:	46bd      	mov	sp, r7
 800298e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002992:	4770      	bx	lr

08002994 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002994:	b590      	push	{r4, r7, lr}
 8002996:	b089      	sub	sp, #36	@ 0x24
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800299c:	2300      	movs	r3, #0
 800299e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80029a0:	2300      	movs	r3, #0
 80029a2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d101      	bne.n	80029ae <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e130      	b.n	8002c10 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	691b      	ldr	r3, [r3, #16]
 80029b2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d109      	bne.n	80029d0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80029bc:	6878      	ldr	r0, [r7, #4]
 80029be:	f7ff fbe3 	bl	8002188 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2200      	movs	r2, #0
 80029c6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2200      	movs	r2, #0
 80029cc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4618      	mov	r0, r3
 80029d6:	f7ff fef1 	bl	80027bc <LL_ADC_IsDeepPowerDownEnabled>
 80029da:	4603      	mov	r3, r0
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d004      	beq.n	80029ea <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4618      	mov	r0, r3
 80029e6:	f7ff fed7 	bl	8002798 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4618      	mov	r0, r3
 80029f0:	f7ff ff0c 	bl	800280c <LL_ADC_IsInternalRegulatorEnabled>
 80029f4:	4603      	mov	r3, r0
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d115      	bne.n	8002a26 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4618      	mov	r0, r3
 8002a00:	f7ff fef0 	bl	80027e4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002a04:	4b84      	ldr	r3, [pc, #528]	@ (8002c18 <HAL_ADC_Init+0x284>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	099b      	lsrs	r3, r3, #6
 8002a0a:	4a84      	ldr	r2, [pc, #528]	@ (8002c1c <HAL_ADC_Init+0x288>)
 8002a0c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a10:	099b      	lsrs	r3, r3, #6
 8002a12:	3301      	adds	r3, #1
 8002a14:	005b      	lsls	r3, r3, #1
 8002a16:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002a18:	e002      	b.n	8002a20 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	3b01      	subs	r3, #1
 8002a1e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d1f9      	bne.n	8002a1a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f7ff feee 	bl	800280c <LL_ADC_IsInternalRegulatorEnabled>
 8002a30:	4603      	mov	r3, r0
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d10d      	bne.n	8002a52 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a3a:	f043 0210 	orr.w	r2, r3, #16
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a46:	f043 0201 	orr.w	r2, r3, #1
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4618      	mov	r0, r3
 8002a58:	f7ff ff62 	bl	8002920 <LL_ADC_REG_IsConversionOngoing>
 8002a5c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a62:	f003 0310 	and.w	r3, r3, #16
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	f040 80c9 	bne.w	8002bfe <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	f040 80c5 	bne.w	8002bfe <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a78:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002a7c:	f043 0202 	orr.w	r2, r3, #2
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f7ff fefb 	bl	8002884 <LL_ADC_IsEnabled>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d115      	bne.n	8002ac0 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002a94:	4862      	ldr	r0, [pc, #392]	@ (8002c20 <HAL_ADC_Init+0x28c>)
 8002a96:	f7ff fef5 	bl	8002884 <LL_ADC_IsEnabled>
 8002a9a:	4604      	mov	r4, r0
 8002a9c:	4861      	ldr	r0, [pc, #388]	@ (8002c24 <HAL_ADC_Init+0x290>)
 8002a9e:	f7ff fef1 	bl	8002884 <LL_ADC_IsEnabled>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	431c      	orrs	r4, r3
 8002aa6:	4860      	ldr	r0, [pc, #384]	@ (8002c28 <HAL_ADC_Init+0x294>)
 8002aa8:	f7ff feec 	bl	8002884 <LL_ADC_IsEnabled>
 8002aac:	4603      	mov	r3, r0
 8002aae:	4323      	orrs	r3, r4
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d105      	bne.n	8002ac0 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	4619      	mov	r1, r3
 8002aba:	485c      	ldr	r0, [pc, #368]	@ (8002c2c <HAL_ADC_Init+0x298>)
 8002abc:	f7ff fd38 	bl	8002530 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	7e5b      	ldrb	r3, [r3, #25]
 8002ac4:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002aca:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002ad0:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002ad6:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ade:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002aea:	2b01      	cmp	r3, #1
 8002aec:	d106      	bne.n	8002afc <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002af2:	3b01      	subs	r3, #1
 8002af4:	045b      	lsls	r3, r3, #17
 8002af6:	69ba      	ldr	r2, [r7, #24]
 8002af8:	4313      	orrs	r3, r2
 8002afa:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d009      	beq.n	8002b18 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b08:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b10:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002b12:	69ba      	ldr	r2, [r7, #24]
 8002b14:	4313      	orrs	r3, r2
 8002b16:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	68da      	ldr	r2, [r3, #12]
 8002b1e:	4b44      	ldr	r3, [pc, #272]	@ (8002c30 <HAL_ADC_Init+0x29c>)
 8002b20:	4013      	ands	r3, r2
 8002b22:	687a      	ldr	r2, [r7, #4]
 8002b24:	6812      	ldr	r2, [r2, #0]
 8002b26:	69b9      	ldr	r1, [r7, #24]
 8002b28:	430b      	orrs	r3, r1
 8002b2a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4618      	mov	r0, r3
 8002b32:	f7ff ff1c 	bl	800296e <LL_ADC_INJ_IsConversionOngoing>
 8002b36:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d13d      	bne.n	8002bba <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d13a      	bne.n	8002bba <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002b48:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002b50:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002b52:	4313      	orrs	r3, r2
 8002b54:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	68db      	ldr	r3, [r3, #12]
 8002b5c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002b60:	f023 0302 	bic.w	r3, r3, #2
 8002b64:	687a      	ldr	r2, [r7, #4]
 8002b66:	6812      	ldr	r2, [r2, #0]
 8002b68:	69b9      	ldr	r1, [r7, #24]
 8002b6a:	430b      	orrs	r3, r1
 8002b6c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002b74:	2b01      	cmp	r3, #1
 8002b76:	d118      	bne.n	8002baa <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	691b      	ldr	r3, [r3, #16]
 8002b7e:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002b82:	f023 0304 	bic.w	r3, r3, #4
 8002b86:	687a      	ldr	r2, [r7, #4]
 8002b88:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8002b8a:	687a      	ldr	r2, [r7, #4]
 8002b8c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002b8e:	4311      	orrs	r1, r2
 8002b90:	687a      	ldr	r2, [r7, #4]
 8002b92:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002b94:	4311      	orrs	r1, r2
 8002b96:	687a      	ldr	r2, [r7, #4]
 8002b98:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002b9a:	430a      	orrs	r2, r1
 8002b9c:	431a      	orrs	r2, r3
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f042 0201 	orr.w	r2, r2, #1
 8002ba6:	611a      	str	r2, [r3, #16]
 8002ba8:	e007      	b.n	8002bba <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	691a      	ldr	r2, [r3, #16]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f022 0201 	bic.w	r2, r2, #1
 8002bb8:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	691b      	ldr	r3, [r3, #16]
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	d10c      	bne.n	8002bdc <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bc8:	f023 010f 	bic.w	r1, r3, #15
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	69db      	ldr	r3, [r3, #28]
 8002bd0:	1e5a      	subs	r2, r3, #1
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	430a      	orrs	r2, r1
 8002bd8:	631a      	str	r2, [r3, #48]	@ 0x30
 8002bda:	e007      	b.n	8002bec <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f022 020f 	bic.w	r2, r2, #15
 8002bea:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bf0:	f023 0303 	bic.w	r3, r3, #3
 8002bf4:	f043 0201 	orr.w	r2, r3, #1
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	655a      	str	r2, [r3, #84]	@ 0x54
 8002bfc:	e007      	b.n	8002c0e <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c02:	f043 0210 	orr.w	r2, r3, #16
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002c0e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	3724      	adds	r7, #36	@ 0x24
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd90      	pop	{r4, r7, pc}
 8002c18:	20000004 	.word	0x20000004
 8002c1c:	053e2d63 	.word	0x053e2d63
 8002c20:	50040000 	.word	0x50040000
 8002c24:	50040100 	.word	0x50040100
 8002c28:	50040200 	.word	0x50040200
 8002c2c:	50040300 	.word	0x50040300
 8002c30:	fff0c007 	.word	0xfff0c007

08002c34 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b086      	sub	sp, #24
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002c3c:	4857      	ldr	r0, [pc, #348]	@ (8002d9c <HAL_ADC_Start+0x168>)
 8002c3e:	f7ff fd8f 	bl	8002760 <LL_ADC_GetMultimode>
 8002c42:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f7ff fe69 	bl	8002920 <LL_ADC_REG_IsConversionOngoing>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	f040 809c 	bne.w	8002d8e <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002c5c:	2b01      	cmp	r3, #1
 8002c5e:	d101      	bne.n	8002c64 <HAL_ADC_Start+0x30>
 8002c60:	2302      	movs	r3, #2
 8002c62:	e097      	b.n	8002d94 <HAL_ADC_Start+0x160>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2201      	movs	r2, #1
 8002c68:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002c6c:	6878      	ldr	r0, [r7, #4]
 8002c6e:	f000 fe63 	bl	8003938 <ADC_Enable>
 8002c72:	4603      	mov	r3, r0
 8002c74:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002c76:	7dfb      	ldrb	r3, [r7, #23]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	f040 8083 	bne.w	8002d84 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c82:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002c86:	f023 0301 	bic.w	r3, r3, #1
 8002c8a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a42      	ldr	r2, [pc, #264]	@ (8002da0 <HAL_ADC_Start+0x16c>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d002      	beq.n	8002ca2 <HAL_ADC_Start+0x6e>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	e000      	b.n	8002ca4 <HAL_ADC_Start+0x70>
 8002ca2:	4b40      	ldr	r3, [pc, #256]	@ (8002da4 <HAL_ADC_Start+0x170>)
 8002ca4:	687a      	ldr	r2, [r7, #4]
 8002ca6:	6812      	ldr	r2, [r2, #0]
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d002      	beq.n	8002cb2 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d105      	bne.n	8002cbe <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cb6:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	655a      	str	r2, [r3, #84]	@ 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cc2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002cc6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002cca:	d106      	bne.n	8002cda <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cd0:	f023 0206 	bic.w	r2, r3, #6
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	659a      	str	r2, [r3, #88]	@ 0x58
 8002cd8:	e002      	b.n	8002ce0 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	221c      	movs	r2, #28
 8002ce6:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2200      	movs	r2, #0
 8002cec:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a2a      	ldr	r2, [pc, #168]	@ (8002da0 <HAL_ADC_Start+0x16c>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d002      	beq.n	8002d00 <HAL_ADC_Start+0xcc>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	e000      	b.n	8002d02 <HAL_ADC_Start+0xce>
 8002d00:	4b28      	ldr	r3, [pc, #160]	@ (8002da4 <HAL_ADC_Start+0x170>)
 8002d02:	687a      	ldr	r2, [r7, #4]
 8002d04:	6812      	ldr	r2, [r2, #0]
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d008      	beq.n	8002d1c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d005      	beq.n	8002d1c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	2b05      	cmp	r3, #5
 8002d14:	d002      	beq.n	8002d1c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	2b09      	cmp	r3, #9
 8002d1a:	d114      	bne.n	8002d46 <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	68db      	ldr	r3, [r3, #12]
 8002d22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d007      	beq.n	8002d3a <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d2e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002d32:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f7ff fdc6 	bl	80028d0 <LL_ADC_REG_StartConversion>
 8002d44:	e025      	b.n	8002d92 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d4a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a12      	ldr	r2, [pc, #72]	@ (8002da0 <HAL_ADC_Start+0x16c>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d002      	beq.n	8002d62 <HAL_ADC_Start+0x12e>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	e000      	b.n	8002d64 <HAL_ADC_Start+0x130>
 8002d62:	4b10      	ldr	r3, [pc, #64]	@ (8002da4 <HAL_ADC_Start+0x170>)
 8002d64:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	68db      	ldr	r3, [r3, #12]
 8002d6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d00f      	beq.n	8002d92 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d76:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002d7a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	655a      	str	r2, [r3, #84]	@ 0x54
 8002d82:	e006      	b.n	8002d92 <HAL_ADC_Start+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2200      	movs	r2, #0
 8002d88:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8002d8c:	e001      	b.n	8002d92 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002d8e:	2302      	movs	r3, #2
 8002d90:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002d92:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	3718      	adds	r7, #24
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}
 8002d9c:	50040300 	.word	0x50040300
 8002da0:	50040100 	.word	0x50040100
 8002da4:	50040000 	.word	0x50040000

08002da8 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b084      	sub	sp, #16
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002db6:	2b01      	cmp	r3, #1
 8002db8:	d101      	bne.n	8002dbe <HAL_ADC_Stop+0x16>
 8002dba:	2302      	movs	r3, #2
 8002dbc:	e023      	b.n	8002e06 <HAL_ADC_Stop+0x5e>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8002dc6:	2103      	movs	r1, #3
 8002dc8:	6878      	ldr	r0, [r7, #4]
 8002dca:	f000 fcf9 	bl	80037c0 <ADC_ConversionStop>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002dd2:	7bfb      	ldrb	r3, [r7, #15]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d111      	bne.n	8002dfc <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002dd8:	6878      	ldr	r0, [r7, #4]
 8002dda:	f000 fe33 	bl	8003a44 <ADC_Disable>
 8002dde:	4603      	mov	r3, r0
 8002de0:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002de2:	7bfb      	ldrb	r3, [r7, #15]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d109      	bne.n	8002dfc <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dec:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002df0:	f023 0301 	bic.w	r3, r3, #1
 8002df4:	f043 0201 	orr.w	r2, r3, #1
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002e04:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	3710      	adds	r7, #16
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}
	...

08002e10 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b088      	sub	sp, #32
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
 8002e18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002e1a:	4866      	ldr	r0, [pc, #408]	@ (8002fb4 <HAL_ADC_PollForConversion+0x1a4>)
 8002e1c:	f7ff fca0 	bl	8002760 <LL_ADC_GetMultimode>
 8002e20:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	695b      	ldr	r3, [r3, #20]
 8002e26:	2b08      	cmp	r3, #8
 8002e28:	d102      	bne.n	8002e30 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002e2a:	2308      	movs	r3, #8
 8002e2c:	61fb      	str	r3, [r7, #28]
 8002e2e:	e02a      	b.n	8002e86 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d005      	beq.n	8002e42 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	2b05      	cmp	r3, #5
 8002e3a:	d002      	beq.n	8002e42 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002e3c:	697b      	ldr	r3, [r7, #20]
 8002e3e:	2b09      	cmp	r3, #9
 8002e40:	d111      	bne.n	8002e66 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	68db      	ldr	r3, [r3, #12]
 8002e48:	f003 0301 	and.w	r3, r3, #1
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d007      	beq.n	8002e60 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e54:	f043 0220 	orr.w	r2, r3, #32
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	e0a4      	b.n	8002faa <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002e60:	2304      	movs	r3, #4
 8002e62:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002e64:	e00f      	b.n	8002e86 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002e66:	4853      	ldr	r0, [pc, #332]	@ (8002fb4 <HAL_ADC_PollForConversion+0x1a4>)
 8002e68:	f7ff fc88 	bl	800277c <LL_ADC_GetMultiDMATransfer>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d007      	beq.n	8002e82 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e76:	f043 0220 	orr.w	r2, r3, #32
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e093      	b.n	8002faa <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002e82:	2304      	movs	r3, #4
 8002e84:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002e86:	f7ff fb47 	bl	8002518 <HAL_GetTick>
 8002e8a:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002e8c:	e021      	b.n	8002ed2 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e94:	d01d      	beq.n	8002ed2 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002e96:	f7ff fb3f 	bl	8002518 <HAL_GetTick>
 8002e9a:	4602      	mov	r2, r0
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	1ad3      	subs	r3, r2, r3
 8002ea0:	683a      	ldr	r2, [r7, #0]
 8002ea2:	429a      	cmp	r2, r3
 8002ea4:	d302      	bcc.n	8002eac <HAL_ADC_PollForConversion+0x9c>
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d112      	bne.n	8002ed2 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	681a      	ldr	r2, [r3, #0]
 8002eb2:	69fb      	ldr	r3, [r7, #28]
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d10b      	bne.n	8002ed2 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ebe:	f043 0204 	orr.w	r2, r3, #4
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 8002ece:	2303      	movs	r3, #3
 8002ed0:	e06b      	b.n	8002faa <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	69fb      	ldr	r3, [r7, #28]
 8002eda:	4013      	ands	r3, r2
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d0d6      	beq.n	8002e8e <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ee4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f7ff fba6 	bl	8002642 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d01c      	beq.n	8002f36 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	7e5b      	ldrb	r3, [r3, #25]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d118      	bne.n	8002f36 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f003 0308 	and.w	r3, r3, #8
 8002f0e:	2b08      	cmp	r3, #8
 8002f10:	d111      	bne.n	8002f36 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f16:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f22:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d105      	bne.n	8002f36 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f2e:	f043 0201 	orr.w	r2, r3, #1
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a1f      	ldr	r2, [pc, #124]	@ (8002fb8 <HAL_ADC_PollForConversion+0x1a8>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d002      	beq.n	8002f46 <HAL_ADC_PollForConversion+0x136>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	e000      	b.n	8002f48 <HAL_ADC_PollForConversion+0x138>
 8002f46:	4b1d      	ldr	r3, [pc, #116]	@ (8002fbc <HAL_ADC_PollForConversion+0x1ac>)
 8002f48:	687a      	ldr	r2, [r7, #4]
 8002f4a:	6812      	ldr	r2, [r2, #0]
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d008      	beq.n	8002f62 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d005      	beq.n	8002f62 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	2b05      	cmp	r3, #5
 8002f5a:	d002      	beq.n	8002f62 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	2b09      	cmp	r3, #9
 8002f60:	d104      	bne.n	8002f6c <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	68db      	ldr	r3, [r3, #12]
 8002f68:	61bb      	str	r3, [r7, #24]
 8002f6a:	e00c      	b.n	8002f86 <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a11      	ldr	r2, [pc, #68]	@ (8002fb8 <HAL_ADC_PollForConversion+0x1a8>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d002      	beq.n	8002f7c <HAL_ADC_PollForConversion+0x16c>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	e000      	b.n	8002f7e <HAL_ADC_PollForConversion+0x16e>
 8002f7c:	4b0f      	ldr	r3, [pc, #60]	@ (8002fbc <HAL_ADC_PollForConversion+0x1ac>)
 8002f7e:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	68db      	ldr	r3, [r3, #12]
 8002f84:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002f86:	69fb      	ldr	r3, [r7, #28]
 8002f88:	2b08      	cmp	r3, #8
 8002f8a:	d104      	bne.n	8002f96 <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	2208      	movs	r2, #8
 8002f92:	601a      	str	r2, [r3, #0]
 8002f94:	e008      	b.n	8002fa8 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002f96:	69bb      	ldr	r3, [r7, #24]
 8002f98:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d103      	bne.n	8002fa8 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	220c      	movs	r2, #12
 8002fa6:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002fa8:	2300      	movs	r3, #0
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	3720      	adds	r7, #32
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}
 8002fb2:	bf00      	nop
 8002fb4:	50040300 	.word	0x50040300
 8002fb8:	50040100 	.word	0x50040100
 8002fbc:	50040000 	.word	0x50040000

08002fc0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b083      	sub	sp, #12
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8002fce:	4618      	mov	r0, r3
 8002fd0:	370c      	adds	r7, #12
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd8:	4770      	bx	lr
	...

08002fdc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b0b6      	sub	sp, #216	@ 0xd8
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
 8002fe4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002fec:	2300      	movs	r3, #0
 8002fee:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002ff6:	2b01      	cmp	r3, #1
 8002ff8:	d101      	bne.n	8002ffe <HAL_ADC_ConfigChannel+0x22>
 8002ffa:	2302      	movs	r3, #2
 8002ffc:	e3c9      	b.n	8003792 <HAL_ADC_ConfigChannel+0x7b6>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2201      	movs	r2, #1
 8003002:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4618      	mov	r0, r3
 800300c:	f7ff fc88 	bl	8002920 <LL_ADC_REG_IsConversionOngoing>
 8003010:	4603      	mov	r3, r0
 8003012:	2b00      	cmp	r3, #0
 8003014:	f040 83aa 	bne.w	800376c <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	2b05      	cmp	r3, #5
 8003026:	d824      	bhi.n	8003072 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	3b02      	subs	r3, #2
 800302e:	2b03      	cmp	r3, #3
 8003030:	d81b      	bhi.n	800306a <HAL_ADC_ConfigChannel+0x8e>
 8003032:	a201      	add	r2, pc, #4	@ (adr r2, 8003038 <HAL_ADC_ConfigChannel+0x5c>)
 8003034:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003038:	08003049 	.word	0x08003049
 800303c:	08003051 	.word	0x08003051
 8003040:	08003059 	.word	0x08003059
 8003044:	08003061 	.word	0x08003061
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8003048:	230c      	movs	r3, #12
 800304a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800304e:	e010      	b.n	8003072 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8003050:	2312      	movs	r3, #18
 8003052:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8003056:	e00c      	b.n	8003072 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8003058:	2318      	movs	r3, #24
 800305a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800305e:	e008      	b.n	8003072 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8003060:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003064:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8003068:	e003      	b.n	8003072 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 800306a:	2306      	movs	r3, #6
 800306c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8003070:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6818      	ldr	r0, [r3, #0]
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	461a      	mov	r2, r3
 800307c:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8003080:	f7ff faf2 	bl	8002668 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4618      	mov	r0, r3
 800308a:	f7ff fc49 	bl	8002920 <LL_ADC_REG_IsConversionOngoing>
 800308e:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4618      	mov	r0, r3
 8003098:	f7ff fc69 	bl	800296e <LL_ADC_INJ_IsConversionOngoing>
 800309c:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80030a0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	f040 81a4 	bne.w	80033f2 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80030aa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	f040 819f 	bne.w	80033f2 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6818      	ldr	r0, [r3, #0]
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	6819      	ldr	r1, [r3, #0]
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	689b      	ldr	r3, [r3, #8]
 80030c0:	461a      	mov	r2, r3
 80030c2:	f7ff fafd 	bl	80026c0 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	695a      	ldr	r2, [r3, #20]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	68db      	ldr	r3, [r3, #12]
 80030d0:	08db      	lsrs	r3, r3, #3
 80030d2:	f003 0303 	and.w	r3, r3, #3
 80030d6:	005b      	lsls	r3, r3, #1
 80030d8:	fa02 f303 	lsl.w	r3, r2, r3
 80030dc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	691b      	ldr	r3, [r3, #16]
 80030e4:	2b04      	cmp	r3, #4
 80030e6:	d00a      	beq.n	80030fe <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6818      	ldr	r0, [r3, #0]
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	6919      	ldr	r1, [r3, #16]
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	681a      	ldr	r2, [r3, #0]
 80030f4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80030f8:	f7ff fa4e 	bl	8002598 <LL_ADC_SetOffset>
 80030fc:	e179      	b.n	80033f2 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	2100      	movs	r1, #0
 8003104:	4618      	mov	r0, r3
 8003106:	f7ff fa6b 	bl	80025e0 <LL_ADC_GetOffsetChannel>
 800310a:	4603      	mov	r3, r0
 800310c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003110:	2b00      	cmp	r3, #0
 8003112:	d10a      	bne.n	800312a <HAL_ADC_ConfigChannel+0x14e>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	2100      	movs	r1, #0
 800311a:	4618      	mov	r0, r3
 800311c:	f7ff fa60 	bl	80025e0 <LL_ADC_GetOffsetChannel>
 8003120:	4603      	mov	r3, r0
 8003122:	0e9b      	lsrs	r3, r3, #26
 8003124:	f003 021f 	and.w	r2, r3, #31
 8003128:	e01e      	b.n	8003168 <HAL_ADC_ConfigChannel+0x18c>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	2100      	movs	r1, #0
 8003130:	4618      	mov	r0, r3
 8003132:	f7ff fa55 	bl	80025e0 <LL_ADC_GetOffsetChannel>
 8003136:	4603      	mov	r3, r0
 8003138:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800313c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003140:	fa93 f3a3 	rbit	r3, r3
 8003144:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003148:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800314c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003150:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003154:	2b00      	cmp	r3, #0
 8003156:	d101      	bne.n	800315c <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8003158:	2320      	movs	r3, #32
 800315a:	e004      	b.n	8003166 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 800315c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003160:	fab3 f383 	clz	r3, r3
 8003164:	b2db      	uxtb	r3, r3
 8003166:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003170:	2b00      	cmp	r3, #0
 8003172:	d105      	bne.n	8003180 <HAL_ADC_ConfigChannel+0x1a4>
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	0e9b      	lsrs	r3, r3, #26
 800317a:	f003 031f 	and.w	r3, r3, #31
 800317e:	e018      	b.n	80031b2 <HAL_ADC_ConfigChannel+0x1d6>
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003188:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800318c:	fa93 f3a3 	rbit	r3, r3
 8003190:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8003194:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003198:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 800319c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d101      	bne.n	80031a8 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 80031a4:	2320      	movs	r3, #32
 80031a6:	e004      	b.n	80031b2 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 80031a8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80031ac:	fab3 f383 	clz	r3, r3
 80031b0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80031b2:	429a      	cmp	r2, r3
 80031b4:	d106      	bne.n	80031c4 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	2200      	movs	r2, #0
 80031bc:	2100      	movs	r1, #0
 80031be:	4618      	mov	r0, r3
 80031c0:	f7ff fa24 	bl	800260c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	2101      	movs	r1, #1
 80031ca:	4618      	mov	r0, r3
 80031cc:	f7ff fa08 	bl	80025e0 <LL_ADC_GetOffsetChannel>
 80031d0:	4603      	mov	r3, r0
 80031d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d10a      	bne.n	80031f0 <HAL_ADC_ConfigChannel+0x214>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	2101      	movs	r1, #1
 80031e0:	4618      	mov	r0, r3
 80031e2:	f7ff f9fd 	bl	80025e0 <LL_ADC_GetOffsetChannel>
 80031e6:	4603      	mov	r3, r0
 80031e8:	0e9b      	lsrs	r3, r3, #26
 80031ea:	f003 021f 	and.w	r2, r3, #31
 80031ee:	e01e      	b.n	800322e <HAL_ADC_ConfigChannel+0x252>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	2101      	movs	r1, #1
 80031f6:	4618      	mov	r0, r3
 80031f8:	f7ff f9f2 	bl	80025e0 <LL_ADC_GetOffsetChannel>
 80031fc:	4603      	mov	r3, r0
 80031fe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003202:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003206:	fa93 f3a3 	rbit	r3, r3
 800320a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 800320e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003212:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8003216:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800321a:	2b00      	cmp	r3, #0
 800321c:	d101      	bne.n	8003222 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 800321e:	2320      	movs	r3, #32
 8003220:	e004      	b.n	800322c <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8003222:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003226:	fab3 f383 	clz	r3, r3
 800322a:	b2db      	uxtb	r3, r3
 800322c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003236:	2b00      	cmp	r3, #0
 8003238:	d105      	bne.n	8003246 <HAL_ADC_ConfigChannel+0x26a>
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	0e9b      	lsrs	r3, r3, #26
 8003240:	f003 031f 	and.w	r3, r3, #31
 8003244:	e018      	b.n	8003278 <HAL_ADC_ConfigChannel+0x29c>
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800324e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003252:	fa93 f3a3 	rbit	r3, r3
 8003256:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 800325a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800325e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8003262:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003266:	2b00      	cmp	r3, #0
 8003268:	d101      	bne.n	800326e <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 800326a:	2320      	movs	r3, #32
 800326c:	e004      	b.n	8003278 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 800326e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003272:	fab3 f383 	clz	r3, r3
 8003276:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003278:	429a      	cmp	r2, r3
 800327a:	d106      	bne.n	800328a <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	2200      	movs	r2, #0
 8003282:	2101      	movs	r1, #1
 8003284:	4618      	mov	r0, r3
 8003286:	f7ff f9c1 	bl	800260c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	2102      	movs	r1, #2
 8003290:	4618      	mov	r0, r3
 8003292:	f7ff f9a5 	bl	80025e0 <LL_ADC_GetOffsetChannel>
 8003296:	4603      	mov	r3, r0
 8003298:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800329c:	2b00      	cmp	r3, #0
 800329e:	d10a      	bne.n	80032b6 <HAL_ADC_ConfigChannel+0x2da>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	2102      	movs	r1, #2
 80032a6:	4618      	mov	r0, r3
 80032a8:	f7ff f99a 	bl	80025e0 <LL_ADC_GetOffsetChannel>
 80032ac:	4603      	mov	r3, r0
 80032ae:	0e9b      	lsrs	r3, r3, #26
 80032b0:	f003 021f 	and.w	r2, r3, #31
 80032b4:	e01e      	b.n	80032f4 <HAL_ADC_ConfigChannel+0x318>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	2102      	movs	r1, #2
 80032bc:	4618      	mov	r0, r3
 80032be:	f7ff f98f 	bl	80025e0 <LL_ADC_GetOffsetChannel>
 80032c2:	4603      	mov	r3, r0
 80032c4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80032cc:	fa93 f3a3 	rbit	r3, r3
 80032d0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 80032d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80032d8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 80032dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d101      	bne.n	80032e8 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 80032e4:	2320      	movs	r3, #32
 80032e6:	e004      	b.n	80032f2 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 80032e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80032ec:	fab3 f383 	clz	r3, r3
 80032f0:	b2db      	uxtb	r3, r3
 80032f2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d105      	bne.n	800330c <HAL_ADC_ConfigChannel+0x330>
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	0e9b      	lsrs	r3, r3, #26
 8003306:	f003 031f 	and.w	r3, r3, #31
 800330a:	e014      	b.n	8003336 <HAL_ADC_ConfigChannel+0x35a>
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003312:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003314:	fa93 f3a3 	rbit	r3, r3
 8003318:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 800331a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800331c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8003320:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003324:	2b00      	cmp	r3, #0
 8003326:	d101      	bne.n	800332c <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8003328:	2320      	movs	r3, #32
 800332a:	e004      	b.n	8003336 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 800332c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003330:	fab3 f383 	clz	r3, r3
 8003334:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003336:	429a      	cmp	r2, r3
 8003338:	d106      	bne.n	8003348 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	2200      	movs	r2, #0
 8003340:	2102      	movs	r1, #2
 8003342:	4618      	mov	r0, r3
 8003344:	f7ff f962 	bl	800260c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	2103      	movs	r1, #3
 800334e:	4618      	mov	r0, r3
 8003350:	f7ff f946 	bl	80025e0 <LL_ADC_GetOffsetChannel>
 8003354:	4603      	mov	r3, r0
 8003356:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800335a:	2b00      	cmp	r3, #0
 800335c:	d10a      	bne.n	8003374 <HAL_ADC_ConfigChannel+0x398>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	2103      	movs	r1, #3
 8003364:	4618      	mov	r0, r3
 8003366:	f7ff f93b 	bl	80025e0 <LL_ADC_GetOffsetChannel>
 800336a:	4603      	mov	r3, r0
 800336c:	0e9b      	lsrs	r3, r3, #26
 800336e:	f003 021f 	and.w	r2, r3, #31
 8003372:	e017      	b.n	80033a4 <HAL_ADC_ConfigChannel+0x3c8>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	2103      	movs	r1, #3
 800337a:	4618      	mov	r0, r3
 800337c:	f7ff f930 	bl	80025e0 <LL_ADC_GetOffsetChannel>
 8003380:	4603      	mov	r3, r0
 8003382:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003384:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003386:	fa93 f3a3 	rbit	r3, r3
 800338a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 800338c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800338e:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8003390:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003392:	2b00      	cmp	r3, #0
 8003394:	d101      	bne.n	800339a <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8003396:	2320      	movs	r3, #32
 8003398:	e003      	b.n	80033a2 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 800339a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800339c:	fab3 f383 	clz	r3, r3
 80033a0:	b2db      	uxtb	r3, r3
 80033a2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d105      	bne.n	80033bc <HAL_ADC_ConfigChannel+0x3e0>
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	0e9b      	lsrs	r3, r3, #26
 80033b6:	f003 031f 	and.w	r3, r3, #31
 80033ba:	e011      	b.n	80033e0 <HAL_ADC_ConfigChannel+0x404>
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033c2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80033c4:	fa93 f3a3 	rbit	r3, r3
 80033c8:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 80033ca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80033cc:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 80033ce:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d101      	bne.n	80033d8 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80033d4:	2320      	movs	r3, #32
 80033d6:	e003      	b.n	80033e0 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80033d8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80033da:	fab3 f383 	clz	r3, r3
 80033de:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80033e0:	429a      	cmp	r2, r3
 80033e2:	d106      	bne.n	80033f2 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	2200      	movs	r2, #0
 80033ea:	2103      	movs	r1, #3
 80033ec:	4618      	mov	r0, r3
 80033ee:	f7ff f90d 	bl	800260c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4618      	mov	r0, r3
 80033f8:	f7ff fa44 	bl	8002884 <LL_ADC_IsEnabled>
 80033fc:	4603      	mov	r3, r0
 80033fe:	2b00      	cmp	r3, #0
 8003400:	f040 8140 	bne.w	8003684 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6818      	ldr	r0, [r3, #0]
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	6819      	ldr	r1, [r3, #0]
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	68db      	ldr	r3, [r3, #12]
 8003410:	461a      	mov	r2, r3
 8003412:	f7ff f981 	bl	8002718 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	68db      	ldr	r3, [r3, #12]
 800341a:	4a8f      	ldr	r2, [pc, #572]	@ (8003658 <HAL_ADC_ConfigChannel+0x67c>)
 800341c:	4293      	cmp	r3, r2
 800341e:	f040 8131 	bne.w	8003684 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800342e:	2b00      	cmp	r3, #0
 8003430:	d10b      	bne.n	800344a <HAL_ADC_ConfigChannel+0x46e>
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	0e9b      	lsrs	r3, r3, #26
 8003438:	3301      	adds	r3, #1
 800343a:	f003 031f 	and.w	r3, r3, #31
 800343e:	2b09      	cmp	r3, #9
 8003440:	bf94      	ite	ls
 8003442:	2301      	movls	r3, #1
 8003444:	2300      	movhi	r3, #0
 8003446:	b2db      	uxtb	r3, r3
 8003448:	e019      	b.n	800347e <HAL_ADC_ConfigChannel+0x4a2>
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003450:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003452:	fa93 f3a3 	rbit	r3, r3
 8003456:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8003458:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800345a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 800345c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800345e:	2b00      	cmp	r3, #0
 8003460:	d101      	bne.n	8003466 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8003462:	2320      	movs	r3, #32
 8003464:	e003      	b.n	800346e <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8003466:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003468:	fab3 f383 	clz	r3, r3
 800346c:	b2db      	uxtb	r3, r3
 800346e:	3301      	adds	r3, #1
 8003470:	f003 031f 	and.w	r3, r3, #31
 8003474:	2b09      	cmp	r3, #9
 8003476:	bf94      	ite	ls
 8003478:	2301      	movls	r3, #1
 800347a:	2300      	movhi	r3, #0
 800347c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800347e:	2b00      	cmp	r3, #0
 8003480:	d079      	beq.n	8003576 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800348a:	2b00      	cmp	r3, #0
 800348c:	d107      	bne.n	800349e <HAL_ADC_ConfigChannel+0x4c2>
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	0e9b      	lsrs	r3, r3, #26
 8003494:	3301      	adds	r3, #1
 8003496:	069b      	lsls	r3, r3, #26
 8003498:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800349c:	e015      	b.n	80034ca <HAL_ADC_ConfigChannel+0x4ee>
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80034a6:	fa93 f3a3 	rbit	r3, r3
 80034aa:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80034ac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80034ae:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80034b0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d101      	bne.n	80034ba <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 80034b6:	2320      	movs	r3, #32
 80034b8:	e003      	b.n	80034c2 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 80034ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80034bc:	fab3 f383 	clz	r3, r3
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	3301      	adds	r3, #1
 80034c4:	069b      	lsls	r3, r3, #26
 80034c6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d109      	bne.n	80034ea <HAL_ADC_ConfigChannel+0x50e>
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	0e9b      	lsrs	r3, r3, #26
 80034dc:	3301      	adds	r3, #1
 80034de:	f003 031f 	and.w	r3, r3, #31
 80034e2:	2101      	movs	r1, #1
 80034e4:	fa01 f303 	lsl.w	r3, r1, r3
 80034e8:	e017      	b.n	800351a <HAL_ADC_ConfigChannel+0x53e>
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80034f2:	fa93 f3a3 	rbit	r3, r3
 80034f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80034f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80034fa:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80034fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d101      	bne.n	8003506 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8003502:	2320      	movs	r3, #32
 8003504:	e003      	b.n	800350e <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8003506:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003508:	fab3 f383 	clz	r3, r3
 800350c:	b2db      	uxtb	r3, r3
 800350e:	3301      	adds	r3, #1
 8003510:	f003 031f 	and.w	r3, r3, #31
 8003514:	2101      	movs	r1, #1
 8003516:	fa01 f303 	lsl.w	r3, r1, r3
 800351a:	ea42 0103 	orr.w	r1, r2, r3
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003526:	2b00      	cmp	r3, #0
 8003528:	d10a      	bne.n	8003540 <HAL_ADC_ConfigChannel+0x564>
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	0e9b      	lsrs	r3, r3, #26
 8003530:	3301      	adds	r3, #1
 8003532:	f003 021f 	and.w	r2, r3, #31
 8003536:	4613      	mov	r3, r2
 8003538:	005b      	lsls	r3, r3, #1
 800353a:	4413      	add	r3, r2
 800353c:	051b      	lsls	r3, r3, #20
 800353e:	e018      	b.n	8003572 <HAL_ADC_ConfigChannel+0x596>
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003546:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003548:	fa93 f3a3 	rbit	r3, r3
 800354c:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 800354e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003550:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8003552:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003554:	2b00      	cmp	r3, #0
 8003556:	d101      	bne.n	800355c <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8003558:	2320      	movs	r3, #32
 800355a:	e003      	b.n	8003564 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 800355c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800355e:	fab3 f383 	clz	r3, r3
 8003562:	b2db      	uxtb	r3, r3
 8003564:	3301      	adds	r3, #1
 8003566:	f003 021f 	and.w	r2, r3, #31
 800356a:	4613      	mov	r3, r2
 800356c:	005b      	lsls	r3, r3, #1
 800356e:	4413      	add	r3, r2
 8003570:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003572:	430b      	orrs	r3, r1
 8003574:	e081      	b.n	800367a <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800357e:	2b00      	cmp	r3, #0
 8003580:	d107      	bne.n	8003592 <HAL_ADC_ConfigChannel+0x5b6>
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	0e9b      	lsrs	r3, r3, #26
 8003588:	3301      	adds	r3, #1
 800358a:	069b      	lsls	r3, r3, #26
 800358c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003590:	e015      	b.n	80035be <HAL_ADC_ConfigChannel+0x5e2>
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003598:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800359a:	fa93 f3a3 	rbit	r3, r3
 800359e:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80035a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80035a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d101      	bne.n	80035ae <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 80035aa:	2320      	movs	r3, #32
 80035ac:	e003      	b.n	80035b6 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 80035ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035b0:	fab3 f383 	clz	r3, r3
 80035b4:	b2db      	uxtb	r3, r3
 80035b6:	3301      	adds	r3, #1
 80035b8:	069b      	lsls	r3, r3, #26
 80035ba:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d109      	bne.n	80035de <HAL_ADC_ConfigChannel+0x602>
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	0e9b      	lsrs	r3, r3, #26
 80035d0:	3301      	adds	r3, #1
 80035d2:	f003 031f 	and.w	r3, r3, #31
 80035d6:	2101      	movs	r1, #1
 80035d8:	fa01 f303 	lsl.w	r3, r1, r3
 80035dc:	e017      	b.n	800360e <HAL_ADC_ConfigChannel+0x632>
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035e4:	69fb      	ldr	r3, [r7, #28]
 80035e6:	fa93 f3a3 	rbit	r3, r3
 80035ea:	61bb      	str	r3, [r7, #24]
  return result;
 80035ec:	69bb      	ldr	r3, [r7, #24]
 80035ee:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80035f0:	6a3b      	ldr	r3, [r7, #32]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d101      	bne.n	80035fa <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 80035f6:	2320      	movs	r3, #32
 80035f8:	e003      	b.n	8003602 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 80035fa:	6a3b      	ldr	r3, [r7, #32]
 80035fc:	fab3 f383 	clz	r3, r3
 8003600:	b2db      	uxtb	r3, r3
 8003602:	3301      	adds	r3, #1
 8003604:	f003 031f 	and.w	r3, r3, #31
 8003608:	2101      	movs	r1, #1
 800360a:	fa01 f303 	lsl.w	r3, r1, r3
 800360e:	ea42 0103 	orr.w	r1, r2, r3
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800361a:	2b00      	cmp	r3, #0
 800361c:	d10d      	bne.n	800363a <HAL_ADC_ConfigChannel+0x65e>
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	0e9b      	lsrs	r3, r3, #26
 8003624:	3301      	adds	r3, #1
 8003626:	f003 021f 	and.w	r2, r3, #31
 800362a:	4613      	mov	r3, r2
 800362c:	005b      	lsls	r3, r3, #1
 800362e:	4413      	add	r3, r2
 8003630:	3b1e      	subs	r3, #30
 8003632:	051b      	lsls	r3, r3, #20
 8003634:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003638:	e01e      	b.n	8003678 <HAL_ADC_ConfigChannel+0x69c>
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	fa93 f3a3 	rbit	r3, r3
 8003646:	60fb      	str	r3, [r7, #12]
  return result;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d104      	bne.n	800365c <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8003652:	2320      	movs	r3, #32
 8003654:	e006      	b.n	8003664 <HAL_ADC_ConfigChannel+0x688>
 8003656:	bf00      	nop
 8003658:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	fab3 f383 	clz	r3, r3
 8003662:	b2db      	uxtb	r3, r3
 8003664:	3301      	adds	r3, #1
 8003666:	f003 021f 	and.w	r2, r3, #31
 800366a:	4613      	mov	r3, r2
 800366c:	005b      	lsls	r3, r3, #1
 800366e:	4413      	add	r3, r2
 8003670:	3b1e      	subs	r3, #30
 8003672:	051b      	lsls	r3, r3, #20
 8003674:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003678:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800367a:	683a      	ldr	r2, [r7, #0]
 800367c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800367e:	4619      	mov	r1, r3
 8003680:	f7ff f81e 	bl	80026c0 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	4b44      	ldr	r3, [pc, #272]	@ (800379c <HAL_ADC_ConfigChannel+0x7c0>)
 800368a:	4013      	ands	r3, r2
 800368c:	2b00      	cmp	r3, #0
 800368e:	d07a      	beq.n	8003786 <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003690:	4843      	ldr	r0, [pc, #268]	@ (80037a0 <HAL_ADC_ConfigChannel+0x7c4>)
 8003692:	f7fe ff73 	bl	800257c <LL_ADC_GetCommonPathInternalCh>
 8003696:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a41      	ldr	r2, [pc, #260]	@ (80037a4 <HAL_ADC_ConfigChannel+0x7c8>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d12c      	bne.n	80036fe <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80036a4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80036a8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d126      	bne.n	80036fe <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a3c      	ldr	r2, [pc, #240]	@ (80037a8 <HAL_ADC_ConfigChannel+0x7cc>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d004      	beq.n	80036c4 <HAL_ADC_ConfigChannel+0x6e8>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a3b      	ldr	r2, [pc, #236]	@ (80037ac <HAL_ADC_ConfigChannel+0x7d0>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d15d      	bne.n	8003780 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80036c4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80036c8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80036cc:	4619      	mov	r1, r3
 80036ce:	4834      	ldr	r0, [pc, #208]	@ (80037a0 <HAL_ADC_ConfigChannel+0x7c4>)
 80036d0:	f7fe ff41 	bl	8002556 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80036d4:	4b36      	ldr	r3, [pc, #216]	@ (80037b0 <HAL_ADC_ConfigChannel+0x7d4>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	099b      	lsrs	r3, r3, #6
 80036da:	4a36      	ldr	r2, [pc, #216]	@ (80037b4 <HAL_ADC_ConfigChannel+0x7d8>)
 80036dc:	fba2 2303 	umull	r2, r3, r2, r3
 80036e0:	099b      	lsrs	r3, r3, #6
 80036e2:	1c5a      	adds	r2, r3, #1
 80036e4:	4613      	mov	r3, r2
 80036e6:	005b      	lsls	r3, r3, #1
 80036e8:	4413      	add	r3, r2
 80036ea:	009b      	lsls	r3, r3, #2
 80036ec:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80036ee:	e002      	b.n	80036f6 <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	3b01      	subs	r3, #1
 80036f4:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d1f9      	bne.n	80036f0 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80036fc:	e040      	b.n	8003780 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a2d      	ldr	r2, [pc, #180]	@ (80037b8 <HAL_ADC_ConfigChannel+0x7dc>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d118      	bne.n	800373a <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003708:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800370c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003710:	2b00      	cmp	r3, #0
 8003712:	d112      	bne.n	800373a <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a23      	ldr	r2, [pc, #140]	@ (80037a8 <HAL_ADC_ConfigChannel+0x7cc>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d004      	beq.n	8003728 <HAL_ADC_ConfigChannel+0x74c>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a22      	ldr	r2, [pc, #136]	@ (80037ac <HAL_ADC_ConfigChannel+0x7d0>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d12d      	bne.n	8003784 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003728:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800372c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003730:	4619      	mov	r1, r3
 8003732:	481b      	ldr	r0, [pc, #108]	@ (80037a0 <HAL_ADC_ConfigChannel+0x7c4>)
 8003734:	f7fe ff0f 	bl	8002556 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003738:	e024      	b.n	8003784 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a1f      	ldr	r2, [pc, #124]	@ (80037bc <HAL_ADC_ConfigChannel+0x7e0>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d120      	bne.n	8003786 <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003744:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003748:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800374c:	2b00      	cmp	r3, #0
 800374e:	d11a      	bne.n	8003786 <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a14      	ldr	r2, [pc, #80]	@ (80037a8 <HAL_ADC_ConfigChannel+0x7cc>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d115      	bne.n	8003786 <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800375a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800375e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003762:	4619      	mov	r1, r3
 8003764:	480e      	ldr	r0, [pc, #56]	@ (80037a0 <HAL_ADC_ConfigChannel+0x7c4>)
 8003766:	f7fe fef6 	bl	8002556 <LL_ADC_SetCommonPathInternalCh>
 800376a:	e00c      	b.n	8003786 <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003770:	f043 0220 	orr.w	r2, r3, #32
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003778:	2301      	movs	r3, #1
 800377a:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800377e:	e002      	b.n	8003786 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003780:	bf00      	nop
 8003782:	e000      	b.n	8003786 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003784:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2200      	movs	r2, #0
 800378a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800378e:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8003792:	4618      	mov	r0, r3
 8003794:	37d8      	adds	r7, #216	@ 0xd8
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}
 800379a:	bf00      	nop
 800379c:	80080000 	.word	0x80080000
 80037a0:	50040300 	.word	0x50040300
 80037a4:	c7520000 	.word	0xc7520000
 80037a8:	50040000 	.word	0x50040000
 80037ac:	50040200 	.word	0x50040200
 80037b0:	20000004 	.word	0x20000004
 80037b4:	053e2d63 	.word	0x053e2d63
 80037b8:	cb840000 	.word	0xcb840000
 80037bc:	80000001 	.word	0x80000001

080037c0 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b088      	sub	sp, #32
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
 80037c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80037ca:	2300      	movs	r3, #0
 80037cc:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4618      	mov	r0, r3
 80037d8:	f7ff f8a2 	bl	8002920 <LL_ADC_REG_IsConversionOngoing>
 80037dc:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4618      	mov	r0, r3
 80037e4:	f7ff f8c3 	bl	800296e <LL_ADC_INJ_IsConversionOngoing>
 80037e8:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d103      	bne.n	80037f8 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	f000 8098 	beq.w	8003928 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	68db      	ldr	r3, [r3, #12]
 80037fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003802:	2b00      	cmp	r3, #0
 8003804:	d02a      	beq.n	800385c <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	7e5b      	ldrb	r3, [r3, #25]
 800380a:	2b01      	cmp	r3, #1
 800380c:	d126      	bne.n	800385c <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	7e1b      	ldrb	r3, [r3, #24]
 8003812:	2b01      	cmp	r3, #1
 8003814:	d122      	bne.n	800385c <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8003816:	2301      	movs	r3, #1
 8003818:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800381a:	e014      	b.n	8003846 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 800381c:	69fb      	ldr	r3, [r7, #28]
 800381e:	4a45      	ldr	r2, [pc, #276]	@ (8003934 <ADC_ConversionStop+0x174>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d90d      	bls.n	8003840 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003828:	f043 0210 	orr.w	r2, r3, #16
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003834:	f043 0201 	orr.w	r2, r3, #1
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800383c:	2301      	movs	r3, #1
 800383e:	e074      	b.n	800392a <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8003840:	69fb      	ldr	r3, [r7, #28]
 8003842:	3301      	adds	r3, #1
 8003844:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003850:	2b40      	cmp	r3, #64	@ 0x40
 8003852:	d1e3      	bne.n	800381c <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	2240      	movs	r2, #64	@ 0x40
 800385a:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 800385c:	69bb      	ldr	r3, [r7, #24]
 800385e:	2b02      	cmp	r3, #2
 8003860:	d014      	beq.n	800388c <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4618      	mov	r0, r3
 8003868:	f7ff f85a 	bl	8002920 <LL_ADC_REG_IsConversionOngoing>
 800386c:	4603      	mov	r3, r0
 800386e:	2b00      	cmp	r3, #0
 8003870:	d00c      	beq.n	800388c <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4618      	mov	r0, r3
 8003878:	f7ff f817 	bl	80028aa <LL_ADC_IsDisableOngoing>
 800387c:	4603      	mov	r3, r0
 800387e:	2b00      	cmp	r3, #0
 8003880:	d104      	bne.n	800388c <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4618      	mov	r0, r3
 8003888:	f7ff f836 	bl	80028f8 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 800388c:	69bb      	ldr	r3, [r7, #24]
 800388e:	2b01      	cmp	r3, #1
 8003890:	d014      	beq.n	80038bc <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4618      	mov	r0, r3
 8003898:	f7ff f869 	bl	800296e <LL_ADC_INJ_IsConversionOngoing>
 800389c:	4603      	mov	r3, r0
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d00c      	beq.n	80038bc <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4618      	mov	r0, r3
 80038a8:	f7fe ffff 	bl	80028aa <LL_ADC_IsDisableOngoing>
 80038ac:	4603      	mov	r3, r0
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d104      	bne.n	80038bc <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4618      	mov	r0, r3
 80038b8:	f7ff f845 	bl	8002946 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 80038bc:	69bb      	ldr	r3, [r7, #24]
 80038be:	2b02      	cmp	r3, #2
 80038c0:	d005      	beq.n	80038ce <ADC_ConversionStop+0x10e>
 80038c2:	69bb      	ldr	r3, [r7, #24]
 80038c4:	2b03      	cmp	r3, #3
 80038c6:	d105      	bne.n	80038d4 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80038c8:	230c      	movs	r3, #12
 80038ca:	617b      	str	r3, [r7, #20]
        break;
 80038cc:	e005      	b.n	80038da <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80038ce:	2308      	movs	r3, #8
 80038d0:	617b      	str	r3, [r7, #20]
        break;
 80038d2:	e002      	b.n	80038da <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80038d4:	2304      	movs	r3, #4
 80038d6:	617b      	str	r3, [r7, #20]
        break;
 80038d8:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80038da:	f7fe fe1d 	bl	8002518 <HAL_GetTick>
 80038de:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80038e0:	e01b      	b.n	800391a <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80038e2:	f7fe fe19 	bl	8002518 <HAL_GetTick>
 80038e6:	4602      	mov	r2, r0
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	1ad3      	subs	r3, r2, r3
 80038ec:	2b05      	cmp	r3, #5
 80038ee:	d914      	bls.n	800391a <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	689a      	ldr	r2, [r3, #8]
 80038f6:	697b      	ldr	r3, [r7, #20]
 80038f8:	4013      	ands	r3, r2
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d00d      	beq.n	800391a <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003902:	f043 0210 	orr.w	r2, r3, #16
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800390e:	f043 0201 	orr.w	r2, r3, #1
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	e007      	b.n	800392a <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	689a      	ldr	r2, [r3, #8]
 8003920:	697b      	ldr	r3, [r7, #20]
 8003922:	4013      	ands	r3, r2
 8003924:	2b00      	cmp	r3, #0
 8003926:	d1dc      	bne.n	80038e2 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003928:	2300      	movs	r3, #0
}
 800392a:	4618      	mov	r0, r3
 800392c:	3720      	adds	r7, #32
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}
 8003932:	bf00      	nop
 8003934:	a33fffff 	.word	0xa33fffff

08003938 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b084      	sub	sp, #16
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003940:	2300      	movs	r3, #0
 8003942:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4618      	mov	r0, r3
 800394a:	f7fe ff9b 	bl	8002884 <LL_ADC_IsEnabled>
 800394e:	4603      	mov	r3, r0
 8003950:	2b00      	cmp	r3, #0
 8003952:	d169      	bne.n	8003a28 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	689a      	ldr	r2, [r3, #8]
 800395a:	4b36      	ldr	r3, [pc, #216]	@ (8003a34 <ADC_Enable+0xfc>)
 800395c:	4013      	ands	r3, r2
 800395e:	2b00      	cmp	r3, #0
 8003960:	d00d      	beq.n	800397e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003966:	f043 0210 	orr.w	r2, r3, #16
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003972:	f043 0201 	orr.w	r2, r3, #1
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	e055      	b.n	8003a2a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4618      	mov	r0, r3
 8003984:	f7fe ff56 	bl	8002834 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003988:	482b      	ldr	r0, [pc, #172]	@ (8003a38 <ADC_Enable+0x100>)
 800398a:	f7fe fdf7 	bl	800257c <LL_ADC_GetCommonPathInternalCh>
 800398e:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003990:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003994:	2b00      	cmp	r3, #0
 8003996:	d013      	beq.n	80039c0 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003998:	4b28      	ldr	r3, [pc, #160]	@ (8003a3c <ADC_Enable+0x104>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	099b      	lsrs	r3, r3, #6
 800399e:	4a28      	ldr	r2, [pc, #160]	@ (8003a40 <ADC_Enable+0x108>)
 80039a0:	fba2 2303 	umull	r2, r3, r2, r3
 80039a4:	099b      	lsrs	r3, r3, #6
 80039a6:	1c5a      	adds	r2, r3, #1
 80039a8:	4613      	mov	r3, r2
 80039aa:	005b      	lsls	r3, r3, #1
 80039ac:	4413      	add	r3, r2
 80039ae:	009b      	lsls	r3, r3, #2
 80039b0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80039b2:	e002      	b.n	80039ba <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	3b01      	subs	r3, #1
 80039b8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d1f9      	bne.n	80039b4 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80039c0:	f7fe fdaa 	bl	8002518 <HAL_GetTick>
 80039c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80039c6:	e028      	b.n	8003a1a <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4618      	mov	r0, r3
 80039ce:	f7fe ff59 	bl	8002884 <LL_ADC_IsEnabled>
 80039d2:	4603      	mov	r3, r0
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d104      	bne.n	80039e2 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4618      	mov	r0, r3
 80039de:	f7fe ff29 	bl	8002834 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80039e2:	f7fe fd99 	bl	8002518 <HAL_GetTick>
 80039e6:	4602      	mov	r2, r0
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	1ad3      	subs	r3, r2, r3
 80039ec:	2b02      	cmp	r3, #2
 80039ee:	d914      	bls.n	8003a1a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f003 0301 	and.w	r3, r3, #1
 80039fa:	2b01      	cmp	r3, #1
 80039fc:	d00d      	beq.n	8003a1a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a02:	f043 0210 	orr.w	r2, r3, #16
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a0e:	f043 0201 	orr.w	r2, r3, #1
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	e007      	b.n	8003a2a <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 0301 	and.w	r3, r3, #1
 8003a24:	2b01      	cmp	r3, #1
 8003a26:	d1cf      	bne.n	80039c8 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003a28:	2300      	movs	r3, #0
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	3710      	adds	r7, #16
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}
 8003a32:	bf00      	nop
 8003a34:	8000003f 	.word	0x8000003f
 8003a38:	50040300 	.word	0x50040300
 8003a3c:	20000004 	.word	0x20000004
 8003a40:	053e2d63 	.word	0x053e2d63

08003a44 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b084      	sub	sp, #16
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4618      	mov	r0, r3
 8003a52:	f7fe ff2a 	bl	80028aa <LL_ADC_IsDisableOngoing>
 8003a56:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	f7fe ff11 	bl	8002884 <LL_ADC_IsEnabled>
 8003a62:	4603      	mov	r3, r0
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d047      	beq.n	8003af8 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d144      	bne.n	8003af8 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	689b      	ldr	r3, [r3, #8]
 8003a74:	f003 030d 	and.w	r3, r3, #13
 8003a78:	2b01      	cmp	r3, #1
 8003a7a:	d10c      	bne.n	8003a96 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4618      	mov	r0, r3
 8003a82:	f7fe feeb 	bl	800285c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	2203      	movs	r2, #3
 8003a8c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003a8e:	f7fe fd43 	bl	8002518 <HAL_GetTick>
 8003a92:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003a94:	e029      	b.n	8003aea <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a9a:	f043 0210 	orr.w	r2, r3, #16
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003aa6:	f043 0201 	orr.w	r2, r3, #1
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	e023      	b.n	8003afa <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003ab2:	f7fe fd31 	bl	8002518 <HAL_GetTick>
 8003ab6:	4602      	mov	r2, r0
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	1ad3      	subs	r3, r2, r3
 8003abc:	2b02      	cmp	r3, #2
 8003abe:	d914      	bls.n	8003aea <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	689b      	ldr	r3, [r3, #8]
 8003ac6:	f003 0301 	and.w	r3, r3, #1
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d00d      	beq.n	8003aea <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ad2:	f043 0210 	orr.w	r2, r3, #16
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ade:	f043 0201 	orr.w	r2, r3, #1
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e007      	b.n	8003afa <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	f003 0301 	and.w	r3, r3, #1
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d1dc      	bne.n	8003ab2 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003af8:	2300      	movs	r3, #0
}
 8003afa:	4618      	mov	r0, r3
 8003afc:	3710      	adds	r7, #16
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}

08003b02 <LL_ADC_StartCalibration>:
{
 8003b02:	b480      	push	{r7}
 8003b04:	b083      	sub	sp, #12
 8003b06:	af00      	add	r7, sp, #0
 8003b08:	6078      	str	r0, [r7, #4]
 8003b0a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	689b      	ldr	r3, [r3, #8]
 8003b10:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8003b14:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003b18:	683a      	ldr	r2, [r7, #0]
 8003b1a:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	609a      	str	r2, [r3, #8]
}
 8003b28:	bf00      	nop
 8003b2a:	370c      	adds	r7, #12
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b32:	4770      	bx	lr

08003b34 <LL_ADC_IsCalibrationOnGoing>:
{
 8003b34:	b480      	push	{r7}
 8003b36:	b083      	sub	sp, #12
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003b44:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003b48:	d101      	bne.n	8003b4e <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	e000      	b.n	8003b50 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003b4e:	2300      	movs	r3, #0
}
 8003b50:	4618      	mov	r0, r3
 8003b52:	370c      	adds	r7, #12
 8003b54:	46bd      	mov	sp, r7
 8003b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5a:	4770      	bx	lr

08003b5c <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b084      	sub	sp, #16
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
 8003b64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003b66:	2300      	movs	r3, #0
 8003b68:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003b70:	2b01      	cmp	r3, #1
 8003b72:	d101      	bne.n	8003b78 <HAL_ADCEx_Calibration_Start+0x1c>
 8003b74:	2302      	movs	r3, #2
 8003b76:	e04d      	b.n	8003c14 <HAL_ADCEx_Calibration_Start+0xb8>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003b80:	6878      	ldr	r0, [r7, #4]
 8003b82:	f7ff ff5f 	bl	8003a44 <ADC_Disable>
 8003b86:	4603      	mov	r3, r0
 8003b88:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003b8a:	7bfb      	ldrb	r3, [r7, #15]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d136      	bne.n	8003bfe <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b94:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003b98:	f023 0302 	bic.w	r3, r3, #2
 8003b9c:	f043 0202 	orr.w	r2, r3, #2
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	655a      	str	r2, [r3, #84]	@ 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	6839      	ldr	r1, [r7, #0]
 8003baa:	4618      	mov	r0, r3
 8003bac:	f7ff ffa9 	bl	8003b02 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003bb0:	e014      	b.n	8003bdc <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	3301      	adds	r3, #1
 8003bb6:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	f5b3 2f91 	cmp.w	r3, #296960	@ 0x48800
 8003bbe:	d30d      	bcc.n	8003bdc <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bc4:	f023 0312 	bic.w	r3, r3, #18
 8003bc8:	f043 0210 	orr.w	r2, r3, #16
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_ERROR;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	e01b      	b.n	8003c14 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4618      	mov	r0, r3
 8003be2:	f7ff ffa7 	bl	8003b34 <LL_ADC_IsCalibrationOnGoing>
 8003be6:	4603      	mov	r3, r0
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d1e2      	bne.n	8003bb2 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bf0:	f023 0303 	bic.w	r3, r3, #3
 8003bf4:	f043 0201 	orr.w	r2, r3, #1
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	655a      	str	r2, [r3, #84]	@ 0x54
 8003bfc:	e005      	b.n	8003c0a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c02:	f043 0210 	orr.w	r2, r3, #16
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003c12:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c14:	4618      	mov	r0, r3
 8003c16:	3710      	adds	r7, #16
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bd80      	pop	{r7, pc}

08003c1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b085      	sub	sp, #20
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	f003 0307 	and.w	r3, r3, #7
 8003c2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c2c:	4b0c      	ldr	r3, [pc, #48]	@ (8003c60 <__NVIC_SetPriorityGrouping+0x44>)
 8003c2e:	68db      	ldr	r3, [r3, #12]
 8003c30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c32:	68ba      	ldr	r2, [r7, #8]
 8003c34:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003c38:	4013      	ands	r3, r2
 8003c3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003c44:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003c48:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c4e:	4a04      	ldr	r2, [pc, #16]	@ (8003c60 <__NVIC_SetPriorityGrouping+0x44>)
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	60d3      	str	r3, [r2, #12]
}
 8003c54:	bf00      	nop
 8003c56:	3714      	adds	r7, #20
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5e:	4770      	bx	lr
 8003c60:	e000ed00 	.word	0xe000ed00

08003c64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c64:	b480      	push	{r7}
 8003c66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c68:	4b04      	ldr	r3, [pc, #16]	@ (8003c7c <__NVIC_GetPriorityGrouping+0x18>)
 8003c6a:	68db      	ldr	r3, [r3, #12]
 8003c6c:	0a1b      	lsrs	r3, r3, #8
 8003c6e:	f003 0307 	and.w	r3, r3, #7
}
 8003c72:	4618      	mov	r0, r3
 8003c74:	46bd      	mov	sp, r7
 8003c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7a:	4770      	bx	lr
 8003c7c:	e000ed00 	.word	0xe000ed00

08003c80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b083      	sub	sp, #12
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	4603      	mov	r3, r0
 8003c88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	db0b      	blt.n	8003caa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c92:	79fb      	ldrb	r3, [r7, #7]
 8003c94:	f003 021f 	and.w	r2, r3, #31
 8003c98:	4907      	ldr	r1, [pc, #28]	@ (8003cb8 <__NVIC_EnableIRQ+0x38>)
 8003c9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c9e:	095b      	lsrs	r3, r3, #5
 8003ca0:	2001      	movs	r0, #1
 8003ca2:	fa00 f202 	lsl.w	r2, r0, r2
 8003ca6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003caa:	bf00      	nop
 8003cac:	370c      	adds	r7, #12
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb4:	4770      	bx	lr
 8003cb6:	bf00      	nop
 8003cb8:	e000e100 	.word	0xe000e100

08003cbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b083      	sub	sp, #12
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	6039      	str	r1, [r7, #0]
 8003cc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003cc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	db0a      	blt.n	8003ce6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	b2da      	uxtb	r2, r3
 8003cd4:	490c      	ldr	r1, [pc, #48]	@ (8003d08 <__NVIC_SetPriority+0x4c>)
 8003cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cda:	0112      	lsls	r2, r2, #4
 8003cdc:	b2d2      	uxtb	r2, r2
 8003cde:	440b      	add	r3, r1
 8003ce0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003ce4:	e00a      	b.n	8003cfc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	b2da      	uxtb	r2, r3
 8003cea:	4908      	ldr	r1, [pc, #32]	@ (8003d0c <__NVIC_SetPriority+0x50>)
 8003cec:	79fb      	ldrb	r3, [r7, #7]
 8003cee:	f003 030f 	and.w	r3, r3, #15
 8003cf2:	3b04      	subs	r3, #4
 8003cf4:	0112      	lsls	r2, r2, #4
 8003cf6:	b2d2      	uxtb	r2, r2
 8003cf8:	440b      	add	r3, r1
 8003cfa:	761a      	strb	r2, [r3, #24]
}
 8003cfc:	bf00      	nop
 8003cfe:	370c      	adds	r7, #12
 8003d00:	46bd      	mov	sp, r7
 8003d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d06:	4770      	bx	lr
 8003d08:	e000e100 	.word	0xe000e100
 8003d0c:	e000ed00 	.word	0xe000ed00

08003d10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b089      	sub	sp, #36	@ 0x24
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	60f8      	str	r0, [r7, #12]
 8003d18:	60b9      	str	r1, [r7, #8]
 8003d1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	f003 0307 	and.w	r3, r3, #7
 8003d22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d24:	69fb      	ldr	r3, [r7, #28]
 8003d26:	f1c3 0307 	rsb	r3, r3, #7
 8003d2a:	2b04      	cmp	r3, #4
 8003d2c:	bf28      	it	cs
 8003d2e:	2304      	movcs	r3, #4
 8003d30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d32:	69fb      	ldr	r3, [r7, #28]
 8003d34:	3304      	adds	r3, #4
 8003d36:	2b06      	cmp	r3, #6
 8003d38:	d902      	bls.n	8003d40 <NVIC_EncodePriority+0x30>
 8003d3a:	69fb      	ldr	r3, [r7, #28]
 8003d3c:	3b03      	subs	r3, #3
 8003d3e:	e000      	b.n	8003d42 <NVIC_EncodePriority+0x32>
 8003d40:	2300      	movs	r3, #0
 8003d42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d44:	f04f 32ff 	mov.w	r2, #4294967295
 8003d48:	69bb      	ldr	r3, [r7, #24]
 8003d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d4e:	43da      	mvns	r2, r3
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	401a      	ands	r2, r3
 8003d54:	697b      	ldr	r3, [r7, #20]
 8003d56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d58:	f04f 31ff 	mov.w	r1, #4294967295
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	fa01 f303 	lsl.w	r3, r1, r3
 8003d62:	43d9      	mvns	r1, r3
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d68:	4313      	orrs	r3, r2
         );
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	3724      	adds	r7, #36	@ 0x24
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d74:	4770      	bx	lr
	...

08003d78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b082      	sub	sp, #8
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	3b01      	subs	r3, #1
 8003d84:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003d88:	d301      	bcc.n	8003d8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	e00f      	b.n	8003dae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d8e:	4a0a      	ldr	r2, [pc, #40]	@ (8003db8 <SysTick_Config+0x40>)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	3b01      	subs	r3, #1
 8003d94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003d96:	210f      	movs	r1, #15
 8003d98:	f04f 30ff 	mov.w	r0, #4294967295
 8003d9c:	f7ff ff8e 	bl	8003cbc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003da0:	4b05      	ldr	r3, [pc, #20]	@ (8003db8 <SysTick_Config+0x40>)
 8003da2:	2200      	movs	r2, #0
 8003da4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003da6:	4b04      	ldr	r3, [pc, #16]	@ (8003db8 <SysTick_Config+0x40>)
 8003da8:	2207      	movs	r2, #7
 8003daa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003dac:	2300      	movs	r3, #0
}
 8003dae:	4618      	mov	r0, r3
 8003db0:	3708      	adds	r7, #8
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}
 8003db6:	bf00      	nop
 8003db8:	e000e010 	.word	0xe000e010

08003dbc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b082      	sub	sp, #8
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003dc4:	6878      	ldr	r0, [r7, #4]
 8003dc6:	f7ff ff29 	bl	8003c1c <__NVIC_SetPriorityGrouping>
}
 8003dca:	bf00      	nop
 8003dcc:	3708      	adds	r7, #8
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}

08003dd2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003dd2:	b580      	push	{r7, lr}
 8003dd4:	b086      	sub	sp, #24
 8003dd6:	af00      	add	r7, sp, #0
 8003dd8:	4603      	mov	r3, r0
 8003dda:	60b9      	str	r1, [r7, #8]
 8003ddc:	607a      	str	r2, [r7, #4]
 8003dde:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003de0:	2300      	movs	r3, #0
 8003de2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003de4:	f7ff ff3e 	bl	8003c64 <__NVIC_GetPriorityGrouping>
 8003de8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003dea:	687a      	ldr	r2, [r7, #4]
 8003dec:	68b9      	ldr	r1, [r7, #8]
 8003dee:	6978      	ldr	r0, [r7, #20]
 8003df0:	f7ff ff8e 	bl	8003d10 <NVIC_EncodePriority>
 8003df4:	4602      	mov	r2, r0
 8003df6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003dfa:	4611      	mov	r1, r2
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f7ff ff5d 	bl	8003cbc <__NVIC_SetPriority>
}
 8003e02:	bf00      	nop
 8003e04:	3718      	adds	r7, #24
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}

08003e0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e0a:	b580      	push	{r7, lr}
 8003e0c:	b082      	sub	sp, #8
 8003e0e:	af00      	add	r7, sp, #0
 8003e10:	4603      	mov	r3, r0
 8003e12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f7ff ff31 	bl	8003c80 <__NVIC_EnableIRQ>
}
 8003e1e:	bf00      	nop
 8003e20:	3708      	adds	r7, #8
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}

08003e26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003e26:	b580      	push	{r7, lr}
 8003e28:	b082      	sub	sp, #8
 8003e2a:	af00      	add	r7, sp, #0
 8003e2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	f7ff ffa2 	bl	8003d78 <SysTick_Config>
 8003e34:	4603      	mov	r3, r0
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	3708      	adds	r7, #8
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}
	...

08003e40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e40:	b480      	push	{r7}
 8003e42:	b087      	sub	sp, #28
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
 8003e48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e4e:	e17f      	b.n	8004150 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	681a      	ldr	r2, [r3, #0]
 8003e54:	2101      	movs	r1, #1
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	fa01 f303 	lsl.w	r3, r1, r3
 8003e5c:	4013      	ands	r3, r2
 8003e5e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	f000 8171 	beq.w	800414a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	f003 0303 	and.w	r3, r3, #3
 8003e70:	2b01      	cmp	r3, #1
 8003e72:	d005      	beq.n	8003e80 <HAL_GPIO_Init+0x40>
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	f003 0303 	and.w	r3, r3, #3
 8003e7c:	2b02      	cmp	r3, #2
 8003e7e:	d130      	bne.n	8003ee2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	689b      	ldr	r3, [r3, #8]
 8003e84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003e86:	697b      	ldr	r3, [r7, #20]
 8003e88:	005b      	lsls	r3, r3, #1
 8003e8a:	2203      	movs	r2, #3
 8003e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e90:	43db      	mvns	r3, r3
 8003e92:	693a      	ldr	r2, [r7, #16]
 8003e94:	4013      	ands	r3, r2
 8003e96:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	68da      	ldr	r2, [r3, #12]
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	005b      	lsls	r3, r3, #1
 8003ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea4:	693a      	ldr	r2, [r7, #16]
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	693a      	ldr	r2, [r7, #16]
 8003eae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	fa02 f303 	lsl.w	r3, r2, r3
 8003ebe:	43db      	mvns	r3, r3
 8003ec0:	693a      	ldr	r2, [r7, #16]
 8003ec2:	4013      	ands	r3, r2
 8003ec4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	091b      	lsrs	r3, r3, #4
 8003ecc:	f003 0201 	and.w	r2, r3, #1
 8003ed0:	697b      	ldr	r3, [r7, #20]
 8003ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed6:	693a      	ldr	r2, [r7, #16]
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	693a      	ldr	r2, [r7, #16]
 8003ee0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	f003 0303 	and.w	r3, r3, #3
 8003eea:	2b03      	cmp	r3, #3
 8003eec:	d118      	bne.n	8003f20 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ef2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003ef4:	2201      	movs	r2, #1
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8003efc:	43db      	mvns	r3, r3
 8003efe:	693a      	ldr	r2, [r7, #16]
 8003f00:	4013      	ands	r3, r2
 8003f02:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	08db      	lsrs	r3, r3, #3
 8003f0a:	f003 0201 	and.w	r2, r3, #1
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	fa02 f303 	lsl.w	r3, r2, r3
 8003f14:	693a      	ldr	r2, [r7, #16]
 8003f16:	4313      	orrs	r3, r2
 8003f18:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	693a      	ldr	r2, [r7, #16]
 8003f1e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	f003 0303 	and.w	r3, r3, #3
 8003f28:	2b03      	cmp	r3, #3
 8003f2a:	d017      	beq.n	8003f5c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	68db      	ldr	r3, [r3, #12]
 8003f30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003f32:	697b      	ldr	r3, [r7, #20]
 8003f34:	005b      	lsls	r3, r3, #1
 8003f36:	2203      	movs	r2, #3
 8003f38:	fa02 f303 	lsl.w	r3, r2, r3
 8003f3c:	43db      	mvns	r3, r3
 8003f3e:	693a      	ldr	r2, [r7, #16]
 8003f40:	4013      	ands	r3, r2
 8003f42:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	689a      	ldr	r2, [r3, #8]
 8003f48:	697b      	ldr	r3, [r7, #20]
 8003f4a:	005b      	lsls	r3, r3, #1
 8003f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f50:	693a      	ldr	r2, [r7, #16]
 8003f52:	4313      	orrs	r3, r2
 8003f54:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	693a      	ldr	r2, [r7, #16]
 8003f5a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	f003 0303 	and.w	r3, r3, #3
 8003f64:	2b02      	cmp	r3, #2
 8003f66:	d123      	bne.n	8003fb0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003f68:	697b      	ldr	r3, [r7, #20]
 8003f6a:	08da      	lsrs	r2, r3, #3
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	3208      	adds	r2, #8
 8003f70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f74:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	f003 0307 	and.w	r3, r3, #7
 8003f7c:	009b      	lsls	r3, r3, #2
 8003f7e:	220f      	movs	r2, #15
 8003f80:	fa02 f303 	lsl.w	r3, r2, r3
 8003f84:	43db      	mvns	r3, r3
 8003f86:	693a      	ldr	r2, [r7, #16]
 8003f88:	4013      	ands	r3, r2
 8003f8a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	691a      	ldr	r2, [r3, #16]
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	f003 0307 	and.w	r3, r3, #7
 8003f96:	009b      	lsls	r3, r3, #2
 8003f98:	fa02 f303 	lsl.w	r3, r2, r3
 8003f9c:	693a      	ldr	r2, [r7, #16]
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003fa2:	697b      	ldr	r3, [r7, #20]
 8003fa4:	08da      	lsrs	r2, r3, #3
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	3208      	adds	r2, #8
 8003faa:	6939      	ldr	r1, [r7, #16]
 8003fac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	005b      	lsls	r3, r3, #1
 8003fba:	2203      	movs	r2, #3
 8003fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc0:	43db      	mvns	r3, r3
 8003fc2:	693a      	ldr	r2, [r7, #16]
 8003fc4:	4013      	ands	r3, r2
 8003fc6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	f003 0203 	and.w	r2, r3, #3
 8003fd0:	697b      	ldr	r3, [r7, #20]
 8003fd2:	005b      	lsls	r3, r3, #1
 8003fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd8:	693a      	ldr	r2, [r7, #16]
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	693a      	ldr	r2, [r7, #16]
 8003fe2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	f000 80ac 	beq.w	800414a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ff2:	4b5f      	ldr	r3, [pc, #380]	@ (8004170 <HAL_GPIO_Init+0x330>)
 8003ff4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ff6:	4a5e      	ldr	r2, [pc, #376]	@ (8004170 <HAL_GPIO_Init+0x330>)
 8003ff8:	f043 0301 	orr.w	r3, r3, #1
 8003ffc:	6613      	str	r3, [r2, #96]	@ 0x60
 8003ffe:	4b5c      	ldr	r3, [pc, #368]	@ (8004170 <HAL_GPIO_Init+0x330>)
 8004000:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004002:	f003 0301 	and.w	r3, r3, #1
 8004006:	60bb      	str	r3, [r7, #8]
 8004008:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800400a:	4a5a      	ldr	r2, [pc, #360]	@ (8004174 <HAL_GPIO_Init+0x334>)
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	089b      	lsrs	r3, r3, #2
 8004010:	3302      	adds	r3, #2
 8004012:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004016:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004018:	697b      	ldr	r3, [r7, #20]
 800401a:	f003 0303 	and.w	r3, r3, #3
 800401e:	009b      	lsls	r3, r3, #2
 8004020:	220f      	movs	r2, #15
 8004022:	fa02 f303 	lsl.w	r3, r2, r3
 8004026:	43db      	mvns	r3, r3
 8004028:	693a      	ldr	r2, [r7, #16]
 800402a:	4013      	ands	r3, r2
 800402c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004034:	d025      	beq.n	8004082 <HAL_GPIO_Init+0x242>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	4a4f      	ldr	r2, [pc, #316]	@ (8004178 <HAL_GPIO_Init+0x338>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d01f      	beq.n	800407e <HAL_GPIO_Init+0x23e>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	4a4e      	ldr	r2, [pc, #312]	@ (800417c <HAL_GPIO_Init+0x33c>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d019      	beq.n	800407a <HAL_GPIO_Init+0x23a>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	4a4d      	ldr	r2, [pc, #308]	@ (8004180 <HAL_GPIO_Init+0x340>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d013      	beq.n	8004076 <HAL_GPIO_Init+0x236>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	4a4c      	ldr	r2, [pc, #304]	@ (8004184 <HAL_GPIO_Init+0x344>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d00d      	beq.n	8004072 <HAL_GPIO_Init+0x232>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	4a4b      	ldr	r2, [pc, #300]	@ (8004188 <HAL_GPIO_Init+0x348>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d007      	beq.n	800406e <HAL_GPIO_Init+0x22e>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	4a4a      	ldr	r2, [pc, #296]	@ (800418c <HAL_GPIO_Init+0x34c>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d101      	bne.n	800406a <HAL_GPIO_Init+0x22a>
 8004066:	2306      	movs	r3, #6
 8004068:	e00c      	b.n	8004084 <HAL_GPIO_Init+0x244>
 800406a:	2307      	movs	r3, #7
 800406c:	e00a      	b.n	8004084 <HAL_GPIO_Init+0x244>
 800406e:	2305      	movs	r3, #5
 8004070:	e008      	b.n	8004084 <HAL_GPIO_Init+0x244>
 8004072:	2304      	movs	r3, #4
 8004074:	e006      	b.n	8004084 <HAL_GPIO_Init+0x244>
 8004076:	2303      	movs	r3, #3
 8004078:	e004      	b.n	8004084 <HAL_GPIO_Init+0x244>
 800407a:	2302      	movs	r3, #2
 800407c:	e002      	b.n	8004084 <HAL_GPIO_Init+0x244>
 800407e:	2301      	movs	r3, #1
 8004080:	e000      	b.n	8004084 <HAL_GPIO_Init+0x244>
 8004082:	2300      	movs	r3, #0
 8004084:	697a      	ldr	r2, [r7, #20]
 8004086:	f002 0203 	and.w	r2, r2, #3
 800408a:	0092      	lsls	r2, r2, #2
 800408c:	4093      	lsls	r3, r2
 800408e:	693a      	ldr	r2, [r7, #16]
 8004090:	4313      	orrs	r3, r2
 8004092:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004094:	4937      	ldr	r1, [pc, #220]	@ (8004174 <HAL_GPIO_Init+0x334>)
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	089b      	lsrs	r3, r3, #2
 800409a:	3302      	adds	r3, #2
 800409c:	693a      	ldr	r2, [r7, #16]
 800409e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80040a2:	4b3b      	ldr	r3, [pc, #236]	@ (8004190 <HAL_GPIO_Init+0x350>)
 80040a4:	689b      	ldr	r3, [r3, #8]
 80040a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	43db      	mvns	r3, r3
 80040ac:	693a      	ldr	r2, [r7, #16]
 80040ae:	4013      	ands	r3, r2
 80040b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d003      	beq.n	80040c6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80040be:	693a      	ldr	r2, [r7, #16]
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	4313      	orrs	r3, r2
 80040c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80040c6:	4a32      	ldr	r2, [pc, #200]	@ (8004190 <HAL_GPIO_Init+0x350>)
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80040cc:	4b30      	ldr	r3, [pc, #192]	@ (8004190 <HAL_GPIO_Init+0x350>)
 80040ce:	68db      	ldr	r3, [r3, #12]
 80040d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	43db      	mvns	r3, r3
 80040d6:	693a      	ldr	r2, [r7, #16]
 80040d8:	4013      	ands	r3, r2
 80040da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d003      	beq.n	80040f0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80040e8:	693a      	ldr	r2, [r7, #16]
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	4313      	orrs	r3, r2
 80040ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80040f0:	4a27      	ldr	r2, [pc, #156]	@ (8004190 <HAL_GPIO_Init+0x350>)
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80040f6:	4b26      	ldr	r3, [pc, #152]	@ (8004190 <HAL_GPIO_Init+0x350>)
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	43db      	mvns	r3, r3
 8004100:	693a      	ldr	r2, [r7, #16]
 8004102:	4013      	ands	r3, r2
 8004104:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800410e:	2b00      	cmp	r3, #0
 8004110:	d003      	beq.n	800411a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8004112:	693a      	ldr	r2, [r7, #16]
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	4313      	orrs	r3, r2
 8004118:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800411a:	4a1d      	ldr	r2, [pc, #116]	@ (8004190 <HAL_GPIO_Init+0x350>)
 800411c:	693b      	ldr	r3, [r7, #16]
 800411e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004120:	4b1b      	ldr	r3, [pc, #108]	@ (8004190 <HAL_GPIO_Init+0x350>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	43db      	mvns	r3, r3
 800412a:	693a      	ldr	r2, [r7, #16]
 800412c:	4013      	ands	r3, r2
 800412e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004138:	2b00      	cmp	r3, #0
 800413a:	d003      	beq.n	8004144 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800413c:	693a      	ldr	r2, [r7, #16]
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	4313      	orrs	r3, r2
 8004142:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004144:	4a12      	ldr	r2, [pc, #72]	@ (8004190 <HAL_GPIO_Init+0x350>)
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	3301      	adds	r3, #1
 800414e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	681a      	ldr	r2, [r3, #0]
 8004154:	697b      	ldr	r3, [r7, #20]
 8004156:	fa22 f303 	lsr.w	r3, r2, r3
 800415a:	2b00      	cmp	r3, #0
 800415c:	f47f ae78 	bne.w	8003e50 <HAL_GPIO_Init+0x10>
  }
}
 8004160:	bf00      	nop
 8004162:	bf00      	nop
 8004164:	371c      	adds	r7, #28
 8004166:	46bd      	mov	sp, r7
 8004168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416c:	4770      	bx	lr
 800416e:	bf00      	nop
 8004170:	40021000 	.word	0x40021000
 8004174:	40010000 	.word	0x40010000
 8004178:	48000400 	.word	0x48000400
 800417c:	48000800 	.word	0x48000800
 8004180:	48000c00 	.word	0x48000c00
 8004184:	48001000 	.word	0x48001000
 8004188:	48001400 	.word	0x48001400
 800418c:	48001800 	.word	0x48001800
 8004190:	40010400 	.word	0x40010400

08004194 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004194:	b480      	push	{r7}
 8004196:	b083      	sub	sp, #12
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
 800419c:	460b      	mov	r3, r1
 800419e:	807b      	strh	r3, [r7, #2]
 80041a0:	4613      	mov	r3, r2
 80041a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80041a4:	787b      	ldrb	r3, [r7, #1]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d003      	beq.n	80041b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80041aa:	887a      	ldrh	r2, [r7, #2]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80041b0:	e002      	b.n	80041b8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80041b2:	887a      	ldrh	r2, [r7, #2]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80041b8:	bf00      	nop
 80041ba:	370c      	adds	r7, #12
 80041bc:	46bd      	mov	sp, r7
 80041be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c2:	4770      	bx	lr

080041c4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80041c4:	b480      	push	{r7}
 80041c6:	b085      	sub	sp, #20
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
 80041cc:	460b      	mov	r3, r1
 80041ce:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	695b      	ldr	r3, [r3, #20]
 80041d4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80041d6:	887a      	ldrh	r2, [r7, #2]
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	4013      	ands	r3, r2
 80041dc:	041a      	lsls	r2, r3, #16
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	43d9      	mvns	r1, r3
 80041e2:	887b      	ldrh	r3, [r7, #2]
 80041e4:	400b      	ands	r3, r1
 80041e6:	431a      	orrs	r2, r3
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	619a      	str	r2, [r3, #24]
}
 80041ec:	bf00      	nop
 80041ee:	3714      	adds	r7, #20
 80041f0:	46bd      	mov	sp, r7
 80041f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f6:	4770      	bx	lr

080041f8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b082      	sub	sp, #8
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	4603      	mov	r3, r0
 8004200:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004202:	4b08      	ldr	r3, [pc, #32]	@ (8004224 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004204:	695a      	ldr	r2, [r3, #20]
 8004206:	88fb      	ldrh	r3, [r7, #6]
 8004208:	4013      	ands	r3, r2
 800420a:	2b00      	cmp	r3, #0
 800420c:	d006      	beq.n	800421c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800420e:	4a05      	ldr	r2, [pc, #20]	@ (8004224 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004210:	88fb      	ldrh	r3, [r7, #6]
 8004212:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004214:	88fb      	ldrh	r3, [r7, #6]
 8004216:	4618      	mov	r0, r3
 8004218:	f7fd fd7a 	bl	8001d10 <HAL_GPIO_EXTI_Callback>
  }
}
 800421c:	bf00      	nop
 800421e:	3708      	adds	r7, #8
 8004220:	46bd      	mov	sp, r7
 8004222:	bd80      	pop	{r7, pc}
 8004224:	40010400 	.word	0x40010400

08004228 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004228:	b480      	push	{r7}
 800422a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800422c:	4b04      	ldr	r3, [pc, #16]	@ (8004240 <HAL_PWREx_GetVoltageRange+0x18>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8004234:	4618      	mov	r0, r3
 8004236:	46bd      	mov	sp, r7
 8004238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423c:	4770      	bx	lr
 800423e:	bf00      	nop
 8004240:	40007000 	.word	0x40007000

08004244 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004244:	b480      	push	{r7}
 8004246:	b085      	sub	sp, #20
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004252:	d130      	bne.n	80042b6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004254:	4b23      	ldr	r3, [pc, #140]	@ (80042e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800425c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004260:	d038      	beq.n	80042d4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004262:	4b20      	ldr	r3, [pc, #128]	@ (80042e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800426a:	4a1e      	ldr	r2, [pc, #120]	@ (80042e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800426c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004270:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004272:	4b1d      	ldr	r3, [pc, #116]	@ (80042e8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	2232      	movs	r2, #50	@ 0x32
 8004278:	fb02 f303 	mul.w	r3, r2, r3
 800427c:	4a1b      	ldr	r2, [pc, #108]	@ (80042ec <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800427e:	fba2 2303 	umull	r2, r3, r2, r3
 8004282:	0c9b      	lsrs	r3, r3, #18
 8004284:	3301      	adds	r3, #1
 8004286:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004288:	e002      	b.n	8004290 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	3b01      	subs	r3, #1
 800428e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004290:	4b14      	ldr	r3, [pc, #80]	@ (80042e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004292:	695b      	ldr	r3, [r3, #20]
 8004294:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004298:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800429c:	d102      	bne.n	80042a4 <HAL_PWREx_ControlVoltageScaling+0x60>
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d1f2      	bne.n	800428a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80042a4:	4b0f      	ldr	r3, [pc, #60]	@ (80042e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80042a6:	695b      	ldr	r3, [r3, #20]
 80042a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80042ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80042b0:	d110      	bne.n	80042d4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80042b2:	2303      	movs	r3, #3
 80042b4:	e00f      	b.n	80042d6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80042b6:	4b0b      	ldr	r3, [pc, #44]	@ (80042e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80042be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80042c2:	d007      	beq.n	80042d4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80042c4:	4b07      	ldr	r3, [pc, #28]	@ (80042e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80042cc:	4a05      	ldr	r2, [pc, #20]	@ (80042e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80042ce:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80042d2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80042d4:	2300      	movs	r3, #0
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	3714      	adds	r7, #20
 80042da:	46bd      	mov	sp, r7
 80042dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e0:	4770      	bx	lr
 80042e2:	bf00      	nop
 80042e4:	40007000 	.word	0x40007000
 80042e8:	20000004 	.word	0x20000004
 80042ec:	431bde83 	.word	0x431bde83

080042f0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b088      	sub	sp, #32
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d101      	bne.n	8004302 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80042fe:	2301      	movs	r3, #1
 8004300:	e3ca      	b.n	8004a98 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004302:	4b97      	ldr	r3, [pc, #604]	@ (8004560 <HAL_RCC_OscConfig+0x270>)
 8004304:	689b      	ldr	r3, [r3, #8]
 8004306:	f003 030c 	and.w	r3, r3, #12
 800430a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800430c:	4b94      	ldr	r3, [pc, #592]	@ (8004560 <HAL_RCC_OscConfig+0x270>)
 800430e:	68db      	ldr	r3, [r3, #12]
 8004310:	f003 0303 	and.w	r3, r3, #3
 8004314:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f003 0310 	and.w	r3, r3, #16
 800431e:	2b00      	cmp	r3, #0
 8004320:	f000 80e4 	beq.w	80044ec <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004324:	69bb      	ldr	r3, [r7, #24]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d007      	beq.n	800433a <HAL_RCC_OscConfig+0x4a>
 800432a:	69bb      	ldr	r3, [r7, #24]
 800432c:	2b0c      	cmp	r3, #12
 800432e:	f040 808b 	bne.w	8004448 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004332:	697b      	ldr	r3, [r7, #20]
 8004334:	2b01      	cmp	r3, #1
 8004336:	f040 8087 	bne.w	8004448 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800433a:	4b89      	ldr	r3, [pc, #548]	@ (8004560 <HAL_RCC_OscConfig+0x270>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f003 0302 	and.w	r3, r3, #2
 8004342:	2b00      	cmp	r3, #0
 8004344:	d005      	beq.n	8004352 <HAL_RCC_OscConfig+0x62>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	699b      	ldr	r3, [r3, #24]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d101      	bne.n	8004352 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800434e:	2301      	movs	r3, #1
 8004350:	e3a2      	b.n	8004a98 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6a1a      	ldr	r2, [r3, #32]
 8004356:	4b82      	ldr	r3, [pc, #520]	@ (8004560 <HAL_RCC_OscConfig+0x270>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f003 0308 	and.w	r3, r3, #8
 800435e:	2b00      	cmp	r3, #0
 8004360:	d004      	beq.n	800436c <HAL_RCC_OscConfig+0x7c>
 8004362:	4b7f      	ldr	r3, [pc, #508]	@ (8004560 <HAL_RCC_OscConfig+0x270>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800436a:	e005      	b.n	8004378 <HAL_RCC_OscConfig+0x88>
 800436c:	4b7c      	ldr	r3, [pc, #496]	@ (8004560 <HAL_RCC_OscConfig+0x270>)
 800436e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004372:	091b      	lsrs	r3, r3, #4
 8004374:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004378:	4293      	cmp	r3, r2
 800437a:	d223      	bcs.n	80043c4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6a1b      	ldr	r3, [r3, #32]
 8004380:	4618      	mov	r0, r3
 8004382:	f000 fd55 	bl	8004e30 <RCC_SetFlashLatencyFromMSIRange>
 8004386:	4603      	mov	r3, r0
 8004388:	2b00      	cmp	r3, #0
 800438a:	d001      	beq.n	8004390 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800438c:	2301      	movs	r3, #1
 800438e:	e383      	b.n	8004a98 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004390:	4b73      	ldr	r3, [pc, #460]	@ (8004560 <HAL_RCC_OscConfig+0x270>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a72      	ldr	r2, [pc, #456]	@ (8004560 <HAL_RCC_OscConfig+0x270>)
 8004396:	f043 0308 	orr.w	r3, r3, #8
 800439a:	6013      	str	r3, [r2, #0]
 800439c:	4b70      	ldr	r3, [pc, #448]	@ (8004560 <HAL_RCC_OscConfig+0x270>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6a1b      	ldr	r3, [r3, #32]
 80043a8:	496d      	ldr	r1, [pc, #436]	@ (8004560 <HAL_RCC_OscConfig+0x270>)
 80043aa:	4313      	orrs	r3, r2
 80043ac:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80043ae:	4b6c      	ldr	r3, [pc, #432]	@ (8004560 <HAL_RCC_OscConfig+0x270>)
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	69db      	ldr	r3, [r3, #28]
 80043ba:	021b      	lsls	r3, r3, #8
 80043bc:	4968      	ldr	r1, [pc, #416]	@ (8004560 <HAL_RCC_OscConfig+0x270>)
 80043be:	4313      	orrs	r3, r2
 80043c0:	604b      	str	r3, [r1, #4]
 80043c2:	e025      	b.n	8004410 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80043c4:	4b66      	ldr	r3, [pc, #408]	@ (8004560 <HAL_RCC_OscConfig+0x270>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a65      	ldr	r2, [pc, #404]	@ (8004560 <HAL_RCC_OscConfig+0x270>)
 80043ca:	f043 0308 	orr.w	r3, r3, #8
 80043ce:	6013      	str	r3, [r2, #0]
 80043d0:	4b63      	ldr	r3, [pc, #396]	@ (8004560 <HAL_RCC_OscConfig+0x270>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6a1b      	ldr	r3, [r3, #32]
 80043dc:	4960      	ldr	r1, [pc, #384]	@ (8004560 <HAL_RCC_OscConfig+0x270>)
 80043de:	4313      	orrs	r3, r2
 80043e0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80043e2:	4b5f      	ldr	r3, [pc, #380]	@ (8004560 <HAL_RCC_OscConfig+0x270>)
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	69db      	ldr	r3, [r3, #28]
 80043ee:	021b      	lsls	r3, r3, #8
 80043f0:	495b      	ldr	r1, [pc, #364]	@ (8004560 <HAL_RCC_OscConfig+0x270>)
 80043f2:	4313      	orrs	r3, r2
 80043f4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80043f6:	69bb      	ldr	r3, [r7, #24]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d109      	bne.n	8004410 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6a1b      	ldr	r3, [r3, #32]
 8004400:	4618      	mov	r0, r3
 8004402:	f000 fd15 	bl	8004e30 <RCC_SetFlashLatencyFromMSIRange>
 8004406:	4603      	mov	r3, r0
 8004408:	2b00      	cmp	r3, #0
 800440a:	d001      	beq.n	8004410 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800440c:	2301      	movs	r3, #1
 800440e:	e343      	b.n	8004a98 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004410:	f000 fc4a 	bl	8004ca8 <HAL_RCC_GetSysClockFreq>
 8004414:	4602      	mov	r2, r0
 8004416:	4b52      	ldr	r3, [pc, #328]	@ (8004560 <HAL_RCC_OscConfig+0x270>)
 8004418:	689b      	ldr	r3, [r3, #8]
 800441a:	091b      	lsrs	r3, r3, #4
 800441c:	f003 030f 	and.w	r3, r3, #15
 8004420:	4950      	ldr	r1, [pc, #320]	@ (8004564 <HAL_RCC_OscConfig+0x274>)
 8004422:	5ccb      	ldrb	r3, [r1, r3]
 8004424:	f003 031f 	and.w	r3, r3, #31
 8004428:	fa22 f303 	lsr.w	r3, r2, r3
 800442c:	4a4e      	ldr	r2, [pc, #312]	@ (8004568 <HAL_RCC_OscConfig+0x278>)
 800442e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004430:	4b4e      	ldr	r3, [pc, #312]	@ (800456c <HAL_RCC_OscConfig+0x27c>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4618      	mov	r0, r3
 8004436:	f7fe f833 	bl	80024a0 <HAL_InitTick>
 800443a:	4603      	mov	r3, r0
 800443c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800443e:	7bfb      	ldrb	r3, [r7, #15]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d052      	beq.n	80044ea <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004444:	7bfb      	ldrb	r3, [r7, #15]
 8004446:	e327      	b.n	8004a98 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	699b      	ldr	r3, [r3, #24]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d032      	beq.n	80044b6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004450:	4b43      	ldr	r3, [pc, #268]	@ (8004560 <HAL_RCC_OscConfig+0x270>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a42      	ldr	r2, [pc, #264]	@ (8004560 <HAL_RCC_OscConfig+0x270>)
 8004456:	f043 0301 	orr.w	r3, r3, #1
 800445a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800445c:	f7fe f85c 	bl	8002518 <HAL_GetTick>
 8004460:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004462:	e008      	b.n	8004476 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004464:	f7fe f858 	bl	8002518 <HAL_GetTick>
 8004468:	4602      	mov	r2, r0
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	1ad3      	subs	r3, r2, r3
 800446e:	2b02      	cmp	r3, #2
 8004470:	d901      	bls.n	8004476 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8004472:	2303      	movs	r3, #3
 8004474:	e310      	b.n	8004a98 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004476:	4b3a      	ldr	r3, [pc, #232]	@ (8004560 <HAL_RCC_OscConfig+0x270>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f003 0302 	and.w	r3, r3, #2
 800447e:	2b00      	cmp	r3, #0
 8004480:	d0f0      	beq.n	8004464 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004482:	4b37      	ldr	r3, [pc, #220]	@ (8004560 <HAL_RCC_OscConfig+0x270>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a36      	ldr	r2, [pc, #216]	@ (8004560 <HAL_RCC_OscConfig+0x270>)
 8004488:	f043 0308 	orr.w	r3, r3, #8
 800448c:	6013      	str	r3, [r2, #0]
 800448e:	4b34      	ldr	r3, [pc, #208]	@ (8004560 <HAL_RCC_OscConfig+0x270>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6a1b      	ldr	r3, [r3, #32]
 800449a:	4931      	ldr	r1, [pc, #196]	@ (8004560 <HAL_RCC_OscConfig+0x270>)
 800449c:	4313      	orrs	r3, r2
 800449e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80044a0:	4b2f      	ldr	r3, [pc, #188]	@ (8004560 <HAL_RCC_OscConfig+0x270>)
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	69db      	ldr	r3, [r3, #28]
 80044ac:	021b      	lsls	r3, r3, #8
 80044ae:	492c      	ldr	r1, [pc, #176]	@ (8004560 <HAL_RCC_OscConfig+0x270>)
 80044b0:	4313      	orrs	r3, r2
 80044b2:	604b      	str	r3, [r1, #4]
 80044b4:	e01a      	b.n	80044ec <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80044b6:	4b2a      	ldr	r3, [pc, #168]	@ (8004560 <HAL_RCC_OscConfig+0x270>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a29      	ldr	r2, [pc, #164]	@ (8004560 <HAL_RCC_OscConfig+0x270>)
 80044bc:	f023 0301 	bic.w	r3, r3, #1
 80044c0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80044c2:	f7fe f829 	bl	8002518 <HAL_GetTick>
 80044c6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80044c8:	e008      	b.n	80044dc <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80044ca:	f7fe f825 	bl	8002518 <HAL_GetTick>
 80044ce:	4602      	mov	r2, r0
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	1ad3      	subs	r3, r2, r3
 80044d4:	2b02      	cmp	r3, #2
 80044d6:	d901      	bls.n	80044dc <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80044d8:	2303      	movs	r3, #3
 80044da:	e2dd      	b.n	8004a98 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80044dc:	4b20      	ldr	r3, [pc, #128]	@ (8004560 <HAL_RCC_OscConfig+0x270>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f003 0302 	and.w	r3, r3, #2
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d1f0      	bne.n	80044ca <HAL_RCC_OscConfig+0x1da>
 80044e8:	e000      	b.n	80044ec <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80044ea:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f003 0301 	and.w	r3, r3, #1
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d074      	beq.n	80045e2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80044f8:	69bb      	ldr	r3, [r7, #24]
 80044fa:	2b08      	cmp	r3, #8
 80044fc:	d005      	beq.n	800450a <HAL_RCC_OscConfig+0x21a>
 80044fe:	69bb      	ldr	r3, [r7, #24]
 8004500:	2b0c      	cmp	r3, #12
 8004502:	d10e      	bne.n	8004522 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	2b03      	cmp	r3, #3
 8004508:	d10b      	bne.n	8004522 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800450a:	4b15      	ldr	r3, [pc, #84]	@ (8004560 <HAL_RCC_OscConfig+0x270>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004512:	2b00      	cmp	r3, #0
 8004514:	d064      	beq.n	80045e0 <HAL_RCC_OscConfig+0x2f0>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d160      	bne.n	80045e0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800451e:	2301      	movs	r3, #1
 8004520:	e2ba      	b.n	8004a98 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800452a:	d106      	bne.n	800453a <HAL_RCC_OscConfig+0x24a>
 800452c:	4b0c      	ldr	r3, [pc, #48]	@ (8004560 <HAL_RCC_OscConfig+0x270>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a0b      	ldr	r2, [pc, #44]	@ (8004560 <HAL_RCC_OscConfig+0x270>)
 8004532:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004536:	6013      	str	r3, [r2, #0]
 8004538:	e026      	b.n	8004588 <HAL_RCC_OscConfig+0x298>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004542:	d115      	bne.n	8004570 <HAL_RCC_OscConfig+0x280>
 8004544:	4b06      	ldr	r3, [pc, #24]	@ (8004560 <HAL_RCC_OscConfig+0x270>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a05      	ldr	r2, [pc, #20]	@ (8004560 <HAL_RCC_OscConfig+0x270>)
 800454a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800454e:	6013      	str	r3, [r2, #0]
 8004550:	4b03      	ldr	r3, [pc, #12]	@ (8004560 <HAL_RCC_OscConfig+0x270>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a02      	ldr	r2, [pc, #8]	@ (8004560 <HAL_RCC_OscConfig+0x270>)
 8004556:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800455a:	6013      	str	r3, [r2, #0]
 800455c:	e014      	b.n	8004588 <HAL_RCC_OscConfig+0x298>
 800455e:	bf00      	nop
 8004560:	40021000 	.word	0x40021000
 8004564:	0800c5bc 	.word	0x0800c5bc
 8004568:	20000004 	.word	0x20000004
 800456c:	20000008 	.word	0x20000008
 8004570:	4ba0      	ldr	r3, [pc, #640]	@ (80047f4 <HAL_RCC_OscConfig+0x504>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a9f      	ldr	r2, [pc, #636]	@ (80047f4 <HAL_RCC_OscConfig+0x504>)
 8004576:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800457a:	6013      	str	r3, [r2, #0]
 800457c:	4b9d      	ldr	r3, [pc, #628]	@ (80047f4 <HAL_RCC_OscConfig+0x504>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a9c      	ldr	r2, [pc, #624]	@ (80047f4 <HAL_RCC_OscConfig+0x504>)
 8004582:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004586:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d013      	beq.n	80045b8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004590:	f7fd ffc2 	bl	8002518 <HAL_GetTick>
 8004594:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004596:	e008      	b.n	80045aa <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004598:	f7fd ffbe 	bl	8002518 <HAL_GetTick>
 800459c:	4602      	mov	r2, r0
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	1ad3      	subs	r3, r2, r3
 80045a2:	2b64      	cmp	r3, #100	@ 0x64
 80045a4:	d901      	bls.n	80045aa <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80045a6:	2303      	movs	r3, #3
 80045a8:	e276      	b.n	8004a98 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80045aa:	4b92      	ldr	r3, [pc, #584]	@ (80047f4 <HAL_RCC_OscConfig+0x504>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d0f0      	beq.n	8004598 <HAL_RCC_OscConfig+0x2a8>
 80045b6:	e014      	b.n	80045e2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045b8:	f7fd ffae 	bl	8002518 <HAL_GetTick>
 80045bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80045be:	e008      	b.n	80045d2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045c0:	f7fd ffaa 	bl	8002518 <HAL_GetTick>
 80045c4:	4602      	mov	r2, r0
 80045c6:	693b      	ldr	r3, [r7, #16]
 80045c8:	1ad3      	subs	r3, r2, r3
 80045ca:	2b64      	cmp	r3, #100	@ 0x64
 80045cc:	d901      	bls.n	80045d2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80045ce:	2303      	movs	r3, #3
 80045d0:	e262      	b.n	8004a98 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80045d2:	4b88      	ldr	r3, [pc, #544]	@ (80047f4 <HAL_RCC_OscConfig+0x504>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d1f0      	bne.n	80045c0 <HAL_RCC_OscConfig+0x2d0>
 80045de:	e000      	b.n	80045e2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f003 0302 	and.w	r3, r3, #2
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d060      	beq.n	80046b0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80045ee:	69bb      	ldr	r3, [r7, #24]
 80045f0:	2b04      	cmp	r3, #4
 80045f2:	d005      	beq.n	8004600 <HAL_RCC_OscConfig+0x310>
 80045f4:	69bb      	ldr	r3, [r7, #24]
 80045f6:	2b0c      	cmp	r3, #12
 80045f8:	d119      	bne.n	800462e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	2b02      	cmp	r3, #2
 80045fe:	d116      	bne.n	800462e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004600:	4b7c      	ldr	r3, [pc, #496]	@ (80047f4 <HAL_RCC_OscConfig+0x504>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004608:	2b00      	cmp	r3, #0
 800460a:	d005      	beq.n	8004618 <HAL_RCC_OscConfig+0x328>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	68db      	ldr	r3, [r3, #12]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d101      	bne.n	8004618 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004614:	2301      	movs	r3, #1
 8004616:	e23f      	b.n	8004a98 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004618:	4b76      	ldr	r3, [pc, #472]	@ (80047f4 <HAL_RCC_OscConfig+0x504>)
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	691b      	ldr	r3, [r3, #16]
 8004624:	061b      	lsls	r3, r3, #24
 8004626:	4973      	ldr	r1, [pc, #460]	@ (80047f4 <HAL_RCC_OscConfig+0x504>)
 8004628:	4313      	orrs	r3, r2
 800462a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800462c:	e040      	b.n	80046b0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	68db      	ldr	r3, [r3, #12]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d023      	beq.n	800467e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004636:	4b6f      	ldr	r3, [pc, #444]	@ (80047f4 <HAL_RCC_OscConfig+0x504>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a6e      	ldr	r2, [pc, #440]	@ (80047f4 <HAL_RCC_OscConfig+0x504>)
 800463c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004640:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004642:	f7fd ff69 	bl	8002518 <HAL_GetTick>
 8004646:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004648:	e008      	b.n	800465c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800464a:	f7fd ff65 	bl	8002518 <HAL_GetTick>
 800464e:	4602      	mov	r2, r0
 8004650:	693b      	ldr	r3, [r7, #16]
 8004652:	1ad3      	subs	r3, r2, r3
 8004654:	2b02      	cmp	r3, #2
 8004656:	d901      	bls.n	800465c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004658:	2303      	movs	r3, #3
 800465a:	e21d      	b.n	8004a98 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800465c:	4b65      	ldr	r3, [pc, #404]	@ (80047f4 <HAL_RCC_OscConfig+0x504>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004664:	2b00      	cmp	r3, #0
 8004666:	d0f0      	beq.n	800464a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004668:	4b62      	ldr	r3, [pc, #392]	@ (80047f4 <HAL_RCC_OscConfig+0x504>)
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	691b      	ldr	r3, [r3, #16]
 8004674:	061b      	lsls	r3, r3, #24
 8004676:	495f      	ldr	r1, [pc, #380]	@ (80047f4 <HAL_RCC_OscConfig+0x504>)
 8004678:	4313      	orrs	r3, r2
 800467a:	604b      	str	r3, [r1, #4]
 800467c:	e018      	b.n	80046b0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800467e:	4b5d      	ldr	r3, [pc, #372]	@ (80047f4 <HAL_RCC_OscConfig+0x504>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a5c      	ldr	r2, [pc, #368]	@ (80047f4 <HAL_RCC_OscConfig+0x504>)
 8004684:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004688:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800468a:	f7fd ff45 	bl	8002518 <HAL_GetTick>
 800468e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004690:	e008      	b.n	80046a4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004692:	f7fd ff41 	bl	8002518 <HAL_GetTick>
 8004696:	4602      	mov	r2, r0
 8004698:	693b      	ldr	r3, [r7, #16]
 800469a:	1ad3      	subs	r3, r2, r3
 800469c:	2b02      	cmp	r3, #2
 800469e:	d901      	bls.n	80046a4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80046a0:	2303      	movs	r3, #3
 80046a2:	e1f9      	b.n	8004a98 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80046a4:	4b53      	ldr	r3, [pc, #332]	@ (80047f4 <HAL_RCC_OscConfig+0x504>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d1f0      	bne.n	8004692 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f003 0308 	and.w	r3, r3, #8
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d03c      	beq.n	8004736 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	695b      	ldr	r3, [r3, #20]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d01c      	beq.n	80046fe <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80046c4:	4b4b      	ldr	r3, [pc, #300]	@ (80047f4 <HAL_RCC_OscConfig+0x504>)
 80046c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80046ca:	4a4a      	ldr	r2, [pc, #296]	@ (80047f4 <HAL_RCC_OscConfig+0x504>)
 80046cc:	f043 0301 	orr.w	r3, r3, #1
 80046d0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046d4:	f7fd ff20 	bl	8002518 <HAL_GetTick>
 80046d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80046da:	e008      	b.n	80046ee <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046dc:	f7fd ff1c 	bl	8002518 <HAL_GetTick>
 80046e0:	4602      	mov	r2, r0
 80046e2:	693b      	ldr	r3, [r7, #16]
 80046e4:	1ad3      	subs	r3, r2, r3
 80046e6:	2b02      	cmp	r3, #2
 80046e8:	d901      	bls.n	80046ee <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80046ea:	2303      	movs	r3, #3
 80046ec:	e1d4      	b.n	8004a98 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80046ee:	4b41      	ldr	r3, [pc, #260]	@ (80047f4 <HAL_RCC_OscConfig+0x504>)
 80046f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80046f4:	f003 0302 	and.w	r3, r3, #2
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d0ef      	beq.n	80046dc <HAL_RCC_OscConfig+0x3ec>
 80046fc:	e01b      	b.n	8004736 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046fe:	4b3d      	ldr	r3, [pc, #244]	@ (80047f4 <HAL_RCC_OscConfig+0x504>)
 8004700:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004704:	4a3b      	ldr	r2, [pc, #236]	@ (80047f4 <HAL_RCC_OscConfig+0x504>)
 8004706:	f023 0301 	bic.w	r3, r3, #1
 800470a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800470e:	f7fd ff03 	bl	8002518 <HAL_GetTick>
 8004712:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004714:	e008      	b.n	8004728 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004716:	f7fd feff 	bl	8002518 <HAL_GetTick>
 800471a:	4602      	mov	r2, r0
 800471c:	693b      	ldr	r3, [r7, #16]
 800471e:	1ad3      	subs	r3, r2, r3
 8004720:	2b02      	cmp	r3, #2
 8004722:	d901      	bls.n	8004728 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004724:	2303      	movs	r3, #3
 8004726:	e1b7      	b.n	8004a98 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004728:	4b32      	ldr	r3, [pc, #200]	@ (80047f4 <HAL_RCC_OscConfig+0x504>)
 800472a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800472e:	f003 0302 	and.w	r3, r3, #2
 8004732:	2b00      	cmp	r3, #0
 8004734:	d1ef      	bne.n	8004716 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f003 0304 	and.w	r3, r3, #4
 800473e:	2b00      	cmp	r3, #0
 8004740:	f000 80a6 	beq.w	8004890 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004744:	2300      	movs	r3, #0
 8004746:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004748:	4b2a      	ldr	r3, [pc, #168]	@ (80047f4 <HAL_RCC_OscConfig+0x504>)
 800474a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800474c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004750:	2b00      	cmp	r3, #0
 8004752:	d10d      	bne.n	8004770 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004754:	4b27      	ldr	r3, [pc, #156]	@ (80047f4 <HAL_RCC_OscConfig+0x504>)
 8004756:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004758:	4a26      	ldr	r2, [pc, #152]	@ (80047f4 <HAL_RCC_OscConfig+0x504>)
 800475a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800475e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004760:	4b24      	ldr	r3, [pc, #144]	@ (80047f4 <HAL_RCC_OscConfig+0x504>)
 8004762:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004764:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004768:	60bb      	str	r3, [r7, #8]
 800476a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800476c:	2301      	movs	r3, #1
 800476e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004770:	4b21      	ldr	r3, [pc, #132]	@ (80047f8 <HAL_RCC_OscConfig+0x508>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004778:	2b00      	cmp	r3, #0
 800477a:	d118      	bne.n	80047ae <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800477c:	4b1e      	ldr	r3, [pc, #120]	@ (80047f8 <HAL_RCC_OscConfig+0x508>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a1d      	ldr	r2, [pc, #116]	@ (80047f8 <HAL_RCC_OscConfig+0x508>)
 8004782:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004786:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004788:	f7fd fec6 	bl	8002518 <HAL_GetTick>
 800478c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800478e:	e008      	b.n	80047a2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004790:	f7fd fec2 	bl	8002518 <HAL_GetTick>
 8004794:	4602      	mov	r2, r0
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	1ad3      	subs	r3, r2, r3
 800479a:	2b02      	cmp	r3, #2
 800479c:	d901      	bls.n	80047a2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800479e:	2303      	movs	r3, #3
 80047a0:	e17a      	b.n	8004a98 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80047a2:	4b15      	ldr	r3, [pc, #84]	@ (80047f8 <HAL_RCC_OscConfig+0x508>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d0f0      	beq.n	8004790 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	689b      	ldr	r3, [r3, #8]
 80047b2:	2b01      	cmp	r3, #1
 80047b4:	d108      	bne.n	80047c8 <HAL_RCC_OscConfig+0x4d8>
 80047b6:	4b0f      	ldr	r3, [pc, #60]	@ (80047f4 <HAL_RCC_OscConfig+0x504>)
 80047b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047bc:	4a0d      	ldr	r2, [pc, #52]	@ (80047f4 <HAL_RCC_OscConfig+0x504>)
 80047be:	f043 0301 	orr.w	r3, r3, #1
 80047c2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80047c6:	e029      	b.n	800481c <HAL_RCC_OscConfig+0x52c>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	689b      	ldr	r3, [r3, #8]
 80047cc:	2b05      	cmp	r3, #5
 80047ce:	d115      	bne.n	80047fc <HAL_RCC_OscConfig+0x50c>
 80047d0:	4b08      	ldr	r3, [pc, #32]	@ (80047f4 <HAL_RCC_OscConfig+0x504>)
 80047d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047d6:	4a07      	ldr	r2, [pc, #28]	@ (80047f4 <HAL_RCC_OscConfig+0x504>)
 80047d8:	f043 0304 	orr.w	r3, r3, #4
 80047dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80047e0:	4b04      	ldr	r3, [pc, #16]	@ (80047f4 <HAL_RCC_OscConfig+0x504>)
 80047e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047e6:	4a03      	ldr	r2, [pc, #12]	@ (80047f4 <HAL_RCC_OscConfig+0x504>)
 80047e8:	f043 0301 	orr.w	r3, r3, #1
 80047ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80047f0:	e014      	b.n	800481c <HAL_RCC_OscConfig+0x52c>
 80047f2:	bf00      	nop
 80047f4:	40021000 	.word	0x40021000
 80047f8:	40007000 	.word	0x40007000
 80047fc:	4b9c      	ldr	r3, [pc, #624]	@ (8004a70 <HAL_RCC_OscConfig+0x780>)
 80047fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004802:	4a9b      	ldr	r2, [pc, #620]	@ (8004a70 <HAL_RCC_OscConfig+0x780>)
 8004804:	f023 0301 	bic.w	r3, r3, #1
 8004808:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800480c:	4b98      	ldr	r3, [pc, #608]	@ (8004a70 <HAL_RCC_OscConfig+0x780>)
 800480e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004812:	4a97      	ldr	r2, [pc, #604]	@ (8004a70 <HAL_RCC_OscConfig+0x780>)
 8004814:	f023 0304 	bic.w	r3, r3, #4
 8004818:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	689b      	ldr	r3, [r3, #8]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d016      	beq.n	8004852 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004824:	f7fd fe78 	bl	8002518 <HAL_GetTick>
 8004828:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800482a:	e00a      	b.n	8004842 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800482c:	f7fd fe74 	bl	8002518 <HAL_GetTick>
 8004830:	4602      	mov	r2, r0
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	1ad3      	subs	r3, r2, r3
 8004836:	f241 3288 	movw	r2, #5000	@ 0x1388
 800483a:	4293      	cmp	r3, r2
 800483c:	d901      	bls.n	8004842 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800483e:	2303      	movs	r3, #3
 8004840:	e12a      	b.n	8004a98 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004842:	4b8b      	ldr	r3, [pc, #556]	@ (8004a70 <HAL_RCC_OscConfig+0x780>)
 8004844:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004848:	f003 0302 	and.w	r3, r3, #2
 800484c:	2b00      	cmp	r3, #0
 800484e:	d0ed      	beq.n	800482c <HAL_RCC_OscConfig+0x53c>
 8004850:	e015      	b.n	800487e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004852:	f7fd fe61 	bl	8002518 <HAL_GetTick>
 8004856:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004858:	e00a      	b.n	8004870 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800485a:	f7fd fe5d 	bl	8002518 <HAL_GetTick>
 800485e:	4602      	mov	r2, r0
 8004860:	693b      	ldr	r3, [r7, #16]
 8004862:	1ad3      	subs	r3, r2, r3
 8004864:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004868:	4293      	cmp	r3, r2
 800486a:	d901      	bls.n	8004870 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800486c:	2303      	movs	r3, #3
 800486e:	e113      	b.n	8004a98 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004870:	4b7f      	ldr	r3, [pc, #508]	@ (8004a70 <HAL_RCC_OscConfig+0x780>)
 8004872:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004876:	f003 0302 	and.w	r3, r3, #2
 800487a:	2b00      	cmp	r3, #0
 800487c:	d1ed      	bne.n	800485a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800487e:	7ffb      	ldrb	r3, [r7, #31]
 8004880:	2b01      	cmp	r3, #1
 8004882:	d105      	bne.n	8004890 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004884:	4b7a      	ldr	r3, [pc, #488]	@ (8004a70 <HAL_RCC_OscConfig+0x780>)
 8004886:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004888:	4a79      	ldr	r2, [pc, #484]	@ (8004a70 <HAL_RCC_OscConfig+0x780>)
 800488a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800488e:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004894:	2b00      	cmp	r3, #0
 8004896:	f000 80fe 	beq.w	8004a96 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800489e:	2b02      	cmp	r3, #2
 80048a0:	f040 80d0 	bne.w	8004a44 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80048a4:	4b72      	ldr	r3, [pc, #456]	@ (8004a70 <HAL_RCC_OscConfig+0x780>)
 80048a6:	68db      	ldr	r3, [r3, #12]
 80048a8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80048aa:	697b      	ldr	r3, [r7, #20]
 80048ac:	f003 0203 	and.w	r2, r3, #3
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048b4:	429a      	cmp	r2, r3
 80048b6:	d130      	bne.n	800491a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048c2:	3b01      	subs	r3, #1
 80048c4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80048c6:	429a      	cmp	r2, r3
 80048c8:	d127      	bne.n	800491a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048d4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80048d6:	429a      	cmp	r2, r3
 80048d8:	d11f      	bne.n	800491a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80048da:	697b      	ldr	r3, [r7, #20]
 80048dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048e0:	687a      	ldr	r2, [r7, #4]
 80048e2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80048e4:	2a07      	cmp	r2, #7
 80048e6:	bf14      	ite	ne
 80048e8:	2201      	movne	r2, #1
 80048ea:	2200      	moveq	r2, #0
 80048ec:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d113      	bne.n	800491a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048fc:	085b      	lsrs	r3, r3, #1
 80048fe:	3b01      	subs	r3, #1
 8004900:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004902:	429a      	cmp	r2, r3
 8004904:	d109      	bne.n	800491a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004906:	697b      	ldr	r3, [r7, #20]
 8004908:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004910:	085b      	lsrs	r3, r3, #1
 8004912:	3b01      	subs	r3, #1
 8004914:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004916:	429a      	cmp	r2, r3
 8004918:	d06e      	beq.n	80049f8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800491a:	69bb      	ldr	r3, [r7, #24]
 800491c:	2b0c      	cmp	r3, #12
 800491e:	d069      	beq.n	80049f4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004920:	4b53      	ldr	r3, [pc, #332]	@ (8004a70 <HAL_RCC_OscConfig+0x780>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004928:	2b00      	cmp	r3, #0
 800492a:	d105      	bne.n	8004938 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800492c:	4b50      	ldr	r3, [pc, #320]	@ (8004a70 <HAL_RCC_OscConfig+0x780>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004934:	2b00      	cmp	r3, #0
 8004936:	d001      	beq.n	800493c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004938:	2301      	movs	r3, #1
 800493a:	e0ad      	b.n	8004a98 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800493c:	4b4c      	ldr	r3, [pc, #304]	@ (8004a70 <HAL_RCC_OscConfig+0x780>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a4b      	ldr	r2, [pc, #300]	@ (8004a70 <HAL_RCC_OscConfig+0x780>)
 8004942:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004946:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004948:	f7fd fde6 	bl	8002518 <HAL_GetTick>
 800494c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800494e:	e008      	b.n	8004962 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004950:	f7fd fde2 	bl	8002518 <HAL_GetTick>
 8004954:	4602      	mov	r2, r0
 8004956:	693b      	ldr	r3, [r7, #16]
 8004958:	1ad3      	subs	r3, r2, r3
 800495a:	2b02      	cmp	r3, #2
 800495c:	d901      	bls.n	8004962 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800495e:	2303      	movs	r3, #3
 8004960:	e09a      	b.n	8004a98 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004962:	4b43      	ldr	r3, [pc, #268]	@ (8004a70 <HAL_RCC_OscConfig+0x780>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800496a:	2b00      	cmp	r3, #0
 800496c:	d1f0      	bne.n	8004950 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800496e:	4b40      	ldr	r3, [pc, #256]	@ (8004a70 <HAL_RCC_OscConfig+0x780>)
 8004970:	68da      	ldr	r2, [r3, #12]
 8004972:	4b40      	ldr	r3, [pc, #256]	@ (8004a74 <HAL_RCC_OscConfig+0x784>)
 8004974:	4013      	ands	r3, r2
 8004976:	687a      	ldr	r2, [r7, #4]
 8004978:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800497a:	687a      	ldr	r2, [r7, #4]
 800497c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800497e:	3a01      	subs	r2, #1
 8004980:	0112      	lsls	r2, r2, #4
 8004982:	4311      	orrs	r1, r2
 8004984:	687a      	ldr	r2, [r7, #4]
 8004986:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004988:	0212      	lsls	r2, r2, #8
 800498a:	4311      	orrs	r1, r2
 800498c:	687a      	ldr	r2, [r7, #4]
 800498e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004990:	0852      	lsrs	r2, r2, #1
 8004992:	3a01      	subs	r2, #1
 8004994:	0552      	lsls	r2, r2, #21
 8004996:	4311      	orrs	r1, r2
 8004998:	687a      	ldr	r2, [r7, #4]
 800499a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800499c:	0852      	lsrs	r2, r2, #1
 800499e:	3a01      	subs	r2, #1
 80049a0:	0652      	lsls	r2, r2, #25
 80049a2:	4311      	orrs	r1, r2
 80049a4:	687a      	ldr	r2, [r7, #4]
 80049a6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80049a8:	0912      	lsrs	r2, r2, #4
 80049aa:	0452      	lsls	r2, r2, #17
 80049ac:	430a      	orrs	r2, r1
 80049ae:	4930      	ldr	r1, [pc, #192]	@ (8004a70 <HAL_RCC_OscConfig+0x780>)
 80049b0:	4313      	orrs	r3, r2
 80049b2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80049b4:	4b2e      	ldr	r3, [pc, #184]	@ (8004a70 <HAL_RCC_OscConfig+0x780>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a2d      	ldr	r2, [pc, #180]	@ (8004a70 <HAL_RCC_OscConfig+0x780>)
 80049ba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80049be:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80049c0:	4b2b      	ldr	r3, [pc, #172]	@ (8004a70 <HAL_RCC_OscConfig+0x780>)
 80049c2:	68db      	ldr	r3, [r3, #12]
 80049c4:	4a2a      	ldr	r2, [pc, #168]	@ (8004a70 <HAL_RCC_OscConfig+0x780>)
 80049c6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80049ca:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80049cc:	f7fd fda4 	bl	8002518 <HAL_GetTick>
 80049d0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049d2:	e008      	b.n	80049e6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049d4:	f7fd fda0 	bl	8002518 <HAL_GetTick>
 80049d8:	4602      	mov	r2, r0
 80049da:	693b      	ldr	r3, [r7, #16]
 80049dc:	1ad3      	subs	r3, r2, r3
 80049de:	2b02      	cmp	r3, #2
 80049e0:	d901      	bls.n	80049e6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80049e2:	2303      	movs	r3, #3
 80049e4:	e058      	b.n	8004a98 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049e6:	4b22      	ldr	r3, [pc, #136]	@ (8004a70 <HAL_RCC_OscConfig+0x780>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d0f0      	beq.n	80049d4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80049f2:	e050      	b.n	8004a96 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80049f4:	2301      	movs	r3, #1
 80049f6:	e04f      	b.n	8004a98 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049f8:	4b1d      	ldr	r3, [pc, #116]	@ (8004a70 <HAL_RCC_OscConfig+0x780>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d148      	bne.n	8004a96 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004a04:	4b1a      	ldr	r3, [pc, #104]	@ (8004a70 <HAL_RCC_OscConfig+0x780>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a19      	ldr	r2, [pc, #100]	@ (8004a70 <HAL_RCC_OscConfig+0x780>)
 8004a0a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004a0e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004a10:	4b17      	ldr	r3, [pc, #92]	@ (8004a70 <HAL_RCC_OscConfig+0x780>)
 8004a12:	68db      	ldr	r3, [r3, #12]
 8004a14:	4a16      	ldr	r2, [pc, #88]	@ (8004a70 <HAL_RCC_OscConfig+0x780>)
 8004a16:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004a1a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004a1c:	f7fd fd7c 	bl	8002518 <HAL_GetTick>
 8004a20:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a22:	e008      	b.n	8004a36 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a24:	f7fd fd78 	bl	8002518 <HAL_GetTick>
 8004a28:	4602      	mov	r2, r0
 8004a2a:	693b      	ldr	r3, [r7, #16]
 8004a2c:	1ad3      	subs	r3, r2, r3
 8004a2e:	2b02      	cmp	r3, #2
 8004a30:	d901      	bls.n	8004a36 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004a32:	2303      	movs	r3, #3
 8004a34:	e030      	b.n	8004a98 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a36:	4b0e      	ldr	r3, [pc, #56]	@ (8004a70 <HAL_RCC_OscConfig+0x780>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d0f0      	beq.n	8004a24 <HAL_RCC_OscConfig+0x734>
 8004a42:	e028      	b.n	8004a96 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004a44:	69bb      	ldr	r3, [r7, #24]
 8004a46:	2b0c      	cmp	r3, #12
 8004a48:	d023      	beq.n	8004a92 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a4a:	4b09      	ldr	r3, [pc, #36]	@ (8004a70 <HAL_RCC_OscConfig+0x780>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4a08      	ldr	r2, [pc, #32]	@ (8004a70 <HAL_RCC_OscConfig+0x780>)
 8004a50:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004a54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a56:	f7fd fd5f 	bl	8002518 <HAL_GetTick>
 8004a5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a5c:	e00c      	b.n	8004a78 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a5e:	f7fd fd5b 	bl	8002518 <HAL_GetTick>
 8004a62:	4602      	mov	r2, r0
 8004a64:	693b      	ldr	r3, [r7, #16]
 8004a66:	1ad3      	subs	r3, r2, r3
 8004a68:	2b02      	cmp	r3, #2
 8004a6a:	d905      	bls.n	8004a78 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004a6c:	2303      	movs	r3, #3
 8004a6e:	e013      	b.n	8004a98 <HAL_RCC_OscConfig+0x7a8>
 8004a70:	40021000 	.word	0x40021000
 8004a74:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a78:	4b09      	ldr	r3, [pc, #36]	@ (8004aa0 <HAL_RCC_OscConfig+0x7b0>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d1ec      	bne.n	8004a5e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004a84:	4b06      	ldr	r3, [pc, #24]	@ (8004aa0 <HAL_RCC_OscConfig+0x7b0>)
 8004a86:	68da      	ldr	r2, [r3, #12]
 8004a88:	4905      	ldr	r1, [pc, #20]	@ (8004aa0 <HAL_RCC_OscConfig+0x7b0>)
 8004a8a:	4b06      	ldr	r3, [pc, #24]	@ (8004aa4 <HAL_RCC_OscConfig+0x7b4>)
 8004a8c:	4013      	ands	r3, r2
 8004a8e:	60cb      	str	r3, [r1, #12]
 8004a90:	e001      	b.n	8004a96 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004a92:	2301      	movs	r3, #1
 8004a94:	e000      	b.n	8004a98 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8004a96:	2300      	movs	r3, #0
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	3720      	adds	r7, #32
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bd80      	pop	{r7, pc}
 8004aa0:	40021000 	.word	0x40021000
 8004aa4:	feeefffc 	.word	0xfeeefffc

08004aa8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b084      	sub	sp, #16
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
 8004ab0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d101      	bne.n	8004abc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ab8:	2301      	movs	r3, #1
 8004aba:	e0e7      	b.n	8004c8c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004abc:	4b75      	ldr	r3, [pc, #468]	@ (8004c94 <HAL_RCC_ClockConfig+0x1ec>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f003 0307 	and.w	r3, r3, #7
 8004ac4:	683a      	ldr	r2, [r7, #0]
 8004ac6:	429a      	cmp	r2, r3
 8004ac8:	d910      	bls.n	8004aec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004aca:	4b72      	ldr	r3, [pc, #456]	@ (8004c94 <HAL_RCC_ClockConfig+0x1ec>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f023 0207 	bic.w	r2, r3, #7
 8004ad2:	4970      	ldr	r1, [pc, #448]	@ (8004c94 <HAL_RCC_ClockConfig+0x1ec>)
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ada:	4b6e      	ldr	r3, [pc, #440]	@ (8004c94 <HAL_RCC_ClockConfig+0x1ec>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f003 0307 	and.w	r3, r3, #7
 8004ae2:	683a      	ldr	r2, [r7, #0]
 8004ae4:	429a      	cmp	r2, r3
 8004ae6:	d001      	beq.n	8004aec <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004ae8:	2301      	movs	r3, #1
 8004aea:	e0cf      	b.n	8004c8c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f003 0302 	and.w	r3, r3, #2
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d010      	beq.n	8004b1a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	689a      	ldr	r2, [r3, #8]
 8004afc:	4b66      	ldr	r3, [pc, #408]	@ (8004c98 <HAL_RCC_ClockConfig+0x1f0>)
 8004afe:	689b      	ldr	r3, [r3, #8]
 8004b00:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004b04:	429a      	cmp	r2, r3
 8004b06:	d908      	bls.n	8004b1a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b08:	4b63      	ldr	r3, [pc, #396]	@ (8004c98 <HAL_RCC_ClockConfig+0x1f0>)
 8004b0a:	689b      	ldr	r3, [r3, #8]
 8004b0c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	689b      	ldr	r3, [r3, #8]
 8004b14:	4960      	ldr	r1, [pc, #384]	@ (8004c98 <HAL_RCC_ClockConfig+0x1f0>)
 8004b16:	4313      	orrs	r3, r2
 8004b18:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f003 0301 	and.w	r3, r3, #1
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d04c      	beq.n	8004bc0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	2b03      	cmp	r3, #3
 8004b2c:	d107      	bne.n	8004b3e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b2e:	4b5a      	ldr	r3, [pc, #360]	@ (8004c98 <HAL_RCC_ClockConfig+0x1f0>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d121      	bne.n	8004b7e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	e0a6      	b.n	8004c8c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	2b02      	cmp	r3, #2
 8004b44:	d107      	bne.n	8004b56 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b46:	4b54      	ldr	r3, [pc, #336]	@ (8004c98 <HAL_RCC_ClockConfig+0x1f0>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d115      	bne.n	8004b7e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004b52:	2301      	movs	r3, #1
 8004b54:	e09a      	b.n	8004c8c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d107      	bne.n	8004b6e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004b5e:	4b4e      	ldr	r3, [pc, #312]	@ (8004c98 <HAL_RCC_ClockConfig+0x1f0>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f003 0302 	and.w	r3, r3, #2
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d109      	bne.n	8004b7e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	e08e      	b.n	8004c8c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b6e:	4b4a      	ldr	r3, [pc, #296]	@ (8004c98 <HAL_RCC_ClockConfig+0x1f0>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d101      	bne.n	8004b7e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	e086      	b.n	8004c8c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004b7e:	4b46      	ldr	r3, [pc, #280]	@ (8004c98 <HAL_RCC_ClockConfig+0x1f0>)
 8004b80:	689b      	ldr	r3, [r3, #8]
 8004b82:	f023 0203 	bic.w	r2, r3, #3
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	4943      	ldr	r1, [pc, #268]	@ (8004c98 <HAL_RCC_ClockConfig+0x1f0>)
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b90:	f7fd fcc2 	bl	8002518 <HAL_GetTick>
 8004b94:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b96:	e00a      	b.n	8004bae <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b98:	f7fd fcbe 	bl	8002518 <HAL_GetTick>
 8004b9c:	4602      	mov	r2, r0
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	1ad3      	subs	r3, r2, r3
 8004ba2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d901      	bls.n	8004bae <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004baa:	2303      	movs	r3, #3
 8004bac:	e06e      	b.n	8004c8c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bae:	4b3a      	ldr	r3, [pc, #232]	@ (8004c98 <HAL_RCC_ClockConfig+0x1f0>)
 8004bb0:	689b      	ldr	r3, [r3, #8]
 8004bb2:	f003 020c 	and.w	r2, r3, #12
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	009b      	lsls	r3, r3, #2
 8004bbc:	429a      	cmp	r2, r3
 8004bbe:	d1eb      	bne.n	8004b98 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f003 0302 	and.w	r3, r3, #2
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d010      	beq.n	8004bee <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	689a      	ldr	r2, [r3, #8]
 8004bd0:	4b31      	ldr	r3, [pc, #196]	@ (8004c98 <HAL_RCC_ClockConfig+0x1f0>)
 8004bd2:	689b      	ldr	r3, [r3, #8]
 8004bd4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004bd8:	429a      	cmp	r2, r3
 8004bda:	d208      	bcs.n	8004bee <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004bdc:	4b2e      	ldr	r3, [pc, #184]	@ (8004c98 <HAL_RCC_ClockConfig+0x1f0>)
 8004bde:	689b      	ldr	r3, [r3, #8]
 8004be0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	689b      	ldr	r3, [r3, #8]
 8004be8:	492b      	ldr	r1, [pc, #172]	@ (8004c98 <HAL_RCC_ClockConfig+0x1f0>)
 8004bea:	4313      	orrs	r3, r2
 8004bec:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004bee:	4b29      	ldr	r3, [pc, #164]	@ (8004c94 <HAL_RCC_ClockConfig+0x1ec>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f003 0307 	and.w	r3, r3, #7
 8004bf6:	683a      	ldr	r2, [r7, #0]
 8004bf8:	429a      	cmp	r2, r3
 8004bfa:	d210      	bcs.n	8004c1e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bfc:	4b25      	ldr	r3, [pc, #148]	@ (8004c94 <HAL_RCC_ClockConfig+0x1ec>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f023 0207 	bic.w	r2, r3, #7
 8004c04:	4923      	ldr	r1, [pc, #140]	@ (8004c94 <HAL_RCC_ClockConfig+0x1ec>)
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c0c:	4b21      	ldr	r3, [pc, #132]	@ (8004c94 <HAL_RCC_ClockConfig+0x1ec>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f003 0307 	and.w	r3, r3, #7
 8004c14:	683a      	ldr	r2, [r7, #0]
 8004c16:	429a      	cmp	r2, r3
 8004c18:	d001      	beq.n	8004c1e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	e036      	b.n	8004c8c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f003 0304 	and.w	r3, r3, #4
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d008      	beq.n	8004c3c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c2a:	4b1b      	ldr	r3, [pc, #108]	@ (8004c98 <HAL_RCC_ClockConfig+0x1f0>)
 8004c2c:	689b      	ldr	r3, [r3, #8]
 8004c2e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	68db      	ldr	r3, [r3, #12]
 8004c36:	4918      	ldr	r1, [pc, #96]	@ (8004c98 <HAL_RCC_ClockConfig+0x1f0>)
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f003 0308 	and.w	r3, r3, #8
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d009      	beq.n	8004c5c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004c48:	4b13      	ldr	r3, [pc, #76]	@ (8004c98 <HAL_RCC_ClockConfig+0x1f0>)
 8004c4a:	689b      	ldr	r3, [r3, #8]
 8004c4c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	691b      	ldr	r3, [r3, #16]
 8004c54:	00db      	lsls	r3, r3, #3
 8004c56:	4910      	ldr	r1, [pc, #64]	@ (8004c98 <HAL_RCC_ClockConfig+0x1f0>)
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004c5c:	f000 f824 	bl	8004ca8 <HAL_RCC_GetSysClockFreq>
 8004c60:	4602      	mov	r2, r0
 8004c62:	4b0d      	ldr	r3, [pc, #52]	@ (8004c98 <HAL_RCC_ClockConfig+0x1f0>)
 8004c64:	689b      	ldr	r3, [r3, #8]
 8004c66:	091b      	lsrs	r3, r3, #4
 8004c68:	f003 030f 	and.w	r3, r3, #15
 8004c6c:	490b      	ldr	r1, [pc, #44]	@ (8004c9c <HAL_RCC_ClockConfig+0x1f4>)
 8004c6e:	5ccb      	ldrb	r3, [r1, r3]
 8004c70:	f003 031f 	and.w	r3, r3, #31
 8004c74:	fa22 f303 	lsr.w	r3, r2, r3
 8004c78:	4a09      	ldr	r2, [pc, #36]	@ (8004ca0 <HAL_RCC_ClockConfig+0x1f8>)
 8004c7a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004c7c:	4b09      	ldr	r3, [pc, #36]	@ (8004ca4 <HAL_RCC_ClockConfig+0x1fc>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4618      	mov	r0, r3
 8004c82:	f7fd fc0d 	bl	80024a0 <HAL_InitTick>
 8004c86:	4603      	mov	r3, r0
 8004c88:	72fb      	strb	r3, [r7, #11]

  return status;
 8004c8a:	7afb      	ldrb	r3, [r7, #11]
}
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	3710      	adds	r7, #16
 8004c90:	46bd      	mov	sp, r7
 8004c92:	bd80      	pop	{r7, pc}
 8004c94:	40022000 	.word	0x40022000
 8004c98:	40021000 	.word	0x40021000
 8004c9c:	0800c5bc 	.word	0x0800c5bc
 8004ca0:	20000004 	.word	0x20000004
 8004ca4:	20000008 	.word	0x20000008

08004ca8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b089      	sub	sp, #36	@ 0x24
 8004cac:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004cae:	2300      	movs	r3, #0
 8004cb0:	61fb      	str	r3, [r7, #28]
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004cb6:	4b3e      	ldr	r3, [pc, #248]	@ (8004db0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004cb8:	689b      	ldr	r3, [r3, #8]
 8004cba:	f003 030c 	and.w	r3, r3, #12
 8004cbe:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004cc0:	4b3b      	ldr	r3, [pc, #236]	@ (8004db0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004cc2:	68db      	ldr	r3, [r3, #12]
 8004cc4:	f003 0303 	and.w	r3, r3, #3
 8004cc8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004cca:	693b      	ldr	r3, [r7, #16]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d005      	beq.n	8004cdc <HAL_RCC_GetSysClockFreq+0x34>
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	2b0c      	cmp	r3, #12
 8004cd4:	d121      	bne.n	8004d1a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	2b01      	cmp	r3, #1
 8004cda:	d11e      	bne.n	8004d1a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004cdc:	4b34      	ldr	r3, [pc, #208]	@ (8004db0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f003 0308 	and.w	r3, r3, #8
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d107      	bne.n	8004cf8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004ce8:	4b31      	ldr	r3, [pc, #196]	@ (8004db0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004cea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004cee:	0a1b      	lsrs	r3, r3, #8
 8004cf0:	f003 030f 	and.w	r3, r3, #15
 8004cf4:	61fb      	str	r3, [r7, #28]
 8004cf6:	e005      	b.n	8004d04 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004cf8:	4b2d      	ldr	r3, [pc, #180]	@ (8004db0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	091b      	lsrs	r3, r3, #4
 8004cfe:	f003 030f 	and.w	r3, r3, #15
 8004d02:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004d04:	4a2b      	ldr	r2, [pc, #172]	@ (8004db4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004d06:	69fb      	ldr	r3, [r7, #28]
 8004d08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d0c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004d0e:	693b      	ldr	r3, [r7, #16]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d10d      	bne.n	8004d30 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004d14:	69fb      	ldr	r3, [r7, #28]
 8004d16:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004d18:	e00a      	b.n	8004d30 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004d1a:	693b      	ldr	r3, [r7, #16]
 8004d1c:	2b04      	cmp	r3, #4
 8004d1e:	d102      	bne.n	8004d26 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004d20:	4b25      	ldr	r3, [pc, #148]	@ (8004db8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004d22:	61bb      	str	r3, [r7, #24]
 8004d24:	e004      	b.n	8004d30 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004d26:	693b      	ldr	r3, [r7, #16]
 8004d28:	2b08      	cmp	r3, #8
 8004d2a:	d101      	bne.n	8004d30 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004d2c:	4b23      	ldr	r3, [pc, #140]	@ (8004dbc <HAL_RCC_GetSysClockFreq+0x114>)
 8004d2e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004d30:	693b      	ldr	r3, [r7, #16]
 8004d32:	2b0c      	cmp	r3, #12
 8004d34:	d134      	bne.n	8004da0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004d36:	4b1e      	ldr	r3, [pc, #120]	@ (8004db0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d38:	68db      	ldr	r3, [r3, #12]
 8004d3a:	f003 0303 	and.w	r3, r3, #3
 8004d3e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	2b02      	cmp	r3, #2
 8004d44:	d003      	beq.n	8004d4e <HAL_RCC_GetSysClockFreq+0xa6>
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	2b03      	cmp	r3, #3
 8004d4a:	d003      	beq.n	8004d54 <HAL_RCC_GetSysClockFreq+0xac>
 8004d4c:	e005      	b.n	8004d5a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004d4e:	4b1a      	ldr	r3, [pc, #104]	@ (8004db8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004d50:	617b      	str	r3, [r7, #20]
      break;
 8004d52:	e005      	b.n	8004d60 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004d54:	4b19      	ldr	r3, [pc, #100]	@ (8004dbc <HAL_RCC_GetSysClockFreq+0x114>)
 8004d56:	617b      	str	r3, [r7, #20]
      break;
 8004d58:	e002      	b.n	8004d60 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004d5a:	69fb      	ldr	r3, [r7, #28]
 8004d5c:	617b      	str	r3, [r7, #20]
      break;
 8004d5e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004d60:	4b13      	ldr	r3, [pc, #76]	@ (8004db0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d62:	68db      	ldr	r3, [r3, #12]
 8004d64:	091b      	lsrs	r3, r3, #4
 8004d66:	f003 0307 	and.w	r3, r3, #7
 8004d6a:	3301      	adds	r3, #1
 8004d6c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004d6e:	4b10      	ldr	r3, [pc, #64]	@ (8004db0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d70:	68db      	ldr	r3, [r3, #12]
 8004d72:	0a1b      	lsrs	r3, r3, #8
 8004d74:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004d78:	697a      	ldr	r2, [r7, #20]
 8004d7a:	fb03 f202 	mul.w	r2, r3, r2
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d84:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004d86:	4b0a      	ldr	r3, [pc, #40]	@ (8004db0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d88:	68db      	ldr	r3, [r3, #12]
 8004d8a:	0e5b      	lsrs	r3, r3, #25
 8004d8c:	f003 0303 	and.w	r3, r3, #3
 8004d90:	3301      	adds	r3, #1
 8004d92:	005b      	lsls	r3, r3, #1
 8004d94:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004d96:	697a      	ldr	r2, [r7, #20]
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d9e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004da0:	69bb      	ldr	r3, [r7, #24]
}
 8004da2:	4618      	mov	r0, r3
 8004da4:	3724      	adds	r7, #36	@ 0x24
 8004da6:	46bd      	mov	sp, r7
 8004da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dac:	4770      	bx	lr
 8004dae:	bf00      	nop
 8004db0:	40021000 	.word	0x40021000
 8004db4:	0800c5d4 	.word	0x0800c5d4
 8004db8:	00f42400 	.word	0x00f42400
 8004dbc:	007a1200 	.word	0x007a1200

08004dc0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004dc4:	4b03      	ldr	r3, [pc, #12]	@ (8004dd4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
}
 8004dc8:	4618      	mov	r0, r3
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd0:	4770      	bx	lr
 8004dd2:	bf00      	nop
 8004dd4:	20000004 	.word	0x20000004

08004dd8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004ddc:	f7ff fff0 	bl	8004dc0 <HAL_RCC_GetHCLKFreq>
 8004de0:	4602      	mov	r2, r0
 8004de2:	4b06      	ldr	r3, [pc, #24]	@ (8004dfc <HAL_RCC_GetPCLK1Freq+0x24>)
 8004de4:	689b      	ldr	r3, [r3, #8]
 8004de6:	0a1b      	lsrs	r3, r3, #8
 8004de8:	f003 0307 	and.w	r3, r3, #7
 8004dec:	4904      	ldr	r1, [pc, #16]	@ (8004e00 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004dee:	5ccb      	ldrb	r3, [r1, r3]
 8004df0:	f003 031f 	and.w	r3, r3, #31
 8004df4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004df8:	4618      	mov	r0, r3
 8004dfa:	bd80      	pop	{r7, pc}
 8004dfc:	40021000 	.word	0x40021000
 8004e00:	0800c5cc 	.word	0x0800c5cc

08004e04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004e08:	f7ff ffda 	bl	8004dc0 <HAL_RCC_GetHCLKFreq>
 8004e0c:	4602      	mov	r2, r0
 8004e0e:	4b06      	ldr	r3, [pc, #24]	@ (8004e28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004e10:	689b      	ldr	r3, [r3, #8]
 8004e12:	0adb      	lsrs	r3, r3, #11
 8004e14:	f003 0307 	and.w	r3, r3, #7
 8004e18:	4904      	ldr	r1, [pc, #16]	@ (8004e2c <HAL_RCC_GetPCLK2Freq+0x28>)
 8004e1a:	5ccb      	ldrb	r3, [r1, r3]
 8004e1c:	f003 031f 	and.w	r3, r3, #31
 8004e20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e24:	4618      	mov	r0, r3
 8004e26:	bd80      	pop	{r7, pc}
 8004e28:	40021000 	.word	0x40021000
 8004e2c:	0800c5cc 	.word	0x0800c5cc

08004e30 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b086      	sub	sp, #24
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004e38:	2300      	movs	r3, #0
 8004e3a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004e3c:	4b2a      	ldr	r3, [pc, #168]	@ (8004ee8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004e3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e40:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d003      	beq.n	8004e50 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004e48:	f7ff f9ee 	bl	8004228 <HAL_PWREx_GetVoltageRange>
 8004e4c:	6178      	str	r0, [r7, #20]
 8004e4e:	e014      	b.n	8004e7a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004e50:	4b25      	ldr	r3, [pc, #148]	@ (8004ee8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004e52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e54:	4a24      	ldr	r2, [pc, #144]	@ (8004ee8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004e56:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e5a:	6593      	str	r3, [r2, #88]	@ 0x58
 8004e5c:	4b22      	ldr	r3, [pc, #136]	@ (8004ee8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004e5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e60:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e64:	60fb      	str	r3, [r7, #12]
 8004e66:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004e68:	f7ff f9de 	bl	8004228 <HAL_PWREx_GetVoltageRange>
 8004e6c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004e6e:	4b1e      	ldr	r3, [pc, #120]	@ (8004ee8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004e70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e72:	4a1d      	ldr	r2, [pc, #116]	@ (8004ee8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004e74:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004e78:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004e80:	d10b      	bne.n	8004e9a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2b80      	cmp	r3, #128	@ 0x80
 8004e86:	d919      	bls.n	8004ebc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2ba0      	cmp	r3, #160	@ 0xa0
 8004e8c:	d902      	bls.n	8004e94 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004e8e:	2302      	movs	r3, #2
 8004e90:	613b      	str	r3, [r7, #16]
 8004e92:	e013      	b.n	8004ebc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004e94:	2301      	movs	r3, #1
 8004e96:	613b      	str	r3, [r7, #16]
 8004e98:	e010      	b.n	8004ebc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2b80      	cmp	r3, #128	@ 0x80
 8004e9e:	d902      	bls.n	8004ea6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004ea0:	2303      	movs	r3, #3
 8004ea2:	613b      	str	r3, [r7, #16]
 8004ea4:	e00a      	b.n	8004ebc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2b80      	cmp	r3, #128	@ 0x80
 8004eaa:	d102      	bne.n	8004eb2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004eac:	2302      	movs	r3, #2
 8004eae:	613b      	str	r3, [r7, #16]
 8004eb0:	e004      	b.n	8004ebc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2b70      	cmp	r3, #112	@ 0x70
 8004eb6:	d101      	bne.n	8004ebc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004eb8:	2301      	movs	r3, #1
 8004eba:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004ebc:	4b0b      	ldr	r3, [pc, #44]	@ (8004eec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f023 0207 	bic.w	r2, r3, #7
 8004ec4:	4909      	ldr	r1, [pc, #36]	@ (8004eec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004ec6:	693b      	ldr	r3, [r7, #16]
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004ecc:	4b07      	ldr	r3, [pc, #28]	@ (8004eec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f003 0307 	and.w	r3, r3, #7
 8004ed4:	693a      	ldr	r2, [r7, #16]
 8004ed6:	429a      	cmp	r2, r3
 8004ed8:	d001      	beq.n	8004ede <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004eda:	2301      	movs	r3, #1
 8004edc:	e000      	b.n	8004ee0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004ede:	2300      	movs	r3, #0
}
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	3718      	adds	r7, #24
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	bd80      	pop	{r7, pc}
 8004ee8:	40021000 	.word	0x40021000
 8004eec:	40022000 	.word	0x40022000

08004ef0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b086      	sub	sp, #24
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004ef8:	2300      	movs	r3, #0
 8004efa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004efc:	2300      	movs	r3, #0
 8004efe:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d041      	beq.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004f10:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004f14:	d02a      	beq.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004f16:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004f1a:	d824      	bhi.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004f1c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004f20:	d008      	beq.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004f22:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004f26:	d81e      	bhi.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d00a      	beq.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004f2c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004f30:	d010      	beq.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004f32:	e018      	b.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004f34:	4b86      	ldr	r3, [pc, #536]	@ (8005150 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f36:	68db      	ldr	r3, [r3, #12]
 8004f38:	4a85      	ldr	r2, [pc, #532]	@ (8005150 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f3a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f3e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004f40:	e015      	b.n	8004f6e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	3304      	adds	r3, #4
 8004f46:	2100      	movs	r1, #0
 8004f48:	4618      	mov	r0, r3
 8004f4a:	f000 fabb 	bl	80054c4 <RCCEx_PLLSAI1_Config>
 8004f4e:	4603      	mov	r3, r0
 8004f50:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004f52:	e00c      	b.n	8004f6e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	3320      	adds	r3, #32
 8004f58:	2100      	movs	r1, #0
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	f000 fba6 	bl	80056ac <RCCEx_PLLSAI2_Config>
 8004f60:	4603      	mov	r3, r0
 8004f62:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004f64:	e003      	b.n	8004f6e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004f66:	2301      	movs	r3, #1
 8004f68:	74fb      	strb	r3, [r7, #19]
      break;
 8004f6a:	e000      	b.n	8004f6e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004f6c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f6e:	7cfb      	ldrb	r3, [r7, #19]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d10b      	bne.n	8004f8c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004f74:	4b76      	ldr	r3, [pc, #472]	@ (8005150 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f7a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004f82:	4973      	ldr	r1, [pc, #460]	@ (8005150 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f84:	4313      	orrs	r3, r2
 8004f86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004f8a:	e001      	b.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f8c:	7cfb      	ldrb	r3, [r7, #19]
 8004f8e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d041      	beq.n	8005020 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004fa0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004fa4:	d02a      	beq.n	8004ffc <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004fa6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004faa:	d824      	bhi.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004fac:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004fb0:	d008      	beq.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004fb2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004fb6:	d81e      	bhi.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d00a      	beq.n	8004fd2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004fbc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004fc0:	d010      	beq.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004fc2:	e018      	b.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004fc4:	4b62      	ldr	r3, [pc, #392]	@ (8005150 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004fc6:	68db      	ldr	r3, [r3, #12]
 8004fc8:	4a61      	ldr	r2, [pc, #388]	@ (8005150 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004fca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004fce:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004fd0:	e015      	b.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	3304      	adds	r3, #4
 8004fd6:	2100      	movs	r1, #0
 8004fd8:	4618      	mov	r0, r3
 8004fda:	f000 fa73 	bl	80054c4 <RCCEx_PLLSAI1_Config>
 8004fde:	4603      	mov	r3, r0
 8004fe0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004fe2:	e00c      	b.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	3320      	adds	r3, #32
 8004fe8:	2100      	movs	r1, #0
 8004fea:	4618      	mov	r0, r3
 8004fec:	f000 fb5e 	bl	80056ac <RCCEx_PLLSAI2_Config>
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004ff4:	e003      	b.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	74fb      	strb	r3, [r7, #19]
      break;
 8004ffa:	e000      	b.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004ffc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ffe:	7cfb      	ldrb	r3, [r7, #19]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d10b      	bne.n	800501c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005004:	4b52      	ldr	r3, [pc, #328]	@ (8005150 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005006:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800500a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005012:	494f      	ldr	r1, [pc, #316]	@ (8005150 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005014:	4313      	orrs	r3, r2
 8005016:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800501a:	e001      	b.n	8005020 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800501c:	7cfb      	ldrb	r3, [r7, #19]
 800501e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005028:	2b00      	cmp	r3, #0
 800502a:	f000 80a0 	beq.w	800516e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800502e:	2300      	movs	r3, #0
 8005030:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005032:	4b47      	ldr	r3, [pc, #284]	@ (8005150 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005034:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005036:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800503a:	2b00      	cmp	r3, #0
 800503c:	d101      	bne.n	8005042 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800503e:	2301      	movs	r3, #1
 8005040:	e000      	b.n	8005044 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8005042:	2300      	movs	r3, #0
 8005044:	2b00      	cmp	r3, #0
 8005046:	d00d      	beq.n	8005064 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005048:	4b41      	ldr	r3, [pc, #260]	@ (8005150 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800504a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800504c:	4a40      	ldr	r2, [pc, #256]	@ (8005150 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800504e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005052:	6593      	str	r3, [r2, #88]	@ 0x58
 8005054:	4b3e      	ldr	r3, [pc, #248]	@ (8005150 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005056:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005058:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800505c:	60bb      	str	r3, [r7, #8]
 800505e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005060:	2301      	movs	r3, #1
 8005062:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005064:	4b3b      	ldr	r3, [pc, #236]	@ (8005154 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a3a      	ldr	r2, [pc, #232]	@ (8005154 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800506a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800506e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005070:	f7fd fa52 	bl	8002518 <HAL_GetTick>
 8005074:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005076:	e009      	b.n	800508c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005078:	f7fd fa4e 	bl	8002518 <HAL_GetTick>
 800507c:	4602      	mov	r2, r0
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	1ad3      	subs	r3, r2, r3
 8005082:	2b02      	cmp	r3, #2
 8005084:	d902      	bls.n	800508c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8005086:	2303      	movs	r3, #3
 8005088:	74fb      	strb	r3, [r7, #19]
        break;
 800508a:	e005      	b.n	8005098 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800508c:	4b31      	ldr	r3, [pc, #196]	@ (8005154 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005094:	2b00      	cmp	r3, #0
 8005096:	d0ef      	beq.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8005098:	7cfb      	ldrb	r3, [r7, #19]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d15c      	bne.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800509e:	4b2c      	ldr	r3, [pc, #176]	@ (8005150 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050a4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80050a8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d01f      	beq.n	80050f0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80050b6:	697a      	ldr	r2, [r7, #20]
 80050b8:	429a      	cmp	r2, r3
 80050ba:	d019      	beq.n	80050f0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80050bc:	4b24      	ldr	r3, [pc, #144]	@ (8005150 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050c2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80050c6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80050c8:	4b21      	ldr	r3, [pc, #132]	@ (8005150 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050ce:	4a20      	ldr	r2, [pc, #128]	@ (8005150 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80050d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80050d8:	4b1d      	ldr	r3, [pc, #116]	@ (8005150 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050de:	4a1c      	ldr	r2, [pc, #112]	@ (8005150 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050e0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80050e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80050e8:	4a19      	ldr	r2, [pc, #100]	@ (8005150 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050ea:	697b      	ldr	r3, [r7, #20]
 80050ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80050f0:	697b      	ldr	r3, [r7, #20]
 80050f2:	f003 0301 	and.w	r3, r3, #1
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d016      	beq.n	8005128 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050fa:	f7fd fa0d 	bl	8002518 <HAL_GetTick>
 80050fe:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005100:	e00b      	b.n	800511a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005102:	f7fd fa09 	bl	8002518 <HAL_GetTick>
 8005106:	4602      	mov	r2, r0
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	1ad3      	subs	r3, r2, r3
 800510c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005110:	4293      	cmp	r3, r2
 8005112:	d902      	bls.n	800511a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8005114:	2303      	movs	r3, #3
 8005116:	74fb      	strb	r3, [r7, #19]
            break;
 8005118:	e006      	b.n	8005128 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800511a:	4b0d      	ldr	r3, [pc, #52]	@ (8005150 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800511c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005120:	f003 0302 	and.w	r3, r3, #2
 8005124:	2b00      	cmp	r3, #0
 8005126:	d0ec      	beq.n	8005102 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8005128:	7cfb      	ldrb	r3, [r7, #19]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d10c      	bne.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800512e:	4b08      	ldr	r3, [pc, #32]	@ (8005150 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005130:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005134:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800513e:	4904      	ldr	r1, [pc, #16]	@ (8005150 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005140:	4313      	orrs	r3, r2
 8005142:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005146:	e009      	b.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005148:	7cfb      	ldrb	r3, [r7, #19]
 800514a:	74bb      	strb	r3, [r7, #18]
 800514c:	e006      	b.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800514e:	bf00      	nop
 8005150:	40021000 	.word	0x40021000
 8005154:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005158:	7cfb      	ldrb	r3, [r7, #19]
 800515a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800515c:	7c7b      	ldrb	r3, [r7, #17]
 800515e:	2b01      	cmp	r3, #1
 8005160:	d105      	bne.n	800516e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005162:	4b9e      	ldr	r3, [pc, #632]	@ (80053dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005164:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005166:	4a9d      	ldr	r2, [pc, #628]	@ (80053dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005168:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800516c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f003 0301 	and.w	r3, r3, #1
 8005176:	2b00      	cmp	r3, #0
 8005178:	d00a      	beq.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800517a:	4b98      	ldr	r3, [pc, #608]	@ (80053dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800517c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005180:	f023 0203 	bic.w	r2, r3, #3
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005188:	4994      	ldr	r1, [pc, #592]	@ (80053dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800518a:	4313      	orrs	r3, r2
 800518c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f003 0302 	and.w	r3, r3, #2
 8005198:	2b00      	cmp	r3, #0
 800519a:	d00a      	beq.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800519c:	4b8f      	ldr	r3, [pc, #572]	@ (80053dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800519e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051a2:	f023 020c 	bic.w	r2, r3, #12
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051aa:	498c      	ldr	r1, [pc, #560]	@ (80053dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051ac:	4313      	orrs	r3, r2
 80051ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f003 0304 	and.w	r3, r3, #4
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d00a      	beq.n	80051d4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80051be:	4b87      	ldr	r3, [pc, #540]	@ (80053dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051c4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051cc:	4983      	ldr	r1, [pc, #524]	@ (80053dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051ce:	4313      	orrs	r3, r2
 80051d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f003 0308 	and.w	r3, r3, #8
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d00a      	beq.n	80051f6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80051e0:	4b7e      	ldr	r3, [pc, #504]	@ (80053dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051e6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051ee:	497b      	ldr	r1, [pc, #492]	@ (80053dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051f0:	4313      	orrs	r3, r2
 80051f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f003 0310 	and.w	r3, r3, #16
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d00a      	beq.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005202:	4b76      	ldr	r3, [pc, #472]	@ (80053dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005204:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005208:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005210:	4972      	ldr	r1, [pc, #456]	@ (80053dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005212:	4313      	orrs	r3, r2
 8005214:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f003 0320 	and.w	r3, r3, #32
 8005220:	2b00      	cmp	r3, #0
 8005222:	d00a      	beq.n	800523a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005224:	4b6d      	ldr	r3, [pc, #436]	@ (80053dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005226:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800522a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005232:	496a      	ldr	r1, [pc, #424]	@ (80053dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005234:	4313      	orrs	r3, r2
 8005236:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005242:	2b00      	cmp	r3, #0
 8005244:	d00a      	beq.n	800525c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005246:	4b65      	ldr	r3, [pc, #404]	@ (80053dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005248:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800524c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005254:	4961      	ldr	r1, [pc, #388]	@ (80053dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005256:	4313      	orrs	r3, r2
 8005258:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005264:	2b00      	cmp	r3, #0
 8005266:	d00a      	beq.n	800527e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005268:	4b5c      	ldr	r3, [pc, #368]	@ (80053dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800526a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800526e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005276:	4959      	ldr	r1, [pc, #356]	@ (80053dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005278:	4313      	orrs	r3, r2
 800527a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005286:	2b00      	cmp	r3, #0
 8005288:	d00a      	beq.n	80052a0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800528a:	4b54      	ldr	r3, [pc, #336]	@ (80053dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800528c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005290:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005298:	4950      	ldr	r1, [pc, #320]	@ (80053dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800529a:	4313      	orrs	r3, r2
 800529c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d00a      	beq.n	80052c2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80052ac:	4b4b      	ldr	r3, [pc, #300]	@ (80053dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052b2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052ba:	4948      	ldr	r1, [pc, #288]	@ (80053dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052bc:	4313      	orrs	r3, r2
 80052be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d00a      	beq.n	80052e4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80052ce:	4b43      	ldr	r3, [pc, #268]	@ (80053dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052d4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052dc:	493f      	ldr	r1, [pc, #252]	@ (80053dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052de:	4313      	orrs	r3, r2
 80052e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d028      	beq.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80052f0:	4b3a      	ldr	r3, [pc, #232]	@ (80053dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052f6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80052fe:	4937      	ldr	r1, [pc, #220]	@ (80053dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005300:	4313      	orrs	r3, r2
 8005302:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800530a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800530e:	d106      	bne.n	800531e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005310:	4b32      	ldr	r3, [pc, #200]	@ (80053dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005312:	68db      	ldr	r3, [r3, #12]
 8005314:	4a31      	ldr	r2, [pc, #196]	@ (80053dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005316:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800531a:	60d3      	str	r3, [r2, #12]
 800531c:	e011      	b.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005322:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005326:	d10c      	bne.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	3304      	adds	r3, #4
 800532c:	2101      	movs	r1, #1
 800532e:	4618      	mov	r0, r3
 8005330:	f000 f8c8 	bl	80054c4 <RCCEx_PLLSAI1_Config>
 8005334:	4603      	mov	r3, r0
 8005336:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005338:	7cfb      	ldrb	r3, [r7, #19]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d001      	beq.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800533e:	7cfb      	ldrb	r3, [r7, #19]
 8005340:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800534a:	2b00      	cmp	r3, #0
 800534c:	d028      	beq.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800534e:	4b23      	ldr	r3, [pc, #140]	@ (80053dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005350:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005354:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800535c:	491f      	ldr	r1, [pc, #124]	@ (80053dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800535e:	4313      	orrs	r3, r2
 8005360:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005368:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800536c:	d106      	bne.n	800537c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800536e:	4b1b      	ldr	r3, [pc, #108]	@ (80053dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005370:	68db      	ldr	r3, [r3, #12]
 8005372:	4a1a      	ldr	r2, [pc, #104]	@ (80053dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005374:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005378:	60d3      	str	r3, [r2, #12]
 800537a:	e011      	b.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005380:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005384:	d10c      	bne.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	3304      	adds	r3, #4
 800538a:	2101      	movs	r1, #1
 800538c:	4618      	mov	r0, r3
 800538e:	f000 f899 	bl	80054c4 <RCCEx_PLLSAI1_Config>
 8005392:	4603      	mov	r3, r0
 8005394:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005396:	7cfb      	ldrb	r3, [r7, #19]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d001      	beq.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800539c:	7cfb      	ldrb	r3, [r7, #19]
 800539e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d02b      	beq.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80053ac:	4b0b      	ldr	r3, [pc, #44]	@ (80053dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053b2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80053ba:	4908      	ldr	r1, [pc, #32]	@ (80053dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053bc:	4313      	orrs	r3, r2
 80053be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80053c6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80053ca:	d109      	bne.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80053cc:	4b03      	ldr	r3, [pc, #12]	@ (80053dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053ce:	68db      	ldr	r3, [r3, #12]
 80053d0:	4a02      	ldr	r2, [pc, #8]	@ (80053dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053d2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80053d6:	60d3      	str	r3, [r2, #12]
 80053d8:	e014      	b.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80053da:	bf00      	nop
 80053dc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80053e4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80053e8:	d10c      	bne.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	3304      	adds	r3, #4
 80053ee:	2101      	movs	r1, #1
 80053f0:	4618      	mov	r0, r3
 80053f2:	f000 f867 	bl	80054c4 <RCCEx_PLLSAI1_Config>
 80053f6:	4603      	mov	r3, r0
 80053f8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80053fa:	7cfb      	ldrb	r3, [r7, #19]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d001      	beq.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005400:	7cfb      	ldrb	r3, [r7, #19]
 8005402:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800540c:	2b00      	cmp	r3, #0
 800540e:	d02f      	beq.n	8005470 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005410:	4b2b      	ldr	r3, [pc, #172]	@ (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005412:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005416:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800541e:	4928      	ldr	r1, [pc, #160]	@ (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005420:	4313      	orrs	r3, r2
 8005422:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800542a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800542e:	d10d      	bne.n	800544c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	3304      	adds	r3, #4
 8005434:	2102      	movs	r1, #2
 8005436:	4618      	mov	r0, r3
 8005438:	f000 f844 	bl	80054c4 <RCCEx_PLLSAI1_Config>
 800543c:	4603      	mov	r3, r0
 800543e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005440:	7cfb      	ldrb	r3, [r7, #19]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d014      	beq.n	8005470 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005446:	7cfb      	ldrb	r3, [r7, #19]
 8005448:	74bb      	strb	r3, [r7, #18]
 800544a:	e011      	b.n	8005470 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005450:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005454:	d10c      	bne.n	8005470 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	3320      	adds	r3, #32
 800545a:	2102      	movs	r1, #2
 800545c:	4618      	mov	r0, r3
 800545e:	f000 f925 	bl	80056ac <RCCEx_PLLSAI2_Config>
 8005462:	4603      	mov	r3, r0
 8005464:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005466:	7cfb      	ldrb	r3, [r7, #19]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d001      	beq.n	8005470 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800546c:	7cfb      	ldrb	r3, [r7, #19]
 800546e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005478:	2b00      	cmp	r3, #0
 800547a:	d00a      	beq.n	8005492 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800547c:	4b10      	ldr	r3, [pc, #64]	@ (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800547e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005482:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800548a:	490d      	ldr	r1, [pc, #52]	@ (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800548c:	4313      	orrs	r3, r2
 800548e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800549a:	2b00      	cmp	r3, #0
 800549c:	d00b      	beq.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800549e:	4b08      	ldr	r3, [pc, #32]	@ (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80054a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054a4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80054ae:	4904      	ldr	r1, [pc, #16]	@ (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80054b0:	4313      	orrs	r3, r2
 80054b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80054b6:	7cbb      	ldrb	r3, [r7, #18]
}
 80054b8:	4618      	mov	r0, r3
 80054ba:	3718      	adds	r7, #24
 80054bc:	46bd      	mov	sp, r7
 80054be:	bd80      	pop	{r7, pc}
 80054c0:	40021000 	.word	0x40021000

080054c4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b084      	sub	sp, #16
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
 80054cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80054ce:	2300      	movs	r3, #0
 80054d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80054d2:	4b75      	ldr	r3, [pc, #468]	@ (80056a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054d4:	68db      	ldr	r3, [r3, #12]
 80054d6:	f003 0303 	and.w	r3, r3, #3
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d018      	beq.n	8005510 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80054de:	4b72      	ldr	r3, [pc, #456]	@ (80056a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054e0:	68db      	ldr	r3, [r3, #12]
 80054e2:	f003 0203 	and.w	r2, r3, #3
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	429a      	cmp	r2, r3
 80054ec:	d10d      	bne.n	800550a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
       ||
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d009      	beq.n	800550a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80054f6:	4b6c      	ldr	r3, [pc, #432]	@ (80056a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054f8:	68db      	ldr	r3, [r3, #12]
 80054fa:	091b      	lsrs	r3, r3, #4
 80054fc:	f003 0307 	and.w	r3, r3, #7
 8005500:	1c5a      	adds	r2, r3, #1
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	685b      	ldr	r3, [r3, #4]
       ||
 8005506:	429a      	cmp	r2, r3
 8005508:	d047      	beq.n	800559a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800550a:	2301      	movs	r3, #1
 800550c:	73fb      	strb	r3, [r7, #15]
 800550e:	e044      	b.n	800559a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	2b03      	cmp	r3, #3
 8005516:	d018      	beq.n	800554a <RCCEx_PLLSAI1_Config+0x86>
 8005518:	2b03      	cmp	r3, #3
 800551a:	d825      	bhi.n	8005568 <RCCEx_PLLSAI1_Config+0xa4>
 800551c:	2b01      	cmp	r3, #1
 800551e:	d002      	beq.n	8005526 <RCCEx_PLLSAI1_Config+0x62>
 8005520:	2b02      	cmp	r3, #2
 8005522:	d009      	beq.n	8005538 <RCCEx_PLLSAI1_Config+0x74>
 8005524:	e020      	b.n	8005568 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005526:	4b60      	ldr	r3, [pc, #384]	@ (80056a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f003 0302 	and.w	r3, r3, #2
 800552e:	2b00      	cmp	r3, #0
 8005530:	d11d      	bne.n	800556e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005532:	2301      	movs	r3, #1
 8005534:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005536:	e01a      	b.n	800556e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005538:	4b5b      	ldr	r3, [pc, #364]	@ (80056a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005540:	2b00      	cmp	r3, #0
 8005542:	d116      	bne.n	8005572 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005544:	2301      	movs	r3, #1
 8005546:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005548:	e013      	b.n	8005572 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800554a:	4b57      	ldr	r3, [pc, #348]	@ (80056a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005552:	2b00      	cmp	r3, #0
 8005554:	d10f      	bne.n	8005576 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005556:	4b54      	ldr	r3, [pc, #336]	@ (80056a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800555e:	2b00      	cmp	r3, #0
 8005560:	d109      	bne.n	8005576 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005562:	2301      	movs	r3, #1
 8005564:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005566:	e006      	b.n	8005576 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005568:	2301      	movs	r3, #1
 800556a:	73fb      	strb	r3, [r7, #15]
      break;
 800556c:	e004      	b.n	8005578 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800556e:	bf00      	nop
 8005570:	e002      	b.n	8005578 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005572:	bf00      	nop
 8005574:	e000      	b.n	8005578 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005576:	bf00      	nop
    }

    if(status == HAL_OK)
 8005578:	7bfb      	ldrb	r3, [r7, #15]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d10d      	bne.n	800559a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800557e:	4b4a      	ldr	r3, [pc, #296]	@ (80056a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005580:	68db      	ldr	r3, [r3, #12]
 8005582:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6819      	ldr	r1, [r3, #0]
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	3b01      	subs	r3, #1
 8005590:	011b      	lsls	r3, r3, #4
 8005592:	430b      	orrs	r3, r1
 8005594:	4944      	ldr	r1, [pc, #272]	@ (80056a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005596:	4313      	orrs	r3, r2
 8005598:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800559a:	7bfb      	ldrb	r3, [r7, #15]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d17d      	bne.n	800569c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80055a0:	4b41      	ldr	r3, [pc, #260]	@ (80056a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4a40      	ldr	r2, [pc, #256]	@ (80056a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055a6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80055aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80055ac:	f7fc ffb4 	bl	8002518 <HAL_GetTick>
 80055b0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80055b2:	e009      	b.n	80055c8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80055b4:	f7fc ffb0 	bl	8002518 <HAL_GetTick>
 80055b8:	4602      	mov	r2, r0
 80055ba:	68bb      	ldr	r3, [r7, #8]
 80055bc:	1ad3      	subs	r3, r2, r3
 80055be:	2b02      	cmp	r3, #2
 80055c0:	d902      	bls.n	80055c8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80055c2:	2303      	movs	r3, #3
 80055c4:	73fb      	strb	r3, [r7, #15]
        break;
 80055c6:	e005      	b.n	80055d4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80055c8:	4b37      	ldr	r3, [pc, #220]	@ (80056a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d1ef      	bne.n	80055b4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80055d4:	7bfb      	ldrb	r3, [r7, #15]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d160      	bne.n	800569c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d111      	bne.n	8005604 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80055e0:	4b31      	ldr	r3, [pc, #196]	@ (80056a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055e2:	691b      	ldr	r3, [r3, #16]
 80055e4:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80055e8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80055ec:	687a      	ldr	r2, [r7, #4]
 80055ee:	6892      	ldr	r2, [r2, #8]
 80055f0:	0211      	lsls	r1, r2, #8
 80055f2:	687a      	ldr	r2, [r7, #4]
 80055f4:	68d2      	ldr	r2, [r2, #12]
 80055f6:	0912      	lsrs	r2, r2, #4
 80055f8:	0452      	lsls	r2, r2, #17
 80055fa:	430a      	orrs	r2, r1
 80055fc:	492a      	ldr	r1, [pc, #168]	@ (80056a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055fe:	4313      	orrs	r3, r2
 8005600:	610b      	str	r3, [r1, #16]
 8005602:	e027      	b.n	8005654 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	2b01      	cmp	r3, #1
 8005608:	d112      	bne.n	8005630 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800560a:	4b27      	ldr	r3, [pc, #156]	@ (80056a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800560c:	691b      	ldr	r3, [r3, #16]
 800560e:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8005612:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005616:	687a      	ldr	r2, [r7, #4]
 8005618:	6892      	ldr	r2, [r2, #8]
 800561a:	0211      	lsls	r1, r2, #8
 800561c:	687a      	ldr	r2, [r7, #4]
 800561e:	6912      	ldr	r2, [r2, #16]
 8005620:	0852      	lsrs	r2, r2, #1
 8005622:	3a01      	subs	r2, #1
 8005624:	0552      	lsls	r2, r2, #21
 8005626:	430a      	orrs	r2, r1
 8005628:	491f      	ldr	r1, [pc, #124]	@ (80056a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800562a:	4313      	orrs	r3, r2
 800562c:	610b      	str	r3, [r1, #16]
 800562e:	e011      	b.n	8005654 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005630:	4b1d      	ldr	r3, [pc, #116]	@ (80056a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005632:	691b      	ldr	r3, [r3, #16]
 8005634:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005638:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800563c:	687a      	ldr	r2, [r7, #4]
 800563e:	6892      	ldr	r2, [r2, #8]
 8005640:	0211      	lsls	r1, r2, #8
 8005642:	687a      	ldr	r2, [r7, #4]
 8005644:	6952      	ldr	r2, [r2, #20]
 8005646:	0852      	lsrs	r2, r2, #1
 8005648:	3a01      	subs	r2, #1
 800564a:	0652      	lsls	r2, r2, #25
 800564c:	430a      	orrs	r2, r1
 800564e:	4916      	ldr	r1, [pc, #88]	@ (80056a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005650:	4313      	orrs	r3, r2
 8005652:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005654:	4b14      	ldr	r3, [pc, #80]	@ (80056a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4a13      	ldr	r2, [pc, #76]	@ (80056a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800565a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800565e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005660:	f7fc ff5a 	bl	8002518 <HAL_GetTick>
 8005664:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005666:	e009      	b.n	800567c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005668:	f7fc ff56 	bl	8002518 <HAL_GetTick>
 800566c:	4602      	mov	r2, r0
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	1ad3      	subs	r3, r2, r3
 8005672:	2b02      	cmp	r3, #2
 8005674:	d902      	bls.n	800567c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8005676:	2303      	movs	r3, #3
 8005678:	73fb      	strb	r3, [r7, #15]
          break;
 800567a:	e005      	b.n	8005688 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800567c:	4b0a      	ldr	r3, [pc, #40]	@ (80056a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005684:	2b00      	cmp	r3, #0
 8005686:	d0ef      	beq.n	8005668 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005688:	7bfb      	ldrb	r3, [r7, #15]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d106      	bne.n	800569c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800568e:	4b06      	ldr	r3, [pc, #24]	@ (80056a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005690:	691a      	ldr	r2, [r3, #16]
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	699b      	ldr	r3, [r3, #24]
 8005696:	4904      	ldr	r1, [pc, #16]	@ (80056a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005698:	4313      	orrs	r3, r2
 800569a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800569c:	7bfb      	ldrb	r3, [r7, #15]
}
 800569e:	4618      	mov	r0, r3
 80056a0:	3710      	adds	r7, #16
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bd80      	pop	{r7, pc}
 80056a6:	bf00      	nop
 80056a8:	40021000 	.word	0x40021000

080056ac <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b084      	sub	sp, #16
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
 80056b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80056b6:	2300      	movs	r3, #0
 80056b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80056ba:	4b6a      	ldr	r3, [pc, #424]	@ (8005864 <RCCEx_PLLSAI2_Config+0x1b8>)
 80056bc:	68db      	ldr	r3, [r3, #12]
 80056be:	f003 0303 	and.w	r3, r3, #3
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d018      	beq.n	80056f8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80056c6:	4b67      	ldr	r3, [pc, #412]	@ (8005864 <RCCEx_PLLSAI2_Config+0x1b8>)
 80056c8:	68db      	ldr	r3, [r3, #12]
 80056ca:	f003 0203 	and.w	r2, r3, #3
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	429a      	cmp	r2, r3
 80056d4:	d10d      	bne.n	80056f2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
       ||
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d009      	beq.n	80056f2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80056de:	4b61      	ldr	r3, [pc, #388]	@ (8005864 <RCCEx_PLLSAI2_Config+0x1b8>)
 80056e0:	68db      	ldr	r3, [r3, #12]
 80056e2:	091b      	lsrs	r3, r3, #4
 80056e4:	f003 0307 	and.w	r3, r3, #7
 80056e8:	1c5a      	adds	r2, r3, #1
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	685b      	ldr	r3, [r3, #4]
       ||
 80056ee:	429a      	cmp	r2, r3
 80056f0:	d047      	beq.n	8005782 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80056f2:	2301      	movs	r3, #1
 80056f4:	73fb      	strb	r3, [r7, #15]
 80056f6:	e044      	b.n	8005782 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	2b03      	cmp	r3, #3
 80056fe:	d018      	beq.n	8005732 <RCCEx_PLLSAI2_Config+0x86>
 8005700:	2b03      	cmp	r3, #3
 8005702:	d825      	bhi.n	8005750 <RCCEx_PLLSAI2_Config+0xa4>
 8005704:	2b01      	cmp	r3, #1
 8005706:	d002      	beq.n	800570e <RCCEx_PLLSAI2_Config+0x62>
 8005708:	2b02      	cmp	r3, #2
 800570a:	d009      	beq.n	8005720 <RCCEx_PLLSAI2_Config+0x74>
 800570c:	e020      	b.n	8005750 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800570e:	4b55      	ldr	r3, [pc, #340]	@ (8005864 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f003 0302 	and.w	r3, r3, #2
 8005716:	2b00      	cmp	r3, #0
 8005718:	d11d      	bne.n	8005756 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800571a:	2301      	movs	r3, #1
 800571c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800571e:	e01a      	b.n	8005756 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005720:	4b50      	ldr	r3, [pc, #320]	@ (8005864 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005728:	2b00      	cmp	r3, #0
 800572a:	d116      	bne.n	800575a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800572c:	2301      	movs	r3, #1
 800572e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005730:	e013      	b.n	800575a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005732:	4b4c      	ldr	r3, [pc, #304]	@ (8005864 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800573a:	2b00      	cmp	r3, #0
 800573c:	d10f      	bne.n	800575e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800573e:	4b49      	ldr	r3, [pc, #292]	@ (8005864 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005746:	2b00      	cmp	r3, #0
 8005748:	d109      	bne.n	800575e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800574a:	2301      	movs	r3, #1
 800574c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800574e:	e006      	b.n	800575e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005750:	2301      	movs	r3, #1
 8005752:	73fb      	strb	r3, [r7, #15]
      break;
 8005754:	e004      	b.n	8005760 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005756:	bf00      	nop
 8005758:	e002      	b.n	8005760 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800575a:	bf00      	nop
 800575c:	e000      	b.n	8005760 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800575e:	bf00      	nop
    }

    if(status == HAL_OK)
 8005760:	7bfb      	ldrb	r3, [r7, #15]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d10d      	bne.n	8005782 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005766:	4b3f      	ldr	r3, [pc, #252]	@ (8005864 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005768:	68db      	ldr	r3, [r3, #12]
 800576a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6819      	ldr	r1, [r3, #0]
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	685b      	ldr	r3, [r3, #4]
 8005776:	3b01      	subs	r3, #1
 8005778:	011b      	lsls	r3, r3, #4
 800577a:	430b      	orrs	r3, r1
 800577c:	4939      	ldr	r1, [pc, #228]	@ (8005864 <RCCEx_PLLSAI2_Config+0x1b8>)
 800577e:	4313      	orrs	r3, r2
 8005780:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005782:	7bfb      	ldrb	r3, [r7, #15]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d167      	bne.n	8005858 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005788:	4b36      	ldr	r3, [pc, #216]	@ (8005864 <RCCEx_PLLSAI2_Config+0x1b8>)
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4a35      	ldr	r2, [pc, #212]	@ (8005864 <RCCEx_PLLSAI2_Config+0x1b8>)
 800578e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005792:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005794:	f7fc fec0 	bl	8002518 <HAL_GetTick>
 8005798:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800579a:	e009      	b.n	80057b0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800579c:	f7fc febc 	bl	8002518 <HAL_GetTick>
 80057a0:	4602      	mov	r2, r0
 80057a2:	68bb      	ldr	r3, [r7, #8]
 80057a4:	1ad3      	subs	r3, r2, r3
 80057a6:	2b02      	cmp	r3, #2
 80057a8:	d902      	bls.n	80057b0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80057aa:	2303      	movs	r3, #3
 80057ac:	73fb      	strb	r3, [r7, #15]
        break;
 80057ae:	e005      	b.n	80057bc <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80057b0:	4b2c      	ldr	r3, [pc, #176]	@ (8005864 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d1ef      	bne.n	800579c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80057bc:	7bfb      	ldrb	r3, [r7, #15]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d14a      	bne.n	8005858 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d111      	bne.n	80057ec <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80057c8:	4b26      	ldr	r3, [pc, #152]	@ (8005864 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057ca:	695b      	ldr	r3, [r3, #20]
 80057cc:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80057d0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80057d4:	687a      	ldr	r2, [r7, #4]
 80057d6:	6892      	ldr	r2, [r2, #8]
 80057d8:	0211      	lsls	r1, r2, #8
 80057da:	687a      	ldr	r2, [r7, #4]
 80057dc:	68d2      	ldr	r2, [r2, #12]
 80057de:	0912      	lsrs	r2, r2, #4
 80057e0:	0452      	lsls	r2, r2, #17
 80057e2:	430a      	orrs	r2, r1
 80057e4:	491f      	ldr	r1, [pc, #124]	@ (8005864 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057e6:	4313      	orrs	r3, r2
 80057e8:	614b      	str	r3, [r1, #20]
 80057ea:	e011      	b.n	8005810 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80057ec:	4b1d      	ldr	r3, [pc, #116]	@ (8005864 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057ee:	695b      	ldr	r3, [r3, #20]
 80057f0:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80057f4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80057f8:	687a      	ldr	r2, [r7, #4]
 80057fa:	6892      	ldr	r2, [r2, #8]
 80057fc:	0211      	lsls	r1, r2, #8
 80057fe:	687a      	ldr	r2, [r7, #4]
 8005800:	6912      	ldr	r2, [r2, #16]
 8005802:	0852      	lsrs	r2, r2, #1
 8005804:	3a01      	subs	r2, #1
 8005806:	0652      	lsls	r2, r2, #25
 8005808:	430a      	orrs	r2, r1
 800580a:	4916      	ldr	r1, [pc, #88]	@ (8005864 <RCCEx_PLLSAI2_Config+0x1b8>)
 800580c:	4313      	orrs	r3, r2
 800580e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005810:	4b14      	ldr	r3, [pc, #80]	@ (8005864 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	4a13      	ldr	r2, [pc, #76]	@ (8005864 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005816:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800581a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800581c:	f7fc fe7c 	bl	8002518 <HAL_GetTick>
 8005820:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005822:	e009      	b.n	8005838 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005824:	f7fc fe78 	bl	8002518 <HAL_GetTick>
 8005828:	4602      	mov	r2, r0
 800582a:	68bb      	ldr	r3, [r7, #8]
 800582c:	1ad3      	subs	r3, r2, r3
 800582e:	2b02      	cmp	r3, #2
 8005830:	d902      	bls.n	8005838 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8005832:	2303      	movs	r3, #3
 8005834:	73fb      	strb	r3, [r7, #15]
          break;
 8005836:	e005      	b.n	8005844 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005838:	4b0a      	ldr	r3, [pc, #40]	@ (8005864 <RCCEx_PLLSAI2_Config+0x1b8>)
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005840:	2b00      	cmp	r3, #0
 8005842:	d0ef      	beq.n	8005824 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005844:	7bfb      	ldrb	r3, [r7, #15]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d106      	bne.n	8005858 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800584a:	4b06      	ldr	r3, [pc, #24]	@ (8005864 <RCCEx_PLLSAI2_Config+0x1b8>)
 800584c:	695a      	ldr	r2, [r3, #20]
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	695b      	ldr	r3, [r3, #20]
 8005852:	4904      	ldr	r1, [pc, #16]	@ (8005864 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005854:	4313      	orrs	r3, r2
 8005856:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005858:	7bfb      	ldrb	r3, [r7, #15]
}
 800585a:	4618      	mov	r0, r3
 800585c:	3710      	adds	r7, #16
 800585e:	46bd      	mov	sp, r7
 8005860:	bd80      	pop	{r7, pc}
 8005862:	bf00      	nop
 8005864:	40021000 	.word	0x40021000

08005868 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005868:	b580      	push	{r7, lr}
 800586a:	b082      	sub	sp, #8
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d101      	bne.n	800587a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005876:	2301      	movs	r3, #1
 8005878:	e040      	b.n	80058fc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800587e:	2b00      	cmp	r3, #0
 8005880:	d106      	bne.n	8005890 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2200      	movs	r2, #0
 8005886:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800588a:	6878      	ldr	r0, [r7, #4]
 800588c:	f7fc fcc0 	bl	8002210 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2224      	movs	r2, #36	@ 0x24
 8005894:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	681a      	ldr	r2, [r3, #0]
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f022 0201 	bic.w	r2, r2, #1
 80058a4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d002      	beq.n	80058b4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80058ae:	6878      	ldr	r0, [r7, #4]
 80058b0:	f000 fc32 	bl	8006118 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80058b4:	6878      	ldr	r0, [r7, #4]
 80058b6:	f000 f977 	bl	8005ba8 <UART_SetConfig>
 80058ba:	4603      	mov	r3, r0
 80058bc:	2b01      	cmp	r3, #1
 80058be:	d101      	bne.n	80058c4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80058c0:	2301      	movs	r3, #1
 80058c2:	e01b      	b.n	80058fc <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	685a      	ldr	r2, [r3, #4]
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80058d2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	689a      	ldr	r2, [r3, #8]
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80058e2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	681a      	ldr	r2, [r3, #0]
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f042 0201 	orr.w	r2, r2, #1
 80058f2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80058f4:	6878      	ldr	r0, [r7, #4]
 80058f6:	f000 fcb1 	bl	800625c <UART_CheckIdleState>
 80058fa:	4603      	mov	r3, r0
}
 80058fc:	4618      	mov	r0, r3
 80058fe:	3708      	adds	r7, #8
 8005900:	46bd      	mov	sp, r7
 8005902:	bd80      	pop	{r7, pc}

08005904 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b08a      	sub	sp, #40	@ 0x28
 8005908:	af02      	add	r7, sp, #8
 800590a:	60f8      	str	r0, [r7, #12]
 800590c:	60b9      	str	r1, [r7, #8]
 800590e:	603b      	str	r3, [r7, #0]
 8005910:	4613      	mov	r3, r2
 8005912:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005918:	2b20      	cmp	r3, #32
 800591a:	d177      	bne.n	8005a0c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d002      	beq.n	8005928 <HAL_UART_Transmit+0x24>
 8005922:	88fb      	ldrh	r3, [r7, #6]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d101      	bne.n	800592c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005928:	2301      	movs	r3, #1
 800592a:	e070      	b.n	8005a0e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	2200      	movs	r2, #0
 8005930:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	2221      	movs	r2, #33	@ 0x21
 8005938:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800593a:	f7fc fded 	bl	8002518 <HAL_GetTick>
 800593e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	88fa      	ldrh	r2, [r7, #6]
 8005944:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	88fa      	ldrh	r2, [r7, #6]
 800594c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	689b      	ldr	r3, [r3, #8]
 8005954:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005958:	d108      	bne.n	800596c <HAL_UART_Transmit+0x68>
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	691b      	ldr	r3, [r3, #16]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d104      	bne.n	800596c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005962:	2300      	movs	r3, #0
 8005964:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	61bb      	str	r3, [r7, #24]
 800596a:	e003      	b.n	8005974 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005970:	2300      	movs	r3, #0
 8005972:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005974:	e02f      	b.n	80059d6 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	9300      	str	r3, [sp, #0]
 800597a:	697b      	ldr	r3, [r7, #20]
 800597c:	2200      	movs	r2, #0
 800597e:	2180      	movs	r1, #128	@ 0x80
 8005980:	68f8      	ldr	r0, [r7, #12]
 8005982:	f000 fd13 	bl	80063ac <UART_WaitOnFlagUntilTimeout>
 8005986:	4603      	mov	r3, r0
 8005988:	2b00      	cmp	r3, #0
 800598a:	d004      	beq.n	8005996 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	2220      	movs	r2, #32
 8005990:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8005992:	2303      	movs	r3, #3
 8005994:	e03b      	b.n	8005a0e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8005996:	69fb      	ldr	r3, [r7, #28]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d10b      	bne.n	80059b4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800599c:	69bb      	ldr	r3, [r7, #24]
 800599e:	881a      	ldrh	r2, [r3, #0]
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80059a8:	b292      	uxth	r2, r2
 80059aa:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80059ac:	69bb      	ldr	r3, [r7, #24]
 80059ae:	3302      	adds	r3, #2
 80059b0:	61bb      	str	r3, [r7, #24]
 80059b2:	e007      	b.n	80059c4 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80059b4:	69fb      	ldr	r3, [r7, #28]
 80059b6:	781a      	ldrb	r2, [r3, #0]
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80059be:	69fb      	ldr	r3, [r7, #28]
 80059c0:	3301      	adds	r3, #1
 80059c2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80059ca:	b29b      	uxth	r3, r3
 80059cc:	3b01      	subs	r3, #1
 80059ce:	b29a      	uxth	r2, r3
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80059dc:	b29b      	uxth	r3, r3
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d1c9      	bne.n	8005976 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	9300      	str	r3, [sp, #0]
 80059e6:	697b      	ldr	r3, [r7, #20]
 80059e8:	2200      	movs	r2, #0
 80059ea:	2140      	movs	r1, #64	@ 0x40
 80059ec:	68f8      	ldr	r0, [r7, #12]
 80059ee:	f000 fcdd 	bl	80063ac <UART_WaitOnFlagUntilTimeout>
 80059f2:	4603      	mov	r3, r0
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d004      	beq.n	8005a02 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	2220      	movs	r2, #32
 80059fc:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80059fe:	2303      	movs	r3, #3
 8005a00:	e005      	b.n	8005a0e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	2220      	movs	r2, #32
 8005a06:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005a08:	2300      	movs	r3, #0
 8005a0a:	e000      	b.n	8005a0e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8005a0c:	2302      	movs	r3, #2
  }
}
 8005a0e:	4618      	mov	r0, r3
 8005a10:	3720      	adds	r7, #32
 8005a12:	46bd      	mov	sp, r7
 8005a14:	bd80      	pop	{r7, pc}

08005a16 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a16:	b580      	push	{r7, lr}
 8005a18:	b08a      	sub	sp, #40	@ 0x28
 8005a1a:	af02      	add	r7, sp, #8
 8005a1c:	60f8      	str	r0, [r7, #12]
 8005a1e:	60b9      	str	r1, [r7, #8]
 8005a20:	603b      	str	r3, [r7, #0]
 8005a22:	4613      	mov	r3, r2
 8005a24:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005a2c:	2b20      	cmp	r3, #32
 8005a2e:	f040 80b6 	bne.w	8005b9e <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a32:	68bb      	ldr	r3, [r7, #8]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d002      	beq.n	8005a3e <HAL_UART_Receive+0x28>
 8005a38:	88fb      	ldrh	r3, [r7, #6]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d101      	bne.n	8005a42 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8005a3e:	2301      	movs	r3, #1
 8005a40:	e0ae      	b.n	8005ba0 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	2200      	movs	r2, #0
 8005a46:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	2222      	movs	r2, #34	@ 0x22
 8005a4e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	2200      	movs	r2, #0
 8005a56:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005a58:	f7fc fd5e 	bl	8002518 <HAL_GetTick>
 8005a5c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	88fa      	ldrh	r2, [r7, #6]
 8005a62:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	88fa      	ldrh	r2, [r7, #6]
 8005a6a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	689b      	ldr	r3, [r3, #8]
 8005a72:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a76:	d10e      	bne.n	8005a96 <HAL_UART_Receive+0x80>
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	691b      	ldr	r3, [r3, #16]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d105      	bne.n	8005a8c <HAL_UART_Receive+0x76>
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8005a86:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005a8a:	e02d      	b.n	8005ae8 <HAL_UART_Receive+0xd2>
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	22ff      	movs	r2, #255	@ 0xff
 8005a90:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005a94:	e028      	b.n	8005ae8 <HAL_UART_Receive+0xd2>
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	689b      	ldr	r3, [r3, #8]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d10d      	bne.n	8005aba <HAL_UART_Receive+0xa4>
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	691b      	ldr	r3, [r3, #16]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d104      	bne.n	8005ab0 <HAL_UART_Receive+0x9a>
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	22ff      	movs	r2, #255	@ 0xff
 8005aaa:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005aae:	e01b      	b.n	8005ae8 <HAL_UART_Receive+0xd2>
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	227f      	movs	r2, #127	@ 0x7f
 8005ab4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005ab8:	e016      	b.n	8005ae8 <HAL_UART_Receive+0xd2>
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	689b      	ldr	r3, [r3, #8]
 8005abe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005ac2:	d10d      	bne.n	8005ae0 <HAL_UART_Receive+0xca>
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	691b      	ldr	r3, [r3, #16]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d104      	bne.n	8005ad6 <HAL_UART_Receive+0xc0>
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	227f      	movs	r2, #127	@ 0x7f
 8005ad0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005ad4:	e008      	b.n	8005ae8 <HAL_UART_Receive+0xd2>
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	223f      	movs	r2, #63	@ 0x3f
 8005ada:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005ade:	e003      	b.n	8005ae8 <HAL_UART_Receive+0xd2>
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005aee:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	689b      	ldr	r3, [r3, #8]
 8005af4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005af8:	d108      	bne.n	8005b0c <HAL_UART_Receive+0xf6>
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	691b      	ldr	r3, [r3, #16]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d104      	bne.n	8005b0c <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8005b02:	2300      	movs	r3, #0
 8005b04:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005b06:	68bb      	ldr	r3, [r7, #8]
 8005b08:	61bb      	str	r3, [r7, #24]
 8005b0a:	e003      	b.n	8005b14 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005b10:	2300      	movs	r3, #0
 8005b12:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8005b14:	e037      	b.n	8005b86 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	9300      	str	r3, [sp, #0]
 8005b1a:	697b      	ldr	r3, [r7, #20]
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	2120      	movs	r1, #32
 8005b20:	68f8      	ldr	r0, [r7, #12]
 8005b22:	f000 fc43 	bl	80063ac <UART_WaitOnFlagUntilTimeout>
 8005b26:	4603      	mov	r3, r0
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d005      	beq.n	8005b38 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	2220      	movs	r2, #32
 8005b30:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 8005b34:	2303      	movs	r3, #3
 8005b36:	e033      	b.n	8005ba0 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8005b38:	69fb      	ldr	r3, [r7, #28]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d10c      	bne.n	8005b58 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8005b44:	b29a      	uxth	r2, r3
 8005b46:	8a7b      	ldrh	r3, [r7, #18]
 8005b48:	4013      	ands	r3, r2
 8005b4a:	b29a      	uxth	r2, r3
 8005b4c:	69bb      	ldr	r3, [r7, #24]
 8005b4e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005b50:	69bb      	ldr	r3, [r7, #24]
 8005b52:	3302      	adds	r3, #2
 8005b54:	61bb      	str	r3, [r7, #24]
 8005b56:	e00d      	b.n	8005b74 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8005b5e:	b29b      	uxth	r3, r3
 8005b60:	b2da      	uxtb	r2, r3
 8005b62:	8a7b      	ldrh	r3, [r7, #18]
 8005b64:	b2db      	uxtb	r3, r3
 8005b66:	4013      	ands	r3, r2
 8005b68:	b2da      	uxtb	r2, r3
 8005b6a:	69fb      	ldr	r3, [r7, #28]
 8005b6c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8005b6e:	69fb      	ldr	r3, [r7, #28]
 8005b70:	3301      	adds	r3, #1
 8005b72:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005b7a:	b29b      	uxth	r3, r3
 8005b7c:	3b01      	subs	r3, #1
 8005b7e:	b29a      	uxth	r2, r3
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005b8c:	b29b      	uxth	r3, r3
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d1c1      	bne.n	8005b16 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	2220      	movs	r2, #32
 8005b96:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	e000      	b.n	8005ba0 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8005b9e:	2302      	movs	r3, #2
  }
}
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	3720      	adds	r7, #32
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	bd80      	pop	{r7, pc}

08005ba8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ba8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005bac:	b08a      	sub	sp, #40	@ 0x28
 8005bae:	af00      	add	r7, sp, #0
 8005bb0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	689a      	ldr	r2, [r3, #8]
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	691b      	ldr	r3, [r3, #16]
 8005bc0:	431a      	orrs	r2, r3
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	695b      	ldr	r3, [r3, #20]
 8005bc6:	431a      	orrs	r2, r3
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	69db      	ldr	r3, [r3, #28]
 8005bcc:	4313      	orrs	r3, r2
 8005bce:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	681a      	ldr	r2, [r3, #0]
 8005bd6:	4ba4      	ldr	r3, [pc, #656]	@ (8005e68 <UART_SetConfig+0x2c0>)
 8005bd8:	4013      	ands	r3, r2
 8005bda:	68fa      	ldr	r2, [r7, #12]
 8005bdc:	6812      	ldr	r2, [r2, #0]
 8005bde:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005be0:	430b      	orrs	r3, r1
 8005be2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	685b      	ldr	r3, [r3, #4]
 8005bea:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	68da      	ldr	r2, [r3, #12]
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	430a      	orrs	r2, r1
 8005bf8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	699b      	ldr	r3, [r3, #24]
 8005bfe:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	4a99      	ldr	r2, [pc, #612]	@ (8005e6c <UART_SetConfig+0x2c4>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d004      	beq.n	8005c14 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	6a1b      	ldr	r3, [r3, #32]
 8005c0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c10:	4313      	orrs	r3, r2
 8005c12:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	689b      	ldr	r3, [r3, #8]
 8005c1a:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c24:	430a      	orrs	r2, r1
 8005c26:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	4a90      	ldr	r2, [pc, #576]	@ (8005e70 <UART_SetConfig+0x2c8>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d126      	bne.n	8005c80 <UART_SetConfig+0xd8>
 8005c32:	4b90      	ldr	r3, [pc, #576]	@ (8005e74 <UART_SetConfig+0x2cc>)
 8005c34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c38:	f003 0303 	and.w	r3, r3, #3
 8005c3c:	2b03      	cmp	r3, #3
 8005c3e:	d81b      	bhi.n	8005c78 <UART_SetConfig+0xd0>
 8005c40:	a201      	add	r2, pc, #4	@ (adr r2, 8005c48 <UART_SetConfig+0xa0>)
 8005c42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c46:	bf00      	nop
 8005c48:	08005c59 	.word	0x08005c59
 8005c4c:	08005c69 	.word	0x08005c69
 8005c50:	08005c61 	.word	0x08005c61
 8005c54:	08005c71 	.word	0x08005c71
 8005c58:	2301      	movs	r3, #1
 8005c5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005c5e:	e116      	b.n	8005e8e <UART_SetConfig+0x2e6>
 8005c60:	2302      	movs	r3, #2
 8005c62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005c66:	e112      	b.n	8005e8e <UART_SetConfig+0x2e6>
 8005c68:	2304      	movs	r3, #4
 8005c6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005c6e:	e10e      	b.n	8005e8e <UART_SetConfig+0x2e6>
 8005c70:	2308      	movs	r3, #8
 8005c72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005c76:	e10a      	b.n	8005e8e <UART_SetConfig+0x2e6>
 8005c78:	2310      	movs	r3, #16
 8005c7a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005c7e:	e106      	b.n	8005e8e <UART_SetConfig+0x2e6>
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4a7c      	ldr	r2, [pc, #496]	@ (8005e78 <UART_SetConfig+0x2d0>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d138      	bne.n	8005cfc <UART_SetConfig+0x154>
 8005c8a:	4b7a      	ldr	r3, [pc, #488]	@ (8005e74 <UART_SetConfig+0x2cc>)
 8005c8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c90:	f003 030c 	and.w	r3, r3, #12
 8005c94:	2b0c      	cmp	r3, #12
 8005c96:	d82d      	bhi.n	8005cf4 <UART_SetConfig+0x14c>
 8005c98:	a201      	add	r2, pc, #4	@ (adr r2, 8005ca0 <UART_SetConfig+0xf8>)
 8005c9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c9e:	bf00      	nop
 8005ca0:	08005cd5 	.word	0x08005cd5
 8005ca4:	08005cf5 	.word	0x08005cf5
 8005ca8:	08005cf5 	.word	0x08005cf5
 8005cac:	08005cf5 	.word	0x08005cf5
 8005cb0:	08005ce5 	.word	0x08005ce5
 8005cb4:	08005cf5 	.word	0x08005cf5
 8005cb8:	08005cf5 	.word	0x08005cf5
 8005cbc:	08005cf5 	.word	0x08005cf5
 8005cc0:	08005cdd 	.word	0x08005cdd
 8005cc4:	08005cf5 	.word	0x08005cf5
 8005cc8:	08005cf5 	.word	0x08005cf5
 8005ccc:	08005cf5 	.word	0x08005cf5
 8005cd0:	08005ced 	.word	0x08005ced
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005cda:	e0d8      	b.n	8005e8e <UART_SetConfig+0x2e6>
 8005cdc:	2302      	movs	r3, #2
 8005cde:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005ce2:	e0d4      	b.n	8005e8e <UART_SetConfig+0x2e6>
 8005ce4:	2304      	movs	r3, #4
 8005ce6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005cea:	e0d0      	b.n	8005e8e <UART_SetConfig+0x2e6>
 8005cec:	2308      	movs	r3, #8
 8005cee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005cf2:	e0cc      	b.n	8005e8e <UART_SetConfig+0x2e6>
 8005cf4:	2310      	movs	r3, #16
 8005cf6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005cfa:	e0c8      	b.n	8005e8e <UART_SetConfig+0x2e6>
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	4a5e      	ldr	r2, [pc, #376]	@ (8005e7c <UART_SetConfig+0x2d4>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d125      	bne.n	8005d52 <UART_SetConfig+0x1aa>
 8005d06:	4b5b      	ldr	r3, [pc, #364]	@ (8005e74 <UART_SetConfig+0x2cc>)
 8005d08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d0c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005d10:	2b30      	cmp	r3, #48	@ 0x30
 8005d12:	d016      	beq.n	8005d42 <UART_SetConfig+0x19a>
 8005d14:	2b30      	cmp	r3, #48	@ 0x30
 8005d16:	d818      	bhi.n	8005d4a <UART_SetConfig+0x1a2>
 8005d18:	2b20      	cmp	r3, #32
 8005d1a:	d00a      	beq.n	8005d32 <UART_SetConfig+0x18a>
 8005d1c:	2b20      	cmp	r3, #32
 8005d1e:	d814      	bhi.n	8005d4a <UART_SetConfig+0x1a2>
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d002      	beq.n	8005d2a <UART_SetConfig+0x182>
 8005d24:	2b10      	cmp	r3, #16
 8005d26:	d008      	beq.n	8005d3a <UART_SetConfig+0x192>
 8005d28:	e00f      	b.n	8005d4a <UART_SetConfig+0x1a2>
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d30:	e0ad      	b.n	8005e8e <UART_SetConfig+0x2e6>
 8005d32:	2302      	movs	r3, #2
 8005d34:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d38:	e0a9      	b.n	8005e8e <UART_SetConfig+0x2e6>
 8005d3a:	2304      	movs	r3, #4
 8005d3c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d40:	e0a5      	b.n	8005e8e <UART_SetConfig+0x2e6>
 8005d42:	2308      	movs	r3, #8
 8005d44:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d48:	e0a1      	b.n	8005e8e <UART_SetConfig+0x2e6>
 8005d4a:	2310      	movs	r3, #16
 8005d4c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d50:	e09d      	b.n	8005e8e <UART_SetConfig+0x2e6>
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	4a4a      	ldr	r2, [pc, #296]	@ (8005e80 <UART_SetConfig+0x2d8>)
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d125      	bne.n	8005da8 <UART_SetConfig+0x200>
 8005d5c:	4b45      	ldr	r3, [pc, #276]	@ (8005e74 <UART_SetConfig+0x2cc>)
 8005d5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d62:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005d66:	2bc0      	cmp	r3, #192	@ 0xc0
 8005d68:	d016      	beq.n	8005d98 <UART_SetConfig+0x1f0>
 8005d6a:	2bc0      	cmp	r3, #192	@ 0xc0
 8005d6c:	d818      	bhi.n	8005da0 <UART_SetConfig+0x1f8>
 8005d6e:	2b80      	cmp	r3, #128	@ 0x80
 8005d70:	d00a      	beq.n	8005d88 <UART_SetConfig+0x1e0>
 8005d72:	2b80      	cmp	r3, #128	@ 0x80
 8005d74:	d814      	bhi.n	8005da0 <UART_SetConfig+0x1f8>
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d002      	beq.n	8005d80 <UART_SetConfig+0x1d8>
 8005d7a:	2b40      	cmp	r3, #64	@ 0x40
 8005d7c:	d008      	beq.n	8005d90 <UART_SetConfig+0x1e8>
 8005d7e:	e00f      	b.n	8005da0 <UART_SetConfig+0x1f8>
 8005d80:	2300      	movs	r3, #0
 8005d82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d86:	e082      	b.n	8005e8e <UART_SetConfig+0x2e6>
 8005d88:	2302      	movs	r3, #2
 8005d8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d8e:	e07e      	b.n	8005e8e <UART_SetConfig+0x2e6>
 8005d90:	2304      	movs	r3, #4
 8005d92:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d96:	e07a      	b.n	8005e8e <UART_SetConfig+0x2e6>
 8005d98:	2308      	movs	r3, #8
 8005d9a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d9e:	e076      	b.n	8005e8e <UART_SetConfig+0x2e6>
 8005da0:	2310      	movs	r3, #16
 8005da2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005da6:	e072      	b.n	8005e8e <UART_SetConfig+0x2e6>
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	4a35      	ldr	r2, [pc, #212]	@ (8005e84 <UART_SetConfig+0x2dc>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d12a      	bne.n	8005e08 <UART_SetConfig+0x260>
 8005db2:	4b30      	ldr	r3, [pc, #192]	@ (8005e74 <UART_SetConfig+0x2cc>)
 8005db4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005db8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005dbc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005dc0:	d01a      	beq.n	8005df8 <UART_SetConfig+0x250>
 8005dc2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005dc6:	d81b      	bhi.n	8005e00 <UART_SetConfig+0x258>
 8005dc8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005dcc:	d00c      	beq.n	8005de8 <UART_SetConfig+0x240>
 8005dce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005dd2:	d815      	bhi.n	8005e00 <UART_SetConfig+0x258>
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d003      	beq.n	8005de0 <UART_SetConfig+0x238>
 8005dd8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005ddc:	d008      	beq.n	8005df0 <UART_SetConfig+0x248>
 8005dde:	e00f      	b.n	8005e00 <UART_SetConfig+0x258>
 8005de0:	2300      	movs	r3, #0
 8005de2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005de6:	e052      	b.n	8005e8e <UART_SetConfig+0x2e6>
 8005de8:	2302      	movs	r3, #2
 8005dea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005dee:	e04e      	b.n	8005e8e <UART_SetConfig+0x2e6>
 8005df0:	2304      	movs	r3, #4
 8005df2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005df6:	e04a      	b.n	8005e8e <UART_SetConfig+0x2e6>
 8005df8:	2308      	movs	r3, #8
 8005dfa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005dfe:	e046      	b.n	8005e8e <UART_SetConfig+0x2e6>
 8005e00:	2310      	movs	r3, #16
 8005e02:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e06:	e042      	b.n	8005e8e <UART_SetConfig+0x2e6>
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	4a17      	ldr	r2, [pc, #92]	@ (8005e6c <UART_SetConfig+0x2c4>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d13a      	bne.n	8005e88 <UART_SetConfig+0x2e0>
 8005e12:	4b18      	ldr	r3, [pc, #96]	@ (8005e74 <UART_SetConfig+0x2cc>)
 8005e14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e18:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005e1c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005e20:	d01a      	beq.n	8005e58 <UART_SetConfig+0x2b0>
 8005e22:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005e26:	d81b      	bhi.n	8005e60 <UART_SetConfig+0x2b8>
 8005e28:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005e2c:	d00c      	beq.n	8005e48 <UART_SetConfig+0x2a0>
 8005e2e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005e32:	d815      	bhi.n	8005e60 <UART_SetConfig+0x2b8>
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d003      	beq.n	8005e40 <UART_SetConfig+0x298>
 8005e38:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e3c:	d008      	beq.n	8005e50 <UART_SetConfig+0x2a8>
 8005e3e:	e00f      	b.n	8005e60 <UART_SetConfig+0x2b8>
 8005e40:	2300      	movs	r3, #0
 8005e42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e46:	e022      	b.n	8005e8e <UART_SetConfig+0x2e6>
 8005e48:	2302      	movs	r3, #2
 8005e4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e4e:	e01e      	b.n	8005e8e <UART_SetConfig+0x2e6>
 8005e50:	2304      	movs	r3, #4
 8005e52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e56:	e01a      	b.n	8005e8e <UART_SetConfig+0x2e6>
 8005e58:	2308      	movs	r3, #8
 8005e5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e5e:	e016      	b.n	8005e8e <UART_SetConfig+0x2e6>
 8005e60:	2310      	movs	r3, #16
 8005e62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e66:	e012      	b.n	8005e8e <UART_SetConfig+0x2e6>
 8005e68:	efff69f3 	.word	0xefff69f3
 8005e6c:	40008000 	.word	0x40008000
 8005e70:	40013800 	.word	0x40013800
 8005e74:	40021000 	.word	0x40021000
 8005e78:	40004400 	.word	0x40004400
 8005e7c:	40004800 	.word	0x40004800
 8005e80:	40004c00 	.word	0x40004c00
 8005e84:	40005000 	.word	0x40005000
 8005e88:	2310      	movs	r3, #16
 8005e8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	4a9f      	ldr	r2, [pc, #636]	@ (8006110 <UART_SetConfig+0x568>)
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d17a      	bne.n	8005f8e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005e98:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005e9c:	2b08      	cmp	r3, #8
 8005e9e:	d824      	bhi.n	8005eea <UART_SetConfig+0x342>
 8005ea0:	a201      	add	r2, pc, #4	@ (adr r2, 8005ea8 <UART_SetConfig+0x300>)
 8005ea2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ea6:	bf00      	nop
 8005ea8:	08005ecd 	.word	0x08005ecd
 8005eac:	08005eeb 	.word	0x08005eeb
 8005eb0:	08005ed5 	.word	0x08005ed5
 8005eb4:	08005eeb 	.word	0x08005eeb
 8005eb8:	08005edb 	.word	0x08005edb
 8005ebc:	08005eeb 	.word	0x08005eeb
 8005ec0:	08005eeb 	.word	0x08005eeb
 8005ec4:	08005eeb 	.word	0x08005eeb
 8005ec8:	08005ee3 	.word	0x08005ee3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ecc:	f7fe ff84 	bl	8004dd8 <HAL_RCC_GetPCLK1Freq>
 8005ed0:	61f8      	str	r0, [r7, #28]
        break;
 8005ed2:	e010      	b.n	8005ef6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ed4:	4b8f      	ldr	r3, [pc, #572]	@ (8006114 <UART_SetConfig+0x56c>)
 8005ed6:	61fb      	str	r3, [r7, #28]
        break;
 8005ed8:	e00d      	b.n	8005ef6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005eda:	f7fe fee5 	bl	8004ca8 <HAL_RCC_GetSysClockFreq>
 8005ede:	61f8      	str	r0, [r7, #28]
        break;
 8005ee0:	e009      	b.n	8005ef6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ee2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005ee6:	61fb      	str	r3, [r7, #28]
        break;
 8005ee8:	e005      	b.n	8005ef6 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8005eea:	2300      	movs	r3, #0
 8005eec:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005eee:	2301      	movs	r3, #1
 8005ef0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005ef4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005ef6:	69fb      	ldr	r3, [r7, #28]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	f000 80fb 	beq.w	80060f4 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	685a      	ldr	r2, [r3, #4]
 8005f02:	4613      	mov	r3, r2
 8005f04:	005b      	lsls	r3, r3, #1
 8005f06:	4413      	add	r3, r2
 8005f08:	69fa      	ldr	r2, [r7, #28]
 8005f0a:	429a      	cmp	r2, r3
 8005f0c:	d305      	bcc.n	8005f1a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	685b      	ldr	r3, [r3, #4]
 8005f12:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005f14:	69fa      	ldr	r2, [r7, #28]
 8005f16:	429a      	cmp	r2, r3
 8005f18:	d903      	bls.n	8005f22 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005f20:	e0e8      	b.n	80060f4 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005f22:	69fb      	ldr	r3, [r7, #28]
 8005f24:	2200      	movs	r2, #0
 8005f26:	461c      	mov	r4, r3
 8005f28:	4615      	mov	r5, r2
 8005f2a:	f04f 0200 	mov.w	r2, #0
 8005f2e:	f04f 0300 	mov.w	r3, #0
 8005f32:	022b      	lsls	r3, r5, #8
 8005f34:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005f38:	0222      	lsls	r2, r4, #8
 8005f3a:	68f9      	ldr	r1, [r7, #12]
 8005f3c:	6849      	ldr	r1, [r1, #4]
 8005f3e:	0849      	lsrs	r1, r1, #1
 8005f40:	2000      	movs	r0, #0
 8005f42:	4688      	mov	r8, r1
 8005f44:	4681      	mov	r9, r0
 8005f46:	eb12 0a08 	adds.w	sl, r2, r8
 8005f4a:	eb43 0b09 	adc.w	fp, r3, r9
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	685b      	ldr	r3, [r3, #4]
 8005f52:	2200      	movs	r2, #0
 8005f54:	603b      	str	r3, [r7, #0]
 8005f56:	607a      	str	r2, [r7, #4]
 8005f58:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f5c:	4650      	mov	r0, sl
 8005f5e:	4659      	mov	r1, fp
 8005f60:	f7fa ff22 	bl	8000da8 <__aeabi_uldivmod>
 8005f64:	4602      	mov	r2, r0
 8005f66:	460b      	mov	r3, r1
 8005f68:	4613      	mov	r3, r2
 8005f6a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005f6c:	69bb      	ldr	r3, [r7, #24]
 8005f6e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005f72:	d308      	bcc.n	8005f86 <UART_SetConfig+0x3de>
 8005f74:	69bb      	ldr	r3, [r7, #24]
 8005f76:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005f7a:	d204      	bcs.n	8005f86 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	69ba      	ldr	r2, [r7, #24]
 8005f82:	60da      	str	r2, [r3, #12]
 8005f84:	e0b6      	b.n	80060f4 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8005f86:	2301      	movs	r3, #1
 8005f88:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005f8c:	e0b2      	b.n	80060f4 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	69db      	ldr	r3, [r3, #28]
 8005f92:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005f96:	d15e      	bne.n	8006056 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005f98:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005f9c:	2b08      	cmp	r3, #8
 8005f9e:	d828      	bhi.n	8005ff2 <UART_SetConfig+0x44a>
 8005fa0:	a201      	add	r2, pc, #4	@ (adr r2, 8005fa8 <UART_SetConfig+0x400>)
 8005fa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fa6:	bf00      	nop
 8005fa8:	08005fcd 	.word	0x08005fcd
 8005fac:	08005fd5 	.word	0x08005fd5
 8005fb0:	08005fdd 	.word	0x08005fdd
 8005fb4:	08005ff3 	.word	0x08005ff3
 8005fb8:	08005fe3 	.word	0x08005fe3
 8005fbc:	08005ff3 	.word	0x08005ff3
 8005fc0:	08005ff3 	.word	0x08005ff3
 8005fc4:	08005ff3 	.word	0x08005ff3
 8005fc8:	08005feb 	.word	0x08005feb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005fcc:	f7fe ff04 	bl	8004dd8 <HAL_RCC_GetPCLK1Freq>
 8005fd0:	61f8      	str	r0, [r7, #28]
        break;
 8005fd2:	e014      	b.n	8005ffe <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005fd4:	f7fe ff16 	bl	8004e04 <HAL_RCC_GetPCLK2Freq>
 8005fd8:	61f8      	str	r0, [r7, #28]
        break;
 8005fda:	e010      	b.n	8005ffe <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005fdc:	4b4d      	ldr	r3, [pc, #308]	@ (8006114 <UART_SetConfig+0x56c>)
 8005fde:	61fb      	str	r3, [r7, #28]
        break;
 8005fe0:	e00d      	b.n	8005ffe <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005fe2:	f7fe fe61 	bl	8004ca8 <HAL_RCC_GetSysClockFreq>
 8005fe6:	61f8      	str	r0, [r7, #28]
        break;
 8005fe8:	e009      	b.n	8005ffe <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005fea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005fee:	61fb      	str	r3, [r7, #28]
        break;
 8005ff0:	e005      	b.n	8005ffe <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005ffc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005ffe:	69fb      	ldr	r3, [r7, #28]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d077      	beq.n	80060f4 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006004:	69fb      	ldr	r3, [r7, #28]
 8006006:	005a      	lsls	r2, r3, #1
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	685b      	ldr	r3, [r3, #4]
 800600c:	085b      	lsrs	r3, r3, #1
 800600e:	441a      	add	r2, r3
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	685b      	ldr	r3, [r3, #4]
 8006014:	fbb2 f3f3 	udiv	r3, r2, r3
 8006018:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800601a:	69bb      	ldr	r3, [r7, #24]
 800601c:	2b0f      	cmp	r3, #15
 800601e:	d916      	bls.n	800604e <UART_SetConfig+0x4a6>
 8006020:	69bb      	ldr	r3, [r7, #24]
 8006022:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006026:	d212      	bcs.n	800604e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006028:	69bb      	ldr	r3, [r7, #24]
 800602a:	b29b      	uxth	r3, r3
 800602c:	f023 030f 	bic.w	r3, r3, #15
 8006030:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006032:	69bb      	ldr	r3, [r7, #24]
 8006034:	085b      	lsrs	r3, r3, #1
 8006036:	b29b      	uxth	r3, r3
 8006038:	f003 0307 	and.w	r3, r3, #7
 800603c:	b29a      	uxth	r2, r3
 800603e:	8afb      	ldrh	r3, [r7, #22]
 8006040:	4313      	orrs	r3, r2
 8006042:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	8afa      	ldrh	r2, [r7, #22]
 800604a:	60da      	str	r2, [r3, #12]
 800604c:	e052      	b.n	80060f4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800604e:	2301      	movs	r3, #1
 8006050:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006054:	e04e      	b.n	80060f4 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006056:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800605a:	2b08      	cmp	r3, #8
 800605c:	d827      	bhi.n	80060ae <UART_SetConfig+0x506>
 800605e:	a201      	add	r2, pc, #4	@ (adr r2, 8006064 <UART_SetConfig+0x4bc>)
 8006060:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006064:	08006089 	.word	0x08006089
 8006068:	08006091 	.word	0x08006091
 800606c:	08006099 	.word	0x08006099
 8006070:	080060af 	.word	0x080060af
 8006074:	0800609f 	.word	0x0800609f
 8006078:	080060af 	.word	0x080060af
 800607c:	080060af 	.word	0x080060af
 8006080:	080060af 	.word	0x080060af
 8006084:	080060a7 	.word	0x080060a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006088:	f7fe fea6 	bl	8004dd8 <HAL_RCC_GetPCLK1Freq>
 800608c:	61f8      	str	r0, [r7, #28]
        break;
 800608e:	e014      	b.n	80060ba <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006090:	f7fe feb8 	bl	8004e04 <HAL_RCC_GetPCLK2Freq>
 8006094:	61f8      	str	r0, [r7, #28]
        break;
 8006096:	e010      	b.n	80060ba <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006098:	4b1e      	ldr	r3, [pc, #120]	@ (8006114 <UART_SetConfig+0x56c>)
 800609a:	61fb      	str	r3, [r7, #28]
        break;
 800609c:	e00d      	b.n	80060ba <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800609e:	f7fe fe03 	bl	8004ca8 <HAL_RCC_GetSysClockFreq>
 80060a2:	61f8      	str	r0, [r7, #28]
        break;
 80060a4:	e009      	b.n	80060ba <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80060a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80060aa:	61fb      	str	r3, [r7, #28]
        break;
 80060ac:	e005      	b.n	80060ba <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80060ae:	2300      	movs	r3, #0
 80060b0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80060b2:	2301      	movs	r3, #1
 80060b4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80060b8:	bf00      	nop
    }

    if (pclk != 0U)
 80060ba:	69fb      	ldr	r3, [r7, #28]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d019      	beq.n	80060f4 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	685b      	ldr	r3, [r3, #4]
 80060c4:	085a      	lsrs	r2, r3, #1
 80060c6:	69fb      	ldr	r3, [r7, #28]
 80060c8:	441a      	add	r2, r3
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	685b      	ldr	r3, [r3, #4]
 80060ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80060d2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80060d4:	69bb      	ldr	r3, [r7, #24]
 80060d6:	2b0f      	cmp	r3, #15
 80060d8:	d909      	bls.n	80060ee <UART_SetConfig+0x546>
 80060da:	69bb      	ldr	r3, [r7, #24]
 80060dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80060e0:	d205      	bcs.n	80060ee <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80060e2:	69bb      	ldr	r3, [r7, #24]
 80060e4:	b29a      	uxth	r2, r3
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	60da      	str	r2, [r3, #12]
 80060ec:	e002      	b.n	80060f4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80060ee:	2301      	movs	r3, #1
 80060f0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	2200      	movs	r2, #0
 80060f8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	2200      	movs	r2, #0
 80060fe:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006100:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8006104:	4618      	mov	r0, r3
 8006106:	3728      	adds	r7, #40	@ 0x28
 8006108:	46bd      	mov	sp, r7
 800610a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800610e:	bf00      	nop
 8006110:	40008000 	.word	0x40008000
 8006114:	00f42400 	.word	0x00f42400

08006118 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006118:	b480      	push	{r7}
 800611a:	b083      	sub	sp, #12
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006124:	f003 0308 	and.w	r3, r3, #8
 8006128:	2b00      	cmp	r3, #0
 800612a:	d00a      	beq.n	8006142 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	685b      	ldr	r3, [r3, #4]
 8006132:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	430a      	orrs	r2, r1
 8006140:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006146:	f003 0301 	and.w	r3, r3, #1
 800614a:	2b00      	cmp	r3, #0
 800614c:	d00a      	beq.n	8006164 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	685b      	ldr	r3, [r3, #4]
 8006154:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	430a      	orrs	r2, r1
 8006162:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006168:	f003 0302 	and.w	r3, r3, #2
 800616c:	2b00      	cmp	r3, #0
 800616e:	d00a      	beq.n	8006186 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	685b      	ldr	r3, [r3, #4]
 8006176:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	430a      	orrs	r2, r1
 8006184:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800618a:	f003 0304 	and.w	r3, r3, #4
 800618e:	2b00      	cmp	r3, #0
 8006190:	d00a      	beq.n	80061a8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	685b      	ldr	r3, [r3, #4]
 8006198:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	430a      	orrs	r2, r1
 80061a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061ac:	f003 0310 	and.w	r3, r3, #16
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d00a      	beq.n	80061ca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	689b      	ldr	r3, [r3, #8]
 80061ba:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	430a      	orrs	r2, r1
 80061c8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061ce:	f003 0320 	and.w	r3, r3, #32
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d00a      	beq.n	80061ec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	689b      	ldr	r3, [r3, #8]
 80061dc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	430a      	orrs	r2, r1
 80061ea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d01a      	beq.n	800622e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	685b      	ldr	r3, [r3, #4]
 80061fe:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	430a      	orrs	r2, r1
 800620c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006212:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006216:	d10a      	bne.n	800622e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	685b      	ldr	r3, [r3, #4]
 800621e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	430a      	orrs	r2, r1
 800622c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006232:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006236:	2b00      	cmp	r3, #0
 8006238:	d00a      	beq.n	8006250 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	685b      	ldr	r3, [r3, #4]
 8006240:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	430a      	orrs	r2, r1
 800624e:	605a      	str	r2, [r3, #4]
  }
}
 8006250:	bf00      	nop
 8006252:	370c      	adds	r7, #12
 8006254:	46bd      	mov	sp, r7
 8006256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625a:	4770      	bx	lr

0800625c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800625c:	b580      	push	{r7, lr}
 800625e:	b098      	sub	sp, #96	@ 0x60
 8006260:	af02      	add	r7, sp, #8
 8006262:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2200      	movs	r2, #0
 8006268:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800626c:	f7fc f954 	bl	8002518 <HAL_GetTick>
 8006270:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f003 0308 	and.w	r3, r3, #8
 800627c:	2b08      	cmp	r3, #8
 800627e:	d12e      	bne.n	80062de <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006280:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006284:	9300      	str	r3, [sp, #0]
 8006286:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006288:	2200      	movs	r2, #0
 800628a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800628e:	6878      	ldr	r0, [r7, #4]
 8006290:	f000 f88c 	bl	80063ac <UART_WaitOnFlagUntilTimeout>
 8006294:	4603      	mov	r3, r0
 8006296:	2b00      	cmp	r3, #0
 8006298:	d021      	beq.n	80062de <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062a2:	e853 3f00 	ldrex	r3, [r3]
 80062a6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80062a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062aa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80062ae:	653b      	str	r3, [r7, #80]	@ 0x50
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	461a      	mov	r2, r3
 80062b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80062b8:	647b      	str	r3, [r7, #68]	@ 0x44
 80062ba:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062bc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80062be:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80062c0:	e841 2300 	strex	r3, r2, [r1]
 80062c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80062c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d1e6      	bne.n	800629a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2220      	movs	r2, #32
 80062d0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2200      	movs	r2, #0
 80062d6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80062da:	2303      	movs	r3, #3
 80062dc:	e062      	b.n	80063a4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f003 0304 	and.w	r3, r3, #4
 80062e8:	2b04      	cmp	r3, #4
 80062ea:	d149      	bne.n	8006380 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80062ec:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80062f0:	9300      	str	r3, [sp, #0]
 80062f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80062f4:	2200      	movs	r2, #0
 80062f6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80062fa:	6878      	ldr	r0, [r7, #4]
 80062fc:	f000 f856 	bl	80063ac <UART_WaitOnFlagUntilTimeout>
 8006300:	4603      	mov	r3, r0
 8006302:	2b00      	cmp	r3, #0
 8006304:	d03c      	beq.n	8006380 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800630c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800630e:	e853 3f00 	ldrex	r3, [r3]
 8006312:	623b      	str	r3, [r7, #32]
   return(result);
 8006314:	6a3b      	ldr	r3, [r7, #32]
 8006316:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800631a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	461a      	mov	r2, r3
 8006322:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006324:	633b      	str	r3, [r7, #48]	@ 0x30
 8006326:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006328:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800632a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800632c:	e841 2300 	strex	r3, r2, [r1]
 8006330:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006332:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006334:	2b00      	cmp	r3, #0
 8006336:	d1e6      	bne.n	8006306 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	3308      	adds	r3, #8
 800633e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006340:	693b      	ldr	r3, [r7, #16]
 8006342:	e853 3f00 	ldrex	r3, [r3]
 8006346:	60fb      	str	r3, [r7, #12]
   return(result);
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	f023 0301 	bic.w	r3, r3, #1
 800634e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	3308      	adds	r3, #8
 8006356:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006358:	61fa      	str	r2, [r7, #28]
 800635a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800635c:	69b9      	ldr	r1, [r7, #24]
 800635e:	69fa      	ldr	r2, [r7, #28]
 8006360:	e841 2300 	strex	r3, r2, [r1]
 8006364:	617b      	str	r3, [r7, #20]
   return(result);
 8006366:	697b      	ldr	r3, [r7, #20]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d1e5      	bne.n	8006338 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2220      	movs	r2, #32
 8006370:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2200      	movs	r2, #0
 8006378:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800637c:	2303      	movs	r3, #3
 800637e:	e011      	b.n	80063a4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2220      	movs	r2, #32
 8006384:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2220      	movs	r2, #32
 800638a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2200      	movs	r2, #0
 8006392:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2200      	movs	r2, #0
 8006398:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2200      	movs	r2, #0
 800639e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80063a2:	2300      	movs	r3, #0
}
 80063a4:	4618      	mov	r0, r3
 80063a6:	3758      	adds	r7, #88	@ 0x58
 80063a8:	46bd      	mov	sp, r7
 80063aa:	bd80      	pop	{r7, pc}

080063ac <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b084      	sub	sp, #16
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	60f8      	str	r0, [r7, #12]
 80063b4:	60b9      	str	r1, [r7, #8]
 80063b6:	603b      	str	r3, [r7, #0]
 80063b8:	4613      	mov	r3, r2
 80063ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063bc:	e04f      	b.n	800645e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80063be:	69bb      	ldr	r3, [r7, #24]
 80063c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063c4:	d04b      	beq.n	800645e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063c6:	f7fc f8a7 	bl	8002518 <HAL_GetTick>
 80063ca:	4602      	mov	r2, r0
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	1ad3      	subs	r3, r2, r3
 80063d0:	69ba      	ldr	r2, [r7, #24]
 80063d2:	429a      	cmp	r2, r3
 80063d4:	d302      	bcc.n	80063dc <UART_WaitOnFlagUntilTimeout+0x30>
 80063d6:	69bb      	ldr	r3, [r7, #24]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d101      	bne.n	80063e0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80063dc:	2303      	movs	r3, #3
 80063de:	e04e      	b.n	800647e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f003 0304 	and.w	r3, r3, #4
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d037      	beq.n	800645e <UART_WaitOnFlagUntilTimeout+0xb2>
 80063ee:	68bb      	ldr	r3, [r7, #8]
 80063f0:	2b80      	cmp	r3, #128	@ 0x80
 80063f2:	d034      	beq.n	800645e <UART_WaitOnFlagUntilTimeout+0xb2>
 80063f4:	68bb      	ldr	r3, [r7, #8]
 80063f6:	2b40      	cmp	r3, #64	@ 0x40
 80063f8:	d031      	beq.n	800645e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	69db      	ldr	r3, [r3, #28]
 8006400:	f003 0308 	and.w	r3, r3, #8
 8006404:	2b08      	cmp	r3, #8
 8006406:	d110      	bne.n	800642a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	2208      	movs	r2, #8
 800640e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006410:	68f8      	ldr	r0, [r7, #12]
 8006412:	f000 f838 	bl	8006486 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	2208      	movs	r2, #8
 800641a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	2200      	movs	r2, #0
 8006422:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8006426:	2301      	movs	r3, #1
 8006428:	e029      	b.n	800647e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	69db      	ldr	r3, [r3, #28]
 8006430:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006434:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006438:	d111      	bne.n	800645e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006442:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006444:	68f8      	ldr	r0, [r7, #12]
 8006446:	f000 f81e 	bl	8006486 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	2220      	movs	r2, #32
 800644e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	2200      	movs	r2, #0
 8006456:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800645a:	2303      	movs	r3, #3
 800645c:	e00f      	b.n	800647e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	69da      	ldr	r2, [r3, #28]
 8006464:	68bb      	ldr	r3, [r7, #8]
 8006466:	4013      	ands	r3, r2
 8006468:	68ba      	ldr	r2, [r7, #8]
 800646a:	429a      	cmp	r2, r3
 800646c:	bf0c      	ite	eq
 800646e:	2301      	moveq	r3, #1
 8006470:	2300      	movne	r3, #0
 8006472:	b2db      	uxtb	r3, r3
 8006474:	461a      	mov	r2, r3
 8006476:	79fb      	ldrb	r3, [r7, #7]
 8006478:	429a      	cmp	r2, r3
 800647a:	d0a0      	beq.n	80063be <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800647c:	2300      	movs	r3, #0
}
 800647e:	4618      	mov	r0, r3
 8006480:	3710      	adds	r7, #16
 8006482:	46bd      	mov	sp, r7
 8006484:	bd80      	pop	{r7, pc}

08006486 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006486:	b480      	push	{r7}
 8006488:	b095      	sub	sp, #84	@ 0x54
 800648a:	af00      	add	r7, sp, #0
 800648c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006494:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006496:	e853 3f00 	ldrex	r3, [r3]
 800649a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800649c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800649e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80064a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	461a      	mov	r2, r3
 80064aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80064ac:	643b      	str	r3, [r7, #64]	@ 0x40
 80064ae:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064b0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80064b2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80064b4:	e841 2300 	strex	r3, r2, [r1]
 80064b8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80064ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d1e6      	bne.n	800648e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	3308      	adds	r3, #8
 80064c6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064c8:	6a3b      	ldr	r3, [r7, #32]
 80064ca:	e853 3f00 	ldrex	r3, [r3]
 80064ce:	61fb      	str	r3, [r7, #28]
   return(result);
 80064d0:	69fb      	ldr	r3, [r7, #28]
 80064d2:	f023 0301 	bic.w	r3, r3, #1
 80064d6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	3308      	adds	r3, #8
 80064de:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80064e0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80064e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064e4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80064e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80064e8:	e841 2300 	strex	r3, r2, [r1]
 80064ec:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80064ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d1e5      	bne.n	80064c0 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80064f8:	2b01      	cmp	r3, #1
 80064fa:	d118      	bne.n	800652e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	e853 3f00 	ldrex	r3, [r3]
 8006508:	60bb      	str	r3, [r7, #8]
   return(result);
 800650a:	68bb      	ldr	r3, [r7, #8]
 800650c:	f023 0310 	bic.w	r3, r3, #16
 8006510:	647b      	str	r3, [r7, #68]	@ 0x44
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	461a      	mov	r2, r3
 8006518:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800651a:	61bb      	str	r3, [r7, #24]
 800651c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800651e:	6979      	ldr	r1, [r7, #20]
 8006520:	69ba      	ldr	r2, [r7, #24]
 8006522:	e841 2300 	strex	r3, r2, [r1]
 8006526:	613b      	str	r3, [r7, #16]
   return(result);
 8006528:	693b      	ldr	r3, [r7, #16]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d1e6      	bne.n	80064fc <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	2220      	movs	r2, #32
 8006532:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2200      	movs	r2, #0
 800653a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2200      	movs	r2, #0
 8006540:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006542:	bf00      	nop
 8006544:	3754      	adds	r7, #84	@ 0x54
 8006546:	46bd      	mov	sp, r7
 8006548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654c:	4770      	bx	lr

0800654e <App_TaskCreateHook>:
* Note(s)     : (1) Interrupts are disabled during this call.
*********************************************************************************************************
*/

void  App_TaskCreateHook (OS_TCB *ptcb)
{
 800654e:	b480      	push	{r7}
 8006550:	b083      	sub	sp, #12
 8006552:	af00      	add	r7, sp, #0
 8006554:	6078      	str	r0, [r7, #4]
    (void)ptcb;
}
 8006556:	bf00      	nop
 8006558:	370c      	adds	r7, #12
 800655a:	46bd      	mov	sp, r7
 800655c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006560:	4770      	bx	lr

08006562 <App_TaskDelHook>:
* Note(s)     : (1) Interrupts are disabled during this call.
*********************************************************************************************************
*/

void  App_TaskDelHook (OS_TCB *ptcb)
{
 8006562:	b480      	push	{r7}
 8006564:	b083      	sub	sp, #12
 8006566:	af00      	add	r7, sp, #0
 8006568:	6078      	str	r0, [r7, #4]
    (void)ptcb;
}
 800656a:	bf00      	nop
 800656c:	370c      	adds	r7, #12
 800656e:	46bd      	mov	sp, r7
 8006570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006574:	4770      	bx	lr

08006576 <App_TaskIdleHook>:
*********************************************************************************************************
*/

#if OS_VERSION >= 251
void  App_TaskIdleHook (void)
{
 8006576:	b480      	push	{r7}
 8006578:	af00      	add	r7, sp, #0
}
 800657a:	bf00      	nop
 800657c:	46bd      	mov	sp, r7
 800657e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006582:	4770      	bx	lr

08006584 <App_TaskStatHook>:
* Argument(s) : none.
*********************************************************************************************************
*/

void  App_TaskStatHook (void)
{
 8006584:	b480      	push	{r7}
 8006586:	af00      	add	r7, sp, #0
}
 8006588:	bf00      	nop
 800658a:	46bd      	mov	sp, r7
 800658c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006590:	4770      	bx	lr

08006592 <App_TaskReturnHook>:
*/


#if OS_VERSION >= 289
void  App_TaskReturnHook (OS_TCB  *ptcb)
{
 8006592:	b480      	push	{r7}
 8006594:	b083      	sub	sp, #12
 8006596:	af00      	add	r7, sp, #0
 8006598:	6078      	str	r0, [r7, #4]
    (void)ptcb;
}
 800659a:	bf00      	nop
 800659c:	370c      	adds	r7, #12
 800659e:	46bd      	mov	sp, r7
 80065a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a4:	4770      	bx	lr

080065a6 <App_TaskSwHook>:
*********************************************************************************************************
*/

#if OS_TASK_SW_HOOK_EN > 0
void  App_TaskSwHook (void)
{
 80065a6:	b480      	push	{r7}
 80065a8:	af00      	add	r7, sp, #0

}
 80065aa:	bf00      	nop
 80065ac:	46bd      	mov	sp, r7
 80065ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b2:	4770      	bx	lr

080065b4 <App_TCBInitHook>:
*********************************************************************************************************
*/

#if OS_VERSION >= 204
void  App_TCBInitHook (OS_TCB *ptcb)
{
 80065b4:	b480      	push	{r7}
 80065b6:	b083      	sub	sp, #12
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
    (void)ptcb;
}
 80065bc:	bf00      	nop
 80065be:	370c      	adds	r7, #12
 80065c0:	46bd      	mov	sp, r7
 80065c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c6:	4770      	bx	lr

080065c8 <App_TimeTickHook>:
*********************************************************************************************************
*/

#if OS_TIME_TICK_HOOK_EN > 0
void  App_TimeTickHook (void)
{
 80065c8:	b480      	push	{r7}
 80065ca:	af00      	add	r7, sp, #0

}
 80065cc:	bf00      	nop
 80065ce:	46bd      	mov	sp, r7
 80065d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d4:	4770      	bx	lr
	...

080065d8 <OSInitHookBegin>:
*                 b) Set bits ASPEN and LSPEN in FPCCR register.
*********************************************************************************************************
*/
#if OS_CPU_HOOKS_EN > 0u
void  OSInitHookBegin (void)
{
 80065d8:	b480      	push	{r7}
 80065da:	b085      	sub	sp, #20
 80065dc:	af00      	add	r7, sp, #0
    OS_STK  *pstk;
#if (OS_CPU_ARM_FP_EN > 0u)
    INT32U   reg_val;
#endif
                                                                /* Clear exception stack for stack checking.            */
    pstk = &OS_CPU_ExceptStk[0];
 80065de:	4b19      	ldr	r3, [pc, #100]	@ (8006644 <OSInitHookBegin+0x6c>)
 80065e0:	60bb      	str	r3, [r7, #8]
    size = OS_CPU_EXCEPT_STK_SIZE;
 80065e2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80065e6:	60fb      	str	r3, [r7, #12]
    while (size > 0u) {
 80065e8:	e007      	b.n	80065fa <OSInitHookBegin+0x22>
        size--;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	3b01      	subs	r3, #1
 80065ee:	60fb      	str	r3, [r7, #12]
       *pstk++ = (OS_STK)0;
 80065f0:	68bb      	ldr	r3, [r7, #8]
 80065f2:	1d1a      	adds	r2, r3, #4
 80065f4:	60ba      	str	r2, [r7, #8]
 80065f6:	2200      	movs	r2, #0
 80065f8:	601a      	str	r2, [r3, #0]
    while (size > 0u) {
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d1f4      	bne.n	80065ea <OSInitHookBegin+0x12>
    }

                                                                /* Align the ISR stack to 8-bytes                       */
    OS_CPU_ExceptStkBase = (OS_STK *)&OS_CPU_ExceptStk[OS_CPU_EXCEPT_STK_SIZE];
 8006600:	4b11      	ldr	r3, [pc, #68]	@ (8006648 <OSInitHookBegin+0x70>)
 8006602:	4a12      	ldr	r2, [pc, #72]	@ (800664c <OSInitHookBegin+0x74>)
 8006604:	601a      	str	r2, [r3, #0]
    OS_CPU_ExceptStkBase = (OS_STK *)((OS_STK)(OS_CPU_ExceptStkBase) & 0xFFFFFFF8);
 8006606:	4b10      	ldr	r3, [pc, #64]	@ (8006648 <OSInitHookBegin+0x70>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f023 0307 	bic.w	r3, r3, #7
 800660e:	461a      	mov	r2, r3
 8006610:	4b0d      	ldr	r3, [pc, #52]	@ (8006648 <OSInitHookBegin+0x70>)
 8006612:	601a      	str	r2, [r3, #0]

#if (OS_CPU_ARM_FP_EN > 0u)
    reg_val = OS_CPU_CM_FP_FPCCR;                               /* Check the floating point mode.                       */
 8006614:	4b0e      	ldr	r3, [pc, #56]	@ (8006650 <OSInitHookBegin+0x78>)
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	607b      	str	r3, [r7, #4]
    if ((reg_val & OS_CPU_CM_FPCCR_LAZY_STK) != OS_CPU_CM_FPCCR_LAZY_STK) {
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8006620:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8006624:	d001      	beq.n	800662a <OSInitHookBegin+0x52>
        while (1u) {                                            /* See Note (2).                                        */
 8006626:	bf00      	nop
 8006628:	e7fd      	b.n	8006626 <OSInitHookBegin+0x4e>
        }
    }
#endif

#if OS_TMR_EN > 0u
    OSTmrCtr = 0u;
 800662a:	4b0a      	ldr	r3, [pc, #40]	@ (8006654 <OSInitHookBegin+0x7c>)
 800662c:	2200      	movs	r2, #0
 800662e:	801a      	strh	r2, [r3, #0]
#endif

                                                                /* Set BASEPRI boundary from the configuration.         */
    OS_KA_BASEPRI_Boundary = (INT32U)(CPU_CFG_KA_IPL_BOUNDARY << (8u - CPU_CFG_NVIC_PRIO_BITS));
 8006630:	4b09      	ldr	r3, [pc, #36]	@ (8006658 <OSInitHookBegin+0x80>)
 8006632:	2240      	movs	r2, #64	@ 0x40
 8006634:	601a      	str	r2, [r3, #0]
}
 8006636:	bf00      	nop
 8006638:	3714      	adds	r7, #20
 800663a:	46bd      	mov	sp, r7
 800663c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006640:	4770      	bx	lr
 8006642:	bf00      	nop
 8006644:	20005338 	.word	0x20005338
 8006648:	20005738 	.word	0x20005738
 800664c:	20005738 	.word	0x20005738
 8006650:	e000ef34 	.word	0xe000ef34
 8006654:	2000573c 	.word	0x2000573c
 8006658:	20005740 	.word	0x20005740

0800665c <OSInitHookEnd>:
* Note(s)    : 1) Interrupts should be disabled during this call.
*********************************************************************************************************
*/
#if OS_CPU_HOOKS_EN > 0u
void  OSInitHookEnd (void)
{
 800665c:	b480      	push	{r7}
 800665e:	af00      	add	r7, sp, #0

}
 8006660:	bf00      	nop
 8006662:	46bd      	mov	sp, r7
 8006664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006668:	4770      	bx	lr

0800666a <OSTaskCreateHook>:
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
#if OS_CPU_HOOKS_EN > 0u
void  OSTaskCreateHook (OS_TCB *ptcb)
{
 800666a:	b580      	push	{r7, lr}
 800666c:	b082      	sub	sp, #8
 800666e:	af00      	add	r7, sp, #0
 8006670:	6078      	str	r0, [r7, #4]
#if OS_APP_HOOKS_EN > 0u
    App_TaskCreateHook(ptcb);
 8006672:	6878      	ldr	r0, [r7, #4]
 8006674:	f7ff ff6b 	bl	800654e <App_TaskCreateHook>
#else
    (void)ptcb;                                                 /* Prevent compiler warning                             */
#endif
}
 8006678:	bf00      	nop
 800667a:	3708      	adds	r7, #8
 800667c:	46bd      	mov	sp, r7
 800667e:	bd80      	pop	{r7, pc}

08006680 <OSTaskDelHook>:
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
#if OS_CPU_HOOKS_EN > 0u
void  OSTaskDelHook (OS_TCB *ptcb)
{
 8006680:	b580      	push	{r7, lr}
 8006682:	b082      	sub	sp, #8
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
#if OS_APP_HOOKS_EN > 0u
    App_TaskDelHook(ptcb);
 8006688:	6878      	ldr	r0, [r7, #4]
 800668a:	f7ff ff6a 	bl	8006562 <App_TaskDelHook>
#else
    (void)ptcb;                                                 /* Prevent compiler warning                             */
#endif
}
 800668e:	bf00      	nop
 8006690:	3708      	adds	r7, #8
 8006692:	46bd      	mov	sp, r7
 8006694:	bd80      	pop	{r7, pc}

08006696 <OSTaskIdleHook>:
* Note(s)    : 1) Interrupts are enabled during this call.
*********************************************************************************************************
*/
#if OS_CPU_HOOKS_EN > 0u
void  OSTaskIdleHook (void)
{
 8006696:	b580      	push	{r7, lr}
 8006698:	af00      	add	r7, sp, #0
#if OS_APP_HOOKS_EN > 0u
    App_TaskIdleHook();
 800669a:	f7ff ff6c 	bl	8006576 <App_TaskIdleHook>
#endif
}
 800669e:	bf00      	nop
 80066a0:	bd80      	pop	{r7, pc}

080066a2 <OSTaskReturnHook>:
*********************************************************************************************************
*/

#if OS_CPU_HOOKS_EN > 0u
void  OSTaskReturnHook (OS_TCB  *ptcb)
{
 80066a2:	b580      	push	{r7, lr}
 80066a4:	b082      	sub	sp, #8
 80066a6:	af00      	add	r7, sp, #0
 80066a8:	6078      	str	r0, [r7, #4]
#if OS_APP_HOOKS_EN > 0u
    App_TaskReturnHook(ptcb);
 80066aa:	6878      	ldr	r0, [r7, #4]
 80066ac:	f7ff ff71 	bl	8006592 <App_TaskReturnHook>
#else
    (void)ptcb;
#endif
}
 80066b0:	bf00      	nop
 80066b2:	3708      	adds	r7, #8
 80066b4:	46bd      	mov	sp, r7
 80066b6:	bd80      	pop	{r7, pc}

080066b8 <OSTaskStatHook>:
*********************************************************************************************************
*/

#if OS_CPU_HOOKS_EN > 0u
void  OSTaskStatHook (void)
{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	af00      	add	r7, sp, #0
#if OS_APP_HOOKS_EN > 0u
    App_TaskStatHook();
 80066bc:	f7ff ff62 	bl	8006584 <App_TaskStatHook>
#endif
}
 80066c0:	bf00      	nop
 80066c2:	bd80      	pop	{r7, pc}

080066c4 <OSTaskStkInit>:

OS_STK  *OSTaskStkInit (void    (*task)(void *p_arg),
                        void     *p_arg,
                        OS_STK   *ptos,
                        INT16U    opt)
{
 80066c4:	b480      	push	{r7}
 80066c6:	b087      	sub	sp, #28
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	60f8      	str	r0, [r7, #12]
 80066cc:	60b9      	str	r1, [r7, #8]
 80066ce:	607a      	str	r2, [r7, #4]
 80066d0:	807b      	strh	r3, [r7, #2]
    OS_STK  *p_stk;


    (void)opt;                                                  /* 'opt' is not used, prevent warning                   */
    p_stk      = ptos + 1u;                                     /* Load stack pointer                                   */
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	3304      	adds	r3, #4
 80066d6:	617b      	str	r3, [r7, #20]
                                                                /* Align the stack to 8-bytes.                          */
    p_stk      = (OS_STK *)((OS_STK)(p_stk) & 0xFFFFFFF8u);
 80066d8:	697b      	ldr	r3, [r7, #20]
 80066da:	f023 0307 	bic.w	r3, r3, #7
 80066de:	617b      	str	r3, [r7, #20]
                                                                /* Registers stacked as if auto-saved on exception      */
#if (OS_CPU_ARM_FP_EN > 0u)                                     /* FPU auto-saved registers.                            */
     --p_stk;
 80066e0:	697b      	ldr	r3, [r7, #20]
 80066e2:	3b04      	subs	r3, #4
 80066e4:	617b      	str	r3, [r7, #20]
    *(--p_stk) = (OS_STK)0x02000000u;                           /* FPSCR                                                */
 80066e6:	697b      	ldr	r3, [r7, #20]
 80066e8:	3b04      	subs	r3, #4
 80066ea:	617b      	str	r3, [r7, #20]
 80066ec:	697b      	ldr	r3, [r7, #20]
 80066ee:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80066f2:	601a      	str	r2, [r3, #0]
                                                                /* Initialize S0-S15 floating point registers           */
    *(--p_stk) = (OS_STK)0x41700000u;                           /* S15                                                  */
 80066f4:	697b      	ldr	r3, [r7, #20]
 80066f6:	3b04      	subs	r3, #4
 80066f8:	617b      	str	r3, [r7, #20]
 80066fa:	697b      	ldr	r3, [r7, #20]
 80066fc:	4a93      	ldr	r2, [pc, #588]	@ (800694c <OSTaskStkInit+0x288>)
 80066fe:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x41600000u;                           /* S14                                                  */
 8006700:	697b      	ldr	r3, [r7, #20]
 8006702:	3b04      	subs	r3, #4
 8006704:	617b      	str	r3, [r7, #20]
 8006706:	697b      	ldr	r3, [r7, #20]
 8006708:	4a91      	ldr	r2, [pc, #580]	@ (8006950 <OSTaskStkInit+0x28c>)
 800670a:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x41500000u;                           /* S13                                                  */
 800670c:	697b      	ldr	r3, [r7, #20]
 800670e:	3b04      	subs	r3, #4
 8006710:	617b      	str	r3, [r7, #20]
 8006712:	697b      	ldr	r3, [r7, #20]
 8006714:	4a8f      	ldr	r2, [pc, #572]	@ (8006954 <OSTaskStkInit+0x290>)
 8006716:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x41400000u;                           /* S12                                                  */
 8006718:	697b      	ldr	r3, [r7, #20]
 800671a:	3b04      	subs	r3, #4
 800671c:	617b      	str	r3, [r7, #20]
 800671e:	697b      	ldr	r3, [r7, #20]
 8006720:	4a8d      	ldr	r2, [pc, #564]	@ (8006958 <OSTaskStkInit+0x294>)
 8006722:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x41300000u;                           /* S11                                                  */
 8006724:	697b      	ldr	r3, [r7, #20]
 8006726:	3b04      	subs	r3, #4
 8006728:	617b      	str	r3, [r7, #20]
 800672a:	697b      	ldr	r3, [r7, #20]
 800672c:	4a8b      	ldr	r2, [pc, #556]	@ (800695c <OSTaskStkInit+0x298>)
 800672e:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x41200000u;                           /* S10                                                  */
 8006730:	697b      	ldr	r3, [r7, #20]
 8006732:	3b04      	subs	r3, #4
 8006734:	617b      	str	r3, [r7, #20]
 8006736:	697b      	ldr	r3, [r7, #20]
 8006738:	4a89      	ldr	r2, [pc, #548]	@ (8006960 <OSTaskStkInit+0x29c>)
 800673a:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x41100000u;                           /* S9                                                   */
 800673c:	697b      	ldr	r3, [r7, #20]
 800673e:	3b04      	subs	r3, #4
 8006740:	617b      	str	r3, [r7, #20]
 8006742:	697b      	ldr	r3, [r7, #20]
 8006744:	4a87      	ldr	r2, [pc, #540]	@ (8006964 <OSTaskStkInit+0x2a0>)
 8006746:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x41000000u;                           /* S8                                                   */
 8006748:	697b      	ldr	r3, [r7, #20]
 800674a:	3b04      	subs	r3, #4
 800674c:	617b      	str	r3, [r7, #20]
 800674e:	697b      	ldr	r3, [r7, #20]
 8006750:	f04f 4282 	mov.w	r2, #1090519040	@ 0x41000000
 8006754:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x40E00000u;                           /* S7                                                   */
 8006756:	697b      	ldr	r3, [r7, #20]
 8006758:	3b04      	subs	r3, #4
 800675a:	617b      	str	r3, [r7, #20]
 800675c:	697b      	ldr	r3, [r7, #20]
 800675e:	4a82      	ldr	r2, [pc, #520]	@ (8006968 <OSTaskStkInit+0x2a4>)
 8006760:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x40C00000u;                           /* S6                                                   */
 8006762:	697b      	ldr	r3, [r7, #20]
 8006764:	3b04      	subs	r3, #4
 8006766:	617b      	str	r3, [r7, #20]
 8006768:	697b      	ldr	r3, [r7, #20]
 800676a:	4a80      	ldr	r2, [pc, #512]	@ (800696c <OSTaskStkInit+0x2a8>)
 800676c:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x40A00000u;                           /* S5                                                   */
 800676e:	697b      	ldr	r3, [r7, #20]
 8006770:	3b04      	subs	r3, #4
 8006772:	617b      	str	r3, [r7, #20]
 8006774:	697b      	ldr	r3, [r7, #20]
 8006776:	4a7e      	ldr	r2, [pc, #504]	@ (8006970 <OSTaskStkInit+0x2ac>)
 8006778:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x40800000u;                           /* S4                                                   */
 800677a:	697b      	ldr	r3, [r7, #20]
 800677c:	3b04      	subs	r3, #4
 800677e:	617b      	str	r3, [r7, #20]
 8006780:	697b      	ldr	r3, [r7, #20]
 8006782:	f04f 4281 	mov.w	r2, #1082130432	@ 0x40800000
 8006786:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x40400000u;                           /* S3                                                   */
 8006788:	697b      	ldr	r3, [r7, #20]
 800678a:	3b04      	subs	r3, #4
 800678c:	617b      	str	r3, [r7, #20]
 800678e:	697b      	ldr	r3, [r7, #20]
 8006790:	4a78      	ldr	r2, [pc, #480]	@ (8006974 <OSTaskStkInit+0x2b0>)
 8006792:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x40000000u;                           /* S2                                                   */
 8006794:	697b      	ldr	r3, [r7, #20]
 8006796:	3b04      	subs	r3, #4
 8006798:	617b      	str	r3, [r7, #20]
 800679a:	697b      	ldr	r3, [r7, #20]
 800679c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80067a0:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x3F800000u;                           /* S1                                                   */
 80067a2:	697b      	ldr	r3, [r7, #20]
 80067a4:	3b04      	subs	r3, #4
 80067a6:	617b      	str	r3, [r7, #20]
 80067a8:	697b      	ldr	r3, [r7, #20]
 80067aa:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80067ae:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x00000000u;                           /* S0                                                   */
 80067b0:	697b      	ldr	r3, [r7, #20]
 80067b2:	3b04      	subs	r3, #4
 80067b4:	617b      	str	r3, [r7, #20]
 80067b6:	697b      	ldr	r3, [r7, #20]
 80067b8:	2200      	movs	r2, #0
 80067ba:	601a      	str	r2, [r3, #0]
#endif
    *(--p_stk) = (OS_STK)0x01000000uL;                          /* xPSR                                                 */
 80067bc:	697b      	ldr	r3, [r7, #20]
 80067be:	3b04      	subs	r3, #4
 80067c0:	617b      	str	r3, [r7, #20]
 80067c2:	697b      	ldr	r3, [r7, #20]
 80067c4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80067c8:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)task;                                  /* Entry Point                                          */
 80067ca:	697b      	ldr	r3, [r7, #20]
 80067cc:	3b04      	subs	r3, #4
 80067ce:	617b      	str	r3, [r7, #20]
 80067d0:	68fa      	ldr	r2, [r7, #12]
 80067d2:	697b      	ldr	r3, [r7, #20]
 80067d4:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)OS_TaskReturn;                         /* R14 (LR)                                             */
 80067d6:	697b      	ldr	r3, [r7, #20]
 80067d8:	3b04      	subs	r3, #4
 80067da:	617b      	str	r3, [r7, #20]
 80067dc:	4a66      	ldr	r2, [pc, #408]	@ (8006978 <OSTaskStkInit+0x2b4>)
 80067de:	697b      	ldr	r3, [r7, #20]
 80067e0:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x12121212uL;                          /* R12                                                  */
 80067e2:	697b      	ldr	r3, [r7, #20]
 80067e4:	3b04      	subs	r3, #4
 80067e6:	617b      	str	r3, [r7, #20]
 80067e8:	697b      	ldr	r3, [r7, #20]
 80067ea:	f04f 3212 	mov.w	r2, #303174162	@ 0x12121212
 80067ee:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x03030303uL;                          /* R3                                                   */
 80067f0:	697b      	ldr	r3, [r7, #20]
 80067f2:	3b04      	subs	r3, #4
 80067f4:	617b      	str	r3, [r7, #20]
 80067f6:	697b      	ldr	r3, [r7, #20]
 80067f8:	f04f 3203 	mov.w	r2, #50529027	@ 0x3030303
 80067fc:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x02020202uL;                          /* R2                                                   */
 80067fe:	697b      	ldr	r3, [r7, #20]
 8006800:	3b04      	subs	r3, #4
 8006802:	617b      	str	r3, [r7, #20]
 8006804:	697b      	ldr	r3, [r7, #20]
 8006806:	f04f 3202 	mov.w	r2, #33686018	@ 0x2020202
 800680a:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x01010101uL;                          /* R1                                                   */
 800680c:	697b      	ldr	r3, [r7, #20]
 800680e:	3b04      	subs	r3, #4
 8006810:	617b      	str	r3, [r7, #20]
 8006812:	697b      	ldr	r3, [r7, #20]
 8006814:	f04f 3201 	mov.w	r2, #16843009	@ 0x1010101
 8006818:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)p_arg;                                 /* R0 : argument                                        */
 800681a:	697b      	ldr	r3, [r7, #20]
 800681c:	3b04      	subs	r3, #4
 800681e:	617b      	str	r3, [r7, #20]
 8006820:	68ba      	ldr	r2, [r7, #8]
 8006822:	697b      	ldr	r3, [r7, #20]
 8006824:	601a      	str	r2, [r3, #0]

#if (OS_CPU_ARM_FP_EN > 0u)
    *(--p_stk) = (OS_STK)0xFFFFFFEDuL;                          /* R14: EXEC_RETURN; See Note 5                         */
 8006826:	697b      	ldr	r3, [r7, #20]
 8006828:	3b04      	subs	r3, #4
 800682a:	617b      	str	r3, [r7, #20]
 800682c:	697b      	ldr	r3, [r7, #20]
 800682e:	f06f 0212 	mvn.w	r2, #18
 8006832:	601a      	str	r2, [r3, #0]
#else
    *(--p_stk) = (OS_STK)0xFFFFFFFDuL;                          /* R14: EXEC_RETURN; See Note 5                         */
#endif
                                                                /* Remaining registers saved on process stack           */
    *(--p_stk) = (OS_STK)0x11111111uL;                          /* R11                                                  */
 8006834:	697b      	ldr	r3, [r7, #20]
 8006836:	3b04      	subs	r3, #4
 8006838:	617b      	str	r3, [r7, #20]
 800683a:	697b      	ldr	r3, [r7, #20]
 800683c:	f04f 3211 	mov.w	r2, #286331153	@ 0x11111111
 8006840:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x10101010uL;                          /* R10                                                  */
 8006842:	697b      	ldr	r3, [r7, #20]
 8006844:	3b04      	subs	r3, #4
 8006846:	617b      	str	r3, [r7, #20]
 8006848:	697b      	ldr	r3, [r7, #20]
 800684a:	f04f 3210 	mov.w	r2, #269488144	@ 0x10101010
 800684e:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x09090909uL;                          /* R9                                                   */
 8006850:	697b      	ldr	r3, [r7, #20]
 8006852:	3b04      	subs	r3, #4
 8006854:	617b      	str	r3, [r7, #20]
 8006856:	697b      	ldr	r3, [r7, #20]
 8006858:	f04f 3209 	mov.w	r2, #151587081	@ 0x9090909
 800685c:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x08080808uL;                          /* R8                                                   */
 800685e:	697b      	ldr	r3, [r7, #20]
 8006860:	3b04      	subs	r3, #4
 8006862:	617b      	str	r3, [r7, #20]
 8006864:	697b      	ldr	r3, [r7, #20]
 8006866:	f04f 3208 	mov.w	r2, #134744072	@ 0x8080808
 800686a:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x07070707uL;                          /* R7                                                   */
 800686c:	697b      	ldr	r3, [r7, #20]
 800686e:	3b04      	subs	r3, #4
 8006870:	617b      	str	r3, [r7, #20]
 8006872:	697b      	ldr	r3, [r7, #20]
 8006874:	f04f 3207 	mov.w	r2, #117901063	@ 0x7070707
 8006878:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x06060606uL;                          /* R6                                                   */
 800687a:	697b      	ldr	r3, [r7, #20]
 800687c:	3b04      	subs	r3, #4
 800687e:	617b      	str	r3, [r7, #20]
 8006880:	697b      	ldr	r3, [r7, #20]
 8006882:	f04f 3206 	mov.w	r2, #101058054	@ 0x6060606
 8006886:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x05050505uL;                          /* R5                                                   */
 8006888:	697b      	ldr	r3, [r7, #20]
 800688a:	3b04      	subs	r3, #4
 800688c:	617b      	str	r3, [r7, #20]
 800688e:	697b      	ldr	r3, [r7, #20]
 8006890:	f04f 3205 	mov.w	r2, #84215045	@ 0x5050505
 8006894:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x04040404uL;                          /* R4                                                   */
 8006896:	697b      	ldr	r3, [r7, #20]
 8006898:	3b04      	subs	r3, #4
 800689a:	617b      	str	r3, [r7, #20]
 800689c:	697b      	ldr	r3, [r7, #20]
 800689e:	f04f 3204 	mov.w	r2, #67372036	@ 0x4040404
 80068a2:	601a      	str	r2, [r3, #0]

#if (OS_CPU_ARM_FP_EN > 0u)
                                                                /* Initialize S16-S31 floating point registers          */
    *(--p_stk) = (OS_STK)0x41F80000u;                           /* S31                                                  */
 80068a4:	697b      	ldr	r3, [r7, #20]
 80068a6:	3b04      	subs	r3, #4
 80068a8:	617b      	str	r3, [r7, #20]
 80068aa:	697b      	ldr	r3, [r7, #20]
 80068ac:	4a33      	ldr	r2, [pc, #204]	@ (800697c <OSTaskStkInit+0x2b8>)
 80068ae:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x41F00000u;                           /* S30                                                  */
 80068b0:	697b      	ldr	r3, [r7, #20]
 80068b2:	3b04      	subs	r3, #4
 80068b4:	617b      	str	r3, [r7, #20]
 80068b6:	697b      	ldr	r3, [r7, #20]
 80068b8:	4a31      	ldr	r2, [pc, #196]	@ (8006980 <OSTaskStkInit+0x2bc>)
 80068ba:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x41E80000u;                           /* S29                                                  */
 80068bc:	697b      	ldr	r3, [r7, #20]
 80068be:	3b04      	subs	r3, #4
 80068c0:	617b      	str	r3, [r7, #20]
 80068c2:	697b      	ldr	r3, [r7, #20]
 80068c4:	4a2f      	ldr	r2, [pc, #188]	@ (8006984 <OSTaskStkInit+0x2c0>)
 80068c6:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x41E00000u;                           /* S28                                                  */
 80068c8:	697b      	ldr	r3, [r7, #20]
 80068ca:	3b04      	subs	r3, #4
 80068cc:	617b      	str	r3, [r7, #20]
 80068ce:	697b      	ldr	r3, [r7, #20]
 80068d0:	4a2d      	ldr	r2, [pc, #180]	@ (8006988 <OSTaskStkInit+0x2c4>)
 80068d2:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x41D80000u;                           /* S27                                                  */
 80068d4:	697b      	ldr	r3, [r7, #20]
 80068d6:	3b04      	subs	r3, #4
 80068d8:	617b      	str	r3, [r7, #20]
 80068da:	697b      	ldr	r3, [r7, #20]
 80068dc:	4a2b      	ldr	r2, [pc, #172]	@ (800698c <OSTaskStkInit+0x2c8>)
 80068de:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x41D00000u;                           /* S26                                                  */
 80068e0:	697b      	ldr	r3, [r7, #20]
 80068e2:	3b04      	subs	r3, #4
 80068e4:	617b      	str	r3, [r7, #20]
 80068e6:	697b      	ldr	r3, [r7, #20]
 80068e8:	4a29      	ldr	r2, [pc, #164]	@ (8006990 <OSTaskStkInit+0x2cc>)
 80068ea:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x41C80000u;                           /* S25                                                  */
 80068ec:	697b      	ldr	r3, [r7, #20]
 80068ee:	3b04      	subs	r3, #4
 80068f0:	617b      	str	r3, [r7, #20]
 80068f2:	697b      	ldr	r3, [r7, #20]
 80068f4:	4a27      	ldr	r2, [pc, #156]	@ (8006994 <OSTaskStkInit+0x2d0>)
 80068f6:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x41C00000u;                           /* S24                                                  */
 80068f8:	697b      	ldr	r3, [r7, #20]
 80068fa:	3b04      	subs	r3, #4
 80068fc:	617b      	str	r3, [r7, #20]
 80068fe:	697b      	ldr	r3, [r7, #20]
 8006900:	4a25      	ldr	r2, [pc, #148]	@ (8006998 <OSTaskStkInit+0x2d4>)
 8006902:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x41B80000u;                           /* S23                                                  */
 8006904:	697b      	ldr	r3, [r7, #20]
 8006906:	3b04      	subs	r3, #4
 8006908:	617b      	str	r3, [r7, #20]
 800690a:	697b      	ldr	r3, [r7, #20]
 800690c:	4a23      	ldr	r2, [pc, #140]	@ (800699c <OSTaskStkInit+0x2d8>)
 800690e:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x41B00000u;                           /* S22                                                  */
 8006910:	697b      	ldr	r3, [r7, #20]
 8006912:	3b04      	subs	r3, #4
 8006914:	617b      	str	r3, [r7, #20]
 8006916:	697b      	ldr	r3, [r7, #20]
 8006918:	4a21      	ldr	r2, [pc, #132]	@ (80069a0 <OSTaskStkInit+0x2dc>)
 800691a:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x41A80000u;                           /* S21                                                  */
 800691c:	697b      	ldr	r3, [r7, #20]
 800691e:	3b04      	subs	r3, #4
 8006920:	617b      	str	r3, [r7, #20]
 8006922:	697b      	ldr	r3, [r7, #20]
 8006924:	4a1f      	ldr	r2, [pc, #124]	@ (80069a4 <OSTaskStkInit+0x2e0>)
 8006926:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x41A00000u;                           /* S20                                                  */
 8006928:	697b      	ldr	r3, [r7, #20]
 800692a:	3b04      	subs	r3, #4
 800692c:	617b      	str	r3, [r7, #20]
 800692e:	697b      	ldr	r3, [r7, #20]
 8006930:	4a1d      	ldr	r2, [pc, #116]	@ (80069a8 <OSTaskStkInit+0x2e4>)
 8006932:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x41980000u;                           /* S19                                                  */
 8006934:	697b      	ldr	r3, [r7, #20]
 8006936:	3b04      	subs	r3, #4
 8006938:	617b      	str	r3, [r7, #20]
 800693a:	697b      	ldr	r3, [r7, #20]
 800693c:	4a1b      	ldr	r2, [pc, #108]	@ (80069ac <OSTaskStkInit+0x2e8>)
 800693e:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x41900000u;                           /* S18                                                  */
 8006940:	697b      	ldr	r3, [r7, #20]
 8006942:	3b04      	subs	r3, #4
 8006944:	617b      	str	r3, [r7, #20]
 8006946:	697b      	ldr	r3, [r7, #20]
 8006948:	e032      	b.n	80069b0 <OSTaskStkInit+0x2ec>
 800694a:	bf00      	nop
 800694c:	41700000 	.word	0x41700000
 8006950:	41600000 	.word	0x41600000
 8006954:	41500000 	.word	0x41500000
 8006958:	41400000 	.word	0x41400000
 800695c:	41300000 	.word	0x41300000
 8006960:	41200000 	.word	0x41200000
 8006964:	41100000 	.word	0x41100000
 8006968:	40e00000 	.word	0x40e00000
 800696c:	40c00000 	.word	0x40c00000
 8006970:	40a00000 	.word	0x40a00000
 8006974:	40400000 	.word	0x40400000
 8006978:	08008db5 	.word	0x08008db5
 800697c:	41f80000 	.word	0x41f80000
 8006980:	41f00000 	.word	0x41f00000
 8006984:	41e80000 	.word	0x41e80000
 8006988:	41e00000 	.word	0x41e00000
 800698c:	41d80000 	.word	0x41d80000
 8006990:	41d00000 	.word	0x41d00000
 8006994:	41c80000 	.word	0x41c80000
 8006998:	41c00000 	.word	0x41c00000
 800699c:	41b80000 	.word	0x41b80000
 80069a0:	41b00000 	.word	0x41b00000
 80069a4:	41a80000 	.word	0x41a80000
 80069a8:	41a00000 	.word	0x41a00000
 80069ac:	41980000 	.word	0x41980000
 80069b0:	4a0a      	ldr	r2, [pc, #40]	@ (80069dc <OSTaskStkInit+0x318>)
 80069b2:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x41880000u;                           /* S17                                                  */
 80069b4:	697b      	ldr	r3, [r7, #20]
 80069b6:	3b04      	subs	r3, #4
 80069b8:	617b      	str	r3, [r7, #20]
 80069ba:	697b      	ldr	r3, [r7, #20]
 80069bc:	4a08      	ldr	r2, [pc, #32]	@ (80069e0 <OSTaskStkInit+0x31c>)
 80069be:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x41800000u;                           /* S16                                                  */
 80069c0:	697b      	ldr	r3, [r7, #20]
 80069c2:	3b04      	subs	r3, #4
 80069c4:	617b      	str	r3, [r7, #20]
 80069c6:	697b      	ldr	r3, [r7, #20]
 80069c8:	f04f 4283 	mov.w	r2, #1098907648	@ 0x41800000
 80069cc:	601a      	str	r2, [r3, #0]
#endif

    return (p_stk);
 80069ce:	697b      	ldr	r3, [r7, #20]
}
 80069d0:	4618      	mov	r0, r3
 80069d2:	371c      	adds	r7, #28
 80069d4:	46bd      	mov	sp, r7
 80069d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069da:	4770      	bx	lr
 80069dc:	41900000 	.word	0x41900000
 80069e0:	41880000 	.word	0x41880000

080069e4 <OSTaskSwHook>:
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
#if (OS_CPU_HOOKS_EN > 0u) && (OS_TASK_SW_HOOK_EN > 0u)
void  OSTaskSwHook (void)
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	af00      	add	r7, sp, #0

#if (OS_CPU_ARM_FP_EN > 0u)
    OS_CPU_FP_Reg_Push(OSTCBCur->OSTCBStkPtr);                  /* Push the FP registers of the current task.           */
 80069e8:	4b07      	ldr	r3, [pc, #28]	@ (8006a08 <OSTaskSwHook+0x24>)
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	4618      	mov	r0, r3
 80069f0:	f7f9 fbee 	bl	80001d0 <OS_CPU_FP_Reg_Push>
#endif

#if OS_APP_HOOKS_EN > 0u
    App_TaskSwHook();
 80069f4:	f7ff fdd7 	bl	80065a6 <App_TaskSwHook>
#endif

    OS_TRACE_TASK_SWITCHED_IN(OSTCBHighRdy);

#if (OS_CPU_ARM_FP_EN > 0u)
    OS_CPU_FP_Reg_Pop(OSTCBHighRdy->OSTCBStkPtr);               /* Pop the FP registers of the highest ready task.      */
 80069f8:	4b04      	ldr	r3, [pc, #16]	@ (8006a0c <OSTaskSwHook+0x28>)
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	4618      	mov	r0, r3
 8006a00:	f7f9 fbef 	bl	80001e2 <OS_CPU_FP_Reg_Pop>
#endif
}
 8006a04:	bf00      	nop
 8006a06:	bd80      	pop	{r7, pc}
 8006a08:	20005cb8 	.word	0x20005cb8
 8006a0c:	20005cc0 	.word	0x20005cc0

08006a10 <OSTCBInitHook>:
* Note(s)    : 1) Interrupts may or may not be ENABLED during this call.
*********************************************************************************************************
*/
#if OS_CPU_HOOKS_EN > 0u
void  OSTCBInitHook (OS_TCB *ptcb)
{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b082      	sub	sp, #8
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
#if OS_APP_HOOKS_EN > 0u
    App_TCBInitHook(ptcb);
 8006a18:	6878      	ldr	r0, [r7, #4]
 8006a1a:	f7ff fdcb 	bl	80065b4 <App_TCBInitHook>
#else
    (void)ptcb;                                                 /* Prevent compiler warning                             */
#endif
}
 8006a1e:	bf00      	nop
 8006a20:	3708      	adds	r7, #8
 8006a22:	46bd      	mov	sp, r7
 8006a24:	bd80      	pop	{r7, pc}
	...

08006a28 <OSTimeTickHook>:
* Note(s)    : 1) Interrupts may or may not be ENABLED during this call.
*********************************************************************************************************
*/
#if (OS_CPU_HOOKS_EN > 0u) && (OS_TIME_TICK_HOOK_EN > 0u)
void  OSTimeTickHook (void)
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	af00      	add	r7, sp, #0
#if OS_APP_HOOKS_EN > 0u
    App_TimeTickHook();
 8006a2c:	f7ff fdcc 	bl	80065c8 <App_TimeTickHook>
#endif

#if OS_TMR_EN > 0u
    OSTmrCtr++;
 8006a30:	4b08      	ldr	r3, [pc, #32]	@ (8006a54 <OSTimeTickHook+0x2c>)
 8006a32:	881b      	ldrh	r3, [r3, #0]
 8006a34:	3301      	adds	r3, #1
 8006a36:	b29a      	uxth	r2, r3
 8006a38:	4b06      	ldr	r3, [pc, #24]	@ (8006a54 <OSTimeTickHook+0x2c>)
 8006a3a:	801a      	strh	r2, [r3, #0]
    if (OSTmrCtr >= (OS_TICKS_PER_SEC / OS_TMR_CFG_TICKS_PER_SEC)) {
 8006a3c:	4b05      	ldr	r3, [pc, #20]	@ (8006a54 <OSTimeTickHook+0x2c>)
 8006a3e:	881b      	ldrh	r3, [r3, #0]
 8006a40:	2b09      	cmp	r3, #9
 8006a42:	d904      	bls.n	8006a4e <OSTimeTickHook+0x26>
        OSTmrCtr = 0u;
 8006a44:	4b03      	ldr	r3, [pc, #12]	@ (8006a54 <OSTimeTickHook+0x2c>)
 8006a46:	2200      	movs	r2, #0
 8006a48:	801a      	strh	r2, [r3, #0]
        OSTmrSignal();
 8006a4a:	f002 fab3 	bl	8008fb4 <OSTmrSignal>
    }
#endif
}
 8006a4e:	bf00      	nop
 8006a50:	bd80      	pop	{r7, pc}
 8006a52:	bf00      	nop
 8006a54:	2000573c 	.word	0x2000573c

08006a58 <OS_CPU_SysTickHandler>:
* Note(s)    : 1) This function MUST be placed on entry 15 of the Cortex-M vector table.
*********************************************************************************************************
*/

void  OS_CPU_SysTickHandler (void)
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b082      	sub	sp, #8
 8006a5c:	af00      	add	r7, sp, #0
#if OS_CRITICAL_METHOD == 3u                                    /* Allocate storage for CPU status register             */
    OS_CPU_SR  cpu_sr;
#endif


    OS_ENTER_CRITICAL();
 8006a5e:	2040      	movs	r0, #64	@ 0x40
 8006a60:	f7f9 fbc5 	bl	80001ee <OS_CPU_SR_Save>
 8006a64:	6078      	str	r0, [r7, #4]
    OSIntEnter();                                               /* Tell uC/OS-II that we are starting an ISR            */
 8006a66:	f000 f951 	bl	8006d0c <OSIntEnter>
    OS_EXIT_CRITICAL();
 8006a6a:	6878      	ldr	r0, [r7, #4]
 8006a6c:	f7f9 fbcd 	bl	800020a <OS_CPU_SR_Restore>

    OSTimeTick();                                               /* Call uC/OS-II's OSTimeTick()                         */
 8006a70:	f000 fa42 	bl	8006ef8 <OSTimeTick>

    OSIntExit();                                                /* Tell uC/OS-II that we are leaving the ISR            */
 8006a74:	f000 f964 	bl	8006d40 <OSIntExit>
}
 8006a78:	bf00      	nop
 8006a7a:	3708      	adds	r7, #8
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	bd80      	pop	{r7, pc}

08006a80 <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0u
void  OSDebugInit (void)
{
 8006a80:	b480      	push	{r7}
 8006a82:	b083      	sub	sp, #12
 8006a84:	af00      	add	r7, sp, #0
    void  *ptemp;


    ptemp = (void *)&OSDebugEn;
 8006a86:	4b3c      	ldr	r3, [pc, #240]	@ (8006b78 <OSDebugInit+0xf8>)
 8006a88:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSEndiannessTest;
 8006a8a:	4b3c      	ldr	r3, [pc, #240]	@ (8006b7c <OSDebugInit+0xfc>)
 8006a8c:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSEventMax;
 8006a8e:	4b3c      	ldr	r3, [pc, #240]	@ (8006b80 <OSDebugInit+0x100>)
 8006a90:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSEventNameEn;
 8006a92:	4b3c      	ldr	r3, [pc, #240]	@ (8006b84 <OSDebugInit+0x104>)
 8006a94:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSEventEn;
 8006a96:	4b3c      	ldr	r3, [pc, #240]	@ (8006b88 <OSDebugInit+0x108>)
 8006a98:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSEventSize;
 8006a9a:	4b3c      	ldr	r3, [pc, #240]	@ (8006b8c <OSDebugInit+0x10c>)
 8006a9c:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSEventTblSize;
 8006a9e:	4b3c      	ldr	r3, [pc, #240]	@ (8006b90 <OSDebugInit+0x110>)
 8006aa0:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSEventMultiEn;
 8006aa2:	4b3c      	ldr	r3, [pc, #240]	@ (8006b94 <OSDebugInit+0x114>)
 8006aa4:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSFlagEn;
 8006aa6:	4b3c      	ldr	r3, [pc, #240]	@ (8006b98 <OSDebugInit+0x118>)
 8006aa8:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSFlagGrpSize;
 8006aaa:	4b3c      	ldr	r3, [pc, #240]	@ (8006b9c <OSDebugInit+0x11c>)
 8006aac:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSFlagNodeSize;
 8006aae:	4b3c      	ldr	r3, [pc, #240]	@ (8006ba0 <OSDebugInit+0x120>)
 8006ab0:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSFlagWidth;
 8006ab2:	4b3c      	ldr	r3, [pc, #240]	@ (8006ba4 <OSDebugInit+0x124>)
 8006ab4:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSFlagMax;
 8006ab6:	4b3c      	ldr	r3, [pc, #240]	@ (8006ba8 <OSDebugInit+0x128>)
 8006ab8:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSFlagNameEn;
 8006aba:	4b3c      	ldr	r3, [pc, #240]	@ (8006bac <OSDebugInit+0x12c>)
 8006abc:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSLowestPrio;
 8006abe:	4b3c      	ldr	r3, [pc, #240]	@ (8006bb0 <OSDebugInit+0x130>)
 8006ac0:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSMboxEn;
 8006ac2:	4b3c      	ldr	r3, [pc, #240]	@ (8006bb4 <OSDebugInit+0x134>)
 8006ac4:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSMemEn;
 8006ac6:	4b3c      	ldr	r3, [pc, #240]	@ (8006bb8 <OSDebugInit+0x138>)
 8006ac8:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSMemMax;
 8006aca:	4b3c      	ldr	r3, [pc, #240]	@ (8006bbc <OSDebugInit+0x13c>)
 8006acc:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSMemNameEn;
 8006ace:	4b3c      	ldr	r3, [pc, #240]	@ (8006bc0 <OSDebugInit+0x140>)
 8006ad0:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSMemSize;
 8006ad2:	4b3c      	ldr	r3, [pc, #240]	@ (8006bc4 <OSDebugInit+0x144>)
 8006ad4:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSMemTblSize;
 8006ad6:	4b3c      	ldr	r3, [pc, #240]	@ (8006bc8 <OSDebugInit+0x148>)
 8006ad8:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSMutexEn;
 8006ada:	4b3c      	ldr	r3, [pc, #240]	@ (8006bcc <OSDebugInit+0x14c>)
 8006adc:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSPtrSize;
 8006ade:	4b3c      	ldr	r3, [pc, #240]	@ (8006bd0 <OSDebugInit+0x150>)
 8006ae0:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSQEn;
 8006ae2:	4b3c      	ldr	r3, [pc, #240]	@ (8006bd4 <OSDebugInit+0x154>)
 8006ae4:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSQMax;
 8006ae6:	4b3c      	ldr	r3, [pc, #240]	@ (8006bd8 <OSDebugInit+0x158>)
 8006ae8:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSQSize;
 8006aea:	4b3c      	ldr	r3, [pc, #240]	@ (8006bdc <OSDebugInit+0x15c>)
 8006aec:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSRdyTblSize;
 8006aee:	4b3c      	ldr	r3, [pc, #240]	@ (8006be0 <OSDebugInit+0x160>)
 8006af0:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSSemEn;
 8006af2:	4b3c      	ldr	r3, [pc, #240]	@ (8006be4 <OSDebugInit+0x164>)
 8006af4:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSStkWidth;
 8006af6:	4b3c      	ldr	r3, [pc, #240]	@ (8006be8 <OSDebugInit+0x168>)
 8006af8:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSTaskCreateEn;
 8006afa:	4b3c      	ldr	r3, [pc, #240]	@ (8006bec <OSDebugInit+0x16c>)
 8006afc:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTaskCreateExtEn;
 8006afe:	4b3c      	ldr	r3, [pc, #240]	@ (8006bf0 <OSDebugInit+0x170>)
 8006b00:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTaskDelEn;
 8006b02:	4b3c      	ldr	r3, [pc, #240]	@ (8006bf4 <OSDebugInit+0x174>)
 8006b04:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTaskIdleStkSize;
 8006b06:	4b3c      	ldr	r3, [pc, #240]	@ (8006bf8 <OSDebugInit+0x178>)
 8006b08:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTaskProfileEn;
 8006b0a:	4b3c      	ldr	r3, [pc, #240]	@ (8006bfc <OSDebugInit+0x17c>)
 8006b0c:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTaskMax;
 8006b0e:	4b3c      	ldr	r3, [pc, #240]	@ (8006c00 <OSDebugInit+0x180>)
 8006b10:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTaskNameEn;
 8006b12:	4b3c      	ldr	r3, [pc, #240]	@ (8006c04 <OSDebugInit+0x184>)
 8006b14:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTaskStatEn;
 8006b16:	4b3c      	ldr	r3, [pc, #240]	@ (8006c08 <OSDebugInit+0x188>)
 8006b18:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTaskStatStkSize;
 8006b1a:	4b3c      	ldr	r3, [pc, #240]	@ (8006c0c <OSDebugInit+0x18c>)
 8006b1c:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTaskStatStkChkEn;
 8006b1e:	4b3c      	ldr	r3, [pc, #240]	@ (8006c10 <OSDebugInit+0x190>)
 8006b20:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTaskSwHookEn;
 8006b22:	4b3c      	ldr	r3, [pc, #240]	@ (8006c14 <OSDebugInit+0x194>)
 8006b24:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSTCBPrioTblMax;
 8006b26:	4b3c      	ldr	r3, [pc, #240]	@ (8006c18 <OSDebugInit+0x198>)
 8006b28:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTCBSize;
 8006b2a:	4b3c      	ldr	r3, [pc, #240]	@ (8006c1c <OSDebugInit+0x19c>)
 8006b2c:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSTicksPerSec;
 8006b2e:	4b3c      	ldr	r3, [pc, #240]	@ (8006c20 <OSDebugInit+0x1a0>)
 8006b30:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTimeTickHookEn;
 8006b32:	4b3c      	ldr	r3, [pc, #240]	@ (8006c24 <OSDebugInit+0x1a4>)
 8006b34:	607b      	str	r3, [r7, #4]

#if OS_TMR_EN > 0u
    ptemp = (void *)&OSTmrTbl[0];
 8006b36:	4b3c      	ldr	r3, [pc, #240]	@ (8006c28 <OSDebugInit+0x1a8>)
 8006b38:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTmrWheelTbl[0];
 8006b3a:	4b3c      	ldr	r3, [pc, #240]	@ (8006c2c <OSDebugInit+0x1ac>)
 8006b3c:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSTmrEn;
 8006b3e:	4b3c      	ldr	r3, [pc, #240]	@ (8006c30 <OSDebugInit+0x1b0>)
 8006b40:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTmrCfgMax;
 8006b42:	4b3c      	ldr	r3, [pc, #240]	@ (8006c34 <OSDebugInit+0x1b4>)
 8006b44:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTmrCfgNameEn;
 8006b46:	4b3c      	ldr	r3, [pc, #240]	@ (8006c38 <OSDebugInit+0x1b8>)
 8006b48:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTmrCfgWheelSize;
 8006b4a:	4b3c      	ldr	r3, [pc, #240]	@ (8006c3c <OSDebugInit+0x1bc>)
 8006b4c:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTmrCfgTicksPerSec;
 8006b4e:	4b3c      	ldr	r3, [pc, #240]	@ (8006c40 <OSDebugInit+0x1c0>)
 8006b50:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTmrSize;
 8006b52:	4b3c      	ldr	r3, [pc, #240]	@ (8006c44 <OSDebugInit+0x1c4>)
 8006b54:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTmrTblSize;
 8006b56:	4b3c      	ldr	r3, [pc, #240]	@ (8006c48 <OSDebugInit+0x1c8>)
 8006b58:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSTmrWheelSize;
 8006b5a:	4b3c      	ldr	r3, [pc, #240]	@ (8006c4c <OSDebugInit+0x1cc>)
 8006b5c:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTmrWheelTblSize;
 8006b5e:	4b3c      	ldr	r3, [pc, #240]	@ (8006c50 <OSDebugInit+0x1d0>)
 8006b60:	607b      	str	r3, [r7, #4]
#endif

    ptemp = (void *)&OSVersionNbr;
 8006b62:	4b3c      	ldr	r3, [pc, #240]	@ (8006c54 <OSDebugInit+0x1d4>)
 8006b64:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSDataSize;
 8006b66:	4b3c      	ldr	r3, [pc, #240]	@ (8006c58 <OSDebugInit+0x1d8>)
 8006b68:	607b      	str	r3, [r7, #4]

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
 8006b6a:	bf00      	nop
 8006b6c:	370c      	adds	r7, #12
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b74:	4770      	bx	lr
 8006b76:	bf00      	nop
 8006b78:	0800c604 	.word	0x0800c604
 8006b7c:	0800c608 	.word	0x0800c608
 8006b80:	0800c60e 	.word	0x0800c60e
 8006b84:	0800c610 	.word	0x0800c610
 8006b88:	0800c60c 	.word	0x0800c60c
 8006b8c:	0800c612 	.word	0x0800c612
 8006b90:	0800c614 	.word	0x0800c614
 8006b94:	0800c616 	.word	0x0800c616
 8006b98:	0800c618 	.word	0x0800c618
 8006b9c:	0800c61a 	.word	0x0800c61a
 8006ba0:	0800c61c 	.word	0x0800c61c
 8006ba4:	0800c61e 	.word	0x0800c61e
 8006ba8:	0800c620 	.word	0x0800c620
 8006bac:	0800c622 	.word	0x0800c622
 8006bb0:	0800c624 	.word	0x0800c624
 8006bb4:	0800c626 	.word	0x0800c626
 8006bb8:	0800c628 	.word	0x0800c628
 8006bbc:	0800c62a 	.word	0x0800c62a
 8006bc0:	0800c62c 	.word	0x0800c62c
 8006bc4:	0800c62e 	.word	0x0800c62e
 8006bc8:	0800c630 	.word	0x0800c630
 8006bcc:	0800c632 	.word	0x0800c632
 8006bd0:	0800c634 	.word	0x0800c634
 8006bd4:	0800c636 	.word	0x0800c636
 8006bd8:	0800c638 	.word	0x0800c638
 8006bdc:	0800c63a 	.word	0x0800c63a
 8006be0:	0800c63c 	.word	0x0800c63c
 8006be4:	0800c63e 	.word	0x0800c63e
 8006be8:	0800c640 	.word	0x0800c640
 8006bec:	0800c642 	.word	0x0800c642
 8006bf0:	0800c644 	.word	0x0800c644
 8006bf4:	0800c646 	.word	0x0800c646
 8006bf8:	0800c648 	.word	0x0800c648
 8006bfc:	0800c64a 	.word	0x0800c64a
 8006c00:	0800c64c 	.word	0x0800c64c
 8006c04:	0800c64e 	.word	0x0800c64e
 8006c08:	0800c650 	.word	0x0800c650
 8006c0c:	0800c652 	.word	0x0800c652
 8006c10:	0800c654 	.word	0x0800c654
 8006c14:	0800c656 	.word	0x0800c656
 8006c18:	0800c658 	.word	0x0800c658
 8006c1c:	0800c65a 	.word	0x0800c65a
 8006c20:	0800c65c 	.word	0x0800c65c
 8006c24:	0800c65e 	.word	0x0800c65e
 8006c28:	200066ac 	.word	0x200066ac
 8006c2c:	20006b30 	.word	0x20006b30
 8006c30:	0800c662 	.word	0x0800c662
 8006c34:	0800c664 	.word	0x0800c664
 8006c38:	0800c666 	.word	0x0800c666
 8006c3c:	0800c668 	.word	0x0800c668
 8006c40:	0800c66a 	.word	0x0800c66a
 8006c44:	0800c66c 	.word	0x0800c66c
 8006c48:	0800c66e 	.word	0x0800c66e
 8006c4c:	0800c670 	.word	0x0800c670
 8006c50:	0800c672 	.word	0x0800c672
 8006c54:	0800c660 	.word	0x0800c660
 8006c58:	0800c674 	.word	0x0800c674

08006c5c <OSEventNameSet>:

#if (OS_EVENT_EN) && (OS_EVENT_NAME_EN > 0u)
void  OSEventNameSet (OS_EVENT  *pevent,
                      INT8U     *pname,
                      INT8U     *perr)
{
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b086      	sub	sp, #24
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	60f8      	str	r0, [r7, #12]
 8006c64:	60b9      	str	r1, [r7, #8]
 8006c66:	607a      	str	r2, [r7, #4]
#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0u;
 8006c68:	2300      	movs	r3, #0
 8006c6a:	617b      	str	r3, [r7, #20]
        return;
    }
#endif

#if OS_ARG_CHK_EN > 0u
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d103      	bne.n	8006c7a <OSEventNameSet+0x1e>
        *perr = OS_ERR_PEVENT_NULL;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	2204      	movs	r2, #4
 8006c76:	701a      	strb	r2, [r3, #0]
        return;
 8006c78:	e025      	b.n	8006cc6 <OSEventNameSet+0x6a>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 8006c7a:	68bb      	ldr	r3, [r7, #8]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d103      	bne.n	8006c88 <OSEventNameSet+0x2c>
        *perr = OS_ERR_PNAME_NULL;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	220c      	movs	r2, #12
 8006c84:	701a      	strb	r2, [r3, #0]
        return;
 8006c86:	e01e      	b.n	8006cc6 <OSEventNameSet+0x6a>
    }
#endif
    if (OSIntNesting > 0u) {                     /* See if trying to call from an ISR                  */
 8006c88:	4b10      	ldr	r3, [pc, #64]	@ (8006ccc <OSEventNameSet+0x70>)
 8006c8a:	781b      	ldrb	r3, [r3, #0]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d003      	beq.n	8006c98 <OSEventNameSet+0x3c>
        *perr = OS_ERR_NAME_SET_ISR;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2212      	movs	r2, #18
 8006c94:	701a      	strb	r2, [r3, #0]
        return;
 8006c96:	e016      	b.n	8006cc6 <OSEventNameSet+0x6a>
    }
    switch (pevent->OSEventType) {
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	781b      	ldrb	r3, [r3, #0]
 8006c9c:	3b01      	subs	r3, #1
 8006c9e:	2b03      	cmp	r3, #3
 8006ca0:	d903      	bls.n	8006caa <OSEventNameSet+0x4e>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2201      	movs	r2, #1
 8006ca6:	701a      	strb	r2, [r3, #0]
             return;
 8006ca8:	e00d      	b.n	8006cc6 <OSEventNameSet+0x6a>
             break;
 8006caa:	bf00      	nop
    }
    OS_ENTER_CRITICAL();
 8006cac:	2040      	movs	r0, #64	@ 0x40
 8006cae:	f7f9 fa9e 	bl	80001ee <OS_CPU_SR_Save>
 8006cb2:	6178      	str	r0, [r7, #20]
    pevent->OSEventName = pname;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	68ba      	ldr	r2, [r7, #8]
 8006cb8:	615a      	str	r2, [r3, #20]
    OS_EXIT_CRITICAL();
 8006cba:	6978      	ldr	r0, [r7, #20]
 8006cbc:	f7f9 faa5 	bl	800020a <OS_CPU_SR_Restore>
    OS_TRACE_EVENT_NAME_SET(pevent, pname);
    *perr = OS_ERR_NONE;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	701a      	strb	r2, [r3, #0]
}
 8006cc6:	3718      	adds	r7, #24
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	bd80      	pop	{r7, pc}
 8006ccc:	20005aa0 	.word	0x20005aa0

08006cd0 <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	af00      	add	r7, sp, #0
#if defined(OS_TLS_TBL_SIZE) && (OS_TLS_TBL_SIZE > 0u)
    INT8U  err;
#endif
#endif

    OSInitHookBegin();                                           /* Call port specific initialization code   */
 8006cd4:	f7ff fc80 	bl	80065d8 <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
 8006cd8:	f000 fb64 	bl	80073a4 <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
 8006cdc:	f000 fba0 	bl	8007420 <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
 8006ce0:	f000 fc1c 	bl	800751c <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
 8006ce4:	f000 fb14 	bl	8007310 <OS_InitEventList>

#if (OS_FLAG_EN > 0u) && (OS_MAX_FLAGS > 0u)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
 8006ce8:	f001 f9d8 	bl	800809c <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0u) && (OS_MAX_MEM_PART > 0u)
    OS_MemInit();                                                /* Initialize the memory manager            */
 8006cec:	f001 fa96 	bl	800821c <OS_MemInit>
#endif

#if (OS_Q_EN > 0u) && (OS_MAX_QS > 0u)
    OS_QInit();                                                  /* Initialize the message queue structures  */
 8006cf0:	f001 fc5c 	bl	80085ac <OS_QInit>
        return;
    }
#endif
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
 8006cf4:	f000 fbc6 	bl	8007484 <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0u
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
 8006cf8:	f000 fbea 	bl	80074d0 <OS_InitTaskStat>
#endif

#if OS_TMR_EN > 0u
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
 8006cfc:	f002 f96c 	bl	8008fd8 <OSTmr_Init>
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
 8006d00:	f7ff fcac 	bl	800665c <OSInitHookEnd>

#if OS_DEBUG_EN > 0u
    OSDebugInit();
 8006d04:	f7ff febc 	bl	8006a80 <OSDebugInit>
#endif
}
 8006d08:	bf00      	nop
 8006d0a:	bd80      	pop	{r7, pc}

08006d0c <OSIntEnter>:
*                 OSIntEnter() is always called with interrupts disabled.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
 8006d0c:	b480      	push	{r7}
 8006d0e:	af00      	add	r7, sp, #0
    if (OSRunning == OS_TRUE) {
 8006d10:	4b09      	ldr	r3, [pc, #36]	@ (8006d38 <OSIntEnter+0x2c>)
 8006d12:	781b      	ldrb	r3, [r3, #0]
 8006d14:	2b01      	cmp	r3, #1
 8006d16:	d109      	bne.n	8006d2c <OSIntEnter+0x20>
        if (OSIntNesting < 255u) {
 8006d18:	4b08      	ldr	r3, [pc, #32]	@ (8006d3c <OSIntEnter+0x30>)
 8006d1a:	781b      	ldrb	r3, [r3, #0]
 8006d1c:	2bff      	cmp	r3, #255	@ 0xff
 8006d1e:	d005      	beq.n	8006d2c <OSIntEnter+0x20>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
 8006d20:	4b06      	ldr	r3, [pc, #24]	@ (8006d3c <OSIntEnter+0x30>)
 8006d22:	781b      	ldrb	r3, [r3, #0]
 8006d24:	3301      	adds	r3, #1
 8006d26:	b2da      	uxtb	r2, r3
 8006d28:	4b04      	ldr	r3, [pc, #16]	@ (8006d3c <OSIntEnter+0x30>)
 8006d2a:	701a      	strb	r2, [r3, #0]
        }
        OS_TRACE_ISR_ENTER();
    }
}
 8006d2c:	bf00      	nop
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d34:	4770      	bx	lr
 8006d36:	bf00      	nop
 8006d38:	20005ab0 	.word	0x20005ab0
 8006d3c:	20005aa0 	.word	0x20005aa0

08006d40 <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b082      	sub	sp, #8
 8006d44:	af00      	add	r7, sp, #0
#if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0u;
 8006d46:	2300      	movs	r3, #0
 8006d48:	607b      	str	r3, [r7, #4]
#endif



    if (OSRunning == OS_TRUE) {
 8006d4a:	4b1e      	ldr	r3, [pc, #120]	@ (8006dc4 <OSIntExit+0x84>)
 8006d4c:	781b      	ldrb	r3, [r3, #0]
 8006d4e:	2b01      	cmp	r3, #1
 8006d50:	d134      	bne.n	8006dbc <OSIntExit+0x7c>
        OS_ENTER_CRITICAL();
 8006d52:	2040      	movs	r0, #64	@ 0x40
 8006d54:	f7f9 fa4b 	bl	80001ee <OS_CPU_SR_Save>
 8006d58:	6078      	str	r0, [r7, #4]
        if (OSIntNesting > 0u) {                           /* Prevent OSIntNesting from wrapping       */
 8006d5a:	4b1b      	ldr	r3, [pc, #108]	@ (8006dc8 <OSIntExit+0x88>)
 8006d5c:	781b      	ldrb	r3, [r3, #0]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d005      	beq.n	8006d6e <OSIntExit+0x2e>
            OSIntNesting--;
 8006d62:	4b19      	ldr	r3, [pc, #100]	@ (8006dc8 <OSIntExit+0x88>)
 8006d64:	781b      	ldrb	r3, [r3, #0]
 8006d66:	3b01      	subs	r3, #1
 8006d68:	b2da      	uxtb	r2, r3
 8006d6a:	4b17      	ldr	r3, [pc, #92]	@ (8006dc8 <OSIntExit+0x88>)
 8006d6c:	701a      	strb	r2, [r3, #0]
        }
        if (OSIntNesting == 0u) {                          /* Reschedule only if all ISRs complete ... */
 8006d6e:	4b16      	ldr	r3, [pc, #88]	@ (8006dc8 <OSIntExit+0x88>)
 8006d70:	781b      	ldrb	r3, [r3, #0]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d11f      	bne.n	8006db6 <OSIntExit+0x76>
            if (OSLockNesting == 0u) {                     /* ... and not locked.                      */
 8006d76:	4b15      	ldr	r3, [pc, #84]	@ (8006dcc <OSIntExit+0x8c>)
 8006d78:	781b      	ldrb	r3, [r3, #0]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d11b      	bne.n	8006db6 <OSIntExit+0x76>
                OS_SchedNew();
 8006d7e:	f000 fc77 	bl	8007670 <OS_SchedNew>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
 8006d82:	4b13      	ldr	r3, [pc, #76]	@ (8006dd0 <OSIntExit+0x90>)
 8006d84:	781b      	ldrb	r3, [r3, #0]
 8006d86:	461a      	mov	r2, r3
 8006d88:	4b12      	ldr	r3, [pc, #72]	@ (8006dd4 <OSIntExit+0x94>)
 8006d8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d8e:	4a12      	ldr	r2, [pc, #72]	@ (8006dd8 <OSIntExit+0x98>)
 8006d90:	6013      	str	r3, [r2, #0]
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
 8006d92:	4b0f      	ldr	r3, [pc, #60]	@ (8006dd0 <OSIntExit+0x90>)
 8006d94:	781a      	ldrb	r2, [r3, #0]
 8006d96:	4b11      	ldr	r3, [pc, #68]	@ (8006ddc <OSIntExit+0x9c>)
 8006d98:	781b      	ldrb	r3, [r3, #0]
 8006d9a:	429a      	cmp	r2, r3
 8006d9c:	d00b      	beq.n	8006db6 <OSIntExit+0x76>
#if OS_TASK_PROFILE_EN > 0u
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
 8006d9e:	4b0e      	ldr	r3, [pc, #56]	@ (8006dd8 <OSIntExit+0x98>)
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006da4:	3201      	adds	r2, #1
 8006da6:	641a      	str	r2, [r3, #64]	@ 0x40
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
 8006da8:	4b0d      	ldr	r3, [pc, #52]	@ (8006de0 <OSIntExit+0xa0>)
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	3301      	adds	r3, #1
 8006dae:	4a0c      	ldr	r2, [pc, #48]	@ (8006de0 <OSIntExit+0xa0>)
 8006db0:	6013      	str	r3, [r2, #0]
                    OS_TLS_TaskSw();
#endif
#endif
                    OS_TRACE_ISR_EXIT_TO_SCHEDULER();

                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
 8006db2:	f7f9 fa73 	bl	800029c <OSCtxSw>
            }
        } else {
            OS_TRACE_ISR_EXIT();
        }

        OS_EXIT_CRITICAL();
 8006db6:	6878      	ldr	r0, [r7, #4]
 8006db8:	f7f9 fa27 	bl	800020a <OS_CPU_SR_Restore>
    }
}
 8006dbc:	bf00      	nop
 8006dbe:	3708      	adds	r7, #8
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	bd80      	pop	{r7, pc}
 8006dc4:	20005ab0 	.word	0x20005ab0
 8006dc8:	20005aa0 	.word	0x20005aa0
 8006dcc:	20005aa1 	.word	0x20005aa1
 8006dd0:	20005aa3 	.word	0x20005aa3
 8006dd4:	20005cc8 	.word	0x20005cc8
 8006dd8:	20005cc0 	.word	0x20005cc0
 8006ddc:	20005aa2 	.word	0x20005aa2
 8006de0:	20005744 	.word	0x20005744

08006de4 <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0u
void  OSSchedLock (void)
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b082      	sub	sp, #8
 8006de8:	af00      	add	r7, sp, #0
#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0u;
 8006dea:	2300      	movs	r3, #0
 8006dec:	607b      	str	r3, [r7, #4]
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
 8006dee:	4b0e      	ldr	r3, [pc, #56]	@ (8006e28 <OSSchedLock+0x44>)
 8006df0:	781b      	ldrb	r3, [r3, #0]
 8006df2:	2b01      	cmp	r3, #1
 8006df4:	d114      	bne.n	8006e20 <OSSchedLock+0x3c>
        OS_ENTER_CRITICAL();
 8006df6:	2040      	movs	r0, #64	@ 0x40
 8006df8:	f7f9 f9f9 	bl	80001ee <OS_CPU_SR_Save>
 8006dfc:	6078      	str	r0, [r7, #4]
        if (OSIntNesting == 0u) {                /* Can't call from an ISR                             */
 8006dfe:	4b0b      	ldr	r3, [pc, #44]	@ (8006e2c <OSSchedLock+0x48>)
 8006e00:	781b      	ldrb	r3, [r3, #0]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d109      	bne.n	8006e1a <OSSchedLock+0x36>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
 8006e06:	4b0a      	ldr	r3, [pc, #40]	@ (8006e30 <OSSchedLock+0x4c>)
 8006e08:	781b      	ldrb	r3, [r3, #0]
 8006e0a:	2bff      	cmp	r3, #255	@ 0xff
 8006e0c:	d005      	beq.n	8006e1a <OSSchedLock+0x36>
                OSLockNesting++;                 /* Increment lock nesting level                       */
 8006e0e:	4b08      	ldr	r3, [pc, #32]	@ (8006e30 <OSSchedLock+0x4c>)
 8006e10:	781b      	ldrb	r3, [r3, #0]
 8006e12:	3301      	adds	r3, #1
 8006e14:	b2da      	uxtb	r2, r3
 8006e16:	4b06      	ldr	r3, [pc, #24]	@ (8006e30 <OSSchedLock+0x4c>)
 8006e18:	701a      	strb	r2, [r3, #0]
            }
        }
        OS_EXIT_CRITICAL();
 8006e1a:	6878      	ldr	r0, [r7, #4]
 8006e1c:	f7f9 f9f5 	bl	800020a <OS_CPU_SR_Restore>
    }
}
 8006e20:	bf00      	nop
 8006e22:	3708      	adds	r7, #8
 8006e24:	46bd      	mov	sp, r7
 8006e26:	bd80      	pop	{r7, pc}
 8006e28:	20005ab0 	.word	0x20005ab0
 8006e2c:	20005aa0 	.word	0x20005aa0
 8006e30:	20005aa1 	.word	0x20005aa1

08006e34 <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0u
void  OSSchedUnlock (void)
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b082      	sub	sp, #8
 8006e38:	af00      	add	r7, sp, #0
#if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0u;
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	607b      	str	r3, [r7, #4]
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
 8006e3e:	4b17      	ldr	r3, [pc, #92]	@ (8006e9c <OSSchedUnlock+0x68>)
 8006e40:	781b      	ldrb	r3, [r3, #0]
 8006e42:	2b01      	cmp	r3, #1
 8006e44:	d126      	bne.n	8006e94 <OSSchedUnlock+0x60>
        OS_ENTER_CRITICAL();
 8006e46:	2040      	movs	r0, #64	@ 0x40
 8006e48:	f7f9 f9d1 	bl	80001ee <OS_CPU_SR_Save>
 8006e4c:	6078      	str	r0, [r7, #4]
        if (OSIntNesting == 0u) {                          /* Can't call from an ISR                   */
 8006e4e:	4b14      	ldr	r3, [pc, #80]	@ (8006ea0 <OSSchedUnlock+0x6c>)
 8006e50:	781b      	ldrb	r3, [r3, #0]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d11b      	bne.n	8006e8e <OSSchedUnlock+0x5a>
            if (OSLockNesting > 0u) {                      /* Do not decrement if already 0            */
 8006e56:	4b13      	ldr	r3, [pc, #76]	@ (8006ea4 <OSSchedUnlock+0x70>)
 8006e58:	781b      	ldrb	r3, [r3, #0]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d013      	beq.n	8006e86 <OSSchedUnlock+0x52>
                OSLockNesting--;                           /* Decrement lock nesting level             */
 8006e5e:	4b11      	ldr	r3, [pc, #68]	@ (8006ea4 <OSSchedUnlock+0x70>)
 8006e60:	781b      	ldrb	r3, [r3, #0]
 8006e62:	3b01      	subs	r3, #1
 8006e64:	b2da      	uxtb	r2, r3
 8006e66:	4b0f      	ldr	r3, [pc, #60]	@ (8006ea4 <OSSchedUnlock+0x70>)
 8006e68:	701a      	strb	r2, [r3, #0]
                if (OSLockNesting == 0u) {                 /* See if scheduler is enabled              */
 8006e6a:	4b0e      	ldr	r3, [pc, #56]	@ (8006ea4 <OSSchedUnlock+0x70>)
 8006e6c:	781b      	ldrb	r3, [r3, #0]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d105      	bne.n	8006e7e <OSSchedUnlock+0x4a>
                    OS_EXIT_CRITICAL();
 8006e72:	6878      	ldr	r0, [r7, #4]
 8006e74:	f7f9 f9c9 	bl	800020a <OS_CPU_SR_Restore>
                    OS_Sched();                            /* See if a HPT is ready                    */
 8006e78:	f000 fbb8 	bl	80075ec <OS_Sched>
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
 8006e7c:	e00a      	b.n	8006e94 <OSSchedUnlock+0x60>
                    OS_EXIT_CRITICAL();
 8006e7e:	6878      	ldr	r0, [r7, #4]
 8006e80:	f7f9 f9c3 	bl	800020a <OS_CPU_SR_Restore>
}
 8006e84:	e006      	b.n	8006e94 <OSSchedUnlock+0x60>
                OS_EXIT_CRITICAL();
 8006e86:	6878      	ldr	r0, [r7, #4]
 8006e88:	f7f9 f9bf 	bl	800020a <OS_CPU_SR_Restore>
}
 8006e8c:	e002      	b.n	8006e94 <OSSchedUnlock+0x60>
            OS_EXIT_CRITICAL();
 8006e8e:	6878      	ldr	r0, [r7, #4]
 8006e90:	f7f9 f9bb 	bl	800020a <OS_CPU_SR_Restore>
}
 8006e94:	bf00      	nop
 8006e96:	3708      	adds	r7, #8
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	bd80      	pop	{r7, pc}
 8006e9c:	20005ab0 	.word	0x20005ab0
 8006ea0:	20005aa0 	.word	0x20005aa0
 8006ea4:	20005aa1 	.word	0x20005aa1

08006ea8 <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	af00      	add	r7, sp, #0
    if (OSRunning == OS_FALSE) {
 8006eac:	4b0c      	ldr	r3, [pc, #48]	@ (8006ee0 <OSStart+0x38>)
 8006eae:	781b      	ldrb	r3, [r3, #0]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d113      	bne.n	8006edc <OSStart+0x34>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
 8006eb4:	f000 fbdc 	bl	8007670 <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
 8006eb8:	4b0a      	ldr	r3, [pc, #40]	@ (8006ee4 <OSStart+0x3c>)
 8006eba:	781a      	ldrb	r2, [r3, #0]
 8006ebc:	4b0a      	ldr	r3, [pc, #40]	@ (8006ee8 <OSStart+0x40>)
 8006ebe:	701a      	strb	r2, [r3, #0]
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
 8006ec0:	4b08      	ldr	r3, [pc, #32]	@ (8006ee4 <OSStart+0x3c>)
 8006ec2:	781b      	ldrb	r3, [r3, #0]
 8006ec4:	461a      	mov	r2, r3
 8006ec6:	4b09      	ldr	r3, [pc, #36]	@ (8006eec <OSStart+0x44>)
 8006ec8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ecc:	4a08      	ldr	r2, [pc, #32]	@ (8006ef0 <OSStart+0x48>)
 8006ece:	6013      	str	r3, [r2, #0]
        OSTCBCur      = OSTCBHighRdy;
 8006ed0:	4b07      	ldr	r3, [pc, #28]	@ (8006ef0 <OSStart+0x48>)
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	4a07      	ldr	r2, [pc, #28]	@ (8006ef4 <OSStart+0x4c>)
 8006ed6:	6013      	str	r3, [r2, #0]
        OSStartHighRdy();                            /* Execute target specific code to start task     */
 8006ed8:	f7f9 f9a0 	bl	800021c <OSStartHighRdy>
    }
}
 8006edc:	bf00      	nop
 8006ede:	bd80      	pop	{r7, pc}
 8006ee0:	20005ab0 	.word	0x20005ab0
 8006ee4:	20005aa3 	.word	0x20005aa3
 8006ee8:	20005aa2 	.word	0x20005aa2
 8006eec:	20005cc8 	.word	0x20005cc8
 8006ef0:	20005cc0 	.word	0x20005cc0
 8006ef4:	20005cb8 	.word	0x20005cb8

08006ef8 <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b084      	sub	sp, #16
 8006efc:	af00      	add	r7, sp, #0
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0u
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0u;
 8006efe:	2300      	movs	r3, #0
 8006f00:	607b      	str	r3, [r7, #4]
#endif



#if OS_TIME_TICK_HOOK_EN > 0u
    OSTimeTickHook();                                      /* Call user definable hook                     */
 8006f02:	f7ff fd91 	bl	8006a28 <OSTimeTickHook>
#endif
#if OS_TIME_GET_SET_EN > 0u
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
 8006f06:	2040      	movs	r0, #64	@ 0x40
 8006f08:	f7f9 f971 	bl	80001ee <OS_CPU_SR_Save>
 8006f0c:	6078      	str	r0, [r7, #4]
    OSTime++;
 8006f0e:	4b45      	ldr	r3, [pc, #276]	@ (8007024 <OSTimeTick+0x12c>)
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	3301      	adds	r3, #1
 8006f14:	4a43      	ldr	r2, [pc, #268]	@ (8007024 <OSTimeTick+0x12c>)
 8006f16:	6013      	str	r3, [r2, #0]
    OS_TRACE_TICK_INCREMENT(OSTime);
    OS_EXIT_CRITICAL();
 8006f18:	6878      	ldr	r0, [r7, #4]
 8006f1a:	f7f9 f976 	bl	800020a <OS_CPU_SR_Restore>
#endif
    if (OSRunning == OS_TRUE) {
 8006f1e:	4b42      	ldr	r3, [pc, #264]	@ (8007028 <OSTimeTick+0x130>)
 8006f20:	781b      	ldrb	r3, [r3, #0]
 8006f22:	2b01      	cmp	r3, #1
 8006f24:	d17a      	bne.n	800701c <OSTimeTick+0x124>
#if OS_TICK_STEP_EN > 0u
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
 8006f26:	4b41      	ldr	r3, [pc, #260]	@ (800702c <OSTimeTick+0x134>)
 8006f28:	781b      	ldrb	r3, [r3, #0]
 8006f2a:	2b02      	cmp	r3, #2
 8006f2c:	d00c      	beq.n	8006f48 <OSTimeTick+0x50>
 8006f2e:	2b02      	cmp	r3, #2
 8006f30:	dc10      	bgt.n	8006f54 <OSTimeTick+0x5c>
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d002      	beq.n	8006f3c <OSTimeTick+0x44>
 8006f36:	2b01      	cmp	r3, #1
 8006f38:	d003      	beq.n	8006f42 <OSTimeTick+0x4a>
 8006f3a:	e00b      	b.n	8006f54 <OSTimeTick+0x5c>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
 8006f3c:	2301      	movs	r3, #1
 8006f3e:	72fb      	strb	r3, [r7, #11]
                 break;
 8006f40:	e00e      	b.n	8006f60 <OSTimeTick+0x68>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
 8006f42:	2300      	movs	r3, #0
 8006f44:	72fb      	strb	r3, [r7, #11]
                 break;
 8006f46:	e00b      	b.n	8006f60 <OSTimeTick+0x68>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
 8006f48:	2301      	movs	r3, #1
 8006f4a:	72fb      	strb	r3, [r7, #11]
                 OSTickStepState = OS_TICK_STEP_WAIT;
 8006f4c:	4b37      	ldr	r3, [pc, #220]	@ (800702c <OSTimeTick+0x134>)
 8006f4e:	2201      	movs	r2, #1
 8006f50:	701a      	strb	r2, [r3, #0]
                 break;
 8006f52:	e005      	b.n	8006f60 <OSTimeTick+0x68>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
 8006f54:	2301      	movs	r3, #1
 8006f56:	72fb      	strb	r3, [r7, #11]
                 OSTickStepState = OS_TICK_STEP_DIS;
 8006f58:	4b34      	ldr	r3, [pc, #208]	@ (800702c <OSTimeTick+0x134>)
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	701a      	strb	r2, [r3, #0]
                 break;
 8006f5e:	bf00      	nop
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
 8006f60:	7afb      	ldrb	r3, [r7, #11]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d059      	beq.n	800701a <OSTimeTick+0x122>
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
 8006f66:	4b32      	ldr	r3, [pc, #200]	@ (8007030 <OSTimeTick+0x138>)
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	60fb      	str	r3, [r7, #12]
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
 8006f6c:	e04f      	b.n	800700e <OSTimeTick+0x116>
            OS_ENTER_CRITICAL();
 8006f6e:	2040      	movs	r0, #64	@ 0x40
 8006f70:	f7f9 f93d 	bl	80001ee <OS_CPU_SR_Save>
 8006f74:	6078      	str	r0, [r7, #4]
            if (ptcb->OSTCBDly != 0u) {                    /* No, Delayed or waiting for event with TO     */
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d041      	beq.n	8007002 <OSTimeTick+0x10a>
                ptcb->OSTCBDly--;                          /* Decrement nbr of ticks to end of delay       */
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f82:	1e5a      	subs	r2, r3, #1
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	635a      	str	r2, [r3, #52]	@ 0x34
                if (ptcb->OSTCBDly == 0u) {                /* Check for timeout                            */
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d138      	bne.n	8007002 <OSTimeTick+0x10a>

                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006f96:	f003 0337 	and.w	r3, r3, #55	@ 0x37
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d00d      	beq.n	8006fba <OSTimeTick+0xc2>
                        ptcb->OSTCBStat  &= (INT8U)~(INT8U)OS_STAT_PEND_ANY;   /* Yes, Clear status flag   */
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006fa4:	f023 0337 	bic.w	r3, r3, #55	@ 0x37
 8006fa8:	b2da      	uxtb	r2, r3
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	2201      	movs	r2, #1
 8006fb4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 8006fb8:	e003      	b.n	8006fc2 <OSTimeTick+0xca>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006fc8:	f003 0308 	and.w	r3, r3, #8
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d118      	bne.n	8007002 <OSTimeTick+0x10a>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	f893 203e 	ldrb.w	r2, [r3, #62]	@ 0x3e
 8006fd6:	4b17      	ldr	r3, [pc, #92]	@ (8007034 <OSTimeTick+0x13c>)
 8006fd8:	781b      	ldrb	r3, [r3, #0]
 8006fda:	4313      	orrs	r3, r2
 8006fdc:	b2da      	uxtb	r2, r3
 8006fde:	4b15      	ldr	r3, [pc, #84]	@ (8007034 <OSTimeTick+0x13c>)
 8006fe0:	701a      	strb	r2, [r3, #0]
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006fe8:	461a      	mov	r2, r3
 8006fea:	4b13      	ldr	r3, [pc, #76]	@ (8007038 <OSTimeTick+0x140>)
 8006fec:	5c9a      	ldrb	r2, [r3, r2]
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006ff4:	68f9      	ldr	r1, [r7, #12]
 8006ff6:	f891 103c 	ldrb.w	r1, [r1, #60]	@ 0x3c
 8006ffa:	4313      	orrs	r3, r2
 8006ffc:	b2da      	uxtb	r2, r3
 8006ffe:	4b0e      	ldr	r3, [pc, #56]	@ (8007038 <OSTimeTick+0x140>)
 8007000:	545a      	strb	r2, [r3, r1]
                        OS_TRACE_TASK_READY(ptcb);
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	695b      	ldr	r3, [r3, #20]
 8007006:	60fb      	str	r3, [r7, #12]
            OS_EXIT_CRITICAL();
 8007008:	6878      	ldr	r0, [r7, #4]
 800700a:	f7f9 f8fe 	bl	800020a <OS_CPU_SR_Restore>
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8007014:	2b3f      	cmp	r3, #63	@ 0x3f
 8007016:	d1aa      	bne.n	8006f6e <OSTimeTick+0x76>
 8007018:	e000      	b.n	800701c <OSTimeTick+0x124>
            return;
 800701a:	bf00      	nop
        }
    }
}
 800701c:	3710      	adds	r7, #16
 800701e:	46bd      	mov	sp, r7
 8007020:	bd80      	pop	{r7, pc}
 8007022:	bf00      	nop
 8007024:	20006698 	.word	0x20006698
 8007028:	20005ab0 	.word	0x20005ab0
 800702c:	200065b0 	.word	0x200065b0
 8007030:	20005cc4 	.word	0x20005cc4
 8007034:	20005aa4 	.word	0x20005aa4
 8007038:	20005aa8 	.word	0x20005aa8

0800703c <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0u
void  OS_Dummy (void)
{
 800703c:	b480      	push	{r7}
 800703e:	af00      	add	r7, sp, #0
}
 8007040:	bf00      	nop
 8007042:	46bd      	mov	sp, r7
 8007044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007048:	4770      	bx	lr
	...

0800704c <OS_EventTaskRdy>:
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT  *pevent,
                        void      *pmsg,
                        INT8U      msk,
                        INT8U      pend_stat)
{
 800704c:	b580      	push	{r7, lr}
 800704e:	b086      	sub	sp, #24
 8007050:	af00      	add	r7, sp, #0
 8007052:	60f8      	str	r0, [r7, #12]
 8007054:	60b9      	str	r1, [r7, #8]
 8007056:	4611      	mov	r1, r2
 8007058:	461a      	mov	r2, r3
 800705a:	460b      	mov	r3, r1
 800705c:	71fb      	strb	r3, [r7, #7]
 800705e:	4613      	mov	r3, r2
 8007060:	71bb      	strb	r3, [r7, #6]
    OS_PRIO  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63u
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	7a9b      	ldrb	r3, [r3, #10]
 8007066:	461a      	mov	r2, r3
 8007068:	4b2f      	ldr	r3, [pc, #188]	@ (8007128 <OS_EventTaskRdy+0xdc>)
 800706a:	5c9b      	ldrb	r3, [r3, r2]
 800706c:	75fb      	strb	r3, [r7, #23]
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
 800706e:	7dfb      	ldrb	r3, [r7, #23]
 8007070:	68fa      	ldr	r2, [r7, #12]
 8007072:	4413      	add	r3, r2
 8007074:	7adb      	ldrb	r3, [r3, #11]
 8007076:	461a      	mov	r2, r3
 8007078:	4b2b      	ldr	r3, [pc, #172]	@ (8007128 <OS_EventTaskRdy+0xdc>)
 800707a:	5c9b      	ldrb	r3, [r3, r2]
 800707c:	75bb      	strb	r3, [r7, #22]
    prio = (INT8U)((y << 3u) + x);                      /* Find priority of task getting the msg       */
 800707e:	7dfb      	ldrb	r3, [r7, #23]
 8007080:	00db      	lsls	r3, r3, #3
 8007082:	b2da      	uxtb	r2, r3
 8007084:	7dbb      	ldrb	r3, [r7, #22]
 8007086:	4413      	add	r3, r2
 8007088:	757b      	strb	r3, [r7, #21]
        x = OSUnMapTbl[(OS_PRIO)(*ptbl >> 8u) & 0xFFu] + 8u;
    }
    prio = (INT8U)((y << 4u) + x);                      /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
 800708a:	7d7b      	ldrb	r3, [r7, #21]
 800708c:	4a27      	ldr	r2, [pc, #156]	@ (800712c <OS_EventTaskRdy+0xe0>)
 800708e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007092:	613b      	str	r3, [r7, #16]
    ptcb->OSTCBDly        =  0u;                        /* Prevent OSTimeTick() from readying task     */
 8007094:	693b      	ldr	r3, [r7, #16]
 8007096:	2200      	movs	r2, #0
 8007098:	635a      	str	r2, [r3, #52]	@ 0x34
#if ((OS_Q_EN > 0u) && (OS_MAX_QS > 0u)) || (OS_MBOX_EN > 0u)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
 800709a:	693b      	ldr	r3, [r7, #16]
 800709c:	68ba      	ldr	r2, [r7, #8]
 800709e:	629a      	str	r2, [r3, #40]	@ 0x28
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= (INT8U)~msk;                /* Clear bit associated with event type        */
 80070a0:	693b      	ldr	r3, [r7, #16]
 80070a2:	f893 2038 	ldrb.w	r2, [r3, #56]	@ 0x38
 80070a6:	79fb      	ldrb	r3, [r7, #7]
 80070a8:	43db      	mvns	r3, r3
 80070aa:	b2db      	uxtb	r3, r3
 80070ac:	4013      	ands	r3, r2
 80070ae:	b2da      	uxtb	r2, r3
 80070b0:	693b      	ldr	r3, [r7, #16]
 80070b2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
 80070b6:	693b      	ldr	r3, [r7, #16]
 80070b8:	79ba      	ldrb	r2, [r7, #6]
 80070ba:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
 80070be:	693b      	ldr	r3, [r7, #16]
 80070c0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80070c4:	f003 0308 	and.w	r3, r3, #8
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d113      	bne.n	80070f4 <OS_EventTaskRdy+0xa8>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
 80070cc:	693b      	ldr	r3, [r7, #16]
 80070ce:	f893 203e 	ldrb.w	r2, [r3, #62]	@ 0x3e
 80070d2:	4b17      	ldr	r3, [pc, #92]	@ (8007130 <OS_EventTaskRdy+0xe4>)
 80070d4:	781b      	ldrb	r3, [r3, #0]
 80070d6:	4313      	orrs	r3, r2
 80070d8:	b2da      	uxtb	r2, r3
 80070da:	4b15      	ldr	r3, [pc, #84]	@ (8007130 <OS_EventTaskRdy+0xe4>)
 80070dc:	701a      	strb	r2, [r3, #0]
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
 80070de:	7dfb      	ldrb	r3, [r7, #23]
 80070e0:	4a14      	ldr	r2, [pc, #80]	@ (8007134 <OS_EventTaskRdy+0xe8>)
 80070e2:	5cd1      	ldrb	r1, [r2, r3]
 80070e4:	693b      	ldr	r3, [r7, #16]
 80070e6:	f893 203d 	ldrb.w	r2, [r3, #61]	@ 0x3d
 80070ea:	7dfb      	ldrb	r3, [r7, #23]
 80070ec:	430a      	orrs	r2, r1
 80070ee:	b2d1      	uxtb	r1, r2
 80070f0:	4a10      	ldr	r2, [pc, #64]	@ (8007134 <OS_EventTaskRdy+0xe8>)
 80070f2:	54d1      	strb	r1, [r2, r3]
        OS_TRACE_TASK_READY(ptcb);
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
 80070f4:	68f9      	ldr	r1, [r7, #12]
 80070f6:	6938      	ldr	r0, [r7, #16]
 80070f8:	f000 f876 	bl	80071e8 <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0u)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
 80070fc:	693b      	ldr	r3, [r7, #16]
 80070fe:	6a1b      	ldr	r3, [r3, #32]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d00b      	beq.n	800711c <OS_EventTaskRdy+0xd0>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
 8007104:	693b      	ldr	r3, [r7, #16]
 8007106:	6a1b      	ldr	r3, [r3, #32]
 8007108:	4619      	mov	r1, r3
 800710a:	6938      	ldr	r0, [r7, #16]
 800710c:	f000 f89f 	bl	800724e <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventMultiPtr  = (OS_EVENT **)0;     /* No longer pending on multi list             */
 8007110:	693b      	ldr	r3, [r7, #16]
 8007112:	2200      	movs	r2, #0
 8007114:	621a      	str	r2, [r3, #32]
        ptcb->OSTCBEventMultiRdy  = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
 8007116:	693b      	ldr	r3, [r7, #16]
 8007118:	68fa      	ldr	r2, [r7, #12]
 800711a:	625a      	str	r2, [r3, #36]	@ 0x24
    }
#endif

    return (prio);
 800711c:	7d7b      	ldrb	r3, [r7, #21]
}
 800711e:	4618      	mov	r0, r3
 8007120:	3718      	adds	r7, #24
 8007122:	46bd      	mov	sp, r7
 8007124:	bd80      	pop	{r7, pc}
 8007126:	bf00      	nop
 8007128:	0800c678 	.word	0x0800c678
 800712c:	20005cc8 	.word	0x20005cc8
 8007130:	20005aa4 	.word	0x20005aa4
 8007134:	20005aa8 	.word	0x20005aa8

08007138 <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
 8007138:	b480      	push	{r7}
 800713a:	b085      	sub	sp, #20
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
 8007140:	4b26      	ldr	r3, [pc, #152]	@ (80071dc <OS_EventTaskWait+0xa4>)
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	687a      	ldr	r2, [r7, #4]
 8007146:	61da      	str	r2, [r3, #28]

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
 8007148:	4b24      	ldr	r3, [pc, #144]	@ (80071dc <OS_EventTaskWait+0xa4>)
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007150:	461a      	mov	r2, r3
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	4413      	add	r3, r2
 8007156:	7ada      	ldrb	r2, [r3, #11]
 8007158:	4b20      	ldr	r3, [pc, #128]	@ (80071dc <OS_EventTaskWait+0xa4>)
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007160:	491e      	ldr	r1, [pc, #120]	@ (80071dc <OS_EventTaskWait+0xa4>)
 8007162:	6809      	ldr	r1, [r1, #0]
 8007164:	f891 103c 	ldrb.w	r1, [r1, #60]	@ 0x3c
 8007168:	4313      	orrs	r3, r2
 800716a:	b2da      	uxtb	r2, r3
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	440b      	add	r3, r1
 8007170:	72da      	strb	r2, [r3, #11]
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	7a9a      	ldrb	r2, [r3, #10]
 8007176:	4b19      	ldr	r3, [pc, #100]	@ (80071dc <OS_EventTaskWait+0xa4>)
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800717e:	4313      	orrs	r3, r2
 8007180:	b2da      	uxtb	r2, r3
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	729a      	strb	r2, [r3, #10]

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
 8007186:	4b15      	ldr	r3, [pc, #84]	@ (80071dc <OS_EventTaskWait+0xa4>)
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800718e:	73fb      	strb	r3, [r7, #15]
    OSRdyTbl[y]  &= (OS_PRIO)~OSTCBCur->OSTCBBitX;
 8007190:	7bfb      	ldrb	r3, [r7, #15]
 8007192:	4a13      	ldr	r2, [pc, #76]	@ (80071e0 <OS_EventTaskWait+0xa8>)
 8007194:	5cd1      	ldrb	r1, [r2, r3]
 8007196:	4b11      	ldr	r3, [pc, #68]	@ (80071dc <OS_EventTaskWait+0xa4>)
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800719e:	43db      	mvns	r3, r3
 80071a0:	b2da      	uxtb	r2, r3
 80071a2:	7bfb      	ldrb	r3, [r7, #15]
 80071a4:	400a      	ands	r2, r1
 80071a6:	b2d1      	uxtb	r1, r2
 80071a8:	4a0d      	ldr	r2, [pc, #52]	@ (80071e0 <OS_EventTaskWait+0xa8>)
 80071aa:	54d1      	strb	r1, [r2, r3]
    OS_TRACE_TASK_SUSPENDED(OSTCBCur);
    if (OSRdyTbl[y] == 0u) {                      /* Clear event grp bit if this was only task pending */
 80071ac:	7bfb      	ldrb	r3, [r7, #15]
 80071ae:	4a0c      	ldr	r2, [pc, #48]	@ (80071e0 <OS_EventTaskWait+0xa8>)
 80071b0:	5cd3      	ldrb	r3, [r2, r3]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d10b      	bne.n	80071ce <OS_EventTaskWait+0x96>
        OSRdyGrp &= (OS_PRIO)~OSTCBCur->OSTCBBitY;
 80071b6:	4b09      	ldr	r3, [pc, #36]	@ (80071dc <OS_EventTaskWait+0xa4>)
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80071be:	43db      	mvns	r3, r3
 80071c0:	b2da      	uxtb	r2, r3
 80071c2:	4b08      	ldr	r3, [pc, #32]	@ (80071e4 <OS_EventTaskWait+0xac>)
 80071c4:	781b      	ldrb	r3, [r3, #0]
 80071c6:	4013      	ands	r3, r2
 80071c8:	b2da      	uxtb	r2, r3
 80071ca:	4b06      	ldr	r3, [pc, #24]	@ (80071e4 <OS_EventTaskWait+0xac>)
 80071cc:	701a      	strb	r2, [r3, #0]
    }
}
 80071ce:	bf00      	nop
 80071d0:	3714      	adds	r7, #20
 80071d2:	46bd      	mov	sp, r7
 80071d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d8:	4770      	bx	lr
 80071da:	bf00      	nop
 80071dc:	20005cb8 	.word	0x20005cb8
 80071e0:	20005aa8 	.word	0x20005aa8
 80071e4:	20005aa4 	.word	0x20005aa4

080071e8 <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
 80071e8:	b480      	push	{r7}
 80071ea:	b085      	sub	sp, #20
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
 80071f0:	6039      	str	r1, [r7, #0]
    INT8U  y;


    y                       =  ptcb->OSTCBY;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80071f8:	73fb      	strb	r3, [r7, #15]
    pevent->OSEventTbl[y]  &= (OS_PRIO)~ptcb->OSTCBBitX;    /* Remove task from wait list              */
 80071fa:	7bfb      	ldrb	r3, [r7, #15]
 80071fc:	683a      	ldr	r2, [r7, #0]
 80071fe:	4413      	add	r3, r2
 8007200:	7ad9      	ldrb	r1, [r3, #11]
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007208:	43db      	mvns	r3, r3
 800720a:	b2da      	uxtb	r2, r3
 800720c:	7bfb      	ldrb	r3, [r7, #15]
 800720e:	400a      	ands	r2, r1
 8007210:	b2d1      	uxtb	r1, r2
 8007212:	683a      	ldr	r2, [r7, #0]
 8007214:	4413      	add	r3, r2
 8007216:	460a      	mov	r2, r1
 8007218:	72da      	strb	r2, [r3, #11]
    if (pevent->OSEventTbl[y] == 0u) {
 800721a:	7bfb      	ldrb	r3, [r7, #15]
 800721c:	683a      	ldr	r2, [r7, #0]
 800721e:	4413      	add	r3, r2
 8007220:	7adb      	ldrb	r3, [r3, #11]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d10a      	bne.n	800723c <OS_EventTaskRemove+0x54>
        pevent->OSEventGrp &= (OS_PRIO)~ptcb->OSTCBBitY;
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	7a9a      	ldrb	r2, [r3, #10]
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007230:	43db      	mvns	r3, r3
 8007232:	b2db      	uxtb	r3, r3
 8007234:	4013      	ands	r3, r2
 8007236:	b2da      	uxtb	r2, r3
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	729a      	strb	r2, [r3, #10]
    }
    ptcb->OSTCBEventPtr     = (OS_EVENT  *)0;               /* Unlink OS_EVENT from OS_TCB             */
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2200      	movs	r2, #0
 8007240:	61da      	str	r2, [r3, #28]
}
 8007242:	bf00      	nop
 8007244:	3714      	adds	r7, #20
 8007246:	46bd      	mov	sp, r7
 8007248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724c:	4770      	bx	lr

0800724e <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0u))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
 800724e:	b480      	push	{r7}
 8007250:	b087      	sub	sp, #28
 8007252:	af00      	add	r7, sp, #0
 8007254:	6078      	str	r0, [r7, #4]
 8007256:	6039      	str	r1, [r7, #0]
    INT8U      y;
    OS_PRIO    bity;
    OS_PRIO    bitx;


    y       =  ptcb->OSTCBY;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800725e:	73fb      	strb	r3, [r7, #15]
    bity    =  ptcb->OSTCBBitY;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007266:	73bb      	strb	r3, [r7, #14]
    bitx    =  ptcb->OSTCBBitX;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800726e:	737b      	strb	r3, [r7, #13]
    pevents =  pevents_multi;
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	617b      	str	r3, [r7, #20]
    pevent  = *pevents;
 8007274:	697b      	ldr	r3, [r7, #20]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	613b      	str	r3, [r7, #16]
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
 800727a:	e022      	b.n	80072c2 <OS_EventTaskRemoveMulti+0x74>
        pevent->OSEventTbl[y]  &= (OS_PRIO)~bitx;
 800727c:	7bfb      	ldrb	r3, [r7, #15]
 800727e:	693a      	ldr	r2, [r7, #16]
 8007280:	4413      	add	r3, r2
 8007282:	7ad9      	ldrb	r1, [r3, #11]
 8007284:	7b7b      	ldrb	r3, [r7, #13]
 8007286:	43db      	mvns	r3, r3
 8007288:	b2da      	uxtb	r2, r3
 800728a:	7bfb      	ldrb	r3, [r7, #15]
 800728c:	400a      	ands	r2, r1
 800728e:	b2d1      	uxtb	r1, r2
 8007290:	693a      	ldr	r2, [r7, #16]
 8007292:	4413      	add	r3, r2
 8007294:	460a      	mov	r2, r1
 8007296:	72da      	strb	r2, [r3, #11]
        if (pevent->OSEventTbl[y] == 0u) {
 8007298:	7bfb      	ldrb	r3, [r7, #15]
 800729a:	693a      	ldr	r2, [r7, #16]
 800729c:	4413      	add	r3, r2
 800729e:	7adb      	ldrb	r3, [r3, #11]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d108      	bne.n	80072b6 <OS_EventTaskRemoveMulti+0x68>
            pevent->OSEventGrp &= (OS_PRIO)~bity;
 80072a4:	693b      	ldr	r3, [r7, #16]
 80072a6:	7a9a      	ldrb	r2, [r3, #10]
 80072a8:	7bbb      	ldrb	r3, [r7, #14]
 80072aa:	43db      	mvns	r3, r3
 80072ac:	b2db      	uxtb	r3, r3
 80072ae:	4013      	ands	r3, r2
 80072b0:	b2da      	uxtb	r2, r3
 80072b2:	693b      	ldr	r3, [r7, #16]
 80072b4:	729a      	strb	r2, [r3, #10]
        }
        pevents++;
 80072b6:	697b      	ldr	r3, [r7, #20]
 80072b8:	3304      	adds	r3, #4
 80072ba:	617b      	str	r3, [r7, #20]
        pevent = *pevents;
 80072bc:	697b      	ldr	r3, [r7, #20]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	613b      	str	r3, [r7, #16]
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
 80072c2:	693b      	ldr	r3, [r7, #16]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d1d9      	bne.n	800727c <OS_EventTaskRemoveMulti+0x2e>
    }
}
 80072c8:	bf00      	nop
 80072ca:	bf00      	nop
 80072cc:	371c      	adds	r7, #28
 80072ce:	46bd      	mov	sp, r7
 80072d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d4:	4770      	bx	lr

080072d6 <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
 80072d6:	b480      	push	{r7}
 80072d8:	b085      	sub	sp, #20
 80072da:	af00      	add	r7, sp, #0
 80072dc:	6078      	str	r0, [r7, #4]
    INT8U  i;


    pevent->OSEventGrp = 0u;                     /* No task waiting on event                           */
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	2200      	movs	r2, #0
 80072e2:	729a      	strb	r2, [r3, #10]
    for (i = 0u; i < OS_EVENT_TBL_SIZE; i++) {
 80072e4:	2300      	movs	r3, #0
 80072e6:	73fb      	strb	r3, [r7, #15]
 80072e8:	e007      	b.n	80072fa <OS_EventWaitListInit+0x24>
        pevent->OSEventTbl[i] = 0u;
 80072ea:	7bfb      	ldrb	r3, [r7, #15]
 80072ec:	687a      	ldr	r2, [r7, #4]
 80072ee:	4413      	add	r3, r2
 80072f0:	2200      	movs	r2, #0
 80072f2:	72da      	strb	r2, [r3, #11]
    for (i = 0u; i < OS_EVENT_TBL_SIZE; i++) {
 80072f4:	7bfb      	ldrb	r3, [r7, #15]
 80072f6:	3301      	adds	r3, #1
 80072f8:	73fb      	strb	r3, [r7, #15]
 80072fa:	7bfb      	ldrb	r3, [r7, #15]
 80072fc:	2b07      	cmp	r3, #7
 80072fe:	d9f4      	bls.n	80072ea <OS_EventWaitListInit+0x14>
    }
}
 8007300:	bf00      	nop
 8007302:	bf00      	nop
 8007304:	3714      	adds	r7, #20
 8007306:	46bd      	mov	sp, r7
 8007308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730c:	4770      	bx	lr
	...

08007310 <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b084      	sub	sp, #16
 8007314:	af00      	add	r7, sp, #0
    INT16U     ix_next;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
 8007316:	21f0      	movs	r1, #240	@ 0xf0
 8007318:	481f      	ldr	r0, [pc, #124]	@ (8007398 <OS_InitEventList+0x88>)
 800731a:	f000 f94d 	bl	80075b8 <OS_MemClr>
    for (ix = 0u; ix < (OS_MAX_EVENTS - 1u); ix++) {        /* Init. list of free EVENT control blocks */
 800731e:	2300      	movs	r3, #0
 8007320:	81fb      	strh	r3, [r7, #14]
 8007322:	e01e      	b.n	8007362 <OS_InitEventList+0x52>
        ix_next = ix + 1u;
 8007324:	89fb      	ldrh	r3, [r7, #14]
 8007326:	3301      	adds	r3, #1
 8007328:	80fb      	strh	r3, [r7, #6]
        pevent1 = &OSEventTbl[ix];
 800732a:	89fa      	ldrh	r2, [r7, #14]
 800732c:	4613      	mov	r3, r2
 800732e:	005b      	lsls	r3, r3, #1
 8007330:	4413      	add	r3, r2
 8007332:	00db      	lsls	r3, r3, #3
 8007334:	4a18      	ldr	r2, [pc, #96]	@ (8007398 <OS_InitEventList+0x88>)
 8007336:	4413      	add	r3, r2
 8007338:	60bb      	str	r3, [r7, #8]
        pevent2 = &OSEventTbl[ix_next];
 800733a:	88fa      	ldrh	r2, [r7, #6]
 800733c:	4613      	mov	r3, r2
 800733e:	005b      	lsls	r3, r3, #1
 8007340:	4413      	add	r3, r2
 8007342:	00db      	lsls	r3, r3, #3
 8007344:	4a14      	ldr	r2, [pc, #80]	@ (8007398 <OS_InitEventList+0x88>)
 8007346:	4413      	add	r3, r2
 8007348:	603b      	str	r3, [r7, #0]
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
 800734a:	68bb      	ldr	r3, [r7, #8]
 800734c:	2200      	movs	r2, #0
 800734e:	701a      	strb	r2, [r3, #0]
        pevent1->OSEventPtr     = pevent2;
 8007350:	68bb      	ldr	r3, [r7, #8]
 8007352:	683a      	ldr	r2, [r7, #0]
 8007354:	605a      	str	r2, [r3, #4]
#if OS_EVENT_NAME_EN > 0u
        pevent1->OSEventName    = (INT8U *)(void *)"?";     /* Unknown name                            */
 8007356:	68bb      	ldr	r3, [r7, #8]
 8007358:	4a10      	ldr	r2, [pc, #64]	@ (800739c <OS_InitEventList+0x8c>)
 800735a:	615a      	str	r2, [r3, #20]
    for (ix = 0u; ix < (OS_MAX_EVENTS - 1u); ix++) {        /* Init. list of free EVENT control blocks */
 800735c:	89fb      	ldrh	r3, [r7, #14]
 800735e:	3301      	adds	r3, #1
 8007360:	81fb      	strh	r3, [r7, #14]
 8007362:	89fb      	ldrh	r3, [r7, #14]
 8007364:	2b08      	cmp	r3, #8
 8007366:	d9dd      	bls.n	8007324 <OS_InitEventList+0x14>
#endif
    }
    pevent1                         = &OSEventTbl[ix];
 8007368:	89fa      	ldrh	r2, [r7, #14]
 800736a:	4613      	mov	r3, r2
 800736c:	005b      	lsls	r3, r3, #1
 800736e:	4413      	add	r3, r2
 8007370:	00db      	lsls	r3, r3, #3
 8007372:	4a09      	ldr	r2, [pc, #36]	@ (8007398 <OS_InitEventList+0x88>)
 8007374:	4413      	add	r3, r2
 8007376:	60bb      	str	r3, [r7, #8]
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
 8007378:	68bb      	ldr	r3, [r7, #8]
 800737a:	2200      	movs	r2, #0
 800737c:	701a      	strb	r2, [r3, #0]
    pevent1->OSEventPtr             = (OS_EVENT *)0;
 800737e:	68bb      	ldr	r3, [r7, #8]
 8007380:	2200      	movs	r2, #0
 8007382:	605a      	str	r2, [r3, #4]
#if OS_EVENT_NAME_EN > 0u
    pevent1->OSEventName            = (INT8U *)(void *)"?"; /* Unknown name                            */
 8007384:	68bb      	ldr	r3, [r7, #8]
 8007386:	4a05      	ldr	r2, [pc, #20]	@ (800739c <OS_InitEventList+0x8c>)
 8007388:	615a      	str	r2, [r3, #20]
#endif
    OSEventFreeList                 = &OSEventTbl[0];
 800738a:	4b05      	ldr	r3, [pc, #20]	@ (80073a0 <OS_InitEventList+0x90>)
 800738c:	4a02      	ldr	r2, [pc, #8]	@ (8007398 <OS_InitEventList+0x88>)
 800738e:	601a      	str	r2, [r3, #0]
#if OS_EVENT_NAME_EN > 0u
    OSEventFreeList->OSEventName    = (INT8U *)"?";         /* Unknown name                            */
#endif
#endif
#endif
}
 8007390:	bf00      	nop
 8007392:	3710      	adds	r7, #16
 8007394:	46bd      	mov	sp, r7
 8007396:	bd80      	pop	{r7, pc}
 8007398:	2000574c 	.word	0x2000574c
 800739c:	0800c548 	.word	0x0800c548
 80073a0:	20005748 	.word	0x20005748

080073a4 <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
 80073a4:	b480      	push	{r7}
 80073a6:	af00      	add	r7, sp, #0
#if OS_TIME_GET_SET_EN > 0u
    OSTime                    = 0uL;                       /* Clear the 32-bit system clock            */
 80073a8:	4b12      	ldr	r3, [pc, #72]	@ (80073f4 <OS_InitMisc+0x50>)
 80073aa:	2200      	movs	r2, #0
 80073ac:	601a      	str	r2, [r3, #0]
#endif

    OSIntNesting              = 0u;                        /* Clear the interrupt nesting counter      */
 80073ae:	4b12      	ldr	r3, [pc, #72]	@ (80073f8 <OS_InitMisc+0x54>)
 80073b0:	2200      	movs	r2, #0
 80073b2:	701a      	strb	r2, [r3, #0]
    OSLockNesting             = 0u;                        /* Clear the scheduling lock counter        */
 80073b4:	4b11      	ldr	r3, [pc, #68]	@ (80073fc <OS_InitMisc+0x58>)
 80073b6:	2200      	movs	r2, #0
 80073b8:	701a      	strb	r2, [r3, #0]

    OSTaskCtr                 = 0u;                        /* Clear the number of tasks                */
 80073ba:	4b11      	ldr	r3, [pc, #68]	@ (8007400 <OS_InitMisc+0x5c>)
 80073bc:	2200      	movs	r2, #0
 80073be:	701a      	strb	r2, [r3, #0]

    OSRunning                 = OS_FALSE;                  /* Indicate that multitasking not started   */
 80073c0:	4b10      	ldr	r3, [pc, #64]	@ (8007404 <OS_InitMisc+0x60>)
 80073c2:	2200      	movs	r2, #0
 80073c4:	701a      	strb	r2, [r3, #0]

    OSCtxSwCtr                = 0u;                        /* Clear the context switch counter         */
 80073c6:	4b10      	ldr	r3, [pc, #64]	@ (8007408 <OS_InitMisc+0x64>)
 80073c8:	2200      	movs	r2, #0
 80073ca:	601a      	str	r2, [r3, #0]
    OSIdleCtr                 = 0uL;                       /* Clear the 32-bit idle counter            */
 80073cc:	4b0f      	ldr	r3, [pc, #60]	@ (800740c <OS_InitMisc+0x68>)
 80073ce:	2200      	movs	r2, #0
 80073d0:	601a      	str	r2, [r3, #0]

#if OS_TASK_STAT_EN > 0u
    OSIdleCtrRun              = 0uL;
 80073d2:	4b0f      	ldr	r3, [pc, #60]	@ (8007410 <OS_InitMisc+0x6c>)
 80073d4:	2200      	movs	r2, #0
 80073d6:	601a      	str	r2, [r3, #0]
    OSIdleCtrMax              = 0uL;
 80073d8:	4b0e      	ldr	r3, [pc, #56]	@ (8007414 <OS_InitMisc+0x70>)
 80073da:	2200      	movs	r2, #0
 80073dc:	601a      	str	r2, [r3, #0]
    OSStatRdy                 = OS_FALSE;                  /* Statistic task is not ready              */
 80073de:	4b0e      	ldr	r3, [pc, #56]	@ (8007418 <OS_InitMisc+0x74>)
 80073e0:	2200      	movs	r2, #0
 80073e2:	701a      	strb	r2, [r3, #0]
#ifdef OS_SAFETY_CRITICAL_IEC61508
    OSSafetyCriticalStartFlag = OS_FALSE;                  /* Still allow creation of objects          */
#endif

#if OS_TASK_REG_TBL_SIZE > 0u
    OSTaskRegNextAvailID      = 0u;                        /* Initialize the task register ID          */
 80073e4:	4b0d      	ldr	r3, [pc, #52]	@ (800741c <OS_InitMisc+0x78>)
 80073e6:	2200      	movs	r2, #0
 80073e8:	701a      	strb	r2, [r3, #0]
#endif
}
 80073ea:	bf00      	nop
 80073ec:	46bd      	mov	sp, r7
 80073ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f2:	4770      	bx	lr
 80073f4:	20006698 	.word	0x20006698
 80073f8:	20005aa0 	.word	0x20005aa0
 80073fc:	20005aa1 	.word	0x20005aa1
 8007400:	20005ab1 	.word	0x20005ab1
 8007404:	20005ab0 	.word	0x20005ab0
 8007408:	20005744 	.word	0x20005744
 800740c:	20005ab4 	.word	0x20005ab4
 8007410:	20005898 	.word	0x20005898
 8007414:	20005894 	.word	0x20005894
 8007418:	2000589c 	.word	0x2000589c
 800741c:	20006694 	.word	0x20006694

08007420 <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
 8007420:	b480      	push	{r7}
 8007422:	b083      	sub	sp, #12
 8007424:	af00      	add	r7, sp, #0
    INT8U  i;


    OSRdyGrp      = 0u;                                    /* Clear the ready list                     */
 8007426:	4b11      	ldr	r3, [pc, #68]	@ (800746c <OS_InitRdyList+0x4c>)
 8007428:	2200      	movs	r2, #0
 800742a:	701a      	strb	r2, [r3, #0]
    for (i = 0u; i < OS_RDY_TBL_SIZE; i++) {
 800742c:	2300      	movs	r3, #0
 800742e:	71fb      	strb	r3, [r7, #7]
 8007430:	e006      	b.n	8007440 <OS_InitRdyList+0x20>
        OSRdyTbl[i] = 0u;
 8007432:	79fb      	ldrb	r3, [r7, #7]
 8007434:	4a0e      	ldr	r2, [pc, #56]	@ (8007470 <OS_InitRdyList+0x50>)
 8007436:	2100      	movs	r1, #0
 8007438:	54d1      	strb	r1, [r2, r3]
    for (i = 0u; i < OS_RDY_TBL_SIZE; i++) {
 800743a:	79fb      	ldrb	r3, [r7, #7]
 800743c:	3301      	adds	r3, #1
 800743e:	71fb      	strb	r3, [r7, #7]
 8007440:	79fb      	ldrb	r3, [r7, #7]
 8007442:	2b07      	cmp	r3, #7
 8007444:	d9f5      	bls.n	8007432 <OS_InitRdyList+0x12>
    }

    OSPrioCur     = 0u;
 8007446:	4b0b      	ldr	r3, [pc, #44]	@ (8007474 <OS_InitRdyList+0x54>)
 8007448:	2200      	movs	r2, #0
 800744a:	701a      	strb	r2, [r3, #0]
    OSPrioHighRdy = 0u;
 800744c:	4b0a      	ldr	r3, [pc, #40]	@ (8007478 <OS_InitRdyList+0x58>)
 800744e:	2200      	movs	r2, #0
 8007450:	701a      	strb	r2, [r3, #0]

    OSTCBHighRdy  = (OS_TCB *)0;
 8007452:	4b0a      	ldr	r3, [pc, #40]	@ (800747c <OS_InitRdyList+0x5c>)
 8007454:	2200      	movs	r2, #0
 8007456:	601a      	str	r2, [r3, #0]
    OSTCBCur      = (OS_TCB *)0;
 8007458:	4b09      	ldr	r3, [pc, #36]	@ (8007480 <OS_InitRdyList+0x60>)
 800745a:	2200      	movs	r2, #0
 800745c:	601a      	str	r2, [r3, #0]
}
 800745e:	bf00      	nop
 8007460:	370c      	adds	r7, #12
 8007462:	46bd      	mov	sp, r7
 8007464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007468:	4770      	bx	lr
 800746a:	bf00      	nop
 800746c:	20005aa4 	.word	0x20005aa4
 8007470:	20005aa8 	.word	0x20005aa8
 8007474:	20005aa2 	.word	0x20005aa2
 8007478:	20005aa3 	.word	0x20005aa3
 800747c:	20005cc0 	.word	0x20005cc0
 8007480:	20005cb8 	.word	0x20005cb8

08007484 <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b088      	sub	sp, #32
 8007488:	af06      	add	r7, sp, #24
#endif


#if OS_TASK_CREATE_EXT_EN > 0u
    #if OS_STK_GROWTH == 1u
    (void)OSTaskCreateExt(OS_TaskIdle,
 800748a:	2303      	movs	r3, #3
 800748c:	9304      	str	r3, [sp, #16]
 800748e:	2300      	movs	r3, #0
 8007490:	9303      	str	r3, [sp, #12]
 8007492:	2380      	movs	r3, #128	@ 0x80
 8007494:	9302      	str	r3, [sp, #8]
 8007496:	4b0a      	ldr	r3, [pc, #40]	@ (80074c0 <OS_InitTaskIdle+0x3c>)
 8007498:	9301      	str	r3, [sp, #4]
 800749a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800749e:	9300      	str	r3, [sp, #0]
 80074a0:	233f      	movs	r3, #63	@ 0x3f
 80074a2:	4a08      	ldr	r2, [pc, #32]	@ (80074c4 <OS_InitTaskIdle+0x40>)
 80074a4:	2100      	movs	r1, #0
 80074a6:	4808      	ldr	r0, [pc, #32]	@ (80074c8 <OS_InitTaskIdle+0x44>)
 80074a8:	f001 f9d4 	bl	8008854 <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_EN > 0u
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)(void *)"uC/OS-II Idle", &err);
 80074ac:	1dfb      	adds	r3, r7, #7
 80074ae:	461a      	mov	r2, r3
 80074b0:	4906      	ldr	r1, [pc, #24]	@ (80074cc <OS_InitTaskIdle+0x48>)
 80074b2:	203f      	movs	r0, #63	@ 0x3f
 80074b4:	f001 fb32 	bl	8008b1c <OSTaskNameSet>
#endif
}
 80074b8:	bf00      	nop
 80074ba:	3708      	adds	r7, #8
 80074bc:	46bd      	mov	sp, r7
 80074be:	bd80      	pop	{r7, pc}
 80074c0:	20005ab8 	.word	0x20005ab8
 80074c4:	20005cb4 	.word	0x20005cb4
 80074c8:	080076b9 	.word	0x080076b9
 80074cc:	0800c54c 	.word	0x0800c54c

080074d0 <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0u
static  void  OS_InitTaskStat (void)
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b088      	sub	sp, #32
 80074d4:	af06      	add	r7, sp, #24
#endif


#if OS_TASK_CREATE_EXT_EN > 0u
    #if OS_STK_GROWTH == 1u
    (void)OSTaskCreateExt(OS_TaskStat,
 80074d6:	2303      	movs	r3, #3
 80074d8:	9304      	str	r3, [sp, #16]
 80074da:	2300      	movs	r3, #0
 80074dc:	9303      	str	r3, [sp, #12]
 80074de:	2380      	movs	r3, #128	@ 0x80
 80074e0:	9302      	str	r3, [sp, #8]
 80074e2:	4b0a      	ldr	r3, [pc, #40]	@ (800750c <OS_InitTaskStat+0x3c>)
 80074e4:	9301      	str	r3, [sp, #4]
 80074e6:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 80074ea:	9300      	str	r3, [sp, #0]
 80074ec:	233e      	movs	r3, #62	@ 0x3e
 80074ee:	4a08      	ldr	r2, [pc, #32]	@ (8007510 <OS_InitTaskStat+0x40>)
 80074f0:	2100      	movs	r1, #0
 80074f2:	4808      	ldr	r0, [pc, #32]	@ (8007514 <OS_InitTaskStat+0x44>)
 80074f4:	f001 f9ae 	bl	8008854 <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_EN > 0u
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)(void *)"uC/OS-II Stat", &err);
 80074f8:	1dfb      	adds	r3, r7, #7
 80074fa:	461a      	mov	r2, r3
 80074fc:	4906      	ldr	r1, [pc, #24]	@ (8007518 <OS_InitTaskStat+0x48>)
 80074fe:	203e      	movs	r0, #62	@ 0x3e
 8007500:	f001 fb0c 	bl	8008b1c <OSTaskNameSet>
#endif
}
 8007504:	bf00      	nop
 8007506:	3708      	adds	r7, #8
 8007508:	46bd      	mov	sp, r7
 800750a:	bd80      	pop	{r7, pc}
 800750c:	200058a0 	.word	0x200058a0
 8007510:	20005a9c 	.word	0x20005a9c
 8007514:	080076e9 	.word	0x080076e9
 8007518:	0800c55c 	.word	0x0800c55c

0800751c <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
 800751c:	b580      	push	{r7, lr}
 800751e:	b084      	sub	sp, #16
 8007520:	af00      	add	r7, sp, #0
    INT8U    ix_next;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
 8007522:	f44f 61fd 	mov.w	r1, #2024	@ 0x7e8
 8007526:	481f      	ldr	r0, [pc, #124]	@ (80075a4 <OS_InitTCBList+0x88>)
 8007528:	f000 f846 	bl	80075b8 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
 800752c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8007530:	481d      	ldr	r0, [pc, #116]	@ (80075a8 <OS_InitTCBList+0x8c>)
 8007532:	f000 f841 	bl	80075b8 <OS_MemClr>
    for (ix = 0u; ix < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1u); ix++) {    /* Init. list of free TCBs     */
 8007536:	2300      	movs	r3, #0
 8007538:	73fb      	strb	r3, [r7, #15]
 800753a:	e019      	b.n	8007570 <OS_InitTCBList+0x54>
        ix_next =  ix + 1u;
 800753c:	7bfb      	ldrb	r3, [r7, #15]
 800753e:	3301      	adds	r3, #1
 8007540:	71fb      	strb	r3, [r7, #7]
        ptcb1   = &OSTCBTbl[ix];
 8007542:	7bfb      	ldrb	r3, [r7, #15]
 8007544:	225c      	movs	r2, #92	@ 0x5c
 8007546:	fb02 f303 	mul.w	r3, r2, r3
 800754a:	4a16      	ldr	r2, [pc, #88]	@ (80075a4 <OS_InitTCBList+0x88>)
 800754c:	4413      	add	r3, r2
 800754e:	60bb      	str	r3, [r7, #8]
        ptcb2   = &OSTCBTbl[ix_next];
 8007550:	79fb      	ldrb	r3, [r7, #7]
 8007552:	225c      	movs	r2, #92	@ 0x5c
 8007554:	fb02 f303 	mul.w	r3, r2, r3
 8007558:	4a12      	ldr	r2, [pc, #72]	@ (80075a4 <OS_InitTCBList+0x88>)
 800755a:	4413      	add	r3, r2
 800755c:	603b      	str	r3, [r7, #0]
        ptcb1->OSTCBNext = ptcb2;
 800755e:	68bb      	ldr	r3, [r7, #8]
 8007560:	683a      	ldr	r2, [r7, #0]
 8007562:	615a      	str	r2, [r3, #20]
#if OS_TASK_NAME_EN > 0u
        ptcb1->OSTCBTaskName = (INT8U *)(void *)"?";             /* Unknown name                       */
 8007564:	68bb      	ldr	r3, [r7, #8]
 8007566:	4a11      	ldr	r2, [pc, #68]	@ (80075ac <OS_InitTCBList+0x90>)
 8007568:	655a      	str	r2, [r3, #84]	@ 0x54
    for (ix = 0u; ix < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1u); ix++) {    /* Init. list of free TCBs     */
 800756a:	7bfb      	ldrb	r3, [r7, #15]
 800756c:	3301      	adds	r3, #1
 800756e:	73fb      	strb	r3, [r7, #15]
 8007570:	7bfb      	ldrb	r3, [r7, #15]
 8007572:	2b14      	cmp	r3, #20
 8007574:	d9e2      	bls.n	800753c <OS_InitTCBList+0x20>
#endif
    }
    ptcb1                   = &OSTCBTbl[ix];
 8007576:	7bfb      	ldrb	r3, [r7, #15]
 8007578:	225c      	movs	r2, #92	@ 0x5c
 800757a:	fb02 f303 	mul.w	r3, r2, r3
 800757e:	4a09      	ldr	r2, [pc, #36]	@ (80075a4 <OS_InitTCBList+0x88>)
 8007580:	4413      	add	r3, r2
 8007582:	60bb      	str	r3, [r7, #8]
    ptcb1->OSTCBNext        = (OS_TCB *)0;                       /* Last OS_TCB                        */
 8007584:	68bb      	ldr	r3, [r7, #8]
 8007586:	2200      	movs	r2, #0
 8007588:	615a      	str	r2, [r3, #20]
#if OS_TASK_NAME_EN > 0u
    ptcb1->OSTCBTaskName    = (INT8U *)(void *)"?";              /* Unknown name                       */
 800758a:	68bb      	ldr	r3, [r7, #8]
 800758c:	4a07      	ldr	r2, [pc, #28]	@ (80075ac <OS_InitTCBList+0x90>)
 800758e:	655a      	str	r2, [r3, #84]	@ 0x54
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
 8007590:	4b07      	ldr	r3, [pc, #28]	@ (80075b0 <OS_InitTCBList+0x94>)
 8007592:	2200      	movs	r2, #0
 8007594:	601a      	str	r2, [r3, #0]
    OSTCBFreeList           = &OSTCBTbl[0];
 8007596:	4b07      	ldr	r3, [pc, #28]	@ (80075b4 <OS_InitTCBList+0x98>)
 8007598:	4a02      	ldr	r2, [pc, #8]	@ (80075a4 <OS_InitTCBList+0x88>)
 800759a:	601a      	str	r2, [r3, #0]
}
 800759c:	bf00      	nop
 800759e:	3710      	adds	r7, #16
 80075a0:	46bd      	mov	sp, r7
 80075a2:	bd80      	pop	{r7, pc}
 80075a4:	20005dc8 	.word	0x20005dc8
 80075a8:	20005cc8 	.word	0x20005cc8
 80075ac:	0800c548 	.word	0x0800c548
 80075b0:	20005cc4 	.word	0x20005cc4
 80075b4:	20005cbc 	.word	0x20005cbc

080075b8 <OS_MemClr>:
*********************************************************************************************************
*/

void  OS_MemClr (INT8U  *pdest,
                 INT16U  size)
{
 80075b8:	b480      	push	{r7}
 80075ba:	b083      	sub	sp, #12
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
 80075c0:	460b      	mov	r3, r1
 80075c2:	807b      	strh	r3, [r7, #2]
    while (size > 0u) {
 80075c4:	e007      	b.n	80075d6 <OS_MemClr+0x1e>
        *pdest++ = (INT8U)0;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	1c5a      	adds	r2, r3, #1
 80075ca:	607a      	str	r2, [r7, #4]
 80075cc:	2200      	movs	r2, #0
 80075ce:	701a      	strb	r2, [r3, #0]
        size--;
 80075d0:	887b      	ldrh	r3, [r7, #2]
 80075d2:	3b01      	subs	r3, #1
 80075d4:	807b      	strh	r3, [r7, #2]
    while (size > 0u) {
 80075d6:	887b      	ldrh	r3, [r7, #2]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d1f4      	bne.n	80075c6 <OS_MemClr+0xe>
    }
}
 80075dc:	bf00      	nop
 80075de:	bf00      	nop
 80075e0:	370c      	adds	r7, #12
 80075e2:	46bd      	mov	sp, r7
 80075e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e8:	4770      	bx	lr
	...

080075ec <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b082      	sub	sp, #8
 80075f0:	af00      	add	r7, sp, #0
#if OS_CRITICAL_METHOD == 3u                           /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0u;
 80075f2:	2300      	movs	r3, #0
 80075f4:	607b      	str	r3, [r7, #4]
#endif



    OS_ENTER_CRITICAL();
 80075f6:	2040      	movs	r0, #64	@ 0x40
 80075f8:	f7f8 fdf9 	bl	80001ee <OS_CPU_SR_Save>
 80075fc:	6078      	str	r0, [r7, #4]
    if (OSIntNesting == 0u) {                          /* Schedule only if all ISRs done and ...       */
 80075fe:	4b15      	ldr	r3, [pc, #84]	@ (8007654 <OS_Sched+0x68>)
 8007600:	781b      	ldrb	r3, [r3, #0]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d11f      	bne.n	8007646 <OS_Sched+0x5a>
        if (OSLockNesting == 0u) {                     /* ... scheduler is not locked                  */
 8007606:	4b14      	ldr	r3, [pc, #80]	@ (8007658 <OS_Sched+0x6c>)
 8007608:	781b      	ldrb	r3, [r3, #0]
 800760a:	2b00      	cmp	r3, #0
 800760c:	d11b      	bne.n	8007646 <OS_Sched+0x5a>
            OS_SchedNew();
 800760e:	f000 f82f 	bl	8007670 <OS_SchedNew>
            OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
 8007612:	4b12      	ldr	r3, [pc, #72]	@ (800765c <OS_Sched+0x70>)
 8007614:	781b      	ldrb	r3, [r3, #0]
 8007616:	461a      	mov	r2, r3
 8007618:	4b11      	ldr	r3, [pc, #68]	@ (8007660 <OS_Sched+0x74>)
 800761a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800761e:	4a11      	ldr	r2, [pc, #68]	@ (8007664 <OS_Sched+0x78>)
 8007620:	6013      	str	r3, [r2, #0]
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
 8007622:	4b0e      	ldr	r3, [pc, #56]	@ (800765c <OS_Sched+0x70>)
 8007624:	781a      	ldrb	r2, [r3, #0]
 8007626:	4b10      	ldr	r3, [pc, #64]	@ (8007668 <OS_Sched+0x7c>)
 8007628:	781b      	ldrb	r3, [r3, #0]
 800762a:	429a      	cmp	r2, r3
 800762c:	d00b      	beq.n	8007646 <OS_Sched+0x5a>
#if OS_TASK_PROFILE_EN > 0u
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
 800762e:	4b0d      	ldr	r3, [pc, #52]	@ (8007664 <OS_Sched+0x78>)
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007634:	3201      	adds	r2, #1
 8007636:	641a      	str	r2, [r3, #64]	@ 0x40
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
 8007638:	4b0c      	ldr	r3, [pc, #48]	@ (800766c <OS_Sched+0x80>)
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	3301      	adds	r3, #1
 800763e:	4a0b      	ldr	r2, [pc, #44]	@ (800766c <OS_Sched+0x80>)
 8007640:	6013      	str	r3, [r2, #0]
#if defined(OS_TLS_TBL_SIZE) && (OS_TLS_TBL_SIZE > 0u)
                OS_TLS_TaskSw();
#endif
#endif

                OS_TASK_SW();                          /* Perform a context switch                     */
 8007642:	f7f8 fe2b 	bl	800029c <OSCtxSw>
            }
        }
    }
    OS_EXIT_CRITICAL();
 8007646:	6878      	ldr	r0, [r7, #4]
 8007648:	f7f8 fddf 	bl	800020a <OS_CPU_SR_Restore>
}
 800764c:	bf00      	nop
 800764e:	3708      	adds	r7, #8
 8007650:	46bd      	mov	sp, r7
 8007652:	bd80      	pop	{r7, pc}
 8007654:	20005aa0 	.word	0x20005aa0
 8007658:	20005aa1 	.word	0x20005aa1
 800765c:	20005aa3 	.word	0x20005aa3
 8007660:	20005cc8 	.word	0x20005cc8
 8007664:	20005cc0 	.word	0x20005cc0
 8007668:	20005aa2 	.word	0x20005aa2
 800766c:	20005744 	.word	0x20005744

08007670 <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
 8007670:	b480      	push	{r7}
 8007672:	b083      	sub	sp, #12
 8007674:	af00      	add	r7, sp, #0
#if OS_LOWEST_PRIO <= 63u                        /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
 8007676:	4b0c      	ldr	r3, [pc, #48]	@ (80076a8 <OS_SchedNew+0x38>)
 8007678:	781b      	ldrb	r3, [r3, #0]
 800767a:	461a      	mov	r2, r3
 800767c:	4b0b      	ldr	r3, [pc, #44]	@ (80076ac <OS_SchedNew+0x3c>)
 800767e:	5c9b      	ldrb	r3, [r3, r2]
 8007680:	71fb      	strb	r3, [r7, #7]
    OSPrioHighRdy = (INT8U)((y << 3u) + OSUnMapTbl[OSRdyTbl[y]]);
 8007682:	79fb      	ldrb	r3, [r7, #7]
 8007684:	00db      	lsls	r3, r3, #3
 8007686:	b2da      	uxtb	r2, r3
 8007688:	79fb      	ldrb	r3, [r7, #7]
 800768a:	4909      	ldr	r1, [pc, #36]	@ (80076b0 <OS_SchedNew+0x40>)
 800768c:	5ccb      	ldrb	r3, [r1, r3]
 800768e:	4619      	mov	r1, r3
 8007690:	4b06      	ldr	r3, [pc, #24]	@ (80076ac <OS_SchedNew+0x3c>)
 8007692:	5c5b      	ldrb	r3, [r3, r1]
 8007694:	4413      	add	r3, r2
 8007696:	b2da      	uxtb	r2, r3
 8007698:	4b06      	ldr	r3, [pc, #24]	@ (80076b4 <OS_SchedNew+0x44>)
 800769a:	701a      	strb	r2, [r3, #0]
        OSPrioHighRdy = (INT8U)((y << 4u) + OSUnMapTbl[(*ptbl & 0xFFu)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4u) + OSUnMapTbl[(OS_PRIO)(*ptbl >> 8u) & 0xFFu] + 8u);
    }
#endif
}
 800769c:	bf00      	nop
 800769e:	370c      	adds	r7, #12
 80076a0:	46bd      	mov	sp, r7
 80076a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a6:	4770      	bx	lr
 80076a8:	20005aa4 	.word	0x20005aa4
 80076ac:	0800c678 	.word	0x0800c678
 80076b0:	20005aa8 	.word	0x20005aa8
 80076b4:	20005aa3 	.word	0x20005aa3

080076b8 <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b084      	sub	sp, #16
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0u;
 80076c0:	2300      	movs	r3, #0
 80076c2:	60fb      	str	r3, [r7, #12]
#endif

    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
 80076c4:	2040      	movs	r0, #64	@ 0x40
 80076c6:	f7f8 fd92 	bl	80001ee <OS_CPU_SR_Save>
 80076ca:	60f8      	str	r0, [r7, #12]
        OSIdleCtr++;
 80076cc:	4b05      	ldr	r3, [pc, #20]	@ (80076e4 <OS_TaskIdle+0x2c>)
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	3301      	adds	r3, #1
 80076d2:	4a04      	ldr	r2, [pc, #16]	@ (80076e4 <OS_TaskIdle+0x2c>)
 80076d4:	6013      	str	r3, [r2, #0]
        OS_EXIT_CRITICAL();
 80076d6:	68f8      	ldr	r0, [r7, #12]
 80076d8:	f7f8 fd97 	bl	800020a <OS_CPU_SR_Restore>
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
 80076dc:	f7fe ffdb 	bl	8006696 <OSTaskIdleHook>
        OS_ENTER_CRITICAL();
 80076e0:	bf00      	nop
 80076e2:	e7ef      	b.n	80076c4 <OS_TaskIdle+0xc>
 80076e4:	20005ab4 	.word	0x20005ab4

080076e8 <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0u
void  OS_TaskStat (void *p_arg)
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b084      	sub	sp, #16
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
    INT8S  usage;
#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0u;
 80076f0:	2300      	movs	r3, #0
 80076f2:	60fb      	str	r3, [r7, #12]
#endif



    p_arg = p_arg;                               /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
 80076f4:	e002      	b.n	80076fc <OS_TaskStat+0x14>
        OSTimeDly(2u * OS_TICKS_PER_SEC / 10u);  /* Wait until statistic task is ready                 */
 80076f6:	2014      	movs	r0, #20
 80076f8:	f001 fb8e 	bl	8008e18 <OSTimeDly>
    while (OSStatRdy == OS_FALSE) {
 80076fc:	4b30      	ldr	r3, [pc, #192]	@ (80077c0 <OS_TaskStat+0xd8>)
 80076fe:	781b      	ldrb	r3, [r3, #0]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d0f8      	beq.n	80076f6 <OS_TaskStat+0xe>
    }
    OSIdleCtrMax /= 100uL;
 8007704:	4b2f      	ldr	r3, [pc, #188]	@ (80077c4 <OS_TaskStat+0xdc>)
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	4a2f      	ldr	r2, [pc, #188]	@ (80077c8 <OS_TaskStat+0xe0>)
 800770a:	fba2 2303 	umull	r2, r3, r2, r3
 800770e:	095b      	lsrs	r3, r3, #5
 8007710:	4a2c      	ldr	r2, [pc, #176]	@ (80077c4 <OS_TaskStat+0xdc>)
 8007712:	6013      	str	r3, [r2, #0]
    if (OSIdleCtrMax == 0uL) {
 8007714:	4b2b      	ldr	r3, [pc, #172]	@ (80077c4 <OS_TaskStat+0xdc>)
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d105      	bne.n	8007728 <OS_TaskStat+0x40>
        OSCPUUsage = 0u;
 800771c:	4b2b      	ldr	r3, [pc, #172]	@ (80077cc <OS_TaskStat+0xe4>)
 800771e:	2200      	movs	r2, #0
 8007720:	701a      	strb	r2, [r3, #0]
#if OS_TASK_SUSPEND_EN > 0u
        (void)OSTaskSuspend(OS_PRIO_SELF);
 8007722:	20ff      	movs	r0, #255	@ 0xff
 8007724:	f001 fac2 	bl	8008cac <OSTaskSuspend>
        for (;;) {
            OSTimeDly(OS_TICKS_PER_SEC);
        }
#endif
    }
    OS_ENTER_CRITICAL();
 8007728:	2040      	movs	r0, #64	@ 0x40
 800772a:	f7f8 fd60 	bl	80001ee <OS_CPU_SR_Save>
 800772e:	60f8      	str	r0, [r7, #12]
    OSIdleCtr = OSIdleCtrMax * 100uL;            /* Set initial CPU usage as 0%                        */
 8007730:	4b24      	ldr	r3, [pc, #144]	@ (80077c4 <OS_TaskStat+0xdc>)
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	2264      	movs	r2, #100	@ 0x64
 8007736:	fb02 f303 	mul.w	r3, r2, r3
 800773a:	4a25      	ldr	r2, [pc, #148]	@ (80077d0 <OS_TaskStat+0xe8>)
 800773c:	6013      	str	r3, [r2, #0]
    OS_EXIT_CRITICAL();
 800773e:	68f8      	ldr	r0, [r7, #12]
 8007740:	f7f8 fd63 	bl	800020a <OS_CPU_SR_Restore>
    for (;;) {
        OSTimeDly(1);                            /* Synchronize with clock tick                        */
 8007744:	2001      	movs	r0, #1
 8007746:	f001 fb67 	bl	8008e18 <OSTimeDly>

        OS_ENTER_CRITICAL();
 800774a:	2040      	movs	r0, #64	@ 0x40
 800774c:	f7f8 fd4f 	bl	80001ee <OS_CPU_SR_Save>
 8007750:	60f8      	str	r0, [r7, #12]
        OSIdleCtr = 0uL;                        /* Reset the idle counter for the next second         */
 8007752:	4b1f      	ldr	r3, [pc, #124]	@ (80077d0 <OS_TaskStat+0xe8>)
 8007754:	2200      	movs	r2, #0
 8007756:	601a      	str	r2, [r3, #0]
        OS_EXIT_CRITICAL();
 8007758:	68f8      	ldr	r0, [r7, #12]
 800775a:	f7f8 fd56 	bl	800020a <OS_CPU_SR_Restore>

        OSTimeDly(OS_TICKS_PER_SEC / 10u);       /* Accumulate OSIdleCtr for the next 1/10 second      */
 800775e:	200a      	movs	r0, #10
 8007760:	f001 fb5a 	bl	8008e18 <OSTimeDly>

        OS_ENTER_CRITICAL();
 8007764:	2040      	movs	r0, #64	@ 0x40
 8007766:	f7f8 fd42 	bl	80001ee <OS_CPU_SR_Save>
 800776a:	60f8      	str	r0, [r7, #12]
        OSIdleCtrRun = OSIdleCtr;                /* Store number of cycles which elapsed while idle    */
 800776c:	4b18      	ldr	r3, [pc, #96]	@ (80077d0 <OS_TaskStat+0xe8>)
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	4a18      	ldr	r2, [pc, #96]	@ (80077d4 <OS_TaskStat+0xec>)
 8007772:	6013      	str	r3, [r2, #0]
        OS_EXIT_CRITICAL();
 8007774:	68f8      	ldr	r0, [r7, #12]
 8007776:	f7f8 fd48 	bl	800020a <OS_CPU_SR_Restore>

        usage            = 100 - (INT8S)(OSIdleCtrRun / OSIdleCtrMax);
 800777a:	4b16      	ldr	r3, [pc, #88]	@ (80077d4 <OS_TaskStat+0xec>)
 800777c:	681a      	ldr	r2, [r3, #0]
 800777e:	4b11      	ldr	r3, [pc, #68]	@ (80077c4 <OS_TaskStat+0xdc>)
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	fbb2 f3f3 	udiv	r3, r2, r3
 8007786:	b2db      	uxtb	r3, r3
 8007788:	f1c3 0364 	rsb	r3, r3, #100	@ 0x64
 800778c:	b2db      	uxtb	r3, r3
 800778e:	72fb      	strb	r3, [r7, #11]
        if (usage >= 0) {                        /* Make sure we don't have a negative percentage      */
 8007790:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8007794:	2b00      	cmp	r3, #0
 8007796:	db03      	blt.n	80077a0 <OS_TaskStat+0xb8>
            OSCPUUsage   = (INT8U)usage;
 8007798:	7afa      	ldrb	r2, [r7, #11]
 800779a:	4b0c      	ldr	r3, [pc, #48]	@ (80077cc <OS_TaskStat+0xe4>)
 800779c:	701a      	strb	r2, [r3, #0]
 800779e:	e00a      	b.n	80077b6 <OS_TaskStat+0xce>
        } else {
            OSCPUUsage   = 0u;
 80077a0:	4b0a      	ldr	r3, [pc, #40]	@ (80077cc <OS_TaskStat+0xe4>)
 80077a2:	2200      	movs	r2, #0
 80077a4:	701a      	strb	r2, [r3, #0]
            OSIdleCtrMax = OSIdleCtrRun / 100uL; /* Update max counter value to current one            */
 80077a6:	4b0b      	ldr	r3, [pc, #44]	@ (80077d4 <OS_TaskStat+0xec>)
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	4a07      	ldr	r2, [pc, #28]	@ (80077c8 <OS_TaskStat+0xe0>)
 80077ac:	fba2 2303 	umull	r2, r3, r2, r3
 80077b0:	095b      	lsrs	r3, r3, #5
 80077b2:	4a04      	ldr	r2, [pc, #16]	@ (80077c4 <OS_TaskStat+0xdc>)
 80077b4:	6013      	str	r3, [r2, #0]
        }

        OSTaskStatHook();                        /* Invoke user definable hook                         */
 80077b6:	f7fe ff7f 	bl	80066b8 <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0u) && (OS_TASK_CREATE_EXT_EN > 0u)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
 80077ba:	f000 f80d 	bl	80077d8 <OS_TaskStatStkChk>
        OSTimeDly(1);                            /* Synchronize with clock tick                        */
 80077be:	e7c1      	b.n	8007744 <OS_TaskStat+0x5c>
 80077c0:	2000589c 	.word	0x2000589c
 80077c4:	20005894 	.word	0x20005894
 80077c8:	51eb851f 	.word	0x51eb851f
 80077cc:	20005890 	.word	0x20005890
 80077d0:	20005ab4 	.word	0x20005ab4
 80077d4:	20005898 	.word	0x20005898

080077d8 <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0u) && (OS_TASK_CREATE_EXT_EN > 0u)
void  OS_TaskStatStkChk (void)
{
 80077d8:	b580      	push	{r7, lr}
 80077da:	b084      	sub	sp, #16
 80077dc:	af00      	add	r7, sp, #0
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0u; prio <= OS_TASK_IDLE_PRIO; prio++) {
 80077de:	2300      	movs	r3, #0
 80077e0:	73fb      	strb	r3, [r7, #15]
 80077e2:	e023      	b.n	800782c <OS_TaskStatStkChk+0x54>
        err = OSTaskStkChk(prio, &stk_data);
 80077e4:	463a      	mov	r2, r7
 80077e6:	7bfb      	ldrb	r3, [r7, #15]
 80077e8:	4611      	mov	r1, r2
 80077ea:	4618      	mov	r0, r3
 80077ec:	f001 f9f0 	bl	8008bd0 <OSTaskStkChk>
 80077f0:	4603      	mov	r3, r0
 80077f2:	73bb      	strb	r3, [r7, #14]
        if (err == OS_ERR_NONE) {
 80077f4:	7bbb      	ldrb	r3, [r7, #14]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d115      	bne.n	8007826 <OS_TaskStatStkChk+0x4e>
            ptcb = OSTCBPrioTbl[prio];
 80077fa:	7bfb      	ldrb	r3, [r7, #15]
 80077fc:	4a0f      	ldr	r2, [pc, #60]	@ (800783c <OS_TaskStatStkChk+0x64>)
 80077fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007802:	60bb      	str	r3, [r7, #8]
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
 8007804:	68bb      	ldr	r3, [r7, #8]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d00d      	beq.n	8007826 <OS_TaskStatStkChk+0x4e>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
 800780a:	68bb      	ldr	r3, [r7, #8]
 800780c:	2b01      	cmp	r3, #1
 800780e:	d00a      	beq.n	8007826 <OS_TaskStatStkChk+0x4e>
#if OS_TASK_PROFILE_EN > 0u
                    #if OS_STK_GROWTH == 1u
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
 8007810:	68bb      	ldr	r3, [r7, #8]
 8007812:	689a      	ldr	r2, [r3, #8]
 8007814:	68bb      	ldr	r3, [r7, #8]
 8007816:	68db      	ldr	r3, [r3, #12]
 8007818:	009b      	lsls	r3, r3, #2
 800781a:	441a      	add	r2, r3
 800781c:	68bb      	ldr	r3, [r7, #8]
 800781e:	64da      	str	r2, [r3, #76]	@ 0x4c
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store number of entries used   */
 8007820:	687a      	ldr	r2, [r7, #4]
 8007822:	68bb      	ldr	r3, [r7, #8]
 8007824:	651a      	str	r2, [r3, #80]	@ 0x50
    for (prio = 0u; prio <= OS_TASK_IDLE_PRIO; prio++) {
 8007826:	7bfb      	ldrb	r3, [r7, #15]
 8007828:	3301      	adds	r3, #1
 800782a:	73fb      	strb	r3, [r7, #15]
 800782c:	7bfb      	ldrb	r3, [r7, #15]
 800782e:	2b3f      	cmp	r3, #63	@ 0x3f
 8007830:	d9d8      	bls.n	80077e4 <OS_TaskStatStkChk+0xc>
#endif
                }
            }
        }
    }
}
 8007832:	bf00      	nop
 8007834:	bf00      	nop
 8007836:	3710      	adds	r7, #16
 8007838:	46bd      	mov	sp, r7
 800783a:	bd80      	pop	{r7, pc}
 800783c:	20005cc8 	.word	0x20005cc8

08007840 <OS_TCBInit>:
                   OS_STK  *pbos,
                   INT16U   id,
                   INT32U   stk_size,
                   void    *pext,
                   INT16U   opt)
{
 8007840:	b580      	push	{r7, lr}
 8007842:	b088      	sub	sp, #32
 8007844:	af00      	add	r7, sp, #0
 8007846:	60b9      	str	r1, [r7, #8]
 8007848:	607a      	str	r2, [r7, #4]
 800784a:	461a      	mov	r2, r3
 800784c:	4603      	mov	r3, r0
 800784e:	73fb      	strb	r3, [r7, #15]
 8007850:	4613      	mov	r3, r2
 8007852:	81bb      	strh	r3, [r7, #12]
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0u;
 8007854:	2300      	movs	r3, #0
 8007856:	61bb      	str	r3, [r7, #24]
    INT8U      j;
#endif
#endif


    OS_ENTER_CRITICAL();
 8007858:	2040      	movs	r0, #64	@ 0x40
 800785a:	f7f8 fcc8 	bl	80001ee <OS_CPU_SR_Save>
 800785e:	61b8      	str	r0, [r7, #24]
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
 8007860:	4b6b      	ldr	r3, [pc, #428]	@ (8007a10 <OS_TCBInit+0x1d0>)
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	617b      	str	r3, [r7, #20]
    if (ptcb != (OS_TCB *)0) {
 8007866:	697b      	ldr	r3, [r7, #20]
 8007868:	2b00      	cmp	r3, #0
 800786a:	f000 80c9 	beq.w	8007a00 <OS_TCBInit+0x1c0>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
 800786e:	697b      	ldr	r3, [r7, #20]
 8007870:	695b      	ldr	r3, [r3, #20]
 8007872:	4a67      	ldr	r2, [pc, #412]	@ (8007a10 <OS_TCBInit+0x1d0>)
 8007874:	6013      	str	r3, [r2, #0]
        OS_EXIT_CRITICAL();
 8007876:	69b8      	ldr	r0, [r7, #24]
 8007878:	f7f8 fcc7 	bl	800020a <OS_CPU_SR_Restore>
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
 800787c:	697b      	ldr	r3, [r7, #20]
 800787e:	68ba      	ldr	r2, [r7, #8]
 8007880:	601a      	str	r2, [r3, #0]
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
 8007882:	697b      	ldr	r3, [r7, #20]
 8007884:	7bfa      	ldrb	r2, [r7, #15]
 8007886:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
 800788a:	697b      	ldr	r3, [r7, #20]
 800788c:	2200      	movs	r2, #0
 800788e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
 8007892:	697b      	ldr	r3, [r7, #20]
 8007894:	2200      	movs	r2, #0
 8007896:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        ptcb->OSTCBDly           = 0u;                     /* Task is not delayed                      */
 800789a:	697b      	ldr	r3, [r7, #20]
 800789c:	2200      	movs	r2, #0
 800789e:	635a      	str	r2, [r3, #52]	@ 0x34

#if OS_TASK_CREATE_EXT_EN > 0u
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
 80078a0:	697b      	ldr	r3, [r7, #20]
 80078a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80078a4:	605a      	str	r2, [r3, #4]
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
 80078a6:	697b      	ldr	r3, [r7, #20]
 80078a8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80078aa:	60da      	str	r2, [r3, #12]
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
 80078ac:	697b      	ldr	r3, [r7, #20]
 80078ae:	687a      	ldr	r2, [r7, #4]
 80078b0:	609a      	str	r2, [r3, #8]
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
 80078b2:	697b      	ldr	r3, [r7, #20]
 80078b4:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 80078b6:	821a      	strh	r2, [r3, #16]
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
 80078b8:	697b      	ldr	r3, [r7, #20]
 80078ba:	89ba      	ldrh	r2, [r7, #12]
 80078bc:	825a      	strh	r2, [r3, #18]
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0u
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
 80078be:	697b      	ldr	r3, [r7, #20]
 80078c0:	2200      	movs	r2, #0
 80078c2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
#endif

#if OS_LOWEST_PRIO <= 63u                                         /* Pre-compute X, Y                  */
        ptcb->OSTCBY             = (INT8U)(prio >> 3u);
 80078c6:	7bfb      	ldrb	r3, [r7, #15]
 80078c8:	08db      	lsrs	r3, r3, #3
 80078ca:	b2da      	uxtb	r2, r3
 80078cc:	697b      	ldr	r3, [r7, #20]
 80078ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        ptcb->OSTCBX             = (INT8U)(prio & 0x07u);
 80078d2:	7bfb      	ldrb	r3, [r7, #15]
 80078d4:	f003 0307 	and.w	r3, r3, #7
 80078d8:	b2da      	uxtb	r2, r3
 80078da:	697b      	ldr	r3, [r7, #20]
 80078dc:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
#else                                                             /* Pre-compute X, Y                  */
        ptcb->OSTCBY             = (INT8U)((INT8U)(prio >> 4u) & 0xFFu);
        ptcb->OSTCBX             = (INT8U) (prio & 0x0Fu);
#endif
                                                                  /* Pre-compute BitX and BitY         */
        ptcb->OSTCBBitY          = (OS_PRIO)(1uL << ptcb->OSTCBY);
 80078e0:	697b      	ldr	r3, [r7, #20]
 80078e2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80078e6:	461a      	mov	r2, r3
 80078e8:	2301      	movs	r3, #1
 80078ea:	4093      	lsls	r3, r2
 80078ec:	b2da      	uxtb	r2, r3
 80078ee:	697b      	ldr	r3, [r7, #20]
 80078f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        ptcb->OSTCBBitX          = (OS_PRIO)(1uL << ptcb->OSTCBX);
 80078f4:	697b      	ldr	r3, [r7, #20]
 80078f6:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 80078fa:	461a      	mov	r2, r3
 80078fc:	2301      	movs	r3, #1
 80078fe:	4093      	lsls	r3, r2
 8007900:	b2da      	uxtb	r2, r3
 8007902:	697b      	ldr	r3, [r7, #20]
 8007904:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
 8007908:	697b      	ldr	r3, [r7, #20]
 800790a:	2200      	movs	r2, #0
 800790c:	61da      	str	r2, [r3, #28]
#if (OS_EVENT_MULTI_EN > 0u)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
 800790e:	697b      	ldr	r3, [r7, #20]
 8007910:	2200      	movs	r2, #0
 8007912:	621a      	str	r2, [r3, #32]
        ptcb->OSTCBEventMultiRdy = (OS_EVENT  *)0;         /* No events readied for Multipend          */
 8007914:	697b      	ldr	r3, [r7, #20]
 8007916:	2200      	movs	r2, #0
 8007918:	625a      	str	r2, [r3, #36]	@ 0x24
#endif
#endif

#if (OS_FLAG_EN > 0u) && (OS_MAX_FLAGS > 0u) && (OS_TASK_DEL_EN > 0u)
        ptcb->OSTCBFlagNode      = (OS_FLAG_NODE *)0;      /* Task is not pending on an event flag     */
 800791a:	697b      	ldr	r3, [r7, #20]
 800791c:	2200      	movs	r2, #0
 800791e:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif

#if (OS_MBOX_EN > 0u) || ((OS_Q_EN > 0u) && (OS_MAX_QS > 0u))
        ptcb->OSTCBMsg           = (void *)0;              /* No message received                      */
 8007920:	697b      	ldr	r3, [r7, #20]
 8007922:	2200      	movs	r2, #0
 8007924:	629a      	str	r2, [r3, #40]	@ 0x28
#endif

#if OS_TASK_PROFILE_EN > 0u
        ptcb->OSTCBCtxSwCtr      = 0uL;                    /* Initialize profiling variables           */
 8007926:	697b      	ldr	r3, [r7, #20]
 8007928:	2200      	movs	r2, #0
 800792a:	641a      	str	r2, [r3, #64]	@ 0x40
        ptcb->OSTCBCyclesStart   = 0uL;
 800792c:	697b      	ldr	r3, [r7, #20]
 800792e:	2200      	movs	r2, #0
 8007930:	649a      	str	r2, [r3, #72]	@ 0x48
        ptcb->OSTCBCyclesTot     = 0uL;
 8007932:	697b      	ldr	r3, [r7, #20]
 8007934:	2200      	movs	r2, #0
 8007936:	645a      	str	r2, [r3, #68]	@ 0x44
        ptcb->OSTCBStkBase       = (OS_STK *)0;
 8007938:	697b      	ldr	r3, [r7, #20]
 800793a:	2200      	movs	r2, #0
 800793c:	64da      	str	r2, [r3, #76]	@ 0x4c
        ptcb->OSTCBStkUsed       = 0uL;
 800793e:	697b      	ldr	r3, [r7, #20]
 8007940:	2200      	movs	r2, #0
 8007942:	651a      	str	r2, [r3, #80]	@ 0x50
#endif

#if OS_TASK_NAME_EN > 0u
        ptcb->OSTCBTaskName      = (INT8U *)(void *)"?";
 8007944:	697b      	ldr	r3, [r7, #20]
 8007946:	4a33      	ldr	r2, [pc, #204]	@ (8007a14 <OS_TCBInit+0x1d4>)
 8007948:	655a      	str	r2, [r3, #84]	@ 0x54
#endif

#if OS_TASK_REG_TBL_SIZE > 0u                              /* Initialize the task variables            */
        for (i = 0u; i < OS_TASK_REG_TBL_SIZE; i++) {
 800794a:	2300      	movs	r3, #0
 800794c:	77fb      	strb	r3, [r7, #31]
 800794e:	e008      	b.n	8007962 <OS_TCBInit+0x122>
            ptcb->OSTCBRegTbl[i] = 0u;
 8007950:	7ffa      	ldrb	r2, [r7, #31]
 8007952:	697b      	ldr	r3, [r7, #20]
 8007954:	3216      	adds	r2, #22
 8007956:	2100      	movs	r1, #0
 8007958:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        for (i = 0u; i < OS_TASK_REG_TBL_SIZE; i++) {
 800795c:	7ffb      	ldrb	r3, [r7, #31]
 800795e:	3301      	adds	r3, #1
 8007960:	77fb      	strb	r3, [r7, #31]
 8007962:	7ffb      	ldrb	r3, [r7, #31]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d0f3      	beq.n	8007950 <OS_TCBInit+0x110>
        }
#endif

        OSTCBInitHook(ptcb);
 8007968:	6978      	ldr	r0, [r7, #20]
 800796a:	f7ff f851 	bl	8006a10 <OSTCBInitHook>

        OS_ENTER_CRITICAL();
 800796e:	2040      	movs	r0, #64	@ 0x40
 8007970:	f7f8 fc3d 	bl	80001ee <OS_CPU_SR_Save>
 8007974:	61b8      	str	r0, [r7, #24]
        OSTCBPrioTbl[prio] = ptcb;
 8007976:	7bfb      	ldrb	r3, [r7, #15]
 8007978:	4927      	ldr	r1, [pc, #156]	@ (8007a18 <OS_TCBInit+0x1d8>)
 800797a:	697a      	ldr	r2, [r7, #20]
 800797c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        OS_EXIT_CRITICAL();
 8007980:	69b8      	ldr	r0, [r7, #24]
 8007982:	f7f8 fc42 	bl	800020a <OS_CPU_SR_Restore>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
 8007986:	6978      	ldr	r0, [r7, #20]
 8007988:	f7fe fe6f 	bl	800666a <OSTaskCreateHook>
        }
        OS_TLS_TaskCreate(ptcb);                           /* Call TLS hook                            */
#endif
#endif

        OS_ENTER_CRITICAL();
 800798c:	2040      	movs	r0, #64	@ 0x40
 800798e:	f7f8 fc2e 	bl	80001ee <OS_CPU_SR_Save>
 8007992:	61b8      	str	r0, [r7, #24]
        ptcb->OSTCBNext = OSTCBList;                       /* Link into TCB chain                      */
 8007994:	4b21      	ldr	r3, [pc, #132]	@ (8007a1c <OS_TCBInit+0x1dc>)
 8007996:	681a      	ldr	r2, [r3, #0]
 8007998:	697b      	ldr	r3, [r7, #20]
 800799a:	615a      	str	r2, [r3, #20]
        ptcb->OSTCBPrev = (OS_TCB *)0;
 800799c:	697b      	ldr	r3, [r7, #20]
 800799e:	2200      	movs	r2, #0
 80079a0:	619a      	str	r2, [r3, #24]
        if (OSTCBList != (OS_TCB *)0) {
 80079a2:	4b1e      	ldr	r3, [pc, #120]	@ (8007a1c <OS_TCBInit+0x1dc>)
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d003      	beq.n	80079b2 <OS_TCBInit+0x172>
            OSTCBList->OSTCBPrev = ptcb;
 80079aa:	4b1c      	ldr	r3, [pc, #112]	@ (8007a1c <OS_TCBInit+0x1dc>)
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	697a      	ldr	r2, [r7, #20]
 80079b0:	619a      	str	r2, [r3, #24]
        }
        OSTCBList               = ptcb;
 80079b2:	4a1a      	ldr	r2, [pc, #104]	@ (8007a1c <OS_TCBInit+0x1dc>)
 80079b4:	697b      	ldr	r3, [r7, #20]
 80079b6:	6013      	str	r3, [r2, #0]
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
 80079b8:	697b      	ldr	r3, [r7, #20]
 80079ba:	f893 203e 	ldrb.w	r2, [r3, #62]	@ 0x3e
 80079be:	4b18      	ldr	r3, [pc, #96]	@ (8007a20 <OS_TCBInit+0x1e0>)
 80079c0:	781b      	ldrb	r3, [r3, #0]
 80079c2:	4313      	orrs	r3, r2
 80079c4:	b2da      	uxtb	r2, r3
 80079c6:	4b16      	ldr	r3, [pc, #88]	@ (8007a20 <OS_TCBInit+0x1e0>)
 80079c8:	701a      	strb	r2, [r3, #0]
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 80079ca:	697b      	ldr	r3, [r7, #20]
 80079cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80079d0:	461a      	mov	r2, r3
 80079d2:	4b14      	ldr	r3, [pc, #80]	@ (8007a24 <OS_TCBInit+0x1e4>)
 80079d4:	5c9a      	ldrb	r2, [r3, r2]
 80079d6:	697b      	ldr	r3, [r7, #20]
 80079d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80079dc:	6979      	ldr	r1, [r7, #20]
 80079de:	f891 103c 	ldrb.w	r1, [r1, #60]	@ 0x3c
 80079e2:	4313      	orrs	r3, r2
 80079e4:	b2da      	uxtb	r2, r3
 80079e6:	4b0f      	ldr	r3, [pc, #60]	@ (8007a24 <OS_TCBInit+0x1e4>)
 80079e8:	545a      	strb	r2, [r3, r1]
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
 80079ea:	4b0f      	ldr	r3, [pc, #60]	@ (8007a28 <OS_TCBInit+0x1e8>)
 80079ec:	781b      	ldrb	r3, [r3, #0]
 80079ee:	3301      	adds	r3, #1
 80079f0:	b2da      	uxtb	r2, r3
 80079f2:	4b0d      	ldr	r3, [pc, #52]	@ (8007a28 <OS_TCBInit+0x1e8>)
 80079f4:	701a      	strb	r2, [r3, #0]
        OS_TRACE_TASK_READY(ptcb);
        OS_EXIT_CRITICAL();
 80079f6:	69b8      	ldr	r0, [r7, #24]
 80079f8:	f7f8 fc07 	bl	800020a <OS_CPU_SR_Restore>
        return (OS_ERR_NONE);
 80079fc:	2300      	movs	r3, #0
 80079fe:	e003      	b.n	8007a08 <OS_TCBInit+0x1c8>
    }
    OS_EXIT_CRITICAL();
 8007a00:	69b8      	ldr	r0, [r7, #24]
 8007a02:	f7f8 fc02 	bl	800020a <OS_CPU_SR_Restore>
    return (OS_ERR_TASK_NO_MORE_TCB);
 8007a06:	2342      	movs	r3, #66	@ 0x42
}
 8007a08:	4618      	mov	r0, r3
 8007a0a:	3720      	adds	r7, #32
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	bd80      	pop	{r7, pc}
 8007a10:	20005cbc 	.word	0x20005cbc
 8007a14:	0800c548 	.word	0x0800c548
 8007a18:	20005cc8 	.word	0x20005cc8
 8007a1c:	20005cc4 	.word	0x20005cc4
 8007a20:	20005aa4 	.word	0x20005aa4
 8007a24:	20005aa8 	.word	0x20005aa8
 8007a28:	20005ab1 	.word	0x20005ab1

08007a2c <OSFlagCreate>:
*********************************************************************************************************
*/

OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS  flags,
                            INT8U    *perr)
{
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	b084      	sub	sp, #16
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	4603      	mov	r3, r0
 8007a34:	6039      	str	r1, [r7, #0]
 8007a36:	80fb      	strh	r3, [r7, #6]
    OS_FLAG_GRP *pgrp;
#if OS_CRITICAL_METHOD == 3u                        /* Allocate storage for CPU status register        */
    OS_CPU_SR    cpu_sr = 0u;
 8007a38:	2300      	movs	r3, #0
 8007a3a:	60fb      	str	r3, [r7, #12]
        *perr = OS_ERR_ILLEGAL_CREATE_RUN_TIME;
        return ((OS_FLAG_GRP *)0);
    }
#endif

    if (OSIntNesting > 0u) {                        /* See if called from ISR ...                      */
 8007a3c:	4b1a      	ldr	r3, [pc, #104]	@ (8007aa8 <OSFlagCreate+0x7c>)
 8007a3e:	781b      	ldrb	r3, [r3, #0]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d004      	beq.n	8007a4e <OSFlagCreate+0x22>
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	2210      	movs	r2, #16
 8007a48:	701a      	strb	r2, [r3, #0]
        return ((OS_FLAG_GRP *)0);
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	e028      	b.n	8007aa0 <OSFlagCreate+0x74>
    }
    OS_ENTER_CRITICAL();
 8007a4e:	2040      	movs	r0, #64	@ 0x40
 8007a50:	f7f8 fbcd 	bl	80001ee <OS_CPU_SR_Save>
 8007a54:	60f8      	str	r0, [r7, #12]
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
 8007a56:	4b15      	ldr	r3, [pc, #84]	@ (8007aac <OSFlagCreate+0x80>)
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	60bb      	str	r3, [r7, #8]
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
 8007a5c:	68bb      	ldr	r3, [r7, #8]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d017      	beq.n	8007a92 <OSFlagCreate+0x66>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
 8007a62:	4b12      	ldr	r3, [pc, #72]	@ (8007aac <OSFlagCreate+0x80>)
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	685b      	ldr	r3, [r3, #4]
 8007a68:	4a10      	ldr	r2, [pc, #64]	@ (8007aac <OSFlagCreate+0x80>)
 8007a6a:	6013      	str	r3, [r2, #0]
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
 8007a6c:	68bb      	ldr	r3, [r7, #8]
 8007a6e:	2205      	movs	r2, #5
 8007a70:	701a      	strb	r2, [r3, #0]
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
 8007a72:	68bb      	ldr	r3, [r7, #8]
 8007a74:	88fa      	ldrh	r2, [r7, #6]
 8007a76:	811a      	strh	r2, [r3, #8]
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
 8007a78:	68bb      	ldr	r3, [r7, #8]
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	605a      	str	r2, [r3, #4]
#if OS_FLAG_NAME_EN > 0u
        pgrp->OSFlagName     = (INT8U *)(void *)"?";
 8007a7e:	68bb      	ldr	r3, [r7, #8]
 8007a80:	4a0b      	ldr	r2, [pc, #44]	@ (8007ab0 <OSFlagCreate+0x84>)
 8007a82:	60da      	str	r2, [r3, #12]
#endif
        OS_TRACE_FLAG_CREATE(pgrp, pgrp->OSFlagName);
        OS_EXIT_CRITICAL();
 8007a84:	68f8      	ldr	r0, [r7, #12]
 8007a86:	f7f8 fbc0 	bl	800020a <OS_CPU_SR_Restore>
        *perr                = OS_ERR_NONE;
 8007a8a:	683b      	ldr	r3, [r7, #0]
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	701a      	strb	r2, [r3, #0]
 8007a90:	e005      	b.n	8007a9e <OSFlagCreate+0x72>
    } else {
        OS_EXIT_CRITICAL();
 8007a92:	68f8      	ldr	r0, [r7, #12]
 8007a94:	f7f8 fbb9 	bl	800020a <OS_CPU_SR_Restore>
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	2272      	movs	r2, #114	@ 0x72
 8007a9c:	701a      	strb	r2, [r3, #0]
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
 8007a9e:	68bb      	ldr	r3, [r7, #8]
}
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	3710      	adds	r7, #16
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	bd80      	pop	{r7, pc}
 8007aa8:	20005aa0 	.word	0x20005aa0
 8007aac:	2000588c 	.word	0x2000588c
 8007ab0:	0800c56c 	.word	0x0800c56c

08007ab4 <OSFlagPend>:
OS_FLAGS  OSFlagPend (OS_FLAG_GRP  *pgrp,
                      OS_FLAGS      flags,
                      INT8U         wait_type,
                      INT32U        timeout,
                      INT8U        *perr)
{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b090      	sub	sp, #64	@ 0x40
 8007ab8:	af02      	add	r7, sp, #8
 8007aba:	60f8      	str	r0, [r7, #12]
 8007abc:	607b      	str	r3, [r7, #4]
 8007abe:	460b      	mov	r3, r1
 8007ac0:	817b      	strh	r3, [r7, #10]
 8007ac2:	4613      	mov	r3, r2
 8007ac4:	727b      	strb	r3, [r7, #9]
    OS_FLAGS      flags_rdy;
    INT8U         result;
    INT8U         pend_stat;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0u;
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	633b      	str	r3, [r7, #48]	@ 0x30
        return ((OS_FLAGS)0);
    }
#endif

#if OS_ARG_CHK_EN > 0u
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d104      	bne.n	8007ada <OSFlagPend+0x26>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 8007ad0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007ad2:	226e      	movs	r2, #110	@ 0x6e
 8007ad4:	701a      	strb	r2, [r3, #0]
        return ((OS_FLAGS)0);
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	e176      	b.n	8007dc8 <OSFlagPend+0x314>
    }
#endif

    OS_TRACE_FLAG_PEND_ENTER(pgrp, flags, timeout, wait_type);

    if (OSIntNesting > 0u) {                               /* See if called from ISR ...               */
 8007ada:	4b9f      	ldr	r3, [pc, #636]	@ (8007d58 <OSFlagPend+0x2a4>)
 8007adc:	781b      	ldrb	r3, [r3, #0]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d004      	beq.n	8007aec <OSFlagPend+0x38>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
 8007ae2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007ae4:	2202      	movs	r2, #2
 8007ae6:	701a      	strb	r2, [r3, #0]
        OS_TRACE_FLAG_PEND_EXIT(*perr);
        return ((OS_FLAGS)0);
 8007ae8:	2300      	movs	r3, #0
 8007aea:	e16d      	b.n	8007dc8 <OSFlagPend+0x314>
    }
    if (OSLockNesting > 0u) {                              /* See if called with scheduler locked ...  */
 8007aec:	4b9b      	ldr	r3, [pc, #620]	@ (8007d5c <OSFlagPend+0x2a8>)
 8007aee:	781b      	ldrb	r3, [r3, #0]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d004      	beq.n	8007afe <OSFlagPend+0x4a>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
 8007af4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007af6:	220d      	movs	r2, #13
 8007af8:	701a      	strb	r2, [r3, #0]
        OS_TRACE_FLAG_PEND_EXIT(*perr);
        return ((OS_FLAGS)0);
 8007afa:	2300      	movs	r3, #0
 8007afc:	e164      	b.n	8007dc8 <OSFlagPend+0x314>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	781b      	ldrb	r3, [r3, #0]
 8007b02:	2b05      	cmp	r3, #5
 8007b04:	d004      	beq.n	8007b10 <OSFlagPend+0x5c>
        *perr = OS_ERR_EVENT_TYPE;
 8007b06:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007b08:	2201      	movs	r2, #1
 8007b0a:	701a      	strb	r2, [r3, #0]
        OS_TRACE_FLAG_PEND_EXIT(*perr);
        return ((OS_FLAGS)0);
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	e15b      	b.n	8007dc8 <OSFlagPend+0x314>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
 8007b10:	7a7b      	ldrb	r3, [r7, #9]
 8007b12:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007b16:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
 8007b1a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d007      	beq.n	8007b32 <OSFlagPend+0x7e>
        wait_type &= (INT8U)~(INT8U)OS_FLAG_CONSUME;
 8007b22:	7a7b      	ldrb	r3, [r7, #9]
 8007b24:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007b28:	727b      	strb	r3, [r7, #9]
        consume    = OS_TRUE;
 8007b2a:	2301      	movs	r3, #1
 8007b2c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8007b30:	e002      	b.n	8007b38 <OSFlagPend+0x84>
    } else {
        consume    = OS_FALSE;
 8007b32:	2300      	movs	r3, #0
 8007b34:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    }

    OS_ENTER_CRITICAL();
 8007b38:	2040      	movs	r0, #64	@ 0x40
 8007b3a:	f7f8 fb58 	bl	80001ee <OS_CPU_SR_Save>
 8007b3e:	6338      	str	r0, [r7, #48]	@ 0x30
    switch (wait_type) {
 8007b40:	7a7b      	ldrb	r3, [r7, #9]
 8007b42:	2b03      	cmp	r3, #3
 8007b44:	f200 80ca 	bhi.w	8007cdc <OSFlagPend+0x228>
 8007b48:	a201      	add	r2, pc, #4	@ (adr r2, 8007b50 <OSFlagPend+0x9c>)
 8007b4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b4e:	bf00      	nop
 8007b50:	08007c1f 	.word	0x08007c1f
 8007b54:	08007c7f 	.word	0x08007c7f
 8007b58:	08007b61 	.word	0x08007b61
 8007b5c:	08007bc1 	.word	0x08007bc1
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	891a      	ldrh	r2, [r3, #8]
 8007b64:	897b      	ldrh	r3, [r7, #10]
 8007b66:	4013      	ands	r3, r2
 8007b68:	85bb      	strh	r3, [r7, #44]	@ 0x2c
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
 8007b6a:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8007b6c:	897b      	ldrh	r3, [r7, #10]
 8007b6e:	429a      	cmp	r2, r3
 8007b70:	d118      	bne.n	8007ba4 <OSFlagPend+0xf0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 8007b72:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007b76:	2b01      	cmp	r3, #1
 8007b78:	d108      	bne.n	8007b8c <OSFlagPend+0xd8>
                     pgrp->OSFlagFlags &= (OS_FLAGS)~flags_rdy;   /* Clear ONLY the flags we wanted    */
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	891a      	ldrh	r2, [r3, #8]
 8007b7e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8007b80:	43db      	mvns	r3, r3
 8007b82:	b29b      	uxth	r3, r3
 8007b84:	4013      	ands	r3, r2
 8007b86:	b29a      	uxth	r2, r3
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	811a      	strh	r2, [r3, #8]
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
 8007b8c:	4b74      	ldr	r3, [pc, #464]	@ (8007d60 <OSFlagPend+0x2ac>)
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8007b92:	861a      	strh	r2, [r3, #48]	@ 0x30
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
 8007b94:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007b96:	f7f8 fb38 	bl	800020a <OS_CPU_SR_Restore>
                 *perr                   = OS_ERR_NONE;
 8007b9a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	701a      	strb	r2, [r3, #0]
                 OS_TRACE_FLAG_PEND_EXIT(*perr);
                 return (flags_rdy);
 8007ba0:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8007ba2:	e111      	b.n	8007dc8 <OSFlagPend+0x314>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 8007ba4:	7a78      	ldrb	r0, [r7, #9]
 8007ba6:	897a      	ldrh	r2, [r7, #10]
 8007ba8:	f107 0114 	add.w	r1, r7, #20
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	9300      	str	r3, [sp, #0]
 8007bb0:	4603      	mov	r3, r0
 8007bb2:	68f8      	ldr	r0, [r7, #12]
 8007bb4:	f000 f9fe 	bl	8007fb4 <OS_FlagBlock>
                 OS_EXIT_CRITICAL();
 8007bb8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007bba:	f7f8 fb26 	bl	800020a <OS_CPU_SR_Restore>
             }
             break;
 8007bbe:	e097      	b.n	8007cf0 <OSFlagPend+0x23c>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	891a      	ldrh	r2, [r3, #8]
 8007bc4:	897b      	ldrh	r3, [r7, #10]
 8007bc6:	4013      	ands	r3, r2
 8007bc8:	85bb      	strh	r3, [r7, #44]	@ 0x2c
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
 8007bca:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d018      	beq.n	8007c02 <OSFlagPend+0x14e>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 8007bd0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007bd4:	2b01      	cmp	r3, #1
 8007bd6:	d108      	bne.n	8007bea <OSFlagPend+0x136>
                     pgrp->OSFlagFlags &= (OS_FLAGS)~flags_rdy;    /* Clear ONLY the flags that we got */
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	891a      	ldrh	r2, [r3, #8]
 8007bdc:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8007bde:	43db      	mvns	r3, r3
 8007be0:	b29b      	uxth	r3, r3
 8007be2:	4013      	ands	r3, r2
 8007be4:	b29a      	uxth	r2, r3
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	811a      	strh	r2, [r3, #8]
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
 8007bea:	4b5d      	ldr	r3, [pc, #372]	@ (8007d60 <OSFlagPend+0x2ac>)
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8007bf0:	861a      	strh	r2, [r3, #48]	@ 0x30
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
 8007bf2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007bf4:	f7f8 fb09 	bl	800020a <OS_CPU_SR_Restore>
                 *perr                   = OS_ERR_NONE;
 8007bf8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	701a      	strb	r2, [r3, #0]
                 OS_TRACE_FLAG_PEND_EXIT(*perr);
                 return (flags_rdy);
 8007bfe:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8007c00:	e0e2      	b.n	8007dc8 <OSFlagPend+0x314>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 8007c02:	7a78      	ldrb	r0, [r7, #9]
 8007c04:	897a      	ldrh	r2, [r7, #10]
 8007c06:	f107 0114 	add.w	r1, r7, #20
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	9300      	str	r3, [sp, #0]
 8007c0e:	4603      	mov	r3, r0
 8007c10:	68f8      	ldr	r0, [r7, #12]
 8007c12:	f000 f9cf 	bl	8007fb4 <OS_FlagBlock>
                 OS_EXIT_CRITICAL();
 8007c16:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007c18:	f7f8 faf7 	bl	800020a <OS_CPU_SR_Restore>
             }
             break;
 8007c1c:	e068      	b.n	8007cf0 <OSFlagPend+0x23c>

#if OS_FLAG_WAIT_CLR_EN > 0u
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)~pgrp->OSFlagFlags & flags;    /* Extract only the bits we want     */
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	891b      	ldrh	r3, [r3, #8]
 8007c22:	43db      	mvns	r3, r3
 8007c24:	b29a      	uxth	r2, r3
 8007c26:	897b      	ldrh	r3, [r7, #10]
 8007c28:	4013      	ands	r3, r2
 8007c2a:	85bb      	strh	r3, [r7, #44]	@ 0x2c
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
 8007c2c:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8007c2e:	897b      	ldrh	r3, [r7, #10]
 8007c30:	429a      	cmp	r2, r3
 8007c32:	d116      	bne.n	8007c62 <OSFlagPend+0x1ae>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 8007c34:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007c38:	2b01      	cmp	r3, #1
 8007c3a:	d106      	bne.n	8007c4a <OSFlagPend+0x196>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	891a      	ldrh	r2, [r3, #8]
 8007c40:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8007c42:	4313      	orrs	r3, r2
 8007c44:	b29a      	uxth	r2, r3
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	811a      	strh	r2, [r3, #8]
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
 8007c4a:	4b45      	ldr	r3, [pc, #276]	@ (8007d60 <OSFlagPend+0x2ac>)
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8007c50:	861a      	strh	r2, [r3, #48]	@ 0x30
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
 8007c52:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007c54:	f7f8 fad9 	bl	800020a <OS_CPU_SR_Restore>
                 *perr                   = OS_ERR_NONE;
 8007c58:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	701a      	strb	r2, [r3, #0]
                 OS_TRACE_FLAG_PEND_EXIT(*perr);
                 return (flags_rdy);
 8007c5e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8007c60:	e0b2      	b.n	8007dc8 <OSFlagPend+0x314>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 8007c62:	7a78      	ldrb	r0, [r7, #9]
 8007c64:	897a      	ldrh	r2, [r7, #10]
 8007c66:	f107 0114 	add.w	r1, r7, #20
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	9300      	str	r3, [sp, #0]
 8007c6e:	4603      	mov	r3, r0
 8007c70:	68f8      	ldr	r0, [r7, #12]
 8007c72:	f000 f99f 	bl	8007fb4 <OS_FlagBlock>
                 OS_EXIT_CRITICAL();
 8007c76:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007c78:	f7f8 fac7 	bl	800020a <OS_CPU_SR_Restore>
             }
             break;
 8007c7c:	e038      	b.n	8007cf0 <OSFlagPend+0x23c>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)~pgrp->OSFlagFlags & flags;   /* Extract only the bits we want      */
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	891b      	ldrh	r3, [r3, #8]
 8007c82:	43db      	mvns	r3, r3
 8007c84:	b29a      	uxth	r2, r3
 8007c86:	897b      	ldrh	r3, [r7, #10]
 8007c88:	4013      	ands	r3, r2
 8007c8a:	85bb      	strh	r3, [r7, #44]	@ 0x2c
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
 8007c8c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d016      	beq.n	8007cc0 <OSFlagPend+0x20c>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 8007c92:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007c96:	2b01      	cmp	r3, #1
 8007c98:	d106      	bne.n	8007ca8 <OSFlagPend+0x1f4>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	891a      	ldrh	r2, [r3, #8]
 8007c9e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8007ca0:	4313      	orrs	r3, r2
 8007ca2:	b29a      	uxth	r2, r3
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	811a      	strh	r2, [r3, #8]
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
 8007ca8:	4b2d      	ldr	r3, [pc, #180]	@ (8007d60 <OSFlagPend+0x2ac>)
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8007cae:	861a      	strh	r2, [r3, #48]	@ 0x30
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
 8007cb0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007cb2:	f7f8 faaa 	bl	800020a <OS_CPU_SR_Restore>
                 *perr                   = OS_ERR_NONE;
 8007cb6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007cb8:	2200      	movs	r2, #0
 8007cba:	701a      	strb	r2, [r3, #0]
                 OS_TRACE_FLAG_PEND_EXIT(*perr);
                 return (flags_rdy);
 8007cbc:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8007cbe:	e083      	b.n	8007dc8 <OSFlagPend+0x314>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 8007cc0:	7a78      	ldrb	r0, [r7, #9]
 8007cc2:	897a      	ldrh	r2, [r7, #10]
 8007cc4:	f107 0114 	add.w	r1, r7, #20
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	9300      	str	r3, [sp, #0]
 8007ccc:	4603      	mov	r3, r0
 8007cce:	68f8      	ldr	r0, [r7, #12]
 8007cd0:	f000 f970 	bl	8007fb4 <OS_FlagBlock>
                 OS_EXIT_CRITICAL();
 8007cd4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007cd6:	f7f8 fa98 	bl	800020a <OS_CPU_SR_Restore>
             }
             break;
 8007cda:	e009      	b.n	8007cf0 <OSFlagPend+0x23c>
#endif

        default:
             OS_EXIT_CRITICAL();
 8007cdc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007cde:	f7f8 fa94 	bl	800020a <OS_CPU_SR_Restore>
             flags_rdy = (OS_FLAGS)0;
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	85bb      	strh	r3, [r7, #44]	@ 0x2c
             *perr      = OS_ERR_FLAG_WAIT_TYPE;
 8007ce6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007ce8:	226f      	movs	r2, #111	@ 0x6f
 8007cea:	701a      	strb	r2, [r3, #0]
             OS_TRACE_FLAG_PEND_EXIT(*perr);
             return (flags_rdy);
 8007cec:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8007cee:	e06b      	b.n	8007dc8 <OSFlagPend+0x314>
    }

    OS_Sched();                                            /* Find next HPT ready to run               */
 8007cf0:	f7ff fc7c 	bl	80075ec <OS_Sched>
    OS_ENTER_CRITICAL();
 8007cf4:	2040      	movs	r0, #64	@ 0x40
 8007cf6:	f7f8 fa7a 	bl	80001ee <OS_CPU_SR_Save>
 8007cfa:	6338      	str	r0, [r7, #48]	@ 0x30
    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
 8007cfc:	4b18      	ldr	r3, [pc, #96]	@ (8007d60 <OSFlagPend+0x2ac>)
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d02d      	beq.n	8007d64 <OSFlagPend+0x2b0>
        pend_stat                = OSTCBCur->OSTCBStatPend;
 8007d08:	4b15      	ldr	r3, [pc, #84]	@ (8007d60 <OSFlagPend+0x2ac>)
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8007d10:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 8007d14:	4b12      	ldr	r3, [pc, #72]	@ (8007d60 <OSFlagPend+0x2ac>)
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	2200      	movs	r2, #0
 8007d1a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        OS_FlagUnlink(&node);
 8007d1e:	f107 0314 	add.w	r3, r7, #20
 8007d22:	4618      	mov	r0, r3
 8007d24:	f000 fa4a 	bl	80081bc <OS_FlagUnlink>
        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
 8007d28:	4b0d      	ldr	r3, [pc, #52]	@ (8007d60 <OSFlagPend+0x2ac>)
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        OS_EXIT_CRITICAL();
 8007d32:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007d34:	f7f8 fa69 	bl	800020a <OS_CPU_SR_Restore>
        flags_rdy                = (OS_FLAGS)0;
 8007d38:	2300      	movs	r3, #0
 8007d3a:	85bb      	strh	r3, [r7, #44]	@ 0x2c
        switch (pend_stat) {
 8007d3c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007d40:	2b02      	cmp	r3, #2
 8007d42:	d103      	bne.n	8007d4c <OSFlagPend+0x298>
            case OS_STAT_PEND_ABORT:
                 *perr = OS_ERR_PEND_ABORT;                /* Indicate that we aborted   waiting       */
 8007d44:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007d46:	220e      	movs	r2, #14
 8007d48:	701a      	strb	r2, [r3, #0]
                 break;
 8007d4a:	e003      	b.n	8007d54 <OSFlagPend+0x2a0>

            case OS_STAT_PEND_TO:
            default:
                 *perr = OS_ERR_TIMEOUT;                   /* Indicate that we timed-out waiting       */
 8007d4c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007d4e:	220a      	movs	r2, #10
 8007d50:	701a      	strb	r2, [r3, #0]
                 break;
 8007d52:	bf00      	nop
        }
        OS_TRACE_FLAG_PEND_EXIT(*perr);
        return (flags_rdy);
 8007d54:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8007d56:	e037      	b.n	8007dc8 <OSFlagPend+0x314>
 8007d58:	20005aa0 	.word	0x20005aa0
 8007d5c:	20005aa1 	.word	0x20005aa1
 8007d60:	20005cb8 	.word	0x20005cb8
    }
    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
 8007d64:	4b1a      	ldr	r3, [pc, #104]	@ (8007dd0 <OSFlagPend+0x31c>)
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8007d6a:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
 8007d6c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007d70:	2b01      	cmp	r3, #1
 8007d72:	d122      	bne.n	8007dba <OSFlagPend+0x306>
        switch (wait_type) {
 8007d74:	7a7b      	ldrb	r3, [r7, #9]
 8007d76:	2b01      	cmp	r3, #1
 8007d78:	dc02      	bgt.n	8007d80 <OSFlagPend+0x2cc>
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	da0d      	bge.n	8007d9a <OSFlagPend+0x2e6>
 8007d7e:	e014      	b.n	8007daa <OSFlagPend+0x2f6>
 8007d80:	3b02      	subs	r3, #2
 8007d82:	2b01      	cmp	r3, #1
 8007d84:	d811      	bhi.n	8007daa <OSFlagPend+0x2f6>
            case OS_FLAG_WAIT_SET_ALL:
            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
                 pgrp->OSFlagFlags &= (OS_FLAGS)~flags_rdy;
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	891a      	ldrh	r2, [r3, #8]
 8007d8a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8007d8c:	43db      	mvns	r3, r3
 8007d8e:	b29b      	uxth	r3, r3
 8007d90:	4013      	ands	r3, r2
 8007d92:	b29a      	uxth	r2, r3
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	811a      	strh	r2, [r3, #8]
                 break;
 8007d98:	e00f      	b.n	8007dba <OSFlagPend+0x306>

#if OS_FLAG_WAIT_CLR_EN > 0u
            case OS_FLAG_WAIT_CLR_ALL:
            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
                 pgrp->OSFlagFlags |=  flags_rdy;
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	891a      	ldrh	r2, [r3, #8]
 8007d9e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8007da0:	4313      	orrs	r3, r2
 8007da2:	b29a      	uxth	r2, r3
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	811a      	strh	r2, [r3, #8]
                 break;
 8007da8:	e007      	b.n	8007dba <OSFlagPend+0x306>
#endif
            default:
                 OS_EXIT_CRITICAL();
 8007daa:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007dac:	f7f8 fa2d 	bl	800020a <OS_CPU_SR_Restore>
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
 8007db0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007db2:	226f      	movs	r2, #111	@ 0x6f
 8007db4:	701a      	strb	r2, [r3, #0]
                 OS_TRACE_FLAG_PEND_EXIT(*perr);
                 return ((OS_FLAGS)0);
 8007db6:	2300      	movs	r3, #0
 8007db8:	e006      	b.n	8007dc8 <OSFlagPend+0x314>
        }
    }
    OS_EXIT_CRITICAL();
 8007dba:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007dbc:	f7f8 fa25 	bl	800020a <OS_CPU_SR_Restore>
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
 8007dc0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	701a      	strb	r2, [r3, #0]
    OS_TRACE_FLAG_PEND_EXIT(*perr);
    return (flags_rdy);
 8007dc6:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
}
 8007dc8:	4618      	mov	r0, r3
 8007dca:	3738      	adds	r7, #56	@ 0x38
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	bd80      	pop	{r7, pc}
 8007dd0:	20005cb8 	.word	0x20005cb8

08007dd4 <OSFlagPost>:
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP  *pgrp,
                      OS_FLAGS      flags,
                      INT8U         opt,
                      INT8U        *perr)
{
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	b08a      	sub	sp, #40	@ 0x28
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	60f8      	str	r0, [r7, #12]
 8007ddc:	607b      	str	r3, [r7, #4]
 8007dde:	460b      	mov	r3, r1
 8007de0:	817b      	strh	r3, [r7, #10]
 8007de2:	4613      	mov	r3, r2
 8007de4:	727b      	strb	r3, [r7, #9]
    BOOLEAN       sched;
    OS_FLAGS      flags_cur;
    OS_FLAGS      flags_rdy;
    BOOLEAN       rdy;
#if OS_CRITICAL_METHOD == 3u                         /* Allocate storage for CPU status register       */
    OS_CPU_SR     cpu_sr = 0u;
 8007de6:	2300      	movs	r3, #0
 8007de8:	61fb      	str	r3, [r7, #28]
        return ((OS_FLAGS)0);
    }
#endif

#if OS_ARG_CHK_EN > 0u
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d104      	bne.n	8007dfa <OSFlagPost+0x26>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	226e      	movs	r2, #110	@ 0x6e
 8007df4:	701a      	strb	r2, [r3, #0]
        return ((OS_FLAGS)0);
 8007df6:	2300      	movs	r3, #0
 8007df8:	e0d7      	b.n	8007faa <OSFlagPost+0x1d6>
    }
#endif

    OS_TRACE_FLAG_POST_ENTER(pgrp, flags, opt);

    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	781b      	ldrb	r3, [r3, #0]
 8007dfe:	2b05      	cmp	r3, #5
 8007e00:	d004      	beq.n	8007e0c <OSFlagPost+0x38>
        *perr = OS_ERR_EVENT_TYPE;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	2201      	movs	r2, #1
 8007e06:	701a      	strb	r2, [r3, #0]
        OS_TRACE_FLAG_POST_EXIT(*perr);
        return ((OS_FLAGS)0);
 8007e08:	2300      	movs	r3, #0
 8007e0a:	e0ce      	b.n	8007faa <OSFlagPost+0x1d6>
    }

    OS_ENTER_CRITICAL();
 8007e0c:	2040      	movs	r0, #64	@ 0x40
 8007e0e:	f7f8 f9ee 	bl	80001ee <OS_CPU_SR_Save>
 8007e12:	61f8      	str	r0, [r7, #28]
    switch (opt) {
 8007e14:	7a7b      	ldrb	r3, [r7, #9]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d002      	beq.n	8007e20 <OSFlagPost+0x4c>
 8007e1a:	2b01      	cmp	r3, #1
 8007e1c:	d00a      	beq.n	8007e34 <OSFlagPost+0x60>
 8007e1e:	e011      	b.n	8007e44 <OSFlagPost+0x70>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= (OS_FLAGS)~flags;  /* Clear the flags specified in the group         */
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	891a      	ldrh	r2, [r3, #8]
 8007e24:	897b      	ldrh	r3, [r7, #10]
 8007e26:	43db      	mvns	r3, r3
 8007e28:	b29b      	uxth	r3, r3
 8007e2a:	4013      	ands	r3, r2
 8007e2c:	b29a      	uxth	r2, r3
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	811a      	strh	r2, [r3, #8]
             break;
 8007e32:	e00f      	b.n	8007e54 <OSFlagPost+0x80>

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	891a      	ldrh	r2, [r3, #8]
 8007e38:	897b      	ldrh	r3, [r7, #10]
 8007e3a:	4313      	orrs	r3, r2
 8007e3c:	b29a      	uxth	r2, r3
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	811a      	strh	r2, [r3, #8]
             break;
 8007e42:	e007      	b.n	8007e54 <OSFlagPost+0x80>

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
 8007e44:	69f8      	ldr	r0, [r7, #28]
 8007e46:	f7f8 f9e0 	bl	800020a <OS_CPU_SR_Restore>
             *perr = OS_ERR_FLAG_INVALID_OPT;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	2271      	movs	r2, #113	@ 0x71
 8007e4e:	701a      	strb	r2, [r3, #0]
             OS_TRACE_FLAG_POST_EXIT(*perr);
             return ((OS_FLAGS)0);
 8007e50:	2300      	movs	r3, #0
 8007e52:	e0aa      	b.n	8007faa <OSFlagPost+0x1d6>
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
 8007e54:	2300      	movs	r3, #0
 8007e56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	685b      	ldr	r3, [r3, #4]
 8007e5e:	627b      	str	r3, [r7, #36]	@ 0x24
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
 8007e60:	e088      	b.n	8007f74 <OSFlagPost+0x1a0>
        switch (pnode->OSFlagNodeWaitType) {
 8007e62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e64:	7c9b      	ldrb	r3, [r3, #18]
 8007e66:	2b03      	cmp	r3, #3
 8007e68:	d872      	bhi.n	8007f50 <OSFlagPost+0x17c>
 8007e6a:	a201      	add	r2, pc, #4	@ (adr r2, 8007e70 <OSFlagPost+0x9c>)
 8007e6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e70:	08007ee5 	.word	0x08007ee5
 8007e74:	08007f1d 	.word	0x08007f1d
 8007e78:	08007e81 	.word	0x08007e81
 8007e7c:	08007eb5 	.word	0x08007eb5
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	891a      	ldrh	r2, [r3, #8]
 8007e84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e86:	8a1b      	ldrh	r3, [r3, #16]
 8007e88:	4013      	ands	r3, r2
 8007e8a:	833b      	strh	r3, [r7, #24]
                 if (flags_rdy == pnode->OSFlagNodeFlags) {   /* Make task RTR, event(s) Rx'd          */
 8007e8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e8e:	8a1b      	ldrh	r3, [r3, #16]
 8007e90:	8b3a      	ldrh	r2, [r7, #24]
 8007e92:	429a      	cmp	r2, r3
 8007e94:	d164      	bne.n	8007f60 <OSFlagPost+0x18c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy, OS_STAT_PEND_OK);
 8007e96:	8b3b      	ldrh	r3, [r7, #24]
 8007e98:	2200      	movs	r2, #0
 8007e9a:	4619      	mov	r1, r3
 8007e9c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007e9e:	f000 f93f 	bl	8008120 <OS_FlagTaskRdy>
 8007ea2:	4603      	mov	r3, r0
 8007ea4:	75fb      	strb	r3, [r7, #23]
                     if (rdy == OS_TRUE) {
 8007ea6:	7dfb      	ldrb	r3, [r7, #23]
 8007ea8:	2b01      	cmp	r3, #1
 8007eaa:	d159      	bne.n	8007f60 <OSFlagPost+0x18c>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
 8007eac:	2301      	movs	r3, #1
 8007eae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
                     }
                 }
                 break;
 8007eb2:	e055      	b.n	8007f60 <OSFlagPost+0x18c>

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	891a      	ldrh	r2, [r3, #8]
 8007eb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007eba:	8a1b      	ldrh	r3, [r3, #16]
 8007ebc:	4013      	ands	r3, r2
 8007ebe:	833b      	strh	r3, [r7, #24]
                 if (flags_rdy != (OS_FLAGS)0) {              /* Make task RTR, event(s) Rx'd          */
 8007ec0:	8b3b      	ldrh	r3, [r7, #24]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d04e      	beq.n	8007f64 <OSFlagPost+0x190>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy, OS_STAT_PEND_OK);
 8007ec6:	8b3b      	ldrh	r3, [r7, #24]
 8007ec8:	2200      	movs	r2, #0
 8007eca:	4619      	mov	r1, r3
 8007ecc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007ece:	f000 f927 	bl	8008120 <OS_FlagTaskRdy>
 8007ed2:	4603      	mov	r3, r0
 8007ed4:	75fb      	strb	r3, [r7, #23]
                     if (rdy == OS_TRUE) {
 8007ed6:	7dfb      	ldrb	r3, [r7, #23]
 8007ed8:	2b01      	cmp	r3, #1
 8007eda:	d143      	bne.n	8007f64 <OSFlagPost+0x190>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
 8007edc:	2301      	movs	r3, #1
 8007ede:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
                     }
                 }
                 break;
 8007ee2:	e03f      	b.n	8007f64 <OSFlagPost+0x190>

#if OS_FLAG_WAIT_CLR_EN > 0u
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags;
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	891b      	ldrh	r3, [r3, #8]
 8007ee8:	43db      	mvns	r3, r3
 8007eea:	b29a      	uxth	r2, r3
 8007eec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007eee:	8a1b      	ldrh	r3, [r3, #16]
 8007ef0:	4013      	ands	r3, r2
 8007ef2:	833b      	strh	r3, [r7, #24]
                 if (flags_rdy == pnode->OSFlagNodeFlags) {   /* Make task RTR, event(s) Rx'd          */
 8007ef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ef6:	8a1b      	ldrh	r3, [r3, #16]
 8007ef8:	8b3a      	ldrh	r2, [r7, #24]
 8007efa:	429a      	cmp	r2, r3
 8007efc:	d134      	bne.n	8007f68 <OSFlagPost+0x194>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy, OS_STAT_PEND_OK);
 8007efe:	8b3b      	ldrh	r3, [r7, #24]
 8007f00:	2200      	movs	r2, #0
 8007f02:	4619      	mov	r1, r3
 8007f04:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007f06:	f000 f90b 	bl	8008120 <OS_FlagTaskRdy>
 8007f0a:	4603      	mov	r3, r0
 8007f0c:	75fb      	strb	r3, [r7, #23]
                     if (rdy == OS_TRUE) {
 8007f0e:	7dfb      	ldrb	r3, [r7, #23]
 8007f10:	2b01      	cmp	r3, #1
 8007f12:	d129      	bne.n	8007f68 <OSFlagPost+0x194>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
 8007f14:	2301      	movs	r3, #1
 8007f16:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
                     }
                 }
                 break;
 8007f1a:	e025      	b.n	8007f68 <OSFlagPost+0x194>

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags;
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	891b      	ldrh	r3, [r3, #8]
 8007f20:	43db      	mvns	r3, r3
 8007f22:	b29a      	uxth	r2, r3
 8007f24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f26:	8a1b      	ldrh	r3, [r3, #16]
 8007f28:	4013      	ands	r3, r2
 8007f2a:	833b      	strh	r3, [r7, #24]
                 if (flags_rdy != (OS_FLAGS)0) {              /* Make task RTR, event(s) Rx'd          */
 8007f2c:	8b3b      	ldrh	r3, [r7, #24]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d01c      	beq.n	8007f6c <OSFlagPost+0x198>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy, OS_STAT_PEND_OK);
 8007f32:	8b3b      	ldrh	r3, [r7, #24]
 8007f34:	2200      	movs	r2, #0
 8007f36:	4619      	mov	r1, r3
 8007f38:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007f3a:	f000 f8f1 	bl	8008120 <OS_FlagTaskRdy>
 8007f3e:	4603      	mov	r3, r0
 8007f40:	75fb      	strb	r3, [r7, #23]
                     if (rdy == OS_TRUE) {
 8007f42:	7dfb      	ldrb	r3, [r7, #23]
 8007f44:	2b01      	cmp	r3, #1
 8007f46:	d111      	bne.n	8007f6c <OSFlagPost+0x198>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
 8007f48:	2301      	movs	r3, #1
 8007f4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
                     }
                 }
                 break;
 8007f4e:	e00d      	b.n	8007f6c <OSFlagPost+0x198>
#endif
            default:
                 OS_EXIT_CRITICAL();
 8007f50:	69f8      	ldr	r0, [r7, #28]
 8007f52:	f7f8 f95a 	bl	800020a <OS_CPU_SR_Restore>
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	226f      	movs	r2, #111	@ 0x6f
 8007f5a:	701a      	strb	r2, [r3, #0]
                 OS_TRACE_FLAG_POST_EXIT(*perr);
                 return ((OS_FLAGS)0);
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	e024      	b.n	8007faa <OSFlagPost+0x1d6>
                 break;
 8007f60:	bf00      	nop
 8007f62:	e004      	b.n	8007f6e <OSFlagPost+0x19a>
                 break;
 8007f64:	bf00      	nop
 8007f66:	e002      	b.n	8007f6e <OSFlagPost+0x19a>
                 break;
 8007f68:	bf00      	nop
 8007f6a:	e000      	b.n	8007f6e <OSFlagPost+0x19a>
                 break;
 8007f6c:	bf00      	nop
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
 8007f6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	627b      	str	r3, [r7, #36]	@ 0x24
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
 8007f74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	f47f af73 	bne.w	8007e62 <OSFlagPost+0x8e>
    }
    OS_EXIT_CRITICAL();
 8007f7c:	69f8      	ldr	r0, [r7, #28]
 8007f7e:	f7f8 f944 	bl	800020a <OS_CPU_SR_Restore>
    if (sched == OS_TRUE) {
 8007f82:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007f86:	2b01      	cmp	r3, #1
 8007f88:	d101      	bne.n	8007f8e <OSFlagPost+0x1ba>
        OS_Sched();
 8007f8a:	f7ff fb2f 	bl	80075ec <OS_Sched>
    }
    OS_ENTER_CRITICAL();
 8007f8e:	2040      	movs	r0, #64	@ 0x40
 8007f90:	f7f8 f92d 	bl	80001ee <OS_CPU_SR_Save>
 8007f94:	61f8      	str	r0, [r7, #28]
    flags_cur = pgrp->OSFlagFlags;
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	891b      	ldrh	r3, [r3, #8]
 8007f9a:	837b      	strh	r3, [r7, #26]
    OS_EXIT_CRITICAL();
 8007f9c:	69f8      	ldr	r0, [r7, #28]
 8007f9e:	f7f8 f934 	bl	800020a <OS_CPU_SR_Restore>
    *perr     = OS_ERR_NONE;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	2200      	movs	r2, #0
 8007fa6:	701a      	strb	r2, [r3, #0]
    OS_TRACE_FLAG_POST_EXIT(*perr);

    return (flags_cur);
 8007fa8:	8b7b      	ldrh	r3, [r7, #26]
}
 8007faa:	4618      	mov	r0, r3
 8007fac:	3728      	adds	r7, #40	@ 0x28
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	bd80      	pop	{r7, pc}
 8007fb2:	bf00      	nop

08007fb4 <OS_FlagBlock>:
static  void  OS_FlagBlock (OS_FLAG_GRP  *pgrp,
                            OS_FLAG_NODE *pnode,
                            OS_FLAGS      flags,
                            INT8U         wait_type,
                            INT32U        timeout)
{
 8007fb4:	b480      	push	{r7}
 8007fb6:	b087      	sub	sp, #28
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	60f8      	str	r0, [r7, #12]
 8007fbc:	60b9      	str	r1, [r7, #8]
 8007fbe:	4611      	mov	r1, r2
 8007fc0:	461a      	mov	r2, r3
 8007fc2:	460b      	mov	r3, r1
 8007fc4:	80fb      	strh	r3, [r7, #6]
 8007fc6:	4613      	mov	r3, r2
 8007fc8:	717b      	strb	r3, [r7, #5]
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
 8007fca:	4b31      	ldr	r3, [pc, #196]	@ (8008090 <OS_FlagBlock+0xdc>)
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	f893 2038 	ldrb.w	r2, [r3, #56]	@ 0x38
 8007fd2:	4b2f      	ldr	r3, [pc, #188]	@ (8008090 <OS_FlagBlock+0xdc>)
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	f042 0220 	orr.w	r2, r2, #32
 8007fda:	b2d2      	uxtb	r2, r2
 8007fdc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
 8007fe0:	4b2b      	ldr	r3, [pc, #172]	@ (8008090 <OS_FlagBlock+0xdc>)
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
 8007fea:	4b29      	ldr	r3, [pc, #164]	@ (8008090 <OS_FlagBlock+0xdc>)
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	6a3a      	ldr	r2, [r7, #32]
 8007ff0:	635a      	str	r2, [r3, #52]	@ 0x34
#if OS_TASK_DEL_EN > 0u
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
 8007ff2:	4b27      	ldr	r3, [pc, #156]	@ (8008090 <OS_FlagBlock+0xdc>)
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	68ba      	ldr	r2, [r7, #8]
 8007ff8:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
 8007ffa:	68bb      	ldr	r3, [r7, #8]
 8007ffc:	88fa      	ldrh	r2, [r7, #6]
 8007ffe:	821a      	strh	r2, [r3, #16]
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
 8008000:	68bb      	ldr	r3, [r7, #8]
 8008002:	797a      	ldrb	r2, [r7, #5]
 8008004:	749a      	strb	r2, [r3, #18]
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
 8008006:	4b22      	ldr	r3, [pc, #136]	@ (8008090 <OS_FlagBlock+0xdc>)
 8008008:	681a      	ldr	r2, [r3, #0]
 800800a:	68bb      	ldr	r3, [r7, #8]
 800800c:	609a      	str	r2, [r3, #8]
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	685a      	ldr	r2, [r3, #4]
 8008012:	68bb      	ldr	r3, [r7, #8]
 8008014:	601a      	str	r2, [r3, #0]
    pnode->OSFlagNodePrev     = (void *)0;
 8008016:	68bb      	ldr	r3, [r7, #8]
 8008018:	2200      	movs	r2, #0
 800801a:	605a      	str	r2, [r3, #4]
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
 800801c:	68bb      	ldr	r3, [r7, #8]
 800801e:	68fa      	ldr	r2, [r7, #12]
 8008020:	60da      	str	r2, [r3, #12]
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	685b      	ldr	r3, [r3, #4]
 8008026:	617b      	str	r3, [r7, #20]
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
 8008028:	697b      	ldr	r3, [r7, #20]
 800802a:	2b00      	cmp	r3, #0
 800802c:	d002      	beq.n	8008034 <OS_FlagBlock+0x80>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
 800802e:	697b      	ldr	r3, [r7, #20]
 8008030:	68ba      	ldr	r2, [r7, #8]
 8008032:	605a      	str	r2, [r3, #4]
    }
    pgrp->OSFlagWaitList = (void *)pnode;
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	68ba      	ldr	r2, [r7, #8]
 8008038:	605a      	str	r2, [r3, #4]

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
 800803a:	4b15      	ldr	r3, [pc, #84]	@ (8008090 <OS_FlagBlock+0xdc>)
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008042:	74fb      	strb	r3, [r7, #19]
    OSRdyTbl[y] &= (OS_PRIO)~OSTCBCur->OSTCBBitX;
 8008044:	7cfb      	ldrb	r3, [r7, #19]
 8008046:	4a13      	ldr	r2, [pc, #76]	@ (8008094 <OS_FlagBlock+0xe0>)
 8008048:	5cd1      	ldrb	r1, [r2, r3]
 800804a:	4b11      	ldr	r3, [pc, #68]	@ (8008090 <OS_FlagBlock+0xdc>)
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008052:	43db      	mvns	r3, r3
 8008054:	b2da      	uxtb	r2, r3
 8008056:	7cfb      	ldrb	r3, [r7, #19]
 8008058:	400a      	ands	r2, r1
 800805a:	b2d1      	uxtb	r1, r2
 800805c:	4a0d      	ldr	r2, [pc, #52]	@ (8008094 <OS_FlagBlock+0xe0>)
 800805e:	54d1      	strb	r1, [r2, r3]
    OS_TRACE_TASK_SUSPENDED(OSTCBCur);
    if (OSRdyTbl[y] == 0x00u) {
 8008060:	7cfb      	ldrb	r3, [r7, #19]
 8008062:	4a0c      	ldr	r2, [pc, #48]	@ (8008094 <OS_FlagBlock+0xe0>)
 8008064:	5cd3      	ldrb	r3, [r2, r3]
 8008066:	2b00      	cmp	r3, #0
 8008068:	d10b      	bne.n	8008082 <OS_FlagBlock+0xce>
        OSRdyGrp &= (OS_PRIO)~OSTCBCur->OSTCBBitY;
 800806a:	4b09      	ldr	r3, [pc, #36]	@ (8008090 <OS_FlagBlock+0xdc>)
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008072:	43db      	mvns	r3, r3
 8008074:	b2da      	uxtb	r2, r3
 8008076:	4b08      	ldr	r3, [pc, #32]	@ (8008098 <OS_FlagBlock+0xe4>)
 8008078:	781b      	ldrb	r3, [r3, #0]
 800807a:	4013      	ands	r3, r2
 800807c:	b2da      	uxtb	r2, r3
 800807e:	4b06      	ldr	r3, [pc, #24]	@ (8008098 <OS_FlagBlock+0xe4>)
 8008080:	701a      	strb	r2, [r3, #0]
    }
}
 8008082:	bf00      	nop
 8008084:	371c      	adds	r7, #28
 8008086:	46bd      	mov	sp, r7
 8008088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808c:	4770      	bx	lr
 800808e:	bf00      	nop
 8008090:	20005cb8 	.word	0x20005cb8
 8008094:	20005aa8 	.word	0x20005aa8
 8008098:	20005aa4 	.word	0x20005aa4

0800809c <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
 800809c:	b580      	push	{r7, lr}
 800809e:	b084      	sub	sp, #16
 80080a0:	af00      	add	r7, sp, #0
    INT16U        ix_next;
    OS_FLAG_GRP  *pgrp1;
    OS_FLAG_GRP  *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
 80080a2:	2150      	movs	r1, #80	@ 0x50
 80080a4:	481b      	ldr	r0, [pc, #108]	@ (8008114 <OS_FlagInit+0x78>)
 80080a6:	f7ff fa87 	bl	80075b8 <OS_MemClr>
    for (ix = 0u; ix < (OS_MAX_FLAGS - 1u); ix++) {                 /* Init. list of free EVENT FLAGS  */
 80080aa:	2300      	movs	r3, #0
 80080ac:	81fb      	strh	r3, [r7, #14]
 80080ae:	e018      	b.n	80080e2 <OS_FlagInit+0x46>
        ix_next = ix + 1u;
 80080b0:	89fb      	ldrh	r3, [r7, #14]
 80080b2:	3301      	adds	r3, #1
 80080b4:	80fb      	strh	r3, [r7, #6]
        pgrp1 = &OSFlagTbl[ix];
 80080b6:	89fb      	ldrh	r3, [r7, #14]
 80080b8:	011b      	lsls	r3, r3, #4
 80080ba:	4a16      	ldr	r2, [pc, #88]	@ (8008114 <OS_FlagInit+0x78>)
 80080bc:	4413      	add	r3, r2
 80080be:	60bb      	str	r3, [r7, #8]
        pgrp2 = &OSFlagTbl[ix_next];
 80080c0:	88fb      	ldrh	r3, [r7, #6]
 80080c2:	011b      	lsls	r3, r3, #4
 80080c4:	4a13      	ldr	r2, [pc, #76]	@ (8008114 <OS_FlagInit+0x78>)
 80080c6:	4413      	add	r3, r2
 80080c8:	603b      	str	r3, [r7, #0]
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 80080ca:	68bb      	ldr	r3, [r7, #8]
 80080cc:	2200      	movs	r2, #0
 80080ce:	701a      	strb	r2, [r3, #0]
        pgrp1->OSFlagWaitList = (void *)pgrp2;
 80080d0:	68bb      	ldr	r3, [r7, #8]
 80080d2:	683a      	ldr	r2, [r7, #0]
 80080d4:	605a      	str	r2, [r3, #4]
#if OS_FLAG_NAME_EN > 0u
        pgrp1->OSFlagName     = (INT8U *)(void *)"?";               /* Unknown name                    */
 80080d6:	68bb      	ldr	r3, [r7, #8]
 80080d8:	4a0f      	ldr	r2, [pc, #60]	@ (8008118 <OS_FlagInit+0x7c>)
 80080da:	60da      	str	r2, [r3, #12]
    for (ix = 0u; ix < (OS_MAX_FLAGS - 1u); ix++) {                 /* Init. list of free EVENT FLAGS  */
 80080dc:	89fb      	ldrh	r3, [r7, #14]
 80080de:	3301      	adds	r3, #1
 80080e0:	81fb      	strh	r3, [r7, #14]
 80080e2:	89fb      	ldrh	r3, [r7, #14]
 80080e4:	2b03      	cmp	r3, #3
 80080e6:	d9e3      	bls.n	80080b0 <OS_FlagInit+0x14>
#endif
    }
    pgrp1                 = &OSFlagTbl[ix];
 80080e8:	89fb      	ldrh	r3, [r7, #14]
 80080ea:	011b      	lsls	r3, r3, #4
 80080ec:	4a09      	ldr	r2, [pc, #36]	@ (8008114 <OS_FlagInit+0x78>)
 80080ee:	4413      	add	r3, r2
 80080f0:	60bb      	str	r3, [r7, #8]
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 80080f2:	68bb      	ldr	r3, [r7, #8]
 80080f4:	2200      	movs	r2, #0
 80080f6:	701a      	strb	r2, [r3, #0]
    pgrp1->OSFlagWaitList = (void *)0;
 80080f8:	68bb      	ldr	r3, [r7, #8]
 80080fa:	2200      	movs	r2, #0
 80080fc:	605a      	str	r2, [r3, #4]
#if OS_FLAG_NAME_EN > 0u
    pgrp1->OSFlagName     = (INT8U *)(void *)"?";                   /* Unknown name                    */
 80080fe:	68bb      	ldr	r3, [r7, #8]
 8008100:	4a05      	ldr	r2, [pc, #20]	@ (8008118 <OS_FlagInit+0x7c>)
 8008102:	60da      	str	r2, [r3, #12]
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
 8008104:	4b05      	ldr	r3, [pc, #20]	@ (800811c <OS_FlagInit+0x80>)
 8008106:	4a03      	ldr	r2, [pc, #12]	@ (8008114 <OS_FlagInit+0x78>)
 8008108:	601a      	str	r2, [r3, #0]
#endif
}
 800810a:	bf00      	nop
 800810c:	3710      	adds	r7, #16
 800810e:	46bd      	mov	sp, r7
 8008110:	bd80      	pop	{r7, pc}
 8008112:	bf00      	nop
 8008114:	2000583c 	.word	0x2000583c
 8008118:	0800c56c 	.word	0x0800c56c
 800811c:	2000588c 	.word	0x2000588c

08008120 <OS_FlagTaskRdy>:
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode,
                                 OS_FLAGS      flags_rdy,
                                 INT8U         pend_stat)
{
 8008120:	b580      	push	{r7, lr}
 8008122:	b084      	sub	sp, #16
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]
 8008128:	460b      	mov	r3, r1
 800812a:	807b      	strh	r3, [r7, #2]
 800812c:	4613      	mov	r3, r2
 800812e:	707b      	strb	r3, [r7, #1]
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	689b      	ldr	r3, [r3, #8]
 8008134:	60bb      	str	r3, [r7, #8]
    ptcb->OSTCBDly       = 0u;
 8008136:	68bb      	ldr	r3, [r7, #8]
 8008138:	2200      	movs	r2, #0
 800813a:	635a      	str	r2, [r3, #52]	@ 0x34
    ptcb->OSTCBFlagsRdy  = flags_rdy;
 800813c:	68bb      	ldr	r3, [r7, #8]
 800813e:	887a      	ldrh	r2, [r7, #2]
 8008140:	861a      	strh	r2, [r3, #48]	@ 0x30
    ptcb->OSTCBStat     &= (INT8U)~(INT8U)OS_STAT_FLAG;
 8008142:	68bb      	ldr	r3, [r7, #8]
 8008144:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8008148:	f023 0320 	bic.w	r3, r3, #32
 800814c:	b2da      	uxtb	r2, r3
 800814e:	68bb      	ldr	r3, [r7, #8]
 8008150:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    ptcb->OSTCBStatPend  = pend_stat;
 8008154:	68bb      	ldr	r3, [r7, #8]
 8008156:	787a      	ldrb	r2, [r7, #1]
 8008158:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
 800815c:	68bb      	ldr	r3, [r7, #8]
 800815e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8008162:	2b00      	cmp	r3, #0
 8008164:	d11b      	bne.n	800819e <OS_FlagTaskRdy+0x7e>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
 8008166:	68bb      	ldr	r3, [r7, #8]
 8008168:	f893 203e 	ldrb.w	r2, [r3, #62]	@ 0x3e
 800816c:	4b11      	ldr	r3, [pc, #68]	@ (80081b4 <OS_FlagTaskRdy+0x94>)
 800816e:	781b      	ldrb	r3, [r3, #0]
 8008170:	4313      	orrs	r3, r2
 8008172:	b2da      	uxtb	r2, r3
 8008174:	4b0f      	ldr	r3, [pc, #60]	@ (80081b4 <OS_FlagTaskRdy+0x94>)
 8008176:	701a      	strb	r2, [r3, #0]
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 8008178:	68bb      	ldr	r3, [r7, #8]
 800817a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800817e:	461a      	mov	r2, r3
 8008180:	4b0d      	ldr	r3, [pc, #52]	@ (80081b8 <OS_FlagTaskRdy+0x98>)
 8008182:	5c9a      	ldrb	r2, [r3, r2]
 8008184:	68bb      	ldr	r3, [r7, #8]
 8008186:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800818a:	68b9      	ldr	r1, [r7, #8]
 800818c:	f891 103c 	ldrb.w	r1, [r1, #60]	@ 0x3c
 8008190:	4313      	orrs	r3, r2
 8008192:	b2da      	uxtb	r2, r3
 8008194:	4b08      	ldr	r3, [pc, #32]	@ (80081b8 <OS_FlagTaskRdy+0x98>)
 8008196:	545a      	strb	r2, [r3, r1]
        OS_TRACE_TASK_READY(ptcb);
        sched                   = OS_TRUE;
 8008198:	2301      	movs	r3, #1
 800819a:	73fb      	strb	r3, [r7, #15]
 800819c:	e001      	b.n	80081a2 <OS_FlagTaskRdy+0x82>
    } else {
        sched                   = OS_FALSE;
 800819e:	2300      	movs	r3, #0
 80081a0:	73fb      	strb	r3, [r7, #15]
    }
    OS_FlagUnlink(pnode);
 80081a2:	6878      	ldr	r0, [r7, #4]
 80081a4:	f000 f80a 	bl	80081bc <OS_FlagUnlink>
    return (sched);
 80081a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80081aa:	4618      	mov	r0, r3
 80081ac:	3710      	adds	r7, #16
 80081ae:	46bd      	mov	sp, r7
 80081b0:	bd80      	pop	{r7, pc}
 80081b2:	bf00      	nop
 80081b4:	20005aa4 	.word	0x20005aa4
 80081b8:	20005aa8 	.word	0x20005aa8

080081bc <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
 80081bc:	b480      	push	{r7}
 80081be:	b087      	sub	sp, #28
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	6078      	str	r0, [r7, #4]
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	685b      	ldr	r3, [r3, #4]
 80081c8:	617b      	str	r3, [r7, #20]
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	613b      	str	r3, [r7, #16]
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
 80081d0:	697b      	ldr	r3, [r7, #20]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d10c      	bne.n	80081f0 <OS_FlagUnlink+0x34>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	68db      	ldr	r3, [r3, #12]
 80081da:	60fb      	str	r3, [r7, #12]
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	693a      	ldr	r2, [r7, #16]
 80081e0:	605a      	str	r2, [r3, #4]
        if (pnode_next != (OS_FLAG_NODE *)0) {
 80081e2:	693b      	ldr	r3, [r7, #16]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d00c      	beq.n	8008202 <OS_FlagUnlink+0x46>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
 80081e8:	693b      	ldr	r3, [r7, #16]
 80081ea:	2200      	movs	r2, #0
 80081ec:	605a      	str	r2, [r3, #4]
 80081ee:	e008      	b.n	8008202 <OS_FlagUnlink+0x46>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
 80081f0:	697b      	ldr	r3, [r7, #20]
 80081f2:	693a      	ldr	r2, [r7, #16]
 80081f4:	601a      	str	r2, [r3, #0]
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
 80081f6:	693b      	ldr	r3, [r7, #16]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d002      	beq.n	8008202 <OS_FlagUnlink+0x46>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
 80081fc:	693b      	ldr	r3, [r7, #16]
 80081fe:	697a      	ldr	r2, [r7, #20]
 8008200:	605a      	str	r2, [r3, #4]
        }
    }
#if OS_TASK_DEL_EN > 0u
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	689b      	ldr	r3, [r3, #8]
 8008206:	60bb      	str	r3, [r7, #8]
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
 8008208:	68bb      	ldr	r3, [r7, #8]
 800820a:	2200      	movs	r2, #0
 800820c:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
}
 800820e:	bf00      	nop
 8008210:	371c      	adds	r7, #28
 8008212:	46bd      	mov	sp, r7
 8008214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008218:	4770      	bx	lr
	...

0800821c <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
 800821c:	b580      	push	{r7, lr}
 800821e:	b082      	sub	sp, #8
 8008220:	af00      	add	r7, sp, #0
#if OS_MAX_MEM_PART >= 2u
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
 8008222:	2178      	movs	r1, #120	@ 0x78
 8008224:	481a      	ldr	r0, [pc, #104]	@ (8008290 <OS_MemInit+0x74>)
 8008226:	f7ff f9c7 	bl	80075b8 <OS_MemClr>
    for (i = 0u; i < (OS_MAX_MEM_PART - 1u); i++) {       /* Init. list of free memory partitions      */
 800822a:	2300      	movs	r3, #0
 800822c:	80fb      	strh	r3, [r7, #6]
 800822e:	e017      	b.n	8008260 <OS_MemInit+0x44>
        pmem                = &OSMemTbl[i];               /* Point to memory control block (MCB)       */
 8008230:	88fa      	ldrh	r2, [r7, #6]
 8008232:	4613      	mov	r3, r2
 8008234:	005b      	lsls	r3, r3, #1
 8008236:	4413      	add	r3, r2
 8008238:	00db      	lsls	r3, r3, #3
 800823a:	4a15      	ldr	r2, [pc, #84]	@ (8008290 <OS_MemInit+0x74>)
 800823c:	4413      	add	r3, r2
 800823e:	603b      	str	r3, [r7, #0]
        pmem->OSMemFreeList = (void *)&OSMemTbl[i + 1u];  /* Chain list of free partitions             */
 8008240:	88fb      	ldrh	r3, [r7, #6]
 8008242:	1c5a      	adds	r2, r3, #1
 8008244:	4613      	mov	r3, r2
 8008246:	005b      	lsls	r3, r3, #1
 8008248:	4413      	add	r3, r2
 800824a:	00db      	lsls	r3, r3, #3
 800824c:	4a10      	ldr	r2, [pc, #64]	@ (8008290 <OS_MemInit+0x74>)
 800824e:	441a      	add	r2, r3
 8008250:	683b      	ldr	r3, [r7, #0]
 8008252:	605a      	str	r2, [r3, #4]
#if OS_MEM_NAME_EN > 0u
        pmem->OSMemName  = (INT8U *)(void *)"?";
 8008254:	683b      	ldr	r3, [r7, #0]
 8008256:	4a0f      	ldr	r2, [pc, #60]	@ (8008294 <OS_MemInit+0x78>)
 8008258:	615a      	str	r2, [r3, #20]
    for (i = 0u; i < (OS_MAX_MEM_PART - 1u); i++) {       /* Init. list of free memory partitions      */
 800825a:	88fb      	ldrh	r3, [r7, #6]
 800825c:	3301      	adds	r3, #1
 800825e:	80fb      	strh	r3, [r7, #6]
 8008260:	88fb      	ldrh	r3, [r7, #6]
 8008262:	2b03      	cmp	r3, #3
 8008264:	d9e4      	bls.n	8008230 <OS_MemInit+0x14>
#endif
    }
    pmem                = &OSMemTbl[i];
 8008266:	88fa      	ldrh	r2, [r7, #6]
 8008268:	4613      	mov	r3, r2
 800826a:	005b      	lsls	r3, r3, #1
 800826c:	4413      	add	r3, r2
 800826e:	00db      	lsls	r3, r3, #3
 8008270:	4a07      	ldr	r2, [pc, #28]	@ (8008290 <OS_MemInit+0x74>)
 8008272:	4413      	add	r3, r2
 8008274:	603b      	str	r3, [r7, #0]
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
 8008276:	683b      	ldr	r3, [r7, #0]
 8008278:	2200      	movs	r2, #0
 800827a:	605a      	str	r2, [r3, #4]
#if OS_MEM_NAME_EN > 0u
    pmem->OSMemName = (INT8U *)(void *)"?";
 800827c:	683b      	ldr	r3, [r7, #0]
 800827e:	4a05      	ldr	r2, [pc, #20]	@ (8008294 <OS_MemInit+0x78>)
 8008280:	615a      	str	r2, [r3, #20]
#endif

    OSMemFreeList   = &OSMemTbl[0];                       /* Point to beginning of free list           */
 8008282:	4b05      	ldr	r3, [pc, #20]	@ (8008298 <OS_MemInit+0x7c>)
 8008284:	4a02      	ldr	r2, [pc, #8]	@ (8008290 <OS_MemInit+0x74>)
 8008286:	601a      	str	r2, [r3, #0]
#endif
}
 8008288:	bf00      	nop
 800828a:	3708      	adds	r7, #8
 800828c:	46bd      	mov	sp, r7
 800828e:	bd80      	pop	{r7, pc}
 8008290:	200065b8 	.word	0x200065b8
 8008294:	0800c570 	.word	0x0800c570
 8008298:	200065b4 	.word	0x200065b4

0800829c <OSQCreate>:
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void    **start,
                      INT16U    size)
{
 800829c:	b580      	push	{r7, lr}
 800829e:	b086      	sub	sp, #24
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
 80082a4:	460b      	mov	r3, r1
 80082a6:	807b      	strh	r3, [r7, #2]
    OS_EVENT  *pevent;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0u;
 80082a8:	2300      	movs	r3, #0
 80082aa:	613b      	str	r3, [r7, #16]
        OS_SAFETY_CRITICAL_EXCEPTION();
        return ((OS_EVENT *)0);
    }
#endif

    if (OSIntNesting > 0u) {                     /* See if called from ISR ...                         */
 80082ac:	4b31      	ldr	r3, [pc, #196]	@ (8008374 <OSQCreate+0xd8>)
 80082ae:	781b      	ldrb	r3, [r3, #0]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d001      	beq.n	80082b8 <OSQCreate+0x1c>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
 80082b4:	2300      	movs	r3, #0
 80082b6:	e059      	b.n	800836c <OSQCreate+0xd0>
    }
    OS_ENTER_CRITICAL();
 80082b8:	2040      	movs	r0, #64	@ 0x40
 80082ba:	f7f7 ff98 	bl	80001ee <OS_CPU_SR_Save>
 80082be:	6138      	str	r0, [r7, #16]
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
 80082c0:	4b2d      	ldr	r3, [pc, #180]	@ (8008378 <OSQCreate+0xdc>)
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	617b      	str	r3, [r7, #20]
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
 80082c6:	4b2c      	ldr	r3, [pc, #176]	@ (8008378 <OSQCreate+0xdc>)
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d004      	beq.n	80082d8 <OSQCreate+0x3c>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
 80082ce:	4b2a      	ldr	r3, [pc, #168]	@ (8008378 <OSQCreate+0xdc>)
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	685b      	ldr	r3, [r3, #4]
 80082d4:	4a28      	ldr	r2, [pc, #160]	@ (8008378 <OSQCreate+0xdc>)
 80082d6:	6013      	str	r3, [r2, #0]
    }
    OS_EXIT_CRITICAL();
 80082d8:	6938      	ldr	r0, [r7, #16]
 80082da:	f7f7 ff96 	bl	800020a <OS_CPU_SR_Restore>
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
 80082de:	697b      	ldr	r3, [r7, #20]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d042      	beq.n	800836a <OSQCreate+0xce>
        OS_ENTER_CRITICAL();
 80082e4:	2040      	movs	r0, #64	@ 0x40
 80082e6:	f7f7 ff82 	bl	80001ee <OS_CPU_SR_Save>
 80082ea:	6138      	str	r0, [r7, #16]
        pq = OSQFreeList;                        /* Get a free queue control block                     */
 80082ec:	4b23      	ldr	r3, [pc, #140]	@ (800837c <OSQCreate+0xe0>)
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	60fb      	str	r3, [r7, #12]
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d02c      	beq.n	8008352 <OSQCreate+0xb6>
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
 80082f8:	4b20      	ldr	r3, [pc, #128]	@ (800837c <OSQCreate+0xe0>)
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	4a1f      	ldr	r2, [pc, #124]	@ (800837c <OSQCreate+0xe0>)
 8008300:	6013      	str	r3, [r2, #0]
            OS_EXIT_CRITICAL();
 8008302:	6938      	ldr	r0, [r7, #16]
 8008304:	f7f7 ff81 	bl	800020a <OS_CPU_SR_Restore>
            pq->OSQStart           = start;               /*      Initialize the queue                 */
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	687a      	ldr	r2, [r7, #4]
 800830c:	605a      	str	r2, [r3, #4]
            pq->OSQEnd             = &start[size];
 800830e:	887b      	ldrh	r3, [r7, #2]
 8008310:	009b      	lsls	r3, r3, #2
 8008312:	687a      	ldr	r2, [r7, #4]
 8008314:	441a      	add	r2, r3
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	609a      	str	r2, [r3, #8]
            pq->OSQIn              = start;
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	687a      	ldr	r2, [r7, #4]
 800831e:	60da      	str	r2, [r3, #12]
            pq->OSQOut             = start;
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	687a      	ldr	r2, [r7, #4]
 8008324:	611a      	str	r2, [r3, #16]
            pq->OSQSize            = size;
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	887a      	ldrh	r2, [r7, #2]
 800832a:	829a      	strh	r2, [r3, #20]
            pq->OSQEntries         = 0u;
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	2200      	movs	r2, #0
 8008330:	82da      	strh	r2, [r3, #22]
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
 8008332:	697b      	ldr	r3, [r7, #20]
 8008334:	2202      	movs	r2, #2
 8008336:	701a      	strb	r2, [r3, #0]
            pevent->OSEventCnt     = 0u;
 8008338:	697b      	ldr	r3, [r7, #20]
 800833a:	2200      	movs	r2, #0
 800833c:	811a      	strh	r2, [r3, #8]
            pevent->OSEventPtr     = pq;
 800833e:	697b      	ldr	r3, [r7, #20]
 8008340:	68fa      	ldr	r2, [r7, #12]
 8008342:	605a      	str	r2, [r3, #4]
#if OS_EVENT_NAME_EN > 0u
            pevent->OSEventName    = (INT8U *)(void *)"?";
 8008344:	697b      	ldr	r3, [r7, #20]
 8008346:	4a0e      	ldr	r2, [pc, #56]	@ (8008380 <OSQCreate+0xe4>)
 8008348:	615a      	str	r2, [r3, #20]
#endif
            OS_EventWaitListInit(pevent);                 /*      Initialize the wait list             */
 800834a:	6978      	ldr	r0, [r7, #20]
 800834c:	f7fe ffc3 	bl	80072d6 <OS_EventWaitListInit>
 8008350:	e00b      	b.n	800836a <OSQCreate+0xce>

            OS_TRACE_Q_CREATE(pevent, pevent->OSEventName);
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
 8008352:	4b09      	ldr	r3, [pc, #36]	@ (8008378 <OSQCreate+0xdc>)
 8008354:	681a      	ldr	r2, [r3, #0]
 8008356:	697b      	ldr	r3, [r7, #20]
 8008358:	605a      	str	r2, [r3, #4]
            OSEventFreeList    = pevent;
 800835a:	4a07      	ldr	r2, [pc, #28]	@ (8008378 <OSQCreate+0xdc>)
 800835c:	697b      	ldr	r3, [r7, #20]
 800835e:	6013      	str	r3, [r2, #0]
            OS_EXIT_CRITICAL();
 8008360:	6938      	ldr	r0, [r7, #16]
 8008362:	f7f7 ff52 	bl	800020a <OS_CPU_SR_Restore>
            pevent = (OS_EVENT *)0;
 8008366:	2300      	movs	r3, #0
 8008368:	617b      	str	r3, [r7, #20]
        }
    }
    return (pevent);
 800836a:	697b      	ldr	r3, [r7, #20]
}
 800836c:	4618      	mov	r0, r3
 800836e:	3718      	adds	r7, #24
 8008370:	46bd      	mov	sp, r7
 8008372:	bd80      	pop	{r7, pc}
 8008374:	20005aa0 	.word	0x20005aa0
 8008378:	20005748 	.word	0x20005748
 800837c:	20006630 	.word	0x20006630
 8008380:	0800c574 	.word	0x0800c574

08008384 <OSQPend>:
*/

void  *OSQPend (OS_EVENT  *pevent,
                INT32U     timeout,
                INT8U     *perr)
{
 8008384:	b580      	push	{r7, lr}
 8008386:	b088      	sub	sp, #32
 8008388:	af00      	add	r7, sp, #0
 800838a:	60f8      	str	r0, [r7, #12]
 800838c:	60b9      	str	r1, [r7, #8]
 800838e:	607a      	str	r2, [r7, #4]
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0u;
 8008390:	2300      	movs	r3, #0
 8008392:	61bb      	str	r3, [r7, #24]
        return ((void *)0);
    }
#endif

#if OS_ARG_CHK_EN > 0u
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	2b00      	cmp	r3, #0
 8008398:	d104      	bne.n	80083a4 <OSQPend+0x20>
        *perr = OS_ERR_PEVENT_NULL;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	2204      	movs	r2, #4
 800839e:	701a      	strb	r2, [r3, #0]
        return ((void *)0);
 80083a0:	2300      	movs	r3, #0
 80083a2:	e0a5      	b.n	80084f0 <OSQPend+0x16c>
    }
#endif

    OS_TRACE_Q_PEND_ENTER(pevent, timeout);

    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	781b      	ldrb	r3, [r3, #0]
 80083a8:	2b02      	cmp	r3, #2
 80083aa:	d004      	beq.n	80083b6 <OSQPend+0x32>
        *perr = OS_ERR_EVENT_TYPE;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	2201      	movs	r2, #1
 80083b0:	701a      	strb	r2, [r3, #0]
        OS_TRACE_Q_PEND_EXIT(*perr);
        return ((void *)0);
 80083b2:	2300      	movs	r3, #0
 80083b4:	e09c      	b.n	80084f0 <OSQPend+0x16c>
    }
    if (OSIntNesting > 0u) {                     /* See if called from ISR ...                         */
 80083b6:	4b50      	ldr	r3, [pc, #320]	@ (80084f8 <OSQPend+0x174>)
 80083b8:	781b      	ldrb	r3, [r3, #0]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d004      	beq.n	80083c8 <OSQPend+0x44>
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	2202      	movs	r2, #2
 80083c2:	701a      	strb	r2, [r3, #0]
        OS_TRACE_Q_PEND_EXIT(*perr);
        return ((void *)0);
 80083c4:	2300      	movs	r3, #0
 80083c6:	e093      	b.n	80084f0 <OSQPend+0x16c>
    }
    if (OSLockNesting > 0u) {                    /* See if called with scheduler locked ...            */
 80083c8:	4b4c      	ldr	r3, [pc, #304]	@ (80084fc <OSQPend+0x178>)
 80083ca:	781b      	ldrb	r3, [r3, #0]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d004      	beq.n	80083da <OSQPend+0x56>
        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	220d      	movs	r2, #13
 80083d4:	701a      	strb	r2, [r3, #0]
        OS_TRACE_Q_PEND_EXIT(*perr);
        return ((void *)0);
 80083d6:	2300      	movs	r3, #0
 80083d8:	e08a      	b.n	80084f0 <OSQPend+0x16c>
    }
    OS_ENTER_CRITICAL();
 80083da:	2040      	movs	r0, #64	@ 0x40
 80083dc:	f7f7 ff07 	bl	80001ee <OS_CPU_SR_Save>
 80083e0:	61b8      	str	r0, [r7, #24]
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	685b      	ldr	r3, [r3, #4]
 80083e6:	617b      	str	r3, [r7, #20]
    if (pq->OSQEntries > 0u) {                   /* See if any messages in the queue                   */
 80083e8:	697b      	ldr	r3, [r7, #20]
 80083ea:	8adb      	ldrh	r3, [r3, #22]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d01e      	beq.n	800842e <OSQPend+0xaa>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
 80083f0:	697b      	ldr	r3, [r7, #20]
 80083f2:	691b      	ldr	r3, [r3, #16]
 80083f4:	1d19      	adds	r1, r3, #4
 80083f6:	697a      	ldr	r2, [r7, #20]
 80083f8:	6111      	str	r1, [r2, #16]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	61fb      	str	r3, [r7, #28]
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
 80083fe:	697b      	ldr	r3, [r7, #20]
 8008400:	8adb      	ldrh	r3, [r3, #22]
 8008402:	3b01      	subs	r3, #1
 8008404:	b29a      	uxth	r2, r3
 8008406:	697b      	ldr	r3, [r7, #20]
 8008408:	82da      	strh	r2, [r3, #22]
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
 800840a:	697b      	ldr	r3, [r7, #20]
 800840c:	691a      	ldr	r2, [r3, #16]
 800840e:	697b      	ldr	r3, [r7, #20]
 8008410:	689b      	ldr	r3, [r3, #8]
 8008412:	429a      	cmp	r2, r3
 8008414:	d103      	bne.n	800841e <OSQPend+0x9a>
            pq->OSQOut = pq->OSQStart;
 8008416:	697b      	ldr	r3, [r7, #20]
 8008418:	685a      	ldr	r2, [r3, #4]
 800841a:	697b      	ldr	r3, [r7, #20]
 800841c:	611a      	str	r2, [r3, #16]
        }
        OS_EXIT_CRITICAL();
 800841e:	69b8      	ldr	r0, [r7, #24]
 8008420:	f7f7 fef3 	bl	800020a <OS_CPU_SR_Restore>
        *perr = OS_ERR_NONE;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	2200      	movs	r2, #0
 8008428:	701a      	strb	r2, [r3, #0]
        OS_TRACE_Q_PEND_EXIT(*perr);
        return (pmsg);                           /* Return message received                            */
 800842a:	69fb      	ldr	r3, [r7, #28]
 800842c:	e060      	b.n	80084f0 <OSQPend+0x16c>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
 800842e:	4b34      	ldr	r3, [pc, #208]	@ (8008500 <OSQPend+0x17c>)
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	f893 2038 	ldrb.w	r2, [r3, #56]	@ 0x38
 8008436:	4b32      	ldr	r3, [pc, #200]	@ (8008500 <OSQPend+0x17c>)
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	f042 0204 	orr.w	r2, r2, #4
 800843e:	b2d2      	uxtb	r2, r2
 8008440:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 8008444:	4b2e      	ldr	r3, [pc, #184]	@ (8008500 <OSQPend+0x17c>)
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	2200      	movs	r2, #0
 800844a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
    OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
 800844e:	4b2c      	ldr	r3, [pc, #176]	@ (8008500 <OSQPend+0x17c>)
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	68ba      	ldr	r2, [r7, #8]
 8008454:	635a      	str	r2, [r3, #52]	@ 0x34
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
 8008456:	68f8      	ldr	r0, [r7, #12]
 8008458:	f7fe fe6e 	bl	8007138 <OS_EventTaskWait>
    OS_EXIT_CRITICAL();
 800845c:	69b8      	ldr	r0, [r7, #24]
 800845e:	f7f7 fed4 	bl	800020a <OS_CPU_SR_Restore>
    OS_Sched();                                  /* Find next highest priority task ready to run       */
 8008462:	f7ff f8c3 	bl	80075ec <OS_Sched>
    OS_ENTER_CRITICAL();
 8008466:	2040      	movs	r0, #64	@ 0x40
 8008468:	f7f7 fec1 	bl	80001ee <OS_CPU_SR_Save>
 800846c:	61b8      	str	r0, [r7, #24]
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
 800846e:	4b24      	ldr	r3, [pc, #144]	@ (8008500 <OSQPend+0x17c>)
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8008476:	2b00      	cmp	r3, #0
 8008478:	d002      	beq.n	8008480 <OSQPend+0xfc>
 800847a:	2b02      	cmp	r3, #2
 800847c:	d008      	beq.n	8008490 <OSQPend+0x10c>
 800847e:	e00d      	b.n	800849c <OSQPend+0x118>
        case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
             pmsg =  OSTCBCur->OSTCBMsg;
 8008480:	4b1f      	ldr	r3, [pc, #124]	@ (8008500 <OSQPend+0x17c>)
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008486:	61fb      	str	r3, [r7, #28]
            *perr =  OS_ERR_NONE;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	2200      	movs	r2, #0
 800848c:	701a      	strb	r2, [r3, #0]
             break;
 800848e:	e011      	b.n	80084b4 <OSQPend+0x130>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
 8008490:	2300      	movs	r3, #0
 8008492:	61fb      	str	r3, [r7, #28]
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	220e      	movs	r2, #14
 8008498:	701a      	strb	r2, [r3, #0]
             break;
 800849a:	e00b      	b.n	80084b4 <OSQPend+0x130>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
 800849c:	4b18      	ldr	r3, [pc, #96]	@ (8008500 <OSQPend+0x17c>)
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	68f9      	ldr	r1, [r7, #12]
 80084a2:	4618      	mov	r0, r3
 80084a4:	f7fe fea0 	bl	80071e8 <OS_EventTaskRemove>
             pmsg = (void *)0;
 80084a8:	2300      	movs	r3, #0
 80084aa:	61fb      	str	r3, [r7, #28]
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	220a      	movs	r2, #10
 80084b0:	701a      	strb	r2, [r3, #0]
             break;
 80084b2:	bf00      	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
 80084b4:	4b12      	ldr	r3, [pc, #72]	@ (8008500 <OSQPend+0x17c>)
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	2200      	movs	r2, #0
 80084ba:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
 80084be:	4b10      	ldr	r3, [pc, #64]	@ (8008500 <OSQPend+0x17c>)
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	2200      	movs	r2, #0
 80084c4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
 80084c8:	4b0d      	ldr	r3, [pc, #52]	@ (8008500 <OSQPend+0x17c>)
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	2200      	movs	r2, #0
 80084ce:	61da      	str	r2, [r3, #28]
#if (OS_EVENT_MULTI_EN > 0u)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
 80084d0:	4b0b      	ldr	r3, [pc, #44]	@ (8008500 <OSQPend+0x17c>)
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	2200      	movs	r2, #0
 80084d6:	621a      	str	r2, [r3, #32]
    OSTCBCur->OSTCBEventMultiRdy = (OS_EVENT  *)0;
 80084d8:	4b09      	ldr	r3, [pc, #36]	@ (8008500 <OSQPend+0x17c>)
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	2200      	movs	r2, #0
 80084de:	625a      	str	r2, [r3, #36]	@ 0x24
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
 80084e0:	4b07      	ldr	r3, [pc, #28]	@ (8008500 <OSQPend+0x17c>)
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	2200      	movs	r2, #0
 80084e6:	629a      	str	r2, [r3, #40]	@ 0x28
    OS_EXIT_CRITICAL();
 80084e8:	69b8      	ldr	r0, [r7, #24]
 80084ea:	f7f7 fe8e 	bl	800020a <OS_CPU_SR_Restore>
    OS_TRACE_Q_PEND_EXIT(*perr);

    return (pmsg);                                    /* Return received message                       */
 80084ee:	69fb      	ldr	r3, [r7, #28]
}
 80084f0:	4618      	mov	r0, r3
 80084f2:	3720      	adds	r7, #32
 80084f4:	46bd      	mov	sp, r7
 80084f6:	bd80      	pop	{r7, pc}
 80084f8:	20005aa0 	.word	0x20005aa0
 80084fc:	20005aa1 	.word	0x20005aa1
 8008500:	20005cb8 	.word	0x20005cb8

08008504 <OSQPost>:
*/

#if OS_Q_POST_EN > 0u
INT8U  OSQPost (OS_EVENT  *pevent,
                void      *pmsg)
{
 8008504:	b580      	push	{r7, lr}
 8008506:	b084      	sub	sp, #16
 8008508:	af00      	add	r7, sp, #0
 800850a:	6078      	str	r0, [r7, #4]
 800850c:	6039      	str	r1, [r7, #0]
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3u                           /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0u;
 800850e:	2300      	movs	r3, #0
 8008510:	60fb      	str	r3, [r7, #12]
#endif


#if OS_ARG_CHK_EN > 0u
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	2b00      	cmp	r3, #0
 8008516:	d101      	bne.n	800851c <OSQPost+0x18>
        return (OS_ERR_PEVENT_NULL);
 8008518:	2304      	movs	r3, #4
 800851a:	e043      	b.n	80085a4 <OSQPost+0xa0>
    }
#endif

    OS_TRACE_Q_POST_ENTER(pevent);

    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	781b      	ldrb	r3, [r3, #0]
 8008520:	2b02      	cmp	r3, #2
 8008522:	d001      	beq.n	8008528 <OSQPost+0x24>
        OS_TRACE_Q_POST_EXIT(OS_ERR_EVENT_TYPE);
        return (OS_ERR_EVENT_TYPE);
 8008524:	2301      	movs	r3, #1
 8008526:	e03d      	b.n	80085a4 <OSQPost+0xa0>
    }
    OS_ENTER_CRITICAL();
 8008528:	2040      	movs	r0, #64	@ 0x40
 800852a:	f7f7 fe60 	bl	80001ee <OS_CPU_SR_Save>
 800852e:	60f8      	str	r0, [r7, #12]
    if (pevent->OSEventGrp != 0u) {                    /* See if any task pending on queue             */
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	7a9b      	ldrb	r3, [r3, #10]
 8008534:	2b00      	cmp	r3, #0
 8008536:	d00c      	beq.n	8008552 <OSQPost+0x4e>
                                                       /* Ready highest priority task waiting on event */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
 8008538:	2300      	movs	r3, #0
 800853a:	2204      	movs	r2, #4
 800853c:	6839      	ldr	r1, [r7, #0]
 800853e:	6878      	ldr	r0, [r7, #4]
 8008540:	f7fe fd84 	bl	800704c <OS_EventTaskRdy>
        OS_EXIT_CRITICAL();
 8008544:	68f8      	ldr	r0, [r7, #12]
 8008546:	f7f7 fe60 	bl	800020a <OS_CPU_SR_Restore>
        OS_Sched();                                    /* Find highest priority task ready to run      */
 800854a:	f7ff f84f 	bl	80075ec <OS_Sched>
        OS_TRACE_Q_POST_EXIT(OS_ERR_NONE);
        return (OS_ERR_NONE);
 800854e:	2300      	movs	r3, #0
 8008550:	e028      	b.n	80085a4 <OSQPost+0xa0>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	685b      	ldr	r3, [r3, #4]
 8008556:	60bb      	str	r3, [r7, #8]
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
 8008558:	68bb      	ldr	r3, [r7, #8]
 800855a:	8ada      	ldrh	r2, [r3, #22]
 800855c:	68bb      	ldr	r3, [r7, #8]
 800855e:	8a9b      	ldrh	r3, [r3, #20]
 8008560:	429a      	cmp	r2, r3
 8008562:	d304      	bcc.n	800856e <OSQPost+0x6a>
        OS_EXIT_CRITICAL();
 8008564:	68f8      	ldr	r0, [r7, #12]
 8008566:	f7f7 fe50 	bl	800020a <OS_CPU_SR_Restore>
        OS_TRACE_Q_POST_EXIT(OS_ERR_Q_FULL);
        return (OS_ERR_Q_FULL);
 800856a:	231e      	movs	r3, #30
 800856c:	e01a      	b.n	80085a4 <OSQPost+0xa0>
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
 800856e:	68bb      	ldr	r3, [r7, #8]
 8008570:	68db      	ldr	r3, [r3, #12]
 8008572:	1d19      	adds	r1, r3, #4
 8008574:	68ba      	ldr	r2, [r7, #8]
 8008576:	60d1      	str	r1, [r2, #12]
 8008578:	683a      	ldr	r2, [r7, #0]
 800857a:	601a      	str	r2, [r3, #0]
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
 800857c:	68bb      	ldr	r3, [r7, #8]
 800857e:	8adb      	ldrh	r3, [r3, #22]
 8008580:	3301      	adds	r3, #1
 8008582:	b29a      	uxth	r2, r3
 8008584:	68bb      	ldr	r3, [r7, #8]
 8008586:	82da      	strh	r2, [r3, #22]
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
 8008588:	68bb      	ldr	r3, [r7, #8]
 800858a:	68da      	ldr	r2, [r3, #12]
 800858c:	68bb      	ldr	r3, [r7, #8]
 800858e:	689b      	ldr	r3, [r3, #8]
 8008590:	429a      	cmp	r2, r3
 8008592:	d103      	bne.n	800859c <OSQPost+0x98>
        pq->OSQIn = pq->OSQStart;
 8008594:	68bb      	ldr	r3, [r7, #8]
 8008596:	685a      	ldr	r2, [r3, #4]
 8008598:	68bb      	ldr	r3, [r7, #8]
 800859a:	60da      	str	r2, [r3, #12]
    }
    OS_EXIT_CRITICAL();
 800859c:	68f8      	ldr	r0, [r7, #12]
 800859e:	f7f7 fe34 	bl	800020a <OS_CPU_SR_Restore>
    OS_TRACE_Q_POST_EXIT(OS_ERR_NONE);

    return (OS_ERR_NONE);
 80085a2:	2300      	movs	r3, #0
}
 80085a4:	4618      	mov	r0, r3
 80085a6:	3710      	adds	r7, #16
 80085a8:	46bd      	mov	sp, r7
 80085aa:	bd80      	pop	{r7, pc}

080085ac <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
 80085ac:	b580      	push	{r7, lr}
 80085ae:	b084      	sub	sp, #16
 80085b0:	af00      	add	r7, sp, #0
    OS_Q    *pq1;
    OS_Q    *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
 80085b2:	2160      	movs	r1, #96	@ 0x60
 80085b4:	4819      	ldr	r0, [pc, #100]	@ (800861c <OS_QInit+0x70>)
 80085b6:	f7fe ffff 	bl	80075b8 <OS_MemClr>
    for (ix = 0u; ix < (OS_MAX_QS - 1u); ix++) {     /* Init. list of free QUEUE control blocks        */
 80085ba:	2300      	movs	r3, #0
 80085bc:	81fb      	strh	r3, [r7, #14]
 80085be:	e018      	b.n	80085f2 <OS_QInit+0x46>
        ix_next = ix + 1u;
 80085c0:	89fb      	ldrh	r3, [r7, #14]
 80085c2:	3301      	adds	r3, #1
 80085c4:	80fb      	strh	r3, [r7, #6]
        pq1 = &OSQTbl[ix];
 80085c6:	89fa      	ldrh	r2, [r7, #14]
 80085c8:	4613      	mov	r3, r2
 80085ca:	005b      	lsls	r3, r3, #1
 80085cc:	4413      	add	r3, r2
 80085ce:	00db      	lsls	r3, r3, #3
 80085d0:	4a12      	ldr	r2, [pc, #72]	@ (800861c <OS_QInit+0x70>)
 80085d2:	4413      	add	r3, r2
 80085d4:	60bb      	str	r3, [r7, #8]
        pq2 = &OSQTbl[ix_next];
 80085d6:	88fa      	ldrh	r2, [r7, #6]
 80085d8:	4613      	mov	r3, r2
 80085da:	005b      	lsls	r3, r3, #1
 80085dc:	4413      	add	r3, r2
 80085de:	00db      	lsls	r3, r3, #3
 80085e0:	4a0e      	ldr	r2, [pc, #56]	@ (800861c <OS_QInit+0x70>)
 80085e2:	4413      	add	r3, r2
 80085e4:	603b      	str	r3, [r7, #0]
        pq1->OSQPtr = pq2;
 80085e6:	68bb      	ldr	r3, [r7, #8]
 80085e8:	683a      	ldr	r2, [r7, #0]
 80085ea:	601a      	str	r2, [r3, #0]
    for (ix = 0u; ix < (OS_MAX_QS - 1u); ix++) {     /* Init. list of free QUEUE control blocks        */
 80085ec:	89fb      	ldrh	r3, [r7, #14]
 80085ee:	3301      	adds	r3, #1
 80085f0:	81fb      	strh	r3, [r7, #14]
 80085f2:	89fb      	ldrh	r3, [r7, #14]
 80085f4:	2b02      	cmp	r3, #2
 80085f6:	d9e3      	bls.n	80085c0 <OS_QInit+0x14>
    }
    pq1         = &OSQTbl[ix];
 80085f8:	89fa      	ldrh	r2, [r7, #14]
 80085fa:	4613      	mov	r3, r2
 80085fc:	005b      	lsls	r3, r3, #1
 80085fe:	4413      	add	r3, r2
 8008600:	00db      	lsls	r3, r3, #3
 8008602:	4a06      	ldr	r2, [pc, #24]	@ (800861c <OS_QInit+0x70>)
 8008604:	4413      	add	r3, r2
 8008606:	60bb      	str	r3, [r7, #8]
    pq1->OSQPtr = (OS_Q *)0;
 8008608:	68bb      	ldr	r3, [r7, #8]
 800860a:	2200      	movs	r2, #0
 800860c:	601a      	str	r2, [r3, #0]
    OSQFreeList = &OSQTbl[0];
 800860e:	4b04      	ldr	r3, [pc, #16]	@ (8008620 <OS_QInit+0x74>)
 8008610:	4a02      	ldr	r2, [pc, #8]	@ (800861c <OS_QInit+0x70>)
 8008612:	601a      	str	r2, [r3, #0]
#endif
}
 8008614:	bf00      	nop
 8008616:	3710      	adds	r7, #16
 8008618:	46bd      	mov	sp, r7
 800861a:	bd80      	pop	{r7, pc}
 800861c:	20006634 	.word	0x20006634
 8008620:	20006630 	.word	0x20006630

08008624 <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
 8008624:	b580      	push	{r7, lr}
 8008626:	b084      	sub	sp, #16
 8008628:	af00      	add	r7, sp, #0
 800862a:	4603      	mov	r3, r0
 800862c:	80fb      	strh	r3, [r7, #6]
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0u;
 800862e:	2300      	movs	r3, #0
 8008630:	60fb      	str	r3, [r7, #12]
        OS_SAFETY_CRITICAL_EXCEPTION();
        return ((OS_EVENT *)0);
    }
#endif

    if (OSIntNesting > 0u) {                               /* See if called from ISR ...               */
 8008632:	4b18      	ldr	r3, [pc, #96]	@ (8008694 <OSSemCreate+0x70>)
 8008634:	781b      	ldrb	r3, [r3, #0]
 8008636:	2b00      	cmp	r3, #0
 8008638:	d001      	beq.n	800863e <OSSemCreate+0x1a>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
 800863a:	2300      	movs	r3, #0
 800863c:	e025      	b.n	800868a <OSSemCreate+0x66>
    }
    OS_ENTER_CRITICAL();
 800863e:	2040      	movs	r0, #64	@ 0x40
 8008640:	f7f7 fdd5 	bl	80001ee <OS_CPU_SR_Save>
 8008644:	60f8      	str	r0, [r7, #12]
    pevent = OSEventFreeList;                              /* Get next free event control block        */
 8008646:	4b14      	ldr	r3, [pc, #80]	@ (8008698 <OSSemCreate+0x74>)
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	60bb      	str	r3, [r7, #8]
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
 800864c:	4b12      	ldr	r3, [pc, #72]	@ (8008698 <OSSemCreate+0x74>)
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	2b00      	cmp	r3, #0
 8008652:	d004      	beq.n	800865e <OSSemCreate+0x3a>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
 8008654:	4b10      	ldr	r3, [pc, #64]	@ (8008698 <OSSemCreate+0x74>)
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	685b      	ldr	r3, [r3, #4]
 800865a:	4a0f      	ldr	r2, [pc, #60]	@ (8008698 <OSSemCreate+0x74>)
 800865c:	6013      	str	r3, [r2, #0]
    }
    OS_EXIT_CRITICAL();
 800865e:	68f8      	ldr	r0, [r7, #12]
 8008660:	f7f7 fdd3 	bl	800020a <OS_CPU_SR_Restore>
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
 8008664:	68bb      	ldr	r3, [r7, #8]
 8008666:	2b00      	cmp	r3, #0
 8008668:	d00e      	beq.n	8008688 <OSSemCreate+0x64>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
 800866a:	68bb      	ldr	r3, [r7, #8]
 800866c:	2203      	movs	r2, #3
 800866e:	701a      	strb	r2, [r3, #0]
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
 8008670:	68bb      	ldr	r3, [r7, #8]
 8008672:	88fa      	ldrh	r2, [r7, #6]
 8008674:	811a      	strh	r2, [r3, #8]
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
 8008676:	68bb      	ldr	r3, [r7, #8]
 8008678:	2200      	movs	r2, #0
 800867a:	605a      	str	r2, [r3, #4]
#if OS_EVENT_NAME_EN > 0u
        pevent->OSEventName    = (INT8U *)(void *)"?";
 800867c:	68bb      	ldr	r3, [r7, #8]
 800867e:	4a07      	ldr	r2, [pc, #28]	@ (800869c <OSSemCreate+0x78>)
 8008680:	615a      	str	r2, [r3, #20]
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
 8008682:	68b8      	ldr	r0, [r7, #8]
 8008684:	f7fe fe27 	bl	80072d6 <OS_EventWaitListInit>

        OS_TRACE_SEM_CREATE(pevent, pevent->OSEventName);
    }
    return (pevent);
 8008688:	68bb      	ldr	r3, [r7, #8]
}
 800868a:	4618      	mov	r0, r3
 800868c:	3710      	adds	r7, #16
 800868e:	46bd      	mov	sp, r7
 8008690:	bd80      	pop	{r7, pc}
 8008692:	bf00      	nop
 8008694:	20005aa0 	.word	0x20005aa0
 8008698:	20005748 	.word	0x20005748
 800869c:	0800c578 	.word	0x0800c578

080086a0 <OSSemPend>:
*/

void  OSSemPend (OS_EVENT  *pevent,
                 INT32U     timeout,
                 INT8U     *perr)
{
 80086a0:	b580      	push	{r7, lr}
 80086a2:	b086      	sub	sp, #24
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	60f8      	str	r0, [r7, #12]
 80086a8:	60b9      	str	r1, [r7, #8]
 80086aa:	607a      	str	r2, [r7, #4]
#if OS_CRITICAL_METHOD == 3u                          /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0u;
 80086ac:	2300      	movs	r3, #0
 80086ae:	617b      	str	r3, [r7, #20]
        return;
    }
#endif

#if OS_ARG_CHK_EN > 0u
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d103      	bne.n	80086be <OSSemPend+0x1e>
        *perr = OS_ERR_PEVENT_NULL;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	2204      	movs	r2, #4
 80086ba:	701a      	strb	r2, [r3, #0]
        return;
 80086bc:	e080      	b.n	80087c0 <OSSemPend+0x120>
    }
#endif

    OS_TRACE_SEM_PEND_ENTER(pevent, timeout);

    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	781b      	ldrb	r3, [r3, #0]
 80086c2:	2b03      	cmp	r3, #3
 80086c4:	d003      	beq.n	80086ce <OSSemPend+0x2e>
        *perr = OS_ERR_EVENT_TYPE;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	2201      	movs	r2, #1
 80086ca:	701a      	strb	r2, [r3, #0]
        OS_TRACE_SEM_PEND_EXIT(*perr);
        return;
 80086cc:	e078      	b.n	80087c0 <OSSemPend+0x120>
    }
    if (OSIntNesting > 0u) {                          /* See if called from ISR ...                    */
 80086ce:	4b3e      	ldr	r3, [pc, #248]	@ (80087c8 <OSSemPend+0x128>)
 80086d0:	781b      	ldrb	r3, [r3, #0]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d003      	beq.n	80086de <OSSemPend+0x3e>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	2202      	movs	r2, #2
 80086da:	701a      	strb	r2, [r3, #0]
        OS_TRACE_SEM_PEND_EXIT(*perr);
        return;
 80086dc:	e070      	b.n	80087c0 <OSSemPend+0x120>
    }
    if (OSLockNesting > 0u) {                         /* See if called with scheduler locked ...       */
 80086de:	4b3b      	ldr	r3, [pc, #236]	@ (80087cc <OSSemPend+0x12c>)
 80086e0:	781b      	ldrb	r3, [r3, #0]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d003      	beq.n	80086ee <OSSemPend+0x4e>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	220d      	movs	r2, #13
 80086ea:	701a      	strb	r2, [r3, #0]
        OS_TRACE_SEM_PEND_EXIT(*perr);
        return;
 80086ec:	e068      	b.n	80087c0 <OSSemPend+0x120>
    }
    OS_ENTER_CRITICAL();
 80086ee:	2040      	movs	r0, #64	@ 0x40
 80086f0:	f7f7 fd7d 	bl	80001ee <OS_CPU_SR_Save>
 80086f4:	6178      	str	r0, [r7, #20]
    if (pevent->OSEventCnt > 0u) {                    /* If sem. is positive, resource available ...   */
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	891b      	ldrh	r3, [r3, #8]
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d00c      	beq.n	8008718 <OSSemPend+0x78>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	891b      	ldrh	r3, [r3, #8]
 8008702:	3b01      	subs	r3, #1
 8008704:	b29a      	uxth	r2, r3
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	811a      	strh	r2, [r3, #8]
        OS_EXIT_CRITICAL();
 800870a:	6978      	ldr	r0, [r7, #20]
 800870c:	f7f7 fd7d 	bl	800020a <OS_CPU_SR_Restore>
        *perr = OS_ERR_NONE;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	2200      	movs	r2, #0
 8008714:	701a      	strb	r2, [r3, #0]
        OS_TRACE_SEM_PEND_EXIT(*perr);
        return;
 8008716:	e053      	b.n	80087c0 <OSSemPend+0x120>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
 8008718:	4b2d      	ldr	r3, [pc, #180]	@ (80087d0 <OSSemPend+0x130>)
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	f893 2038 	ldrb.w	r2, [r3, #56]	@ 0x38
 8008720:	4b2b      	ldr	r3, [pc, #172]	@ (80087d0 <OSSemPend+0x130>)
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	f042 0201 	orr.w	r2, r2, #1
 8008728:	b2d2      	uxtb	r2, r2
 800872a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 800872e:	4b28      	ldr	r3, [pc, #160]	@ (80087d0 <OSSemPend+0x130>)
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	2200      	movs	r2, #0
 8008734:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
 8008738:	4b25      	ldr	r3, [pc, #148]	@ (80087d0 <OSSemPend+0x130>)
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	68ba      	ldr	r2, [r7, #8]
 800873e:	635a      	str	r2, [r3, #52]	@ 0x34
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
 8008740:	68f8      	ldr	r0, [r7, #12]
 8008742:	f7fe fcf9 	bl	8007138 <OS_EventTaskWait>
    OS_EXIT_CRITICAL();
 8008746:	6978      	ldr	r0, [r7, #20]
 8008748:	f7f7 fd5f 	bl	800020a <OS_CPU_SR_Restore>
    OS_Sched();                                       /* Find next highest priority task ready         */
 800874c:	f7fe ff4e 	bl	80075ec <OS_Sched>
    OS_ENTER_CRITICAL();
 8008750:	2040      	movs	r0, #64	@ 0x40
 8008752:	f7f7 fd4c 	bl	80001ee <OS_CPU_SR_Save>
 8008756:	6178      	str	r0, [r7, #20]
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
 8008758:	4b1d      	ldr	r3, [pc, #116]	@ (80087d0 <OSSemPend+0x130>)
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8008760:	2b00      	cmp	r3, #0
 8008762:	d002      	beq.n	800876a <OSSemPend+0xca>
 8008764:	2b02      	cmp	r3, #2
 8008766:	d004      	beq.n	8008772 <OSSemPend+0xd2>
 8008768:	e007      	b.n	800877a <OSSemPend+0xda>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	2200      	movs	r2, #0
 800876e:	701a      	strb	r2, [r3, #0]
             break;
 8008770:	e00d      	b.n	800878e <OSSemPend+0xee>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	220e      	movs	r2, #14
 8008776:	701a      	strb	r2, [r3, #0]
             break;
 8008778:	e009      	b.n	800878e <OSSemPend+0xee>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
 800877a:	4b15      	ldr	r3, [pc, #84]	@ (80087d0 <OSSemPend+0x130>)
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	68f9      	ldr	r1, [r7, #12]
 8008780:	4618      	mov	r0, r3
 8008782:	f7fe fd31 	bl	80071e8 <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	220a      	movs	r2, #10
 800878a:	701a      	strb	r2, [r3, #0]
             break;
 800878c:	bf00      	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
 800878e:	4b10      	ldr	r3, [pc, #64]	@ (80087d0 <OSSemPend+0x130>)
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	2200      	movs	r2, #0
 8008794:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
 8008798:	4b0d      	ldr	r3, [pc, #52]	@ (80087d0 <OSSemPend+0x130>)
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	2200      	movs	r2, #0
 800879e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
 80087a2:	4b0b      	ldr	r3, [pc, #44]	@ (80087d0 <OSSemPend+0x130>)
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	2200      	movs	r2, #0
 80087a8:	61da      	str	r2, [r3, #28]
#if (OS_EVENT_MULTI_EN > 0u)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
 80087aa:	4b09      	ldr	r3, [pc, #36]	@ (80087d0 <OSSemPend+0x130>)
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	2200      	movs	r2, #0
 80087b0:	621a      	str	r2, [r3, #32]
    OSTCBCur->OSTCBEventMultiRdy = (OS_EVENT  *)0;
 80087b2:	4b07      	ldr	r3, [pc, #28]	@ (80087d0 <OSSemPend+0x130>)
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	2200      	movs	r2, #0
 80087b8:	625a      	str	r2, [r3, #36]	@ 0x24
#endif
    OS_EXIT_CRITICAL();
 80087ba:	6978      	ldr	r0, [r7, #20]
 80087bc:	f7f7 fd25 	bl	800020a <OS_CPU_SR_Restore>

    OS_TRACE_SEM_PEND_EXIT(*perr);
}
 80087c0:	3718      	adds	r7, #24
 80087c2:	46bd      	mov	sp, r7
 80087c4:	bd80      	pop	{r7, pc}
 80087c6:	bf00      	nop
 80087c8:	20005aa0 	.word	0x20005aa0
 80087cc:	20005aa1 	.word	0x20005aa1
 80087d0:	20005cb8 	.word	0x20005cb8

080087d4 <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
 80087d4:	b580      	push	{r7, lr}
 80087d6:	b084      	sub	sp, #16
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]
#if OS_CRITICAL_METHOD == 3u                          /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0u;
 80087dc:	2300      	movs	r3, #0
 80087de:	60fb      	str	r3, [r7, #12]
#endif


#if OS_ARG_CHK_EN > 0u
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d101      	bne.n	80087ea <OSSemPost+0x16>
        return (OS_ERR_PEVENT_NULL);
 80087e6:	2304      	movs	r3, #4
 80087e8:	e02f      	b.n	800884a <OSSemPost+0x76>
    }
#endif

    OS_TRACE_SEM_POST_ENTER(pevent);

    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	781b      	ldrb	r3, [r3, #0]
 80087ee:	2b03      	cmp	r3, #3
 80087f0:	d001      	beq.n	80087f6 <OSSemPost+0x22>
        OS_TRACE_SEM_POST_EXIT(OS_ERR_EVENT_TYPE);
        return (OS_ERR_EVENT_TYPE);
 80087f2:	2301      	movs	r3, #1
 80087f4:	e029      	b.n	800884a <OSSemPost+0x76>
    }
    OS_ENTER_CRITICAL();
 80087f6:	2040      	movs	r0, #64	@ 0x40
 80087f8:	f7f7 fcf9 	bl	80001ee <OS_CPU_SR_Save>
 80087fc:	60f8      	str	r0, [r7, #12]
    if (pevent->OSEventGrp != 0u) {                   /* See if any task waiting for semaphore         */
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	7a9b      	ldrb	r3, [r3, #10]
 8008802:	2b00      	cmp	r3, #0
 8008804:	d00c      	beq.n	8008820 <OSSemPost+0x4c>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
 8008806:	2300      	movs	r3, #0
 8008808:	2201      	movs	r2, #1
 800880a:	2100      	movs	r1, #0
 800880c:	6878      	ldr	r0, [r7, #4]
 800880e:	f7fe fc1d 	bl	800704c <OS_EventTaskRdy>
        OS_EXIT_CRITICAL();
 8008812:	68f8      	ldr	r0, [r7, #12]
 8008814:	f7f7 fcf9 	bl	800020a <OS_CPU_SR_Restore>
        OS_Sched();                                   /* Find HPT ready to run                         */
 8008818:	f7fe fee8 	bl	80075ec <OS_Sched>
        OS_TRACE_SEM_POST_EXIT(OS_ERR_NONE);
        return (OS_ERR_NONE);
 800881c:	2300      	movs	r3, #0
 800881e:	e014      	b.n	800884a <OSSemPost+0x76>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	891b      	ldrh	r3, [r3, #8]
 8008824:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008828:	4293      	cmp	r3, r2
 800882a:	d00a      	beq.n	8008842 <OSSemPost+0x6e>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	891b      	ldrh	r3, [r3, #8]
 8008830:	3301      	adds	r3, #1
 8008832:	b29a      	uxth	r2, r3
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	811a      	strh	r2, [r3, #8]
        OS_EXIT_CRITICAL();
 8008838:	68f8      	ldr	r0, [r7, #12]
 800883a:	f7f7 fce6 	bl	800020a <OS_CPU_SR_Restore>
        OS_TRACE_SEM_POST_EXIT(OS_ERR_NONE);
        return (OS_ERR_NONE);
 800883e:	2300      	movs	r3, #0
 8008840:	e003      	b.n	800884a <OSSemPost+0x76>
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
 8008842:	68f8      	ldr	r0, [r7, #12]
 8008844:	f7f7 fce1 	bl	800020a <OS_CPU_SR_Restore>
    OS_TRACE_SEM_POST_EXIT(OS_ERR_SEM_OVF);

    return (OS_ERR_SEM_OVF);
 8008848:	2333      	movs	r3, #51	@ 0x33
}
 800884a:	4618      	mov	r0, r3
 800884c:	3710      	adds	r7, #16
 800884e:	46bd      	mov	sp, r7
 8008850:	bd80      	pop	{r7, pc}
	...

08008854 <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
 8008854:	b580      	push	{r7, lr}
 8008856:	b08c      	sub	sp, #48	@ 0x30
 8008858:	af04      	add	r7, sp, #16
 800885a:	60f8      	str	r0, [r7, #12]
 800885c:	60b9      	str	r1, [r7, #8]
 800885e:	607a      	str	r2, [r7, #4]
 8008860:	70fb      	strb	r3, [r7, #3]
    OS_STK     *psp;
    INT8U       err;
#if OS_CRITICAL_METHOD == 3u                 /* Allocate storage for CPU status register               */
    OS_CPU_SR   cpu_sr = 0u;
 8008862:	2300      	movs	r3, #0
 8008864:	61fb      	str	r3, [r7, #28]
        return (OS_ERR_ILLEGAL_CREATE_RUN_TIME);
    }
#endif

#if OS_ARG_CHK_EN > 0u
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
 8008866:	78fb      	ldrb	r3, [r7, #3]
 8008868:	2b3f      	cmp	r3, #63	@ 0x3f
 800886a:	d901      	bls.n	8008870 <OSTaskCreateExt+0x1c>
        return (OS_ERR_PRIO_INVALID);
 800886c:	232a      	movs	r3, #42	@ 0x2a
 800886e:	e052      	b.n	8008916 <OSTaskCreateExt+0xc2>
    }
#endif
    OS_ENTER_CRITICAL();
 8008870:	2040      	movs	r0, #64	@ 0x40
 8008872:	f7f7 fcbc 	bl	80001ee <OS_CPU_SR_Save>
 8008876:	61f8      	str	r0, [r7, #28]
    if (OSIntNesting > 0u) {                 /* Make sure we don't create the task from within an ISR  */
 8008878:	4b29      	ldr	r3, [pc, #164]	@ (8008920 <OSTaskCreateExt+0xcc>)
 800887a:	781b      	ldrb	r3, [r3, #0]
 800887c:	2b00      	cmp	r3, #0
 800887e:	d004      	beq.n	800888a <OSTaskCreateExt+0x36>
        OS_EXIT_CRITICAL();
 8008880:	69f8      	ldr	r0, [r7, #28]
 8008882:	f7f7 fcc2 	bl	800020a <OS_CPU_SR_Restore>
        return (OS_ERR_TASK_CREATE_ISR);
 8008886:	233c      	movs	r3, #60	@ 0x3c
 8008888:	e045      	b.n	8008916 <OSTaskCreateExt+0xc2>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
 800888a:	78fb      	ldrb	r3, [r7, #3]
 800888c:	4a25      	ldr	r2, [pc, #148]	@ (8008924 <OSTaskCreateExt+0xd0>)
 800888e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008892:	2b00      	cmp	r3, #0
 8008894:	d13b      	bne.n	800890e <OSTaskCreateExt+0xba>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
 8008896:	78fb      	ldrb	r3, [r7, #3]
 8008898:	4a22      	ldr	r2, [pc, #136]	@ (8008924 <OSTaskCreateExt+0xd0>)
 800889a:	2101      	movs	r1, #1
 800889c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
 80088a0:	69f8      	ldr	r0, [r7, #28]
 80088a2:	f7f7 fcb2 	bl	800020a <OS_CPU_SR_Restore>

#if (OS_TASK_STAT_STK_CHK_EN > 0u)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
 80088a6:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80088a8:	461a      	mov	r2, r3
 80088aa:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80088ac:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80088ae:	f000 fa8f 	bl	8008dd0 <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
 80088b2:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80088b4:	687a      	ldr	r2, [r7, #4]
 80088b6:	68b9      	ldr	r1, [r7, #8]
 80088b8:	68f8      	ldr	r0, [r7, #12]
 80088ba:	f7fd ff03 	bl	80066c4 <OSTaskStkInit>
 80088be:	61b8      	str	r0, [r7, #24]
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
 80088c0:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80088c2:	78f8      	ldrb	r0, [r7, #3]
 80088c4:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80088c6:	9302      	str	r3, [sp, #8]
 80088c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80088ca:	9301      	str	r3, [sp, #4]
 80088cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088ce:	9300      	str	r3, [sp, #0]
 80088d0:	4613      	mov	r3, r2
 80088d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80088d4:	69b9      	ldr	r1, [r7, #24]
 80088d6:	f7fe ffb3 	bl	8007840 <OS_TCBInit>
 80088da:	4603      	mov	r3, r0
 80088dc:	75fb      	strb	r3, [r7, #23]
        if (err == OS_ERR_NONE) {
 80088de:	7dfb      	ldrb	r3, [r7, #23]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d106      	bne.n	80088f2 <OSTaskCreateExt+0x9e>
            OS_TRACE_TASK_CREATE(OSTCBPrioTbl[prio]);
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
 80088e4:	4b10      	ldr	r3, [pc, #64]	@ (8008928 <OSTaskCreateExt+0xd4>)
 80088e6:	781b      	ldrb	r3, [r3, #0]
 80088e8:	2b01      	cmp	r3, #1
 80088ea:	d10e      	bne.n	800890a <OSTaskCreateExt+0xb6>
                OS_Sched();
 80088ec:	f7fe fe7e 	bl	80075ec <OS_Sched>
 80088f0:	e00b      	b.n	800890a <OSTaskCreateExt+0xb6>
            }
        } else {
            OS_ENTER_CRITICAL();
 80088f2:	2040      	movs	r0, #64	@ 0x40
 80088f4:	f7f7 fc7b 	bl	80001ee <OS_CPU_SR_Save>
 80088f8:	61f8      	str	r0, [r7, #28]
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
 80088fa:	78fb      	ldrb	r3, [r7, #3]
 80088fc:	4a09      	ldr	r2, [pc, #36]	@ (8008924 <OSTaskCreateExt+0xd0>)
 80088fe:	2100      	movs	r1, #0
 8008900:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            OS_EXIT_CRITICAL();
 8008904:	69f8      	ldr	r0, [r7, #28]
 8008906:	f7f7 fc80 	bl	800020a <OS_CPU_SR_Restore>
        }
        return (err);
 800890a:	7dfb      	ldrb	r3, [r7, #23]
 800890c:	e003      	b.n	8008916 <OSTaskCreateExt+0xc2>
    }
    OS_EXIT_CRITICAL();
 800890e:	69f8      	ldr	r0, [r7, #28]
 8008910:	f7f7 fc7b 	bl	800020a <OS_CPU_SR_Restore>
    return (OS_ERR_PRIO_EXIST);
 8008914:	2328      	movs	r3, #40	@ 0x28
}
 8008916:	4618      	mov	r0, r3
 8008918:	3720      	adds	r7, #32
 800891a:	46bd      	mov	sp, r7
 800891c:	bd80      	pop	{r7, pc}
 800891e:	bf00      	nop
 8008920:	20005aa0 	.word	0x20005aa0
 8008924:	20005cc8 	.word	0x20005cc8
 8008928:	20005ab0 	.word	0x20005ab0

0800892c <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0u
INT8U  OSTaskDel (INT8U prio)
{
 800892c:	b580      	push	{r7, lr}
 800892e:	b086      	sub	sp, #24
 8008930:	af00      	add	r7, sp, #0
 8008932:	4603      	mov	r3, r0
 8008934:	71fb      	strb	r3, [r7, #7]
#if (OS_FLAG_EN > 0u) && (OS_MAX_FLAGS > 0u)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3u                            /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0u;
 8008936:	2300      	movs	r3, #0
 8008938:	617b      	str	r3, [r7, #20]
        OS_SAFETY_CRITICAL_EXCEPTION();
        return (OS_ERR_ILLEGAL_DEL_RUN_TIME);
    }
#endif

    if (OSIntNesting > 0u) {                            /* See if trying to delete from ISR            */
 800893a:	4b6d      	ldr	r3, [pc, #436]	@ (8008af0 <OSTaskDel+0x1c4>)
 800893c:	781b      	ldrb	r3, [r3, #0]
 800893e:	2b00      	cmp	r3, #0
 8008940:	d001      	beq.n	8008946 <OSTaskDel+0x1a>
        return (OS_ERR_TASK_DEL_ISR);
 8008942:	2340      	movs	r3, #64	@ 0x40
 8008944:	e0d0      	b.n	8008ae8 <OSTaskDel+0x1bc>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
 8008946:	79fb      	ldrb	r3, [r7, #7]
 8008948:	2b3f      	cmp	r3, #63	@ 0x3f
 800894a:	d101      	bne.n	8008950 <OSTaskDel+0x24>
        return (OS_ERR_TASK_DEL_IDLE);
 800894c:	233e      	movs	r3, #62	@ 0x3e
 800894e:	e0cb      	b.n	8008ae8 <OSTaskDel+0x1bc>
    }
#if OS_ARG_CHK_EN > 0u
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
 8008950:	79fb      	ldrb	r3, [r7, #7]
 8008952:	2b3e      	cmp	r3, #62	@ 0x3e
 8008954:	d904      	bls.n	8008960 <OSTaskDel+0x34>
        if (prio != OS_PRIO_SELF) {
 8008956:	79fb      	ldrb	r3, [r7, #7]
 8008958:	2bff      	cmp	r3, #255	@ 0xff
 800895a:	d001      	beq.n	8008960 <OSTaskDel+0x34>
            return (OS_ERR_PRIO_INVALID);
 800895c:	232a      	movs	r3, #42	@ 0x2a
 800895e:	e0c3      	b.n	8008ae8 <OSTaskDel+0x1bc>
        }
    }
#endif

    OS_ENTER_CRITICAL();
 8008960:	2040      	movs	r0, #64	@ 0x40
 8008962:	f7f7 fc44 	bl	80001ee <OS_CPU_SR_Save>
 8008966:	6178      	str	r0, [r7, #20]
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
 8008968:	79fb      	ldrb	r3, [r7, #7]
 800896a:	2bff      	cmp	r3, #255	@ 0xff
 800896c:	d104      	bne.n	8008978 <OSTaskDel+0x4c>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
 800896e:	4b61      	ldr	r3, [pc, #388]	@ (8008af4 <OSTaskDel+0x1c8>)
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8008976:	71fb      	strb	r3, [r7, #7]
    }
    ptcb = OSTCBPrioTbl[prio];
 8008978:	79fb      	ldrb	r3, [r7, #7]
 800897a:	4a5f      	ldr	r2, [pc, #380]	@ (8008af8 <OSTaskDel+0x1cc>)
 800897c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008980:	613b      	str	r3, [r7, #16]
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
 8008982:	693b      	ldr	r3, [r7, #16]
 8008984:	2b00      	cmp	r3, #0
 8008986:	d104      	bne.n	8008992 <OSTaskDel+0x66>
        OS_EXIT_CRITICAL();
 8008988:	6978      	ldr	r0, [r7, #20]
 800898a:	f7f7 fc3e 	bl	800020a <OS_CPU_SR_Restore>
        return (OS_ERR_TASK_NOT_EXIST);
 800898e:	2343      	movs	r3, #67	@ 0x43
 8008990:	e0aa      	b.n	8008ae8 <OSTaskDel+0x1bc>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
 8008992:	693b      	ldr	r3, [r7, #16]
 8008994:	2b01      	cmp	r3, #1
 8008996:	d104      	bne.n	80089a2 <OSTaskDel+0x76>
        OS_EXIT_CRITICAL();
 8008998:	6978      	ldr	r0, [r7, #20]
 800899a:	f7f7 fc36 	bl	800020a <OS_CPU_SR_Restore>
        return (OS_ERR_TASK_DEL);
 800899e:	233d      	movs	r3, #61	@ 0x3d
 80089a0:	e0a2      	b.n	8008ae8 <OSTaskDel+0x1bc>
    }

    OSRdyTbl[ptcb->OSTCBY] &= (OS_PRIO)~ptcb->OSTCBBitX;
 80089a2:	693b      	ldr	r3, [r7, #16]
 80089a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80089a8:	461a      	mov	r2, r3
 80089aa:	4b54      	ldr	r3, [pc, #336]	@ (8008afc <OSTaskDel+0x1d0>)
 80089ac:	5c9a      	ldrb	r2, [r3, r2]
 80089ae:	693b      	ldr	r3, [r7, #16]
 80089b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80089b4:	43db      	mvns	r3, r3
 80089b6:	b2db      	uxtb	r3, r3
 80089b8:	6939      	ldr	r1, [r7, #16]
 80089ba:	f891 103c 	ldrb.w	r1, [r1, #60]	@ 0x3c
 80089be:	4013      	ands	r3, r2
 80089c0:	b2da      	uxtb	r2, r3
 80089c2:	4b4e      	ldr	r3, [pc, #312]	@ (8008afc <OSTaskDel+0x1d0>)
 80089c4:	545a      	strb	r2, [r3, r1]
    OS_TRACE_TASK_SUSPENDED(ptcb);
    if (OSRdyTbl[ptcb->OSTCBY] == 0u) {                 /* Make task not ready                         */
 80089c6:	693b      	ldr	r3, [r7, #16]
 80089c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80089cc:	461a      	mov	r2, r3
 80089ce:	4b4b      	ldr	r3, [pc, #300]	@ (8008afc <OSTaskDel+0x1d0>)
 80089d0:	5c9b      	ldrb	r3, [r3, r2]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d10a      	bne.n	80089ec <OSTaskDel+0xc0>
        OSRdyGrp           &= (OS_PRIO)~ptcb->OSTCBBitY;
 80089d6:	693b      	ldr	r3, [r7, #16]
 80089d8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80089dc:	43db      	mvns	r3, r3
 80089de:	b2da      	uxtb	r2, r3
 80089e0:	4b47      	ldr	r3, [pc, #284]	@ (8008b00 <OSTaskDel+0x1d4>)
 80089e2:	781b      	ldrb	r3, [r3, #0]
 80089e4:	4013      	ands	r3, r2
 80089e6:	b2da      	uxtb	r2, r3
 80089e8:	4b45      	ldr	r3, [pc, #276]	@ (8008b00 <OSTaskDel+0x1d4>)
 80089ea:	701a      	strb	r2, [r3, #0]
    }

#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
 80089ec:	693b      	ldr	r3, [r7, #16]
 80089ee:	69db      	ldr	r3, [r3, #28]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d005      	beq.n	8008a00 <OSTaskDel+0xd4>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
 80089f4:	693b      	ldr	r3, [r7, #16]
 80089f6:	69db      	ldr	r3, [r3, #28]
 80089f8:	4619      	mov	r1, r3
 80089fa:	6938      	ldr	r0, [r7, #16]
 80089fc:	f7fe fbf4 	bl	80071e8 <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0u)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
 8008a00:	693b      	ldr	r3, [r7, #16]
 8008a02:	6a1b      	ldr	r3, [r3, #32]
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d005      	beq.n	8008a14 <OSTaskDel+0xe8>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
 8008a08:	693b      	ldr	r3, [r7, #16]
 8008a0a:	6a1b      	ldr	r3, [r3, #32]
 8008a0c:	4619      	mov	r1, r3
 8008a0e:	6938      	ldr	r0, [r7, #16]
 8008a10:	f7fe fc1d 	bl	800724e <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0u) && (OS_MAX_FLAGS > 0u)
    pnode = ptcb->OSTCBFlagNode;
 8008a14:	693b      	ldr	r3, [r7, #16]
 8008a16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a18:	60fb      	str	r3, [r7, #12]
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d002      	beq.n	8008a26 <OSTaskDel+0xfa>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
 8008a20:	68f8      	ldr	r0, [r7, #12]
 8008a22:	f7ff fbcb 	bl	80081bc <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0u;                           /* Prevent OSTimeTick() from updating          */
 8008a26:	693b      	ldr	r3, [r7, #16]
 8008a28:	2200      	movs	r2, #0
 8008a2a:	635a      	str	r2, [r3, #52]	@ 0x34
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
 8008a2c:	693b      	ldr	r3, [r7, #16]
 8008a2e:	2200      	movs	r2, #0
 8008a30:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
 8008a34:	693b      	ldr	r3, [r7, #16]
 8008a36:	2200      	movs	r2, #0
 8008a38:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
 8008a3c:	4b31      	ldr	r3, [pc, #196]	@ (8008b04 <OSTaskDel+0x1d8>)
 8008a3e:	781b      	ldrb	r3, [r3, #0]
 8008a40:	2bff      	cmp	r3, #255	@ 0xff
 8008a42:	d005      	beq.n	8008a50 <OSTaskDel+0x124>
        OSLockNesting++;
 8008a44:	4b2f      	ldr	r3, [pc, #188]	@ (8008b04 <OSTaskDel+0x1d8>)
 8008a46:	781b      	ldrb	r3, [r3, #0]
 8008a48:	3301      	adds	r3, #1
 8008a4a:	b2da      	uxtb	r2, r3
 8008a4c:	4b2d      	ldr	r3, [pc, #180]	@ (8008b04 <OSTaskDel+0x1d8>)
 8008a4e:	701a      	strb	r2, [r3, #0]
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
 8008a50:	6978      	ldr	r0, [r7, #20]
 8008a52:	f7f7 fbda 	bl	800020a <OS_CPU_SR_Restore>
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
 8008a56:	f7fe faf1 	bl	800703c <OS_Dummy>
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
 8008a5a:	2040      	movs	r0, #64	@ 0x40
 8008a5c:	f7f7 fbc7 	bl	80001ee <OS_CPU_SR_Save>
 8008a60:	6178      	str	r0, [r7, #20]
    if (OSLockNesting > 0u) {                           /* Remove context switch lock                  */
 8008a62:	4b28      	ldr	r3, [pc, #160]	@ (8008b04 <OSTaskDel+0x1d8>)
 8008a64:	781b      	ldrb	r3, [r3, #0]
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d005      	beq.n	8008a76 <OSTaskDel+0x14a>
        OSLockNesting--;
 8008a6a:	4b26      	ldr	r3, [pc, #152]	@ (8008b04 <OSTaskDel+0x1d8>)
 8008a6c:	781b      	ldrb	r3, [r3, #0]
 8008a6e:	3b01      	subs	r3, #1
 8008a70:	b2da      	uxtb	r2, r3
 8008a72:	4b24      	ldr	r3, [pc, #144]	@ (8008b04 <OSTaskDel+0x1d8>)
 8008a74:	701a      	strb	r2, [r3, #0]
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
 8008a76:	6938      	ldr	r0, [r7, #16]
 8008a78:	f7fd fe02 	bl	8006680 <OSTaskDelHook>
#if defined(OS_TLS_TBL_SIZE) && (OS_TLS_TBL_SIZE > 0u)
    OS_TLS_TaskDel(ptcb);                               /* Call TLS hook                               */
#endif
#endif

    OSTaskCtr--;                                        /* One less task being managed                 */
 8008a7c:	4b22      	ldr	r3, [pc, #136]	@ (8008b08 <OSTaskDel+0x1dc>)
 8008a7e:	781b      	ldrb	r3, [r3, #0]
 8008a80:	3b01      	subs	r3, #1
 8008a82:	b2da      	uxtb	r2, r3
 8008a84:	4b20      	ldr	r3, [pc, #128]	@ (8008b08 <OSTaskDel+0x1dc>)
 8008a86:	701a      	strb	r2, [r3, #0]
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
 8008a88:	79fb      	ldrb	r3, [r7, #7]
 8008a8a:	4a1b      	ldr	r2, [pc, #108]	@ (8008af8 <OSTaskDel+0x1cc>)
 8008a8c:	2100      	movs	r1, #0
 8008a8e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
 8008a92:	693b      	ldr	r3, [r7, #16]
 8008a94:	699b      	ldr	r3, [r3, #24]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d108      	bne.n	8008aac <OSTaskDel+0x180>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
 8008a9a:	693b      	ldr	r3, [r7, #16]
 8008a9c:	695b      	ldr	r3, [r3, #20]
 8008a9e:	2200      	movs	r2, #0
 8008aa0:	619a      	str	r2, [r3, #24]
        OSTCBList                  = ptcb->OSTCBNext;
 8008aa2:	693b      	ldr	r3, [r7, #16]
 8008aa4:	695b      	ldr	r3, [r3, #20]
 8008aa6:	4a19      	ldr	r2, [pc, #100]	@ (8008b0c <OSTaskDel+0x1e0>)
 8008aa8:	6013      	str	r3, [r2, #0]
 8008aaa:	e009      	b.n	8008ac0 <OSTaskDel+0x194>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
 8008aac:	693b      	ldr	r3, [r7, #16]
 8008aae:	699b      	ldr	r3, [r3, #24]
 8008ab0:	693a      	ldr	r2, [r7, #16]
 8008ab2:	6952      	ldr	r2, [r2, #20]
 8008ab4:	615a      	str	r2, [r3, #20]
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
 8008ab6:	693b      	ldr	r3, [r7, #16]
 8008ab8:	695b      	ldr	r3, [r3, #20]
 8008aba:	693a      	ldr	r2, [r7, #16]
 8008abc:	6992      	ldr	r2, [r2, #24]
 8008abe:	619a      	str	r2, [r3, #24]
    }
    ptcb->OSTCBNext     = OSTCBFreeList;                /* Return TCB to free TCB list                 */
 8008ac0:	4b13      	ldr	r3, [pc, #76]	@ (8008b10 <OSTaskDel+0x1e4>)
 8008ac2:	681a      	ldr	r2, [r3, #0]
 8008ac4:	693b      	ldr	r3, [r7, #16]
 8008ac6:	615a      	str	r2, [r3, #20]
    OSTCBFreeList       = ptcb;
 8008ac8:	4a11      	ldr	r2, [pc, #68]	@ (8008b10 <OSTaskDel+0x1e4>)
 8008aca:	693b      	ldr	r3, [r7, #16]
 8008acc:	6013      	str	r3, [r2, #0]
#if OS_TASK_NAME_EN > 0u
    ptcb->OSTCBTaskName = (INT8U *)(void *)"?";
 8008ace:	693b      	ldr	r3, [r7, #16]
 8008ad0:	4a10      	ldr	r2, [pc, #64]	@ (8008b14 <OSTaskDel+0x1e8>)
 8008ad2:	655a      	str	r2, [r3, #84]	@ 0x54
#endif
    OS_EXIT_CRITICAL();
 8008ad4:	6978      	ldr	r0, [r7, #20]
 8008ad6:	f7f7 fb98 	bl	800020a <OS_CPU_SR_Restore>
    if (OSRunning == OS_TRUE) {
 8008ada:	4b0f      	ldr	r3, [pc, #60]	@ (8008b18 <OSTaskDel+0x1ec>)
 8008adc:	781b      	ldrb	r3, [r3, #0]
 8008ade:	2b01      	cmp	r3, #1
 8008ae0:	d101      	bne.n	8008ae6 <OSTaskDel+0x1ba>
        OS_Sched();                                     /* Find new highest priority task              */
 8008ae2:	f7fe fd83 	bl	80075ec <OS_Sched>
    }
    return (OS_ERR_NONE);
 8008ae6:	2300      	movs	r3, #0
}
 8008ae8:	4618      	mov	r0, r3
 8008aea:	3718      	adds	r7, #24
 8008aec:	46bd      	mov	sp, r7
 8008aee:	bd80      	pop	{r7, pc}
 8008af0:	20005aa0 	.word	0x20005aa0
 8008af4:	20005cb8 	.word	0x20005cb8
 8008af8:	20005cc8 	.word	0x20005cc8
 8008afc:	20005aa8 	.word	0x20005aa8
 8008b00:	20005aa4 	.word	0x20005aa4
 8008b04:	20005aa1 	.word	0x20005aa1
 8008b08:	20005ab1 	.word	0x20005ab1
 8008b0c:	20005cc4 	.word	0x20005cc4
 8008b10:	20005cbc 	.word	0x20005cbc
 8008b14:	0800c57c 	.word	0x0800c57c
 8008b18:	20005ab0 	.word	0x20005ab0

08008b1c <OSTaskNameSet>:
*/
#if OS_TASK_NAME_EN > 0u
void  OSTaskNameSet (INT8U   prio,
                     INT8U  *pname,
                     INT8U  *perr)
{
 8008b1c:	b580      	push	{r7, lr}
 8008b1e:	b086      	sub	sp, #24
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	4603      	mov	r3, r0
 8008b24:	60b9      	str	r1, [r7, #8]
 8008b26:	607a      	str	r2, [r7, #4]
 8008b28:	73fb      	strb	r3, [r7, #15]
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3u                         /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0u;
 8008b2a:	2300      	movs	r3, #0
 8008b2c:	617b      	str	r3, [r7, #20]
        return;
    }
#endif

#if OS_ARG_CHK_EN > 0u
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
 8008b2e:	7bfb      	ldrb	r3, [r7, #15]
 8008b30:	2b3f      	cmp	r3, #63	@ 0x3f
 8008b32:	d906      	bls.n	8008b42 <OSTaskNameSet+0x26>
        if (prio != OS_PRIO_SELF) {
 8008b34:	7bfb      	ldrb	r3, [r7, #15]
 8008b36:	2bff      	cmp	r3, #255	@ 0xff
 8008b38:	d003      	beq.n	8008b42 <OSTaskNameSet+0x26>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	222a      	movs	r2, #42	@ 0x2a
 8008b3e:	701a      	strb	r2, [r3, #0]
            return;
 8008b40:	e03c      	b.n	8008bbc <OSTaskNameSet+0xa0>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
 8008b42:	68bb      	ldr	r3, [r7, #8]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d103      	bne.n	8008b50 <OSTaskNameSet+0x34>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	220c      	movs	r2, #12
 8008b4c:	701a      	strb	r2, [r3, #0]
        return;
 8008b4e:	e035      	b.n	8008bbc <OSTaskNameSet+0xa0>
    }
#endif
    if (OSIntNesting > 0u) {                         /* See if trying to call from an ISR              */
 8008b50:	4b1c      	ldr	r3, [pc, #112]	@ (8008bc4 <OSTaskNameSet+0xa8>)
 8008b52:	781b      	ldrb	r3, [r3, #0]
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d003      	beq.n	8008b60 <OSTaskNameSet+0x44>
        *perr = OS_ERR_NAME_SET_ISR;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	2212      	movs	r2, #18
 8008b5c:	701a      	strb	r2, [r3, #0]
        return;
 8008b5e:	e02d      	b.n	8008bbc <OSTaskNameSet+0xa0>
    }
    OS_ENTER_CRITICAL();
 8008b60:	2040      	movs	r0, #64	@ 0x40
 8008b62:	f7f7 fb44 	bl	80001ee <OS_CPU_SR_Save>
 8008b66:	6178      	str	r0, [r7, #20]
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
 8008b68:	7bfb      	ldrb	r3, [r7, #15]
 8008b6a:	2bff      	cmp	r3, #255	@ 0xff
 8008b6c:	d104      	bne.n	8008b78 <OSTaskNameSet+0x5c>
        prio = OSTCBCur->OSTCBPrio;
 8008b6e:	4b16      	ldr	r3, [pc, #88]	@ (8008bc8 <OSTaskNameSet+0xac>)
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8008b76:	73fb      	strb	r3, [r7, #15]
    }
    ptcb = OSTCBPrioTbl[prio];
 8008b78:	7bfb      	ldrb	r3, [r7, #15]
 8008b7a:	4a14      	ldr	r2, [pc, #80]	@ (8008bcc <OSTaskNameSet+0xb0>)
 8008b7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008b80:	613b      	str	r3, [r7, #16]
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
 8008b82:	693b      	ldr	r3, [r7, #16]
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d106      	bne.n	8008b96 <OSTaskNameSet+0x7a>
        OS_EXIT_CRITICAL();                          /* No                                             */
 8008b88:	6978      	ldr	r0, [r7, #20]
 8008b8a:	f7f7 fb3e 	bl	800020a <OS_CPU_SR_Restore>
        *perr = OS_ERR_TASK_NOT_EXIST;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	2243      	movs	r2, #67	@ 0x43
 8008b92:	701a      	strb	r2, [r3, #0]
        return;
 8008b94:	e012      	b.n	8008bbc <OSTaskNameSet+0xa0>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
 8008b96:	693b      	ldr	r3, [r7, #16]
 8008b98:	2b01      	cmp	r3, #1
 8008b9a:	d106      	bne.n	8008baa <OSTaskNameSet+0x8e>
        OS_EXIT_CRITICAL();                          /* Yes                                            */
 8008b9c:	6978      	ldr	r0, [r7, #20]
 8008b9e:	f7f7 fb34 	bl	800020a <OS_CPU_SR_Restore>
        *perr = OS_ERR_TASK_NOT_EXIST;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	2243      	movs	r2, #67	@ 0x43
 8008ba6:	701a      	strb	r2, [r3, #0]
        return;
 8008ba8:	e008      	b.n	8008bbc <OSTaskNameSet+0xa0>
    }
    ptcb->OSTCBTaskName = pname;
 8008baa:	693b      	ldr	r3, [r7, #16]
 8008bac:	68ba      	ldr	r2, [r7, #8]
 8008bae:	655a      	str	r2, [r3, #84]	@ 0x54
    OS_TRACE_TASK_NAME_SET(ptcb);
    OS_EXIT_CRITICAL();
 8008bb0:	6978      	ldr	r0, [r7, #20]
 8008bb2:	f7f7 fb2a 	bl	800020a <OS_CPU_SR_Restore>
    *perr               = OS_ERR_NONE;
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	2200      	movs	r2, #0
 8008bba:	701a      	strb	r2, [r3, #0]
}
 8008bbc:	3718      	adds	r7, #24
 8008bbe:	46bd      	mov	sp, r7
 8008bc0:	bd80      	pop	{r7, pc}
 8008bc2:	bf00      	nop
 8008bc4:	20005aa0 	.word	0x20005aa0
 8008bc8:	20005cb8 	.word	0x20005cb8
 8008bcc:	20005cc8 	.word	0x20005cc8

08008bd0 <OSTaskStkChk>:
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0u) && (OS_TASK_CREATE_EXT_EN > 0u)
INT8U  OSTaskStkChk (INT8U         prio,
                     OS_STK_DATA  *p_stk_data)
{
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	b088      	sub	sp, #32
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	4603      	mov	r3, r0
 8008bd8:	6039      	str	r1, [r7, #0]
 8008bda:	71fb      	strb	r3, [r7, #7]
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3u                           /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0u;
 8008bdc:	2300      	movs	r3, #0
 8008bde:	617b      	str	r3, [r7, #20]
#endif



#if OS_ARG_CHK_EN > 0u
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
 8008be0:	79fb      	ldrb	r3, [r7, #7]
 8008be2:	2b3f      	cmp	r3, #63	@ 0x3f
 8008be4:	d904      	bls.n	8008bf0 <OSTaskStkChk+0x20>
        if (prio != OS_PRIO_SELF) {
 8008be6:	79fb      	ldrb	r3, [r7, #7]
 8008be8:	2bff      	cmp	r3, #255	@ 0xff
 8008bea:	d001      	beq.n	8008bf0 <OSTaskStkChk+0x20>
            return (OS_ERR_PRIO_INVALID);
 8008bec:	232a      	movs	r3, #42	@ 0x2a
 8008bee:	e054      	b.n	8008c9a <OSTaskStkChk+0xca>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
 8008bf0:	683b      	ldr	r3, [r7, #0]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d101      	bne.n	8008bfa <OSTaskStkChk+0x2a>
        return (OS_ERR_PDATA_NULL);
 8008bf6:	2309      	movs	r3, #9
 8008bf8:	e04f      	b.n	8008c9a <OSTaskStkChk+0xca>
    }
#endif
    p_stk_data->OSFree = 0u;                           /* Assume failure, set to 0 size                */
 8008bfa:	683b      	ldr	r3, [r7, #0]
 8008bfc:	2200      	movs	r2, #0
 8008bfe:	601a      	str	r2, [r3, #0]
    p_stk_data->OSUsed = 0u;
 8008c00:	683b      	ldr	r3, [r7, #0]
 8008c02:	2200      	movs	r2, #0
 8008c04:	605a      	str	r2, [r3, #4]
    OS_ENTER_CRITICAL();
 8008c06:	2040      	movs	r0, #64	@ 0x40
 8008c08:	f7f7 faf1 	bl	80001ee <OS_CPU_SR_Save>
 8008c0c:	6178      	str	r0, [r7, #20]
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
 8008c0e:	79fb      	ldrb	r3, [r7, #7]
 8008c10:	2bff      	cmp	r3, #255	@ 0xff
 8008c12:	d104      	bne.n	8008c1e <OSTaskStkChk+0x4e>
        prio = OSTCBCur->OSTCBPrio;
 8008c14:	4b23      	ldr	r3, [pc, #140]	@ (8008ca4 <OSTaskStkChk+0xd4>)
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8008c1c:	71fb      	strb	r3, [r7, #7]
    }
    ptcb = OSTCBPrioTbl[prio];
 8008c1e:	79fb      	ldrb	r3, [r7, #7]
 8008c20:	4a21      	ldr	r2, [pc, #132]	@ (8008ca8 <OSTaskStkChk+0xd8>)
 8008c22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008c26:	613b      	str	r3, [r7, #16]
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
 8008c28:	693b      	ldr	r3, [r7, #16]
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d104      	bne.n	8008c38 <OSTaskStkChk+0x68>
        OS_EXIT_CRITICAL();
 8008c2e:	6978      	ldr	r0, [r7, #20]
 8008c30:	f7f7 faeb 	bl	800020a <OS_CPU_SR_Restore>
        return (OS_ERR_TASK_NOT_EXIST);
 8008c34:	2343      	movs	r3, #67	@ 0x43
 8008c36:	e030      	b.n	8008c9a <OSTaskStkChk+0xca>
    }
    if (ptcb == OS_TCB_RESERVED) {
 8008c38:	693b      	ldr	r3, [r7, #16]
 8008c3a:	2b01      	cmp	r3, #1
 8008c3c:	d104      	bne.n	8008c48 <OSTaskStkChk+0x78>
        OS_EXIT_CRITICAL();
 8008c3e:	6978      	ldr	r0, [r7, #20]
 8008c40:	f7f7 fae3 	bl	800020a <OS_CPU_SR_Restore>
        return (OS_ERR_TASK_NOT_EXIST);
 8008c44:	2343      	movs	r3, #67	@ 0x43
 8008c46:	e028      	b.n	8008c9a <OSTaskStkChk+0xca>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0u) { /* Make sure stack checking option is set      */
 8008c48:	693b      	ldr	r3, [r7, #16]
 8008c4a:	8a1b      	ldrh	r3, [r3, #16]
 8008c4c:	f003 0301 	and.w	r3, r3, #1
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d104      	bne.n	8008c5e <OSTaskStkChk+0x8e>
        OS_EXIT_CRITICAL();
 8008c54:	6978      	ldr	r0, [r7, #20]
 8008c56:	f7f7 fad8 	bl	800020a <OS_CPU_SR_Restore>
        return (OS_ERR_TASK_OPT);
 8008c5a:	2345      	movs	r3, #69	@ 0x45
 8008c5c:	e01d      	b.n	8008c9a <OSTaskStkChk+0xca>
    }
    nfree = 0u;
 8008c5e:	2300      	movs	r3, #0
 8008c60:	61bb      	str	r3, [r7, #24]
    size  = ptcb->OSTCBStkSize;
 8008c62:	693b      	ldr	r3, [r7, #16]
 8008c64:	68db      	ldr	r3, [r3, #12]
 8008c66:	60fb      	str	r3, [r7, #12]
    pchk  = ptcb->OSTCBStkBottom;
 8008c68:	693b      	ldr	r3, [r7, #16]
 8008c6a:	689b      	ldr	r3, [r3, #8]
 8008c6c:	61fb      	str	r3, [r7, #28]
    OS_EXIT_CRITICAL();
 8008c6e:	6978      	ldr	r0, [r7, #20]
 8008c70:	f7f7 facb 	bl	800020a <OS_CPU_SR_Restore>
#if OS_STK_GROWTH == 1u
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
 8008c74:	e002      	b.n	8008c7c <OSTaskStkChk+0xac>
        nfree++;
 8008c76:	69bb      	ldr	r3, [r7, #24]
 8008c78:	3301      	adds	r3, #1
 8008c7a:	61bb      	str	r3, [r7, #24]
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
 8008c7c:	69fb      	ldr	r3, [r7, #28]
 8008c7e:	1d1a      	adds	r2, r3, #4
 8008c80:	61fa      	str	r2, [r7, #28]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d0f6      	beq.n	8008c76 <OSTaskStkChk+0xa6>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree;                       /* Store   number of free entries on the stk     */
 8008c88:	683b      	ldr	r3, [r7, #0]
 8008c8a:	69ba      	ldr	r2, [r7, #24]
 8008c8c:	601a      	str	r2, [r3, #0]
    p_stk_data->OSUsed = size - nfree;                /* Compute number of entries used on the stk     */
 8008c8e:	68fa      	ldr	r2, [r7, #12]
 8008c90:	69bb      	ldr	r3, [r7, #24]
 8008c92:	1ad2      	subs	r2, r2, r3
 8008c94:	683b      	ldr	r3, [r7, #0]
 8008c96:	605a      	str	r2, [r3, #4]
    return (OS_ERR_NONE);
 8008c98:	2300      	movs	r3, #0
}
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	3720      	adds	r7, #32
 8008c9e:	46bd      	mov	sp, r7
 8008ca0:	bd80      	pop	{r7, pc}
 8008ca2:	bf00      	nop
 8008ca4:	20005cb8 	.word	0x20005cb8
 8008ca8:	20005cc8 	.word	0x20005cc8

08008cac <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0u
INT8U  OSTaskSuspend (INT8U prio)
{
 8008cac:	b580      	push	{r7, lr}
 8008cae:	b086      	sub	sp, #24
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	4603      	mov	r3, r0
 8008cb4:	71fb      	strb	r3, [r7, #7]
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0u;
 8008cb6:	2300      	movs	r3, #0
 8008cb8:	613b      	str	r3, [r7, #16]
#endif



#if OS_ARG_CHK_EN > 0u
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
 8008cba:	79fb      	ldrb	r3, [r7, #7]
 8008cbc:	2b3f      	cmp	r3, #63	@ 0x3f
 8008cbe:	d101      	bne.n	8008cc4 <OSTaskSuspend+0x18>
        return (OS_ERR_TASK_SUSPEND_IDLE);
 8008cc0:	2347      	movs	r3, #71	@ 0x47
 8008cc2:	e06a      	b.n	8008d9a <OSTaskSuspend+0xee>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
 8008cc4:	79fb      	ldrb	r3, [r7, #7]
 8008cc6:	2b3e      	cmp	r3, #62	@ 0x3e
 8008cc8:	d904      	bls.n	8008cd4 <OSTaskSuspend+0x28>
        if (prio != OS_PRIO_SELF) {
 8008cca:	79fb      	ldrb	r3, [r7, #7]
 8008ccc:	2bff      	cmp	r3, #255	@ 0xff
 8008cce:	d001      	beq.n	8008cd4 <OSTaskSuspend+0x28>
            return (OS_ERR_PRIO_INVALID);
 8008cd0:	232a      	movs	r3, #42	@ 0x2a
 8008cd2:	e062      	b.n	8008d9a <OSTaskSuspend+0xee>
        }
    }
#endif
    OS_ENTER_CRITICAL();
 8008cd4:	2040      	movs	r0, #64	@ 0x40
 8008cd6:	f7f7 fa8a 	bl	80001ee <OS_CPU_SR_Save>
 8008cda:	6138      	str	r0, [r7, #16]
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
 8008cdc:	79fb      	ldrb	r3, [r7, #7]
 8008cde:	2bff      	cmp	r3, #255	@ 0xff
 8008ce0:	d107      	bne.n	8008cf2 <OSTaskSuspend+0x46>
        prio = OSTCBCur->OSTCBPrio;
 8008ce2:	4b30      	ldr	r3, [pc, #192]	@ (8008da4 <OSTaskSuspend+0xf8>)
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8008cea:	71fb      	strb	r3, [r7, #7]
        self = OS_TRUE;
 8008cec:	2301      	movs	r3, #1
 8008cee:	75fb      	strb	r3, [r7, #23]
 8008cf0:	e00b      	b.n	8008d0a <OSTaskSuspend+0x5e>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
 8008cf2:	4b2c      	ldr	r3, [pc, #176]	@ (8008da4 <OSTaskSuspend+0xf8>)
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8008cfa:	79fa      	ldrb	r2, [r7, #7]
 8008cfc:	429a      	cmp	r2, r3
 8008cfe:	d102      	bne.n	8008d06 <OSTaskSuspend+0x5a>
        self = OS_TRUE;
 8008d00:	2301      	movs	r3, #1
 8008d02:	75fb      	strb	r3, [r7, #23]
 8008d04:	e001      	b.n	8008d0a <OSTaskSuspend+0x5e>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
 8008d06:	2300      	movs	r3, #0
 8008d08:	75fb      	strb	r3, [r7, #23]
    }
    ptcb = OSTCBPrioTbl[prio];
 8008d0a:	79fb      	ldrb	r3, [r7, #7]
 8008d0c:	4a26      	ldr	r2, [pc, #152]	@ (8008da8 <OSTaskSuspend+0xfc>)
 8008d0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008d12:	60fb      	str	r3, [r7, #12]
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d104      	bne.n	8008d24 <OSTaskSuspend+0x78>
        OS_EXIT_CRITICAL();
 8008d1a:	6938      	ldr	r0, [r7, #16]
 8008d1c:	f7f7 fa75 	bl	800020a <OS_CPU_SR_Restore>
        return (OS_ERR_TASK_SUSPEND_PRIO);
 8008d20:	2348      	movs	r3, #72	@ 0x48
 8008d22:	e03a      	b.n	8008d9a <OSTaskSuspend+0xee>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	2b01      	cmp	r3, #1
 8008d28:	d104      	bne.n	8008d34 <OSTaskSuspend+0x88>
        OS_EXIT_CRITICAL();
 8008d2a:	6938      	ldr	r0, [r7, #16]
 8008d2c:	f7f7 fa6d 	bl	800020a <OS_CPU_SR_Restore>
        return (OS_ERR_TASK_NOT_EXIST);
 8008d30:	2343      	movs	r3, #67	@ 0x43
 8008d32:	e032      	b.n	8008d9a <OSTaskSuspend+0xee>
    }
    y            = ptcb->OSTCBY;
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008d3a:	72fb      	strb	r3, [r7, #11]
    OSRdyTbl[y] &= (OS_PRIO)~ptcb->OSTCBBitX;                   /* Make task not ready                 */
 8008d3c:	7afb      	ldrb	r3, [r7, #11]
 8008d3e:	4a1b      	ldr	r2, [pc, #108]	@ (8008dac <OSTaskSuspend+0x100>)
 8008d40:	5cd1      	ldrb	r1, [r2, r3]
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008d48:	43db      	mvns	r3, r3
 8008d4a:	b2da      	uxtb	r2, r3
 8008d4c:	7afb      	ldrb	r3, [r7, #11]
 8008d4e:	400a      	ands	r2, r1
 8008d50:	b2d1      	uxtb	r1, r2
 8008d52:	4a16      	ldr	r2, [pc, #88]	@ (8008dac <OSTaskSuspend+0x100>)
 8008d54:	54d1      	strb	r1, [r2, r3]
    if (OSRdyTbl[y] == 0u) {
 8008d56:	7afb      	ldrb	r3, [r7, #11]
 8008d58:	4a14      	ldr	r2, [pc, #80]	@ (8008dac <OSTaskSuspend+0x100>)
 8008d5a:	5cd3      	ldrb	r3, [r2, r3]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d10a      	bne.n	8008d76 <OSTaskSuspend+0xca>
        OSRdyGrp &= (OS_PRIO)~ptcb->OSTCBBitY;
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008d66:	43db      	mvns	r3, r3
 8008d68:	b2da      	uxtb	r2, r3
 8008d6a:	4b11      	ldr	r3, [pc, #68]	@ (8008db0 <OSTaskSuspend+0x104>)
 8008d6c:	781b      	ldrb	r3, [r3, #0]
 8008d6e:	4013      	ands	r3, r2
 8008d70:	b2da      	uxtb	r2, r3
 8008d72:	4b0f      	ldr	r3, [pc, #60]	@ (8008db0 <OSTaskSuspend+0x104>)
 8008d74:	701a      	strb	r2, [r3, #0]
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8008d7c:	f043 0308 	orr.w	r3, r3, #8
 8008d80:	b2da      	uxtb	r2, r3
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    OS_EXIT_CRITICAL();
 8008d88:	6938      	ldr	r0, [r7, #16]
 8008d8a:	f7f7 fa3e 	bl	800020a <OS_CPU_SR_Restore>
    OS_TRACE_TASK_SUSPEND(ptcb);
    OS_TRACE_TASK_SUSPENDED(ptcb);
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
 8008d8e:	7dfb      	ldrb	r3, [r7, #23]
 8008d90:	2b01      	cmp	r3, #1
 8008d92:	d101      	bne.n	8008d98 <OSTaskSuspend+0xec>
        OS_Sched();                                             /* Find new highest priority task      */
 8008d94:	f7fe fc2a 	bl	80075ec <OS_Sched>
    }
    return (OS_ERR_NONE);
 8008d98:	2300      	movs	r3, #0
}
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	3718      	adds	r7, #24
 8008d9e:	46bd      	mov	sp, r7
 8008da0:	bd80      	pop	{r7, pc}
 8008da2:	bf00      	nop
 8008da4:	20005cb8 	.word	0x20005cb8
 8008da8:	20005cc8 	.word	0x20005cc8
 8008dac:	20005aa8 	.word	0x20005aa8
 8008db0:	20005aa4 	.word	0x20005aa4

08008db4 <OS_TaskReturn>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_TaskReturn (void)
{
 8008db4:	b580      	push	{r7, lr}
 8008db6:	af00      	add	r7, sp, #0
    OSTaskReturnHook(OSTCBCur);                   /* Call hook to let user decide on what to do        */
 8008db8:	4b04      	ldr	r3, [pc, #16]	@ (8008dcc <OS_TaskReturn+0x18>)
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	f7fd fc70 	bl	80066a2 <OSTaskReturnHook>

#if OS_TASK_DEL_EN > 0u
    (void)OSTaskDel(OS_PRIO_SELF);                /* Delete task if it accidentally returns!           */
 8008dc2:	20ff      	movs	r0, #255	@ 0xff
 8008dc4:	f7ff fdb2 	bl	800892c <OSTaskDel>
#else
    for (;;) {
        OSTimeDly(OS_TICKS_PER_SEC);
    }
#endif
}
 8008dc8:	bf00      	nop
 8008dca:	bd80      	pop	{r7, pc}
 8008dcc:	20005cb8 	.word	0x20005cb8

08008dd0 <OS_TaskStkClr>:
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0u) && (OS_TASK_CREATE_EXT_EN > 0u)
void  OS_TaskStkClr (OS_STK  *pbos,
                     INT32U   size,
                     INT16U   opt)
{
 8008dd0:	b480      	push	{r7}
 8008dd2:	b085      	sub	sp, #20
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	60f8      	str	r0, [r7, #12]
 8008dd8:	60b9      	str	r1, [r7, #8]
 8008dda:	4613      	mov	r3, r2
 8008ddc:	80fb      	strh	r3, [r7, #6]
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000u) {      /* See if stack checking has been enabled       */
 8008dde:	88fb      	ldrh	r3, [r7, #6]
 8008de0:	f003 0301 	and.w	r3, r3, #1
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d010      	beq.n	8008e0a <OS_TaskStkClr+0x3a>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000u) {  /* See if stack needs to be cleared             */
 8008de8:	88fb      	ldrh	r3, [r7, #6]
 8008dea:	f003 0302 	and.w	r3, r3, #2
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d00b      	beq.n	8008e0a <OS_TaskStkClr+0x3a>
#if OS_STK_GROWTH == 1u
            while (size > 0u) {                        /* Stack grows from HIGH to LOW memory          */
 8008df2:	e007      	b.n	8008e04 <OS_TaskStkClr+0x34>
                size--;
 8008df4:	68bb      	ldr	r3, [r7, #8]
 8008df6:	3b01      	subs	r3, #1
 8008df8:	60bb      	str	r3, [r7, #8]
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	1d1a      	adds	r2, r3, #4
 8008dfe:	60fa      	str	r2, [r7, #12]
 8008e00:	2200      	movs	r2, #0
 8008e02:	601a      	str	r2, [r3, #0]
            while (size > 0u) {                        /* Stack grows from HIGH to LOW memory          */
 8008e04:	68bb      	ldr	r3, [r7, #8]
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d1f4      	bne.n	8008df4 <OS_TaskStkClr+0x24>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
 8008e0a:	bf00      	nop
 8008e0c:	3714      	adds	r7, #20
 8008e0e:	46bd      	mov	sp, r7
 8008e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e14:	4770      	bx	lr
	...

08008e18 <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT32U ticks)
{
 8008e18:	b580      	push	{r7, lr}
 8008e1a:	b084      	sub	sp, #16
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	6078      	str	r0, [r7, #4]
    INT8U      y;
#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0u;
 8008e20:	2300      	movs	r3, #0
 8008e22:	60fb      	str	r3, [r7, #12]
#endif



    if (OSIntNesting > 0u) {                     /* See if trying to call from an ISR                  */
 8008e24:	4b21      	ldr	r3, [pc, #132]	@ (8008eac <OSTimeDly+0x94>)
 8008e26:	781b      	ldrb	r3, [r3, #0]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d138      	bne.n	8008e9e <OSTimeDly+0x86>
        return;
    }
    if (OSLockNesting > 0u) {                    /* See if called with scheduler locked                */
 8008e2c:	4b20      	ldr	r3, [pc, #128]	@ (8008eb0 <OSTimeDly+0x98>)
 8008e2e:	781b      	ldrb	r3, [r3, #0]
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d136      	bne.n	8008ea2 <OSTimeDly+0x8a>
        return;
    }
    if (ticks > 0u) {                            /* 0 means no delay!                                  */
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d034      	beq.n	8008ea4 <OSTimeDly+0x8c>
        OS_ENTER_CRITICAL();
 8008e3a:	2040      	movs	r0, #64	@ 0x40
 8008e3c:	f7f7 f9d7 	bl	80001ee <OS_CPU_SR_Save>
 8008e40:	60f8      	str	r0, [r7, #12]
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
 8008e42:	4b1c      	ldr	r3, [pc, #112]	@ (8008eb4 <OSTimeDly+0x9c>)
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008e4a:	72fb      	strb	r3, [r7, #11]
        OSRdyTbl[y] &= (OS_PRIO)~OSTCBCur->OSTCBBitX;
 8008e4c:	7afb      	ldrb	r3, [r7, #11]
 8008e4e:	4a1a      	ldr	r2, [pc, #104]	@ (8008eb8 <OSTimeDly+0xa0>)
 8008e50:	5cd1      	ldrb	r1, [r2, r3]
 8008e52:	4b18      	ldr	r3, [pc, #96]	@ (8008eb4 <OSTimeDly+0x9c>)
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008e5a:	43db      	mvns	r3, r3
 8008e5c:	b2da      	uxtb	r2, r3
 8008e5e:	7afb      	ldrb	r3, [r7, #11]
 8008e60:	400a      	ands	r2, r1
 8008e62:	b2d1      	uxtb	r1, r2
 8008e64:	4a14      	ldr	r2, [pc, #80]	@ (8008eb8 <OSTimeDly+0xa0>)
 8008e66:	54d1      	strb	r1, [r2, r3]
        OS_TRACE_TASK_SUSPENDED(OSTCBCur);
        if (OSRdyTbl[y] == 0u) {
 8008e68:	7afb      	ldrb	r3, [r7, #11]
 8008e6a:	4a13      	ldr	r2, [pc, #76]	@ (8008eb8 <OSTimeDly+0xa0>)
 8008e6c:	5cd3      	ldrb	r3, [r2, r3]
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d10b      	bne.n	8008e8a <OSTimeDly+0x72>
            OSRdyGrp &= (OS_PRIO)~OSTCBCur->OSTCBBitY;
 8008e72:	4b10      	ldr	r3, [pc, #64]	@ (8008eb4 <OSTimeDly+0x9c>)
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008e7a:	43db      	mvns	r3, r3
 8008e7c:	b2da      	uxtb	r2, r3
 8008e7e:	4b0f      	ldr	r3, [pc, #60]	@ (8008ebc <OSTimeDly+0xa4>)
 8008e80:	781b      	ldrb	r3, [r3, #0]
 8008e82:	4013      	ands	r3, r2
 8008e84:	b2da      	uxtb	r2, r3
 8008e86:	4b0d      	ldr	r3, [pc, #52]	@ (8008ebc <OSTimeDly+0xa4>)
 8008e88:	701a      	strb	r2, [r3, #0]
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
 8008e8a:	4b0a      	ldr	r3, [pc, #40]	@ (8008eb4 <OSTimeDly+0x9c>)
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	687a      	ldr	r2, [r7, #4]
 8008e90:	635a      	str	r2, [r3, #52]	@ 0x34
        OS_TRACE_TASK_DLY(ticks);
        OS_EXIT_CRITICAL();
 8008e92:	68f8      	ldr	r0, [r7, #12]
 8008e94:	f7f7 f9b9 	bl	800020a <OS_CPU_SR_Restore>
        OS_Sched();                              /* Find next task to run!                             */
 8008e98:	f7fe fba8 	bl	80075ec <OS_Sched>
 8008e9c:	e002      	b.n	8008ea4 <OSTimeDly+0x8c>
        return;
 8008e9e:	bf00      	nop
 8008ea0:	e000      	b.n	8008ea4 <OSTimeDly+0x8c>
        return;
 8008ea2:	bf00      	nop
    }
}
 8008ea4:	3710      	adds	r7, #16
 8008ea6:	46bd      	mov	sp, r7
 8008ea8:	bd80      	pop	{r7, pc}
 8008eaa:	bf00      	nop
 8008eac:	20005aa0 	.word	0x20005aa0
 8008eb0:	20005aa1 	.word	0x20005aa1
 8008eb4:	20005cb8 	.word	0x20005cb8
 8008eb8:	20005aa8 	.word	0x20005aa8
 8008ebc:	20005aa4 	.word	0x20005aa4

08008ec0 <OSTimeDlyHMSM>:
#if OS_TIME_DLY_HMSM_EN > 0u
INT8U  OSTimeDlyHMSM (INT8U   hours,
                      INT8U   minutes,
                      INT8U   seconds,
                      INT16U  ms)
{
 8008ec0:	b590      	push	{r4, r7, lr}
 8008ec2:	b085      	sub	sp, #20
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	4604      	mov	r4, r0
 8008ec8:	4608      	mov	r0, r1
 8008eca:	4611      	mov	r1, r2
 8008ecc:	461a      	mov	r2, r3
 8008ece:	4623      	mov	r3, r4
 8008ed0:	71fb      	strb	r3, [r7, #7]
 8008ed2:	4603      	mov	r3, r0
 8008ed4:	71bb      	strb	r3, [r7, #6]
 8008ed6:	460b      	mov	r3, r1
 8008ed8:	717b      	strb	r3, [r7, #5]
 8008eda:	4613      	mov	r3, r2
 8008edc:	807b      	strh	r3, [r7, #2]
    INT32U ticks;


    if (OSIntNesting > 0u) {                     /* See if trying to call from an ISR                  */
 8008ede:	4b27      	ldr	r3, [pc, #156]	@ (8008f7c <OSTimeDlyHMSM+0xbc>)
 8008ee0:	781b      	ldrb	r3, [r3, #0]
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d001      	beq.n	8008eea <OSTimeDlyHMSM+0x2a>
        return (OS_ERR_TIME_DLY_ISR);
 8008ee6:	2355      	movs	r3, #85	@ 0x55
 8008ee8:	e043      	b.n	8008f72 <OSTimeDlyHMSM+0xb2>
    }
    if (OSLockNesting > 0u) {                    /* See if called with scheduler locked                */
 8008eea:	4b25      	ldr	r3, [pc, #148]	@ (8008f80 <OSTimeDlyHMSM+0xc0>)
 8008eec:	781b      	ldrb	r3, [r3, #0]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d001      	beq.n	8008ef6 <OSTimeDlyHMSM+0x36>
        return (OS_ERR_SCHED_LOCKED);
 8008ef2:	2332      	movs	r3, #50	@ 0x32
 8008ef4:	e03d      	b.n	8008f72 <OSTimeDlyHMSM+0xb2>
    }
#if OS_ARG_CHK_EN > 0u
    if (hours == 0u) {
 8008ef6:	79fb      	ldrb	r3, [r7, #7]
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d10a      	bne.n	8008f12 <OSTimeDlyHMSM+0x52>
        if (minutes == 0u) {
 8008efc:	79bb      	ldrb	r3, [r7, #6]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d107      	bne.n	8008f12 <OSTimeDlyHMSM+0x52>
            if (seconds == 0u) {
 8008f02:	797b      	ldrb	r3, [r7, #5]
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d104      	bne.n	8008f12 <OSTimeDlyHMSM+0x52>
                if (ms == 0u) {
 8008f08:	887b      	ldrh	r3, [r7, #2]
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d101      	bne.n	8008f12 <OSTimeDlyHMSM+0x52>
                    return (OS_ERR_TIME_ZERO_DLY);
 8008f0e:	2354      	movs	r3, #84	@ 0x54
 8008f10:	e02f      	b.n	8008f72 <OSTimeDlyHMSM+0xb2>
                }
            }
        }
    }
    if (minutes > 59u) {
 8008f12:	79bb      	ldrb	r3, [r7, #6]
 8008f14:	2b3b      	cmp	r3, #59	@ 0x3b
 8008f16:	d901      	bls.n	8008f1c <OSTimeDlyHMSM+0x5c>
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
 8008f18:	2351      	movs	r3, #81	@ 0x51
 8008f1a:	e02a      	b.n	8008f72 <OSTimeDlyHMSM+0xb2>
    }
    if (seconds > 59u) {
 8008f1c:	797b      	ldrb	r3, [r7, #5]
 8008f1e:	2b3b      	cmp	r3, #59	@ 0x3b
 8008f20:	d901      	bls.n	8008f26 <OSTimeDlyHMSM+0x66>
        return (OS_ERR_TIME_INVALID_SECONDS);
 8008f22:	2352      	movs	r3, #82	@ 0x52
 8008f24:	e025      	b.n	8008f72 <OSTimeDlyHMSM+0xb2>
    }
    if (ms > 999u) {
 8008f26:	887b      	ldrh	r3, [r7, #2]
 8008f28:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008f2c:	d301      	bcc.n	8008f32 <OSTimeDlyHMSM+0x72>
        return (OS_ERR_TIME_INVALID_MS);
 8008f2e:	2353      	movs	r3, #83	@ 0x53
 8008f30:	e01f      	b.n	8008f72 <OSTimeDlyHMSM+0xb2>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600uL + (INT32U)minutes * 60uL + (INT32U)seconds) * OS_TICKS_PER_SEC
 8008f32:	79fb      	ldrb	r3, [r7, #7]
 8008f34:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8008f38:	fb02 f103 	mul.w	r1, r2, r3
 8008f3c:	79ba      	ldrb	r2, [r7, #6]
 8008f3e:	4613      	mov	r3, r2
 8008f40:	011b      	lsls	r3, r3, #4
 8008f42:	1a9b      	subs	r3, r3, r2
 8008f44:	009b      	lsls	r3, r3, #2
 8008f46:	18ca      	adds	r2, r1, r3
 8008f48:	797b      	ldrb	r3, [r7, #5]
 8008f4a:	4413      	add	r3, r2
 8008f4c:	2264      	movs	r2, #100	@ 0x64
 8008f4e:	fb03 f202 	mul.w	r2, r3, r2
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500uL / OS_TICKS_PER_SEC) / 1000uL;
 8008f52:	887b      	ldrh	r3, [r7, #2]
 8008f54:	2164      	movs	r1, #100	@ 0x64
 8008f56:	fb01 f303 	mul.w	r3, r1, r3
 8008f5a:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8008f5e:	4909      	ldr	r1, [pc, #36]	@ (8008f84 <OSTimeDlyHMSM+0xc4>)
 8008f60:	fba1 1303 	umull	r1, r3, r1, r3
 8008f64:	099b      	lsrs	r3, r3, #6
    ticks = ((INT32U)hours * 3600uL + (INT32U)minutes * 60uL + (INT32U)seconds) * OS_TICKS_PER_SEC
 8008f66:	4413      	add	r3, r2
 8008f68:	60fb      	str	r3, [r7, #12]
    OSTimeDly(ticks);
 8008f6a:	68f8      	ldr	r0, [r7, #12]
 8008f6c:	f7ff ff54 	bl	8008e18 <OSTimeDly>
    return (OS_ERR_NONE);
 8008f70:	2300      	movs	r3, #0
}
 8008f72:	4618      	mov	r0, r3
 8008f74:	3714      	adds	r7, #20
 8008f76:	46bd      	mov	sp, r7
 8008f78:	bd90      	pop	{r4, r7, pc}
 8008f7a:	bf00      	nop
 8008f7c:	20005aa0 	.word	0x20005aa0
 8008f80:	20005aa1 	.word	0x20005aa1
 8008f84:	10624dd3 	.word	0x10624dd3

08008f88 <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0u
INT32U  OSTimeGet (void)
{
 8008f88:	b580      	push	{r7, lr}
 8008f8a:	b082      	sub	sp, #8
 8008f8c:	af00      	add	r7, sp, #0
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0u;
 8008f8e:	2300      	movs	r3, #0
 8008f90:	607b      	str	r3, [r7, #4]
#endif



    OS_ENTER_CRITICAL();
 8008f92:	2040      	movs	r0, #64	@ 0x40
 8008f94:	f7f7 f92b 	bl	80001ee <OS_CPU_SR_Save>
 8008f98:	6078      	str	r0, [r7, #4]
    ticks = OSTime;
 8008f9a:	4b05      	ldr	r3, [pc, #20]	@ (8008fb0 <OSTimeGet+0x28>)
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	603b      	str	r3, [r7, #0]
    OS_EXIT_CRITICAL();
 8008fa0:	6878      	ldr	r0, [r7, #4]
 8008fa2:	f7f7 f932 	bl	800020a <OS_CPU_SR_Restore>
    return (ticks);
 8008fa6:	683b      	ldr	r3, [r7, #0]
}
 8008fa8:	4618      	mov	r0, r3
 8008faa:	3708      	adds	r7, #8
 8008fac:	46bd      	mov	sp, r7
 8008fae:	bd80      	pop	{r7, pc}
 8008fb0:	20006698 	.word	0x20006698

08008fb4 <OSTmrSignal>:
*********************************************************************************************************
*/

#if OS_TMR_EN > 0u
INT8U  OSTmrSignal (void)
{
 8008fb4:	b580      	push	{r7, lr}
 8008fb6:	b082      	sub	sp, #8
 8008fb8:	af00      	add	r7, sp, #0
    INT8U  err;


    err = OSSemPost(OSTmrSemSignal);
 8008fba:	4b06      	ldr	r3, [pc, #24]	@ (8008fd4 <OSTmrSignal+0x20>)
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	4618      	mov	r0, r3
 8008fc0:	f7ff fc08 	bl	80087d4 <OSSemPost>
 8008fc4:	4603      	mov	r3, r0
 8008fc6:	71fb      	strb	r3, [r7, #7]
    return (err);
 8008fc8:	79fb      	ldrb	r3, [r7, #7]
}
 8008fca:	4618      	mov	r0, r3
 8008fcc:	3708      	adds	r7, #8
 8008fce:	46bd      	mov	sp, r7
 8008fd0:	bd80      	pop	{r7, pc}
 8008fd2:	bf00      	nop
 8008fd4:	200066a8 	.word	0x200066a8

08008fd8 <OSTmr_Init>:
*********************************************************************************************************
*/

#if OS_TMR_EN > 0u
void  OSTmr_Init (void)
{
 8008fd8:	b580      	push	{r7, lr}
 8008fda:	b086      	sub	sp, #24
 8008fdc:	af00      	add	r7, sp, #0
    INT16U   ix_next;
    OS_TMR  *ptmr1;
    OS_TMR  *ptmr2;


    OS_MemClr((INT8U *)&OSTmrTbl[0],      sizeof(OSTmrTbl));            /* Clear all the TMRs                         */
 8008fde:	f44f 7120 	mov.w	r1, #640	@ 0x280
 8008fe2:	4838      	ldr	r0, [pc, #224]	@ (80090c4 <OSTmr_Init+0xec>)
 8008fe4:	f7fe fae8 	bl	80075b8 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTmrWheelTbl[0], sizeof(OSTmrWheelTbl));       /* Clear the timer wheel                      */
 8008fe8:	2138      	movs	r1, #56	@ 0x38
 8008fea:	4837      	ldr	r0, [pc, #220]	@ (80090c8 <OSTmr_Init+0xf0>)
 8008fec:	f7fe fae4 	bl	80075b8 <OS_MemClr>

    for (ix = 0u; ix < (OS_TMR_CFG_MAX - 1u); ix++) {                   /* Init. list of free TMRs                    */
 8008ff0:	2300      	movs	r3, #0
 8008ff2:	82fb      	strh	r3, [r7, #22]
 8008ff4:	e022      	b.n	800903c <OSTmr_Init+0x64>
        ix_next = ix + 1u;
 8008ff6:	8afb      	ldrh	r3, [r7, #22]
 8008ff8:	3301      	adds	r3, #1
 8008ffa:	81fb      	strh	r3, [r7, #14]
        ptmr1 = &OSTmrTbl[ix];
 8008ffc:	8afa      	ldrh	r2, [r7, #22]
 8008ffe:	4613      	mov	r3, r2
 8009000:	009b      	lsls	r3, r3, #2
 8009002:	4413      	add	r3, r2
 8009004:	00db      	lsls	r3, r3, #3
 8009006:	4a2f      	ldr	r2, [pc, #188]	@ (80090c4 <OSTmr_Init+0xec>)
 8009008:	4413      	add	r3, r2
 800900a:	613b      	str	r3, [r7, #16]
        ptmr2 = &OSTmrTbl[ix_next];
 800900c:	89fa      	ldrh	r2, [r7, #14]
 800900e:	4613      	mov	r3, r2
 8009010:	009b      	lsls	r3, r3, #2
 8009012:	4413      	add	r3, r2
 8009014:	00db      	lsls	r3, r3, #3
 8009016:	4a2b      	ldr	r2, [pc, #172]	@ (80090c4 <OSTmr_Init+0xec>)
 8009018:	4413      	add	r3, r2
 800901a:	60bb      	str	r3, [r7, #8]
        ptmr1->OSTmrType    = OS_TMR_TYPE;
 800901c:	693b      	ldr	r3, [r7, #16]
 800901e:	2264      	movs	r2, #100	@ 0x64
 8009020:	701a      	strb	r2, [r3, #0]
        ptmr1->OSTmrState   = OS_TMR_STATE_UNUSED;                      /* Indicate that timer is inactive            */
 8009022:	693b      	ldr	r3, [r7, #16]
 8009024:	2200      	movs	r2, #0
 8009026:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
        ptmr1->OSTmrNext    = (void *)ptmr2;                            /* Link to next timer                         */
 800902a:	693b      	ldr	r3, [r7, #16]
 800902c:	68ba      	ldr	r2, [r7, #8]
 800902e:	60da      	str	r2, [r3, #12]
#if OS_TMR_CFG_NAME_EN > 0u
        ptmr1->OSTmrName    = (INT8U *)(void *)"?";
 8009030:	693b      	ldr	r3, [r7, #16]
 8009032:	4a26      	ldr	r2, [pc, #152]	@ (80090cc <OSTmr_Init+0xf4>)
 8009034:	621a      	str	r2, [r3, #32]
    for (ix = 0u; ix < (OS_TMR_CFG_MAX - 1u); ix++) {                   /* Init. list of free TMRs                    */
 8009036:	8afb      	ldrh	r3, [r7, #22]
 8009038:	3301      	adds	r3, #1
 800903a:	82fb      	strh	r3, [r7, #22]
 800903c:	8afb      	ldrh	r3, [r7, #22]
 800903e:	2b0e      	cmp	r3, #14
 8009040:	d9d9      	bls.n	8008ff6 <OSTmr_Init+0x1e>
#endif
    }
    ptmr1               = &OSTmrTbl[ix];
 8009042:	8afa      	ldrh	r2, [r7, #22]
 8009044:	4613      	mov	r3, r2
 8009046:	009b      	lsls	r3, r3, #2
 8009048:	4413      	add	r3, r2
 800904a:	00db      	lsls	r3, r3, #3
 800904c:	4a1d      	ldr	r2, [pc, #116]	@ (80090c4 <OSTmr_Init+0xec>)
 800904e:	4413      	add	r3, r2
 8009050:	613b      	str	r3, [r7, #16]
    ptmr1->OSTmrType    = OS_TMR_TYPE;
 8009052:	693b      	ldr	r3, [r7, #16]
 8009054:	2264      	movs	r2, #100	@ 0x64
 8009056:	701a      	strb	r2, [r3, #0]
    ptmr1->OSTmrState   = OS_TMR_STATE_UNUSED;                          /* Indicate that timer is inactive            */
 8009058:	693b      	ldr	r3, [r7, #16]
 800905a:	2200      	movs	r2, #0
 800905c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    ptmr1->OSTmrNext    = (void *)0;                                    /* Last OS_TMR                                */
 8009060:	693b      	ldr	r3, [r7, #16]
 8009062:	2200      	movs	r2, #0
 8009064:	60da      	str	r2, [r3, #12]
#if OS_TMR_CFG_NAME_EN > 0u
    ptmr1->OSTmrName    = (INT8U *)(void *)"?";
 8009066:	693b      	ldr	r3, [r7, #16]
 8009068:	4a18      	ldr	r2, [pc, #96]	@ (80090cc <OSTmr_Init+0xf4>)
 800906a:	621a      	str	r2, [r3, #32]
#endif
    OSTmrTime           = 0u;
 800906c:	4b18      	ldr	r3, [pc, #96]	@ (80090d0 <OSTmr_Init+0xf8>)
 800906e:	2200      	movs	r2, #0
 8009070:	601a      	str	r2, [r3, #0]
    OSTmrUsed           = 0u;
 8009072:	4b18      	ldr	r3, [pc, #96]	@ (80090d4 <OSTmr_Init+0xfc>)
 8009074:	2200      	movs	r2, #0
 8009076:	801a      	strh	r2, [r3, #0]
    OSTmrFree           = OS_TMR_CFG_MAX;
 8009078:	4b17      	ldr	r3, [pc, #92]	@ (80090d8 <OSTmr_Init+0x100>)
 800907a:	2210      	movs	r2, #16
 800907c:	801a      	strh	r2, [r3, #0]
    OSTmrFreeList       = &OSTmrTbl[0];
 800907e:	4b17      	ldr	r3, [pc, #92]	@ (80090dc <OSTmr_Init+0x104>)
 8009080:	4a10      	ldr	r2, [pc, #64]	@ (80090c4 <OSTmr_Init+0xec>)
 8009082:	601a      	str	r2, [r3, #0]
    OSTmrSem            = OSSemCreate(1u);
 8009084:	2001      	movs	r0, #1
 8009086:	f7ff facd 	bl	8008624 <OSSemCreate>
 800908a:	4603      	mov	r3, r0
 800908c:	4a14      	ldr	r2, [pc, #80]	@ (80090e0 <OSTmr_Init+0x108>)
 800908e:	6013      	str	r3, [r2, #0]
    OSTmrSemSignal      = OSSemCreate(0u);
 8009090:	2000      	movs	r0, #0
 8009092:	f7ff fac7 	bl	8008624 <OSSemCreate>
 8009096:	4603      	mov	r3, r0
 8009098:	4a12      	ldr	r2, [pc, #72]	@ (80090e4 <OSTmr_Init+0x10c>)
 800909a:	6013      	str	r3, [r2, #0]

#if OS_EVENT_NAME_EN > 0u                                               /* Assign names to semaphores                 */
    OSEventNameSet(OSTmrSem,       (INT8U *)(void *)"uC/OS-II TmrLock",   &err);
 800909c:	4b10      	ldr	r3, [pc, #64]	@ (80090e0 <OSTmr_Init+0x108>)
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	1dfa      	adds	r2, r7, #7
 80090a2:	4911      	ldr	r1, [pc, #68]	@ (80090e8 <OSTmr_Init+0x110>)
 80090a4:	4618      	mov	r0, r3
 80090a6:	f7fd fdd9 	bl	8006c5c <OSEventNameSet>
    OSEventNameSet(OSTmrSemSignal, (INT8U *)(void *)"uC/OS-II TmrSignal", &err);
 80090aa:	4b0e      	ldr	r3, [pc, #56]	@ (80090e4 <OSTmr_Init+0x10c>)
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	1dfa      	adds	r2, r7, #7
 80090b0:	490e      	ldr	r1, [pc, #56]	@ (80090ec <OSTmr_Init+0x114>)
 80090b2:	4618      	mov	r0, r3
 80090b4:	f7fd fdd2 	bl	8006c5c <OSEventNameSet>
#endif

    OSTmr_InitTask();
 80090b8:	f000 f81a 	bl	80090f0 <OSTmr_InitTask>
}
 80090bc:	bf00      	nop
 80090be:	3718      	adds	r7, #24
 80090c0:	46bd      	mov	sp, r7
 80090c2:	bd80      	pop	{r7, pc}
 80090c4:	200066ac 	.word	0x200066ac
 80090c8:	20006b30 	.word	0x20006b30
 80090cc:	0800c580 	.word	0x0800c580
 80090d0:	200066a0 	.word	0x200066a0
 80090d4:	2000669e 	.word	0x2000669e
 80090d8:	2000669c 	.word	0x2000669c
 80090dc:	2000692c 	.word	0x2000692c
 80090e0:	200066a4 	.word	0x200066a4
 80090e4:	200066a8 	.word	0x200066a8
 80090e8:	0800c584 	.word	0x0800c584
 80090ec:	0800c598 	.word	0x0800c598

080090f0 <OSTmr_InitTask>:
*********************************************************************************************************
*/

#if OS_TMR_EN > 0u
static  void  OSTmr_InitTask (void)
{
 80090f0:	b580      	push	{r7, lr}
 80090f2:	b088      	sub	sp, #32
 80090f4:	af06      	add	r7, sp, #24
#endif


#if OS_TASK_CREATE_EXT_EN > 0u
    #if OS_STK_GROWTH == 1u
    (void)OSTaskCreateExt(OSTmr_Task,
 80090f6:	2303      	movs	r3, #3
 80090f8:	9304      	str	r3, [sp, #16]
 80090fa:	2300      	movs	r3, #0
 80090fc:	9303      	str	r3, [sp, #12]
 80090fe:	2380      	movs	r3, #128	@ 0x80
 8009100:	9302      	str	r3, [sp, #8]
 8009102:	4b0a      	ldr	r3, [pc, #40]	@ (800912c <OSTmr_InitTask+0x3c>)
 8009104:	9301      	str	r3, [sp, #4]
 8009106:	f64f 73fd 	movw	r3, #65533	@ 0xfffd
 800910a:	9300      	str	r3, [sp, #0]
 800910c:	233d      	movs	r3, #61	@ 0x3d
 800910e:	4a08      	ldr	r2, [pc, #32]	@ (8009130 <OSTmr_InitTask+0x40>)
 8009110:	2100      	movs	r1, #0
 8009112:	4808      	ldr	r0, [pc, #32]	@ (8009134 <OSTmr_InitTask+0x44>)
 8009114:	f7ff fb9e 	bl	8008854 <OSTaskCreateExt>
                       OS_TASK_TMR_PRIO);
    #endif
#endif

#if OS_TASK_NAME_EN > 0u
    OSTaskNameSet(OS_TASK_TMR_PRIO, (INT8U *)(void *)"uC/OS-II Tmr", &err);
 8009118:	1dfb      	adds	r3, r7, #7
 800911a:	461a      	mov	r2, r3
 800911c:	4906      	ldr	r1, [pc, #24]	@ (8009138 <OSTmr_InitTask+0x48>)
 800911e:	203d      	movs	r0, #61	@ 0x3d
 8009120:	f7ff fcfc 	bl	8008b1c <OSTaskNameSet>
#endif
}
 8009124:	bf00      	nop
 8009126:	3708      	adds	r7, #8
 8009128:	46bd      	mov	sp, r7
 800912a:	bd80      	pop	{r7, pc}
 800912c:	20006930 	.word	0x20006930
 8009130:	20006b2c 	.word	0x20006b2c
 8009134:	080092bd 	.word	0x080092bd
 8009138:	0800c5ac 	.word	0x0800c5ac

0800913c <OSTmr_Link>:
*/

#if OS_TMR_EN > 0u
static  void  OSTmr_Link (OS_TMR  *ptmr,
                          INT8U    type)
{
 800913c:	b480      	push	{r7}
 800913e:	b087      	sub	sp, #28
 8009140:	af00      	add	r7, sp, #0
 8009142:	6078      	str	r0, [r7, #4]
 8009144:	460b      	mov	r3, r1
 8009146:	70fb      	strb	r3, [r7, #3]
    OS_TMR       *ptmr1;
    OS_TMR_WHEEL *pspoke;
    INT16U        spoke;


    ptmr->OSTmrState = OS_TMR_STATE_RUNNING;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	2203      	movs	r2, #3
 800914c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    if (type == OS_TMR_LINK_PERIODIC) {                            /* Determine when timer will expire                */
 8009150:	78fb      	ldrb	r3, [r7, #3]
 8009152:	2b01      	cmp	r3, #1
 8009154:	d107      	bne.n	8009166 <OSTmr_Link+0x2a>
        ptmr->OSTmrMatch = ptmr->OSTmrPeriod + OSTmrTime;
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	69da      	ldr	r2, [r3, #28]
 800915a:	4b2b      	ldr	r3, [pc, #172]	@ (8009208 <OSTmr_Link+0xcc>)
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	441a      	add	r2, r3
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	615a      	str	r2, [r3, #20]
 8009164:	e012      	b.n	800918c <OSTmr_Link+0x50>
    } else {
        if (ptmr->OSTmrDly == 0u) {
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	699b      	ldr	r3, [r3, #24]
 800916a:	2b00      	cmp	r3, #0
 800916c:	d107      	bne.n	800917e <OSTmr_Link+0x42>
            ptmr->OSTmrMatch = ptmr->OSTmrPeriod + OSTmrTime;
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	69da      	ldr	r2, [r3, #28]
 8009172:	4b25      	ldr	r3, [pc, #148]	@ (8009208 <OSTmr_Link+0xcc>)
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	441a      	add	r2, r3
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	615a      	str	r2, [r3, #20]
 800917c:	e006      	b.n	800918c <OSTmr_Link+0x50>
        } else {
            ptmr->OSTmrMatch = ptmr->OSTmrDly    + OSTmrTime;
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	699a      	ldr	r2, [r3, #24]
 8009182:	4b21      	ldr	r3, [pc, #132]	@ (8009208 <OSTmr_Link+0xcc>)
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	441a      	add	r2, r3
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	615a      	str	r2, [r3, #20]
        }
    }
    spoke  = (INT16U)(ptmr->OSTmrMatch % OS_TMR_CFG_WHEEL_SIZE);
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	695a      	ldr	r2, [r3, #20]
 8009190:	4b1e      	ldr	r3, [pc, #120]	@ (800920c <OSTmr_Link+0xd0>)
 8009192:	fba3 1302 	umull	r1, r3, r3, r2
 8009196:	1ad1      	subs	r1, r2, r3
 8009198:	0849      	lsrs	r1, r1, #1
 800919a:	440b      	add	r3, r1
 800919c:	0899      	lsrs	r1, r3, #2
 800919e:	460b      	mov	r3, r1
 80091a0:	00db      	lsls	r3, r3, #3
 80091a2:	1a5b      	subs	r3, r3, r1
 80091a4:	1ad1      	subs	r1, r2, r3
 80091a6:	460b      	mov	r3, r1
 80091a8:	82fb      	strh	r3, [r7, #22]
    pspoke = &OSTmrWheelTbl[spoke];
 80091aa:	8afb      	ldrh	r3, [r7, #22]
 80091ac:	00db      	lsls	r3, r3, #3
 80091ae:	4a18      	ldr	r2, [pc, #96]	@ (8009210 <OSTmr_Link+0xd4>)
 80091b0:	4413      	add	r3, r2
 80091b2:	613b      	str	r3, [r7, #16]

    if (pspoke->OSTmrFirst == (OS_TMR *)0) {                       /* Link into timer wheel                           */
 80091b4:	693b      	ldr	r3, [r7, #16]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d109      	bne.n	80091d0 <OSTmr_Link+0x94>
        pspoke->OSTmrFirst   = ptmr;
 80091bc:	693b      	ldr	r3, [r7, #16]
 80091be:	687a      	ldr	r2, [r7, #4]
 80091c0:	601a      	str	r2, [r3, #0]
        ptmr->OSTmrNext      = (OS_TMR *)0;
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	2200      	movs	r2, #0
 80091c6:	60da      	str	r2, [r3, #12]
        pspoke->OSTmrEntries = 1u;
 80091c8:	693b      	ldr	r3, [r7, #16]
 80091ca:	2201      	movs	r2, #1
 80091cc:	809a      	strh	r2, [r3, #4]
 80091ce:	e011      	b.n	80091f4 <OSTmr_Link+0xb8>
    } else {
        ptmr1                = pspoke->OSTmrFirst;                 /* Point to first timer in the spoke               */
 80091d0:	693b      	ldr	r3, [r7, #16]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	60fb      	str	r3, [r7, #12]
        pspoke->OSTmrFirst   = ptmr;
 80091d6:	693b      	ldr	r3, [r7, #16]
 80091d8:	687a      	ldr	r2, [r7, #4]
 80091da:	601a      	str	r2, [r3, #0]
        ptmr->OSTmrNext      = (void *)ptmr1;
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	68fa      	ldr	r2, [r7, #12]
 80091e0:	60da      	str	r2, [r3, #12]
        ptmr1->OSTmrPrev     = (void *)ptmr;
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	687a      	ldr	r2, [r7, #4]
 80091e6:	611a      	str	r2, [r3, #16]
        pspoke->OSTmrEntries++;
 80091e8:	693b      	ldr	r3, [r7, #16]
 80091ea:	889b      	ldrh	r3, [r3, #4]
 80091ec:	3301      	adds	r3, #1
 80091ee:	b29a      	uxth	r2, r3
 80091f0:	693b      	ldr	r3, [r7, #16]
 80091f2:	809a      	strh	r2, [r3, #4]
    }
    ptmr->OSTmrPrev = (void *)0;                                   /* Timer always inserted as first node in list     */
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	2200      	movs	r2, #0
 80091f8:	611a      	str	r2, [r3, #16]
}
 80091fa:	bf00      	nop
 80091fc:	371c      	adds	r7, #28
 80091fe:	46bd      	mov	sp, r7
 8009200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009204:	4770      	bx	lr
 8009206:	bf00      	nop
 8009208:	200066a0 	.word	0x200066a0
 800920c:	24924925 	.word	0x24924925
 8009210:	20006b30 	.word	0x20006b30

08009214 <OSTmr_Unlink>:
*********************************************************************************************************
*/

#if OS_TMR_EN > 0u
static  void  OSTmr_Unlink (OS_TMR *ptmr)
{
 8009214:	b480      	push	{r7}
 8009216:	b087      	sub	sp, #28
 8009218:	af00      	add	r7, sp, #0
 800921a:	6078      	str	r0, [r7, #4]
    OS_TMR        *ptmr2;
    OS_TMR_WHEEL  *pspoke;
    INT16U         spoke;


    spoke  = (INT16U)(ptmr->OSTmrMatch % OS_TMR_CFG_WHEEL_SIZE);
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	695a      	ldr	r2, [r3, #20]
 8009220:	4b24      	ldr	r3, [pc, #144]	@ (80092b4 <OSTmr_Unlink+0xa0>)
 8009222:	fba3 1302 	umull	r1, r3, r3, r2
 8009226:	1ad1      	subs	r1, r2, r3
 8009228:	0849      	lsrs	r1, r1, #1
 800922a:	440b      	add	r3, r1
 800922c:	0899      	lsrs	r1, r3, #2
 800922e:	460b      	mov	r3, r1
 8009230:	00db      	lsls	r3, r3, #3
 8009232:	1a5b      	subs	r3, r3, r1
 8009234:	1ad1      	subs	r1, r2, r3
 8009236:	460b      	mov	r3, r1
 8009238:	82fb      	strh	r3, [r7, #22]
    pspoke = &OSTmrWheelTbl[spoke];
 800923a:	8afb      	ldrh	r3, [r7, #22]
 800923c:	00db      	lsls	r3, r3, #3
 800923e:	4a1e      	ldr	r2, [pc, #120]	@ (80092b8 <OSTmr_Unlink+0xa4>)
 8009240:	4413      	add	r3, r2
 8009242:	613b      	str	r3, [r7, #16]

    if (pspoke->OSTmrFirst == ptmr) {                       /* See if timer to remove is at the beginning of list     */
 8009244:	693b      	ldr	r3, [r7, #16]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	687a      	ldr	r2, [r7, #4]
 800924a:	429a      	cmp	r2, r3
 800924c:	d10c      	bne.n	8009268 <OSTmr_Unlink+0x54>
        ptmr1              = (OS_TMR *)ptmr->OSTmrNext;
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	68db      	ldr	r3, [r3, #12]
 8009252:	60fb      	str	r3, [r7, #12]
        pspoke->OSTmrFirst = (OS_TMR *)ptmr1;
 8009254:	693b      	ldr	r3, [r7, #16]
 8009256:	68fa      	ldr	r2, [r7, #12]
 8009258:	601a      	str	r2, [r3, #0]
        if (ptmr1 != (OS_TMR *)0) {
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	2b00      	cmp	r3, #0
 800925e:	d012      	beq.n	8009286 <OSTmr_Unlink+0x72>
            ptmr1->OSTmrPrev = (void *)0;
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	2200      	movs	r2, #0
 8009264:	611a      	str	r2, [r3, #16]
 8009266:	e00e      	b.n	8009286 <OSTmr_Unlink+0x72>
        }
    } else {
        ptmr1            = (OS_TMR *)ptmr->OSTmrPrev;       /* Remove timer from somewhere in the list                */
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	691b      	ldr	r3, [r3, #16]
 800926c:	60fb      	str	r3, [r7, #12]
        ptmr2            = (OS_TMR *)ptmr->OSTmrNext;
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	68db      	ldr	r3, [r3, #12]
 8009272:	60bb      	str	r3, [r7, #8]
        ptmr1->OSTmrNext = ptmr2;
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	68ba      	ldr	r2, [r7, #8]
 8009278:	60da      	str	r2, [r3, #12]
        if (ptmr2 != (OS_TMR *)0) {
 800927a:	68bb      	ldr	r3, [r7, #8]
 800927c:	2b00      	cmp	r3, #0
 800927e:	d002      	beq.n	8009286 <OSTmr_Unlink+0x72>
            ptmr2->OSTmrPrev = (void *)ptmr1;
 8009280:	68bb      	ldr	r3, [r7, #8]
 8009282:	68fa      	ldr	r2, [r7, #12]
 8009284:	611a      	str	r2, [r3, #16]
        }
    }
    ptmr->OSTmrState = OS_TMR_STATE_STOPPED;
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	2201      	movs	r2, #1
 800928a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    ptmr->OSTmrNext  = (void *)0;
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	2200      	movs	r2, #0
 8009292:	60da      	str	r2, [r3, #12]
    ptmr->OSTmrPrev  = (void *)0;
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	2200      	movs	r2, #0
 8009298:	611a      	str	r2, [r3, #16]
    pspoke->OSTmrEntries--;
 800929a:	693b      	ldr	r3, [r7, #16]
 800929c:	889b      	ldrh	r3, [r3, #4]
 800929e:	3b01      	subs	r3, #1
 80092a0:	b29a      	uxth	r2, r3
 80092a2:	693b      	ldr	r3, [r7, #16]
 80092a4:	809a      	strh	r2, [r3, #4]
}
 80092a6:	bf00      	nop
 80092a8:	371c      	adds	r7, #28
 80092aa:	46bd      	mov	sp, r7
 80092ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b0:	4770      	bx	lr
 80092b2:	bf00      	nop
 80092b4:	24924925 	.word	0x24924925
 80092b8:	20006b30 	.word	0x20006b30

080092bc <OSTmr_Task>:
*********************************************************************************************************
*/

#if OS_TMR_EN > 0u
static  void  OSTmr_Task (void *p_arg)
{
 80092bc:	b580      	push	{r7, lr}
 80092be:	b088      	sub	sp, #32
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	6078      	str	r0, [r7, #4]
    INT16U           spoke;


    p_arg = p_arg;                                               /* Prevent compiler warning for not using 'p_arg'    */
    for (;;) {
        OSSemPend(OSTmrSemSignal, 0u, &err);                     /* Wait for signal indicating time to update timers  */
 80092c4:	4b2a      	ldr	r3, [pc, #168]	@ (8009370 <OSTmr_Task+0xb4>)
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	f107 020b 	add.w	r2, r7, #11
 80092cc:	2100      	movs	r1, #0
 80092ce:	4618      	mov	r0, r3
 80092d0:	f7ff f9e6 	bl	80086a0 <OSSemPend>
        OSSchedLock();
 80092d4:	f7fd fd86 	bl	8006de4 <OSSchedLock>
        OSTmrTime++;                                             /* Increment the current time                        */
 80092d8:	4b26      	ldr	r3, [pc, #152]	@ (8009374 <OSTmr_Task+0xb8>)
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	3301      	adds	r3, #1
 80092de:	4a25      	ldr	r2, [pc, #148]	@ (8009374 <OSTmr_Task+0xb8>)
 80092e0:	6013      	str	r3, [r2, #0]
        spoke  = (INT16U)(OSTmrTime % OS_TMR_CFG_WHEEL_SIZE);    /* Position on current timer wheel entry             */
 80092e2:	4b24      	ldr	r3, [pc, #144]	@ (8009374 <OSTmr_Task+0xb8>)
 80092e4:	681a      	ldr	r2, [r3, #0]
 80092e6:	4b24      	ldr	r3, [pc, #144]	@ (8009378 <OSTmr_Task+0xbc>)
 80092e8:	fba3 1302 	umull	r1, r3, r3, r2
 80092ec:	1ad1      	subs	r1, r2, r3
 80092ee:	0849      	lsrs	r1, r1, #1
 80092f0:	440b      	add	r3, r1
 80092f2:	0899      	lsrs	r1, r3, #2
 80092f4:	460b      	mov	r3, r1
 80092f6:	00db      	lsls	r3, r3, #3
 80092f8:	1a5b      	subs	r3, r3, r1
 80092fa:	1ad1      	subs	r1, r2, r3
 80092fc:	460b      	mov	r3, r1
 80092fe:	837b      	strh	r3, [r7, #26]
        pspoke = &OSTmrWheelTbl[spoke];
 8009300:	8b7b      	ldrh	r3, [r7, #26]
 8009302:	00db      	lsls	r3, r3, #3
 8009304:	4a1d      	ldr	r2, [pc, #116]	@ (800937c <OSTmr_Task+0xc0>)
 8009306:	4413      	add	r3, r2
 8009308:	617b      	str	r3, [r7, #20]
        ptmr   = pspoke->OSTmrFirst;
 800930a:	697b      	ldr	r3, [r7, #20]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	61fb      	str	r3, [r7, #28]
        while (ptmr != (OS_TMR *)0) {
 8009310:	e027      	b.n	8009362 <OSTmr_Task+0xa6>
            ptmr_next = (OS_TMR *)ptmr->OSTmrNext;               /* Point to next timer to update because current ... */
 8009312:	69fb      	ldr	r3, [r7, #28]
 8009314:	68db      	ldr	r3, [r3, #12]
 8009316:	613b      	str	r3, [r7, #16]
                                                                 /* ... timer could get unlinked from the wheel.      */
            if (OSTmrTime == ptmr->OSTmrMatch) {                 /* Process each timer that expires                   */
 8009318:	69fb      	ldr	r3, [r7, #28]
 800931a:	695a      	ldr	r2, [r3, #20]
 800931c:	4b15      	ldr	r3, [pc, #84]	@ (8009374 <OSTmr_Task+0xb8>)
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	429a      	cmp	r2, r3
 8009322:	d11c      	bne.n	800935e <OSTmr_Task+0xa2>
                OS_TRACE_TMR_EXPIRED(ptmr);
                OSTmr_Unlink(ptmr);                              /* Remove from current wheel spoke                   */
 8009324:	69f8      	ldr	r0, [r7, #28]
 8009326:	f7ff ff75 	bl	8009214 <OSTmr_Unlink>
                if (ptmr->OSTmrOpt == OS_TMR_OPT_PERIODIC) {
 800932a:	69fb      	ldr	r3, [r7, #28]
 800932c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8009330:	2b02      	cmp	r3, #2
 8009332:	d104      	bne.n	800933e <OSTmr_Task+0x82>
                    OSTmr_Link(ptmr, OS_TMR_LINK_PERIODIC);      /* Recalculate new position of timer in wheel        */
 8009334:	2101      	movs	r1, #1
 8009336:	69f8      	ldr	r0, [r7, #28]
 8009338:	f7ff ff00 	bl	800913c <OSTmr_Link>
 800933c:	e003      	b.n	8009346 <OSTmr_Task+0x8a>
                } else {
                    ptmr->OSTmrState = OS_TMR_STATE_COMPLETED;   /* Indicate that the timer has completed             */
 800933e:	69fb      	ldr	r3, [r7, #28]
 8009340:	2202      	movs	r2, #2
 8009342:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
                }
                pfnct = ptmr->OSTmrCallback;                     /* Execute callback function if available            */
 8009346:	69fb      	ldr	r3, [r7, #28]
 8009348:	685b      	ldr	r3, [r3, #4]
 800934a:	60fb      	str	r3, [r7, #12]
                if (pfnct != (OS_TMR_CALLBACK)0) {
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	2b00      	cmp	r3, #0
 8009350:	d005      	beq.n	800935e <OSTmr_Task+0xa2>
                    (*pfnct)((void *)ptmr, ptmr->OSTmrCallbackArg);
 8009352:	69fb      	ldr	r3, [r7, #28]
 8009354:	689a      	ldr	r2, [r3, #8]
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	4611      	mov	r1, r2
 800935a:	69f8      	ldr	r0, [r7, #28]
 800935c:	4798      	blx	r3
                }
            }
            ptmr = ptmr_next;
 800935e:	693b      	ldr	r3, [r7, #16]
 8009360:	61fb      	str	r3, [r7, #28]
        while (ptmr != (OS_TMR *)0) {
 8009362:	69fb      	ldr	r3, [r7, #28]
 8009364:	2b00      	cmp	r3, #0
 8009366:	d1d4      	bne.n	8009312 <OSTmr_Task+0x56>
        }
        OSSchedUnlock();
 8009368:	f7fd fd64 	bl	8006e34 <OSSchedUnlock>
        OSSemPend(OSTmrSemSignal, 0u, &err);                     /* Wait for signal indicating time to update timers  */
 800936c:	e7aa      	b.n	80092c4 <OSTmr_Task+0x8>
 800936e:	bf00      	nop
 8009370:	200066a8 	.word	0x200066a8
 8009374:	200066a0 	.word	0x200066a0
 8009378:	24924925 	.word	0x24924925
 800937c:	20006b30 	.word	0x20006b30

08009380 <__cvt>:
 8009380:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009384:	ec57 6b10 	vmov	r6, r7, d0
 8009388:	2f00      	cmp	r7, #0
 800938a:	460c      	mov	r4, r1
 800938c:	4619      	mov	r1, r3
 800938e:	463b      	mov	r3, r7
 8009390:	bfbb      	ittet	lt
 8009392:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8009396:	461f      	movlt	r7, r3
 8009398:	2300      	movge	r3, #0
 800939a:	232d      	movlt	r3, #45	@ 0x2d
 800939c:	700b      	strb	r3, [r1, #0]
 800939e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80093a0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80093a4:	4691      	mov	r9, r2
 80093a6:	f023 0820 	bic.w	r8, r3, #32
 80093aa:	bfbc      	itt	lt
 80093ac:	4632      	movlt	r2, r6
 80093ae:	4616      	movlt	r6, r2
 80093b0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80093b4:	d005      	beq.n	80093c2 <__cvt+0x42>
 80093b6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80093ba:	d100      	bne.n	80093be <__cvt+0x3e>
 80093bc:	3401      	adds	r4, #1
 80093be:	2102      	movs	r1, #2
 80093c0:	e000      	b.n	80093c4 <__cvt+0x44>
 80093c2:	2103      	movs	r1, #3
 80093c4:	ab03      	add	r3, sp, #12
 80093c6:	9301      	str	r3, [sp, #4]
 80093c8:	ab02      	add	r3, sp, #8
 80093ca:	9300      	str	r3, [sp, #0]
 80093cc:	ec47 6b10 	vmov	d0, r6, r7
 80093d0:	4653      	mov	r3, sl
 80093d2:	4622      	mov	r2, r4
 80093d4:	f000 fff4 	bl	800a3c0 <_dtoa_r>
 80093d8:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80093dc:	4605      	mov	r5, r0
 80093de:	d119      	bne.n	8009414 <__cvt+0x94>
 80093e0:	f019 0f01 	tst.w	r9, #1
 80093e4:	d00e      	beq.n	8009404 <__cvt+0x84>
 80093e6:	eb00 0904 	add.w	r9, r0, r4
 80093ea:	2200      	movs	r2, #0
 80093ec:	2300      	movs	r3, #0
 80093ee:	4630      	mov	r0, r6
 80093f0:	4639      	mov	r1, r7
 80093f2:	f7f7 fc19 	bl	8000c28 <__aeabi_dcmpeq>
 80093f6:	b108      	cbz	r0, 80093fc <__cvt+0x7c>
 80093f8:	f8cd 900c 	str.w	r9, [sp, #12]
 80093fc:	2230      	movs	r2, #48	@ 0x30
 80093fe:	9b03      	ldr	r3, [sp, #12]
 8009400:	454b      	cmp	r3, r9
 8009402:	d31e      	bcc.n	8009442 <__cvt+0xc2>
 8009404:	9b03      	ldr	r3, [sp, #12]
 8009406:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009408:	1b5b      	subs	r3, r3, r5
 800940a:	4628      	mov	r0, r5
 800940c:	6013      	str	r3, [r2, #0]
 800940e:	b004      	add	sp, #16
 8009410:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009414:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009418:	eb00 0904 	add.w	r9, r0, r4
 800941c:	d1e5      	bne.n	80093ea <__cvt+0x6a>
 800941e:	7803      	ldrb	r3, [r0, #0]
 8009420:	2b30      	cmp	r3, #48	@ 0x30
 8009422:	d10a      	bne.n	800943a <__cvt+0xba>
 8009424:	2200      	movs	r2, #0
 8009426:	2300      	movs	r3, #0
 8009428:	4630      	mov	r0, r6
 800942a:	4639      	mov	r1, r7
 800942c:	f7f7 fbfc 	bl	8000c28 <__aeabi_dcmpeq>
 8009430:	b918      	cbnz	r0, 800943a <__cvt+0xba>
 8009432:	f1c4 0401 	rsb	r4, r4, #1
 8009436:	f8ca 4000 	str.w	r4, [sl]
 800943a:	f8da 3000 	ldr.w	r3, [sl]
 800943e:	4499      	add	r9, r3
 8009440:	e7d3      	b.n	80093ea <__cvt+0x6a>
 8009442:	1c59      	adds	r1, r3, #1
 8009444:	9103      	str	r1, [sp, #12]
 8009446:	701a      	strb	r2, [r3, #0]
 8009448:	e7d9      	b.n	80093fe <__cvt+0x7e>

0800944a <__exponent>:
 800944a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800944c:	2900      	cmp	r1, #0
 800944e:	bfba      	itte	lt
 8009450:	4249      	neglt	r1, r1
 8009452:	232d      	movlt	r3, #45	@ 0x2d
 8009454:	232b      	movge	r3, #43	@ 0x2b
 8009456:	2909      	cmp	r1, #9
 8009458:	7002      	strb	r2, [r0, #0]
 800945a:	7043      	strb	r3, [r0, #1]
 800945c:	dd29      	ble.n	80094b2 <__exponent+0x68>
 800945e:	f10d 0307 	add.w	r3, sp, #7
 8009462:	461d      	mov	r5, r3
 8009464:	270a      	movs	r7, #10
 8009466:	461a      	mov	r2, r3
 8009468:	fbb1 f6f7 	udiv	r6, r1, r7
 800946c:	fb07 1416 	mls	r4, r7, r6, r1
 8009470:	3430      	adds	r4, #48	@ 0x30
 8009472:	f802 4c01 	strb.w	r4, [r2, #-1]
 8009476:	460c      	mov	r4, r1
 8009478:	2c63      	cmp	r4, #99	@ 0x63
 800947a:	f103 33ff 	add.w	r3, r3, #4294967295
 800947e:	4631      	mov	r1, r6
 8009480:	dcf1      	bgt.n	8009466 <__exponent+0x1c>
 8009482:	3130      	adds	r1, #48	@ 0x30
 8009484:	1e94      	subs	r4, r2, #2
 8009486:	f803 1c01 	strb.w	r1, [r3, #-1]
 800948a:	1c41      	adds	r1, r0, #1
 800948c:	4623      	mov	r3, r4
 800948e:	42ab      	cmp	r3, r5
 8009490:	d30a      	bcc.n	80094a8 <__exponent+0x5e>
 8009492:	f10d 0309 	add.w	r3, sp, #9
 8009496:	1a9b      	subs	r3, r3, r2
 8009498:	42ac      	cmp	r4, r5
 800949a:	bf88      	it	hi
 800949c:	2300      	movhi	r3, #0
 800949e:	3302      	adds	r3, #2
 80094a0:	4403      	add	r3, r0
 80094a2:	1a18      	subs	r0, r3, r0
 80094a4:	b003      	add	sp, #12
 80094a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80094a8:	f813 6b01 	ldrb.w	r6, [r3], #1
 80094ac:	f801 6f01 	strb.w	r6, [r1, #1]!
 80094b0:	e7ed      	b.n	800948e <__exponent+0x44>
 80094b2:	2330      	movs	r3, #48	@ 0x30
 80094b4:	3130      	adds	r1, #48	@ 0x30
 80094b6:	7083      	strb	r3, [r0, #2]
 80094b8:	70c1      	strb	r1, [r0, #3]
 80094ba:	1d03      	adds	r3, r0, #4
 80094bc:	e7f1      	b.n	80094a2 <__exponent+0x58>
	...

080094c0 <_printf_float>:
 80094c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094c4:	b08d      	sub	sp, #52	@ 0x34
 80094c6:	460c      	mov	r4, r1
 80094c8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80094cc:	4616      	mov	r6, r2
 80094ce:	461f      	mov	r7, r3
 80094d0:	4605      	mov	r5, r0
 80094d2:	f000 fe73 	bl	800a1bc <_localeconv_r>
 80094d6:	6803      	ldr	r3, [r0, #0]
 80094d8:	9304      	str	r3, [sp, #16]
 80094da:	4618      	mov	r0, r3
 80094dc:	f7f6 ff78 	bl	80003d0 <strlen>
 80094e0:	2300      	movs	r3, #0
 80094e2:	930a      	str	r3, [sp, #40]	@ 0x28
 80094e4:	f8d8 3000 	ldr.w	r3, [r8]
 80094e8:	9005      	str	r0, [sp, #20]
 80094ea:	3307      	adds	r3, #7
 80094ec:	f023 0307 	bic.w	r3, r3, #7
 80094f0:	f103 0208 	add.w	r2, r3, #8
 80094f4:	f894 a018 	ldrb.w	sl, [r4, #24]
 80094f8:	f8d4 b000 	ldr.w	fp, [r4]
 80094fc:	f8c8 2000 	str.w	r2, [r8]
 8009500:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009504:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8009508:	9307      	str	r3, [sp, #28]
 800950a:	f8cd 8018 	str.w	r8, [sp, #24]
 800950e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8009512:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009516:	4b9c      	ldr	r3, [pc, #624]	@ (8009788 <_printf_float+0x2c8>)
 8009518:	f04f 32ff 	mov.w	r2, #4294967295
 800951c:	f7f7 fbb6 	bl	8000c8c <__aeabi_dcmpun>
 8009520:	bb70      	cbnz	r0, 8009580 <_printf_float+0xc0>
 8009522:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009526:	4b98      	ldr	r3, [pc, #608]	@ (8009788 <_printf_float+0x2c8>)
 8009528:	f04f 32ff 	mov.w	r2, #4294967295
 800952c:	f7f7 fb90 	bl	8000c50 <__aeabi_dcmple>
 8009530:	bb30      	cbnz	r0, 8009580 <_printf_float+0xc0>
 8009532:	2200      	movs	r2, #0
 8009534:	2300      	movs	r3, #0
 8009536:	4640      	mov	r0, r8
 8009538:	4649      	mov	r1, r9
 800953a:	f7f7 fb7f 	bl	8000c3c <__aeabi_dcmplt>
 800953e:	b110      	cbz	r0, 8009546 <_printf_float+0x86>
 8009540:	232d      	movs	r3, #45	@ 0x2d
 8009542:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009546:	4a91      	ldr	r2, [pc, #580]	@ (800978c <_printf_float+0x2cc>)
 8009548:	4b91      	ldr	r3, [pc, #580]	@ (8009790 <_printf_float+0x2d0>)
 800954a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800954e:	bf94      	ite	ls
 8009550:	4690      	movls	r8, r2
 8009552:	4698      	movhi	r8, r3
 8009554:	2303      	movs	r3, #3
 8009556:	6123      	str	r3, [r4, #16]
 8009558:	f02b 0304 	bic.w	r3, fp, #4
 800955c:	6023      	str	r3, [r4, #0]
 800955e:	f04f 0900 	mov.w	r9, #0
 8009562:	9700      	str	r7, [sp, #0]
 8009564:	4633      	mov	r3, r6
 8009566:	aa0b      	add	r2, sp, #44	@ 0x2c
 8009568:	4621      	mov	r1, r4
 800956a:	4628      	mov	r0, r5
 800956c:	f000 f9d2 	bl	8009914 <_printf_common>
 8009570:	3001      	adds	r0, #1
 8009572:	f040 808d 	bne.w	8009690 <_printf_float+0x1d0>
 8009576:	f04f 30ff 	mov.w	r0, #4294967295
 800957a:	b00d      	add	sp, #52	@ 0x34
 800957c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009580:	4642      	mov	r2, r8
 8009582:	464b      	mov	r3, r9
 8009584:	4640      	mov	r0, r8
 8009586:	4649      	mov	r1, r9
 8009588:	f7f7 fb80 	bl	8000c8c <__aeabi_dcmpun>
 800958c:	b140      	cbz	r0, 80095a0 <_printf_float+0xe0>
 800958e:	464b      	mov	r3, r9
 8009590:	2b00      	cmp	r3, #0
 8009592:	bfbc      	itt	lt
 8009594:	232d      	movlt	r3, #45	@ 0x2d
 8009596:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800959a:	4a7e      	ldr	r2, [pc, #504]	@ (8009794 <_printf_float+0x2d4>)
 800959c:	4b7e      	ldr	r3, [pc, #504]	@ (8009798 <_printf_float+0x2d8>)
 800959e:	e7d4      	b.n	800954a <_printf_float+0x8a>
 80095a0:	6863      	ldr	r3, [r4, #4]
 80095a2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80095a6:	9206      	str	r2, [sp, #24]
 80095a8:	1c5a      	adds	r2, r3, #1
 80095aa:	d13b      	bne.n	8009624 <_printf_float+0x164>
 80095ac:	2306      	movs	r3, #6
 80095ae:	6063      	str	r3, [r4, #4]
 80095b0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80095b4:	2300      	movs	r3, #0
 80095b6:	6022      	str	r2, [r4, #0]
 80095b8:	9303      	str	r3, [sp, #12]
 80095ba:	ab0a      	add	r3, sp, #40	@ 0x28
 80095bc:	e9cd a301 	strd	sl, r3, [sp, #4]
 80095c0:	ab09      	add	r3, sp, #36	@ 0x24
 80095c2:	9300      	str	r3, [sp, #0]
 80095c4:	6861      	ldr	r1, [r4, #4]
 80095c6:	ec49 8b10 	vmov	d0, r8, r9
 80095ca:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80095ce:	4628      	mov	r0, r5
 80095d0:	f7ff fed6 	bl	8009380 <__cvt>
 80095d4:	9b06      	ldr	r3, [sp, #24]
 80095d6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80095d8:	2b47      	cmp	r3, #71	@ 0x47
 80095da:	4680      	mov	r8, r0
 80095dc:	d129      	bne.n	8009632 <_printf_float+0x172>
 80095de:	1cc8      	adds	r0, r1, #3
 80095e0:	db02      	blt.n	80095e8 <_printf_float+0x128>
 80095e2:	6863      	ldr	r3, [r4, #4]
 80095e4:	4299      	cmp	r1, r3
 80095e6:	dd41      	ble.n	800966c <_printf_float+0x1ac>
 80095e8:	f1aa 0a02 	sub.w	sl, sl, #2
 80095ec:	fa5f fa8a 	uxtb.w	sl, sl
 80095f0:	3901      	subs	r1, #1
 80095f2:	4652      	mov	r2, sl
 80095f4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80095f8:	9109      	str	r1, [sp, #36]	@ 0x24
 80095fa:	f7ff ff26 	bl	800944a <__exponent>
 80095fe:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009600:	1813      	adds	r3, r2, r0
 8009602:	2a01      	cmp	r2, #1
 8009604:	4681      	mov	r9, r0
 8009606:	6123      	str	r3, [r4, #16]
 8009608:	dc02      	bgt.n	8009610 <_printf_float+0x150>
 800960a:	6822      	ldr	r2, [r4, #0]
 800960c:	07d2      	lsls	r2, r2, #31
 800960e:	d501      	bpl.n	8009614 <_printf_float+0x154>
 8009610:	3301      	adds	r3, #1
 8009612:	6123      	str	r3, [r4, #16]
 8009614:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8009618:	2b00      	cmp	r3, #0
 800961a:	d0a2      	beq.n	8009562 <_printf_float+0xa2>
 800961c:	232d      	movs	r3, #45	@ 0x2d
 800961e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009622:	e79e      	b.n	8009562 <_printf_float+0xa2>
 8009624:	9a06      	ldr	r2, [sp, #24]
 8009626:	2a47      	cmp	r2, #71	@ 0x47
 8009628:	d1c2      	bne.n	80095b0 <_printf_float+0xf0>
 800962a:	2b00      	cmp	r3, #0
 800962c:	d1c0      	bne.n	80095b0 <_printf_float+0xf0>
 800962e:	2301      	movs	r3, #1
 8009630:	e7bd      	b.n	80095ae <_printf_float+0xee>
 8009632:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009636:	d9db      	bls.n	80095f0 <_printf_float+0x130>
 8009638:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800963c:	d118      	bne.n	8009670 <_printf_float+0x1b0>
 800963e:	2900      	cmp	r1, #0
 8009640:	6863      	ldr	r3, [r4, #4]
 8009642:	dd0b      	ble.n	800965c <_printf_float+0x19c>
 8009644:	6121      	str	r1, [r4, #16]
 8009646:	b913      	cbnz	r3, 800964e <_printf_float+0x18e>
 8009648:	6822      	ldr	r2, [r4, #0]
 800964a:	07d0      	lsls	r0, r2, #31
 800964c:	d502      	bpl.n	8009654 <_printf_float+0x194>
 800964e:	3301      	adds	r3, #1
 8009650:	440b      	add	r3, r1
 8009652:	6123      	str	r3, [r4, #16]
 8009654:	65a1      	str	r1, [r4, #88]	@ 0x58
 8009656:	f04f 0900 	mov.w	r9, #0
 800965a:	e7db      	b.n	8009614 <_printf_float+0x154>
 800965c:	b913      	cbnz	r3, 8009664 <_printf_float+0x1a4>
 800965e:	6822      	ldr	r2, [r4, #0]
 8009660:	07d2      	lsls	r2, r2, #31
 8009662:	d501      	bpl.n	8009668 <_printf_float+0x1a8>
 8009664:	3302      	adds	r3, #2
 8009666:	e7f4      	b.n	8009652 <_printf_float+0x192>
 8009668:	2301      	movs	r3, #1
 800966a:	e7f2      	b.n	8009652 <_printf_float+0x192>
 800966c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8009670:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009672:	4299      	cmp	r1, r3
 8009674:	db05      	blt.n	8009682 <_printf_float+0x1c2>
 8009676:	6823      	ldr	r3, [r4, #0]
 8009678:	6121      	str	r1, [r4, #16]
 800967a:	07d8      	lsls	r0, r3, #31
 800967c:	d5ea      	bpl.n	8009654 <_printf_float+0x194>
 800967e:	1c4b      	adds	r3, r1, #1
 8009680:	e7e7      	b.n	8009652 <_printf_float+0x192>
 8009682:	2900      	cmp	r1, #0
 8009684:	bfd4      	ite	le
 8009686:	f1c1 0202 	rsble	r2, r1, #2
 800968a:	2201      	movgt	r2, #1
 800968c:	4413      	add	r3, r2
 800968e:	e7e0      	b.n	8009652 <_printf_float+0x192>
 8009690:	6823      	ldr	r3, [r4, #0]
 8009692:	055a      	lsls	r2, r3, #21
 8009694:	d407      	bmi.n	80096a6 <_printf_float+0x1e6>
 8009696:	6923      	ldr	r3, [r4, #16]
 8009698:	4642      	mov	r2, r8
 800969a:	4631      	mov	r1, r6
 800969c:	4628      	mov	r0, r5
 800969e:	47b8      	blx	r7
 80096a0:	3001      	adds	r0, #1
 80096a2:	d12b      	bne.n	80096fc <_printf_float+0x23c>
 80096a4:	e767      	b.n	8009576 <_printf_float+0xb6>
 80096a6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80096aa:	f240 80dd 	bls.w	8009868 <_printf_float+0x3a8>
 80096ae:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80096b2:	2200      	movs	r2, #0
 80096b4:	2300      	movs	r3, #0
 80096b6:	f7f7 fab7 	bl	8000c28 <__aeabi_dcmpeq>
 80096ba:	2800      	cmp	r0, #0
 80096bc:	d033      	beq.n	8009726 <_printf_float+0x266>
 80096be:	4a37      	ldr	r2, [pc, #220]	@ (800979c <_printf_float+0x2dc>)
 80096c0:	2301      	movs	r3, #1
 80096c2:	4631      	mov	r1, r6
 80096c4:	4628      	mov	r0, r5
 80096c6:	47b8      	blx	r7
 80096c8:	3001      	adds	r0, #1
 80096ca:	f43f af54 	beq.w	8009576 <_printf_float+0xb6>
 80096ce:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80096d2:	4543      	cmp	r3, r8
 80096d4:	db02      	blt.n	80096dc <_printf_float+0x21c>
 80096d6:	6823      	ldr	r3, [r4, #0]
 80096d8:	07d8      	lsls	r0, r3, #31
 80096da:	d50f      	bpl.n	80096fc <_printf_float+0x23c>
 80096dc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80096e0:	4631      	mov	r1, r6
 80096e2:	4628      	mov	r0, r5
 80096e4:	47b8      	blx	r7
 80096e6:	3001      	adds	r0, #1
 80096e8:	f43f af45 	beq.w	8009576 <_printf_float+0xb6>
 80096ec:	f04f 0900 	mov.w	r9, #0
 80096f0:	f108 38ff 	add.w	r8, r8, #4294967295
 80096f4:	f104 0a1a 	add.w	sl, r4, #26
 80096f8:	45c8      	cmp	r8, r9
 80096fa:	dc09      	bgt.n	8009710 <_printf_float+0x250>
 80096fc:	6823      	ldr	r3, [r4, #0]
 80096fe:	079b      	lsls	r3, r3, #30
 8009700:	f100 8103 	bmi.w	800990a <_printf_float+0x44a>
 8009704:	68e0      	ldr	r0, [r4, #12]
 8009706:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009708:	4298      	cmp	r0, r3
 800970a:	bfb8      	it	lt
 800970c:	4618      	movlt	r0, r3
 800970e:	e734      	b.n	800957a <_printf_float+0xba>
 8009710:	2301      	movs	r3, #1
 8009712:	4652      	mov	r2, sl
 8009714:	4631      	mov	r1, r6
 8009716:	4628      	mov	r0, r5
 8009718:	47b8      	blx	r7
 800971a:	3001      	adds	r0, #1
 800971c:	f43f af2b 	beq.w	8009576 <_printf_float+0xb6>
 8009720:	f109 0901 	add.w	r9, r9, #1
 8009724:	e7e8      	b.n	80096f8 <_printf_float+0x238>
 8009726:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009728:	2b00      	cmp	r3, #0
 800972a:	dc39      	bgt.n	80097a0 <_printf_float+0x2e0>
 800972c:	4a1b      	ldr	r2, [pc, #108]	@ (800979c <_printf_float+0x2dc>)
 800972e:	2301      	movs	r3, #1
 8009730:	4631      	mov	r1, r6
 8009732:	4628      	mov	r0, r5
 8009734:	47b8      	blx	r7
 8009736:	3001      	adds	r0, #1
 8009738:	f43f af1d 	beq.w	8009576 <_printf_float+0xb6>
 800973c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8009740:	ea59 0303 	orrs.w	r3, r9, r3
 8009744:	d102      	bne.n	800974c <_printf_float+0x28c>
 8009746:	6823      	ldr	r3, [r4, #0]
 8009748:	07d9      	lsls	r1, r3, #31
 800974a:	d5d7      	bpl.n	80096fc <_printf_float+0x23c>
 800974c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009750:	4631      	mov	r1, r6
 8009752:	4628      	mov	r0, r5
 8009754:	47b8      	blx	r7
 8009756:	3001      	adds	r0, #1
 8009758:	f43f af0d 	beq.w	8009576 <_printf_float+0xb6>
 800975c:	f04f 0a00 	mov.w	sl, #0
 8009760:	f104 0b1a 	add.w	fp, r4, #26
 8009764:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009766:	425b      	negs	r3, r3
 8009768:	4553      	cmp	r3, sl
 800976a:	dc01      	bgt.n	8009770 <_printf_float+0x2b0>
 800976c:	464b      	mov	r3, r9
 800976e:	e793      	b.n	8009698 <_printf_float+0x1d8>
 8009770:	2301      	movs	r3, #1
 8009772:	465a      	mov	r2, fp
 8009774:	4631      	mov	r1, r6
 8009776:	4628      	mov	r0, r5
 8009778:	47b8      	blx	r7
 800977a:	3001      	adds	r0, #1
 800977c:	f43f aefb 	beq.w	8009576 <_printf_float+0xb6>
 8009780:	f10a 0a01 	add.w	sl, sl, #1
 8009784:	e7ee      	b.n	8009764 <_printf_float+0x2a4>
 8009786:	bf00      	nop
 8009788:	7fefffff 	.word	0x7fefffff
 800978c:	0800c778 	.word	0x0800c778
 8009790:	0800c77c 	.word	0x0800c77c
 8009794:	0800c780 	.word	0x0800c780
 8009798:	0800c784 	.word	0x0800c784
 800979c:	0800c788 	.word	0x0800c788
 80097a0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80097a2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80097a6:	4553      	cmp	r3, sl
 80097a8:	bfa8      	it	ge
 80097aa:	4653      	movge	r3, sl
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	4699      	mov	r9, r3
 80097b0:	dc36      	bgt.n	8009820 <_printf_float+0x360>
 80097b2:	f04f 0b00 	mov.w	fp, #0
 80097b6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80097ba:	f104 021a 	add.w	r2, r4, #26
 80097be:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80097c0:	9306      	str	r3, [sp, #24]
 80097c2:	eba3 0309 	sub.w	r3, r3, r9
 80097c6:	455b      	cmp	r3, fp
 80097c8:	dc31      	bgt.n	800982e <_printf_float+0x36e>
 80097ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80097cc:	459a      	cmp	sl, r3
 80097ce:	dc3a      	bgt.n	8009846 <_printf_float+0x386>
 80097d0:	6823      	ldr	r3, [r4, #0]
 80097d2:	07da      	lsls	r2, r3, #31
 80097d4:	d437      	bmi.n	8009846 <_printf_float+0x386>
 80097d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80097d8:	ebaa 0903 	sub.w	r9, sl, r3
 80097dc:	9b06      	ldr	r3, [sp, #24]
 80097de:	ebaa 0303 	sub.w	r3, sl, r3
 80097e2:	4599      	cmp	r9, r3
 80097e4:	bfa8      	it	ge
 80097e6:	4699      	movge	r9, r3
 80097e8:	f1b9 0f00 	cmp.w	r9, #0
 80097ec:	dc33      	bgt.n	8009856 <_printf_float+0x396>
 80097ee:	f04f 0800 	mov.w	r8, #0
 80097f2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80097f6:	f104 0b1a 	add.w	fp, r4, #26
 80097fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80097fc:	ebaa 0303 	sub.w	r3, sl, r3
 8009800:	eba3 0309 	sub.w	r3, r3, r9
 8009804:	4543      	cmp	r3, r8
 8009806:	f77f af79 	ble.w	80096fc <_printf_float+0x23c>
 800980a:	2301      	movs	r3, #1
 800980c:	465a      	mov	r2, fp
 800980e:	4631      	mov	r1, r6
 8009810:	4628      	mov	r0, r5
 8009812:	47b8      	blx	r7
 8009814:	3001      	adds	r0, #1
 8009816:	f43f aeae 	beq.w	8009576 <_printf_float+0xb6>
 800981a:	f108 0801 	add.w	r8, r8, #1
 800981e:	e7ec      	b.n	80097fa <_printf_float+0x33a>
 8009820:	4642      	mov	r2, r8
 8009822:	4631      	mov	r1, r6
 8009824:	4628      	mov	r0, r5
 8009826:	47b8      	blx	r7
 8009828:	3001      	adds	r0, #1
 800982a:	d1c2      	bne.n	80097b2 <_printf_float+0x2f2>
 800982c:	e6a3      	b.n	8009576 <_printf_float+0xb6>
 800982e:	2301      	movs	r3, #1
 8009830:	4631      	mov	r1, r6
 8009832:	4628      	mov	r0, r5
 8009834:	9206      	str	r2, [sp, #24]
 8009836:	47b8      	blx	r7
 8009838:	3001      	adds	r0, #1
 800983a:	f43f ae9c 	beq.w	8009576 <_printf_float+0xb6>
 800983e:	9a06      	ldr	r2, [sp, #24]
 8009840:	f10b 0b01 	add.w	fp, fp, #1
 8009844:	e7bb      	b.n	80097be <_printf_float+0x2fe>
 8009846:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800984a:	4631      	mov	r1, r6
 800984c:	4628      	mov	r0, r5
 800984e:	47b8      	blx	r7
 8009850:	3001      	adds	r0, #1
 8009852:	d1c0      	bne.n	80097d6 <_printf_float+0x316>
 8009854:	e68f      	b.n	8009576 <_printf_float+0xb6>
 8009856:	9a06      	ldr	r2, [sp, #24]
 8009858:	464b      	mov	r3, r9
 800985a:	4442      	add	r2, r8
 800985c:	4631      	mov	r1, r6
 800985e:	4628      	mov	r0, r5
 8009860:	47b8      	blx	r7
 8009862:	3001      	adds	r0, #1
 8009864:	d1c3      	bne.n	80097ee <_printf_float+0x32e>
 8009866:	e686      	b.n	8009576 <_printf_float+0xb6>
 8009868:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800986c:	f1ba 0f01 	cmp.w	sl, #1
 8009870:	dc01      	bgt.n	8009876 <_printf_float+0x3b6>
 8009872:	07db      	lsls	r3, r3, #31
 8009874:	d536      	bpl.n	80098e4 <_printf_float+0x424>
 8009876:	2301      	movs	r3, #1
 8009878:	4642      	mov	r2, r8
 800987a:	4631      	mov	r1, r6
 800987c:	4628      	mov	r0, r5
 800987e:	47b8      	blx	r7
 8009880:	3001      	adds	r0, #1
 8009882:	f43f ae78 	beq.w	8009576 <_printf_float+0xb6>
 8009886:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800988a:	4631      	mov	r1, r6
 800988c:	4628      	mov	r0, r5
 800988e:	47b8      	blx	r7
 8009890:	3001      	adds	r0, #1
 8009892:	f43f ae70 	beq.w	8009576 <_printf_float+0xb6>
 8009896:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800989a:	2200      	movs	r2, #0
 800989c:	2300      	movs	r3, #0
 800989e:	f10a 3aff 	add.w	sl, sl, #4294967295
 80098a2:	f7f7 f9c1 	bl	8000c28 <__aeabi_dcmpeq>
 80098a6:	b9c0      	cbnz	r0, 80098da <_printf_float+0x41a>
 80098a8:	4653      	mov	r3, sl
 80098aa:	f108 0201 	add.w	r2, r8, #1
 80098ae:	4631      	mov	r1, r6
 80098b0:	4628      	mov	r0, r5
 80098b2:	47b8      	blx	r7
 80098b4:	3001      	adds	r0, #1
 80098b6:	d10c      	bne.n	80098d2 <_printf_float+0x412>
 80098b8:	e65d      	b.n	8009576 <_printf_float+0xb6>
 80098ba:	2301      	movs	r3, #1
 80098bc:	465a      	mov	r2, fp
 80098be:	4631      	mov	r1, r6
 80098c0:	4628      	mov	r0, r5
 80098c2:	47b8      	blx	r7
 80098c4:	3001      	adds	r0, #1
 80098c6:	f43f ae56 	beq.w	8009576 <_printf_float+0xb6>
 80098ca:	f108 0801 	add.w	r8, r8, #1
 80098ce:	45d0      	cmp	r8, sl
 80098d0:	dbf3      	blt.n	80098ba <_printf_float+0x3fa>
 80098d2:	464b      	mov	r3, r9
 80098d4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80098d8:	e6df      	b.n	800969a <_printf_float+0x1da>
 80098da:	f04f 0800 	mov.w	r8, #0
 80098de:	f104 0b1a 	add.w	fp, r4, #26
 80098e2:	e7f4      	b.n	80098ce <_printf_float+0x40e>
 80098e4:	2301      	movs	r3, #1
 80098e6:	4642      	mov	r2, r8
 80098e8:	e7e1      	b.n	80098ae <_printf_float+0x3ee>
 80098ea:	2301      	movs	r3, #1
 80098ec:	464a      	mov	r2, r9
 80098ee:	4631      	mov	r1, r6
 80098f0:	4628      	mov	r0, r5
 80098f2:	47b8      	blx	r7
 80098f4:	3001      	adds	r0, #1
 80098f6:	f43f ae3e 	beq.w	8009576 <_printf_float+0xb6>
 80098fa:	f108 0801 	add.w	r8, r8, #1
 80098fe:	68e3      	ldr	r3, [r4, #12]
 8009900:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009902:	1a5b      	subs	r3, r3, r1
 8009904:	4543      	cmp	r3, r8
 8009906:	dcf0      	bgt.n	80098ea <_printf_float+0x42a>
 8009908:	e6fc      	b.n	8009704 <_printf_float+0x244>
 800990a:	f04f 0800 	mov.w	r8, #0
 800990e:	f104 0919 	add.w	r9, r4, #25
 8009912:	e7f4      	b.n	80098fe <_printf_float+0x43e>

08009914 <_printf_common>:
 8009914:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009918:	4616      	mov	r6, r2
 800991a:	4698      	mov	r8, r3
 800991c:	688a      	ldr	r2, [r1, #8]
 800991e:	690b      	ldr	r3, [r1, #16]
 8009920:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009924:	4293      	cmp	r3, r2
 8009926:	bfb8      	it	lt
 8009928:	4613      	movlt	r3, r2
 800992a:	6033      	str	r3, [r6, #0]
 800992c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009930:	4607      	mov	r7, r0
 8009932:	460c      	mov	r4, r1
 8009934:	b10a      	cbz	r2, 800993a <_printf_common+0x26>
 8009936:	3301      	adds	r3, #1
 8009938:	6033      	str	r3, [r6, #0]
 800993a:	6823      	ldr	r3, [r4, #0]
 800993c:	0699      	lsls	r1, r3, #26
 800993e:	bf42      	ittt	mi
 8009940:	6833      	ldrmi	r3, [r6, #0]
 8009942:	3302      	addmi	r3, #2
 8009944:	6033      	strmi	r3, [r6, #0]
 8009946:	6825      	ldr	r5, [r4, #0]
 8009948:	f015 0506 	ands.w	r5, r5, #6
 800994c:	d106      	bne.n	800995c <_printf_common+0x48>
 800994e:	f104 0a19 	add.w	sl, r4, #25
 8009952:	68e3      	ldr	r3, [r4, #12]
 8009954:	6832      	ldr	r2, [r6, #0]
 8009956:	1a9b      	subs	r3, r3, r2
 8009958:	42ab      	cmp	r3, r5
 800995a:	dc26      	bgt.n	80099aa <_printf_common+0x96>
 800995c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009960:	6822      	ldr	r2, [r4, #0]
 8009962:	3b00      	subs	r3, #0
 8009964:	bf18      	it	ne
 8009966:	2301      	movne	r3, #1
 8009968:	0692      	lsls	r2, r2, #26
 800996a:	d42b      	bmi.n	80099c4 <_printf_common+0xb0>
 800996c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009970:	4641      	mov	r1, r8
 8009972:	4638      	mov	r0, r7
 8009974:	47c8      	blx	r9
 8009976:	3001      	adds	r0, #1
 8009978:	d01e      	beq.n	80099b8 <_printf_common+0xa4>
 800997a:	6823      	ldr	r3, [r4, #0]
 800997c:	6922      	ldr	r2, [r4, #16]
 800997e:	f003 0306 	and.w	r3, r3, #6
 8009982:	2b04      	cmp	r3, #4
 8009984:	bf02      	ittt	eq
 8009986:	68e5      	ldreq	r5, [r4, #12]
 8009988:	6833      	ldreq	r3, [r6, #0]
 800998a:	1aed      	subeq	r5, r5, r3
 800998c:	68a3      	ldr	r3, [r4, #8]
 800998e:	bf0c      	ite	eq
 8009990:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009994:	2500      	movne	r5, #0
 8009996:	4293      	cmp	r3, r2
 8009998:	bfc4      	itt	gt
 800999a:	1a9b      	subgt	r3, r3, r2
 800999c:	18ed      	addgt	r5, r5, r3
 800999e:	2600      	movs	r6, #0
 80099a0:	341a      	adds	r4, #26
 80099a2:	42b5      	cmp	r5, r6
 80099a4:	d11a      	bne.n	80099dc <_printf_common+0xc8>
 80099a6:	2000      	movs	r0, #0
 80099a8:	e008      	b.n	80099bc <_printf_common+0xa8>
 80099aa:	2301      	movs	r3, #1
 80099ac:	4652      	mov	r2, sl
 80099ae:	4641      	mov	r1, r8
 80099b0:	4638      	mov	r0, r7
 80099b2:	47c8      	blx	r9
 80099b4:	3001      	adds	r0, #1
 80099b6:	d103      	bne.n	80099c0 <_printf_common+0xac>
 80099b8:	f04f 30ff 	mov.w	r0, #4294967295
 80099bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099c0:	3501      	adds	r5, #1
 80099c2:	e7c6      	b.n	8009952 <_printf_common+0x3e>
 80099c4:	18e1      	adds	r1, r4, r3
 80099c6:	1c5a      	adds	r2, r3, #1
 80099c8:	2030      	movs	r0, #48	@ 0x30
 80099ca:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80099ce:	4422      	add	r2, r4
 80099d0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80099d4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80099d8:	3302      	adds	r3, #2
 80099da:	e7c7      	b.n	800996c <_printf_common+0x58>
 80099dc:	2301      	movs	r3, #1
 80099de:	4622      	mov	r2, r4
 80099e0:	4641      	mov	r1, r8
 80099e2:	4638      	mov	r0, r7
 80099e4:	47c8      	blx	r9
 80099e6:	3001      	adds	r0, #1
 80099e8:	d0e6      	beq.n	80099b8 <_printf_common+0xa4>
 80099ea:	3601      	adds	r6, #1
 80099ec:	e7d9      	b.n	80099a2 <_printf_common+0x8e>
	...

080099f0 <_printf_i>:
 80099f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80099f4:	7e0f      	ldrb	r7, [r1, #24]
 80099f6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80099f8:	2f78      	cmp	r7, #120	@ 0x78
 80099fa:	4691      	mov	r9, r2
 80099fc:	4680      	mov	r8, r0
 80099fe:	460c      	mov	r4, r1
 8009a00:	469a      	mov	sl, r3
 8009a02:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009a06:	d807      	bhi.n	8009a18 <_printf_i+0x28>
 8009a08:	2f62      	cmp	r7, #98	@ 0x62
 8009a0a:	d80a      	bhi.n	8009a22 <_printf_i+0x32>
 8009a0c:	2f00      	cmp	r7, #0
 8009a0e:	f000 80d2 	beq.w	8009bb6 <_printf_i+0x1c6>
 8009a12:	2f58      	cmp	r7, #88	@ 0x58
 8009a14:	f000 80b9 	beq.w	8009b8a <_printf_i+0x19a>
 8009a18:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009a1c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009a20:	e03a      	b.n	8009a98 <_printf_i+0xa8>
 8009a22:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009a26:	2b15      	cmp	r3, #21
 8009a28:	d8f6      	bhi.n	8009a18 <_printf_i+0x28>
 8009a2a:	a101      	add	r1, pc, #4	@ (adr r1, 8009a30 <_printf_i+0x40>)
 8009a2c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009a30:	08009a89 	.word	0x08009a89
 8009a34:	08009a9d 	.word	0x08009a9d
 8009a38:	08009a19 	.word	0x08009a19
 8009a3c:	08009a19 	.word	0x08009a19
 8009a40:	08009a19 	.word	0x08009a19
 8009a44:	08009a19 	.word	0x08009a19
 8009a48:	08009a9d 	.word	0x08009a9d
 8009a4c:	08009a19 	.word	0x08009a19
 8009a50:	08009a19 	.word	0x08009a19
 8009a54:	08009a19 	.word	0x08009a19
 8009a58:	08009a19 	.word	0x08009a19
 8009a5c:	08009b9d 	.word	0x08009b9d
 8009a60:	08009ac7 	.word	0x08009ac7
 8009a64:	08009b57 	.word	0x08009b57
 8009a68:	08009a19 	.word	0x08009a19
 8009a6c:	08009a19 	.word	0x08009a19
 8009a70:	08009bbf 	.word	0x08009bbf
 8009a74:	08009a19 	.word	0x08009a19
 8009a78:	08009ac7 	.word	0x08009ac7
 8009a7c:	08009a19 	.word	0x08009a19
 8009a80:	08009a19 	.word	0x08009a19
 8009a84:	08009b5f 	.word	0x08009b5f
 8009a88:	6833      	ldr	r3, [r6, #0]
 8009a8a:	1d1a      	adds	r2, r3, #4
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	6032      	str	r2, [r6, #0]
 8009a90:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009a94:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009a98:	2301      	movs	r3, #1
 8009a9a:	e09d      	b.n	8009bd8 <_printf_i+0x1e8>
 8009a9c:	6833      	ldr	r3, [r6, #0]
 8009a9e:	6820      	ldr	r0, [r4, #0]
 8009aa0:	1d19      	adds	r1, r3, #4
 8009aa2:	6031      	str	r1, [r6, #0]
 8009aa4:	0606      	lsls	r6, r0, #24
 8009aa6:	d501      	bpl.n	8009aac <_printf_i+0xbc>
 8009aa8:	681d      	ldr	r5, [r3, #0]
 8009aaa:	e003      	b.n	8009ab4 <_printf_i+0xc4>
 8009aac:	0645      	lsls	r5, r0, #25
 8009aae:	d5fb      	bpl.n	8009aa8 <_printf_i+0xb8>
 8009ab0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009ab4:	2d00      	cmp	r5, #0
 8009ab6:	da03      	bge.n	8009ac0 <_printf_i+0xd0>
 8009ab8:	232d      	movs	r3, #45	@ 0x2d
 8009aba:	426d      	negs	r5, r5
 8009abc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009ac0:	4859      	ldr	r0, [pc, #356]	@ (8009c28 <_printf_i+0x238>)
 8009ac2:	230a      	movs	r3, #10
 8009ac4:	e011      	b.n	8009aea <_printf_i+0xfa>
 8009ac6:	6821      	ldr	r1, [r4, #0]
 8009ac8:	6833      	ldr	r3, [r6, #0]
 8009aca:	0608      	lsls	r0, r1, #24
 8009acc:	f853 5b04 	ldr.w	r5, [r3], #4
 8009ad0:	d402      	bmi.n	8009ad8 <_printf_i+0xe8>
 8009ad2:	0649      	lsls	r1, r1, #25
 8009ad4:	bf48      	it	mi
 8009ad6:	b2ad      	uxthmi	r5, r5
 8009ad8:	2f6f      	cmp	r7, #111	@ 0x6f
 8009ada:	4853      	ldr	r0, [pc, #332]	@ (8009c28 <_printf_i+0x238>)
 8009adc:	6033      	str	r3, [r6, #0]
 8009ade:	bf14      	ite	ne
 8009ae0:	230a      	movne	r3, #10
 8009ae2:	2308      	moveq	r3, #8
 8009ae4:	2100      	movs	r1, #0
 8009ae6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009aea:	6866      	ldr	r6, [r4, #4]
 8009aec:	60a6      	str	r6, [r4, #8]
 8009aee:	2e00      	cmp	r6, #0
 8009af0:	bfa2      	ittt	ge
 8009af2:	6821      	ldrge	r1, [r4, #0]
 8009af4:	f021 0104 	bicge.w	r1, r1, #4
 8009af8:	6021      	strge	r1, [r4, #0]
 8009afa:	b90d      	cbnz	r5, 8009b00 <_printf_i+0x110>
 8009afc:	2e00      	cmp	r6, #0
 8009afe:	d04b      	beq.n	8009b98 <_printf_i+0x1a8>
 8009b00:	4616      	mov	r6, r2
 8009b02:	fbb5 f1f3 	udiv	r1, r5, r3
 8009b06:	fb03 5711 	mls	r7, r3, r1, r5
 8009b0a:	5dc7      	ldrb	r7, [r0, r7]
 8009b0c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009b10:	462f      	mov	r7, r5
 8009b12:	42bb      	cmp	r3, r7
 8009b14:	460d      	mov	r5, r1
 8009b16:	d9f4      	bls.n	8009b02 <_printf_i+0x112>
 8009b18:	2b08      	cmp	r3, #8
 8009b1a:	d10b      	bne.n	8009b34 <_printf_i+0x144>
 8009b1c:	6823      	ldr	r3, [r4, #0]
 8009b1e:	07df      	lsls	r7, r3, #31
 8009b20:	d508      	bpl.n	8009b34 <_printf_i+0x144>
 8009b22:	6923      	ldr	r3, [r4, #16]
 8009b24:	6861      	ldr	r1, [r4, #4]
 8009b26:	4299      	cmp	r1, r3
 8009b28:	bfde      	ittt	le
 8009b2a:	2330      	movle	r3, #48	@ 0x30
 8009b2c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009b30:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009b34:	1b92      	subs	r2, r2, r6
 8009b36:	6122      	str	r2, [r4, #16]
 8009b38:	f8cd a000 	str.w	sl, [sp]
 8009b3c:	464b      	mov	r3, r9
 8009b3e:	aa03      	add	r2, sp, #12
 8009b40:	4621      	mov	r1, r4
 8009b42:	4640      	mov	r0, r8
 8009b44:	f7ff fee6 	bl	8009914 <_printf_common>
 8009b48:	3001      	adds	r0, #1
 8009b4a:	d14a      	bne.n	8009be2 <_printf_i+0x1f2>
 8009b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8009b50:	b004      	add	sp, #16
 8009b52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b56:	6823      	ldr	r3, [r4, #0]
 8009b58:	f043 0320 	orr.w	r3, r3, #32
 8009b5c:	6023      	str	r3, [r4, #0]
 8009b5e:	4833      	ldr	r0, [pc, #204]	@ (8009c2c <_printf_i+0x23c>)
 8009b60:	2778      	movs	r7, #120	@ 0x78
 8009b62:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009b66:	6823      	ldr	r3, [r4, #0]
 8009b68:	6831      	ldr	r1, [r6, #0]
 8009b6a:	061f      	lsls	r7, r3, #24
 8009b6c:	f851 5b04 	ldr.w	r5, [r1], #4
 8009b70:	d402      	bmi.n	8009b78 <_printf_i+0x188>
 8009b72:	065f      	lsls	r7, r3, #25
 8009b74:	bf48      	it	mi
 8009b76:	b2ad      	uxthmi	r5, r5
 8009b78:	6031      	str	r1, [r6, #0]
 8009b7a:	07d9      	lsls	r1, r3, #31
 8009b7c:	bf44      	itt	mi
 8009b7e:	f043 0320 	orrmi.w	r3, r3, #32
 8009b82:	6023      	strmi	r3, [r4, #0]
 8009b84:	b11d      	cbz	r5, 8009b8e <_printf_i+0x19e>
 8009b86:	2310      	movs	r3, #16
 8009b88:	e7ac      	b.n	8009ae4 <_printf_i+0xf4>
 8009b8a:	4827      	ldr	r0, [pc, #156]	@ (8009c28 <_printf_i+0x238>)
 8009b8c:	e7e9      	b.n	8009b62 <_printf_i+0x172>
 8009b8e:	6823      	ldr	r3, [r4, #0]
 8009b90:	f023 0320 	bic.w	r3, r3, #32
 8009b94:	6023      	str	r3, [r4, #0]
 8009b96:	e7f6      	b.n	8009b86 <_printf_i+0x196>
 8009b98:	4616      	mov	r6, r2
 8009b9a:	e7bd      	b.n	8009b18 <_printf_i+0x128>
 8009b9c:	6833      	ldr	r3, [r6, #0]
 8009b9e:	6825      	ldr	r5, [r4, #0]
 8009ba0:	6961      	ldr	r1, [r4, #20]
 8009ba2:	1d18      	adds	r0, r3, #4
 8009ba4:	6030      	str	r0, [r6, #0]
 8009ba6:	062e      	lsls	r6, r5, #24
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	d501      	bpl.n	8009bb0 <_printf_i+0x1c0>
 8009bac:	6019      	str	r1, [r3, #0]
 8009bae:	e002      	b.n	8009bb6 <_printf_i+0x1c6>
 8009bb0:	0668      	lsls	r0, r5, #25
 8009bb2:	d5fb      	bpl.n	8009bac <_printf_i+0x1bc>
 8009bb4:	8019      	strh	r1, [r3, #0]
 8009bb6:	2300      	movs	r3, #0
 8009bb8:	6123      	str	r3, [r4, #16]
 8009bba:	4616      	mov	r6, r2
 8009bbc:	e7bc      	b.n	8009b38 <_printf_i+0x148>
 8009bbe:	6833      	ldr	r3, [r6, #0]
 8009bc0:	1d1a      	adds	r2, r3, #4
 8009bc2:	6032      	str	r2, [r6, #0]
 8009bc4:	681e      	ldr	r6, [r3, #0]
 8009bc6:	6862      	ldr	r2, [r4, #4]
 8009bc8:	2100      	movs	r1, #0
 8009bca:	4630      	mov	r0, r6
 8009bcc:	f7f6 fbb0 	bl	8000330 <memchr>
 8009bd0:	b108      	cbz	r0, 8009bd6 <_printf_i+0x1e6>
 8009bd2:	1b80      	subs	r0, r0, r6
 8009bd4:	6060      	str	r0, [r4, #4]
 8009bd6:	6863      	ldr	r3, [r4, #4]
 8009bd8:	6123      	str	r3, [r4, #16]
 8009bda:	2300      	movs	r3, #0
 8009bdc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009be0:	e7aa      	b.n	8009b38 <_printf_i+0x148>
 8009be2:	6923      	ldr	r3, [r4, #16]
 8009be4:	4632      	mov	r2, r6
 8009be6:	4649      	mov	r1, r9
 8009be8:	4640      	mov	r0, r8
 8009bea:	47d0      	blx	sl
 8009bec:	3001      	adds	r0, #1
 8009bee:	d0ad      	beq.n	8009b4c <_printf_i+0x15c>
 8009bf0:	6823      	ldr	r3, [r4, #0]
 8009bf2:	079b      	lsls	r3, r3, #30
 8009bf4:	d413      	bmi.n	8009c1e <_printf_i+0x22e>
 8009bf6:	68e0      	ldr	r0, [r4, #12]
 8009bf8:	9b03      	ldr	r3, [sp, #12]
 8009bfa:	4298      	cmp	r0, r3
 8009bfc:	bfb8      	it	lt
 8009bfe:	4618      	movlt	r0, r3
 8009c00:	e7a6      	b.n	8009b50 <_printf_i+0x160>
 8009c02:	2301      	movs	r3, #1
 8009c04:	4632      	mov	r2, r6
 8009c06:	4649      	mov	r1, r9
 8009c08:	4640      	mov	r0, r8
 8009c0a:	47d0      	blx	sl
 8009c0c:	3001      	adds	r0, #1
 8009c0e:	d09d      	beq.n	8009b4c <_printf_i+0x15c>
 8009c10:	3501      	adds	r5, #1
 8009c12:	68e3      	ldr	r3, [r4, #12]
 8009c14:	9903      	ldr	r1, [sp, #12]
 8009c16:	1a5b      	subs	r3, r3, r1
 8009c18:	42ab      	cmp	r3, r5
 8009c1a:	dcf2      	bgt.n	8009c02 <_printf_i+0x212>
 8009c1c:	e7eb      	b.n	8009bf6 <_printf_i+0x206>
 8009c1e:	2500      	movs	r5, #0
 8009c20:	f104 0619 	add.w	r6, r4, #25
 8009c24:	e7f5      	b.n	8009c12 <_printf_i+0x222>
 8009c26:	bf00      	nop
 8009c28:	0800c78a 	.word	0x0800c78a
 8009c2c:	0800c79b 	.word	0x0800c79b

08009c30 <std>:
 8009c30:	2300      	movs	r3, #0
 8009c32:	b510      	push	{r4, lr}
 8009c34:	4604      	mov	r4, r0
 8009c36:	e9c0 3300 	strd	r3, r3, [r0]
 8009c3a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009c3e:	6083      	str	r3, [r0, #8]
 8009c40:	8181      	strh	r1, [r0, #12]
 8009c42:	6643      	str	r3, [r0, #100]	@ 0x64
 8009c44:	81c2      	strh	r2, [r0, #14]
 8009c46:	6183      	str	r3, [r0, #24]
 8009c48:	4619      	mov	r1, r3
 8009c4a:	2208      	movs	r2, #8
 8009c4c:	305c      	adds	r0, #92	@ 0x5c
 8009c4e:	f000 faad 	bl	800a1ac <memset>
 8009c52:	4b0d      	ldr	r3, [pc, #52]	@ (8009c88 <std+0x58>)
 8009c54:	6263      	str	r3, [r4, #36]	@ 0x24
 8009c56:	4b0d      	ldr	r3, [pc, #52]	@ (8009c8c <std+0x5c>)
 8009c58:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009c5a:	4b0d      	ldr	r3, [pc, #52]	@ (8009c90 <std+0x60>)
 8009c5c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009c5e:	4b0d      	ldr	r3, [pc, #52]	@ (8009c94 <std+0x64>)
 8009c60:	6323      	str	r3, [r4, #48]	@ 0x30
 8009c62:	4b0d      	ldr	r3, [pc, #52]	@ (8009c98 <std+0x68>)
 8009c64:	6224      	str	r4, [r4, #32]
 8009c66:	429c      	cmp	r4, r3
 8009c68:	d006      	beq.n	8009c78 <std+0x48>
 8009c6a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009c6e:	4294      	cmp	r4, r2
 8009c70:	d002      	beq.n	8009c78 <std+0x48>
 8009c72:	33d0      	adds	r3, #208	@ 0xd0
 8009c74:	429c      	cmp	r4, r3
 8009c76:	d105      	bne.n	8009c84 <std+0x54>
 8009c78:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009c7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009c80:	f000 bb10 	b.w	800a2a4 <__retarget_lock_init_recursive>
 8009c84:	bd10      	pop	{r4, pc}
 8009c86:	bf00      	nop
 8009c88:	08009ffd 	.word	0x08009ffd
 8009c8c:	0800a01f 	.word	0x0800a01f
 8009c90:	0800a057 	.word	0x0800a057
 8009c94:	0800a07b 	.word	0x0800a07b
 8009c98:	20006b68 	.word	0x20006b68

08009c9c <stdio_exit_handler>:
 8009c9c:	4a02      	ldr	r2, [pc, #8]	@ (8009ca8 <stdio_exit_handler+0xc>)
 8009c9e:	4903      	ldr	r1, [pc, #12]	@ (8009cac <stdio_exit_handler+0x10>)
 8009ca0:	4803      	ldr	r0, [pc, #12]	@ (8009cb0 <stdio_exit_handler+0x14>)
 8009ca2:	f000 b869 	b.w	8009d78 <_fwalk_sglue>
 8009ca6:	bf00      	nop
 8009ca8:	20000010 	.word	0x20000010
 8009cac:	0800bbd9 	.word	0x0800bbd9
 8009cb0:	20000020 	.word	0x20000020

08009cb4 <cleanup_stdio>:
 8009cb4:	6841      	ldr	r1, [r0, #4]
 8009cb6:	4b0c      	ldr	r3, [pc, #48]	@ (8009ce8 <cleanup_stdio+0x34>)
 8009cb8:	4299      	cmp	r1, r3
 8009cba:	b510      	push	{r4, lr}
 8009cbc:	4604      	mov	r4, r0
 8009cbe:	d001      	beq.n	8009cc4 <cleanup_stdio+0x10>
 8009cc0:	f001 ff8a 	bl	800bbd8 <_fflush_r>
 8009cc4:	68a1      	ldr	r1, [r4, #8]
 8009cc6:	4b09      	ldr	r3, [pc, #36]	@ (8009cec <cleanup_stdio+0x38>)
 8009cc8:	4299      	cmp	r1, r3
 8009cca:	d002      	beq.n	8009cd2 <cleanup_stdio+0x1e>
 8009ccc:	4620      	mov	r0, r4
 8009cce:	f001 ff83 	bl	800bbd8 <_fflush_r>
 8009cd2:	68e1      	ldr	r1, [r4, #12]
 8009cd4:	4b06      	ldr	r3, [pc, #24]	@ (8009cf0 <cleanup_stdio+0x3c>)
 8009cd6:	4299      	cmp	r1, r3
 8009cd8:	d004      	beq.n	8009ce4 <cleanup_stdio+0x30>
 8009cda:	4620      	mov	r0, r4
 8009cdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009ce0:	f001 bf7a 	b.w	800bbd8 <_fflush_r>
 8009ce4:	bd10      	pop	{r4, pc}
 8009ce6:	bf00      	nop
 8009ce8:	20006b68 	.word	0x20006b68
 8009cec:	20006bd0 	.word	0x20006bd0
 8009cf0:	20006c38 	.word	0x20006c38

08009cf4 <global_stdio_init.part.0>:
 8009cf4:	b510      	push	{r4, lr}
 8009cf6:	4b0b      	ldr	r3, [pc, #44]	@ (8009d24 <global_stdio_init.part.0+0x30>)
 8009cf8:	4c0b      	ldr	r4, [pc, #44]	@ (8009d28 <global_stdio_init.part.0+0x34>)
 8009cfa:	4a0c      	ldr	r2, [pc, #48]	@ (8009d2c <global_stdio_init.part.0+0x38>)
 8009cfc:	601a      	str	r2, [r3, #0]
 8009cfe:	4620      	mov	r0, r4
 8009d00:	2200      	movs	r2, #0
 8009d02:	2104      	movs	r1, #4
 8009d04:	f7ff ff94 	bl	8009c30 <std>
 8009d08:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009d0c:	2201      	movs	r2, #1
 8009d0e:	2109      	movs	r1, #9
 8009d10:	f7ff ff8e 	bl	8009c30 <std>
 8009d14:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009d18:	2202      	movs	r2, #2
 8009d1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009d1e:	2112      	movs	r1, #18
 8009d20:	f7ff bf86 	b.w	8009c30 <std>
 8009d24:	20006ca0 	.word	0x20006ca0
 8009d28:	20006b68 	.word	0x20006b68
 8009d2c:	08009c9d 	.word	0x08009c9d

08009d30 <__sfp_lock_acquire>:
 8009d30:	4801      	ldr	r0, [pc, #4]	@ (8009d38 <__sfp_lock_acquire+0x8>)
 8009d32:	f000 bab8 	b.w	800a2a6 <__retarget_lock_acquire_recursive>
 8009d36:	bf00      	nop
 8009d38:	20006ca9 	.word	0x20006ca9

08009d3c <__sfp_lock_release>:
 8009d3c:	4801      	ldr	r0, [pc, #4]	@ (8009d44 <__sfp_lock_release+0x8>)
 8009d3e:	f000 bab3 	b.w	800a2a8 <__retarget_lock_release_recursive>
 8009d42:	bf00      	nop
 8009d44:	20006ca9 	.word	0x20006ca9

08009d48 <__sinit>:
 8009d48:	b510      	push	{r4, lr}
 8009d4a:	4604      	mov	r4, r0
 8009d4c:	f7ff fff0 	bl	8009d30 <__sfp_lock_acquire>
 8009d50:	6a23      	ldr	r3, [r4, #32]
 8009d52:	b11b      	cbz	r3, 8009d5c <__sinit+0x14>
 8009d54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009d58:	f7ff bff0 	b.w	8009d3c <__sfp_lock_release>
 8009d5c:	4b04      	ldr	r3, [pc, #16]	@ (8009d70 <__sinit+0x28>)
 8009d5e:	6223      	str	r3, [r4, #32]
 8009d60:	4b04      	ldr	r3, [pc, #16]	@ (8009d74 <__sinit+0x2c>)
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d1f5      	bne.n	8009d54 <__sinit+0xc>
 8009d68:	f7ff ffc4 	bl	8009cf4 <global_stdio_init.part.0>
 8009d6c:	e7f2      	b.n	8009d54 <__sinit+0xc>
 8009d6e:	bf00      	nop
 8009d70:	08009cb5 	.word	0x08009cb5
 8009d74:	20006ca0 	.word	0x20006ca0

08009d78 <_fwalk_sglue>:
 8009d78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d7c:	4607      	mov	r7, r0
 8009d7e:	4688      	mov	r8, r1
 8009d80:	4614      	mov	r4, r2
 8009d82:	2600      	movs	r6, #0
 8009d84:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009d88:	f1b9 0901 	subs.w	r9, r9, #1
 8009d8c:	d505      	bpl.n	8009d9a <_fwalk_sglue+0x22>
 8009d8e:	6824      	ldr	r4, [r4, #0]
 8009d90:	2c00      	cmp	r4, #0
 8009d92:	d1f7      	bne.n	8009d84 <_fwalk_sglue+0xc>
 8009d94:	4630      	mov	r0, r6
 8009d96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d9a:	89ab      	ldrh	r3, [r5, #12]
 8009d9c:	2b01      	cmp	r3, #1
 8009d9e:	d907      	bls.n	8009db0 <_fwalk_sglue+0x38>
 8009da0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009da4:	3301      	adds	r3, #1
 8009da6:	d003      	beq.n	8009db0 <_fwalk_sglue+0x38>
 8009da8:	4629      	mov	r1, r5
 8009daa:	4638      	mov	r0, r7
 8009dac:	47c0      	blx	r8
 8009dae:	4306      	orrs	r6, r0
 8009db0:	3568      	adds	r5, #104	@ 0x68
 8009db2:	e7e9      	b.n	8009d88 <_fwalk_sglue+0x10>

08009db4 <iprintf>:
 8009db4:	b40f      	push	{r0, r1, r2, r3}
 8009db6:	b507      	push	{r0, r1, r2, lr}
 8009db8:	4906      	ldr	r1, [pc, #24]	@ (8009dd4 <iprintf+0x20>)
 8009dba:	ab04      	add	r3, sp, #16
 8009dbc:	6808      	ldr	r0, [r1, #0]
 8009dbe:	f853 2b04 	ldr.w	r2, [r3], #4
 8009dc2:	6881      	ldr	r1, [r0, #8]
 8009dc4:	9301      	str	r3, [sp, #4]
 8009dc6:	f001 fd6b 	bl	800b8a0 <_vfiprintf_r>
 8009dca:	b003      	add	sp, #12
 8009dcc:	f85d eb04 	ldr.w	lr, [sp], #4
 8009dd0:	b004      	add	sp, #16
 8009dd2:	4770      	bx	lr
 8009dd4:	2000001c 	.word	0x2000001c

08009dd8 <_puts_r>:
 8009dd8:	6a03      	ldr	r3, [r0, #32]
 8009dda:	b570      	push	{r4, r5, r6, lr}
 8009ddc:	6884      	ldr	r4, [r0, #8]
 8009dde:	4605      	mov	r5, r0
 8009de0:	460e      	mov	r6, r1
 8009de2:	b90b      	cbnz	r3, 8009de8 <_puts_r+0x10>
 8009de4:	f7ff ffb0 	bl	8009d48 <__sinit>
 8009de8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009dea:	07db      	lsls	r3, r3, #31
 8009dec:	d405      	bmi.n	8009dfa <_puts_r+0x22>
 8009dee:	89a3      	ldrh	r3, [r4, #12]
 8009df0:	0598      	lsls	r0, r3, #22
 8009df2:	d402      	bmi.n	8009dfa <_puts_r+0x22>
 8009df4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009df6:	f000 fa56 	bl	800a2a6 <__retarget_lock_acquire_recursive>
 8009dfa:	89a3      	ldrh	r3, [r4, #12]
 8009dfc:	0719      	lsls	r1, r3, #28
 8009dfe:	d502      	bpl.n	8009e06 <_puts_r+0x2e>
 8009e00:	6923      	ldr	r3, [r4, #16]
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d135      	bne.n	8009e72 <_puts_r+0x9a>
 8009e06:	4621      	mov	r1, r4
 8009e08:	4628      	mov	r0, r5
 8009e0a:	f000 f979 	bl	800a100 <__swsetup_r>
 8009e0e:	b380      	cbz	r0, 8009e72 <_puts_r+0x9a>
 8009e10:	f04f 35ff 	mov.w	r5, #4294967295
 8009e14:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009e16:	07da      	lsls	r2, r3, #31
 8009e18:	d405      	bmi.n	8009e26 <_puts_r+0x4e>
 8009e1a:	89a3      	ldrh	r3, [r4, #12]
 8009e1c:	059b      	lsls	r3, r3, #22
 8009e1e:	d402      	bmi.n	8009e26 <_puts_r+0x4e>
 8009e20:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009e22:	f000 fa41 	bl	800a2a8 <__retarget_lock_release_recursive>
 8009e26:	4628      	mov	r0, r5
 8009e28:	bd70      	pop	{r4, r5, r6, pc}
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	da04      	bge.n	8009e38 <_puts_r+0x60>
 8009e2e:	69a2      	ldr	r2, [r4, #24]
 8009e30:	429a      	cmp	r2, r3
 8009e32:	dc17      	bgt.n	8009e64 <_puts_r+0x8c>
 8009e34:	290a      	cmp	r1, #10
 8009e36:	d015      	beq.n	8009e64 <_puts_r+0x8c>
 8009e38:	6823      	ldr	r3, [r4, #0]
 8009e3a:	1c5a      	adds	r2, r3, #1
 8009e3c:	6022      	str	r2, [r4, #0]
 8009e3e:	7019      	strb	r1, [r3, #0]
 8009e40:	68a3      	ldr	r3, [r4, #8]
 8009e42:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009e46:	3b01      	subs	r3, #1
 8009e48:	60a3      	str	r3, [r4, #8]
 8009e4a:	2900      	cmp	r1, #0
 8009e4c:	d1ed      	bne.n	8009e2a <_puts_r+0x52>
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	da11      	bge.n	8009e76 <_puts_r+0x9e>
 8009e52:	4622      	mov	r2, r4
 8009e54:	210a      	movs	r1, #10
 8009e56:	4628      	mov	r0, r5
 8009e58:	f000 f913 	bl	800a082 <__swbuf_r>
 8009e5c:	3001      	adds	r0, #1
 8009e5e:	d0d7      	beq.n	8009e10 <_puts_r+0x38>
 8009e60:	250a      	movs	r5, #10
 8009e62:	e7d7      	b.n	8009e14 <_puts_r+0x3c>
 8009e64:	4622      	mov	r2, r4
 8009e66:	4628      	mov	r0, r5
 8009e68:	f000 f90b 	bl	800a082 <__swbuf_r>
 8009e6c:	3001      	adds	r0, #1
 8009e6e:	d1e7      	bne.n	8009e40 <_puts_r+0x68>
 8009e70:	e7ce      	b.n	8009e10 <_puts_r+0x38>
 8009e72:	3e01      	subs	r6, #1
 8009e74:	e7e4      	b.n	8009e40 <_puts_r+0x68>
 8009e76:	6823      	ldr	r3, [r4, #0]
 8009e78:	1c5a      	adds	r2, r3, #1
 8009e7a:	6022      	str	r2, [r4, #0]
 8009e7c:	220a      	movs	r2, #10
 8009e7e:	701a      	strb	r2, [r3, #0]
 8009e80:	e7ee      	b.n	8009e60 <_puts_r+0x88>
	...

08009e84 <puts>:
 8009e84:	4b02      	ldr	r3, [pc, #8]	@ (8009e90 <puts+0xc>)
 8009e86:	4601      	mov	r1, r0
 8009e88:	6818      	ldr	r0, [r3, #0]
 8009e8a:	f7ff bfa5 	b.w	8009dd8 <_puts_r>
 8009e8e:	bf00      	nop
 8009e90:	2000001c 	.word	0x2000001c

08009e94 <setvbuf>:
 8009e94:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009e98:	461d      	mov	r5, r3
 8009e9a:	4b57      	ldr	r3, [pc, #348]	@ (8009ff8 <setvbuf+0x164>)
 8009e9c:	681f      	ldr	r7, [r3, #0]
 8009e9e:	4604      	mov	r4, r0
 8009ea0:	460e      	mov	r6, r1
 8009ea2:	4690      	mov	r8, r2
 8009ea4:	b127      	cbz	r7, 8009eb0 <setvbuf+0x1c>
 8009ea6:	6a3b      	ldr	r3, [r7, #32]
 8009ea8:	b913      	cbnz	r3, 8009eb0 <setvbuf+0x1c>
 8009eaa:	4638      	mov	r0, r7
 8009eac:	f7ff ff4c 	bl	8009d48 <__sinit>
 8009eb0:	f1b8 0f02 	cmp.w	r8, #2
 8009eb4:	d006      	beq.n	8009ec4 <setvbuf+0x30>
 8009eb6:	f1b8 0f01 	cmp.w	r8, #1
 8009eba:	f200 809a 	bhi.w	8009ff2 <setvbuf+0x15e>
 8009ebe:	2d00      	cmp	r5, #0
 8009ec0:	f2c0 8097 	blt.w	8009ff2 <setvbuf+0x15e>
 8009ec4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009ec6:	07d9      	lsls	r1, r3, #31
 8009ec8:	d405      	bmi.n	8009ed6 <setvbuf+0x42>
 8009eca:	89a3      	ldrh	r3, [r4, #12]
 8009ecc:	059a      	lsls	r2, r3, #22
 8009ece:	d402      	bmi.n	8009ed6 <setvbuf+0x42>
 8009ed0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009ed2:	f000 f9e8 	bl	800a2a6 <__retarget_lock_acquire_recursive>
 8009ed6:	4621      	mov	r1, r4
 8009ed8:	4638      	mov	r0, r7
 8009eda:	f001 fe7d 	bl	800bbd8 <_fflush_r>
 8009ede:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009ee0:	b141      	cbz	r1, 8009ef4 <setvbuf+0x60>
 8009ee2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009ee6:	4299      	cmp	r1, r3
 8009ee8:	d002      	beq.n	8009ef0 <setvbuf+0x5c>
 8009eea:	4638      	mov	r0, r7
 8009eec:	f001 f82c 	bl	800af48 <_free_r>
 8009ef0:	2300      	movs	r3, #0
 8009ef2:	6363      	str	r3, [r4, #52]	@ 0x34
 8009ef4:	2300      	movs	r3, #0
 8009ef6:	61a3      	str	r3, [r4, #24]
 8009ef8:	6063      	str	r3, [r4, #4]
 8009efa:	89a3      	ldrh	r3, [r4, #12]
 8009efc:	061b      	lsls	r3, r3, #24
 8009efe:	d503      	bpl.n	8009f08 <setvbuf+0x74>
 8009f00:	6921      	ldr	r1, [r4, #16]
 8009f02:	4638      	mov	r0, r7
 8009f04:	f001 f820 	bl	800af48 <_free_r>
 8009f08:	89a3      	ldrh	r3, [r4, #12]
 8009f0a:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 8009f0e:	f023 0303 	bic.w	r3, r3, #3
 8009f12:	f1b8 0f02 	cmp.w	r8, #2
 8009f16:	81a3      	strh	r3, [r4, #12]
 8009f18:	d061      	beq.n	8009fde <setvbuf+0x14a>
 8009f1a:	ab01      	add	r3, sp, #4
 8009f1c:	466a      	mov	r2, sp
 8009f1e:	4621      	mov	r1, r4
 8009f20:	4638      	mov	r0, r7
 8009f22:	f001 fe81 	bl	800bc28 <__swhatbuf_r>
 8009f26:	89a3      	ldrh	r3, [r4, #12]
 8009f28:	4318      	orrs	r0, r3
 8009f2a:	81a0      	strh	r0, [r4, #12]
 8009f2c:	bb2d      	cbnz	r5, 8009f7a <setvbuf+0xe6>
 8009f2e:	9d00      	ldr	r5, [sp, #0]
 8009f30:	4628      	mov	r0, r5
 8009f32:	f001 f853 	bl	800afdc <malloc>
 8009f36:	4606      	mov	r6, r0
 8009f38:	2800      	cmp	r0, #0
 8009f3a:	d152      	bne.n	8009fe2 <setvbuf+0x14e>
 8009f3c:	f8dd 9000 	ldr.w	r9, [sp]
 8009f40:	45a9      	cmp	r9, r5
 8009f42:	d140      	bne.n	8009fc6 <setvbuf+0x132>
 8009f44:	f04f 35ff 	mov.w	r5, #4294967295
 8009f48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f4c:	f043 0202 	orr.w	r2, r3, #2
 8009f50:	81a2      	strh	r2, [r4, #12]
 8009f52:	2200      	movs	r2, #0
 8009f54:	60a2      	str	r2, [r4, #8]
 8009f56:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 8009f5a:	6022      	str	r2, [r4, #0]
 8009f5c:	6122      	str	r2, [r4, #16]
 8009f5e:	2201      	movs	r2, #1
 8009f60:	6162      	str	r2, [r4, #20]
 8009f62:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009f64:	07d6      	lsls	r6, r2, #31
 8009f66:	d404      	bmi.n	8009f72 <setvbuf+0xde>
 8009f68:	0598      	lsls	r0, r3, #22
 8009f6a:	d402      	bmi.n	8009f72 <setvbuf+0xde>
 8009f6c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009f6e:	f000 f99b 	bl	800a2a8 <__retarget_lock_release_recursive>
 8009f72:	4628      	mov	r0, r5
 8009f74:	b003      	add	sp, #12
 8009f76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009f7a:	2e00      	cmp	r6, #0
 8009f7c:	d0d8      	beq.n	8009f30 <setvbuf+0x9c>
 8009f7e:	6a3b      	ldr	r3, [r7, #32]
 8009f80:	b913      	cbnz	r3, 8009f88 <setvbuf+0xf4>
 8009f82:	4638      	mov	r0, r7
 8009f84:	f7ff fee0 	bl	8009d48 <__sinit>
 8009f88:	f1b8 0f01 	cmp.w	r8, #1
 8009f8c:	bf08      	it	eq
 8009f8e:	89a3      	ldrheq	r3, [r4, #12]
 8009f90:	6026      	str	r6, [r4, #0]
 8009f92:	bf04      	itt	eq
 8009f94:	f043 0301 	orreq.w	r3, r3, #1
 8009f98:	81a3      	strheq	r3, [r4, #12]
 8009f9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f9e:	f013 0208 	ands.w	r2, r3, #8
 8009fa2:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8009fa6:	d01e      	beq.n	8009fe6 <setvbuf+0x152>
 8009fa8:	07d9      	lsls	r1, r3, #31
 8009faa:	bf41      	itttt	mi
 8009fac:	2200      	movmi	r2, #0
 8009fae:	426d      	negmi	r5, r5
 8009fb0:	60a2      	strmi	r2, [r4, #8]
 8009fb2:	61a5      	strmi	r5, [r4, #24]
 8009fb4:	bf58      	it	pl
 8009fb6:	60a5      	strpl	r5, [r4, #8]
 8009fb8:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009fba:	07d2      	lsls	r2, r2, #31
 8009fbc:	d401      	bmi.n	8009fc2 <setvbuf+0x12e>
 8009fbe:	059b      	lsls	r3, r3, #22
 8009fc0:	d513      	bpl.n	8009fea <setvbuf+0x156>
 8009fc2:	2500      	movs	r5, #0
 8009fc4:	e7d5      	b.n	8009f72 <setvbuf+0xde>
 8009fc6:	4648      	mov	r0, r9
 8009fc8:	f001 f808 	bl	800afdc <malloc>
 8009fcc:	4606      	mov	r6, r0
 8009fce:	2800      	cmp	r0, #0
 8009fd0:	d0b8      	beq.n	8009f44 <setvbuf+0xb0>
 8009fd2:	89a3      	ldrh	r3, [r4, #12]
 8009fd4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009fd8:	81a3      	strh	r3, [r4, #12]
 8009fda:	464d      	mov	r5, r9
 8009fdc:	e7cf      	b.n	8009f7e <setvbuf+0xea>
 8009fde:	2500      	movs	r5, #0
 8009fe0:	e7b2      	b.n	8009f48 <setvbuf+0xb4>
 8009fe2:	46a9      	mov	r9, r5
 8009fe4:	e7f5      	b.n	8009fd2 <setvbuf+0x13e>
 8009fe6:	60a2      	str	r2, [r4, #8]
 8009fe8:	e7e6      	b.n	8009fb8 <setvbuf+0x124>
 8009fea:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009fec:	f000 f95c 	bl	800a2a8 <__retarget_lock_release_recursive>
 8009ff0:	e7e7      	b.n	8009fc2 <setvbuf+0x12e>
 8009ff2:	f04f 35ff 	mov.w	r5, #4294967295
 8009ff6:	e7bc      	b.n	8009f72 <setvbuf+0xde>
 8009ff8:	2000001c 	.word	0x2000001c

08009ffc <__sread>:
 8009ffc:	b510      	push	{r4, lr}
 8009ffe:	460c      	mov	r4, r1
 800a000:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a004:	f000 f900 	bl	800a208 <_read_r>
 800a008:	2800      	cmp	r0, #0
 800a00a:	bfab      	itete	ge
 800a00c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a00e:	89a3      	ldrhlt	r3, [r4, #12]
 800a010:	181b      	addge	r3, r3, r0
 800a012:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a016:	bfac      	ite	ge
 800a018:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a01a:	81a3      	strhlt	r3, [r4, #12]
 800a01c:	bd10      	pop	{r4, pc}

0800a01e <__swrite>:
 800a01e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a022:	461f      	mov	r7, r3
 800a024:	898b      	ldrh	r3, [r1, #12]
 800a026:	05db      	lsls	r3, r3, #23
 800a028:	4605      	mov	r5, r0
 800a02a:	460c      	mov	r4, r1
 800a02c:	4616      	mov	r6, r2
 800a02e:	d505      	bpl.n	800a03c <__swrite+0x1e>
 800a030:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a034:	2302      	movs	r3, #2
 800a036:	2200      	movs	r2, #0
 800a038:	f000 f8d4 	bl	800a1e4 <_lseek_r>
 800a03c:	89a3      	ldrh	r3, [r4, #12]
 800a03e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a042:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a046:	81a3      	strh	r3, [r4, #12]
 800a048:	4632      	mov	r2, r6
 800a04a:	463b      	mov	r3, r7
 800a04c:	4628      	mov	r0, r5
 800a04e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a052:	f000 b8eb 	b.w	800a22c <_write_r>

0800a056 <__sseek>:
 800a056:	b510      	push	{r4, lr}
 800a058:	460c      	mov	r4, r1
 800a05a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a05e:	f000 f8c1 	bl	800a1e4 <_lseek_r>
 800a062:	1c43      	adds	r3, r0, #1
 800a064:	89a3      	ldrh	r3, [r4, #12]
 800a066:	bf15      	itete	ne
 800a068:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a06a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a06e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a072:	81a3      	strheq	r3, [r4, #12]
 800a074:	bf18      	it	ne
 800a076:	81a3      	strhne	r3, [r4, #12]
 800a078:	bd10      	pop	{r4, pc}

0800a07a <__sclose>:
 800a07a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a07e:	f000 b8a1 	b.w	800a1c4 <_close_r>

0800a082 <__swbuf_r>:
 800a082:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a084:	460e      	mov	r6, r1
 800a086:	4614      	mov	r4, r2
 800a088:	4605      	mov	r5, r0
 800a08a:	b118      	cbz	r0, 800a094 <__swbuf_r+0x12>
 800a08c:	6a03      	ldr	r3, [r0, #32]
 800a08e:	b90b      	cbnz	r3, 800a094 <__swbuf_r+0x12>
 800a090:	f7ff fe5a 	bl	8009d48 <__sinit>
 800a094:	69a3      	ldr	r3, [r4, #24]
 800a096:	60a3      	str	r3, [r4, #8]
 800a098:	89a3      	ldrh	r3, [r4, #12]
 800a09a:	071a      	lsls	r2, r3, #28
 800a09c:	d501      	bpl.n	800a0a2 <__swbuf_r+0x20>
 800a09e:	6923      	ldr	r3, [r4, #16]
 800a0a0:	b943      	cbnz	r3, 800a0b4 <__swbuf_r+0x32>
 800a0a2:	4621      	mov	r1, r4
 800a0a4:	4628      	mov	r0, r5
 800a0a6:	f000 f82b 	bl	800a100 <__swsetup_r>
 800a0aa:	b118      	cbz	r0, 800a0b4 <__swbuf_r+0x32>
 800a0ac:	f04f 37ff 	mov.w	r7, #4294967295
 800a0b0:	4638      	mov	r0, r7
 800a0b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a0b4:	6823      	ldr	r3, [r4, #0]
 800a0b6:	6922      	ldr	r2, [r4, #16]
 800a0b8:	1a98      	subs	r0, r3, r2
 800a0ba:	6963      	ldr	r3, [r4, #20]
 800a0bc:	b2f6      	uxtb	r6, r6
 800a0be:	4283      	cmp	r3, r0
 800a0c0:	4637      	mov	r7, r6
 800a0c2:	dc05      	bgt.n	800a0d0 <__swbuf_r+0x4e>
 800a0c4:	4621      	mov	r1, r4
 800a0c6:	4628      	mov	r0, r5
 800a0c8:	f001 fd86 	bl	800bbd8 <_fflush_r>
 800a0cc:	2800      	cmp	r0, #0
 800a0ce:	d1ed      	bne.n	800a0ac <__swbuf_r+0x2a>
 800a0d0:	68a3      	ldr	r3, [r4, #8]
 800a0d2:	3b01      	subs	r3, #1
 800a0d4:	60a3      	str	r3, [r4, #8]
 800a0d6:	6823      	ldr	r3, [r4, #0]
 800a0d8:	1c5a      	adds	r2, r3, #1
 800a0da:	6022      	str	r2, [r4, #0]
 800a0dc:	701e      	strb	r6, [r3, #0]
 800a0de:	6962      	ldr	r2, [r4, #20]
 800a0e0:	1c43      	adds	r3, r0, #1
 800a0e2:	429a      	cmp	r2, r3
 800a0e4:	d004      	beq.n	800a0f0 <__swbuf_r+0x6e>
 800a0e6:	89a3      	ldrh	r3, [r4, #12]
 800a0e8:	07db      	lsls	r3, r3, #31
 800a0ea:	d5e1      	bpl.n	800a0b0 <__swbuf_r+0x2e>
 800a0ec:	2e0a      	cmp	r6, #10
 800a0ee:	d1df      	bne.n	800a0b0 <__swbuf_r+0x2e>
 800a0f0:	4621      	mov	r1, r4
 800a0f2:	4628      	mov	r0, r5
 800a0f4:	f001 fd70 	bl	800bbd8 <_fflush_r>
 800a0f8:	2800      	cmp	r0, #0
 800a0fa:	d0d9      	beq.n	800a0b0 <__swbuf_r+0x2e>
 800a0fc:	e7d6      	b.n	800a0ac <__swbuf_r+0x2a>
	...

0800a100 <__swsetup_r>:
 800a100:	b538      	push	{r3, r4, r5, lr}
 800a102:	4b29      	ldr	r3, [pc, #164]	@ (800a1a8 <__swsetup_r+0xa8>)
 800a104:	4605      	mov	r5, r0
 800a106:	6818      	ldr	r0, [r3, #0]
 800a108:	460c      	mov	r4, r1
 800a10a:	b118      	cbz	r0, 800a114 <__swsetup_r+0x14>
 800a10c:	6a03      	ldr	r3, [r0, #32]
 800a10e:	b90b      	cbnz	r3, 800a114 <__swsetup_r+0x14>
 800a110:	f7ff fe1a 	bl	8009d48 <__sinit>
 800a114:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a118:	0719      	lsls	r1, r3, #28
 800a11a:	d422      	bmi.n	800a162 <__swsetup_r+0x62>
 800a11c:	06da      	lsls	r2, r3, #27
 800a11e:	d407      	bmi.n	800a130 <__swsetup_r+0x30>
 800a120:	2209      	movs	r2, #9
 800a122:	602a      	str	r2, [r5, #0]
 800a124:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a128:	81a3      	strh	r3, [r4, #12]
 800a12a:	f04f 30ff 	mov.w	r0, #4294967295
 800a12e:	e033      	b.n	800a198 <__swsetup_r+0x98>
 800a130:	0758      	lsls	r0, r3, #29
 800a132:	d512      	bpl.n	800a15a <__swsetup_r+0x5a>
 800a134:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a136:	b141      	cbz	r1, 800a14a <__swsetup_r+0x4a>
 800a138:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a13c:	4299      	cmp	r1, r3
 800a13e:	d002      	beq.n	800a146 <__swsetup_r+0x46>
 800a140:	4628      	mov	r0, r5
 800a142:	f000 ff01 	bl	800af48 <_free_r>
 800a146:	2300      	movs	r3, #0
 800a148:	6363      	str	r3, [r4, #52]	@ 0x34
 800a14a:	89a3      	ldrh	r3, [r4, #12]
 800a14c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a150:	81a3      	strh	r3, [r4, #12]
 800a152:	2300      	movs	r3, #0
 800a154:	6063      	str	r3, [r4, #4]
 800a156:	6923      	ldr	r3, [r4, #16]
 800a158:	6023      	str	r3, [r4, #0]
 800a15a:	89a3      	ldrh	r3, [r4, #12]
 800a15c:	f043 0308 	orr.w	r3, r3, #8
 800a160:	81a3      	strh	r3, [r4, #12]
 800a162:	6923      	ldr	r3, [r4, #16]
 800a164:	b94b      	cbnz	r3, 800a17a <__swsetup_r+0x7a>
 800a166:	89a3      	ldrh	r3, [r4, #12]
 800a168:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a16c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a170:	d003      	beq.n	800a17a <__swsetup_r+0x7a>
 800a172:	4621      	mov	r1, r4
 800a174:	4628      	mov	r0, r5
 800a176:	f001 fd7d 	bl	800bc74 <__smakebuf_r>
 800a17a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a17e:	f013 0201 	ands.w	r2, r3, #1
 800a182:	d00a      	beq.n	800a19a <__swsetup_r+0x9a>
 800a184:	2200      	movs	r2, #0
 800a186:	60a2      	str	r2, [r4, #8]
 800a188:	6962      	ldr	r2, [r4, #20]
 800a18a:	4252      	negs	r2, r2
 800a18c:	61a2      	str	r2, [r4, #24]
 800a18e:	6922      	ldr	r2, [r4, #16]
 800a190:	b942      	cbnz	r2, 800a1a4 <__swsetup_r+0xa4>
 800a192:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a196:	d1c5      	bne.n	800a124 <__swsetup_r+0x24>
 800a198:	bd38      	pop	{r3, r4, r5, pc}
 800a19a:	0799      	lsls	r1, r3, #30
 800a19c:	bf58      	it	pl
 800a19e:	6962      	ldrpl	r2, [r4, #20]
 800a1a0:	60a2      	str	r2, [r4, #8]
 800a1a2:	e7f4      	b.n	800a18e <__swsetup_r+0x8e>
 800a1a4:	2000      	movs	r0, #0
 800a1a6:	e7f7      	b.n	800a198 <__swsetup_r+0x98>
 800a1a8:	2000001c 	.word	0x2000001c

0800a1ac <memset>:
 800a1ac:	4402      	add	r2, r0
 800a1ae:	4603      	mov	r3, r0
 800a1b0:	4293      	cmp	r3, r2
 800a1b2:	d100      	bne.n	800a1b6 <memset+0xa>
 800a1b4:	4770      	bx	lr
 800a1b6:	f803 1b01 	strb.w	r1, [r3], #1
 800a1ba:	e7f9      	b.n	800a1b0 <memset+0x4>

0800a1bc <_localeconv_r>:
 800a1bc:	4800      	ldr	r0, [pc, #0]	@ (800a1c0 <_localeconv_r+0x4>)
 800a1be:	4770      	bx	lr
 800a1c0:	2000015c 	.word	0x2000015c

0800a1c4 <_close_r>:
 800a1c4:	b538      	push	{r3, r4, r5, lr}
 800a1c6:	4d06      	ldr	r5, [pc, #24]	@ (800a1e0 <_close_r+0x1c>)
 800a1c8:	2300      	movs	r3, #0
 800a1ca:	4604      	mov	r4, r0
 800a1cc:	4608      	mov	r0, r1
 800a1ce:	602b      	str	r3, [r5, #0]
 800a1d0:	f7f7 ff5a 	bl	8002088 <_close>
 800a1d4:	1c43      	adds	r3, r0, #1
 800a1d6:	d102      	bne.n	800a1de <_close_r+0x1a>
 800a1d8:	682b      	ldr	r3, [r5, #0]
 800a1da:	b103      	cbz	r3, 800a1de <_close_r+0x1a>
 800a1dc:	6023      	str	r3, [r4, #0]
 800a1de:	bd38      	pop	{r3, r4, r5, pc}
 800a1e0:	20006ca4 	.word	0x20006ca4

0800a1e4 <_lseek_r>:
 800a1e4:	b538      	push	{r3, r4, r5, lr}
 800a1e6:	4d07      	ldr	r5, [pc, #28]	@ (800a204 <_lseek_r+0x20>)
 800a1e8:	4604      	mov	r4, r0
 800a1ea:	4608      	mov	r0, r1
 800a1ec:	4611      	mov	r1, r2
 800a1ee:	2200      	movs	r2, #0
 800a1f0:	602a      	str	r2, [r5, #0]
 800a1f2:	461a      	mov	r2, r3
 800a1f4:	f7f8 f8b5 	bl	8002362 <_lseek>
 800a1f8:	1c43      	adds	r3, r0, #1
 800a1fa:	d102      	bne.n	800a202 <_lseek_r+0x1e>
 800a1fc:	682b      	ldr	r3, [r5, #0]
 800a1fe:	b103      	cbz	r3, 800a202 <_lseek_r+0x1e>
 800a200:	6023      	str	r3, [r4, #0]
 800a202:	bd38      	pop	{r3, r4, r5, pc}
 800a204:	20006ca4 	.word	0x20006ca4

0800a208 <_read_r>:
 800a208:	b538      	push	{r3, r4, r5, lr}
 800a20a:	4d07      	ldr	r5, [pc, #28]	@ (800a228 <_read_r+0x20>)
 800a20c:	4604      	mov	r4, r0
 800a20e:	4608      	mov	r0, r1
 800a210:	4611      	mov	r1, r2
 800a212:	2200      	movs	r2, #0
 800a214:	602a      	str	r2, [r5, #0]
 800a216:	461a      	mov	r2, r3
 800a218:	f7f7 ff4e 	bl	80020b8 <_read>
 800a21c:	1c43      	adds	r3, r0, #1
 800a21e:	d102      	bne.n	800a226 <_read_r+0x1e>
 800a220:	682b      	ldr	r3, [r5, #0]
 800a222:	b103      	cbz	r3, 800a226 <_read_r+0x1e>
 800a224:	6023      	str	r3, [r4, #0]
 800a226:	bd38      	pop	{r3, r4, r5, pc}
 800a228:	20006ca4 	.word	0x20006ca4

0800a22c <_write_r>:
 800a22c:	b538      	push	{r3, r4, r5, lr}
 800a22e:	4d07      	ldr	r5, [pc, #28]	@ (800a24c <_write_r+0x20>)
 800a230:	4604      	mov	r4, r0
 800a232:	4608      	mov	r0, r1
 800a234:	4611      	mov	r1, r2
 800a236:	2200      	movs	r2, #0
 800a238:	602a      	str	r2, [r5, #0]
 800a23a:	461a      	mov	r2, r3
 800a23c:	f7f7 fef8 	bl	8002030 <_write>
 800a240:	1c43      	adds	r3, r0, #1
 800a242:	d102      	bne.n	800a24a <_write_r+0x1e>
 800a244:	682b      	ldr	r3, [r5, #0]
 800a246:	b103      	cbz	r3, 800a24a <_write_r+0x1e>
 800a248:	6023      	str	r3, [r4, #0]
 800a24a:	bd38      	pop	{r3, r4, r5, pc}
 800a24c:	20006ca4 	.word	0x20006ca4

0800a250 <__errno>:
 800a250:	4b01      	ldr	r3, [pc, #4]	@ (800a258 <__errno+0x8>)
 800a252:	6818      	ldr	r0, [r3, #0]
 800a254:	4770      	bx	lr
 800a256:	bf00      	nop
 800a258:	2000001c 	.word	0x2000001c

0800a25c <__libc_init_array>:
 800a25c:	b570      	push	{r4, r5, r6, lr}
 800a25e:	4d0d      	ldr	r5, [pc, #52]	@ (800a294 <__libc_init_array+0x38>)
 800a260:	4c0d      	ldr	r4, [pc, #52]	@ (800a298 <__libc_init_array+0x3c>)
 800a262:	1b64      	subs	r4, r4, r5
 800a264:	10a4      	asrs	r4, r4, #2
 800a266:	2600      	movs	r6, #0
 800a268:	42a6      	cmp	r6, r4
 800a26a:	d109      	bne.n	800a280 <__libc_init_array+0x24>
 800a26c:	4d0b      	ldr	r5, [pc, #44]	@ (800a29c <__libc_init_array+0x40>)
 800a26e:	4c0c      	ldr	r4, [pc, #48]	@ (800a2a0 <__libc_init_array+0x44>)
 800a270:	f001 fe2c 	bl	800becc <_init>
 800a274:	1b64      	subs	r4, r4, r5
 800a276:	10a4      	asrs	r4, r4, #2
 800a278:	2600      	movs	r6, #0
 800a27a:	42a6      	cmp	r6, r4
 800a27c:	d105      	bne.n	800a28a <__libc_init_array+0x2e>
 800a27e:	bd70      	pop	{r4, r5, r6, pc}
 800a280:	f855 3b04 	ldr.w	r3, [r5], #4
 800a284:	4798      	blx	r3
 800a286:	3601      	adds	r6, #1
 800a288:	e7ee      	b.n	800a268 <__libc_init_array+0xc>
 800a28a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a28e:	4798      	blx	r3
 800a290:	3601      	adds	r6, #1
 800a292:	e7f2      	b.n	800a27a <__libc_init_array+0x1e>
 800a294:	0800caf0 	.word	0x0800caf0
 800a298:	0800caf0 	.word	0x0800caf0
 800a29c:	0800caf0 	.word	0x0800caf0
 800a2a0:	0800caf4 	.word	0x0800caf4

0800a2a4 <__retarget_lock_init_recursive>:
 800a2a4:	4770      	bx	lr

0800a2a6 <__retarget_lock_acquire_recursive>:
 800a2a6:	4770      	bx	lr

0800a2a8 <__retarget_lock_release_recursive>:
 800a2a8:	4770      	bx	lr

0800a2aa <quorem>:
 800a2aa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2ae:	6903      	ldr	r3, [r0, #16]
 800a2b0:	690c      	ldr	r4, [r1, #16]
 800a2b2:	42a3      	cmp	r3, r4
 800a2b4:	4607      	mov	r7, r0
 800a2b6:	db7e      	blt.n	800a3b6 <quorem+0x10c>
 800a2b8:	3c01      	subs	r4, #1
 800a2ba:	f101 0814 	add.w	r8, r1, #20
 800a2be:	00a3      	lsls	r3, r4, #2
 800a2c0:	f100 0514 	add.w	r5, r0, #20
 800a2c4:	9300      	str	r3, [sp, #0]
 800a2c6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a2ca:	9301      	str	r3, [sp, #4]
 800a2cc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a2d0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a2d4:	3301      	adds	r3, #1
 800a2d6:	429a      	cmp	r2, r3
 800a2d8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a2dc:	fbb2 f6f3 	udiv	r6, r2, r3
 800a2e0:	d32e      	bcc.n	800a340 <quorem+0x96>
 800a2e2:	f04f 0a00 	mov.w	sl, #0
 800a2e6:	46c4      	mov	ip, r8
 800a2e8:	46ae      	mov	lr, r5
 800a2ea:	46d3      	mov	fp, sl
 800a2ec:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a2f0:	b298      	uxth	r0, r3
 800a2f2:	fb06 a000 	mla	r0, r6, r0, sl
 800a2f6:	0c02      	lsrs	r2, r0, #16
 800a2f8:	0c1b      	lsrs	r3, r3, #16
 800a2fa:	fb06 2303 	mla	r3, r6, r3, r2
 800a2fe:	f8de 2000 	ldr.w	r2, [lr]
 800a302:	b280      	uxth	r0, r0
 800a304:	b292      	uxth	r2, r2
 800a306:	1a12      	subs	r2, r2, r0
 800a308:	445a      	add	r2, fp
 800a30a:	f8de 0000 	ldr.w	r0, [lr]
 800a30e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a312:	b29b      	uxth	r3, r3
 800a314:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800a318:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800a31c:	b292      	uxth	r2, r2
 800a31e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a322:	45e1      	cmp	r9, ip
 800a324:	f84e 2b04 	str.w	r2, [lr], #4
 800a328:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800a32c:	d2de      	bcs.n	800a2ec <quorem+0x42>
 800a32e:	9b00      	ldr	r3, [sp, #0]
 800a330:	58eb      	ldr	r3, [r5, r3]
 800a332:	b92b      	cbnz	r3, 800a340 <quorem+0x96>
 800a334:	9b01      	ldr	r3, [sp, #4]
 800a336:	3b04      	subs	r3, #4
 800a338:	429d      	cmp	r5, r3
 800a33a:	461a      	mov	r2, r3
 800a33c:	d32f      	bcc.n	800a39e <quorem+0xf4>
 800a33e:	613c      	str	r4, [r7, #16]
 800a340:	4638      	mov	r0, r7
 800a342:	f001 f97b 	bl	800b63c <__mcmp>
 800a346:	2800      	cmp	r0, #0
 800a348:	db25      	blt.n	800a396 <quorem+0xec>
 800a34a:	4629      	mov	r1, r5
 800a34c:	2000      	movs	r0, #0
 800a34e:	f858 2b04 	ldr.w	r2, [r8], #4
 800a352:	f8d1 c000 	ldr.w	ip, [r1]
 800a356:	fa1f fe82 	uxth.w	lr, r2
 800a35a:	fa1f f38c 	uxth.w	r3, ip
 800a35e:	eba3 030e 	sub.w	r3, r3, lr
 800a362:	4403      	add	r3, r0
 800a364:	0c12      	lsrs	r2, r2, #16
 800a366:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800a36a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800a36e:	b29b      	uxth	r3, r3
 800a370:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a374:	45c1      	cmp	r9, r8
 800a376:	f841 3b04 	str.w	r3, [r1], #4
 800a37a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a37e:	d2e6      	bcs.n	800a34e <quorem+0xa4>
 800a380:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a384:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a388:	b922      	cbnz	r2, 800a394 <quorem+0xea>
 800a38a:	3b04      	subs	r3, #4
 800a38c:	429d      	cmp	r5, r3
 800a38e:	461a      	mov	r2, r3
 800a390:	d30b      	bcc.n	800a3aa <quorem+0x100>
 800a392:	613c      	str	r4, [r7, #16]
 800a394:	3601      	adds	r6, #1
 800a396:	4630      	mov	r0, r6
 800a398:	b003      	add	sp, #12
 800a39a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a39e:	6812      	ldr	r2, [r2, #0]
 800a3a0:	3b04      	subs	r3, #4
 800a3a2:	2a00      	cmp	r2, #0
 800a3a4:	d1cb      	bne.n	800a33e <quorem+0x94>
 800a3a6:	3c01      	subs	r4, #1
 800a3a8:	e7c6      	b.n	800a338 <quorem+0x8e>
 800a3aa:	6812      	ldr	r2, [r2, #0]
 800a3ac:	3b04      	subs	r3, #4
 800a3ae:	2a00      	cmp	r2, #0
 800a3b0:	d1ef      	bne.n	800a392 <quorem+0xe8>
 800a3b2:	3c01      	subs	r4, #1
 800a3b4:	e7ea      	b.n	800a38c <quorem+0xe2>
 800a3b6:	2000      	movs	r0, #0
 800a3b8:	e7ee      	b.n	800a398 <quorem+0xee>
 800a3ba:	0000      	movs	r0, r0
 800a3bc:	0000      	movs	r0, r0
	...

0800a3c0 <_dtoa_r>:
 800a3c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3c4:	69c7      	ldr	r7, [r0, #28]
 800a3c6:	b099      	sub	sp, #100	@ 0x64
 800a3c8:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a3cc:	ec55 4b10 	vmov	r4, r5, d0
 800a3d0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800a3d2:	9109      	str	r1, [sp, #36]	@ 0x24
 800a3d4:	4683      	mov	fp, r0
 800a3d6:	920e      	str	r2, [sp, #56]	@ 0x38
 800a3d8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a3da:	b97f      	cbnz	r7, 800a3fc <_dtoa_r+0x3c>
 800a3dc:	2010      	movs	r0, #16
 800a3de:	f000 fdfd 	bl	800afdc <malloc>
 800a3e2:	4602      	mov	r2, r0
 800a3e4:	f8cb 001c 	str.w	r0, [fp, #28]
 800a3e8:	b920      	cbnz	r0, 800a3f4 <_dtoa_r+0x34>
 800a3ea:	4ba7      	ldr	r3, [pc, #668]	@ (800a688 <_dtoa_r+0x2c8>)
 800a3ec:	21ef      	movs	r1, #239	@ 0xef
 800a3ee:	48a7      	ldr	r0, [pc, #668]	@ (800a68c <_dtoa_r+0x2cc>)
 800a3f0:	f001 fcbc 	bl	800bd6c <__assert_func>
 800a3f4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800a3f8:	6007      	str	r7, [r0, #0]
 800a3fa:	60c7      	str	r7, [r0, #12]
 800a3fc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a400:	6819      	ldr	r1, [r3, #0]
 800a402:	b159      	cbz	r1, 800a41c <_dtoa_r+0x5c>
 800a404:	685a      	ldr	r2, [r3, #4]
 800a406:	604a      	str	r2, [r1, #4]
 800a408:	2301      	movs	r3, #1
 800a40a:	4093      	lsls	r3, r2
 800a40c:	608b      	str	r3, [r1, #8]
 800a40e:	4658      	mov	r0, fp
 800a410:	f000 feda 	bl	800b1c8 <_Bfree>
 800a414:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a418:	2200      	movs	r2, #0
 800a41a:	601a      	str	r2, [r3, #0]
 800a41c:	1e2b      	subs	r3, r5, #0
 800a41e:	bfb9      	ittee	lt
 800a420:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800a424:	9303      	strlt	r3, [sp, #12]
 800a426:	2300      	movge	r3, #0
 800a428:	6033      	strge	r3, [r6, #0]
 800a42a:	9f03      	ldr	r7, [sp, #12]
 800a42c:	4b98      	ldr	r3, [pc, #608]	@ (800a690 <_dtoa_r+0x2d0>)
 800a42e:	bfbc      	itt	lt
 800a430:	2201      	movlt	r2, #1
 800a432:	6032      	strlt	r2, [r6, #0]
 800a434:	43bb      	bics	r3, r7
 800a436:	d112      	bne.n	800a45e <_dtoa_r+0x9e>
 800a438:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a43a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800a43e:	6013      	str	r3, [r2, #0]
 800a440:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a444:	4323      	orrs	r3, r4
 800a446:	f000 854d 	beq.w	800aee4 <_dtoa_r+0xb24>
 800a44a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a44c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800a6a4 <_dtoa_r+0x2e4>
 800a450:	2b00      	cmp	r3, #0
 800a452:	f000 854f 	beq.w	800aef4 <_dtoa_r+0xb34>
 800a456:	f10a 0303 	add.w	r3, sl, #3
 800a45a:	f000 bd49 	b.w	800aef0 <_dtoa_r+0xb30>
 800a45e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a462:	2200      	movs	r2, #0
 800a464:	ec51 0b17 	vmov	r0, r1, d7
 800a468:	2300      	movs	r3, #0
 800a46a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800a46e:	f7f6 fbdb 	bl	8000c28 <__aeabi_dcmpeq>
 800a472:	4680      	mov	r8, r0
 800a474:	b158      	cbz	r0, 800a48e <_dtoa_r+0xce>
 800a476:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a478:	2301      	movs	r3, #1
 800a47a:	6013      	str	r3, [r2, #0]
 800a47c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a47e:	b113      	cbz	r3, 800a486 <_dtoa_r+0xc6>
 800a480:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a482:	4b84      	ldr	r3, [pc, #528]	@ (800a694 <_dtoa_r+0x2d4>)
 800a484:	6013      	str	r3, [r2, #0]
 800a486:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800a6a8 <_dtoa_r+0x2e8>
 800a48a:	f000 bd33 	b.w	800aef4 <_dtoa_r+0xb34>
 800a48e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800a492:	aa16      	add	r2, sp, #88	@ 0x58
 800a494:	a917      	add	r1, sp, #92	@ 0x5c
 800a496:	4658      	mov	r0, fp
 800a498:	f001 f980 	bl	800b79c <__d2b>
 800a49c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800a4a0:	4681      	mov	r9, r0
 800a4a2:	2e00      	cmp	r6, #0
 800a4a4:	d077      	beq.n	800a596 <_dtoa_r+0x1d6>
 800a4a6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a4a8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800a4ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a4b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a4b4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800a4b8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800a4bc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800a4c0:	4619      	mov	r1, r3
 800a4c2:	2200      	movs	r2, #0
 800a4c4:	4b74      	ldr	r3, [pc, #464]	@ (800a698 <_dtoa_r+0x2d8>)
 800a4c6:	f7f5 ff8f 	bl	80003e8 <__aeabi_dsub>
 800a4ca:	a369      	add	r3, pc, #420	@ (adr r3, 800a670 <_dtoa_r+0x2b0>)
 800a4cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4d0:	f7f6 f942 	bl	8000758 <__aeabi_dmul>
 800a4d4:	a368      	add	r3, pc, #416	@ (adr r3, 800a678 <_dtoa_r+0x2b8>)
 800a4d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4da:	f7f5 ff87 	bl	80003ec <__adddf3>
 800a4de:	4604      	mov	r4, r0
 800a4e0:	4630      	mov	r0, r6
 800a4e2:	460d      	mov	r5, r1
 800a4e4:	f7f6 f8ce 	bl	8000684 <__aeabi_i2d>
 800a4e8:	a365      	add	r3, pc, #404	@ (adr r3, 800a680 <_dtoa_r+0x2c0>)
 800a4ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4ee:	f7f6 f933 	bl	8000758 <__aeabi_dmul>
 800a4f2:	4602      	mov	r2, r0
 800a4f4:	460b      	mov	r3, r1
 800a4f6:	4620      	mov	r0, r4
 800a4f8:	4629      	mov	r1, r5
 800a4fa:	f7f5 ff77 	bl	80003ec <__adddf3>
 800a4fe:	4604      	mov	r4, r0
 800a500:	460d      	mov	r5, r1
 800a502:	f7f6 fbd9 	bl	8000cb8 <__aeabi_d2iz>
 800a506:	2200      	movs	r2, #0
 800a508:	4607      	mov	r7, r0
 800a50a:	2300      	movs	r3, #0
 800a50c:	4620      	mov	r0, r4
 800a50e:	4629      	mov	r1, r5
 800a510:	f7f6 fb94 	bl	8000c3c <__aeabi_dcmplt>
 800a514:	b140      	cbz	r0, 800a528 <_dtoa_r+0x168>
 800a516:	4638      	mov	r0, r7
 800a518:	f7f6 f8b4 	bl	8000684 <__aeabi_i2d>
 800a51c:	4622      	mov	r2, r4
 800a51e:	462b      	mov	r3, r5
 800a520:	f7f6 fb82 	bl	8000c28 <__aeabi_dcmpeq>
 800a524:	b900      	cbnz	r0, 800a528 <_dtoa_r+0x168>
 800a526:	3f01      	subs	r7, #1
 800a528:	2f16      	cmp	r7, #22
 800a52a:	d851      	bhi.n	800a5d0 <_dtoa_r+0x210>
 800a52c:	4b5b      	ldr	r3, [pc, #364]	@ (800a69c <_dtoa_r+0x2dc>)
 800a52e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a532:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a536:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a53a:	f7f6 fb7f 	bl	8000c3c <__aeabi_dcmplt>
 800a53e:	2800      	cmp	r0, #0
 800a540:	d048      	beq.n	800a5d4 <_dtoa_r+0x214>
 800a542:	3f01      	subs	r7, #1
 800a544:	2300      	movs	r3, #0
 800a546:	9312      	str	r3, [sp, #72]	@ 0x48
 800a548:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a54a:	1b9b      	subs	r3, r3, r6
 800a54c:	1e5a      	subs	r2, r3, #1
 800a54e:	bf44      	itt	mi
 800a550:	f1c3 0801 	rsbmi	r8, r3, #1
 800a554:	2300      	movmi	r3, #0
 800a556:	9208      	str	r2, [sp, #32]
 800a558:	bf54      	ite	pl
 800a55a:	f04f 0800 	movpl.w	r8, #0
 800a55e:	9308      	strmi	r3, [sp, #32]
 800a560:	2f00      	cmp	r7, #0
 800a562:	db39      	blt.n	800a5d8 <_dtoa_r+0x218>
 800a564:	9b08      	ldr	r3, [sp, #32]
 800a566:	970f      	str	r7, [sp, #60]	@ 0x3c
 800a568:	443b      	add	r3, r7
 800a56a:	9308      	str	r3, [sp, #32]
 800a56c:	2300      	movs	r3, #0
 800a56e:	930a      	str	r3, [sp, #40]	@ 0x28
 800a570:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a572:	2b09      	cmp	r3, #9
 800a574:	d864      	bhi.n	800a640 <_dtoa_r+0x280>
 800a576:	2b05      	cmp	r3, #5
 800a578:	bfc4      	itt	gt
 800a57a:	3b04      	subgt	r3, #4
 800a57c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800a57e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a580:	f1a3 0302 	sub.w	r3, r3, #2
 800a584:	bfcc      	ite	gt
 800a586:	2400      	movgt	r4, #0
 800a588:	2401      	movle	r4, #1
 800a58a:	2b03      	cmp	r3, #3
 800a58c:	d863      	bhi.n	800a656 <_dtoa_r+0x296>
 800a58e:	e8df f003 	tbb	[pc, r3]
 800a592:	372a      	.short	0x372a
 800a594:	5535      	.short	0x5535
 800a596:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800a59a:	441e      	add	r6, r3
 800a59c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800a5a0:	2b20      	cmp	r3, #32
 800a5a2:	bfc1      	itttt	gt
 800a5a4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800a5a8:	409f      	lslgt	r7, r3
 800a5aa:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800a5ae:	fa24 f303 	lsrgt.w	r3, r4, r3
 800a5b2:	bfd6      	itet	le
 800a5b4:	f1c3 0320 	rsble	r3, r3, #32
 800a5b8:	ea47 0003 	orrgt.w	r0, r7, r3
 800a5bc:	fa04 f003 	lslle.w	r0, r4, r3
 800a5c0:	f7f6 f850 	bl	8000664 <__aeabi_ui2d>
 800a5c4:	2201      	movs	r2, #1
 800a5c6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800a5ca:	3e01      	subs	r6, #1
 800a5cc:	9214      	str	r2, [sp, #80]	@ 0x50
 800a5ce:	e777      	b.n	800a4c0 <_dtoa_r+0x100>
 800a5d0:	2301      	movs	r3, #1
 800a5d2:	e7b8      	b.n	800a546 <_dtoa_r+0x186>
 800a5d4:	9012      	str	r0, [sp, #72]	@ 0x48
 800a5d6:	e7b7      	b.n	800a548 <_dtoa_r+0x188>
 800a5d8:	427b      	negs	r3, r7
 800a5da:	930a      	str	r3, [sp, #40]	@ 0x28
 800a5dc:	2300      	movs	r3, #0
 800a5de:	eba8 0807 	sub.w	r8, r8, r7
 800a5e2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a5e4:	e7c4      	b.n	800a570 <_dtoa_r+0x1b0>
 800a5e6:	2300      	movs	r3, #0
 800a5e8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a5ea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	dc35      	bgt.n	800a65c <_dtoa_r+0x29c>
 800a5f0:	2301      	movs	r3, #1
 800a5f2:	9300      	str	r3, [sp, #0]
 800a5f4:	9307      	str	r3, [sp, #28]
 800a5f6:	461a      	mov	r2, r3
 800a5f8:	920e      	str	r2, [sp, #56]	@ 0x38
 800a5fa:	e00b      	b.n	800a614 <_dtoa_r+0x254>
 800a5fc:	2301      	movs	r3, #1
 800a5fe:	e7f3      	b.n	800a5e8 <_dtoa_r+0x228>
 800a600:	2300      	movs	r3, #0
 800a602:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a604:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a606:	18fb      	adds	r3, r7, r3
 800a608:	9300      	str	r3, [sp, #0]
 800a60a:	3301      	adds	r3, #1
 800a60c:	2b01      	cmp	r3, #1
 800a60e:	9307      	str	r3, [sp, #28]
 800a610:	bfb8      	it	lt
 800a612:	2301      	movlt	r3, #1
 800a614:	f8db 001c 	ldr.w	r0, [fp, #28]
 800a618:	2100      	movs	r1, #0
 800a61a:	2204      	movs	r2, #4
 800a61c:	f102 0514 	add.w	r5, r2, #20
 800a620:	429d      	cmp	r5, r3
 800a622:	d91f      	bls.n	800a664 <_dtoa_r+0x2a4>
 800a624:	6041      	str	r1, [r0, #4]
 800a626:	4658      	mov	r0, fp
 800a628:	f000 fd8e 	bl	800b148 <_Balloc>
 800a62c:	4682      	mov	sl, r0
 800a62e:	2800      	cmp	r0, #0
 800a630:	d13c      	bne.n	800a6ac <_dtoa_r+0x2ec>
 800a632:	4b1b      	ldr	r3, [pc, #108]	@ (800a6a0 <_dtoa_r+0x2e0>)
 800a634:	4602      	mov	r2, r0
 800a636:	f240 11af 	movw	r1, #431	@ 0x1af
 800a63a:	e6d8      	b.n	800a3ee <_dtoa_r+0x2e>
 800a63c:	2301      	movs	r3, #1
 800a63e:	e7e0      	b.n	800a602 <_dtoa_r+0x242>
 800a640:	2401      	movs	r4, #1
 800a642:	2300      	movs	r3, #0
 800a644:	9309      	str	r3, [sp, #36]	@ 0x24
 800a646:	940b      	str	r4, [sp, #44]	@ 0x2c
 800a648:	f04f 33ff 	mov.w	r3, #4294967295
 800a64c:	9300      	str	r3, [sp, #0]
 800a64e:	9307      	str	r3, [sp, #28]
 800a650:	2200      	movs	r2, #0
 800a652:	2312      	movs	r3, #18
 800a654:	e7d0      	b.n	800a5f8 <_dtoa_r+0x238>
 800a656:	2301      	movs	r3, #1
 800a658:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a65a:	e7f5      	b.n	800a648 <_dtoa_r+0x288>
 800a65c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a65e:	9300      	str	r3, [sp, #0]
 800a660:	9307      	str	r3, [sp, #28]
 800a662:	e7d7      	b.n	800a614 <_dtoa_r+0x254>
 800a664:	3101      	adds	r1, #1
 800a666:	0052      	lsls	r2, r2, #1
 800a668:	e7d8      	b.n	800a61c <_dtoa_r+0x25c>
 800a66a:	bf00      	nop
 800a66c:	f3af 8000 	nop.w
 800a670:	636f4361 	.word	0x636f4361
 800a674:	3fd287a7 	.word	0x3fd287a7
 800a678:	8b60c8b3 	.word	0x8b60c8b3
 800a67c:	3fc68a28 	.word	0x3fc68a28
 800a680:	509f79fb 	.word	0x509f79fb
 800a684:	3fd34413 	.word	0x3fd34413
 800a688:	0800c7b9 	.word	0x0800c7b9
 800a68c:	0800c7d0 	.word	0x0800c7d0
 800a690:	7ff00000 	.word	0x7ff00000
 800a694:	0800c789 	.word	0x0800c789
 800a698:	3ff80000 	.word	0x3ff80000
 800a69c:	0800c8c8 	.word	0x0800c8c8
 800a6a0:	0800c828 	.word	0x0800c828
 800a6a4:	0800c7b5 	.word	0x0800c7b5
 800a6a8:	0800c788 	.word	0x0800c788
 800a6ac:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a6b0:	6018      	str	r0, [r3, #0]
 800a6b2:	9b07      	ldr	r3, [sp, #28]
 800a6b4:	2b0e      	cmp	r3, #14
 800a6b6:	f200 80a4 	bhi.w	800a802 <_dtoa_r+0x442>
 800a6ba:	2c00      	cmp	r4, #0
 800a6bc:	f000 80a1 	beq.w	800a802 <_dtoa_r+0x442>
 800a6c0:	2f00      	cmp	r7, #0
 800a6c2:	dd33      	ble.n	800a72c <_dtoa_r+0x36c>
 800a6c4:	4bad      	ldr	r3, [pc, #692]	@ (800a97c <_dtoa_r+0x5bc>)
 800a6c6:	f007 020f 	and.w	r2, r7, #15
 800a6ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a6ce:	ed93 7b00 	vldr	d7, [r3]
 800a6d2:	05f8      	lsls	r0, r7, #23
 800a6d4:	ed8d 7b04 	vstr	d7, [sp, #16]
 800a6d8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800a6dc:	d516      	bpl.n	800a70c <_dtoa_r+0x34c>
 800a6de:	4ba8      	ldr	r3, [pc, #672]	@ (800a980 <_dtoa_r+0x5c0>)
 800a6e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a6e4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a6e8:	f7f6 f960 	bl	80009ac <__aeabi_ddiv>
 800a6ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a6f0:	f004 040f 	and.w	r4, r4, #15
 800a6f4:	2603      	movs	r6, #3
 800a6f6:	4da2      	ldr	r5, [pc, #648]	@ (800a980 <_dtoa_r+0x5c0>)
 800a6f8:	b954      	cbnz	r4, 800a710 <_dtoa_r+0x350>
 800a6fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a6fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a702:	f7f6 f953 	bl	80009ac <__aeabi_ddiv>
 800a706:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a70a:	e028      	b.n	800a75e <_dtoa_r+0x39e>
 800a70c:	2602      	movs	r6, #2
 800a70e:	e7f2      	b.n	800a6f6 <_dtoa_r+0x336>
 800a710:	07e1      	lsls	r1, r4, #31
 800a712:	d508      	bpl.n	800a726 <_dtoa_r+0x366>
 800a714:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a718:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a71c:	f7f6 f81c 	bl	8000758 <__aeabi_dmul>
 800a720:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a724:	3601      	adds	r6, #1
 800a726:	1064      	asrs	r4, r4, #1
 800a728:	3508      	adds	r5, #8
 800a72a:	e7e5      	b.n	800a6f8 <_dtoa_r+0x338>
 800a72c:	f000 80d2 	beq.w	800a8d4 <_dtoa_r+0x514>
 800a730:	427c      	negs	r4, r7
 800a732:	4b92      	ldr	r3, [pc, #584]	@ (800a97c <_dtoa_r+0x5bc>)
 800a734:	4d92      	ldr	r5, [pc, #584]	@ (800a980 <_dtoa_r+0x5c0>)
 800a736:	f004 020f 	and.w	r2, r4, #15
 800a73a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a73e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a742:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a746:	f7f6 f807 	bl	8000758 <__aeabi_dmul>
 800a74a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a74e:	1124      	asrs	r4, r4, #4
 800a750:	2300      	movs	r3, #0
 800a752:	2602      	movs	r6, #2
 800a754:	2c00      	cmp	r4, #0
 800a756:	f040 80b2 	bne.w	800a8be <_dtoa_r+0x4fe>
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d1d3      	bne.n	800a706 <_dtoa_r+0x346>
 800a75e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a760:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a764:	2b00      	cmp	r3, #0
 800a766:	f000 80b7 	beq.w	800a8d8 <_dtoa_r+0x518>
 800a76a:	4b86      	ldr	r3, [pc, #536]	@ (800a984 <_dtoa_r+0x5c4>)
 800a76c:	2200      	movs	r2, #0
 800a76e:	4620      	mov	r0, r4
 800a770:	4629      	mov	r1, r5
 800a772:	f7f6 fa63 	bl	8000c3c <__aeabi_dcmplt>
 800a776:	2800      	cmp	r0, #0
 800a778:	f000 80ae 	beq.w	800a8d8 <_dtoa_r+0x518>
 800a77c:	9b07      	ldr	r3, [sp, #28]
 800a77e:	2b00      	cmp	r3, #0
 800a780:	f000 80aa 	beq.w	800a8d8 <_dtoa_r+0x518>
 800a784:	9b00      	ldr	r3, [sp, #0]
 800a786:	2b00      	cmp	r3, #0
 800a788:	dd37      	ble.n	800a7fa <_dtoa_r+0x43a>
 800a78a:	1e7b      	subs	r3, r7, #1
 800a78c:	9304      	str	r3, [sp, #16]
 800a78e:	4620      	mov	r0, r4
 800a790:	4b7d      	ldr	r3, [pc, #500]	@ (800a988 <_dtoa_r+0x5c8>)
 800a792:	2200      	movs	r2, #0
 800a794:	4629      	mov	r1, r5
 800a796:	f7f5 ffdf 	bl	8000758 <__aeabi_dmul>
 800a79a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a79e:	9c00      	ldr	r4, [sp, #0]
 800a7a0:	3601      	adds	r6, #1
 800a7a2:	4630      	mov	r0, r6
 800a7a4:	f7f5 ff6e 	bl	8000684 <__aeabi_i2d>
 800a7a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a7ac:	f7f5 ffd4 	bl	8000758 <__aeabi_dmul>
 800a7b0:	4b76      	ldr	r3, [pc, #472]	@ (800a98c <_dtoa_r+0x5cc>)
 800a7b2:	2200      	movs	r2, #0
 800a7b4:	f7f5 fe1a 	bl	80003ec <__adddf3>
 800a7b8:	4605      	mov	r5, r0
 800a7ba:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800a7be:	2c00      	cmp	r4, #0
 800a7c0:	f040 808d 	bne.w	800a8de <_dtoa_r+0x51e>
 800a7c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a7c8:	4b71      	ldr	r3, [pc, #452]	@ (800a990 <_dtoa_r+0x5d0>)
 800a7ca:	2200      	movs	r2, #0
 800a7cc:	f7f5 fe0c 	bl	80003e8 <__aeabi_dsub>
 800a7d0:	4602      	mov	r2, r0
 800a7d2:	460b      	mov	r3, r1
 800a7d4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a7d8:	462a      	mov	r2, r5
 800a7da:	4633      	mov	r3, r6
 800a7dc:	f7f6 fa4c 	bl	8000c78 <__aeabi_dcmpgt>
 800a7e0:	2800      	cmp	r0, #0
 800a7e2:	f040 828b 	bne.w	800acfc <_dtoa_r+0x93c>
 800a7e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a7ea:	462a      	mov	r2, r5
 800a7ec:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800a7f0:	f7f6 fa24 	bl	8000c3c <__aeabi_dcmplt>
 800a7f4:	2800      	cmp	r0, #0
 800a7f6:	f040 8128 	bne.w	800aa4a <_dtoa_r+0x68a>
 800a7fa:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800a7fe:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800a802:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a804:	2b00      	cmp	r3, #0
 800a806:	f2c0 815a 	blt.w	800aabe <_dtoa_r+0x6fe>
 800a80a:	2f0e      	cmp	r7, #14
 800a80c:	f300 8157 	bgt.w	800aabe <_dtoa_r+0x6fe>
 800a810:	4b5a      	ldr	r3, [pc, #360]	@ (800a97c <_dtoa_r+0x5bc>)
 800a812:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a816:	ed93 7b00 	vldr	d7, [r3]
 800a81a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	ed8d 7b00 	vstr	d7, [sp]
 800a822:	da03      	bge.n	800a82c <_dtoa_r+0x46c>
 800a824:	9b07      	ldr	r3, [sp, #28]
 800a826:	2b00      	cmp	r3, #0
 800a828:	f340 8101 	ble.w	800aa2e <_dtoa_r+0x66e>
 800a82c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a830:	4656      	mov	r6, sl
 800a832:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a836:	4620      	mov	r0, r4
 800a838:	4629      	mov	r1, r5
 800a83a:	f7f6 f8b7 	bl	80009ac <__aeabi_ddiv>
 800a83e:	f7f6 fa3b 	bl	8000cb8 <__aeabi_d2iz>
 800a842:	4680      	mov	r8, r0
 800a844:	f7f5 ff1e 	bl	8000684 <__aeabi_i2d>
 800a848:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a84c:	f7f5 ff84 	bl	8000758 <__aeabi_dmul>
 800a850:	4602      	mov	r2, r0
 800a852:	460b      	mov	r3, r1
 800a854:	4620      	mov	r0, r4
 800a856:	4629      	mov	r1, r5
 800a858:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800a85c:	f7f5 fdc4 	bl	80003e8 <__aeabi_dsub>
 800a860:	f806 4b01 	strb.w	r4, [r6], #1
 800a864:	9d07      	ldr	r5, [sp, #28]
 800a866:	eba6 040a 	sub.w	r4, r6, sl
 800a86a:	42a5      	cmp	r5, r4
 800a86c:	4602      	mov	r2, r0
 800a86e:	460b      	mov	r3, r1
 800a870:	f040 8117 	bne.w	800aaa2 <_dtoa_r+0x6e2>
 800a874:	f7f5 fdba 	bl	80003ec <__adddf3>
 800a878:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a87c:	4604      	mov	r4, r0
 800a87e:	460d      	mov	r5, r1
 800a880:	f7f6 f9fa 	bl	8000c78 <__aeabi_dcmpgt>
 800a884:	2800      	cmp	r0, #0
 800a886:	f040 80f9 	bne.w	800aa7c <_dtoa_r+0x6bc>
 800a88a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a88e:	4620      	mov	r0, r4
 800a890:	4629      	mov	r1, r5
 800a892:	f7f6 f9c9 	bl	8000c28 <__aeabi_dcmpeq>
 800a896:	b118      	cbz	r0, 800a8a0 <_dtoa_r+0x4e0>
 800a898:	f018 0f01 	tst.w	r8, #1
 800a89c:	f040 80ee 	bne.w	800aa7c <_dtoa_r+0x6bc>
 800a8a0:	4649      	mov	r1, r9
 800a8a2:	4658      	mov	r0, fp
 800a8a4:	f000 fc90 	bl	800b1c8 <_Bfree>
 800a8a8:	2300      	movs	r3, #0
 800a8aa:	7033      	strb	r3, [r6, #0]
 800a8ac:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a8ae:	3701      	adds	r7, #1
 800a8b0:	601f      	str	r7, [r3, #0]
 800a8b2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	f000 831d 	beq.w	800aef4 <_dtoa_r+0xb34>
 800a8ba:	601e      	str	r6, [r3, #0]
 800a8bc:	e31a      	b.n	800aef4 <_dtoa_r+0xb34>
 800a8be:	07e2      	lsls	r2, r4, #31
 800a8c0:	d505      	bpl.n	800a8ce <_dtoa_r+0x50e>
 800a8c2:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a8c6:	f7f5 ff47 	bl	8000758 <__aeabi_dmul>
 800a8ca:	3601      	adds	r6, #1
 800a8cc:	2301      	movs	r3, #1
 800a8ce:	1064      	asrs	r4, r4, #1
 800a8d0:	3508      	adds	r5, #8
 800a8d2:	e73f      	b.n	800a754 <_dtoa_r+0x394>
 800a8d4:	2602      	movs	r6, #2
 800a8d6:	e742      	b.n	800a75e <_dtoa_r+0x39e>
 800a8d8:	9c07      	ldr	r4, [sp, #28]
 800a8da:	9704      	str	r7, [sp, #16]
 800a8dc:	e761      	b.n	800a7a2 <_dtoa_r+0x3e2>
 800a8de:	4b27      	ldr	r3, [pc, #156]	@ (800a97c <_dtoa_r+0x5bc>)
 800a8e0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a8e2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a8e6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a8ea:	4454      	add	r4, sl
 800a8ec:	2900      	cmp	r1, #0
 800a8ee:	d053      	beq.n	800a998 <_dtoa_r+0x5d8>
 800a8f0:	4928      	ldr	r1, [pc, #160]	@ (800a994 <_dtoa_r+0x5d4>)
 800a8f2:	2000      	movs	r0, #0
 800a8f4:	f7f6 f85a 	bl	80009ac <__aeabi_ddiv>
 800a8f8:	4633      	mov	r3, r6
 800a8fa:	462a      	mov	r2, r5
 800a8fc:	f7f5 fd74 	bl	80003e8 <__aeabi_dsub>
 800a900:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a904:	4656      	mov	r6, sl
 800a906:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a90a:	f7f6 f9d5 	bl	8000cb8 <__aeabi_d2iz>
 800a90e:	4605      	mov	r5, r0
 800a910:	f7f5 feb8 	bl	8000684 <__aeabi_i2d>
 800a914:	4602      	mov	r2, r0
 800a916:	460b      	mov	r3, r1
 800a918:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a91c:	f7f5 fd64 	bl	80003e8 <__aeabi_dsub>
 800a920:	3530      	adds	r5, #48	@ 0x30
 800a922:	4602      	mov	r2, r0
 800a924:	460b      	mov	r3, r1
 800a926:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a92a:	f806 5b01 	strb.w	r5, [r6], #1
 800a92e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a932:	f7f6 f983 	bl	8000c3c <__aeabi_dcmplt>
 800a936:	2800      	cmp	r0, #0
 800a938:	d171      	bne.n	800aa1e <_dtoa_r+0x65e>
 800a93a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a93e:	4911      	ldr	r1, [pc, #68]	@ (800a984 <_dtoa_r+0x5c4>)
 800a940:	2000      	movs	r0, #0
 800a942:	f7f5 fd51 	bl	80003e8 <__aeabi_dsub>
 800a946:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a94a:	f7f6 f977 	bl	8000c3c <__aeabi_dcmplt>
 800a94e:	2800      	cmp	r0, #0
 800a950:	f040 8095 	bne.w	800aa7e <_dtoa_r+0x6be>
 800a954:	42a6      	cmp	r6, r4
 800a956:	f43f af50 	beq.w	800a7fa <_dtoa_r+0x43a>
 800a95a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a95e:	4b0a      	ldr	r3, [pc, #40]	@ (800a988 <_dtoa_r+0x5c8>)
 800a960:	2200      	movs	r2, #0
 800a962:	f7f5 fef9 	bl	8000758 <__aeabi_dmul>
 800a966:	4b08      	ldr	r3, [pc, #32]	@ (800a988 <_dtoa_r+0x5c8>)
 800a968:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a96c:	2200      	movs	r2, #0
 800a96e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a972:	f7f5 fef1 	bl	8000758 <__aeabi_dmul>
 800a976:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a97a:	e7c4      	b.n	800a906 <_dtoa_r+0x546>
 800a97c:	0800c8c8 	.word	0x0800c8c8
 800a980:	0800c8a0 	.word	0x0800c8a0
 800a984:	3ff00000 	.word	0x3ff00000
 800a988:	40240000 	.word	0x40240000
 800a98c:	401c0000 	.word	0x401c0000
 800a990:	40140000 	.word	0x40140000
 800a994:	3fe00000 	.word	0x3fe00000
 800a998:	4631      	mov	r1, r6
 800a99a:	4628      	mov	r0, r5
 800a99c:	f7f5 fedc 	bl	8000758 <__aeabi_dmul>
 800a9a0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a9a4:	9415      	str	r4, [sp, #84]	@ 0x54
 800a9a6:	4656      	mov	r6, sl
 800a9a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a9ac:	f7f6 f984 	bl	8000cb8 <__aeabi_d2iz>
 800a9b0:	4605      	mov	r5, r0
 800a9b2:	f7f5 fe67 	bl	8000684 <__aeabi_i2d>
 800a9b6:	4602      	mov	r2, r0
 800a9b8:	460b      	mov	r3, r1
 800a9ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a9be:	f7f5 fd13 	bl	80003e8 <__aeabi_dsub>
 800a9c2:	3530      	adds	r5, #48	@ 0x30
 800a9c4:	f806 5b01 	strb.w	r5, [r6], #1
 800a9c8:	4602      	mov	r2, r0
 800a9ca:	460b      	mov	r3, r1
 800a9cc:	42a6      	cmp	r6, r4
 800a9ce:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a9d2:	f04f 0200 	mov.w	r2, #0
 800a9d6:	d124      	bne.n	800aa22 <_dtoa_r+0x662>
 800a9d8:	4bac      	ldr	r3, [pc, #688]	@ (800ac8c <_dtoa_r+0x8cc>)
 800a9da:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a9de:	f7f5 fd05 	bl	80003ec <__adddf3>
 800a9e2:	4602      	mov	r2, r0
 800a9e4:	460b      	mov	r3, r1
 800a9e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a9ea:	f7f6 f945 	bl	8000c78 <__aeabi_dcmpgt>
 800a9ee:	2800      	cmp	r0, #0
 800a9f0:	d145      	bne.n	800aa7e <_dtoa_r+0x6be>
 800a9f2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a9f6:	49a5      	ldr	r1, [pc, #660]	@ (800ac8c <_dtoa_r+0x8cc>)
 800a9f8:	2000      	movs	r0, #0
 800a9fa:	f7f5 fcf5 	bl	80003e8 <__aeabi_dsub>
 800a9fe:	4602      	mov	r2, r0
 800aa00:	460b      	mov	r3, r1
 800aa02:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aa06:	f7f6 f919 	bl	8000c3c <__aeabi_dcmplt>
 800aa0a:	2800      	cmp	r0, #0
 800aa0c:	f43f aef5 	beq.w	800a7fa <_dtoa_r+0x43a>
 800aa10:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800aa12:	1e73      	subs	r3, r6, #1
 800aa14:	9315      	str	r3, [sp, #84]	@ 0x54
 800aa16:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800aa1a:	2b30      	cmp	r3, #48	@ 0x30
 800aa1c:	d0f8      	beq.n	800aa10 <_dtoa_r+0x650>
 800aa1e:	9f04      	ldr	r7, [sp, #16]
 800aa20:	e73e      	b.n	800a8a0 <_dtoa_r+0x4e0>
 800aa22:	4b9b      	ldr	r3, [pc, #620]	@ (800ac90 <_dtoa_r+0x8d0>)
 800aa24:	f7f5 fe98 	bl	8000758 <__aeabi_dmul>
 800aa28:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aa2c:	e7bc      	b.n	800a9a8 <_dtoa_r+0x5e8>
 800aa2e:	d10c      	bne.n	800aa4a <_dtoa_r+0x68a>
 800aa30:	4b98      	ldr	r3, [pc, #608]	@ (800ac94 <_dtoa_r+0x8d4>)
 800aa32:	2200      	movs	r2, #0
 800aa34:	e9dd 0100 	ldrd	r0, r1, [sp]
 800aa38:	f7f5 fe8e 	bl	8000758 <__aeabi_dmul>
 800aa3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800aa40:	f7f6 f910 	bl	8000c64 <__aeabi_dcmpge>
 800aa44:	2800      	cmp	r0, #0
 800aa46:	f000 8157 	beq.w	800acf8 <_dtoa_r+0x938>
 800aa4a:	2400      	movs	r4, #0
 800aa4c:	4625      	mov	r5, r4
 800aa4e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aa50:	43db      	mvns	r3, r3
 800aa52:	9304      	str	r3, [sp, #16]
 800aa54:	4656      	mov	r6, sl
 800aa56:	2700      	movs	r7, #0
 800aa58:	4621      	mov	r1, r4
 800aa5a:	4658      	mov	r0, fp
 800aa5c:	f000 fbb4 	bl	800b1c8 <_Bfree>
 800aa60:	2d00      	cmp	r5, #0
 800aa62:	d0dc      	beq.n	800aa1e <_dtoa_r+0x65e>
 800aa64:	b12f      	cbz	r7, 800aa72 <_dtoa_r+0x6b2>
 800aa66:	42af      	cmp	r7, r5
 800aa68:	d003      	beq.n	800aa72 <_dtoa_r+0x6b2>
 800aa6a:	4639      	mov	r1, r7
 800aa6c:	4658      	mov	r0, fp
 800aa6e:	f000 fbab 	bl	800b1c8 <_Bfree>
 800aa72:	4629      	mov	r1, r5
 800aa74:	4658      	mov	r0, fp
 800aa76:	f000 fba7 	bl	800b1c8 <_Bfree>
 800aa7a:	e7d0      	b.n	800aa1e <_dtoa_r+0x65e>
 800aa7c:	9704      	str	r7, [sp, #16]
 800aa7e:	4633      	mov	r3, r6
 800aa80:	461e      	mov	r6, r3
 800aa82:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800aa86:	2a39      	cmp	r2, #57	@ 0x39
 800aa88:	d107      	bne.n	800aa9a <_dtoa_r+0x6da>
 800aa8a:	459a      	cmp	sl, r3
 800aa8c:	d1f8      	bne.n	800aa80 <_dtoa_r+0x6c0>
 800aa8e:	9a04      	ldr	r2, [sp, #16]
 800aa90:	3201      	adds	r2, #1
 800aa92:	9204      	str	r2, [sp, #16]
 800aa94:	2230      	movs	r2, #48	@ 0x30
 800aa96:	f88a 2000 	strb.w	r2, [sl]
 800aa9a:	781a      	ldrb	r2, [r3, #0]
 800aa9c:	3201      	adds	r2, #1
 800aa9e:	701a      	strb	r2, [r3, #0]
 800aaa0:	e7bd      	b.n	800aa1e <_dtoa_r+0x65e>
 800aaa2:	4b7b      	ldr	r3, [pc, #492]	@ (800ac90 <_dtoa_r+0x8d0>)
 800aaa4:	2200      	movs	r2, #0
 800aaa6:	f7f5 fe57 	bl	8000758 <__aeabi_dmul>
 800aaaa:	2200      	movs	r2, #0
 800aaac:	2300      	movs	r3, #0
 800aaae:	4604      	mov	r4, r0
 800aab0:	460d      	mov	r5, r1
 800aab2:	f7f6 f8b9 	bl	8000c28 <__aeabi_dcmpeq>
 800aab6:	2800      	cmp	r0, #0
 800aab8:	f43f aebb 	beq.w	800a832 <_dtoa_r+0x472>
 800aabc:	e6f0      	b.n	800a8a0 <_dtoa_r+0x4e0>
 800aabe:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800aac0:	2a00      	cmp	r2, #0
 800aac2:	f000 80db 	beq.w	800ac7c <_dtoa_r+0x8bc>
 800aac6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800aac8:	2a01      	cmp	r2, #1
 800aaca:	f300 80bf 	bgt.w	800ac4c <_dtoa_r+0x88c>
 800aace:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800aad0:	2a00      	cmp	r2, #0
 800aad2:	f000 80b7 	beq.w	800ac44 <_dtoa_r+0x884>
 800aad6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800aada:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800aadc:	4646      	mov	r6, r8
 800aade:	9a08      	ldr	r2, [sp, #32]
 800aae0:	2101      	movs	r1, #1
 800aae2:	441a      	add	r2, r3
 800aae4:	4658      	mov	r0, fp
 800aae6:	4498      	add	r8, r3
 800aae8:	9208      	str	r2, [sp, #32]
 800aaea:	f000 fc21 	bl	800b330 <__i2b>
 800aaee:	4605      	mov	r5, r0
 800aaf0:	b15e      	cbz	r6, 800ab0a <_dtoa_r+0x74a>
 800aaf2:	9b08      	ldr	r3, [sp, #32]
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	dd08      	ble.n	800ab0a <_dtoa_r+0x74a>
 800aaf8:	42b3      	cmp	r3, r6
 800aafa:	9a08      	ldr	r2, [sp, #32]
 800aafc:	bfa8      	it	ge
 800aafe:	4633      	movge	r3, r6
 800ab00:	eba8 0803 	sub.w	r8, r8, r3
 800ab04:	1af6      	subs	r6, r6, r3
 800ab06:	1ad3      	subs	r3, r2, r3
 800ab08:	9308      	str	r3, [sp, #32]
 800ab0a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ab0c:	b1f3      	cbz	r3, 800ab4c <_dtoa_r+0x78c>
 800ab0e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	f000 80b7 	beq.w	800ac84 <_dtoa_r+0x8c4>
 800ab16:	b18c      	cbz	r4, 800ab3c <_dtoa_r+0x77c>
 800ab18:	4629      	mov	r1, r5
 800ab1a:	4622      	mov	r2, r4
 800ab1c:	4658      	mov	r0, fp
 800ab1e:	f000 fcc7 	bl	800b4b0 <__pow5mult>
 800ab22:	464a      	mov	r2, r9
 800ab24:	4601      	mov	r1, r0
 800ab26:	4605      	mov	r5, r0
 800ab28:	4658      	mov	r0, fp
 800ab2a:	f000 fc17 	bl	800b35c <__multiply>
 800ab2e:	4649      	mov	r1, r9
 800ab30:	9004      	str	r0, [sp, #16]
 800ab32:	4658      	mov	r0, fp
 800ab34:	f000 fb48 	bl	800b1c8 <_Bfree>
 800ab38:	9b04      	ldr	r3, [sp, #16]
 800ab3a:	4699      	mov	r9, r3
 800ab3c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ab3e:	1b1a      	subs	r2, r3, r4
 800ab40:	d004      	beq.n	800ab4c <_dtoa_r+0x78c>
 800ab42:	4649      	mov	r1, r9
 800ab44:	4658      	mov	r0, fp
 800ab46:	f000 fcb3 	bl	800b4b0 <__pow5mult>
 800ab4a:	4681      	mov	r9, r0
 800ab4c:	2101      	movs	r1, #1
 800ab4e:	4658      	mov	r0, fp
 800ab50:	f000 fbee 	bl	800b330 <__i2b>
 800ab54:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ab56:	4604      	mov	r4, r0
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	f000 81cf 	beq.w	800aefc <_dtoa_r+0xb3c>
 800ab5e:	461a      	mov	r2, r3
 800ab60:	4601      	mov	r1, r0
 800ab62:	4658      	mov	r0, fp
 800ab64:	f000 fca4 	bl	800b4b0 <__pow5mult>
 800ab68:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ab6a:	2b01      	cmp	r3, #1
 800ab6c:	4604      	mov	r4, r0
 800ab6e:	f300 8095 	bgt.w	800ac9c <_dtoa_r+0x8dc>
 800ab72:	9b02      	ldr	r3, [sp, #8]
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	f040 8087 	bne.w	800ac88 <_dtoa_r+0x8c8>
 800ab7a:	9b03      	ldr	r3, [sp, #12]
 800ab7c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	f040 8089 	bne.w	800ac98 <_dtoa_r+0x8d8>
 800ab86:	9b03      	ldr	r3, [sp, #12]
 800ab88:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ab8c:	0d1b      	lsrs	r3, r3, #20
 800ab8e:	051b      	lsls	r3, r3, #20
 800ab90:	b12b      	cbz	r3, 800ab9e <_dtoa_r+0x7de>
 800ab92:	9b08      	ldr	r3, [sp, #32]
 800ab94:	3301      	adds	r3, #1
 800ab96:	9308      	str	r3, [sp, #32]
 800ab98:	f108 0801 	add.w	r8, r8, #1
 800ab9c:	2301      	movs	r3, #1
 800ab9e:	930a      	str	r3, [sp, #40]	@ 0x28
 800aba0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	f000 81b0 	beq.w	800af08 <_dtoa_r+0xb48>
 800aba8:	6923      	ldr	r3, [r4, #16]
 800abaa:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800abae:	6918      	ldr	r0, [r3, #16]
 800abb0:	f000 fb72 	bl	800b298 <__hi0bits>
 800abb4:	f1c0 0020 	rsb	r0, r0, #32
 800abb8:	9b08      	ldr	r3, [sp, #32]
 800abba:	4418      	add	r0, r3
 800abbc:	f010 001f 	ands.w	r0, r0, #31
 800abc0:	d077      	beq.n	800acb2 <_dtoa_r+0x8f2>
 800abc2:	f1c0 0320 	rsb	r3, r0, #32
 800abc6:	2b04      	cmp	r3, #4
 800abc8:	dd6b      	ble.n	800aca2 <_dtoa_r+0x8e2>
 800abca:	9b08      	ldr	r3, [sp, #32]
 800abcc:	f1c0 001c 	rsb	r0, r0, #28
 800abd0:	4403      	add	r3, r0
 800abd2:	4480      	add	r8, r0
 800abd4:	4406      	add	r6, r0
 800abd6:	9308      	str	r3, [sp, #32]
 800abd8:	f1b8 0f00 	cmp.w	r8, #0
 800abdc:	dd05      	ble.n	800abea <_dtoa_r+0x82a>
 800abde:	4649      	mov	r1, r9
 800abe0:	4642      	mov	r2, r8
 800abe2:	4658      	mov	r0, fp
 800abe4:	f000 fcbe 	bl	800b564 <__lshift>
 800abe8:	4681      	mov	r9, r0
 800abea:	9b08      	ldr	r3, [sp, #32]
 800abec:	2b00      	cmp	r3, #0
 800abee:	dd05      	ble.n	800abfc <_dtoa_r+0x83c>
 800abf0:	4621      	mov	r1, r4
 800abf2:	461a      	mov	r2, r3
 800abf4:	4658      	mov	r0, fp
 800abf6:	f000 fcb5 	bl	800b564 <__lshift>
 800abfa:	4604      	mov	r4, r0
 800abfc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d059      	beq.n	800acb6 <_dtoa_r+0x8f6>
 800ac02:	4621      	mov	r1, r4
 800ac04:	4648      	mov	r0, r9
 800ac06:	f000 fd19 	bl	800b63c <__mcmp>
 800ac0a:	2800      	cmp	r0, #0
 800ac0c:	da53      	bge.n	800acb6 <_dtoa_r+0x8f6>
 800ac0e:	1e7b      	subs	r3, r7, #1
 800ac10:	9304      	str	r3, [sp, #16]
 800ac12:	4649      	mov	r1, r9
 800ac14:	2300      	movs	r3, #0
 800ac16:	220a      	movs	r2, #10
 800ac18:	4658      	mov	r0, fp
 800ac1a:	f000 faf7 	bl	800b20c <__multadd>
 800ac1e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ac20:	4681      	mov	r9, r0
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	f000 8172 	beq.w	800af0c <_dtoa_r+0xb4c>
 800ac28:	2300      	movs	r3, #0
 800ac2a:	4629      	mov	r1, r5
 800ac2c:	220a      	movs	r2, #10
 800ac2e:	4658      	mov	r0, fp
 800ac30:	f000 faec 	bl	800b20c <__multadd>
 800ac34:	9b00      	ldr	r3, [sp, #0]
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	4605      	mov	r5, r0
 800ac3a:	dc67      	bgt.n	800ad0c <_dtoa_r+0x94c>
 800ac3c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ac3e:	2b02      	cmp	r3, #2
 800ac40:	dc41      	bgt.n	800acc6 <_dtoa_r+0x906>
 800ac42:	e063      	b.n	800ad0c <_dtoa_r+0x94c>
 800ac44:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800ac46:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800ac4a:	e746      	b.n	800aada <_dtoa_r+0x71a>
 800ac4c:	9b07      	ldr	r3, [sp, #28]
 800ac4e:	1e5c      	subs	r4, r3, #1
 800ac50:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ac52:	42a3      	cmp	r3, r4
 800ac54:	bfbf      	itttt	lt
 800ac56:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800ac58:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800ac5a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800ac5c:	1ae3      	sublt	r3, r4, r3
 800ac5e:	bfb4      	ite	lt
 800ac60:	18d2      	addlt	r2, r2, r3
 800ac62:	1b1c      	subge	r4, r3, r4
 800ac64:	9b07      	ldr	r3, [sp, #28]
 800ac66:	bfbc      	itt	lt
 800ac68:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800ac6a:	2400      	movlt	r4, #0
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	bfb5      	itete	lt
 800ac70:	eba8 0603 	sublt.w	r6, r8, r3
 800ac74:	9b07      	ldrge	r3, [sp, #28]
 800ac76:	2300      	movlt	r3, #0
 800ac78:	4646      	movge	r6, r8
 800ac7a:	e730      	b.n	800aade <_dtoa_r+0x71e>
 800ac7c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800ac7e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800ac80:	4646      	mov	r6, r8
 800ac82:	e735      	b.n	800aaf0 <_dtoa_r+0x730>
 800ac84:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ac86:	e75c      	b.n	800ab42 <_dtoa_r+0x782>
 800ac88:	2300      	movs	r3, #0
 800ac8a:	e788      	b.n	800ab9e <_dtoa_r+0x7de>
 800ac8c:	3fe00000 	.word	0x3fe00000
 800ac90:	40240000 	.word	0x40240000
 800ac94:	40140000 	.word	0x40140000
 800ac98:	9b02      	ldr	r3, [sp, #8]
 800ac9a:	e780      	b.n	800ab9e <_dtoa_r+0x7de>
 800ac9c:	2300      	movs	r3, #0
 800ac9e:	930a      	str	r3, [sp, #40]	@ 0x28
 800aca0:	e782      	b.n	800aba8 <_dtoa_r+0x7e8>
 800aca2:	d099      	beq.n	800abd8 <_dtoa_r+0x818>
 800aca4:	9a08      	ldr	r2, [sp, #32]
 800aca6:	331c      	adds	r3, #28
 800aca8:	441a      	add	r2, r3
 800acaa:	4498      	add	r8, r3
 800acac:	441e      	add	r6, r3
 800acae:	9208      	str	r2, [sp, #32]
 800acb0:	e792      	b.n	800abd8 <_dtoa_r+0x818>
 800acb2:	4603      	mov	r3, r0
 800acb4:	e7f6      	b.n	800aca4 <_dtoa_r+0x8e4>
 800acb6:	9b07      	ldr	r3, [sp, #28]
 800acb8:	9704      	str	r7, [sp, #16]
 800acba:	2b00      	cmp	r3, #0
 800acbc:	dc20      	bgt.n	800ad00 <_dtoa_r+0x940>
 800acbe:	9300      	str	r3, [sp, #0]
 800acc0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800acc2:	2b02      	cmp	r3, #2
 800acc4:	dd1e      	ble.n	800ad04 <_dtoa_r+0x944>
 800acc6:	9b00      	ldr	r3, [sp, #0]
 800acc8:	2b00      	cmp	r3, #0
 800acca:	f47f aec0 	bne.w	800aa4e <_dtoa_r+0x68e>
 800acce:	4621      	mov	r1, r4
 800acd0:	2205      	movs	r2, #5
 800acd2:	4658      	mov	r0, fp
 800acd4:	f000 fa9a 	bl	800b20c <__multadd>
 800acd8:	4601      	mov	r1, r0
 800acda:	4604      	mov	r4, r0
 800acdc:	4648      	mov	r0, r9
 800acde:	f000 fcad 	bl	800b63c <__mcmp>
 800ace2:	2800      	cmp	r0, #0
 800ace4:	f77f aeb3 	ble.w	800aa4e <_dtoa_r+0x68e>
 800ace8:	4656      	mov	r6, sl
 800acea:	2331      	movs	r3, #49	@ 0x31
 800acec:	f806 3b01 	strb.w	r3, [r6], #1
 800acf0:	9b04      	ldr	r3, [sp, #16]
 800acf2:	3301      	adds	r3, #1
 800acf4:	9304      	str	r3, [sp, #16]
 800acf6:	e6ae      	b.n	800aa56 <_dtoa_r+0x696>
 800acf8:	9c07      	ldr	r4, [sp, #28]
 800acfa:	9704      	str	r7, [sp, #16]
 800acfc:	4625      	mov	r5, r4
 800acfe:	e7f3      	b.n	800ace8 <_dtoa_r+0x928>
 800ad00:	9b07      	ldr	r3, [sp, #28]
 800ad02:	9300      	str	r3, [sp, #0]
 800ad04:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	f000 8104 	beq.w	800af14 <_dtoa_r+0xb54>
 800ad0c:	2e00      	cmp	r6, #0
 800ad0e:	dd05      	ble.n	800ad1c <_dtoa_r+0x95c>
 800ad10:	4629      	mov	r1, r5
 800ad12:	4632      	mov	r2, r6
 800ad14:	4658      	mov	r0, fp
 800ad16:	f000 fc25 	bl	800b564 <__lshift>
 800ad1a:	4605      	mov	r5, r0
 800ad1c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d05a      	beq.n	800add8 <_dtoa_r+0xa18>
 800ad22:	6869      	ldr	r1, [r5, #4]
 800ad24:	4658      	mov	r0, fp
 800ad26:	f000 fa0f 	bl	800b148 <_Balloc>
 800ad2a:	4606      	mov	r6, r0
 800ad2c:	b928      	cbnz	r0, 800ad3a <_dtoa_r+0x97a>
 800ad2e:	4b84      	ldr	r3, [pc, #528]	@ (800af40 <_dtoa_r+0xb80>)
 800ad30:	4602      	mov	r2, r0
 800ad32:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800ad36:	f7ff bb5a 	b.w	800a3ee <_dtoa_r+0x2e>
 800ad3a:	692a      	ldr	r2, [r5, #16]
 800ad3c:	3202      	adds	r2, #2
 800ad3e:	0092      	lsls	r2, r2, #2
 800ad40:	f105 010c 	add.w	r1, r5, #12
 800ad44:	300c      	adds	r0, #12
 800ad46:	f001 f803 	bl	800bd50 <memcpy>
 800ad4a:	2201      	movs	r2, #1
 800ad4c:	4631      	mov	r1, r6
 800ad4e:	4658      	mov	r0, fp
 800ad50:	f000 fc08 	bl	800b564 <__lshift>
 800ad54:	f10a 0301 	add.w	r3, sl, #1
 800ad58:	9307      	str	r3, [sp, #28]
 800ad5a:	9b00      	ldr	r3, [sp, #0]
 800ad5c:	4453      	add	r3, sl
 800ad5e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ad60:	9b02      	ldr	r3, [sp, #8]
 800ad62:	f003 0301 	and.w	r3, r3, #1
 800ad66:	462f      	mov	r7, r5
 800ad68:	930a      	str	r3, [sp, #40]	@ 0x28
 800ad6a:	4605      	mov	r5, r0
 800ad6c:	9b07      	ldr	r3, [sp, #28]
 800ad6e:	4621      	mov	r1, r4
 800ad70:	3b01      	subs	r3, #1
 800ad72:	4648      	mov	r0, r9
 800ad74:	9300      	str	r3, [sp, #0]
 800ad76:	f7ff fa98 	bl	800a2aa <quorem>
 800ad7a:	4639      	mov	r1, r7
 800ad7c:	9002      	str	r0, [sp, #8]
 800ad7e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800ad82:	4648      	mov	r0, r9
 800ad84:	f000 fc5a 	bl	800b63c <__mcmp>
 800ad88:	462a      	mov	r2, r5
 800ad8a:	9008      	str	r0, [sp, #32]
 800ad8c:	4621      	mov	r1, r4
 800ad8e:	4658      	mov	r0, fp
 800ad90:	f000 fc70 	bl	800b674 <__mdiff>
 800ad94:	68c2      	ldr	r2, [r0, #12]
 800ad96:	4606      	mov	r6, r0
 800ad98:	bb02      	cbnz	r2, 800addc <_dtoa_r+0xa1c>
 800ad9a:	4601      	mov	r1, r0
 800ad9c:	4648      	mov	r0, r9
 800ad9e:	f000 fc4d 	bl	800b63c <__mcmp>
 800ada2:	4602      	mov	r2, r0
 800ada4:	4631      	mov	r1, r6
 800ada6:	4658      	mov	r0, fp
 800ada8:	920e      	str	r2, [sp, #56]	@ 0x38
 800adaa:	f000 fa0d 	bl	800b1c8 <_Bfree>
 800adae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800adb0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800adb2:	9e07      	ldr	r6, [sp, #28]
 800adb4:	ea43 0102 	orr.w	r1, r3, r2
 800adb8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800adba:	4319      	orrs	r1, r3
 800adbc:	d110      	bne.n	800ade0 <_dtoa_r+0xa20>
 800adbe:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800adc2:	d029      	beq.n	800ae18 <_dtoa_r+0xa58>
 800adc4:	9b08      	ldr	r3, [sp, #32]
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	dd02      	ble.n	800add0 <_dtoa_r+0xa10>
 800adca:	9b02      	ldr	r3, [sp, #8]
 800adcc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800add0:	9b00      	ldr	r3, [sp, #0]
 800add2:	f883 8000 	strb.w	r8, [r3]
 800add6:	e63f      	b.n	800aa58 <_dtoa_r+0x698>
 800add8:	4628      	mov	r0, r5
 800adda:	e7bb      	b.n	800ad54 <_dtoa_r+0x994>
 800addc:	2201      	movs	r2, #1
 800adde:	e7e1      	b.n	800ada4 <_dtoa_r+0x9e4>
 800ade0:	9b08      	ldr	r3, [sp, #32]
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	db04      	blt.n	800adf0 <_dtoa_r+0xa30>
 800ade6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ade8:	430b      	orrs	r3, r1
 800adea:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800adec:	430b      	orrs	r3, r1
 800adee:	d120      	bne.n	800ae32 <_dtoa_r+0xa72>
 800adf0:	2a00      	cmp	r2, #0
 800adf2:	dded      	ble.n	800add0 <_dtoa_r+0xa10>
 800adf4:	4649      	mov	r1, r9
 800adf6:	2201      	movs	r2, #1
 800adf8:	4658      	mov	r0, fp
 800adfa:	f000 fbb3 	bl	800b564 <__lshift>
 800adfe:	4621      	mov	r1, r4
 800ae00:	4681      	mov	r9, r0
 800ae02:	f000 fc1b 	bl	800b63c <__mcmp>
 800ae06:	2800      	cmp	r0, #0
 800ae08:	dc03      	bgt.n	800ae12 <_dtoa_r+0xa52>
 800ae0a:	d1e1      	bne.n	800add0 <_dtoa_r+0xa10>
 800ae0c:	f018 0f01 	tst.w	r8, #1
 800ae10:	d0de      	beq.n	800add0 <_dtoa_r+0xa10>
 800ae12:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ae16:	d1d8      	bne.n	800adca <_dtoa_r+0xa0a>
 800ae18:	9a00      	ldr	r2, [sp, #0]
 800ae1a:	2339      	movs	r3, #57	@ 0x39
 800ae1c:	7013      	strb	r3, [r2, #0]
 800ae1e:	4633      	mov	r3, r6
 800ae20:	461e      	mov	r6, r3
 800ae22:	3b01      	subs	r3, #1
 800ae24:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800ae28:	2a39      	cmp	r2, #57	@ 0x39
 800ae2a:	d052      	beq.n	800aed2 <_dtoa_r+0xb12>
 800ae2c:	3201      	adds	r2, #1
 800ae2e:	701a      	strb	r2, [r3, #0]
 800ae30:	e612      	b.n	800aa58 <_dtoa_r+0x698>
 800ae32:	2a00      	cmp	r2, #0
 800ae34:	dd07      	ble.n	800ae46 <_dtoa_r+0xa86>
 800ae36:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ae3a:	d0ed      	beq.n	800ae18 <_dtoa_r+0xa58>
 800ae3c:	9a00      	ldr	r2, [sp, #0]
 800ae3e:	f108 0301 	add.w	r3, r8, #1
 800ae42:	7013      	strb	r3, [r2, #0]
 800ae44:	e608      	b.n	800aa58 <_dtoa_r+0x698>
 800ae46:	9b07      	ldr	r3, [sp, #28]
 800ae48:	9a07      	ldr	r2, [sp, #28]
 800ae4a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800ae4e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ae50:	4293      	cmp	r3, r2
 800ae52:	d028      	beq.n	800aea6 <_dtoa_r+0xae6>
 800ae54:	4649      	mov	r1, r9
 800ae56:	2300      	movs	r3, #0
 800ae58:	220a      	movs	r2, #10
 800ae5a:	4658      	mov	r0, fp
 800ae5c:	f000 f9d6 	bl	800b20c <__multadd>
 800ae60:	42af      	cmp	r7, r5
 800ae62:	4681      	mov	r9, r0
 800ae64:	f04f 0300 	mov.w	r3, #0
 800ae68:	f04f 020a 	mov.w	r2, #10
 800ae6c:	4639      	mov	r1, r7
 800ae6e:	4658      	mov	r0, fp
 800ae70:	d107      	bne.n	800ae82 <_dtoa_r+0xac2>
 800ae72:	f000 f9cb 	bl	800b20c <__multadd>
 800ae76:	4607      	mov	r7, r0
 800ae78:	4605      	mov	r5, r0
 800ae7a:	9b07      	ldr	r3, [sp, #28]
 800ae7c:	3301      	adds	r3, #1
 800ae7e:	9307      	str	r3, [sp, #28]
 800ae80:	e774      	b.n	800ad6c <_dtoa_r+0x9ac>
 800ae82:	f000 f9c3 	bl	800b20c <__multadd>
 800ae86:	4629      	mov	r1, r5
 800ae88:	4607      	mov	r7, r0
 800ae8a:	2300      	movs	r3, #0
 800ae8c:	220a      	movs	r2, #10
 800ae8e:	4658      	mov	r0, fp
 800ae90:	f000 f9bc 	bl	800b20c <__multadd>
 800ae94:	4605      	mov	r5, r0
 800ae96:	e7f0      	b.n	800ae7a <_dtoa_r+0xaba>
 800ae98:	9b00      	ldr	r3, [sp, #0]
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	bfcc      	ite	gt
 800ae9e:	461e      	movgt	r6, r3
 800aea0:	2601      	movle	r6, #1
 800aea2:	4456      	add	r6, sl
 800aea4:	2700      	movs	r7, #0
 800aea6:	4649      	mov	r1, r9
 800aea8:	2201      	movs	r2, #1
 800aeaa:	4658      	mov	r0, fp
 800aeac:	f000 fb5a 	bl	800b564 <__lshift>
 800aeb0:	4621      	mov	r1, r4
 800aeb2:	4681      	mov	r9, r0
 800aeb4:	f000 fbc2 	bl	800b63c <__mcmp>
 800aeb8:	2800      	cmp	r0, #0
 800aeba:	dcb0      	bgt.n	800ae1e <_dtoa_r+0xa5e>
 800aebc:	d102      	bne.n	800aec4 <_dtoa_r+0xb04>
 800aebe:	f018 0f01 	tst.w	r8, #1
 800aec2:	d1ac      	bne.n	800ae1e <_dtoa_r+0xa5e>
 800aec4:	4633      	mov	r3, r6
 800aec6:	461e      	mov	r6, r3
 800aec8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800aecc:	2a30      	cmp	r2, #48	@ 0x30
 800aece:	d0fa      	beq.n	800aec6 <_dtoa_r+0xb06>
 800aed0:	e5c2      	b.n	800aa58 <_dtoa_r+0x698>
 800aed2:	459a      	cmp	sl, r3
 800aed4:	d1a4      	bne.n	800ae20 <_dtoa_r+0xa60>
 800aed6:	9b04      	ldr	r3, [sp, #16]
 800aed8:	3301      	adds	r3, #1
 800aeda:	9304      	str	r3, [sp, #16]
 800aedc:	2331      	movs	r3, #49	@ 0x31
 800aede:	f88a 3000 	strb.w	r3, [sl]
 800aee2:	e5b9      	b.n	800aa58 <_dtoa_r+0x698>
 800aee4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800aee6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800af44 <_dtoa_r+0xb84>
 800aeea:	b11b      	cbz	r3, 800aef4 <_dtoa_r+0xb34>
 800aeec:	f10a 0308 	add.w	r3, sl, #8
 800aef0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800aef2:	6013      	str	r3, [r2, #0]
 800aef4:	4650      	mov	r0, sl
 800aef6:	b019      	add	sp, #100	@ 0x64
 800aef8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aefc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aefe:	2b01      	cmp	r3, #1
 800af00:	f77f ae37 	ble.w	800ab72 <_dtoa_r+0x7b2>
 800af04:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800af06:	930a      	str	r3, [sp, #40]	@ 0x28
 800af08:	2001      	movs	r0, #1
 800af0a:	e655      	b.n	800abb8 <_dtoa_r+0x7f8>
 800af0c:	9b00      	ldr	r3, [sp, #0]
 800af0e:	2b00      	cmp	r3, #0
 800af10:	f77f aed6 	ble.w	800acc0 <_dtoa_r+0x900>
 800af14:	4656      	mov	r6, sl
 800af16:	4621      	mov	r1, r4
 800af18:	4648      	mov	r0, r9
 800af1a:	f7ff f9c6 	bl	800a2aa <quorem>
 800af1e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800af22:	f806 8b01 	strb.w	r8, [r6], #1
 800af26:	9b00      	ldr	r3, [sp, #0]
 800af28:	eba6 020a 	sub.w	r2, r6, sl
 800af2c:	4293      	cmp	r3, r2
 800af2e:	ddb3      	ble.n	800ae98 <_dtoa_r+0xad8>
 800af30:	4649      	mov	r1, r9
 800af32:	2300      	movs	r3, #0
 800af34:	220a      	movs	r2, #10
 800af36:	4658      	mov	r0, fp
 800af38:	f000 f968 	bl	800b20c <__multadd>
 800af3c:	4681      	mov	r9, r0
 800af3e:	e7ea      	b.n	800af16 <_dtoa_r+0xb56>
 800af40:	0800c828 	.word	0x0800c828
 800af44:	0800c7ac 	.word	0x0800c7ac

0800af48 <_free_r>:
 800af48:	b538      	push	{r3, r4, r5, lr}
 800af4a:	4605      	mov	r5, r0
 800af4c:	2900      	cmp	r1, #0
 800af4e:	d041      	beq.n	800afd4 <_free_r+0x8c>
 800af50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800af54:	1f0c      	subs	r4, r1, #4
 800af56:	2b00      	cmp	r3, #0
 800af58:	bfb8      	it	lt
 800af5a:	18e4      	addlt	r4, r4, r3
 800af5c:	f000 f8e8 	bl	800b130 <__malloc_lock>
 800af60:	4a1d      	ldr	r2, [pc, #116]	@ (800afd8 <_free_r+0x90>)
 800af62:	6813      	ldr	r3, [r2, #0]
 800af64:	b933      	cbnz	r3, 800af74 <_free_r+0x2c>
 800af66:	6063      	str	r3, [r4, #4]
 800af68:	6014      	str	r4, [r2, #0]
 800af6a:	4628      	mov	r0, r5
 800af6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800af70:	f000 b8e4 	b.w	800b13c <__malloc_unlock>
 800af74:	42a3      	cmp	r3, r4
 800af76:	d908      	bls.n	800af8a <_free_r+0x42>
 800af78:	6820      	ldr	r0, [r4, #0]
 800af7a:	1821      	adds	r1, r4, r0
 800af7c:	428b      	cmp	r3, r1
 800af7e:	bf01      	itttt	eq
 800af80:	6819      	ldreq	r1, [r3, #0]
 800af82:	685b      	ldreq	r3, [r3, #4]
 800af84:	1809      	addeq	r1, r1, r0
 800af86:	6021      	streq	r1, [r4, #0]
 800af88:	e7ed      	b.n	800af66 <_free_r+0x1e>
 800af8a:	461a      	mov	r2, r3
 800af8c:	685b      	ldr	r3, [r3, #4]
 800af8e:	b10b      	cbz	r3, 800af94 <_free_r+0x4c>
 800af90:	42a3      	cmp	r3, r4
 800af92:	d9fa      	bls.n	800af8a <_free_r+0x42>
 800af94:	6811      	ldr	r1, [r2, #0]
 800af96:	1850      	adds	r0, r2, r1
 800af98:	42a0      	cmp	r0, r4
 800af9a:	d10b      	bne.n	800afb4 <_free_r+0x6c>
 800af9c:	6820      	ldr	r0, [r4, #0]
 800af9e:	4401      	add	r1, r0
 800afa0:	1850      	adds	r0, r2, r1
 800afa2:	4283      	cmp	r3, r0
 800afa4:	6011      	str	r1, [r2, #0]
 800afa6:	d1e0      	bne.n	800af6a <_free_r+0x22>
 800afa8:	6818      	ldr	r0, [r3, #0]
 800afaa:	685b      	ldr	r3, [r3, #4]
 800afac:	6053      	str	r3, [r2, #4]
 800afae:	4408      	add	r0, r1
 800afb0:	6010      	str	r0, [r2, #0]
 800afb2:	e7da      	b.n	800af6a <_free_r+0x22>
 800afb4:	d902      	bls.n	800afbc <_free_r+0x74>
 800afb6:	230c      	movs	r3, #12
 800afb8:	602b      	str	r3, [r5, #0]
 800afba:	e7d6      	b.n	800af6a <_free_r+0x22>
 800afbc:	6820      	ldr	r0, [r4, #0]
 800afbe:	1821      	adds	r1, r4, r0
 800afc0:	428b      	cmp	r3, r1
 800afc2:	bf04      	itt	eq
 800afc4:	6819      	ldreq	r1, [r3, #0]
 800afc6:	685b      	ldreq	r3, [r3, #4]
 800afc8:	6063      	str	r3, [r4, #4]
 800afca:	bf04      	itt	eq
 800afcc:	1809      	addeq	r1, r1, r0
 800afce:	6021      	streq	r1, [r4, #0]
 800afd0:	6054      	str	r4, [r2, #4]
 800afd2:	e7ca      	b.n	800af6a <_free_r+0x22>
 800afd4:	bd38      	pop	{r3, r4, r5, pc}
 800afd6:	bf00      	nop
 800afd8:	20006cb0 	.word	0x20006cb0

0800afdc <malloc>:
 800afdc:	4b02      	ldr	r3, [pc, #8]	@ (800afe8 <malloc+0xc>)
 800afde:	4601      	mov	r1, r0
 800afe0:	6818      	ldr	r0, [r3, #0]
 800afe2:	f000 b825 	b.w	800b030 <_malloc_r>
 800afe6:	bf00      	nop
 800afe8:	2000001c 	.word	0x2000001c

0800afec <sbrk_aligned>:
 800afec:	b570      	push	{r4, r5, r6, lr}
 800afee:	4e0f      	ldr	r6, [pc, #60]	@ (800b02c <sbrk_aligned+0x40>)
 800aff0:	460c      	mov	r4, r1
 800aff2:	6831      	ldr	r1, [r6, #0]
 800aff4:	4605      	mov	r5, r0
 800aff6:	b911      	cbnz	r1, 800affe <sbrk_aligned+0x12>
 800aff8:	f000 fe9a 	bl	800bd30 <_sbrk_r>
 800affc:	6030      	str	r0, [r6, #0]
 800affe:	4621      	mov	r1, r4
 800b000:	4628      	mov	r0, r5
 800b002:	f000 fe95 	bl	800bd30 <_sbrk_r>
 800b006:	1c43      	adds	r3, r0, #1
 800b008:	d103      	bne.n	800b012 <sbrk_aligned+0x26>
 800b00a:	f04f 34ff 	mov.w	r4, #4294967295
 800b00e:	4620      	mov	r0, r4
 800b010:	bd70      	pop	{r4, r5, r6, pc}
 800b012:	1cc4      	adds	r4, r0, #3
 800b014:	f024 0403 	bic.w	r4, r4, #3
 800b018:	42a0      	cmp	r0, r4
 800b01a:	d0f8      	beq.n	800b00e <sbrk_aligned+0x22>
 800b01c:	1a21      	subs	r1, r4, r0
 800b01e:	4628      	mov	r0, r5
 800b020:	f000 fe86 	bl	800bd30 <_sbrk_r>
 800b024:	3001      	adds	r0, #1
 800b026:	d1f2      	bne.n	800b00e <sbrk_aligned+0x22>
 800b028:	e7ef      	b.n	800b00a <sbrk_aligned+0x1e>
 800b02a:	bf00      	nop
 800b02c:	20006cac 	.word	0x20006cac

0800b030 <_malloc_r>:
 800b030:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b034:	1ccd      	adds	r5, r1, #3
 800b036:	f025 0503 	bic.w	r5, r5, #3
 800b03a:	3508      	adds	r5, #8
 800b03c:	2d0c      	cmp	r5, #12
 800b03e:	bf38      	it	cc
 800b040:	250c      	movcc	r5, #12
 800b042:	2d00      	cmp	r5, #0
 800b044:	4606      	mov	r6, r0
 800b046:	db01      	blt.n	800b04c <_malloc_r+0x1c>
 800b048:	42a9      	cmp	r1, r5
 800b04a:	d904      	bls.n	800b056 <_malloc_r+0x26>
 800b04c:	230c      	movs	r3, #12
 800b04e:	6033      	str	r3, [r6, #0]
 800b050:	2000      	movs	r0, #0
 800b052:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b056:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b12c <_malloc_r+0xfc>
 800b05a:	f000 f869 	bl	800b130 <__malloc_lock>
 800b05e:	f8d8 3000 	ldr.w	r3, [r8]
 800b062:	461c      	mov	r4, r3
 800b064:	bb44      	cbnz	r4, 800b0b8 <_malloc_r+0x88>
 800b066:	4629      	mov	r1, r5
 800b068:	4630      	mov	r0, r6
 800b06a:	f7ff ffbf 	bl	800afec <sbrk_aligned>
 800b06e:	1c43      	adds	r3, r0, #1
 800b070:	4604      	mov	r4, r0
 800b072:	d158      	bne.n	800b126 <_malloc_r+0xf6>
 800b074:	f8d8 4000 	ldr.w	r4, [r8]
 800b078:	4627      	mov	r7, r4
 800b07a:	2f00      	cmp	r7, #0
 800b07c:	d143      	bne.n	800b106 <_malloc_r+0xd6>
 800b07e:	2c00      	cmp	r4, #0
 800b080:	d04b      	beq.n	800b11a <_malloc_r+0xea>
 800b082:	6823      	ldr	r3, [r4, #0]
 800b084:	4639      	mov	r1, r7
 800b086:	4630      	mov	r0, r6
 800b088:	eb04 0903 	add.w	r9, r4, r3
 800b08c:	f000 fe50 	bl	800bd30 <_sbrk_r>
 800b090:	4581      	cmp	r9, r0
 800b092:	d142      	bne.n	800b11a <_malloc_r+0xea>
 800b094:	6821      	ldr	r1, [r4, #0]
 800b096:	1a6d      	subs	r5, r5, r1
 800b098:	4629      	mov	r1, r5
 800b09a:	4630      	mov	r0, r6
 800b09c:	f7ff ffa6 	bl	800afec <sbrk_aligned>
 800b0a0:	3001      	adds	r0, #1
 800b0a2:	d03a      	beq.n	800b11a <_malloc_r+0xea>
 800b0a4:	6823      	ldr	r3, [r4, #0]
 800b0a6:	442b      	add	r3, r5
 800b0a8:	6023      	str	r3, [r4, #0]
 800b0aa:	f8d8 3000 	ldr.w	r3, [r8]
 800b0ae:	685a      	ldr	r2, [r3, #4]
 800b0b0:	bb62      	cbnz	r2, 800b10c <_malloc_r+0xdc>
 800b0b2:	f8c8 7000 	str.w	r7, [r8]
 800b0b6:	e00f      	b.n	800b0d8 <_malloc_r+0xa8>
 800b0b8:	6822      	ldr	r2, [r4, #0]
 800b0ba:	1b52      	subs	r2, r2, r5
 800b0bc:	d420      	bmi.n	800b100 <_malloc_r+0xd0>
 800b0be:	2a0b      	cmp	r2, #11
 800b0c0:	d917      	bls.n	800b0f2 <_malloc_r+0xc2>
 800b0c2:	1961      	adds	r1, r4, r5
 800b0c4:	42a3      	cmp	r3, r4
 800b0c6:	6025      	str	r5, [r4, #0]
 800b0c8:	bf18      	it	ne
 800b0ca:	6059      	strne	r1, [r3, #4]
 800b0cc:	6863      	ldr	r3, [r4, #4]
 800b0ce:	bf08      	it	eq
 800b0d0:	f8c8 1000 	streq.w	r1, [r8]
 800b0d4:	5162      	str	r2, [r4, r5]
 800b0d6:	604b      	str	r3, [r1, #4]
 800b0d8:	4630      	mov	r0, r6
 800b0da:	f000 f82f 	bl	800b13c <__malloc_unlock>
 800b0de:	f104 000b 	add.w	r0, r4, #11
 800b0e2:	1d23      	adds	r3, r4, #4
 800b0e4:	f020 0007 	bic.w	r0, r0, #7
 800b0e8:	1ac2      	subs	r2, r0, r3
 800b0ea:	bf1c      	itt	ne
 800b0ec:	1a1b      	subne	r3, r3, r0
 800b0ee:	50a3      	strne	r3, [r4, r2]
 800b0f0:	e7af      	b.n	800b052 <_malloc_r+0x22>
 800b0f2:	6862      	ldr	r2, [r4, #4]
 800b0f4:	42a3      	cmp	r3, r4
 800b0f6:	bf0c      	ite	eq
 800b0f8:	f8c8 2000 	streq.w	r2, [r8]
 800b0fc:	605a      	strne	r2, [r3, #4]
 800b0fe:	e7eb      	b.n	800b0d8 <_malloc_r+0xa8>
 800b100:	4623      	mov	r3, r4
 800b102:	6864      	ldr	r4, [r4, #4]
 800b104:	e7ae      	b.n	800b064 <_malloc_r+0x34>
 800b106:	463c      	mov	r4, r7
 800b108:	687f      	ldr	r7, [r7, #4]
 800b10a:	e7b6      	b.n	800b07a <_malloc_r+0x4a>
 800b10c:	461a      	mov	r2, r3
 800b10e:	685b      	ldr	r3, [r3, #4]
 800b110:	42a3      	cmp	r3, r4
 800b112:	d1fb      	bne.n	800b10c <_malloc_r+0xdc>
 800b114:	2300      	movs	r3, #0
 800b116:	6053      	str	r3, [r2, #4]
 800b118:	e7de      	b.n	800b0d8 <_malloc_r+0xa8>
 800b11a:	230c      	movs	r3, #12
 800b11c:	6033      	str	r3, [r6, #0]
 800b11e:	4630      	mov	r0, r6
 800b120:	f000 f80c 	bl	800b13c <__malloc_unlock>
 800b124:	e794      	b.n	800b050 <_malloc_r+0x20>
 800b126:	6005      	str	r5, [r0, #0]
 800b128:	e7d6      	b.n	800b0d8 <_malloc_r+0xa8>
 800b12a:	bf00      	nop
 800b12c:	20006cb0 	.word	0x20006cb0

0800b130 <__malloc_lock>:
 800b130:	4801      	ldr	r0, [pc, #4]	@ (800b138 <__malloc_lock+0x8>)
 800b132:	f7ff b8b8 	b.w	800a2a6 <__retarget_lock_acquire_recursive>
 800b136:	bf00      	nop
 800b138:	20006ca8 	.word	0x20006ca8

0800b13c <__malloc_unlock>:
 800b13c:	4801      	ldr	r0, [pc, #4]	@ (800b144 <__malloc_unlock+0x8>)
 800b13e:	f7ff b8b3 	b.w	800a2a8 <__retarget_lock_release_recursive>
 800b142:	bf00      	nop
 800b144:	20006ca8 	.word	0x20006ca8

0800b148 <_Balloc>:
 800b148:	b570      	push	{r4, r5, r6, lr}
 800b14a:	69c6      	ldr	r6, [r0, #28]
 800b14c:	4604      	mov	r4, r0
 800b14e:	460d      	mov	r5, r1
 800b150:	b976      	cbnz	r6, 800b170 <_Balloc+0x28>
 800b152:	2010      	movs	r0, #16
 800b154:	f7ff ff42 	bl	800afdc <malloc>
 800b158:	4602      	mov	r2, r0
 800b15a:	61e0      	str	r0, [r4, #28]
 800b15c:	b920      	cbnz	r0, 800b168 <_Balloc+0x20>
 800b15e:	4b18      	ldr	r3, [pc, #96]	@ (800b1c0 <_Balloc+0x78>)
 800b160:	4818      	ldr	r0, [pc, #96]	@ (800b1c4 <_Balloc+0x7c>)
 800b162:	216b      	movs	r1, #107	@ 0x6b
 800b164:	f000 fe02 	bl	800bd6c <__assert_func>
 800b168:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b16c:	6006      	str	r6, [r0, #0]
 800b16e:	60c6      	str	r6, [r0, #12]
 800b170:	69e6      	ldr	r6, [r4, #28]
 800b172:	68f3      	ldr	r3, [r6, #12]
 800b174:	b183      	cbz	r3, 800b198 <_Balloc+0x50>
 800b176:	69e3      	ldr	r3, [r4, #28]
 800b178:	68db      	ldr	r3, [r3, #12]
 800b17a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b17e:	b9b8      	cbnz	r0, 800b1b0 <_Balloc+0x68>
 800b180:	2101      	movs	r1, #1
 800b182:	fa01 f605 	lsl.w	r6, r1, r5
 800b186:	1d72      	adds	r2, r6, #5
 800b188:	0092      	lsls	r2, r2, #2
 800b18a:	4620      	mov	r0, r4
 800b18c:	f000 fe0c 	bl	800bda8 <_calloc_r>
 800b190:	b160      	cbz	r0, 800b1ac <_Balloc+0x64>
 800b192:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b196:	e00e      	b.n	800b1b6 <_Balloc+0x6e>
 800b198:	2221      	movs	r2, #33	@ 0x21
 800b19a:	2104      	movs	r1, #4
 800b19c:	4620      	mov	r0, r4
 800b19e:	f000 fe03 	bl	800bda8 <_calloc_r>
 800b1a2:	69e3      	ldr	r3, [r4, #28]
 800b1a4:	60f0      	str	r0, [r6, #12]
 800b1a6:	68db      	ldr	r3, [r3, #12]
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d1e4      	bne.n	800b176 <_Balloc+0x2e>
 800b1ac:	2000      	movs	r0, #0
 800b1ae:	bd70      	pop	{r4, r5, r6, pc}
 800b1b0:	6802      	ldr	r2, [r0, #0]
 800b1b2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b1b6:	2300      	movs	r3, #0
 800b1b8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b1bc:	e7f7      	b.n	800b1ae <_Balloc+0x66>
 800b1be:	bf00      	nop
 800b1c0:	0800c7b9 	.word	0x0800c7b9
 800b1c4:	0800c839 	.word	0x0800c839

0800b1c8 <_Bfree>:
 800b1c8:	b570      	push	{r4, r5, r6, lr}
 800b1ca:	69c6      	ldr	r6, [r0, #28]
 800b1cc:	4605      	mov	r5, r0
 800b1ce:	460c      	mov	r4, r1
 800b1d0:	b976      	cbnz	r6, 800b1f0 <_Bfree+0x28>
 800b1d2:	2010      	movs	r0, #16
 800b1d4:	f7ff ff02 	bl	800afdc <malloc>
 800b1d8:	4602      	mov	r2, r0
 800b1da:	61e8      	str	r0, [r5, #28]
 800b1dc:	b920      	cbnz	r0, 800b1e8 <_Bfree+0x20>
 800b1de:	4b09      	ldr	r3, [pc, #36]	@ (800b204 <_Bfree+0x3c>)
 800b1e0:	4809      	ldr	r0, [pc, #36]	@ (800b208 <_Bfree+0x40>)
 800b1e2:	218f      	movs	r1, #143	@ 0x8f
 800b1e4:	f000 fdc2 	bl	800bd6c <__assert_func>
 800b1e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b1ec:	6006      	str	r6, [r0, #0]
 800b1ee:	60c6      	str	r6, [r0, #12]
 800b1f0:	b13c      	cbz	r4, 800b202 <_Bfree+0x3a>
 800b1f2:	69eb      	ldr	r3, [r5, #28]
 800b1f4:	6862      	ldr	r2, [r4, #4]
 800b1f6:	68db      	ldr	r3, [r3, #12]
 800b1f8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b1fc:	6021      	str	r1, [r4, #0]
 800b1fe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b202:	bd70      	pop	{r4, r5, r6, pc}
 800b204:	0800c7b9 	.word	0x0800c7b9
 800b208:	0800c839 	.word	0x0800c839

0800b20c <__multadd>:
 800b20c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b210:	690d      	ldr	r5, [r1, #16]
 800b212:	4607      	mov	r7, r0
 800b214:	460c      	mov	r4, r1
 800b216:	461e      	mov	r6, r3
 800b218:	f101 0c14 	add.w	ip, r1, #20
 800b21c:	2000      	movs	r0, #0
 800b21e:	f8dc 3000 	ldr.w	r3, [ip]
 800b222:	b299      	uxth	r1, r3
 800b224:	fb02 6101 	mla	r1, r2, r1, r6
 800b228:	0c1e      	lsrs	r6, r3, #16
 800b22a:	0c0b      	lsrs	r3, r1, #16
 800b22c:	fb02 3306 	mla	r3, r2, r6, r3
 800b230:	b289      	uxth	r1, r1
 800b232:	3001      	adds	r0, #1
 800b234:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b238:	4285      	cmp	r5, r0
 800b23a:	f84c 1b04 	str.w	r1, [ip], #4
 800b23e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b242:	dcec      	bgt.n	800b21e <__multadd+0x12>
 800b244:	b30e      	cbz	r6, 800b28a <__multadd+0x7e>
 800b246:	68a3      	ldr	r3, [r4, #8]
 800b248:	42ab      	cmp	r3, r5
 800b24a:	dc19      	bgt.n	800b280 <__multadd+0x74>
 800b24c:	6861      	ldr	r1, [r4, #4]
 800b24e:	4638      	mov	r0, r7
 800b250:	3101      	adds	r1, #1
 800b252:	f7ff ff79 	bl	800b148 <_Balloc>
 800b256:	4680      	mov	r8, r0
 800b258:	b928      	cbnz	r0, 800b266 <__multadd+0x5a>
 800b25a:	4602      	mov	r2, r0
 800b25c:	4b0c      	ldr	r3, [pc, #48]	@ (800b290 <__multadd+0x84>)
 800b25e:	480d      	ldr	r0, [pc, #52]	@ (800b294 <__multadd+0x88>)
 800b260:	21ba      	movs	r1, #186	@ 0xba
 800b262:	f000 fd83 	bl	800bd6c <__assert_func>
 800b266:	6922      	ldr	r2, [r4, #16]
 800b268:	3202      	adds	r2, #2
 800b26a:	f104 010c 	add.w	r1, r4, #12
 800b26e:	0092      	lsls	r2, r2, #2
 800b270:	300c      	adds	r0, #12
 800b272:	f000 fd6d 	bl	800bd50 <memcpy>
 800b276:	4621      	mov	r1, r4
 800b278:	4638      	mov	r0, r7
 800b27a:	f7ff ffa5 	bl	800b1c8 <_Bfree>
 800b27e:	4644      	mov	r4, r8
 800b280:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b284:	3501      	adds	r5, #1
 800b286:	615e      	str	r6, [r3, #20]
 800b288:	6125      	str	r5, [r4, #16]
 800b28a:	4620      	mov	r0, r4
 800b28c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b290:	0800c828 	.word	0x0800c828
 800b294:	0800c839 	.word	0x0800c839

0800b298 <__hi0bits>:
 800b298:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b29c:	4603      	mov	r3, r0
 800b29e:	bf36      	itet	cc
 800b2a0:	0403      	lslcc	r3, r0, #16
 800b2a2:	2000      	movcs	r0, #0
 800b2a4:	2010      	movcc	r0, #16
 800b2a6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b2aa:	bf3c      	itt	cc
 800b2ac:	021b      	lslcc	r3, r3, #8
 800b2ae:	3008      	addcc	r0, #8
 800b2b0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b2b4:	bf3c      	itt	cc
 800b2b6:	011b      	lslcc	r3, r3, #4
 800b2b8:	3004      	addcc	r0, #4
 800b2ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b2be:	bf3c      	itt	cc
 800b2c0:	009b      	lslcc	r3, r3, #2
 800b2c2:	3002      	addcc	r0, #2
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	db05      	blt.n	800b2d4 <__hi0bits+0x3c>
 800b2c8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800b2cc:	f100 0001 	add.w	r0, r0, #1
 800b2d0:	bf08      	it	eq
 800b2d2:	2020      	moveq	r0, #32
 800b2d4:	4770      	bx	lr

0800b2d6 <__lo0bits>:
 800b2d6:	6803      	ldr	r3, [r0, #0]
 800b2d8:	4602      	mov	r2, r0
 800b2da:	f013 0007 	ands.w	r0, r3, #7
 800b2de:	d00b      	beq.n	800b2f8 <__lo0bits+0x22>
 800b2e0:	07d9      	lsls	r1, r3, #31
 800b2e2:	d421      	bmi.n	800b328 <__lo0bits+0x52>
 800b2e4:	0798      	lsls	r0, r3, #30
 800b2e6:	bf49      	itett	mi
 800b2e8:	085b      	lsrmi	r3, r3, #1
 800b2ea:	089b      	lsrpl	r3, r3, #2
 800b2ec:	2001      	movmi	r0, #1
 800b2ee:	6013      	strmi	r3, [r2, #0]
 800b2f0:	bf5c      	itt	pl
 800b2f2:	6013      	strpl	r3, [r2, #0]
 800b2f4:	2002      	movpl	r0, #2
 800b2f6:	4770      	bx	lr
 800b2f8:	b299      	uxth	r1, r3
 800b2fa:	b909      	cbnz	r1, 800b300 <__lo0bits+0x2a>
 800b2fc:	0c1b      	lsrs	r3, r3, #16
 800b2fe:	2010      	movs	r0, #16
 800b300:	b2d9      	uxtb	r1, r3
 800b302:	b909      	cbnz	r1, 800b308 <__lo0bits+0x32>
 800b304:	3008      	adds	r0, #8
 800b306:	0a1b      	lsrs	r3, r3, #8
 800b308:	0719      	lsls	r1, r3, #28
 800b30a:	bf04      	itt	eq
 800b30c:	091b      	lsreq	r3, r3, #4
 800b30e:	3004      	addeq	r0, #4
 800b310:	0799      	lsls	r1, r3, #30
 800b312:	bf04      	itt	eq
 800b314:	089b      	lsreq	r3, r3, #2
 800b316:	3002      	addeq	r0, #2
 800b318:	07d9      	lsls	r1, r3, #31
 800b31a:	d403      	bmi.n	800b324 <__lo0bits+0x4e>
 800b31c:	085b      	lsrs	r3, r3, #1
 800b31e:	f100 0001 	add.w	r0, r0, #1
 800b322:	d003      	beq.n	800b32c <__lo0bits+0x56>
 800b324:	6013      	str	r3, [r2, #0]
 800b326:	4770      	bx	lr
 800b328:	2000      	movs	r0, #0
 800b32a:	4770      	bx	lr
 800b32c:	2020      	movs	r0, #32
 800b32e:	4770      	bx	lr

0800b330 <__i2b>:
 800b330:	b510      	push	{r4, lr}
 800b332:	460c      	mov	r4, r1
 800b334:	2101      	movs	r1, #1
 800b336:	f7ff ff07 	bl	800b148 <_Balloc>
 800b33a:	4602      	mov	r2, r0
 800b33c:	b928      	cbnz	r0, 800b34a <__i2b+0x1a>
 800b33e:	4b05      	ldr	r3, [pc, #20]	@ (800b354 <__i2b+0x24>)
 800b340:	4805      	ldr	r0, [pc, #20]	@ (800b358 <__i2b+0x28>)
 800b342:	f240 1145 	movw	r1, #325	@ 0x145
 800b346:	f000 fd11 	bl	800bd6c <__assert_func>
 800b34a:	2301      	movs	r3, #1
 800b34c:	6144      	str	r4, [r0, #20]
 800b34e:	6103      	str	r3, [r0, #16]
 800b350:	bd10      	pop	{r4, pc}
 800b352:	bf00      	nop
 800b354:	0800c828 	.word	0x0800c828
 800b358:	0800c839 	.word	0x0800c839

0800b35c <__multiply>:
 800b35c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b360:	4614      	mov	r4, r2
 800b362:	690a      	ldr	r2, [r1, #16]
 800b364:	6923      	ldr	r3, [r4, #16]
 800b366:	429a      	cmp	r2, r3
 800b368:	bfa8      	it	ge
 800b36a:	4623      	movge	r3, r4
 800b36c:	460f      	mov	r7, r1
 800b36e:	bfa4      	itt	ge
 800b370:	460c      	movge	r4, r1
 800b372:	461f      	movge	r7, r3
 800b374:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800b378:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800b37c:	68a3      	ldr	r3, [r4, #8]
 800b37e:	6861      	ldr	r1, [r4, #4]
 800b380:	eb0a 0609 	add.w	r6, sl, r9
 800b384:	42b3      	cmp	r3, r6
 800b386:	b085      	sub	sp, #20
 800b388:	bfb8      	it	lt
 800b38a:	3101      	addlt	r1, #1
 800b38c:	f7ff fedc 	bl	800b148 <_Balloc>
 800b390:	b930      	cbnz	r0, 800b3a0 <__multiply+0x44>
 800b392:	4602      	mov	r2, r0
 800b394:	4b44      	ldr	r3, [pc, #272]	@ (800b4a8 <__multiply+0x14c>)
 800b396:	4845      	ldr	r0, [pc, #276]	@ (800b4ac <__multiply+0x150>)
 800b398:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800b39c:	f000 fce6 	bl	800bd6c <__assert_func>
 800b3a0:	f100 0514 	add.w	r5, r0, #20
 800b3a4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b3a8:	462b      	mov	r3, r5
 800b3aa:	2200      	movs	r2, #0
 800b3ac:	4543      	cmp	r3, r8
 800b3ae:	d321      	bcc.n	800b3f4 <__multiply+0x98>
 800b3b0:	f107 0114 	add.w	r1, r7, #20
 800b3b4:	f104 0214 	add.w	r2, r4, #20
 800b3b8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800b3bc:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800b3c0:	9302      	str	r3, [sp, #8]
 800b3c2:	1b13      	subs	r3, r2, r4
 800b3c4:	3b15      	subs	r3, #21
 800b3c6:	f023 0303 	bic.w	r3, r3, #3
 800b3ca:	3304      	adds	r3, #4
 800b3cc:	f104 0715 	add.w	r7, r4, #21
 800b3d0:	42ba      	cmp	r2, r7
 800b3d2:	bf38      	it	cc
 800b3d4:	2304      	movcc	r3, #4
 800b3d6:	9301      	str	r3, [sp, #4]
 800b3d8:	9b02      	ldr	r3, [sp, #8]
 800b3da:	9103      	str	r1, [sp, #12]
 800b3dc:	428b      	cmp	r3, r1
 800b3de:	d80c      	bhi.n	800b3fa <__multiply+0x9e>
 800b3e0:	2e00      	cmp	r6, #0
 800b3e2:	dd03      	ble.n	800b3ec <__multiply+0x90>
 800b3e4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d05b      	beq.n	800b4a4 <__multiply+0x148>
 800b3ec:	6106      	str	r6, [r0, #16]
 800b3ee:	b005      	add	sp, #20
 800b3f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3f4:	f843 2b04 	str.w	r2, [r3], #4
 800b3f8:	e7d8      	b.n	800b3ac <__multiply+0x50>
 800b3fa:	f8b1 a000 	ldrh.w	sl, [r1]
 800b3fe:	f1ba 0f00 	cmp.w	sl, #0
 800b402:	d024      	beq.n	800b44e <__multiply+0xf2>
 800b404:	f104 0e14 	add.w	lr, r4, #20
 800b408:	46a9      	mov	r9, r5
 800b40a:	f04f 0c00 	mov.w	ip, #0
 800b40e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b412:	f8d9 3000 	ldr.w	r3, [r9]
 800b416:	fa1f fb87 	uxth.w	fp, r7
 800b41a:	b29b      	uxth	r3, r3
 800b41c:	fb0a 330b 	mla	r3, sl, fp, r3
 800b420:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800b424:	f8d9 7000 	ldr.w	r7, [r9]
 800b428:	4463      	add	r3, ip
 800b42a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b42e:	fb0a c70b 	mla	r7, sl, fp, ip
 800b432:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800b436:	b29b      	uxth	r3, r3
 800b438:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b43c:	4572      	cmp	r2, lr
 800b43e:	f849 3b04 	str.w	r3, [r9], #4
 800b442:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b446:	d8e2      	bhi.n	800b40e <__multiply+0xb2>
 800b448:	9b01      	ldr	r3, [sp, #4]
 800b44a:	f845 c003 	str.w	ip, [r5, r3]
 800b44e:	9b03      	ldr	r3, [sp, #12]
 800b450:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800b454:	3104      	adds	r1, #4
 800b456:	f1b9 0f00 	cmp.w	r9, #0
 800b45a:	d021      	beq.n	800b4a0 <__multiply+0x144>
 800b45c:	682b      	ldr	r3, [r5, #0]
 800b45e:	f104 0c14 	add.w	ip, r4, #20
 800b462:	46ae      	mov	lr, r5
 800b464:	f04f 0a00 	mov.w	sl, #0
 800b468:	f8bc b000 	ldrh.w	fp, [ip]
 800b46c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800b470:	fb09 770b 	mla	r7, r9, fp, r7
 800b474:	4457      	add	r7, sl
 800b476:	b29b      	uxth	r3, r3
 800b478:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b47c:	f84e 3b04 	str.w	r3, [lr], #4
 800b480:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b484:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b488:	f8be 3000 	ldrh.w	r3, [lr]
 800b48c:	fb09 330a 	mla	r3, r9, sl, r3
 800b490:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800b494:	4562      	cmp	r2, ip
 800b496:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b49a:	d8e5      	bhi.n	800b468 <__multiply+0x10c>
 800b49c:	9f01      	ldr	r7, [sp, #4]
 800b49e:	51eb      	str	r3, [r5, r7]
 800b4a0:	3504      	adds	r5, #4
 800b4a2:	e799      	b.n	800b3d8 <__multiply+0x7c>
 800b4a4:	3e01      	subs	r6, #1
 800b4a6:	e79b      	b.n	800b3e0 <__multiply+0x84>
 800b4a8:	0800c828 	.word	0x0800c828
 800b4ac:	0800c839 	.word	0x0800c839

0800b4b0 <__pow5mult>:
 800b4b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b4b4:	4615      	mov	r5, r2
 800b4b6:	f012 0203 	ands.w	r2, r2, #3
 800b4ba:	4607      	mov	r7, r0
 800b4bc:	460e      	mov	r6, r1
 800b4be:	d007      	beq.n	800b4d0 <__pow5mult+0x20>
 800b4c0:	4c25      	ldr	r4, [pc, #148]	@ (800b558 <__pow5mult+0xa8>)
 800b4c2:	3a01      	subs	r2, #1
 800b4c4:	2300      	movs	r3, #0
 800b4c6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b4ca:	f7ff fe9f 	bl	800b20c <__multadd>
 800b4ce:	4606      	mov	r6, r0
 800b4d0:	10ad      	asrs	r5, r5, #2
 800b4d2:	d03d      	beq.n	800b550 <__pow5mult+0xa0>
 800b4d4:	69fc      	ldr	r4, [r7, #28]
 800b4d6:	b97c      	cbnz	r4, 800b4f8 <__pow5mult+0x48>
 800b4d8:	2010      	movs	r0, #16
 800b4da:	f7ff fd7f 	bl	800afdc <malloc>
 800b4de:	4602      	mov	r2, r0
 800b4e0:	61f8      	str	r0, [r7, #28]
 800b4e2:	b928      	cbnz	r0, 800b4f0 <__pow5mult+0x40>
 800b4e4:	4b1d      	ldr	r3, [pc, #116]	@ (800b55c <__pow5mult+0xac>)
 800b4e6:	481e      	ldr	r0, [pc, #120]	@ (800b560 <__pow5mult+0xb0>)
 800b4e8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800b4ec:	f000 fc3e 	bl	800bd6c <__assert_func>
 800b4f0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b4f4:	6004      	str	r4, [r0, #0]
 800b4f6:	60c4      	str	r4, [r0, #12]
 800b4f8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800b4fc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b500:	b94c      	cbnz	r4, 800b516 <__pow5mult+0x66>
 800b502:	f240 2171 	movw	r1, #625	@ 0x271
 800b506:	4638      	mov	r0, r7
 800b508:	f7ff ff12 	bl	800b330 <__i2b>
 800b50c:	2300      	movs	r3, #0
 800b50e:	f8c8 0008 	str.w	r0, [r8, #8]
 800b512:	4604      	mov	r4, r0
 800b514:	6003      	str	r3, [r0, #0]
 800b516:	f04f 0900 	mov.w	r9, #0
 800b51a:	07eb      	lsls	r3, r5, #31
 800b51c:	d50a      	bpl.n	800b534 <__pow5mult+0x84>
 800b51e:	4631      	mov	r1, r6
 800b520:	4622      	mov	r2, r4
 800b522:	4638      	mov	r0, r7
 800b524:	f7ff ff1a 	bl	800b35c <__multiply>
 800b528:	4631      	mov	r1, r6
 800b52a:	4680      	mov	r8, r0
 800b52c:	4638      	mov	r0, r7
 800b52e:	f7ff fe4b 	bl	800b1c8 <_Bfree>
 800b532:	4646      	mov	r6, r8
 800b534:	106d      	asrs	r5, r5, #1
 800b536:	d00b      	beq.n	800b550 <__pow5mult+0xa0>
 800b538:	6820      	ldr	r0, [r4, #0]
 800b53a:	b938      	cbnz	r0, 800b54c <__pow5mult+0x9c>
 800b53c:	4622      	mov	r2, r4
 800b53e:	4621      	mov	r1, r4
 800b540:	4638      	mov	r0, r7
 800b542:	f7ff ff0b 	bl	800b35c <__multiply>
 800b546:	6020      	str	r0, [r4, #0]
 800b548:	f8c0 9000 	str.w	r9, [r0]
 800b54c:	4604      	mov	r4, r0
 800b54e:	e7e4      	b.n	800b51a <__pow5mult+0x6a>
 800b550:	4630      	mov	r0, r6
 800b552:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b556:	bf00      	nop
 800b558:	0800c894 	.word	0x0800c894
 800b55c:	0800c7b9 	.word	0x0800c7b9
 800b560:	0800c839 	.word	0x0800c839

0800b564 <__lshift>:
 800b564:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b568:	460c      	mov	r4, r1
 800b56a:	6849      	ldr	r1, [r1, #4]
 800b56c:	6923      	ldr	r3, [r4, #16]
 800b56e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b572:	68a3      	ldr	r3, [r4, #8]
 800b574:	4607      	mov	r7, r0
 800b576:	4691      	mov	r9, r2
 800b578:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b57c:	f108 0601 	add.w	r6, r8, #1
 800b580:	42b3      	cmp	r3, r6
 800b582:	db0b      	blt.n	800b59c <__lshift+0x38>
 800b584:	4638      	mov	r0, r7
 800b586:	f7ff fddf 	bl	800b148 <_Balloc>
 800b58a:	4605      	mov	r5, r0
 800b58c:	b948      	cbnz	r0, 800b5a2 <__lshift+0x3e>
 800b58e:	4602      	mov	r2, r0
 800b590:	4b28      	ldr	r3, [pc, #160]	@ (800b634 <__lshift+0xd0>)
 800b592:	4829      	ldr	r0, [pc, #164]	@ (800b638 <__lshift+0xd4>)
 800b594:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800b598:	f000 fbe8 	bl	800bd6c <__assert_func>
 800b59c:	3101      	adds	r1, #1
 800b59e:	005b      	lsls	r3, r3, #1
 800b5a0:	e7ee      	b.n	800b580 <__lshift+0x1c>
 800b5a2:	2300      	movs	r3, #0
 800b5a4:	f100 0114 	add.w	r1, r0, #20
 800b5a8:	f100 0210 	add.w	r2, r0, #16
 800b5ac:	4618      	mov	r0, r3
 800b5ae:	4553      	cmp	r3, sl
 800b5b0:	db33      	blt.n	800b61a <__lshift+0xb6>
 800b5b2:	6920      	ldr	r0, [r4, #16]
 800b5b4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b5b8:	f104 0314 	add.w	r3, r4, #20
 800b5bc:	f019 091f 	ands.w	r9, r9, #31
 800b5c0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b5c4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b5c8:	d02b      	beq.n	800b622 <__lshift+0xbe>
 800b5ca:	f1c9 0e20 	rsb	lr, r9, #32
 800b5ce:	468a      	mov	sl, r1
 800b5d0:	2200      	movs	r2, #0
 800b5d2:	6818      	ldr	r0, [r3, #0]
 800b5d4:	fa00 f009 	lsl.w	r0, r0, r9
 800b5d8:	4310      	orrs	r0, r2
 800b5da:	f84a 0b04 	str.w	r0, [sl], #4
 800b5de:	f853 2b04 	ldr.w	r2, [r3], #4
 800b5e2:	459c      	cmp	ip, r3
 800b5e4:	fa22 f20e 	lsr.w	r2, r2, lr
 800b5e8:	d8f3      	bhi.n	800b5d2 <__lshift+0x6e>
 800b5ea:	ebac 0304 	sub.w	r3, ip, r4
 800b5ee:	3b15      	subs	r3, #21
 800b5f0:	f023 0303 	bic.w	r3, r3, #3
 800b5f4:	3304      	adds	r3, #4
 800b5f6:	f104 0015 	add.w	r0, r4, #21
 800b5fa:	4584      	cmp	ip, r0
 800b5fc:	bf38      	it	cc
 800b5fe:	2304      	movcc	r3, #4
 800b600:	50ca      	str	r2, [r1, r3]
 800b602:	b10a      	cbz	r2, 800b608 <__lshift+0xa4>
 800b604:	f108 0602 	add.w	r6, r8, #2
 800b608:	3e01      	subs	r6, #1
 800b60a:	4638      	mov	r0, r7
 800b60c:	612e      	str	r6, [r5, #16]
 800b60e:	4621      	mov	r1, r4
 800b610:	f7ff fdda 	bl	800b1c8 <_Bfree>
 800b614:	4628      	mov	r0, r5
 800b616:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b61a:	f842 0f04 	str.w	r0, [r2, #4]!
 800b61e:	3301      	adds	r3, #1
 800b620:	e7c5      	b.n	800b5ae <__lshift+0x4a>
 800b622:	3904      	subs	r1, #4
 800b624:	f853 2b04 	ldr.w	r2, [r3], #4
 800b628:	f841 2f04 	str.w	r2, [r1, #4]!
 800b62c:	459c      	cmp	ip, r3
 800b62e:	d8f9      	bhi.n	800b624 <__lshift+0xc0>
 800b630:	e7ea      	b.n	800b608 <__lshift+0xa4>
 800b632:	bf00      	nop
 800b634:	0800c828 	.word	0x0800c828
 800b638:	0800c839 	.word	0x0800c839

0800b63c <__mcmp>:
 800b63c:	690a      	ldr	r2, [r1, #16]
 800b63e:	4603      	mov	r3, r0
 800b640:	6900      	ldr	r0, [r0, #16]
 800b642:	1a80      	subs	r0, r0, r2
 800b644:	b530      	push	{r4, r5, lr}
 800b646:	d10e      	bne.n	800b666 <__mcmp+0x2a>
 800b648:	3314      	adds	r3, #20
 800b64a:	3114      	adds	r1, #20
 800b64c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b650:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b654:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b658:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b65c:	4295      	cmp	r5, r2
 800b65e:	d003      	beq.n	800b668 <__mcmp+0x2c>
 800b660:	d205      	bcs.n	800b66e <__mcmp+0x32>
 800b662:	f04f 30ff 	mov.w	r0, #4294967295
 800b666:	bd30      	pop	{r4, r5, pc}
 800b668:	42a3      	cmp	r3, r4
 800b66a:	d3f3      	bcc.n	800b654 <__mcmp+0x18>
 800b66c:	e7fb      	b.n	800b666 <__mcmp+0x2a>
 800b66e:	2001      	movs	r0, #1
 800b670:	e7f9      	b.n	800b666 <__mcmp+0x2a>
	...

0800b674 <__mdiff>:
 800b674:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b678:	4689      	mov	r9, r1
 800b67a:	4606      	mov	r6, r0
 800b67c:	4611      	mov	r1, r2
 800b67e:	4648      	mov	r0, r9
 800b680:	4614      	mov	r4, r2
 800b682:	f7ff ffdb 	bl	800b63c <__mcmp>
 800b686:	1e05      	subs	r5, r0, #0
 800b688:	d112      	bne.n	800b6b0 <__mdiff+0x3c>
 800b68a:	4629      	mov	r1, r5
 800b68c:	4630      	mov	r0, r6
 800b68e:	f7ff fd5b 	bl	800b148 <_Balloc>
 800b692:	4602      	mov	r2, r0
 800b694:	b928      	cbnz	r0, 800b6a2 <__mdiff+0x2e>
 800b696:	4b3f      	ldr	r3, [pc, #252]	@ (800b794 <__mdiff+0x120>)
 800b698:	f240 2137 	movw	r1, #567	@ 0x237
 800b69c:	483e      	ldr	r0, [pc, #248]	@ (800b798 <__mdiff+0x124>)
 800b69e:	f000 fb65 	bl	800bd6c <__assert_func>
 800b6a2:	2301      	movs	r3, #1
 800b6a4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b6a8:	4610      	mov	r0, r2
 800b6aa:	b003      	add	sp, #12
 800b6ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6b0:	bfbc      	itt	lt
 800b6b2:	464b      	movlt	r3, r9
 800b6b4:	46a1      	movlt	r9, r4
 800b6b6:	4630      	mov	r0, r6
 800b6b8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b6bc:	bfba      	itte	lt
 800b6be:	461c      	movlt	r4, r3
 800b6c0:	2501      	movlt	r5, #1
 800b6c2:	2500      	movge	r5, #0
 800b6c4:	f7ff fd40 	bl	800b148 <_Balloc>
 800b6c8:	4602      	mov	r2, r0
 800b6ca:	b918      	cbnz	r0, 800b6d4 <__mdiff+0x60>
 800b6cc:	4b31      	ldr	r3, [pc, #196]	@ (800b794 <__mdiff+0x120>)
 800b6ce:	f240 2145 	movw	r1, #581	@ 0x245
 800b6d2:	e7e3      	b.n	800b69c <__mdiff+0x28>
 800b6d4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800b6d8:	6926      	ldr	r6, [r4, #16]
 800b6da:	60c5      	str	r5, [r0, #12]
 800b6dc:	f109 0310 	add.w	r3, r9, #16
 800b6e0:	f109 0514 	add.w	r5, r9, #20
 800b6e4:	f104 0e14 	add.w	lr, r4, #20
 800b6e8:	f100 0b14 	add.w	fp, r0, #20
 800b6ec:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800b6f0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800b6f4:	9301      	str	r3, [sp, #4]
 800b6f6:	46d9      	mov	r9, fp
 800b6f8:	f04f 0c00 	mov.w	ip, #0
 800b6fc:	9b01      	ldr	r3, [sp, #4]
 800b6fe:	f85e 0b04 	ldr.w	r0, [lr], #4
 800b702:	f853 af04 	ldr.w	sl, [r3, #4]!
 800b706:	9301      	str	r3, [sp, #4]
 800b708:	fa1f f38a 	uxth.w	r3, sl
 800b70c:	4619      	mov	r1, r3
 800b70e:	b283      	uxth	r3, r0
 800b710:	1acb      	subs	r3, r1, r3
 800b712:	0c00      	lsrs	r0, r0, #16
 800b714:	4463      	add	r3, ip
 800b716:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800b71a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800b71e:	b29b      	uxth	r3, r3
 800b720:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b724:	4576      	cmp	r6, lr
 800b726:	f849 3b04 	str.w	r3, [r9], #4
 800b72a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b72e:	d8e5      	bhi.n	800b6fc <__mdiff+0x88>
 800b730:	1b33      	subs	r3, r6, r4
 800b732:	3b15      	subs	r3, #21
 800b734:	f023 0303 	bic.w	r3, r3, #3
 800b738:	3415      	adds	r4, #21
 800b73a:	3304      	adds	r3, #4
 800b73c:	42a6      	cmp	r6, r4
 800b73e:	bf38      	it	cc
 800b740:	2304      	movcc	r3, #4
 800b742:	441d      	add	r5, r3
 800b744:	445b      	add	r3, fp
 800b746:	461e      	mov	r6, r3
 800b748:	462c      	mov	r4, r5
 800b74a:	4544      	cmp	r4, r8
 800b74c:	d30e      	bcc.n	800b76c <__mdiff+0xf8>
 800b74e:	f108 0103 	add.w	r1, r8, #3
 800b752:	1b49      	subs	r1, r1, r5
 800b754:	f021 0103 	bic.w	r1, r1, #3
 800b758:	3d03      	subs	r5, #3
 800b75a:	45a8      	cmp	r8, r5
 800b75c:	bf38      	it	cc
 800b75e:	2100      	movcc	r1, #0
 800b760:	440b      	add	r3, r1
 800b762:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b766:	b191      	cbz	r1, 800b78e <__mdiff+0x11a>
 800b768:	6117      	str	r7, [r2, #16]
 800b76a:	e79d      	b.n	800b6a8 <__mdiff+0x34>
 800b76c:	f854 1b04 	ldr.w	r1, [r4], #4
 800b770:	46e6      	mov	lr, ip
 800b772:	0c08      	lsrs	r0, r1, #16
 800b774:	fa1c fc81 	uxtah	ip, ip, r1
 800b778:	4471      	add	r1, lr
 800b77a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800b77e:	b289      	uxth	r1, r1
 800b780:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b784:	f846 1b04 	str.w	r1, [r6], #4
 800b788:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b78c:	e7dd      	b.n	800b74a <__mdiff+0xd6>
 800b78e:	3f01      	subs	r7, #1
 800b790:	e7e7      	b.n	800b762 <__mdiff+0xee>
 800b792:	bf00      	nop
 800b794:	0800c828 	.word	0x0800c828
 800b798:	0800c839 	.word	0x0800c839

0800b79c <__d2b>:
 800b79c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b7a0:	460f      	mov	r7, r1
 800b7a2:	2101      	movs	r1, #1
 800b7a4:	ec59 8b10 	vmov	r8, r9, d0
 800b7a8:	4616      	mov	r6, r2
 800b7aa:	f7ff fccd 	bl	800b148 <_Balloc>
 800b7ae:	4604      	mov	r4, r0
 800b7b0:	b930      	cbnz	r0, 800b7c0 <__d2b+0x24>
 800b7b2:	4602      	mov	r2, r0
 800b7b4:	4b23      	ldr	r3, [pc, #140]	@ (800b844 <__d2b+0xa8>)
 800b7b6:	4824      	ldr	r0, [pc, #144]	@ (800b848 <__d2b+0xac>)
 800b7b8:	f240 310f 	movw	r1, #783	@ 0x30f
 800b7bc:	f000 fad6 	bl	800bd6c <__assert_func>
 800b7c0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b7c4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b7c8:	b10d      	cbz	r5, 800b7ce <__d2b+0x32>
 800b7ca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b7ce:	9301      	str	r3, [sp, #4]
 800b7d0:	f1b8 0300 	subs.w	r3, r8, #0
 800b7d4:	d023      	beq.n	800b81e <__d2b+0x82>
 800b7d6:	4668      	mov	r0, sp
 800b7d8:	9300      	str	r3, [sp, #0]
 800b7da:	f7ff fd7c 	bl	800b2d6 <__lo0bits>
 800b7de:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b7e2:	b1d0      	cbz	r0, 800b81a <__d2b+0x7e>
 800b7e4:	f1c0 0320 	rsb	r3, r0, #32
 800b7e8:	fa02 f303 	lsl.w	r3, r2, r3
 800b7ec:	430b      	orrs	r3, r1
 800b7ee:	40c2      	lsrs	r2, r0
 800b7f0:	6163      	str	r3, [r4, #20]
 800b7f2:	9201      	str	r2, [sp, #4]
 800b7f4:	9b01      	ldr	r3, [sp, #4]
 800b7f6:	61a3      	str	r3, [r4, #24]
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	bf0c      	ite	eq
 800b7fc:	2201      	moveq	r2, #1
 800b7fe:	2202      	movne	r2, #2
 800b800:	6122      	str	r2, [r4, #16]
 800b802:	b1a5      	cbz	r5, 800b82e <__d2b+0x92>
 800b804:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800b808:	4405      	add	r5, r0
 800b80a:	603d      	str	r5, [r7, #0]
 800b80c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800b810:	6030      	str	r0, [r6, #0]
 800b812:	4620      	mov	r0, r4
 800b814:	b003      	add	sp, #12
 800b816:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b81a:	6161      	str	r1, [r4, #20]
 800b81c:	e7ea      	b.n	800b7f4 <__d2b+0x58>
 800b81e:	a801      	add	r0, sp, #4
 800b820:	f7ff fd59 	bl	800b2d6 <__lo0bits>
 800b824:	9b01      	ldr	r3, [sp, #4]
 800b826:	6163      	str	r3, [r4, #20]
 800b828:	3020      	adds	r0, #32
 800b82a:	2201      	movs	r2, #1
 800b82c:	e7e8      	b.n	800b800 <__d2b+0x64>
 800b82e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b832:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800b836:	6038      	str	r0, [r7, #0]
 800b838:	6918      	ldr	r0, [r3, #16]
 800b83a:	f7ff fd2d 	bl	800b298 <__hi0bits>
 800b83e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b842:	e7e5      	b.n	800b810 <__d2b+0x74>
 800b844:	0800c828 	.word	0x0800c828
 800b848:	0800c839 	.word	0x0800c839

0800b84c <__sfputc_r>:
 800b84c:	6893      	ldr	r3, [r2, #8]
 800b84e:	3b01      	subs	r3, #1
 800b850:	2b00      	cmp	r3, #0
 800b852:	b410      	push	{r4}
 800b854:	6093      	str	r3, [r2, #8]
 800b856:	da08      	bge.n	800b86a <__sfputc_r+0x1e>
 800b858:	6994      	ldr	r4, [r2, #24]
 800b85a:	42a3      	cmp	r3, r4
 800b85c:	db01      	blt.n	800b862 <__sfputc_r+0x16>
 800b85e:	290a      	cmp	r1, #10
 800b860:	d103      	bne.n	800b86a <__sfputc_r+0x1e>
 800b862:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b866:	f7fe bc0c 	b.w	800a082 <__swbuf_r>
 800b86a:	6813      	ldr	r3, [r2, #0]
 800b86c:	1c58      	adds	r0, r3, #1
 800b86e:	6010      	str	r0, [r2, #0]
 800b870:	7019      	strb	r1, [r3, #0]
 800b872:	4608      	mov	r0, r1
 800b874:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b878:	4770      	bx	lr

0800b87a <__sfputs_r>:
 800b87a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b87c:	4606      	mov	r6, r0
 800b87e:	460f      	mov	r7, r1
 800b880:	4614      	mov	r4, r2
 800b882:	18d5      	adds	r5, r2, r3
 800b884:	42ac      	cmp	r4, r5
 800b886:	d101      	bne.n	800b88c <__sfputs_r+0x12>
 800b888:	2000      	movs	r0, #0
 800b88a:	e007      	b.n	800b89c <__sfputs_r+0x22>
 800b88c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b890:	463a      	mov	r2, r7
 800b892:	4630      	mov	r0, r6
 800b894:	f7ff ffda 	bl	800b84c <__sfputc_r>
 800b898:	1c43      	adds	r3, r0, #1
 800b89a:	d1f3      	bne.n	800b884 <__sfputs_r+0xa>
 800b89c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b8a0 <_vfiprintf_r>:
 800b8a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8a4:	460d      	mov	r5, r1
 800b8a6:	b09d      	sub	sp, #116	@ 0x74
 800b8a8:	4614      	mov	r4, r2
 800b8aa:	4698      	mov	r8, r3
 800b8ac:	4606      	mov	r6, r0
 800b8ae:	b118      	cbz	r0, 800b8b8 <_vfiprintf_r+0x18>
 800b8b0:	6a03      	ldr	r3, [r0, #32]
 800b8b2:	b90b      	cbnz	r3, 800b8b8 <_vfiprintf_r+0x18>
 800b8b4:	f7fe fa48 	bl	8009d48 <__sinit>
 800b8b8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b8ba:	07d9      	lsls	r1, r3, #31
 800b8bc:	d405      	bmi.n	800b8ca <_vfiprintf_r+0x2a>
 800b8be:	89ab      	ldrh	r3, [r5, #12]
 800b8c0:	059a      	lsls	r2, r3, #22
 800b8c2:	d402      	bmi.n	800b8ca <_vfiprintf_r+0x2a>
 800b8c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b8c6:	f7fe fcee 	bl	800a2a6 <__retarget_lock_acquire_recursive>
 800b8ca:	89ab      	ldrh	r3, [r5, #12]
 800b8cc:	071b      	lsls	r3, r3, #28
 800b8ce:	d501      	bpl.n	800b8d4 <_vfiprintf_r+0x34>
 800b8d0:	692b      	ldr	r3, [r5, #16]
 800b8d2:	b99b      	cbnz	r3, 800b8fc <_vfiprintf_r+0x5c>
 800b8d4:	4629      	mov	r1, r5
 800b8d6:	4630      	mov	r0, r6
 800b8d8:	f7fe fc12 	bl	800a100 <__swsetup_r>
 800b8dc:	b170      	cbz	r0, 800b8fc <_vfiprintf_r+0x5c>
 800b8de:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b8e0:	07dc      	lsls	r4, r3, #31
 800b8e2:	d504      	bpl.n	800b8ee <_vfiprintf_r+0x4e>
 800b8e4:	f04f 30ff 	mov.w	r0, #4294967295
 800b8e8:	b01d      	add	sp, #116	@ 0x74
 800b8ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8ee:	89ab      	ldrh	r3, [r5, #12]
 800b8f0:	0598      	lsls	r0, r3, #22
 800b8f2:	d4f7      	bmi.n	800b8e4 <_vfiprintf_r+0x44>
 800b8f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b8f6:	f7fe fcd7 	bl	800a2a8 <__retarget_lock_release_recursive>
 800b8fa:	e7f3      	b.n	800b8e4 <_vfiprintf_r+0x44>
 800b8fc:	2300      	movs	r3, #0
 800b8fe:	9309      	str	r3, [sp, #36]	@ 0x24
 800b900:	2320      	movs	r3, #32
 800b902:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b906:	f8cd 800c 	str.w	r8, [sp, #12]
 800b90a:	2330      	movs	r3, #48	@ 0x30
 800b90c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800babc <_vfiprintf_r+0x21c>
 800b910:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b914:	f04f 0901 	mov.w	r9, #1
 800b918:	4623      	mov	r3, r4
 800b91a:	469a      	mov	sl, r3
 800b91c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b920:	b10a      	cbz	r2, 800b926 <_vfiprintf_r+0x86>
 800b922:	2a25      	cmp	r2, #37	@ 0x25
 800b924:	d1f9      	bne.n	800b91a <_vfiprintf_r+0x7a>
 800b926:	ebba 0b04 	subs.w	fp, sl, r4
 800b92a:	d00b      	beq.n	800b944 <_vfiprintf_r+0xa4>
 800b92c:	465b      	mov	r3, fp
 800b92e:	4622      	mov	r2, r4
 800b930:	4629      	mov	r1, r5
 800b932:	4630      	mov	r0, r6
 800b934:	f7ff ffa1 	bl	800b87a <__sfputs_r>
 800b938:	3001      	adds	r0, #1
 800b93a:	f000 80a7 	beq.w	800ba8c <_vfiprintf_r+0x1ec>
 800b93e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b940:	445a      	add	r2, fp
 800b942:	9209      	str	r2, [sp, #36]	@ 0x24
 800b944:	f89a 3000 	ldrb.w	r3, [sl]
 800b948:	2b00      	cmp	r3, #0
 800b94a:	f000 809f 	beq.w	800ba8c <_vfiprintf_r+0x1ec>
 800b94e:	2300      	movs	r3, #0
 800b950:	f04f 32ff 	mov.w	r2, #4294967295
 800b954:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b958:	f10a 0a01 	add.w	sl, sl, #1
 800b95c:	9304      	str	r3, [sp, #16]
 800b95e:	9307      	str	r3, [sp, #28]
 800b960:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b964:	931a      	str	r3, [sp, #104]	@ 0x68
 800b966:	4654      	mov	r4, sl
 800b968:	2205      	movs	r2, #5
 800b96a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b96e:	4853      	ldr	r0, [pc, #332]	@ (800babc <_vfiprintf_r+0x21c>)
 800b970:	f7f4 fcde 	bl	8000330 <memchr>
 800b974:	9a04      	ldr	r2, [sp, #16]
 800b976:	b9d8      	cbnz	r0, 800b9b0 <_vfiprintf_r+0x110>
 800b978:	06d1      	lsls	r1, r2, #27
 800b97a:	bf44      	itt	mi
 800b97c:	2320      	movmi	r3, #32
 800b97e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b982:	0713      	lsls	r3, r2, #28
 800b984:	bf44      	itt	mi
 800b986:	232b      	movmi	r3, #43	@ 0x2b
 800b988:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b98c:	f89a 3000 	ldrb.w	r3, [sl]
 800b990:	2b2a      	cmp	r3, #42	@ 0x2a
 800b992:	d015      	beq.n	800b9c0 <_vfiprintf_r+0x120>
 800b994:	9a07      	ldr	r2, [sp, #28]
 800b996:	4654      	mov	r4, sl
 800b998:	2000      	movs	r0, #0
 800b99a:	f04f 0c0a 	mov.w	ip, #10
 800b99e:	4621      	mov	r1, r4
 800b9a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b9a4:	3b30      	subs	r3, #48	@ 0x30
 800b9a6:	2b09      	cmp	r3, #9
 800b9a8:	d94b      	bls.n	800ba42 <_vfiprintf_r+0x1a2>
 800b9aa:	b1b0      	cbz	r0, 800b9da <_vfiprintf_r+0x13a>
 800b9ac:	9207      	str	r2, [sp, #28]
 800b9ae:	e014      	b.n	800b9da <_vfiprintf_r+0x13a>
 800b9b0:	eba0 0308 	sub.w	r3, r0, r8
 800b9b4:	fa09 f303 	lsl.w	r3, r9, r3
 800b9b8:	4313      	orrs	r3, r2
 800b9ba:	9304      	str	r3, [sp, #16]
 800b9bc:	46a2      	mov	sl, r4
 800b9be:	e7d2      	b.n	800b966 <_vfiprintf_r+0xc6>
 800b9c0:	9b03      	ldr	r3, [sp, #12]
 800b9c2:	1d19      	adds	r1, r3, #4
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	9103      	str	r1, [sp, #12]
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	bfbb      	ittet	lt
 800b9cc:	425b      	neglt	r3, r3
 800b9ce:	f042 0202 	orrlt.w	r2, r2, #2
 800b9d2:	9307      	strge	r3, [sp, #28]
 800b9d4:	9307      	strlt	r3, [sp, #28]
 800b9d6:	bfb8      	it	lt
 800b9d8:	9204      	strlt	r2, [sp, #16]
 800b9da:	7823      	ldrb	r3, [r4, #0]
 800b9dc:	2b2e      	cmp	r3, #46	@ 0x2e
 800b9de:	d10a      	bne.n	800b9f6 <_vfiprintf_r+0x156>
 800b9e0:	7863      	ldrb	r3, [r4, #1]
 800b9e2:	2b2a      	cmp	r3, #42	@ 0x2a
 800b9e4:	d132      	bne.n	800ba4c <_vfiprintf_r+0x1ac>
 800b9e6:	9b03      	ldr	r3, [sp, #12]
 800b9e8:	1d1a      	adds	r2, r3, #4
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	9203      	str	r2, [sp, #12]
 800b9ee:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b9f2:	3402      	adds	r4, #2
 800b9f4:	9305      	str	r3, [sp, #20]
 800b9f6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800bacc <_vfiprintf_r+0x22c>
 800b9fa:	7821      	ldrb	r1, [r4, #0]
 800b9fc:	2203      	movs	r2, #3
 800b9fe:	4650      	mov	r0, sl
 800ba00:	f7f4 fc96 	bl	8000330 <memchr>
 800ba04:	b138      	cbz	r0, 800ba16 <_vfiprintf_r+0x176>
 800ba06:	9b04      	ldr	r3, [sp, #16]
 800ba08:	eba0 000a 	sub.w	r0, r0, sl
 800ba0c:	2240      	movs	r2, #64	@ 0x40
 800ba0e:	4082      	lsls	r2, r0
 800ba10:	4313      	orrs	r3, r2
 800ba12:	3401      	adds	r4, #1
 800ba14:	9304      	str	r3, [sp, #16]
 800ba16:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba1a:	4829      	ldr	r0, [pc, #164]	@ (800bac0 <_vfiprintf_r+0x220>)
 800ba1c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ba20:	2206      	movs	r2, #6
 800ba22:	f7f4 fc85 	bl	8000330 <memchr>
 800ba26:	2800      	cmp	r0, #0
 800ba28:	d03f      	beq.n	800baaa <_vfiprintf_r+0x20a>
 800ba2a:	4b26      	ldr	r3, [pc, #152]	@ (800bac4 <_vfiprintf_r+0x224>)
 800ba2c:	bb1b      	cbnz	r3, 800ba76 <_vfiprintf_r+0x1d6>
 800ba2e:	9b03      	ldr	r3, [sp, #12]
 800ba30:	3307      	adds	r3, #7
 800ba32:	f023 0307 	bic.w	r3, r3, #7
 800ba36:	3308      	adds	r3, #8
 800ba38:	9303      	str	r3, [sp, #12]
 800ba3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba3c:	443b      	add	r3, r7
 800ba3e:	9309      	str	r3, [sp, #36]	@ 0x24
 800ba40:	e76a      	b.n	800b918 <_vfiprintf_r+0x78>
 800ba42:	fb0c 3202 	mla	r2, ip, r2, r3
 800ba46:	460c      	mov	r4, r1
 800ba48:	2001      	movs	r0, #1
 800ba4a:	e7a8      	b.n	800b99e <_vfiprintf_r+0xfe>
 800ba4c:	2300      	movs	r3, #0
 800ba4e:	3401      	adds	r4, #1
 800ba50:	9305      	str	r3, [sp, #20]
 800ba52:	4619      	mov	r1, r3
 800ba54:	f04f 0c0a 	mov.w	ip, #10
 800ba58:	4620      	mov	r0, r4
 800ba5a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ba5e:	3a30      	subs	r2, #48	@ 0x30
 800ba60:	2a09      	cmp	r2, #9
 800ba62:	d903      	bls.n	800ba6c <_vfiprintf_r+0x1cc>
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d0c6      	beq.n	800b9f6 <_vfiprintf_r+0x156>
 800ba68:	9105      	str	r1, [sp, #20]
 800ba6a:	e7c4      	b.n	800b9f6 <_vfiprintf_r+0x156>
 800ba6c:	fb0c 2101 	mla	r1, ip, r1, r2
 800ba70:	4604      	mov	r4, r0
 800ba72:	2301      	movs	r3, #1
 800ba74:	e7f0      	b.n	800ba58 <_vfiprintf_r+0x1b8>
 800ba76:	ab03      	add	r3, sp, #12
 800ba78:	9300      	str	r3, [sp, #0]
 800ba7a:	462a      	mov	r2, r5
 800ba7c:	4b12      	ldr	r3, [pc, #72]	@ (800bac8 <_vfiprintf_r+0x228>)
 800ba7e:	a904      	add	r1, sp, #16
 800ba80:	4630      	mov	r0, r6
 800ba82:	f7fd fd1d 	bl	80094c0 <_printf_float>
 800ba86:	4607      	mov	r7, r0
 800ba88:	1c78      	adds	r0, r7, #1
 800ba8a:	d1d6      	bne.n	800ba3a <_vfiprintf_r+0x19a>
 800ba8c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ba8e:	07d9      	lsls	r1, r3, #31
 800ba90:	d405      	bmi.n	800ba9e <_vfiprintf_r+0x1fe>
 800ba92:	89ab      	ldrh	r3, [r5, #12]
 800ba94:	059a      	lsls	r2, r3, #22
 800ba96:	d402      	bmi.n	800ba9e <_vfiprintf_r+0x1fe>
 800ba98:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ba9a:	f7fe fc05 	bl	800a2a8 <__retarget_lock_release_recursive>
 800ba9e:	89ab      	ldrh	r3, [r5, #12]
 800baa0:	065b      	lsls	r3, r3, #25
 800baa2:	f53f af1f 	bmi.w	800b8e4 <_vfiprintf_r+0x44>
 800baa6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800baa8:	e71e      	b.n	800b8e8 <_vfiprintf_r+0x48>
 800baaa:	ab03      	add	r3, sp, #12
 800baac:	9300      	str	r3, [sp, #0]
 800baae:	462a      	mov	r2, r5
 800bab0:	4b05      	ldr	r3, [pc, #20]	@ (800bac8 <_vfiprintf_r+0x228>)
 800bab2:	a904      	add	r1, sp, #16
 800bab4:	4630      	mov	r0, r6
 800bab6:	f7fd ff9b 	bl	80099f0 <_printf_i>
 800baba:	e7e4      	b.n	800ba86 <_vfiprintf_r+0x1e6>
 800babc:	0800c990 	.word	0x0800c990
 800bac0:	0800c99a 	.word	0x0800c99a
 800bac4:	080094c1 	.word	0x080094c1
 800bac8:	0800b87b 	.word	0x0800b87b
 800bacc:	0800c996 	.word	0x0800c996

0800bad0 <__sflush_r>:
 800bad0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bad4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bad8:	0716      	lsls	r6, r2, #28
 800bada:	4605      	mov	r5, r0
 800badc:	460c      	mov	r4, r1
 800bade:	d454      	bmi.n	800bb8a <__sflush_r+0xba>
 800bae0:	684b      	ldr	r3, [r1, #4]
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	dc02      	bgt.n	800baec <__sflush_r+0x1c>
 800bae6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800bae8:	2b00      	cmp	r3, #0
 800baea:	dd48      	ble.n	800bb7e <__sflush_r+0xae>
 800baec:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800baee:	2e00      	cmp	r6, #0
 800baf0:	d045      	beq.n	800bb7e <__sflush_r+0xae>
 800baf2:	2300      	movs	r3, #0
 800baf4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800baf8:	682f      	ldr	r7, [r5, #0]
 800bafa:	6a21      	ldr	r1, [r4, #32]
 800bafc:	602b      	str	r3, [r5, #0]
 800bafe:	d030      	beq.n	800bb62 <__sflush_r+0x92>
 800bb00:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800bb02:	89a3      	ldrh	r3, [r4, #12]
 800bb04:	0759      	lsls	r1, r3, #29
 800bb06:	d505      	bpl.n	800bb14 <__sflush_r+0x44>
 800bb08:	6863      	ldr	r3, [r4, #4]
 800bb0a:	1ad2      	subs	r2, r2, r3
 800bb0c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800bb0e:	b10b      	cbz	r3, 800bb14 <__sflush_r+0x44>
 800bb10:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800bb12:	1ad2      	subs	r2, r2, r3
 800bb14:	2300      	movs	r3, #0
 800bb16:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bb18:	6a21      	ldr	r1, [r4, #32]
 800bb1a:	4628      	mov	r0, r5
 800bb1c:	47b0      	blx	r6
 800bb1e:	1c43      	adds	r3, r0, #1
 800bb20:	89a3      	ldrh	r3, [r4, #12]
 800bb22:	d106      	bne.n	800bb32 <__sflush_r+0x62>
 800bb24:	6829      	ldr	r1, [r5, #0]
 800bb26:	291d      	cmp	r1, #29
 800bb28:	d82b      	bhi.n	800bb82 <__sflush_r+0xb2>
 800bb2a:	4a2a      	ldr	r2, [pc, #168]	@ (800bbd4 <__sflush_r+0x104>)
 800bb2c:	410a      	asrs	r2, r1
 800bb2e:	07d6      	lsls	r6, r2, #31
 800bb30:	d427      	bmi.n	800bb82 <__sflush_r+0xb2>
 800bb32:	2200      	movs	r2, #0
 800bb34:	6062      	str	r2, [r4, #4]
 800bb36:	04d9      	lsls	r1, r3, #19
 800bb38:	6922      	ldr	r2, [r4, #16]
 800bb3a:	6022      	str	r2, [r4, #0]
 800bb3c:	d504      	bpl.n	800bb48 <__sflush_r+0x78>
 800bb3e:	1c42      	adds	r2, r0, #1
 800bb40:	d101      	bne.n	800bb46 <__sflush_r+0x76>
 800bb42:	682b      	ldr	r3, [r5, #0]
 800bb44:	b903      	cbnz	r3, 800bb48 <__sflush_r+0x78>
 800bb46:	6560      	str	r0, [r4, #84]	@ 0x54
 800bb48:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bb4a:	602f      	str	r7, [r5, #0]
 800bb4c:	b1b9      	cbz	r1, 800bb7e <__sflush_r+0xae>
 800bb4e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bb52:	4299      	cmp	r1, r3
 800bb54:	d002      	beq.n	800bb5c <__sflush_r+0x8c>
 800bb56:	4628      	mov	r0, r5
 800bb58:	f7ff f9f6 	bl	800af48 <_free_r>
 800bb5c:	2300      	movs	r3, #0
 800bb5e:	6363      	str	r3, [r4, #52]	@ 0x34
 800bb60:	e00d      	b.n	800bb7e <__sflush_r+0xae>
 800bb62:	2301      	movs	r3, #1
 800bb64:	4628      	mov	r0, r5
 800bb66:	47b0      	blx	r6
 800bb68:	4602      	mov	r2, r0
 800bb6a:	1c50      	adds	r0, r2, #1
 800bb6c:	d1c9      	bne.n	800bb02 <__sflush_r+0x32>
 800bb6e:	682b      	ldr	r3, [r5, #0]
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d0c6      	beq.n	800bb02 <__sflush_r+0x32>
 800bb74:	2b1d      	cmp	r3, #29
 800bb76:	d001      	beq.n	800bb7c <__sflush_r+0xac>
 800bb78:	2b16      	cmp	r3, #22
 800bb7a:	d11e      	bne.n	800bbba <__sflush_r+0xea>
 800bb7c:	602f      	str	r7, [r5, #0]
 800bb7e:	2000      	movs	r0, #0
 800bb80:	e022      	b.n	800bbc8 <__sflush_r+0xf8>
 800bb82:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bb86:	b21b      	sxth	r3, r3
 800bb88:	e01b      	b.n	800bbc2 <__sflush_r+0xf2>
 800bb8a:	690f      	ldr	r7, [r1, #16]
 800bb8c:	2f00      	cmp	r7, #0
 800bb8e:	d0f6      	beq.n	800bb7e <__sflush_r+0xae>
 800bb90:	0793      	lsls	r3, r2, #30
 800bb92:	680e      	ldr	r6, [r1, #0]
 800bb94:	bf08      	it	eq
 800bb96:	694b      	ldreq	r3, [r1, #20]
 800bb98:	600f      	str	r7, [r1, #0]
 800bb9a:	bf18      	it	ne
 800bb9c:	2300      	movne	r3, #0
 800bb9e:	eba6 0807 	sub.w	r8, r6, r7
 800bba2:	608b      	str	r3, [r1, #8]
 800bba4:	f1b8 0f00 	cmp.w	r8, #0
 800bba8:	dde9      	ble.n	800bb7e <__sflush_r+0xae>
 800bbaa:	6a21      	ldr	r1, [r4, #32]
 800bbac:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800bbae:	4643      	mov	r3, r8
 800bbb0:	463a      	mov	r2, r7
 800bbb2:	4628      	mov	r0, r5
 800bbb4:	47b0      	blx	r6
 800bbb6:	2800      	cmp	r0, #0
 800bbb8:	dc08      	bgt.n	800bbcc <__sflush_r+0xfc>
 800bbba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bbbe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bbc2:	81a3      	strh	r3, [r4, #12]
 800bbc4:	f04f 30ff 	mov.w	r0, #4294967295
 800bbc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bbcc:	4407      	add	r7, r0
 800bbce:	eba8 0800 	sub.w	r8, r8, r0
 800bbd2:	e7e7      	b.n	800bba4 <__sflush_r+0xd4>
 800bbd4:	dfbffffe 	.word	0xdfbffffe

0800bbd8 <_fflush_r>:
 800bbd8:	b538      	push	{r3, r4, r5, lr}
 800bbda:	690b      	ldr	r3, [r1, #16]
 800bbdc:	4605      	mov	r5, r0
 800bbde:	460c      	mov	r4, r1
 800bbe0:	b913      	cbnz	r3, 800bbe8 <_fflush_r+0x10>
 800bbe2:	2500      	movs	r5, #0
 800bbe4:	4628      	mov	r0, r5
 800bbe6:	bd38      	pop	{r3, r4, r5, pc}
 800bbe8:	b118      	cbz	r0, 800bbf2 <_fflush_r+0x1a>
 800bbea:	6a03      	ldr	r3, [r0, #32]
 800bbec:	b90b      	cbnz	r3, 800bbf2 <_fflush_r+0x1a>
 800bbee:	f7fe f8ab 	bl	8009d48 <__sinit>
 800bbf2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d0f3      	beq.n	800bbe2 <_fflush_r+0xa>
 800bbfa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800bbfc:	07d0      	lsls	r0, r2, #31
 800bbfe:	d404      	bmi.n	800bc0a <_fflush_r+0x32>
 800bc00:	0599      	lsls	r1, r3, #22
 800bc02:	d402      	bmi.n	800bc0a <_fflush_r+0x32>
 800bc04:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bc06:	f7fe fb4e 	bl	800a2a6 <__retarget_lock_acquire_recursive>
 800bc0a:	4628      	mov	r0, r5
 800bc0c:	4621      	mov	r1, r4
 800bc0e:	f7ff ff5f 	bl	800bad0 <__sflush_r>
 800bc12:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bc14:	07da      	lsls	r2, r3, #31
 800bc16:	4605      	mov	r5, r0
 800bc18:	d4e4      	bmi.n	800bbe4 <_fflush_r+0xc>
 800bc1a:	89a3      	ldrh	r3, [r4, #12]
 800bc1c:	059b      	lsls	r3, r3, #22
 800bc1e:	d4e1      	bmi.n	800bbe4 <_fflush_r+0xc>
 800bc20:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bc22:	f7fe fb41 	bl	800a2a8 <__retarget_lock_release_recursive>
 800bc26:	e7dd      	b.n	800bbe4 <_fflush_r+0xc>

0800bc28 <__swhatbuf_r>:
 800bc28:	b570      	push	{r4, r5, r6, lr}
 800bc2a:	460c      	mov	r4, r1
 800bc2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc30:	2900      	cmp	r1, #0
 800bc32:	b096      	sub	sp, #88	@ 0x58
 800bc34:	4615      	mov	r5, r2
 800bc36:	461e      	mov	r6, r3
 800bc38:	da0d      	bge.n	800bc56 <__swhatbuf_r+0x2e>
 800bc3a:	89a3      	ldrh	r3, [r4, #12]
 800bc3c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800bc40:	f04f 0100 	mov.w	r1, #0
 800bc44:	bf14      	ite	ne
 800bc46:	2340      	movne	r3, #64	@ 0x40
 800bc48:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800bc4c:	2000      	movs	r0, #0
 800bc4e:	6031      	str	r1, [r6, #0]
 800bc50:	602b      	str	r3, [r5, #0]
 800bc52:	b016      	add	sp, #88	@ 0x58
 800bc54:	bd70      	pop	{r4, r5, r6, pc}
 800bc56:	466a      	mov	r2, sp
 800bc58:	f000 f848 	bl	800bcec <_fstat_r>
 800bc5c:	2800      	cmp	r0, #0
 800bc5e:	dbec      	blt.n	800bc3a <__swhatbuf_r+0x12>
 800bc60:	9901      	ldr	r1, [sp, #4]
 800bc62:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800bc66:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800bc6a:	4259      	negs	r1, r3
 800bc6c:	4159      	adcs	r1, r3
 800bc6e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bc72:	e7eb      	b.n	800bc4c <__swhatbuf_r+0x24>

0800bc74 <__smakebuf_r>:
 800bc74:	898b      	ldrh	r3, [r1, #12]
 800bc76:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bc78:	079d      	lsls	r5, r3, #30
 800bc7a:	4606      	mov	r6, r0
 800bc7c:	460c      	mov	r4, r1
 800bc7e:	d507      	bpl.n	800bc90 <__smakebuf_r+0x1c>
 800bc80:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800bc84:	6023      	str	r3, [r4, #0]
 800bc86:	6123      	str	r3, [r4, #16]
 800bc88:	2301      	movs	r3, #1
 800bc8a:	6163      	str	r3, [r4, #20]
 800bc8c:	b003      	add	sp, #12
 800bc8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bc90:	ab01      	add	r3, sp, #4
 800bc92:	466a      	mov	r2, sp
 800bc94:	f7ff ffc8 	bl	800bc28 <__swhatbuf_r>
 800bc98:	9f00      	ldr	r7, [sp, #0]
 800bc9a:	4605      	mov	r5, r0
 800bc9c:	4639      	mov	r1, r7
 800bc9e:	4630      	mov	r0, r6
 800bca0:	f7ff f9c6 	bl	800b030 <_malloc_r>
 800bca4:	b948      	cbnz	r0, 800bcba <__smakebuf_r+0x46>
 800bca6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bcaa:	059a      	lsls	r2, r3, #22
 800bcac:	d4ee      	bmi.n	800bc8c <__smakebuf_r+0x18>
 800bcae:	f023 0303 	bic.w	r3, r3, #3
 800bcb2:	f043 0302 	orr.w	r3, r3, #2
 800bcb6:	81a3      	strh	r3, [r4, #12]
 800bcb8:	e7e2      	b.n	800bc80 <__smakebuf_r+0xc>
 800bcba:	89a3      	ldrh	r3, [r4, #12]
 800bcbc:	6020      	str	r0, [r4, #0]
 800bcbe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bcc2:	81a3      	strh	r3, [r4, #12]
 800bcc4:	9b01      	ldr	r3, [sp, #4]
 800bcc6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800bcca:	b15b      	cbz	r3, 800bce4 <__smakebuf_r+0x70>
 800bccc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bcd0:	4630      	mov	r0, r6
 800bcd2:	f000 f81d 	bl	800bd10 <_isatty_r>
 800bcd6:	b128      	cbz	r0, 800bce4 <__smakebuf_r+0x70>
 800bcd8:	89a3      	ldrh	r3, [r4, #12]
 800bcda:	f023 0303 	bic.w	r3, r3, #3
 800bcde:	f043 0301 	orr.w	r3, r3, #1
 800bce2:	81a3      	strh	r3, [r4, #12]
 800bce4:	89a3      	ldrh	r3, [r4, #12]
 800bce6:	431d      	orrs	r5, r3
 800bce8:	81a5      	strh	r5, [r4, #12]
 800bcea:	e7cf      	b.n	800bc8c <__smakebuf_r+0x18>

0800bcec <_fstat_r>:
 800bcec:	b538      	push	{r3, r4, r5, lr}
 800bcee:	4d07      	ldr	r5, [pc, #28]	@ (800bd0c <_fstat_r+0x20>)
 800bcf0:	2300      	movs	r3, #0
 800bcf2:	4604      	mov	r4, r0
 800bcf4:	4608      	mov	r0, r1
 800bcf6:	4611      	mov	r1, r2
 800bcf8:	602b      	str	r3, [r5, #0]
 800bcfa:	f7f6 fa05 	bl	8002108 <_fstat>
 800bcfe:	1c43      	adds	r3, r0, #1
 800bd00:	d102      	bne.n	800bd08 <_fstat_r+0x1c>
 800bd02:	682b      	ldr	r3, [r5, #0]
 800bd04:	b103      	cbz	r3, 800bd08 <_fstat_r+0x1c>
 800bd06:	6023      	str	r3, [r4, #0]
 800bd08:	bd38      	pop	{r3, r4, r5, pc}
 800bd0a:	bf00      	nop
 800bd0c:	20006ca4 	.word	0x20006ca4

0800bd10 <_isatty_r>:
 800bd10:	b538      	push	{r3, r4, r5, lr}
 800bd12:	4d06      	ldr	r5, [pc, #24]	@ (800bd2c <_isatty_r+0x1c>)
 800bd14:	2300      	movs	r3, #0
 800bd16:	4604      	mov	r4, r0
 800bd18:	4608      	mov	r0, r1
 800bd1a:	602b      	str	r3, [r5, #0]
 800bd1c:	f7f6 f972 	bl	8002004 <_isatty>
 800bd20:	1c43      	adds	r3, r0, #1
 800bd22:	d102      	bne.n	800bd2a <_isatty_r+0x1a>
 800bd24:	682b      	ldr	r3, [r5, #0]
 800bd26:	b103      	cbz	r3, 800bd2a <_isatty_r+0x1a>
 800bd28:	6023      	str	r3, [r4, #0]
 800bd2a:	bd38      	pop	{r3, r4, r5, pc}
 800bd2c:	20006ca4 	.word	0x20006ca4

0800bd30 <_sbrk_r>:
 800bd30:	b538      	push	{r3, r4, r5, lr}
 800bd32:	4d06      	ldr	r5, [pc, #24]	@ (800bd4c <_sbrk_r+0x1c>)
 800bd34:	2300      	movs	r3, #0
 800bd36:	4604      	mov	r4, r0
 800bd38:	4608      	mov	r0, r1
 800bd3a:	602b      	str	r3, [r5, #0]
 800bd3c:	f7f6 fb1e 	bl	800237c <_sbrk>
 800bd40:	1c43      	adds	r3, r0, #1
 800bd42:	d102      	bne.n	800bd4a <_sbrk_r+0x1a>
 800bd44:	682b      	ldr	r3, [r5, #0]
 800bd46:	b103      	cbz	r3, 800bd4a <_sbrk_r+0x1a>
 800bd48:	6023      	str	r3, [r4, #0]
 800bd4a:	bd38      	pop	{r3, r4, r5, pc}
 800bd4c:	20006ca4 	.word	0x20006ca4

0800bd50 <memcpy>:
 800bd50:	440a      	add	r2, r1
 800bd52:	4291      	cmp	r1, r2
 800bd54:	f100 33ff 	add.w	r3, r0, #4294967295
 800bd58:	d100      	bne.n	800bd5c <memcpy+0xc>
 800bd5a:	4770      	bx	lr
 800bd5c:	b510      	push	{r4, lr}
 800bd5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bd62:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bd66:	4291      	cmp	r1, r2
 800bd68:	d1f9      	bne.n	800bd5e <memcpy+0xe>
 800bd6a:	bd10      	pop	{r4, pc}

0800bd6c <__assert_func>:
 800bd6c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bd6e:	4614      	mov	r4, r2
 800bd70:	461a      	mov	r2, r3
 800bd72:	4b09      	ldr	r3, [pc, #36]	@ (800bd98 <__assert_func+0x2c>)
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	4605      	mov	r5, r0
 800bd78:	68d8      	ldr	r0, [r3, #12]
 800bd7a:	b954      	cbnz	r4, 800bd92 <__assert_func+0x26>
 800bd7c:	4b07      	ldr	r3, [pc, #28]	@ (800bd9c <__assert_func+0x30>)
 800bd7e:	461c      	mov	r4, r3
 800bd80:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bd84:	9100      	str	r1, [sp, #0]
 800bd86:	462b      	mov	r3, r5
 800bd88:	4905      	ldr	r1, [pc, #20]	@ (800bda0 <__assert_func+0x34>)
 800bd8a:	f000 f841 	bl	800be10 <fiprintf>
 800bd8e:	f000 f851 	bl	800be34 <abort>
 800bd92:	4b04      	ldr	r3, [pc, #16]	@ (800bda4 <__assert_func+0x38>)
 800bd94:	e7f4      	b.n	800bd80 <__assert_func+0x14>
 800bd96:	bf00      	nop
 800bd98:	2000001c 	.word	0x2000001c
 800bd9c:	0800c9e6 	.word	0x0800c9e6
 800bda0:	0800c9b8 	.word	0x0800c9b8
 800bda4:	0800c9ab 	.word	0x0800c9ab

0800bda8 <_calloc_r>:
 800bda8:	b570      	push	{r4, r5, r6, lr}
 800bdaa:	fba1 5402 	umull	r5, r4, r1, r2
 800bdae:	b93c      	cbnz	r4, 800bdc0 <_calloc_r+0x18>
 800bdb0:	4629      	mov	r1, r5
 800bdb2:	f7ff f93d 	bl	800b030 <_malloc_r>
 800bdb6:	4606      	mov	r6, r0
 800bdb8:	b928      	cbnz	r0, 800bdc6 <_calloc_r+0x1e>
 800bdba:	2600      	movs	r6, #0
 800bdbc:	4630      	mov	r0, r6
 800bdbe:	bd70      	pop	{r4, r5, r6, pc}
 800bdc0:	220c      	movs	r2, #12
 800bdc2:	6002      	str	r2, [r0, #0]
 800bdc4:	e7f9      	b.n	800bdba <_calloc_r+0x12>
 800bdc6:	462a      	mov	r2, r5
 800bdc8:	4621      	mov	r1, r4
 800bdca:	f7fe f9ef 	bl	800a1ac <memset>
 800bdce:	e7f5      	b.n	800bdbc <_calloc_r+0x14>

0800bdd0 <__ascii_mbtowc>:
 800bdd0:	b082      	sub	sp, #8
 800bdd2:	b901      	cbnz	r1, 800bdd6 <__ascii_mbtowc+0x6>
 800bdd4:	a901      	add	r1, sp, #4
 800bdd6:	b142      	cbz	r2, 800bdea <__ascii_mbtowc+0x1a>
 800bdd8:	b14b      	cbz	r3, 800bdee <__ascii_mbtowc+0x1e>
 800bdda:	7813      	ldrb	r3, [r2, #0]
 800bddc:	600b      	str	r3, [r1, #0]
 800bdde:	7812      	ldrb	r2, [r2, #0]
 800bde0:	1e10      	subs	r0, r2, #0
 800bde2:	bf18      	it	ne
 800bde4:	2001      	movne	r0, #1
 800bde6:	b002      	add	sp, #8
 800bde8:	4770      	bx	lr
 800bdea:	4610      	mov	r0, r2
 800bdec:	e7fb      	b.n	800bde6 <__ascii_mbtowc+0x16>
 800bdee:	f06f 0001 	mvn.w	r0, #1
 800bdf2:	e7f8      	b.n	800bde6 <__ascii_mbtowc+0x16>

0800bdf4 <__ascii_wctomb>:
 800bdf4:	4603      	mov	r3, r0
 800bdf6:	4608      	mov	r0, r1
 800bdf8:	b141      	cbz	r1, 800be0c <__ascii_wctomb+0x18>
 800bdfa:	2aff      	cmp	r2, #255	@ 0xff
 800bdfc:	d904      	bls.n	800be08 <__ascii_wctomb+0x14>
 800bdfe:	228a      	movs	r2, #138	@ 0x8a
 800be00:	601a      	str	r2, [r3, #0]
 800be02:	f04f 30ff 	mov.w	r0, #4294967295
 800be06:	4770      	bx	lr
 800be08:	700a      	strb	r2, [r1, #0]
 800be0a:	2001      	movs	r0, #1
 800be0c:	4770      	bx	lr
	...

0800be10 <fiprintf>:
 800be10:	b40e      	push	{r1, r2, r3}
 800be12:	b503      	push	{r0, r1, lr}
 800be14:	4601      	mov	r1, r0
 800be16:	ab03      	add	r3, sp, #12
 800be18:	4805      	ldr	r0, [pc, #20]	@ (800be30 <fiprintf+0x20>)
 800be1a:	f853 2b04 	ldr.w	r2, [r3], #4
 800be1e:	6800      	ldr	r0, [r0, #0]
 800be20:	9301      	str	r3, [sp, #4]
 800be22:	f7ff fd3d 	bl	800b8a0 <_vfiprintf_r>
 800be26:	b002      	add	sp, #8
 800be28:	f85d eb04 	ldr.w	lr, [sp], #4
 800be2c:	b003      	add	sp, #12
 800be2e:	4770      	bx	lr
 800be30:	2000001c 	.word	0x2000001c

0800be34 <abort>:
 800be34:	b508      	push	{r3, lr}
 800be36:	2006      	movs	r0, #6
 800be38:	f000 f82c 	bl	800be94 <raise>
 800be3c:	2001      	movs	r0, #1
 800be3e:	f7f6 fa85 	bl	800234c <_exit>

0800be42 <_raise_r>:
 800be42:	291f      	cmp	r1, #31
 800be44:	b538      	push	{r3, r4, r5, lr}
 800be46:	4605      	mov	r5, r0
 800be48:	460c      	mov	r4, r1
 800be4a:	d904      	bls.n	800be56 <_raise_r+0x14>
 800be4c:	2316      	movs	r3, #22
 800be4e:	6003      	str	r3, [r0, #0]
 800be50:	f04f 30ff 	mov.w	r0, #4294967295
 800be54:	bd38      	pop	{r3, r4, r5, pc}
 800be56:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800be58:	b112      	cbz	r2, 800be60 <_raise_r+0x1e>
 800be5a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800be5e:	b94b      	cbnz	r3, 800be74 <_raise_r+0x32>
 800be60:	4628      	mov	r0, r5
 800be62:	f000 f831 	bl	800bec8 <_getpid_r>
 800be66:	4622      	mov	r2, r4
 800be68:	4601      	mov	r1, r0
 800be6a:	4628      	mov	r0, r5
 800be6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800be70:	f000 b818 	b.w	800bea4 <_kill_r>
 800be74:	2b01      	cmp	r3, #1
 800be76:	d00a      	beq.n	800be8e <_raise_r+0x4c>
 800be78:	1c59      	adds	r1, r3, #1
 800be7a:	d103      	bne.n	800be84 <_raise_r+0x42>
 800be7c:	2316      	movs	r3, #22
 800be7e:	6003      	str	r3, [r0, #0]
 800be80:	2001      	movs	r0, #1
 800be82:	e7e7      	b.n	800be54 <_raise_r+0x12>
 800be84:	2100      	movs	r1, #0
 800be86:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800be8a:	4620      	mov	r0, r4
 800be8c:	4798      	blx	r3
 800be8e:	2000      	movs	r0, #0
 800be90:	e7e0      	b.n	800be54 <_raise_r+0x12>
	...

0800be94 <raise>:
 800be94:	4b02      	ldr	r3, [pc, #8]	@ (800bea0 <raise+0xc>)
 800be96:	4601      	mov	r1, r0
 800be98:	6818      	ldr	r0, [r3, #0]
 800be9a:	f7ff bfd2 	b.w	800be42 <_raise_r>
 800be9e:	bf00      	nop
 800bea0:	2000001c 	.word	0x2000001c

0800bea4 <_kill_r>:
 800bea4:	b538      	push	{r3, r4, r5, lr}
 800bea6:	4d07      	ldr	r5, [pc, #28]	@ (800bec4 <_kill_r+0x20>)
 800bea8:	2300      	movs	r3, #0
 800beaa:	4604      	mov	r4, r0
 800beac:	4608      	mov	r0, r1
 800beae:	4611      	mov	r1, r2
 800beb0:	602b      	str	r3, [r5, #0]
 800beb2:	f7f6 fa3b 	bl	800232c <_kill>
 800beb6:	1c43      	adds	r3, r0, #1
 800beb8:	d102      	bne.n	800bec0 <_kill_r+0x1c>
 800beba:	682b      	ldr	r3, [r5, #0]
 800bebc:	b103      	cbz	r3, 800bec0 <_kill_r+0x1c>
 800bebe:	6023      	str	r3, [r4, #0]
 800bec0:	bd38      	pop	{r3, r4, r5, pc}
 800bec2:	bf00      	nop
 800bec4:	20006ca4 	.word	0x20006ca4

0800bec8 <_getpid_r>:
 800bec8:	f7f6 ba28 	b.w	800231c <_getpid>

0800becc <_init>:
 800becc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bece:	bf00      	nop
 800bed0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bed2:	bc08      	pop	{r3}
 800bed4:	469e      	mov	lr, r3
 800bed6:	4770      	bx	lr

0800bed8 <_fini>:
 800bed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800beda:	bf00      	nop
 800bedc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bede:	bc08      	pop	{r3}
 800bee0:	469e      	mov	lr, r3
 800bee2:	4770      	bx	lr
