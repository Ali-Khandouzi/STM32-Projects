
Kha5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d60  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000028c  08004ef0  08004ef0  00005ef0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800517c  0800517c  00007060  2**0
                  CONTENTS
  4 .ARM          00000008  0800517c  0800517c  0000617c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005184  08005184  00007060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005184  08005184  00006184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005188  08005188  00006188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  0800518c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f8  20000060  080051ec  00007060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000258  080051ec  00007258  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bf81  00000000  00000000  00007090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d38  00000000  00000000  00013011  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009f8  00000000  00000000  00014d50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000079e  00000000  00000000  00015748  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025e07  00000000  00000000  00015ee6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c898  00000000  00000000  0003bced  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e7e84  00000000  00000000  00048585  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00130409  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d6c  00000000  00000000  0013044c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004d  00000000  00000000  001331b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004ed8 	.word	0x08004ed8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	08004ed8 	.word	0x08004ed8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <main>:

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void) {
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
  uint8_t opt = 0;
 8000576:	2300      	movs	r3, #0
 8000578:	71fb      	strb	r3, [r7, #7]

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800057a:	f000 fb2d 	bl	8000bd8 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 800057e:	f000 f913 	bl	80007a8 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000582:	f000 f993 	bl	80008ac <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000586:	f000 f961 	bl	800084c <MX_USART2_UART_Init>

  /* USART2 interrupt Init */
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800058a:	2200      	movs	r2, #0
 800058c:	2100      	movs	r1, #0
 800058e:	2026      	movs	r0, #38	@ 0x26
 8000590:	f000 fc9d 	bl	8000ece <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000594:	2026      	movs	r0, #38	@ 0x26
 8000596:	f000 fcb6 	bl	8000f06 <HAL_NVIC_EnableIRQ>

printMessage:

	printWelcomeMessage();
 800059a:	f000 f835 	bl	8000608 <printWelcomeMessage>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
	  opt = readUserInput();
 800059e:	f000 f873 	bl	8000688 <readUserInput>
 80005a2:	4603      	mov	r3, r0
 80005a4:	71fb      	strb	r3, [r7, #7]
	  if(opt > 0) {
 80005a6:	79fb      	ldrb	r3, [r7, #7]
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d007      	beq.n	80005bc <main+0x4c>
		  processUserInput(opt);
 80005ac:	79fb      	ldrb	r3, [r7, #7]
 80005ae:	4618      	mov	r0, r3
 80005b0:	f000 f88c 	bl	80006cc <processUserInput>
	  	  if(opt == 3)
 80005b4:	79fb      	ldrb	r3, [r7, #7]
 80005b6:	2b03      	cmp	r3, #3
 80005b8:	d100      	bne.n	80005bc <main+0x4c>
	  		  goto printMessage;
 80005ba:	e7ee      	b.n	800059a <main+0x2a>
	  }
	  performCriticalTasks();
 80005bc:	f000 f81c 	bl	80005f8 <performCriticalTasks>
	  opt = readUserInput();
 80005c0:	e7ed      	b.n	800059e <main+0x2e>
	...

080005c4 <USART2_IRQHandler>:
  }
}

/* we define the corresponding ISR and we add the call to the HAL_UART_IRQHandler().*/
void USART2_IRQHandler(void) {
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&huart2);
 80005c8:	4802      	ldr	r0, [pc, #8]	@ (80005d4 <USART2_IRQHandler+0x10>)
 80005ca:	f002 fbcb 	bl	8002d64 <HAL_UART_IRQHandler>
}
 80005ce:	bf00      	nop
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	2000007c 	.word	0x2000007c

080005d8 <HAL_UART_RxCpltCallback>:
/* This callback checks that if the added data by user is received or not. if it is, SET */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle) {
 80005d8:	b480      	push	{r7}
 80005da:	b083      	sub	sp, #12
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
 /* Set transmission flag: transfer complete*/
 UartReady = SET;
 80005e0:	4b04      	ldr	r3, [pc, #16]	@ (80005f4 <HAL_UART_RxCpltCallback+0x1c>)
 80005e2:	2201      	movs	r2, #1
 80005e4:	701a      	strb	r2, [r3, #0]
}
 80005e6:	bf00      	nop
 80005e8:	370c      	adds	r7, #12
 80005ea:	46bd      	mov	sp, r7
 80005ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop
 80005f4:	20000000 	.word	0x20000000

080005f8 <performCriticalTasks>:

void performCriticalTasks(void) {
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
  HAL_Delay(100);
 80005fc:	2064      	movs	r0, #100	@ 0x64
 80005fe:	f000 fb67 	bl	8000cd0 <HAL_Delay>
}
 8000602:	bf00      	nop
 8000604:	bd80      	pop	{r7, pc}
	...

08000608 <printWelcomeMessage>:

void printWelcomeMessage(void) {
 8000608:	b5b0      	push	{r4, r5, r7, lr}
 800060a:	b086      	sub	sp, #24
 800060c:	af00      	add	r7, sp, #0
  char *strings[] = {"\033[0;0H", "\033[2J", WELCOME_MSG, MAIN_MENU, PROMPT};
 800060e:	4b1c      	ldr	r3, [pc, #112]	@ (8000680 <printWelcomeMessage+0x78>)
 8000610:	463c      	mov	r4, r7
 8000612:	461d      	mov	r5, r3
 8000614:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000616:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000618:	682b      	ldr	r3, [r5, #0]
 800061a:	6023      	str	r3, [r4, #0]

  for (uint8_t i = 0; i < 5; i++) {
 800061c:	2300      	movs	r3, #0
 800061e:	75fb      	strb	r3, [r7, #23]
 8000620:	e025      	b.n	800066e <printWelcomeMessage+0x66>
    HAL_UART_Transmit_IT(&huart2, (uint8_t*)strings[i], strlen(strings[i]));
 8000622:	7dfb      	ldrb	r3, [r7, #23]
 8000624:	009b      	lsls	r3, r3, #2
 8000626:	3318      	adds	r3, #24
 8000628:	443b      	add	r3, r7
 800062a:	f853 4c18 	ldr.w	r4, [r3, #-24]
 800062e:	7dfb      	ldrb	r3, [r7, #23]
 8000630:	009b      	lsls	r3, r3, #2
 8000632:	3318      	adds	r3, #24
 8000634:	443b      	add	r3, r7
 8000636:	f853 3c18 	ldr.w	r3, [r3, #-24]
 800063a:	4618      	mov	r0, r3
 800063c:	f7ff fdc8 	bl	80001d0 <strlen>
 8000640:	4603      	mov	r3, r0
 8000642:	b29b      	uxth	r3, r3
 8000644:	461a      	mov	r2, r3
 8000646:	4621      	mov	r1, r4
 8000648:	480e      	ldr	r0, [pc, #56]	@ (8000684 <printWelcomeMessage+0x7c>)
 800064a:	f002 fae1 	bl	8002c10 <HAL_UART_Transmit_IT>
    while (HAL_UART_GetState(&huart2) == HAL_UART_STATE_BUSY_TX || HAL_UART_GetState(&huart2) == HAL_UART_STATE_BUSY_TX_RX);
 800064e:	bf00      	nop
 8000650:	480c      	ldr	r0, [pc, #48]	@ (8000684 <printWelcomeMessage+0x7c>)
 8000652:	f002 fead 	bl	80033b0 <HAL_UART_GetState>
 8000656:	4603      	mov	r3, r0
 8000658:	2b21      	cmp	r3, #33	@ 0x21
 800065a:	d0f9      	beq.n	8000650 <printWelcomeMessage+0x48>
 800065c:	4809      	ldr	r0, [pc, #36]	@ (8000684 <printWelcomeMessage+0x7c>)
 800065e:	f002 fea7 	bl	80033b0 <HAL_UART_GetState>
 8000662:	4603      	mov	r3, r0
 8000664:	2b23      	cmp	r3, #35	@ 0x23
 8000666:	d0f3      	beq.n	8000650 <printWelcomeMessage+0x48>
  for (uint8_t i = 0; i < 5; i++) {
 8000668:	7dfb      	ldrb	r3, [r7, #23]
 800066a:	3301      	adds	r3, #1
 800066c:	75fb      	strb	r3, [r7, #23]
 800066e:	7dfb      	ldrb	r3, [r7, #23]
 8000670:	2b04      	cmp	r3, #4
 8000672:	d9d6      	bls.n	8000622 <printWelcomeMessage+0x1a>
  }
}
 8000674:	bf00      	nop
 8000676:	bf00      	nop
 8000678:	3718      	adds	r7, #24
 800067a:	46bd      	mov	sp, r7
 800067c:	bdb0      	pop	{r4, r5, r7, pc}
 800067e:	bf00      	nop
 8000680:	08004fb8 	.word	0x08004fb8
 8000684:	2000007c 	.word	0x2000007c

08000688 <readUserInput>:
/*The while loop above, is typically used to wait until the UART is free to perform another operation,
  such as initiating a new transmission or receiving data. */
uint8_t readUserInput(void) {
 8000688:	b580      	push	{r7, lr}
 800068a:	b082      	sub	sp, #8
 800068c:	af00      	add	r7, sp, #0
  int8_t retVal = -1;
 800068e:	23ff      	movs	r3, #255	@ 0xff
 8000690:	71fb      	strb	r3, [r7, #7]

  if(UartReady == SET) {
 8000692:	4b0b      	ldr	r3, [pc, #44]	@ (80006c0 <readUserInput+0x38>)
 8000694:	781b      	ldrb	r3, [r3, #0]
 8000696:	b2db      	uxtb	r3, r3
 8000698:	2b01      	cmp	r3, #1
 800069a:	d10c      	bne.n	80006b6 <readUserInput+0x2e>
    UartReady = RESET;
 800069c:	4b08      	ldr	r3, [pc, #32]	@ (80006c0 <readUserInput+0x38>)
 800069e:	2200      	movs	r2, #0
 80006a0:	701a      	strb	r2, [r3, #0]
    HAL_UART_Receive_IT(&huart2, (uint8_t*)readBuf, 1);
 80006a2:	2201      	movs	r2, #1
 80006a4:	4907      	ldr	r1, [pc, #28]	@ (80006c4 <readUserInput+0x3c>)
 80006a6:	4808      	ldr	r0, [pc, #32]	@ (80006c8 <readUserInput+0x40>)
 80006a8:	f002 fb10 	bl	8002ccc <HAL_UART_Receive_IT>
    retVal = atoi(readBuf);
 80006ac:	4805      	ldr	r0, [pc, #20]	@ (80006c4 <readUserInput+0x3c>)
 80006ae:	f003 feeb 	bl	8004488 <atoi>
 80006b2:	4603      	mov	r3, r0
 80006b4:	71fb      	strb	r3, [r7, #7]
  }
  return retVal;
 80006b6:	79fb      	ldrb	r3, [r7, #7]
}
 80006b8:	4618      	mov	r0, r3
 80006ba:	3708      	adds	r7, #8
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	20000000 	.word	0x20000000
 80006c4:	20000104 	.word	0x20000104
 80006c8:	2000007c 	.word	0x2000007c

080006cc <processUserInput>:

uint8_t processUserInput(uint8_t opt) {
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b08a      	sub	sp, #40	@ 0x28
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	4603      	mov	r3, r0
 80006d4:	71fb      	strb	r3, [r7, #7]
  char msg[30];

  if(!opt || opt > 3)
 80006d6:	79fb      	ldrb	r3, [r7, #7]
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d002      	beq.n	80006e2 <processUserInput+0x16>
 80006dc:	79fb      	ldrb	r3, [r7, #7]
 80006de:	2b03      	cmp	r3, #3
 80006e0:	d901      	bls.n	80006e6 <processUserInput+0x1a>
    return 0;
 80006e2:	2300      	movs	r3, #0
 80006e4:	e04e      	b.n	8000784 <processUserInput+0xb8>

  sprintf(msg, "%d", opt);
 80006e6:	79fa      	ldrb	r2, [r7, #7]
 80006e8:	f107 0308 	add.w	r3, r7, #8
 80006ec:	4927      	ldr	r1, [pc, #156]	@ (800078c <processUserInput+0xc0>)
 80006ee:	4618      	mov	r0, r3
 80006f0:	f003 ff52 	bl	8004598 <siprintf>
  HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80006f4:	f107 0308 	add.w	r3, r7, #8
 80006f8:	4618      	mov	r0, r3
 80006fa:	f7ff fd69 	bl	80001d0 <strlen>
 80006fe:	4603      	mov	r3, r0
 8000700:	b29a      	uxth	r2, r3
 8000702:	f107 0108 	add.w	r1, r7, #8
 8000706:	f04f 33ff 	mov.w	r3, #4294967295
 800070a:	4821      	ldr	r0, [pc, #132]	@ (8000790 <processUserInput+0xc4>)
 800070c:	f002 f9f6 	bl	8002afc <HAL_UART_Transmit>

  switch(opt) {
 8000710:	79fb      	ldrb	r3, [r7, #7]
 8000712:	2b03      	cmp	r3, #3
 8000714:	d02c      	beq.n	8000770 <processUserInput+0xa4>
 8000716:	2b03      	cmp	r3, #3
 8000718:	dc2c      	bgt.n	8000774 <processUserInput+0xa8>
 800071a:	2b01      	cmp	r3, #1
 800071c:	d002      	beq.n	8000724 <processUserInput+0x58>
 800071e:	2b02      	cmp	r3, #2
 8000720:	d006      	beq.n	8000730 <processUserInput+0x64>
 8000722:	e027      	b.n	8000774 <processUserInput+0xa8>
  case 1:
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000724:	2120      	movs	r1, #32
 8000726:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800072a:	f000 fe5f 	bl	80013ec <HAL_GPIO_TogglePin>
    break;
 800072e:	e021      	b.n	8000774 <processUserInput+0xa8>
  case 2:
    sprintf(msg, "\r\nUSER BUTTON status: %s", HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_RESET ? "PRESSED" : "RELEASED");
 8000730:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000734:	4817      	ldr	r0, [pc, #92]	@ (8000794 <processUserInput+0xc8>)
 8000736:	f000 fe29 	bl	800138c <HAL_GPIO_ReadPin>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d101      	bne.n	8000744 <processUserInput+0x78>
 8000740:	4a15      	ldr	r2, [pc, #84]	@ (8000798 <processUserInput+0xcc>)
 8000742:	e000      	b.n	8000746 <processUserInput+0x7a>
 8000744:	4a15      	ldr	r2, [pc, #84]	@ (800079c <processUserInput+0xd0>)
 8000746:	f107 0308 	add.w	r3, r7, #8
 800074a:	4915      	ldr	r1, [pc, #84]	@ (80007a0 <processUserInput+0xd4>)
 800074c:	4618      	mov	r0, r3
 800074e:	f003 ff23 	bl	8004598 <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000752:	f107 0308 	add.w	r3, r7, #8
 8000756:	4618      	mov	r0, r3
 8000758:	f7ff fd3a 	bl	80001d0 <strlen>
 800075c:	4603      	mov	r3, r0
 800075e:	b29a      	uxth	r2, r3
 8000760:	f107 0108 	add.w	r1, r7, #8
 8000764:	f04f 33ff 	mov.w	r3, #4294967295
 8000768:	4809      	ldr	r0, [pc, #36]	@ (8000790 <processUserInput+0xc4>)
 800076a:	f002 f9c7 	bl	8002afc <HAL_UART_Transmit>
    break;
 800076e:	e001      	b.n	8000774 <processUserInput+0xa8>
  case 3:
    return 2;
 8000770:	2302      	movs	r3, #2
 8000772:	e007      	b.n	8000784 <processUserInput+0xb8>
  };

  HAL_UART_Transmit(&huart2, (uint8_t*)PROMPT, strlen(PROMPT), HAL_MAX_DELAY);
 8000774:	f04f 33ff 	mov.w	r3, #4294967295
 8000778:	2204      	movs	r2, #4
 800077a:	490a      	ldr	r1, [pc, #40]	@ (80007a4 <processUserInput+0xd8>)
 800077c:	4804      	ldr	r0, [pc, #16]	@ (8000790 <processUserInput+0xc4>)
 800077e:	f002 f9bd 	bl	8002afc <HAL_UART_Transmit>
  return 1;
 8000782:	2301      	movs	r3, #1
}
 8000784:	4618      	mov	r0, r3
 8000786:	3728      	adds	r7, #40	@ 0x28
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	08004fcc 	.word	0x08004fcc
 8000790:	2000007c 	.word	0x2000007c
 8000794:	48000800 	.word	0x48000800
 8000798:	08004fd0 	.word	0x08004fd0
 800079c:	08004fd8 	.word	0x08004fd8
 80007a0:	08004fe4 	.word	0x08004fe4
 80007a4:	08004fb0 	.word	0x08004fb0

080007a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b096      	sub	sp, #88	@ 0x58
 80007ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ae:	f107 0314 	add.w	r3, r7, #20
 80007b2:	2244      	movs	r2, #68	@ 0x44
 80007b4:	2100      	movs	r1, #0
 80007b6:	4618      	mov	r0, r3
 80007b8:	f003 ff0e 	bl	80045d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007bc:	463b      	mov	r3, r7
 80007be:	2200      	movs	r2, #0
 80007c0:	601a      	str	r2, [r3, #0]
 80007c2:	605a      	str	r2, [r3, #4]
 80007c4:	609a      	str	r2, [r3, #8]
 80007c6:	60da      	str	r2, [r3, #12]
 80007c8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80007ca:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80007ce:	f000 fe35 	bl	800143c <HAL_PWREx_ControlVoltageScaling>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <SystemClock_Config+0x34>
  {
    Error_Handler();
 80007d8:	f000 f8ce 	bl	8000978 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007dc:	2302      	movs	r3, #2
 80007de:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007e0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80007e4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007e6:	2310      	movs	r3, #16
 80007e8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007ea:	2302      	movs	r3, #2
 80007ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007ee:	2302      	movs	r3, #2
 80007f0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80007f2:	2301      	movs	r3, #1
 80007f4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80007f6:	230a      	movs	r3, #10
 80007f8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80007fa:	2307      	movs	r3, #7
 80007fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80007fe:	2302      	movs	r3, #2
 8000800:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000802:	2302      	movs	r3, #2
 8000804:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000806:	f107 0314 	add.w	r3, r7, #20
 800080a:	4618      	mov	r0, r3
 800080c:	f000 fe6c 	bl	80014e8 <HAL_RCC_OscConfig>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000816:	f000 f8af 	bl	8000978 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800081a:	230f      	movs	r3, #15
 800081c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800081e:	2303      	movs	r3, #3
 8000820:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000822:	2300      	movs	r3, #0
 8000824:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000826:	2300      	movs	r3, #0
 8000828:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800082a:	2300      	movs	r3, #0
 800082c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800082e:	463b      	mov	r3, r7
 8000830:	2104      	movs	r1, #4
 8000832:	4618      	mov	r0, r3
 8000834:	f001 fa34 	bl	8001ca0 <HAL_RCC_ClockConfig>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800083e:	f000 f89b 	bl	8000978 <Error_Handler>
  }
}
 8000842:	bf00      	nop
 8000844:	3758      	adds	r7, #88	@ 0x58
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
	...

0800084c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000850:	4b14      	ldr	r3, [pc, #80]	@ (80008a4 <MX_USART2_UART_Init+0x58>)
 8000852:	4a15      	ldr	r2, [pc, #84]	@ (80008a8 <MX_USART2_UART_Init+0x5c>)
 8000854:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000856:	4b13      	ldr	r3, [pc, #76]	@ (80008a4 <MX_USART2_UART_Init+0x58>)
 8000858:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800085c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800085e:	4b11      	ldr	r3, [pc, #68]	@ (80008a4 <MX_USART2_UART_Init+0x58>)
 8000860:	2200      	movs	r2, #0
 8000862:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000864:	4b0f      	ldr	r3, [pc, #60]	@ (80008a4 <MX_USART2_UART_Init+0x58>)
 8000866:	2200      	movs	r2, #0
 8000868:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800086a:	4b0e      	ldr	r3, [pc, #56]	@ (80008a4 <MX_USART2_UART_Init+0x58>)
 800086c:	2200      	movs	r2, #0
 800086e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000870:	4b0c      	ldr	r3, [pc, #48]	@ (80008a4 <MX_USART2_UART_Init+0x58>)
 8000872:	220c      	movs	r2, #12
 8000874:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000876:	4b0b      	ldr	r3, [pc, #44]	@ (80008a4 <MX_USART2_UART_Init+0x58>)
 8000878:	2200      	movs	r2, #0
 800087a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800087c:	4b09      	ldr	r3, [pc, #36]	@ (80008a4 <MX_USART2_UART_Init+0x58>)
 800087e:	2200      	movs	r2, #0
 8000880:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000882:	4b08      	ldr	r3, [pc, #32]	@ (80008a4 <MX_USART2_UART_Init+0x58>)
 8000884:	2200      	movs	r2, #0
 8000886:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000888:	4b06      	ldr	r3, [pc, #24]	@ (80008a4 <MX_USART2_UART_Init+0x58>)
 800088a:	2200      	movs	r2, #0
 800088c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800088e:	4805      	ldr	r0, [pc, #20]	@ (80008a4 <MX_USART2_UART_Init+0x58>)
 8000890:	f002 f8e6 	bl	8002a60 <HAL_UART_Init>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800089a:	f000 f86d 	bl	8000978 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800089e:	bf00      	nop
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	2000007c 	.word	0x2000007c
 80008a8:	40004400 	.word	0x40004400

080008ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b08a      	sub	sp, #40	@ 0x28
 80008b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b2:	f107 0314 	add.w	r3, r7, #20
 80008b6:	2200      	movs	r2, #0
 80008b8:	601a      	str	r2, [r3, #0]
 80008ba:	605a      	str	r2, [r3, #4]
 80008bc:	609a      	str	r2, [r3, #8]
 80008be:	60da      	str	r2, [r3, #12]
 80008c0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008c2:	4b2b      	ldr	r3, [pc, #172]	@ (8000970 <MX_GPIO_Init+0xc4>)
 80008c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008c6:	4a2a      	ldr	r2, [pc, #168]	@ (8000970 <MX_GPIO_Init+0xc4>)
 80008c8:	f043 0304 	orr.w	r3, r3, #4
 80008cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008ce:	4b28      	ldr	r3, [pc, #160]	@ (8000970 <MX_GPIO_Init+0xc4>)
 80008d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008d2:	f003 0304 	and.w	r3, r3, #4
 80008d6:	613b      	str	r3, [r7, #16]
 80008d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008da:	4b25      	ldr	r3, [pc, #148]	@ (8000970 <MX_GPIO_Init+0xc4>)
 80008dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008de:	4a24      	ldr	r2, [pc, #144]	@ (8000970 <MX_GPIO_Init+0xc4>)
 80008e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008e6:	4b22      	ldr	r3, [pc, #136]	@ (8000970 <MX_GPIO_Init+0xc4>)
 80008e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008ee:	60fb      	str	r3, [r7, #12]
 80008f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008f2:	4b1f      	ldr	r3, [pc, #124]	@ (8000970 <MX_GPIO_Init+0xc4>)
 80008f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008f6:	4a1e      	ldr	r2, [pc, #120]	@ (8000970 <MX_GPIO_Init+0xc4>)
 80008f8:	f043 0301 	orr.w	r3, r3, #1
 80008fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008fe:	4b1c      	ldr	r3, [pc, #112]	@ (8000970 <MX_GPIO_Init+0xc4>)
 8000900:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000902:	f003 0301 	and.w	r3, r3, #1
 8000906:	60bb      	str	r3, [r7, #8]
 8000908:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800090a:	4b19      	ldr	r3, [pc, #100]	@ (8000970 <MX_GPIO_Init+0xc4>)
 800090c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800090e:	4a18      	ldr	r2, [pc, #96]	@ (8000970 <MX_GPIO_Init+0xc4>)
 8000910:	f043 0302 	orr.w	r3, r3, #2
 8000914:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000916:	4b16      	ldr	r3, [pc, #88]	@ (8000970 <MX_GPIO_Init+0xc4>)
 8000918:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800091a:	f003 0302 	and.w	r3, r3, #2
 800091e:	607b      	str	r3, [r7, #4]
 8000920:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000922:	2200      	movs	r2, #0
 8000924:	2120      	movs	r1, #32
 8000926:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800092a:	f000 fd47 	bl	80013bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800092e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000932:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000934:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000938:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093a:	2300      	movs	r3, #0
 800093c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800093e:	f107 0314 	add.w	r3, r7, #20
 8000942:	4619      	mov	r1, r3
 8000944:	480b      	ldr	r0, [pc, #44]	@ (8000974 <MX_GPIO_Init+0xc8>)
 8000946:	f000 fb77 	bl	8001038 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800094a:	2320      	movs	r3, #32
 800094c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800094e:	2301      	movs	r3, #1
 8000950:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000952:	2300      	movs	r3, #0
 8000954:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000956:	2300      	movs	r3, #0
 8000958:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800095a:	f107 0314 	add.w	r3, r7, #20
 800095e:	4619      	mov	r1, r3
 8000960:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000964:	f000 fb68 	bl	8001038 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000968:	bf00      	nop
 800096a:	3728      	adds	r7, #40	@ 0x28
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}
 8000970:	40021000 	.word	0x40021000
 8000974:	48000800 	.word	0x48000800

08000978 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800097c:	b672      	cpsid	i
}
 800097e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000980:	bf00      	nop
 8000982:	e7fd      	b.n	8000980 <Error_Handler+0x8>

08000984 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000984:	b480      	push	{r7}
 8000986:	b083      	sub	sp, #12
 8000988:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800098a:	4b0f      	ldr	r3, [pc, #60]	@ (80009c8 <HAL_MspInit+0x44>)
 800098c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800098e:	4a0e      	ldr	r2, [pc, #56]	@ (80009c8 <HAL_MspInit+0x44>)
 8000990:	f043 0301 	orr.w	r3, r3, #1
 8000994:	6613      	str	r3, [r2, #96]	@ 0x60
 8000996:	4b0c      	ldr	r3, [pc, #48]	@ (80009c8 <HAL_MspInit+0x44>)
 8000998:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800099a:	f003 0301 	and.w	r3, r3, #1
 800099e:	607b      	str	r3, [r7, #4]
 80009a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009a2:	4b09      	ldr	r3, [pc, #36]	@ (80009c8 <HAL_MspInit+0x44>)
 80009a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009a6:	4a08      	ldr	r2, [pc, #32]	@ (80009c8 <HAL_MspInit+0x44>)
 80009a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009ac:	6593      	str	r3, [r2, #88]	@ 0x58
 80009ae:	4b06      	ldr	r3, [pc, #24]	@ (80009c8 <HAL_MspInit+0x44>)
 80009b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009b6:	603b      	str	r3, [r7, #0]
 80009b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009ba:	bf00      	nop
 80009bc:	370c      	adds	r7, #12
 80009be:	46bd      	mov	sp, r7
 80009c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c4:	4770      	bx	lr
 80009c6:	bf00      	nop
 80009c8:	40021000 	.word	0x40021000

080009cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b0ac      	sub	sp, #176	@ 0xb0
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80009d8:	2200      	movs	r2, #0
 80009da:	601a      	str	r2, [r3, #0]
 80009dc:	605a      	str	r2, [r3, #4]
 80009de:	609a      	str	r2, [r3, #8]
 80009e0:	60da      	str	r2, [r3, #12]
 80009e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009e4:	f107 0314 	add.w	r3, r7, #20
 80009e8:	2288      	movs	r2, #136	@ 0x88
 80009ea:	2100      	movs	r1, #0
 80009ec:	4618      	mov	r0, r3
 80009ee:	f003 fdf3 	bl	80045d8 <memset>
  if(huart->Instance==USART2)
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	4a25      	ldr	r2, [pc, #148]	@ (8000a8c <HAL_UART_MspInit+0xc0>)
 80009f8:	4293      	cmp	r3, r2
 80009fa:	d143      	bne.n	8000a84 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80009fc:	2302      	movs	r3, #2
 80009fe:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000a00:	2300      	movs	r3, #0
 8000a02:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a04:	f107 0314 	add.w	r3, r7, #20
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f001 fb6d 	bl	80020e8 <HAL_RCCEx_PeriphCLKConfig>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d001      	beq.n	8000a18 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000a14:	f7ff ffb0 	bl	8000978 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a18:	4b1d      	ldr	r3, [pc, #116]	@ (8000a90 <HAL_UART_MspInit+0xc4>)
 8000a1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a1c:	4a1c      	ldr	r2, [pc, #112]	@ (8000a90 <HAL_UART_MspInit+0xc4>)
 8000a1e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a22:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a24:	4b1a      	ldr	r3, [pc, #104]	@ (8000a90 <HAL_UART_MspInit+0xc4>)
 8000a26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a2c:	613b      	str	r3, [r7, #16]
 8000a2e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a30:	4b17      	ldr	r3, [pc, #92]	@ (8000a90 <HAL_UART_MspInit+0xc4>)
 8000a32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a34:	4a16      	ldr	r2, [pc, #88]	@ (8000a90 <HAL_UART_MspInit+0xc4>)
 8000a36:	f043 0301 	orr.w	r3, r3, #1
 8000a3a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a3c:	4b14      	ldr	r3, [pc, #80]	@ (8000a90 <HAL_UART_MspInit+0xc4>)
 8000a3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a40:	f003 0301 	and.w	r3, r3, #1
 8000a44:	60fb      	str	r3, [r7, #12]
 8000a46:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a48:	230c      	movs	r3, #12
 8000a4a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a4e:	2302      	movs	r3, #2
 8000a50:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a54:	2300      	movs	r3, #0
 8000a56:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a5a:	2303      	movs	r3, #3
 8000a5c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a60:	2307      	movs	r3, #7
 8000a62:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a66:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a70:	f000 fae2 	bl	8001038 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000a74:	2200      	movs	r2, #0
 8000a76:	2100      	movs	r1, #0
 8000a78:	2026      	movs	r0, #38	@ 0x26
 8000a7a:	f000 fa28 	bl	8000ece <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000a7e:	2026      	movs	r0, #38	@ 0x26
 8000a80:	f000 fa41 	bl	8000f06 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000a84:	bf00      	nop
 8000a86:	37b0      	adds	r7, #176	@ 0xb0
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	40004400 	.word	0x40004400
 8000a90:	40021000 	.word	0x40021000

08000a94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a98:	bf00      	nop
 8000a9a:	e7fd      	b.n	8000a98 <NMI_Handler+0x4>

08000a9c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aa0:	bf00      	nop
 8000aa2:	e7fd      	b.n	8000aa0 <HardFault_Handler+0x4>

08000aa4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000aa8:	bf00      	nop
 8000aaa:	e7fd      	b.n	8000aa8 <MemManage_Handler+0x4>

08000aac <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ab0:	bf00      	nop
 8000ab2:	e7fd      	b.n	8000ab0 <BusFault_Handler+0x4>

08000ab4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ab8:	bf00      	nop
 8000aba:	e7fd      	b.n	8000ab8 <UsageFault_Handler+0x4>

08000abc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ac0:	bf00      	nop
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac8:	4770      	bx	lr

08000aca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aca:	b480      	push	{r7}
 8000acc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ace:	bf00      	nop
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad6:	4770      	bx	lr

08000ad8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000adc:	bf00      	nop
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr

08000ae6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ae6:	b580      	push	{r7, lr}
 8000ae8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000aea:	f000 f8d1 	bl	8000c90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000aee:	bf00      	nop
 8000af0:	bd80      	pop	{r7, pc}
	...

08000af4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b086      	sub	sp, #24
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000afc:	4a14      	ldr	r2, [pc, #80]	@ (8000b50 <_sbrk+0x5c>)
 8000afe:	4b15      	ldr	r3, [pc, #84]	@ (8000b54 <_sbrk+0x60>)
 8000b00:	1ad3      	subs	r3, r2, r3
 8000b02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b04:	697b      	ldr	r3, [r7, #20]
 8000b06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b08:	4b13      	ldr	r3, [pc, #76]	@ (8000b58 <_sbrk+0x64>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d102      	bne.n	8000b16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b10:	4b11      	ldr	r3, [pc, #68]	@ (8000b58 <_sbrk+0x64>)
 8000b12:	4a12      	ldr	r2, [pc, #72]	@ (8000b5c <_sbrk+0x68>)
 8000b14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b16:	4b10      	ldr	r3, [pc, #64]	@ (8000b58 <_sbrk+0x64>)
 8000b18:	681a      	ldr	r2, [r3, #0]
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	4413      	add	r3, r2
 8000b1e:	693a      	ldr	r2, [r7, #16]
 8000b20:	429a      	cmp	r2, r3
 8000b22:	d207      	bcs.n	8000b34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b24:	f003 fd60 	bl	80045e8 <__errno>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	220c      	movs	r2, #12
 8000b2c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b2e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b32:	e009      	b.n	8000b48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b34:	4b08      	ldr	r3, [pc, #32]	@ (8000b58 <_sbrk+0x64>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b3a:	4b07      	ldr	r3, [pc, #28]	@ (8000b58 <_sbrk+0x64>)
 8000b3c:	681a      	ldr	r2, [r3, #0]
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	4413      	add	r3, r2
 8000b42:	4a05      	ldr	r2, [pc, #20]	@ (8000b58 <_sbrk+0x64>)
 8000b44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b46:	68fb      	ldr	r3, [r7, #12]
}
 8000b48:	4618      	mov	r0, r3
 8000b4a:	3718      	adds	r7, #24
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	20018000 	.word	0x20018000
 8000b54:	00000400 	.word	0x00000400
 8000b58:	20000108 	.word	0x20000108
 8000b5c:	20000258 	.word	0x20000258

08000b60 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000b64:	4b06      	ldr	r3, [pc, #24]	@ (8000b80 <SystemInit+0x20>)
 8000b66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b6a:	4a05      	ldr	r2, [pc, #20]	@ (8000b80 <SystemInit+0x20>)
 8000b6c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b70:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000b74:	bf00      	nop
 8000b76:	46bd      	mov	sp, r7
 8000b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop
 8000b80:	e000ed00 	.word	0xe000ed00

08000b84 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000b84:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000bbc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b88:	f7ff ffea 	bl	8000b60 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b8c:	480c      	ldr	r0, [pc, #48]	@ (8000bc0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b8e:	490d      	ldr	r1, [pc, #52]	@ (8000bc4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b90:	4a0d      	ldr	r2, [pc, #52]	@ (8000bc8 <LoopForever+0xe>)
  movs r3, #0
 8000b92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b94:	e002      	b.n	8000b9c <LoopCopyDataInit>

08000b96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b9a:	3304      	adds	r3, #4

08000b9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ba0:	d3f9      	bcc.n	8000b96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ba2:	4a0a      	ldr	r2, [pc, #40]	@ (8000bcc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ba4:	4c0a      	ldr	r4, [pc, #40]	@ (8000bd0 <LoopForever+0x16>)
  movs r3, #0
 8000ba6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ba8:	e001      	b.n	8000bae <LoopFillZerobss>

08000baa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000baa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bac:	3204      	adds	r2, #4

08000bae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bb0:	d3fb      	bcc.n	8000baa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bb2:	f003 fd1f 	bl	80045f4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000bb6:	f7ff fcdb 	bl	8000570 <main>

08000bba <LoopForever>:

LoopForever:
    b LoopForever
 8000bba:	e7fe      	b.n	8000bba <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000bbc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000bc0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bc4:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000bc8:	0800518c 	.word	0x0800518c
  ldr r2, =_sbss
 8000bcc:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000bd0:	20000258 	.word	0x20000258

08000bd4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000bd4:	e7fe      	b.n	8000bd4 <ADC1_2_IRQHandler>
	...

08000bd8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000bde:	2300      	movs	r3, #0
 8000be0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000be2:	4b0c      	ldr	r3, [pc, #48]	@ (8000c14 <HAL_Init+0x3c>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	4a0b      	ldr	r2, [pc, #44]	@ (8000c14 <HAL_Init+0x3c>)
 8000be8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000bec:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bee:	2003      	movs	r0, #3
 8000bf0:	f000 f962 	bl	8000eb8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bf4:	2000      	movs	r0, #0
 8000bf6:	f000 f80f 	bl	8000c18 <HAL_InitTick>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d002      	beq.n	8000c06 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000c00:	2301      	movs	r3, #1
 8000c02:	71fb      	strb	r3, [r7, #7]
 8000c04:	e001      	b.n	8000c0a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c06:	f7ff febd 	bl	8000984 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c0a:	79fb      	ldrb	r3, [r7, #7]
}
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	3708      	adds	r7, #8
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	40022000 	.word	0x40022000

08000c18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b084      	sub	sp, #16
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c20:	2300      	movs	r3, #0
 8000c22:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000c24:	4b17      	ldr	r3, [pc, #92]	@ (8000c84 <HAL_InitTick+0x6c>)
 8000c26:	781b      	ldrb	r3, [r3, #0]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d023      	beq.n	8000c74 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000c2c:	4b16      	ldr	r3, [pc, #88]	@ (8000c88 <HAL_InitTick+0x70>)
 8000c2e:	681a      	ldr	r2, [r3, #0]
 8000c30:	4b14      	ldr	r3, [pc, #80]	@ (8000c84 <HAL_InitTick+0x6c>)
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	4619      	mov	r1, r3
 8000c36:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c42:	4618      	mov	r0, r3
 8000c44:	f000 f96d 	bl	8000f22 <HAL_SYSTICK_Config>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d10f      	bne.n	8000c6e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	2b0f      	cmp	r3, #15
 8000c52:	d809      	bhi.n	8000c68 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c54:	2200      	movs	r2, #0
 8000c56:	6879      	ldr	r1, [r7, #4]
 8000c58:	f04f 30ff 	mov.w	r0, #4294967295
 8000c5c:	f000 f937 	bl	8000ece <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c60:	4a0a      	ldr	r2, [pc, #40]	@ (8000c8c <HAL_InitTick+0x74>)
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	6013      	str	r3, [r2, #0]
 8000c66:	e007      	b.n	8000c78 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000c68:	2301      	movs	r3, #1
 8000c6a:	73fb      	strb	r3, [r7, #15]
 8000c6c:	e004      	b.n	8000c78 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c6e:	2301      	movs	r3, #1
 8000c70:	73fb      	strb	r3, [r7, #15]
 8000c72:	e001      	b.n	8000c78 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c74:	2301      	movs	r3, #1
 8000c76:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c78:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	3710      	adds	r7, #16
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	2000000c 	.word	0x2000000c
 8000c88:	20000004 	.word	0x20000004
 8000c8c:	20000008 	.word	0x20000008

08000c90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c94:	4b06      	ldr	r3, [pc, #24]	@ (8000cb0 <HAL_IncTick+0x20>)
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	461a      	mov	r2, r3
 8000c9a:	4b06      	ldr	r3, [pc, #24]	@ (8000cb4 <HAL_IncTick+0x24>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	4413      	add	r3, r2
 8000ca0:	4a04      	ldr	r2, [pc, #16]	@ (8000cb4 <HAL_IncTick+0x24>)
 8000ca2:	6013      	str	r3, [r2, #0]
}
 8000ca4:	bf00      	nop
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	2000000c 	.word	0x2000000c
 8000cb4:	2000010c 	.word	0x2000010c

08000cb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  return uwTick;
 8000cbc:	4b03      	ldr	r3, [pc, #12]	@ (8000ccc <HAL_GetTick+0x14>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
}
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop
 8000ccc:	2000010c 	.word	0x2000010c

08000cd0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b084      	sub	sp, #16
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cd8:	f7ff ffee 	bl	8000cb8 <HAL_GetTick>
 8000cdc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ce8:	d005      	beq.n	8000cf6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000cea:	4b0a      	ldr	r3, [pc, #40]	@ (8000d14 <HAL_Delay+0x44>)
 8000cec:	781b      	ldrb	r3, [r3, #0]
 8000cee:	461a      	mov	r2, r3
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	4413      	add	r3, r2
 8000cf4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000cf6:	bf00      	nop
 8000cf8:	f7ff ffde 	bl	8000cb8 <HAL_GetTick>
 8000cfc:	4602      	mov	r2, r0
 8000cfe:	68bb      	ldr	r3, [r7, #8]
 8000d00:	1ad3      	subs	r3, r2, r3
 8000d02:	68fa      	ldr	r2, [r7, #12]
 8000d04:	429a      	cmp	r2, r3
 8000d06:	d8f7      	bhi.n	8000cf8 <HAL_Delay+0x28>
  {
  }
}
 8000d08:	bf00      	nop
 8000d0a:	bf00      	nop
 8000d0c:	3710      	adds	r7, #16
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	2000000c 	.word	0x2000000c

08000d18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b085      	sub	sp, #20
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	f003 0307 	and.w	r3, r3, #7
 8000d26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d28:	4b0c      	ldr	r3, [pc, #48]	@ (8000d5c <__NVIC_SetPriorityGrouping+0x44>)
 8000d2a:	68db      	ldr	r3, [r3, #12]
 8000d2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d2e:	68ba      	ldr	r2, [r7, #8]
 8000d30:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d34:	4013      	ands	r3, r2
 8000d36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d3c:	68bb      	ldr	r3, [r7, #8]
 8000d3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d40:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d44:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d4a:	4a04      	ldr	r2, [pc, #16]	@ (8000d5c <__NVIC_SetPriorityGrouping+0x44>)
 8000d4c:	68bb      	ldr	r3, [r7, #8]
 8000d4e:	60d3      	str	r3, [r2, #12]
}
 8000d50:	bf00      	nop
 8000d52:	3714      	adds	r7, #20
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr
 8000d5c:	e000ed00 	.word	0xe000ed00

08000d60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d64:	4b04      	ldr	r3, [pc, #16]	@ (8000d78 <__NVIC_GetPriorityGrouping+0x18>)
 8000d66:	68db      	ldr	r3, [r3, #12]
 8000d68:	0a1b      	lsrs	r3, r3, #8
 8000d6a:	f003 0307 	and.w	r3, r3, #7
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr
 8000d78:	e000ed00 	.word	0xe000ed00

08000d7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b083      	sub	sp, #12
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	4603      	mov	r3, r0
 8000d84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	db0b      	blt.n	8000da6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d8e:	79fb      	ldrb	r3, [r7, #7]
 8000d90:	f003 021f 	and.w	r2, r3, #31
 8000d94:	4907      	ldr	r1, [pc, #28]	@ (8000db4 <__NVIC_EnableIRQ+0x38>)
 8000d96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d9a:	095b      	lsrs	r3, r3, #5
 8000d9c:	2001      	movs	r0, #1
 8000d9e:	fa00 f202 	lsl.w	r2, r0, r2
 8000da2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000da6:	bf00      	nop
 8000da8:	370c      	adds	r7, #12
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	e000e100 	.word	0xe000e100

08000db8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b083      	sub	sp, #12
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	6039      	str	r1, [r7, #0]
 8000dc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	db0a      	blt.n	8000de2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	b2da      	uxtb	r2, r3
 8000dd0:	490c      	ldr	r1, [pc, #48]	@ (8000e04 <__NVIC_SetPriority+0x4c>)
 8000dd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd6:	0112      	lsls	r2, r2, #4
 8000dd8:	b2d2      	uxtb	r2, r2
 8000dda:	440b      	add	r3, r1
 8000ddc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000de0:	e00a      	b.n	8000df8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	b2da      	uxtb	r2, r3
 8000de6:	4908      	ldr	r1, [pc, #32]	@ (8000e08 <__NVIC_SetPriority+0x50>)
 8000de8:	79fb      	ldrb	r3, [r7, #7]
 8000dea:	f003 030f 	and.w	r3, r3, #15
 8000dee:	3b04      	subs	r3, #4
 8000df0:	0112      	lsls	r2, r2, #4
 8000df2:	b2d2      	uxtb	r2, r2
 8000df4:	440b      	add	r3, r1
 8000df6:	761a      	strb	r2, [r3, #24]
}
 8000df8:	bf00      	nop
 8000dfa:	370c      	adds	r7, #12
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr
 8000e04:	e000e100 	.word	0xe000e100
 8000e08:	e000ed00 	.word	0xe000ed00

08000e0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b089      	sub	sp, #36	@ 0x24
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	60f8      	str	r0, [r7, #12]
 8000e14:	60b9      	str	r1, [r7, #8]
 8000e16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	f003 0307 	and.w	r3, r3, #7
 8000e1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e20:	69fb      	ldr	r3, [r7, #28]
 8000e22:	f1c3 0307 	rsb	r3, r3, #7
 8000e26:	2b04      	cmp	r3, #4
 8000e28:	bf28      	it	cs
 8000e2a:	2304      	movcs	r3, #4
 8000e2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e2e:	69fb      	ldr	r3, [r7, #28]
 8000e30:	3304      	adds	r3, #4
 8000e32:	2b06      	cmp	r3, #6
 8000e34:	d902      	bls.n	8000e3c <NVIC_EncodePriority+0x30>
 8000e36:	69fb      	ldr	r3, [r7, #28]
 8000e38:	3b03      	subs	r3, #3
 8000e3a:	e000      	b.n	8000e3e <NVIC_EncodePriority+0x32>
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e40:	f04f 32ff 	mov.w	r2, #4294967295
 8000e44:	69bb      	ldr	r3, [r7, #24]
 8000e46:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4a:	43da      	mvns	r2, r3
 8000e4c:	68bb      	ldr	r3, [r7, #8]
 8000e4e:	401a      	ands	r2, r3
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e54:	f04f 31ff 	mov.w	r1, #4294967295
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e5e:	43d9      	mvns	r1, r3
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e64:	4313      	orrs	r3, r2
         );
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	3724      	adds	r7, #36	@ 0x24
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr
	...

08000e74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	3b01      	subs	r3, #1
 8000e80:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000e84:	d301      	bcc.n	8000e8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e86:	2301      	movs	r3, #1
 8000e88:	e00f      	b.n	8000eaa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e8a:	4a0a      	ldr	r2, [pc, #40]	@ (8000eb4 <SysTick_Config+0x40>)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	3b01      	subs	r3, #1
 8000e90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e92:	210f      	movs	r1, #15
 8000e94:	f04f 30ff 	mov.w	r0, #4294967295
 8000e98:	f7ff ff8e 	bl	8000db8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e9c:	4b05      	ldr	r3, [pc, #20]	@ (8000eb4 <SysTick_Config+0x40>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ea2:	4b04      	ldr	r3, [pc, #16]	@ (8000eb4 <SysTick_Config+0x40>)
 8000ea4:	2207      	movs	r2, #7
 8000ea6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ea8:	2300      	movs	r3, #0
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	3708      	adds	r7, #8
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	e000e010 	.word	0xe000e010

08000eb8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ec0:	6878      	ldr	r0, [r7, #4]
 8000ec2:	f7ff ff29 	bl	8000d18 <__NVIC_SetPriorityGrouping>
}
 8000ec6:	bf00      	nop
 8000ec8:	3708      	adds	r7, #8
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}

08000ece <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ece:	b580      	push	{r7, lr}
 8000ed0:	b086      	sub	sp, #24
 8000ed2:	af00      	add	r7, sp, #0
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	60b9      	str	r1, [r7, #8]
 8000ed8:	607a      	str	r2, [r7, #4]
 8000eda:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000edc:	2300      	movs	r3, #0
 8000ede:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ee0:	f7ff ff3e 	bl	8000d60 <__NVIC_GetPriorityGrouping>
 8000ee4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ee6:	687a      	ldr	r2, [r7, #4]
 8000ee8:	68b9      	ldr	r1, [r7, #8]
 8000eea:	6978      	ldr	r0, [r7, #20]
 8000eec:	f7ff ff8e 	bl	8000e0c <NVIC_EncodePriority>
 8000ef0:	4602      	mov	r2, r0
 8000ef2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ef6:	4611      	mov	r1, r2
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f7ff ff5d 	bl	8000db8 <__NVIC_SetPriority>
}
 8000efe:	bf00      	nop
 8000f00:	3718      	adds	r7, #24
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}

08000f06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f06:	b580      	push	{r7, lr}
 8000f08:	b082      	sub	sp, #8
 8000f0a:	af00      	add	r7, sp, #0
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f14:	4618      	mov	r0, r3
 8000f16:	f7ff ff31 	bl	8000d7c <__NVIC_EnableIRQ>
}
 8000f1a:	bf00      	nop
 8000f1c:	3708      	adds	r7, #8
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}

08000f22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f22:	b580      	push	{r7, lr}
 8000f24:	b082      	sub	sp, #8
 8000f26:	af00      	add	r7, sp, #0
 8000f28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f2a:	6878      	ldr	r0, [r7, #4]
 8000f2c:	f7ff ffa2 	bl	8000e74 <SysTick_Config>
 8000f30:	4603      	mov	r3, r0
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	3708      	adds	r7, #8
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}

08000f3a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f3a:	b480      	push	{r7}
 8000f3c:	b085      	sub	sp, #20
 8000f3e:	af00      	add	r7, sp, #0
 8000f40:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f42:	2300      	movs	r3, #0
 8000f44:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000f4c:	b2db      	uxtb	r3, r3
 8000f4e:	2b02      	cmp	r3, #2
 8000f50:	d008      	beq.n	8000f64 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	2204      	movs	r2, #4
 8000f56:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000f60:	2301      	movs	r3, #1
 8000f62:	e022      	b.n	8000faa <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	681a      	ldr	r2, [r3, #0]
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	f022 020e 	bic.w	r2, r2, #14
 8000f72:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	681a      	ldr	r2, [r3, #0]
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	f022 0201 	bic.w	r2, r2, #1
 8000f82:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f88:	f003 021c 	and.w	r2, r3, #28
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f90:	2101      	movs	r1, #1
 8000f92:	fa01 f202 	lsl.w	r2, r1, r2
 8000f96:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8000fa8:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	3714      	adds	r7, #20
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr

08000fb6 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000fb6:	b580      	push	{r7, lr}
 8000fb8:	b084      	sub	sp, #16
 8000fba:	af00      	add	r7, sp, #0
 8000fbc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000fc8:	b2db      	uxtb	r3, r3
 8000fca:	2b02      	cmp	r3, #2
 8000fcc:	d005      	beq.n	8000fda <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	2204      	movs	r2, #4
 8000fd2:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	73fb      	strb	r3, [r7, #15]
 8000fd8:	e029      	b.n	800102e <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	681a      	ldr	r2, [r3, #0]
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	f022 020e 	bic.w	r2, r2, #14
 8000fe8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	681a      	ldr	r2, [r3, #0]
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f022 0201 	bic.w	r2, r2, #1
 8000ff8:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ffe:	f003 021c 	and.w	r2, r3, #28
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001006:	2101      	movs	r1, #1
 8001008:	fa01 f202 	lsl.w	r2, r1, r2
 800100c:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	2201      	movs	r2, #1
 8001012:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	2200      	movs	r2, #0
 800101a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001022:	2b00      	cmp	r3, #0
 8001024:	d003      	beq.n	800102e <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800102a:	6878      	ldr	r0, [r7, #4]
 800102c:	4798      	blx	r3
    }
  }
  return status;
 800102e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001030:	4618      	mov	r0, r3
 8001032:	3710      	adds	r7, #16
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}

08001038 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001038:	b480      	push	{r7}
 800103a:	b087      	sub	sp, #28
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
 8001040:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001042:	2300      	movs	r3, #0
 8001044:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001046:	e17f      	b.n	8001348 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	681a      	ldr	r2, [r3, #0]
 800104c:	2101      	movs	r1, #1
 800104e:	697b      	ldr	r3, [r7, #20]
 8001050:	fa01 f303 	lsl.w	r3, r1, r3
 8001054:	4013      	ands	r3, r2
 8001056:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	2b00      	cmp	r3, #0
 800105c:	f000 8171 	beq.w	8001342 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	f003 0303 	and.w	r3, r3, #3
 8001068:	2b01      	cmp	r3, #1
 800106a:	d005      	beq.n	8001078 <HAL_GPIO_Init+0x40>
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	f003 0303 	and.w	r3, r3, #3
 8001074:	2b02      	cmp	r3, #2
 8001076:	d130      	bne.n	80010da <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	689b      	ldr	r3, [r3, #8]
 800107c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800107e:	697b      	ldr	r3, [r7, #20]
 8001080:	005b      	lsls	r3, r3, #1
 8001082:	2203      	movs	r2, #3
 8001084:	fa02 f303 	lsl.w	r3, r2, r3
 8001088:	43db      	mvns	r3, r3
 800108a:	693a      	ldr	r2, [r7, #16]
 800108c:	4013      	ands	r3, r2
 800108e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	68da      	ldr	r2, [r3, #12]
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	005b      	lsls	r3, r3, #1
 8001098:	fa02 f303 	lsl.w	r3, r2, r3
 800109c:	693a      	ldr	r2, [r7, #16]
 800109e:	4313      	orrs	r3, r2
 80010a0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	693a      	ldr	r2, [r7, #16]
 80010a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80010ae:	2201      	movs	r2, #1
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	fa02 f303 	lsl.w	r3, r2, r3
 80010b6:	43db      	mvns	r3, r3
 80010b8:	693a      	ldr	r2, [r7, #16]
 80010ba:	4013      	ands	r3, r2
 80010bc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	091b      	lsrs	r3, r3, #4
 80010c4:	f003 0201 	and.w	r2, r3, #1
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	fa02 f303 	lsl.w	r3, r2, r3
 80010ce:	693a      	ldr	r2, [r7, #16]
 80010d0:	4313      	orrs	r3, r2
 80010d2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	693a      	ldr	r2, [r7, #16]
 80010d8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	f003 0303 	and.w	r3, r3, #3
 80010e2:	2b03      	cmp	r3, #3
 80010e4:	d118      	bne.n	8001118 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010ea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80010ec:	2201      	movs	r2, #1
 80010ee:	697b      	ldr	r3, [r7, #20]
 80010f0:	fa02 f303 	lsl.w	r3, r2, r3
 80010f4:	43db      	mvns	r3, r3
 80010f6:	693a      	ldr	r2, [r7, #16]
 80010f8:	4013      	ands	r3, r2
 80010fa:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	08db      	lsrs	r3, r3, #3
 8001102:	f003 0201 	and.w	r2, r3, #1
 8001106:	697b      	ldr	r3, [r7, #20]
 8001108:	fa02 f303 	lsl.w	r3, r2, r3
 800110c:	693a      	ldr	r2, [r7, #16]
 800110e:	4313      	orrs	r3, r2
 8001110:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	693a      	ldr	r2, [r7, #16]
 8001116:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	f003 0303 	and.w	r3, r3, #3
 8001120:	2b03      	cmp	r3, #3
 8001122:	d017      	beq.n	8001154 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	68db      	ldr	r3, [r3, #12]
 8001128:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	005b      	lsls	r3, r3, #1
 800112e:	2203      	movs	r2, #3
 8001130:	fa02 f303 	lsl.w	r3, r2, r3
 8001134:	43db      	mvns	r3, r3
 8001136:	693a      	ldr	r2, [r7, #16]
 8001138:	4013      	ands	r3, r2
 800113a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	689a      	ldr	r2, [r3, #8]
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	005b      	lsls	r3, r3, #1
 8001144:	fa02 f303 	lsl.w	r3, r2, r3
 8001148:	693a      	ldr	r2, [r7, #16]
 800114a:	4313      	orrs	r3, r2
 800114c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	693a      	ldr	r2, [r7, #16]
 8001152:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	f003 0303 	and.w	r3, r3, #3
 800115c:	2b02      	cmp	r3, #2
 800115e:	d123      	bne.n	80011a8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	08da      	lsrs	r2, r3, #3
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	3208      	adds	r2, #8
 8001168:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800116c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800116e:	697b      	ldr	r3, [r7, #20]
 8001170:	f003 0307 	and.w	r3, r3, #7
 8001174:	009b      	lsls	r3, r3, #2
 8001176:	220f      	movs	r2, #15
 8001178:	fa02 f303 	lsl.w	r3, r2, r3
 800117c:	43db      	mvns	r3, r3
 800117e:	693a      	ldr	r2, [r7, #16]
 8001180:	4013      	ands	r3, r2
 8001182:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	691a      	ldr	r2, [r3, #16]
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	f003 0307 	and.w	r3, r3, #7
 800118e:	009b      	lsls	r3, r3, #2
 8001190:	fa02 f303 	lsl.w	r3, r2, r3
 8001194:	693a      	ldr	r2, [r7, #16]
 8001196:	4313      	orrs	r3, r2
 8001198:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800119a:	697b      	ldr	r3, [r7, #20]
 800119c:	08da      	lsrs	r2, r3, #3
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	3208      	adds	r2, #8
 80011a2:	6939      	ldr	r1, [r7, #16]
 80011a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80011ae:	697b      	ldr	r3, [r7, #20]
 80011b0:	005b      	lsls	r3, r3, #1
 80011b2:	2203      	movs	r2, #3
 80011b4:	fa02 f303 	lsl.w	r3, r2, r3
 80011b8:	43db      	mvns	r3, r3
 80011ba:	693a      	ldr	r2, [r7, #16]
 80011bc:	4013      	ands	r3, r2
 80011be:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	f003 0203 	and.w	r2, r3, #3
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	005b      	lsls	r3, r3, #1
 80011cc:	fa02 f303 	lsl.w	r3, r2, r3
 80011d0:	693a      	ldr	r2, [r7, #16]
 80011d2:	4313      	orrs	r3, r2
 80011d4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	693a      	ldr	r2, [r7, #16]
 80011da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	f000 80ac 	beq.w	8001342 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ea:	4b5f      	ldr	r3, [pc, #380]	@ (8001368 <HAL_GPIO_Init+0x330>)
 80011ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011ee:	4a5e      	ldr	r2, [pc, #376]	@ (8001368 <HAL_GPIO_Init+0x330>)
 80011f0:	f043 0301 	orr.w	r3, r3, #1
 80011f4:	6613      	str	r3, [r2, #96]	@ 0x60
 80011f6:	4b5c      	ldr	r3, [pc, #368]	@ (8001368 <HAL_GPIO_Init+0x330>)
 80011f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011fa:	f003 0301 	and.w	r3, r3, #1
 80011fe:	60bb      	str	r3, [r7, #8]
 8001200:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001202:	4a5a      	ldr	r2, [pc, #360]	@ (800136c <HAL_GPIO_Init+0x334>)
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	089b      	lsrs	r3, r3, #2
 8001208:	3302      	adds	r3, #2
 800120a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800120e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	f003 0303 	and.w	r3, r3, #3
 8001216:	009b      	lsls	r3, r3, #2
 8001218:	220f      	movs	r2, #15
 800121a:	fa02 f303 	lsl.w	r3, r2, r3
 800121e:	43db      	mvns	r3, r3
 8001220:	693a      	ldr	r2, [r7, #16]
 8001222:	4013      	ands	r3, r2
 8001224:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800122c:	d025      	beq.n	800127a <HAL_GPIO_Init+0x242>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	4a4f      	ldr	r2, [pc, #316]	@ (8001370 <HAL_GPIO_Init+0x338>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d01f      	beq.n	8001276 <HAL_GPIO_Init+0x23e>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	4a4e      	ldr	r2, [pc, #312]	@ (8001374 <HAL_GPIO_Init+0x33c>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d019      	beq.n	8001272 <HAL_GPIO_Init+0x23a>
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	4a4d      	ldr	r2, [pc, #308]	@ (8001378 <HAL_GPIO_Init+0x340>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d013      	beq.n	800126e <HAL_GPIO_Init+0x236>
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	4a4c      	ldr	r2, [pc, #304]	@ (800137c <HAL_GPIO_Init+0x344>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d00d      	beq.n	800126a <HAL_GPIO_Init+0x232>
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	4a4b      	ldr	r2, [pc, #300]	@ (8001380 <HAL_GPIO_Init+0x348>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d007      	beq.n	8001266 <HAL_GPIO_Init+0x22e>
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	4a4a      	ldr	r2, [pc, #296]	@ (8001384 <HAL_GPIO_Init+0x34c>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d101      	bne.n	8001262 <HAL_GPIO_Init+0x22a>
 800125e:	2306      	movs	r3, #6
 8001260:	e00c      	b.n	800127c <HAL_GPIO_Init+0x244>
 8001262:	2307      	movs	r3, #7
 8001264:	e00a      	b.n	800127c <HAL_GPIO_Init+0x244>
 8001266:	2305      	movs	r3, #5
 8001268:	e008      	b.n	800127c <HAL_GPIO_Init+0x244>
 800126a:	2304      	movs	r3, #4
 800126c:	e006      	b.n	800127c <HAL_GPIO_Init+0x244>
 800126e:	2303      	movs	r3, #3
 8001270:	e004      	b.n	800127c <HAL_GPIO_Init+0x244>
 8001272:	2302      	movs	r3, #2
 8001274:	e002      	b.n	800127c <HAL_GPIO_Init+0x244>
 8001276:	2301      	movs	r3, #1
 8001278:	e000      	b.n	800127c <HAL_GPIO_Init+0x244>
 800127a:	2300      	movs	r3, #0
 800127c:	697a      	ldr	r2, [r7, #20]
 800127e:	f002 0203 	and.w	r2, r2, #3
 8001282:	0092      	lsls	r2, r2, #2
 8001284:	4093      	lsls	r3, r2
 8001286:	693a      	ldr	r2, [r7, #16]
 8001288:	4313      	orrs	r3, r2
 800128a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800128c:	4937      	ldr	r1, [pc, #220]	@ (800136c <HAL_GPIO_Init+0x334>)
 800128e:	697b      	ldr	r3, [r7, #20]
 8001290:	089b      	lsrs	r3, r3, #2
 8001292:	3302      	adds	r3, #2
 8001294:	693a      	ldr	r2, [r7, #16]
 8001296:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800129a:	4b3b      	ldr	r3, [pc, #236]	@ (8001388 <HAL_GPIO_Init+0x350>)
 800129c:	689b      	ldr	r3, [r3, #8]
 800129e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	43db      	mvns	r3, r3
 80012a4:	693a      	ldr	r2, [r7, #16]
 80012a6:	4013      	ands	r3, r2
 80012a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d003      	beq.n	80012be <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80012b6:	693a      	ldr	r2, [r7, #16]
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	4313      	orrs	r3, r2
 80012bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80012be:	4a32      	ldr	r2, [pc, #200]	@ (8001388 <HAL_GPIO_Init+0x350>)
 80012c0:	693b      	ldr	r3, [r7, #16]
 80012c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80012c4:	4b30      	ldr	r3, [pc, #192]	@ (8001388 <HAL_GPIO_Init+0x350>)
 80012c6:	68db      	ldr	r3, [r3, #12]
 80012c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	43db      	mvns	r3, r3
 80012ce:	693a      	ldr	r2, [r7, #16]
 80012d0:	4013      	ands	r3, r2
 80012d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d003      	beq.n	80012e8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80012e0:	693a      	ldr	r2, [r7, #16]
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	4313      	orrs	r3, r2
 80012e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80012e8:	4a27      	ldr	r2, [pc, #156]	@ (8001388 <HAL_GPIO_Init+0x350>)
 80012ea:	693b      	ldr	r3, [r7, #16]
 80012ec:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80012ee:	4b26      	ldr	r3, [pc, #152]	@ (8001388 <HAL_GPIO_Init+0x350>)
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	43db      	mvns	r3, r3
 80012f8:	693a      	ldr	r2, [r7, #16]
 80012fa:	4013      	ands	r3, r2
 80012fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001306:	2b00      	cmp	r3, #0
 8001308:	d003      	beq.n	8001312 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800130a:	693a      	ldr	r2, [r7, #16]
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	4313      	orrs	r3, r2
 8001310:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001312:	4a1d      	ldr	r2, [pc, #116]	@ (8001388 <HAL_GPIO_Init+0x350>)
 8001314:	693b      	ldr	r3, [r7, #16]
 8001316:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001318:	4b1b      	ldr	r3, [pc, #108]	@ (8001388 <HAL_GPIO_Init+0x350>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	43db      	mvns	r3, r3
 8001322:	693a      	ldr	r2, [r7, #16]
 8001324:	4013      	ands	r3, r2
 8001326:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001330:	2b00      	cmp	r3, #0
 8001332:	d003      	beq.n	800133c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001334:	693a      	ldr	r2, [r7, #16]
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	4313      	orrs	r3, r2
 800133a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800133c:	4a12      	ldr	r2, [pc, #72]	@ (8001388 <HAL_GPIO_Init+0x350>)
 800133e:	693b      	ldr	r3, [r7, #16]
 8001340:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001342:	697b      	ldr	r3, [r7, #20]
 8001344:	3301      	adds	r3, #1
 8001346:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	681a      	ldr	r2, [r3, #0]
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	fa22 f303 	lsr.w	r3, r2, r3
 8001352:	2b00      	cmp	r3, #0
 8001354:	f47f ae78 	bne.w	8001048 <HAL_GPIO_Init+0x10>
  }
}
 8001358:	bf00      	nop
 800135a:	bf00      	nop
 800135c:	371c      	adds	r7, #28
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr
 8001366:	bf00      	nop
 8001368:	40021000 	.word	0x40021000
 800136c:	40010000 	.word	0x40010000
 8001370:	48000400 	.word	0x48000400
 8001374:	48000800 	.word	0x48000800
 8001378:	48000c00 	.word	0x48000c00
 800137c:	48001000 	.word	0x48001000
 8001380:	48001400 	.word	0x48001400
 8001384:	48001800 	.word	0x48001800
 8001388:	40010400 	.word	0x40010400

0800138c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800138c:	b480      	push	{r7}
 800138e:	b085      	sub	sp, #20
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
 8001394:	460b      	mov	r3, r1
 8001396:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	691a      	ldr	r2, [r3, #16]
 800139c:	887b      	ldrh	r3, [r7, #2]
 800139e:	4013      	ands	r3, r2
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d002      	beq.n	80013aa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80013a4:	2301      	movs	r3, #1
 80013a6:	73fb      	strb	r3, [r7, #15]
 80013a8:	e001      	b.n	80013ae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80013aa:	2300      	movs	r3, #0
 80013ac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80013ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80013b0:	4618      	mov	r0, r3
 80013b2:	3714      	adds	r7, #20
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr

080013bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013bc:	b480      	push	{r7}
 80013be:	b083      	sub	sp, #12
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
 80013c4:	460b      	mov	r3, r1
 80013c6:	807b      	strh	r3, [r7, #2]
 80013c8:	4613      	mov	r3, r2
 80013ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013cc:	787b      	ldrb	r3, [r7, #1]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d003      	beq.n	80013da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80013d2:	887a      	ldrh	r2, [r7, #2]
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80013d8:	e002      	b.n	80013e0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80013da:	887a      	ldrh	r2, [r7, #2]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80013e0:	bf00      	nop
 80013e2:	370c      	adds	r7, #12
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr

080013ec <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b085      	sub	sp, #20
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
 80013f4:	460b      	mov	r3, r1
 80013f6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	695b      	ldr	r3, [r3, #20]
 80013fc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80013fe:	887a      	ldrh	r2, [r7, #2]
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	4013      	ands	r3, r2
 8001404:	041a      	lsls	r2, r3, #16
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	43d9      	mvns	r1, r3
 800140a:	887b      	ldrh	r3, [r7, #2]
 800140c:	400b      	ands	r3, r1
 800140e:	431a      	orrs	r2, r3
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	619a      	str	r2, [r3, #24]
}
 8001414:	bf00      	nop
 8001416:	3714      	adds	r7, #20
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr

08001420 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001424:	4b04      	ldr	r3, [pc, #16]	@ (8001438 <HAL_PWREx_GetVoltageRange+0x18>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800142c:	4618      	mov	r0, r3
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr
 8001436:	bf00      	nop
 8001438:	40007000 	.word	0x40007000

0800143c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800143c:	b480      	push	{r7}
 800143e:	b085      	sub	sp, #20
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800144a:	d130      	bne.n	80014ae <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800144c:	4b23      	ldr	r3, [pc, #140]	@ (80014dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001454:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001458:	d038      	beq.n	80014cc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800145a:	4b20      	ldr	r3, [pc, #128]	@ (80014dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001462:	4a1e      	ldr	r2, [pc, #120]	@ (80014dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001464:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001468:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800146a:	4b1d      	ldr	r3, [pc, #116]	@ (80014e0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	2232      	movs	r2, #50	@ 0x32
 8001470:	fb02 f303 	mul.w	r3, r2, r3
 8001474:	4a1b      	ldr	r2, [pc, #108]	@ (80014e4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001476:	fba2 2303 	umull	r2, r3, r2, r3
 800147a:	0c9b      	lsrs	r3, r3, #18
 800147c:	3301      	adds	r3, #1
 800147e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001480:	e002      	b.n	8001488 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	3b01      	subs	r3, #1
 8001486:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001488:	4b14      	ldr	r3, [pc, #80]	@ (80014dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800148a:	695b      	ldr	r3, [r3, #20]
 800148c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001490:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001494:	d102      	bne.n	800149c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d1f2      	bne.n	8001482 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800149c:	4b0f      	ldr	r3, [pc, #60]	@ (80014dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800149e:	695b      	ldr	r3, [r3, #20]
 80014a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80014a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80014a8:	d110      	bne.n	80014cc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80014aa:	2303      	movs	r3, #3
 80014ac:	e00f      	b.n	80014ce <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80014ae:	4b0b      	ldr	r3, [pc, #44]	@ (80014dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80014b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80014ba:	d007      	beq.n	80014cc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80014bc:	4b07      	ldr	r3, [pc, #28]	@ (80014dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80014c4:	4a05      	ldr	r2, [pc, #20]	@ (80014dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014c6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80014ca:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80014cc:	2300      	movs	r3, #0
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	3714      	adds	r7, #20
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr
 80014da:	bf00      	nop
 80014dc:	40007000 	.word	0x40007000
 80014e0:	20000004 	.word	0x20000004
 80014e4:	431bde83 	.word	0x431bde83

080014e8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b088      	sub	sp, #32
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d101      	bne.n	80014fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014f6:	2301      	movs	r3, #1
 80014f8:	e3ca      	b.n	8001c90 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80014fa:	4b97      	ldr	r3, [pc, #604]	@ (8001758 <HAL_RCC_OscConfig+0x270>)
 80014fc:	689b      	ldr	r3, [r3, #8]
 80014fe:	f003 030c 	and.w	r3, r3, #12
 8001502:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001504:	4b94      	ldr	r3, [pc, #592]	@ (8001758 <HAL_RCC_OscConfig+0x270>)
 8001506:	68db      	ldr	r3, [r3, #12]
 8001508:	f003 0303 	and.w	r3, r3, #3
 800150c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f003 0310 	and.w	r3, r3, #16
 8001516:	2b00      	cmp	r3, #0
 8001518:	f000 80e4 	beq.w	80016e4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800151c:	69bb      	ldr	r3, [r7, #24]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d007      	beq.n	8001532 <HAL_RCC_OscConfig+0x4a>
 8001522:	69bb      	ldr	r3, [r7, #24]
 8001524:	2b0c      	cmp	r3, #12
 8001526:	f040 808b 	bne.w	8001640 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	2b01      	cmp	r3, #1
 800152e:	f040 8087 	bne.w	8001640 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001532:	4b89      	ldr	r3, [pc, #548]	@ (8001758 <HAL_RCC_OscConfig+0x270>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f003 0302 	and.w	r3, r3, #2
 800153a:	2b00      	cmp	r3, #0
 800153c:	d005      	beq.n	800154a <HAL_RCC_OscConfig+0x62>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	699b      	ldr	r3, [r3, #24]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d101      	bne.n	800154a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001546:	2301      	movs	r3, #1
 8001548:	e3a2      	b.n	8001c90 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6a1a      	ldr	r2, [r3, #32]
 800154e:	4b82      	ldr	r3, [pc, #520]	@ (8001758 <HAL_RCC_OscConfig+0x270>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f003 0308 	and.w	r3, r3, #8
 8001556:	2b00      	cmp	r3, #0
 8001558:	d004      	beq.n	8001564 <HAL_RCC_OscConfig+0x7c>
 800155a:	4b7f      	ldr	r3, [pc, #508]	@ (8001758 <HAL_RCC_OscConfig+0x270>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001562:	e005      	b.n	8001570 <HAL_RCC_OscConfig+0x88>
 8001564:	4b7c      	ldr	r3, [pc, #496]	@ (8001758 <HAL_RCC_OscConfig+0x270>)
 8001566:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800156a:	091b      	lsrs	r3, r3, #4
 800156c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001570:	4293      	cmp	r3, r2
 8001572:	d223      	bcs.n	80015bc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6a1b      	ldr	r3, [r3, #32]
 8001578:	4618      	mov	r0, r3
 800157a:	f000 fd55 	bl	8002028 <RCC_SetFlashLatencyFromMSIRange>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d001      	beq.n	8001588 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001584:	2301      	movs	r3, #1
 8001586:	e383      	b.n	8001c90 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001588:	4b73      	ldr	r3, [pc, #460]	@ (8001758 <HAL_RCC_OscConfig+0x270>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a72      	ldr	r2, [pc, #456]	@ (8001758 <HAL_RCC_OscConfig+0x270>)
 800158e:	f043 0308 	orr.w	r3, r3, #8
 8001592:	6013      	str	r3, [r2, #0]
 8001594:	4b70      	ldr	r3, [pc, #448]	@ (8001758 <HAL_RCC_OscConfig+0x270>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6a1b      	ldr	r3, [r3, #32]
 80015a0:	496d      	ldr	r1, [pc, #436]	@ (8001758 <HAL_RCC_OscConfig+0x270>)
 80015a2:	4313      	orrs	r3, r2
 80015a4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015a6:	4b6c      	ldr	r3, [pc, #432]	@ (8001758 <HAL_RCC_OscConfig+0x270>)
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	69db      	ldr	r3, [r3, #28]
 80015b2:	021b      	lsls	r3, r3, #8
 80015b4:	4968      	ldr	r1, [pc, #416]	@ (8001758 <HAL_RCC_OscConfig+0x270>)
 80015b6:	4313      	orrs	r3, r2
 80015b8:	604b      	str	r3, [r1, #4]
 80015ba:	e025      	b.n	8001608 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015bc:	4b66      	ldr	r3, [pc, #408]	@ (8001758 <HAL_RCC_OscConfig+0x270>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a65      	ldr	r2, [pc, #404]	@ (8001758 <HAL_RCC_OscConfig+0x270>)
 80015c2:	f043 0308 	orr.w	r3, r3, #8
 80015c6:	6013      	str	r3, [r2, #0]
 80015c8:	4b63      	ldr	r3, [pc, #396]	@ (8001758 <HAL_RCC_OscConfig+0x270>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6a1b      	ldr	r3, [r3, #32]
 80015d4:	4960      	ldr	r1, [pc, #384]	@ (8001758 <HAL_RCC_OscConfig+0x270>)
 80015d6:	4313      	orrs	r3, r2
 80015d8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015da:	4b5f      	ldr	r3, [pc, #380]	@ (8001758 <HAL_RCC_OscConfig+0x270>)
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	69db      	ldr	r3, [r3, #28]
 80015e6:	021b      	lsls	r3, r3, #8
 80015e8:	495b      	ldr	r1, [pc, #364]	@ (8001758 <HAL_RCC_OscConfig+0x270>)
 80015ea:	4313      	orrs	r3, r2
 80015ec:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80015ee:	69bb      	ldr	r3, [r7, #24]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d109      	bne.n	8001608 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6a1b      	ldr	r3, [r3, #32]
 80015f8:	4618      	mov	r0, r3
 80015fa:	f000 fd15 	bl	8002028 <RCC_SetFlashLatencyFromMSIRange>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d001      	beq.n	8001608 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001604:	2301      	movs	r3, #1
 8001606:	e343      	b.n	8001c90 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001608:	f000 fc4a 	bl	8001ea0 <HAL_RCC_GetSysClockFreq>
 800160c:	4602      	mov	r2, r0
 800160e:	4b52      	ldr	r3, [pc, #328]	@ (8001758 <HAL_RCC_OscConfig+0x270>)
 8001610:	689b      	ldr	r3, [r3, #8]
 8001612:	091b      	lsrs	r3, r3, #4
 8001614:	f003 030f 	and.w	r3, r3, #15
 8001618:	4950      	ldr	r1, [pc, #320]	@ (800175c <HAL_RCC_OscConfig+0x274>)
 800161a:	5ccb      	ldrb	r3, [r1, r3]
 800161c:	f003 031f 	and.w	r3, r3, #31
 8001620:	fa22 f303 	lsr.w	r3, r2, r3
 8001624:	4a4e      	ldr	r2, [pc, #312]	@ (8001760 <HAL_RCC_OscConfig+0x278>)
 8001626:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001628:	4b4e      	ldr	r3, [pc, #312]	@ (8001764 <HAL_RCC_OscConfig+0x27c>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4618      	mov	r0, r3
 800162e:	f7ff faf3 	bl	8000c18 <HAL_InitTick>
 8001632:	4603      	mov	r3, r0
 8001634:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001636:	7bfb      	ldrb	r3, [r7, #15]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d052      	beq.n	80016e2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800163c:	7bfb      	ldrb	r3, [r7, #15]
 800163e:	e327      	b.n	8001c90 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	699b      	ldr	r3, [r3, #24]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d032      	beq.n	80016ae <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001648:	4b43      	ldr	r3, [pc, #268]	@ (8001758 <HAL_RCC_OscConfig+0x270>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a42      	ldr	r2, [pc, #264]	@ (8001758 <HAL_RCC_OscConfig+0x270>)
 800164e:	f043 0301 	orr.w	r3, r3, #1
 8001652:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001654:	f7ff fb30 	bl	8000cb8 <HAL_GetTick>
 8001658:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800165a:	e008      	b.n	800166e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800165c:	f7ff fb2c 	bl	8000cb8 <HAL_GetTick>
 8001660:	4602      	mov	r2, r0
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	1ad3      	subs	r3, r2, r3
 8001666:	2b02      	cmp	r3, #2
 8001668:	d901      	bls.n	800166e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800166a:	2303      	movs	r3, #3
 800166c:	e310      	b.n	8001c90 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800166e:	4b3a      	ldr	r3, [pc, #232]	@ (8001758 <HAL_RCC_OscConfig+0x270>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f003 0302 	and.w	r3, r3, #2
 8001676:	2b00      	cmp	r3, #0
 8001678:	d0f0      	beq.n	800165c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800167a:	4b37      	ldr	r3, [pc, #220]	@ (8001758 <HAL_RCC_OscConfig+0x270>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4a36      	ldr	r2, [pc, #216]	@ (8001758 <HAL_RCC_OscConfig+0x270>)
 8001680:	f043 0308 	orr.w	r3, r3, #8
 8001684:	6013      	str	r3, [r2, #0]
 8001686:	4b34      	ldr	r3, [pc, #208]	@ (8001758 <HAL_RCC_OscConfig+0x270>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6a1b      	ldr	r3, [r3, #32]
 8001692:	4931      	ldr	r1, [pc, #196]	@ (8001758 <HAL_RCC_OscConfig+0x270>)
 8001694:	4313      	orrs	r3, r2
 8001696:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001698:	4b2f      	ldr	r3, [pc, #188]	@ (8001758 <HAL_RCC_OscConfig+0x270>)
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	69db      	ldr	r3, [r3, #28]
 80016a4:	021b      	lsls	r3, r3, #8
 80016a6:	492c      	ldr	r1, [pc, #176]	@ (8001758 <HAL_RCC_OscConfig+0x270>)
 80016a8:	4313      	orrs	r3, r2
 80016aa:	604b      	str	r3, [r1, #4]
 80016ac:	e01a      	b.n	80016e4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80016ae:	4b2a      	ldr	r3, [pc, #168]	@ (8001758 <HAL_RCC_OscConfig+0x270>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4a29      	ldr	r2, [pc, #164]	@ (8001758 <HAL_RCC_OscConfig+0x270>)
 80016b4:	f023 0301 	bic.w	r3, r3, #1
 80016b8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80016ba:	f7ff fafd 	bl	8000cb8 <HAL_GetTick>
 80016be:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80016c0:	e008      	b.n	80016d4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80016c2:	f7ff faf9 	bl	8000cb8 <HAL_GetTick>
 80016c6:	4602      	mov	r2, r0
 80016c8:	693b      	ldr	r3, [r7, #16]
 80016ca:	1ad3      	subs	r3, r2, r3
 80016cc:	2b02      	cmp	r3, #2
 80016ce:	d901      	bls.n	80016d4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80016d0:	2303      	movs	r3, #3
 80016d2:	e2dd      	b.n	8001c90 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80016d4:	4b20      	ldr	r3, [pc, #128]	@ (8001758 <HAL_RCC_OscConfig+0x270>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f003 0302 	and.w	r3, r3, #2
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d1f0      	bne.n	80016c2 <HAL_RCC_OscConfig+0x1da>
 80016e0:	e000      	b.n	80016e4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80016e2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f003 0301 	and.w	r3, r3, #1
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d074      	beq.n	80017da <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80016f0:	69bb      	ldr	r3, [r7, #24]
 80016f2:	2b08      	cmp	r3, #8
 80016f4:	d005      	beq.n	8001702 <HAL_RCC_OscConfig+0x21a>
 80016f6:	69bb      	ldr	r3, [r7, #24]
 80016f8:	2b0c      	cmp	r3, #12
 80016fa:	d10e      	bne.n	800171a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	2b03      	cmp	r3, #3
 8001700:	d10b      	bne.n	800171a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001702:	4b15      	ldr	r3, [pc, #84]	@ (8001758 <HAL_RCC_OscConfig+0x270>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800170a:	2b00      	cmp	r3, #0
 800170c:	d064      	beq.n	80017d8 <HAL_RCC_OscConfig+0x2f0>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d160      	bne.n	80017d8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001716:	2301      	movs	r3, #1
 8001718:	e2ba      	b.n	8001c90 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001722:	d106      	bne.n	8001732 <HAL_RCC_OscConfig+0x24a>
 8001724:	4b0c      	ldr	r3, [pc, #48]	@ (8001758 <HAL_RCC_OscConfig+0x270>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a0b      	ldr	r2, [pc, #44]	@ (8001758 <HAL_RCC_OscConfig+0x270>)
 800172a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800172e:	6013      	str	r3, [r2, #0]
 8001730:	e026      	b.n	8001780 <HAL_RCC_OscConfig+0x298>
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800173a:	d115      	bne.n	8001768 <HAL_RCC_OscConfig+0x280>
 800173c:	4b06      	ldr	r3, [pc, #24]	@ (8001758 <HAL_RCC_OscConfig+0x270>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a05      	ldr	r2, [pc, #20]	@ (8001758 <HAL_RCC_OscConfig+0x270>)
 8001742:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001746:	6013      	str	r3, [r2, #0]
 8001748:	4b03      	ldr	r3, [pc, #12]	@ (8001758 <HAL_RCC_OscConfig+0x270>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a02      	ldr	r2, [pc, #8]	@ (8001758 <HAL_RCC_OscConfig+0x270>)
 800174e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001752:	6013      	str	r3, [r2, #0]
 8001754:	e014      	b.n	8001780 <HAL_RCC_OscConfig+0x298>
 8001756:	bf00      	nop
 8001758:	40021000 	.word	0x40021000
 800175c:	08005000 	.word	0x08005000
 8001760:	20000004 	.word	0x20000004
 8001764:	20000008 	.word	0x20000008
 8001768:	4ba0      	ldr	r3, [pc, #640]	@ (80019ec <HAL_RCC_OscConfig+0x504>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a9f      	ldr	r2, [pc, #636]	@ (80019ec <HAL_RCC_OscConfig+0x504>)
 800176e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001772:	6013      	str	r3, [r2, #0]
 8001774:	4b9d      	ldr	r3, [pc, #628]	@ (80019ec <HAL_RCC_OscConfig+0x504>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a9c      	ldr	r2, [pc, #624]	@ (80019ec <HAL_RCC_OscConfig+0x504>)
 800177a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800177e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d013      	beq.n	80017b0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001788:	f7ff fa96 	bl	8000cb8 <HAL_GetTick>
 800178c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800178e:	e008      	b.n	80017a2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001790:	f7ff fa92 	bl	8000cb8 <HAL_GetTick>
 8001794:	4602      	mov	r2, r0
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	2b64      	cmp	r3, #100	@ 0x64
 800179c:	d901      	bls.n	80017a2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800179e:	2303      	movs	r3, #3
 80017a0:	e276      	b.n	8001c90 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017a2:	4b92      	ldr	r3, [pc, #584]	@ (80019ec <HAL_RCC_OscConfig+0x504>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d0f0      	beq.n	8001790 <HAL_RCC_OscConfig+0x2a8>
 80017ae:	e014      	b.n	80017da <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017b0:	f7ff fa82 	bl	8000cb8 <HAL_GetTick>
 80017b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80017b6:	e008      	b.n	80017ca <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017b8:	f7ff fa7e 	bl	8000cb8 <HAL_GetTick>
 80017bc:	4602      	mov	r2, r0
 80017be:	693b      	ldr	r3, [r7, #16]
 80017c0:	1ad3      	subs	r3, r2, r3
 80017c2:	2b64      	cmp	r3, #100	@ 0x64
 80017c4:	d901      	bls.n	80017ca <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80017c6:	2303      	movs	r3, #3
 80017c8:	e262      	b.n	8001c90 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80017ca:	4b88      	ldr	r3, [pc, #544]	@ (80019ec <HAL_RCC_OscConfig+0x504>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d1f0      	bne.n	80017b8 <HAL_RCC_OscConfig+0x2d0>
 80017d6:	e000      	b.n	80017da <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f003 0302 	and.w	r3, r3, #2
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d060      	beq.n	80018a8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80017e6:	69bb      	ldr	r3, [r7, #24]
 80017e8:	2b04      	cmp	r3, #4
 80017ea:	d005      	beq.n	80017f8 <HAL_RCC_OscConfig+0x310>
 80017ec:	69bb      	ldr	r3, [r7, #24]
 80017ee:	2b0c      	cmp	r3, #12
 80017f0:	d119      	bne.n	8001826 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	2b02      	cmp	r3, #2
 80017f6:	d116      	bne.n	8001826 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017f8:	4b7c      	ldr	r3, [pc, #496]	@ (80019ec <HAL_RCC_OscConfig+0x504>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001800:	2b00      	cmp	r3, #0
 8001802:	d005      	beq.n	8001810 <HAL_RCC_OscConfig+0x328>
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	68db      	ldr	r3, [r3, #12]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d101      	bne.n	8001810 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800180c:	2301      	movs	r3, #1
 800180e:	e23f      	b.n	8001c90 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001810:	4b76      	ldr	r3, [pc, #472]	@ (80019ec <HAL_RCC_OscConfig+0x504>)
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	691b      	ldr	r3, [r3, #16]
 800181c:	061b      	lsls	r3, r3, #24
 800181e:	4973      	ldr	r1, [pc, #460]	@ (80019ec <HAL_RCC_OscConfig+0x504>)
 8001820:	4313      	orrs	r3, r2
 8001822:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001824:	e040      	b.n	80018a8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	68db      	ldr	r3, [r3, #12]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d023      	beq.n	8001876 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800182e:	4b6f      	ldr	r3, [pc, #444]	@ (80019ec <HAL_RCC_OscConfig+0x504>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4a6e      	ldr	r2, [pc, #440]	@ (80019ec <HAL_RCC_OscConfig+0x504>)
 8001834:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001838:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800183a:	f7ff fa3d 	bl	8000cb8 <HAL_GetTick>
 800183e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001840:	e008      	b.n	8001854 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001842:	f7ff fa39 	bl	8000cb8 <HAL_GetTick>
 8001846:	4602      	mov	r2, r0
 8001848:	693b      	ldr	r3, [r7, #16]
 800184a:	1ad3      	subs	r3, r2, r3
 800184c:	2b02      	cmp	r3, #2
 800184e:	d901      	bls.n	8001854 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001850:	2303      	movs	r3, #3
 8001852:	e21d      	b.n	8001c90 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001854:	4b65      	ldr	r3, [pc, #404]	@ (80019ec <HAL_RCC_OscConfig+0x504>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800185c:	2b00      	cmp	r3, #0
 800185e:	d0f0      	beq.n	8001842 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001860:	4b62      	ldr	r3, [pc, #392]	@ (80019ec <HAL_RCC_OscConfig+0x504>)
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	691b      	ldr	r3, [r3, #16]
 800186c:	061b      	lsls	r3, r3, #24
 800186e:	495f      	ldr	r1, [pc, #380]	@ (80019ec <HAL_RCC_OscConfig+0x504>)
 8001870:	4313      	orrs	r3, r2
 8001872:	604b      	str	r3, [r1, #4]
 8001874:	e018      	b.n	80018a8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001876:	4b5d      	ldr	r3, [pc, #372]	@ (80019ec <HAL_RCC_OscConfig+0x504>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4a5c      	ldr	r2, [pc, #368]	@ (80019ec <HAL_RCC_OscConfig+0x504>)
 800187c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001880:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001882:	f7ff fa19 	bl	8000cb8 <HAL_GetTick>
 8001886:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001888:	e008      	b.n	800189c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800188a:	f7ff fa15 	bl	8000cb8 <HAL_GetTick>
 800188e:	4602      	mov	r2, r0
 8001890:	693b      	ldr	r3, [r7, #16]
 8001892:	1ad3      	subs	r3, r2, r3
 8001894:	2b02      	cmp	r3, #2
 8001896:	d901      	bls.n	800189c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001898:	2303      	movs	r3, #3
 800189a:	e1f9      	b.n	8001c90 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800189c:	4b53      	ldr	r3, [pc, #332]	@ (80019ec <HAL_RCC_OscConfig+0x504>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d1f0      	bne.n	800188a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f003 0308 	and.w	r3, r3, #8
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d03c      	beq.n	800192e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	695b      	ldr	r3, [r3, #20]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d01c      	beq.n	80018f6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018bc:	4b4b      	ldr	r3, [pc, #300]	@ (80019ec <HAL_RCC_OscConfig+0x504>)
 80018be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80018c2:	4a4a      	ldr	r2, [pc, #296]	@ (80019ec <HAL_RCC_OscConfig+0x504>)
 80018c4:	f043 0301 	orr.w	r3, r3, #1
 80018c8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018cc:	f7ff f9f4 	bl	8000cb8 <HAL_GetTick>
 80018d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80018d2:	e008      	b.n	80018e6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018d4:	f7ff f9f0 	bl	8000cb8 <HAL_GetTick>
 80018d8:	4602      	mov	r2, r0
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	1ad3      	subs	r3, r2, r3
 80018de:	2b02      	cmp	r3, #2
 80018e0:	d901      	bls.n	80018e6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80018e2:	2303      	movs	r3, #3
 80018e4:	e1d4      	b.n	8001c90 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80018e6:	4b41      	ldr	r3, [pc, #260]	@ (80019ec <HAL_RCC_OscConfig+0x504>)
 80018e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80018ec:	f003 0302 	and.w	r3, r3, #2
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d0ef      	beq.n	80018d4 <HAL_RCC_OscConfig+0x3ec>
 80018f4:	e01b      	b.n	800192e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018f6:	4b3d      	ldr	r3, [pc, #244]	@ (80019ec <HAL_RCC_OscConfig+0x504>)
 80018f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80018fc:	4a3b      	ldr	r2, [pc, #236]	@ (80019ec <HAL_RCC_OscConfig+0x504>)
 80018fe:	f023 0301 	bic.w	r3, r3, #1
 8001902:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001906:	f7ff f9d7 	bl	8000cb8 <HAL_GetTick>
 800190a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800190c:	e008      	b.n	8001920 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800190e:	f7ff f9d3 	bl	8000cb8 <HAL_GetTick>
 8001912:	4602      	mov	r2, r0
 8001914:	693b      	ldr	r3, [r7, #16]
 8001916:	1ad3      	subs	r3, r2, r3
 8001918:	2b02      	cmp	r3, #2
 800191a:	d901      	bls.n	8001920 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800191c:	2303      	movs	r3, #3
 800191e:	e1b7      	b.n	8001c90 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001920:	4b32      	ldr	r3, [pc, #200]	@ (80019ec <HAL_RCC_OscConfig+0x504>)
 8001922:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001926:	f003 0302 	and.w	r3, r3, #2
 800192a:	2b00      	cmp	r3, #0
 800192c:	d1ef      	bne.n	800190e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f003 0304 	and.w	r3, r3, #4
 8001936:	2b00      	cmp	r3, #0
 8001938:	f000 80a6 	beq.w	8001a88 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800193c:	2300      	movs	r3, #0
 800193e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001940:	4b2a      	ldr	r3, [pc, #168]	@ (80019ec <HAL_RCC_OscConfig+0x504>)
 8001942:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001944:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001948:	2b00      	cmp	r3, #0
 800194a:	d10d      	bne.n	8001968 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800194c:	4b27      	ldr	r3, [pc, #156]	@ (80019ec <HAL_RCC_OscConfig+0x504>)
 800194e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001950:	4a26      	ldr	r2, [pc, #152]	@ (80019ec <HAL_RCC_OscConfig+0x504>)
 8001952:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001956:	6593      	str	r3, [r2, #88]	@ 0x58
 8001958:	4b24      	ldr	r3, [pc, #144]	@ (80019ec <HAL_RCC_OscConfig+0x504>)
 800195a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800195c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001960:	60bb      	str	r3, [r7, #8]
 8001962:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001964:	2301      	movs	r3, #1
 8001966:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001968:	4b21      	ldr	r3, [pc, #132]	@ (80019f0 <HAL_RCC_OscConfig+0x508>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001970:	2b00      	cmp	r3, #0
 8001972:	d118      	bne.n	80019a6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001974:	4b1e      	ldr	r3, [pc, #120]	@ (80019f0 <HAL_RCC_OscConfig+0x508>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a1d      	ldr	r2, [pc, #116]	@ (80019f0 <HAL_RCC_OscConfig+0x508>)
 800197a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800197e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001980:	f7ff f99a 	bl	8000cb8 <HAL_GetTick>
 8001984:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001986:	e008      	b.n	800199a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001988:	f7ff f996 	bl	8000cb8 <HAL_GetTick>
 800198c:	4602      	mov	r2, r0
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	1ad3      	subs	r3, r2, r3
 8001992:	2b02      	cmp	r3, #2
 8001994:	d901      	bls.n	800199a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001996:	2303      	movs	r3, #3
 8001998:	e17a      	b.n	8001c90 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800199a:	4b15      	ldr	r3, [pc, #84]	@ (80019f0 <HAL_RCC_OscConfig+0x508>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d0f0      	beq.n	8001988 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	689b      	ldr	r3, [r3, #8]
 80019aa:	2b01      	cmp	r3, #1
 80019ac:	d108      	bne.n	80019c0 <HAL_RCC_OscConfig+0x4d8>
 80019ae:	4b0f      	ldr	r3, [pc, #60]	@ (80019ec <HAL_RCC_OscConfig+0x504>)
 80019b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019b4:	4a0d      	ldr	r2, [pc, #52]	@ (80019ec <HAL_RCC_OscConfig+0x504>)
 80019b6:	f043 0301 	orr.w	r3, r3, #1
 80019ba:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80019be:	e029      	b.n	8001a14 <HAL_RCC_OscConfig+0x52c>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	689b      	ldr	r3, [r3, #8]
 80019c4:	2b05      	cmp	r3, #5
 80019c6:	d115      	bne.n	80019f4 <HAL_RCC_OscConfig+0x50c>
 80019c8:	4b08      	ldr	r3, [pc, #32]	@ (80019ec <HAL_RCC_OscConfig+0x504>)
 80019ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019ce:	4a07      	ldr	r2, [pc, #28]	@ (80019ec <HAL_RCC_OscConfig+0x504>)
 80019d0:	f043 0304 	orr.w	r3, r3, #4
 80019d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80019d8:	4b04      	ldr	r3, [pc, #16]	@ (80019ec <HAL_RCC_OscConfig+0x504>)
 80019da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019de:	4a03      	ldr	r2, [pc, #12]	@ (80019ec <HAL_RCC_OscConfig+0x504>)
 80019e0:	f043 0301 	orr.w	r3, r3, #1
 80019e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80019e8:	e014      	b.n	8001a14 <HAL_RCC_OscConfig+0x52c>
 80019ea:	bf00      	nop
 80019ec:	40021000 	.word	0x40021000
 80019f0:	40007000 	.word	0x40007000
 80019f4:	4b9c      	ldr	r3, [pc, #624]	@ (8001c68 <HAL_RCC_OscConfig+0x780>)
 80019f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019fa:	4a9b      	ldr	r2, [pc, #620]	@ (8001c68 <HAL_RCC_OscConfig+0x780>)
 80019fc:	f023 0301 	bic.w	r3, r3, #1
 8001a00:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001a04:	4b98      	ldr	r3, [pc, #608]	@ (8001c68 <HAL_RCC_OscConfig+0x780>)
 8001a06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a0a:	4a97      	ldr	r2, [pc, #604]	@ (8001c68 <HAL_RCC_OscConfig+0x780>)
 8001a0c:	f023 0304 	bic.w	r3, r3, #4
 8001a10:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	689b      	ldr	r3, [r3, #8]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d016      	beq.n	8001a4a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a1c:	f7ff f94c 	bl	8000cb8 <HAL_GetTick>
 8001a20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a22:	e00a      	b.n	8001a3a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a24:	f7ff f948 	bl	8000cb8 <HAL_GetTick>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	1ad3      	subs	r3, r2, r3
 8001a2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d901      	bls.n	8001a3a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001a36:	2303      	movs	r3, #3
 8001a38:	e12a      	b.n	8001c90 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a3a:	4b8b      	ldr	r3, [pc, #556]	@ (8001c68 <HAL_RCC_OscConfig+0x780>)
 8001a3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a40:	f003 0302 	and.w	r3, r3, #2
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d0ed      	beq.n	8001a24 <HAL_RCC_OscConfig+0x53c>
 8001a48:	e015      	b.n	8001a76 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a4a:	f7ff f935 	bl	8000cb8 <HAL_GetTick>
 8001a4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a50:	e00a      	b.n	8001a68 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a52:	f7ff f931 	bl	8000cb8 <HAL_GetTick>
 8001a56:	4602      	mov	r2, r0
 8001a58:	693b      	ldr	r3, [r7, #16]
 8001a5a:	1ad3      	subs	r3, r2, r3
 8001a5c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d901      	bls.n	8001a68 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001a64:	2303      	movs	r3, #3
 8001a66:	e113      	b.n	8001c90 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a68:	4b7f      	ldr	r3, [pc, #508]	@ (8001c68 <HAL_RCC_OscConfig+0x780>)
 8001a6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a6e:	f003 0302 	and.w	r3, r3, #2
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d1ed      	bne.n	8001a52 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a76:	7ffb      	ldrb	r3, [r7, #31]
 8001a78:	2b01      	cmp	r3, #1
 8001a7a:	d105      	bne.n	8001a88 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a7c:	4b7a      	ldr	r3, [pc, #488]	@ (8001c68 <HAL_RCC_OscConfig+0x780>)
 8001a7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a80:	4a79      	ldr	r2, [pc, #484]	@ (8001c68 <HAL_RCC_OscConfig+0x780>)
 8001a82:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001a86:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	f000 80fe 	beq.w	8001c8e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a96:	2b02      	cmp	r3, #2
 8001a98:	f040 80d0 	bne.w	8001c3c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001a9c:	4b72      	ldr	r3, [pc, #456]	@ (8001c68 <HAL_RCC_OscConfig+0x780>)
 8001a9e:	68db      	ldr	r3, [r3, #12]
 8001aa0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	f003 0203 	and.w	r2, r3, #3
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001aac:	429a      	cmp	r2, r3
 8001aae:	d130      	bne.n	8001b12 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aba:	3b01      	subs	r3, #1
 8001abc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001abe:	429a      	cmp	r2, r3
 8001ac0:	d127      	bne.n	8001b12 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001acc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001ace:	429a      	cmp	r2, r3
 8001ad0:	d11f      	bne.n	8001b12 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ad8:	687a      	ldr	r2, [r7, #4]
 8001ada:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001adc:	2a07      	cmp	r2, #7
 8001ade:	bf14      	ite	ne
 8001ae0:	2201      	movne	r2, #1
 8001ae2:	2200      	moveq	r2, #0
 8001ae4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d113      	bne.n	8001b12 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001af4:	085b      	lsrs	r3, r3, #1
 8001af6:	3b01      	subs	r3, #1
 8001af8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001afa:	429a      	cmp	r2, r3
 8001afc:	d109      	bne.n	8001b12 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b08:	085b      	lsrs	r3, r3, #1
 8001b0a:	3b01      	subs	r3, #1
 8001b0c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b0e:	429a      	cmp	r2, r3
 8001b10:	d06e      	beq.n	8001bf0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b12:	69bb      	ldr	r3, [r7, #24]
 8001b14:	2b0c      	cmp	r3, #12
 8001b16:	d069      	beq.n	8001bec <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001b18:	4b53      	ldr	r3, [pc, #332]	@ (8001c68 <HAL_RCC_OscConfig+0x780>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d105      	bne.n	8001b30 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001b24:	4b50      	ldr	r3, [pc, #320]	@ (8001c68 <HAL_RCC_OscConfig+0x780>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d001      	beq.n	8001b34 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001b30:	2301      	movs	r3, #1
 8001b32:	e0ad      	b.n	8001c90 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001b34:	4b4c      	ldr	r3, [pc, #304]	@ (8001c68 <HAL_RCC_OscConfig+0x780>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a4b      	ldr	r2, [pc, #300]	@ (8001c68 <HAL_RCC_OscConfig+0x780>)
 8001b3a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001b3e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001b40:	f7ff f8ba 	bl	8000cb8 <HAL_GetTick>
 8001b44:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b46:	e008      	b.n	8001b5a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b48:	f7ff f8b6 	bl	8000cb8 <HAL_GetTick>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	1ad3      	subs	r3, r2, r3
 8001b52:	2b02      	cmp	r3, #2
 8001b54:	d901      	bls.n	8001b5a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001b56:	2303      	movs	r3, #3
 8001b58:	e09a      	b.n	8001c90 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b5a:	4b43      	ldr	r3, [pc, #268]	@ (8001c68 <HAL_RCC_OscConfig+0x780>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d1f0      	bne.n	8001b48 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b66:	4b40      	ldr	r3, [pc, #256]	@ (8001c68 <HAL_RCC_OscConfig+0x780>)
 8001b68:	68da      	ldr	r2, [r3, #12]
 8001b6a:	4b40      	ldr	r3, [pc, #256]	@ (8001c6c <HAL_RCC_OscConfig+0x784>)
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	687a      	ldr	r2, [r7, #4]
 8001b70:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001b72:	687a      	ldr	r2, [r7, #4]
 8001b74:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001b76:	3a01      	subs	r2, #1
 8001b78:	0112      	lsls	r2, r2, #4
 8001b7a:	4311      	orrs	r1, r2
 8001b7c:	687a      	ldr	r2, [r7, #4]
 8001b7e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001b80:	0212      	lsls	r2, r2, #8
 8001b82:	4311      	orrs	r1, r2
 8001b84:	687a      	ldr	r2, [r7, #4]
 8001b86:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001b88:	0852      	lsrs	r2, r2, #1
 8001b8a:	3a01      	subs	r2, #1
 8001b8c:	0552      	lsls	r2, r2, #21
 8001b8e:	4311      	orrs	r1, r2
 8001b90:	687a      	ldr	r2, [r7, #4]
 8001b92:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001b94:	0852      	lsrs	r2, r2, #1
 8001b96:	3a01      	subs	r2, #1
 8001b98:	0652      	lsls	r2, r2, #25
 8001b9a:	4311      	orrs	r1, r2
 8001b9c:	687a      	ldr	r2, [r7, #4]
 8001b9e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001ba0:	0912      	lsrs	r2, r2, #4
 8001ba2:	0452      	lsls	r2, r2, #17
 8001ba4:	430a      	orrs	r2, r1
 8001ba6:	4930      	ldr	r1, [pc, #192]	@ (8001c68 <HAL_RCC_OscConfig+0x780>)
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001bac:	4b2e      	ldr	r3, [pc, #184]	@ (8001c68 <HAL_RCC_OscConfig+0x780>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a2d      	ldr	r2, [pc, #180]	@ (8001c68 <HAL_RCC_OscConfig+0x780>)
 8001bb2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001bb6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001bb8:	4b2b      	ldr	r3, [pc, #172]	@ (8001c68 <HAL_RCC_OscConfig+0x780>)
 8001bba:	68db      	ldr	r3, [r3, #12]
 8001bbc:	4a2a      	ldr	r2, [pc, #168]	@ (8001c68 <HAL_RCC_OscConfig+0x780>)
 8001bbe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001bc2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001bc4:	f7ff f878 	bl	8000cb8 <HAL_GetTick>
 8001bc8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bca:	e008      	b.n	8001bde <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bcc:	f7ff f874 	bl	8000cb8 <HAL_GetTick>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	1ad3      	subs	r3, r2, r3
 8001bd6:	2b02      	cmp	r3, #2
 8001bd8:	d901      	bls.n	8001bde <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001bda:	2303      	movs	r3, #3
 8001bdc:	e058      	b.n	8001c90 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bde:	4b22      	ldr	r3, [pc, #136]	@ (8001c68 <HAL_RCC_OscConfig+0x780>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d0f0      	beq.n	8001bcc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001bea:	e050      	b.n	8001c8e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001bec:	2301      	movs	r3, #1
 8001bee:	e04f      	b.n	8001c90 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bf0:	4b1d      	ldr	r3, [pc, #116]	@ (8001c68 <HAL_RCC_OscConfig+0x780>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d148      	bne.n	8001c8e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001bfc:	4b1a      	ldr	r3, [pc, #104]	@ (8001c68 <HAL_RCC_OscConfig+0x780>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a19      	ldr	r2, [pc, #100]	@ (8001c68 <HAL_RCC_OscConfig+0x780>)
 8001c02:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001c06:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c08:	4b17      	ldr	r3, [pc, #92]	@ (8001c68 <HAL_RCC_OscConfig+0x780>)
 8001c0a:	68db      	ldr	r3, [r3, #12]
 8001c0c:	4a16      	ldr	r2, [pc, #88]	@ (8001c68 <HAL_RCC_OscConfig+0x780>)
 8001c0e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001c12:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001c14:	f7ff f850 	bl	8000cb8 <HAL_GetTick>
 8001c18:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c1a:	e008      	b.n	8001c2e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c1c:	f7ff f84c 	bl	8000cb8 <HAL_GetTick>
 8001c20:	4602      	mov	r2, r0
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	1ad3      	subs	r3, r2, r3
 8001c26:	2b02      	cmp	r3, #2
 8001c28:	d901      	bls.n	8001c2e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001c2a:	2303      	movs	r3, #3
 8001c2c:	e030      	b.n	8001c90 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c2e:	4b0e      	ldr	r3, [pc, #56]	@ (8001c68 <HAL_RCC_OscConfig+0x780>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d0f0      	beq.n	8001c1c <HAL_RCC_OscConfig+0x734>
 8001c3a:	e028      	b.n	8001c8e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c3c:	69bb      	ldr	r3, [r7, #24]
 8001c3e:	2b0c      	cmp	r3, #12
 8001c40:	d023      	beq.n	8001c8a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c42:	4b09      	ldr	r3, [pc, #36]	@ (8001c68 <HAL_RCC_OscConfig+0x780>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a08      	ldr	r2, [pc, #32]	@ (8001c68 <HAL_RCC_OscConfig+0x780>)
 8001c48:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001c4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c4e:	f7ff f833 	bl	8000cb8 <HAL_GetTick>
 8001c52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c54:	e00c      	b.n	8001c70 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c56:	f7ff f82f 	bl	8000cb8 <HAL_GetTick>
 8001c5a:	4602      	mov	r2, r0
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	1ad3      	subs	r3, r2, r3
 8001c60:	2b02      	cmp	r3, #2
 8001c62:	d905      	bls.n	8001c70 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001c64:	2303      	movs	r3, #3
 8001c66:	e013      	b.n	8001c90 <HAL_RCC_OscConfig+0x7a8>
 8001c68:	40021000 	.word	0x40021000
 8001c6c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c70:	4b09      	ldr	r3, [pc, #36]	@ (8001c98 <HAL_RCC_OscConfig+0x7b0>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d1ec      	bne.n	8001c56 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001c7c:	4b06      	ldr	r3, [pc, #24]	@ (8001c98 <HAL_RCC_OscConfig+0x7b0>)
 8001c7e:	68da      	ldr	r2, [r3, #12]
 8001c80:	4905      	ldr	r1, [pc, #20]	@ (8001c98 <HAL_RCC_OscConfig+0x7b0>)
 8001c82:	4b06      	ldr	r3, [pc, #24]	@ (8001c9c <HAL_RCC_OscConfig+0x7b4>)
 8001c84:	4013      	ands	r3, r2
 8001c86:	60cb      	str	r3, [r1, #12]
 8001c88:	e001      	b.n	8001c8e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e000      	b.n	8001c90 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001c8e:	2300      	movs	r3, #0
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	3720      	adds	r7, #32
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	40021000 	.word	0x40021000
 8001c9c:	feeefffc 	.word	0xfeeefffc

08001ca0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b084      	sub	sp, #16
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
 8001ca8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d101      	bne.n	8001cb4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	e0e7      	b.n	8001e84 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001cb4:	4b75      	ldr	r3, [pc, #468]	@ (8001e8c <HAL_RCC_ClockConfig+0x1ec>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f003 0307 	and.w	r3, r3, #7
 8001cbc:	683a      	ldr	r2, [r7, #0]
 8001cbe:	429a      	cmp	r2, r3
 8001cc0:	d910      	bls.n	8001ce4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cc2:	4b72      	ldr	r3, [pc, #456]	@ (8001e8c <HAL_RCC_ClockConfig+0x1ec>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f023 0207 	bic.w	r2, r3, #7
 8001cca:	4970      	ldr	r1, [pc, #448]	@ (8001e8c <HAL_RCC_ClockConfig+0x1ec>)
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cd2:	4b6e      	ldr	r3, [pc, #440]	@ (8001e8c <HAL_RCC_ClockConfig+0x1ec>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f003 0307 	and.w	r3, r3, #7
 8001cda:	683a      	ldr	r2, [r7, #0]
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d001      	beq.n	8001ce4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	e0cf      	b.n	8001e84 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f003 0302 	and.w	r3, r3, #2
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d010      	beq.n	8001d12 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	689a      	ldr	r2, [r3, #8]
 8001cf4:	4b66      	ldr	r3, [pc, #408]	@ (8001e90 <HAL_RCC_ClockConfig+0x1f0>)
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d908      	bls.n	8001d12 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d00:	4b63      	ldr	r3, [pc, #396]	@ (8001e90 <HAL_RCC_ClockConfig+0x1f0>)
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	4960      	ldr	r1, [pc, #384]	@ (8001e90 <HAL_RCC_ClockConfig+0x1f0>)
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f003 0301 	and.w	r3, r3, #1
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d04c      	beq.n	8001db8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	2b03      	cmp	r3, #3
 8001d24:	d107      	bne.n	8001d36 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d26:	4b5a      	ldr	r3, [pc, #360]	@ (8001e90 <HAL_RCC_ClockConfig+0x1f0>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d121      	bne.n	8001d76 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	e0a6      	b.n	8001e84 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	2b02      	cmp	r3, #2
 8001d3c:	d107      	bne.n	8001d4e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d3e:	4b54      	ldr	r3, [pc, #336]	@ (8001e90 <HAL_RCC_ClockConfig+0x1f0>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d115      	bne.n	8001d76 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e09a      	b.n	8001e84 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d107      	bne.n	8001d66 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d56:	4b4e      	ldr	r3, [pc, #312]	@ (8001e90 <HAL_RCC_ClockConfig+0x1f0>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f003 0302 	and.w	r3, r3, #2
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d109      	bne.n	8001d76 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001d62:	2301      	movs	r3, #1
 8001d64:	e08e      	b.n	8001e84 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d66:	4b4a      	ldr	r3, [pc, #296]	@ (8001e90 <HAL_RCC_ClockConfig+0x1f0>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d101      	bne.n	8001d76 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
 8001d74:	e086      	b.n	8001e84 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001d76:	4b46      	ldr	r3, [pc, #280]	@ (8001e90 <HAL_RCC_ClockConfig+0x1f0>)
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	f023 0203 	bic.w	r2, r3, #3
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	4943      	ldr	r1, [pc, #268]	@ (8001e90 <HAL_RCC_ClockConfig+0x1f0>)
 8001d84:	4313      	orrs	r3, r2
 8001d86:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d88:	f7fe ff96 	bl	8000cb8 <HAL_GetTick>
 8001d8c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d8e:	e00a      	b.n	8001da6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d90:	f7fe ff92 	bl	8000cb8 <HAL_GetTick>
 8001d94:	4602      	mov	r2, r0
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	1ad3      	subs	r3, r2, r3
 8001d9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d901      	bls.n	8001da6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001da2:	2303      	movs	r3, #3
 8001da4:	e06e      	b.n	8001e84 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001da6:	4b3a      	ldr	r3, [pc, #232]	@ (8001e90 <HAL_RCC_ClockConfig+0x1f0>)
 8001da8:	689b      	ldr	r3, [r3, #8]
 8001daa:	f003 020c 	and.w	r2, r3, #12
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	009b      	lsls	r3, r3, #2
 8001db4:	429a      	cmp	r2, r3
 8001db6:	d1eb      	bne.n	8001d90 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f003 0302 	and.w	r3, r3, #2
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d010      	beq.n	8001de6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	689a      	ldr	r2, [r3, #8]
 8001dc8:	4b31      	ldr	r3, [pc, #196]	@ (8001e90 <HAL_RCC_ClockConfig+0x1f0>)
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	d208      	bcs.n	8001de6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001dd4:	4b2e      	ldr	r3, [pc, #184]	@ (8001e90 <HAL_RCC_ClockConfig+0x1f0>)
 8001dd6:	689b      	ldr	r3, [r3, #8]
 8001dd8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	689b      	ldr	r3, [r3, #8]
 8001de0:	492b      	ldr	r1, [pc, #172]	@ (8001e90 <HAL_RCC_ClockConfig+0x1f0>)
 8001de2:	4313      	orrs	r3, r2
 8001de4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001de6:	4b29      	ldr	r3, [pc, #164]	@ (8001e8c <HAL_RCC_ClockConfig+0x1ec>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f003 0307 	and.w	r3, r3, #7
 8001dee:	683a      	ldr	r2, [r7, #0]
 8001df0:	429a      	cmp	r2, r3
 8001df2:	d210      	bcs.n	8001e16 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001df4:	4b25      	ldr	r3, [pc, #148]	@ (8001e8c <HAL_RCC_ClockConfig+0x1ec>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f023 0207 	bic.w	r2, r3, #7
 8001dfc:	4923      	ldr	r1, [pc, #140]	@ (8001e8c <HAL_RCC_ClockConfig+0x1ec>)
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	4313      	orrs	r3, r2
 8001e02:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e04:	4b21      	ldr	r3, [pc, #132]	@ (8001e8c <HAL_RCC_ClockConfig+0x1ec>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f003 0307 	and.w	r3, r3, #7
 8001e0c:	683a      	ldr	r2, [r7, #0]
 8001e0e:	429a      	cmp	r2, r3
 8001e10:	d001      	beq.n	8001e16 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
 8001e14:	e036      	b.n	8001e84 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f003 0304 	and.w	r3, r3, #4
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d008      	beq.n	8001e34 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e22:	4b1b      	ldr	r3, [pc, #108]	@ (8001e90 <HAL_RCC_ClockConfig+0x1f0>)
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	68db      	ldr	r3, [r3, #12]
 8001e2e:	4918      	ldr	r1, [pc, #96]	@ (8001e90 <HAL_RCC_ClockConfig+0x1f0>)
 8001e30:	4313      	orrs	r3, r2
 8001e32:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f003 0308 	and.w	r3, r3, #8
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d009      	beq.n	8001e54 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e40:	4b13      	ldr	r3, [pc, #76]	@ (8001e90 <HAL_RCC_ClockConfig+0x1f0>)
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	691b      	ldr	r3, [r3, #16]
 8001e4c:	00db      	lsls	r3, r3, #3
 8001e4e:	4910      	ldr	r1, [pc, #64]	@ (8001e90 <HAL_RCC_ClockConfig+0x1f0>)
 8001e50:	4313      	orrs	r3, r2
 8001e52:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001e54:	f000 f824 	bl	8001ea0 <HAL_RCC_GetSysClockFreq>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	4b0d      	ldr	r3, [pc, #52]	@ (8001e90 <HAL_RCC_ClockConfig+0x1f0>)
 8001e5c:	689b      	ldr	r3, [r3, #8]
 8001e5e:	091b      	lsrs	r3, r3, #4
 8001e60:	f003 030f 	and.w	r3, r3, #15
 8001e64:	490b      	ldr	r1, [pc, #44]	@ (8001e94 <HAL_RCC_ClockConfig+0x1f4>)
 8001e66:	5ccb      	ldrb	r3, [r1, r3]
 8001e68:	f003 031f 	and.w	r3, r3, #31
 8001e6c:	fa22 f303 	lsr.w	r3, r2, r3
 8001e70:	4a09      	ldr	r2, [pc, #36]	@ (8001e98 <HAL_RCC_ClockConfig+0x1f8>)
 8001e72:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001e74:	4b09      	ldr	r3, [pc, #36]	@ (8001e9c <HAL_RCC_ClockConfig+0x1fc>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f7fe fecd 	bl	8000c18 <HAL_InitTick>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	72fb      	strb	r3, [r7, #11]

  return status;
 8001e82:	7afb      	ldrb	r3, [r7, #11]
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	3710      	adds	r7, #16
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	40022000 	.word	0x40022000
 8001e90:	40021000 	.word	0x40021000
 8001e94:	08005000 	.word	0x08005000
 8001e98:	20000004 	.word	0x20000004
 8001e9c:	20000008 	.word	0x20000008

08001ea0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b089      	sub	sp, #36	@ 0x24
 8001ea4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	61fb      	str	r3, [r7, #28]
 8001eaa:	2300      	movs	r3, #0
 8001eac:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001eae:	4b3e      	ldr	r3, [pc, #248]	@ (8001fa8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	f003 030c 	and.w	r3, r3, #12
 8001eb6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001eb8:	4b3b      	ldr	r3, [pc, #236]	@ (8001fa8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	f003 0303 	and.w	r3, r3, #3
 8001ec0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d005      	beq.n	8001ed4 <HAL_RCC_GetSysClockFreq+0x34>
 8001ec8:	693b      	ldr	r3, [r7, #16]
 8001eca:	2b0c      	cmp	r3, #12
 8001ecc:	d121      	bne.n	8001f12 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	d11e      	bne.n	8001f12 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001ed4:	4b34      	ldr	r3, [pc, #208]	@ (8001fa8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f003 0308 	and.w	r3, r3, #8
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d107      	bne.n	8001ef0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001ee0:	4b31      	ldr	r3, [pc, #196]	@ (8001fa8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ee2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ee6:	0a1b      	lsrs	r3, r3, #8
 8001ee8:	f003 030f 	and.w	r3, r3, #15
 8001eec:	61fb      	str	r3, [r7, #28]
 8001eee:	e005      	b.n	8001efc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001ef0:	4b2d      	ldr	r3, [pc, #180]	@ (8001fa8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	091b      	lsrs	r3, r3, #4
 8001ef6:	f003 030f 	and.w	r3, r3, #15
 8001efa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001efc:	4a2b      	ldr	r2, [pc, #172]	@ (8001fac <HAL_RCC_GetSysClockFreq+0x10c>)
 8001efe:	69fb      	ldr	r3, [r7, #28]
 8001f00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f04:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d10d      	bne.n	8001f28 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001f0c:	69fb      	ldr	r3, [r7, #28]
 8001f0e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f10:	e00a      	b.n	8001f28 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	2b04      	cmp	r3, #4
 8001f16:	d102      	bne.n	8001f1e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001f18:	4b25      	ldr	r3, [pc, #148]	@ (8001fb0 <HAL_RCC_GetSysClockFreq+0x110>)
 8001f1a:	61bb      	str	r3, [r7, #24]
 8001f1c:	e004      	b.n	8001f28 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	2b08      	cmp	r3, #8
 8001f22:	d101      	bne.n	8001f28 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001f24:	4b23      	ldr	r3, [pc, #140]	@ (8001fb4 <HAL_RCC_GetSysClockFreq+0x114>)
 8001f26:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	2b0c      	cmp	r3, #12
 8001f2c:	d134      	bne.n	8001f98 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001f2e:	4b1e      	ldr	r3, [pc, #120]	@ (8001fa8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f30:	68db      	ldr	r3, [r3, #12]
 8001f32:	f003 0303 	and.w	r3, r3, #3
 8001f36:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	2b02      	cmp	r3, #2
 8001f3c:	d003      	beq.n	8001f46 <HAL_RCC_GetSysClockFreq+0xa6>
 8001f3e:	68bb      	ldr	r3, [r7, #8]
 8001f40:	2b03      	cmp	r3, #3
 8001f42:	d003      	beq.n	8001f4c <HAL_RCC_GetSysClockFreq+0xac>
 8001f44:	e005      	b.n	8001f52 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001f46:	4b1a      	ldr	r3, [pc, #104]	@ (8001fb0 <HAL_RCC_GetSysClockFreq+0x110>)
 8001f48:	617b      	str	r3, [r7, #20]
      break;
 8001f4a:	e005      	b.n	8001f58 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001f4c:	4b19      	ldr	r3, [pc, #100]	@ (8001fb4 <HAL_RCC_GetSysClockFreq+0x114>)
 8001f4e:	617b      	str	r3, [r7, #20]
      break;
 8001f50:	e002      	b.n	8001f58 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001f52:	69fb      	ldr	r3, [r7, #28]
 8001f54:	617b      	str	r3, [r7, #20]
      break;
 8001f56:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001f58:	4b13      	ldr	r3, [pc, #76]	@ (8001fa8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f5a:	68db      	ldr	r3, [r3, #12]
 8001f5c:	091b      	lsrs	r3, r3, #4
 8001f5e:	f003 0307 	and.w	r3, r3, #7
 8001f62:	3301      	adds	r3, #1
 8001f64:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001f66:	4b10      	ldr	r3, [pc, #64]	@ (8001fa8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f68:	68db      	ldr	r3, [r3, #12]
 8001f6a:	0a1b      	lsrs	r3, r3, #8
 8001f6c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001f70:	697a      	ldr	r2, [r7, #20]
 8001f72:	fb03 f202 	mul.w	r2, r3, r2
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f7c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001f7e:	4b0a      	ldr	r3, [pc, #40]	@ (8001fa8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f80:	68db      	ldr	r3, [r3, #12]
 8001f82:	0e5b      	lsrs	r3, r3, #25
 8001f84:	f003 0303 	and.w	r3, r3, #3
 8001f88:	3301      	adds	r3, #1
 8001f8a:	005b      	lsls	r3, r3, #1
 8001f8c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001f8e:	697a      	ldr	r2, [r7, #20]
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f96:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001f98:	69bb      	ldr	r3, [r7, #24]
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	3724      	adds	r7, #36	@ 0x24
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr
 8001fa6:	bf00      	nop
 8001fa8:	40021000 	.word	0x40021000
 8001fac:	08005018 	.word	0x08005018
 8001fb0:	00f42400 	.word	0x00f42400
 8001fb4:	007a1200 	.word	0x007a1200

08001fb8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fbc:	4b03      	ldr	r3, [pc, #12]	@ (8001fcc <HAL_RCC_GetHCLKFreq+0x14>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr
 8001fca:	bf00      	nop
 8001fcc:	20000004 	.word	0x20000004

08001fd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001fd4:	f7ff fff0 	bl	8001fb8 <HAL_RCC_GetHCLKFreq>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	4b06      	ldr	r3, [pc, #24]	@ (8001ff4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001fdc:	689b      	ldr	r3, [r3, #8]
 8001fde:	0a1b      	lsrs	r3, r3, #8
 8001fe0:	f003 0307 	and.w	r3, r3, #7
 8001fe4:	4904      	ldr	r1, [pc, #16]	@ (8001ff8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001fe6:	5ccb      	ldrb	r3, [r1, r3]
 8001fe8:	f003 031f 	and.w	r3, r3, #31
 8001fec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	40021000 	.word	0x40021000
 8001ff8:	08005010 	.word	0x08005010

08001ffc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002000:	f7ff ffda 	bl	8001fb8 <HAL_RCC_GetHCLKFreq>
 8002004:	4602      	mov	r2, r0
 8002006:	4b06      	ldr	r3, [pc, #24]	@ (8002020 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	0adb      	lsrs	r3, r3, #11
 800200c:	f003 0307 	and.w	r3, r3, #7
 8002010:	4904      	ldr	r1, [pc, #16]	@ (8002024 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002012:	5ccb      	ldrb	r3, [r1, r3]
 8002014:	f003 031f 	and.w	r3, r3, #31
 8002018:	fa22 f303 	lsr.w	r3, r2, r3
}
 800201c:	4618      	mov	r0, r3
 800201e:	bd80      	pop	{r7, pc}
 8002020:	40021000 	.word	0x40021000
 8002024:	08005010 	.word	0x08005010

08002028 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b086      	sub	sp, #24
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002030:	2300      	movs	r3, #0
 8002032:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002034:	4b2a      	ldr	r3, [pc, #168]	@ (80020e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002036:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002038:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800203c:	2b00      	cmp	r3, #0
 800203e:	d003      	beq.n	8002048 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002040:	f7ff f9ee 	bl	8001420 <HAL_PWREx_GetVoltageRange>
 8002044:	6178      	str	r0, [r7, #20]
 8002046:	e014      	b.n	8002072 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002048:	4b25      	ldr	r3, [pc, #148]	@ (80020e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800204a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800204c:	4a24      	ldr	r2, [pc, #144]	@ (80020e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800204e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002052:	6593      	str	r3, [r2, #88]	@ 0x58
 8002054:	4b22      	ldr	r3, [pc, #136]	@ (80020e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002056:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002058:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800205c:	60fb      	str	r3, [r7, #12]
 800205e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002060:	f7ff f9de 	bl	8001420 <HAL_PWREx_GetVoltageRange>
 8002064:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002066:	4b1e      	ldr	r3, [pc, #120]	@ (80020e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002068:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800206a:	4a1d      	ldr	r2, [pc, #116]	@ (80020e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800206c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002070:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002078:	d10b      	bne.n	8002092 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2b80      	cmp	r3, #128	@ 0x80
 800207e:	d919      	bls.n	80020b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2ba0      	cmp	r3, #160	@ 0xa0
 8002084:	d902      	bls.n	800208c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002086:	2302      	movs	r3, #2
 8002088:	613b      	str	r3, [r7, #16]
 800208a:	e013      	b.n	80020b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800208c:	2301      	movs	r3, #1
 800208e:	613b      	str	r3, [r7, #16]
 8002090:	e010      	b.n	80020b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2b80      	cmp	r3, #128	@ 0x80
 8002096:	d902      	bls.n	800209e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002098:	2303      	movs	r3, #3
 800209a:	613b      	str	r3, [r7, #16]
 800209c:	e00a      	b.n	80020b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2b80      	cmp	r3, #128	@ 0x80
 80020a2:	d102      	bne.n	80020aa <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80020a4:	2302      	movs	r3, #2
 80020a6:	613b      	str	r3, [r7, #16]
 80020a8:	e004      	b.n	80020b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2b70      	cmp	r3, #112	@ 0x70
 80020ae:	d101      	bne.n	80020b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80020b0:	2301      	movs	r3, #1
 80020b2:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80020b4:	4b0b      	ldr	r3, [pc, #44]	@ (80020e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f023 0207 	bic.w	r2, r3, #7
 80020bc:	4909      	ldr	r1, [pc, #36]	@ (80020e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	4313      	orrs	r3, r2
 80020c2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80020c4:	4b07      	ldr	r3, [pc, #28]	@ (80020e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f003 0307 	and.w	r3, r3, #7
 80020cc:	693a      	ldr	r2, [r7, #16]
 80020ce:	429a      	cmp	r2, r3
 80020d0:	d001      	beq.n	80020d6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e000      	b.n	80020d8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80020d6:	2300      	movs	r3, #0
}
 80020d8:	4618      	mov	r0, r3
 80020da:	3718      	adds	r7, #24
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	40021000 	.word	0x40021000
 80020e4:	40022000 	.word	0x40022000

080020e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b086      	sub	sp, #24
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80020f0:	2300      	movs	r3, #0
 80020f2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80020f4:	2300      	movs	r3, #0
 80020f6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002100:	2b00      	cmp	r3, #0
 8002102:	d041      	beq.n	8002188 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002108:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800210c:	d02a      	beq.n	8002164 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800210e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002112:	d824      	bhi.n	800215e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002114:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002118:	d008      	beq.n	800212c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800211a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800211e:	d81e      	bhi.n	800215e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002120:	2b00      	cmp	r3, #0
 8002122:	d00a      	beq.n	800213a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002124:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002128:	d010      	beq.n	800214c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800212a:	e018      	b.n	800215e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800212c:	4b86      	ldr	r3, [pc, #536]	@ (8002348 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	4a85      	ldr	r2, [pc, #532]	@ (8002348 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002132:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002136:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002138:	e015      	b.n	8002166 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	3304      	adds	r3, #4
 800213e:	2100      	movs	r1, #0
 8002140:	4618      	mov	r0, r3
 8002142:	f000 fabb 	bl	80026bc <RCCEx_PLLSAI1_Config>
 8002146:	4603      	mov	r3, r0
 8002148:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800214a:	e00c      	b.n	8002166 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	3320      	adds	r3, #32
 8002150:	2100      	movs	r1, #0
 8002152:	4618      	mov	r0, r3
 8002154:	f000 fba6 	bl	80028a4 <RCCEx_PLLSAI2_Config>
 8002158:	4603      	mov	r3, r0
 800215a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800215c:	e003      	b.n	8002166 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	74fb      	strb	r3, [r7, #19]
      break;
 8002162:	e000      	b.n	8002166 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002164:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002166:	7cfb      	ldrb	r3, [r7, #19]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d10b      	bne.n	8002184 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800216c:	4b76      	ldr	r3, [pc, #472]	@ (8002348 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800216e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002172:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800217a:	4973      	ldr	r1, [pc, #460]	@ (8002348 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800217c:	4313      	orrs	r3, r2
 800217e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002182:	e001      	b.n	8002188 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002184:	7cfb      	ldrb	r3, [r7, #19]
 8002186:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002190:	2b00      	cmp	r3, #0
 8002192:	d041      	beq.n	8002218 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002198:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800219c:	d02a      	beq.n	80021f4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800219e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80021a2:	d824      	bhi.n	80021ee <HAL_RCCEx_PeriphCLKConfig+0x106>
 80021a4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80021a8:	d008      	beq.n	80021bc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80021aa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80021ae:	d81e      	bhi.n	80021ee <HAL_RCCEx_PeriphCLKConfig+0x106>
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d00a      	beq.n	80021ca <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80021b4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80021b8:	d010      	beq.n	80021dc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80021ba:	e018      	b.n	80021ee <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80021bc:	4b62      	ldr	r3, [pc, #392]	@ (8002348 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021be:	68db      	ldr	r3, [r3, #12]
 80021c0:	4a61      	ldr	r2, [pc, #388]	@ (8002348 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021c6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80021c8:	e015      	b.n	80021f6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	3304      	adds	r3, #4
 80021ce:	2100      	movs	r1, #0
 80021d0:	4618      	mov	r0, r3
 80021d2:	f000 fa73 	bl	80026bc <RCCEx_PLLSAI1_Config>
 80021d6:	4603      	mov	r3, r0
 80021d8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80021da:	e00c      	b.n	80021f6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	3320      	adds	r3, #32
 80021e0:	2100      	movs	r1, #0
 80021e2:	4618      	mov	r0, r3
 80021e4:	f000 fb5e 	bl	80028a4 <RCCEx_PLLSAI2_Config>
 80021e8:	4603      	mov	r3, r0
 80021ea:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80021ec:	e003      	b.n	80021f6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	74fb      	strb	r3, [r7, #19]
      break;
 80021f2:	e000      	b.n	80021f6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80021f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80021f6:	7cfb      	ldrb	r3, [r7, #19]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d10b      	bne.n	8002214 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80021fc:	4b52      	ldr	r3, [pc, #328]	@ (8002348 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002202:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800220a:	494f      	ldr	r1, [pc, #316]	@ (8002348 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800220c:	4313      	orrs	r3, r2
 800220e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002212:	e001      	b.n	8002218 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002214:	7cfb      	ldrb	r3, [r7, #19]
 8002216:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002220:	2b00      	cmp	r3, #0
 8002222:	f000 80a0 	beq.w	8002366 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002226:	2300      	movs	r3, #0
 8002228:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800222a:	4b47      	ldr	r3, [pc, #284]	@ (8002348 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800222c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800222e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002232:	2b00      	cmp	r3, #0
 8002234:	d101      	bne.n	800223a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002236:	2301      	movs	r3, #1
 8002238:	e000      	b.n	800223c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800223a:	2300      	movs	r3, #0
 800223c:	2b00      	cmp	r3, #0
 800223e:	d00d      	beq.n	800225c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002240:	4b41      	ldr	r3, [pc, #260]	@ (8002348 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002242:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002244:	4a40      	ldr	r2, [pc, #256]	@ (8002348 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002246:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800224a:	6593      	str	r3, [r2, #88]	@ 0x58
 800224c:	4b3e      	ldr	r3, [pc, #248]	@ (8002348 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800224e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002250:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002254:	60bb      	str	r3, [r7, #8]
 8002256:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002258:	2301      	movs	r3, #1
 800225a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800225c:	4b3b      	ldr	r3, [pc, #236]	@ (800234c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a3a      	ldr	r2, [pc, #232]	@ (800234c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002262:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002266:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002268:	f7fe fd26 	bl	8000cb8 <HAL_GetTick>
 800226c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800226e:	e009      	b.n	8002284 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002270:	f7fe fd22 	bl	8000cb8 <HAL_GetTick>
 8002274:	4602      	mov	r2, r0
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	1ad3      	subs	r3, r2, r3
 800227a:	2b02      	cmp	r3, #2
 800227c:	d902      	bls.n	8002284 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800227e:	2303      	movs	r3, #3
 8002280:	74fb      	strb	r3, [r7, #19]
        break;
 8002282:	e005      	b.n	8002290 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002284:	4b31      	ldr	r3, [pc, #196]	@ (800234c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800228c:	2b00      	cmp	r3, #0
 800228e:	d0ef      	beq.n	8002270 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002290:	7cfb      	ldrb	r3, [r7, #19]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d15c      	bne.n	8002350 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002296:	4b2c      	ldr	r3, [pc, #176]	@ (8002348 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002298:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800229c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80022a0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d01f      	beq.n	80022e8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80022ae:	697a      	ldr	r2, [r7, #20]
 80022b0:	429a      	cmp	r2, r3
 80022b2:	d019      	beq.n	80022e8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80022b4:	4b24      	ldr	r3, [pc, #144]	@ (8002348 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80022be:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80022c0:	4b21      	ldr	r3, [pc, #132]	@ (8002348 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022c6:	4a20      	ldr	r2, [pc, #128]	@ (8002348 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80022d0:	4b1d      	ldr	r3, [pc, #116]	@ (8002348 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022d6:	4a1c      	ldr	r2, [pc, #112]	@ (8002348 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022d8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80022dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80022e0:	4a19      	ldr	r2, [pc, #100]	@ (8002348 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	f003 0301 	and.w	r3, r3, #1
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d016      	beq.n	8002320 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022f2:	f7fe fce1 	bl	8000cb8 <HAL_GetTick>
 80022f6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022f8:	e00b      	b.n	8002312 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022fa:	f7fe fcdd 	bl	8000cb8 <HAL_GetTick>
 80022fe:	4602      	mov	r2, r0
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	1ad3      	subs	r3, r2, r3
 8002304:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002308:	4293      	cmp	r3, r2
 800230a:	d902      	bls.n	8002312 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800230c:	2303      	movs	r3, #3
 800230e:	74fb      	strb	r3, [r7, #19]
            break;
 8002310:	e006      	b.n	8002320 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002312:	4b0d      	ldr	r3, [pc, #52]	@ (8002348 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002314:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002318:	f003 0302 	and.w	r3, r3, #2
 800231c:	2b00      	cmp	r3, #0
 800231e:	d0ec      	beq.n	80022fa <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002320:	7cfb      	ldrb	r3, [r7, #19]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d10c      	bne.n	8002340 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002326:	4b08      	ldr	r3, [pc, #32]	@ (8002348 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002328:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800232c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002336:	4904      	ldr	r1, [pc, #16]	@ (8002348 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002338:	4313      	orrs	r3, r2
 800233a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800233e:	e009      	b.n	8002354 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002340:	7cfb      	ldrb	r3, [r7, #19]
 8002342:	74bb      	strb	r3, [r7, #18]
 8002344:	e006      	b.n	8002354 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002346:	bf00      	nop
 8002348:	40021000 	.word	0x40021000
 800234c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002350:	7cfb      	ldrb	r3, [r7, #19]
 8002352:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002354:	7c7b      	ldrb	r3, [r7, #17]
 8002356:	2b01      	cmp	r3, #1
 8002358:	d105      	bne.n	8002366 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800235a:	4b9e      	ldr	r3, [pc, #632]	@ (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800235c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800235e:	4a9d      	ldr	r2, [pc, #628]	@ (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002360:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002364:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f003 0301 	and.w	r3, r3, #1
 800236e:	2b00      	cmp	r3, #0
 8002370:	d00a      	beq.n	8002388 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002372:	4b98      	ldr	r3, [pc, #608]	@ (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002374:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002378:	f023 0203 	bic.w	r2, r3, #3
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002380:	4994      	ldr	r1, [pc, #592]	@ (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002382:	4313      	orrs	r3, r2
 8002384:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f003 0302 	and.w	r3, r3, #2
 8002390:	2b00      	cmp	r3, #0
 8002392:	d00a      	beq.n	80023aa <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002394:	4b8f      	ldr	r3, [pc, #572]	@ (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002396:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800239a:	f023 020c 	bic.w	r2, r3, #12
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023a2:	498c      	ldr	r1, [pc, #560]	@ (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023a4:	4313      	orrs	r3, r2
 80023a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f003 0304 	and.w	r3, r3, #4
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d00a      	beq.n	80023cc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80023b6:	4b87      	ldr	r3, [pc, #540]	@ (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023bc:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023c4:	4983      	ldr	r1, [pc, #524]	@ (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023c6:	4313      	orrs	r3, r2
 80023c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f003 0308 	and.w	r3, r3, #8
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d00a      	beq.n	80023ee <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80023d8:	4b7e      	ldr	r3, [pc, #504]	@ (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023de:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023e6:	497b      	ldr	r1, [pc, #492]	@ (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023e8:	4313      	orrs	r3, r2
 80023ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 0310 	and.w	r3, r3, #16
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d00a      	beq.n	8002410 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80023fa:	4b76      	ldr	r3, [pc, #472]	@ (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002400:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002408:	4972      	ldr	r1, [pc, #456]	@ (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800240a:	4313      	orrs	r3, r2
 800240c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f003 0320 	and.w	r3, r3, #32
 8002418:	2b00      	cmp	r3, #0
 800241a:	d00a      	beq.n	8002432 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800241c:	4b6d      	ldr	r3, [pc, #436]	@ (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800241e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002422:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800242a:	496a      	ldr	r1, [pc, #424]	@ (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800242c:	4313      	orrs	r3, r2
 800242e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800243a:	2b00      	cmp	r3, #0
 800243c:	d00a      	beq.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800243e:	4b65      	ldr	r3, [pc, #404]	@ (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002440:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002444:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800244c:	4961      	ldr	r1, [pc, #388]	@ (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800244e:	4313      	orrs	r3, r2
 8002450:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800245c:	2b00      	cmp	r3, #0
 800245e:	d00a      	beq.n	8002476 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002460:	4b5c      	ldr	r3, [pc, #368]	@ (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002462:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002466:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800246e:	4959      	ldr	r1, [pc, #356]	@ (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002470:	4313      	orrs	r3, r2
 8002472:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800247e:	2b00      	cmp	r3, #0
 8002480:	d00a      	beq.n	8002498 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002482:	4b54      	ldr	r3, [pc, #336]	@ (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002484:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002488:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002490:	4950      	ldr	r1, [pc, #320]	@ (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002492:	4313      	orrs	r3, r2
 8002494:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d00a      	beq.n	80024ba <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80024a4:	4b4b      	ldr	r3, [pc, #300]	@ (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024aa:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024b2:	4948      	ldr	r1, [pc, #288]	@ (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024b4:	4313      	orrs	r3, r2
 80024b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d00a      	beq.n	80024dc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80024c6:	4b43      	ldr	r3, [pc, #268]	@ (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024cc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024d4:	493f      	ldr	r1, [pc, #252]	@ (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024d6:	4313      	orrs	r3, r2
 80024d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d028      	beq.n	800253a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80024e8:	4b3a      	ldr	r3, [pc, #232]	@ (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024ee:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80024f6:	4937      	ldr	r1, [pc, #220]	@ (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024f8:	4313      	orrs	r3, r2
 80024fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002502:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002506:	d106      	bne.n	8002516 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002508:	4b32      	ldr	r3, [pc, #200]	@ (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800250a:	68db      	ldr	r3, [r3, #12]
 800250c:	4a31      	ldr	r2, [pc, #196]	@ (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800250e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002512:	60d3      	str	r3, [r2, #12]
 8002514:	e011      	b.n	800253a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800251a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800251e:	d10c      	bne.n	800253a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	3304      	adds	r3, #4
 8002524:	2101      	movs	r1, #1
 8002526:	4618      	mov	r0, r3
 8002528:	f000 f8c8 	bl	80026bc <RCCEx_PLLSAI1_Config>
 800252c:	4603      	mov	r3, r0
 800252e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002530:	7cfb      	ldrb	r3, [r7, #19]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d001      	beq.n	800253a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002536:	7cfb      	ldrb	r3, [r7, #19]
 8002538:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002542:	2b00      	cmp	r3, #0
 8002544:	d028      	beq.n	8002598 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002546:	4b23      	ldr	r3, [pc, #140]	@ (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002548:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800254c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002554:	491f      	ldr	r1, [pc, #124]	@ (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002556:	4313      	orrs	r3, r2
 8002558:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002560:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002564:	d106      	bne.n	8002574 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002566:	4b1b      	ldr	r3, [pc, #108]	@ (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002568:	68db      	ldr	r3, [r3, #12]
 800256a:	4a1a      	ldr	r2, [pc, #104]	@ (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800256c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002570:	60d3      	str	r3, [r2, #12]
 8002572:	e011      	b.n	8002598 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002578:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800257c:	d10c      	bne.n	8002598 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	3304      	adds	r3, #4
 8002582:	2101      	movs	r1, #1
 8002584:	4618      	mov	r0, r3
 8002586:	f000 f899 	bl	80026bc <RCCEx_PLLSAI1_Config>
 800258a:	4603      	mov	r3, r0
 800258c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800258e:	7cfb      	ldrb	r3, [r7, #19]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d001      	beq.n	8002598 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002594:	7cfb      	ldrb	r3, [r7, #19]
 8002596:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d02b      	beq.n	80025fc <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80025a4:	4b0b      	ldr	r3, [pc, #44]	@ (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025aa:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80025b2:	4908      	ldr	r1, [pc, #32]	@ (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025b4:	4313      	orrs	r3, r2
 80025b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80025be:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80025c2:	d109      	bne.n	80025d8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80025c4:	4b03      	ldr	r3, [pc, #12]	@ (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025c6:	68db      	ldr	r3, [r3, #12]
 80025c8:	4a02      	ldr	r2, [pc, #8]	@ (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025ca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80025ce:	60d3      	str	r3, [r2, #12]
 80025d0:	e014      	b.n	80025fc <HAL_RCCEx_PeriphCLKConfig+0x514>
 80025d2:	bf00      	nop
 80025d4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80025dc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80025e0:	d10c      	bne.n	80025fc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	3304      	adds	r3, #4
 80025e6:	2101      	movs	r1, #1
 80025e8:	4618      	mov	r0, r3
 80025ea:	f000 f867 	bl	80026bc <RCCEx_PLLSAI1_Config>
 80025ee:	4603      	mov	r3, r0
 80025f0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80025f2:	7cfb      	ldrb	r3, [r7, #19]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d001      	beq.n	80025fc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80025f8:	7cfb      	ldrb	r3, [r7, #19]
 80025fa:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002604:	2b00      	cmp	r3, #0
 8002606:	d02f      	beq.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002608:	4b2b      	ldr	r3, [pc, #172]	@ (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800260a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800260e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002616:	4928      	ldr	r1, [pc, #160]	@ (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002618:	4313      	orrs	r3, r2
 800261a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002622:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002626:	d10d      	bne.n	8002644 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	3304      	adds	r3, #4
 800262c:	2102      	movs	r1, #2
 800262e:	4618      	mov	r0, r3
 8002630:	f000 f844 	bl	80026bc <RCCEx_PLLSAI1_Config>
 8002634:	4603      	mov	r3, r0
 8002636:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002638:	7cfb      	ldrb	r3, [r7, #19]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d014      	beq.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800263e:	7cfb      	ldrb	r3, [r7, #19]
 8002640:	74bb      	strb	r3, [r7, #18]
 8002642:	e011      	b.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002648:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800264c:	d10c      	bne.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	3320      	adds	r3, #32
 8002652:	2102      	movs	r1, #2
 8002654:	4618      	mov	r0, r3
 8002656:	f000 f925 	bl	80028a4 <RCCEx_PLLSAI2_Config>
 800265a:	4603      	mov	r3, r0
 800265c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800265e:	7cfb      	ldrb	r3, [r7, #19]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d001      	beq.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002664:	7cfb      	ldrb	r3, [r7, #19]
 8002666:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002670:	2b00      	cmp	r3, #0
 8002672:	d00a      	beq.n	800268a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002674:	4b10      	ldr	r3, [pc, #64]	@ (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002676:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800267a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002682:	490d      	ldr	r1, [pc, #52]	@ (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002684:	4313      	orrs	r3, r2
 8002686:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002692:	2b00      	cmp	r3, #0
 8002694:	d00b      	beq.n	80026ae <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002696:	4b08      	ldr	r3, [pc, #32]	@ (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002698:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800269c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80026a6:	4904      	ldr	r1, [pc, #16]	@ (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80026a8:	4313      	orrs	r3, r2
 80026aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80026ae:	7cbb      	ldrb	r3, [r7, #18]
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	3718      	adds	r7, #24
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}
 80026b8:	40021000 	.word	0x40021000

080026bc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b084      	sub	sp, #16
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
 80026c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80026c6:	2300      	movs	r3, #0
 80026c8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80026ca:	4b75      	ldr	r3, [pc, #468]	@ (80028a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026cc:	68db      	ldr	r3, [r3, #12]
 80026ce:	f003 0303 	and.w	r3, r3, #3
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d018      	beq.n	8002708 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80026d6:	4b72      	ldr	r3, [pc, #456]	@ (80028a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026d8:	68db      	ldr	r3, [r3, #12]
 80026da:	f003 0203 	and.w	r2, r3, #3
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	429a      	cmp	r2, r3
 80026e4:	d10d      	bne.n	8002702 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
       ||
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d009      	beq.n	8002702 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80026ee:	4b6c      	ldr	r3, [pc, #432]	@ (80028a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026f0:	68db      	ldr	r3, [r3, #12]
 80026f2:	091b      	lsrs	r3, r3, #4
 80026f4:	f003 0307 	and.w	r3, r3, #7
 80026f8:	1c5a      	adds	r2, r3, #1
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	685b      	ldr	r3, [r3, #4]
       ||
 80026fe:	429a      	cmp	r2, r3
 8002700:	d047      	beq.n	8002792 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	73fb      	strb	r3, [r7, #15]
 8002706:	e044      	b.n	8002792 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	2b03      	cmp	r3, #3
 800270e:	d018      	beq.n	8002742 <RCCEx_PLLSAI1_Config+0x86>
 8002710:	2b03      	cmp	r3, #3
 8002712:	d825      	bhi.n	8002760 <RCCEx_PLLSAI1_Config+0xa4>
 8002714:	2b01      	cmp	r3, #1
 8002716:	d002      	beq.n	800271e <RCCEx_PLLSAI1_Config+0x62>
 8002718:	2b02      	cmp	r3, #2
 800271a:	d009      	beq.n	8002730 <RCCEx_PLLSAI1_Config+0x74>
 800271c:	e020      	b.n	8002760 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800271e:	4b60      	ldr	r3, [pc, #384]	@ (80028a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f003 0302 	and.w	r3, r3, #2
 8002726:	2b00      	cmp	r3, #0
 8002728:	d11d      	bne.n	8002766 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800272e:	e01a      	b.n	8002766 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002730:	4b5b      	ldr	r3, [pc, #364]	@ (80028a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002738:	2b00      	cmp	r3, #0
 800273a:	d116      	bne.n	800276a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002740:	e013      	b.n	800276a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002742:	4b57      	ldr	r3, [pc, #348]	@ (80028a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800274a:	2b00      	cmp	r3, #0
 800274c:	d10f      	bne.n	800276e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800274e:	4b54      	ldr	r3, [pc, #336]	@ (80028a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002756:	2b00      	cmp	r3, #0
 8002758:	d109      	bne.n	800276e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800275e:	e006      	b.n	800276e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	73fb      	strb	r3, [r7, #15]
      break;
 8002764:	e004      	b.n	8002770 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002766:	bf00      	nop
 8002768:	e002      	b.n	8002770 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800276a:	bf00      	nop
 800276c:	e000      	b.n	8002770 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800276e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002770:	7bfb      	ldrb	r3, [r7, #15]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d10d      	bne.n	8002792 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002776:	4b4a      	ldr	r3, [pc, #296]	@ (80028a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002778:	68db      	ldr	r3, [r3, #12]
 800277a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6819      	ldr	r1, [r3, #0]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	3b01      	subs	r3, #1
 8002788:	011b      	lsls	r3, r3, #4
 800278a:	430b      	orrs	r3, r1
 800278c:	4944      	ldr	r1, [pc, #272]	@ (80028a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800278e:	4313      	orrs	r3, r2
 8002790:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002792:	7bfb      	ldrb	r3, [r7, #15]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d17d      	bne.n	8002894 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002798:	4b41      	ldr	r3, [pc, #260]	@ (80028a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a40      	ldr	r2, [pc, #256]	@ (80028a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800279e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80027a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027a4:	f7fe fa88 	bl	8000cb8 <HAL_GetTick>
 80027a8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80027aa:	e009      	b.n	80027c0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80027ac:	f7fe fa84 	bl	8000cb8 <HAL_GetTick>
 80027b0:	4602      	mov	r2, r0
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	1ad3      	subs	r3, r2, r3
 80027b6:	2b02      	cmp	r3, #2
 80027b8:	d902      	bls.n	80027c0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80027ba:	2303      	movs	r3, #3
 80027bc:	73fb      	strb	r3, [r7, #15]
        break;
 80027be:	e005      	b.n	80027cc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80027c0:	4b37      	ldr	r3, [pc, #220]	@ (80028a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d1ef      	bne.n	80027ac <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80027cc:	7bfb      	ldrb	r3, [r7, #15]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d160      	bne.n	8002894 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d111      	bne.n	80027fc <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80027d8:	4b31      	ldr	r3, [pc, #196]	@ (80028a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027da:	691b      	ldr	r3, [r3, #16]
 80027dc:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80027e0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80027e4:	687a      	ldr	r2, [r7, #4]
 80027e6:	6892      	ldr	r2, [r2, #8]
 80027e8:	0211      	lsls	r1, r2, #8
 80027ea:	687a      	ldr	r2, [r7, #4]
 80027ec:	68d2      	ldr	r2, [r2, #12]
 80027ee:	0912      	lsrs	r2, r2, #4
 80027f0:	0452      	lsls	r2, r2, #17
 80027f2:	430a      	orrs	r2, r1
 80027f4:	492a      	ldr	r1, [pc, #168]	@ (80028a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027f6:	4313      	orrs	r3, r2
 80027f8:	610b      	str	r3, [r1, #16]
 80027fa:	e027      	b.n	800284c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	2b01      	cmp	r3, #1
 8002800:	d112      	bne.n	8002828 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002802:	4b27      	ldr	r3, [pc, #156]	@ (80028a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002804:	691b      	ldr	r3, [r3, #16]
 8002806:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800280a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800280e:	687a      	ldr	r2, [r7, #4]
 8002810:	6892      	ldr	r2, [r2, #8]
 8002812:	0211      	lsls	r1, r2, #8
 8002814:	687a      	ldr	r2, [r7, #4]
 8002816:	6912      	ldr	r2, [r2, #16]
 8002818:	0852      	lsrs	r2, r2, #1
 800281a:	3a01      	subs	r2, #1
 800281c:	0552      	lsls	r2, r2, #21
 800281e:	430a      	orrs	r2, r1
 8002820:	491f      	ldr	r1, [pc, #124]	@ (80028a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002822:	4313      	orrs	r3, r2
 8002824:	610b      	str	r3, [r1, #16]
 8002826:	e011      	b.n	800284c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002828:	4b1d      	ldr	r3, [pc, #116]	@ (80028a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800282a:	691b      	ldr	r3, [r3, #16]
 800282c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002830:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002834:	687a      	ldr	r2, [r7, #4]
 8002836:	6892      	ldr	r2, [r2, #8]
 8002838:	0211      	lsls	r1, r2, #8
 800283a:	687a      	ldr	r2, [r7, #4]
 800283c:	6952      	ldr	r2, [r2, #20]
 800283e:	0852      	lsrs	r2, r2, #1
 8002840:	3a01      	subs	r2, #1
 8002842:	0652      	lsls	r2, r2, #25
 8002844:	430a      	orrs	r2, r1
 8002846:	4916      	ldr	r1, [pc, #88]	@ (80028a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002848:	4313      	orrs	r3, r2
 800284a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800284c:	4b14      	ldr	r3, [pc, #80]	@ (80028a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a13      	ldr	r2, [pc, #76]	@ (80028a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002852:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002856:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002858:	f7fe fa2e 	bl	8000cb8 <HAL_GetTick>
 800285c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800285e:	e009      	b.n	8002874 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002860:	f7fe fa2a 	bl	8000cb8 <HAL_GetTick>
 8002864:	4602      	mov	r2, r0
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	2b02      	cmp	r3, #2
 800286c:	d902      	bls.n	8002874 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800286e:	2303      	movs	r3, #3
 8002870:	73fb      	strb	r3, [r7, #15]
          break;
 8002872:	e005      	b.n	8002880 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002874:	4b0a      	ldr	r3, [pc, #40]	@ (80028a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800287c:	2b00      	cmp	r3, #0
 800287e:	d0ef      	beq.n	8002860 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002880:	7bfb      	ldrb	r3, [r7, #15]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d106      	bne.n	8002894 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002886:	4b06      	ldr	r3, [pc, #24]	@ (80028a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002888:	691a      	ldr	r2, [r3, #16]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	699b      	ldr	r3, [r3, #24]
 800288e:	4904      	ldr	r1, [pc, #16]	@ (80028a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002890:	4313      	orrs	r3, r2
 8002892:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002894:	7bfb      	ldrb	r3, [r7, #15]
}
 8002896:	4618      	mov	r0, r3
 8002898:	3710      	adds	r7, #16
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}
 800289e:	bf00      	nop
 80028a0:	40021000 	.word	0x40021000

080028a4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b084      	sub	sp, #16
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
 80028ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80028ae:	2300      	movs	r3, #0
 80028b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80028b2:	4b6a      	ldr	r3, [pc, #424]	@ (8002a5c <RCCEx_PLLSAI2_Config+0x1b8>)
 80028b4:	68db      	ldr	r3, [r3, #12]
 80028b6:	f003 0303 	and.w	r3, r3, #3
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d018      	beq.n	80028f0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80028be:	4b67      	ldr	r3, [pc, #412]	@ (8002a5c <RCCEx_PLLSAI2_Config+0x1b8>)
 80028c0:	68db      	ldr	r3, [r3, #12]
 80028c2:	f003 0203 	and.w	r2, r3, #3
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	429a      	cmp	r2, r3
 80028cc:	d10d      	bne.n	80028ea <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
       ||
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d009      	beq.n	80028ea <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80028d6:	4b61      	ldr	r3, [pc, #388]	@ (8002a5c <RCCEx_PLLSAI2_Config+0x1b8>)
 80028d8:	68db      	ldr	r3, [r3, #12]
 80028da:	091b      	lsrs	r3, r3, #4
 80028dc:	f003 0307 	and.w	r3, r3, #7
 80028e0:	1c5a      	adds	r2, r3, #1
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	685b      	ldr	r3, [r3, #4]
       ||
 80028e6:	429a      	cmp	r2, r3
 80028e8:	d047      	beq.n	800297a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	73fb      	strb	r3, [r7, #15]
 80028ee:	e044      	b.n	800297a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	2b03      	cmp	r3, #3
 80028f6:	d018      	beq.n	800292a <RCCEx_PLLSAI2_Config+0x86>
 80028f8:	2b03      	cmp	r3, #3
 80028fa:	d825      	bhi.n	8002948 <RCCEx_PLLSAI2_Config+0xa4>
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	d002      	beq.n	8002906 <RCCEx_PLLSAI2_Config+0x62>
 8002900:	2b02      	cmp	r3, #2
 8002902:	d009      	beq.n	8002918 <RCCEx_PLLSAI2_Config+0x74>
 8002904:	e020      	b.n	8002948 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002906:	4b55      	ldr	r3, [pc, #340]	@ (8002a5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f003 0302 	and.w	r3, r3, #2
 800290e:	2b00      	cmp	r3, #0
 8002910:	d11d      	bne.n	800294e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002916:	e01a      	b.n	800294e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002918:	4b50      	ldr	r3, [pc, #320]	@ (8002a5c <RCCEx_PLLSAI2_Config+0x1b8>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002920:	2b00      	cmp	r3, #0
 8002922:	d116      	bne.n	8002952 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002928:	e013      	b.n	8002952 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800292a:	4b4c      	ldr	r3, [pc, #304]	@ (8002a5c <RCCEx_PLLSAI2_Config+0x1b8>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002932:	2b00      	cmp	r3, #0
 8002934:	d10f      	bne.n	8002956 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002936:	4b49      	ldr	r3, [pc, #292]	@ (8002a5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800293e:	2b00      	cmp	r3, #0
 8002940:	d109      	bne.n	8002956 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002946:	e006      	b.n	8002956 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	73fb      	strb	r3, [r7, #15]
      break;
 800294c:	e004      	b.n	8002958 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800294e:	bf00      	nop
 8002950:	e002      	b.n	8002958 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002952:	bf00      	nop
 8002954:	e000      	b.n	8002958 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002956:	bf00      	nop
    }

    if(status == HAL_OK)
 8002958:	7bfb      	ldrb	r3, [r7, #15]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d10d      	bne.n	800297a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800295e:	4b3f      	ldr	r3, [pc, #252]	@ (8002a5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002960:	68db      	ldr	r3, [r3, #12]
 8002962:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6819      	ldr	r1, [r3, #0]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	3b01      	subs	r3, #1
 8002970:	011b      	lsls	r3, r3, #4
 8002972:	430b      	orrs	r3, r1
 8002974:	4939      	ldr	r1, [pc, #228]	@ (8002a5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002976:	4313      	orrs	r3, r2
 8002978:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800297a:	7bfb      	ldrb	r3, [r7, #15]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d167      	bne.n	8002a50 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002980:	4b36      	ldr	r3, [pc, #216]	@ (8002a5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a35      	ldr	r2, [pc, #212]	@ (8002a5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002986:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800298a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800298c:	f7fe f994 	bl	8000cb8 <HAL_GetTick>
 8002990:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002992:	e009      	b.n	80029a8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002994:	f7fe f990 	bl	8000cb8 <HAL_GetTick>
 8002998:	4602      	mov	r2, r0
 800299a:	68bb      	ldr	r3, [r7, #8]
 800299c:	1ad3      	subs	r3, r2, r3
 800299e:	2b02      	cmp	r3, #2
 80029a0:	d902      	bls.n	80029a8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80029a2:	2303      	movs	r3, #3
 80029a4:	73fb      	strb	r3, [r7, #15]
        break;
 80029a6:	e005      	b.n	80029b4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80029a8:	4b2c      	ldr	r3, [pc, #176]	@ (8002a5c <RCCEx_PLLSAI2_Config+0x1b8>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d1ef      	bne.n	8002994 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80029b4:	7bfb      	ldrb	r3, [r7, #15]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d14a      	bne.n	8002a50 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d111      	bne.n	80029e4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80029c0:	4b26      	ldr	r3, [pc, #152]	@ (8002a5c <RCCEx_PLLSAI2_Config+0x1b8>)
 80029c2:	695b      	ldr	r3, [r3, #20]
 80029c4:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80029c8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80029cc:	687a      	ldr	r2, [r7, #4]
 80029ce:	6892      	ldr	r2, [r2, #8]
 80029d0:	0211      	lsls	r1, r2, #8
 80029d2:	687a      	ldr	r2, [r7, #4]
 80029d4:	68d2      	ldr	r2, [r2, #12]
 80029d6:	0912      	lsrs	r2, r2, #4
 80029d8:	0452      	lsls	r2, r2, #17
 80029da:	430a      	orrs	r2, r1
 80029dc:	491f      	ldr	r1, [pc, #124]	@ (8002a5c <RCCEx_PLLSAI2_Config+0x1b8>)
 80029de:	4313      	orrs	r3, r2
 80029e0:	614b      	str	r3, [r1, #20]
 80029e2:	e011      	b.n	8002a08 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80029e4:	4b1d      	ldr	r3, [pc, #116]	@ (8002a5c <RCCEx_PLLSAI2_Config+0x1b8>)
 80029e6:	695b      	ldr	r3, [r3, #20]
 80029e8:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80029ec:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80029f0:	687a      	ldr	r2, [r7, #4]
 80029f2:	6892      	ldr	r2, [r2, #8]
 80029f4:	0211      	lsls	r1, r2, #8
 80029f6:	687a      	ldr	r2, [r7, #4]
 80029f8:	6912      	ldr	r2, [r2, #16]
 80029fa:	0852      	lsrs	r2, r2, #1
 80029fc:	3a01      	subs	r2, #1
 80029fe:	0652      	lsls	r2, r2, #25
 8002a00:	430a      	orrs	r2, r1
 8002a02:	4916      	ldr	r1, [pc, #88]	@ (8002a5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a04:	4313      	orrs	r3, r2
 8002a06:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002a08:	4b14      	ldr	r3, [pc, #80]	@ (8002a5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a13      	ldr	r2, [pc, #76]	@ (8002a5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a0e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a12:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a14:	f7fe f950 	bl	8000cb8 <HAL_GetTick>
 8002a18:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002a1a:	e009      	b.n	8002a30 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002a1c:	f7fe f94c 	bl	8000cb8 <HAL_GetTick>
 8002a20:	4602      	mov	r2, r0
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	1ad3      	subs	r3, r2, r3
 8002a26:	2b02      	cmp	r3, #2
 8002a28:	d902      	bls.n	8002a30 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002a2a:	2303      	movs	r3, #3
 8002a2c:	73fb      	strb	r3, [r7, #15]
          break;
 8002a2e:	e005      	b.n	8002a3c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002a30:	4b0a      	ldr	r3, [pc, #40]	@ (8002a5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d0ef      	beq.n	8002a1c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002a3c:	7bfb      	ldrb	r3, [r7, #15]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d106      	bne.n	8002a50 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002a42:	4b06      	ldr	r3, [pc, #24]	@ (8002a5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a44:	695a      	ldr	r2, [r3, #20]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	695b      	ldr	r3, [r3, #20]
 8002a4a:	4904      	ldr	r1, [pc, #16]	@ (8002a5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002a50:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	3710      	adds	r7, #16
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}
 8002a5a:	bf00      	nop
 8002a5c:	40021000 	.word	0x40021000

08002a60 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b082      	sub	sp, #8
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d101      	bne.n	8002a72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e040      	b.n	8002af4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d106      	bne.n	8002a88 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f7fd ffa2 	bl	80009cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2224      	movs	r2, #36	@ 0x24
 8002a8c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f022 0201 	bic.w	r2, r2, #1
 8002a9c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d002      	beq.n	8002aac <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002aa6:	6878      	ldr	r0, [r7, #4]
 8002aa8:	f000 ff4e 	bl	8003948 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002aac:	6878      	ldr	r0, [r7, #4]
 8002aae:	f000 fc93 	bl	80033d8 <UART_SetConfig>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	2b01      	cmp	r3, #1
 8002ab6:	d101      	bne.n	8002abc <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	e01b      	b.n	8002af4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	685a      	ldr	r2, [r3, #4]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002aca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	689a      	ldr	r2, [r3, #8]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002ada:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	681a      	ldr	r2, [r3, #0]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f042 0201 	orr.w	r2, r2, #1
 8002aea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002aec:	6878      	ldr	r0, [r7, #4]
 8002aee:	f000 ffcd 	bl	8003a8c <UART_CheckIdleState>
 8002af2:	4603      	mov	r3, r0
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	3708      	adds	r7, #8
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}

08002afc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b08a      	sub	sp, #40	@ 0x28
 8002b00:	af02      	add	r7, sp, #8
 8002b02:	60f8      	str	r0, [r7, #12]
 8002b04:	60b9      	str	r1, [r7, #8]
 8002b06:	603b      	str	r3, [r7, #0]
 8002b08:	4613      	mov	r3, r2
 8002b0a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002b10:	2b20      	cmp	r3, #32
 8002b12:	d177      	bne.n	8002c04 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d002      	beq.n	8002b20 <HAL_UART_Transmit+0x24>
 8002b1a:	88fb      	ldrh	r3, [r7, #6]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d101      	bne.n	8002b24 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
 8002b22:	e070      	b.n	8002c06 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	2200      	movs	r2, #0
 8002b28:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	2221      	movs	r2, #33	@ 0x21
 8002b30:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002b32:	f7fe f8c1 	bl	8000cb8 <HAL_GetTick>
 8002b36:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	88fa      	ldrh	r2, [r7, #6]
 8002b3c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	88fa      	ldrh	r2, [r7, #6]
 8002b44:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b50:	d108      	bne.n	8002b64 <HAL_UART_Transmit+0x68>
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	691b      	ldr	r3, [r3, #16]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d104      	bne.n	8002b64 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	61bb      	str	r3, [r7, #24]
 8002b62:	e003      	b.n	8002b6c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002b6c:	e02f      	b.n	8002bce <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	9300      	str	r3, [sp, #0]
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	2200      	movs	r2, #0
 8002b76:	2180      	movs	r1, #128	@ 0x80
 8002b78:	68f8      	ldr	r0, [r7, #12]
 8002b7a:	f001 f82f 	bl	8003bdc <UART_WaitOnFlagUntilTimeout>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d004      	beq.n	8002b8e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	2220      	movs	r2, #32
 8002b88:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8002b8a:	2303      	movs	r3, #3
 8002b8c:	e03b      	b.n	8002c06 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8002b8e:	69fb      	ldr	r3, [r7, #28]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d10b      	bne.n	8002bac <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002b94:	69bb      	ldr	r3, [r7, #24]
 8002b96:	881a      	ldrh	r2, [r3, #0]
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ba0:	b292      	uxth	r2, r2
 8002ba2:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002ba4:	69bb      	ldr	r3, [r7, #24]
 8002ba6:	3302      	adds	r3, #2
 8002ba8:	61bb      	str	r3, [r7, #24]
 8002baa:	e007      	b.n	8002bbc <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002bac:	69fb      	ldr	r3, [r7, #28]
 8002bae:	781a      	ldrb	r2, [r3, #0]
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002bb6:	69fb      	ldr	r3, [r7, #28]
 8002bb8:	3301      	adds	r3, #1
 8002bba:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002bc2:	b29b      	uxth	r3, r3
 8002bc4:	3b01      	subs	r3, #1
 8002bc6:	b29a      	uxth	r2, r3
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002bd4:	b29b      	uxth	r3, r3
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d1c9      	bne.n	8002b6e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	9300      	str	r3, [sp, #0]
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	2200      	movs	r2, #0
 8002be2:	2140      	movs	r1, #64	@ 0x40
 8002be4:	68f8      	ldr	r0, [r7, #12]
 8002be6:	f000 fff9 	bl	8003bdc <UART_WaitOnFlagUntilTimeout>
 8002bea:	4603      	mov	r3, r0
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d004      	beq.n	8002bfa <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	2220      	movs	r2, #32
 8002bf4:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8002bf6:	2303      	movs	r3, #3
 8002bf8:	e005      	b.n	8002c06 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	2220      	movs	r2, #32
 8002bfe:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002c00:	2300      	movs	r3, #0
 8002c02:	e000      	b.n	8002c06 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8002c04:	2302      	movs	r3, #2
  }
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	3720      	adds	r7, #32
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}
	...

08002c10 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b08b      	sub	sp, #44	@ 0x2c
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	60f8      	str	r0, [r7, #12]
 8002c18:	60b9      	str	r1, [r7, #8]
 8002c1a:	4613      	mov	r3, r2
 8002c1c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002c22:	2b20      	cmp	r3, #32
 8002c24:	d147      	bne.n	8002cb6 <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d002      	beq.n	8002c32 <HAL_UART_Transmit_IT+0x22>
 8002c2c:	88fb      	ldrh	r3, [r7, #6]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d101      	bne.n	8002c36 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	e040      	b.n	8002cb8 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	68ba      	ldr	r2, [r7, #8]
 8002c3a:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	88fa      	ldrh	r2, [r7, #6]
 8002c40:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	88fa      	ldrh	r2, [r7, #6]
 8002c48:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    huart->TxISR       = NULL;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	66da      	str	r2, [r3, #108]	@ 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	2200      	movs	r2, #0
 8002c56:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	2221      	movs	r2, #33	@ 0x21
 8002c5e:	67da      	str	r2, [r3, #124]	@ 0x7c
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c68:	d107      	bne.n	8002c7a <HAL_UART_Transmit_IT+0x6a>
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	691b      	ldr	r3, [r3, #16]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d103      	bne.n	8002c7a <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	4a13      	ldr	r2, [pc, #76]	@ (8002cc4 <HAL_UART_Transmit_IT+0xb4>)
 8002c76:	66da      	str	r2, [r3, #108]	@ 0x6c
 8002c78:	e002      	b.n	8002c80 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	4a12      	ldr	r2, [pc, #72]	@ (8002cc8 <HAL_UART_Transmit_IT+0xb8>)
 8002c7e:	66da      	str	r2, [r3, #108]	@ 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	e853 3f00 	ldrex	r3, [r3]
 8002c8c:	613b      	str	r3, [r7, #16]
   return(result);
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002c94:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	461a      	mov	r2, r3
 8002c9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c9e:	623b      	str	r3, [r7, #32]
 8002ca0:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ca2:	69f9      	ldr	r1, [r7, #28]
 8002ca4:	6a3a      	ldr	r2, [r7, #32]
 8002ca6:	e841 2300 	strex	r3, r2, [r1]
 8002caa:	61bb      	str	r3, [r7, #24]
   return(result);
 8002cac:	69bb      	ldr	r3, [r7, #24]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d1e6      	bne.n	8002c80 <HAL_UART_Transmit_IT+0x70>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	e000      	b.n	8002cb8 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8002cb6:	2302      	movs	r3, #2
  }
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	372c      	adds	r7, #44	@ 0x2c
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc2:	4770      	bx	lr
 8002cc4:	08003fe7 	.word	0x08003fe7
 8002cc8:	08003f31 	.word	0x08003f31

08002ccc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b08a      	sub	sp, #40	@ 0x28
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	60f8      	str	r0, [r7, #12]
 8002cd4:	60b9      	str	r1, [r7, #8]
 8002cd6:	4613      	mov	r3, r2
 8002cd8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002ce0:	2b20      	cmp	r3, #32
 8002ce2:	d137      	bne.n	8002d54 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d002      	beq.n	8002cf0 <HAL_UART_Receive_IT+0x24>
 8002cea:	88fb      	ldrh	r3, [r7, #6]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d101      	bne.n	8002cf4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e030      	b.n	8002d56 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a18      	ldr	r2, [pc, #96]	@ (8002d60 <HAL_UART_Receive_IT+0x94>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d01f      	beq.n	8002d44 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d018      	beq.n	8002d44 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	e853 3f00 	ldrex	r3, [r3]
 8002d1e:	613b      	str	r3, [r7, #16]
   return(result);
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002d26:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	461a      	mov	r2, r3
 8002d2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d30:	623b      	str	r3, [r7, #32]
 8002d32:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d34:	69f9      	ldr	r1, [r7, #28]
 8002d36:	6a3a      	ldr	r2, [r7, #32]
 8002d38:	e841 2300 	strex	r3, r2, [r1]
 8002d3c:	61bb      	str	r3, [r7, #24]
   return(result);
 8002d3e:	69bb      	ldr	r3, [r7, #24]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d1e6      	bne.n	8002d12 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002d44:	88fb      	ldrh	r3, [r7, #6]
 8002d46:	461a      	mov	r2, r3
 8002d48:	68b9      	ldr	r1, [r7, #8]
 8002d4a:	68f8      	ldr	r0, [r7, #12]
 8002d4c:	f000 ffb4 	bl	8003cb8 <UART_Start_Receive_IT>
 8002d50:	4603      	mov	r3, r0
 8002d52:	e000      	b.n	8002d56 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002d54:	2302      	movs	r3, #2
  }
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	3728      	adds	r7, #40	@ 0x28
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}
 8002d5e:	bf00      	nop
 8002d60:	40008000 	.word	0x40008000

08002d64 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b0ba      	sub	sp, #232	@ 0xe8
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	69db      	ldr	r3, [r3, #28]
 8002d72:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002d8a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8002d8e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8002d92:	4013      	ands	r3, r2
 8002d94:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8002d98:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d115      	bne.n	8002dcc <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002da0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002da4:	f003 0320 	and.w	r3, r3, #32
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d00f      	beq.n	8002dcc <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002dac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002db0:	f003 0320 	and.w	r3, r3, #32
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d009      	beq.n	8002dcc <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	f000 82ca 	beq.w	8003356 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002dc6:	6878      	ldr	r0, [r7, #4]
 8002dc8:	4798      	blx	r3
      }
      return;
 8002dca:	e2c4      	b.n	8003356 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8002dcc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	f000 8117 	beq.w	8003004 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002dd6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002dda:	f003 0301 	and.w	r3, r3, #1
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d106      	bne.n	8002df0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002de2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8002de6:	4b85      	ldr	r3, [pc, #532]	@ (8002ffc <HAL_UART_IRQHandler+0x298>)
 8002de8:	4013      	ands	r3, r2
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	f000 810a 	beq.w	8003004 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002df0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002df4:	f003 0301 	and.w	r3, r3, #1
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d011      	beq.n	8002e20 <HAL_UART_IRQHandler+0xbc>
 8002dfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002e00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d00b      	beq.n	8002e20 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	2201      	movs	r2, #1
 8002e0e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002e16:	f043 0201 	orr.w	r2, r3, #1
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002e20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e24:	f003 0302 	and.w	r3, r3, #2
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d011      	beq.n	8002e50 <HAL_UART_IRQHandler+0xec>
 8002e2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002e30:	f003 0301 	and.w	r3, r3, #1
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d00b      	beq.n	8002e50 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	2202      	movs	r2, #2
 8002e3e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002e46:	f043 0204 	orr.w	r2, r3, #4
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002e50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e54:	f003 0304 	and.w	r3, r3, #4
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d011      	beq.n	8002e80 <HAL_UART_IRQHandler+0x11c>
 8002e5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002e60:	f003 0301 	and.w	r3, r3, #1
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d00b      	beq.n	8002e80 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	2204      	movs	r2, #4
 8002e6e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002e76:	f043 0202 	orr.w	r2, r3, #2
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002e80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e84:	f003 0308 	and.w	r3, r3, #8
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d017      	beq.n	8002ebc <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002e8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002e90:	f003 0320 	and.w	r3, r3, #32
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d105      	bne.n	8002ea4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002e98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002e9c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d00b      	beq.n	8002ebc <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	2208      	movs	r2, #8
 8002eaa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002eb2:	f043 0208 	orr.w	r2, r3, #8
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002ebc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ec0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d012      	beq.n	8002eee <HAL_UART_IRQHandler+0x18a>
 8002ec8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002ecc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d00c      	beq.n	8002eee <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002edc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002ee4:	f043 0220 	orr.w	r2, r3, #32
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	f000 8230 	beq.w	800335a <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002efa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002efe:	f003 0320 	and.w	r3, r3, #32
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d00d      	beq.n	8002f22 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002f06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002f0a:	f003 0320 	and.w	r3, r3, #32
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d007      	beq.n	8002f22 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d003      	beq.n	8002f22 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002f1e:	6878      	ldr	r0, [r7, #4]
 8002f20:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002f28:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f36:	2b40      	cmp	r3, #64	@ 0x40
 8002f38:	d005      	beq.n	8002f46 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002f3a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002f3e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d04f      	beq.n	8002fe6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002f46:	6878      	ldr	r0, [r7, #4]
 8002f48:	f000 ff7c 	bl	8003e44 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f56:	2b40      	cmp	r3, #64	@ 0x40
 8002f58:	d141      	bne.n	8002fde <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	3308      	adds	r3, #8
 8002f60:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f64:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002f68:	e853 3f00 	ldrex	r3, [r3]
 8002f6c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002f70:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002f74:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002f78:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	3308      	adds	r3, #8
 8002f82:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002f86:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002f8a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f8e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002f92:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002f96:	e841 2300 	strex	r3, r2, [r1]
 8002f9a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002f9e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d1d9      	bne.n	8002f5a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d013      	beq.n	8002fd6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002fb2:	4a13      	ldr	r2, [pc, #76]	@ (8003000 <HAL_UART_IRQHandler+0x29c>)
 8002fb4:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f7fd fffb 	bl	8000fb6 <HAL_DMA_Abort_IT>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d017      	beq.n	8002ff6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002fca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fcc:	687a      	ldr	r2, [r7, #4]
 8002fce:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002fd0:	4610      	mov	r0, r2
 8002fd2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fd4:	e00f      	b.n	8002ff6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	f000 f9d4 	bl	8003384 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fdc:	e00b      	b.n	8002ff6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f000 f9d0 	bl	8003384 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fe4:	e007      	b.n	8002ff6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002fe6:	6878      	ldr	r0, [r7, #4]
 8002fe8:	f000 f9cc 	bl	8003384 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8002ff4:	e1b1      	b.n	800335a <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ff6:	bf00      	nop
    return;
 8002ff8:	e1af      	b.n	800335a <HAL_UART_IRQHandler+0x5f6>
 8002ffa:	bf00      	nop
 8002ffc:	04000120 	.word	0x04000120
 8003000:	08003f0d 	.word	0x08003f0d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003008:	2b01      	cmp	r3, #1
 800300a:	f040 816a 	bne.w	80032e2 <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800300e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003012:	f003 0310 	and.w	r3, r3, #16
 8003016:	2b00      	cmp	r3, #0
 8003018:	f000 8163 	beq.w	80032e2 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800301c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003020:	f003 0310 	and.w	r3, r3, #16
 8003024:	2b00      	cmp	r3, #0
 8003026:	f000 815c 	beq.w	80032e2 <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	2210      	movs	r2, #16
 8003030:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800303c:	2b40      	cmp	r3, #64	@ 0x40
 800303e:	f040 80d4 	bne.w	80031ea <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800304e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003052:	2b00      	cmp	r3, #0
 8003054:	f000 80ad 	beq.w	80031b2 <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800305e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003062:	429a      	cmp	r2, r3
 8003064:	f080 80a5 	bcs.w	80031b2 <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800306e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f003 0320 	and.w	r3, r3, #32
 800307e:	2b00      	cmp	r3, #0
 8003080:	f040 8086 	bne.w	8003190 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800308c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003090:	e853 3f00 	ldrex	r3, [r3]
 8003094:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003098:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800309c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80030a0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	461a      	mov	r2, r3
 80030aa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80030ae:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80030b2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030b6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80030ba:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80030be:	e841 2300 	strex	r3, r2, [r1]
 80030c2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80030c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d1da      	bne.n	8003084 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	3308      	adds	r3, #8
 80030d4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030d6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80030d8:	e853 3f00 	ldrex	r3, [r3]
 80030dc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80030de:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80030e0:	f023 0301 	bic.w	r3, r3, #1
 80030e4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	3308      	adds	r3, #8
 80030ee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80030f2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80030f6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030f8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80030fa:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80030fe:	e841 2300 	strex	r3, r2, [r1]
 8003102:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003104:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003106:	2b00      	cmp	r3, #0
 8003108:	d1e1      	bne.n	80030ce <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	3308      	adds	r3, #8
 8003110:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003112:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003114:	e853 3f00 	ldrex	r3, [r3]
 8003118:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800311a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800311c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003120:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	3308      	adds	r3, #8
 800312a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800312e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003130:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003132:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003134:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003136:	e841 2300 	strex	r3, r2, [r1]
 800313a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800313c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800313e:	2b00      	cmp	r3, #0
 8003140:	d1e3      	bne.n	800310a <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2220      	movs	r2, #32
 8003146:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2200      	movs	r2, #0
 800314e:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003156:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003158:	e853 3f00 	ldrex	r3, [r3]
 800315c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800315e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003160:	f023 0310 	bic.w	r3, r3, #16
 8003164:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	461a      	mov	r2, r3
 800316e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003172:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003174:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003176:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003178:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800317a:	e841 2300 	strex	r3, r2, [r1]
 800317e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003180:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003182:	2b00      	cmp	r3, #0
 8003184:	d1e4      	bne.n	8003150 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800318a:	4618      	mov	r0, r3
 800318c:	f7fd fed5 	bl	8000f3a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2202      	movs	r2, #2
 8003194:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80031a2:	b29b      	uxth	r3, r3
 80031a4:	1ad3      	subs	r3, r2, r3
 80031a6:	b29b      	uxth	r3, r3
 80031a8:	4619      	mov	r1, r3
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	f000 f8f4 	bl	8003398 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80031b0:	e0d5      	b.n	800335e <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80031b8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80031bc:	429a      	cmp	r2, r3
 80031be:	f040 80ce 	bne.w	800335e <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 0320 	and.w	r3, r3, #32
 80031ce:	2b20      	cmp	r3, #32
 80031d0:	f040 80c5 	bne.w	800335e <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2202      	movs	r2, #2
 80031d8:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80031e0:	4619      	mov	r1, r3
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	f000 f8d8 	bl	8003398 <HAL_UARTEx_RxEventCallback>
      return;
 80031e8:	e0b9      	b.n	800335e <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80031f6:	b29b      	uxth	r3, r3
 80031f8:	1ad3      	subs	r3, r2, r3
 80031fa:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003204:	b29b      	uxth	r3, r3
 8003206:	2b00      	cmp	r3, #0
 8003208:	f000 80ab 	beq.w	8003362 <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 800320c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003210:	2b00      	cmp	r3, #0
 8003212:	f000 80a6 	beq.w	8003362 <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800321c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800321e:	e853 3f00 	ldrex	r3, [r3]
 8003222:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003224:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003226:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800322a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	461a      	mov	r2, r3
 8003234:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003238:	647b      	str	r3, [r7, #68]	@ 0x44
 800323a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800323c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800323e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003240:	e841 2300 	strex	r3, r2, [r1]
 8003244:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003246:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003248:	2b00      	cmp	r3, #0
 800324a:	d1e4      	bne.n	8003216 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	3308      	adds	r3, #8
 8003252:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003256:	e853 3f00 	ldrex	r3, [r3]
 800325a:	623b      	str	r3, [r7, #32]
   return(result);
 800325c:	6a3b      	ldr	r3, [r7, #32]
 800325e:	f023 0301 	bic.w	r3, r3, #1
 8003262:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	3308      	adds	r3, #8
 800326c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003270:	633a      	str	r2, [r7, #48]	@ 0x30
 8003272:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003274:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003276:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003278:	e841 2300 	strex	r3, r2, [r1]
 800327c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800327e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003280:	2b00      	cmp	r3, #0
 8003282:	d1e3      	bne.n	800324c <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2220      	movs	r2, #32
 8003288:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2200      	movs	r2, #0
 8003290:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2200      	movs	r2, #0
 8003296:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	e853 3f00 	ldrex	r3, [r3]
 80032a4:	60fb      	str	r3, [r7, #12]
   return(result);
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	f023 0310 	bic.w	r3, r3, #16
 80032ac:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	461a      	mov	r2, r3
 80032b6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80032ba:	61fb      	str	r3, [r7, #28]
 80032bc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032be:	69b9      	ldr	r1, [r7, #24]
 80032c0:	69fa      	ldr	r2, [r7, #28]
 80032c2:	e841 2300 	strex	r3, r2, [r1]
 80032c6:	617b      	str	r3, [r7, #20]
   return(result);
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d1e4      	bne.n	8003298 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2202      	movs	r2, #2
 80032d2:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80032d4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80032d8:	4619      	mov	r1, r3
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f000 f85c 	bl	8003398 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80032e0:	e03f      	b.n	8003362 <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80032e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80032e6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d00e      	beq.n	800330c <HAL_UART_IRQHandler+0x5a8>
 80032ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80032f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d008      	beq.n	800330c <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003302:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003304:	6878      	ldr	r0, [r7, #4]
 8003306:	f001 f8b5 	bl	8004474 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800330a:	e02d      	b.n	8003368 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800330c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003310:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003314:	2b00      	cmp	r3, #0
 8003316:	d00e      	beq.n	8003336 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003318:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800331c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003320:	2b00      	cmp	r3, #0
 8003322:	d008      	beq.n	8003336 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003328:	2b00      	cmp	r3, #0
 800332a:	d01c      	beq.n	8003366 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003330:	6878      	ldr	r0, [r7, #4]
 8003332:	4798      	blx	r3
    }
    return;
 8003334:	e017      	b.n	8003366 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003336:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800333a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800333e:	2b00      	cmp	r3, #0
 8003340:	d012      	beq.n	8003368 <HAL_UART_IRQHandler+0x604>
 8003342:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003346:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800334a:	2b00      	cmp	r3, #0
 800334c:	d00c      	beq.n	8003368 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	f000 fea9 	bl	80040a6 <UART_EndTransmit_IT>
    return;
 8003354:	e008      	b.n	8003368 <HAL_UART_IRQHandler+0x604>
      return;
 8003356:	bf00      	nop
 8003358:	e006      	b.n	8003368 <HAL_UART_IRQHandler+0x604>
    return;
 800335a:	bf00      	nop
 800335c:	e004      	b.n	8003368 <HAL_UART_IRQHandler+0x604>
      return;
 800335e:	bf00      	nop
 8003360:	e002      	b.n	8003368 <HAL_UART_IRQHandler+0x604>
      return;
 8003362:	bf00      	nop
 8003364:	e000      	b.n	8003368 <HAL_UART_IRQHandler+0x604>
    return;
 8003366:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8003368:	37e8      	adds	r7, #232	@ 0xe8
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}
 800336e:	bf00      	nop

08003370 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003370:	b480      	push	{r7}
 8003372:	b083      	sub	sp, #12
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003378:	bf00      	nop
 800337a:	370c      	adds	r7, #12
 800337c:	46bd      	mov	sp, r7
 800337e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003382:	4770      	bx	lr

08003384 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003384:	b480      	push	{r7}
 8003386:	b083      	sub	sp, #12
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800338c:	bf00      	nop
 800338e:	370c      	adds	r7, #12
 8003390:	46bd      	mov	sp, r7
 8003392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003396:	4770      	bx	lr

08003398 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003398:	b480      	push	{r7}
 800339a:	b083      	sub	sp, #12
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
 80033a0:	460b      	mov	r3, r1
 80033a2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80033a4:	bf00      	nop
 80033a6:	370c      	adds	r7, #12
 80033a8:	46bd      	mov	sp, r7
 80033aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ae:	4770      	bx	lr

080033b0 <HAL_UART_GetState>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(const UART_HandleTypeDef *huart)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b085      	sub	sp, #20
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  uint32_t temp1;
  uint32_t temp2;
  temp1 = huart->gState;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80033bc:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80033c4:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 80033c6:	68fa      	ldr	r2, [r7, #12]
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	4313      	orrs	r3, r2
}
 80033cc:	4618      	mov	r0, r3
 80033ce:	3714      	adds	r7, #20
 80033d0:	46bd      	mov	sp, r7
 80033d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d6:	4770      	bx	lr

080033d8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80033d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033dc:	b08a      	sub	sp, #40	@ 0x28
 80033de:	af00      	add	r7, sp, #0
 80033e0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80033e2:	2300      	movs	r3, #0
 80033e4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	689a      	ldr	r2, [r3, #8]
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	691b      	ldr	r3, [r3, #16]
 80033f0:	431a      	orrs	r2, r3
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	695b      	ldr	r3, [r3, #20]
 80033f6:	431a      	orrs	r2, r3
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	69db      	ldr	r3, [r3, #28]
 80033fc:	4313      	orrs	r3, r2
 80033fe:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	681a      	ldr	r2, [r3, #0]
 8003406:	4ba4      	ldr	r3, [pc, #656]	@ (8003698 <UART_SetConfig+0x2c0>)
 8003408:	4013      	ands	r3, r2
 800340a:	68fa      	ldr	r2, [r7, #12]
 800340c:	6812      	ldr	r2, [r2, #0]
 800340e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003410:	430b      	orrs	r3, r1
 8003412:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	68da      	ldr	r2, [r3, #12]
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	430a      	orrs	r2, r1
 8003428:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	699b      	ldr	r3, [r3, #24]
 800342e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a99      	ldr	r2, [pc, #612]	@ (800369c <UART_SetConfig+0x2c4>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d004      	beq.n	8003444 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	6a1b      	ldr	r3, [r3, #32]
 800343e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003440:	4313      	orrs	r3, r2
 8003442:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003454:	430a      	orrs	r2, r1
 8003456:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a90      	ldr	r2, [pc, #576]	@ (80036a0 <UART_SetConfig+0x2c8>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d126      	bne.n	80034b0 <UART_SetConfig+0xd8>
 8003462:	4b90      	ldr	r3, [pc, #576]	@ (80036a4 <UART_SetConfig+0x2cc>)
 8003464:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003468:	f003 0303 	and.w	r3, r3, #3
 800346c:	2b03      	cmp	r3, #3
 800346e:	d81b      	bhi.n	80034a8 <UART_SetConfig+0xd0>
 8003470:	a201      	add	r2, pc, #4	@ (adr r2, 8003478 <UART_SetConfig+0xa0>)
 8003472:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003476:	bf00      	nop
 8003478:	08003489 	.word	0x08003489
 800347c:	08003499 	.word	0x08003499
 8003480:	08003491 	.word	0x08003491
 8003484:	080034a1 	.word	0x080034a1
 8003488:	2301      	movs	r3, #1
 800348a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800348e:	e116      	b.n	80036be <UART_SetConfig+0x2e6>
 8003490:	2302      	movs	r3, #2
 8003492:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003496:	e112      	b.n	80036be <UART_SetConfig+0x2e6>
 8003498:	2304      	movs	r3, #4
 800349a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800349e:	e10e      	b.n	80036be <UART_SetConfig+0x2e6>
 80034a0:	2308      	movs	r3, #8
 80034a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80034a6:	e10a      	b.n	80036be <UART_SetConfig+0x2e6>
 80034a8:	2310      	movs	r3, #16
 80034aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80034ae:	e106      	b.n	80036be <UART_SetConfig+0x2e6>
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a7c      	ldr	r2, [pc, #496]	@ (80036a8 <UART_SetConfig+0x2d0>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d138      	bne.n	800352c <UART_SetConfig+0x154>
 80034ba:	4b7a      	ldr	r3, [pc, #488]	@ (80036a4 <UART_SetConfig+0x2cc>)
 80034bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034c0:	f003 030c 	and.w	r3, r3, #12
 80034c4:	2b0c      	cmp	r3, #12
 80034c6:	d82d      	bhi.n	8003524 <UART_SetConfig+0x14c>
 80034c8:	a201      	add	r2, pc, #4	@ (adr r2, 80034d0 <UART_SetConfig+0xf8>)
 80034ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034ce:	bf00      	nop
 80034d0:	08003505 	.word	0x08003505
 80034d4:	08003525 	.word	0x08003525
 80034d8:	08003525 	.word	0x08003525
 80034dc:	08003525 	.word	0x08003525
 80034e0:	08003515 	.word	0x08003515
 80034e4:	08003525 	.word	0x08003525
 80034e8:	08003525 	.word	0x08003525
 80034ec:	08003525 	.word	0x08003525
 80034f0:	0800350d 	.word	0x0800350d
 80034f4:	08003525 	.word	0x08003525
 80034f8:	08003525 	.word	0x08003525
 80034fc:	08003525 	.word	0x08003525
 8003500:	0800351d 	.word	0x0800351d
 8003504:	2300      	movs	r3, #0
 8003506:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800350a:	e0d8      	b.n	80036be <UART_SetConfig+0x2e6>
 800350c:	2302      	movs	r3, #2
 800350e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003512:	e0d4      	b.n	80036be <UART_SetConfig+0x2e6>
 8003514:	2304      	movs	r3, #4
 8003516:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800351a:	e0d0      	b.n	80036be <UART_SetConfig+0x2e6>
 800351c:	2308      	movs	r3, #8
 800351e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003522:	e0cc      	b.n	80036be <UART_SetConfig+0x2e6>
 8003524:	2310      	movs	r3, #16
 8003526:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800352a:	e0c8      	b.n	80036be <UART_SetConfig+0x2e6>
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a5e      	ldr	r2, [pc, #376]	@ (80036ac <UART_SetConfig+0x2d4>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d125      	bne.n	8003582 <UART_SetConfig+0x1aa>
 8003536:	4b5b      	ldr	r3, [pc, #364]	@ (80036a4 <UART_SetConfig+0x2cc>)
 8003538:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800353c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003540:	2b30      	cmp	r3, #48	@ 0x30
 8003542:	d016      	beq.n	8003572 <UART_SetConfig+0x19a>
 8003544:	2b30      	cmp	r3, #48	@ 0x30
 8003546:	d818      	bhi.n	800357a <UART_SetConfig+0x1a2>
 8003548:	2b20      	cmp	r3, #32
 800354a:	d00a      	beq.n	8003562 <UART_SetConfig+0x18a>
 800354c:	2b20      	cmp	r3, #32
 800354e:	d814      	bhi.n	800357a <UART_SetConfig+0x1a2>
 8003550:	2b00      	cmp	r3, #0
 8003552:	d002      	beq.n	800355a <UART_SetConfig+0x182>
 8003554:	2b10      	cmp	r3, #16
 8003556:	d008      	beq.n	800356a <UART_SetConfig+0x192>
 8003558:	e00f      	b.n	800357a <UART_SetConfig+0x1a2>
 800355a:	2300      	movs	r3, #0
 800355c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003560:	e0ad      	b.n	80036be <UART_SetConfig+0x2e6>
 8003562:	2302      	movs	r3, #2
 8003564:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003568:	e0a9      	b.n	80036be <UART_SetConfig+0x2e6>
 800356a:	2304      	movs	r3, #4
 800356c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003570:	e0a5      	b.n	80036be <UART_SetConfig+0x2e6>
 8003572:	2308      	movs	r3, #8
 8003574:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003578:	e0a1      	b.n	80036be <UART_SetConfig+0x2e6>
 800357a:	2310      	movs	r3, #16
 800357c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003580:	e09d      	b.n	80036be <UART_SetConfig+0x2e6>
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a4a      	ldr	r2, [pc, #296]	@ (80036b0 <UART_SetConfig+0x2d8>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d125      	bne.n	80035d8 <UART_SetConfig+0x200>
 800358c:	4b45      	ldr	r3, [pc, #276]	@ (80036a4 <UART_SetConfig+0x2cc>)
 800358e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003592:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003596:	2bc0      	cmp	r3, #192	@ 0xc0
 8003598:	d016      	beq.n	80035c8 <UART_SetConfig+0x1f0>
 800359a:	2bc0      	cmp	r3, #192	@ 0xc0
 800359c:	d818      	bhi.n	80035d0 <UART_SetConfig+0x1f8>
 800359e:	2b80      	cmp	r3, #128	@ 0x80
 80035a0:	d00a      	beq.n	80035b8 <UART_SetConfig+0x1e0>
 80035a2:	2b80      	cmp	r3, #128	@ 0x80
 80035a4:	d814      	bhi.n	80035d0 <UART_SetConfig+0x1f8>
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d002      	beq.n	80035b0 <UART_SetConfig+0x1d8>
 80035aa:	2b40      	cmp	r3, #64	@ 0x40
 80035ac:	d008      	beq.n	80035c0 <UART_SetConfig+0x1e8>
 80035ae:	e00f      	b.n	80035d0 <UART_SetConfig+0x1f8>
 80035b0:	2300      	movs	r3, #0
 80035b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80035b6:	e082      	b.n	80036be <UART_SetConfig+0x2e6>
 80035b8:	2302      	movs	r3, #2
 80035ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80035be:	e07e      	b.n	80036be <UART_SetConfig+0x2e6>
 80035c0:	2304      	movs	r3, #4
 80035c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80035c6:	e07a      	b.n	80036be <UART_SetConfig+0x2e6>
 80035c8:	2308      	movs	r3, #8
 80035ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80035ce:	e076      	b.n	80036be <UART_SetConfig+0x2e6>
 80035d0:	2310      	movs	r3, #16
 80035d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80035d6:	e072      	b.n	80036be <UART_SetConfig+0x2e6>
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a35      	ldr	r2, [pc, #212]	@ (80036b4 <UART_SetConfig+0x2dc>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d12a      	bne.n	8003638 <UART_SetConfig+0x260>
 80035e2:	4b30      	ldr	r3, [pc, #192]	@ (80036a4 <UART_SetConfig+0x2cc>)
 80035e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035e8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80035ec:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80035f0:	d01a      	beq.n	8003628 <UART_SetConfig+0x250>
 80035f2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80035f6:	d81b      	bhi.n	8003630 <UART_SetConfig+0x258>
 80035f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80035fc:	d00c      	beq.n	8003618 <UART_SetConfig+0x240>
 80035fe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003602:	d815      	bhi.n	8003630 <UART_SetConfig+0x258>
 8003604:	2b00      	cmp	r3, #0
 8003606:	d003      	beq.n	8003610 <UART_SetConfig+0x238>
 8003608:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800360c:	d008      	beq.n	8003620 <UART_SetConfig+0x248>
 800360e:	e00f      	b.n	8003630 <UART_SetConfig+0x258>
 8003610:	2300      	movs	r3, #0
 8003612:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003616:	e052      	b.n	80036be <UART_SetConfig+0x2e6>
 8003618:	2302      	movs	r3, #2
 800361a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800361e:	e04e      	b.n	80036be <UART_SetConfig+0x2e6>
 8003620:	2304      	movs	r3, #4
 8003622:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003626:	e04a      	b.n	80036be <UART_SetConfig+0x2e6>
 8003628:	2308      	movs	r3, #8
 800362a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800362e:	e046      	b.n	80036be <UART_SetConfig+0x2e6>
 8003630:	2310      	movs	r3, #16
 8003632:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003636:	e042      	b.n	80036be <UART_SetConfig+0x2e6>
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a17      	ldr	r2, [pc, #92]	@ (800369c <UART_SetConfig+0x2c4>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d13a      	bne.n	80036b8 <UART_SetConfig+0x2e0>
 8003642:	4b18      	ldr	r3, [pc, #96]	@ (80036a4 <UART_SetConfig+0x2cc>)
 8003644:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003648:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800364c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003650:	d01a      	beq.n	8003688 <UART_SetConfig+0x2b0>
 8003652:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003656:	d81b      	bhi.n	8003690 <UART_SetConfig+0x2b8>
 8003658:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800365c:	d00c      	beq.n	8003678 <UART_SetConfig+0x2a0>
 800365e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003662:	d815      	bhi.n	8003690 <UART_SetConfig+0x2b8>
 8003664:	2b00      	cmp	r3, #0
 8003666:	d003      	beq.n	8003670 <UART_SetConfig+0x298>
 8003668:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800366c:	d008      	beq.n	8003680 <UART_SetConfig+0x2a8>
 800366e:	e00f      	b.n	8003690 <UART_SetConfig+0x2b8>
 8003670:	2300      	movs	r3, #0
 8003672:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003676:	e022      	b.n	80036be <UART_SetConfig+0x2e6>
 8003678:	2302      	movs	r3, #2
 800367a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800367e:	e01e      	b.n	80036be <UART_SetConfig+0x2e6>
 8003680:	2304      	movs	r3, #4
 8003682:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003686:	e01a      	b.n	80036be <UART_SetConfig+0x2e6>
 8003688:	2308      	movs	r3, #8
 800368a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800368e:	e016      	b.n	80036be <UART_SetConfig+0x2e6>
 8003690:	2310      	movs	r3, #16
 8003692:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003696:	e012      	b.n	80036be <UART_SetConfig+0x2e6>
 8003698:	efff69f3 	.word	0xefff69f3
 800369c:	40008000 	.word	0x40008000
 80036a0:	40013800 	.word	0x40013800
 80036a4:	40021000 	.word	0x40021000
 80036a8:	40004400 	.word	0x40004400
 80036ac:	40004800 	.word	0x40004800
 80036b0:	40004c00 	.word	0x40004c00
 80036b4:	40005000 	.word	0x40005000
 80036b8:	2310      	movs	r3, #16
 80036ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a9f      	ldr	r2, [pc, #636]	@ (8003940 <UART_SetConfig+0x568>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d17a      	bne.n	80037be <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80036c8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80036cc:	2b08      	cmp	r3, #8
 80036ce:	d824      	bhi.n	800371a <UART_SetConfig+0x342>
 80036d0:	a201      	add	r2, pc, #4	@ (adr r2, 80036d8 <UART_SetConfig+0x300>)
 80036d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036d6:	bf00      	nop
 80036d8:	080036fd 	.word	0x080036fd
 80036dc:	0800371b 	.word	0x0800371b
 80036e0:	08003705 	.word	0x08003705
 80036e4:	0800371b 	.word	0x0800371b
 80036e8:	0800370b 	.word	0x0800370b
 80036ec:	0800371b 	.word	0x0800371b
 80036f0:	0800371b 	.word	0x0800371b
 80036f4:	0800371b 	.word	0x0800371b
 80036f8:	08003713 	.word	0x08003713
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80036fc:	f7fe fc68 	bl	8001fd0 <HAL_RCC_GetPCLK1Freq>
 8003700:	61f8      	str	r0, [r7, #28]
        break;
 8003702:	e010      	b.n	8003726 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003704:	4b8f      	ldr	r3, [pc, #572]	@ (8003944 <UART_SetConfig+0x56c>)
 8003706:	61fb      	str	r3, [r7, #28]
        break;
 8003708:	e00d      	b.n	8003726 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800370a:	f7fe fbc9 	bl	8001ea0 <HAL_RCC_GetSysClockFreq>
 800370e:	61f8      	str	r0, [r7, #28]
        break;
 8003710:	e009      	b.n	8003726 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003712:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003716:	61fb      	str	r3, [r7, #28]
        break;
 8003718:	e005      	b.n	8003726 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800371a:	2300      	movs	r3, #0
 800371c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003724:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003726:	69fb      	ldr	r3, [r7, #28]
 8003728:	2b00      	cmp	r3, #0
 800372a:	f000 80fb 	beq.w	8003924 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	685a      	ldr	r2, [r3, #4]
 8003732:	4613      	mov	r3, r2
 8003734:	005b      	lsls	r3, r3, #1
 8003736:	4413      	add	r3, r2
 8003738:	69fa      	ldr	r2, [r7, #28]
 800373a:	429a      	cmp	r2, r3
 800373c:	d305      	bcc.n	800374a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003744:	69fa      	ldr	r2, [r7, #28]
 8003746:	429a      	cmp	r2, r3
 8003748:	d903      	bls.n	8003752 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003750:	e0e8      	b.n	8003924 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003752:	69fb      	ldr	r3, [r7, #28]
 8003754:	2200      	movs	r2, #0
 8003756:	461c      	mov	r4, r3
 8003758:	4615      	mov	r5, r2
 800375a:	f04f 0200 	mov.w	r2, #0
 800375e:	f04f 0300 	mov.w	r3, #0
 8003762:	022b      	lsls	r3, r5, #8
 8003764:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003768:	0222      	lsls	r2, r4, #8
 800376a:	68f9      	ldr	r1, [r7, #12]
 800376c:	6849      	ldr	r1, [r1, #4]
 800376e:	0849      	lsrs	r1, r1, #1
 8003770:	2000      	movs	r0, #0
 8003772:	4688      	mov	r8, r1
 8003774:	4681      	mov	r9, r0
 8003776:	eb12 0a08 	adds.w	sl, r2, r8
 800377a:	eb43 0b09 	adc.w	fp, r3, r9
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	2200      	movs	r2, #0
 8003784:	603b      	str	r3, [r7, #0]
 8003786:	607a      	str	r2, [r7, #4]
 8003788:	e9d7 2300 	ldrd	r2, r3, [r7]
 800378c:	4650      	mov	r0, sl
 800378e:	4659      	mov	r1, fp
 8003790:	f7fc fd76 	bl	8000280 <__aeabi_uldivmod>
 8003794:	4602      	mov	r2, r0
 8003796:	460b      	mov	r3, r1
 8003798:	4613      	mov	r3, r2
 800379a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800379c:	69bb      	ldr	r3, [r7, #24]
 800379e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80037a2:	d308      	bcc.n	80037b6 <UART_SetConfig+0x3de>
 80037a4:	69bb      	ldr	r3, [r7, #24]
 80037a6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80037aa:	d204      	bcs.n	80037b6 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	69ba      	ldr	r2, [r7, #24]
 80037b2:	60da      	str	r2, [r3, #12]
 80037b4:	e0b6      	b.n	8003924 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80037bc:	e0b2      	b.n	8003924 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	69db      	ldr	r3, [r3, #28]
 80037c2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80037c6:	d15e      	bne.n	8003886 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80037c8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80037cc:	2b08      	cmp	r3, #8
 80037ce:	d828      	bhi.n	8003822 <UART_SetConfig+0x44a>
 80037d0:	a201      	add	r2, pc, #4	@ (adr r2, 80037d8 <UART_SetConfig+0x400>)
 80037d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037d6:	bf00      	nop
 80037d8:	080037fd 	.word	0x080037fd
 80037dc:	08003805 	.word	0x08003805
 80037e0:	0800380d 	.word	0x0800380d
 80037e4:	08003823 	.word	0x08003823
 80037e8:	08003813 	.word	0x08003813
 80037ec:	08003823 	.word	0x08003823
 80037f0:	08003823 	.word	0x08003823
 80037f4:	08003823 	.word	0x08003823
 80037f8:	0800381b 	.word	0x0800381b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80037fc:	f7fe fbe8 	bl	8001fd0 <HAL_RCC_GetPCLK1Freq>
 8003800:	61f8      	str	r0, [r7, #28]
        break;
 8003802:	e014      	b.n	800382e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003804:	f7fe fbfa 	bl	8001ffc <HAL_RCC_GetPCLK2Freq>
 8003808:	61f8      	str	r0, [r7, #28]
        break;
 800380a:	e010      	b.n	800382e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800380c:	4b4d      	ldr	r3, [pc, #308]	@ (8003944 <UART_SetConfig+0x56c>)
 800380e:	61fb      	str	r3, [r7, #28]
        break;
 8003810:	e00d      	b.n	800382e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003812:	f7fe fb45 	bl	8001ea0 <HAL_RCC_GetSysClockFreq>
 8003816:	61f8      	str	r0, [r7, #28]
        break;
 8003818:	e009      	b.n	800382e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800381a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800381e:	61fb      	str	r3, [r7, #28]
        break;
 8003820:	e005      	b.n	800382e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003822:	2300      	movs	r3, #0
 8003824:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800382c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800382e:	69fb      	ldr	r3, [r7, #28]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d077      	beq.n	8003924 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003834:	69fb      	ldr	r3, [r7, #28]
 8003836:	005a      	lsls	r2, r3, #1
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	085b      	lsrs	r3, r3, #1
 800383e:	441a      	add	r2, r3
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	fbb2 f3f3 	udiv	r3, r2, r3
 8003848:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800384a:	69bb      	ldr	r3, [r7, #24]
 800384c:	2b0f      	cmp	r3, #15
 800384e:	d916      	bls.n	800387e <UART_SetConfig+0x4a6>
 8003850:	69bb      	ldr	r3, [r7, #24]
 8003852:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003856:	d212      	bcs.n	800387e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003858:	69bb      	ldr	r3, [r7, #24]
 800385a:	b29b      	uxth	r3, r3
 800385c:	f023 030f 	bic.w	r3, r3, #15
 8003860:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003862:	69bb      	ldr	r3, [r7, #24]
 8003864:	085b      	lsrs	r3, r3, #1
 8003866:	b29b      	uxth	r3, r3
 8003868:	f003 0307 	and.w	r3, r3, #7
 800386c:	b29a      	uxth	r2, r3
 800386e:	8afb      	ldrh	r3, [r7, #22]
 8003870:	4313      	orrs	r3, r2
 8003872:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	8afa      	ldrh	r2, [r7, #22]
 800387a:	60da      	str	r2, [r3, #12]
 800387c:	e052      	b.n	8003924 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003884:	e04e      	b.n	8003924 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003886:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800388a:	2b08      	cmp	r3, #8
 800388c:	d827      	bhi.n	80038de <UART_SetConfig+0x506>
 800388e:	a201      	add	r2, pc, #4	@ (adr r2, 8003894 <UART_SetConfig+0x4bc>)
 8003890:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003894:	080038b9 	.word	0x080038b9
 8003898:	080038c1 	.word	0x080038c1
 800389c:	080038c9 	.word	0x080038c9
 80038a0:	080038df 	.word	0x080038df
 80038a4:	080038cf 	.word	0x080038cf
 80038a8:	080038df 	.word	0x080038df
 80038ac:	080038df 	.word	0x080038df
 80038b0:	080038df 	.word	0x080038df
 80038b4:	080038d7 	.word	0x080038d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80038b8:	f7fe fb8a 	bl	8001fd0 <HAL_RCC_GetPCLK1Freq>
 80038bc:	61f8      	str	r0, [r7, #28]
        break;
 80038be:	e014      	b.n	80038ea <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80038c0:	f7fe fb9c 	bl	8001ffc <HAL_RCC_GetPCLK2Freq>
 80038c4:	61f8      	str	r0, [r7, #28]
        break;
 80038c6:	e010      	b.n	80038ea <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80038c8:	4b1e      	ldr	r3, [pc, #120]	@ (8003944 <UART_SetConfig+0x56c>)
 80038ca:	61fb      	str	r3, [r7, #28]
        break;
 80038cc:	e00d      	b.n	80038ea <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80038ce:	f7fe fae7 	bl	8001ea0 <HAL_RCC_GetSysClockFreq>
 80038d2:	61f8      	str	r0, [r7, #28]
        break;
 80038d4:	e009      	b.n	80038ea <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80038d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80038da:	61fb      	str	r3, [r7, #28]
        break;
 80038dc:	e005      	b.n	80038ea <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80038de:	2300      	movs	r3, #0
 80038e0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80038e8:	bf00      	nop
    }

    if (pclk != 0U)
 80038ea:	69fb      	ldr	r3, [r7, #28]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d019      	beq.n	8003924 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	085a      	lsrs	r2, r3, #1
 80038f6:	69fb      	ldr	r3, [r7, #28]
 80038f8:	441a      	add	r2, r3
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003902:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003904:	69bb      	ldr	r3, [r7, #24]
 8003906:	2b0f      	cmp	r3, #15
 8003908:	d909      	bls.n	800391e <UART_SetConfig+0x546>
 800390a:	69bb      	ldr	r3, [r7, #24]
 800390c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003910:	d205      	bcs.n	800391e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003912:	69bb      	ldr	r3, [r7, #24]
 8003914:	b29a      	uxth	r2, r3
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	60da      	str	r2, [r3, #12]
 800391c:	e002      	b.n	8003924 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	2200      	movs	r2, #0
 8003928:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	2200      	movs	r2, #0
 800392e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003930:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8003934:	4618      	mov	r0, r3
 8003936:	3728      	adds	r7, #40	@ 0x28
 8003938:	46bd      	mov	sp, r7
 800393a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800393e:	bf00      	nop
 8003940:	40008000 	.word	0x40008000
 8003944:	00f42400 	.word	0x00f42400

08003948 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003948:	b480      	push	{r7}
 800394a:	b083      	sub	sp, #12
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003954:	f003 0308 	and.w	r3, r3, #8
 8003958:	2b00      	cmp	r3, #0
 800395a:	d00a      	beq.n	8003972 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	430a      	orrs	r2, r1
 8003970:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003976:	f003 0301 	and.w	r3, r3, #1
 800397a:	2b00      	cmp	r3, #0
 800397c:	d00a      	beq.n	8003994 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	430a      	orrs	r2, r1
 8003992:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003998:	f003 0302 	and.w	r3, r3, #2
 800399c:	2b00      	cmp	r3, #0
 800399e:	d00a      	beq.n	80039b6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	430a      	orrs	r2, r1
 80039b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039ba:	f003 0304 	and.w	r3, r3, #4
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d00a      	beq.n	80039d8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	430a      	orrs	r2, r1
 80039d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039dc:	f003 0310 	and.w	r3, r3, #16
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d00a      	beq.n	80039fa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	430a      	orrs	r2, r1
 80039f8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039fe:	f003 0320 	and.w	r3, r3, #32
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d00a      	beq.n	8003a1c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	689b      	ldr	r3, [r3, #8]
 8003a0c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	430a      	orrs	r2, r1
 8003a1a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d01a      	beq.n	8003a5e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	430a      	orrs	r2, r1
 8003a3c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a42:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003a46:	d10a      	bne.n	8003a5e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	430a      	orrs	r2, r1
 8003a5c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d00a      	beq.n	8003a80 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	430a      	orrs	r2, r1
 8003a7e:	605a      	str	r2, [r3, #4]
  }
}
 8003a80:	bf00      	nop
 8003a82:	370c      	adds	r7, #12
 8003a84:	46bd      	mov	sp, r7
 8003a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8a:	4770      	bx	lr

08003a8c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b098      	sub	sp, #96	@ 0x60
 8003a90:	af02      	add	r7, sp, #8
 8003a92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2200      	movs	r2, #0
 8003a98:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003a9c:	f7fd f90c 	bl	8000cb8 <HAL_GetTick>
 8003aa0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f003 0308 	and.w	r3, r3, #8
 8003aac:	2b08      	cmp	r3, #8
 8003aae:	d12e      	bne.n	8003b0e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ab0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003ab4:	9300      	str	r3, [sp, #0]
 8003ab6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ab8:	2200      	movs	r2, #0
 8003aba:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	f000 f88c 	bl	8003bdc <UART_WaitOnFlagUntilTimeout>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d021      	beq.n	8003b0e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ad0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ad2:	e853 3f00 	ldrex	r3, [r3]
 8003ad6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003ad8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ada:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003ade:	653b      	str	r3, [r7, #80]	@ 0x50
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	461a      	mov	r2, r3
 8003ae6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003ae8:	647b      	str	r3, [r7, #68]	@ 0x44
 8003aea:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aec:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003aee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003af0:	e841 2300 	strex	r3, r2, [r1]
 8003af4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003af6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d1e6      	bne.n	8003aca <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2220      	movs	r2, #32
 8003b00:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2200      	movs	r2, #0
 8003b06:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b0a:	2303      	movs	r3, #3
 8003b0c:	e062      	b.n	8003bd4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f003 0304 	and.w	r3, r3, #4
 8003b18:	2b04      	cmp	r3, #4
 8003b1a:	d149      	bne.n	8003bb0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b1c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003b20:	9300      	str	r3, [sp, #0]
 8003b22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b24:	2200      	movs	r2, #0
 8003b26:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003b2a:	6878      	ldr	r0, [r7, #4]
 8003b2c:	f000 f856 	bl	8003bdc <UART_WaitOnFlagUntilTimeout>
 8003b30:	4603      	mov	r3, r0
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d03c      	beq.n	8003bb0 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b3e:	e853 3f00 	ldrex	r3, [r3]
 8003b42:	623b      	str	r3, [r7, #32]
   return(result);
 8003b44:	6a3b      	ldr	r3, [r7, #32]
 8003b46:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003b4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	461a      	mov	r2, r3
 8003b52:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003b54:	633b      	str	r3, [r7, #48]	@ 0x30
 8003b56:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b58:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003b5a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003b5c:	e841 2300 	strex	r3, r2, [r1]
 8003b60:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003b62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d1e6      	bne.n	8003b36 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	3308      	adds	r3, #8
 8003b6e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b70:	693b      	ldr	r3, [r7, #16]
 8003b72:	e853 3f00 	ldrex	r3, [r3]
 8003b76:	60fb      	str	r3, [r7, #12]
   return(result);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	f023 0301 	bic.w	r3, r3, #1
 8003b7e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	3308      	adds	r3, #8
 8003b86:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003b88:	61fa      	str	r2, [r7, #28]
 8003b8a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b8c:	69b9      	ldr	r1, [r7, #24]
 8003b8e:	69fa      	ldr	r2, [r7, #28]
 8003b90:	e841 2300 	strex	r3, r2, [r1]
 8003b94:	617b      	str	r3, [r7, #20]
   return(result);
 8003b96:	697b      	ldr	r3, [r7, #20]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d1e5      	bne.n	8003b68 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2220      	movs	r2, #32
 8003ba0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003bac:	2303      	movs	r3, #3
 8003bae:	e011      	b.n	8003bd4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2220      	movs	r2, #32
 8003bb4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2220      	movs	r2, #32
 8003bba:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003bd2:	2300      	movs	r3, #0
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	3758      	adds	r7, #88	@ 0x58
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}

08003bdc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b084      	sub	sp, #16
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	60f8      	str	r0, [r7, #12]
 8003be4:	60b9      	str	r1, [r7, #8]
 8003be6:	603b      	str	r3, [r7, #0]
 8003be8:	4613      	mov	r3, r2
 8003bea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bec:	e04f      	b.n	8003c8e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bee:	69bb      	ldr	r3, [r7, #24]
 8003bf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bf4:	d04b      	beq.n	8003c8e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bf6:	f7fd f85f 	bl	8000cb8 <HAL_GetTick>
 8003bfa:	4602      	mov	r2, r0
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	1ad3      	subs	r3, r2, r3
 8003c00:	69ba      	ldr	r2, [r7, #24]
 8003c02:	429a      	cmp	r2, r3
 8003c04:	d302      	bcc.n	8003c0c <UART_WaitOnFlagUntilTimeout+0x30>
 8003c06:	69bb      	ldr	r3, [r7, #24]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d101      	bne.n	8003c10 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003c0c:	2303      	movs	r3, #3
 8003c0e:	e04e      	b.n	8003cae <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f003 0304 	and.w	r3, r3, #4
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d037      	beq.n	8003c8e <UART_WaitOnFlagUntilTimeout+0xb2>
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	2b80      	cmp	r3, #128	@ 0x80
 8003c22:	d034      	beq.n	8003c8e <UART_WaitOnFlagUntilTimeout+0xb2>
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	2b40      	cmp	r3, #64	@ 0x40
 8003c28:	d031      	beq.n	8003c8e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	69db      	ldr	r3, [r3, #28]
 8003c30:	f003 0308 	and.w	r3, r3, #8
 8003c34:	2b08      	cmp	r3, #8
 8003c36:	d110      	bne.n	8003c5a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	2208      	movs	r2, #8
 8003c3e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003c40:	68f8      	ldr	r0, [r7, #12]
 8003c42:	f000 f8ff 	bl	8003e44 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	2208      	movs	r2, #8
 8003c4a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	2200      	movs	r2, #0
 8003c52:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003c56:	2301      	movs	r3, #1
 8003c58:	e029      	b.n	8003cae <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	69db      	ldr	r3, [r3, #28]
 8003c60:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003c64:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003c68:	d111      	bne.n	8003c8e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003c72:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003c74:	68f8      	ldr	r0, [r7, #12]
 8003c76:	f000 f8e5 	bl	8003e44 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	2220      	movs	r2, #32
 8003c7e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	2200      	movs	r2, #0
 8003c86:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003c8a:	2303      	movs	r3, #3
 8003c8c:	e00f      	b.n	8003cae <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	69da      	ldr	r2, [r3, #28]
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	4013      	ands	r3, r2
 8003c98:	68ba      	ldr	r2, [r7, #8]
 8003c9a:	429a      	cmp	r2, r3
 8003c9c:	bf0c      	ite	eq
 8003c9e:	2301      	moveq	r3, #1
 8003ca0:	2300      	movne	r3, #0
 8003ca2:	b2db      	uxtb	r3, r3
 8003ca4:	461a      	mov	r2, r3
 8003ca6:	79fb      	ldrb	r3, [r7, #7]
 8003ca8:	429a      	cmp	r2, r3
 8003caa:	d0a0      	beq.n	8003bee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003cac:	2300      	movs	r3, #0
}
 8003cae:	4618      	mov	r0, r3
 8003cb0:	3710      	adds	r7, #16
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}
	...

08003cb8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b097      	sub	sp, #92	@ 0x5c
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	60f8      	str	r0, [r7, #12]
 8003cc0:	60b9      	str	r1, [r7, #8]
 8003cc2:	4613      	mov	r3, r2
 8003cc4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	68ba      	ldr	r2, [r7, #8]
 8003cca:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	88fa      	ldrh	r2, [r7, #6]
 8003cd0:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	88fa      	ldrh	r2, [r7, #6]
 8003cd8:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	689b      	ldr	r3, [r3, #8]
 8003ce6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003cea:	d10e      	bne.n	8003d0a <UART_Start_Receive_IT+0x52>
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	691b      	ldr	r3, [r3, #16]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d105      	bne.n	8003d00 <UART_Start_Receive_IT+0x48>
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8003cfa:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003cfe:	e02d      	b.n	8003d5c <UART_Start_Receive_IT+0xa4>
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	22ff      	movs	r2, #255	@ 0xff
 8003d04:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003d08:	e028      	b.n	8003d5c <UART_Start_Receive_IT+0xa4>
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d10d      	bne.n	8003d2e <UART_Start_Receive_IT+0x76>
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	691b      	ldr	r3, [r3, #16]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d104      	bne.n	8003d24 <UART_Start_Receive_IT+0x6c>
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	22ff      	movs	r2, #255	@ 0xff
 8003d1e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003d22:	e01b      	b.n	8003d5c <UART_Start_Receive_IT+0xa4>
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	227f      	movs	r2, #127	@ 0x7f
 8003d28:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003d2c:	e016      	b.n	8003d5c <UART_Start_Receive_IT+0xa4>
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	689b      	ldr	r3, [r3, #8]
 8003d32:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003d36:	d10d      	bne.n	8003d54 <UART_Start_Receive_IT+0x9c>
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	691b      	ldr	r3, [r3, #16]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d104      	bne.n	8003d4a <UART_Start_Receive_IT+0x92>
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	227f      	movs	r2, #127	@ 0x7f
 8003d44:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003d48:	e008      	b.n	8003d5c <UART_Start_Receive_IT+0xa4>
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	223f      	movs	r2, #63	@ 0x3f
 8003d4e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003d52:	e003      	b.n	8003d5c <UART_Start_Receive_IT+0xa4>
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	2200      	movs	r2, #0
 8003d58:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	2222      	movs	r2, #34	@ 0x22
 8003d68:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	3308      	adds	r3, #8
 8003d72:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d76:	e853 3f00 	ldrex	r3, [r3]
 8003d7a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003d7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d7e:	f043 0301 	orr.w	r3, r3, #1
 8003d82:	657b      	str	r3, [r7, #84]	@ 0x54
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	3308      	adds	r3, #8
 8003d8a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003d8c:	64ba      	str	r2, [r7, #72]	@ 0x48
 8003d8e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d90:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8003d92:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003d94:	e841 2300 	strex	r3, r2, [r1]
 8003d98:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8003d9a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d1e5      	bne.n	8003d6c <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003da8:	d107      	bne.n	8003dba <UART_Start_Receive_IT+0x102>
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	691b      	ldr	r3, [r3, #16]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d103      	bne.n	8003dba <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	4a21      	ldr	r2, [pc, #132]	@ (8003e3c <UART_Start_Receive_IT+0x184>)
 8003db6:	669a      	str	r2, [r3, #104]	@ 0x68
 8003db8:	e002      	b.n	8003dc0 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	4a20      	ldr	r2, [pc, #128]	@ (8003e40 <UART_Start_Receive_IT+0x188>)
 8003dbe:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	691b      	ldr	r3, [r3, #16]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d019      	beq.n	8003dfc <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dd0:	e853 3f00 	ldrex	r3, [r3]
 8003dd4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003dd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dd8:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8003ddc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	461a      	mov	r2, r3
 8003de4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003de6:	637b      	str	r3, [r7, #52]	@ 0x34
 8003de8:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dea:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003dec:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003dee:	e841 2300 	strex	r3, r2, [r1]
 8003df2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8003df4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d1e6      	bne.n	8003dc8 <UART_Start_Receive_IT+0x110>
 8003dfa:	e018      	b.n	8003e2e <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	e853 3f00 	ldrex	r3, [r3]
 8003e08:	613b      	str	r3, [r7, #16]
   return(result);
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	f043 0320 	orr.w	r3, r3, #32
 8003e10:	653b      	str	r3, [r7, #80]	@ 0x50
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	461a      	mov	r2, r3
 8003e18:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003e1a:	623b      	str	r3, [r7, #32]
 8003e1c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e1e:	69f9      	ldr	r1, [r7, #28]
 8003e20:	6a3a      	ldr	r2, [r7, #32]
 8003e22:	e841 2300 	strex	r3, r2, [r1]
 8003e26:	61bb      	str	r3, [r7, #24]
   return(result);
 8003e28:	69bb      	ldr	r3, [r7, #24]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d1e6      	bne.n	8003dfc <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8003e2e:	2300      	movs	r3, #0
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	375c      	adds	r7, #92	@ 0x5c
 8003e34:	46bd      	mov	sp, r7
 8003e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3a:	4770      	bx	lr
 8003e3c:	080042b9 	.word	0x080042b9
 8003e40:	080040fd 	.word	0x080040fd

08003e44 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003e44:	b480      	push	{r7}
 8003e46:	b095      	sub	sp, #84	@ 0x54
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e54:	e853 3f00 	ldrex	r3, [r3]
 8003e58:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003e5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e5c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003e60:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	461a      	mov	r2, r3
 8003e68:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003e6a:	643b      	str	r3, [r7, #64]	@ 0x40
 8003e6c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e6e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003e70:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003e72:	e841 2300 	strex	r3, r2, [r1]
 8003e76:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003e78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d1e6      	bne.n	8003e4c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	3308      	adds	r3, #8
 8003e84:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e86:	6a3b      	ldr	r3, [r7, #32]
 8003e88:	e853 3f00 	ldrex	r3, [r3]
 8003e8c:	61fb      	str	r3, [r7, #28]
   return(result);
 8003e8e:	69fb      	ldr	r3, [r7, #28]
 8003e90:	f023 0301 	bic.w	r3, r3, #1
 8003e94:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	3308      	adds	r3, #8
 8003e9c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003e9e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003ea0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ea2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003ea4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003ea6:	e841 2300 	strex	r3, r2, [r1]
 8003eaa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003eac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d1e5      	bne.n	8003e7e <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003eb6:	2b01      	cmp	r3, #1
 8003eb8:	d118      	bne.n	8003eec <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	e853 3f00 	ldrex	r3, [r3]
 8003ec6:	60bb      	str	r3, [r7, #8]
   return(result);
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	f023 0310 	bic.w	r3, r3, #16
 8003ece:	647b      	str	r3, [r7, #68]	@ 0x44
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	461a      	mov	r2, r3
 8003ed6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003ed8:	61bb      	str	r3, [r7, #24]
 8003eda:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003edc:	6979      	ldr	r1, [r7, #20]
 8003ede:	69ba      	ldr	r2, [r7, #24]
 8003ee0:	e841 2300 	strex	r3, r2, [r1]
 8003ee4:	613b      	str	r3, [r7, #16]
   return(result);
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d1e6      	bne.n	8003eba <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2220      	movs	r2, #32
 8003ef0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2200      	movs	r2, #0
 8003efe:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003f00:	bf00      	nop
 8003f02:	3754      	adds	r7, #84	@ 0x54
 8003f04:	46bd      	mov	sp, r7
 8003f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0a:	4770      	bx	lr

08003f0c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b084      	sub	sp, #16
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f18:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003f22:	68f8      	ldr	r0, [r7, #12]
 8003f24:	f7ff fa2e 	bl	8003384 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003f28:	bf00      	nop
 8003f2a:	3710      	adds	r7, #16
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bd80      	pop	{r7, pc}

08003f30 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b08f      	sub	sp, #60	@ 0x3c
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003f3c:	2b21      	cmp	r3, #33	@ 0x21
 8003f3e:	d14c      	bne.n	8003fda <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003f46:	b29b      	uxth	r3, r3
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d132      	bne.n	8003fb2 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f52:	6a3b      	ldr	r3, [r7, #32]
 8003f54:	e853 3f00 	ldrex	r3, [r3]
 8003f58:	61fb      	str	r3, [r7, #28]
   return(result);
 8003f5a:	69fb      	ldr	r3, [r7, #28]
 8003f5c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003f60:	637b      	str	r3, [r7, #52]	@ 0x34
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	461a      	mov	r2, r3
 8003f68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003f6c:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f6e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003f70:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003f72:	e841 2300 	strex	r3, r2, [r1]
 8003f76:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003f78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d1e6      	bne.n	8003f4c <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	e853 3f00 	ldrex	r3, [r3]
 8003f8a:	60bb      	str	r3, [r7, #8]
   return(result);
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003f92:	633b      	str	r3, [r7, #48]	@ 0x30
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	461a      	mov	r2, r3
 8003f9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f9c:	61bb      	str	r3, [r7, #24]
 8003f9e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fa0:	6979      	ldr	r1, [r7, #20]
 8003fa2:	69ba      	ldr	r2, [r7, #24]
 8003fa4:	e841 2300 	strex	r3, r2, [r1]
 8003fa8:	613b      	str	r3, [r7, #16]
   return(result);
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d1e6      	bne.n	8003f7e <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8003fb0:	e013      	b.n	8003fda <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fb6:	781a      	ldrb	r2, [r3, #0]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fc2:	1c5a      	adds	r2, r3, #1
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003fce:	b29b      	uxth	r3, r3
 8003fd0:	3b01      	subs	r3, #1
 8003fd2:	b29a      	uxth	r2, r3
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 8003fda:	bf00      	nop
 8003fdc:	373c      	adds	r7, #60	@ 0x3c
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe4:	4770      	bx	lr

08003fe6 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003fe6:	b480      	push	{r7}
 8003fe8:	b091      	sub	sp, #68	@ 0x44
 8003fea:	af00      	add	r7, sp, #0
 8003fec:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003ff2:	2b21      	cmp	r3, #33	@ 0x21
 8003ff4:	d151      	bne.n	800409a <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003ffc:	b29b      	uxth	r3, r3
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d132      	bne.n	8004068 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004008:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800400a:	e853 3f00 	ldrex	r3, [r3]
 800400e:	623b      	str	r3, [r7, #32]
   return(result);
 8004010:	6a3b      	ldr	r3, [r7, #32]
 8004012:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004016:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	461a      	mov	r2, r3
 800401e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004020:	633b      	str	r3, [r7, #48]	@ 0x30
 8004022:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004024:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004026:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004028:	e841 2300 	strex	r3, r2, [r1]
 800402c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800402e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004030:	2b00      	cmp	r3, #0
 8004032:	d1e6      	bne.n	8004002 <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	e853 3f00 	ldrex	r3, [r3]
 8004040:	60fb      	str	r3, [r7, #12]
   return(result);
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004048:	637b      	str	r3, [r7, #52]	@ 0x34
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	461a      	mov	r2, r3
 8004050:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004052:	61fb      	str	r3, [r7, #28]
 8004054:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004056:	69b9      	ldr	r1, [r7, #24]
 8004058:	69fa      	ldr	r2, [r7, #28]
 800405a:	e841 2300 	strex	r3, r2, [r1]
 800405e:	617b      	str	r3, [r7, #20]
   return(result);
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d1e6      	bne.n	8004034 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8004066:	e018      	b.n	800409a <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800406c:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800406e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004070:	881a      	ldrh	r2, [r3, #0]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800407a:	b292      	uxth	r2, r2
 800407c:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004082:	1c9a      	adds	r2, r3, #2
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800408e:	b29b      	uxth	r3, r3
 8004090:	3b01      	subs	r3, #1
 8004092:	b29a      	uxth	r2, r3
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 800409a:	bf00      	nop
 800409c:	3744      	adds	r7, #68	@ 0x44
 800409e:	46bd      	mov	sp, r7
 80040a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a4:	4770      	bx	lr

080040a6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80040a6:	b580      	push	{r7, lr}
 80040a8:	b088      	sub	sp, #32
 80040aa:	af00      	add	r7, sp, #0
 80040ac:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	e853 3f00 	ldrex	r3, [r3]
 80040ba:	60bb      	str	r3, [r7, #8]
   return(result);
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80040c2:	61fb      	str	r3, [r7, #28]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	461a      	mov	r2, r3
 80040ca:	69fb      	ldr	r3, [r7, #28]
 80040cc:	61bb      	str	r3, [r7, #24]
 80040ce:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040d0:	6979      	ldr	r1, [r7, #20]
 80040d2:	69ba      	ldr	r2, [r7, #24]
 80040d4:	e841 2300 	strex	r3, r2, [r1]
 80040d8:	613b      	str	r3, [r7, #16]
   return(result);
 80040da:	693b      	ldr	r3, [r7, #16]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d1e6      	bne.n	80040ae <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2220      	movs	r2, #32
 80040e4:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2200      	movs	r2, #0
 80040ea:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80040ec:	6878      	ldr	r0, [r7, #4]
 80040ee:	f7ff f93f 	bl	8003370 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80040f2:	bf00      	nop
 80040f4:	3720      	adds	r7, #32
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}
	...

080040fc <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b09c      	sub	sp, #112	@ 0x70
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800410a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004114:	2b22      	cmp	r3, #34	@ 0x22
 8004116:	f040 80be 	bne.w	8004296 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8004120:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004124:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004128:	b2d9      	uxtb	r1, r3
 800412a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800412e:	b2da      	uxtb	r2, r3
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004134:	400a      	ands	r2, r1
 8004136:	b2d2      	uxtb	r2, r2
 8004138:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800413e:	1c5a      	adds	r2, r3, #1
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800414a:	b29b      	uxth	r3, r3
 800414c:	3b01      	subs	r3, #1
 800414e:	b29a      	uxth	r2, r3
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800415c:	b29b      	uxth	r3, r3
 800415e:	2b00      	cmp	r3, #0
 8004160:	f040 80a3 	bne.w	80042aa <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800416a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800416c:	e853 3f00 	ldrex	r3, [r3]
 8004170:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004172:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004174:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004178:	66bb      	str	r3, [r7, #104]	@ 0x68
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	461a      	mov	r2, r3
 8004180:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004182:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004184:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004186:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004188:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800418a:	e841 2300 	strex	r3, r2, [r1]
 800418e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004190:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004192:	2b00      	cmp	r3, #0
 8004194:	d1e6      	bne.n	8004164 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	3308      	adds	r3, #8
 800419c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800419e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041a0:	e853 3f00 	ldrex	r3, [r3]
 80041a4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80041a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041a8:	f023 0301 	bic.w	r3, r3, #1
 80041ac:	667b      	str	r3, [r7, #100]	@ 0x64
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	3308      	adds	r3, #8
 80041b4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80041b6:	647a      	str	r2, [r7, #68]	@ 0x44
 80041b8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041ba:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80041bc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80041be:	e841 2300 	strex	r3, r2, [r1]
 80041c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80041c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d1e5      	bne.n	8004196 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2220      	movs	r2, #32
 80041ce:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2200      	movs	r2, #0
 80041d6:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2200      	movs	r2, #0
 80041dc:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4a34      	ldr	r2, [pc, #208]	@ (80042b4 <UART_RxISR_8BIT+0x1b8>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d01f      	beq.n	8004228 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d018      	beq.n	8004228 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041fe:	e853 3f00 	ldrex	r3, [r3]
 8004202:	623b      	str	r3, [r7, #32]
   return(result);
 8004204:	6a3b      	ldr	r3, [r7, #32]
 8004206:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800420a:	663b      	str	r3, [r7, #96]	@ 0x60
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	461a      	mov	r2, r3
 8004212:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004214:	633b      	str	r3, [r7, #48]	@ 0x30
 8004216:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004218:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800421a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800421c:	e841 2300 	strex	r3, r2, [r1]
 8004220:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004222:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004224:	2b00      	cmp	r3, #0
 8004226:	d1e6      	bne.n	80041f6 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800422c:	2b01      	cmp	r3, #1
 800422e:	d12e      	bne.n	800428e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2200      	movs	r2, #0
 8004234:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	e853 3f00 	ldrex	r3, [r3]
 8004242:	60fb      	str	r3, [r7, #12]
   return(result);
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	f023 0310 	bic.w	r3, r3, #16
 800424a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	461a      	mov	r2, r3
 8004252:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004254:	61fb      	str	r3, [r7, #28]
 8004256:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004258:	69b9      	ldr	r1, [r7, #24]
 800425a:	69fa      	ldr	r2, [r7, #28]
 800425c:	e841 2300 	strex	r3, r2, [r1]
 8004260:	617b      	str	r3, [r7, #20]
   return(result);
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d1e6      	bne.n	8004236 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	69db      	ldr	r3, [r3, #28]
 800426e:	f003 0310 	and.w	r3, r3, #16
 8004272:	2b10      	cmp	r3, #16
 8004274:	d103      	bne.n	800427e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	2210      	movs	r2, #16
 800427c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004284:	4619      	mov	r1, r3
 8004286:	6878      	ldr	r0, [r7, #4]
 8004288:	f7ff f886 	bl	8003398 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800428c:	e00d      	b.n	80042aa <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 800428e:	6878      	ldr	r0, [r7, #4]
 8004290:	f7fc f9a2 	bl	80005d8 <HAL_UART_RxCpltCallback>
}
 8004294:	e009      	b.n	80042aa <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	8b1b      	ldrh	r3, [r3, #24]
 800429c:	b29a      	uxth	r2, r3
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f042 0208 	orr.w	r2, r2, #8
 80042a6:	b292      	uxth	r2, r2
 80042a8:	831a      	strh	r2, [r3, #24]
}
 80042aa:	bf00      	nop
 80042ac:	3770      	adds	r7, #112	@ 0x70
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd80      	pop	{r7, pc}
 80042b2:	bf00      	nop
 80042b4:	40008000 	.word	0x40008000

080042b8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b09c      	sub	sp, #112	@ 0x70
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80042c6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80042d0:	2b22      	cmp	r3, #34	@ 0x22
 80042d2:	f040 80be 	bne.w	8004452 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80042dc:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042e4:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80042e6:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 80042ea:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80042ee:	4013      	ands	r3, r2
 80042f0:	b29a      	uxth	r2, r3
 80042f2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80042f4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042fa:	1c9a      	adds	r2, r3, #2
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004306:	b29b      	uxth	r3, r3
 8004308:	3b01      	subs	r3, #1
 800430a:	b29a      	uxth	r2, r3
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004318:	b29b      	uxth	r3, r3
 800431a:	2b00      	cmp	r3, #0
 800431c:	f040 80a3 	bne.w	8004466 <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004326:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004328:	e853 3f00 	ldrex	r3, [r3]
 800432c:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800432e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004330:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004334:	667b      	str	r3, [r7, #100]	@ 0x64
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	461a      	mov	r2, r3
 800433c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800433e:	657b      	str	r3, [r7, #84]	@ 0x54
 8004340:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004342:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004344:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004346:	e841 2300 	strex	r3, r2, [r1]
 800434a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800434c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800434e:	2b00      	cmp	r3, #0
 8004350:	d1e6      	bne.n	8004320 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	3308      	adds	r3, #8
 8004358:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800435a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800435c:	e853 3f00 	ldrex	r3, [r3]
 8004360:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004362:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004364:	f023 0301 	bic.w	r3, r3, #1
 8004368:	663b      	str	r3, [r7, #96]	@ 0x60
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	3308      	adds	r3, #8
 8004370:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004372:	643a      	str	r2, [r7, #64]	@ 0x40
 8004374:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004376:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004378:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800437a:	e841 2300 	strex	r3, r2, [r1]
 800437e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004380:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004382:	2b00      	cmp	r3, #0
 8004384:	d1e5      	bne.n	8004352 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2220      	movs	r2, #32
 800438a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2200      	movs	r2, #0
 8004392:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2200      	movs	r2, #0
 8004398:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4a34      	ldr	r2, [pc, #208]	@ (8004470 <UART_RxISR_16BIT+0x1b8>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d01f      	beq.n	80043e4 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d018      	beq.n	80043e4 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043b8:	6a3b      	ldr	r3, [r7, #32]
 80043ba:	e853 3f00 	ldrex	r3, [r3]
 80043be:	61fb      	str	r3, [r7, #28]
   return(result);
 80043c0:	69fb      	ldr	r3, [r7, #28]
 80043c2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80043c6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	461a      	mov	r2, r3
 80043ce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80043d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80043d2:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043d4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80043d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80043d8:	e841 2300 	strex	r3, r2, [r1]
 80043dc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80043de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d1e6      	bne.n	80043b2 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80043e8:	2b01      	cmp	r3, #1
 80043ea:	d12e      	bne.n	800444a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2200      	movs	r2, #0
 80043f0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	e853 3f00 	ldrex	r3, [r3]
 80043fe:	60bb      	str	r3, [r7, #8]
   return(result);
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	f023 0310 	bic.w	r3, r3, #16
 8004406:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	461a      	mov	r2, r3
 800440e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004410:	61bb      	str	r3, [r7, #24]
 8004412:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004414:	6979      	ldr	r1, [r7, #20]
 8004416:	69ba      	ldr	r2, [r7, #24]
 8004418:	e841 2300 	strex	r3, r2, [r1]
 800441c:	613b      	str	r3, [r7, #16]
   return(result);
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d1e6      	bne.n	80043f2 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	69db      	ldr	r3, [r3, #28]
 800442a:	f003 0310 	and.w	r3, r3, #16
 800442e:	2b10      	cmp	r3, #16
 8004430:	d103      	bne.n	800443a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	2210      	movs	r2, #16
 8004438:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004440:	4619      	mov	r1, r3
 8004442:	6878      	ldr	r0, [r7, #4]
 8004444:	f7fe ffa8 	bl	8003398 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004448:	e00d      	b.n	8004466 <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 800444a:	6878      	ldr	r0, [r7, #4]
 800444c:	f7fc f8c4 	bl	80005d8 <HAL_UART_RxCpltCallback>
}
 8004450:	e009      	b.n	8004466 <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	8b1b      	ldrh	r3, [r3, #24]
 8004458:	b29a      	uxth	r2, r3
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f042 0208 	orr.w	r2, r2, #8
 8004462:	b292      	uxth	r2, r2
 8004464:	831a      	strh	r2, [r3, #24]
}
 8004466:	bf00      	nop
 8004468:	3770      	adds	r7, #112	@ 0x70
 800446a:	46bd      	mov	sp, r7
 800446c:	bd80      	pop	{r7, pc}
 800446e:	bf00      	nop
 8004470:	40008000 	.word	0x40008000

08004474 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004474:	b480      	push	{r7}
 8004476:	b083      	sub	sp, #12
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800447c:	bf00      	nop
 800447e:	370c      	adds	r7, #12
 8004480:	46bd      	mov	sp, r7
 8004482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004486:	4770      	bx	lr

08004488 <atoi>:
 8004488:	220a      	movs	r2, #10
 800448a:	2100      	movs	r1, #0
 800448c:	f000 b87a 	b.w	8004584 <strtol>

08004490 <_strtol_l.constprop.0>:
 8004490:	2b24      	cmp	r3, #36	@ 0x24
 8004492:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004496:	4686      	mov	lr, r0
 8004498:	4690      	mov	r8, r2
 800449a:	d801      	bhi.n	80044a0 <_strtol_l.constprop.0+0x10>
 800449c:	2b01      	cmp	r3, #1
 800449e:	d106      	bne.n	80044ae <_strtol_l.constprop.0+0x1e>
 80044a0:	f000 f8a2 	bl	80045e8 <__errno>
 80044a4:	2316      	movs	r3, #22
 80044a6:	6003      	str	r3, [r0, #0]
 80044a8:	2000      	movs	r0, #0
 80044aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044ae:	4834      	ldr	r0, [pc, #208]	@ (8004580 <_strtol_l.constprop.0+0xf0>)
 80044b0:	460d      	mov	r5, r1
 80044b2:	462a      	mov	r2, r5
 80044b4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80044b8:	5d06      	ldrb	r6, [r0, r4]
 80044ba:	f016 0608 	ands.w	r6, r6, #8
 80044be:	d1f8      	bne.n	80044b2 <_strtol_l.constprop.0+0x22>
 80044c0:	2c2d      	cmp	r4, #45	@ 0x2d
 80044c2:	d12d      	bne.n	8004520 <_strtol_l.constprop.0+0x90>
 80044c4:	782c      	ldrb	r4, [r5, #0]
 80044c6:	2601      	movs	r6, #1
 80044c8:	1c95      	adds	r5, r2, #2
 80044ca:	f033 0210 	bics.w	r2, r3, #16
 80044ce:	d109      	bne.n	80044e4 <_strtol_l.constprop.0+0x54>
 80044d0:	2c30      	cmp	r4, #48	@ 0x30
 80044d2:	d12a      	bne.n	800452a <_strtol_l.constprop.0+0x9a>
 80044d4:	782a      	ldrb	r2, [r5, #0]
 80044d6:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80044da:	2a58      	cmp	r2, #88	@ 0x58
 80044dc:	d125      	bne.n	800452a <_strtol_l.constprop.0+0x9a>
 80044de:	786c      	ldrb	r4, [r5, #1]
 80044e0:	2310      	movs	r3, #16
 80044e2:	3502      	adds	r5, #2
 80044e4:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80044e8:	f10c 3cff 	add.w	ip, ip, #4294967295
 80044ec:	2200      	movs	r2, #0
 80044ee:	fbbc f9f3 	udiv	r9, ip, r3
 80044f2:	4610      	mov	r0, r2
 80044f4:	fb03 ca19 	mls	sl, r3, r9, ip
 80044f8:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80044fc:	2f09      	cmp	r7, #9
 80044fe:	d81b      	bhi.n	8004538 <_strtol_l.constprop.0+0xa8>
 8004500:	463c      	mov	r4, r7
 8004502:	42a3      	cmp	r3, r4
 8004504:	dd27      	ble.n	8004556 <_strtol_l.constprop.0+0xc6>
 8004506:	1c57      	adds	r7, r2, #1
 8004508:	d007      	beq.n	800451a <_strtol_l.constprop.0+0x8a>
 800450a:	4581      	cmp	r9, r0
 800450c:	d320      	bcc.n	8004550 <_strtol_l.constprop.0+0xc0>
 800450e:	d101      	bne.n	8004514 <_strtol_l.constprop.0+0x84>
 8004510:	45a2      	cmp	sl, r4
 8004512:	db1d      	blt.n	8004550 <_strtol_l.constprop.0+0xc0>
 8004514:	fb00 4003 	mla	r0, r0, r3, r4
 8004518:	2201      	movs	r2, #1
 800451a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800451e:	e7eb      	b.n	80044f8 <_strtol_l.constprop.0+0x68>
 8004520:	2c2b      	cmp	r4, #43	@ 0x2b
 8004522:	bf04      	itt	eq
 8004524:	782c      	ldrbeq	r4, [r5, #0]
 8004526:	1c95      	addeq	r5, r2, #2
 8004528:	e7cf      	b.n	80044ca <_strtol_l.constprop.0+0x3a>
 800452a:	2b00      	cmp	r3, #0
 800452c:	d1da      	bne.n	80044e4 <_strtol_l.constprop.0+0x54>
 800452e:	2c30      	cmp	r4, #48	@ 0x30
 8004530:	bf0c      	ite	eq
 8004532:	2308      	moveq	r3, #8
 8004534:	230a      	movne	r3, #10
 8004536:	e7d5      	b.n	80044e4 <_strtol_l.constprop.0+0x54>
 8004538:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800453c:	2f19      	cmp	r7, #25
 800453e:	d801      	bhi.n	8004544 <_strtol_l.constprop.0+0xb4>
 8004540:	3c37      	subs	r4, #55	@ 0x37
 8004542:	e7de      	b.n	8004502 <_strtol_l.constprop.0+0x72>
 8004544:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8004548:	2f19      	cmp	r7, #25
 800454a:	d804      	bhi.n	8004556 <_strtol_l.constprop.0+0xc6>
 800454c:	3c57      	subs	r4, #87	@ 0x57
 800454e:	e7d8      	b.n	8004502 <_strtol_l.constprop.0+0x72>
 8004550:	f04f 32ff 	mov.w	r2, #4294967295
 8004554:	e7e1      	b.n	800451a <_strtol_l.constprop.0+0x8a>
 8004556:	1c53      	adds	r3, r2, #1
 8004558:	d108      	bne.n	800456c <_strtol_l.constprop.0+0xdc>
 800455a:	2322      	movs	r3, #34	@ 0x22
 800455c:	f8ce 3000 	str.w	r3, [lr]
 8004560:	4660      	mov	r0, ip
 8004562:	f1b8 0f00 	cmp.w	r8, #0
 8004566:	d0a0      	beq.n	80044aa <_strtol_l.constprop.0+0x1a>
 8004568:	1e69      	subs	r1, r5, #1
 800456a:	e006      	b.n	800457a <_strtol_l.constprop.0+0xea>
 800456c:	b106      	cbz	r6, 8004570 <_strtol_l.constprop.0+0xe0>
 800456e:	4240      	negs	r0, r0
 8004570:	f1b8 0f00 	cmp.w	r8, #0
 8004574:	d099      	beq.n	80044aa <_strtol_l.constprop.0+0x1a>
 8004576:	2a00      	cmp	r2, #0
 8004578:	d1f6      	bne.n	8004568 <_strtol_l.constprop.0+0xd8>
 800457a:	f8c8 1000 	str.w	r1, [r8]
 800457e:	e794      	b.n	80044aa <_strtol_l.constprop.0+0x1a>
 8004580:	08005049 	.word	0x08005049

08004584 <strtol>:
 8004584:	4613      	mov	r3, r2
 8004586:	460a      	mov	r2, r1
 8004588:	4601      	mov	r1, r0
 800458a:	4802      	ldr	r0, [pc, #8]	@ (8004594 <strtol+0x10>)
 800458c:	6800      	ldr	r0, [r0, #0]
 800458e:	f7ff bf7f 	b.w	8004490 <_strtol_l.constprop.0>
 8004592:	bf00      	nop
 8004594:	20000010 	.word	0x20000010

08004598 <siprintf>:
 8004598:	b40e      	push	{r1, r2, r3}
 800459a:	b500      	push	{lr}
 800459c:	b09c      	sub	sp, #112	@ 0x70
 800459e:	ab1d      	add	r3, sp, #116	@ 0x74
 80045a0:	9002      	str	r0, [sp, #8]
 80045a2:	9006      	str	r0, [sp, #24]
 80045a4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80045a8:	4809      	ldr	r0, [pc, #36]	@ (80045d0 <siprintf+0x38>)
 80045aa:	9107      	str	r1, [sp, #28]
 80045ac:	9104      	str	r1, [sp, #16]
 80045ae:	4909      	ldr	r1, [pc, #36]	@ (80045d4 <siprintf+0x3c>)
 80045b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80045b4:	9105      	str	r1, [sp, #20]
 80045b6:	6800      	ldr	r0, [r0, #0]
 80045b8:	9301      	str	r3, [sp, #4]
 80045ba:	a902      	add	r1, sp, #8
 80045bc:	f000 f994 	bl	80048e8 <_svfiprintf_r>
 80045c0:	9b02      	ldr	r3, [sp, #8]
 80045c2:	2200      	movs	r2, #0
 80045c4:	701a      	strb	r2, [r3, #0]
 80045c6:	b01c      	add	sp, #112	@ 0x70
 80045c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80045cc:	b003      	add	sp, #12
 80045ce:	4770      	bx	lr
 80045d0:	20000010 	.word	0x20000010
 80045d4:	ffff0208 	.word	0xffff0208

080045d8 <memset>:
 80045d8:	4402      	add	r2, r0
 80045da:	4603      	mov	r3, r0
 80045dc:	4293      	cmp	r3, r2
 80045de:	d100      	bne.n	80045e2 <memset+0xa>
 80045e0:	4770      	bx	lr
 80045e2:	f803 1b01 	strb.w	r1, [r3], #1
 80045e6:	e7f9      	b.n	80045dc <memset+0x4>

080045e8 <__errno>:
 80045e8:	4b01      	ldr	r3, [pc, #4]	@ (80045f0 <__errno+0x8>)
 80045ea:	6818      	ldr	r0, [r3, #0]
 80045ec:	4770      	bx	lr
 80045ee:	bf00      	nop
 80045f0:	20000010 	.word	0x20000010

080045f4 <__libc_init_array>:
 80045f4:	b570      	push	{r4, r5, r6, lr}
 80045f6:	4d0d      	ldr	r5, [pc, #52]	@ (800462c <__libc_init_array+0x38>)
 80045f8:	4c0d      	ldr	r4, [pc, #52]	@ (8004630 <__libc_init_array+0x3c>)
 80045fa:	1b64      	subs	r4, r4, r5
 80045fc:	10a4      	asrs	r4, r4, #2
 80045fe:	2600      	movs	r6, #0
 8004600:	42a6      	cmp	r6, r4
 8004602:	d109      	bne.n	8004618 <__libc_init_array+0x24>
 8004604:	4d0b      	ldr	r5, [pc, #44]	@ (8004634 <__libc_init_array+0x40>)
 8004606:	4c0c      	ldr	r4, [pc, #48]	@ (8004638 <__libc_init_array+0x44>)
 8004608:	f000 fc66 	bl	8004ed8 <_init>
 800460c:	1b64      	subs	r4, r4, r5
 800460e:	10a4      	asrs	r4, r4, #2
 8004610:	2600      	movs	r6, #0
 8004612:	42a6      	cmp	r6, r4
 8004614:	d105      	bne.n	8004622 <__libc_init_array+0x2e>
 8004616:	bd70      	pop	{r4, r5, r6, pc}
 8004618:	f855 3b04 	ldr.w	r3, [r5], #4
 800461c:	4798      	blx	r3
 800461e:	3601      	adds	r6, #1
 8004620:	e7ee      	b.n	8004600 <__libc_init_array+0xc>
 8004622:	f855 3b04 	ldr.w	r3, [r5], #4
 8004626:	4798      	blx	r3
 8004628:	3601      	adds	r6, #1
 800462a:	e7f2      	b.n	8004612 <__libc_init_array+0x1e>
 800462c:	08005184 	.word	0x08005184
 8004630:	08005184 	.word	0x08005184
 8004634:	08005184 	.word	0x08005184
 8004638:	08005188 	.word	0x08005188

0800463c <__retarget_lock_acquire_recursive>:
 800463c:	4770      	bx	lr

0800463e <__retarget_lock_release_recursive>:
 800463e:	4770      	bx	lr

08004640 <_free_r>:
 8004640:	b538      	push	{r3, r4, r5, lr}
 8004642:	4605      	mov	r5, r0
 8004644:	2900      	cmp	r1, #0
 8004646:	d041      	beq.n	80046cc <_free_r+0x8c>
 8004648:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800464c:	1f0c      	subs	r4, r1, #4
 800464e:	2b00      	cmp	r3, #0
 8004650:	bfb8      	it	lt
 8004652:	18e4      	addlt	r4, r4, r3
 8004654:	f000 f8e0 	bl	8004818 <__malloc_lock>
 8004658:	4a1d      	ldr	r2, [pc, #116]	@ (80046d0 <_free_r+0x90>)
 800465a:	6813      	ldr	r3, [r2, #0]
 800465c:	b933      	cbnz	r3, 800466c <_free_r+0x2c>
 800465e:	6063      	str	r3, [r4, #4]
 8004660:	6014      	str	r4, [r2, #0]
 8004662:	4628      	mov	r0, r5
 8004664:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004668:	f000 b8dc 	b.w	8004824 <__malloc_unlock>
 800466c:	42a3      	cmp	r3, r4
 800466e:	d908      	bls.n	8004682 <_free_r+0x42>
 8004670:	6820      	ldr	r0, [r4, #0]
 8004672:	1821      	adds	r1, r4, r0
 8004674:	428b      	cmp	r3, r1
 8004676:	bf01      	itttt	eq
 8004678:	6819      	ldreq	r1, [r3, #0]
 800467a:	685b      	ldreq	r3, [r3, #4]
 800467c:	1809      	addeq	r1, r1, r0
 800467e:	6021      	streq	r1, [r4, #0]
 8004680:	e7ed      	b.n	800465e <_free_r+0x1e>
 8004682:	461a      	mov	r2, r3
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	b10b      	cbz	r3, 800468c <_free_r+0x4c>
 8004688:	42a3      	cmp	r3, r4
 800468a:	d9fa      	bls.n	8004682 <_free_r+0x42>
 800468c:	6811      	ldr	r1, [r2, #0]
 800468e:	1850      	adds	r0, r2, r1
 8004690:	42a0      	cmp	r0, r4
 8004692:	d10b      	bne.n	80046ac <_free_r+0x6c>
 8004694:	6820      	ldr	r0, [r4, #0]
 8004696:	4401      	add	r1, r0
 8004698:	1850      	adds	r0, r2, r1
 800469a:	4283      	cmp	r3, r0
 800469c:	6011      	str	r1, [r2, #0]
 800469e:	d1e0      	bne.n	8004662 <_free_r+0x22>
 80046a0:	6818      	ldr	r0, [r3, #0]
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	6053      	str	r3, [r2, #4]
 80046a6:	4408      	add	r0, r1
 80046a8:	6010      	str	r0, [r2, #0]
 80046aa:	e7da      	b.n	8004662 <_free_r+0x22>
 80046ac:	d902      	bls.n	80046b4 <_free_r+0x74>
 80046ae:	230c      	movs	r3, #12
 80046b0:	602b      	str	r3, [r5, #0]
 80046b2:	e7d6      	b.n	8004662 <_free_r+0x22>
 80046b4:	6820      	ldr	r0, [r4, #0]
 80046b6:	1821      	adds	r1, r4, r0
 80046b8:	428b      	cmp	r3, r1
 80046ba:	bf04      	itt	eq
 80046bc:	6819      	ldreq	r1, [r3, #0]
 80046be:	685b      	ldreq	r3, [r3, #4]
 80046c0:	6063      	str	r3, [r4, #4]
 80046c2:	bf04      	itt	eq
 80046c4:	1809      	addeq	r1, r1, r0
 80046c6:	6021      	streq	r1, [r4, #0]
 80046c8:	6054      	str	r4, [r2, #4]
 80046ca:	e7ca      	b.n	8004662 <_free_r+0x22>
 80046cc:	bd38      	pop	{r3, r4, r5, pc}
 80046ce:	bf00      	nop
 80046d0:	20000254 	.word	0x20000254

080046d4 <sbrk_aligned>:
 80046d4:	b570      	push	{r4, r5, r6, lr}
 80046d6:	4e0f      	ldr	r6, [pc, #60]	@ (8004714 <sbrk_aligned+0x40>)
 80046d8:	460c      	mov	r4, r1
 80046da:	6831      	ldr	r1, [r6, #0]
 80046dc:	4605      	mov	r5, r0
 80046de:	b911      	cbnz	r1, 80046e6 <sbrk_aligned+0x12>
 80046e0:	f000 fba6 	bl	8004e30 <_sbrk_r>
 80046e4:	6030      	str	r0, [r6, #0]
 80046e6:	4621      	mov	r1, r4
 80046e8:	4628      	mov	r0, r5
 80046ea:	f000 fba1 	bl	8004e30 <_sbrk_r>
 80046ee:	1c43      	adds	r3, r0, #1
 80046f0:	d103      	bne.n	80046fa <sbrk_aligned+0x26>
 80046f2:	f04f 34ff 	mov.w	r4, #4294967295
 80046f6:	4620      	mov	r0, r4
 80046f8:	bd70      	pop	{r4, r5, r6, pc}
 80046fa:	1cc4      	adds	r4, r0, #3
 80046fc:	f024 0403 	bic.w	r4, r4, #3
 8004700:	42a0      	cmp	r0, r4
 8004702:	d0f8      	beq.n	80046f6 <sbrk_aligned+0x22>
 8004704:	1a21      	subs	r1, r4, r0
 8004706:	4628      	mov	r0, r5
 8004708:	f000 fb92 	bl	8004e30 <_sbrk_r>
 800470c:	3001      	adds	r0, #1
 800470e:	d1f2      	bne.n	80046f6 <sbrk_aligned+0x22>
 8004710:	e7ef      	b.n	80046f2 <sbrk_aligned+0x1e>
 8004712:	bf00      	nop
 8004714:	20000250 	.word	0x20000250

08004718 <_malloc_r>:
 8004718:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800471c:	1ccd      	adds	r5, r1, #3
 800471e:	f025 0503 	bic.w	r5, r5, #3
 8004722:	3508      	adds	r5, #8
 8004724:	2d0c      	cmp	r5, #12
 8004726:	bf38      	it	cc
 8004728:	250c      	movcc	r5, #12
 800472a:	2d00      	cmp	r5, #0
 800472c:	4606      	mov	r6, r0
 800472e:	db01      	blt.n	8004734 <_malloc_r+0x1c>
 8004730:	42a9      	cmp	r1, r5
 8004732:	d904      	bls.n	800473e <_malloc_r+0x26>
 8004734:	230c      	movs	r3, #12
 8004736:	6033      	str	r3, [r6, #0]
 8004738:	2000      	movs	r0, #0
 800473a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800473e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004814 <_malloc_r+0xfc>
 8004742:	f000 f869 	bl	8004818 <__malloc_lock>
 8004746:	f8d8 3000 	ldr.w	r3, [r8]
 800474a:	461c      	mov	r4, r3
 800474c:	bb44      	cbnz	r4, 80047a0 <_malloc_r+0x88>
 800474e:	4629      	mov	r1, r5
 8004750:	4630      	mov	r0, r6
 8004752:	f7ff ffbf 	bl	80046d4 <sbrk_aligned>
 8004756:	1c43      	adds	r3, r0, #1
 8004758:	4604      	mov	r4, r0
 800475a:	d158      	bne.n	800480e <_malloc_r+0xf6>
 800475c:	f8d8 4000 	ldr.w	r4, [r8]
 8004760:	4627      	mov	r7, r4
 8004762:	2f00      	cmp	r7, #0
 8004764:	d143      	bne.n	80047ee <_malloc_r+0xd6>
 8004766:	2c00      	cmp	r4, #0
 8004768:	d04b      	beq.n	8004802 <_malloc_r+0xea>
 800476a:	6823      	ldr	r3, [r4, #0]
 800476c:	4639      	mov	r1, r7
 800476e:	4630      	mov	r0, r6
 8004770:	eb04 0903 	add.w	r9, r4, r3
 8004774:	f000 fb5c 	bl	8004e30 <_sbrk_r>
 8004778:	4581      	cmp	r9, r0
 800477a:	d142      	bne.n	8004802 <_malloc_r+0xea>
 800477c:	6821      	ldr	r1, [r4, #0]
 800477e:	1a6d      	subs	r5, r5, r1
 8004780:	4629      	mov	r1, r5
 8004782:	4630      	mov	r0, r6
 8004784:	f7ff ffa6 	bl	80046d4 <sbrk_aligned>
 8004788:	3001      	adds	r0, #1
 800478a:	d03a      	beq.n	8004802 <_malloc_r+0xea>
 800478c:	6823      	ldr	r3, [r4, #0]
 800478e:	442b      	add	r3, r5
 8004790:	6023      	str	r3, [r4, #0]
 8004792:	f8d8 3000 	ldr.w	r3, [r8]
 8004796:	685a      	ldr	r2, [r3, #4]
 8004798:	bb62      	cbnz	r2, 80047f4 <_malloc_r+0xdc>
 800479a:	f8c8 7000 	str.w	r7, [r8]
 800479e:	e00f      	b.n	80047c0 <_malloc_r+0xa8>
 80047a0:	6822      	ldr	r2, [r4, #0]
 80047a2:	1b52      	subs	r2, r2, r5
 80047a4:	d420      	bmi.n	80047e8 <_malloc_r+0xd0>
 80047a6:	2a0b      	cmp	r2, #11
 80047a8:	d917      	bls.n	80047da <_malloc_r+0xc2>
 80047aa:	1961      	adds	r1, r4, r5
 80047ac:	42a3      	cmp	r3, r4
 80047ae:	6025      	str	r5, [r4, #0]
 80047b0:	bf18      	it	ne
 80047b2:	6059      	strne	r1, [r3, #4]
 80047b4:	6863      	ldr	r3, [r4, #4]
 80047b6:	bf08      	it	eq
 80047b8:	f8c8 1000 	streq.w	r1, [r8]
 80047bc:	5162      	str	r2, [r4, r5]
 80047be:	604b      	str	r3, [r1, #4]
 80047c0:	4630      	mov	r0, r6
 80047c2:	f000 f82f 	bl	8004824 <__malloc_unlock>
 80047c6:	f104 000b 	add.w	r0, r4, #11
 80047ca:	1d23      	adds	r3, r4, #4
 80047cc:	f020 0007 	bic.w	r0, r0, #7
 80047d0:	1ac2      	subs	r2, r0, r3
 80047d2:	bf1c      	itt	ne
 80047d4:	1a1b      	subne	r3, r3, r0
 80047d6:	50a3      	strne	r3, [r4, r2]
 80047d8:	e7af      	b.n	800473a <_malloc_r+0x22>
 80047da:	6862      	ldr	r2, [r4, #4]
 80047dc:	42a3      	cmp	r3, r4
 80047de:	bf0c      	ite	eq
 80047e0:	f8c8 2000 	streq.w	r2, [r8]
 80047e4:	605a      	strne	r2, [r3, #4]
 80047e6:	e7eb      	b.n	80047c0 <_malloc_r+0xa8>
 80047e8:	4623      	mov	r3, r4
 80047ea:	6864      	ldr	r4, [r4, #4]
 80047ec:	e7ae      	b.n	800474c <_malloc_r+0x34>
 80047ee:	463c      	mov	r4, r7
 80047f0:	687f      	ldr	r7, [r7, #4]
 80047f2:	e7b6      	b.n	8004762 <_malloc_r+0x4a>
 80047f4:	461a      	mov	r2, r3
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	42a3      	cmp	r3, r4
 80047fa:	d1fb      	bne.n	80047f4 <_malloc_r+0xdc>
 80047fc:	2300      	movs	r3, #0
 80047fe:	6053      	str	r3, [r2, #4]
 8004800:	e7de      	b.n	80047c0 <_malloc_r+0xa8>
 8004802:	230c      	movs	r3, #12
 8004804:	6033      	str	r3, [r6, #0]
 8004806:	4630      	mov	r0, r6
 8004808:	f000 f80c 	bl	8004824 <__malloc_unlock>
 800480c:	e794      	b.n	8004738 <_malloc_r+0x20>
 800480e:	6005      	str	r5, [r0, #0]
 8004810:	e7d6      	b.n	80047c0 <_malloc_r+0xa8>
 8004812:	bf00      	nop
 8004814:	20000254 	.word	0x20000254

08004818 <__malloc_lock>:
 8004818:	4801      	ldr	r0, [pc, #4]	@ (8004820 <__malloc_lock+0x8>)
 800481a:	f7ff bf0f 	b.w	800463c <__retarget_lock_acquire_recursive>
 800481e:	bf00      	nop
 8004820:	2000024c 	.word	0x2000024c

08004824 <__malloc_unlock>:
 8004824:	4801      	ldr	r0, [pc, #4]	@ (800482c <__malloc_unlock+0x8>)
 8004826:	f7ff bf0a 	b.w	800463e <__retarget_lock_release_recursive>
 800482a:	bf00      	nop
 800482c:	2000024c 	.word	0x2000024c

08004830 <__ssputs_r>:
 8004830:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004834:	688e      	ldr	r6, [r1, #8]
 8004836:	461f      	mov	r7, r3
 8004838:	42be      	cmp	r6, r7
 800483a:	680b      	ldr	r3, [r1, #0]
 800483c:	4682      	mov	sl, r0
 800483e:	460c      	mov	r4, r1
 8004840:	4690      	mov	r8, r2
 8004842:	d82d      	bhi.n	80048a0 <__ssputs_r+0x70>
 8004844:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004848:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800484c:	d026      	beq.n	800489c <__ssputs_r+0x6c>
 800484e:	6965      	ldr	r5, [r4, #20]
 8004850:	6909      	ldr	r1, [r1, #16]
 8004852:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004856:	eba3 0901 	sub.w	r9, r3, r1
 800485a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800485e:	1c7b      	adds	r3, r7, #1
 8004860:	444b      	add	r3, r9
 8004862:	106d      	asrs	r5, r5, #1
 8004864:	429d      	cmp	r5, r3
 8004866:	bf38      	it	cc
 8004868:	461d      	movcc	r5, r3
 800486a:	0553      	lsls	r3, r2, #21
 800486c:	d527      	bpl.n	80048be <__ssputs_r+0x8e>
 800486e:	4629      	mov	r1, r5
 8004870:	f7ff ff52 	bl	8004718 <_malloc_r>
 8004874:	4606      	mov	r6, r0
 8004876:	b360      	cbz	r0, 80048d2 <__ssputs_r+0xa2>
 8004878:	6921      	ldr	r1, [r4, #16]
 800487a:	464a      	mov	r2, r9
 800487c:	f000 fae8 	bl	8004e50 <memcpy>
 8004880:	89a3      	ldrh	r3, [r4, #12]
 8004882:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004886:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800488a:	81a3      	strh	r3, [r4, #12]
 800488c:	6126      	str	r6, [r4, #16]
 800488e:	6165      	str	r5, [r4, #20]
 8004890:	444e      	add	r6, r9
 8004892:	eba5 0509 	sub.w	r5, r5, r9
 8004896:	6026      	str	r6, [r4, #0]
 8004898:	60a5      	str	r5, [r4, #8]
 800489a:	463e      	mov	r6, r7
 800489c:	42be      	cmp	r6, r7
 800489e:	d900      	bls.n	80048a2 <__ssputs_r+0x72>
 80048a0:	463e      	mov	r6, r7
 80048a2:	6820      	ldr	r0, [r4, #0]
 80048a4:	4632      	mov	r2, r6
 80048a6:	4641      	mov	r1, r8
 80048a8:	f000 faa8 	bl	8004dfc <memmove>
 80048ac:	68a3      	ldr	r3, [r4, #8]
 80048ae:	1b9b      	subs	r3, r3, r6
 80048b0:	60a3      	str	r3, [r4, #8]
 80048b2:	6823      	ldr	r3, [r4, #0]
 80048b4:	4433      	add	r3, r6
 80048b6:	6023      	str	r3, [r4, #0]
 80048b8:	2000      	movs	r0, #0
 80048ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048be:	462a      	mov	r2, r5
 80048c0:	f000 fad4 	bl	8004e6c <_realloc_r>
 80048c4:	4606      	mov	r6, r0
 80048c6:	2800      	cmp	r0, #0
 80048c8:	d1e0      	bne.n	800488c <__ssputs_r+0x5c>
 80048ca:	6921      	ldr	r1, [r4, #16]
 80048cc:	4650      	mov	r0, sl
 80048ce:	f7ff feb7 	bl	8004640 <_free_r>
 80048d2:	230c      	movs	r3, #12
 80048d4:	f8ca 3000 	str.w	r3, [sl]
 80048d8:	89a3      	ldrh	r3, [r4, #12]
 80048da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80048de:	81a3      	strh	r3, [r4, #12]
 80048e0:	f04f 30ff 	mov.w	r0, #4294967295
 80048e4:	e7e9      	b.n	80048ba <__ssputs_r+0x8a>
	...

080048e8 <_svfiprintf_r>:
 80048e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048ec:	4698      	mov	r8, r3
 80048ee:	898b      	ldrh	r3, [r1, #12]
 80048f0:	061b      	lsls	r3, r3, #24
 80048f2:	b09d      	sub	sp, #116	@ 0x74
 80048f4:	4607      	mov	r7, r0
 80048f6:	460d      	mov	r5, r1
 80048f8:	4614      	mov	r4, r2
 80048fa:	d510      	bpl.n	800491e <_svfiprintf_r+0x36>
 80048fc:	690b      	ldr	r3, [r1, #16]
 80048fe:	b973      	cbnz	r3, 800491e <_svfiprintf_r+0x36>
 8004900:	2140      	movs	r1, #64	@ 0x40
 8004902:	f7ff ff09 	bl	8004718 <_malloc_r>
 8004906:	6028      	str	r0, [r5, #0]
 8004908:	6128      	str	r0, [r5, #16]
 800490a:	b930      	cbnz	r0, 800491a <_svfiprintf_r+0x32>
 800490c:	230c      	movs	r3, #12
 800490e:	603b      	str	r3, [r7, #0]
 8004910:	f04f 30ff 	mov.w	r0, #4294967295
 8004914:	b01d      	add	sp, #116	@ 0x74
 8004916:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800491a:	2340      	movs	r3, #64	@ 0x40
 800491c:	616b      	str	r3, [r5, #20]
 800491e:	2300      	movs	r3, #0
 8004920:	9309      	str	r3, [sp, #36]	@ 0x24
 8004922:	2320      	movs	r3, #32
 8004924:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004928:	f8cd 800c 	str.w	r8, [sp, #12]
 800492c:	2330      	movs	r3, #48	@ 0x30
 800492e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004acc <_svfiprintf_r+0x1e4>
 8004932:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004936:	f04f 0901 	mov.w	r9, #1
 800493a:	4623      	mov	r3, r4
 800493c:	469a      	mov	sl, r3
 800493e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004942:	b10a      	cbz	r2, 8004948 <_svfiprintf_r+0x60>
 8004944:	2a25      	cmp	r2, #37	@ 0x25
 8004946:	d1f9      	bne.n	800493c <_svfiprintf_r+0x54>
 8004948:	ebba 0b04 	subs.w	fp, sl, r4
 800494c:	d00b      	beq.n	8004966 <_svfiprintf_r+0x7e>
 800494e:	465b      	mov	r3, fp
 8004950:	4622      	mov	r2, r4
 8004952:	4629      	mov	r1, r5
 8004954:	4638      	mov	r0, r7
 8004956:	f7ff ff6b 	bl	8004830 <__ssputs_r>
 800495a:	3001      	adds	r0, #1
 800495c:	f000 80a7 	beq.w	8004aae <_svfiprintf_r+0x1c6>
 8004960:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004962:	445a      	add	r2, fp
 8004964:	9209      	str	r2, [sp, #36]	@ 0x24
 8004966:	f89a 3000 	ldrb.w	r3, [sl]
 800496a:	2b00      	cmp	r3, #0
 800496c:	f000 809f 	beq.w	8004aae <_svfiprintf_r+0x1c6>
 8004970:	2300      	movs	r3, #0
 8004972:	f04f 32ff 	mov.w	r2, #4294967295
 8004976:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800497a:	f10a 0a01 	add.w	sl, sl, #1
 800497e:	9304      	str	r3, [sp, #16]
 8004980:	9307      	str	r3, [sp, #28]
 8004982:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004986:	931a      	str	r3, [sp, #104]	@ 0x68
 8004988:	4654      	mov	r4, sl
 800498a:	2205      	movs	r2, #5
 800498c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004990:	484e      	ldr	r0, [pc, #312]	@ (8004acc <_svfiprintf_r+0x1e4>)
 8004992:	f7fb fc25 	bl	80001e0 <memchr>
 8004996:	9a04      	ldr	r2, [sp, #16]
 8004998:	b9d8      	cbnz	r0, 80049d2 <_svfiprintf_r+0xea>
 800499a:	06d0      	lsls	r0, r2, #27
 800499c:	bf44      	itt	mi
 800499e:	2320      	movmi	r3, #32
 80049a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80049a4:	0711      	lsls	r1, r2, #28
 80049a6:	bf44      	itt	mi
 80049a8:	232b      	movmi	r3, #43	@ 0x2b
 80049aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80049ae:	f89a 3000 	ldrb.w	r3, [sl]
 80049b2:	2b2a      	cmp	r3, #42	@ 0x2a
 80049b4:	d015      	beq.n	80049e2 <_svfiprintf_r+0xfa>
 80049b6:	9a07      	ldr	r2, [sp, #28]
 80049b8:	4654      	mov	r4, sl
 80049ba:	2000      	movs	r0, #0
 80049bc:	f04f 0c0a 	mov.w	ip, #10
 80049c0:	4621      	mov	r1, r4
 80049c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80049c6:	3b30      	subs	r3, #48	@ 0x30
 80049c8:	2b09      	cmp	r3, #9
 80049ca:	d94b      	bls.n	8004a64 <_svfiprintf_r+0x17c>
 80049cc:	b1b0      	cbz	r0, 80049fc <_svfiprintf_r+0x114>
 80049ce:	9207      	str	r2, [sp, #28]
 80049d0:	e014      	b.n	80049fc <_svfiprintf_r+0x114>
 80049d2:	eba0 0308 	sub.w	r3, r0, r8
 80049d6:	fa09 f303 	lsl.w	r3, r9, r3
 80049da:	4313      	orrs	r3, r2
 80049dc:	9304      	str	r3, [sp, #16]
 80049de:	46a2      	mov	sl, r4
 80049e0:	e7d2      	b.n	8004988 <_svfiprintf_r+0xa0>
 80049e2:	9b03      	ldr	r3, [sp, #12]
 80049e4:	1d19      	adds	r1, r3, #4
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	9103      	str	r1, [sp, #12]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	bfbb      	ittet	lt
 80049ee:	425b      	neglt	r3, r3
 80049f0:	f042 0202 	orrlt.w	r2, r2, #2
 80049f4:	9307      	strge	r3, [sp, #28]
 80049f6:	9307      	strlt	r3, [sp, #28]
 80049f8:	bfb8      	it	lt
 80049fa:	9204      	strlt	r2, [sp, #16]
 80049fc:	7823      	ldrb	r3, [r4, #0]
 80049fe:	2b2e      	cmp	r3, #46	@ 0x2e
 8004a00:	d10a      	bne.n	8004a18 <_svfiprintf_r+0x130>
 8004a02:	7863      	ldrb	r3, [r4, #1]
 8004a04:	2b2a      	cmp	r3, #42	@ 0x2a
 8004a06:	d132      	bne.n	8004a6e <_svfiprintf_r+0x186>
 8004a08:	9b03      	ldr	r3, [sp, #12]
 8004a0a:	1d1a      	adds	r2, r3, #4
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	9203      	str	r2, [sp, #12]
 8004a10:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004a14:	3402      	adds	r4, #2
 8004a16:	9305      	str	r3, [sp, #20]
 8004a18:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004adc <_svfiprintf_r+0x1f4>
 8004a1c:	7821      	ldrb	r1, [r4, #0]
 8004a1e:	2203      	movs	r2, #3
 8004a20:	4650      	mov	r0, sl
 8004a22:	f7fb fbdd 	bl	80001e0 <memchr>
 8004a26:	b138      	cbz	r0, 8004a38 <_svfiprintf_r+0x150>
 8004a28:	9b04      	ldr	r3, [sp, #16]
 8004a2a:	eba0 000a 	sub.w	r0, r0, sl
 8004a2e:	2240      	movs	r2, #64	@ 0x40
 8004a30:	4082      	lsls	r2, r0
 8004a32:	4313      	orrs	r3, r2
 8004a34:	3401      	adds	r4, #1
 8004a36:	9304      	str	r3, [sp, #16]
 8004a38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a3c:	4824      	ldr	r0, [pc, #144]	@ (8004ad0 <_svfiprintf_r+0x1e8>)
 8004a3e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004a42:	2206      	movs	r2, #6
 8004a44:	f7fb fbcc 	bl	80001e0 <memchr>
 8004a48:	2800      	cmp	r0, #0
 8004a4a:	d036      	beq.n	8004aba <_svfiprintf_r+0x1d2>
 8004a4c:	4b21      	ldr	r3, [pc, #132]	@ (8004ad4 <_svfiprintf_r+0x1ec>)
 8004a4e:	bb1b      	cbnz	r3, 8004a98 <_svfiprintf_r+0x1b0>
 8004a50:	9b03      	ldr	r3, [sp, #12]
 8004a52:	3307      	adds	r3, #7
 8004a54:	f023 0307 	bic.w	r3, r3, #7
 8004a58:	3308      	adds	r3, #8
 8004a5a:	9303      	str	r3, [sp, #12]
 8004a5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004a5e:	4433      	add	r3, r6
 8004a60:	9309      	str	r3, [sp, #36]	@ 0x24
 8004a62:	e76a      	b.n	800493a <_svfiprintf_r+0x52>
 8004a64:	fb0c 3202 	mla	r2, ip, r2, r3
 8004a68:	460c      	mov	r4, r1
 8004a6a:	2001      	movs	r0, #1
 8004a6c:	e7a8      	b.n	80049c0 <_svfiprintf_r+0xd8>
 8004a6e:	2300      	movs	r3, #0
 8004a70:	3401      	adds	r4, #1
 8004a72:	9305      	str	r3, [sp, #20]
 8004a74:	4619      	mov	r1, r3
 8004a76:	f04f 0c0a 	mov.w	ip, #10
 8004a7a:	4620      	mov	r0, r4
 8004a7c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004a80:	3a30      	subs	r2, #48	@ 0x30
 8004a82:	2a09      	cmp	r2, #9
 8004a84:	d903      	bls.n	8004a8e <_svfiprintf_r+0x1a6>
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d0c6      	beq.n	8004a18 <_svfiprintf_r+0x130>
 8004a8a:	9105      	str	r1, [sp, #20]
 8004a8c:	e7c4      	b.n	8004a18 <_svfiprintf_r+0x130>
 8004a8e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004a92:	4604      	mov	r4, r0
 8004a94:	2301      	movs	r3, #1
 8004a96:	e7f0      	b.n	8004a7a <_svfiprintf_r+0x192>
 8004a98:	ab03      	add	r3, sp, #12
 8004a9a:	9300      	str	r3, [sp, #0]
 8004a9c:	462a      	mov	r2, r5
 8004a9e:	4b0e      	ldr	r3, [pc, #56]	@ (8004ad8 <_svfiprintf_r+0x1f0>)
 8004aa0:	a904      	add	r1, sp, #16
 8004aa2:	4638      	mov	r0, r7
 8004aa4:	f3af 8000 	nop.w
 8004aa8:	1c42      	adds	r2, r0, #1
 8004aaa:	4606      	mov	r6, r0
 8004aac:	d1d6      	bne.n	8004a5c <_svfiprintf_r+0x174>
 8004aae:	89ab      	ldrh	r3, [r5, #12]
 8004ab0:	065b      	lsls	r3, r3, #25
 8004ab2:	f53f af2d 	bmi.w	8004910 <_svfiprintf_r+0x28>
 8004ab6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004ab8:	e72c      	b.n	8004914 <_svfiprintf_r+0x2c>
 8004aba:	ab03      	add	r3, sp, #12
 8004abc:	9300      	str	r3, [sp, #0]
 8004abe:	462a      	mov	r2, r5
 8004ac0:	4b05      	ldr	r3, [pc, #20]	@ (8004ad8 <_svfiprintf_r+0x1f0>)
 8004ac2:	a904      	add	r1, sp, #16
 8004ac4:	4638      	mov	r0, r7
 8004ac6:	f000 f879 	bl	8004bbc <_printf_i>
 8004aca:	e7ed      	b.n	8004aa8 <_svfiprintf_r+0x1c0>
 8004acc:	08005149 	.word	0x08005149
 8004ad0:	08005153 	.word	0x08005153
 8004ad4:	00000000 	.word	0x00000000
 8004ad8:	08004831 	.word	0x08004831
 8004adc:	0800514f 	.word	0x0800514f

08004ae0 <_printf_common>:
 8004ae0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ae4:	4616      	mov	r6, r2
 8004ae6:	4698      	mov	r8, r3
 8004ae8:	688a      	ldr	r2, [r1, #8]
 8004aea:	690b      	ldr	r3, [r1, #16]
 8004aec:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004af0:	4293      	cmp	r3, r2
 8004af2:	bfb8      	it	lt
 8004af4:	4613      	movlt	r3, r2
 8004af6:	6033      	str	r3, [r6, #0]
 8004af8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004afc:	4607      	mov	r7, r0
 8004afe:	460c      	mov	r4, r1
 8004b00:	b10a      	cbz	r2, 8004b06 <_printf_common+0x26>
 8004b02:	3301      	adds	r3, #1
 8004b04:	6033      	str	r3, [r6, #0]
 8004b06:	6823      	ldr	r3, [r4, #0]
 8004b08:	0699      	lsls	r1, r3, #26
 8004b0a:	bf42      	ittt	mi
 8004b0c:	6833      	ldrmi	r3, [r6, #0]
 8004b0e:	3302      	addmi	r3, #2
 8004b10:	6033      	strmi	r3, [r6, #0]
 8004b12:	6825      	ldr	r5, [r4, #0]
 8004b14:	f015 0506 	ands.w	r5, r5, #6
 8004b18:	d106      	bne.n	8004b28 <_printf_common+0x48>
 8004b1a:	f104 0a19 	add.w	sl, r4, #25
 8004b1e:	68e3      	ldr	r3, [r4, #12]
 8004b20:	6832      	ldr	r2, [r6, #0]
 8004b22:	1a9b      	subs	r3, r3, r2
 8004b24:	42ab      	cmp	r3, r5
 8004b26:	dc26      	bgt.n	8004b76 <_printf_common+0x96>
 8004b28:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004b2c:	6822      	ldr	r2, [r4, #0]
 8004b2e:	3b00      	subs	r3, #0
 8004b30:	bf18      	it	ne
 8004b32:	2301      	movne	r3, #1
 8004b34:	0692      	lsls	r2, r2, #26
 8004b36:	d42b      	bmi.n	8004b90 <_printf_common+0xb0>
 8004b38:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004b3c:	4641      	mov	r1, r8
 8004b3e:	4638      	mov	r0, r7
 8004b40:	47c8      	blx	r9
 8004b42:	3001      	adds	r0, #1
 8004b44:	d01e      	beq.n	8004b84 <_printf_common+0xa4>
 8004b46:	6823      	ldr	r3, [r4, #0]
 8004b48:	6922      	ldr	r2, [r4, #16]
 8004b4a:	f003 0306 	and.w	r3, r3, #6
 8004b4e:	2b04      	cmp	r3, #4
 8004b50:	bf02      	ittt	eq
 8004b52:	68e5      	ldreq	r5, [r4, #12]
 8004b54:	6833      	ldreq	r3, [r6, #0]
 8004b56:	1aed      	subeq	r5, r5, r3
 8004b58:	68a3      	ldr	r3, [r4, #8]
 8004b5a:	bf0c      	ite	eq
 8004b5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004b60:	2500      	movne	r5, #0
 8004b62:	4293      	cmp	r3, r2
 8004b64:	bfc4      	itt	gt
 8004b66:	1a9b      	subgt	r3, r3, r2
 8004b68:	18ed      	addgt	r5, r5, r3
 8004b6a:	2600      	movs	r6, #0
 8004b6c:	341a      	adds	r4, #26
 8004b6e:	42b5      	cmp	r5, r6
 8004b70:	d11a      	bne.n	8004ba8 <_printf_common+0xc8>
 8004b72:	2000      	movs	r0, #0
 8004b74:	e008      	b.n	8004b88 <_printf_common+0xa8>
 8004b76:	2301      	movs	r3, #1
 8004b78:	4652      	mov	r2, sl
 8004b7a:	4641      	mov	r1, r8
 8004b7c:	4638      	mov	r0, r7
 8004b7e:	47c8      	blx	r9
 8004b80:	3001      	adds	r0, #1
 8004b82:	d103      	bne.n	8004b8c <_printf_common+0xac>
 8004b84:	f04f 30ff 	mov.w	r0, #4294967295
 8004b88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b8c:	3501      	adds	r5, #1
 8004b8e:	e7c6      	b.n	8004b1e <_printf_common+0x3e>
 8004b90:	18e1      	adds	r1, r4, r3
 8004b92:	1c5a      	adds	r2, r3, #1
 8004b94:	2030      	movs	r0, #48	@ 0x30
 8004b96:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004b9a:	4422      	add	r2, r4
 8004b9c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004ba0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004ba4:	3302      	adds	r3, #2
 8004ba6:	e7c7      	b.n	8004b38 <_printf_common+0x58>
 8004ba8:	2301      	movs	r3, #1
 8004baa:	4622      	mov	r2, r4
 8004bac:	4641      	mov	r1, r8
 8004bae:	4638      	mov	r0, r7
 8004bb0:	47c8      	blx	r9
 8004bb2:	3001      	adds	r0, #1
 8004bb4:	d0e6      	beq.n	8004b84 <_printf_common+0xa4>
 8004bb6:	3601      	adds	r6, #1
 8004bb8:	e7d9      	b.n	8004b6e <_printf_common+0x8e>
	...

08004bbc <_printf_i>:
 8004bbc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004bc0:	7e0f      	ldrb	r7, [r1, #24]
 8004bc2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004bc4:	2f78      	cmp	r7, #120	@ 0x78
 8004bc6:	4691      	mov	r9, r2
 8004bc8:	4680      	mov	r8, r0
 8004bca:	460c      	mov	r4, r1
 8004bcc:	469a      	mov	sl, r3
 8004bce:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004bd2:	d807      	bhi.n	8004be4 <_printf_i+0x28>
 8004bd4:	2f62      	cmp	r7, #98	@ 0x62
 8004bd6:	d80a      	bhi.n	8004bee <_printf_i+0x32>
 8004bd8:	2f00      	cmp	r7, #0
 8004bda:	f000 80d2 	beq.w	8004d82 <_printf_i+0x1c6>
 8004bde:	2f58      	cmp	r7, #88	@ 0x58
 8004be0:	f000 80b9 	beq.w	8004d56 <_printf_i+0x19a>
 8004be4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004be8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004bec:	e03a      	b.n	8004c64 <_printf_i+0xa8>
 8004bee:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004bf2:	2b15      	cmp	r3, #21
 8004bf4:	d8f6      	bhi.n	8004be4 <_printf_i+0x28>
 8004bf6:	a101      	add	r1, pc, #4	@ (adr r1, 8004bfc <_printf_i+0x40>)
 8004bf8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004bfc:	08004c55 	.word	0x08004c55
 8004c00:	08004c69 	.word	0x08004c69
 8004c04:	08004be5 	.word	0x08004be5
 8004c08:	08004be5 	.word	0x08004be5
 8004c0c:	08004be5 	.word	0x08004be5
 8004c10:	08004be5 	.word	0x08004be5
 8004c14:	08004c69 	.word	0x08004c69
 8004c18:	08004be5 	.word	0x08004be5
 8004c1c:	08004be5 	.word	0x08004be5
 8004c20:	08004be5 	.word	0x08004be5
 8004c24:	08004be5 	.word	0x08004be5
 8004c28:	08004d69 	.word	0x08004d69
 8004c2c:	08004c93 	.word	0x08004c93
 8004c30:	08004d23 	.word	0x08004d23
 8004c34:	08004be5 	.word	0x08004be5
 8004c38:	08004be5 	.word	0x08004be5
 8004c3c:	08004d8b 	.word	0x08004d8b
 8004c40:	08004be5 	.word	0x08004be5
 8004c44:	08004c93 	.word	0x08004c93
 8004c48:	08004be5 	.word	0x08004be5
 8004c4c:	08004be5 	.word	0x08004be5
 8004c50:	08004d2b 	.word	0x08004d2b
 8004c54:	6833      	ldr	r3, [r6, #0]
 8004c56:	1d1a      	adds	r2, r3, #4
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	6032      	str	r2, [r6, #0]
 8004c5c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004c60:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004c64:	2301      	movs	r3, #1
 8004c66:	e09d      	b.n	8004da4 <_printf_i+0x1e8>
 8004c68:	6833      	ldr	r3, [r6, #0]
 8004c6a:	6820      	ldr	r0, [r4, #0]
 8004c6c:	1d19      	adds	r1, r3, #4
 8004c6e:	6031      	str	r1, [r6, #0]
 8004c70:	0606      	lsls	r6, r0, #24
 8004c72:	d501      	bpl.n	8004c78 <_printf_i+0xbc>
 8004c74:	681d      	ldr	r5, [r3, #0]
 8004c76:	e003      	b.n	8004c80 <_printf_i+0xc4>
 8004c78:	0645      	lsls	r5, r0, #25
 8004c7a:	d5fb      	bpl.n	8004c74 <_printf_i+0xb8>
 8004c7c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004c80:	2d00      	cmp	r5, #0
 8004c82:	da03      	bge.n	8004c8c <_printf_i+0xd0>
 8004c84:	232d      	movs	r3, #45	@ 0x2d
 8004c86:	426d      	negs	r5, r5
 8004c88:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004c8c:	4859      	ldr	r0, [pc, #356]	@ (8004df4 <_printf_i+0x238>)
 8004c8e:	230a      	movs	r3, #10
 8004c90:	e011      	b.n	8004cb6 <_printf_i+0xfa>
 8004c92:	6821      	ldr	r1, [r4, #0]
 8004c94:	6833      	ldr	r3, [r6, #0]
 8004c96:	0608      	lsls	r0, r1, #24
 8004c98:	f853 5b04 	ldr.w	r5, [r3], #4
 8004c9c:	d402      	bmi.n	8004ca4 <_printf_i+0xe8>
 8004c9e:	0649      	lsls	r1, r1, #25
 8004ca0:	bf48      	it	mi
 8004ca2:	b2ad      	uxthmi	r5, r5
 8004ca4:	2f6f      	cmp	r7, #111	@ 0x6f
 8004ca6:	4853      	ldr	r0, [pc, #332]	@ (8004df4 <_printf_i+0x238>)
 8004ca8:	6033      	str	r3, [r6, #0]
 8004caa:	bf14      	ite	ne
 8004cac:	230a      	movne	r3, #10
 8004cae:	2308      	moveq	r3, #8
 8004cb0:	2100      	movs	r1, #0
 8004cb2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004cb6:	6866      	ldr	r6, [r4, #4]
 8004cb8:	60a6      	str	r6, [r4, #8]
 8004cba:	2e00      	cmp	r6, #0
 8004cbc:	bfa2      	ittt	ge
 8004cbe:	6821      	ldrge	r1, [r4, #0]
 8004cc0:	f021 0104 	bicge.w	r1, r1, #4
 8004cc4:	6021      	strge	r1, [r4, #0]
 8004cc6:	b90d      	cbnz	r5, 8004ccc <_printf_i+0x110>
 8004cc8:	2e00      	cmp	r6, #0
 8004cca:	d04b      	beq.n	8004d64 <_printf_i+0x1a8>
 8004ccc:	4616      	mov	r6, r2
 8004cce:	fbb5 f1f3 	udiv	r1, r5, r3
 8004cd2:	fb03 5711 	mls	r7, r3, r1, r5
 8004cd6:	5dc7      	ldrb	r7, [r0, r7]
 8004cd8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004cdc:	462f      	mov	r7, r5
 8004cde:	42bb      	cmp	r3, r7
 8004ce0:	460d      	mov	r5, r1
 8004ce2:	d9f4      	bls.n	8004cce <_printf_i+0x112>
 8004ce4:	2b08      	cmp	r3, #8
 8004ce6:	d10b      	bne.n	8004d00 <_printf_i+0x144>
 8004ce8:	6823      	ldr	r3, [r4, #0]
 8004cea:	07df      	lsls	r7, r3, #31
 8004cec:	d508      	bpl.n	8004d00 <_printf_i+0x144>
 8004cee:	6923      	ldr	r3, [r4, #16]
 8004cf0:	6861      	ldr	r1, [r4, #4]
 8004cf2:	4299      	cmp	r1, r3
 8004cf4:	bfde      	ittt	le
 8004cf6:	2330      	movle	r3, #48	@ 0x30
 8004cf8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004cfc:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004d00:	1b92      	subs	r2, r2, r6
 8004d02:	6122      	str	r2, [r4, #16]
 8004d04:	f8cd a000 	str.w	sl, [sp]
 8004d08:	464b      	mov	r3, r9
 8004d0a:	aa03      	add	r2, sp, #12
 8004d0c:	4621      	mov	r1, r4
 8004d0e:	4640      	mov	r0, r8
 8004d10:	f7ff fee6 	bl	8004ae0 <_printf_common>
 8004d14:	3001      	adds	r0, #1
 8004d16:	d14a      	bne.n	8004dae <_printf_i+0x1f2>
 8004d18:	f04f 30ff 	mov.w	r0, #4294967295
 8004d1c:	b004      	add	sp, #16
 8004d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d22:	6823      	ldr	r3, [r4, #0]
 8004d24:	f043 0320 	orr.w	r3, r3, #32
 8004d28:	6023      	str	r3, [r4, #0]
 8004d2a:	4833      	ldr	r0, [pc, #204]	@ (8004df8 <_printf_i+0x23c>)
 8004d2c:	2778      	movs	r7, #120	@ 0x78
 8004d2e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004d32:	6823      	ldr	r3, [r4, #0]
 8004d34:	6831      	ldr	r1, [r6, #0]
 8004d36:	061f      	lsls	r7, r3, #24
 8004d38:	f851 5b04 	ldr.w	r5, [r1], #4
 8004d3c:	d402      	bmi.n	8004d44 <_printf_i+0x188>
 8004d3e:	065f      	lsls	r7, r3, #25
 8004d40:	bf48      	it	mi
 8004d42:	b2ad      	uxthmi	r5, r5
 8004d44:	6031      	str	r1, [r6, #0]
 8004d46:	07d9      	lsls	r1, r3, #31
 8004d48:	bf44      	itt	mi
 8004d4a:	f043 0320 	orrmi.w	r3, r3, #32
 8004d4e:	6023      	strmi	r3, [r4, #0]
 8004d50:	b11d      	cbz	r5, 8004d5a <_printf_i+0x19e>
 8004d52:	2310      	movs	r3, #16
 8004d54:	e7ac      	b.n	8004cb0 <_printf_i+0xf4>
 8004d56:	4827      	ldr	r0, [pc, #156]	@ (8004df4 <_printf_i+0x238>)
 8004d58:	e7e9      	b.n	8004d2e <_printf_i+0x172>
 8004d5a:	6823      	ldr	r3, [r4, #0]
 8004d5c:	f023 0320 	bic.w	r3, r3, #32
 8004d60:	6023      	str	r3, [r4, #0]
 8004d62:	e7f6      	b.n	8004d52 <_printf_i+0x196>
 8004d64:	4616      	mov	r6, r2
 8004d66:	e7bd      	b.n	8004ce4 <_printf_i+0x128>
 8004d68:	6833      	ldr	r3, [r6, #0]
 8004d6a:	6825      	ldr	r5, [r4, #0]
 8004d6c:	6961      	ldr	r1, [r4, #20]
 8004d6e:	1d18      	adds	r0, r3, #4
 8004d70:	6030      	str	r0, [r6, #0]
 8004d72:	062e      	lsls	r6, r5, #24
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	d501      	bpl.n	8004d7c <_printf_i+0x1c0>
 8004d78:	6019      	str	r1, [r3, #0]
 8004d7a:	e002      	b.n	8004d82 <_printf_i+0x1c6>
 8004d7c:	0668      	lsls	r0, r5, #25
 8004d7e:	d5fb      	bpl.n	8004d78 <_printf_i+0x1bc>
 8004d80:	8019      	strh	r1, [r3, #0]
 8004d82:	2300      	movs	r3, #0
 8004d84:	6123      	str	r3, [r4, #16]
 8004d86:	4616      	mov	r6, r2
 8004d88:	e7bc      	b.n	8004d04 <_printf_i+0x148>
 8004d8a:	6833      	ldr	r3, [r6, #0]
 8004d8c:	1d1a      	adds	r2, r3, #4
 8004d8e:	6032      	str	r2, [r6, #0]
 8004d90:	681e      	ldr	r6, [r3, #0]
 8004d92:	6862      	ldr	r2, [r4, #4]
 8004d94:	2100      	movs	r1, #0
 8004d96:	4630      	mov	r0, r6
 8004d98:	f7fb fa22 	bl	80001e0 <memchr>
 8004d9c:	b108      	cbz	r0, 8004da2 <_printf_i+0x1e6>
 8004d9e:	1b80      	subs	r0, r0, r6
 8004da0:	6060      	str	r0, [r4, #4]
 8004da2:	6863      	ldr	r3, [r4, #4]
 8004da4:	6123      	str	r3, [r4, #16]
 8004da6:	2300      	movs	r3, #0
 8004da8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004dac:	e7aa      	b.n	8004d04 <_printf_i+0x148>
 8004dae:	6923      	ldr	r3, [r4, #16]
 8004db0:	4632      	mov	r2, r6
 8004db2:	4649      	mov	r1, r9
 8004db4:	4640      	mov	r0, r8
 8004db6:	47d0      	blx	sl
 8004db8:	3001      	adds	r0, #1
 8004dba:	d0ad      	beq.n	8004d18 <_printf_i+0x15c>
 8004dbc:	6823      	ldr	r3, [r4, #0]
 8004dbe:	079b      	lsls	r3, r3, #30
 8004dc0:	d413      	bmi.n	8004dea <_printf_i+0x22e>
 8004dc2:	68e0      	ldr	r0, [r4, #12]
 8004dc4:	9b03      	ldr	r3, [sp, #12]
 8004dc6:	4298      	cmp	r0, r3
 8004dc8:	bfb8      	it	lt
 8004dca:	4618      	movlt	r0, r3
 8004dcc:	e7a6      	b.n	8004d1c <_printf_i+0x160>
 8004dce:	2301      	movs	r3, #1
 8004dd0:	4632      	mov	r2, r6
 8004dd2:	4649      	mov	r1, r9
 8004dd4:	4640      	mov	r0, r8
 8004dd6:	47d0      	blx	sl
 8004dd8:	3001      	adds	r0, #1
 8004dda:	d09d      	beq.n	8004d18 <_printf_i+0x15c>
 8004ddc:	3501      	adds	r5, #1
 8004dde:	68e3      	ldr	r3, [r4, #12]
 8004de0:	9903      	ldr	r1, [sp, #12]
 8004de2:	1a5b      	subs	r3, r3, r1
 8004de4:	42ab      	cmp	r3, r5
 8004de6:	dcf2      	bgt.n	8004dce <_printf_i+0x212>
 8004de8:	e7eb      	b.n	8004dc2 <_printf_i+0x206>
 8004dea:	2500      	movs	r5, #0
 8004dec:	f104 0619 	add.w	r6, r4, #25
 8004df0:	e7f5      	b.n	8004dde <_printf_i+0x222>
 8004df2:	bf00      	nop
 8004df4:	0800515a 	.word	0x0800515a
 8004df8:	0800516b 	.word	0x0800516b

08004dfc <memmove>:
 8004dfc:	4288      	cmp	r0, r1
 8004dfe:	b510      	push	{r4, lr}
 8004e00:	eb01 0402 	add.w	r4, r1, r2
 8004e04:	d902      	bls.n	8004e0c <memmove+0x10>
 8004e06:	4284      	cmp	r4, r0
 8004e08:	4623      	mov	r3, r4
 8004e0a:	d807      	bhi.n	8004e1c <memmove+0x20>
 8004e0c:	1e43      	subs	r3, r0, #1
 8004e0e:	42a1      	cmp	r1, r4
 8004e10:	d008      	beq.n	8004e24 <memmove+0x28>
 8004e12:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004e16:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004e1a:	e7f8      	b.n	8004e0e <memmove+0x12>
 8004e1c:	4402      	add	r2, r0
 8004e1e:	4601      	mov	r1, r0
 8004e20:	428a      	cmp	r2, r1
 8004e22:	d100      	bne.n	8004e26 <memmove+0x2a>
 8004e24:	bd10      	pop	{r4, pc}
 8004e26:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004e2a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004e2e:	e7f7      	b.n	8004e20 <memmove+0x24>

08004e30 <_sbrk_r>:
 8004e30:	b538      	push	{r3, r4, r5, lr}
 8004e32:	4d06      	ldr	r5, [pc, #24]	@ (8004e4c <_sbrk_r+0x1c>)
 8004e34:	2300      	movs	r3, #0
 8004e36:	4604      	mov	r4, r0
 8004e38:	4608      	mov	r0, r1
 8004e3a:	602b      	str	r3, [r5, #0]
 8004e3c:	f7fb fe5a 	bl	8000af4 <_sbrk>
 8004e40:	1c43      	adds	r3, r0, #1
 8004e42:	d102      	bne.n	8004e4a <_sbrk_r+0x1a>
 8004e44:	682b      	ldr	r3, [r5, #0]
 8004e46:	b103      	cbz	r3, 8004e4a <_sbrk_r+0x1a>
 8004e48:	6023      	str	r3, [r4, #0]
 8004e4a:	bd38      	pop	{r3, r4, r5, pc}
 8004e4c:	20000248 	.word	0x20000248

08004e50 <memcpy>:
 8004e50:	440a      	add	r2, r1
 8004e52:	4291      	cmp	r1, r2
 8004e54:	f100 33ff 	add.w	r3, r0, #4294967295
 8004e58:	d100      	bne.n	8004e5c <memcpy+0xc>
 8004e5a:	4770      	bx	lr
 8004e5c:	b510      	push	{r4, lr}
 8004e5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004e62:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004e66:	4291      	cmp	r1, r2
 8004e68:	d1f9      	bne.n	8004e5e <memcpy+0xe>
 8004e6a:	bd10      	pop	{r4, pc}

08004e6c <_realloc_r>:
 8004e6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e70:	4680      	mov	r8, r0
 8004e72:	4615      	mov	r5, r2
 8004e74:	460c      	mov	r4, r1
 8004e76:	b921      	cbnz	r1, 8004e82 <_realloc_r+0x16>
 8004e78:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004e7c:	4611      	mov	r1, r2
 8004e7e:	f7ff bc4b 	b.w	8004718 <_malloc_r>
 8004e82:	b92a      	cbnz	r2, 8004e90 <_realloc_r+0x24>
 8004e84:	f7ff fbdc 	bl	8004640 <_free_r>
 8004e88:	2400      	movs	r4, #0
 8004e8a:	4620      	mov	r0, r4
 8004e8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e90:	f000 f81a 	bl	8004ec8 <_malloc_usable_size_r>
 8004e94:	4285      	cmp	r5, r0
 8004e96:	4606      	mov	r6, r0
 8004e98:	d802      	bhi.n	8004ea0 <_realloc_r+0x34>
 8004e9a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004e9e:	d8f4      	bhi.n	8004e8a <_realloc_r+0x1e>
 8004ea0:	4629      	mov	r1, r5
 8004ea2:	4640      	mov	r0, r8
 8004ea4:	f7ff fc38 	bl	8004718 <_malloc_r>
 8004ea8:	4607      	mov	r7, r0
 8004eaa:	2800      	cmp	r0, #0
 8004eac:	d0ec      	beq.n	8004e88 <_realloc_r+0x1c>
 8004eae:	42b5      	cmp	r5, r6
 8004eb0:	462a      	mov	r2, r5
 8004eb2:	4621      	mov	r1, r4
 8004eb4:	bf28      	it	cs
 8004eb6:	4632      	movcs	r2, r6
 8004eb8:	f7ff ffca 	bl	8004e50 <memcpy>
 8004ebc:	4621      	mov	r1, r4
 8004ebe:	4640      	mov	r0, r8
 8004ec0:	f7ff fbbe 	bl	8004640 <_free_r>
 8004ec4:	463c      	mov	r4, r7
 8004ec6:	e7e0      	b.n	8004e8a <_realloc_r+0x1e>

08004ec8 <_malloc_usable_size_r>:
 8004ec8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004ecc:	1f18      	subs	r0, r3, #4
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	bfbc      	itt	lt
 8004ed2:	580b      	ldrlt	r3, [r1, r0]
 8004ed4:	18c0      	addlt	r0, r0, r3
 8004ed6:	4770      	bx	lr

08004ed8 <_init>:
 8004ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004eda:	bf00      	nop
 8004edc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ede:	bc08      	pop	{r3}
 8004ee0:	469e      	mov	lr, r3
 8004ee2:	4770      	bx	lr

08004ee4 <_fini>:
 8004ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ee6:	bf00      	nop
 8004ee8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004eea:	bc08      	pop	{r3}
 8004eec:	469e      	mov	lr, r3
 8004eee:	4770      	bx	lr
