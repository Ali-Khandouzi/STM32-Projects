
Timer-ex11.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b50  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  08004ce0  08004ce0  00005ce0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d90  08004d90  0000605c  2**0
                  CONTENTS
  4 .ARM          00000008  08004d90  08004d90  00005d90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004d98  08004d98  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d98  08004d98  00005d98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004d9c  08004d9c  00005d9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08004da0  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c8  2000005c  08004dfc  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000324  08004dfc  00006324  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000defc  00000000  00000000  0000608c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c4f  00000000  00000000  00013f88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cf8  00000000  00000000  00015bd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a14  00000000  00000000  000168d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026d0b  00000000  00000000  000172e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f743  00000000  00000000  0003dfef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f2769  00000000  00000000  0004d732  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013fe9b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b1c  00000000  00000000  0013fee0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  001439fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004cc8 	.word	0x08004cc8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08004cc8 	.word	0x08004cc8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <main>:
uint16_t tim1_ch1_pulse, tim1_ch2_pulse;
uint16_t speed = 0;

#define PULSES_PER_REVOLUTION 4

int main(void) {
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
  HAL_Init();
 8000574:	f000 fbf0 	bl	8000d58 <HAL_Init>

  Nucleo_BSP_Init();
 8000578:	f000 f9ee 	bl	8000958 <Nucleo_BSP_Init>
  MX_TIM2_Init();
 800057c:	f000 f90c 	bl	8000798 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000580:	f000 f93c 	bl	80007fc <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8000584:	f000 f9c4 	bl	8000910 <MX_USART2_UART_Init>

  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8000588:	213c      	movs	r1, #60	@ 0x3c
 800058a:	4871      	ldr	r0, [pc, #452]	@ (8000750 <main+0x1e0>)
 800058c:	f002 fca8 	bl	8002ee0 <HAL_TIM_Encoder_Start>
  HAL_TIM_OC_Start(&htim2, TIM_CHANNEL_1);
 8000590:	2100      	movs	r1, #0
 8000592:	4870      	ldr	r0, [pc, #448]	@ (8000754 <main+0x1e4>)
 8000594:	f002 faf8 	bl	8002b88 <HAL_TIM_OC_Start>
  HAL_TIM_OC_Start(&htim2, TIM_CHANNEL_2);
 8000598:	2104      	movs	r1, #4
 800059a:	486e      	ldr	r0, [pc, #440]	@ (8000754 <main+0x1e4>)
 800059c:	f002 faf4 	bl	8002b88 <HAL_TIM_OC_Start>

  cnt1 = __HAL_TIM_GET_COUNTER(&htim3);
 80005a0:	4b6b      	ldr	r3, [pc, #428]	@ (8000750 <main+0x1e0>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80005a6:	b29a      	uxth	r2, r3
 80005a8:	4b6b      	ldr	r3, [pc, #428]	@ (8000758 <main+0x1e8>)
 80005aa:	801a      	strh	r2, [r3, #0]
  tick = HAL_GetTick();
 80005ac:	f000 fc44 	bl	8000e38 <HAL_GetTick>
 80005b0:	4603      	mov	r3, r0
 80005b2:	4a6a      	ldr	r2, [pc, #424]	@ (800075c <main+0x1ec>)
 80005b4:	6013      	str	r3, [r2, #0]

  while (1) {
    if (HAL_GetTick() - tick > 1000L) {
 80005b6:	f000 fc3f 	bl	8000e38 <HAL_GetTick>
 80005ba:	4602      	mov	r2, r0
 80005bc:	4b67      	ldr	r3, [pc, #412]	@ (800075c <main+0x1ec>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	1ad3      	subs	r3, r2, r3
 80005c2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80005c6:	f240 80a3 	bls.w	8000710 <main+0x1a0>
      cnt2 = __HAL_TIM_GET_COUNTER(&htim3);
 80005ca:	4b61      	ldr	r3, [pc, #388]	@ (8000750 <main+0x1e0>)
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80005d0:	b29a      	uxth	r2, r3
 80005d2:	4b63      	ldr	r3, [pc, #396]	@ (8000760 <main+0x1f0>)
 80005d4:	801a      	strh	r2, [r3, #0]
      if (__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim3)) {
 80005d6:	4b5e      	ldr	r3, [pc, #376]	@ (8000750 <main+0x1e0>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	f003 0310 	and.w	r3, r3, #16
 80005e0:	2b10      	cmp	r3, #16
 80005e2:	d119      	bne.n	8000618 <main+0xa8>
        if (cnt2 < cnt1) /* Check for counter underflow */
 80005e4:	4b5e      	ldr	r3, [pc, #376]	@ (8000760 <main+0x1f0>)
 80005e6:	881a      	ldrh	r2, [r3, #0]
 80005e8:	4b5b      	ldr	r3, [pc, #364]	@ (8000758 <main+0x1e8>)
 80005ea:	881b      	ldrh	r3, [r3, #0]
 80005ec:	429a      	cmp	r2, r3
 80005ee:	d208      	bcs.n	8000602 <main+0x92>
          diff = cnt1 - cnt2;
 80005f0:	4b59      	ldr	r3, [pc, #356]	@ (8000758 <main+0x1e8>)
 80005f2:	881a      	ldrh	r2, [r3, #0]
 80005f4:	4b5a      	ldr	r3, [pc, #360]	@ (8000760 <main+0x1f0>)
 80005f6:	881b      	ldrh	r3, [r3, #0]
 80005f8:	1ad3      	subs	r3, r2, r3
 80005fa:	b29a      	uxth	r2, r3
 80005fc:	4b59      	ldr	r3, [pc, #356]	@ (8000764 <main+0x1f4>)
 80005fe:	801a      	strh	r2, [r3, #0]
 8000600:	e023      	b.n	800064a <main+0xda>
        else
          diff = (65535 - cnt2) + cnt1;
 8000602:	4b55      	ldr	r3, [pc, #340]	@ (8000758 <main+0x1e8>)
 8000604:	881a      	ldrh	r2, [r3, #0]
 8000606:	4b56      	ldr	r3, [pc, #344]	@ (8000760 <main+0x1f0>)
 8000608:	881b      	ldrh	r3, [r3, #0]
 800060a:	1ad3      	subs	r3, r2, r3
 800060c:	b29b      	uxth	r3, r3
 800060e:	3b01      	subs	r3, #1
 8000610:	b29a      	uxth	r2, r3
 8000612:	4b54      	ldr	r3, [pc, #336]	@ (8000764 <main+0x1f4>)
 8000614:	801a      	strh	r2, [r3, #0]
 8000616:	e018      	b.n	800064a <main+0xda>
      } else {
        if (cnt2 > cnt1) /* Check for counter overflow */
 8000618:	4b51      	ldr	r3, [pc, #324]	@ (8000760 <main+0x1f0>)
 800061a:	881a      	ldrh	r2, [r3, #0]
 800061c:	4b4e      	ldr	r3, [pc, #312]	@ (8000758 <main+0x1e8>)
 800061e:	881b      	ldrh	r3, [r3, #0]
 8000620:	429a      	cmp	r2, r3
 8000622:	d908      	bls.n	8000636 <main+0xc6>
          diff = cnt2 - cnt1;
 8000624:	4b4e      	ldr	r3, [pc, #312]	@ (8000760 <main+0x1f0>)
 8000626:	881a      	ldrh	r2, [r3, #0]
 8000628:	4b4b      	ldr	r3, [pc, #300]	@ (8000758 <main+0x1e8>)
 800062a:	881b      	ldrh	r3, [r3, #0]
 800062c:	1ad3      	subs	r3, r2, r3
 800062e:	b29a      	uxth	r2, r3
 8000630:	4b4c      	ldr	r3, [pc, #304]	@ (8000764 <main+0x1f4>)
 8000632:	801a      	strh	r2, [r3, #0]
 8000634:	e009      	b.n	800064a <main+0xda>
        else
          diff = (65535 - cnt1) + cnt2;
 8000636:	4b4a      	ldr	r3, [pc, #296]	@ (8000760 <main+0x1f0>)
 8000638:	881a      	ldrh	r2, [r3, #0]
 800063a:	4b47      	ldr	r3, [pc, #284]	@ (8000758 <main+0x1e8>)
 800063c:	881b      	ldrh	r3, [r3, #0]
 800063e:	1ad3      	subs	r3, r2, r3
 8000640:	b29b      	uxth	r3, r3
 8000642:	3b01      	subs	r3, #1
 8000644:	b29a      	uxth	r2, r3
 8000646:	4b47      	ldr	r3, [pc, #284]	@ (8000764 <main+0x1f4>)
 8000648:	801a      	strh	r2, [r3, #0]
      }

      sprintf(msg, "Difference: %d\r\n", diff);
 800064a:	4b46      	ldr	r3, [pc, #280]	@ (8000764 <main+0x1f4>)
 800064c:	881b      	ldrh	r3, [r3, #0]
 800064e:	461a      	mov	r2, r3
 8000650:	4945      	ldr	r1, [pc, #276]	@ (8000768 <main+0x1f8>)
 8000652:	4846      	ldr	r0, [pc, #280]	@ (800076c <main+0x1fc>)
 8000654:	f003 fe98 	bl	8004388 <siprintf>
      HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 8000658:	4844      	ldr	r0, [pc, #272]	@ (800076c <main+0x1fc>)
 800065a:	f7ff fdb9 	bl	80001d0 <strlen>
 800065e:	4603      	mov	r3, r0
 8000660:	b29a      	uxth	r2, r3
 8000662:	f04f 33ff 	mov.w	r3, #4294967295
 8000666:	4941      	ldr	r1, [pc, #260]	@ (800076c <main+0x1fc>)
 8000668:	4841      	ldr	r0, [pc, #260]	@ (8000770 <main+0x200>)
 800066a:	f003 f930 	bl	80038ce <HAL_UART_Transmit>

      speed = ((diff / PULSES_PER_REVOLUTION) / 60);
 800066e:	4b3d      	ldr	r3, [pc, #244]	@ (8000764 <main+0x1f4>)
 8000670:	881b      	ldrh	r3, [r3, #0]
 8000672:	4a40      	ldr	r2, [pc, #256]	@ (8000774 <main+0x204>)
 8000674:	fba2 2303 	umull	r2, r3, r2, r3
 8000678:	09db      	lsrs	r3, r3, #7
 800067a:	b29a      	uxth	r2, r3
 800067c:	4b3e      	ldr	r3, [pc, #248]	@ (8000778 <main+0x208>)
 800067e:	801a      	strh	r2, [r3, #0]

      /* If the first three bits of SMCR register are set to 0x3
       * then the timer is set in X4 mode (TIM_ENCODERMODE_TI12)
       * and we need to divide the pulses counter by two, because
       * they include the pulses for both the channels */
      if ((TIM3->SMCR & 0x3) == 0x3)
 8000680:	4b3e      	ldr	r3, [pc, #248]	@ (800077c <main+0x20c>)
 8000682:	689b      	ldr	r3, [r3, #8]
 8000684:	f003 0303 	and.w	r3, r3, #3
 8000688:	2b03      	cmp	r3, #3
 800068a:	d105      	bne.n	8000698 <main+0x128>
        speed /= 2;
 800068c:	4b3a      	ldr	r3, [pc, #232]	@ (8000778 <main+0x208>)
 800068e:	881b      	ldrh	r3, [r3, #0]
 8000690:	085b      	lsrs	r3, r3, #1
 8000692:	b29a      	uxth	r2, r3
 8000694:	4b38      	ldr	r3, [pc, #224]	@ (8000778 <main+0x208>)
 8000696:	801a      	strh	r2, [r3, #0]

      sprintf(msg, "Speed: %d RPM\r\n", speed);
 8000698:	4b37      	ldr	r3, [pc, #220]	@ (8000778 <main+0x208>)
 800069a:	881b      	ldrh	r3, [r3, #0]
 800069c:	461a      	mov	r2, r3
 800069e:	4938      	ldr	r1, [pc, #224]	@ (8000780 <main+0x210>)
 80006a0:	4832      	ldr	r0, [pc, #200]	@ (800076c <main+0x1fc>)
 80006a2:	f003 fe71 	bl	8004388 <siprintf>
      HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 80006a6:	4831      	ldr	r0, [pc, #196]	@ (800076c <main+0x1fc>)
 80006a8:	f7ff fd92 	bl	80001d0 <strlen>
 80006ac:	4603      	mov	r3, r0
 80006ae:	b29a      	uxth	r2, r3
 80006b0:	f04f 33ff 	mov.w	r3, #4294967295
 80006b4:	492d      	ldr	r1, [pc, #180]	@ (800076c <main+0x1fc>)
 80006b6:	482e      	ldr	r0, [pc, #184]	@ (8000770 <main+0x200>)
 80006b8:	f003 f909 	bl	80038ce <HAL_UART_Transmit>

      dir = __HAL_TIM_IS_TIM_COUNTING_DOWN(&htim3);
 80006bc:	4b24      	ldr	r3, [pc, #144]	@ (8000750 <main+0x1e0>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	f003 0310 	and.w	r3, r3, #16
 80006c6:	2b10      	cmp	r3, #16
 80006c8:	bf0c      	ite	eq
 80006ca:	2301      	moveq	r3, #1
 80006cc:	2300      	movne	r3, #0
 80006ce:	b2db      	uxtb	r3, r3
 80006d0:	461a      	mov	r2, r3
 80006d2:	4b2c      	ldr	r3, [pc, #176]	@ (8000784 <main+0x214>)
 80006d4:	701a      	strb	r2, [r3, #0]
      sprintf(msg, "Direction: %d\r\n", dir);
 80006d6:	4b2b      	ldr	r3, [pc, #172]	@ (8000784 <main+0x214>)
 80006d8:	781b      	ldrb	r3, [r3, #0]
 80006da:	461a      	mov	r2, r3
 80006dc:	492a      	ldr	r1, [pc, #168]	@ (8000788 <main+0x218>)
 80006de:	4823      	ldr	r0, [pc, #140]	@ (800076c <main+0x1fc>)
 80006e0:	f003 fe52 	bl	8004388 <siprintf>
      HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 80006e4:	4821      	ldr	r0, [pc, #132]	@ (800076c <main+0x1fc>)
 80006e6:	f7ff fd73 	bl	80001d0 <strlen>
 80006ea:	4603      	mov	r3, r0
 80006ec:	b29a      	uxth	r2, r3
 80006ee:	f04f 33ff 	mov.w	r3, #4294967295
 80006f2:	491e      	ldr	r1, [pc, #120]	@ (800076c <main+0x1fc>)
 80006f4:	481e      	ldr	r0, [pc, #120]	@ (8000770 <main+0x200>)
 80006f6:	f003 f8ea 	bl	80038ce <HAL_UART_Transmit>

      tick = HAL_GetTick();
 80006fa:	f000 fb9d 	bl	8000e38 <HAL_GetTick>
 80006fe:	4603      	mov	r3, r0
 8000700:	4a16      	ldr	r2, [pc, #88]	@ (800075c <main+0x1ec>)
 8000702:	6013      	str	r3, [r2, #0]
      cnt1 = __HAL_TIM_GET_COUNTER(&htim3);
 8000704:	4b12      	ldr	r3, [pc, #72]	@ (8000750 <main+0x1e0>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800070a:	b29a      	uxth	r2, r3
 800070c:	4b12      	ldr	r3, [pc, #72]	@ (8000758 <main+0x1e8>)
 800070e:	801a      	strh	r2, [r3, #0]
    }

    if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_RESET) {
 8000710:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000714:	481d      	ldr	r0, [pc, #116]	@ (800078c <main+0x21c>)
 8000716:	f000 fe73 	bl	8001400 <HAL_GPIO_ReadPin>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	f47f af4a 	bne.w	80005b6 <main+0x46>
      /* Invert rotation by swapping CH1 and CH2 CCR value */
      tim1_ch1_pulse = __HAL_TIM_GET_COMPARE(&htim2, TIM_CHANNEL_1);
 8000722:	4b0c      	ldr	r3, [pc, #48]	@ (8000754 <main+0x1e4>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000728:	b29a      	uxth	r2, r3
 800072a:	4b19      	ldr	r3, [pc, #100]	@ (8000790 <main+0x220>)
 800072c:	801a      	strh	r2, [r3, #0]
      tim1_ch2_pulse = __HAL_TIM_GET_COMPARE(&htim2, TIM_CHANNEL_2);
 800072e:	4b09      	ldr	r3, [pc, #36]	@ (8000754 <main+0x1e4>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000734:	b29a      	uxth	r2, r3
 8000736:	4b17      	ldr	r3, [pc, #92]	@ (8000794 <main+0x224>)
 8000738:	801a      	strh	r2, [r3, #0]

      __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, tim1_ch2_pulse);
 800073a:	4b16      	ldr	r3, [pc, #88]	@ (8000794 <main+0x224>)
 800073c:	881a      	ldrh	r2, [r3, #0]
 800073e:	4b05      	ldr	r3, [pc, #20]	@ (8000754 <main+0x1e4>)
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	635a      	str	r2, [r3, #52]	@ 0x34
      __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, tim1_ch1_pulse);
 8000744:	4b12      	ldr	r3, [pc, #72]	@ (8000790 <main+0x220>)
 8000746:	881a      	ldrh	r2, [r3, #0]
 8000748:	4b02      	ldr	r3, [pc, #8]	@ (8000754 <main+0x1e4>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	639a      	str	r2, [r3, #56]	@ 0x38
    if (HAL_GetTick() - tick > 1000L) {
 800074e:	e732      	b.n	80005b6 <main+0x46>
 8000750:	20000078 	.word	0x20000078
 8000754:	200000c4 	.word	0x200000c4
 8000758:	200001c2 	.word	0x200001c2
 800075c:	200001c8 	.word	0x200001c8
 8000760:	200001c4 	.word	0x200001c4
 8000764:	200001cc 	.word	0x200001cc
 8000768:	08004ce0 	.word	0x08004ce0
 800076c:	20000198 	.word	0x20000198
 8000770:	20000110 	.word	0x20000110
 8000774:	88888889 	.word	0x88888889
 8000778:	200001d2 	.word	0x200001d2
 800077c:	40000400 	.word	0x40000400
 8000780:	08004cf4 	.word	0x08004cf4
 8000784:	200001c0 	.word	0x200001c0
 8000788:	08004d04 	.word	0x08004d04
 800078c:	48000800 	.word	0x48000800
 8000790:	200001ce 	.word	0x200001ce
 8000794:	200001d0 	.word	0x200001d0

08000798 <MX_TIM2_Init>:
    }
  }
}

/* TIM2 init function */
void MX_TIM2_Init(void) {
 8000798:	b580      	push	{r7, lr}
 800079a:	b088      	sub	sp, #32
 800079c:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC;

  htim2.Instance = TIM2;
 800079e:	4b16      	ldr	r3, [pc, #88]	@ (80007f8 <MX_TIM2_Init+0x60>)
 80007a0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80007a4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9;
 80007a6:	4b14      	ldr	r3, [pc, #80]	@ (80007f8 <MX_TIM2_Init+0x60>)
 80007a8:	2209      	movs	r2, #9
 80007aa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007ac:	4b12      	ldr	r3, [pc, #72]	@ (80007f8 <MX_TIM2_Init+0x60>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80007b2:	4b11      	ldr	r3, [pc, #68]	@ (80007f8 <MX_TIM2_Init+0x60>)
 80007b4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80007b8:	60da      	str	r2, [r3, #12]
  HAL_TIM_Base_Init(&htim2);
 80007ba:	480f      	ldr	r0, [pc, #60]	@ (80007f8 <MX_TIM2_Init+0x60>)
 80007bc:	f002 f98c 	bl	8002ad8 <HAL_TIM_Base_Init>

  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 80007c0:	2330      	movs	r3, #48	@ 0x30
 80007c2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 499;
 80007c4:	f240 13f3 	movw	r3, #499	@ 0x1f3
 80007c8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007ca:	2300      	movs	r3, #0
 80007cc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007ce:	2300      	movs	r3, #0
 80007d0:	617b      	str	r3, [r7, #20]
  HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1);
 80007d2:	1d3b      	adds	r3, r7, #4
 80007d4:	2200      	movs	r2, #0
 80007d6:	4619      	mov	r1, r3
 80007d8:	4807      	ldr	r0, [pc, #28]	@ (80007f8 <MX_TIM2_Init+0x60>)
 80007da:	f002 fc0f 	bl	8002ffc <HAL_TIM_OC_ConfigChannel>

  sConfigOC.Pulse = 999; /* Phase B is shifted by 90° */
 80007de:	f240 33e7 	movw	r3, #999	@ 0x3e7
 80007e2:	60bb      	str	r3, [r7, #8]
  HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2);
 80007e4:	1d3b      	adds	r3, r7, #4
 80007e6:	2204      	movs	r2, #4
 80007e8:	4619      	mov	r1, r3
 80007ea:	4803      	ldr	r0, [pc, #12]	@ (80007f8 <MX_TIM2_Init+0x60>)
 80007ec:	f002 fc06 	bl	8002ffc <HAL_TIM_OC_ConfigChannel>
}
 80007f0:	bf00      	nop
 80007f2:	3720      	adds	r7, #32
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	200000c4 	.word	0x200000c4

080007fc <MX_TIM3_Init>:

/* TIM3 init function */
void MX_TIM3_Init(void) {
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b08a      	sub	sp, #40	@ 0x28
 8000800:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sEncoderConfig;

  htim3.Instance = TIM3;
 8000802:	4b14      	ldr	r3, [pc, #80]	@ (8000854 <MX_TIM3_Init+0x58>)
 8000804:	4a14      	ldr	r2, [pc, #80]	@ (8000858 <MX_TIM3_Init+0x5c>)
 8000806:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000808:	4b12      	ldr	r3, [pc, #72]	@ (8000854 <MX_TIM3_Init+0x58>)
 800080a:	2200      	movs	r2, #0
 800080c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800080e:	4b11      	ldr	r3, [pc, #68]	@ (8000854 <MX_TIM3_Init+0x58>)
 8000810:	2200      	movs	r2, #0
 8000812:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000814:	4b0f      	ldr	r3, [pc, #60]	@ (8000854 <MX_TIM3_Init+0x58>)
 8000816:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800081a:	60da      	str	r2, [r3, #12]

  sEncoderConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800081c:	2303      	movs	r3, #3
 800081e:	607b      	str	r3, [r7, #4]

  sEncoderConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000820:	2300      	movs	r3, #0
 8000822:	60bb      	str	r3, [r7, #8]
  sEncoderConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000824:	2301      	movs	r3, #1
 8000826:	60fb      	str	r3, [r7, #12]
  sEncoderConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000828:	2300      	movs	r3, #0
 800082a:	613b      	str	r3, [r7, #16]
  sEncoderConfig.IC1Filter = 0;
 800082c:	2300      	movs	r3, #0
 800082e:	617b      	str	r3, [r7, #20]

  sEncoderConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000830:	2300      	movs	r3, #0
 8000832:	61bb      	str	r3, [r7, #24]
  sEncoderConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000834:	2301      	movs	r3, #1
 8000836:	61fb      	str	r3, [r7, #28]
  sEncoderConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000838:	2300      	movs	r3, #0
 800083a:	623b      	str	r3, [r7, #32]
  sEncoderConfig.IC2Filter = 0;
 800083c:	2300      	movs	r3, #0
 800083e:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_TIM_Encoder_Init(&htim3, &sEncoderConfig);
 8000840:	1d3b      	adds	r3, r7, #4
 8000842:	4619      	mov	r1, r3
 8000844:	4803      	ldr	r0, [pc, #12]	@ (8000854 <MX_TIM3_Init+0x58>)
 8000846:	f002 faa5 	bl	8002d94 <HAL_TIM_Encoder_Init>
}
 800084a:	bf00      	nop
 800084c:	3728      	adds	r7, #40	@ 0x28
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	20000078 	.word	0x20000078
 8000858:	40000400 	.word	0x40000400

0800085c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_base) {
 800085c:	b580      	push	{r7, lr}
 800085e:	b088      	sub	sp, #32
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  if (htim_base->Instance == TIM3) {
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	4a11      	ldr	r2, [pc, #68]	@ (80008b0 <HAL_TIM_Encoder_MspInit+0x54>)
 800086a:	4293      	cmp	r3, r2
 800086c:	d11c      	bne.n	80008a8 <HAL_TIM_Encoder_MspInit+0x4c>
    __TIM3_CLK_ENABLE();
 800086e:	4b11      	ldr	r3, [pc, #68]	@ (80008b4 <HAL_TIM_Encoder_MspInit+0x58>)
 8000870:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000872:	4a10      	ldr	r2, [pc, #64]	@ (80008b4 <HAL_TIM_Encoder_MspInit+0x58>)
 8000874:	f043 0302 	orr.w	r3, r3, #2
 8000878:	6593      	str	r3, [r2, #88]	@ 0x58
 800087a:	4b0e      	ldr	r3, [pc, #56]	@ (80008b4 <HAL_TIM_Encoder_MspInit+0x58>)
 800087c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800087e:	f003 0302 	and.w	r3, r3, #2
 8000882:	60bb      	str	r3, [r7, #8]
 8000884:	68bb      	ldr	r3, [r7, #8]

    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000886:	23c0      	movs	r3, #192	@ 0xc0
 8000888:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800088a:	2302      	movs	r3, #2
 800088c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088e:	2300      	movs	r3, #0
 8000890:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8000892:	2302      	movs	r3, #2
 8000894:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000896:	2302      	movs	r3, #2
 8000898:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800089a:	f107 030c 	add.w	r3, r7, #12
 800089e:	4619      	mov	r1, r3
 80008a0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008a4:	f000 fc02 	bl	80010ac <HAL_GPIO_Init>
  }
}
 80008a8:	bf00      	nop
 80008aa:	3720      	adds	r7, #32
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	40000400 	.word	0x40000400
 80008b4:	40021000 	.word	0x40021000

080008b8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base) {
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b088      	sub	sp, #32
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  if (htim_base->Instance == TIM2) {
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80008c8:	d11c      	bne.n	8000904 <HAL_TIM_Base_MspInit+0x4c>
    /* Peripheral clock enable */
    __TIM2_CLK_ENABLE();
 80008ca:	4b10      	ldr	r3, [pc, #64]	@ (800090c <HAL_TIM_Base_MspInit+0x54>)
 80008cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008ce:	4a0f      	ldr	r2, [pc, #60]	@ (800090c <HAL_TIM_Base_MspInit+0x54>)
 80008d0:	f043 0301 	orr.w	r3, r3, #1
 80008d4:	6593      	str	r3, [r2, #88]	@ 0x58
 80008d6:	4b0d      	ldr	r3, [pc, #52]	@ (800090c <HAL_TIM_Base_MspInit+0x54>)
 80008d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008da:	f003 0301 	and.w	r3, r3, #1
 80008de:	60bb      	str	r3, [r7, #8]
 80008e0:	68bb      	ldr	r3, [r7, #8]

    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80008e2:	2303      	movs	r3, #3
 80008e4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e6:	2302      	movs	r3, #2
 80008e8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ea:	2300      	movs	r3, #0
 80008ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 80008ee:	2300      	movs	r3, #0
 80008f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80008f2:	2301      	movs	r3, #1
 80008f4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008f6:	f107 030c 	add.w	r3, r7, #12
 80008fa:	4619      	mov	r1, r3
 80008fc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000900:	f000 fbd4 	bl	80010ac <HAL_GPIO_Init>
  }
}
 8000904:	bf00      	nop
 8000906:	3720      	adds	r7, #32
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}
 800090c:	40021000 	.word	0x40021000

08000910 <MX_USART2_UART_Init>:

/* USART2 init function */
void MX_USART2_UART_Init(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8000914:	4b0e      	ldr	r3, [pc, #56]	@ (8000950 <MX_USART2_UART_Init+0x40>)
 8000916:	4a0f      	ldr	r2, [pc, #60]	@ (8000954 <MX_USART2_UART_Init+0x44>)
 8000918:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800091a:	4b0d      	ldr	r3, [pc, #52]	@ (8000950 <MX_USART2_UART_Init+0x40>)
 800091c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000920:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000922:	4b0b      	ldr	r3, [pc, #44]	@ (8000950 <MX_USART2_UART_Init+0x40>)
 8000924:	2200      	movs	r2, #0
 8000926:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000928:	4b09      	ldr	r3, [pc, #36]	@ (8000950 <MX_USART2_UART_Init+0x40>)
 800092a:	2200      	movs	r2, #0
 800092c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800092e:	4b08      	ldr	r3, [pc, #32]	@ (8000950 <MX_USART2_UART_Init+0x40>)
 8000930:	2200      	movs	r2, #0
 8000932:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000934:	4b06      	ldr	r3, [pc, #24]	@ (8000950 <MX_USART2_UART_Init+0x40>)
 8000936:	220c      	movs	r2, #12
 8000938:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800093a:	4b05      	ldr	r3, [pc, #20]	@ (8000950 <MX_USART2_UART_Init+0x40>)
 800093c:	2200      	movs	r2, #0
 800093e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000940:	4b03      	ldr	r3, [pc, #12]	@ (8000950 <MX_USART2_UART_Init+0x40>)
 8000942:	2200      	movs	r2, #0
 8000944:	61da      	str	r2, [r3, #28]
  HAL_UART_Init(&huart2);
 8000946:	4802      	ldr	r0, [pc, #8]	@ (8000950 <MX_USART2_UART_Init+0x40>)
 8000948:	f002 ff73 	bl	8003832 <HAL_UART_Init>

}
 800094c:	bf00      	nop
 800094e:	bd80      	pop	{r7, pc}
 8000950:	20000110 	.word	0x20000110
 8000954:	40004400 	.word	0x40004400

08000958 <Nucleo_BSP_Init>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_DMA_Init(void);

void Nucleo_BSP_Init() {
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
  /* Configure the system clock */
  SystemClock_Config();
 800095c:	f000 f806 	bl	800096c <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000960:	f000 f882 	bl	8000a68 <MX_GPIO_Init>
  MX_DMA_Init();
 8000964:	f000 f862 	bl	8000a2c <MX_DMA_Init>
}
 8000968:	bf00      	nop
 800096a:	bd80      	pop	{r7, pc}

0800096c <SystemClock_Config>:

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b098      	sub	sp, #96	@ 0x60
 8000970:	af00      	add	r7, sp, #0

  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8000972:	2306      	movs	r3, #6
 8000974:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000976:	2301      	movs	r3, #1
 8000978:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800097a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800097e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8000980:	2310      	movs	r3, #16
 8000982:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000984:	2302      	movs	r3, #2
 8000986:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000988:	2302      	movs	r3, #2
 800098a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLM = 1;
 800098c:	2301      	movs	r3, #1
 800098e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000990:	230a      	movs	r3, #10
 8000992:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000994:	2307      	movs	r3, #7
 8000996:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000998:	2302      	movs	r3, #2
 800099a:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800099c:	2302      	movs	r3, #2
 800099e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80009a0:	f107 031c 	add.w	r3, r7, #28
 80009a4:	4618      	mov	r0, r3
 80009a6:	f000 fda7 	bl	80014f8 <HAL_RCC_OscConfig>

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009aa:	230f      	movs	r3, #15
 80009ac:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009ae:	2303      	movs	r3, #3
 80009b0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009b2:	2300      	movs	r3, #0
 80009b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009b6:	2300      	movs	r3, #0
 80009b8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009ba:	2300      	movs	r3, #0
 80009bc:	61bb      	str	r3, [r7, #24]
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);
 80009be:	f107 0308 	add.w	r3, r7, #8
 80009c2:	2104      	movs	r1, #4
 80009c4:	4618      	mov	r0, r3
 80009c6:	f001 f973 	bl	8001cb0 <HAL_RCC_ClockConfig>

  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 80009ca:	2200      	movs	r2, #0
 80009cc:	f04f 7140 	mov.w	r1, #50331648	@ 0x3000000
 80009d0:	2000      	movs	r0, #0
 80009d2:	f001 fa6d 	bl	8001eb0 <HAL_RCC_MCOConfig>

  __PWR_CLK_ENABLE();
 80009d6:	4b13      	ldr	r3, [pc, #76]	@ (8000a24 <SystemClock_Config+0xb8>)
 80009d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009da:	4a12      	ldr	r2, [pc, #72]	@ (8000a24 <SystemClock_Config+0xb8>)
 80009dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009e0:	6593      	str	r3, [r2, #88]	@ 0x58
 80009e2:	4b10      	ldr	r3, [pc, #64]	@ (8000a24 <SystemClock_Config+0xb8>)
 80009e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009ea:	607b      	str	r3, [r7, #4]
 80009ec:	687b      	ldr	r3, [r7, #4]

  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009ee:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80009f2:	f000 fd2b 	bl	800144c <HAL_PWREx_ControlVoltageScaling>

  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80009f6:	f001 fb1b 	bl	8002030 <HAL_RCC_GetHCLKFreq>
 80009fa:	4603      	mov	r3, r0
 80009fc:	4a0a      	ldr	r2, [pc, #40]	@ (8000a28 <SystemClock_Config+0xbc>)
 80009fe:	fba2 2303 	umull	r2, r3, r2, r3
 8000a02:	099b      	lsrs	r3, r3, #6
 8000a04:	4618      	mov	r0, r3
 8000a06:	f000 fb28 	bl	800105a <HAL_SYSTICK_Config>

  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000a0a:	2004      	movs	r0, #4
 8000a0c:	f000 fb32 	bl	8001074 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000a10:	2200      	movs	r2, #0
 8000a12:	2100      	movs	r1, #0
 8000a14:	f04f 30ff 	mov.w	r0, #4294967295
 8000a18:	f000 faf5 	bl	8001006 <HAL_NVIC_SetPriority>
}
 8000a1c:	bf00      	nop
 8000a1e:	3760      	adds	r7, #96	@ 0x60
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	40021000 	.word	0x40021000
 8000a28:	10624dd3 	.word	0x10624dd3

08000a2c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b082      	sub	sp, #8
 8000a30:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __DMA1_CLK_ENABLE();
 8000a32:	4b0c      	ldr	r3, [pc, #48]	@ (8000a64 <MX_DMA_Init+0x38>)
 8000a34:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000a36:	4a0b      	ldr	r2, [pc, #44]	@ (8000a64 <MX_DMA_Init+0x38>)
 8000a38:	f043 0301 	orr.w	r3, r3, #1
 8000a3c:	6493      	str	r3, [r2, #72]	@ 0x48
 8000a3e:	4b09      	ldr	r3, [pc, #36]	@ (8000a64 <MX_DMA_Init+0x38>)
 8000a40:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000a42:	f003 0301 	and.w	r3, r3, #1
 8000a46:	607b      	str	r3, [r7, #4]
 8000a48:	687b      	ldr	r3, [r7, #4]

//  /* DMA interrupt init */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	2100      	movs	r1, #0
 8000a4e:	200e      	movs	r0, #14
 8000a50:	f000 fad9 	bl	8001006 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000a54:	200e      	movs	r0, #14
 8000a56:	f000 faf2 	bl	800103e <HAL_NVIC_EnableIRQ>

}
 8000a5a:	bf00      	nop
 8000a5c:	3708      	adds	r7, #8
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	40021000 	.word	0x40021000

08000a68 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b088      	sub	sp, #32
 8000a6c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __GPIOC_CLK_ENABLE();
 8000a6e:	4b24      	ldr	r3, [pc, #144]	@ (8000b00 <MX_GPIO_Init+0x98>)
 8000a70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a72:	4a23      	ldr	r2, [pc, #140]	@ (8000b00 <MX_GPIO_Init+0x98>)
 8000a74:	f043 0304 	orr.w	r3, r3, #4
 8000a78:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a7a:	4b21      	ldr	r3, [pc, #132]	@ (8000b00 <MX_GPIO_Init+0x98>)
 8000a7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a7e:	f003 0304 	and.w	r3, r3, #4
 8000a82:	60bb      	str	r3, [r7, #8]
 8000a84:	68bb      	ldr	r3, [r7, #8]
  __GPIOA_CLK_ENABLE();
 8000a86:	4b1e      	ldr	r3, [pc, #120]	@ (8000b00 <MX_GPIO_Init+0x98>)
 8000a88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a8a:	4a1d      	ldr	r2, [pc, #116]	@ (8000b00 <MX_GPIO_Init+0x98>)
 8000a8c:	f043 0301 	orr.w	r3, r3, #1
 8000a90:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a92:	4b1b      	ldr	r3, [pc, #108]	@ (8000b00 <MX_GPIO_Init+0x98>)
 8000a94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a96:	f003 0301 	and.w	r3, r3, #1
 8000a9a:	607b      	str	r3, [r7, #4]
 8000a9c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a9e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000aa2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000aa4:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000aa8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000aae:	f107 030c 	add.w	r3, r7, #12
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	4813      	ldr	r0, [pc, #76]	@ (8000b04 <MX_GPIO_Init+0x9c>)
 8000ab6:	f000 faf9 	bl	80010ac <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000aba:	2320      	movs	r3, #32
 8000abc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000abe:	2301      	movs	r3, #1
 8000ac0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8000ac6:	2303      	movs	r3, #3
 8000ac8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000aca:	f107 030c 	add.w	r3, r7, #12
 8000ace:	4619      	mov	r1, r3
 8000ad0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ad4:	f000 faea 	bl	80010ac <HAL_GPIO_Init>

  /*Configure GPIOC pin8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000ad8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000adc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ade:	2301      	movs	r3, #1
 8000ae0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8000ae6:	2303      	movs	r3, #3
 8000ae8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000aea:	f107 030c 	add.w	r3, r7, #12
 8000aee:	4619      	mov	r1, r3
 8000af0:	4804      	ldr	r0, [pc, #16]	@ (8000b04 <MX_GPIO_Init+0x9c>)
 8000af2:	f000 fadb 	bl	80010ac <HAL_GPIO_Init>

}
 8000af6:	bf00      	nop
 8000af8:	3720      	adds	r7, #32
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	40021000 	.word	0x40021000
 8000b04:	48000800 	.word	0x48000800

08000b08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b083      	sub	sp, #12
 8000b0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b0e:	4b0f      	ldr	r3, [pc, #60]	@ (8000b4c <HAL_MspInit+0x44>)
 8000b10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b12:	4a0e      	ldr	r2, [pc, #56]	@ (8000b4c <HAL_MspInit+0x44>)
 8000b14:	f043 0301 	orr.w	r3, r3, #1
 8000b18:	6613      	str	r3, [r2, #96]	@ 0x60
 8000b1a:	4b0c      	ldr	r3, [pc, #48]	@ (8000b4c <HAL_MspInit+0x44>)
 8000b1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b1e:	f003 0301 	and.w	r3, r3, #1
 8000b22:	607b      	str	r3, [r7, #4]
 8000b24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b26:	4b09      	ldr	r3, [pc, #36]	@ (8000b4c <HAL_MspInit+0x44>)
 8000b28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b2a:	4a08      	ldr	r2, [pc, #32]	@ (8000b4c <HAL_MspInit+0x44>)
 8000b2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b30:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b32:	4b06      	ldr	r3, [pc, #24]	@ (8000b4c <HAL_MspInit+0x44>)
 8000b34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b3a:	603b      	str	r3, [r7, #0]
 8000b3c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b3e:	bf00      	nop
 8000b40:	370c      	adds	r7, #12
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop
 8000b4c:	40021000 	.word	0x40021000

08000b50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b0ac      	sub	sp, #176	@ 0xb0
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b58:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	601a      	str	r2, [r3, #0]
 8000b60:	605a      	str	r2, [r3, #4]
 8000b62:	609a      	str	r2, [r3, #8]
 8000b64:	60da      	str	r2, [r3, #12]
 8000b66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b68:	f107 0314 	add.w	r3, r7, #20
 8000b6c:	2288      	movs	r2, #136	@ 0x88
 8000b6e:	2100      	movs	r1, #0
 8000b70:	4618      	mov	r0, r3
 8000b72:	f003 fc29 	bl	80043c8 <memset>
  if(huart->Instance==USART2)
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	4a21      	ldr	r2, [pc, #132]	@ (8000c00 <HAL_UART_MspInit+0xb0>)
 8000b7c:	4293      	cmp	r3, r2
 8000b7e:	d13b      	bne.n	8000bf8 <HAL_UART_MspInit+0xa8>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000b80:	2302      	movs	r3, #2
 8000b82:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000b84:	2300      	movs	r3, #0
 8000b86:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b88:	f107 0314 	add.w	r3, r7, #20
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f001 fae7 	bl	8002160 <HAL_RCCEx_PeriphCLKConfig>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d001      	beq.n	8000b9c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000b98:	f000 f836 	bl	8000c08 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b9c:	4b19      	ldr	r3, [pc, #100]	@ (8000c04 <HAL_UART_MspInit+0xb4>)
 8000b9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ba0:	4a18      	ldr	r2, [pc, #96]	@ (8000c04 <HAL_UART_MspInit+0xb4>)
 8000ba2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ba6:	6593      	str	r3, [r2, #88]	@ 0x58
 8000ba8:	4b16      	ldr	r3, [pc, #88]	@ (8000c04 <HAL_UART_MspInit+0xb4>)
 8000baa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000bb0:	613b      	str	r3, [r7, #16]
 8000bb2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bb4:	4b13      	ldr	r3, [pc, #76]	@ (8000c04 <HAL_UART_MspInit+0xb4>)
 8000bb6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bb8:	4a12      	ldr	r2, [pc, #72]	@ (8000c04 <HAL_UART_MspInit+0xb4>)
 8000bba:	f043 0301 	orr.w	r3, r3, #1
 8000bbe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bc0:	4b10      	ldr	r3, [pc, #64]	@ (8000c04 <HAL_UART_MspInit+0xb4>)
 8000bc2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bc4:	f003 0301 	and.w	r3, r3, #1
 8000bc8:	60fb      	str	r3, [r7, #12]
 8000bca:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000bcc:	230c      	movs	r3, #12
 8000bce:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd2:	2302      	movs	r3, #2
 8000bd4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bde:	2303      	movs	r3, #3
 8000be0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000be4:	2307      	movs	r3, #7
 8000be6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bea:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000bee:	4619      	mov	r1, r3
 8000bf0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bf4:	f000 fa5a 	bl	80010ac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000bf8:	bf00      	nop
 8000bfa:	37b0      	adds	r7, #176	@ 0xb0
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	40004400 	.word	0x40004400
 8000c04:	40021000 	.word	0x40021000

08000c08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c0c:	b672      	cpsid	i
}
 8000c0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c10:	bf00      	nop
 8000c12:	e7fd      	b.n	8000c10 <Error_Handler+0x8>

08000c14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c18:	bf00      	nop
 8000c1a:	e7fd      	b.n	8000c18 <NMI_Handler+0x4>

08000c1c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c20:	bf00      	nop
 8000c22:	e7fd      	b.n	8000c20 <HardFault_Handler+0x4>

08000c24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c28:	bf00      	nop
 8000c2a:	e7fd      	b.n	8000c28 <MemManage_Handler+0x4>

08000c2c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c30:	bf00      	nop
 8000c32:	e7fd      	b.n	8000c30 <BusFault_Handler+0x4>

08000c34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c38:	bf00      	nop
 8000c3a:	e7fd      	b.n	8000c38 <UsageFault_Handler+0x4>

08000c3c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c40:	bf00      	nop
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr

08000c4a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c4a:	b480      	push	{r7}
 8000c4c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c4e:	bf00      	nop
 8000c50:	46bd      	mov	sp, r7
 8000c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c56:	4770      	bx	lr

08000c58 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c5c:	bf00      	nop
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr

08000c66 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c66:	b580      	push	{r7, lr}
 8000c68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c6a:	f000 f8d1 	bl	8000e10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c6e:	bf00      	nop
 8000c70:	bd80      	pop	{r7, pc}
	...

08000c74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b086      	sub	sp, #24
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c7c:	4a14      	ldr	r2, [pc, #80]	@ (8000cd0 <_sbrk+0x5c>)
 8000c7e:	4b15      	ldr	r3, [pc, #84]	@ (8000cd4 <_sbrk+0x60>)
 8000c80:	1ad3      	subs	r3, r2, r3
 8000c82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c84:	697b      	ldr	r3, [r7, #20]
 8000c86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c88:	4b13      	ldr	r3, [pc, #76]	@ (8000cd8 <_sbrk+0x64>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d102      	bne.n	8000c96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c90:	4b11      	ldr	r3, [pc, #68]	@ (8000cd8 <_sbrk+0x64>)
 8000c92:	4a12      	ldr	r2, [pc, #72]	@ (8000cdc <_sbrk+0x68>)
 8000c94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c96:	4b10      	ldr	r3, [pc, #64]	@ (8000cd8 <_sbrk+0x64>)
 8000c98:	681a      	ldr	r2, [r3, #0]
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	4413      	add	r3, r2
 8000c9e:	693a      	ldr	r2, [r7, #16]
 8000ca0:	429a      	cmp	r2, r3
 8000ca2:	d207      	bcs.n	8000cb4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ca4:	f003 fb98 	bl	80043d8 <__errno>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	220c      	movs	r2, #12
 8000cac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cae:	f04f 33ff 	mov.w	r3, #4294967295
 8000cb2:	e009      	b.n	8000cc8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cb4:	4b08      	ldr	r3, [pc, #32]	@ (8000cd8 <_sbrk+0x64>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cba:	4b07      	ldr	r3, [pc, #28]	@ (8000cd8 <_sbrk+0x64>)
 8000cbc:	681a      	ldr	r2, [r3, #0]
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	4413      	add	r3, r2
 8000cc2:	4a05      	ldr	r2, [pc, #20]	@ (8000cd8 <_sbrk+0x64>)
 8000cc4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cc6:	68fb      	ldr	r3, [r7, #12]
}
 8000cc8:	4618      	mov	r0, r3
 8000cca:	3718      	adds	r7, #24
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	20018000 	.word	0x20018000
 8000cd4:	00000400 	.word	0x00000400
 8000cd8:	200001d4 	.word	0x200001d4
 8000cdc:	20000328 	.word	0x20000328

08000ce0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000ce4:	4b06      	ldr	r3, [pc, #24]	@ (8000d00 <SystemInit+0x20>)
 8000ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000cea:	4a05      	ldr	r2, [pc, #20]	@ (8000d00 <SystemInit+0x20>)
 8000cec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000cf0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000cf4:	bf00      	nop
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop
 8000d00:	e000ed00 	.word	0xe000ed00

08000d04 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000d04:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d3c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d08:	f7ff ffea 	bl	8000ce0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d0c:	480c      	ldr	r0, [pc, #48]	@ (8000d40 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d0e:	490d      	ldr	r1, [pc, #52]	@ (8000d44 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d10:	4a0d      	ldr	r2, [pc, #52]	@ (8000d48 <LoopForever+0xe>)
  movs r3, #0
 8000d12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d14:	e002      	b.n	8000d1c <LoopCopyDataInit>

08000d16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d1a:	3304      	adds	r3, #4

08000d1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d20:	d3f9      	bcc.n	8000d16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d22:	4a0a      	ldr	r2, [pc, #40]	@ (8000d4c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d24:	4c0a      	ldr	r4, [pc, #40]	@ (8000d50 <LoopForever+0x16>)
  movs r3, #0
 8000d26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d28:	e001      	b.n	8000d2e <LoopFillZerobss>

08000d2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d2c:	3204      	adds	r2, #4

08000d2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d30:	d3fb      	bcc.n	8000d2a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d32:	f003 fb57 	bl	80043e4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d36:	f7ff fc1b 	bl	8000570 <main>

08000d3a <LoopForever>:

LoopForever:
    b LoopForever
 8000d3a:	e7fe      	b.n	8000d3a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000d3c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000d40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d44:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000d48:	08004da0 	.word	0x08004da0
  ldr r2, =_sbss
 8000d4c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000d50:	20000324 	.word	0x20000324

08000d54 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d54:	e7fe      	b.n	8000d54 <ADC1_2_IRQHandler>
	...

08000d58 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d62:	4b0c      	ldr	r3, [pc, #48]	@ (8000d94 <HAL_Init+0x3c>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	4a0b      	ldr	r2, [pc, #44]	@ (8000d94 <HAL_Init+0x3c>)
 8000d68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d6c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d6e:	2003      	movs	r0, #3
 8000d70:	f000 f93e 	bl	8000ff0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d74:	2000      	movs	r0, #0
 8000d76:	f000 f80f 	bl	8000d98 <HAL_InitTick>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d002      	beq.n	8000d86 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000d80:	2301      	movs	r3, #1
 8000d82:	71fb      	strb	r3, [r7, #7]
 8000d84:	e001      	b.n	8000d8a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d86:	f7ff febf 	bl	8000b08 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d8a:	79fb      	ldrb	r3, [r7, #7]
}
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	3708      	adds	r7, #8
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	40022000 	.word	0x40022000

08000d98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b084      	sub	sp, #16
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000da0:	2300      	movs	r3, #0
 8000da2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000da4:	4b17      	ldr	r3, [pc, #92]	@ (8000e04 <HAL_InitTick+0x6c>)
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d023      	beq.n	8000df4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000dac:	4b16      	ldr	r3, [pc, #88]	@ (8000e08 <HAL_InitTick+0x70>)
 8000dae:	681a      	ldr	r2, [r3, #0]
 8000db0:	4b14      	ldr	r3, [pc, #80]	@ (8000e04 <HAL_InitTick+0x6c>)
 8000db2:	781b      	ldrb	r3, [r3, #0]
 8000db4:	4619      	mov	r1, r3
 8000db6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000dba:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f000 f949 	bl	800105a <HAL_SYSTICK_Config>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d10f      	bne.n	8000dee <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	2b0f      	cmp	r3, #15
 8000dd2:	d809      	bhi.n	8000de8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	6879      	ldr	r1, [r7, #4]
 8000dd8:	f04f 30ff 	mov.w	r0, #4294967295
 8000ddc:	f000 f913 	bl	8001006 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000de0:	4a0a      	ldr	r2, [pc, #40]	@ (8000e0c <HAL_InitTick+0x74>)
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	6013      	str	r3, [r2, #0]
 8000de6:	e007      	b.n	8000df8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000de8:	2301      	movs	r3, #1
 8000dea:	73fb      	strb	r3, [r7, #15]
 8000dec:	e004      	b.n	8000df8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000dee:	2301      	movs	r3, #1
 8000df0:	73fb      	strb	r3, [r7, #15]
 8000df2:	e001      	b.n	8000df8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000df4:	2301      	movs	r3, #1
 8000df6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000df8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	3710      	adds	r7, #16
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	20000008 	.word	0x20000008
 8000e08:	20000000 	.word	0x20000000
 8000e0c:	20000004 	.word	0x20000004

08000e10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e14:	4b06      	ldr	r3, [pc, #24]	@ (8000e30 <HAL_IncTick+0x20>)
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	461a      	mov	r2, r3
 8000e1a:	4b06      	ldr	r3, [pc, #24]	@ (8000e34 <HAL_IncTick+0x24>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	4413      	add	r3, r2
 8000e20:	4a04      	ldr	r2, [pc, #16]	@ (8000e34 <HAL_IncTick+0x24>)
 8000e22:	6013      	str	r3, [r2, #0]
}
 8000e24:	bf00      	nop
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr
 8000e2e:	bf00      	nop
 8000e30:	20000008 	.word	0x20000008
 8000e34:	200001d8 	.word	0x200001d8

08000e38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e3c:	4b03      	ldr	r3, [pc, #12]	@ (8000e4c <HAL_GetTick+0x14>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
}
 8000e40:	4618      	mov	r0, r3
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop
 8000e4c:	200001d8 	.word	0x200001d8

08000e50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b085      	sub	sp, #20
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	f003 0307 	and.w	r3, r3, #7
 8000e5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e60:	4b0c      	ldr	r3, [pc, #48]	@ (8000e94 <__NVIC_SetPriorityGrouping+0x44>)
 8000e62:	68db      	ldr	r3, [r3, #12]
 8000e64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e66:	68ba      	ldr	r2, [r7, #8]
 8000e68:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e6c:	4013      	ands	r3, r2
 8000e6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e74:	68bb      	ldr	r3, [r7, #8]
 8000e76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e78:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e7c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e82:	4a04      	ldr	r2, [pc, #16]	@ (8000e94 <__NVIC_SetPriorityGrouping+0x44>)
 8000e84:	68bb      	ldr	r3, [r7, #8]
 8000e86:	60d3      	str	r3, [r2, #12]
}
 8000e88:	bf00      	nop
 8000e8a:	3714      	adds	r7, #20
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e92:	4770      	bx	lr
 8000e94:	e000ed00 	.word	0xe000ed00

08000e98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e9c:	4b04      	ldr	r3, [pc, #16]	@ (8000eb0 <__NVIC_GetPriorityGrouping+0x18>)
 8000e9e:	68db      	ldr	r3, [r3, #12]
 8000ea0:	0a1b      	lsrs	r3, r3, #8
 8000ea2:	f003 0307 	and.w	r3, r3, #7
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr
 8000eb0:	e000ed00 	.word	0xe000ed00

08000eb4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b083      	sub	sp, #12
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	4603      	mov	r3, r0
 8000ebc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ebe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	db0b      	blt.n	8000ede <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ec6:	79fb      	ldrb	r3, [r7, #7]
 8000ec8:	f003 021f 	and.w	r2, r3, #31
 8000ecc:	4907      	ldr	r1, [pc, #28]	@ (8000eec <__NVIC_EnableIRQ+0x38>)
 8000ece:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed2:	095b      	lsrs	r3, r3, #5
 8000ed4:	2001      	movs	r0, #1
 8000ed6:	fa00 f202 	lsl.w	r2, r0, r2
 8000eda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000ede:	bf00      	nop
 8000ee0:	370c      	adds	r7, #12
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop
 8000eec:	e000e100 	.word	0xe000e100

08000ef0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b083      	sub	sp, #12
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	6039      	str	r1, [r7, #0]
 8000efa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000efc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	db0a      	blt.n	8000f1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	b2da      	uxtb	r2, r3
 8000f08:	490c      	ldr	r1, [pc, #48]	@ (8000f3c <__NVIC_SetPriority+0x4c>)
 8000f0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f0e:	0112      	lsls	r2, r2, #4
 8000f10:	b2d2      	uxtb	r2, r2
 8000f12:	440b      	add	r3, r1
 8000f14:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f18:	e00a      	b.n	8000f30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	b2da      	uxtb	r2, r3
 8000f1e:	4908      	ldr	r1, [pc, #32]	@ (8000f40 <__NVIC_SetPriority+0x50>)
 8000f20:	79fb      	ldrb	r3, [r7, #7]
 8000f22:	f003 030f 	and.w	r3, r3, #15
 8000f26:	3b04      	subs	r3, #4
 8000f28:	0112      	lsls	r2, r2, #4
 8000f2a:	b2d2      	uxtb	r2, r2
 8000f2c:	440b      	add	r3, r1
 8000f2e:	761a      	strb	r2, [r3, #24]
}
 8000f30:	bf00      	nop
 8000f32:	370c      	adds	r7, #12
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr
 8000f3c:	e000e100 	.word	0xe000e100
 8000f40:	e000ed00 	.word	0xe000ed00

08000f44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b089      	sub	sp, #36	@ 0x24
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	60f8      	str	r0, [r7, #12]
 8000f4c:	60b9      	str	r1, [r7, #8]
 8000f4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	f003 0307 	and.w	r3, r3, #7
 8000f56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f58:	69fb      	ldr	r3, [r7, #28]
 8000f5a:	f1c3 0307 	rsb	r3, r3, #7
 8000f5e:	2b04      	cmp	r3, #4
 8000f60:	bf28      	it	cs
 8000f62:	2304      	movcs	r3, #4
 8000f64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f66:	69fb      	ldr	r3, [r7, #28]
 8000f68:	3304      	adds	r3, #4
 8000f6a:	2b06      	cmp	r3, #6
 8000f6c:	d902      	bls.n	8000f74 <NVIC_EncodePriority+0x30>
 8000f6e:	69fb      	ldr	r3, [r7, #28]
 8000f70:	3b03      	subs	r3, #3
 8000f72:	e000      	b.n	8000f76 <NVIC_EncodePriority+0x32>
 8000f74:	2300      	movs	r3, #0
 8000f76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f78:	f04f 32ff 	mov.w	r2, #4294967295
 8000f7c:	69bb      	ldr	r3, [r7, #24]
 8000f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f82:	43da      	mvns	r2, r3
 8000f84:	68bb      	ldr	r3, [r7, #8]
 8000f86:	401a      	ands	r2, r3
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f8c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	fa01 f303 	lsl.w	r3, r1, r3
 8000f96:	43d9      	mvns	r1, r3
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f9c:	4313      	orrs	r3, r2
         );
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	3724      	adds	r7, #36	@ 0x24
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr
	...

08000fac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	3b01      	subs	r3, #1
 8000fb8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000fbc:	d301      	bcc.n	8000fc2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	e00f      	b.n	8000fe2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fc2:	4a0a      	ldr	r2, [pc, #40]	@ (8000fec <SysTick_Config+0x40>)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	3b01      	subs	r3, #1
 8000fc8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fca:	210f      	movs	r1, #15
 8000fcc:	f04f 30ff 	mov.w	r0, #4294967295
 8000fd0:	f7ff ff8e 	bl	8000ef0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fd4:	4b05      	ldr	r3, [pc, #20]	@ (8000fec <SysTick_Config+0x40>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fda:	4b04      	ldr	r3, [pc, #16]	@ (8000fec <SysTick_Config+0x40>)
 8000fdc:	2207      	movs	r2, #7
 8000fde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fe0:	2300      	movs	r3, #0
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	3708      	adds	r7, #8
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	e000e010 	.word	0xe000e010

08000ff0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ff8:	6878      	ldr	r0, [r7, #4]
 8000ffa:	f7ff ff29 	bl	8000e50 <__NVIC_SetPriorityGrouping>
}
 8000ffe:	bf00      	nop
 8001000:	3708      	adds	r7, #8
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}

08001006 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001006:	b580      	push	{r7, lr}
 8001008:	b086      	sub	sp, #24
 800100a:	af00      	add	r7, sp, #0
 800100c:	4603      	mov	r3, r0
 800100e:	60b9      	str	r1, [r7, #8]
 8001010:	607a      	str	r2, [r7, #4]
 8001012:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001014:	2300      	movs	r3, #0
 8001016:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001018:	f7ff ff3e 	bl	8000e98 <__NVIC_GetPriorityGrouping>
 800101c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800101e:	687a      	ldr	r2, [r7, #4]
 8001020:	68b9      	ldr	r1, [r7, #8]
 8001022:	6978      	ldr	r0, [r7, #20]
 8001024:	f7ff ff8e 	bl	8000f44 <NVIC_EncodePriority>
 8001028:	4602      	mov	r2, r0
 800102a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800102e:	4611      	mov	r1, r2
 8001030:	4618      	mov	r0, r3
 8001032:	f7ff ff5d 	bl	8000ef0 <__NVIC_SetPriority>
}
 8001036:	bf00      	nop
 8001038:	3718      	adds	r7, #24
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}

0800103e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800103e:	b580      	push	{r7, lr}
 8001040:	b082      	sub	sp, #8
 8001042:	af00      	add	r7, sp, #0
 8001044:	4603      	mov	r3, r0
 8001046:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001048:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800104c:	4618      	mov	r0, r3
 800104e:	f7ff ff31 	bl	8000eb4 <__NVIC_EnableIRQ>
}
 8001052:	bf00      	nop
 8001054:	3708      	adds	r7, #8
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}

0800105a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800105a:	b580      	push	{r7, lr}
 800105c:	b082      	sub	sp, #8
 800105e:	af00      	add	r7, sp, #0
 8001060:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001062:	6878      	ldr	r0, [r7, #4]
 8001064:	f7ff ffa2 	bl	8000fac <SysTick_Config>
 8001068:	4603      	mov	r3, r0
}
 800106a:	4618      	mov	r0, r3
 800106c:	3708      	adds	r7, #8
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
	...

08001074 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001074:	b480      	push	{r7}
 8001076:	b083      	sub	sp, #12
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2b04      	cmp	r3, #4
 8001080:	d106      	bne.n	8001090 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001082:	4b09      	ldr	r3, [pc, #36]	@ (80010a8 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4a08      	ldr	r2, [pc, #32]	@ (80010a8 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001088:	f043 0304 	orr.w	r3, r3, #4
 800108c:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 800108e:	e005      	b.n	800109c <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8001090:	4b05      	ldr	r3, [pc, #20]	@ (80010a8 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a04      	ldr	r2, [pc, #16]	@ (80010a8 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001096:	f023 0304 	bic.w	r3, r3, #4
 800109a:	6013      	str	r3, [r2, #0]
}
 800109c:	bf00      	nop
 800109e:	370c      	adds	r7, #12
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr
 80010a8:	e000e010 	.word	0xe000e010

080010ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b087      	sub	sp, #28
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
 80010b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80010b6:	2300      	movs	r3, #0
 80010b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010ba:	e17f      	b.n	80013bc <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	681a      	ldr	r2, [r3, #0]
 80010c0:	2101      	movs	r1, #1
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	fa01 f303 	lsl.w	r3, r1, r3
 80010c8:	4013      	ands	r3, r2
 80010ca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	f000 8171 	beq.w	80013b6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	f003 0303 	and.w	r3, r3, #3
 80010dc:	2b01      	cmp	r3, #1
 80010de:	d005      	beq.n	80010ec <HAL_GPIO_Init+0x40>
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	f003 0303 	and.w	r3, r3, #3
 80010e8:	2b02      	cmp	r3, #2
 80010ea:	d130      	bne.n	800114e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	689b      	ldr	r3, [r3, #8]
 80010f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80010f2:	697b      	ldr	r3, [r7, #20]
 80010f4:	005b      	lsls	r3, r3, #1
 80010f6:	2203      	movs	r2, #3
 80010f8:	fa02 f303 	lsl.w	r3, r2, r3
 80010fc:	43db      	mvns	r3, r3
 80010fe:	693a      	ldr	r2, [r7, #16]
 8001100:	4013      	ands	r3, r2
 8001102:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	68da      	ldr	r2, [r3, #12]
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	005b      	lsls	r3, r3, #1
 800110c:	fa02 f303 	lsl.w	r3, r2, r3
 8001110:	693a      	ldr	r2, [r7, #16]
 8001112:	4313      	orrs	r3, r2
 8001114:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	693a      	ldr	r2, [r7, #16]
 800111a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001122:	2201      	movs	r2, #1
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	fa02 f303 	lsl.w	r3, r2, r3
 800112a:	43db      	mvns	r3, r3
 800112c:	693a      	ldr	r2, [r7, #16]
 800112e:	4013      	ands	r3, r2
 8001130:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	091b      	lsrs	r3, r3, #4
 8001138:	f003 0201 	and.w	r2, r3, #1
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	fa02 f303 	lsl.w	r3, r2, r3
 8001142:	693a      	ldr	r2, [r7, #16]
 8001144:	4313      	orrs	r3, r2
 8001146:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	693a      	ldr	r2, [r7, #16]
 800114c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	f003 0303 	and.w	r3, r3, #3
 8001156:	2b03      	cmp	r3, #3
 8001158:	d118      	bne.n	800118c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800115e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001160:	2201      	movs	r2, #1
 8001162:	697b      	ldr	r3, [r7, #20]
 8001164:	fa02 f303 	lsl.w	r3, r2, r3
 8001168:	43db      	mvns	r3, r3
 800116a:	693a      	ldr	r2, [r7, #16]
 800116c:	4013      	ands	r3, r2
 800116e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	08db      	lsrs	r3, r3, #3
 8001176:	f003 0201 	and.w	r2, r3, #1
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	fa02 f303 	lsl.w	r3, r2, r3
 8001180:	693a      	ldr	r2, [r7, #16]
 8001182:	4313      	orrs	r3, r2
 8001184:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	693a      	ldr	r2, [r7, #16]
 800118a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	f003 0303 	and.w	r3, r3, #3
 8001194:	2b03      	cmp	r3, #3
 8001196:	d017      	beq.n	80011c8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	68db      	ldr	r3, [r3, #12]
 800119c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800119e:	697b      	ldr	r3, [r7, #20]
 80011a0:	005b      	lsls	r3, r3, #1
 80011a2:	2203      	movs	r2, #3
 80011a4:	fa02 f303 	lsl.w	r3, r2, r3
 80011a8:	43db      	mvns	r3, r3
 80011aa:	693a      	ldr	r2, [r7, #16]
 80011ac:	4013      	ands	r3, r2
 80011ae:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	689a      	ldr	r2, [r3, #8]
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	005b      	lsls	r3, r3, #1
 80011b8:	fa02 f303 	lsl.w	r3, r2, r3
 80011bc:	693a      	ldr	r2, [r7, #16]
 80011be:	4313      	orrs	r3, r2
 80011c0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	693a      	ldr	r2, [r7, #16]
 80011c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	f003 0303 	and.w	r3, r3, #3
 80011d0:	2b02      	cmp	r3, #2
 80011d2:	d123      	bne.n	800121c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	08da      	lsrs	r2, r3, #3
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	3208      	adds	r2, #8
 80011dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011e0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	f003 0307 	and.w	r3, r3, #7
 80011e8:	009b      	lsls	r3, r3, #2
 80011ea:	220f      	movs	r2, #15
 80011ec:	fa02 f303 	lsl.w	r3, r2, r3
 80011f0:	43db      	mvns	r3, r3
 80011f2:	693a      	ldr	r2, [r7, #16]
 80011f4:	4013      	ands	r3, r2
 80011f6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	691a      	ldr	r2, [r3, #16]
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	f003 0307 	and.w	r3, r3, #7
 8001202:	009b      	lsls	r3, r3, #2
 8001204:	fa02 f303 	lsl.w	r3, r2, r3
 8001208:	693a      	ldr	r2, [r7, #16]
 800120a:	4313      	orrs	r3, r2
 800120c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800120e:	697b      	ldr	r3, [r7, #20]
 8001210:	08da      	lsrs	r2, r3, #3
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	3208      	adds	r2, #8
 8001216:	6939      	ldr	r1, [r7, #16]
 8001218:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	005b      	lsls	r3, r3, #1
 8001226:	2203      	movs	r2, #3
 8001228:	fa02 f303 	lsl.w	r3, r2, r3
 800122c:	43db      	mvns	r3, r3
 800122e:	693a      	ldr	r2, [r7, #16]
 8001230:	4013      	ands	r3, r2
 8001232:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	f003 0203 	and.w	r2, r3, #3
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	005b      	lsls	r3, r3, #1
 8001240:	fa02 f303 	lsl.w	r3, r2, r3
 8001244:	693a      	ldr	r2, [r7, #16]
 8001246:	4313      	orrs	r3, r2
 8001248:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	693a      	ldr	r2, [r7, #16]
 800124e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001258:	2b00      	cmp	r3, #0
 800125a:	f000 80ac 	beq.w	80013b6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800125e:	4b5f      	ldr	r3, [pc, #380]	@ (80013dc <HAL_GPIO_Init+0x330>)
 8001260:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001262:	4a5e      	ldr	r2, [pc, #376]	@ (80013dc <HAL_GPIO_Init+0x330>)
 8001264:	f043 0301 	orr.w	r3, r3, #1
 8001268:	6613      	str	r3, [r2, #96]	@ 0x60
 800126a:	4b5c      	ldr	r3, [pc, #368]	@ (80013dc <HAL_GPIO_Init+0x330>)
 800126c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800126e:	f003 0301 	and.w	r3, r3, #1
 8001272:	60bb      	str	r3, [r7, #8]
 8001274:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001276:	4a5a      	ldr	r2, [pc, #360]	@ (80013e0 <HAL_GPIO_Init+0x334>)
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	089b      	lsrs	r3, r3, #2
 800127c:	3302      	adds	r3, #2
 800127e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001282:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	f003 0303 	and.w	r3, r3, #3
 800128a:	009b      	lsls	r3, r3, #2
 800128c:	220f      	movs	r2, #15
 800128e:	fa02 f303 	lsl.w	r3, r2, r3
 8001292:	43db      	mvns	r3, r3
 8001294:	693a      	ldr	r2, [r7, #16]
 8001296:	4013      	ands	r3, r2
 8001298:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80012a0:	d025      	beq.n	80012ee <HAL_GPIO_Init+0x242>
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	4a4f      	ldr	r2, [pc, #316]	@ (80013e4 <HAL_GPIO_Init+0x338>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d01f      	beq.n	80012ea <HAL_GPIO_Init+0x23e>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	4a4e      	ldr	r2, [pc, #312]	@ (80013e8 <HAL_GPIO_Init+0x33c>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d019      	beq.n	80012e6 <HAL_GPIO_Init+0x23a>
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	4a4d      	ldr	r2, [pc, #308]	@ (80013ec <HAL_GPIO_Init+0x340>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d013      	beq.n	80012e2 <HAL_GPIO_Init+0x236>
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	4a4c      	ldr	r2, [pc, #304]	@ (80013f0 <HAL_GPIO_Init+0x344>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d00d      	beq.n	80012de <HAL_GPIO_Init+0x232>
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	4a4b      	ldr	r2, [pc, #300]	@ (80013f4 <HAL_GPIO_Init+0x348>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d007      	beq.n	80012da <HAL_GPIO_Init+0x22e>
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	4a4a      	ldr	r2, [pc, #296]	@ (80013f8 <HAL_GPIO_Init+0x34c>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d101      	bne.n	80012d6 <HAL_GPIO_Init+0x22a>
 80012d2:	2306      	movs	r3, #6
 80012d4:	e00c      	b.n	80012f0 <HAL_GPIO_Init+0x244>
 80012d6:	2307      	movs	r3, #7
 80012d8:	e00a      	b.n	80012f0 <HAL_GPIO_Init+0x244>
 80012da:	2305      	movs	r3, #5
 80012dc:	e008      	b.n	80012f0 <HAL_GPIO_Init+0x244>
 80012de:	2304      	movs	r3, #4
 80012e0:	e006      	b.n	80012f0 <HAL_GPIO_Init+0x244>
 80012e2:	2303      	movs	r3, #3
 80012e4:	e004      	b.n	80012f0 <HAL_GPIO_Init+0x244>
 80012e6:	2302      	movs	r3, #2
 80012e8:	e002      	b.n	80012f0 <HAL_GPIO_Init+0x244>
 80012ea:	2301      	movs	r3, #1
 80012ec:	e000      	b.n	80012f0 <HAL_GPIO_Init+0x244>
 80012ee:	2300      	movs	r3, #0
 80012f0:	697a      	ldr	r2, [r7, #20]
 80012f2:	f002 0203 	and.w	r2, r2, #3
 80012f6:	0092      	lsls	r2, r2, #2
 80012f8:	4093      	lsls	r3, r2
 80012fa:	693a      	ldr	r2, [r7, #16]
 80012fc:	4313      	orrs	r3, r2
 80012fe:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001300:	4937      	ldr	r1, [pc, #220]	@ (80013e0 <HAL_GPIO_Init+0x334>)
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	089b      	lsrs	r3, r3, #2
 8001306:	3302      	adds	r3, #2
 8001308:	693a      	ldr	r2, [r7, #16]
 800130a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800130e:	4b3b      	ldr	r3, [pc, #236]	@ (80013fc <HAL_GPIO_Init+0x350>)
 8001310:	689b      	ldr	r3, [r3, #8]
 8001312:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	43db      	mvns	r3, r3
 8001318:	693a      	ldr	r2, [r7, #16]
 800131a:	4013      	ands	r3, r2
 800131c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001326:	2b00      	cmp	r3, #0
 8001328:	d003      	beq.n	8001332 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800132a:	693a      	ldr	r2, [r7, #16]
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	4313      	orrs	r3, r2
 8001330:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001332:	4a32      	ldr	r2, [pc, #200]	@ (80013fc <HAL_GPIO_Init+0x350>)
 8001334:	693b      	ldr	r3, [r7, #16]
 8001336:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001338:	4b30      	ldr	r3, [pc, #192]	@ (80013fc <HAL_GPIO_Init+0x350>)
 800133a:	68db      	ldr	r3, [r3, #12]
 800133c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	43db      	mvns	r3, r3
 8001342:	693a      	ldr	r2, [r7, #16]
 8001344:	4013      	ands	r3, r2
 8001346:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001350:	2b00      	cmp	r3, #0
 8001352:	d003      	beq.n	800135c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001354:	693a      	ldr	r2, [r7, #16]
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	4313      	orrs	r3, r2
 800135a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800135c:	4a27      	ldr	r2, [pc, #156]	@ (80013fc <HAL_GPIO_Init+0x350>)
 800135e:	693b      	ldr	r3, [r7, #16]
 8001360:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001362:	4b26      	ldr	r3, [pc, #152]	@ (80013fc <HAL_GPIO_Init+0x350>)
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	43db      	mvns	r3, r3
 800136c:	693a      	ldr	r2, [r7, #16]
 800136e:	4013      	ands	r3, r2
 8001370:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800137a:	2b00      	cmp	r3, #0
 800137c:	d003      	beq.n	8001386 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800137e:	693a      	ldr	r2, [r7, #16]
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	4313      	orrs	r3, r2
 8001384:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001386:	4a1d      	ldr	r2, [pc, #116]	@ (80013fc <HAL_GPIO_Init+0x350>)
 8001388:	693b      	ldr	r3, [r7, #16]
 800138a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800138c:	4b1b      	ldr	r3, [pc, #108]	@ (80013fc <HAL_GPIO_Init+0x350>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	43db      	mvns	r3, r3
 8001396:	693a      	ldr	r2, [r7, #16]
 8001398:	4013      	ands	r3, r2
 800139a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d003      	beq.n	80013b0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80013a8:	693a      	ldr	r2, [r7, #16]
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	4313      	orrs	r3, r2
 80013ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80013b0:	4a12      	ldr	r2, [pc, #72]	@ (80013fc <HAL_GPIO_Init+0x350>)
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	3301      	adds	r3, #1
 80013ba:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	681a      	ldr	r2, [r3, #0]
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	fa22 f303 	lsr.w	r3, r2, r3
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	f47f ae78 	bne.w	80010bc <HAL_GPIO_Init+0x10>
  }
}
 80013cc:	bf00      	nop
 80013ce:	bf00      	nop
 80013d0:	371c      	adds	r7, #28
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr
 80013da:	bf00      	nop
 80013dc:	40021000 	.word	0x40021000
 80013e0:	40010000 	.word	0x40010000
 80013e4:	48000400 	.word	0x48000400
 80013e8:	48000800 	.word	0x48000800
 80013ec:	48000c00 	.word	0x48000c00
 80013f0:	48001000 	.word	0x48001000
 80013f4:	48001400 	.word	0x48001400
 80013f8:	48001800 	.word	0x48001800
 80013fc:	40010400 	.word	0x40010400

08001400 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001400:	b480      	push	{r7}
 8001402:	b085      	sub	sp, #20
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
 8001408:	460b      	mov	r3, r1
 800140a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	691a      	ldr	r2, [r3, #16]
 8001410:	887b      	ldrh	r3, [r7, #2]
 8001412:	4013      	ands	r3, r2
 8001414:	2b00      	cmp	r3, #0
 8001416:	d002      	beq.n	800141e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001418:	2301      	movs	r3, #1
 800141a:	73fb      	strb	r3, [r7, #15]
 800141c:	e001      	b.n	8001422 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800141e:	2300      	movs	r3, #0
 8001420:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001422:	7bfb      	ldrb	r3, [r7, #15]
}
 8001424:	4618      	mov	r0, r3
 8001426:	3714      	adds	r7, #20
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr

08001430 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001434:	4b04      	ldr	r3, [pc, #16]	@ (8001448 <HAL_PWREx_GetVoltageRange+0x18>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800143c:	4618      	mov	r0, r3
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr
 8001446:	bf00      	nop
 8001448:	40007000 	.word	0x40007000

0800144c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800144c:	b480      	push	{r7}
 800144e:	b085      	sub	sp, #20
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800145a:	d130      	bne.n	80014be <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800145c:	4b23      	ldr	r3, [pc, #140]	@ (80014ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001464:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001468:	d038      	beq.n	80014dc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800146a:	4b20      	ldr	r3, [pc, #128]	@ (80014ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001472:	4a1e      	ldr	r2, [pc, #120]	@ (80014ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001474:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001478:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800147a:	4b1d      	ldr	r3, [pc, #116]	@ (80014f0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	2232      	movs	r2, #50	@ 0x32
 8001480:	fb02 f303 	mul.w	r3, r2, r3
 8001484:	4a1b      	ldr	r2, [pc, #108]	@ (80014f4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001486:	fba2 2303 	umull	r2, r3, r2, r3
 800148a:	0c9b      	lsrs	r3, r3, #18
 800148c:	3301      	adds	r3, #1
 800148e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001490:	e002      	b.n	8001498 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	3b01      	subs	r3, #1
 8001496:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001498:	4b14      	ldr	r3, [pc, #80]	@ (80014ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800149a:	695b      	ldr	r3, [r3, #20]
 800149c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80014a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80014a4:	d102      	bne.n	80014ac <HAL_PWREx_ControlVoltageScaling+0x60>
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d1f2      	bne.n	8001492 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80014ac:	4b0f      	ldr	r3, [pc, #60]	@ (80014ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014ae:	695b      	ldr	r3, [r3, #20]
 80014b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80014b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80014b8:	d110      	bne.n	80014dc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80014ba:	2303      	movs	r3, #3
 80014bc:	e00f      	b.n	80014de <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80014be:	4b0b      	ldr	r3, [pc, #44]	@ (80014ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80014c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80014ca:	d007      	beq.n	80014dc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80014cc:	4b07      	ldr	r3, [pc, #28]	@ (80014ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80014d4:	4a05      	ldr	r2, [pc, #20]	@ (80014ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014d6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80014da:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80014dc:	2300      	movs	r3, #0
}
 80014de:	4618      	mov	r0, r3
 80014e0:	3714      	adds	r7, #20
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr
 80014ea:	bf00      	nop
 80014ec:	40007000 	.word	0x40007000
 80014f0:	20000000 	.word	0x20000000
 80014f4:	431bde83 	.word	0x431bde83

080014f8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b088      	sub	sp, #32
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d101      	bne.n	800150a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001506:	2301      	movs	r3, #1
 8001508:	e3ca      	b.n	8001ca0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800150a:	4b97      	ldr	r3, [pc, #604]	@ (8001768 <HAL_RCC_OscConfig+0x270>)
 800150c:	689b      	ldr	r3, [r3, #8]
 800150e:	f003 030c 	and.w	r3, r3, #12
 8001512:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001514:	4b94      	ldr	r3, [pc, #592]	@ (8001768 <HAL_RCC_OscConfig+0x270>)
 8001516:	68db      	ldr	r3, [r3, #12]
 8001518:	f003 0303 	and.w	r3, r3, #3
 800151c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f003 0310 	and.w	r3, r3, #16
 8001526:	2b00      	cmp	r3, #0
 8001528:	f000 80e4 	beq.w	80016f4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800152c:	69bb      	ldr	r3, [r7, #24]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d007      	beq.n	8001542 <HAL_RCC_OscConfig+0x4a>
 8001532:	69bb      	ldr	r3, [r7, #24]
 8001534:	2b0c      	cmp	r3, #12
 8001536:	f040 808b 	bne.w	8001650 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800153a:	697b      	ldr	r3, [r7, #20]
 800153c:	2b01      	cmp	r3, #1
 800153e:	f040 8087 	bne.w	8001650 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001542:	4b89      	ldr	r3, [pc, #548]	@ (8001768 <HAL_RCC_OscConfig+0x270>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f003 0302 	and.w	r3, r3, #2
 800154a:	2b00      	cmp	r3, #0
 800154c:	d005      	beq.n	800155a <HAL_RCC_OscConfig+0x62>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	699b      	ldr	r3, [r3, #24]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d101      	bne.n	800155a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001556:	2301      	movs	r3, #1
 8001558:	e3a2      	b.n	8001ca0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6a1a      	ldr	r2, [r3, #32]
 800155e:	4b82      	ldr	r3, [pc, #520]	@ (8001768 <HAL_RCC_OscConfig+0x270>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f003 0308 	and.w	r3, r3, #8
 8001566:	2b00      	cmp	r3, #0
 8001568:	d004      	beq.n	8001574 <HAL_RCC_OscConfig+0x7c>
 800156a:	4b7f      	ldr	r3, [pc, #508]	@ (8001768 <HAL_RCC_OscConfig+0x270>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001572:	e005      	b.n	8001580 <HAL_RCC_OscConfig+0x88>
 8001574:	4b7c      	ldr	r3, [pc, #496]	@ (8001768 <HAL_RCC_OscConfig+0x270>)
 8001576:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800157a:	091b      	lsrs	r3, r3, #4
 800157c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001580:	4293      	cmp	r3, r2
 8001582:	d223      	bcs.n	80015cc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6a1b      	ldr	r3, [r3, #32]
 8001588:	4618      	mov	r0, r3
 800158a:	f000 fd89 	bl	80020a0 <RCC_SetFlashLatencyFromMSIRange>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d001      	beq.n	8001598 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001594:	2301      	movs	r3, #1
 8001596:	e383      	b.n	8001ca0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001598:	4b73      	ldr	r3, [pc, #460]	@ (8001768 <HAL_RCC_OscConfig+0x270>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a72      	ldr	r2, [pc, #456]	@ (8001768 <HAL_RCC_OscConfig+0x270>)
 800159e:	f043 0308 	orr.w	r3, r3, #8
 80015a2:	6013      	str	r3, [r2, #0]
 80015a4:	4b70      	ldr	r3, [pc, #448]	@ (8001768 <HAL_RCC_OscConfig+0x270>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6a1b      	ldr	r3, [r3, #32]
 80015b0:	496d      	ldr	r1, [pc, #436]	@ (8001768 <HAL_RCC_OscConfig+0x270>)
 80015b2:	4313      	orrs	r3, r2
 80015b4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015b6:	4b6c      	ldr	r3, [pc, #432]	@ (8001768 <HAL_RCC_OscConfig+0x270>)
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	69db      	ldr	r3, [r3, #28]
 80015c2:	021b      	lsls	r3, r3, #8
 80015c4:	4968      	ldr	r1, [pc, #416]	@ (8001768 <HAL_RCC_OscConfig+0x270>)
 80015c6:	4313      	orrs	r3, r2
 80015c8:	604b      	str	r3, [r1, #4]
 80015ca:	e025      	b.n	8001618 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015cc:	4b66      	ldr	r3, [pc, #408]	@ (8001768 <HAL_RCC_OscConfig+0x270>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a65      	ldr	r2, [pc, #404]	@ (8001768 <HAL_RCC_OscConfig+0x270>)
 80015d2:	f043 0308 	orr.w	r3, r3, #8
 80015d6:	6013      	str	r3, [r2, #0]
 80015d8:	4b63      	ldr	r3, [pc, #396]	@ (8001768 <HAL_RCC_OscConfig+0x270>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6a1b      	ldr	r3, [r3, #32]
 80015e4:	4960      	ldr	r1, [pc, #384]	@ (8001768 <HAL_RCC_OscConfig+0x270>)
 80015e6:	4313      	orrs	r3, r2
 80015e8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015ea:	4b5f      	ldr	r3, [pc, #380]	@ (8001768 <HAL_RCC_OscConfig+0x270>)
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	69db      	ldr	r3, [r3, #28]
 80015f6:	021b      	lsls	r3, r3, #8
 80015f8:	495b      	ldr	r1, [pc, #364]	@ (8001768 <HAL_RCC_OscConfig+0x270>)
 80015fa:	4313      	orrs	r3, r2
 80015fc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80015fe:	69bb      	ldr	r3, [r7, #24]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d109      	bne.n	8001618 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6a1b      	ldr	r3, [r3, #32]
 8001608:	4618      	mov	r0, r3
 800160a:	f000 fd49 	bl	80020a0 <RCC_SetFlashLatencyFromMSIRange>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d001      	beq.n	8001618 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001614:	2301      	movs	r3, #1
 8001616:	e343      	b.n	8001ca0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001618:	f000 fc7e 	bl	8001f18 <HAL_RCC_GetSysClockFreq>
 800161c:	4602      	mov	r2, r0
 800161e:	4b52      	ldr	r3, [pc, #328]	@ (8001768 <HAL_RCC_OscConfig+0x270>)
 8001620:	689b      	ldr	r3, [r3, #8]
 8001622:	091b      	lsrs	r3, r3, #4
 8001624:	f003 030f 	and.w	r3, r3, #15
 8001628:	4950      	ldr	r1, [pc, #320]	@ (800176c <HAL_RCC_OscConfig+0x274>)
 800162a:	5ccb      	ldrb	r3, [r1, r3]
 800162c:	f003 031f 	and.w	r3, r3, #31
 8001630:	fa22 f303 	lsr.w	r3, r2, r3
 8001634:	4a4e      	ldr	r2, [pc, #312]	@ (8001770 <HAL_RCC_OscConfig+0x278>)
 8001636:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001638:	4b4e      	ldr	r3, [pc, #312]	@ (8001774 <HAL_RCC_OscConfig+0x27c>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4618      	mov	r0, r3
 800163e:	f7ff fbab 	bl	8000d98 <HAL_InitTick>
 8001642:	4603      	mov	r3, r0
 8001644:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001646:	7bfb      	ldrb	r3, [r7, #15]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d052      	beq.n	80016f2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800164c:	7bfb      	ldrb	r3, [r7, #15]
 800164e:	e327      	b.n	8001ca0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	699b      	ldr	r3, [r3, #24]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d032      	beq.n	80016be <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001658:	4b43      	ldr	r3, [pc, #268]	@ (8001768 <HAL_RCC_OscConfig+0x270>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a42      	ldr	r2, [pc, #264]	@ (8001768 <HAL_RCC_OscConfig+0x270>)
 800165e:	f043 0301 	orr.w	r3, r3, #1
 8001662:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001664:	f7ff fbe8 	bl	8000e38 <HAL_GetTick>
 8001668:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800166a:	e008      	b.n	800167e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800166c:	f7ff fbe4 	bl	8000e38 <HAL_GetTick>
 8001670:	4602      	mov	r2, r0
 8001672:	693b      	ldr	r3, [r7, #16]
 8001674:	1ad3      	subs	r3, r2, r3
 8001676:	2b02      	cmp	r3, #2
 8001678:	d901      	bls.n	800167e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800167a:	2303      	movs	r3, #3
 800167c:	e310      	b.n	8001ca0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800167e:	4b3a      	ldr	r3, [pc, #232]	@ (8001768 <HAL_RCC_OscConfig+0x270>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f003 0302 	and.w	r3, r3, #2
 8001686:	2b00      	cmp	r3, #0
 8001688:	d0f0      	beq.n	800166c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800168a:	4b37      	ldr	r3, [pc, #220]	@ (8001768 <HAL_RCC_OscConfig+0x270>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a36      	ldr	r2, [pc, #216]	@ (8001768 <HAL_RCC_OscConfig+0x270>)
 8001690:	f043 0308 	orr.w	r3, r3, #8
 8001694:	6013      	str	r3, [r2, #0]
 8001696:	4b34      	ldr	r3, [pc, #208]	@ (8001768 <HAL_RCC_OscConfig+0x270>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6a1b      	ldr	r3, [r3, #32]
 80016a2:	4931      	ldr	r1, [pc, #196]	@ (8001768 <HAL_RCC_OscConfig+0x270>)
 80016a4:	4313      	orrs	r3, r2
 80016a6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80016a8:	4b2f      	ldr	r3, [pc, #188]	@ (8001768 <HAL_RCC_OscConfig+0x270>)
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	69db      	ldr	r3, [r3, #28]
 80016b4:	021b      	lsls	r3, r3, #8
 80016b6:	492c      	ldr	r1, [pc, #176]	@ (8001768 <HAL_RCC_OscConfig+0x270>)
 80016b8:	4313      	orrs	r3, r2
 80016ba:	604b      	str	r3, [r1, #4]
 80016bc:	e01a      	b.n	80016f4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80016be:	4b2a      	ldr	r3, [pc, #168]	@ (8001768 <HAL_RCC_OscConfig+0x270>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4a29      	ldr	r2, [pc, #164]	@ (8001768 <HAL_RCC_OscConfig+0x270>)
 80016c4:	f023 0301 	bic.w	r3, r3, #1
 80016c8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80016ca:	f7ff fbb5 	bl	8000e38 <HAL_GetTick>
 80016ce:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80016d0:	e008      	b.n	80016e4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80016d2:	f7ff fbb1 	bl	8000e38 <HAL_GetTick>
 80016d6:	4602      	mov	r2, r0
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	1ad3      	subs	r3, r2, r3
 80016dc:	2b02      	cmp	r3, #2
 80016de:	d901      	bls.n	80016e4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80016e0:	2303      	movs	r3, #3
 80016e2:	e2dd      	b.n	8001ca0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80016e4:	4b20      	ldr	r3, [pc, #128]	@ (8001768 <HAL_RCC_OscConfig+0x270>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f003 0302 	and.w	r3, r3, #2
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d1f0      	bne.n	80016d2 <HAL_RCC_OscConfig+0x1da>
 80016f0:	e000      	b.n	80016f4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80016f2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f003 0301 	and.w	r3, r3, #1
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d074      	beq.n	80017ea <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001700:	69bb      	ldr	r3, [r7, #24]
 8001702:	2b08      	cmp	r3, #8
 8001704:	d005      	beq.n	8001712 <HAL_RCC_OscConfig+0x21a>
 8001706:	69bb      	ldr	r3, [r7, #24]
 8001708:	2b0c      	cmp	r3, #12
 800170a:	d10e      	bne.n	800172a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	2b03      	cmp	r3, #3
 8001710:	d10b      	bne.n	800172a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001712:	4b15      	ldr	r3, [pc, #84]	@ (8001768 <HAL_RCC_OscConfig+0x270>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800171a:	2b00      	cmp	r3, #0
 800171c:	d064      	beq.n	80017e8 <HAL_RCC_OscConfig+0x2f0>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d160      	bne.n	80017e8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001726:	2301      	movs	r3, #1
 8001728:	e2ba      	b.n	8001ca0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001732:	d106      	bne.n	8001742 <HAL_RCC_OscConfig+0x24a>
 8001734:	4b0c      	ldr	r3, [pc, #48]	@ (8001768 <HAL_RCC_OscConfig+0x270>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a0b      	ldr	r2, [pc, #44]	@ (8001768 <HAL_RCC_OscConfig+0x270>)
 800173a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800173e:	6013      	str	r3, [r2, #0]
 8001740:	e026      	b.n	8001790 <HAL_RCC_OscConfig+0x298>
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800174a:	d115      	bne.n	8001778 <HAL_RCC_OscConfig+0x280>
 800174c:	4b06      	ldr	r3, [pc, #24]	@ (8001768 <HAL_RCC_OscConfig+0x270>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a05      	ldr	r2, [pc, #20]	@ (8001768 <HAL_RCC_OscConfig+0x270>)
 8001752:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001756:	6013      	str	r3, [r2, #0]
 8001758:	4b03      	ldr	r3, [pc, #12]	@ (8001768 <HAL_RCC_OscConfig+0x270>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a02      	ldr	r2, [pc, #8]	@ (8001768 <HAL_RCC_OscConfig+0x270>)
 800175e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001762:	6013      	str	r3, [r2, #0]
 8001764:	e014      	b.n	8001790 <HAL_RCC_OscConfig+0x298>
 8001766:	bf00      	nop
 8001768:	40021000 	.word	0x40021000
 800176c:	08004d14 	.word	0x08004d14
 8001770:	20000000 	.word	0x20000000
 8001774:	20000004 	.word	0x20000004
 8001778:	4ba0      	ldr	r3, [pc, #640]	@ (80019fc <HAL_RCC_OscConfig+0x504>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a9f      	ldr	r2, [pc, #636]	@ (80019fc <HAL_RCC_OscConfig+0x504>)
 800177e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001782:	6013      	str	r3, [r2, #0]
 8001784:	4b9d      	ldr	r3, [pc, #628]	@ (80019fc <HAL_RCC_OscConfig+0x504>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a9c      	ldr	r2, [pc, #624]	@ (80019fc <HAL_RCC_OscConfig+0x504>)
 800178a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800178e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d013      	beq.n	80017c0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001798:	f7ff fb4e 	bl	8000e38 <HAL_GetTick>
 800179c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800179e:	e008      	b.n	80017b2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017a0:	f7ff fb4a 	bl	8000e38 <HAL_GetTick>
 80017a4:	4602      	mov	r2, r0
 80017a6:	693b      	ldr	r3, [r7, #16]
 80017a8:	1ad3      	subs	r3, r2, r3
 80017aa:	2b64      	cmp	r3, #100	@ 0x64
 80017ac:	d901      	bls.n	80017b2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80017ae:	2303      	movs	r3, #3
 80017b0:	e276      	b.n	8001ca0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017b2:	4b92      	ldr	r3, [pc, #584]	@ (80019fc <HAL_RCC_OscConfig+0x504>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d0f0      	beq.n	80017a0 <HAL_RCC_OscConfig+0x2a8>
 80017be:	e014      	b.n	80017ea <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017c0:	f7ff fb3a 	bl	8000e38 <HAL_GetTick>
 80017c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80017c6:	e008      	b.n	80017da <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017c8:	f7ff fb36 	bl	8000e38 <HAL_GetTick>
 80017cc:	4602      	mov	r2, r0
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	1ad3      	subs	r3, r2, r3
 80017d2:	2b64      	cmp	r3, #100	@ 0x64
 80017d4:	d901      	bls.n	80017da <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80017d6:	2303      	movs	r3, #3
 80017d8:	e262      	b.n	8001ca0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80017da:	4b88      	ldr	r3, [pc, #544]	@ (80019fc <HAL_RCC_OscConfig+0x504>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d1f0      	bne.n	80017c8 <HAL_RCC_OscConfig+0x2d0>
 80017e6:	e000      	b.n	80017ea <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f003 0302 	and.w	r3, r3, #2
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d060      	beq.n	80018b8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80017f6:	69bb      	ldr	r3, [r7, #24]
 80017f8:	2b04      	cmp	r3, #4
 80017fa:	d005      	beq.n	8001808 <HAL_RCC_OscConfig+0x310>
 80017fc:	69bb      	ldr	r3, [r7, #24]
 80017fe:	2b0c      	cmp	r3, #12
 8001800:	d119      	bne.n	8001836 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	2b02      	cmp	r3, #2
 8001806:	d116      	bne.n	8001836 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001808:	4b7c      	ldr	r3, [pc, #496]	@ (80019fc <HAL_RCC_OscConfig+0x504>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001810:	2b00      	cmp	r3, #0
 8001812:	d005      	beq.n	8001820 <HAL_RCC_OscConfig+0x328>
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	68db      	ldr	r3, [r3, #12]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d101      	bne.n	8001820 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800181c:	2301      	movs	r3, #1
 800181e:	e23f      	b.n	8001ca0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001820:	4b76      	ldr	r3, [pc, #472]	@ (80019fc <HAL_RCC_OscConfig+0x504>)
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	691b      	ldr	r3, [r3, #16]
 800182c:	061b      	lsls	r3, r3, #24
 800182e:	4973      	ldr	r1, [pc, #460]	@ (80019fc <HAL_RCC_OscConfig+0x504>)
 8001830:	4313      	orrs	r3, r2
 8001832:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001834:	e040      	b.n	80018b8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	68db      	ldr	r3, [r3, #12]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d023      	beq.n	8001886 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800183e:	4b6f      	ldr	r3, [pc, #444]	@ (80019fc <HAL_RCC_OscConfig+0x504>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4a6e      	ldr	r2, [pc, #440]	@ (80019fc <HAL_RCC_OscConfig+0x504>)
 8001844:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001848:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800184a:	f7ff faf5 	bl	8000e38 <HAL_GetTick>
 800184e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001850:	e008      	b.n	8001864 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001852:	f7ff faf1 	bl	8000e38 <HAL_GetTick>
 8001856:	4602      	mov	r2, r0
 8001858:	693b      	ldr	r3, [r7, #16]
 800185a:	1ad3      	subs	r3, r2, r3
 800185c:	2b02      	cmp	r3, #2
 800185e:	d901      	bls.n	8001864 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001860:	2303      	movs	r3, #3
 8001862:	e21d      	b.n	8001ca0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001864:	4b65      	ldr	r3, [pc, #404]	@ (80019fc <HAL_RCC_OscConfig+0x504>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800186c:	2b00      	cmp	r3, #0
 800186e:	d0f0      	beq.n	8001852 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001870:	4b62      	ldr	r3, [pc, #392]	@ (80019fc <HAL_RCC_OscConfig+0x504>)
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	691b      	ldr	r3, [r3, #16]
 800187c:	061b      	lsls	r3, r3, #24
 800187e:	495f      	ldr	r1, [pc, #380]	@ (80019fc <HAL_RCC_OscConfig+0x504>)
 8001880:	4313      	orrs	r3, r2
 8001882:	604b      	str	r3, [r1, #4]
 8001884:	e018      	b.n	80018b8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001886:	4b5d      	ldr	r3, [pc, #372]	@ (80019fc <HAL_RCC_OscConfig+0x504>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4a5c      	ldr	r2, [pc, #368]	@ (80019fc <HAL_RCC_OscConfig+0x504>)
 800188c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001890:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001892:	f7ff fad1 	bl	8000e38 <HAL_GetTick>
 8001896:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001898:	e008      	b.n	80018ac <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800189a:	f7ff facd 	bl	8000e38 <HAL_GetTick>
 800189e:	4602      	mov	r2, r0
 80018a0:	693b      	ldr	r3, [r7, #16]
 80018a2:	1ad3      	subs	r3, r2, r3
 80018a4:	2b02      	cmp	r3, #2
 80018a6:	d901      	bls.n	80018ac <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80018a8:	2303      	movs	r3, #3
 80018aa:	e1f9      	b.n	8001ca0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80018ac:	4b53      	ldr	r3, [pc, #332]	@ (80019fc <HAL_RCC_OscConfig+0x504>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d1f0      	bne.n	800189a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f003 0308 	and.w	r3, r3, #8
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d03c      	beq.n	800193e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	695b      	ldr	r3, [r3, #20]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d01c      	beq.n	8001906 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018cc:	4b4b      	ldr	r3, [pc, #300]	@ (80019fc <HAL_RCC_OscConfig+0x504>)
 80018ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80018d2:	4a4a      	ldr	r2, [pc, #296]	@ (80019fc <HAL_RCC_OscConfig+0x504>)
 80018d4:	f043 0301 	orr.w	r3, r3, #1
 80018d8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018dc:	f7ff faac 	bl	8000e38 <HAL_GetTick>
 80018e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80018e2:	e008      	b.n	80018f6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018e4:	f7ff faa8 	bl	8000e38 <HAL_GetTick>
 80018e8:	4602      	mov	r2, r0
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	1ad3      	subs	r3, r2, r3
 80018ee:	2b02      	cmp	r3, #2
 80018f0:	d901      	bls.n	80018f6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80018f2:	2303      	movs	r3, #3
 80018f4:	e1d4      	b.n	8001ca0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80018f6:	4b41      	ldr	r3, [pc, #260]	@ (80019fc <HAL_RCC_OscConfig+0x504>)
 80018f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80018fc:	f003 0302 	and.w	r3, r3, #2
 8001900:	2b00      	cmp	r3, #0
 8001902:	d0ef      	beq.n	80018e4 <HAL_RCC_OscConfig+0x3ec>
 8001904:	e01b      	b.n	800193e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001906:	4b3d      	ldr	r3, [pc, #244]	@ (80019fc <HAL_RCC_OscConfig+0x504>)
 8001908:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800190c:	4a3b      	ldr	r2, [pc, #236]	@ (80019fc <HAL_RCC_OscConfig+0x504>)
 800190e:	f023 0301 	bic.w	r3, r3, #1
 8001912:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001916:	f7ff fa8f 	bl	8000e38 <HAL_GetTick>
 800191a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800191c:	e008      	b.n	8001930 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800191e:	f7ff fa8b 	bl	8000e38 <HAL_GetTick>
 8001922:	4602      	mov	r2, r0
 8001924:	693b      	ldr	r3, [r7, #16]
 8001926:	1ad3      	subs	r3, r2, r3
 8001928:	2b02      	cmp	r3, #2
 800192a:	d901      	bls.n	8001930 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800192c:	2303      	movs	r3, #3
 800192e:	e1b7      	b.n	8001ca0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001930:	4b32      	ldr	r3, [pc, #200]	@ (80019fc <HAL_RCC_OscConfig+0x504>)
 8001932:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001936:	f003 0302 	and.w	r3, r3, #2
 800193a:	2b00      	cmp	r3, #0
 800193c:	d1ef      	bne.n	800191e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f003 0304 	and.w	r3, r3, #4
 8001946:	2b00      	cmp	r3, #0
 8001948:	f000 80a6 	beq.w	8001a98 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800194c:	2300      	movs	r3, #0
 800194e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001950:	4b2a      	ldr	r3, [pc, #168]	@ (80019fc <HAL_RCC_OscConfig+0x504>)
 8001952:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001954:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001958:	2b00      	cmp	r3, #0
 800195a:	d10d      	bne.n	8001978 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800195c:	4b27      	ldr	r3, [pc, #156]	@ (80019fc <HAL_RCC_OscConfig+0x504>)
 800195e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001960:	4a26      	ldr	r2, [pc, #152]	@ (80019fc <HAL_RCC_OscConfig+0x504>)
 8001962:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001966:	6593      	str	r3, [r2, #88]	@ 0x58
 8001968:	4b24      	ldr	r3, [pc, #144]	@ (80019fc <HAL_RCC_OscConfig+0x504>)
 800196a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800196c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001970:	60bb      	str	r3, [r7, #8]
 8001972:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001974:	2301      	movs	r3, #1
 8001976:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001978:	4b21      	ldr	r3, [pc, #132]	@ (8001a00 <HAL_RCC_OscConfig+0x508>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001980:	2b00      	cmp	r3, #0
 8001982:	d118      	bne.n	80019b6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001984:	4b1e      	ldr	r3, [pc, #120]	@ (8001a00 <HAL_RCC_OscConfig+0x508>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a1d      	ldr	r2, [pc, #116]	@ (8001a00 <HAL_RCC_OscConfig+0x508>)
 800198a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800198e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001990:	f7ff fa52 	bl	8000e38 <HAL_GetTick>
 8001994:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001996:	e008      	b.n	80019aa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001998:	f7ff fa4e 	bl	8000e38 <HAL_GetTick>
 800199c:	4602      	mov	r2, r0
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	1ad3      	subs	r3, r2, r3
 80019a2:	2b02      	cmp	r3, #2
 80019a4:	d901      	bls.n	80019aa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80019a6:	2303      	movs	r3, #3
 80019a8:	e17a      	b.n	8001ca0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019aa:	4b15      	ldr	r3, [pc, #84]	@ (8001a00 <HAL_RCC_OscConfig+0x508>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d0f0      	beq.n	8001998 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	689b      	ldr	r3, [r3, #8]
 80019ba:	2b01      	cmp	r3, #1
 80019bc:	d108      	bne.n	80019d0 <HAL_RCC_OscConfig+0x4d8>
 80019be:	4b0f      	ldr	r3, [pc, #60]	@ (80019fc <HAL_RCC_OscConfig+0x504>)
 80019c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019c4:	4a0d      	ldr	r2, [pc, #52]	@ (80019fc <HAL_RCC_OscConfig+0x504>)
 80019c6:	f043 0301 	orr.w	r3, r3, #1
 80019ca:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80019ce:	e029      	b.n	8001a24 <HAL_RCC_OscConfig+0x52c>
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	689b      	ldr	r3, [r3, #8]
 80019d4:	2b05      	cmp	r3, #5
 80019d6:	d115      	bne.n	8001a04 <HAL_RCC_OscConfig+0x50c>
 80019d8:	4b08      	ldr	r3, [pc, #32]	@ (80019fc <HAL_RCC_OscConfig+0x504>)
 80019da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019de:	4a07      	ldr	r2, [pc, #28]	@ (80019fc <HAL_RCC_OscConfig+0x504>)
 80019e0:	f043 0304 	orr.w	r3, r3, #4
 80019e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80019e8:	4b04      	ldr	r3, [pc, #16]	@ (80019fc <HAL_RCC_OscConfig+0x504>)
 80019ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019ee:	4a03      	ldr	r2, [pc, #12]	@ (80019fc <HAL_RCC_OscConfig+0x504>)
 80019f0:	f043 0301 	orr.w	r3, r3, #1
 80019f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80019f8:	e014      	b.n	8001a24 <HAL_RCC_OscConfig+0x52c>
 80019fa:	bf00      	nop
 80019fc:	40021000 	.word	0x40021000
 8001a00:	40007000 	.word	0x40007000
 8001a04:	4b9c      	ldr	r3, [pc, #624]	@ (8001c78 <HAL_RCC_OscConfig+0x780>)
 8001a06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a0a:	4a9b      	ldr	r2, [pc, #620]	@ (8001c78 <HAL_RCC_OscConfig+0x780>)
 8001a0c:	f023 0301 	bic.w	r3, r3, #1
 8001a10:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001a14:	4b98      	ldr	r3, [pc, #608]	@ (8001c78 <HAL_RCC_OscConfig+0x780>)
 8001a16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a1a:	4a97      	ldr	r2, [pc, #604]	@ (8001c78 <HAL_RCC_OscConfig+0x780>)
 8001a1c:	f023 0304 	bic.w	r3, r3, #4
 8001a20:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d016      	beq.n	8001a5a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a2c:	f7ff fa04 	bl	8000e38 <HAL_GetTick>
 8001a30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a32:	e00a      	b.n	8001a4a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a34:	f7ff fa00 	bl	8000e38 <HAL_GetTick>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	1ad3      	subs	r3, r2, r3
 8001a3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d901      	bls.n	8001a4a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001a46:	2303      	movs	r3, #3
 8001a48:	e12a      	b.n	8001ca0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a4a:	4b8b      	ldr	r3, [pc, #556]	@ (8001c78 <HAL_RCC_OscConfig+0x780>)
 8001a4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a50:	f003 0302 	and.w	r3, r3, #2
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d0ed      	beq.n	8001a34 <HAL_RCC_OscConfig+0x53c>
 8001a58:	e015      	b.n	8001a86 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a5a:	f7ff f9ed 	bl	8000e38 <HAL_GetTick>
 8001a5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a60:	e00a      	b.n	8001a78 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a62:	f7ff f9e9 	bl	8000e38 <HAL_GetTick>
 8001a66:	4602      	mov	r2, r0
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	1ad3      	subs	r3, r2, r3
 8001a6c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d901      	bls.n	8001a78 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001a74:	2303      	movs	r3, #3
 8001a76:	e113      	b.n	8001ca0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a78:	4b7f      	ldr	r3, [pc, #508]	@ (8001c78 <HAL_RCC_OscConfig+0x780>)
 8001a7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a7e:	f003 0302 	and.w	r3, r3, #2
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d1ed      	bne.n	8001a62 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a86:	7ffb      	ldrb	r3, [r7, #31]
 8001a88:	2b01      	cmp	r3, #1
 8001a8a:	d105      	bne.n	8001a98 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a8c:	4b7a      	ldr	r3, [pc, #488]	@ (8001c78 <HAL_RCC_OscConfig+0x780>)
 8001a8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a90:	4a79      	ldr	r2, [pc, #484]	@ (8001c78 <HAL_RCC_OscConfig+0x780>)
 8001a92:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001a96:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	f000 80fe 	beq.w	8001c9e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001aa6:	2b02      	cmp	r3, #2
 8001aa8:	f040 80d0 	bne.w	8001c4c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001aac:	4b72      	ldr	r3, [pc, #456]	@ (8001c78 <HAL_RCC_OscConfig+0x780>)
 8001aae:	68db      	ldr	r3, [r3, #12]
 8001ab0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	f003 0203 	and.w	r2, r3, #3
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001abc:	429a      	cmp	r2, r3
 8001abe:	d130      	bne.n	8001b22 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aca:	3b01      	subs	r3, #1
 8001acc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ace:	429a      	cmp	r2, r3
 8001ad0:	d127      	bne.n	8001b22 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001adc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001ade:	429a      	cmp	r2, r3
 8001ae0:	d11f      	bne.n	8001b22 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ae8:	687a      	ldr	r2, [r7, #4]
 8001aea:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001aec:	2a07      	cmp	r2, #7
 8001aee:	bf14      	ite	ne
 8001af0:	2201      	movne	r2, #1
 8001af2:	2200      	moveq	r2, #0
 8001af4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d113      	bne.n	8001b22 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001afa:	697b      	ldr	r3, [r7, #20]
 8001afc:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b04:	085b      	lsrs	r3, r3, #1
 8001b06:	3b01      	subs	r3, #1
 8001b08:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001b0a:	429a      	cmp	r2, r3
 8001b0c:	d109      	bne.n	8001b22 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b18:	085b      	lsrs	r3, r3, #1
 8001b1a:	3b01      	subs	r3, #1
 8001b1c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b1e:	429a      	cmp	r2, r3
 8001b20:	d06e      	beq.n	8001c00 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b22:	69bb      	ldr	r3, [r7, #24]
 8001b24:	2b0c      	cmp	r3, #12
 8001b26:	d069      	beq.n	8001bfc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001b28:	4b53      	ldr	r3, [pc, #332]	@ (8001c78 <HAL_RCC_OscConfig+0x780>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d105      	bne.n	8001b40 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001b34:	4b50      	ldr	r3, [pc, #320]	@ (8001c78 <HAL_RCC_OscConfig+0x780>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d001      	beq.n	8001b44 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001b40:	2301      	movs	r3, #1
 8001b42:	e0ad      	b.n	8001ca0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001b44:	4b4c      	ldr	r3, [pc, #304]	@ (8001c78 <HAL_RCC_OscConfig+0x780>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a4b      	ldr	r2, [pc, #300]	@ (8001c78 <HAL_RCC_OscConfig+0x780>)
 8001b4a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001b4e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001b50:	f7ff f972 	bl	8000e38 <HAL_GetTick>
 8001b54:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b56:	e008      	b.n	8001b6a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b58:	f7ff f96e 	bl	8000e38 <HAL_GetTick>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	693b      	ldr	r3, [r7, #16]
 8001b60:	1ad3      	subs	r3, r2, r3
 8001b62:	2b02      	cmp	r3, #2
 8001b64:	d901      	bls.n	8001b6a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001b66:	2303      	movs	r3, #3
 8001b68:	e09a      	b.n	8001ca0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b6a:	4b43      	ldr	r3, [pc, #268]	@ (8001c78 <HAL_RCC_OscConfig+0x780>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d1f0      	bne.n	8001b58 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b76:	4b40      	ldr	r3, [pc, #256]	@ (8001c78 <HAL_RCC_OscConfig+0x780>)
 8001b78:	68da      	ldr	r2, [r3, #12]
 8001b7a:	4b40      	ldr	r3, [pc, #256]	@ (8001c7c <HAL_RCC_OscConfig+0x784>)
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	687a      	ldr	r2, [r7, #4]
 8001b80:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001b82:	687a      	ldr	r2, [r7, #4]
 8001b84:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001b86:	3a01      	subs	r2, #1
 8001b88:	0112      	lsls	r2, r2, #4
 8001b8a:	4311      	orrs	r1, r2
 8001b8c:	687a      	ldr	r2, [r7, #4]
 8001b8e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001b90:	0212      	lsls	r2, r2, #8
 8001b92:	4311      	orrs	r1, r2
 8001b94:	687a      	ldr	r2, [r7, #4]
 8001b96:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001b98:	0852      	lsrs	r2, r2, #1
 8001b9a:	3a01      	subs	r2, #1
 8001b9c:	0552      	lsls	r2, r2, #21
 8001b9e:	4311      	orrs	r1, r2
 8001ba0:	687a      	ldr	r2, [r7, #4]
 8001ba2:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001ba4:	0852      	lsrs	r2, r2, #1
 8001ba6:	3a01      	subs	r2, #1
 8001ba8:	0652      	lsls	r2, r2, #25
 8001baa:	4311      	orrs	r1, r2
 8001bac:	687a      	ldr	r2, [r7, #4]
 8001bae:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001bb0:	0912      	lsrs	r2, r2, #4
 8001bb2:	0452      	lsls	r2, r2, #17
 8001bb4:	430a      	orrs	r2, r1
 8001bb6:	4930      	ldr	r1, [pc, #192]	@ (8001c78 <HAL_RCC_OscConfig+0x780>)
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001bbc:	4b2e      	ldr	r3, [pc, #184]	@ (8001c78 <HAL_RCC_OscConfig+0x780>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a2d      	ldr	r2, [pc, #180]	@ (8001c78 <HAL_RCC_OscConfig+0x780>)
 8001bc2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001bc6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001bc8:	4b2b      	ldr	r3, [pc, #172]	@ (8001c78 <HAL_RCC_OscConfig+0x780>)
 8001bca:	68db      	ldr	r3, [r3, #12]
 8001bcc:	4a2a      	ldr	r2, [pc, #168]	@ (8001c78 <HAL_RCC_OscConfig+0x780>)
 8001bce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001bd2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001bd4:	f7ff f930 	bl	8000e38 <HAL_GetTick>
 8001bd8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bda:	e008      	b.n	8001bee <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bdc:	f7ff f92c 	bl	8000e38 <HAL_GetTick>
 8001be0:	4602      	mov	r2, r0
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	1ad3      	subs	r3, r2, r3
 8001be6:	2b02      	cmp	r3, #2
 8001be8:	d901      	bls.n	8001bee <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001bea:	2303      	movs	r3, #3
 8001bec:	e058      	b.n	8001ca0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bee:	4b22      	ldr	r3, [pc, #136]	@ (8001c78 <HAL_RCC_OscConfig+0x780>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d0f0      	beq.n	8001bdc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001bfa:	e050      	b.n	8001c9e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	e04f      	b.n	8001ca0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c00:	4b1d      	ldr	r3, [pc, #116]	@ (8001c78 <HAL_RCC_OscConfig+0x780>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d148      	bne.n	8001c9e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001c0c:	4b1a      	ldr	r3, [pc, #104]	@ (8001c78 <HAL_RCC_OscConfig+0x780>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a19      	ldr	r2, [pc, #100]	@ (8001c78 <HAL_RCC_OscConfig+0x780>)
 8001c12:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001c16:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c18:	4b17      	ldr	r3, [pc, #92]	@ (8001c78 <HAL_RCC_OscConfig+0x780>)
 8001c1a:	68db      	ldr	r3, [r3, #12]
 8001c1c:	4a16      	ldr	r2, [pc, #88]	@ (8001c78 <HAL_RCC_OscConfig+0x780>)
 8001c1e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001c22:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001c24:	f7ff f908 	bl	8000e38 <HAL_GetTick>
 8001c28:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c2a:	e008      	b.n	8001c3e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c2c:	f7ff f904 	bl	8000e38 <HAL_GetTick>
 8001c30:	4602      	mov	r2, r0
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	1ad3      	subs	r3, r2, r3
 8001c36:	2b02      	cmp	r3, #2
 8001c38:	d901      	bls.n	8001c3e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001c3a:	2303      	movs	r3, #3
 8001c3c:	e030      	b.n	8001ca0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c3e:	4b0e      	ldr	r3, [pc, #56]	@ (8001c78 <HAL_RCC_OscConfig+0x780>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d0f0      	beq.n	8001c2c <HAL_RCC_OscConfig+0x734>
 8001c4a:	e028      	b.n	8001c9e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c4c:	69bb      	ldr	r3, [r7, #24]
 8001c4e:	2b0c      	cmp	r3, #12
 8001c50:	d023      	beq.n	8001c9a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c52:	4b09      	ldr	r3, [pc, #36]	@ (8001c78 <HAL_RCC_OscConfig+0x780>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a08      	ldr	r2, [pc, #32]	@ (8001c78 <HAL_RCC_OscConfig+0x780>)
 8001c58:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001c5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c5e:	f7ff f8eb 	bl	8000e38 <HAL_GetTick>
 8001c62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c64:	e00c      	b.n	8001c80 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c66:	f7ff f8e7 	bl	8000e38 <HAL_GetTick>
 8001c6a:	4602      	mov	r2, r0
 8001c6c:	693b      	ldr	r3, [r7, #16]
 8001c6e:	1ad3      	subs	r3, r2, r3
 8001c70:	2b02      	cmp	r3, #2
 8001c72:	d905      	bls.n	8001c80 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001c74:	2303      	movs	r3, #3
 8001c76:	e013      	b.n	8001ca0 <HAL_RCC_OscConfig+0x7a8>
 8001c78:	40021000 	.word	0x40021000
 8001c7c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c80:	4b09      	ldr	r3, [pc, #36]	@ (8001ca8 <HAL_RCC_OscConfig+0x7b0>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d1ec      	bne.n	8001c66 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001c8c:	4b06      	ldr	r3, [pc, #24]	@ (8001ca8 <HAL_RCC_OscConfig+0x7b0>)
 8001c8e:	68da      	ldr	r2, [r3, #12]
 8001c90:	4905      	ldr	r1, [pc, #20]	@ (8001ca8 <HAL_RCC_OscConfig+0x7b0>)
 8001c92:	4b06      	ldr	r3, [pc, #24]	@ (8001cac <HAL_RCC_OscConfig+0x7b4>)
 8001c94:	4013      	ands	r3, r2
 8001c96:	60cb      	str	r3, [r1, #12]
 8001c98:	e001      	b.n	8001c9e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e000      	b.n	8001ca0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001c9e:	2300      	movs	r3, #0
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	3720      	adds	r7, #32
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	40021000 	.word	0x40021000
 8001cac:	feeefffc 	.word	0xfeeefffc

08001cb0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b084      	sub	sp, #16
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
 8001cb8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d101      	bne.n	8001cc4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	e0e7      	b.n	8001e94 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001cc4:	4b75      	ldr	r3, [pc, #468]	@ (8001e9c <HAL_RCC_ClockConfig+0x1ec>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f003 0307 	and.w	r3, r3, #7
 8001ccc:	683a      	ldr	r2, [r7, #0]
 8001cce:	429a      	cmp	r2, r3
 8001cd0:	d910      	bls.n	8001cf4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cd2:	4b72      	ldr	r3, [pc, #456]	@ (8001e9c <HAL_RCC_ClockConfig+0x1ec>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f023 0207 	bic.w	r2, r3, #7
 8001cda:	4970      	ldr	r1, [pc, #448]	@ (8001e9c <HAL_RCC_ClockConfig+0x1ec>)
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ce2:	4b6e      	ldr	r3, [pc, #440]	@ (8001e9c <HAL_RCC_ClockConfig+0x1ec>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f003 0307 	and.w	r3, r3, #7
 8001cea:	683a      	ldr	r2, [r7, #0]
 8001cec:	429a      	cmp	r2, r3
 8001cee:	d001      	beq.n	8001cf4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	e0cf      	b.n	8001e94 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f003 0302 	and.w	r3, r3, #2
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d010      	beq.n	8001d22 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	689a      	ldr	r2, [r3, #8]
 8001d04:	4b66      	ldr	r3, [pc, #408]	@ (8001ea0 <HAL_RCC_ClockConfig+0x1f0>)
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	d908      	bls.n	8001d22 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d10:	4b63      	ldr	r3, [pc, #396]	@ (8001ea0 <HAL_RCC_ClockConfig+0x1f0>)
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	689b      	ldr	r3, [r3, #8]
 8001d1c:	4960      	ldr	r1, [pc, #384]	@ (8001ea0 <HAL_RCC_ClockConfig+0x1f0>)
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f003 0301 	and.w	r3, r3, #1
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d04c      	beq.n	8001dc8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	2b03      	cmp	r3, #3
 8001d34:	d107      	bne.n	8001d46 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d36:	4b5a      	ldr	r3, [pc, #360]	@ (8001ea0 <HAL_RCC_ClockConfig+0x1f0>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d121      	bne.n	8001d86 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	e0a6      	b.n	8001e94 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	2b02      	cmp	r3, #2
 8001d4c:	d107      	bne.n	8001d5e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d4e:	4b54      	ldr	r3, [pc, #336]	@ (8001ea0 <HAL_RCC_ClockConfig+0x1f0>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d115      	bne.n	8001d86 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e09a      	b.n	8001e94 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d107      	bne.n	8001d76 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d66:	4b4e      	ldr	r3, [pc, #312]	@ (8001ea0 <HAL_RCC_ClockConfig+0x1f0>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f003 0302 	and.w	r3, r3, #2
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d109      	bne.n	8001d86 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
 8001d74:	e08e      	b.n	8001e94 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d76:	4b4a      	ldr	r3, [pc, #296]	@ (8001ea0 <HAL_RCC_ClockConfig+0x1f0>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d101      	bne.n	8001d86 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	e086      	b.n	8001e94 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001d86:	4b46      	ldr	r3, [pc, #280]	@ (8001ea0 <HAL_RCC_ClockConfig+0x1f0>)
 8001d88:	689b      	ldr	r3, [r3, #8]
 8001d8a:	f023 0203 	bic.w	r2, r3, #3
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	4943      	ldr	r1, [pc, #268]	@ (8001ea0 <HAL_RCC_ClockConfig+0x1f0>)
 8001d94:	4313      	orrs	r3, r2
 8001d96:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d98:	f7ff f84e 	bl	8000e38 <HAL_GetTick>
 8001d9c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d9e:	e00a      	b.n	8001db6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001da0:	f7ff f84a 	bl	8000e38 <HAL_GetTick>
 8001da4:	4602      	mov	r2, r0
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	1ad3      	subs	r3, r2, r3
 8001daa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d901      	bls.n	8001db6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001db2:	2303      	movs	r3, #3
 8001db4:	e06e      	b.n	8001e94 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001db6:	4b3a      	ldr	r3, [pc, #232]	@ (8001ea0 <HAL_RCC_ClockConfig+0x1f0>)
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	f003 020c 	and.w	r2, r3, #12
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	009b      	lsls	r3, r3, #2
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d1eb      	bne.n	8001da0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f003 0302 	and.w	r3, r3, #2
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d010      	beq.n	8001df6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	689a      	ldr	r2, [r3, #8]
 8001dd8:	4b31      	ldr	r3, [pc, #196]	@ (8001ea0 <HAL_RCC_ClockConfig+0x1f0>)
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001de0:	429a      	cmp	r2, r3
 8001de2:	d208      	bcs.n	8001df6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001de4:	4b2e      	ldr	r3, [pc, #184]	@ (8001ea0 <HAL_RCC_ClockConfig+0x1f0>)
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	492b      	ldr	r1, [pc, #172]	@ (8001ea0 <HAL_RCC_ClockConfig+0x1f0>)
 8001df2:	4313      	orrs	r3, r2
 8001df4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001df6:	4b29      	ldr	r3, [pc, #164]	@ (8001e9c <HAL_RCC_ClockConfig+0x1ec>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f003 0307 	and.w	r3, r3, #7
 8001dfe:	683a      	ldr	r2, [r7, #0]
 8001e00:	429a      	cmp	r2, r3
 8001e02:	d210      	bcs.n	8001e26 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e04:	4b25      	ldr	r3, [pc, #148]	@ (8001e9c <HAL_RCC_ClockConfig+0x1ec>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f023 0207 	bic.w	r2, r3, #7
 8001e0c:	4923      	ldr	r1, [pc, #140]	@ (8001e9c <HAL_RCC_ClockConfig+0x1ec>)
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	4313      	orrs	r3, r2
 8001e12:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e14:	4b21      	ldr	r3, [pc, #132]	@ (8001e9c <HAL_RCC_ClockConfig+0x1ec>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f003 0307 	and.w	r3, r3, #7
 8001e1c:	683a      	ldr	r2, [r7, #0]
 8001e1e:	429a      	cmp	r2, r3
 8001e20:	d001      	beq.n	8001e26 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
 8001e24:	e036      	b.n	8001e94 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 0304 	and.w	r3, r3, #4
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d008      	beq.n	8001e44 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e32:	4b1b      	ldr	r3, [pc, #108]	@ (8001ea0 <HAL_RCC_ClockConfig+0x1f0>)
 8001e34:	689b      	ldr	r3, [r3, #8]
 8001e36:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	68db      	ldr	r3, [r3, #12]
 8001e3e:	4918      	ldr	r1, [pc, #96]	@ (8001ea0 <HAL_RCC_ClockConfig+0x1f0>)
 8001e40:	4313      	orrs	r3, r2
 8001e42:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f003 0308 	and.w	r3, r3, #8
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d009      	beq.n	8001e64 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e50:	4b13      	ldr	r3, [pc, #76]	@ (8001ea0 <HAL_RCC_ClockConfig+0x1f0>)
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	691b      	ldr	r3, [r3, #16]
 8001e5c:	00db      	lsls	r3, r3, #3
 8001e5e:	4910      	ldr	r1, [pc, #64]	@ (8001ea0 <HAL_RCC_ClockConfig+0x1f0>)
 8001e60:	4313      	orrs	r3, r2
 8001e62:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001e64:	f000 f858 	bl	8001f18 <HAL_RCC_GetSysClockFreq>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	4b0d      	ldr	r3, [pc, #52]	@ (8001ea0 <HAL_RCC_ClockConfig+0x1f0>)
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	091b      	lsrs	r3, r3, #4
 8001e70:	f003 030f 	and.w	r3, r3, #15
 8001e74:	490b      	ldr	r1, [pc, #44]	@ (8001ea4 <HAL_RCC_ClockConfig+0x1f4>)
 8001e76:	5ccb      	ldrb	r3, [r1, r3]
 8001e78:	f003 031f 	and.w	r3, r3, #31
 8001e7c:	fa22 f303 	lsr.w	r3, r2, r3
 8001e80:	4a09      	ldr	r2, [pc, #36]	@ (8001ea8 <HAL_RCC_ClockConfig+0x1f8>)
 8001e82:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001e84:	4b09      	ldr	r3, [pc, #36]	@ (8001eac <HAL_RCC_ClockConfig+0x1fc>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f7fe ff85 	bl	8000d98 <HAL_InitTick>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	72fb      	strb	r3, [r7, #11]

  return status;
 8001e92:	7afb      	ldrb	r3, [r7, #11]
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	3710      	adds	r7, #16
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	40022000 	.word	0x40022000
 8001ea0:	40021000 	.word	0x40021000
 8001ea4:	08004d14 	.word	0x08004d14
 8001ea8:	20000000 	.word	0x20000000
 8001eac:	20000004 	.word	0x20000004

08001eb0 <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16  division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig( uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b08a      	sub	sp, #40	@ 0x28
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	60f8      	str	r0, [r7, #12]
 8001eb8:	60b9      	str	r1, [r7, #8]
 8001eba:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning if no assert_param check */
  UNUSED(RCC_MCOx);

  /* MCO Clock Enable */
  __MCO1_CLK_ENABLE();
 8001ebc:	4b15      	ldr	r3, [pc, #84]	@ (8001f14 <HAL_RCC_MCOConfig+0x64>)
 8001ebe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ec0:	4a14      	ldr	r2, [pc, #80]	@ (8001f14 <HAL_RCC_MCOConfig+0x64>)
 8001ec2:	f043 0301 	orr.w	r3, r3, #1
 8001ec6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ec8:	4b12      	ldr	r3, [pc, #72]	@ (8001f14 <HAL_RCC_MCOConfig+0x64>)
 8001eca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ecc:	f003 0301 	and.w	r3, r3, #1
 8001ed0:	613b      	str	r3, [r7, #16]
 8001ed2:	693b      	ldr	r3, [r7, #16]

  /* Configure the MCO1 pin in alternate function mode */
  GPIO_InitStruct.Pin = MCO1_PIN;
 8001ed4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001ed8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eda:	2302      	movs	r3, #2
 8001edc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ede:	2302      	movs	r3, #2
 8001ee0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8001eea:	f107 0314 	add.w	r3, r7, #20
 8001eee:	4619      	mov	r1, r3
 8001ef0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ef4:	f7ff f8da 	bl	80010ac <HAL_GPIO_Init>

  /* Mask MCOSEL[] and MCOPRE[] bits then set MCO1 clock source and prescaler */
  MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCOSEL | RCC_CFGR_MCOPRE), (RCC_MCOSource | RCC_MCODiv ));
 8001ef8:	4b06      	ldr	r3, [pc, #24]	@ (8001f14 <HAL_RCC_MCOConfig+0x64>)
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	f023 42ee 	bic.w	r2, r3, #1996488704	@ 0x77000000
 8001f00:	68b9      	ldr	r1, [r7, #8]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	430b      	orrs	r3, r1
 8001f06:	4903      	ldr	r1, [pc, #12]	@ (8001f14 <HAL_RCC_MCOConfig+0x64>)
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	608b      	str	r3, [r1, #8]
}
 8001f0c:	bf00      	nop
 8001f0e:	3728      	adds	r7, #40	@ 0x28
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	40021000 	.word	0x40021000

08001f18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b089      	sub	sp, #36	@ 0x24
 8001f1c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	61fb      	str	r3, [r7, #28]
 8001f22:	2300      	movs	r3, #0
 8001f24:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f26:	4b3e      	ldr	r3, [pc, #248]	@ (8002020 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f28:	689b      	ldr	r3, [r3, #8]
 8001f2a:	f003 030c 	and.w	r3, r3, #12
 8001f2e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f30:	4b3b      	ldr	r3, [pc, #236]	@ (8002020 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	f003 0303 	and.w	r3, r3, #3
 8001f38:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d005      	beq.n	8001f4c <HAL_RCC_GetSysClockFreq+0x34>
 8001f40:	693b      	ldr	r3, [r7, #16]
 8001f42:	2b0c      	cmp	r3, #12
 8001f44:	d121      	bne.n	8001f8a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	2b01      	cmp	r3, #1
 8001f4a:	d11e      	bne.n	8001f8a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001f4c:	4b34      	ldr	r3, [pc, #208]	@ (8002020 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f003 0308 	and.w	r3, r3, #8
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d107      	bne.n	8001f68 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001f58:	4b31      	ldr	r3, [pc, #196]	@ (8002020 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f5e:	0a1b      	lsrs	r3, r3, #8
 8001f60:	f003 030f 	and.w	r3, r3, #15
 8001f64:	61fb      	str	r3, [r7, #28]
 8001f66:	e005      	b.n	8001f74 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001f68:	4b2d      	ldr	r3, [pc, #180]	@ (8002020 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	091b      	lsrs	r3, r3, #4
 8001f6e:	f003 030f 	and.w	r3, r3, #15
 8001f72:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001f74:	4a2b      	ldr	r2, [pc, #172]	@ (8002024 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001f76:	69fb      	ldr	r3, [r7, #28]
 8001f78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f7c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d10d      	bne.n	8001fa0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001f84:	69fb      	ldr	r3, [r7, #28]
 8001f86:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f88:	e00a      	b.n	8001fa0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	2b04      	cmp	r3, #4
 8001f8e:	d102      	bne.n	8001f96 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001f90:	4b25      	ldr	r3, [pc, #148]	@ (8002028 <HAL_RCC_GetSysClockFreq+0x110>)
 8001f92:	61bb      	str	r3, [r7, #24]
 8001f94:	e004      	b.n	8001fa0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	2b08      	cmp	r3, #8
 8001f9a:	d101      	bne.n	8001fa0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001f9c:	4b23      	ldr	r3, [pc, #140]	@ (800202c <HAL_RCC_GetSysClockFreq+0x114>)
 8001f9e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	2b0c      	cmp	r3, #12
 8001fa4:	d134      	bne.n	8002010 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001fa6:	4b1e      	ldr	r3, [pc, #120]	@ (8002020 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fa8:	68db      	ldr	r3, [r3, #12]
 8001faa:	f003 0303 	and.w	r3, r3, #3
 8001fae:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	2b02      	cmp	r3, #2
 8001fb4:	d003      	beq.n	8001fbe <HAL_RCC_GetSysClockFreq+0xa6>
 8001fb6:	68bb      	ldr	r3, [r7, #8]
 8001fb8:	2b03      	cmp	r3, #3
 8001fba:	d003      	beq.n	8001fc4 <HAL_RCC_GetSysClockFreq+0xac>
 8001fbc:	e005      	b.n	8001fca <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001fbe:	4b1a      	ldr	r3, [pc, #104]	@ (8002028 <HAL_RCC_GetSysClockFreq+0x110>)
 8001fc0:	617b      	str	r3, [r7, #20]
      break;
 8001fc2:	e005      	b.n	8001fd0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001fc4:	4b19      	ldr	r3, [pc, #100]	@ (800202c <HAL_RCC_GetSysClockFreq+0x114>)
 8001fc6:	617b      	str	r3, [r7, #20]
      break;
 8001fc8:	e002      	b.n	8001fd0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001fca:	69fb      	ldr	r3, [r7, #28]
 8001fcc:	617b      	str	r3, [r7, #20]
      break;
 8001fce:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001fd0:	4b13      	ldr	r3, [pc, #76]	@ (8002020 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fd2:	68db      	ldr	r3, [r3, #12]
 8001fd4:	091b      	lsrs	r3, r3, #4
 8001fd6:	f003 0307 	and.w	r3, r3, #7
 8001fda:	3301      	adds	r3, #1
 8001fdc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001fde:	4b10      	ldr	r3, [pc, #64]	@ (8002020 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fe0:	68db      	ldr	r3, [r3, #12]
 8001fe2:	0a1b      	lsrs	r3, r3, #8
 8001fe4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001fe8:	697a      	ldr	r2, [r7, #20]
 8001fea:	fb03 f202 	mul.w	r2, r3, r2
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ff4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001ff6:	4b0a      	ldr	r3, [pc, #40]	@ (8002020 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ff8:	68db      	ldr	r3, [r3, #12]
 8001ffa:	0e5b      	lsrs	r3, r3, #25
 8001ffc:	f003 0303 	and.w	r3, r3, #3
 8002000:	3301      	adds	r3, #1
 8002002:	005b      	lsls	r3, r3, #1
 8002004:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002006:	697a      	ldr	r2, [r7, #20]
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	fbb2 f3f3 	udiv	r3, r2, r3
 800200e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002010:	69bb      	ldr	r3, [r7, #24]
}
 8002012:	4618      	mov	r0, r3
 8002014:	3724      	adds	r7, #36	@ 0x24
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr
 800201e:	bf00      	nop
 8002020:	40021000 	.word	0x40021000
 8002024:	08004d2c 	.word	0x08004d2c
 8002028:	00f42400 	.word	0x00f42400
 800202c:	007a1200 	.word	0x007a1200

08002030 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002030:	b480      	push	{r7}
 8002032:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002034:	4b03      	ldr	r3, [pc, #12]	@ (8002044 <HAL_RCC_GetHCLKFreq+0x14>)
 8002036:	681b      	ldr	r3, [r3, #0]
}
 8002038:	4618      	mov	r0, r3
 800203a:	46bd      	mov	sp, r7
 800203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002040:	4770      	bx	lr
 8002042:	bf00      	nop
 8002044:	20000000 	.word	0x20000000

08002048 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800204c:	f7ff fff0 	bl	8002030 <HAL_RCC_GetHCLKFreq>
 8002050:	4602      	mov	r2, r0
 8002052:	4b06      	ldr	r3, [pc, #24]	@ (800206c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002054:	689b      	ldr	r3, [r3, #8]
 8002056:	0a1b      	lsrs	r3, r3, #8
 8002058:	f003 0307 	and.w	r3, r3, #7
 800205c:	4904      	ldr	r1, [pc, #16]	@ (8002070 <HAL_RCC_GetPCLK1Freq+0x28>)
 800205e:	5ccb      	ldrb	r3, [r1, r3]
 8002060:	f003 031f 	and.w	r3, r3, #31
 8002064:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002068:	4618      	mov	r0, r3
 800206a:	bd80      	pop	{r7, pc}
 800206c:	40021000 	.word	0x40021000
 8002070:	08004d24 	.word	0x08004d24

08002074 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002078:	f7ff ffda 	bl	8002030 <HAL_RCC_GetHCLKFreq>
 800207c:	4602      	mov	r2, r0
 800207e:	4b06      	ldr	r3, [pc, #24]	@ (8002098 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	0adb      	lsrs	r3, r3, #11
 8002084:	f003 0307 	and.w	r3, r3, #7
 8002088:	4904      	ldr	r1, [pc, #16]	@ (800209c <HAL_RCC_GetPCLK2Freq+0x28>)
 800208a:	5ccb      	ldrb	r3, [r1, r3]
 800208c:	f003 031f 	and.w	r3, r3, #31
 8002090:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002094:	4618      	mov	r0, r3
 8002096:	bd80      	pop	{r7, pc}
 8002098:	40021000 	.word	0x40021000
 800209c:	08004d24 	.word	0x08004d24

080020a0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b086      	sub	sp, #24
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80020a8:	2300      	movs	r3, #0
 80020aa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80020ac:	4b2a      	ldr	r3, [pc, #168]	@ (8002158 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d003      	beq.n	80020c0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80020b8:	f7ff f9ba 	bl	8001430 <HAL_PWREx_GetVoltageRange>
 80020bc:	6178      	str	r0, [r7, #20]
 80020be:	e014      	b.n	80020ea <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80020c0:	4b25      	ldr	r3, [pc, #148]	@ (8002158 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020c4:	4a24      	ldr	r2, [pc, #144]	@ (8002158 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020ca:	6593      	str	r3, [r2, #88]	@ 0x58
 80020cc:	4b22      	ldr	r3, [pc, #136]	@ (8002158 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020d4:	60fb      	str	r3, [r7, #12]
 80020d6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80020d8:	f7ff f9aa 	bl	8001430 <HAL_PWREx_GetVoltageRange>
 80020dc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80020de:	4b1e      	ldr	r3, [pc, #120]	@ (8002158 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020e2:	4a1d      	ldr	r2, [pc, #116]	@ (8002158 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020e4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80020e8:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80020ea:	697b      	ldr	r3, [r7, #20]
 80020ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80020f0:	d10b      	bne.n	800210a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2b80      	cmp	r3, #128	@ 0x80
 80020f6:	d919      	bls.n	800212c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2ba0      	cmp	r3, #160	@ 0xa0
 80020fc:	d902      	bls.n	8002104 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80020fe:	2302      	movs	r3, #2
 8002100:	613b      	str	r3, [r7, #16]
 8002102:	e013      	b.n	800212c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002104:	2301      	movs	r3, #1
 8002106:	613b      	str	r3, [r7, #16]
 8002108:	e010      	b.n	800212c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2b80      	cmp	r3, #128	@ 0x80
 800210e:	d902      	bls.n	8002116 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002110:	2303      	movs	r3, #3
 8002112:	613b      	str	r3, [r7, #16]
 8002114:	e00a      	b.n	800212c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2b80      	cmp	r3, #128	@ 0x80
 800211a:	d102      	bne.n	8002122 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800211c:	2302      	movs	r3, #2
 800211e:	613b      	str	r3, [r7, #16]
 8002120:	e004      	b.n	800212c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2b70      	cmp	r3, #112	@ 0x70
 8002126:	d101      	bne.n	800212c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002128:	2301      	movs	r3, #1
 800212a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800212c:	4b0b      	ldr	r3, [pc, #44]	@ (800215c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f023 0207 	bic.w	r2, r3, #7
 8002134:	4909      	ldr	r1, [pc, #36]	@ (800215c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	4313      	orrs	r3, r2
 800213a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800213c:	4b07      	ldr	r3, [pc, #28]	@ (800215c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f003 0307 	and.w	r3, r3, #7
 8002144:	693a      	ldr	r2, [r7, #16]
 8002146:	429a      	cmp	r2, r3
 8002148:	d001      	beq.n	800214e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	e000      	b.n	8002150 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800214e:	2300      	movs	r3, #0
}
 8002150:	4618      	mov	r0, r3
 8002152:	3718      	adds	r7, #24
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}
 8002158:	40021000 	.word	0x40021000
 800215c:	40022000 	.word	0x40022000

08002160 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b086      	sub	sp, #24
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002168:	2300      	movs	r3, #0
 800216a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800216c:	2300      	movs	r3, #0
 800216e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002178:	2b00      	cmp	r3, #0
 800217a:	d041      	beq.n	8002200 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002180:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002184:	d02a      	beq.n	80021dc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002186:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800218a:	d824      	bhi.n	80021d6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800218c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002190:	d008      	beq.n	80021a4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002192:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002196:	d81e      	bhi.n	80021d6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002198:	2b00      	cmp	r3, #0
 800219a:	d00a      	beq.n	80021b2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800219c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80021a0:	d010      	beq.n	80021c4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80021a2:	e018      	b.n	80021d6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80021a4:	4b86      	ldr	r3, [pc, #536]	@ (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021a6:	68db      	ldr	r3, [r3, #12]
 80021a8:	4a85      	ldr	r2, [pc, #532]	@ (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021ae:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80021b0:	e015      	b.n	80021de <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	3304      	adds	r3, #4
 80021b6:	2100      	movs	r1, #0
 80021b8:	4618      	mov	r0, r3
 80021ba:	f000 fabb 	bl	8002734 <RCCEx_PLLSAI1_Config>
 80021be:	4603      	mov	r3, r0
 80021c0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80021c2:	e00c      	b.n	80021de <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	3320      	adds	r3, #32
 80021c8:	2100      	movs	r1, #0
 80021ca:	4618      	mov	r0, r3
 80021cc:	f000 fba6 	bl	800291c <RCCEx_PLLSAI2_Config>
 80021d0:	4603      	mov	r3, r0
 80021d2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80021d4:	e003      	b.n	80021de <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	74fb      	strb	r3, [r7, #19]
      break;
 80021da:	e000      	b.n	80021de <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80021dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80021de:	7cfb      	ldrb	r3, [r7, #19]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d10b      	bne.n	80021fc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80021e4:	4b76      	ldr	r3, [pc, #472]	@ (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021ea:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80021f2:	4973      	ldr	r1, [pc, #460]	@ (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021f4:	4313      	orrs	r3, r2
 80021f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80021fa:	e001      	b.n	8002200 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80021fc:	7cfb      	ldrb	r3, [r7, #19]
 80021fe:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002208:	2b00      	cmp	r3, #0
 800220a:	d041      	beq.n	8002290 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002210:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002214:	d02a      	beq.n	800226c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002216:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800221a:	d824      	bhi.n	8002266 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800221c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002220:	d008      	beq.n	8002234 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002222:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002226:	d81e      	bhi.n	8002266 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002228:	2b00      	cmp	r3, #0
 800222a:	d00a      	beq.n	8002242 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800222c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002230:	d010      	beq.n	8002254 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002232:	e018      	b.n	8002266 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002234:	4b62      	ldr	r3, [pc, #392]	@ (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002236:	68db      	ldr	r3, [r3, #12]
 8002238:	4a61      	ldr	r2, [pc, #388]	@ (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800223a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800223e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002240:	e015      	b.n	800226e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	3304      	adds	r3, #4
 8002246:	2100      	movs	r1, #0
 8002248:	4618      	mov	r0, r3
 800224a:	f000 fa73 	bl	8002734 <RCCEx_PLLSAI1_Config>
 800224e:	4603      	mov	r3, r0
 8002250:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002252:	e00c      	b.n	800226e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	3320      	adds	r3, #32
 8002258:	2100      	movs	r1, #0
 800225a:	4618      	mov	r0, r3
 800225c:	f000 fb5e 	bl	800291c <RCCEx_PLLSAI2_Config>
 8002260:	4603      	mov	r3, r0
 8002262:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002264:	e003      	b.n	800226e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	74fb      	strb	r3, [r7, #19]
      break;
 800226a:	e000      	b.n	800226e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800226c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800226e:	7cfb      	ldrb	r3, [r7, #19]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d10b      	bne.n	800228c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002274:	4b52      	ldr	r3, [pc, #328]	@ (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002276:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800227a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002282:	494f      	ldr	r1, [pc, #316]	@ (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002284:	4313      	orrs	r3, r2
 8002286:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800228a:	e001      	b.n	8002290 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800228c:	7cfb      	ldrb	r3, [r7, #19]
 800228e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002298:	2b00      	cmp	r3, #0
 800229a:	f000 80a0 	beq.w	80023de <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800229e:	2300      	movs	r3, #0
 80022a0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80022a2:	4b47      	ldr	r3, [pc, #284]	@ (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d101      	bne.n	80022b2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80022ae:	2301      	movs	r3, #1
 80022b0:	e000      	b.n	80022b4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80022b2:	2300      	movs	r3, #0
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d00d      	beq.n	80022d4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022b8:	4b41      	ldr	r3, [pc, #260]	@ (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022bc:	4a40      	ldr	r2, [pc, #256]	@ (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80022c2:	6593      	str	r3, [r2, #88]	@ 0x58
 80022c4:	4b3e      	ldr	r3, [pc, #248]	@ (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022cc:	60bb      	str	r3, [r7, #8]
 80022ce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022d0:	2301      	movs	r3, #1
 80022d2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80022d4:	4b3b      	ldr	r3, [pc, #236]	@ (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a3a      	ldr	r2, [pc, #232]	@ (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80022da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022de:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80022e0:	f7fe fdaa 	bl	8000e38 <HAL_GetTick>
 80022e4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80022e6:	e009      	b.n	80022fc <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022e8:	f7fe fda6 	bl	8000e38 <HAL_GetTick>
 80022ec:	4602      	mov	r2, r0
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	1ad3      	subs	r3, r2, r3
 80022f2:	2b02      	cmp	r3, #2
 80022f4:	d902      	bls.n	80022fc <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80022f6:	2303      	movs	r3, #3
 80022f8:	74fb      	strb	r3, [r7, #19]
        break;
 80022fa:	e005      	b.n	8002308 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80022fc:	4b31      	ldr	r3, [pc, #196]	@ (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002304:	2b00      	cmp	r3, #0
 8002306:	d0ef      	beq.n	80022e8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002308:	7cfb      	ldrb	r3, [r7, #19]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d15c      	bne.n	80023c8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800230e:	4b2c      	ldr	r3, [pc, #176]	@ (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002310:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002314:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002318:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d01f      	beq.n	8002360 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002326:	697a      	ldr	r2, [r7, #20]
 8002328:	429a      	cmp	r2, r3
 800232a:	d019      	beq.n	8002360 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800232c:	4b24      	ldr	r3, [pc, #144]	@ (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800232e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002332:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002336:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002338:	4b21      	ldr	r3, [pc, #132]	@ (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800233a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800233e:	4a20      	ldr	r2, [pc, #128]	@ (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002340:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002344:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002348:	4b1d      	ldr	r3, [pc, #116]	@ (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800234a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800234e:	4a1c      	ldr	r2, [pc, #112]	@ (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002350:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002354:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002358:	4a19      	ldr	r2, [pc, #100]	@ (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	f003 0301 	and.w	r3, r3, #1
 8002366:	2b00      	cmp	r3, #0
 8002368:	d016      	beq.n	8002398 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800236a:	f7fe fd65 	bl	8000e38 <HAL_GetTick>
 800236e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002370:	e00b      	b.n	800238a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002372:	f7fe fd61 	bl	8000e38 <HAL_GetTick>
 8002376:	4602      	mov	r2, r0
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	1ad3      	subs	r3, r2, r3
 800237c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002380:	4293      	cmp	r3, r2
 8002382:	d902      	bls.n	800238a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002384:	2303      	movs	r3, #3
 8002386:	74fb      	strb	r3, [r7, #19]
            break;
 8002388:	e006      	b.n	8002398 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800238a:	4b0d      	ldr	r3, [pc, #52]	@ (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800238c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002390:	f003 0302 	and.w	r3, r3, #2
 8002394:	2b00      	cmp	r3, #0
 8002396:	d0ec      	beq.n	8002372 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002398:	7cfb      	ldrb	r3, [r7, #19]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d10c      	bne.n	80023b8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800239e:	4b08      	ldr	r3, [pc, #32]	@ (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023a4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80023ae:	4904      	ldr	r1, [pc, #16]	@ (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023b0:	4313      	orrs	r3, r2
 80023b2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80023b6:	e009      	b.n	80023cc <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80023b8:	7cfb      	ldrb	r3, [r7, #19]
 80023ba:	74bb      	strb	r3, [r7, #18]
 80023bc:	e006      	b.n	80023cc <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80023be:	bf00      	nop
 80023c0:	40021000 	.word	0x40021000
 80023c4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023c8:	7cfb      	ldrb	r3, [r7, #19]
 80023ca:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80023cc:	7c7b      	ldrb	r3, [r7, #17]
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	d105      	bne.n	80023de <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023d2:	4b9e      	ldr	r3, [pc, #632]	@ (800264c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023d6:	4a9d      	ldr	r2, [pc, #628]	@ (800264c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023d8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80023dc:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f003 0301 	and.w	r3, r3, #1
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d00a      	beq.n	8002400 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80023ea:	4b98      	ldr	r3, [pc, #608]	@ (800264c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023f0:	f023 0203 	bic.w	r2, r3, #3
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023f8:	4994      	ldr	r1, [pc, #592]	@ (800264c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023fa:	4313      	orrs	r3, r2
 80023fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f003 0302 	and.w	r3, r3, #2
 8002408:	2b00      	cmp	r3, #0
 800240a:	d00a      	beq.n	8002422 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800240c:	4b8f      	ldr	r3, [pc, #572]	@ (800264c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800240e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002412:	f023 020c 	bic.w	r2, r3, #12
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800241a:	498c      	ldr	r1, [pc, #560]	@ (800264c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800241c:	4313      	orrs	r3, r2
 800241e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 0304 	and.w	r3, r3, #4
 800242a:	2b00      	cmp	r3, #0
 800242c:	d00a      	beq.n	8002444 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800242e:	4b87      	ldr	r3, [pc, #540]	@ (800264c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002430:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002434:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800243c:	4983      	ldr	r1, [pc, #524]	@ (800264c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800243e:	4313      	orrs	r3, r2
 8002440:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f003 0308 	and.w	r3, r3, #8
 800244c:	2b00      	cmp	r3, #0
 800244e:	d00a      	beq.n	8002466 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002450:	4b7e      	ldr	r3, [pc, #504]	@ (800264c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002452:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002456:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800245e:	497b      	ldr	r1, [pc, #492]	@ (800264c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002460:	4313      	orrs	r3, r2
 8002462:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 0310 	and.w	r3, r3, #16
 800246e:	2b00      	cmp	r3, #0
 8002470:	d00a      	beq.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002472:	4b76      	ldr	r3, [pc, #472]	@ (800264c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002474:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002478:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002480:	4972      	ldr	r1, [pc, #456]	@ (800264c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002482:	4313      	orrs	r3, r2
 8002484:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f003 0320 	and.w	r3, r3, #32
 8002490:	2b00      	cmp	r3, #0
 8002492:	d00a      	beq.n	80024aa <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002494:	4b6d      	ldr	r3, [pc, #436]	@ (800264c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002496:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800249a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024a2:	496a      	ldr	r1, [pc, #424]	@ (800264c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024a4:	4313      	orrs	r3, r2
 80024a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d00a      	beq.n	80024cc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80024b6:	4b65      	ldr	r3, [pc, #404]	@ (800264c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024bc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024c4:	4961      	ldr	r1, [pc, #388]	@ (800264c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024c6:	4313      	orrs	r3, r2
 80024c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d00a      	beq.n	80024ee <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80024d8:	4b5c      	ldr	r3, [pc, #368]	@ (800264c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024de:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024e6:	4959      	ldr	r1, [pc, #356]	@ (800264c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024e8:	4313      	orrs	r3, r2
 80024ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d00a      	beq.n	8002510 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80024fa:	4b54      	ldr	r3, [pc, #336]	@ (800264c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002500:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002508:	4950      	ldr	r1, [pc, #320]	@ (800264c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800250a:	4313      	orrs	r3, r2
 800250c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002518:	2b00      	cmp	r3, #0
 800251a:	d00a      	beq.n	8002532 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800251c:	4b4b      	ldr	r3, [pc, #300]	@ (800264c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800251e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002522:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800252a:	4948      	ldr	r1, [pc, #288]	@ (800264c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800252c:	4313      	orrs	r3, r2
 800252e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800253a:	2b00      	cmp	r3, #0
 800253c:	d00a      	beq.n	8002554 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800253e:	4b43      	ldr	r3, [pc, #268]	@ (800264c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002540:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002544:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800254c:	493f      	ldr	r1, [pc, #252]	@ (800264c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800254e:	4313      	orrs	r3, r2
 8002550:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800255c:	2b00      	cmp	r3, #0
 800255e:	d028      	beq.n	80025b2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002560:	4b3a      	ldr	r3, [pc, #232]	@ (800264c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002562:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002566:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800256e:	4937      	ldr	r1, [pc, #220]	@ (800264c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002570:	4313      	orrs	r3, r2
 8002572:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800257a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800257e:	d106      	bne.n	800258e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002580:	4b32      	ldr	r3, [pc, #200]	@ (800264c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002582:	68db      	ldr	r3, [r3, #12]
 8002584:	4a31      	ldr	r2, [pc, #196]	@ (800264c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002586:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800258a:	60d3      	str	r3, [r2, #12]
 800258c:	e011      	b.n	80025b2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002592:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002596:	d10c      	bne.n	80025b2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	3304      	adds	r3, #4
 800259c:	2101      	movs	r1, #1
 800259e:	4618      	mov	r0, r3
 80025a0:	f000 f8c8 	bl	8002734 <RCCEx_PLLSAI1_Config>
 80025a4:	4603      	mov	r3, r0
 80025a6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80025a8:	7cfb      	ldrb	r3, [r7, #19]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d001      	beq.n	80025b2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80025ae:	7cfb      	ldrb	r3, [r7, #19]
 80025b0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d028      	beq.n	8002610 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80025be:	4b23      	ldr	r3, [pc, #140]	@ (800264c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025c4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025cc:	491f      	ldr	r1, [pc, #124]	@ (800264c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025ce:	4313      	orrs	r3, r2
 80025d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025d8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80025dc:	d106      	bne.n	80025ec <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80025de:	4b1b      	ldr	r3, [pc, #108]	@ (800264c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025e0:	68db      	ldr	r3, [r3, #12]
 80025e2:	4a1a      	ldr	r2, [pc, #104]	@ (800264c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80025e8:	60d3      	str	r3, [r2, #12]
 80025ea:	e011      	b.n	8002610 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025f0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80025f4:	d10c      	bne.n	8002610 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	3304      	adds	r3, #4
 80025fa:	2101      	movs	r1, #1
 80025fc:	4618      	mov	r0, r3
 80025fe:	f000 f899 	bl	8002734 <RCCEx_PLLSAI1_Config>
 8002602:	4603      	mov	r3, r0
 8002604:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002606:	7cfb      	ldrb	r3, [r7, #19]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d001      	beq.n	8002610 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800260c:	7cfb      	ldrb	r3, [r7, #19]
 800260e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002618:	2b00      	cmp	r3, #0
 800261a:	d02b      	beq.n	8002674 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800261c:	4b0b      	ldr	r3, [pc, #44]	@ (800264c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800261e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002622:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800262a:	4908      	ldr	r1, [pc, #32]	@ (800264c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800262c:	4313      	orrs	r3, r2
 800262e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002636:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800263a:	d109      	bne.n	8002650 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800263c:	4b03      	ldr	r3, [pc, #12]	@ (800264c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800263e:	68db      	ldr	r3, [r3, #12]
 8002640:	4a02      	ldr	r2, [pc, #8]	@ (800264c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002642:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002646:	60d3      	str	r3, [r2, #12]
 8002648:	e014      	b.n	8002674 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800264a:	bf00      	nop
 800264c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002654:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002658:	d10c      	bne.n	8002674 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	3304      	adds	r3, #4
 800265e:	2101      	movs	r1, #1
 8002660:	4618      	mov	r0, r3
 8002662:	f000 f867 	bl	8002734 <RCCEx_PLLSAI1_Config>
 8002666:	4603      	mov	r3, r0
 8002668:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800266a:	7cfb      	ldrb	r3, [r7, #19]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d001      	beq.n	8002674 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002670:	7cfb      	ldrb	r3, [r7, #19]
 8002672:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800267c:	2b00      	cmp	r3, #0
 800267e:	d02f      	beq.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002680:	4b2b      	ldr	r3, [pc, #172]	@ (8002730 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002682:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002686:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800268e:	4928      	ldr	r1, [pc, #160]	@ (8002730 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002690:	4313      	orrs	r3, r2
 8002692:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800269a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800269e:	d10d      	bne.n	80026bc <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	3304      	adds	r3, #4
 80026a4:	2102      	movs	r1, #2
 80026a6:	4618      	mov	r0, r3
 80026a8:	f000 f844 	bl	8002734 <RCCEx_PLLSAI1_Config>
 80026ac:	4603      	mov	r3, r0
 80026ae:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80026b0:	7cfb      	ldrb	r3, [r7, #19]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d014      	beq.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80026b6:	7cfb      	ldrb	r3, [r7, #19]
 80026b8:	74bb      	strb	r3, [r7, #18]
 80026ba:	e011      	b.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80026c0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80026c4:	d10c      	bne.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	3320      	adds	r3, #32
 80026ca:	2102      	movs	r1, #2
 80026cc:	4618      	mov	r0, r3
 80026ce:	f000 f925 	bl	800291c <RCCEx_PLLSAI2_Config>
 80026d2:	4603      	mov	r3, r0
 80026d4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80026d6:	7cfb      	ldrb	r3, [r7, #19]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d001      	beq.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80026dc:	7cfb      	ldrb	r3, [r7, #19]
 80026de:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d00a      	beq.n	8002702 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80026ec:	4b10      	ldr	r3, [pc, #64]	@ (8002730 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80026ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026f2:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80026fa:	490d      	ldr	r1, [pc, #52]	@ (8002730 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80026fc:	4313      	orrs	r3, r2
 80026fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800270a:	2b00      	cmp	r3, #0
 800270c:	d00b      	beq.n	8002726 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800270e:	4b08      	ldr	r3, [pc, #32]	@ (8002730 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002710:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002714:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800271e:	4904      	ldr	r1, [pc, #16]	@ (8002730 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002720:	4313      	orrs	r3, r2
 8002722:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002726:	7cbb      	ldrb	r3, [r7, #18]
}
 8002728:	4618      	mov	r0, r3
 800272a:	3718      	adds	r7, #24
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}
 8002730:	40021000 	.word	0x40021000

08002734 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b084      	sub	sp, #16
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
 800273c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800273e:	2300      	movs	r3, #0
 8002740:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002742:	4b75      	ldr	r3, [pc, #468]	@ (8002918 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002744:	68db      	ldr	r3, [r3, #12]
 8002746:	f003 0303 	and.w	r3, r3, #3
 800274a:	2b00      	cmp	r3, #0
 800274c:	d018      	beq.n	8002780 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800274e:	4b72      	ldr	r3, [pc, #456]	@ (8002918 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002750:	68db      	ldr	r3, [r3, #12]
 8002752:	f003 0203 	and.w	r2, r3, #3
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	429a      	cmp	r2, r3
 800275c:	d10d      	bne.n	800277a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
       ||
 8002762:	2b00      	cmp	r3, #0
 8002764:	d009      	beq.n	800277a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002766:	4b6c      	ldr	r3, [pc, #432]	@ (8002918 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002768:	68db      	ldr	r3, [r3, #12]
 800276a:	091b      	lsrs	r3, r3, #4
 800276c:	f003 0307 	and.w	r3, r3, #7
 8002770:	1c5a      	adds	r2, r3, #1
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	685b      	ldr	r3, [r3, #4]
       ||
 8002776:	429a      	cmp	r2, r3
 8002778:	d047      	beq.n	800280a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	73fb      	strb	r3, [r7, #15]
 800277e:	e044      	b.n	800280a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	2b03      	cmp	r3, #3
 8002786:	d018      	beq.n	80027ba <RCCEx_PLLSAI1_Config+0x86>
 8002788:	2b03      	cmp	r3, #3
 800278a:	d825      	bhi.n	80027d8 <RCCEx_PLLSAI1_Config+0xa4>
 800278c:	2b01      	cmp	r3, #1
 800278e:	d002      	beq.n	8002796 <RCCEx_PLLSAI1_Config+0x62>
 8002790:	2b02      	cmp	r3, #2
 8002792:	d009      	beq.n	80027a8 <RCCEx_PLLSAI1_Config+0x74>
 8002794:	e020      	b.n	80027d8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002796:	4b60      	ldr	r3, [pc, #384]	@ (8002918 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 0302 	and.w	r3, r3, #2
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d11d      	bne.n	80027de <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027a6:	e01a      	b.n	80027de <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80027a8:	4b5b      	ldr	r3, [pc, #364]	@ (8002918 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d116      	bne.n	80027e2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80027b4:	2301      	movs	r3, #1
 80027b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027b8:	e013      	b.n	80027e2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80027ba:	4b57      	ldr	r3, [pc, #348]	@ (8002918 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d10f      	bne.n	80027e6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80027c6:	4b54      	ldr	r3, [pc, #336]	@ (8002918 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d109      	bne.n	80027e6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80027d6:	e006      	b.n	80027e6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80027d8:	2301      	movs	r3, #1
 80027da:	73fb      	strb	r3, [r7, #15]
      break;
 80027dc:	e004      	b.n	80027e8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80027de:	bf00      	nop
 80027e0:	e002      	b.n	80027e8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80027e2:	bf00      	nop
 80027e4:	e000      	b.n	80027e8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80027e6:	bf00      	nop
    }

    if(status == HAL_OK)
 80027e8:	7bfb      	ldrb	r3, [r7, #15]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d10d      	bne.n	800280a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80027ee:	4b4a      	ldr	r3, [pc, #296]	@ (8002918 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027f0:	68db      	ldr	r3, [r3, #12]
 80027f2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6819      	ldr	r1, [r3, #0]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	3b01      	subs	r3, #1
 8002800:	011b      	lsls	r3, r3, #4
 8002802:	430b      	orrs	r3, r1
 8002804:	4944      	ldr	r1, [pc, #272]	@ (8002918 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002806:	4313      	orrs	r3, r2
 8002808:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800280a:	7bfb      	ldrb	r3, [r7, #15]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d17d      	bne.n	800290c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002810:	4b41      	ldr	r3, [pc, #260]	@ (8002918 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a40      	ldr	r2, [pc, #256]	@ (8002918 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002816:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800281a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800281c:	f7fe fb0c 	bl	8000e38 <HAL_GetTick>
 8002820:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002822:	e009      	b.n	8002838 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002824:	f7fe fb08 	bl	8000e38 <HAL_GetTick>
 8002828:	4602      	mov	r2, r0
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	1ad3      	subs	r3, r2, r3
 800282e:	2b02      	cmp	r3, #2
 8002830:	d902      	bls.n	8002838 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002832:	2303      	movs	r3, #3
 8002834:	73fb      	strb	r3, [r7, #15]
        break;
 8002836:	e005      	b.n	8002844 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002838:	4b37      	ldr	r3, [pc, #220]	@ (8002918 <RCCEx_PLLSAI1_Config+0x1e4>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002840:	2b00      	cmp	r3, #0
 8002842:	d1ef      	bne.n	8002824 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002844:	7bfb      	ldrb	r3, [r7, #15]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d160      	bne.n	800290c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d111      	bne.n	8002874 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002850:	4b31      	ldr	r3, [pc, #196]	@ (8002918 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002852:	691b      	ldr	r3, [r3, #16]
 8002854:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002858:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800285c:	687a      	ldr	r2, [r7, #4]
 800285e:	6892      	ldr	r2, [r2, #8]
 8002860:	0211      	lsls	r1, r2, #8
 8002862:	687a      	ldr	r2, [r7, #4]
 8002864:	68d2      	ldr	r2, [r2, #12]
 8002866:	0912      	lsrs	r2, r2, #4
 8002868:	0452      	lsls	r2, r2, #17
 800286a:	430a      	orrs	r2, r1
 800286c:	492a      	ldr	r1, [pc, #168]	@ (8002918 <RCCEx_PLLSAI1_Config+0x1e4>)
 800286e:	4313      	orrs	r3, r2
 8002870:	610b      	str	r3, [r1, #16]
 8002872:	e027      	b.n	80028c4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	2b01      	cmp	r3, #1
 8002878:	d112      	bne.n	80028a0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800287a:	4b27      	ldr	r3, [pc, #156]	@ (8002918 <RCCEx_PLLSAI1_Config+0x1e4>)
 800287c:	691b      	ldr	r3, [r3, #16]
 800287e:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002882:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002886:	687a      	ldr	r2, [r7, #4]
 8002888:	6892      	ldr	r2, [r2, #8]
 800288a:	0211      	lsls	r1, r2, #8
 800288c:	687a      	ldr	r2, [r7, #4]
 800288e:	6912      	ldr	r2, [r2, #16]
 8002890:	0852      	lsrs	r2, r2, #1
 8002892:	3a01      	subs	r2, #1
 8002894:	0552      	lsls	r2, r2, #21
 8002896:	430a      	orrs	r2, r1
 8002898:	491f      	ldr	r1, [pc, #124]	@ (8002918 <RCCEx_PLLSAI1_Config+0x1e4>)
 800289a:	4313      	orrs	r3, r2
 800289c:	610b      	str	r3, [r1, #16]
 800289e:	e011      	b.n	80028c4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80028a0:	4b1d      	ldr	r3, [pc, #116]	@ (8002918 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028a2:	691b      	ldr	r3, [r3, #16]
 80028a4:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80028a8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80028ac:	687a      	ldr	r2, [r7, #4]
 80028ae:	6892      	ldr	r2, [r2, #8]
 80028b0:	0211      	lsls	r1, r2, #8
 80028b2:	687a      	ldr	r2, [r7, #4]
 80028b4:	6952      	ldr	r2, [r2, #20]
 80028b6:	0852      	lsrs	r2, r2, #1
 80028b8:	3a01      	subs	r2, #1
 80028ba:	0652      	lsls	r2, r2, #25
 80028bc:	430a      	orrs	r2, r1
 80028be:	4916      	ldr	r1, [pc, #88]	@ (8002918 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028c0:	4313      	orrs	r3, r2
 80028c2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80028c4:	4b14      	ldr	r3, [pc, #80]	@ (8002918 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a13      	ldr	r2, [pc, #76]	@ (8002918 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028ca:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80028ce:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028d0:	f7fe fab2 	bl	8000e38 <HAL_GetTick>
 80028d4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80028d6:	e009      	b.n	80028ec <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80028d8:	f7fe faae 	bl	8000e38 <HAL_GetTick>
 80028dc:	4602      	mov	r2, r0
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	1ad3      	subs	r3, r2, r3
 80028e2:	2b02      	cmp	r3, #2
 80028e4:	d902      	bls.n	80028ec <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80028e6:	2303      	movs	r3, #3
 80028e8:	73fb      	strb	r3, [r7, #15]
          break;
 80028ea:	e005      	b.n	80028f8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80028ec:	4b0a      	ldr	r3, [pc, #40]	@ (8002918 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d0ef      	beq.n	80028d8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80028f8:	7bfb      	ldrb	r3, [r7, #15]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d106      	bne.n	800290c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80028fe:	4b06      	ldr	r3, [pc, #24]	@ (8002918 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002900:	691a      	ldr	r2, [r3, #16]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	699b      	ldr	r3, [r3, #24]
 8002906:	4904      	ldr	r1, [pc, #16]	@ (8002918 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002908:	4313      	orrs	r3, r2
 800290a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800290c:	7bfb      	ldrb	r3, [r7, #15]
}
 800290e:	4618      	mov	r0, r3
 8002910:	3710      	adds	r7, #16
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}
 8002916:	bf00      	nop
 8002918:	40021000 	.word	0x40021000

0800291c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b084      	sub	sp, #16
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
 8002924:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002926:	2300      	movs	r3, #0
 8002928:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800292a:	4b6a      	ldr	r3, [pc, #424]	@ (8002ad4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800292c:	68db      	ldr	r3, [r3, #12]
 800292e:	f003 0303 	and.w	r3, r3, #3
 8002932:	2b00      	cmp	r3, #0
 8002934:	d018      	beq.n	8002968 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002936:	4b67      	ldr	r3, [pc, #412]	@ (8002ad4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002938:	68db      	ldr	r3, [r3, #12]
 800293a:	f003 0203 	and.w	r2, r3, #3
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	429a      	cmp	r2, r3
 8002944:	d10d      	bne.n	8002962 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
       ||
 800294a:	2b00      	cmp	r3, #0
 800294c:	d009      	beq.n	8002962 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800294e:	4b61      	ldr	r3, [pc, #388]	@ (8002ad4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002950:	68db      	ldr	r3, [r3, #12]
 8002952:	091b      	lsrs	r3, r3, #4
 8002954:	f003 0307 	and.w	r3, r3, #7
 8002958:	1c5a      	adds	r2, r3, #1
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	685b      	ldr	r3, [r3, #4]
       ||
 800295e:	429a      	cmp	r2, r3
 8002960:	d047      	beq.n	80029f2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	73fb      	strb	r3, [r7, #15]
 8002966:	e044      	b.n	80029f2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	2b03      	cmp	r3, #3
 800296e:	d018      	beq.n	80029a2 <RCCEx_PLLSAI2_Config+0x86>
 8002970:	2b03      	cmp	r3, #3
 8002972:	d825      	bhi.n	80029c0 <RCCEx_PLLSAI2_Config+0xa4>
 8002974:	2b01      	cmp	r3, #1
 8002976:	d002      	beq.n	800297e <RCCEx_PLLSAI2_Config+0x62>
 8002978:	2b02      	cmp	r3, #2
 800297a:	d009      	beq.n	8002990 <RCCEx_PLLSAI2_Config+0x74>
 800297c:	e020      	b.n	80029c0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800297e:	4b55      	ldr	r3, [pc, #340]	@ (8002ad4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 0302 	and.w	r3, r3, #2
 8002986:	2b00      	cmp	r3, #0
 8002988:	d11d      	bne.n	80029c6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800298e:	e01a      	b.n	80029c6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002990:	4b50      	ldr	r3, [pc, #320]	@ (8002ad4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002998:	2b00      	cmp	r3, #0
 800299a:	d116      	bne.n	80029ca <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800299c:	2301      	movs	r3, #1
 800299e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029a0:	e013      	b.n	80029ca <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80029a2:	4b4c      	ldr	r3, [pc, #304]	@ (8002ad4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d10f      	bne.n	80029ce <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80029ae:	4b49      	ldr	r3, [pc, #292]	@ (8002ad4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d109      	bne.n	80029ce <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80029be:	e006      	b.n	80029ce <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80029c0:	2301      	movs	r3, #1
 80029c2:	73fb      	strb	r3, [r7, #15]
      break;
 80029c4:	e004      	b.n	80029d0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80029c6:	bf00      	nop
 80029c8:	e002      	b.n	80029d0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80029ca:	bf00      	nop
 80029cc:	e000      	b.n	80029d0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80029ce:	bf00      	nop
    }

    if(status == HAL_OK)
 80029d0:	7bfb      	ldrb	r3, [r7, #15]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d10d      	bne.n	80029f2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80029d6:	4b3f      	ldr	r3, [pc, #252]	@ (8002ad4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029d8:	68db      	ldr	r3, [r3, #12]
 80029da:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6819      	ldr	r1, [r3, #0]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	3b01      	subs	r3, #1
 80029e8:	011b      	lsls	r3, r3, #4
 80029ea:	430b      	orrs	r3, r1
 80029ec:	4939      	ldr	r1, [pc, #228]	@ (8002ad4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029ee:	4313      	orrs	r3, r2
 80029f0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80029f2:	7bfb      	ldrb	r3, [r7, #15]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d167      	bne.n	8002ac8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80029f8:	4b36      	ldr	r3, [pc, #216]	@ (8002ad4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a35      	ldr	r2, [pc, #212]	@ (8002ad4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029fe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a02:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a04:	f7fe fa18 	bl	8000e38 <HAL_GetTick>
 8002a08:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002a0a:	e009      	b.n	8002a20 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002a0c:	f7fe fa14 	bl	8000e38 <HAL_GetTick>
 8002a10:	4602      	mov	r2, r0
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	1ad3      	subs	r3, r2, r3
 8002a16:	2b02      	cmp	r3, #2
 8002a18:	d902      	bls.n	8002a20 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002a1a:	2303      	movs	r3, #3
 8002a1c:	73fb      	strb	r3, [r7, #15]
        break;
 8002a1e:	e005      	b.n	8002a2c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002a20:	4b2c      	ldr	r3, [pc, #176]	@ (8002ad4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d1ef      	bne.n	8002a0c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002a2c:	7bfb      	ldrb	r3, [r7, #15]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d14a      	bne.n	8002ac8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d111      	bne.n	8002a5c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002a38:	4b26      	ldr	r3, [pc, #152]	@ (8002ad4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a3a:	695b      	ldr	r3, [r3, #20]
 8002a3c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002a40:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a44:	687a      	ldr	r2, [r7, #4]
 8002a46:	6892      	ldr	r2, [r2, #8]
 8002a48:	0211      	lsls	r1, r2, #8
 8002a4a:	687a      	ldr	r2, [r7, #4]
 8002a4c:	68d2      	ldr	r2, [r2, #12]
 8002a4e:	0912      	lsrs	r2, r2, #4
 8002a50:	0452      	lsls	r2, r2, #17
 8002a52:	430a      	orrs	r2, r1
 8002a54:	491f      	ldr	r1, [pc, #124]	@ (8002ad4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a56:	4313      	orrs	r3, r2
 8002a58:	614b      	str	r3, [r1, #20]
 8002a5a:	e011      	b.n	8002a80 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002a5c:	4b1d      	ldr	r3, [pc, #116]	@ (8002ad4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a5e:	695b      	ldr	r3, [r3, #20]
 8002a60:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002a64:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002a68:	687a      	ldr	r2, [r7, #4]
 8002a6a:	6892      	ldr	r2, [r2, #8]
 8002a6c:	0211      	lsls	r1, r2, #8
 8002a6e:	687a      	ldr	r2, [r7, #4]
 8002a70:	6912      	ldr	r2, [r2, #16]
 8002a72:	0852      	lsrs	r2, r2, #1
 8002a74:	3a01      	subs	r2, #1
 8002a76:	0652      	lsls	r2, r2, #25
 8002a78:	430a      	orrs	r2, r1
 8002a7a:	4916      	ldr	r1, [pc, #88]	@ (8002ad4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002a80:	4b14      	ldr	r3, [pc, #80]	@ (8002ad4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a13      	ldr	r2, [pc, #76]	@ (8002ad4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a86:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a8a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a8c:	f7fe f9d4 	bl	8000e38 <HAL_GetTick>
 8002a90:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002a92:	e009      	b.n	8002aa8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002a94:	f7fe f9d0 	bl	8000e38 <HAL_GetTick>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	1ad3      	subs	r3, r2, r3
 8002a9e:	2b02      	cmp	r3, #2
 8002aa0:	d902      	bls.n	8002aa8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002aa2:	2303      	movs	r3, #3
 8002aa4:	73fb      	strb	r3, [r7, #15]
          break;
 8002aa6:	e005      	b.n	8002ab4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002aa8:	4b0a      	ldr	r3, [pc, #40]	@ (8002ad4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d0ef      	beq.n	8002a94 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002ab4:	7bfb      	ldrb	r3, [r7, #15]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d106      	bne.n	8002ac8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002aba:	4b06      	ldr	r3, [pc, #24]	@ (8002ad4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002abc:	695a      	ldr	r2, [r3, #20]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	695b      	ldr	r3, [r3, #20]
 8002ac2:	4904      	ldr	r1, [pc, #16]	@ (8002ad4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002ac8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3710      	adds	r7, #16
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	bf00      	nop
 8002ad4:	40021000 	.word	0x40021000

08002ad8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b082      	sub	sp, #8
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d101      	bne.n	8002aea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e049      	b.n	8002b7e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d106      	bne.n	8002b04 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2200      	movs	r2, #0
 8002afa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	f7fd feda 	bl	80008b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2202      	movs	r2, #2
 8002b08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	3304      	adds	r3, #4
 8002b14:	4619      	mov	r1, r3
 8002b16:	4610      	mov	r0, r2
 8002b18:	f000 faea 	bl	80030f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2201      	movs	r2, #1
 8002b20:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2201      	movs	r2, #1
 8002b28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2201      	movs	r2, #1
 8002b30:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2201      	movs	r2, #1
 8002b38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2201      	movs	r2, #1
 8002b40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2201      	movs	r2, #1
 8002b48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2201      	movs	r2, #1
 8002b50:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2201      	movs	r2, #1
 8002b58:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2201      	movs	r2, #1
 8002b60:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2201      	movs	r2, #1
 8002b68:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2201      	movs	r2, #1
 8002b70:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2201      	movs	r2, #1
 8002b78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002b7c:	2300      	movs	r3, #0
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	3708      	adds	r7, #8
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}
	...

08002b88 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b084      	sub	sp, #16
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
 8002b90:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d109      	bne.n	8002bac <HAL_TIM_OC_Start+0x24>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002b9e:	b2db      	uxtb	r3, r3
 8002ba0:	2b01      	cmp	r3, #1
 8002ba2:	bf14      	ite	ne
 8002ba4:	2301      	movne	r3, #1
 8002ba6:	2300      	moveq	r3, #0
 8002ba8:	b2db      	uxtb	r3, r3
 8002baa:	e03c      	b.n	8002c26 <HAL_TIM_OC_Start+0x9e>
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	2b04      	cmp	r3, #4
 8002bb0:	d109      	bne.n	8002bc6 <HAL_TIM_OC_Start+0x3e>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002bb8:	b2db      	uxtb	r3, r3
 8002bba:	2b01      	cmp	r3, #1
 8002bbc:	bf14      	ite	ne
 8002bbe:	2301      	movne	r3, #1
 8002bc0:	2300      	moveq	r3, #0
 8002bc2:	b2db      	uxtb	r3, r3
 8002bc4:	e02f      	b.n	8002c26 <HAL_TIM_OC_Start+0x9e>
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	2b08      	cmp	r3, #8
 8002bca:	d109      	bne.n	8002be0 <HAL_TIM_OC_Start+0x58>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002bd2:	b2db      	uxtb	r3, r3
 8002bd4:	2b01      	cmp	r3, #1
 8002bd6:	bf14      	ite	ne
 8002bd8:	2301      	movne	r3, #1
 8002bda:	2300      	moveq	r3, #0
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	e022      	b.n	8002c26 <HAL_TIM_OC_Start+0x9e>
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	2b0c      	cmp	r3, #12
 8002be4:	d109      	bne.n	8002bfa <HAL_TIM_OC_Start+0x72>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	2b01      	cmp	r3, #1
 8002bf0:	bf14      	ite	ne
 8002bf2:	2301      	movne	r3, #1
 8002bf4:	2300      	moveq	r3, #0
 8002bf6:	b2db      	uxtb	r3, r3
 8002bf8:	e015      	b.n	8002c26 <HAL_TIM_OC_Start+0x9e>
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	2b10      	cmp	r3, #16
 8002bfe:	d109      	bne.n	8002c14 <HAL_TIM_OC_Start+0x8c>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002c06:	b2db      	uxtb	r3, r3
 8002c08:	2b01      	cmp	r3, #1
 8002c0a:	bf14      	ite	ne
 8002c0c:	2301      	movne	r3, #1
 8002c0e:	2300      	moveq	r3, #0
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	e008      	b.n	8002c26 <HAL_TIM_OC_Start+0x9e>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002c1a:	b2db      	uxtb	r3, r3
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	bf14      	ite	ne
 8002c20:	2301      	movne	r3, #1
 8002c22:	2300      	moveq	r3, #0
 8002c24:	b2db      	uxtb	r3, r3
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d001      	beq.n	8002c2e <HAL_TIM_OC_Start+0xa6>
  {
    return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e09c      	b.n	8002d68 <HAL_TIM_OC_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d104      	bne.n	8002c3e <HAL_TIM_OC_Start+0xb6>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2202      	movs	r2, #2
 8002c38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002c3c:	e023      	b.n	8002c86 <HAL_TIM_OC_Start+0xfe>
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	2b04      	cmp	r3, #4
 8002c42:	d104      	bne.n	8002c4e <HAL_TIM_OC_Start+0xc6>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2202      	movs	r2, #2
 8002c48:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002c4c:	e01b      	b.n	8002c86 <HAL_TIM_OC_Start+0xfe>
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	2b08      	cmp	r3, #8
 8002c52:	d104      	bne.n	8002c5e <HAL_TIM_OC_Start+0xd6>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2202      	movs	r2, #2
 8002c58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002c5c:	e013      	b.n	8002c86 <HAL_TIM_OC_Start+0xfe>
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	2b0c      	cmp	r3, #12
 8002c62:	d104      	bne.n	8002c6e <HAL_TIM_OC_Start+0xe6>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2202      	movs	r2, #2
 8002c68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002c6c:	e00b      	b.n	8002c86 <HAL_TIM_OC_Start+0xfe>
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	2b10      	cmp	r3, #16
 8002c72:	d104      	bne.n	8002c7e <HAL_TIM_OC_Start+0xf6>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2202      	movs	r2, #2
 8002c78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002c7c:	e003      	b.n	8002c86 <HAL_TIM_OC_Start+0xfe>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2202      	movs	r2, #2
 8002c82:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	6839      	ldr	r1, [r7, #0]
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f000 fdaa 	bl	80037e8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a35      	ldr	r2, [pc, #212]	@ (8002d70 <HAL_TIM_OC_Start+0x1e8>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d013      	beq.n	8002cc6 <HAL_TIM_OC_Start+0x13e>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a34      	ldr	r2, [pc, #208]	@ (8002d74 <HAL_TIM_OC_Start+0x1ec>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d00e      	beq.n	8002cc6 <HAL_TIM_OC_Start+0x13e>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a32      	ldr	r2, [pc, #200]	@ (8002d78 <HAL_TIM_OC_Start+0x1f0>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d009      	beq.n	8002cc6 <HAL_TIM_OC_Start+0x13e>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4a31      	ldr	r2, [pc, #196]	@ (8002d7c <HAL_TIM_OC_Start+0x1f4>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d004      	beq.n	8002cc6 <HAL_TIM_OC_Start+0x13e>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a2f      	ldr	r2, [pc, #188]	@ (8002d80 <HAL_TIM_OC_Start+0x1f8>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d101      	bne.n	8002cca <HAL_TIM_OC_Start+0x142>
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e000      	b.n	8002ccc <HAL_TIM_OC_Start+0x144>
 8002cca:	2300      	movs	r3, #0
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d007      	beq.n	8002ce0 <HAL_TIM_OC_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002cde:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a22      	ldr	r2, [pc, #136]	@ (8002d70 <HAL_TIM_OC_Start+0x1e8>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d01d      	beq.n	8002d26 <HAL_TIM_OC_Start+0x19e>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002cf2:	d018      	beq.n	8002d26 <HAL_TIM_OC_Start+0x19e>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a22      	ldr	r2, [pc, #136]	@ (8002d84 <HAL_TIM_OC_Start+0x1fc>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d013      	beq.n	8002d26 <HAL_TIM_OC_Start+0x19e>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a21      	ldr	r2, [pc, #132]	@ (8002d88 <HAL_TIM_OC_Start+0x200>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d00e      	beq.n	8002d26 <HAL_TIM_OC_Start+0x19e>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a1f      	ldr	r2, [pc, #124]	@ (8002d8c <HAL_TIM_OC_Start+0x204>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d009      	beq.n	8002d26 <HAL_TIM_OC_Start+0x19e>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a17      	ldr	r2, [pc, #92]	@ (8002d74 <HAL_TIM_OC_Start+0x1ec>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d004      	beq.n	8002d26 <HAL_TIM_OC_Start+0x19e>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a15      	ldr	r2, [pc, #84]	@ (8002d78 <HAL_TIM_OC_Start+0x1f0>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d115      	bne.n	8002d52 <HAL_TIM_OC_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	689a      	ldr	r2, [r3, #8]
 8002d2c:	4b18      	ldr	r3, [pc, #96]	@ (8002d90 <HAL_TIM_OC_Start+0x208>)
 8002d2e:	4013      	ands	r3, r2
 8002d30:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	2b06      	cmp	r3, #6
 8002d36:	d015      	beq.n	8002d64 <HAL_TIM_OC_Start+0x1dc>
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d3e:	d011      	beq.n	8002d64 <HAL_TIM_OC_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	681a      	ldr	r2, [r3, #0]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f042 0201 	orr.w	r2, r2, #1
 8002d4e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d50:	e008      	b.n	8002d64 <HAL_TIM_OC_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	681a      	ldr	r2, [r3, #0]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f042 0201 	orr.w	r2, r2, #1
 8002d60:	601a      	str	r2, [r3, #0]
 8002d62:	e000      	b.n	8002d66 <HAL_TIM_OC_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d64:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002d66:	2300      	movs	r3, #0
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	3710      	adds	r7, #16
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}
 8002d70:	40012c00 	.word	0x40012c00
 8002d74:	40013400 	.word	0x40013400
 8002d78:	40014000 	.word	0x40014000
 8002d7c:	40014400 	.word	0x40014400
 8002d80:	40014800 	.word	0x40014800
 8002d84:	40000400 	.word	0x40000400
 8002d88:	40000800 	.word	0x40000800
 8002d8c:	40000c00 	.word	0x40000c00
 8002d90:	00010007 	.word	0x00010007

08002d94 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b086      	sub	sp, #24
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
 8002d9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d101      	bne.n	8002da8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	e097      	b.n	8002ed8 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002dae:	b2db      	uxtb	r3, r3
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d106      	bne.n	8002dc2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2200      	movs	r2, #0
 8002db8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002dbc:	6878      	ldr	r0, [r7, #4]
 8002dbe:	f7fd fd4d 	bl	800085c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2202      	movs	r2, #2
 8002dc6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	687a      	ldr	r2, [r7, #4]
 8002dd2:	6812      	ldr	r2, [r2, #0]
 8002dd4:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8002dd8:	f023 0307 	bic.w	r3, r3, #7
 8002ddc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681a      	ldr	r2, [r3, #0]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	3304      	adds	r3, #4
 8002de6:	4619      	mov	r1, r3
 8002de8:	4610      	mov	r0, r2
 8002dea:	f000 f981 	bl	80030f0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	699b      	ldr	r3, [r3, #24]
 8002dfc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	6a1b      	ldr	r3, [r3, #32]
 8002e04:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	697a      	ldr	r2, [r7, #20]
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002e10:	693b      	ldr	r3, [r7, #16]
 8002e12:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e16:	f023 0303 	bic.w	r3, r3, #3
 8002e1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	689a      	ldr	r2, [r3, #8]
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	699b      	ldr	r3, [r3, #24]
 8002e24:	021b      	lsls	r3, r3, #8
 8002e26:	4313      	orrs	r3, r2
 8002e28:	693a      	ldr	r2, [r7, #16]
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8002e34:	f023 030c 	bic.w	r3, r3, #12
 8002e38:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002e40:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002e44:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	68da      	ldr	r2, [r3, #12]
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	69db      	ldr	r3, [r3, #28]
 8002e4e:	021b      	lsls	r3, r3, #8
 8002e50:	4313      	orrs	r3, r2
 8002e52:	693a      	ldr	r2, [r7, #16]
 8002e54:	4313      	orrs	r3, r2
 8002e56:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	691b      	ldr	r3, [r3, #16]
 8002e5c:	011a      	lsls	r2, r3, #4
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	6a1b      	ldr	r3, [r3, #32]
 8002e62:	031b      	lsls	r3, r3, #12
 8002e64:	4313      	orrs	r3, r2
 8002e66:	693a      	ldr	r2, [r7, #16]
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8002e72:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8002e7a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	685a      	ldr	r2, [r3, #4]
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	695b      	ldr	r3, [r3, #20]
 8002e84:	011b      	lsls	r3, r3, #4
 8002e86:	4313      	orrs	r3, r2
 8002e88:	68fa      	ldr	r2, [r7, #12]
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	697a      	ldr	r2, [r7, #20]
 8002e94:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	693a      	ldr	r2, [r7, #16]
 8002e9c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	68fa      	ldr	r2, [r7, #12]
 8002ea4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2201      	movs	r2, #1
 8002eaa:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2201      	movs	r2, #1
 8002eb2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2201      	movs	r2, #1
 8002eba:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2201      	movs	r2, #1
 8002ec2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2201      	movs	r2, #1
 8002eca:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002ed6:	2300      	movs	r3, #0
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	3718      	adds	r7, #24
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}

08002ee0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b084      	sub	sp, #16
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
 8002ee8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002ef0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002ef8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002f00:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002f08:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d110      	bne.n	8002f32 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002f10:	7bfb      	ldrb	r3, [r7, #15]
 8002f12:	2b01      	cmp	r3, #1
 8002f14:	d102      	bne.n	8002f1c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8002f16:	7b7b      	ldrb	r3, [r7, #13]
 8002f18:	2b01      	cmp	r3, #1
 8002f1a:	d001      	beq.n	8002f20 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	e069      	b.n	8002ff4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2202      	movs	r2, #2
 8002f24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2202      	movs	r2, #2
 8002f2c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002f30:	e031      	b.n	8002f96 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	2b04      	cmp	r3, #4
 8002f36:	d110      	bne.n	8002f5a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002f38:	7bbb      	ldrb	r3, [r7, #14]
 8002f3a:	2b01      	cmp	r3, #1
 8002f3c:	d102      	bne.n	8002f44 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002f3e:	7b3b      	ldrb	r3, [r7, #12]
 8002f40:	2b01      	cmp	r3, #1
 8002f42:	d001      	beq.n	8002f48 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8002f44:	2301      	movs	r3, #1
 8002f46:	e055      	b.n	8002ff4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2202      	movs	r2, #2
 8002f4c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2202      	movs	r2, #2
 8002f54:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002f58:	e01d      	b.n	8002f96 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002f5a:	7bfb      	ldrb	r3, [r7, #15]
 8002f5c:	2b01      	cmp	r3, #1
 8002f5e:	d108      	bne.n	8002f72 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002f60:	7bbb      	ldrb	r3, [r7, #14]
 8002f62:	2b01      	cmp	r3, #1
 8002f64:	d105      	bne.n	8002f72 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002f66:	7b7b      	ldrb	r3, [r7, #13]
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	d102      	bne.n	8002f72 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002f6c:	7b3b      	ldrb	r3, [r7, #12]
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	d001      	beq.n	8002f76 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	e03e      	b.n	8002ff4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2202      	movs	r2, #2
 8002f7a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2202      	movs	r2, #2
 8002f82:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2202      	movs	r2, #2
 8002f8a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2202      	movs	r2, #2
 8002f92:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d003      	beq.n	8002fa4 <HAL_TIM_Encoder_Start+0xc4>
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	2b04      	cmp	r3, #4
 8002fa0:	d008      	beq.n	8002fb4 <HAL_TIM_Encoder_Start+0xd4>
 8002fa2:	e00f      	b.n	8002fc4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	2201      	movs	r2, #1
 8002faa:	2100      	movs	r1, #0
 8002fac:	4618      	mov	r0, r3
 8002fae:	f000 fc1b 	bl	80037e8 <TIM_CCxChannelCmd>
      break;
 8002fb2:	e016      	b.n	8002fe2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	2201      	movs	r2, #1
 8002fba:	2104      	movs	r1, #4
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f000 fc13 	bl	80037e8 <TIM_CCxChannelCmd>
      break;
 8002fc2:	e00e      	b.n	8002fe2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	2201      	movs	r2, #1
 8002fca:	2100      	movs	r1, #0
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f000 fc0b 	bl	80037e8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	2104      	movs	r1, #4
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f000 fc04 	bl	80037e8 <TIM_CCxChannelCmd>
      break;
 8002fe0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f042 0201 	orr.w	r2, r2, #1
 8002ff0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002ff2:	2300      	movs	r3, #0
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	3710      	adds	r7, #16
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd80      	pop	{r7, pc}

08002ffc <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b086      	sub	sp, #24
 8003000:	af00      	add	r7, sp, #0
 8003002:	60f8      	str	r0, [r7, #12]
 8003004:	60b9      	str	r1, [r7, #8]
 8003006:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003008:	2300      	movs	r3, #0
 800300a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003012:	2b01      	cmp	r3, #1
 8003014:	d101      	bne.n	800301a <HAL_TIM_OC_ConfigChannel+0x1e>
 8003016:	2302      	movs	r3, #2
 8003018:	e066      	b.n	80030e8 <HAL_TIM_OC_ConfigChannel+0xec>
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	2201      	movs	r2, #1
 800301e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2b14      	cmp	r3, #20
 8003026:	d857      	bhi.n	80030d8 <HAL_TIM_OC_ConfigChannel+0xdc>
 8003028:	a201      	add	r2, pc, #4	@ (adr r2, 8003030 <HAL_TIM_OC_ConfigChannel+0x34>)
 800302a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800302e:	bf00      	nop
 8003030:	08003085 	.word	0x08003085
 8003034:	080030d9 	.word	0x080030d9
 8003038:	080030d9 	.word	0x080030d9
 800303c:	080030d9 	.word	0x080030d9
 8003040:	08003093 	.word	0x08003093
 8003044:	080030d9 	.word	0x080030d9
 8003048:	080030d9 	.word	0x080030d9
 800304c:	080030d9 	.word	0x080030d9
 8003050:	080030a1 	.word	0x080030a1
 8003054:	080030d9 	.word	0x080030d9
 8003058:	080030d9 	.word	0x080030d9
 800305c:	080030d9 	.word	0x080030d9
 8003060:	080030af 	.word	0x080030af
 8003064:	080030d9 	.word	0x080030d9
 8003068:	080030d9 	.word	0x080030d9
 800306c:	080030d9 	.word	0x080030d9
 8003070:	080030bd 	.word	0x080030bd
 8003074:	080030d9 	.word	0x080030d9
 8003078:	080030d9 	.word	0x080030d9
 800307c:	080030d9 	.word	0x080030d9
 8003080:	080030cb 	.word	0x080030cb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	68b9      	ldr	r1, [r7, #8]
 800308a:	4618      	mov	r0, r3
 800308c:	f000 f8d6 	bl	800323c <TIM_OC1_SetConfig>
      break;
 8003090:	e025      	b.n	80030de <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	68b9      	ldr	r1, [r7, #8]
 8003098:	4618      	mov	r0, r3
 800309a:	f000 f95f 	bl	800335c <TIM_OC2_SetConfig>
      break;
 800309e:	e01e      	b.n	80030de <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	68b9      	ldr	r1, [r7, #8]
 80030a6:	4618      	mov	r0, r3
 80030a8:	f000 f9e2 	bl	8003470 <TIM_OC3_SetConfig>
      break;
 80030ac:	e017      	b.n	80030de <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	68b9      	ldr	r1, [r7, #8]
 80030b4:	4618      	mov	r0, r3
 80030b6:	f000 fa63 	bl	8003580 <TIM_OC4_SetConfig>
      break;
 80030ba:	e010      	b.n	80030de <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	68b9      	ldr	r1, [r7, #8]
 80030c2:	4618      	mov	r0, r3
 80030c4:	f000 fac6 	bl	8003654 <TIM_OC5_SetConfig>
      break;
 80030c8:	e009      	b.n	80030de <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	68b9      	ldr	r1, [r7, #8]
 80030d0:	4618      	mov	r0, r3
 80030d2:	f000 fb23 	bl	800371c <TIM_OC6_SetConfig>
      break;
 80030d6:	e002      	b.n	80030de <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 80030d8:	2301      	movs	r3, #1
 80030da:	75fb      	strb	r3, [r7, #23]
      break;
 80030dc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2200      	movs	r2, #0
 80030e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80030e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80030e8:	4618      	mov	r0, r3
 80030ea:	3718      	adds	r7, #24
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bd80      	pop	{r7, pc}

080030f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b085      	sub	sp, #20
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
 80030f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	4a46      	ldr	r2, [pc, #280]	@ (800321c <TIM_Base_SetConfig+0x12c>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d013      	beq.n	8003130 <TIM_Base_SetConfig+0x40>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800310e:	d00f      	beq.n	8003130 <TIM_Base_SetConfig+0x40>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	4a43      	ldr	r2, [pc, #268]	@ (8003220 <TIM_Base_SetConfig+0x130>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d00b      	beq.n	8003130 <TIM_Base_SetConfig+0x40>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	4a42      	ldr	r2, [pc, #264]	@ (8003224 <TIM_Base_SetConfig+0x134>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d007      	beq.n	8003130 <TIM_Base_SetConfig+0x40>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	4a41      	ldr	r2, [pc, #260]	@ (8003228 <TIM_Base_SetConfig+0x138>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d003      	beq.n	8003130 <TIM_Base_SetConfig+0x40>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	4a40      	ldr	r2, [pc, #256]	@ (800322c <TIM_Base_SetConfig+0x13c>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d108      	bne.n	8003142 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003136:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	68fa      	ldr	r2, [r7, #12]
 800313e:	4313      	orrs	r3, r2
 8003140:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	4a35      	ldr	r2, [pc, #212]	@ (800321c <TIM_Base_SetConfig+0x12c>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d01f      	beq.n	800318a <TIM_Base_SetConfig+0x9a>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003150:	d01b      	beq.n	800318a <TIM_Base_SetConfig+0x9a>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	4a32      	ldr	r2, [pc, #200]	@ (8003220 <TIM_Base_SetConfig+0x130>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d017      	beq.n	800318a <TIM_Base_SetConfig+0x9a>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	4a31      	ldr	r2, [pc, #196]	@ (8003224 <TIM_Base_SetConfig+0x134>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d013      	beq.n	800318a <TIM_Base_SetConfig+0x9a>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	4a30      	ldr	r2, [pc, #192]	@ (8003228 <TIM_Base_SetConfig+0x138>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d00f      	beq.n	800318a <TIM_Base_SetConfig+0x9a>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	4a2f      	ldr	r2, [pc, #188]	@ (800322c <TIM_Base_SetConfig+0x13c>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d00b      	beq.n	800318a <TIM_Base_SetConfig+0x9a>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	4a2e      	ldr	r2, [pc, #184]	@ (8003230 <TIM_Base_SetConfig+0x140>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d007      	beq.n	800318a <TIM_Base_SetConfig+0x9a>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	4a2d      	ldr	r2, [pc, #180]	@ (8003234 <TIM_Base_SetConfig+0x144>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d003      	beq.n	800318a <TIM_Base_SetConfig+0x9a>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	4a2c      	ldr	r2, [pc, #176]	@ (8003238 <TIM_Base_SetConfig+0x148>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d108      	bne.n	800319c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003190:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	68db      	ldr	r3, [r3, #12]
 8003196:	68fa      	ldr	r2, [r7, #12]
 8003198:	4313      	orrs	r3, r2
 800319a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	695b      	ldr	r3, [r3, #20]
 80031a6:	4313      	orrs	r3, r2
 80031a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	68fa      	ldr	r2, [r7, #12]
 80031ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	689a      	ldr	r2, [r3, #8]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	681a      	ldr	r2, [r3, #0]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	4a16      	ldr	r2, [pc, #88]	@ (800321c <TIM_Base_SetConfig+0x12c>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d00f      	beq.n	80031e8 <TIM_Base_SetConfig+0xf8>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	4a18      	ldr	r2, [pc, #96]	@ (800322c <TIM_Base_SetConfig+0x13c>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d00b      	beq.n	80031e8 <TIM_Base_SetConfig+0xf8>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	4a17      	ldr	r2, [pc, #92]	@ (8003230 <TIM_Base_SetConfig+0x140>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d007      	beq.n	80031e8 <TIM_Base_SetConfig+0xf8>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	4a16      	ldr	r2, [pc, #88]	@ (8003234 <TIM_Base_SetConfig+0x144>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d003      	beq.n	80031e8 <TIM_Base_SetConfig+0xf8>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	4a15      	ldr	r2, [pc, #84]	@ (8003238 <TIM_Base_SetConfig+0x148>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d103      	bne.n	80031f0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	691a      	ldr	r2, [r3, #16]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2201      	movs	r2, #1
 80031f4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	691b      	ldr	r3, [r3, #16]
 80031fa:	f003 0301 	and.w	r3, r3, #1
 80031fe:	2b01      	cmp	r3, #1
 8003200:	d105      	bne.n	800320e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	691b      	ldr	r3, [r3, #16]
 8003206:	f023 0201 	bic.w	r2, r3, #1
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	611a      	str	r2, [r3, #16]
  }
}
 800320e:	bf00      	nop
 8003210:	3714      	adds	r7, #20
 8003212:	46bd      	mov	sp, r7
 8003214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003218:	4770      	bx	lr
 800321a:	bf00      	nop
 800321c:	40012c00 	.word	0x40012c00
 8003220:	40000400 	.word	0x40000400
 8003224:	40000800 	.word	0x40000800
 8003228:	40000c00 	.word	0x40000c00
 800322c:	40013400 	.word	0x40013400
 8003230:	40014000 	.word	0x40014000
 8003234:	40014400 	.word	0x40014400
 8003238:	40014800 	.word	0x40014800

0800323c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800323c:	b480      	push	{r7}
 800323e:	b087      	sub	sp, #28
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
 8003244:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6a1b      	ldr	r3, [r3, #32]
 800324a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6a1b      	ldr	r3, [r3, #32]
 8003250:	f023 0201 	bic.w	r2, r3, #1
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	699b      	ldr	r3, [r3, #24]
 8003262:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800326a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800326e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	f023 0303 	bic.w	r3, r3, #3
 8003276:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	68fa      	ldr	r2, [r7, #12]
 800327e:	4313      	orrs	r3, r2
 8003280:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	f023 0302 	bic.w	r3, r3, #2
 8003288:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	697a      	ldr	r2, [r7, #20]
 8003290:	4313      	orrs	r3, r2
 8003292:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	4a2c      	ldr	r2, [pc, #176]	@ (8003348 <TIM_OC1_SetConfig+0x10c>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d00f      	beq.n	80032bc <TIM_OC1_SetConfig+0x80>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	4a2b      	ldr	r2, [pc, #172]	@ (800334c <TIM_OC1_SetConfig+0x110>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d00b      	beq.n	80032bc <TIM_OC1_SetConfig+0x80>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	4a2a      	ldr	r2, [pc, #168]	@ (8003350 <TIM_OC1_SetConfig+0x114>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d007      	beq.n	80032bc <TIM_OC1_SetConfig+0x80>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	4a29      	ldr	r2, [pc, #164]	@ (8003354 <TIM_OC1_SetConfig+0x118>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d003      	beq.n	80032bc <TIM_OC1_SetConfig+0x80>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	4a28      	ldr	r2, [pc, #160]	@ (8003358 <TIM_OC1_SetConfig+0x11c>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d10c      	bne.n	80032d6 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	f023 0308 	bic.w	r3, r3, #8
 80032c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	68db      	ldr	r3, [r3, #12]
 80032c8:	697a      	ldr	r2, [r7, #20]
 80032ca:	4313      	orrs	r3, r2
 80032cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	f023 0304 	bic.w	r3, r3, #4
 80032d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	4a1b      	ldr	r2, [pc, #108]	@ (8003348 <TIM_OC1_SetConfig+0x10c>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d00f      	beq.n	80032fe <TIM_OC1_SetConfig+0xc2>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	4a1a      	ldr	r2, [pc, #104]	@ (800334c <TIM_OC1_SetConfig+0x110>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d00b      	beq.n	80032fe <TIM_OC1_SetConfig+0xc2>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	4a19      	ldr	r2, [pc, #100]	@ (8003350 <TIM_OC1_SetConfig+0x114>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d007      	beq.n	80032fe <TIM_OC1_SetConfig+0xc2>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	4a18      	ldr	r2, [pc, #96]	@ (8003354 <TIM_OC1_SetConfig+0x118>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d003      	beq.n	80032fe <TIM_OC1_SetConfig+0xc2>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	4a17      	ldr	r2, [pc, #92]	@ (8003358 <TIM_OC1_SetConfig+0x11c>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d111      	bne.n	8003322 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003304:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800330c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	695b      	ldr	r3, [r3, #20]
 8003312:	693a      	ldr	r2, [r7, #16]
 8003314:	4313      	orrs	r3, r2
 8003316:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	699b      	ldr	r3, [r3, #24]
 800331c:	693a      	ldr	r2, [r7, #16]
 800331e:	4313      	orrs	r3, r2
 8003320:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	693a      	ldr	r2, [r7, #16]
 8003326:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	68fa      	ldr	r2, [r7, #12]
 800332c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	685a      	ldr	r2, [r3, #4]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	697a      	ldr	r2, [r7, #20]
 800333a:	621a      	str	r2, [r3, #32]
}
 800333c:	bf00      	nop
 800333e:	371c      	adds	r7, #28
 8003340:	46bd      	mov	sp, r7
 8003342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003346:	4770      	bx	lr
 8003348:	40012c00 	.word	0x40012c00
 800334c:	40013400 	.word	0x40013400
 8003350:	40014000 	.word	0x40014000
 8003354:	40014400 	.word	0x40014400
 8003358:	40014800 	.word	0x40014800

0800335c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800335c:	b480      	push	{r7}
 800335e:	b087      	sub	sp, #28
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
 8003364:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6a1b      	ldr	r3, [r3, #32]
 800336a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6a1b      	ldr	r3, [r3, #32]
 8003370:	f023 0210 	bic.w	r2, r3, #16
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	699b      	ldr	r3, [r3, #24]
 8003382:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800338a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800338e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003396:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	021b      	lsls	r3, r3, #8
 800339e:	68fa      	ldr	r2, [r7, #12]
 80033a0:	4313      	orrs	r3, r2
 80033a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	f023 0320 	bic.w	r3, r3, #32
 80033aa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	011b      	lsls	r3, r3, #4
 80033b2:	697a      	ldr	r2, [r7, #20]
 80033b4:	4313      	orrs	r3, r2
 80033b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	4a28      	ldr	r2, [pc, #160]	@ (800345c <TIM_OC2_SetConfig+0x100>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d003      	beq.n	80033c8 <TIM_OC2_SetConfig+0x6c>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	4a27      	ldr	r2, [pc, #156]	@ (8003460 <TIM_OC2_SetConfig+0x104>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d10d      	bne.n	80033e4 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80033ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	68db      	ldr	r3, [r3, #12]
 80033d4:	011b      	lsls	r3, r3, #4
 80033d6:	697a      	ldr	r2, [r7, #20]
 80033d8:	4313      	orrs	r3, r2
 80033da:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80033e2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	4a1d      	ldr	r2, [pc, #116]	@ (800345c <TIM_OC2_SetConfig+0x100>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d00f      	beq.n	800340c <TIM_OC2_SetConfig+0xb0>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	4a1c      	ldr	r2, [pc, #112]	@ (8003460 <TIM_OC2_SetConfig+0x104>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d00b      	beq.n	800340c <TIM_OC2_SetConfig+0xb0>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	4a1b      	ldr	r2, [pc, #108]	@ (8003464 <TIM_OC2_SetConfig+0x108>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d007      	beq.n	800340c <TIM_OC2_SetConfig+0xb0>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	4a1a      	ldr	r2, [pc, #104]	@ (8003468 <TIM_OC2_SetConfig+0x10c>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d003      	beq.n	800340c <TIM_OC2_SetConfig+0xb0>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	4a19      	ldr	r2, [pc, #100]	@ (800346c <TIM_OC2_SetConfig+0x110>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d113      	bne.n	8003434 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003412:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800341a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	695b      	ldr	r3, [r3, #20]
 8003420:	009b      	lsls	r3, r3, #2
 8003422:	693a      	ldr	r2, [r7, #16]
 8003424:	4313      	orrs	r3, r2
 8003426:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	699b      	ldr	r3, [r3, #24]
 800342c:	009b      	lsls	r3, r3, #2
 800342e:	693a      	ldr	r2, [r7, #16]
 8003430:	4313      	orrs	r3, r2
 8003432:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	693a      	ldr	r2, [r7, #16]
 8003438:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	68fa      	ldr	r2, [r7, #12]
 800343e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	685a      	ldr	r2, [r3, #4]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	697a      	ldr	r2, [r7, #20]
 800344c:	621a      	str	r2, [r3, #32]
}
 800344e:	bf00      	nop
 8003450:	371c      	adds	r7, #28
 8003452:	46bd      	mov	sp, r7
 8003454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003458:	4770      	bx	lr
 800345a:	bf00      	nop
 800345c:	40012c00 	.word	0x40012c00
 8003460:	40013400 	.word	0x40013400
 8003464:	40014000 	.word	0x40014000
 8003468:	40014400 	.word	0x40014400
 800346c:	40014800 	.word	0x40014800

08003470 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003470:	b480      	push	{r7}
 8003472:	b087      	sub	sp, #28
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
 8003478:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6a1b      	ldr	r3, [r3, #32]
 800347e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6a1b      	ldr	r3, [r3, #32]
 8003484:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	69db      	ldr	r3, [r3, #28]
 8003496:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800349e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80034a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	f023 0303 	bic.w	r3, r3, #3
 80034aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	68fa      	ldr	r2, [r7, #12]
 80034b2:	4313      	orrs	r3, r2
 80034b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80034bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	021b      	lsls	r3, r3, #8
 80034c4:	697a      	ldr	r2, [r7, #20]
 80034c6:	4313      	orrs	r3, r2
 80034c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	4a27      	ldr	r2, [pc, #156]	@ (800356c <TIM_OC3_SetConfig+0xfc>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d003      	beq.n	80034da <TIM_OC3_SetConfig+0x6a>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	4a26      	ldr	r2, [pc, #152]	@ (8003570 <TIM_OC3_SetConfig+0x100>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d10d      	bne.n	80034f6 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80034e0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	68db      	ldr	r3, [r3, #12]
 80034e6:	021b      	lsls	r3, r3, #8
 80034e8:	697a      	ldr	r2, [r7, #20]
 80034ea:	4313      	orrs	r3, r2
 80034ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80034f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	4a1c      	ldr	r2, [pc, #112]	@ (800356c <TIM_OC3_SetConfig+0xfc>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d00f      	beq.n	800351e <TIM_OC3_SetConfig+0xae>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	4a1b      	ldr	r2, [pc, #108]	@ (8003570 <TIM_OC3_SetConfig+0x100>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d00b      	beq.n	800351e <TIM_OC3_SetConfig+0xae>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	4a1a      	ldr	r2, [pc, #104]	@ (8003574 <TIM_OC3_SetConfig+0x104>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d007      	beq.n	800351e <TIM_OC3_SetConfig+0xae>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	4a19      	ldr	r2, [pc, #100]	@ (8003578 <TIM_OC3_SetConfig+0x108>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d003      	beq.n	800351e <TIM_OC3_SetConfig+0xae>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	4a18      	ldr	r2, [pc, #96]	@ (800357c <TIM_OC3_SetConfig+0x10c>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d113      	bne.n	8003546 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003524:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800352c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	695b      	ldr	r3, [r3, #20]
 8003532:	011b      	lsls	r3, r3, #4
 8003534:	693a      	ldr	r2, [r7, #16]
 8003536:	4313      	orrs	r3, r2
 8003538:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	699b      	ldr	r3, [r3, #24]
 800353e:	011b      	lsls	r3, r3, #4
 8003540:	693a      	ldr	r2, [r7, #16]
 8003542:	4313      	orrs	r3, r2
 8003544:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	693a      	ldr	r2, [r7, #16]
 800354a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	68fa      	ldr	r2, [r7, #12]
 8003550:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	685a      	ldr	r2, [r3, #4]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	697a      	ldr	r2, [r7, #20]
 800355e:	621a      	str	r2, [r3, #32]
}
 8003560:	bf00      	nop
 8003562:	371c      	adds	r7, #28
 8003564:	46bd      	mov	sp, r7
 8003566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356a:	4770      	bx	lr
 800356c:	40012c00 	.word	0x40012c00
 8003570:	40013400 	.word	0x40013400
 8003574:	40014000 	.word	0x40014000
 8003578:	40014400 	.word	0x40014400
 800357c:	40014800 	.word	0x40014800

08003580 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003580:	b480      	push	{r7}
 8003582:	b087      	sub	sp, #28
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
 8003588:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6a1b      	ldr	r3, [r3, #32]
 800358e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6a1b      	ldr	r3, [r3, #32]
 8003594:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	69db      	ldr	r3, [r3, #28]
 80035a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80035ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80035b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80035ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	021b      	lsls	r3, r3, #8
 80035c2:	68fa      	ldr	r2, [r7, #12]
 80035c4:	4313      	orrs	r3, r2
 80035c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80035ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	031b      	lsls	r3, r3, #12
 80035d6:	693a      	ldr	r2, [r7, #16]
 80035d8:	4313      	orrs	r3, r2
 80035da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	4a18      	ldr	r2, [pc, #96]	@ (8003640 <TIM_OC4_SetConfig+0xc0>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d00f      	beq.n	8003604 <TIM_OC4_SetConfig+0x84>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	4a17      	ldr	r2, [pc, #92]	@ (8003644 <TIM_OC4_SetConfig+0xc4>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d00b      	beq.n	8003604 <TIM_OC4_SetConfig+0x84>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	4a16      	ldr	r2, [pc, #88]	@ (8003648 <TIM_OC4_SetConfig+0xc8>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d007      	beq.n	8003604 <TIM_OC4_SetConfig+0x84>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	4a15      	ldr	r2, [pc, #84]	@ (800364c <TIM_OC4_SetConfig+0xcc>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d003      	beq.n	8003604 <TIM_OC4_SetConfig+0x84>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	4a14      	ldr	r2, [pc, #80]	@ (8003650 <TIM_OC4_SetConfig+0xd0>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d109      	bne.n	8003618 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800360a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	695b      	ldr	r3, [r3, #20]
 8003610:	019b      	lsls	r3, r3, #6
 8003612:	697a      	ldr	r2, [r7, #20]
 8003614:	4313      	orrs	r3, r2
 8003616:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	697a      	ldr	r2, [r7, #20]
 800361c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	68fa      	ldr	r2, [r7, #12]
 8003622:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	685a      	ldr	r2, [r3, #4]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	693a      	ldr	r2, [r7, #16]
 8003630:	621a      	str	r2, [r3, #32]
}
 8003632:	bf00      	nop
 8003634:	371c      	adds	r7, #28
 8003636:	46bd      	mov	sp, r7
 8003638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363c:	4770      	bx	lr
 800363e:	bf00      	nop
 8003640:	40012c00 	.word	0x40012c00
 8003644:	40013400 	.word	0x40013400
 8003648:	40014000 	.word	0x40014000
 800364c:	40014400 	.word	0x40014400
 8003650:	40014800 	.word	0x40014800

08003654 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003654:	b480      	push	{r7}
 8003656:	b087      	sub	sp, #28
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
 800365c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6a1b      	ldr	r3, [r3, #32]
 8003662:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6a1b      	ldr	r3, [r3, #32]
 8003668:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800367a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003682:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003686:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	68fa      	ldr	r2, [r7, #12]
 800368e:	4313      	orrs	r3, r2
 8003690:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8003698:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	041b      	lsls	r3, r3, #16
 80036a0:	693a      	ldr	r2, [r7, #16]
 80036a2:	4313      	orrs	r3, r2
 80036a4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	4a17      	ldr	r2, [pc, #92]	@ (8003708 <TIM_OC5_SetConfig+0xb4>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d00f      	beq.n	80036ce <TIM_OC5_SetConfig+0x7a>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	4a16      	ldr	r2, [pc, #88]	@ (800370c <TIM_OC5_SetConfig+0xb8>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d00b      	beq.n	80036ce <TIM_OC5_SetConfig+0x7a>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	4a15      	ldr	r2, [pc, #84]	@ (8003710 <TIM_OC5_SetConfig+0xbc>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d007      	beq.n	80036ce <TIM_OC5_SetConfig+0x7a>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	4a14      	ldr	r2, [pc, #80]	@ (8003714 <TIM_OC5_SetConfig+0xc0>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d003      	beq.n	80036ce <TIM_OC5_SetConfig+0x7a>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	4a13      	ldr	r2, [pc, #76]	@ (8003718 <TIM_OC5_SetConfig+0xc4>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d109      	bne.n	80036e2 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80036ce:	697b      	ldr	r3, [r7, #20]
 80036d0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80036d4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	695b      	ldr	r3, [r3, #20]
 80036da:	021b      	lsls	r3, r3, #8
 80036dc:	697a      	ldr	r2, [r7, #20]
 80036de:	4313      	orrs	r3, r2
 80036e0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	697a      	ldr	r2, [r7, #20]
 80036e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	68fa      	ldr	r2, [r7, #12]
 80036ec:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	685a      	ldr	r2, [r3, #4]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	693a      	ldr	r2, [r7, #16]
 80036fa:	621a      	str	r2, [r3, #32]
}
 80036fc:	bf00      	nop
 80036fe:	371c      	adds	r7, #28
 8003700:	46bd      	mov	sp, r7
 8003702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003706:	4770      	bx	lr
 8003708:	40012c00 	.word	0x40012c00
 800370c:	40013400 	.word	0x40013400
 8003710:	40014000 	.word	0x40014000
 8003714:	40014400 	.word	0x40014400
 8003718:	40014800 	.word	0x40014800

0800371c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800371c:	b480      	push	{r7}
 800371e:	b087      	sub	sp, #28
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
 8003724:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6a1b      	ldr	r3, [r3, #32]
 800372a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6a1b      	ldr	r3, [r3, #32]
 8003730:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003742:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800374a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800374e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	021b      	lsls	r3, r3, #8
 8003756:	68fa      	ldr	r2, [r7, #12]
 8003758:	4313      	orrs	r3, r2
 800375a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003762:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	689b      	ldr	r3, [r3, #8]
 8003768:	051b      	lsls	r3, r3, #20
 800376a:	693a      	ldr	r2, [r7, #16]
 800376c:	4313      	orrs	r3, r2
 800376e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	4a18      	ldr	r2, [pc, #96]	@ (80037d4 <TIM_OC6_SetConfig+0xb8>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d00f      	beq.n	8003798 <TIM_OC6_SetConfig+0x7c>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	4a17      	ldr	r2, [pc, #92]	@ (80037d8 <TIM_OC6_SetConfig+0xbc>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d00b      	beq.n	8003798 <TIM_OC6_SetConfig+0x7c>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	4a16      	ldr	r2, [pc, #88]	@ (80037dc <TIM_OC6_SetConfig+0xc0>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d007      	beq.n	8003798 <TIM_OC6_SetConfig+0x7c>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	4a15      	ldr	r2, [pc, #84]	@ (80037e0 <TIM_OC6_SetConfig+0xc4>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d003      	beq.n	8003798 <TIM_OC6_SetConfig+0x7c>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	4a14      	ldr	r2, [pc, #80]	@ (80037e4 <TIM_OC6_SetConfig+0xc8>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d109      	bne.n	80037ac <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800379e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	695b      	ldr	r3, [r3, #20]
 80037a4:	029b      	lsls	r3, r3, #10
 80037a6:	697a      	ldr	r2, [r7, #20]
 80037a8:	4313      	orrs	r3, r2
 80037aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	697a      	ldr	r2, [r7, #20]
 80037b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	68fa      	ldr	r2, [r7, #12]
 80037b6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	685a      	ldr	r2, [r3, #4]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	693a      	ldr	r2, [r7, #16]
 80037c4:	621a      	str	r2, [r3, #32]
}
 80037c6:	bf00      	nop
 80037c8:	371c      	adds	r7, #28
 80037ca:	46bd      	mov	sp, r7
 80037cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d0:	4770      	bx	lr
 80037d2:	bf00      	nop
 80037d4:	40012c00 	.word	0x40012c00
 80037d8:	40013400 	.word	0x40013400
 80037dc:	40014000 	.word	0x40014000
 80037e0:	40014400 	.word	0x40014400
 80037e4:	40014800 	.word	0x40014800

080037e8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80037e8:	b480      	push	{r7}
 80037ea:	b087      	sub	sp, #28
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	60f8      	str	r0, [r7, #12]
 80037f0:	60b9      	str	r1, [r7, #8]
 80037f2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	f003 031f 	and.w	r3, r3, #31
 80037fa:	2201      	movs	r2, #1
 80037fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003800:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	6a1a      	ldr	r2, [r3, #32]
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	43db      	mvns	r3, r3
 800380a:	401a      	ands	r2, r3
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	6a1a      	ldr	r2, [r3, #32]
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	f003 031f 	and.w	r3, r3, #31
 800381a:	6879      	ldr	r1, [r7, #4]
 800381c:	fa01 f303 	lsl.w	r3, r1, r3
 8003820:	431a      	orrs	r2, r3
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	621a      	str	r2, [r3, #32]
}
 8003826:	bf00      	nop
 8003828:	371c      	adds	r7, #28
 800382a:	46bd      	mov	sp, r7
 800382c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003830:	4770      	bx	lr

08003832 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003832:	b580      	push	{r7, lr}
 8003834:	b082      	sub	sp, #8
 8003836:	af00      	add	r7, sp, #0
 8003838:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d101      	bne.n	8003844 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003840:	2301      	movs	r3, #1
 8003842:	e040      	b.n	80038c6 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003848:	2b00      	cmp	r3, #0
 800384a:	d106      	bne.n	800385a <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2200      	movs	r2, #0
 8003850:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003854:	6878      	ldr	r0, [r7, #4]
 8003856:	f7fd f97b 	bl	8000b50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2224      	movs	r2, #36	@ 0x24
 800385e:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	681a      	ldr	r2, [r3, #0]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f022 0201 	bic.w	r2, r2, #1
 800386e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003874:	2b00      	cmp	r3, #0
 8003876:	d002      	beq.n	800387e <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003878:	6878      	ldr	r0, [r7, #4]
 800387a:	f000 fb69 	bl	8003f50 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800387e:	6878      	ldr	r0, [r7, #4]
 8003880:	f000 f8ae 	bl	80039e0 <UART_SetConfig>
 8003884:	4603      	mov	r3, r0
 8003886:	2b01      	cmp	r3, #1
 8003888:	d101      	bne.n	800388e <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	e01b      	b.n	80038c6 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	685a      	ldr	r2, [r3, #4]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800389c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	689a      	ldr	r2, [r3, #8]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80038ac:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	681a      	ldr	r2, [r3, #0]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f042 0201 	orr.w	r2, r2, #1
 80038bc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	f000 fbe8 	bl	8004094 <UART_CheckIdleState>
 80038c4:	4603      	mov	r3, r0
}
 80038c6:	4618      	mov	r0, r3
 80038c8:	3708      	adds	r7, #8
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}

080038ce <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038ce:	b580      	push	{r7, lr}
 80038d0:	b08a      	sub	sp, #40	@ 0x28
 80038d2:	af02      	add	r7, sp, #8
 80038d4:	60f8      	str	r0, [r7, #12]
 80038d6:	60b9      	str	r1, [r7, #8]
 80038d8:	603b      	str	r3, [r7, #0]
 80038da:	4613      	mov	r3, r2
 80038dc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80038e2:	2b20      	cmp	r3, #32
 80038e4:	d177      	bne.n	80039d6 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d002      	beq.n	80038f2 <HAL_UART_Transmit+0x24>
 80038ec:	88fb      	ldrh	r3, [r7, #6]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d101      	bne.n	80038f6 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	e070      	b.n	80039d8 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	2200      	movs	r2, #0
 80038fa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	2221      	movs	r2, #33	@ 0x21
 8003902:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003904:	f7fd fa98 	bl	8000e38 <HAL_GetTick>
 8003908:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	88fa      	ldrh	r2, [r7, #6]
 800390e:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	88fa      	ldrh	r2, [r7, #6]
 8003916:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003922:	d108      	bne.n	8003936 <HAL_UART_Transmit+0x68>
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	691b      	ldr	r3, [r3, #16]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d104      	bne.n	8003936 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800392c:	2300      	movs	r3, #0
 800392e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	61bb      	str	r3, [r7, #24]
 8003934:	e003      	b.n	800393e <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003936:	68bb      	ldr	r3, [r7, #8]
 8003938:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800393a:	2300      	movs	r3, #0
 800393c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800393e:	e02f      	b.n	80039a0 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	9300      	str	r3, [sp, #0]
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	2200      	movs	r2, #0
 8003948:	2180      	movs	r1, #128	@ 0x80
 800394a:	68f8      	ldr	r0, [r7, #12]
 800394c:	f000 fc4a 	bl	80041e4 <UART_WaitOnFlagUntilTimeout>
 8003950:	4603      	mov	r3, r0
 8003952:	2b00      	cmp	r3, #0
 8003954:	d004      	beq.n	8003960 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	2220      	movs	r2, #32
 800395a:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800395c:	2303      	movs	r3, #3
 800395e:	e03b      	b.n	80039d8 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8003960:	69fb      	ldr	r3, [r7, #28]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d10b      	bne.n	800397e <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003966:	69bb      	ldr	r3, [r7, #24]
 8003968:	881a      	ldrh	r2, [r3, #0]
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003972:	b292      	uxth	r2, r2
 8003974:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003976:	69bb      	ldr	r3, [r7, #24]
 8003978:	3302      	adds	r3, #2
 800397a:	61bb      	str	r3, [r7, #24]
 800397c:	e007      	b.n	800398e <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800397e:	69fb      	ldr	r3, [r7, #28]
 8003980:	781a      	ldrb	r2, [r3, #0]
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003988:	69fb      	ldr	r3, [r7, #28]
 800398a:	3301      	adds	r3, #1
 800398c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003994:	b29b      	uxth	r3, r3
 8003996:	3b01      	subs	r3, #1
 8003998:	b29a      	uxth	r2, r3
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80039a6:	b29b      	uxth	r3, r3
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d1c9      	bne.n	8003940 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	9300      	str	r3, [sp, #0]
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	2200      	movs	r2, #0
 80039b4:	2140      	movs	r1, #64	@ 0x40
 80039b6:	68f8      	ldr	r0, [r7, #12]
 80039b8:	f000 fc14 	bl	80041e4 <UART_WaitOnFlagUntilTimeout>
 80039bc:	4603      	mov	r3, r0
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d004      	beq.n	80039cc <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	2220      	movs	r2, #32
 80039c6:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80039c8:	2303      	movs	r3, #3
 80039ca:	e005      	b.n	80039d8 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	2220      	movs	r2, #32
 80039d0:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80039d2:	2300      	movs	r3, #0
 80039d4:	e000      	b.n	80039d8 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80039d6:	2302      	movs	r3, #2
  }
}
 80039d8:	4618      	mov	r0, r3
 80039da:	3720      	adds	r7, #32
 80039dc:	46bd      	mov	sp, r7
 80039de:	bd80      	pop	{r7, pc}

080039e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80039e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80039e4:	b08a      	sub	sp, #40	@ 0x28
 80039e6:	af00      	add	r7, sp, #0
 80039e8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80039ea:	2300      	movs	r3, #0
 80039ec:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	689a      	ldr	r2, [r3, #8]
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	691b      	ldr	r3, [r3, #16]
 80039f8:	431a      	orrs	r2, r3
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	695b      	ldr	r3, [r3, #20]
 80039fe:	431a      	orrs	r2, r3
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	69db      	ldr	r3, [r3, #28]
 8003a04:	4313      	orrs	r3, r2
 8003a06:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	681a      	ldr	r2, [r3, #0]
 8003a0e:	4ba4      	ldr	r3, [pc, #656]	@ (8003ca0 <UART_SetConfig+0x2c0>)
 8003a10:	4013      	ands	r3, r2
 8003a12:	68fa      	ldr	r2, [r7, #12]
 8003a14:	6812      	ldr	r2, [r2, #0]
 8003a16:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003a18:	430b      	orrs	r3, r1
 8003a1a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	68da      	ldr	r2, [r3, #12]
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	430a      	orrs	r2, r1
 8003a30:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	699b      	ldr	r3, [r3, #24]
 8003a36:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a99      	ldr	r2, [pc, #612]	@ (8003ca4 <UART_SetConfig+0x2c4>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d004      	beq.n	8003a4c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	6a1b      	ldr	r3, [r3, #32]
 8003a46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	689b      	ldr	r3, [r3, #8]
 8003a52:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a5c:	430a      	orrs	r2, r1
 8003a5e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a90      	ldr	r2, [pc, #576]	@ (8003ca8 <UART_SetConfig+0x2c8>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d126      	bne.n	8003ab8 <UART_SetConfig+0xd8>
 8003a6a:	4b90      	ldr	r3, [pc, #576]	@ (8003cac <UART_SetConfig+0x2cc>)
 8003a6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a70:	f003 0303 	and.w	r3, r3, #3
 8003a74:	2b03      	cmp	r3, #3
 8003a76:	d81b      	bhi.n	8003ab0 <UART_SetConfig+0xd0>
 8003a78:	a201      	add	r2, pc, #4	@ (adr r2, 8003a80 <UART_SetConfig+0xa0>)
 8003a7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a7e:	bf00      	nop
 8003a80:	08003a91 	.word	0x08003a91
 8003a84:	08003aa1 	.word	0x08003aa1
 8003a88:	08003a99 	.word	0x08003a99
 8003a8c:	08003aa9 	.word	0x08003aa9
 8003a90:	2301      	movs	r3, #1
 8003a92:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a96:	e116      	b.n	8003cc6 <UART_SetConfig+0x2e6>
 8003a98:	2302      	movs	r3, #2
 8003a9a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a9e:	e112      	b.n	8003cc6 <UART_SetConfig+0x2e6>
 8003aa0:	2304      	movs	r3, #4
 8003aa2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003aa6:	e10e      	b.n	8003cc6 <UART_SetConfig+0x2e6>
 8003aa8:	2308      	movs	r3, #8
 8003aaa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003aae:	e10a      	b.n	8003cc6 <UART_SetConfig+0x2e6>
 8003ab0:	2310      	movs	r3, #16
 8003ab2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ab6:	e106      	b.n	8003cc6 <UART_SetConfig+0x2e6>
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a7c      	ldr	r2, [pc, #496]	@ (8003cb0 <UART_SetConfig+0x2d0>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d138      	bne.n	8003b34 <UART_SetConfig+0x154>
 8003ac2:	4b7a      	ldr	r3, [pc, #488]	@ (8003cac <UART_SetConfig+0x2cc>)
 8003ac4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ac8:	f003 030c 	and.w	r3, r3, #12
 8003acc:	2b0c      	cmp	r3, #12
 8003ace:	d82d      	bhi.n	8003b2c <UART_SetConfig+0x14c>
 8003ad0:	a201      	add	r2, pc, #4	@ (adr r2, 8003ad8 <UART_SetConfig+0xf8>)
 8003ad2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ad6:	bf00      	nop
 8003ad8:	08003b0d 	.word	0x08003b0d
 8003adc:	08003b2d 	.word	0x08003b2d
 8003ae0:	08003b2d 	.word	0x08003b2d
 8003ae4:	08003b2d 	.word	0x08003b2d
 8003ae8:	08003b1d 	.word	0x08003b1d
 8003aec:	08003b2d 	.word	0x08003b2d
 8003af0:	08003b2d 	.word	0x08003b2d
 8003af4:	08003b2d 	.word	0x08003b2d
 8003af8:	08003b15 	.word	0x08003b15
 8003afc:	08003b2d 	.word	0x08003b2d
 8003b00:	08003b2d 	.word	0x08003b2d
 8003b04:	08003b2d 	.word	0x08003b2d
 8003b08:	08003b25 	.word	0x08003b25
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b12:	e0d8      	b.n	8003cc6 <UART_SetConfig+0x2e6>
 8003b14:	2302      	movs	r3, #2
 8003b16:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b1a:	e0d4      	b.n	8003cc6 <UART_SetConfig+0x2e6>
 8003b1c:	2304      	movs	r3, #4
 8003b1e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b22:	e0d0      	b.n	8003cc6 <UART_SetConfig+0x2e6>
 8003b24:	2308      	movs	r3, #8
 8003b26:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b2a:	e0cc      	b.n	8003cc6 <UART_SetConfig+0x2e6>
 8003b2c:	2310      	movs	r3, #16
 8003b2e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b32:	e0c8      	b.n	8003cc6 <UART_SetConfig+0x2e6>
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a5e      	ldr	r2, [pc, #376]	@ (8003cb4 <UART_SetConfig+0x2d4>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d125      	bne.n	8003b8a <UART_SetConfig+0x1aa>
 8003b3e:	4b5b      	ldr	r3, [pc, #364]	@ (8003cac <UART_SetConfig+0x2cc>)
 8003b40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b44:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003b48:	2b30      	cmp	r3, #48	@ 0x30
 8003b4a:	d016      	beq.n	8003b7a <UART_SetConfig+0x19a>
 8003b4c:	2b30      	cmp	r3, #48	@ 0x30
 8003b4e:	d818      	bhi.n	8003b82 <UART_SetConfig+0x1a2>
 8003b50:	2b20      	cmp	r3, #32
 8003b52:	d00a      	beq.n	8003b6a <UART_SetConfig+0x18a>
 8003b54:	2b20      	cmp	r3, #32
 8003b56:	d814      	bhi.n	8003b82 <UART_SetConfig+0x1a2>
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d002      	beq.n	8003b62 <UART_SetConfig+0x182>
 8003b5c:	2b10      	cmp	r3, #16
 8003b5e:	d008      	beq.n	8003b72 <UART_SetConfig+0x192>
 8003b60:	e00f      	b.n	8003b82 <UART_SetConfig+0x1a2>
 8003b62:	2300      	movs	r3, #0
 8003b64:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b68:	e0ad      	b.n	8003cc6 <UART_SetConfig+0x2e6>
 8003b6a:	2302      	movs	r3, #2
 8003b6c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b70:	e0a9      	b.n	8003cc6 <UART_SetConfig+0x2e6>
 8003b72:	2304      	movs	r3, #4
 8003b74:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b78:	e0a5      	b.n	8003cc6 <UART_SetConfig+0x2e6>
 8003b7a:	2308      	movs	r3, #8
 8003b7c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b80:	e0a1      	b.n	8003cc6 <UART_SetConfig+0x2e6>
 8003b82:	2310      	movs	r3, #16
 8003b84:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b88:	e09d      	b.n	8003cc6 <UART_SetConfig+0x2e6>
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a4a      	ldr	r2, [pc, #296]	@ (8003cb8 <UART_SetConfig+0x2d8>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d125      	bne.n	8003be0 <UART_SetConfig+0x200>
 8003b94:	4b45      	ldr	r3, [pc, #276]	@ (8003cac <UART_SetConfig+0x2cc>)
 8003b96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b9a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003b9e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003ba0:	d016      	beq.n	8003bd0 <UART_SetConfig+0x1f0>
 8003ba2:	2bc0      	cmp	r3, #192	@ 0xc0
 8003ba4:	d818      	bhi.n	8003bd8 <UART_SetConfig+0x1f8>
 8003ba6:	2b80      	cmp	r3, #128	@ 0x80
 8003ba8:	d00a      	beq.n	8003bc0 <UART_SetConfig+0x1e0>
 8003baa:	2b80      	cmp	r3, #128	@ 0x80
 8003bac:	d814      	bhi.n	8003bd8 <UART_SetConfig+0x1f8>
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d002      	beq.n	8003bb8 <UART_SetConfig+0x1d8>
 8003bb2:	2b40      	cmp	r3, #64	@ 0x40
 8003bb4:	d008      	beq.n	8003bc8 <UART_SetConfig+0x1e8>
 8003bb6:	e00f      	b.n	8003bd8 <UART_SetConfig+0x1f8>
 8003bb8:	2300      	movs	r3, #0
 8003bba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003bbe:	e082      	b.n	8003cc6 <UART_SetConfig+0x2e6>
 8003bc0:	2302      	movs	r3, #2
 8003bc2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003bc6:	e07e      	b.n	8003cc6 <UART_SetConfig+0x2e6>
 8003bc8:	2304      	movs	r3, #4
 8003bca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003bce:	e07a      	b.n	8003cc6 <UART_SetConfig+0x2e6>
 8003bd0:	2308      	movs	r3, #8
 8003bd2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003bd6:	e076      	b.n	8003cc6 <UART_SetConfig+0x2e6>
 8003bd8:	2310      	movs	r3, #16
 8003bda:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003bde:	e072      	b.n	8003cc6 <UART_SetConfig+0x2e6>
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a35      	ldr	r2, [pc, #212]	@ (8003cbc <UART_SetConfig+0x2dc>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d12a      	bne.n	8003c40 <UART_SetConfig+0x260>
 8003bea:	4b30      	ldr	r3, [pc, #192]	@ (8003cac <UART_SetConfig+0x2cc>)
 8003bec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bf0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003bf4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003bf8:	d01a      	beq.n	8003c30 <UART_SetConfig+0x250>
 8003bfa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003bfe:	d81b      	bhi.n	8003c38 <UART_SetConfig+0x258>
 8003c00:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003c04:	d00c      	beq.n	8003c20 <UART_SetConfig+0x240>
 8003c06:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003c0a:	d815      	bhi.n	8003c38 <UART_SetConfig+0x258>
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d003      	beq.n	8003c18 <UART_SetConfig+0x238>
 8003c10:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c14:	d008      	beq.n	8003c28 <UART_SetConfig+0x248>
 8003c16:	e00f      	b.n	8003c38 <UART_SetConfig+0x258>
 8003c18:	2300      	movs	r3, #0
 8003c1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c1e:	e052      	b.n	8003cc6 <UART_SetConfig+0x2e6>
 8003c20:	2302      	movs	r3, #2
 8003c22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c26:	e04e      	b.n	8003cc6 <UART_SetConfig+0x2e6>
 8003c28:	2304      	movs	r3, #4
 8003c2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c2e:	e04a      	b.n	8003cc6 <UART_SetConfig+0x2e6>
 8003c30:	2308      	movs	r3, #8
 8003c32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c36:	e046      	b.n	8003cc6 <UART_SetConfig+0x2e6>
 8003c38:	2310      	movs	r3, #16
 8003c3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c3e:	e042      	b.n	8003cc6 <UART_SetConfig+0x2e6>
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a17      	ldr	r2, [pc, #92]	@ (8003ca4 <UART_SetConfig+0x2c4>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d13a      	bne.n	8003cc0 <UART_SetConfig+0x2e0>
 8003c4a:	4b18      	ldr	r3, [pc, #96]	@ (8003cac <UART_SetConfig+0x2cc>)
 8003c4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c50:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003c54:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003c58:	d01a      	beq.n	8003c90 <UART_SetConfig+0x2b0>
 8003c5a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003c5e:	d81b      	bhi.n	8003c98 <UART_SetConfig+0x2b8>
 8003c60:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003c64:	d00c      	beq.n	8003c80 <UART_SetConfig+0x2a0>
 8003c66:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003c6a:	d815      	bhi.n	8003c98 <UART_SetConfig+0x2b8>
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d003      	beq.n	8003c78 <UART_SetConfig+0x298>
 8003c70:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c74:	d008      	beq.n	8003c88 <UART_SetConfig+0x2a8>
 8003c76:	e00f      	b.n	8003c98 <UART_SetConfig+0x2b8>
 8003c78:	2300      	movs	r3, #0
 8003c7a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c7e:	e022      	b.n	8003cc6 <UART_SetConfig+0x2e6>
 8003c80:	2302      	movs	r3, #2
 8003c82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c86:	e01e      	b.n	8003cc6 <UART_SetConfig+0x2e6>
 8003c88:	2304      	movs	r3, #4
 8003c8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c8e:	e01a      	b.n	8003cc6 <UART_SetConfig+0x2e6>
 8003c90:	2308      	movs	r3, #8
 8003c92:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c96:	e016      	b.n	8003cc6 <UART_SetConfig+0x2e6>
 8003c98:	2310      	movs	r3, #16
 8003c9a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c9e:	e012      	b.n	8003cc6 <UART_SetConfig+0x2e6>
 8003ca0:	efff69f3 	.word	0xefff69f3
 8003ca4:	40008000 	.word	0x40008000
 8003ca8:	40013800 	.word	0x40013800
 8003cac:	40021000 	.word	0x40021000
 8003cb0:	40004400 	.word	0x40004400
 8003cb4:	40004800 	.word	0x40004800
 8003cb8:	40004c00 	.word	0x40004c00
 8003cbc:	40005000 	.word	0x40005000
 8003cc0:	2310      	movs	r3, #16
 8003cc2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a9f      	ldr	r2, [pc, #636]	@ (8003f48 <UART_SetConfig+0x568>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d17a      	bne.n	8003dc6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003cd0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003cd4:	2b08      	cmp	r3, #8
 8003cd6:	d824      	bhi.n	8003d22 <UART_SetConfig+0x342>
 8003cd8:	a201      	add	r2, pc, #4	@ (adr r2, 8003ce0 <UART_SetConfig+0x300>)
 8003cda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cde:	bf00      	nop
 8003ce0:	08003d05 	.word	0x08003d05
 8003ce4:	08003d23 	.word	0x08003d23
 8003ce8:	08003d0d 	.word	0x08003d0d
 8003cec:	08003d23 	.word	0x08003d23
 8003cf0:	08003d13 	.word	0x08003d13
 8003cf4:	08003d23 	.word	0x08003d23
 8003cf8:	08003d23 	.word	0x08003d23
 8003cfc:	08003d23 	.word	0x08003d23
 8003d00:	08003d1b 	.word	0x08003d1b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d04:	f7fe f9a0 	bl	8002048 <HAL_RCC_GetPCLK1Freq>
 8003d08:	61f8      	str	r0, [r7, #28]
        break;
 8003d0a:	e010      	b.n	8003d2e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d0c:	4b8f      	ldr	r3, [pc, #572]	@ (8003f4c <UART_SetConfig+0x56c>)
 8003d0e:	61fb      	str	r3, [r7, #28]
        break;
 8003d10:	e00d      	b.n	8003d2e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d12:	f7fe f901 	bl	8001f18 <HAL_RCC_GetSysClockFreq>
 8003d16:	61f8      	str	r0, [r7, #28]
        break;
 8003d18:	e009      	b.n	8003d2e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d1a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003d1e:	61fb      	str	r3, [r7, #28]
        break;
 8003d20:	e005      	b.n	8003d2e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003d22:	2300      	movs	r3, #0
 8003d24:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003d2c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003d2e:	69fb      	ldr	r3, [r7, #28]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	f000 80fb 	beq.w	8003f2c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	685a      	ldr	r2, [r3, #4]
 8003d3a:	4613      	mov	r3, r2
 8003d3c:	005b      	lsls	r3, r3, #1
 8003d3e:	4413      	add	r3, r2
 8003d40:	69fa      	ldr	r2, [r7, #28]
 8003d42:	429a      	cmp	r2, r3
 8003d44:	d305      	bcc.n	8003d52 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003d4c:	69fa      	ldr	r2, [r7, #28]
 8003d4e:	429a      	cmp	r2, r3
 8003d50:	d903      	bls.n	8003d5a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003d58:	e0e8      	b.n	8003f2c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003d5a:	69fb      	ldr	r3, [r7, #28]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	461c      	mov	r4, r3
 8003d60:	4615      	mov	r5, r2
 8003d62:	f04f 0200 	mov.w	r2, #0
 8003d66:	f04f 0300 	mov.w	r3, #0
 8003d6a:	022b      	lsls	r3, r5, #8
 8003d6c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003d70:	0222      	lsls	r2, r4, #8
 8003d72:	68f9      	ldr	r1, [r7, #12]
 8003d74:	6849      	ldr	r1, [r1, #4]
 8003d76:	0849      	lsrs	r1, r1, #1
 8003d78:	2000      	movs	r0, #0
 8003d7a:	4688      	mov	r8, r1
 8003d7c:	4681      	mov	r9, r0
 8003d7e:	eb12 0a08 	adds.w	sl, r2, r8
 8003d82:	eb43 0b09 	adc.w	fp, r3, r9
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	603b      	str	r3, [r7, #0]
 8003d8e:	607a      	str	r2, [r7, #4]
 8003d90:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003d94:	4650      	mov	r0, sl
 8003d96:	4659      	mov	r1, fp
 8003d98:	f7fc fa72 	bl	8000280 <__aeabi_uldivmod>
 8003d9c:	4602      	mov	r2, r0
 8003d9e:	460b      	mov	r3, r1
 8003da0:	4613      	mov	r3, r2
 8003da2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003da4:	69bb      	ldr	r3, [r7, #24]
 8003da6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003daa:	d308      	bcc.n	8003dbe <UART_SetConfig+0x3de>
 8003dac:	69bb      	ldr	r3, [r7, #24]
 8003dae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003db2:	d204      	bcs.n	8003dbe <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	69ba      	ldr	r2, [r7, #24]
 8003dba:	60da      	str	r2, [r3, #12]
 8003dbc:	e0b6      	b.n	8003f2c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003dc4:	e0b2      	b.n	8003f2c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	69db      	ldr	r3, [r3, #28]
 8003dca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003dce:	d15e      	bne.n	8003e8e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003dd0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003dd4:	2b08      	cmp	r3, #8
 8003dd6:	d828      	bhi.n	8003e2a <UART_SetConfig+0x44a>
 8003dd8:	a201      	add	r2, pc, #4	@ (adr r2, 8003de0 <UART_SetConfig+0x400>)
 8003dda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dde:	bf00      	nop
 8003de0:	08003e05 	.word	0x08003e05
 8003de4:	08003e0d 	.word	0x08003e0d
 8003de8:	08003e15 	.word	0x08003e15
 8003dec:	08003e2b 	.word	0x08003e2b
 8003df0:	08003e1b 	.word	0x08003e1b
 8003df4:	08003e2b 	.word	0x08003e2b
 8003df8:	08003e2b 	.word	0x08003e2b
 8003dfc:	08003e2b 	.word	0x08003e2b
 8003e00:	08003e23 	.word	0x08003e23
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e04:	f7fe f920 	bl	8002048 <HAL_RCC_GetPCLK1Freq>
 8003e08:	61f8      	str	r0, [r7, #28]
        break;
 8003e0a:	e014      	b.n	8003e36 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e0c:	f7fe f932 	bl	8002074 <HAL_RCC_GetPCLK2Freq>
 8003e10:	61f8      	str	r0, [r7, #28]
        break;
 8003e12:	e010      	b.n	8003e36 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e14:	4b4d      	ldr	r3, [pc, #308]	@ (8003f4c <UART_SetConfig+0x56c>)
 8003e16:	61fb      	str	r3, [r7, #28]
        break;
 8003e18:	e00d      	b.n	8003e36 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e1a:	f7fe f87d 	bl	8001f18 <HAL_RCC_GetSysClockFreq>
 8003e1e:	61f8      	str	r0, [r7, #28]
        break;
 8003e20:	e009      	b.n	8003e36 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e22:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003e26:	61fb      	str	r3, [r7, #28]
        break;
 8003e28:	e005      	b.n	8003e36 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003e34:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003e36:	69fb      	ldr	r3, [r7, #28]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d077      	beq.n	8003f2c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003e3c:	69fb      	ldr	r3, [r7, #28]
 8003e3e:	005a      	lsls	r2, r3, #1
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	085b      	lsrs	r3, r3, #1
 8003e46:	441a      	add	r2, r3
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e50:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e52:	69bb      	ldr	r3, [r7, #24]
 8003e54:	2b0f      	cmp	r3, #15
 8003e56:	d916      	bls.n	8003e86 <UART_SetConfig+0x4a6>
 8003e58:	69bb      	ldr	r3, [r7, #24]
 8003e5a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e5e:	d212      	bcs.n	8003e86 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003e60:	69bb      	ldr	r3, [r7, #24]
 8003e62:	b29b      	uxth	r3, r3
 8003e64:	f023 030f 	bic.w	r3, r3, #15
 8003e68:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003e6a:	69bb      	ldr	r3, [r7, #24]
 8003e6c:	085b      	lsrs	r3, r3, #1
 8003e6e:	b29b      	uxth	r3, r3
 8003e70:	f003 0307 	and.w	r3, r3, #7
 8003e74:	b29a      	uxth	r2, r3
 8003e76:	8afb      	ldrh	r3, [r7, #22]
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	8afa      	ldrh	r2, [r7, #22]
 8003e82:	60da      	str	r2, [r3, #12]
 8003e84:	e052      	b.n	8003f2c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003e8c:	e04e      	b.n	8003f2c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003e8e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003e92:	2b08      	cmp	r3, #8
 8003e94:	d827      	bhi.n	8003ee6 <UART_SetConfig+0x506>
 8003e96:	a201      	add	r2, pc, #4	@ (adr r2, 8003e9c <UART_SetConfig+0x4bc>)
 8003e98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e9c:	08003ec1 	.word	0x08003ec1
 8003ea0:	08003ec9 	.word	0x08003ec9
 8003ea4:	08003ed1 	.word	0x08003ed1
 8003ea8:	08003ee7 	.word	0x08003ee7
 8003eac:	08003ed7 	.word	0x08003ed7
 8003eb0:	08003ee7 	.word	0x08003ee7
 8003eb4:	08003ee7 	.word	0x08003ee7
 8003eb8:	08003ee7 	.word	0x08003ee7
 8003ebc:	08003edf 	.word	0x08003edf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ec0:	f7fe f8c2 	bl	8002048 <HAL_RCC_GetPCLK1Freq>
 8003ec4:	61f8      	str	r0, [r7, #28]
        break;
 8003ec6:	e014      	b.n	8003ef2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ec8:	f7fe f8d4 	bl	8002074 <HAL_RCC_GetPCLK2Freq>
 8003ecc:	61f8      	str	r0, [r7, #28]
        break;
 8003ece:	e010      	b.n	8003ef2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ed0:	4b1e      	ldr	r3, [pc, #120]	@ (8003f4c <UART_SetConfig+0x56c>)
 8003ed2:	61fb      	str	r3, [r7, #28]
        break;
 8003ed4:	e00d      	b.n	8003ef2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ed6:	f7fe f81f 	bl	8001f18 <HAL_RCC_GetSysClockFreq>
 8003eda:	61f8      	str	r0, [r7, #28]
        break;
 8003edc:	e009      	b.n	8003ef2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ede:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003ee2:	61fb      	str	r3, [r7, #28]
        break;
 8003ee4:	e005      	b.n	8003ef2 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003ef0:	bf00      	nop
    }

    if (pclk != 0U)
 8003ef2:	69fb      	ldr	r3, [r7, #28]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d019      	beq.n	8003f2c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	085a      	lsrs	r2, r3, #1
 8003efe:	69fb      	ldr	r3, [r7, #28]
 8003f00:	441a      	add	r2, r3
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f0a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f0c:	69bb      	ldr	r3, [r7, #24]
 8003f0e:	2b0f      	cmp	r3, #15
 8003f10:	d909      	bls.n	8003f26 <UART_SetConfig+0x546>
 8003f12:	69bb      	ldr	r3, [r7, #24]
 8003f14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f18:	d205      	bcs.n	8003f26 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003f1a:	69bb      	ldr	r3, [r7, #24]
 8003f1c:	b29a      	uxth	r2, r3
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	60da      	str	r2, [r3, #12]
 8003f24:	e002      	b.n	8003f2c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	2200      	movs	r2, #0
 8003f36:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003f38:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	3728      	adds	r7, #40	@ 0x28
 8003f40:	46bd      	mov	sp, r7
 8003f42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f46:	bf00      	nop
 8003f48:	40008000 	.word	0x40008000
 8003f4c:	00f42400 	.word	0x00f42400

08003f50 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003f50:	b480      	push	{r7}
 8003f52:	b083      	sub	sp, #12
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f5c:	f003 0308 	and.w	r3, r3, #8
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d00a      	beq.n	8003f7a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	430a      	orrs	r2, r1
 8003f78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f7e:	f003 0301 	and.w	r3, r3, #1
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d00a      	beq.n	8003f9c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	430a      	orrs	r2, r1
 8003f9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fa0:	f003 0302 	and.w	r3, r3, #2
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d00a      	beq.n	8003fbe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	430a      	orrs	r2, r1
 8003fbc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fc2:	f003 0304 	and.w	r3, r3, #4
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d00a      	beq.n	8003fe0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	430a      	orrs	r2, r1
 8003fde:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fe4:	f003 0310 	and.w	r3, r3, #16
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d00a      	beq.n	8004002 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	689b      	ldr	r3, [r3, #8]
 8003ff2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	430a      	orrs	r2, r1
 8004000:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004006:	f003 0320 	and.w	r3, r3, #32
 800400a:	2b00      	cmp	r3, #0
 800400c:	d00a      	beq.n	8004024 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	430a      	orrs	r2, r1
 8004022:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004028:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800402c:	2b00      	cmp	r3, #0
 800402e:	d01a      	beq.n	8004066 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	430a      	orrs	r2, r1
 8004044:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800404a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800404e:	d10a      	bne.n	8004066 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	430a      	orrs	r2, r1
 8004064:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800406a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800406e:	2b00      	cmp	r3, #0
 8004070:	d00a      	beq.n	8004088 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	430a      	orrs	r2, r1
 8004086:	605a      	str	r2, [r3, #4]
  }
}
 8004088:	bf00      	nop
 800408a:	370c      	adds	r7, #12
 800408c:	46bd      	mov	sp, r7
 800408e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004092:	4770      	bx	lr

08004094 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b098      	sub	sp, #96	@ 0x60
 8004098:	af02      	add	r7, sp, #8
 800409a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2200      	movs	r2, #0
 80040a0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80040a4:	f7fc fec8 	bl	8000e38 <HAL_GetTick>
 80040a8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f003 0308 	and.w	r3, r3, #8
 80040b4:	2b08      	cmp	r3, #8
 80040b6:	d12e      	bne.n	8004116 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80040b8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80040bc:	9300      	str	r3, [sp, #0]
 80040be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040c0:	2200      	movs	r2, #0
 80040c2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80040c6:	6878      	ldr	r0, [r7, #4]
 80040c8:	f000 f88c 	bl	80041e4 <UART_WaitOnFlagUntilTimeout>
 80040cc:	4603      	mov	r3, r0
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d021      	beq.n	8004116 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040da:	e853 3f00 	ldrex	r3, [r3]
 80040de:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80040e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040e2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80040e6:	653b      	str	r3, [r7, #80]	@ 0x50
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	461a      	mov	r2, r3
 80040ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80040f0:	647b      	str	r3, [r7, #68]	@ 0x44
 80040f2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040f4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80040f6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80040f8:	e841 2300 	strex	r3, r2, [r1]
 80040fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80040fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004100:	2b00      	cmp	r3, #0
 8004102:	d1e6      	bne.n	80040d2 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2220      	movs	r2, #32
 8004108:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2200      	movs	r2, #0
 800410e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004112:	2303      	movs	r3, #3
 8004114:	e062      	b.n	80041dc <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f003 0304 	and.w	r3, r3, #4
 8004120:	2b04      	cmp	r3, #4
 8004122:	d149      	bne.n	80041b8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004124:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004128:	9300      	str	r3, [sp, #0]
 800412a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800412c:	2200      	movs	r2, #0
 800412e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004132:	6878      	ldr	r0, [r7, #4]
 8004134:	f000 f856 	bl	80041e4 <UART_WaitOnFlagUntilTimeout>
 8004138:	4603      	mov	r3, r0
 800413a:	2b00      	cmp	r3, #0
 800413c:	d03c      	beq.n	80041b8 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004146:	e853 3f00 	ldrex	r3, [r3]
 800414a:	623b      	str	r3, [r7, #32]
   return(result);
 800414c:	6a3b      	ldr	r3, [r7, #32]
 800414e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004152:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	461a      	mov	r2, r3
 800415a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800415c:	633b      	str	r3, [r7, #48]	@ 0x30
 800415e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004160:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004162:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004164:	e841 2300 	strex	r3, r2, [r1]
 8004168:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800416a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800416c:	2b00      	cmp	r3, #0
 800416e:	d1e6      	bne.n	800413e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	3308      	adds	r3, #8
 8004176:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004178:	693b      	ldr	r3, [r7, #16]
 800417a:	e853 3f00 	ldrex	r3, [r3]
 800417e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	f023 0301 	bic.w	r3, r3, #1
 8004186:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	3308      	adds	r3, #8
 800418e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004190:	61fa      	str	r2, [r7, #28]
 8004192:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004194:	69b9      	ldr	r1, [r7, #24]
 8004196:	69fa      	ldr	r2, [r7, #28]
 8004198:	e841 2300 	strex	r3, r2, [r1]
 800419c:	617b      	str	r3, [r7, #20]
   return(result);
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d1e5      	bne.n	8004170 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2220      	movs	r2, #32
 80041a8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2200      	movs	r2, #0
 80041b0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80041b4:	2303      	movs	r3, #3
 80041b6:	e011      	b.n	80041dc <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2220      	movs	r2, #32
 80041bc:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2220      	movs	r2, #32
 80041c2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2200      	movs	r2, #0
 80041ca:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2200      	movs	r2, #0
 80041d0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2200      	movs	r2, #0
 80041d6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80041da:	2300      	movs	r3, #0
}
 80041dc:	4618      	mov	r0, r3
 80041de:	3758      	adds	r7, #88	@ 0x58
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd80      	pop	{r7, pc}

080041e4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b084      	sub	sp, #16
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	60f8      	str	r0, [r7, #12]
 80041ec:	60b9      	str	r1, [r7, #8]
 80041ee:	603b      	str	r3, [r7, #0]
 80041f0:	4613      	mov	r3, r2
 80041f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041f4:	e04f      	b.n	8004296 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041f6:	69bb      	ldr	r3, [r7, #24]
 80041f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041fc:	d04b      	beq.n	8004296 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041fe:	f7fc fe1b 	bl	8000e38 <HAL_GetTick>
 8004202:	4602      	mov	r2, r0
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	1ad3      	subs	r3, r2, r3
 8004208:	69ba      	ldr	r2, [r7, #24]
 800420a:	429a      	cmp	r2, r3
 800420c:	d302      	bcc.n	8004214 <UART_WaitOnFlagUntilTimeout+0x30>
 800420e:	69bb      	ldr	r3, [r7, #24]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d101      	bne.n	8004218 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004214:	2303      	movs	r3, #3
 8004216:	e04e      	b.n	80042b6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f003 0304 	and.w	r3, r3, #4
 8004222:	2b00      	cmp	r3, #0
 8004224:	d037      	beq.n	8004296 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004226:	68bb      	ldr	r3, [r7, #8]
 8004228:	2b80      	cmp	r3, #128	@ 0x80
 800422a:	d034      	beq.n	8004296 <UART_WaitOnFlagUntilTimeout+0xb2>
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	2b40      	cmp	r3, #64	@ 0x40
 8004230:	d031      	beq.n	8004296 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	69db      	ldr	r3, [r3, #28]
 8004238:	f003 0308 	and.w	r3, r3, #8
 800423c:	2b08      	cmp	r3, #8
 800423e:	d110      	bne.n	8004262 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	2208      	movs	r2, #8
 8004246:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004248:	68f8      	ldr	r0, [r7, #12]
 800424a:	f000 f838 	bl	80042be <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	2208      	movs	r2, #8
 8004252:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	2200      	movs	r2, #0
 800425a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800425e:	2301      	movs	r3, #1
 8004260:	e029      	b.n	80042b6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	69db      	ldr	r3, [r3, #28]
 8004268:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800426c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004270:	d111      	bne.n	8004296 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800427a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800427c:	68f8      	ldr	r0, [r7, #12]
 800427e:	f000 f81e 	bl	80042be <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	2220      	movs	r2, #32
 8004286:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	2200      	movs	r2, #0
 800428e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004292:	2303      	movs	r3, #3
 8004294:	e00f      	b.n	80042b6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	69da      	ldr	r2, [r3, #28]
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	4013      	ands	r3, r2
 80042a0:	68ba      	ldr	r2, [r7, #8]
 80042a2:	429a      	cmp	r2, r3
 80042a4:	bf0c      	ite	eq
 80042a6:	2301      	moveq	r3, #1
 80042a8:	2300      	movne	r3, #0
 80042aa:	b2db      	uxtb	r3, r3
 80042ac:	461a      	mov	r2, r3
 80042ae:	79fb      	ldrb	r3, [r7, #7]
 80042b0:	429a      	cmp	r2, r3
 80042b2:	d0a0      	beq.n	80041f6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80042b4:	2300      	movs	r3, #0
}
 80042b6:	4618      	mov	r0, r3
 80042b8:	3710      	adds	r7, #16
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bd80      	pop	{r7, pc}

080042be <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80042be:	b480      	push	{r7}
 80042c0:	b095      	sub	sp, #84	@ 0x54
 80042c2:	af00      	add	r7, sp, #0
 80042c4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042ce:	e853 3f00 	ldrex	r3, [r3]
 80042d2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80042d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042d6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80042da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	461a      	mov	r2, r3
 80042e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80042e4:	643b      	str	r3, [r7, #64]	@ 0x40
 80042e6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042e8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80042ea:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80042ec:	e841 2300 	strex	r3, r2, [r1]
 80042f0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80042f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d1e6      	bne.n	80042c6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	3308      	adds	r3, #8
 80042fe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004300:	6a3b      	ldr	r3, [r7, #32]
 8004302:	e853 3f00 	ldrex	r3, [r3]
 8004306:	61fb      	str	r3, [r7, #28]
   return(result);
 8004308:	69fb      	ldr	r3, [r7, #28]
 800430a:	f023 0301 	bic.w	r3, r3, #1
 800430e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	3308      	adds	r3, #8
 8004316:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004318:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800431a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800431c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800431e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004320:	e841 2300 	strex	r3, r2, [r1]
 8004324:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004328:	2b00      	cmp	r3, #0
 800432a:	d1e5      	bne.n	80042f8 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004330:	2b01      	cmp	r3, #1
 8004332:	d118      	bne.n	8004366 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	e853 3f00 	ldrex	r3, [r3]
 8004340:	60bb      	str	r3, [r7, #8]
   return(result);
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	f023 0310 	bic.w	r3, r3, #16
 8004348:	647b      	str	r3, [r7, #68]	@ 0x44
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	461a      	mov	r2, r3
 8004350:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004352:	61bb      	str	r3, [r7, #24]
 8004354:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004356:	6979      	ldr	r1, [r7, #20]
 8004358:	69ba      	ldr	r2, [r7, #24]
 800435a:	e841 2300 	strex	r3, r2, [r1]
 800435e:	613b      	str	r3, [r7, #16]
   return(result);
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d1e6      	bne.n	8004334 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2220      	movs	r2, #32
 800436a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2200      	movs	r2, #0
 8004372:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2200      	movs	r2, #0
 8004378:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800437a:	bf00      	nop
 800437c:	3754      	adds	r7, #84	@ 0x54
 800437e:	46bd      	mov	sp, r7
 8004380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004384:	4770      	bx	lr
	...

08004388 <siprintf>:
 8004388:	b40e      	push	{r1, r2, r3}
 800438a:	b500      	push	{lr}
 800438c:	b09c      	sub	sp, #112	@ 0x70
 800438e:	ab1d      	add	r3, sp, #116	@ 0x74
 8004390:	9002      	str	r0, [sp, #8]
 8004392:	9006      	str	r0, [sp, #24]
 8004394:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004398:	4809      	ldr	r0, [pc, #36]	@ (80043c0 <siprintf+0x38>)
 800439a:	9107      	str	r1, [sp, #28]
 800439c:	9104      	str	r1, [sp, #16]
 800439e:	4909      	ldr	r1, [pc, #36]	@ (80043c4 <siprintf+0x3c>)
 80043a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80043a4:	9105      	str	r1, [sp, #20]
 80043a6:	6800      	ldr	r0, [r0, #0]
 80043a8:	9301      	str	r3, [sp, #4]
 80043aa:	a902      	add	r1, sp, #8
 80043ac:	f000 f994 	bl	80046d8 <_svfiprintf_r>
 80043b0:	9b02      	ldr	r3, [sp, #8]
 80043b2:	2200      	movs	r2, #0
 80043b4:	701a      	strb	r2, [r3, #0]
 80043b6:	b01c      	add	sp, #112	@ 0x70
 80043b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80043bc:	b003      	add	sp, #12
 80043be:	4770      	bx	lr
 80043c0:	2000000c 	.word	0x2000000c
 80043c4:	ffff0208 	.word	0xffff0208

080043c8 <memset>:
 80043c8:	4402      	add	r2, r0
 80043ca:	4603      	mov	r3, r0
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d100      	bne.n	80043d2 <memset+0xa>
 80043d0:	4770      	bx	lr
 80043d2:	f803 1b01 	strb.w	r1, [r3], #1
 80043d6:	e7f9      	b.n	80043cc <memset+0x4>

080043d8 <__errno>:
 80043d8:	4b01      	ldr	r3, [pc, #4]	@ (80043e0 <__errno+0x8>)
 80043da:	6818      	ldr	r0, [r3, #0]
 80043dc:	4770      	bx	lr
 80043de:	bf00      	nop
 80043e0:	2000000c 	.word	0x2000000c

080043e4 <__libc_init_array>:
 80043e4:	b570      	push	{r4, r5, r6, lr}
 80043e6:	4d0d      	ldr	r5, [pc, #52]	@ (800441c <__libc_init_array+0x38>)
 80043e8:	4c0d      	ldr	r4, [pc, #52]	@ (8004420 <__libc_init_array+0x3c>)
 80043ea:	1b64      	subs	r4, r4, r5
 80043ec:	10a4      	asrs	r4, r4, #2
 80043ee:	2600      	movs	r6, #0
 80043f0:	42a6      	cmp	r6, r4
 80043f2:	d109      	bne.n	8004408 <__libc_init_array+0x24>
 80043f4:	4d0b      	ldr	r5, [pc, #44]	@ (8004424 <__libc_init_array+0x40>)
 80043f6:	4c0c      	ldr	r4, [pc, #48]	@ (8004428 <__libc_init_array+0x44>)
 80043f8:	f000 fc66 	bl	8004cc8 <_init>
 80043fc:	1b64      	subs	r4, r4, r5
 80043fe:	10a4      	asrs	r4, r4, #2
 8004400:	2600      	movs	r6, #0
 8004402:	42a6      	cmp	r6, r4
 8004404:	d105      	bne.n	8004412 <__libc_init_array+0x2e>
 8004406:	bd70      	pop	{r4, r5, r6, pc}
 8004408:	f855 3b04 	ldr.w	r3, [r5], #4
 800440c:	4798      	blx	r3
 800440e:	3601      	adds	r6, #1
 8004410:	e7ee      	b.n	80043f0 <__libc_init_array+0xc>
 8004412:	f855 3b04 	ldr.w	r3, [r5], #4
 8004416:	4798      	blx	r3
 8004418:	3601      	adds	r6, #1
 800441a:	e7f2      	b.n	8004402 <__libc_init_array+0x1e>
 800441c:	08004d98 	.word	0x08004d98
 8004420:	08004d98 	.word	0x08004d98
 8004424:	08004d98 	.word	0x08004d98
 8004428:	08004d9c 	.word	0x08004d9c

0800442c <__retarget_lock_acquire_recursive>:
 800442c:	4770      	bx	lr

0800442e <__retarget_lock_release_recursive>:
 800442e:	4770      	bx	lr

08004430 <_free_r>:
 8004430:	b538      	push	{r3, r4, r5, lr}
 8004432:	4605      	mov	r5, r0
 8004434:	2900      	cmp	r1, #0
 8004436:	d041      	beq.n	80044bc <_free_r+0x8c>
 8004438:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800443c:	1f0c      	subs	r4, r1, #4
 800443e:	2b00      	cmp	r3, #0
 8004440:	bfb8      	it	lt
 8004442:	18e4      	addlt	r4, r4, r3
 8004444:	f000 f8e0 	bl	8004608 <__malloc_lock>
 8004448:	4a1d      	ldr	r2, [pc, #116]	@ (80044c0 <_free_r+0x90>)
 800444a:	6813      	ldr	r3, [r2, #0]
 800444c:	b933      	cbnz	r3, 800445c <_free_r+0x2c>
 800444e:	6063      	str	r3, [r4, #4]
 8004450:	6014      	str	r4, [r2, #0]
 8004452:	4628      	mov	r0, r5
 8004454:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004458:	f000 b8dc 	b.w	8004614 <__malloc_unlock>
 800445c:	42a3      	cmp	r3, r4
 800445e:	d908      	bls.n	8004472 <_free_r+0x42>
 8004460:	6820      	ldr	r0, [r4, #0]
 8004462:	1821      	adds	r1, r4, r0
 8004464:	428b      	cmp	r3, r1
 8004466:	bf01      	itttt	eq
 8004468:	6819      	ldreq	r1, [r3, #0]
 800446a:	685b      	ldreq	r3, [r3, #4]
 800446c:	1809      	addeq	r1, r1, r0
 800446e:	6021      	streq	r1, [r4, #0]
 8004470:	e7ed      	b.n	800444e <_free_r+0x1e>
 8004472:	461a      	mov	r2, r3
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	b10b      	cbz	r3, 800447c <_free_r+0x4c>
 8004478:	42a3      	cmp	r3, r4
 800447a:	d9fa      	bls.n	8004472 <_free_r+0x42>
 800447c:	6811      	ldr	r1, [r2, #0]
 800447e:	1850      	adds	r0, r2, r1
 8004480:	42a0      	cmp	r0, r4
 8004482:	d10b      	bne.n	800449c <_free_r+0x6c>
 8004484:	6820      	ldr	r0, [r4, #0]
 8004486:	4401      	add	r1, r0
 8004488:	1850      	adds	r0, r2, r1
 800448a:	4283      	cmp	r3, r0
 800448c:	6011      	str	r1, [r2, #0]
 800448e:	d1e0      	bne.n	8004452 <_free_r+0x22>
 8004490:	6818      	ldr	r0, [r3, #0]
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	6053      	str	r3, [r2, #4]
 8004496:	4408      	add	r0, r1
 8004498:	6010      	str	r0, [r2, #0]
 800449a:	e7da      	b.n	8004452 <_free_r+0x22>
 800449c:	d902      	bls.n	80044a4 <_free_r+0x74>
 800449e:	230c      	movs	r3, #12
 80044a0:	602b      	str	r3, [r5, #0]
 80044a2:	e7d6      	b.n	8004452 <_free_r+0x22>
 80044a4:	6820      	ldr	r0, [r4, #0]
 80044a6:	1821      	adds	r1, r4, r0
 80044a8:	428b      	cmp	r3, r1
 80044aa:	bf04      	itt	eq
 80044ac:	6819      	ldreq	r1, [r3, #0]
 80044ae:	685b      	ldreq	r3, [r3, #4]
 80044b0:	6063      	str	r3, [r4, #4]
 80044b2:	bf04      	itt	eq
 80044b4:	1809      	addeq	r1, r1, r0
 80044b6:	6021      	streq	r1, [r4, #0]
 80044b8:	6054      	str	r4, [r2, #4]
 80044ba:	e7ca      	b.n	8004452 <_free_r+0x22>
 80044bc:	bd38      	pop	{r3, r4, r5, pc}
 80044be:	bf00      	nop
 80044c0:	20000320 	.word	0x20000320

080044c4 <sbrk_aligned>:
 80044c4:	b570      	push	{r4, r5, r6, lr}
 80044c6:	4e0f      	ldr	r6, [pc, #60]	@ (8004504 <sbrk_aligned+0x40>)
 80044c8:	460c      	mov	r4, r1
 80044ca:	6831      	ldr	r1, [r6, #0]
 80044cc:	4605      	mov	r5, r0
 80044ce:	b911      	cbnz	r1, 80044d6 <sbrk_aligned+0x12>
 80044d0:	f000 fba6 	bl	8004c20 <_sbrk_r>
 80044d4:	6030      	str	r0, [r6, #0]
 80044d6:	4621      	mov	r1, r4
 80044d8:	4628      	mov	r0, r5
 80044da:	f000 fba1 	bl	8004c20 <_sbrk_r>
 80044de:	1c43      	adds	r3, r0, #1
 80044e0:	d103      	bne.n	80044ea <sbrk_aligned+0x26>
 80044e2:	f04f 34ff 	mov.w	r4, #4294967295
 80044e6:	4620      	mov	r0, r4
 80044e8:	bd70      	pop	{r4, r5, r6, pc}
 80044ea:	1cc4      	adds	r4, r0, #3
 80044ec:	f024 0403 	bic.w	r4, r4, #3
 80044f0:	42a0      	cmp	r0, r4
 80044f2:	d0f8      	beq.n	80044e6 <sbrk_aligned+0x22>
 80044f4:	1a21      	subs	r1, r4, r0
 80044f6:	4628      	mov	r0, r5
 80044f8:	f000 fb92 	bl	8004c20 <_sbrk_r>
 80044fc:	3001      	adds	r0, #1
 80044fe:	d1f2      	bne.n	80044e6 <sbrk_aligned+0x22>
 8004500:	e7ef      	b.n	80044e2 <sbrk_aligned+0x1e>
 8004502:	bf00      	nop
 8004504:	2000031c 	.word	0x2000031c

08004508 <_malloc_r>:
 8004508:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800450c:	1ccd      	adds	r5, r1, #3
 800450e:	f025 0503 	bic.w	r5, r5, #3
 8004512:	3508      	adds	r5, #8
 8004514:	2d0c      	cmp	r5, #12
 8004516:	bf38      	it	cc
 8004518:	250c      	movcc	r5, #12
 800451a:	2d00      	cmp	r5, #0
 800451c:	4606      	mov	r6, r0
 800451e:	db01      	blt.n	8004524 <_malloc_r+0x1c>
 8004520:	42a9      	cmp	r1, r5
 8004522:	d904      	bls.n	800452e <_malloc_r+0x26>
 8004524:	230c      	movs	r3, #12
 8004526:	6033      	str	r3, [r6, #0]
 8004528:	2000      	movs	r0, #0
 800452a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800452e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004604 <_malloc_r+0xfc>
 8004532:	f000 f869 	bl	8004608 <__malloc_lock>
 8004536:	f8d8 3000 	ldr.w	r3, [r8]
 800453a:	461c      	mov	r4, r3
 800453c:	bb44      	cbnz	r4, 8004590 <_malloc_r+0x88>
 800453e:	4629      	mov	r1, r5
 8004540:	4630      	mov	r0, r6
 8004542:	f7ff ffbf 	bl	80044c4 <sbrk_aligned>
 8004546:	1c43      	adds	r3, r0, #1
 8004548:	4604      	mov	r4, r0
 800454a:	d158      	bne.n	80045fe <_malloc_r+0xf6>
 800454c:	f8d8 4000 	ldr.w	r4, [r8]
 8004550:	4627      	mov	r7, r4
 8004552:	2f00      	cmp	r7, #0
 8004554:	d143      	bne.n	80045de <_malloc_r+0xd6>
 8004556:	2c00      	cmp	r4, #0
 8004558:	d04b      	beq.n	80045f2 <_malloc_r+0xea>
 800455a:	6823      	ldr	r3, [r4, #0]
 800455c:	4639      	mov	r1, r7
 800455e:	4630      	mov	r0, r6
 8004560:	eb04 0903 	add.w	r9, r4, r3
 8004564:	f000 fb5c 	bl	8004c20 <_sbrk_r>
 8004568:	4581      	cmp	r9, r0
 800456a:	d142      	bne.n	80045f2 <_malloc_r+0xea>
 800456c:	6821      	ldr	r1, [r4, #0]
 800456e:	1a6d      	subs	r5, r5, r1
 8004570:	4629      	mov	r1, r5
 8004572:	4630      	mov	r0, r6
 8004574:	f7ff ffa6 	bl	80044c4 <sbrk_aligned>
 8004578:	3001      	adds	r0, #1
 800457a:	d03a      	beq.n	80045f2 <_malloc_r+0xea>
 800457c:	6823      	ldr	r3, [r4, #0]
 800457e:	442b      	add	r3, r5
 8004580:	6023      	str	r3, [r4, #0]
 8004582:	f8d8 3000 	ldr.w	r3, [r8]
 8004586:	685a      	ldr	r2, [r3, #4]
 8004588:	bb62      	cbnz	r2, 80045e4 <_malloc_r+0xdc>
 800458a:	f8c8 7000 	str.w	r7, [r8]
 800458e:	e00f      	b.n	80045b0 <_malloc_r+0xa8>
 8004590:	6822      	ldr	r2, [r4, #0]
 8004592:	1b52      	subs	r2, r2, r5
 8004594:	d420      	bmi.n	80045d8 <_malloc_r+0xd0>
 8004596:	2a0b      	cmp	r2, #11
 8004598:	d917      	bls.n	80045ca <_malloc_r+0xc2>
 800459a:	1961      	adds	r1, r4, r5
 800459c:	42a3      	cmp	r3, r4
 800459e:	6025      	str	r5, [r4, #0]
 80045a0:	bf18      	it	ne
 80045a2:	6059      	strne	r1, [r3, #4]
 80045a4:	6863      	ldr	r3, [r4, #4]
 80045a6:	bf08      	it	eq
 80045a8:	f8c8 1000 	streq.w	r1, [r8]
 80045ac:	5162      	str	r2, [r4, r5]
 80045ae:	604b      	str	r3, [r1, #4]
 80045b0:	4630      	mov	r0, r6
 80045b2:	f000 f82f 	bl	8004614 <__malloc_unlock>
 80045b6:	f104 000b 	add.w	r0, r4, #11
 80045ba:	1d23      	adds	r3, r4, #4
 80045bc:	f020 0007 	bic.w	r0, r0, #7
 80045c0:	1ac2      	subs	r2, r0, r3
 80045c2:	bf1c      	itt	ne
 80045c4:	1a1b      	subne	r3, r3, r0
 80045c6:	50a3      	strne	r3, [r4, r2]
 80045c8:	e7af      	b.n	800452a <_malloc_r+0x22>
 80045ca:	6862      	ldr	r2, [r4, #4]
 80045cc:	42a3      	cmp	r3, r4
 80045ce:	bf0c      	ite	eq
 80045d0:	f8c8 2000 	streq.w	r2, [r8]
 80045d4:	605a      	strne	r2, [r3, #4]
 80045d6:	e7eb      	b.n	80045b0 <_malloc_r+0xa8>
 80045d8:	4623      	mov	r3, r4
 80045da:	6864      	ldr	r4, [r4, #4]
 80045dc:	e7ae      	b.n	800453c <_malloc_r+0x34>
 80045de:	463c      	mov	r4, r7
 80045e0:	687f      	ldr	r7, [r7, #4]
 80045e2:	e7b6      	b.n	8004552 <_malloc_r+0x4a>
 80045e4:	461a      	mov	r2, r3
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	42a3      	cmp	r3, r4
 80045ea:	d1fb      	bne.n	80045e4 <_malloc_r+0xdc>
 80045ec:	2300      	movs	r3, #0
 80045ee:	6053      	str	r3, [r2, #4]
 80045f0:	e7de      	b.n	80045b0 <_malloc_r+0xa8>
 80045f2:	230c      	movs	r3, #12
 80045f4:	6033      	str	r3, [r6, #0]
 80045f6:	4630      	mov	r0, r6
 80045f8:	f000 f80c 	bl	8004614 <__malloc_unlock>
 80045fc:	e794      	b.n	8004528 <_malloc_r+0x20>
 80045fe:	6005      	str	r5, [r0, #0]
 8004600:	e7d6      	b.n	80045b0 <_malloc_r+0xa8>
 8004602:	bf00      	nop
 8004604:	20000320 	.word	0x20000320

08004608 <__malloc_lock>:
 8004608:	4801      	ldr	r0, [pc, #4]	@ (8004610 <__malloc_lock+0x8>)
 800460a:	f7ff bf0f 	b.w	800442c <__retarget_lock_acquire_recursive>
 800460e:	bf00      	nop
 8004610:	20000318 	.word	0x20000318

08004614 <__malloc_unlock>:
 8004614:	4801      	ldr	r0, [pc, #4]	@ (800461c <__malloc_unlock+0x8>)
 8004616:	f7ff bf0a 	b.w	800442e <__retarget_lock_release_recursive>
 800461a:	bf00      	nop
 800461c:	20000318 	.word	0x20000318

08004620 <__ssputs_r>:
 8004620:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004624:	688e      	ldr	r6, [r1, #8]
 8004626:	461f      	mov	r7, r3
 8004628:	42be      	cmp	r6, r7
 800462a:	680b      	ldr	r3, [r1, #0]
 800462c:	4682      	mov	sl, r0
 800462e:	460c      	mov	r4, r1
 8004630:	4690      	mov	r8, r2
 8004632:	d82d      	bhi.n	8004690 <__ssputs_r+0x70>
 8004634:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004638:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800463c:	d026      	beq.n	800468c <__ssputs_r+0x6c>
 800463e:	6965      	ldr	r5, [r4, #20]
 8004640:	6909      	ldr	r1, [r1, #16]
 8004642:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004646:	eba3 0901 	sub.w	r9, r3, r1
 800464a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800464e:	1c7b      	adds	r3, r7, #1
 8004650:	444b      	add	r3, r9
 8004652:	106d      	asrs	r5, r5, #1
 8004654:	429d      	cmp	r5, r3
 8004656:	bf38      	it	cc
 8004658:	461d      	movcc	r5, r3
 800465a:	0553      	lsls	r3, r2, #21
 800465c:	d527      	bpl.n	80046ae <__ssputs_r+0x8e>
 800465e:	4629      	mov	r1, r5
 8004660:	f7ff ff52 	bl	8004508 <_malloc_r>
 8004664:	4606      	mov	r6, r0
 8004666:	b360      	cbz	r0, 80046c2 <__ssputs_r+0xa2>
 8004668:	6921      	ldr	r1, [r4, #16]
 800466a:	464a      	mov	r2, r9
 800466c:	f000 fae8 	bl	8004c40 <memcpy>
 8004670:	89a3      	ldrh	r3, [r4, #12]
 8004672:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004676:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800467a:	81a3      	strh	r3, [r4, #12]
 800467c:	6126      	str	r6, [r4, #16]
 800467e:	6165      	str	r5, [r4, #20]
 8004680:	444e      	add	r6, r9
 8004682:	eba5 0509 	sub.w	r5, r5, r9
 8004686:	6026      	str	r6, [r4, #0]
 8004688:	60a5      	str	r5, [r4, #8]
 800468a:	463e      	mov	r6, r7
 800468c:	42be      	cmp	r6, r7
 800468e:	d900      	bls.n	8004692 <__ssputs_r+0x72>
 8004690:	463e      	mov	r6, r7
 8004692:	6820      	ldr	r0, [r4, #0]
 8004694:	4632      	mov	r2, r6
 8004696:	4641      	mov	r1, r8
 8004698:	f000 faa8 	bl	8004bec <memmove>
 800469c:	68a3      	ldr	r3, [r4, #8]
 800469e:	1b9b      	subs	r3, r3, r6
 80046a0:	60a3      	str	r3, [r4, #8]
 80046a2:	6823      	ldr	r3, [r4, #0]
 80046a4:	4433      	add	r3, r6
 80046a6:	6023      	str	r3, [r4, #0]
 80046a8:	2000      	movs	r0, #0
 80046aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046ae:	462a      	mov	r2, r5
 80046b0:	f000 fad4 	bl	8004c5c <_realloc_r>
 80046b4:	4606      	mov	r6, r0
 80046b6:	2800      	cmp	r0, #0
 80046b8:	d1e0      	bne.n	800467c <__ssputs_r+0x5c>
 80046ba:	6921      	ldr	r1, [r4, #16]
 80046bc:	4650      	mov	r0, sl
 80046be:	f7ff feb7 	bl	8004430 <_free_r>
 80046c2:	230c      	movs	r3, #12
 80046c4:	f8ca 3000 	str.w	r3, [sl]
 80046c8:	89a3      	ldrh	r3, [r4, #12]
 80046ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80046ce:	81a3      	strh	r3, [r4, #12]
 80046d0:	f04f 30ff 	mov.w	r0, #4294967295
 80046d4:	e7e9      	b.n	80046aa <__ssputs_r+0x8a>
	...

080046d8 <_svfiprintf_r>:
 80046d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046dc:	4698      	mov	r8, r3
 80046de:	898b      	ldrh	r3, [r1, #12]
 80046e0:	061b      	lsls	r3, r3, #24
 80046e2:	b09d      	sub	sp, #116	@ 0x74
 80046e4:	4607      	mov	r7, r0
 80046e6:	460d      	mov	r5, r1
 80046e8:	4614      	mov	r4, r2
 80046ea:	d510      	bpl.n	800470e <_svfiprintf_r+0x36>
 80046ec:	690b      	ldr	r3, [r1, #16]
 80046ee:	b973      	cbnz	r3, 800470e <_svfiprintf_r+0x36>
 80046f0:	2140      	movs	r1, #64	@ 0x40
 80046f2:	f7ff ff09 	bl	8004508 <_malloc_r>
 80046f6:	6028      	str	r0, [r5, #0]
 80046f8:	6128      	str	r0, [r5, #16]
 80046fa:	b930      	cbnz	r0, 800470a <_svfiprintf_r+0x32>
 80046fc:	230c      	movs	r3, #12
 80046fe:	603b      	str	r3, [r7, #0]
 8004700:	f04f 30ff 	mov.w	r0, #4294967295
 8004704:	b01d      	add	sp, #116	@ 0x74
 8004706:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800470a:	2340      	movs	r3, #64	@ 0x40
 800470c:	616b      	str	r3, [r5, #20]
 800470e:	2300      	movs	r3, #0
 8004710:	9309      	str	r3, [sp, #36]	@ 0x24
 8004712:	2320      	movs	r3, #32
 8004714:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004718:	f8cd 800c 	str.w	r8, [sp, #12]
 800471c:	2330      	movs	r3, #48	@ 0x30
 800471e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80048bc <_svfiprintf_r+0x1e4>
 8004722:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004726:	f04f 0901 	mov.w	r9, #1
 800472a:	4623      	mov	r3, r4
 800472c:	469a      	mov	sl, r3
 800472e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004732:	b10a      	cbz	r2, 8004738 <_svfiprintf_r+0x60>
 8004734:	2a25      	cmp	r2, #37	@ 0x25
 8004736:	d1f9      	bne.n	800472c <_svfiprintf_r+0x54>
 8004738:	ebba 0b04 	subs.w	fp, sl, r4
 800473c:	d00b      	beq.n	8004756 <_svfiprintf_r+0x7e>
 800473e:	465b      	mov	r3, fp
 8004740:	4622      	mov	r2, r4
 8004742:	4629      	mov	r1, r5
 8004744:	4638      	mov	r0, r7
 8004746:	f7ff ff6b 	bl	8004620 <__ssputs_r>
 800474a:	3001      	adds	r0, #1
 800474c:	f000 80a7 	beq.w	800489e <_svfiprintf_r+0x1c6>
 8004750:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004752:	445a      	add	r2, fp
 8004754:	9209      	str	r2, [sp, #36]	@ 0x24
 8004756:	f89a 3000 	ldrb.w	r3, [sl]
 800475a:	2b00      	cmp	r3, #0
 800475c:	f000 809f 	beq.w	800489e <_svfiprintf_r+0x1c6>
 8004760:	2300      	movs	r3, #0
 8004762:	f04f 32ff 	mov.w	r2, #4294967295
 8004766:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800476a:	f10a 0a01 	add.w	sl, sl, #1
 800476e:	9304      	str	r3, [sp, #16]
 8004770:	9307      	str	r3, [sp, #28]
 8004772:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004776:	931a      	str	r3, [sp, #104]	@ 0x68
 8004778:	4654      	mov	r4, sl
 800477a:	2205      	movs	r2, #5
 800477c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004780:	484e      	ldr	r0, [pc, #312]	@ (80048bc <_svfiprintf_r+0x1e4>)
 8004782:	f7fb fd2d 	bl	80001e0 <memchr>
 8004786:	9a04      	ldr	r2, [sp, #16]
 8004788:	b9d8      	cbnz	r0, 80047c2 <_svfiprintf_r+0xea>
 800478a:	06d0      	lsls	r0, r2, #27
 800478c:	bf44      	itt	mi
 800478e:	2320      	movmi	r3, #32
 8004790:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004794:	0711      	lsls	r1, r2, #28
 8004796:	bf44      	itt	mi
 8004798:	232b      	movmi	r3, #43	@ 0x2b
 800479a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800479e:	f89a 3000 	ldrb.w	r3, [sl]
 80047a2:	2b2a      	cmp	r3, #42	@ 0x2a
 80047a4:	d015      	beq.n	80047d2 <_svfiprintf_r+0xfa>
 80047a6:	9a07      	ldr	r2, [sp, #28]
 80047a8:	4654      	mov	r4, sl
 80047aa:	2000      	movs	r0, #0
 80047ac:	f04f 0c0a 	mov.w	ip, #10
 80047b0:	4621      	mov	r1, r4
 80047b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80047b6:	3b30      	subs	r3, #48	@ 0x30
 80047b8:	2b09      	cmp	r3, #9
 80047ba:	d94b      	bls.n	8004854 <_svfiprintf_r+0x17c>
 80047bc:	b1b0      	cbz	r0, 80047ec <_svfiprintf_r+0x114>
 80047be:	9207      	str	r2, [sp, #28]
 80047c0:	e014      	b.n	80047ec <_svfiprintf_r+0x114>
 80047c2:	eba0 0308 	sub.w	r3, r0, r8
 80047c6:	fa09 f303 	lsl.w	r3, r9, r3
 80047ca:	4313      	orrs	r3, r2
 80047cc:	9304      	str	r3, [sp, #16]
 80047ce:	46a2      	mov	sl, r4
 80047d0:	e7d2      	b.n	8004778 <_svfiprintf_r+0xa0>
 80047d2:	9b03      	ldr	r3, [sp, #12]
 80047d4:	1d19      	adds	r1, r3, #4
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	9103      	str	r1, [sp, #12]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	bfbb      	ittet	lt
 80047de:	425b      	neglt	r3, r3
 80047e0:	f042 0202 	orrlt.w	r2, r2, #2
 80047e4:	9307      	strge	r3, [sp, #28]
 80047e6:	9307      	strlt	r3, [sp, #28]
 80047e8:	bfb8      	it	lt
 80047ea:	9204      	strlt	r2, [sp, #16]
 80047ec:	7823      	ldrb	r3, [r4, #0]
 80047ee:	2b2e      	cmp	r3, #46	@ 0x2e
 80047f0:	d10a      	bne.n	8004808 <_svfiprintf_r+0x130>
 80047f2:	7863      	ldrb	r3, [r4, #1]
 80047f4:	2b2a      	cmp	r3, #42	@ 0x2a
 80047f6:	d132      	bne.n	800485e <_svfiprintf_r+0x186>
 80047f8:	9b03      	ldr	r3, [sp, #12]
 80047fa:	1d1a      	adds	r2, r3, #4
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	9203      	str	r2, [sp, #12]
 8004800:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004804:	3402      	adds	r4, #2
 8004806:	9305      	str	r3, [sp, #20]
 8004808:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80048cc <_svfiprintf_r+0x1f4>
 800480c:	7821      	ldrb	r1, [r4, #0]
 800480e:	2203      	movs	r2, #3
 8004810:	4650      	mov	r0, sl
 8004812:	f7fb fce5 	bl	80001e0 <memchr>
 8004816:	b138      	cbz	r0, 8004828 <_svfiprintf_r+0x150>
 8004818:	9b04      	ldr	r3, [sp, #16]
 800481a:	eba0 000a 	sub.w	r0, r0, sl
 800481e:	2240      	movs	r2, #64	@ 0x40
 8004820:	4082      	lsls	r2, r0
 8004822:	4313      	orrs	r3, r2
 8004824:	3401      	adds	r4, #1
 8004826:	9304      	str	r3, [sp, #16]
 8004828:	f814 1b01 	ldrb.w	r1, [r4], #1
 800482c:	4824      	ldr	r0, [pc, #144]	@ (80048c0 <_svfiprintf_r+0x1e8>)
 800482e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004832:	2206      	movs	r2, #6
 8004834:	f7fb fcd4 	bl	80001e0 <memchr>
 8004838:	2800      	cmp	r0, #0
 800483a:	d036      	beq.n	80048aa <_svfiprintf_r+0x1d2>
 800483c:	4b21      	ldr	r3, [pc, #132]	@ (80048c4 <_svfiprintf_r+0x1ec>)
 800483e:	bb1b      	cbnz	r3, 8004888 <_svfiprintf_r+0x1b0>
 8004840:	9b03      	ldr	r3, [sp, #12]
 8004842:	3307      	adds	r3, #7
 8004844:	f023 0307 	bic.w	r3, r3, #7
 8004848:	3308      	adds	r3, #8
 800484a:	9303      	str	r3, [sp, #12]
 800484c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800484e:	4433      	add	r3, r6
 8004850:	9309      	str	r3, [sp, #36]	@ 0x24
 8004852:	e76a      	b.n	800472a <_svfiprintf_r+0x52>
 8004854:	fb0c 3202 	mla	r2, ip, r2, r3
 8004858:	460c      	mov	r4, r1
 800485a:	2001      	movs	r0, #1
 800485c:	e7a8      	b.n	80047b0 <_svfiprintf_r+0xd8>
 800485e:	2300      	movs	r3, #0
 8004860:	3401      	adds	r4, #1
 8004862:	9305      	str	r3, [sp, #20]
 8004864:	4619      	mov	r1, r3
 8004866:	f04f 0c0a 	mov.w	ip, #10
 800486a:	4620      	mov	r0, r4
 800486c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004870:	3a30      	subs	r2, #48	@ 0x30
 8004872:	2a09      	cmp	r2, #9
 8004874:	d903      	bls.n	800487e <_svfiprintf_r+0x1a6>
 8004876:	2b00      	cmp	r3, #0
 8004878:	d0c6      	beq.n	8004808 <_svfiprintf_r+0x130>
 800487a:	9105      	str	r1, [sp, #20]
 800487c:	e7c4      	b.n	8004808 <_svfiprintf_r+0x130>
 800487e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004882:	4604      	mov	r4, r0
 8004884:	2301      	movs	r3, #1
 8004886:	e7f0      	b.n	800486a <_svfiprintf_r+0x192>
 8004888:	ab03      	add	r3, sp, #12
 800488a:	9300      	str	r3, [sp, #0]
 800488c:	462a      	mov	r2, r5
 800488e:	4b0e      	ldr	r3, [pc, #56]	@ (80048c8 <_svfiprintf_r+0x1f0>)
 8004890:	a904      	add	r1, sp, #16
 8004892:	4638      	mov	r0, r7
 8004894:	f3af 8000 	nop.w
 8004898:	1c42      	adds	r2, r0, #1
 800489a:	4606      	mov	r6, r0
 800489c:	d1d6      	bne.n	800484c <_svfiprintf_r+0x174>
 800489e:	89ab      	ldrh	r3, [r5, #12]
 80048a0:	065b      	lsls	r3, r3, #25
 80048a2:	f53f af2d 	bmi.w	8004700 <_svfiprintf_r+0x28>
 80048a6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80048a8:	e72c      	b.n	8004704 <_svfiprintf_r+0x2c>
 80048aa:	ab03      	add	r3, sp, #12
 80048ac:	9300      	str	r3, [sp, #0]
 80048ae:	462a      	mov	r2, r5
 80048b0:	4b05      	ldr	r3, [pc, #20]	@ (80048c8 <_svfiprintf_r+0x1f0>)
 80048b2:	a904      	add	r1, sp, #16
 80048b4:	4638      	mov	r0, r7
 80048b6:	f000 f879 	bl	80049ac <_printf_i>
 80048ba:	e7ed      	b.n	8004898 <_svfiprintf_r+0x1c0>
 80048bc:	08004d5c 	.word	0x08004d5c
 80048c0:	08004d66 	.word	0x08004d66
 80048c4:	00000000 	.word	0x00000000
 80048c8:	08004621 	.word	0x08004621
 80048cc:	08004d62 	.word	0x08004d62

080048d0 <_printf_common>:
 80048d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80048d4:	4616      	mov	r6, r2
 80048d6:	4698      	mov	r8, r3
 80048d8:	688a      	ldr	r2, [r1, #8]
 80048da:	690b      	ldr	r3, [r1, #16]
 80048dc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80048e0:	4293      	cmp	r3, r2
 80048e2:	bfb8      	it	lt
 80048e4:	4613      	movlt	r3, r2
 80048e6:	6033      	str	r3, [r6, #0]
 80048e8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80048ec:	4607      	mov	r7, r0
 80048ee:	460c      	mov	r4, r1
 80048f0:	b10a      	cbz	r2, 80048f6 <_printf_common+0x26>
 80048f2:	3301      	adds	r3, #1
 80048f4:	6033      	str	r3, [r6, #0]
 80048f6:	6823      	ldr	r3, [r4, #0]
 80048f8:	0699      	lsls	r1, r3, #26
 80048fa:	bf42      	ittt	mi
 80048fc:	6833      	ldrmi	r3, [r6, #0]
 80048fe:	3302      	addmi	r3, #2
 8004900:	6033      	strmi	r3, [r6, #0]
 8004902:	6825      	ldr	r5, [r4, #0]
 8004904:	f015 0506 	ands.w	r5, r5, #6
 8004908:	d106      	bne.n	8004918 <_printf_common+0x48>
 800490a:	f104 0a19 	add.w	sl, r4, #25
 800490e:	68e3      	ldr	r3, [r4, #12]
 8004910:	6832      	ldr	r2, [r6, #0]
 8004912:	1a9b      	subs	r3, r3, r2
 8004914:	42ab      	cmp	r3, r5
 8004916:	dc26      	bgt.n	8004966 <_printf_common+0x96>
 8004918:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800491c:	6822      	ldr	r2, [r4, #0]
 800491e:	3b00      	subs	r3, #0
 8004920:	bf18      	it	ne
 8004922:	2301      	movne	r3, #1
 8004924:	0692      	lsls	r2, r2, #26
 8004926:	d42b      	bmi.n	8004980 <_printf_common+0xb0>
 8004928:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800492c:	4641      	mov	r1, r8
 800492e:	4638      	mov	r0, r7
 8004930:	47c8      	blx	r9
 8004932:	3001      	adds	r0, #1
 8004934:	d01e      	beq.n	8004974 <_printf_common+0xa4>
 8004936:	6823      	ldr	r3, [r4, #0]
 8004938:	6922      	ldr	r2, [r4, #16]
 800493a:	f003 0306 	and.w	r3, r3, #6
 800493e:	2b04      	cmp	r3, #4
 8004940:	bf02      	ittt	eq
 8004942:	68e5      	ldreq	r5, [r4, #12]
 8004944:	6833      	ldreq	r3, [r6, #0]
 8004946:	1aed      	subeq	r5, r5, r3
 8004948:	68a3      	ldr	r3, [r4, #8]
 800494a:	bf0c      	ite	eq
 800494c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004950:	2500      	movne	r5, #0
 8004952:	4293      	cmp	r3, r2
 8004954:	bfc4      	itt	gt
 8004956:	1a9b      	subgt	r3, r3, r2
 8004958:	18ed      	addgt	r5, r5, r3
 800495a:	2600      	movs	r6, #0
 800495c:	341a      	adds	r4, #26
 800495e:	42b5      	cmp	r5, r6
 8004960:	d11a      	bne.n	8004998 <_printf_common+0xc8>
 8004962:	2000      	movs	r0, #0
 8004964:	e008      	b.n	8004978 <_printf_common+0xa8>
 8004966:	2301      	movs	r3, #1
 8004968:	4652      	mov	r2, sl
 800496a:	4641      	mov	r1, r8
 800496c:	4638      	mov	r0, r7
 800496e:	47c8      	blx	r9
 8004970:	3001      	adds	r0, #1
 8004972:	d103      	bne.n	800497c <_printf_common+0xac>
 8004974:	f04f 30ff 	mov.w	r0, #4294967295
 8004978:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800497c:	3501      	adds	r5, #1
 800497e:	e7c6      	b.n	800490e <_printf_common+0x3e>
 8004980:	18e1      	adds	r1, r4, r3
 8004982:	1c5a      	adds	r2, r3, #1
 8004984:	2030      	movs	r0, #48	@ 0x30
 8004986:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800498a:	4422      	add	r2, r4
 800498c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004990:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004994:	3302      	adds	r3, #2
 8004996:	e7c7      	b.n	8004928 <_printf_common+0x58>
 8004998:	2301      	movs	r3, #1
 800499a:	4622      	mov	r2, r4
 800499c:	4641      	mov	r1, r8
 800499e:	4638      	mov	r0, r7
 80049a0:	47c8      	blx	r9
 80049a2:	3001      	adds	r0, #1
 80049a4:	d0e6      	beq.n	8004974 <_printf_common+0xa4>
 80049a6:	3601      	adds	r6, #1
 80049a8:	e7d9      	b.n	800495e <_printf_common+0x8e>
	...

080049ac <_printf_i>:
 80049ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80049b0:	7e0f      	ldrb	r7, [r1, #24]
 80049b2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80049b4:	2f78      	cmp	r7, #120	@ 0x78
 80049b6:	4691      	mov	r9, r2
 80049b8:	4680      	mov	r8, r0
 80049ba:	460c      	mov	r4, r1
 80049bc:	469a      	mov	sl, r3
 80049be:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80049c2:	d807      	bhi.n	80049d4 <_printf_i+0x28>
 80049c4:	2f62      	cmp	r7, #98	@ 0x62
 80049c6:	d80a      	bhi.n	80049de <_printf_i+0x32>
 80049c8:	2f00      	cmp	r7, #0
 80049ca:	f000 80d2 	beq.w	8004b72 <_printf_i+0x1c6>
 80049ce:	2f58      	cmp	r7, #88	@ 0x58
 80049d0:	f000 80b9 	beq.w	8004b46 <_printf_i+0x19a>
 80049d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80049d8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80049dc:	e03a      	b.n	8004a54 <_printf_i+0xa8>
 80049de:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80049e2:	2b15      	cmp	r3, #21
 80049e4:	d8f6      	bhi.n	80049d4 <_printf_i+0x28>
 80049e6:	a101      	add	r1, pc, #4	@ (adr r1, 80049ec <_printf_i+0x40>)
 80049e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80049ec:	08004a45 	.word	0x08004a45
 80049f0:	08004a59 	.word	0x08004a59
 80049f4:	080049d5 	.word	0x080049d5
 80049f8:	080049d5 	.word	0x080049d5
 80049fc:	080049d5 	.word	0x080049d5
 8004a00:	080049d5 	.word	0x080049d5
 8004a04:	08004a59 	.word	0x08004a59
 8004a08:	080049d5 	.word	0x080049d5
 8004a0c:	080049d5 	.word	0x080049d5
 8004a10:	080049d5 	.word	0x080049d5
 8004a14:	080049d5 	.word	0x080049d5
 8004a18:	08004b59 	.word	0x08004b59
 8004a1c:	08004a83 	.word	0x08004a83
 8004a20:	08004b13 	.word	0x08004b13
 8004a24:	080049d5 	.word	0x080049d5
 8004a28:	080049d5 	.word	0x080049d5
 8004a2c:	08004b7b 	.word	0x08004b7b
 8004a30:	080049d5 	.word	0x080049d5
 8004a34:	08004a83 	.word	0x08004a83
 8004a38:	080049d5 	.word	0x080049d5
 8004a3c:	080049d5 	.word	0x080049d5
 8004a40:	08004b1b 	.word	0x08004b1b
 8004a44:	6833      	ldr	r3, [r6, #0]
 8004a46:	1d1a      	adds	r2, r3, #4
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	6032      	str	r2, [r6, #0]
 8004a4c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004a50:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004a54:	2301      	movs	r3, #1
 8004a56:	e09d      	b.n	8004b94 <_printf_i+0x1e8>
 8004a58:	6833      	ldr	r3, [r6, #0]
 8004a5a:	6820      	ldr	r0, [r4, #0]
 8004a5c:	1d19      	adds	r1, r3, #4
 8004a5e:	6031      	str	r1, [r6, #0]
 8004a60:	0606      	lsls	r6, r0, #24
 8004a62:	d501      	bpl.n	8004a68 <_printf_i+0xbc>
 8004a64:	681d      	ldr	r5, [r3, #0]
 8004a66:	e003      	b.n	8004a70 <_printf_i+0xc4>
 8004a68:	0645      	lsls	r5, r0, #25
 8004a6a:	d5fb      	bpl.n	8004a64 <_printf_i+0xb8>
 8004a6c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004a70:	2d00      	cmp	r5, #0
 8004a72:	da03      	bge.n	8004a7c <_printf_i+0xd0>
 8004a74:	232d      	movs	r3, #45	@ 0x2d
 8004a76:	426d      	negs	r5, r5
 8004a78:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004a7c:	4859      	ldr	r0, [pc, #356]	@ (8004be4 <_printf_i+0x238>)
 8004a7e:	230a      	movs	r3, #10
 8004a80:	e011      	b.n	8004aa6 <_printf_i+0xfa>
 8004a82:	6821      	ldr	r1, [r4, #0]
 8004a84:	6833      	ldr	r3, [r6, #0]
 8004a86:	0608      	lsls	r0, r1, #24
 8004a88:	f853 5b04 	ldr.w	r5, [r3], #4
 8004a8c:	d402      	bmi.n	8004a94 <_printf_i+0xe8>
 8004a8e:	0649      	lsls	r1, r1, #25
 8004a90:	bf48      	it	mi
 8004a92:	b2ad      	uxthmi	r5, r5
 8004a94:	2f6f      	cmp	r7, #111	@ 0x6f
 8004a96:	4853      	ldr	r0, [pc, #332]	@ (8004be4 <_printf_i+0x238>)
 8004a98:	6033      	str	r3, [r6, #0]
 8004a9a:	bf14      	ite	ne
 8004a9c:	230a      	movne	r3, #10
 8004a9e:	2308      	moveq	r3, #8
 8004aa0:	2100      	movs	r1, #0
 8004aa2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004aa6:	6866      	ldr	r6, [r4, #4]
 8004aa8:	60a6      	str	r6, [r4, #8]
 8004aaa:	2e00      	cmp	r6, #0
 8004aac:	bfa2      	ittt	ge
 8004aae:	6821      	ldrge	r1, [r4, #0]
 8004ab0:	f021 0104 	bicge.w	r1, r1, #4
 8004ab4:	6021      	strge	r1, [r4, #0]
 8004ab6:	b90d      	cbnz	r5, 8004abc <_printf_i+0x110>
 8004ab8:	2e00      	cmp	r6, #0
 8004aba:	d04b      	beq.n	8004b54 <_printf_i+0x1a8>
 8004abc:	4616      	mov	r6, r2
 8004abe:	fbb5 f1f3 	udiv	r1, r5, r3
 8004ac2:	fb03 5711 	mls	r7, r3, r1, r5
 8004ac6:	5dc7      	ldrb	r7, [r0, r7]
 8004ac8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004acc:	462f      	mov	r7, r5
 8004ace:	42bb      	cmp	r3, r7
 8004ad0:	460d      	mov	r5, r1
 8004ad2:	d9f4      	bls.n	8004abe <_printf_i+0x112>
 8004ad4:	2b08      	cmp	r3, #8
 8004ad6:	d10b      	bne.n	8004af0 <_printf_i+0x144>
 8004ad8:	6823      	ldr	r3, [r4, #0]
 8004ada:	07df      	lsls	r7, r3, #31
 8004adc:	d508      	bpl.n	8004af0 <_printf_i+0x144>
 8004ade:	6923      	ldr	r3, [r4, #16]
 8004ae0:	6861      	ldr	r1, [r4, #4]
 8004ae2:	4299      	cmp	r1, r3
 8004ae4:	bfde      	ittt	le
 8004ae6:	2330      	movle	r3, #48	@ 0x30
 8004ae8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004aec:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004af0:	1b92      	subs	r2, r2, r6
 8004af2:	6122      	str	r2, [r4, #16]
 8004af4:	f8cd a000 	str.w	sl, [sp]
 8004af8:	464b      	mov	r3, r9
 8004afa:	aa03      	add	r2, sp, #12
 8004afc:	4621      	mov	r1, r4
 8004afe:	4640      	mov	r0, r8
 8004b00:	f7ff fee6 	bl	80048d0 <_printf_common>
 8004b04:	3001      	adds	r0, #1
 8004b06:	d14a      	bne.n	8004b9e <_printf_i+0x1f2>
 8004b08:	f04f 30ff 	mov.w	r0, #4294967295
 8004b0c:	b004      	add	sp, #16
 8004b0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b12:	6823      	ldr	r3, [r4, #0]
 8004b14:	f043 0320 	orr.w	r3, r3, #32
 8004b18:	6023      	str	r3, [r4, #0]
 8004b1a:	4833      	ldr	r0, [pc, #204]	@ (8004be8 <_printf_i+0x23c>)
 8004b1c:	2778      	movs	r7, #120	@ 0x78
 8004b1e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004b22:	6823      	ldr	r3, [r4, #0]
 8004b24:	6831      	ldr	r1, [r6, #0]
 8004b26:	061f      	lsls	r7, r3, #24
 8004b28:	f851 5b04 	ldr.w	r5, [r1], #4
 8004b2c:	d402      	bmi.n	8004b34 <_printf_i+0x188>
 8004b2e:	065f      	lsls	r7, r3, #25
 8004b30:	bf48      	it	mi
 8004b32:	b2ad      	uxthmi	r5, r5
 8004b34:	6031      	str	r1, [r6, #0]
 8004b36:	07d9      	lsls	r1, r3, #31
 8004b38:	bf44      	itt	mi
 8004b3a:	f043 0320 	orrmi.w	r3, r3, #32
 8004b3e:	6023      	strmi	r3, [r4, #0]
 8004b40:	b11d      	cbz	r5, 8004b4a <_printf_i+0x19e>
 8004b42:	2310      	movs	r3, #16
 8004b44:	e7ac      	b.n	8004aa0 <_printf_i+0xf4>
 8004b46:	4827      	ldr	r0, [pc, #156]	@ (8004be4 <_printf_i+0x238>)
 8004b48:	e7e9      	b.n	8004b1e <_printf_i+0x172>
 8004b4a:	6823      	ldr	r3, [r4, #0]
 8004b4c:	f023 0320 	bic.w	r3, r3, #32
 8004b50:	6023      	str	r3, [r4, #0]
 8004b52:	e7f6      	b.n	8004b42 <_printf_i+0x196>
 8004b54:	4616      	mov	r6, r2
 8004b56:	e7bd      	b.n	8004ad4 <_printf_i+0x128>
 8004b58:	6833      	ldr	r3, [r6, #0]
 8004b5a:	6825      	ldr	r5, [r4, #0]
 8004b5c:	6961      	ldr	r1, [r4, #20]
 8004b5e:	1d18      	adds	r0, r3, #4
 8004b60:	6030      	str	r0, [r6, #0]
 8004b62:	062e      	lsls	r6, r5, #24
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	d501      	bpl.n	8004b6c <_printf_i+0x1c0>
 8004b68:	6019      	str	r1, [r3, #0]
 8004b6a:	e002      	b.n	8004b72 <_printf_i+0x1c6>
 8004b6c:	0668      	lsls	r0, r5, #25
 8004b6e:	d5fb      	bpl.n	8004b68 <_printf_i+0x1bc>
 8004b70:	8019      	strh	r1, [r3, #0]
 8004b72:	2300      	movs	r3, #0
 8004b74:	6123      	str	r3, [r4, #16]
 8004b76:	4616      	mov	r6, r2
 8004b78:	e7bc      	b.n	8004af4 <_printf_i+0x148>
 8004b7a:	6833      	ldr	r3, [r6, #0]
 8004b7c:	1d1a      	adds	r2, r3, #4
 8004b7e:	6032      	str	r2, [r6, #0]
 8004b80:	681e      	ldr	r6, [r3, #0]
 8004b82:	6862      	ldr	r2, [r4, #4]
 8004b84:	2100      	movs	r1, #0
 8004b86:	4630      	mov	r0, r6
 8004b88:	f7fb fb2a 	bl	80001e0 <memchr>
 8004b8c:	b108      	cbz	r0, 8004b92 <_printf_i+0x1e6>
 8004b8e:	1b80      	subs	r0, r0, r6
 8004b90:	6060      	str	r0, [r4, #4]
 8004b92:	6863      	ldr	r3, [r4, #4]
 8004b94:	6123      	str	r3, [r4, #16]
 8004b96:	2300      	movs	r3, #0
 8004b98:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004b9c:	e7aa      	b.n	8004af4 <_printf_i+0x148>
 8004b9e:	6923      	ldr	r3, [r4, #16]
 8004ba0:	4632      	mov	r2, r6
 8004ba2:	4649      	mov	r1, r9
 8004ba4:	4640      	mov	r0, r8
 8004ba6:	47d0      	blx	sl
 8004ba8:	3001      	adds	r0, #1
 8004baa:	d0ad      	beq.n	8004b08 <_printf_i+0x15c>
 8004bac:	6823      	ldr	r3, [r4, #0]
 8004bae:	079b      	lsls	r3, r3, #30
 8004bb0:	d413      	bmi.n	8004bda <_printf_i+0x22e>
 8004bb2:	68e0      	ldr	r0, [r4, #12]
 8004bb4:	9b03      	ldr	r3, [sp, #12]
 8004bb6:	4298      	cmp	r0, r3
 8004bb8:	bfb8      	it	lt
 8004bba:	4618      	movlt	r0, r3
 8004bbc:	e7a6      	b.n	8004b0c <_printf_i+0x160>
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	4632      	mov	r2, r6
 8004bc2:	4649      	mov	r1, r9
 8004bc4:	4640      	mov	r0, r8
 8004bc6:	47d0      	blx	sl
 8004bc8:	3001      	adds	r0, #1
 8004bca:	d09d      	beq.n	8004b08 <_printf_i+0x15c>
 8004bcc:	3501      	adds	r5, #1
 8004bce:	68e3      	ldr	r3, [r4, #12]
 8004bd0:	9903      	ldr	r1, [sp, #12]
 8004bd2:	1a5b      	subs	r3, r3, r1
 8004bd4:	42ab      	cmp	r3, r5
 8004bd6:	dcf2      	bgt.n	8004bbe <_printf_i+0x212>
 8004bd8:	e7eb      	b.n	8004bb2 <_printf_i+0x206>
 8004bda:	2500      	movs	r5, #0
 8004bdc:	f104 0619 	add.w	r6, r4, #25
 8004be0:	e7f5      	b.n	8004bce <_printf_i+0x222>
 8004be2:	bf00      	nop
 8004be4:	08004d6d 	.word	0x08004d6d
 8004be8:	08004d7e 	.word	0x08004d7e

08004bec <memmove>:
 8004bec:	4288      	cmp	r0, r1
 8004bee:	b510      	push	{r4, lr}
 8004bf0:	eb01 0402 	add.w	r4, r1, r2
 8004bf4:	d902      	bls.n	8004bfc <memmove+0x10>
 8004bf6:	4284      	cmp	r4, r0
 8004bf8:	4623      	mov	r3, r4
 8004bfa:	d807      	bhi.n	8004c0c <memmove+0x20>
 8004bfc:	1e43      	subs	r3, r0, #1
 8004bfe:	42a1      	cmp	r1, r4
 8004c00:	d008      	beq.n	8004c14 <memmove+0x28>
 8004c02:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004c06:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004c0a:	e7f8      	b.n	8004bfe <memmove+0x12>
 8004c0c:	4402      	add	r2, r0
 8004c0e:	4601      	mov	r1, r0
 8004c10:	428a      	cmp	r2, r1
 8004c12:	d100      	bne.n	8004c16 <memmove+0x2a>
 8004c14:	bd10      	pop	{r4, pc}
 8004c16:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004c1a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004c1e:	e7f7      	b.n	8004c10 <memmove+0x24>

08004c20 <_sbrk_r>:
 8004c20:	b538      	push	{r3, r4, r5, lr}
 8004c22:	4d06      	ldr	r5, [pc, #24]	@ (8004c3c <_sbrk_r+0x1c>)
 8004c24:	2300      	movs	r3, #0
 8004c26:	4604      	mov	r4, r0
 8004c28:	4608      	mov	r0, r1
 8004c2a:	602b      	str	r3, [r5, #0]
 8004c2c:	f7fc f822 	bl	8000c74 <_sbrk>
 8004c30:	1c43      	adds	r3, r0, #1
 8004c32:	d102      	bne.n	8004c3a <_sbrk_r+0x1a>
 8004c34:	682b      	ldr	r3, [r5, #0]
 8004c36:	b103      	cbz	r3, 8004c3a <_sbrk_r+0x1a>
 8004c38:	6023      	str	r3, [r4, #0]
 8004c3a:	bd38      	pop	{r3, r4, r5, pc}
 8004c3c:	20000314 	.word	0x20000314

08004c40 <memcpy>:
 8004c40:	440a      	add	r2, r1
 8004c42:	4291      	cmp	r1, r2
 8004c44:	f100 33ff 	add.w	r3, r0, #4294967295
 8004c48:	d100      	bne.n	8004c4c <memcpy+0xc>
 8004c4a:	4770      	bx	lr
 8004c4c:	b510      	push	{r4, lr}
 8004c4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004c52:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004c56:	4291      	cmp	r1, r2
 8004c58:	d1f9      	bne.n	8004c4e <memcpy+0xe>
 8004c5a:	bd10      	pop	{r4, pc}

08004c5c <_realloc_r>:
 8004c5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c60:	4680      	mov	r8, r0
 8004c62:	4615      	mov	r5, r2
 8004c64:	460c      	mov	r4, r1
 8004c66:	b921      	cbnz	r1, 8004c72 <_realloc_r+0x16>
 8004c68:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004c6c:	4611      	mov	r1, r2
 8004c6e:	f7ff bc4b 	b.w	8004508 <_malloc_r>
 8004c72:	b92a      	cbnz	r2, 8004c80 <_realloc_r+0x24>
 8004c74:	f7ff fbdc 	bl	8004430 <_free_r>
 8004c78:	2400      	movs	r4, #0
 8004c7a:	4620      	mov	r0, r4
 8004c7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004c80:	f000 f81a 	bl	8004cb8 <_malloc_usable_size_r>
 8004c84:	4285      	cmp	r5, r0
 8004c86:	4606      	mov	r6, r0
 8004c88:	d802      	bhi.n	8004c90 <_realloc_r+0x34>
 8004c8a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004c8e:	d8f4      	bhi.n	8004c7a <_realloc_r+0x1e>
 8004c90:	4629      	mov	r1, r5
 8004c92:	4640      	mov	r0, r8
 8004c94:	f7ff fc38 	bl	8004508 <_malloc_r>
 8004c98:	4607      	mov	r7, r0
 8004c9a:	2800      	cmp	r0, #0
 8004c9c:	d0ec      	beq.n	8004c78 <_realloc_r+0x1c>
 8004c9e:	42b5      	cmp	r5, r6
 8004ca0:	462a      	mov	r2, r5
 8004ca2:	4621      	mov	r1, r4
 8004ca4:	bf28      	it	cs
 8004ca6:	4632      	movcs	r2, r6
 8004ca8:	f7ff ffca 	bl	8004c40 <memcpy>
 8004cac:	4621      	mov	r1, r4
 8004cae:	4640      	mov	r0, r8
 8004cb0:	f7ff fbbe 	bl	8004430 <_free_r>
 8004cb4:	463c      	mov	r4, r7
 8004cb6:	e7e0      	b.n	8004c7a <_realloc_r+0x1e>

08004cb8 <_malloc_usable_size_r>:
 8004cb8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004cbc:	1f18      	subs	r0, r3, #4
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	bfbc      	itt	lt
 8004cc2:	580b      	ldrlt	r3, [r1, r0]
 8004cc4:	18c0      	addlt	r0, r0, r3
 8004cc6:	4770      	bx	lr

08004cc8 <_init>:
 8004cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cca:	bf00      	nop
 8004ccc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cce:	bc08      	pop	{r3}
 8004cd0:	469e      	mov	lr, r3
 8004cd2:	4770      	bx	lr

08004cd4 <_fini>:
 8004cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cd6:	bf00      	nop
 8004cd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cda:	bc08      	pop	{r3}
 8004cdc:	469e      	mov	lr, r3
 8004cde:	4770      	bx	lr
