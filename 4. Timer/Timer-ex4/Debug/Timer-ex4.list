
Timer-ex4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000205c  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080021e4  080021e4  000031e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002224  08002224  0000400c  2**0
                  CONTENTS
  4 .ARM          00000000  08002224  08002224  0000400c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002224  08002224  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002224  08002224  00003224  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002228  08002228  00003228  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800222c  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  2000000c  08002238  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000078  08002238  00004078  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a21b  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000188c  00000000  00000000  0000e257  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b50  00000000  00000000  0000fae8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008b1  00000000  00000000  00010638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025cf9  00000000  00000000  00010ee9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c284  00000000  00000000  00036be2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ec177  00000000  00000000  00042e66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012efdd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e5c  00000000  00000000  0012f020  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  00131e7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080021cc 	.word	0x080021cc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080021cc 	.word	0x080021cc

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  HAL_Init();
 80001cc:	f000 f9f0 	bl	80005b0 <HAL_Init>
  Nucleo_BSP_Init();
 80001d0:	f000 f8a6 	bl	8000320 <Nucleo_BSP_Init>
  MX_TIM3_Init();
 80001d4:	f000 f808 	bl	80001e8 <MX_TIM3_Init>
  HAL_TIM_Base_Start_IT(&htim3);
 80001d8:	4802      	ldr	r0, [pc, #8]	@ (80001e4 <main+0x1c>)
 80001da:	f001 fc1b 	bl	8001a14 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1);
 80001de:	bf00      	nop
 80001e0:	e7fd      	b.n	80001de <main+0x16>
 80001e2:	bf00      	nop
 80001e4:	20000028 	.word	0x20000028

080001e8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80001e8:	b580      	push	{r7, lr}
 80001ea:	b086      	sub	sp, #24
 80001ec:	af00      	add	r7, sp, #0
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80001ee:	1d3b      	adds	r3, r7, #4
 80001f0:	2200      	movs	r2, #0
 80001f2:	601a      	str	r2, [r3, #0]
 80001f4:	605a      	str	r2, [r3, #4]
 80001f6:	609a      	str	r2, [r3, #8]
 80001f8:	60da      	str	r2, [r3, #12]
 80001fa:	611a      	str	r2, [r3, #16]

  htim3.Instance = TIM3;
 80001fc:	4b12      	ldr	r3, [pc, #72]	@ (8000248 <MX_TIM3_Init+0x60>)
 80001fe:	4a13      	ldr	r2, [pc, #76]	@ (800024c <MX_TIM3_Init+0x64>)
 8000200:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 999;
 8000202:	4b11      	ldr	r3, [pc, #68]	@ (8000248 <MX_TIM3_Init+0x60>)
 8000204:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000208:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800020a:	4b0f      	ldr	r3, [pc, #60]	@ (8000248 <MX_TIM3_Init+0x60>)
 800020c:	2200      	movs	r2, #0
 800020e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 7999;
 8000210:	4b0d      	ldr	r3, [pc, #52]	@ (8000248 <MX_TIM3_Init+0x60>)
 8000212:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8000216:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000218:	4b0b      	ldr	r3, [pc, #44]	@ (8000248 <MX_TIM3_Init+0x60>)
 800021a:	2200      	movs	r2, #0
 800021c:	611a      	str	r2, [r3, #16]
  HAL_TIM_Base_Init(&htim3);
 800021e:	480a      	ldr	r0, [pc, #40]	@ (8000248 <MX_TIM3_Init+0x60>)
 8000220:	f001 fba0 	bl	8001964 <HAL_TIM_Base_Init>

  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8000224:	2307      	movs	r3, #7
 8000226:	607b      	str	r3, [r7, #4]
  sSlaveConfig.InputTrigger = TIM_TS_TI2FP2;
 8000228:	2360      	movs	r3, #96	@ 0x60
 800022a:	60bb      	str	r3, [r7, #8]
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_RISING;
 800022c:	2300      	movs	r3, #0
 800022e:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.TriggerFilter = 0;
 8000230:	2300      	movs	r3, #0
 8000232:	617b      	str	r3, [r7, #20]
  HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig);
 8000234:	1d3b      	adds	r3, r7, #4
 8000236:	4619      	mov	r1, r3
 8000238:	4803      	ldr	r0, [pc, #12]	@ (8000248 <MX_TIM3_Init+0x60>)
 800023a:	f001 fd62 	bl	8001d02 <HAL_TIM_SlaveConfigSynchro>
}
 800023e:	bf00      	nop
 8000240:	3718      	adds	r7, #24
 8000242:	46bd      	mov	sp, r7
 8000244:	bd80      	pop	{r7, pc}
 8000246:	bf00      	nop
 8000248:	20000028 	.word	0x20000028
 800024c:	40000400 	.word	0x40000400

08000250 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000250:	b580      	push	{r7, lr}
 8000252:	b08a      	sub	sp, #40	@ 0x28
 8000254:	af00      	add	r7, sp, #0
 8000256:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000258:	f107 0314 	add.w	r3, r7, #20
 800025c:	2200      	movs	r2, #0
 800025e:	601a      	str	r2, [r3, #0]
 8000260:	605a      	str	r2, [r3, #4]
 8000262:	609a      	str	r2, [r3, #8]
 8000264:	60da      	str	r2, [r3, #12]
 8000266:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM3)
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	4a1b      	ldr	r2, [pc, #108]	@ (80002dc <HAL_TIM_Base_MspInit+0x8c>)
 800026e:	4293      	cmp	r3, r2
 8000270:	d130      	bne.n	80002d4 <HAL_TIM_Base_MspInit+0x84>
  {
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000272:	4b1b      	ldr	r3, [pc, #108]	@ (80002e0 <HAL_TIM_Base_MspInit+0x90>)
 8000274:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000276:	4a1a      	ldr	r2, [pc, #104]	@ (80002e0 <HAL_TIM_Base_MspInit+0x90>)
 8000278:	f043 0302 	orr.w	r3, r3, #2
 800027c:	6593      	str	r3, [r2, #88]	@ 0x58
 800027e:	4b18      	ldr	r3, [pc, #96]	@ (80002e0 <HAL_TIM_Base_MspInit+0x90>)
 8000280:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000282:	f003 0302 	and.w	r3, r3, #2
 8000286:	613b      	str	r3, [r7, #16]
 8000288:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800028a:	4b15      	ldr	r3, [pc, #84]	@ (80002e0 <HAL_TIM_Base_MspInit+0x90>)
 800028c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800028e:	4a14      	ldr	r2, [pc, #80]	@ (80002e0 <HAL_TIM_Base_MspInit+0x90>)
 8000290:	f043 0301 	orr.w	r3, r3, #1
 8000294:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000296:	4b12      	ldr	r3, [pc, #72]	@ (80002e0 <HAL_TIM_Base_MspInit+0x90>)
 8000298:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800029a:	f003 0301 	and.w	r3, r3, #1
 800029e:	60fb      	str	r3, [r7, #12]
 80002a0:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80002a2:	2380      	movs	r3, #128	@ 0x80
 80002a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80002a6:	2302      	movs	r3, #2
 80002a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002aa:	2300      	movs	r3, #0
 80002ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002ae:	2300      	movs	r3, #0
 80002b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80002b2:	2302      	movs	r3, #2
 80002b4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002b6:	f107 0314 	add.w	r3, r7, #20
 80002ba:	4619      	mov	r1, r3
 80002bc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80002c0:	f000 fb20 	bl	8000904 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80002c4:	2200      	movs	r2, #0
 80002c6:	2100      	movs	r1, #0
 80002c8:	201d      	movs	r0, #29
 80002ca:	f000 fac8 	bl	800085e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80002ce:	201d      	movs	r0, #29
 80002d0:	f000 fae1 	bl	8000896 <HAL_NVIC_EnableIRQ>

  }

}
 80002d4:	bf00      	nop
 80002d6:	3728      	adds	r7, #40	@ 0x28
 80002d8:	46bd      	mov	sp, r7
 80002da:	bd80      	pop	{r7, pc}
 80002dc:	40000400 	.word	0x40000400
 80002e0:	40021000 	.word	0x40021000

080002e4 <TIM3_IRQHandler>:

void TIM3_IRQHandler(void)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&htim3);
 80002e8:	4802      	ldr	r0, [pc, #8]	@ (80002f4 <TIM3_IRQHandler+0x10>)
 80002ea:	f001 fc03 	bl	8001af4 <HAL_TIM_IRQHandler>
}
 80002ee:	bf00      	nop
 80002f0:	bd80      	pop	{r7, pc}
 80002f2:	bf00      	nop
 80002f4:	20000028 	.word	0x20000028

080002f8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b082      	sub	sp, #8
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	6078      	str	r0, [r7, #4]
  if(htim->Instance == TIM3)
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	4a05      	ldr	r2, [pc, #20]	@ (800031c <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000306:	4293      	cmp	r3, r2
 8000308:	d104      	bne.n	8000314 <HAL_TIM_PeriodElapsedCallback+0x1c>
    HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800030a:	2120      	movs	r1, #32
 800030c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000310:	f000 fca2 	bl	8000c58 <HAL_GPIO_TogglePin>
}
 8000314:	bf00      	nop
 8000316:	3708      	adds	r7, #8
 8000318:	46bd      	mov	sp, r7
 800031a:	bd80      	pop	{r7, pc}
 800031c:	40000400 	.word	0x40000400

08000320 <Nucleo_BSP_Init>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);

void Nucleo_BSP_Init() {
 8000320:	b580      	push	{r7, lr}
 8000322:	af00      	add	r7, sp, #0
  /* Configure the system clock */
  SystemClock_Config();
 8000324:	f000 f804 	bl	8000330 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000328:	f000 f862 	bl	80003f0 <MX_GPIO_Init>
}
 800032c:	bf00      	nop
 800032e:	bd80      	pop	{r7, pc}

08000330 <SystemClock_Config>:

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	b098      	sub	sp, #96	@ 0x60
 8000334:	af00      	add	r7, sp, #0

  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8000336:	2306      	movs	r3, #6
 8000338:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800033a:	2301      	movs	r3, #1
 800033c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800033e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000342:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8000344:	2310      	movs	r3, #16
 8000346:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000348:	2302      	movs	r3, #2
 800034a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800034c:	2302      	movs	r3, #2
 800034e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000350:	2301      	movs	r3, #1
 8000352:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000354:	230a      	movs	r3, #10
 8000356:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000358:	2307      	movs	r3, #7
 800035a:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800035c:	2302      	movs	r3, #2
 800035e:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000360:	2302      	movs	r3, #2
 8000362:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8000364:	f107 031c 	add.w	r3, r7, #28
 8000368:	4618      	mov	r0, r3
 800036a:	f000 fcf3 	bl	8000d54 <HAL_RCC_OscConfig>

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800036e:	230f      	movs	r3, #15
 8000370:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000372:	2303      	movs	r3, #3
 8000374:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000376:	2300      	movs	r3, #0
 8000378:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800037a:	2300      	movs	r3, #0
 800037c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800037e:	2300      	movs	r3, #0
 8000380:	61bb      	str	r3, [r7, #24]
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);
 8000382:	f107 0308 	add.w	r3, r7, #8
 8000386:	2104      	movs	r1, #4
 8000388:	4618      	mov	r0, r3
 800038a:	f001 f8bf 	bl	800150c <HAL_RCC_ClockConfig>

  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 800038e:	2200      	movs	r2, #0
 8000390:	f04f 7140 	mov.w	r1, #50331648	@ 0x3000000
 8000394:	2000      	movs	r0, #0
 8000396:	f001 f9b9 	bl	800170c <HAL_RCC_MCOConfig>

  __PWR_CLK_ENABLE();
 800039a:	4b13      	ldr	r3, [pc, #76]	@ (80003e8 <SystemClock_Config+0xb8>)
 800039c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800039e:	4a12      	ldr	r2, [pc, #72]	@ (80003e8 <SystemClock_Config+0xb8>)
 80003a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80003a4:	6593      	str	r3, [r2, #88]	@ 0x58
 80003a6:	4b10      	ldr	r3, [pc, #64]	@ (80003e8 <SystemClock_Config+0xb8>)
 80003a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80003aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80003ae:	607b      	str	r3, [r7, #4]
 80003b0:	687b      	ldr	r3, [r7, #4]

  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80003b2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80003b6:	f000 fc77 	bl	8000ca8 <HAL_PWREx_ControlVoltageScaling>

  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80003ba:	f001 fa67 	bl	800188c <HAL_RCC_GetHCLKFreq>
 80003be:	4603      	mov	r3, r0
 80003c0:	4a0a      	ldr	r2, [pc, #40]	@ (80003ec <SystemClock_Config+0xbc>)
 80003c2:	fba2 2303 	umull	r2, r3, r2, r3
 80003c6:	099b      	lsrs	r3, r3, #6
 80003c8:	4618      	mov	r0, r3
 80003ca:	f000 fa72 	bl	80008b2 <HAL_SYSTICK_Config>

  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80003ce:	2004      	movs	r0, #4
 80003d0:	f000 fa7c 	bl	80008cc <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80003d4:	2200      	movs	r2, #0
 80003d6:	2100      	movs	r1, #0
 80003d8:	f04f 30ff 	mov.w	r0, #4294967295
 80003dc:	f000 fa3f 	bl	800085e <HAL_NVIC_SetPriority>
}
 80003e0:	bf00      	nop
 80003e2:	3760      	adds	r7, #96	@ 0x60
 80003e4:	46bd      	mov	sp, r7
 80003e6:	bd80      	pop	{r7, pc}
 80003e8:	40021000 	.word	0x40021000
 80003ec:	10624dd3 	.word	0x10624dd3

080003f0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	b088      	sub	sp, #32
 80003f4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __GPIOC_CLK_ENABLE();
 80003f6:	4b24      	ldr	r3, [pc, #144]	@ (8000488 <MX_GPIO_Init+0x98>)
 80003f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003fa:	4a23      	ldr	r2, [pc, #140]	@ (8000488 <MX_GPIO_Init+0x98>)
 80003fc:	f043 0304 	orr.w	r3, r3, #4
 8000400:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000402:	4b21      	ldr	r3, [pc, #132]	@ (8000488 <MX_GPIO_Init+0x98>)
 8000404:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000406:	f003 0304 	and.w	r3, r3, #4
 800040a:	60bb      	str	r3, [r7, #8]
 800040c:	68bb      	ldr	r3, [r7, #8]
  __GPIOA_CLK_ENABLE();
 800040e:	4b1e      	ldr	r3, [pc, #120]	@ (8000488 <MX_GPIO_Init+0x98>)
 8000410:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000412:	4a1d      	ldr	r2, [pc, #116]	@ (8000488 <MX_GPIO_Init+0x98>)
 8000414:	f043 0301 	orr.w	r3, r3, #1
 8000418:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800041a:	4b1b      	ldr	r3, [pc, #108]	@ (8000488 <MX_GPIO_Init+0x98>)
 800041c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800041e:	f003 0301 	and.w	r3, r3, #1
 8000422:	607b      	str	r3, [r7, #4]
 8000424:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000426:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800042a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800042c:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000430:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000432:	2300      	movs	r3, #0
 8000434:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000436:	f107 030c 	add.w	r3, r7, #12
 800043a:	4619      	mov	r1, r3
 800043c:	4813      	ldr	r0, [pc, #76]	@ (800048c <MX_GPIO_Init+0x9c>)
 800043e:	f000 fa61 	bl	8000904 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000442:	2320      	movs	r3, #32
 8000444:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000446:	2301      	movs	r3, #1
 8000448:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800044a:	2300      	movs	r3, #0
 800044c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800044e:	2303      	movs	r3, #3
 8000450:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000452:	f107 030c 	add.w	r3, r7, #12
 8000456:	4619      	mov	r1, r3
 8000458:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800045c:	f000 fa52 	bl	8000904 <HAL_GPIO_Init>

  /*Configure GPIOC pin8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000460:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000464:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000466:	2301      	movs	r3, #1
 8000468:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800046a:	2300      	movs	r3, #0
 800046c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800046e:	2303      	movs	r3, #3
 8000470:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000472:	f107 030c 	add.w	r3, r7, #12
 8000476:	4619      	mov	r1, r3
 8000478:	4804      	ldr	r0, [pc, #16]	@ (800048c <MX_GPIO_Init+0x9c>)
 800047a:	f000 fa43 	bl	8000904 <HAL_GPIO_Init>

}
 800047e:	bf00      	nop
 8000480:	3720      	adds	r7, #32
 8000482:	46bd      	mov	sp, r7
 8000484:	bd80      	pop	{r7, pc}
 8000486:	bf00      	nop
 8000488:	40021000 	.word	0x40021000
 800048c:	48000800 	.word	0x48000800

08000490 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000490:	b480      	push	{r7}
 8000492:	b083      	sub	sp, #12
 8000494:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000496:	4b0f      	ldr	r3, [pc, #60]	@ (80004d4 <HAL_MspInit+0x44>)
 8000498:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800049a:	4a0e      	ldr	r2, [pc, #56]	@ (80004d4 <HAL_MspInit+0x44>)
 800049c:	f043 0301 	orr.w	r3, r3, #1
 80004a0:	6613      	str	r3, [r2, #96]	@ 0x60
 80004a2:	4b0c      	ldr	r3, [pc, #48]	@ (80004d4 <HAL_MspInit+0x44>)
 80004a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80004a6:	f003 0301 	and.w	r3, r3, #1
 80004aa:	607b      	str	r3, [r7, #4]
 80004ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004ae:	4b09      	ldr	r3, [pc, #36]	@ (80004d4 <HAL_MspInit+0x44>)
 80004b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80004b2:	4a08      	ldr	r2, [pc, #32]	@ (80004d4 <HAL_MspInit+0x44>)
 80004b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80004b8:	6593      	str	r3, [r2, #88]	@ 0x58
 80004ba:	4b06      	ldr	r3, [pc, #24]	@ (80004d4 <HAL_MspInit+0x44>)
 80004bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80004be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80004c2:	603b      	str	r3, [r7, #0]
 80004c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004c6:	bf00      	nop
 80004c8:	370c      	adds	r7, #12
 80004ca:	46bd      	mov	sp, r7
 80004cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop
 80004d4:	40021000 	.word	0x40021000

080004d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004d8:	b480      	push	{r7}
 80004da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80004dc:	bf00      	nop
 80004de:	e7fd      	b.n	80004dc <NMI_Handler+0x4>

080004e0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004e0:	b480      	push	{r7}
 80004e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004e4:	bf00      	nop
 80004e6:	e7fd      	b.n	80004e4 <HardFault_Handler+0x4>

080004e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004e8:	b480      	push	{r7}
 80004ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004ec:	bf00      	nop
 80004ee:	e7fd      	b.n	80004ec <MemManage_Handler+0x4>

080004f0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004f0:	b480      	push	{r7}
 80004f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004f4:	bf00      	nop
 80004f6:	e7fd      	b.n	80004f4 <BusFault_Handler+0x4>

080004f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004f8:	b480      	push	{r7}
 80004fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004fc:	bf00      	nop
 80004fe:	e7fd      	b.n	80004fc <UsageFault_Handler+0x4>

08000500 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000500:	b480      	push	{r7}
 8000502:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000504:	bf00      	nop
 8000506:	46bd      	mov	sp, r7
 8000508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050c:	4770      	bx	lr

0800050e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800050e:	b480      	push	{r7}
 8000510:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000512:	bf00      	nop
 8000514:	46bd      	mov	sp, r7
 8000516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051a:	4770      	bx	lr

0800051c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800051c:	b480      	push	{r7}
 800051e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000520:	bf00      	nop
 8000522:	46bd      	mov	sp, r7
 8000524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000528:	4770      	bx	lr

0800052a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800052a:	b580      	push	{r7, lr}
 800052c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800052e:	f000 f89b 	bl	8000668 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000532:	bf00      	nop
 8000534:	bd80      	pop	{r7, pc}
	...

08000538 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000538:	b480      	push	{r7}
 800053a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800053c:	4b06      	ldr	r3, [pc, #24]	@ (8000558 <SystemInit+0x20>)
 800053e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000542:	4a05      	ldr	r2, [pc, #20]	@ (8000558 <SystemInit+0x20>)
 8000544:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000548:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800054c:	bf00      	nop
 800054e:	46bd      	mov	sp, r7
 8000550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000554:	4770      	bx	lr
 8000556:	bf00      	nop
 8000558:	e000ed00 	.word	0xe000ed00

0800055c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800055c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000594 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000560:	f7ff ffea 	bl	8000538 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000564:	480c      	ldr	r0, [pc, #48]	@ (8000598 <LoopForever+0x6>)
  ldr r1, =_edata
 8000566:	490d      	ldr	r1, [pc, #52]	@ (800059c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000568:	4a0d      	ldr	r2, [pc, #52]	@ (80005a0 <LoopForever+0xe>)
  movs r3, #0
 800056a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800056c:	e002      	b.n	8000574 <LoopCopyDataInit>

0800056e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800056e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000570:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000572:	3304      	adds	r3, #4

08000574 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000574:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000576:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000578:	d3f9      	bcc.n	800056e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800057a:	4a0a      	ldr	r2, [pc, #40]	@ (80005a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800057c:	4c0a      	ldr	r4, [pc, #40]	@ (80005a8 <LoopForever+0x16>)
  movs r3, #0
 800057e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000580:	e001      	b.n	8000586 <LoopFillZerobss>

08000582 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000582:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000584:	3204      	adds	r2, #4

08000586 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000586:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000588:	d3fb      	bcc.n	8000582 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800058a:	f001 fdfb 	bl	8002184 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800058e:	f7ff fe1b 	bl	80001c8 <main>

08000592 <LoopForever>:

LoopForever:
    b LoopForever
 8000592:	e7fe      	b.n	8000592 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000594:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000598:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800059c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80005a0:	0800222c 	.word	0x0800222c
  ldr r2, =_sbss
 80005a4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80005a8:	20000078 	.word	0x20000078

080005ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80005ac:	e7fe      	b.n	80005ac <ADC1_2_IRQHandler>
	...

080005b0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80005b6:	2300      	movs	r3, #0
 80005b8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005ba:	4b0c      	ldr	r3, [pc, #48]	@ (80005ec <HAL_Init+0x3c>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	4a0b      	ldr	r2, [pc, #44]	@ (80005ec <HAL_Init+0x3c>)
 80005c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80005c4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005c6:	2003      	movs	r0, #3
 80005c8:	f000 f93e 	bl	8000848 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80005cc:	2000      	movs	r0, #0
 80005ce:	f000 f80f 	bl	80005f0 <HAL_InitTick>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d002      	beq.n	80005de <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80005d8:	2301      	movs	r3, #1
 80005da:	71fb      	strb	r3, [r7, #7]
 80005dc:	e001      	b.n	80005e2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80005de:	f7ff ff57 	bl	8000490 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80005e2:	79fb      	ldrb	r3, [r7, #7]
}
 80005e4:	4618      	mov	r0, r3
 80005e6:	3708      	adds	r7, #8
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	40022000 	.word	0x40022000

080005f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b084      	sub	sp, #16
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80005f8:	2300      	movs	r3, #0
 80005fa:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80005fc:	4b17      	ldr	r3, [pc, #92]	@ (800065c <HAL_InitTick+0x6c>)
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	2b00      	cmp	r3, #0
 8000602:	d023      	beq.n	800064c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000604:	4b16      	ldr	r3, [pc, #88]	@ (8000660 <HAL_InitTick+0x70>)
 8000606:	681a      	ldr	r2, [r3, #0]
 8000608:	4b14      	ldr	r3, [pc, #80]	@ (800065c <HAL_InitTick+0x6c>)
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	4619      	mov	r1, r3
 800060e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000612:	fbb3 f3f1 	udiv	r3, r3, r1
 8000616:	fbb2 f3f3 	udiv	r3, r2, r3
 800061a:	4618      	mov	r0, r3
 800061c:	f000 f949 	bl	80008b2 <HAL_SYSTICK_Config>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d10f      	bne.n	8000646 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	2b0f      	cmp	r3, #15
 800062a:	d809      	bhi.n	8000640 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800062c:	2200      	movs	r2, #0
 800062e:	6879      	ldr	r1, [r7, #4]
 8000630:	f04f 30ff 	mov.w	r0, #4294967295
 8000634:	f000 f913 	bl	800085e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000638:	4a0a      	ldr	r2, [pc, #40]	@ (8000664 <HAL_InitTick+0x74>)
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	6013      	str	r3, [r2, #0]
 800063e:	e007      	b.n	8000650 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000640:	2301      	movs	r3, #1
 8000642:	73fb      	strb	r3, [r7, #15]
 8000644:	e004      	b.n	8000650 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000646:	2301      	movs	r3, #1
 8000648:	73fb      	strb	r3, [r7, #15]
 800064a:	e001      	b.n	8000650 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800064c:	2301      	movs	r3, #1
 800064e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000650:	7bfb      	ldrb	r3, [r7, #15]
}
 8000652:	4618      	mov	r0, r3
 8000654:	3710      	adds	r7, #16
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	20000008 	.word	0x20000008
 8000660:	20000000 	.word	0x20000000
 8000664:	20000004 	.word	0x20000004

08000668 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000668:	b480      	push	{r7}
 800066a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800066c:	4b06      	ldr	r3, [pc, #24]	@ (8000688 <HAL_IncTick+0x20>)
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	461a      	mov	r2, r3
 8000672:	4b06      	ldr	r3, [pc, #24]	@ (800068c <HAL_IncTick+0x24>)
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	4413      	add	r3, r2
 8000678:	4a04      	ldr	r2, [pc, #16]	@ (800068c <HAL_IncTick+0x24>)
 800067a:	6013      	str	r3, [r2, #0]
}
 800067c:	bf00      	nop
 800067e:	46bd      	mov	sp, r7
 8000680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop
 8000688:	20000008 	.word	0x20000008
 800068c:	20000074 	.word	0x20000074

08000690 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000690:	b480      	push	{r7}
 8000692:	af00      	add	r7, sp, #0
  return uwTick;
 8000694:	4b03      	ldr	r3, [pc, #12]	@ (80006a4 <HAL_GetTick+0x14>)
 8000696:	681b      	ldr	r3, [r3, #0]
}
 8000698:	4618      	mov	r0, r3
 800069a:	46bd      	mov	sp, r7
 800069c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a0:	4770      	bx	lr
 80006a2:	bf00      	nop
 80006a4:	20000074 	.word	0x20000074

080006a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006a8:	b480      	push	{r7}
 80006aa:	b085      	sub	sp, #20
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	f003 0307 	and.w	r3, r3, #7
 80006b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006b8:	4b0c      	ldr	r3, [pc, #48]	@ (80006ec <__NVIC_SetPriorityGrouping+0x44>)
 80006ba:	68db      	ldr	r3, [r3, #12]
 80006bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006be:	68ba      	ldr	r2, [r7, #8]
 80006c0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80006c4:	4013      	ands	r3, r2
 80006c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006cc:	68bb      	ldr	r3, [r7, #8]
 80006ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006d0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80006d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80006d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006da:	4a04      	ldr	r2, [pc, #16]	@ (80006ec <__NVIC_SetPriorityGrouping+0x44>)
 80006dc:	68bb      	ldr	r3, [r7, #8]
 80006de:	60d3      	str	r3, [r2, #12]
}
 80006e0:	bf00      	nop
 80006e2:	3714      	adds	r7, #20
 80006e4:	46bd      	mov	sp, r7
 80006e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ea:	4770      	bx	lr
 80006ec:	e000ed00 	.word	0xe000ed00

080006f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006f4:	4b04      	ldr	r3, [pc, #16]	@ (8000708 <__NVIC_GetPriorityGrouping+0x18>)
 80006f6:	68db      	ldr	r3, [r3, #12]
 80006f8:	0a1b      	lsrs	r3, r3, #8
 80006fa:	f003 0307 	and.w	r3, r3, #7
}
 80006fe:	4618      	mov	r0, r3
 8000700:	46bd      	mov	sp, r7
 8000702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000706:	4770      	bx	lr
 8000708:	e000ed00 	.word	0xe000ed00

0800070c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800070c:	b480      	push	{r7}
 800070e:	b083      	sub	sp, #12
 8000710:	af00      	add	r7, sp, #0
 8000712:	4603      	mov	r3, r0
 8000714:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000716:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800071a:	2b00      	cmp	r3, #0
 800071c:	db0b      	blt.n	8000736 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800071e:	79fb      	ldrb	r3, [r7, #7]
 8000720:	f003 021f 	and.w	r2, r3, #31
 8000724:	4907      	ldr	r1, [pc, #28]	@ (8000744 <__NVIC_EnableIRQ+0x38>)
 8000726:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800072a:	095b      	lsrs	r3, r3, #5
 800072c:	2001      	movs	r0, #1
 800072e:	fa00 f202 	lsl.w	r2, r0, r2
 8000732:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000736:	bf00      	nop
 8000738:	370c      	adds	r7, #12
 800073a:	46bd      	mov	sp, r7
 800073c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000740:	4770      	bx	lr
 8000742:	bf00      	nop
 8000744:	e000e100 	.word	0xe000e100

08000748 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000748:	b480      	push	{r7}
 800074a:	b083      	sub	sp, #12
 800074c:	af00      	add	r7, sp, #0
 800074e:	4603      	mov	r3, r0
 8000750:	6039      	str	r1, [r7, #0]
 8000752:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000754:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000758:	2b00      	cmp	r3, #0
 800075a:	db0a      	blt.n	8000772 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800075c:	683b      	ldr	r3, [r7, #0]
 800075e:	b2da      	uxtb	r2, r3
 8000760:	490c      	ldr	r1, [pc, #48]	@ (8000794 <__NVIC_SetPriority+0x4c>)
 8000762:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000766:	0112      	lsls	r2, r2, #4
 8000768:	b2d2      	uxtb	r2, r2
 800076a:	440b      	add	r3, r1
 800076c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000770:	e00a      	b.n	8000788 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000772:	683b      	ldr	r3, [r7, #0]
 8000774:	b2da      	uxtb	r2, r3
 8000776:	4908      	ldr	r1, [pc, #32]	@ (8000798 <__NVIC_SetPriority+0x50>)
 8000778:	79fb      	ldrb	r3, [r7, #7]
 800077a:	f003 030f 	and.w	r3, r3, #15
 800077e:	3b04      	subs	r3, #4
 8000780:	0112      	lsls	r2, r2, #4
 8000782:	b2d2      	uxtb	r2, r2
 8000784:	440b      	add	r3, r1
 8000786:	761a      	strb	r2, [r3, #24]
}
 8000788:	bf00      	nop
 800078a:	370c      	adds	r7, #12
 800078c:	46bd      	mov	sp, r7
 800078e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000792:	4770      	bx	lr
 8000794:	e000e100 	.word	0xe000e100
 8000798:	e000ed00 	.word	0xe000ed00

0800079c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800079c:	b480      	push	{r7}
 800079e:	b089      	sub	sp, #36	@ 0x24
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	60f8      	str	r0, [r7, #12]
 80007a4:	60b9      	str	r1, [r7, #8]
 80007a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007a8:	68fb      	ldr	r3, [r7, #12]
 80007aa:	f003 0307 	and.w	r3, r3, #7
 80007ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007b0:	69fb      	ldr	r3, [r7, #28]
 80007b2:	f1c3 0307 	rsb	r3, r3, #7
 80007b6:	2b04      	cmp	r3, #4
 80007b8:	bf28      	it	cs
 80007ba:	2304      	movcs	r3, #4
 80007bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007be:	69fb      	ldr	r3, [r7, #28]
 80007c0:	3304      	adds	r3, #4
 80007c2:	2b06      	cmp	r3, #6
 80007c4:	d902      	bls.n	80007cc <NVIC_EncodePriority+0x30>
 80007c6:	69fb      	ldr	r3, [r7, #28]
 80007c8:	3b03      	subs	r3, #3
 80007ca:	e000      	b.n	80007ce <NVIC_EncodePriority+0x32>
 80007cc:	2300      	movs	r3, #0
 80007ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007d0:	f04f 32ff 	mov.w	r2, #4294967295
 80007d4:	69bb      	ldr	r3, [r7, #24]
 80007d6:	fa02 f303 	lsl.w	r3, r2, r3
 80007da:	43da      	mvns	r2, r3
 80007dc:	68bb      	ldr	r3, [r7, #8]
 80007de:	401a      	ands	r2, r3
 80007e0:	697b      	ldr	r3, [r7, #20]
 80007e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007e4:	f04f 31ff 	mov.w	r1, #4294967295
 80007e8:	697b      	ldr	r3, [r7, #20]
 80007ea:	fa01 f303 	lsl.w	r3, r1, r3
 80007ee:	43d9      	mvns	r1, r3
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007f4:	4313      	orrs	r3, r2
         );
}
 80007f6:	4618      	mov	r0, r3
 80007f8:	3724      	adds	r7, #36	@ 0x24
 80007fa:	46bd      	mov	sp, r7
 80007fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000800:	4770      	bx	lr
	...

08000804 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	3b01      	subs	r3, #1
 8000810:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000814:	d301      	bcc.n	800081a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000816:	2301      	movs	r3, #1
 8000818:	e00f      	b.n	800083a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800081a:	4a0a      	ldr	r2, [pc, #40]	@ (8000844 <SysTick_Config+0x40>)
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	3b01      	subs	r3, #1
 8000820:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000822:	210f      	movs	r1, #15
 8000824:	f04f 30ff 	mov.w	r0, #4294967295
 8000828:	f7ff ff8e 	bl	8000748 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800082c:	4b05      	ldr	r3, [pc, #20]	@ (8000844 <SysTick_Config+0x40>)
 800082e:	2200      	movs	r2, #0
 8000830:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000832:	4b04      	ldr	r3, [pc, #16]	@ (8000844 <SysTick_Config+0x40>)
 8000834:	2207      	movs	r2, #7
 8000836:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000838:	2300      	movs	r3, #0
}
 800083a:	4618      	mov	r0, r3
 800083c:	3708      	adds	r7, #8
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	e000e010 	.word	0xe000e010

08000848 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b082      	sub	sp, #8
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000850:	6878      	ldr	r0, [r7, #4]
 8000852:	f7ff ff29 	bl	80006a8 <__NVIC_SetPriorityGrouping>
}
 8000856:	bf00      	nop
 8000858:	3708      	adds	r7, #8
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}

0800085e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800085e:	b580      	push	{r7, lr}
 8000860:	b086      	sub	sp, #24
 8000862:	af00      	add	r7, sp, #0
 8000864:	4603      	mov	r3, r0
 8000866:	60b9      	str	r1, [r7, #8]
 8000868:	607a      	str	r2, [r7, #4]
 800086a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800086c:	2300      	movs	r3, #0
 800086e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000870:	f7ff ff3e 	bl	80006f0 <__NVIC_GetPriorityGrouping>
 8000874:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000876:	687a      	ldr	r2, [r7, #4]
 8000878:	68b9      	ldr	r1, [r7, #8]
 800087a:	6978      	ldr	r0, [r7, #20]
 800087c:	f7ff ff8e 	bl	800079c <NVIC_EncodePriority>
 8000880:	4602      	mov	r2, r0
 8000882:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000886:	4611      	mov	r1, r2
 8000888:	4618      	mov	r0, r3
 800088a:	f7ff ff5d 	bl	8000748 <__NVIC_SetPriority>
}
 800088e:	bf00      	nop
 8000890:	3718      	adds	r7, #24
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}

08000896 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000896:	b580      	push	{r7, lr}
 8000898:	b082      	sub	sp, #8
 800089a:	af00      	add	r7, sp, #0
 800089c:	4603      	mov	r3, r0
 800089e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80008a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008a4:	4618      	mov	r0, r3
 80008a6:	f7ff ff31 	bl	800070c <__NVIC_EnableIRQ>
}
 80008aa:	bf00      	nop
 80008ac:	3708      	adds	r7, #8
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}

080008b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008b2:	b580      	push	{r7, lr}
 80008b4:	b082      	sub	sp, #8
 80008b6:	af00      	add	r7, sp, #0
 80008b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008ba:	6878      	ldr	r0, [r7, #4]
 80008bc:	f7ff ffa2 	bl	8000804 <SysTick_Config>
 80008c0:	4603      	mov	r3, r0
}
 80008c2:	4618      	mov	r0, r3
 80008c4:	3708      	adds	r7, #8
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
	...

080008cc <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80008cc:	b480      	push	{r7}
 80008ce:	b083      	sub	sp, #12
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	2b04      	cmp	r3, #4
 80008d8:	d106      	bne.n	80008e8 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80008da:	4b09      	ldr	r3, [pc, #36]	@ (8000900 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	4a08      	ldr	r2, [pc, #32]	@ (8000900 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80008e0:	f043 0304 	orr.w	r3, r3, #4
 80008e4:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 80008e6:	e005      	b.n	80008f4 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80008e8:	4b05      	ldr	r3, [pc, #20]	@ (8000900 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	4a04      	ldr	r2, [pc, #16]	@ (8000900 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80008ee:	f023 0304 	bic.w	r3, r3, #4
 80008f2:	6013      	str	r3, [r2, #0]
}
 80008f4:	bf00      	nop
 80008f6:	370c      	adds	r7, #12
 80008f8:	46bd      	mov	sp, r7
 80008fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fe:	4770      	bx	lr
 8000900:	e000e010 	.word	0xe000e010

08000904 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000904:	b480      	push	{r7}
 8000906:	b087      	sub	sp, #28
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
 800090c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800090e:	2300      	movs	r3, #0
 8000910:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000912:	e17f      	b.n	8000c14 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000914:	683b      	ldr	r3, [r7, #0]
 8000916:	681a      	ldr	r2, [r3, #0]
 8000918:	2101      	movs	r1, #1
 800091a:	697b      	ldr	r3, [r7, #20]
 800091c:	fa01 f303 	lsl.w	r3, r1, r3
 8000920:	4013      	ands	r3, r2
 8000922:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	2b00      	cmp	r3, #0
 8000928:	f000 8171 	beq.w	8000c0e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800092c:	683b      	ldr	r3, [r7, #0]
 800092e:	685b      	ldr	r3, [r3, #4]
 8000930:	f003 0303 	and.w	r3, r3, #3
 8000934:	2b01      	cmp	r3, #1
 8000936:	d005      	beq.n	8000944 <HAL_GPIO_Init+0x40>
 8000938:	683b      	ldr	r3, [r7, #0]
 800093a:	685b      	ldr	r3, [r3, #4]
 800093c:	f003 0303 	and.w	r3, r3, #3
 8000940:	2b02      	cmp	r3, #2
 8000942:	d130      	bne.n	80009a6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	689b      	ldr	r3, [r3, #8]
 8000948:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800094a:	697b      	ldr	r3, [r7, #20]
 800094c:	005b      	lsls	r3, r3, #1
 800094e:	2203      	movs	r2, #3
 8000950:	fa02 f303 	lsl.w	r3, r2, r3
 8000954:	43db      	mvns	r3, r3
 8000956:	693a      	ldr	r2, [r7, #16]
 8000958:	4013      	ands	r3, r2
 800095a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800095c:	683b      	ldr	r3, [r7, #0]
 800095e:	68da      	ldr	r2, [r3, #12]
 8000960:	697b      	ldr	r3, [r7, #20]
 8000962:	005b      	lsls	r3, r3, #1
 8000964:	fa02 f303 	lsl.w	r3, r2, r3
 8000968:	693a      	ldr	r2, [r7, #16]
 800096a:	4313      	orrs	r3, r2
 800096c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	693a      	ldr	r2, [r7, #16]
 8000972:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	685b      	ldr	r3, [r3, #4]
 8000978:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800097a:	2201      	movs	r2, #1
 800097c:	697b      	ldr	r3, [r7, #20]
 800097e:	fa02 f303 	lsl.w	r3, r2, r3
 8000982:	43db      	mvns	r3, r3
 8000984:	693a      	ldr	r2, [r7, #16]
 8000986:	4013      	ands	r3, r2
 8000988:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800098a:	683b      	ldr	r3, [r7, #0]
 800098c:	685b      	ldr	r3, [r3, #4]
 800098e:	091b      	lsrs	r3, r3, #4
 8000990:	f003 0201 	and.w	r2, r3, #1
 8000994:	697b      	ldr	r3, [r7, #20]
 8000996:	fa02 f303 	lsl.w	r3, r2, r3
 800099a:	693a      	ldr	r2, [r7, #16]
 800099c:	4313      	orrs	r3, r2
 800099e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	693a      	ldr	r2, [r7, #16]
 80009a4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80009a6:	683b      	ldr	r3, [r7, #0]
 80009a8:	685b      	ldr	r3, [r3, #4]
 80009aa:	f003 0303 	and.w	r3, r3, #3
 80009ae:	2b03      	cmp	r3, #3
 80009b0:	d118      	bne.n	80009e4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80009b6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80009b8:	2201      	movs	r2, #1
 80009ba:	697b      	ldr	r3, [r7, #20]
 80009bc:	fa02 f303 	lsl.w	r3, r2, r3
 80009c0:	43db      	mvns	r3, r3
 80009c2:	693a      	ldr	r2, [r7, #16]
 80009c4:	4013      	ands	r3, r2
 80009c6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80009c8:	683b      	ldr	r3, [r7, #0]
 80009ca:	685b      	ldr	r3, [r3, #4]
 80009cc:	08db      	lsrs	r3, r3, #3
 80009ce:	f003 0201 	and.w	r2, r3, #1
 80009d2:	697b      	ldr	r3, [r7, #20]
 80009d4:	fa02 f303 	lsl.w	r3, r2, r3
 80009d8:	693a      	ldr	r2, [r7, #16]
 80009da:	4313      	orrs	r3, r2
 80009dc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	693a      	ldr	r2, [r7, #16]
 80009e2:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80009e4:	683b      	ldr	r3, [r7, #0]
 80009e6:	685b      	ldr	r3, [r3, #4]
 80009e8:	f003 0303 	and.w	r3, r3, #3
 80009ec:	2b03      	cmp	r3, #3
 80009ee:	d017      	beq.n	8000a20 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	68db      	ldr	r3, [r3, #12]
 80009f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80009f6:	697b      	ldr	r3, [r7, #20]
 80009f8:	005b      	lsls	r3, r3, #1
 80009fa:	2203      	movs	r2, #3
 80009fc:	fa02 f303 	lsl.w	r3, r2, r3
 8000a00:	43db      	mvns	r3, r3
 8000a02:	693a      	ldr	r2, [r7, #16]
 8000a04:	4013      	ands	r3, r2
 8000a06:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000a08:	683b      	ldr	r3, [r7, #0]
 8000a0a:	689a      	ldr	r2, [r3, #8]
 8000a0c:	697b      	ldr	r3, [r7, #20]
 8000a0e:	005b      	lsls	r3, r3, #1
 8000a10:	fa02 f303 	lsl.w	r3, r2, r3
 8000a14:	693a      	ldr	r2, [r7, #16]
 8000a16:	4313      	orrs	r3, r2
 8000a18:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	693a      	ldr	r2, [r7, #16]
 8000a1e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000a20:	683b      	ldr	r3, [r7, #0]
 8000a22:	685b      	ldr	r3, [r3, #4]
 8000a24:	f003 0303 	and.w	r3, r3, #3
 8000a28:	2b02      	cmp	r3, #2
 8000a2a:	d123      	bne.n	8000a74 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000a2c:	697b      	ldr	r3, [r7, #20]
 8000a2e:	08da      	lsrs	r2, r3, #3
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	3208      	adds	r2, #8
 8000a34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a38:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000a3a:	697b      	ldr	r3, [r7, #20]
 8000a3c:	f003 0307 	and.w	r3, r3, #7
 8000a40:	009b      	lsls	r3, r3, #2
 8000a42:	220f      	movs	r2, #15
 8000a44:	fa02 f303 	lsl.w	r3, r2, r3
 8000a48:	43db      	mvns	r3, r3
 8000a4a:	693a      	ldr	r2, [r7, #16]
 8000a4c:	4013      	ands	r3, r2
 8000a4e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000a50:	683b      	ldr	r3, [r7, #0]
 8000a52:	691a      	ldr	r2, [r3, #16]
 8000a54:	697b      	ldr	r3, [r7, #20]
 8000a56:	f003 0307 	and.w	r3, r3, #7
 8000a5a:	009b      	lsls	r3, r3, #2
 8000a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a60:	693a      	ldr	r2, [r7, #16]
 8000a62:	4313      	orrs	r3, r2
 8000a64:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000a66:	697b      	ldr	r3, [r7, #20]
 8000a68:	08da      	lsrs	r2, r3, #3
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	3208      	adds	r2, #8
 8000a6e:	6939      	ldr	r1, [r7, #16]
 8000a70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000a7a:	697b      	ldr	r3, [r7, #20]
 8000a7c:	005b      	lsls	r3, r3, #1
 8000a7e:	2203      	movs	r2, #3
 8000a80:	fa02 f303 	lsl.w	r3, r2, r3
 8000a84:	43db      	mvns	r3, r3
 8000a86:	693a      	ldr	r2, [r7, #16]
 8000a88:	4013      	ands	r3, r2
 8000a8a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000a8c:	683b      	ldr	r3, [r7, #0]
 8000a8e:	685b      	ldr	r3, [r3, #4]
 8000a90:	f003 0203 	and.w	r2, r3, #3
 8000a94:	697b      	ldr	r3, [r7, #20]
 8000a96:	005b      	lsls	r3, r3, #1
 8000a98:	fa02 f303 	lsl.w	r3, r2, r3
 8000a9c:	693a      	ldr	r2, [r7, #16]
 8000a9e:	4313      	orrs	r3, r2
 8000aa0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	693a      	ldr	r2, [r7, #16]
 8000aa6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000aa8:	683b      	ldr	r3, [r7, #0]
 8000aaa:	685b      	ldr	r3, [r3, #4]
 8000aac:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	f000 80ac 	beq.w	8000c0e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ab6:	4b5f      	ldr	r3, [pc, #380]	@ (8000c34 <HAL_GPIO_Init+0x330>)
 8000ab8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000aba:	4a5e      	ldr	r2, [pc, #376]	@ (8000c34 <HAL_GPIO_Init+0x330>)
 8000abc:	f043 0301 	orr.w	r3, r3, #1
 8000ac0:	6613      	str	r3, [r2, #96]	@ 0x60
 8000ac2:	4b5c      	ldr	r3, [pc, #368]	@ (8000c34 <HAL_GPIO_Init+0x330>)
 8000ac4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ac6:	f003 0301 	and.w	r3, r3, #1
 8000aca:	60bb      	str	r3, [r7, #8]
 8000acc:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000ace:	4a5a      	ldr	r2, [pc, #360]	@ (8000c38 <HAL_GPIO_Init+0x334>)
 8000ad0:	697b      	ldr	r3, [r7, #20]
 8000ad2:	089b      	lsrs	r3, r3, #2
 8000ad4:	3302      	adds	r3, #2
 8000ad6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ada:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000adc:	697b      	ldr	r3, [r7, #20]
 8000ade:	f003 0303 	and.w	r3, r3, #3
 8000ae2:	009b      	lsls	r3, r3, #2
 8000ae4:	220f      	movs	r2, #15
 8000ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aea:	43db      	mvns	r3, r3
 8000aec:	693a      	ldr	r2, [r7, #16]
 8000aee:	4013      	ands	r3, r2
 8000af0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000af8:	d025      	beq.n	8000b46 <HAL_GPIO_Init+0x242>
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	4a4f      	ldr	r2, [pc, #316]	@ (8000c3c <HAL_GPIO_Init+0x338>)
 8000afe:	4293      	cmp	r3, r2
 8000b00:	d01f      	beq.n	8000b42 <HAL_GPIO_Init+0x23e>
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	4a4e      	ldr	r2, [pc, #312]	@ (8000c40 <HAL_GPIO_Init+0x33c>)
 8000b06:	4293      	cmp	r3, r2
 8000b08:	d019      	beq.n	8000b3e <HAL_GPIO_Init+0x23a>
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	4a4d      	ldr	r2, [pc, #308]	@ (8000c44 <HAL_GPIO_Init+0x340>)
 8000b0e:	4293      	cmp	r3, r2
 8000b10:	d013      	beq.n	8000b3a <HAL_GPIO_Init+0x236>
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	4a4c      	ldr	r2, [pc, #304]	@ (8000c48 <HAL_GPIO_Init+0x344>)
 8000b16:	4293      	cmp	r3, r2
 8000b18:	d00d      	beq.n	8000b36 <HAL_GPIO_Init+0x232>
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	4a4b      	ldr	r2, [pc, #300]	@ (8000c4c <HAL_GPIO_Init+0x348>)
 8000b1e:	4293      	cmp	r3, r2
 8000b20:	d007      	beq.n	8000b32 <HAL_GPIO_Init+0x22e>
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	4a4a      	ldr	r2, [pc, #296]	@ (8000c50 <HAL_GPIO_Init+0x34c>)
 8000b26:	4293      	cmp	r3, r2
 8000b28:	d101      	bne.n	8000b2e <HAL_GPIO_Init+0x22a>
 8000b2a:	2306      	movs	r3, #6
 8000b2c:	e00c      	b.n	8000b48 <HAL_GPIO_Init+0x244>
 8000b2e:	2307      	movs	r3, #7
 8000b30:	e00a      	b.n	8000b48 <HAL_GPIO_Init+0x244>
 8000b32:	2305      	movs	r3, #5
 8000b34:	e008      	b.n	8000b48 <HAL_GPIO_Init+0x244>
 8000b36:	2304      	movs	r3, #4
 8000b38:	e006      	b.n	8000b48 <HAL_GPIO_Init+0x244>
 8000b3a:	2303      	movs	r3, #3
 8000b3c:	e004      	b.n	8000b48 <HAL_GPIO_Init+0x244>
 8000b3e:	2302      	movs	r3, #2
 8000b40:	e002      	b.n	8000b48 <HAL_GPIO_Init+0x244>
 8000b42:	2301      	movs	r3, #1
 8000b44:	e000      	b.n	8000b48 <HAL_GPIO_Init+0x244>
 8000b46:	2300      	movs	r3, #0
 8000b48:	697a      	ldr	r2, [r7, #20]
 8000b4a:	f002 0203 	and.w	r2, r2, #3
 8000b4e:	0092      	lsls	r2, r2, #2
 8000b50:	4093      	lsls	r3, r2
 8000b52:	693a      	ldr	r2, [r7, #16]
 8000b54:	4313      	orrs	r3, r2
 8000b56:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000b58:	4937      	ldr	r1, [pc, #220]	@ (8000c38 <HAL_GPIO_Init+0x334>)
 8000b5a:	697b      	ldr	r3, [r7, #20]
 8000b5c:	089b      	lsrs	r3, r3, #2
 8000b5e:	3302      	adds	r3, #2
 8000b60:	693a      	ldr	r2, [r7, #16]
 8000b62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000b66:	4b3b      	ldr	r3, [pc, #236]	@ (8000c54 <HAL_GPIO_Init+0x350>)
 8000b68:	689b      	ldr	r3, [r3, #8]
 8000b6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	43db      	mvns	r3, r3
 8000b70:	693a      	ldr	r2, [r7, #16]
 8000b72:	4013      	ands	r3, r2
 8000b74:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000b76:	683b      	ldr	r3, [r7, #0]
 8000b78:	685b      	ldr	r3, [r3, #4]
 8000b7a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d003      	beq.n	8000b8a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000b82:	693a      	ldr	r2, [r7, #16]
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	4313      	orrs	r3, r2
 8000b88:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000b8a:	4a32      	ldr	r2, [pc, #200]	@ (8000c54 <HAL_GPIO_Init+0x350>)
 8000b8c:	693b      	ldr	r3, [r7, #16]
 8000b8e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000b90:	4b30      	ldr	r3, [pc, #192]	@ (8000c54 <HAL_GPIO_Init+0x350>)
 8000b92:	68db      	ldr	r3, [r3, #12]
 8000b94:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	43db      	mvns	r3, r3
 8000b9a:	693a      	ldr	r2, [r7, #16]
 8000b9c:	4013      	ands	r3, r2
 8000b9e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	685b      	ldr	r3, [r3, #4]
 8000ba4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d003      	beq.n	8000bb4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000bac:	693a      	ldr	r2, [r7, #16]
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	4313      	orrs	r3, r2
 8000bb2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000bb4:	4a27      	ldr	r2, [pc, #156]	@ (8000c54 <HAL_GPIO_Init+0x350>)
 8000bb6:	693b      	ldr	r3, [r7, #16]
 8000bb8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000bba:	4b26      	ldr	r3, [pc, #152]	@ (8000c54 <HAL_GPIO_Init+0x350>)
 8000bbc:	685b      	ldr	r3, [r3, #4]
 8000bbe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	43db      	mvns	r3, r3
 8000bc4:	693a      	ldr	r2, [r7, #16]
 8000bc6:	4013      	ands	r3, r2
 8000bc8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	685b      	ldr	r3, [r3, #4]
 8000bce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d003      	beq.n	8000bde <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000bd6:	693a      	ldr	r2, [r7, #16]
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	4313      	orrs	r3, r2
 8000bdc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000bde:	4a1d      	ldr	r2, [pc, #116]	@ (8000c54 <HAL_GPIO_Init+0x350>)
 8000be0:	693b      	ldr	r3, [r7, #16]
 8000be2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000be4:	4b1b      	ldr	r3, [pc, #108]	@ (8000c54 <HAL_GPIO_Init+0x350>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	43db      	mvns	r3, r3
 8000bee:	693a      	ldr	r2, [r7, #16]
 8000bf0:	4013      	ands	r3, r2
 8000bf2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	685b      	ldr	r3, [r3, #4]
 8000bf8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d003      	beq.n	8000c08 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000c00:	693a      	ldr	r2, [r7, #16]
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	4313      	orrs	r3, r2
 8000c06:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000c08:	4a12      	ldr	r2, [pc, #72]	@ (8000c54 <HAL_GPIO_Init+0x350>)
 8000c0a:	693b      	ldr	r3, [r7, #16]
 8000c0c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000c0e:	697b      	ldr	r3, [r7, #20]
 8000c10:	3301      	adds	r3, #1
 8000c12:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	681a      	ldr	r2, [r3, #0]
 8000c18:	697b      	ldr	r3, [r7, #20]
 8000c1a:	fa22 f303 	lsr.w	r3, r2, r3
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	f47f ae78 	bne.w	8000914 <HAL_GPIO_Init+0x10>
  }
}
 8000c24:	bf00      	nop
 8000c26:	bf00      	nop
 8000c28:	371c      	adds	r7, #28
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop
 8000c34:	40021000 	.word	0x40021000
 8000c38:	40010000 	.word	0x40010000
 8000c3c:	48000400 	.word	0x48000400
 8000c40:	48000800 	.word	0x48000800
 8000c44:	48000c00 	.word	0x48000c00
 8000c48:	48001000 	.word	0x48001000
 8000c4c:	48001400 	.word	0x48001400
 8000c50:	48001800 	.word	0x48001800
 8000c54:	40010400 	.word	0x40010400

08000c58 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b085      	sub	sp, #20
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
 8000c60:	460b      	mov	r3, r1
 8000c62:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	695b      	ldr	r3, [r3, #20]
 8000c68:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000c6a:	887a      	ldrh	r2, [r7, #2]
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	4013      	ands	r3, r2
 8000c70:	041a      	lsls	r2, r3, #16
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	43d9      	mvns	r1, r3
 8000c76:	887b      	ldrh	r3, [r7, #2]
 8000c78:	400b      	ands	r3, r1
 8000c7a:	431a      	orrs	r2, r3
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	619a      	str	r2, [r3, #24]
}
 8000c80:	bf00      	nop
 8000c82:	3714      	adds	r7, #20
 8000c84:	46bd      	mov	sp, r7
 8000c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8a:	4770      	bx	lr

08000c8c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000c90:	4b04      	ldr	r3, [pc, #16]	@ (8000ca4 <HAL_PWREx_GetVoltageRange+0x18>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8000c98:	4618      	mov	r0, r3
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop
 8000ca4:	40007000 	.word	0x40007000

08000ca8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b085      	sub	sp, #20
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000cb6:	d130      	bne.n	8000d1a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000cb8:	4b23      	ldr	r3, [pc, #140]	@ (8000d48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000cc0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000cc4:	d038      	beq.n	8000d38 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000cc6:	4b20      	ldr	r3, [pc, #128]	@ (8000d48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000cce:	4a1e      	ldr	r2, [pc, #120]	@ (8000d48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000cd0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000cd4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000cd6:	4b1d      	ldr	r3, [pc, #116]	@ (8000d4c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	2232      	movs	r2, #50	@ 0x32
 8000cdc:	fb02 f303 	mul.w	r3, r2, r3
 8000ce0:	4a1b      	ldr	r2, [pc, #108]	@ (8000d50 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8000ce6:	0c9b      	lsrs	r3, r3, #18
 8000ce8:	3301      	adds	r3, #1
 8000cea:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000cec:	e002      	b.n	8000cf4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	3b01      	subs	r3, #1
 8000cf2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000cf4:	4b14      	ldr	r3, [pc, #80]	@ (8000d48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000cf6:	695b      	ldr	r3, [r3, #20]
 8000cf8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000cfc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000d00:	d102      	bne.n	8000d08 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d1f2      	bne.n	8000cee <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000d08:	4b0f      	ldr	r3, [pc, #60]	@ (8000d48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d0a:	695b      	ldr	r3, [r3, #20]
 8000d0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000d10:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000d14:	d110      	bne.n	8000d38 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000d16:	2303      	movs	r3, #3
 8000d18:	e00f      	b.n	8000d3a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000d1a:	4b0b      	ldr	r3, [pc, #44]	@ (8000d48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000d22:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000d26:	d007      	beq.n	8000d38 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000d28:	4b07      	ldr	r3, [pc, #28]	@ (8000d48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000d30:	4a05      	ldr	r2, [pc, #20]	@ (8000d48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d32:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000d36:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000d38:	2300      	movs	r3, #0
}
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	3714      	adds	r7, #20
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop
 8000d48:	40007000 	.word	0x40007000
 8000d4c:	20000000 	.word	0x20000000
 8000d50:	431bde83 	.word	0x431bde83

08000d54 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b088      	sub	sp, #32
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d101      	bne.n	8000d66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000d62:	2301      	movs	r3, #1
 8000d64:	e3ca      	b.n	80014fc <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000d66:	4b97      	ldr	r3, [pc, #604]	@ (8000fc4 <HAL_RCC_OscConfig+0x270>)
 8000d68:	689b      	ldr	r3, [r3, #8]
 8000d6a:	f003 030c 	and.w	r3, r3, #12
 8000d6e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000d70:	4b94      	ldr	r3, [pc, #592]	@ (8000fc4 <HAL_RCC_OscConfig+0x270>)
 8000d72:	68db      	ldr	r3, [r3, #12]
 8000d74:	f003 0303 	and.w	r3, r3, #3
 8000d78:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	f003 0310 	and.w	r3, r3, #16
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	f000 80e4 	beq.w	8000f50 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000d88:	69bb      	ldr	r3, [r7, #24]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d007      	beq.n	8000d9e <HAL_RCC_OscConfig+0x4a>
 8000d8e:	69bb      	ldr	r3, [r7, #24]
 8000d90:	2b0c      	cmp	r3, #12
 8000d92:	f040 808b 	bne.w	8000eac <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000d96:	697b      	ldr	r3, [r7, #20]
 8000d98:	2b01      	cmp	r3, #1
 8000d9a:	f040 8087 	bne.w	8000eac <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000d9e:	4b89      	ldr	r3, [pc, #548]	@ (8000fc4 <HAL_RCC_OscConfig+0x270>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	f003 0302 	and.w	r3, r3, #2
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d005      	beq.n	8000db6 <HAL_RCC_OscConfig+0x62>
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	699b      	ldr	r3, [r3, #24]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d101      	bne.n	8000db6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8000db2:	2301      	movs	r3, #1
 8000db4:	e3a2      	b.n	80014fc <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	6a1a      	ldr	r2, [r3, #32]
 8000dba:	4b82      	ldr	r3, [pc, #520]	@ (8000fc4 <HAL_RCC_OscConfig+0x270>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	f003 0308 	and.w	r3, r3, #8
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d004      	beq.n	8000dd0 <HAL_RCC_OscConfig+0x7c>
 8000dc6:	4b7f      	ldr	r3, [pc, #508]	@ (8000fc4 <HAL_RCC_OscConfig+0x270>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8000dce:	e005      	b.n	8000ddc <HAL_RCC_OscConfig+0x88>
 8000dd0:	4b7c      	ldr	r3, [pc, #496]	@ (8000fc4 <HAL_RCC_OscConfig+0x270>)
 8000dd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000dd6:	091b      	lsrs	r3, r3, #4
 8000dd8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8000ddc:	4293      	cmp	r3, r2
 8000dde:	d223      	bcs.n	8000e28 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	6a1b      	ldr	r3, [r3, #32]
 8000de4:	4618      	mov	r0, r3
 8000de6:	f000 fd5d 	bl	80018a4 <RCC_SetFlashLatencyFromMSIRange>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d001      	beq.n	8000df4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8000df0:	2301      	movs	r3, #1
 8000df2:	e383      	b.n	80014fc <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000df4:	4b73      	ldr	r3, [pc, #460]	@ (8000fc4 <HAL_RCC_OscConfig+0x270>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4a72      	ldr	r2, [pc, #456]	@ (8000fc4 <HAL_RCC_OscConfig+0x270>)
 8000dfa:	f043 0308 	orr.w	r3, r3, #8
 8000dfe:	6013      	str	r3, [r2, #0]
 8000e00:	4b70      	ldr	r3, [pc, #448]	@ (8000fc4 <HAL_RCC_OscConfig+0x270>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	6a1b      	ldr	r3, [r3, #32]
 8000e0c:	496d      	ldr	r1, [pc, #436]	@ (8000fc4 <HAL_RCC_OscConfig+0x270>)
 8000e0e:	4313      	orrs	r3, r2
 8000e10:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000e12:	4b6c      	ldr	r3, [pc, #432]	@ (8000fc4 <HAL_RCC_OscConfig+0x270>)
 8000e14:	685b      	ldr	r3, [r3, #4]
 8000e16:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	69db      	ldr	r3, [r3, #28]
 8000e1e:	021b      	lsls	r3, r3, #8
 8000e20:	4968      	ldr	r1, [pc, #416]	@ (8000fc4 <HAL_RCC_OscConfig+0x270>)
 8000e22:	4313      	orrs	r3, r2
 8000e24:	604b      	str	r3, [r1, #4]
 8000e26:	e025      	b.n	8000e74 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000e28:	4b66      	ldr	r3, [pc, #408]	@ (8000fc4 <HAL_RCC_OscConfig+0x270>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4a65      	ldr	r2, [pc, #404]	@ (8000fc4 <HAL_RCC_OscConfig+0x270>)
 8000e2e:	f043 0308 	orr.w	r3, r3, #8
 8000e32:	6013      	str	r3, [r2, #0]
 8000e34:	4b63      	ldr	r3, [pc, #396]	@ (8000fc4 <HAL_RCC_OscConfig+0x270>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	6a1b      	ldr	r3, [r3, #32]
 8000e40:	4960      	ldr	r1, [pc, #384]	@ (8000fc4 <HAL_RCC_OscConfig+0x270>)
 8000e42:	4313      	orrs	r3, r2
 8000e44:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000e46:	4b5f      	ldr	r3, [pc, #380]	@ (8000fc4 <HAL_RCC_OscConfig+0x270>)
 8000e48:	685b      	ldr	r3, [r3, #4]
 8000e4a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	69db      	ldr	r3, [r3, #28]
 8000e52:	021b      	lsls	r3, r3, #8
 8000e54:	495b      	ldr	r1, [pc, #364]	@ (8000fc4 <HAL_RCC_OscConfig+0x270>)
 8000e56:	4313      	orrs	r3, r2
 8000e58:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000e5a:	69bb      	ldr	r3, [r7, #24]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d109      	bne.n	8000e74 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	6a1b      	ldr	r3, [r3, #32]
 8000e64:	4618      	mov	r0, r3
 8000e66:	f000 fd1d 	bl	80018a4 <RCC_SetFlashLatencyFromMSIRange>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d001      	beq.n	8000e74 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8000e70:	2301      	movs	r3, #1
 8000e72:	e343      	b.n	80014fc <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000e74:	f000 fc7e 	bl	8001774 <HAL_RCC_GetSysClockFreq>
 8000e78:	4602      	mov	r2, r0
 8000e7a:	4b52      	ldr	r3, [pc, #328]	@ (8000fc4 <HAL_RCC_OscConfig+0x270>)
 8000e7c:	689b      	ldr	r3, [r3, #8]
 8000e7e:	091b      	lsrs	r3, r3, #4
 8000e80:	f003 030f 	and.w	r3, r3, #15
 8000e84:	4950      	ldr	r1, [pc, #320]	@ (8000fc8 <HAL_RCC_OscConfig+0x274>)
 8000e86:	5ccb      	ldrb	r3, [r1, r3]
 8000e88:	f003 031f 	and.w	r3, r3, #31
 8000e8c:	fa22 f303 	lsr.w	r3, r2, r3
 8000e90:	4a4e      	ldr	r2, [pc, #312]	@ (8000fcc <HAL_RCC_OscConfig+0x278>)
 8000e92:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000e94:	4b4e      	ldr	r3, [pc, #312]	@ (8000fd0 <HAL_RCC_OscConfig+0x27c>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f7ff fba9 	bl	80005f0 <HAL_InitTick>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000ea2:	7bfb      	ldrb	r3, [r7, #15]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d052      	beq.n	8000f4e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8000ea8:	7bfb      	ldrb	r3, [r7, #15]
 8000eaa:	e327      	b.n	80014fc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	699b      	ldr	r3, [r3, #24]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d032      	beq.n	8000f1a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000eb4:	4b43      	ldr	r3, [pc, #268]	@ (8000fc4 <HAL_RCC_OscConfig+0x270>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4a42      	ldr	r2, [pc, #264]	@ (8000fc4 <HAL_RCC_OscConfig+0x270>)
 8000eba:	f043 0301 	orr.w	r3, r3, #1
 8000ebe:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000ec0:	f7ff fbe6 	bl	8000690 <HAL_GetTick>
 8000ec4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000ec6:	e008      	b.n	8000eda <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000ec8:	f7ff fbe2 	bl	8000690 <HAL_GetTick>
 8000ecc:	4602      	mov	r2, r0
 8000ece:	693b      	ldr	r3, [r7, #16]
 8000ed0:	1ad3      	subs	r3, r2, r3
 8000ed2:	2b02      	cmp	r3, #2
 8000ed4:	d901      	bls.n	8000eda <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8000ed6:	2303      	movs	r3, #3
 8000ed8:	e310      	b.n	80014fc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000eda:	4b3a      	ldr	r3, [pc, #232]	@ (8000fc4 <HAL_RCC_OscConfig+0x270>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	f003 0302 	and.w	r3, r3, #2
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d0f0      	beq.n	8000ec8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000ee6:	4b37      	ldr	r3, [pc, #220]	@ (8000fc4 <HAL_RCC_OscConfig+0x270>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	4a36      	ldr	r2, [pc, #216]	@ (8000fc4 <HAL_RCC_OscConfig+0x270>)
 8000eec:	f043 0308 	orr.w	r3, r3, #8
 8000ef0:	6013      	str	r3, [r2, #0]
 8000ef2:	4b34      	ldr	r3, [pc, #208]	@ (8000fc4 <HAL_RCC_OscConfig+0x270>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	6a1b      	ldr	r3, [r3, #32]
 8000efe:	4931      	ldr	r1, [pc, #196]	@ (8000fc4 <HAL_RCC_OscConfig+0x270>)
 8000f00:	4313      	orrs	r3, r2
 8000f02:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000f04:	4b2f      	ldr	r3, [pc, #188]	@ (8000fc4 <HAL_RCC_OscConfig+0x270>)
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	69db      	ldr	r3, [r3, #28]
 8000f10:	021b      	lsls	r3, r3, #8
 8000f12:	492c      	ldr	r1, [pc, #176]	@ (8000fc4 <HAL_RCC_OscConfig+0x270>)
 8000f14:	4313      	orrs	r3, r2
 8000f16:	604b      	str	r3, [r1, #4]
 8000f18:	e01a      	b.n	8000f50 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000f1a:	4b2a      	ldr	r3, [pc, #168]	@ (8000fc4 <HAL_RCC_OscConfig+0x270>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	4a29      	ldr	r2, [pc, #164]	@ (8000fc4 <HAL_RCC_OscConfig+0x270>)
 8000f20:	f023 0301 	bic.w	r3, r3, #1
 8000f24:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000f26:	f7ff fbb3 	bl	8000690 <HAL_GetTick>
 8000f2a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000f2c:	e008      	b.n	8000f40 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000f2e:	f7ff fbaf 	bl	8000690 <HAL_GetTick>
 8000f32:	4602      	mov	r2, r0
 8000f34:	693b      	ldr	r3, [r7, #16]
 8000f36:	1ad3      	subs	r3, r2, r3
 8000f38:	2b02      	cmp	r3, #2
 8000f3a:	d901      	bls.n	8000f40 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8000f3c:	2303      	movs	r3, #3
 8000f3e:	e2dd      	b.n	80014fc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000f40:	4b20      	ldr	r3, [pc, #128]	@ (8000fc4 <HAL_RCC_OscConfig+0x270>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	f003 0302 	and.w	r3, r3, #2
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d1f0      	bne.n	8000f2e <HAL_RCC_OscConfig+0x1da>
 8000f4c:	e000      	b.n	8000f50 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000f4e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f003 0301 	and.w	r3, r3, #1
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d074      	beq.n	8001046 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8000f5c:	69bb      	ldr	r3, [r7, #24]
 8000f5e:	2b08      	cmp	r3, #8
 8000f60:	d005      	beq.n	8000f6e <HAL_RCC_OscConfig+0x21a>
 8000f62:	69bb      	ldr	r3, [r7, #24]
 8000f64:	2b0c      	cmp	r3, #12
 8000f66:	d10e      	bne.n	8000f86 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	2b03      	cmp	r3, #3
 8000f6c:	d10b      	bne.n	8000f86 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f6e:	4b15      	ldr	r3, [pc, #84]	@ (8000fc4 <HAL_RCC_OscConfig+0x270>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d064      	beq.n	8001044 <HAL_RCC_OscConfig+0x2f0>
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d160      	bne.n	8001044 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8000f82:	2301      	movs	r3, #1
 8000f84:	e2ba      	b.n	80014fc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000f8e:	d106      	bne.n	8000f9e <HAL_RCC_OscConfig+0x24a>
 8000f90:	4b0c      	ldr	r3, [pc, #48]	@ (8000fc4 <HAL_RCC_OscConfig+0x270>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a0b      	ldr	r2, [pc, #44]	@ (8000fc4 <HAL_RCC_OscConfig+0x270>)
 8000f96:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000f9a:	6013      	str	r3, [r2, #0]
 8000f9c:	e026      	b.n	8000fec <HAL_RCC_OscConfig+0x298>
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000fa6:	d115      	bne.n	8000fd4 <HAL_RCC_OscConfig+0x280>
 8000fa8:	4b06      	ldr	r3, [pc, #24]	@ (8000fc4 <HAL_RCC_OscConfig+0x270>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4a05      	ldr	r2, [pc, #20]	@ (8000fc4 <HAL_RCC_OscConfig+0x270>)
 8000fae:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000fb2:	6013      	str	r3, [r2, #0]
 8000fb4:	4b03      	ldr	r3, [pc, #12]	@ (8000fc4 <HAL_RCC_OscConfig+0x270>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a02      	ldr	r2, [pc, #8]	@ (8000fc4 <HAL_RCC_OscConfig+0x270>)
 8000fba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000fbe:	6013      	str	r3, [r2, #0]
 8000fc0:	e014      	b.n	8000fec <HAL_RCC_OscConfig+0x298>
 8000fc2:	bf00      	nop
 8000fc4:	40021000 	.word	0x40021000
 8000fc8:	080021e4 	.word	0x080021e4
 8000fcc:	20000000 	.word	0x20000000
 8000fd0:	20000004 	.word	0x20000004
 8000fd4:	4ba0      	ldr	r3, [pc, #640]	@ (8001258 <HAL_RCC_OscConfig+0x504>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a9f      	ldr	r2, [pc, #636]	@ (8001258 <HAL_RCC_OscConfig+0x504>)
 8000fda:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000fde:	6013      	str	r3, [r2, #0]
 8000fe0:	4b9d      	ldr	r3, [pc, #628]	@ (8001258 <HAL_RCC_OscConfig+0x504>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4a9c      	ldr	r2, [pc, #624]	@ (8001258 <HAL_RCC_OscConfig+0x504>)
 8000fe6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000fea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d013      	beq.n	800101c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ff4:	f7ff fb4c 	bl	8000690 <HAL_GetTick>
 8000ff8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000ffa:	e008      	b.n	800100e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ffc:	f7ff fb48 	bl	8000690 <HAL_GetTick>
 8001000:	4602      	mov	r2, r0
 8001002:	693b      	ldr	r3, [r7, #16]
 8001004:	1ad3      	subs	r3, r2, r3
 8001006:	2b64      	cmp	r3, #100	@ 0x64
 8001008:	d901      	bls.n	800100e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800100a:	2303      	movs	r3, #3
 800100c:	e276      	b.n	80014fc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800100e:	4b92      	ldr	r3, [pc, #584]	@ (8001258 <HAL_RCC_OscConfig+0x504>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001016:	2b00      	cmp	r3, #0
 8001018:	d0f0      	beq.n	8000ffc <HAL_RCC_OscConfig+0x2a8>
 800101a:	e014      	b.n	8001046 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800101c:	f7ff fb38 	bl	8000690 <HAL_GetTick>
 8001020:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001022:	e008      	b.n	8001036 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001024:	f7ff fb34 	bl	8000690 <HAL_GetTick>
 8001028:	4602      	mov	r2, r0
 800102a:	693b      	ldr	r3, [r7, #16]
 800102c:	1ad3      	subs	r3, r2, r3
 800102e:	2b64      	cmp	r3, #100	@ 0x64
 8001030:	d901      	bls.n	8001036 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001032:	2303      	movs	r3, #3
 8001034:	e262      	b.n	80014fc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001036:	4b88      	ldr	r3, [pc, #544]	@ (8001258 <HAL_RCC_OscConfig+0x504>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800103e:	2b00      	cmp	r3, #0
 8001040:	d1f0      	bne.n	8001024 <HAL_RCC_OscConfig+0x2d0>
 8001042:	e000      	b.n	8001046 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001044:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f003 0302 	and.w	r3, r3, #2
 800104e:	2b00      	cmp	r3, #0
 8001050:	d060      	beq.n	8001114 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001052:	69bb      	ldr	r3, [r7, #24]
 8001054:	2b04      	cmp	r3, #4
 8001056:	d005      	beq.n	8001064 <HAL_RCC_OscConfig+0x310>
 8001058:	69bb      	ldr	r3, [r7, #24]
 800105a:	2b0c      	cmp	r3, #12
 800105c:	d119      	bne.n	8001092 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800105e:	697b      	ldr	r3, [r7, #20]
 8001060:	2b02      	cmp	r3, #2
 8001062:	d116      	bne.n	8001092 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001064:	4b7c      	ldr	r3, [pc, #496]	@ (8001258 <HAL_RCC_OscConfig+0x504>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800106c:	2b00      	cmp	r3, #0
 800106e:	d005      	beq.n	800107c <HAL_RCC_OscConfig+0x328>
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	68db      	ldr	r3, [r3, #12]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d101      	bne.n	800107c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001078:	2301      	movs	r3, #1
 800107a:	e23f      	b.n	80014fc <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800107c:	4b76      	ldr	r3, [pc, #472]	@ (8001258 <HAL_RCC_OscConfig+0x504>)
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	691b      	ldr	r3, [r3, #16]
 8001088:	061b      	lsls	r3, r3, #24
 800108a:	4973      	ldr	r1, [pc, #460]	@ (8001258 <HAL_RCC_OscConfig+0x504>)
 800108c:	4313      	orrs	r3, r2
 800108e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001090:	e040      	b.n	8001114 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	68db      	ldr	r3, [r3, #12]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d023      	beq.n	80010e2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800109a:	4b6f      	ldr	r3, [pc, #444]	@ (8001258 <HAL_RCC_OscConfig+0x504>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	4a6e      	ldr	r2, [pc, #440]	@ (8001258 <HAL_RCC_OscConfig+0x504>)
 80010a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010a6:	f7ff faf3 	bl	8000690 <HAL_GetTick>
 80010aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80010ac:	e008      	b.n	80010c0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010ae:	f7ff faef 	bl	8000690 <HAL_GetTick>
 80010b2:	4602      	mov	r2, r0
 80010b4:	693b      	ldr	r3, [r7, #16]
 80010b6:	1ad3      	subs	r3, r2, r3
 80010b8:	2b02      	cmp	r3, #2
 80010ba:	d901      	bls.n	80010c0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80010bc:	2303      	movs	r3, #3
 80010be:	e21d      	b.n	80014fc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80010c0:	4b65      	ldr	r3, [pc, #404]	@ (8001258 <HAL_RCC_OscConfig+0x504>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d0f0      	beq.n	80010ae <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010cc:	4b62      	ldr	r3, [pc, #392]	@ (8001258 <HAL_RCC_OscConfig+0x504>)
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	691b      	ldr	r3, [r3, #16]
 80010d8:	061b      	lsls	r3, r3, #24
 80010da:	495f      	ldr	r1, [pc, #380]	@ (8001258 <HAL_RCC_OscConfig+0x504>)
 80010dc:	4313      	orrs	r3, r2
 80010de:	604b      	str	r3, [r1, #4]
 80010e0:	e018      	b.n	8001114 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010e2:	4b5d      	ldr	r3, [pc, #372]	@ (8001258 <HAL_RCC_OscConfig+0x504>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4a5c      	ldr	r2, [pc, #368]	@ (8001258 <HAL_RCC_OscConfig+0x504>)
 80010e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80010ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010ee:	f7ff facf 	bl	8000690 <HAL_GetTick>
 80010f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80010f4:	e008      	b.n	8001108 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010f6:	f7ff facb 	bl	8000690 <HAL_GetTick>
 80010fa:	4602      	mov	r2, r0
 80010fc:	693b      	ldr	r3, [r7, #16]
 80010fe:	1ad3      	subs	r3, r2, r3
 8001100:	2b02      	cmp	r3, #2
 8001102:	d901      	bls.n	8001108 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001104:	2303      	movs	r3, #3
 8001106:	e1f9      	b.n	80014fc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001108:	4b53      	ldr	r3, [pc, #332]	@ (8001258 <HAL_RCC_OscConfig+0x504>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001110:	2b00      	cmp	r3, #0
 8001112:	d1f0      	bne.n	80010f6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f003 0308 	and.w	r3, r3, #8
 800111c:	2b00      	cmp	r3, #0
 800111e:	d03c      	beq.n	800119a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	695b      	ldr	r3, [r3, #20]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d01c      	beq.n	8001162 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001128:	4b4b      	ldr	r3, [pc, #300]	@ (8001258 <HAL_RCC_OscConfig+0x504>)
 800112a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800112e:	4a4a      	ldr	r2, [pc, #296]	@ (8001258 <HAL_RCC_OscConfig+0x504>)
 8001130:	f043 0301 	orr.w	r3, r3, #1
 8001134:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001138:	f7ff faaa 	bl	8000690 <HAL_GetTick>
 800113c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800113e:	e008      	b.n	8001152 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001140:	f7ff faa6 	bl	8000690 <HAL_GetTick>
 8001144:	4602      	mov	r2, r0
 8001146:	693b      	ldr	r3, [r7, #16]
 8001148:	1ad3      	subs	r3, r2, r3
 800114a:	2b02      	cmp	r3, #2
 800114c:	d901      	bls.n	8001152 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800114e:	2303      	movs	r3, #3
 8001150:	e1d4      	b.n	80014fc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001152:	4b41      	ldr	r3, [pc, #260]	@ (8001258 <HAL_RCC_OscConfig+0x504>)
 8001154:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001158:	f003 0302 	and.w	r3, r3, #2
 800115c:	2b00      	cmp	r3, #0
 800115e:	d0ef      	beq.n	8001140 <HAL_RCC_OscConfig+0x3ec>
 8001160:	e01b      	b.n	800119a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001162:	4b3d      	ldr	r3, [pc, #244]	@ (8001258 <HAL_RCC_OscConfig+0x504>)
 8001164:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001168:	4a3b      	ldr	r2, [pc, #236]	@ (8001258 <HAL_RCC_OscConfig+0x504>)
 800116a:	f023 0301 	bic.w	r3, r3, #1
 800116e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001172:	f7ff fa8d 	bl	8000690 <HAL_GetTick>
 8001176:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001178:	e008      	b.n	800118c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800117a:	f7ff fa89 	bl	8000690 <HAL_GetTick>
 800117e:	4602      	mov	r2, r0
 8001180:	693b      	ldr	r3, [r7, #16]
 8001182:	1ad3      	subs	r3, r2, r3
 8001184:	2b02      	cmp	r3, #2
 8001186:	d901      	bls.n	800118c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001188:	2303      	movs	r3, #3
 800118a:	e1b7      	b.n	80014fc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800118c:	4b32      	ldr	r3, [pc, #200]	@ (8001258 <HAL_RCC_OscConfig+0x504>)
 800118e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001192:	f003 0302 	and.w	r3, r3, #2
 8001196:	2b00      	cmp	r3, #0
 8001198:	d1ef      	bne.n	800117a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f003 0304 	and.w	r3, r3, #4
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	f000 80a6 	beq.w	80012f4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80011a8:	2300      	movs	r3, #0
 80011aa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80011ac:	4b2a      	ldr	r3, [pc, #168]	@ (8001258 <HAL_RCC_OscConfig+0x504>)
 80011ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d10d      	bne.n	80011d4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80011b8:	4b27      	ldr	r3, [pc, #156]	@ (8001258 <HAL_RCC_OscConfig+0x504>)
 80011ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011bc:	4a26      	ldr	r2, [pc, #152]	@ (8001258 <HAL_RCC_OscConfig+0x504>)
 80011be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011c2:	6593      	str	r3, [r2, #88]	@ 0x58
 80011c4:	4b24      	ldr	r3, [pc, #144]	@ (8001258 <HAL_RCC_OscConfig+0x504>)
 80011c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011cc:	60bb      	str	r3, [r7, #8]
 80011ce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80011d0:	2301      	movs	r3, #1
 80011d2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80011d4:	4b21      	ldr	r3, [pc, #132]	@ (800125c <HAL_RCC_OscConfig+0x508>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d118      	bne.n	8001212 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80011e0:	4b1e      	ldr	r3, [pc, #120]	@ (800125c <HAL_RCC_OscConfig+0x508>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a1d      	ldr	r2, [pc, #116]	@ (800125c <HAL_RCC_OscConfig+0x508>)
 80011e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011ea:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80011ec:	f7ff fa50 	bl	8000690 <HAL_GetTick>
 80011f0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80011f2:	e008      	b.n	8001206 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011f4:	f7ff fa4c 	bl	8000690 <HAL_GetTick>
 80011f8:	4602      	mov	r2, r0
 80011fa:	693b      	ldr	r3, [r7, #16]
 80011fc:	1ad3      	subs	r3, r2, r3
 80011fe:	2b02      	cmp	r3, #2
 8001200:	d901      	bls.n	8001206 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001202:	2303      	movs	r3, #3
 8001204:	e17a      	b.n	80014fc <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001206:	4b15      	ldr	r3, [pc, #84]	@ (800125c <HAL_RCC_OscConfig+0x508>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800120e:	2b00      	cmp	r3, #0
 8001210:	d0f0      	beq.n	80011f4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	689b      	ldr	r3, [r3, #8]
 8001216:	2b01      	cmp	r3, #1
 8001218:	d108      	bne.n	800122c <HAL_RCC_OscConfig+0x4d8>
 800121a:	4b0f      	ldr	r3, [pc, #60]	@ (8001258 <HAL_RCC_OscConfig+0x504>)
 800121c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001220:	4a0d      	ldr	r2, [pc, #52]	@ (8001258 <HAL_RCC_OscConfig+0x504>)
 8001222:	f043 0301 	orr.w	r3, r3, #1
 8001226:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800122a:	e029      	b.n	8001280 <HAL_RCC_OscConfig+0x52c>
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	689b      	ldr	r3, [r3, #8]
 8001230:	2b05      	cmp	r3, #5
 8001232:	d115      	bne.n	8001260 <HAL_RCC_OscConfig+0x50c>
 8001234:	4b08      	ldr	r3, [pc, #32]	@ (8001258 <HAL_RCC_OscConfig+0x504>)
 8001236:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800123a:	4a07      	ldr	r2, [pc, #28]	@ (8001258 <HAL_RCC_OscConfig+0x504>)
 800123c:	f043 0304 	orr.w	r3, r3, #4
 8001240:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001244:	4b04      	ldr	r3, [pc, #16]	@ (8001258 <HAL_RCC_OscConfig+0x504>)
 8001246:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800124a:	4a03      	ldr	r2, [pc, #12]	@ (8001258 <HAL_RCC_OscConfig+0x504>)
 800124c:	f043 0301 	orr.w	r3, r3, #1
 8001250:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001254:	e014      	b.n	8001280 <HAL_RCC_OscConfig+0x52c>
 8001256:	bf00      	nop
 8001258:	40021000 	.word	0x40021000
 800125c:	40007000 	.word	0x40007000
 8001260:	4b9c      	ldr	r3, [pc, #624]	@ (80014d4 <HAL_RCC_OscConfig+0x780>)
 8001262:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001266:	4a9b      	ldr	r2, [pc, #620]	@ (80014d4 <HAL_RCC_OscConfig+0x780>)
 8001268:	f023 0301 	bic.w	r3, r3, #1
 800126c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001270:	4b98      	ldr	r3, [pc, #608]	@ (80014d4 <HAL_RCC_OscConfig+0x780>)
 8001272:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001276:	4a97      	ldr	r2, [pc, #604]	@ (80014d4 <HAL_RCC_OscConfig+0x780>)
 8001278:	f023 0304 	bic.w	r3, r3, #4
 800127c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	689b      	ldr	r3, [r3, #8]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d016      	beq.n	80012b6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001288:	f7ff fa02 	bl	8000690 <HAL_GetTick>
 800128c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800128e:	e00a      	b.n	80012a6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001290:	f7ff f9fe 	bl	8000690 <HAL_GetTick>
 8001294:	4602      	mov	r2, r0
 8001296:	693b      	ldr	r3, [r7, #16]
 8001298:	1ad3      	subs	r3, r2, r3
 800129a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800129e:	4293      	cmp	r3, r2
 80012a0:	d901      	bls.n	80012a6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80012a2:	2303      	movs	r3, #3
 80012a4:	e12a      	b.n	80014fc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80012a6:	4b8b      	ldr	r3, [pc, #556]	@ (80014d4 <HAL_RCC_OscConfig+0x780>)
 80012a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80012ac:	f003 0302 	and.w	r3, r3, #2
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d0ed      	beq.n	8001290 <HAL_RCC_OscConfig+0x53c>
 80012b4:	e015      	b.n	80012e2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012b6:	f7ff f9eb 	bl	8000690 <HAL_GetTick>
 80012ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80012bc:	e00a      	b.n	80012d4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012be:	f7ff f9e7 	bl	8000690 <HAL_GetTick>
 80012c2:	4602      	mov	r2, r0
 80012c4:	693b      	ldr	r3, [r7, #16]
 80012c6:	1ad3      	subs	r3, r2, r3
 80012c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80012cc:	4293      	cmp	r3, r2
 80012ce:	d901      	bls.n	80012d4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80012d0:	2303      	movs	r3, #3
 80012d2:	e113      	b.n	80014fc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80012d4:	4b7f      	ldr	r3, [pc, #508]	@ (80014d4 <HAL_RCC_OscConfig+0x780>)
 80012d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80012da:	f003 0302 	and.w	r3, r3, #2
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d1ed      	bne.n	80012be <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80012e2:	7ffb      	ldrb	r3, [r7, #31]
 80012e4:	2b01      	cmp	r3, #1
 80012e6:	d105      	bne.n	80012f4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80012e8:	4b7a      	ldr	r3, [pc, #488]	@ (80014d4 <HAL_RCC_OscConfig+0x780>)
 80012ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012ec:	4a79      	ldr	r2, [pc, #484]	@ (80014d4 <HAL_RCC_OscConfig+0x780>)
 80012ee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80012f2:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	f000 80fe 	beq.w	80014fa <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001302:	2b02      	cmp	r3, #2
 8001304:	f040 80d0 	bne.w	80014a8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001308:	4b72      	ldr	r3, [pc, #456]	@ (80014d4 <HAL_RCC_OscConfig+0x780>)
 800130a:	68db      	ldr	r3, [r3, #12]
 800130c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800130e:	697b      	ldr	r3, [r7, #20]
 8001310:	f003 0203 	and.w	r2, r3, #3
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001318:	429a      	cmp	r2, r3
 800131a:	d130      	bne.n	800137e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001326:	3b01      	subs	r3, #1
 8001328:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800132a:	429a      	cmp	r2, r3
 800132c:	d127      	bne.n	800137e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800132e:	697b      	ldr	r3, [r7, #20]
 8001330:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001338:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800133a:	429a      	cmp	r2, r3
 800133c:	d11f      	bne.n	800137e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800133e:	697b      	ldr	r3, [r7, #20]
 8001340:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001344:	687a      	ldr	r2, [r7, #4]
 8001346:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001348:	2a07      	cmp	r2, #7
 800134a:	bf14      	ite	ne
 800134c:	2201      	movne	r2, #1
 800134e:	2200      	moveq	r2, #0
 8001350:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001352:	4293      	cmp	r3, r2
 8001354:	d113      	bne.n	800137e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001360:	085b      	lsrs	r3, r3, #1
 8001362:	3b01      	subs	r3, #1
 8001364:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001366:	429a      	cmp	r2, r3
 8001368:	d109      	bne.n	800137e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800136a:	697b      	ldr	r3, [r7, #20]
 800136c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001374:	085b      	lsrs	r3, r3, #1
 8001376:	3b01      	subs	r3, #1
 8001378:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800137a:	429a      	cmp	r2, r3
 800137c:	d06e      	beq.n	800145c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800137e:	69bb      	ldr	r3, [r7, #24]
 8001380:	2b0c      	cmp	r3, #12
 8001382:	d069      	beq.n	8001458 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001384:	4b53      	ldr	r3, [pc, #332]	@ (80014d4 <HAL_RCC_OscConfig+0x780>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800138c:	2b00      	cmp	r3, #0
 800138e:	d105      	bne.n	800139c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001390:	4b50      	ldr	r3, [pc, #320]	@ (80014d4 <HAL_RCC_OscConfig+0x780>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001398:	2b00      	cmp	r3, #0
 800139a:	d001      	beq.n	80013a0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800139c:	2301      	movs	r3, #1
 800139e:	e0ad      	b.n	80014fc <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80013a0:	4b4c      	ldr	r3, [pc, #304]	@ (80014d4 <HAL_RCC_OscConfig+0x780>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a4b      	ldr	r2, [pc, #300]	@ (80014d4 <HAL_RCC_OscConfig+0x780>)
 80013a6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80013aa:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80013ac:	f7ff f970 	bl	8000690 <HAL_GetTick>
 80013b0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80013b2:	e008      	b.n	80013c6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013b4:	f7ff f96c 	bl	8000690 <HAL_GetTick>
 80013b8:	4602      	mov	r2, r0
 80013ba:	693b      	ldr	r3, [r7, #16]
 80013bc:	1ad3      	subs	r3, r2, r3
 80013be:	2b02      	cmp	r3, #2
 80013c0:	d901      	bls.n	80013c6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80013c2:	2303      	movs	r3, #3
 80013c4:	e09a      	b.n	80014fc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80013c6:	4b43      	ldr	r3, [pc, #268]	@ (80014d4 <HAL_RCC_OscConfig+0x780>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d1f0      	bne.n	80013b4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80013d2:	4b40      	ldr	r3, [pc, #256]	@ (80014d4 <HAL_RCC_OscConfig+0x780>)
 80013d4:	68da      	ldr	r2, [r3, #12]
 80013d6:	4b40      	ldr	r3, [pc, #256]	@ (80014d8 <HAL_RCC_OscConfig+0x784>)
 80013d8:	4013      	ands	r3, r2
 80013da:	687a      	ldr	r2, [r7, #4]
 80013dc:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80013de:	687a      	ldr	r2, [r7, #4]
 80013e0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80013e2:	3a01      	subs	r2, #1
 80013e4:	0112      	lsls	r2, r2, #4
 80013e6:	4311      	orrs	r1, r2
 80013e8:	687a      	ldr	r2, [r7, #4]
 80013ea:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80013ec:	0212      	lsls	r2, r2, #8
 80013ee:	4311      	orrs	r1, r2
 80013f0:	687a      	ldr	r2, [r7, #4]
 80013f2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80013f4:	0852      	lsrs	r2, r2, #1
 80013f6:	3a01      	subs	r2, #1
 80013f8:	0552      	lsls	r2, r2, #21
 80013fa:	4311      	orrs	r1, r2
 80013fc:	687a      	ldr	r2, [r7, #4]
 80013fe:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001400:	0852      	lsrs	r2, r2, #1
 8001402:	3a01      	subs	r2, #1
 8001404:	0652      	lsls	r2, r2, #25
 8001406:	4311      	orrs	r1, r2
 8001408:	687a      	ldr	r2, [r7, #4]
 800140a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800140c:	0912      	lsrs	r2, r2, #4
 800140e:	0452      	lsls	r2, r2, #17
 8001410:	430a      	orrs	r2, r1
 8001412:	4930      	ldr	r1, [pc, #192]	@ (80014d4 <HAL_RCC_OscConfig+0x780>)
 8001414:	4313      	orrs	r3, r2
 8001416:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001418:	4b2e      	ldr	r3, [pc, #184]	@ (80014d4 <HAL_RCC_OscConfig+0x780>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a2d      	ldr	r2, [pc, #180]	@ (80014d4 <HAL_RCC_OscConfig+0x780>)
 800141e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001422:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001424:	4b2b      	ldr	r3, [pc, #172]	@ (80014d4 <HAL_RCC_OscConfig+0x780>)
 8001426:	68db      	ldr	r3, [r3, #12]
 8001428:	4a2a      	ldr	r2, [pc, #168]	@ (80014d4 <HAL_RCC_OscConfig+0x780>)
 800142a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800142e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001430:	f7ff f92e 	bl	8000690 <HAL_GetTick>
 8001434:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001436:	e008      	b.n	800144a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001438:	f7ff f92a 	bl	8000690 <HAL_GetTick>
 800143c:	4602      	mov	r2, r0
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	1ad3      	subs	r3, r2, r3
 8001442:	2b02      	cmp	r3, #2
 8001444:	d901      	bls.n	800144a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001446:	2303      	movs	r3, #3
 8001448:	e058      	b.n	80014fc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800144a:	4b22      	ldr	r3, [pc, #136]	@ (80014d4 <HAL_RCC_OscConfig+0x780>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001452:	2b00      	cmp	r3, #0
 8001454:	d0f0      	beq.n	8001438 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001456:	e050      	b.n	80014fa <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001458:	2301      	movs	r3, #1
 800145a:	e04f      	b.n	80014fc <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800145c:	4b1d      	ldr	r3, [pc, #116]	@ (80014d4 <HAL_RCC_OscConfig+0x780>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001464:	2b00      	cmp	r3, #0
 8001466:	d148      	bne.n	80014fa <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001468:	4b1a      	ldr	r3, [pc, #104]	@ (80014d4 <HAL_RCC_OscConfig+0x780>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a19      	ldr	r2, [pc, #100]	@ (80014d4 <HAL_RCC_OscConfig+0x780>)
 800146e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001472:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001474:	4b17      	ldr	r3, [pc, #92]	@ (80014d4 <HAL_RCC_OscConfig+0x780>)
 8001476:	68db      	ldr	r3, [r3, #12]
 8001478:	4a16      	ldr	r2, [pc, #88]	@ (80014d4 <HAL_RCC_OscConfig+0x780>)
 800147a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800147e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001480:	f7ff f906 	bl	8000690 <HAL_GetTick>
 8001484:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001486:	e008      	b.n	800149a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001488:	f7ff f902 	bl	8000690 <HAL_GetTick>
 800148c:	4602      	mov	r2, r0
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	1ad3      	subs	r3, r2, r3
 8001492:	2b02      	cmp	r3, #2
 8001494:	d901      	bls.n	800149a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001496:	2303      	movs	r3, #3
 8001498:	e030      	b.n	80014fc <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800149a:	4b0e      	ldr	r3, [pc, #56]	@ (80014d4 <HAL_RCC_OscConfig+0x780>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d0f0      	beq.n	8001488 <HAL_RCC_OscConfig+0x734>
 80014a6:	e028      	b.n	80014fa <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80014a8:	69bb      	ldr	r3, [r7, #24]
 80014aa:	2b0c      	cmp	r3, #12
 80014ac:	d023      	beq.n	80014f6 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014ae:	4b09      	ldr	r3, [pc, #36]	@ (80014d4 <HAL_RCC_OscConfig+0x780>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4a08      	ldr	r2, [pc, #32]	@ (80014d4 <HAL_RCC_OscConfig+0x780>)
 80014b4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80014b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014ba:	f7ff f8e9 	bl	8000690 <HAL_GetTick>
 80014be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80014c0:	e00c      	b.n	80014dc <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014c2:	f7ff f8e5 	bl	8000690 <HAL_GetTick>
 80014c6:	4602      	mov	r2, r0
 80014c8:	693b      	ldr	r3, [r7, #16]
 80014ca:	1ad3      	subs	r3, r2, r3
 80014cc:	2b02      	cmp	r3, #2
 80014ce:	d905      	bls.n	80014dc <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80014d0:	2303      	movs	r3, #3
 80014d2:	e013      	b.n	80014fc <HAL_RCC_OscConfig+0x7a8>
 80014d4:	40021000 	.word	0x40021000
 80014d8:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80014dc:	4b09      	ldr	r3, [pc, #36]	@ (8001504 <HAL_RCC_OscConfig+0x7b0>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d1ec      	bne.n	80014c2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80014e8:	4b06      	ldr	r3, [pc, #24]	@ (8001504 <HAL_RCC_OscConfig+0x7b0>)
 80014ea:	68da      	ldr	r2, [r3, #12]
 80014ec:	4905      	ldr	r1, [pc, #20]	@ (8001504 <HAL_RCC_OscConfig+0x7b0>)
 80014ee:	4b06      	ldr	r3, [pc, #24]	@ (8001508 <HAL_RCC_OscConfig+0x7b4>)
 80014f0:	4013      	ands	r3, r2
 80014f2:	60cb      	str	r3, [r1, #12]
 80014f4:	e001      	b.n	80014fa <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80014f6:	2301      	movs	r3, #1
 80014f8:	e000      	b.n	80014fc <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80014fa:	2300      	movs	r3, #0
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	3720      	adds	r7, #32
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	40021000 	.word	0x40021000
 8001508:	feeefffc 	.word	0xfeeefffc

0800150c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b084      	sub	sp, #16
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
 8001514:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d101      	bne.n	8001520 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800151c:	2301      	movs	r3, #1
 800151e:	e0e7      	b.n	80016f0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001520:	4b75      	ldr	r3, [pc, #468]	@ (80016f8 <HAL_RCC_ClockConfig+0x1ec>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f003 0307 	and.w	r3, r3, #7
 8001528:	683a      	ldr	r2, [r7, #0]
 800152a:	429a      	cmp	r2, r3
 800152c:	d910      	bls.n	8001550 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800152e:	4b72      	ldr	r3, [pc, #456]	@ (80016f8 <HAL_RCC_ClockConfig+0x1ec>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f023 0207 	bic.w	r2, r3, #7
 8001536:	4970      	ldr	r1, [pc, #448]	@ (80016f8 <HAL_RCC_ClockConfig+0x1ec>)
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	4313      	orrs	r3, r2
 800153c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800153e:	4b6e      	ldr	r3, [pc, #440]	@ (80016f8 <HAL_RCC_ClockConfig+0x1ec>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f003 0307 	and.w	r3, r3, #7
 8001546:	683a      	ldr	r2, [r7, #0]
 8001548:	429a      	cmp	r2, r3
 800154a:	d001      	beq.n	8001550 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800154c:	2301      	movs	r3, #1
 800154e:	e0cf      	b.n	80016f0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f003 0302 	and.w	r3, r3, #2
 8001558:	2b00      	cmp	r3, #0
 800155a:	d010      	beq.n	800157e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	689a      	ldr	r2, [r3, #8]
 8001560:	4b66      	ldr	r3, [pc, #408]	@ (80016fc <HAL_RCC_ClockConfig+0x1f0>)
 8001562:	689b      	ldr	r3, [r3, #8]
 8001564:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001568:	429a      	cmp	r2, r3
 800156a:	d908      	bls.n	800157e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800156c:	4b63      	ldr	r3, [pc, #396]	@ (80016fc <HAL_RCC_ClockConfig+0x1f0>)
 800156e:	689b      	ldr	r3, [r3, #8]
 8001570:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	689b      	ldr	r3, [r3, #8]
 8001578:	4960      	ldr	r1, [pc, #384]	@ (80016fc <HAL_RCC_ClockConfig+0x1f0>)
 800157a:	4313      	orrs	r3, r2
 800157c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f003 0301 	and.w	r3, r3, #1
 8001586:	2b00      	cmp	r3, #0
 8001588:	d04c      	beq.n	8001624 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	2b03      	cmp	r3, #3
 8001590:	d107      	bne.n	80015a2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001592:	4b5a      	ldr	r3, [pc, #360]	@ (80016fc <HAL_RCC_ClockConfig+0x1f0>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800159a:	2b00      	cmp	r3, #0
 800159c:	d121      	bne.n	80015e2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800159e:	2301      	movs	r3, #1
 80015a0:	e0a6      	b.n	80016f0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	2b02      	cmp	r3, #2
 80015a8:	d107      	bne.n	80015ba <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015aa:	4b54      	ldr	r3, [pc, #336]	@ (80016fc <HAL_RCC_ClockConfig+0x1f0>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d115      	bne.n	80015e2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80015b6:	2301      	movs	r3, #1
 80015b8:	e09a      	b.n	80016f0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d107      	bne.n	80015d2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80015c2:	4b4e      	ldr	r3, [pc, #312]	@ (80016fc <HAL_RCC_ClockConfig+0x1f0>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f003 0302 	and.w	r3, r3, #2
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d109      	bne.n	80015e2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
 80015d0:	e08e      	b.n	80016f0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015d2:	4b4a      	ldr	r3, [pc, #296]	@ (80016fc <HAL_RCC_ClockConfig+0x1f0>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d101      	bne.n	80015e2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80015de:	2301      	movs	r3, #1
 80015e0:	e086      	b.n	80016f0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80015e2:	4b46      	ldr	r3, [pc, #280]	@ (80016fc <HAL_RCC_ClockConfig+0x1f0>)
 80015e4:	689b      	ldr	r3, [r3, #8]
 80015e6:	f023 0203 	bic.w	r2, r3, #3
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	4943      	ldr	r1, [pc, #268]	@ (80016fc <HAL_RCC_ClockConfig+0x1f0>)
 80015f0:	4313      	orrs	r3, r2
 80015f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80015f4:	f7ff f84c 	bl	8000690 <HAL_GetTick>
 80015f8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015fa:	e00a      	b.n	8001612 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015fc:	f7ff f848 	bl	8000690 <HAL_GetTick>
 8001600:	4602      	mov	r2, r0
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	1ad3      	subs	r3, r2, r3
 8001606:	f241 3288 	movw	r2, #5000	@ 0x1388
 800160a:	4293      	cmp	r3, r2
 800160c:	d901      	bls.n	8001612 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800160e:	2303      	movs	r3, #3
 8001610:	e06e      	b.n	80016f0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001612:	4b3a      	ldr	r3, [pc, #232]	@ (80016fc <HAL_RCC_ClockConfig+0x1f0>)
 8001614:	689b      	ldr	r3, [r3, #8]
 8001616:	f003 020c 	and.w	r2, r3, #12
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	009b      	lsls	r3, r3, #2
 8001620:	429a      	cmp	r2, r3
 8001622:	d1eb      	bne.n	80015fc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f003 0302 	and.w	r3, r3, #2
 800162c:	2b00      	cmp	r3, #0
 800162e:	d010      	beq.n	8001652 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	689a      	ldr	r2, [r3, #8]
 8001634:	4b31      	ldr	r3, [pc, #196]	@ (80016fc <HAL_RCC_ClockConfig+0x1f0>)
 8001636:	689b      	ldr	r3, [r3, #8]
 8001638:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800163c:	429a      	cmp	r2, r3
 800163e:	d208      	bcs.n	8001652 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001640:	4b2e      	ldr	r3, [pc, #184]	@ (80016fc <HAL_RCC_ClockConfig+0x1f0>)
 8001642:	689b      	ldr	r3, [r3, #8]
 8001644:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	689b      	ldr	r3, [r3, #8]
 800164c:	492b      	ldr	r1, [pc, #172]	@ (80016fc <HAL_RCC_ClockConfig+0x1f0>)
 800164e:	4313      	orrs	r3, r2
 8001650:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001652:	4b29      	ldr	r3, [pc, #164]	@ (80016f8 <HAL_RCC_ClockConfig+0x1ec>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f003 0307 	and.w	r3, r3, #7
 800165a:	683a      	ldr	r2, [r7, #0]
 800165c:	429a      	cmp	r2, r3
 800165e:	d210      	bcs.n	8001682 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001660:	4b25      	ldr	r3, [pc, #148]	@ (80016f8 <HAL_RCC_ClockConfig+0x1ec>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f023 0207 	bic.w	r2, r3, #7
 8001668:	4923      	ldr	r1, [pc, #140]	@ (80016f8 <HAL_RCC_ClockConfig+0x1ec>)
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	4313      	orrs	r3, r2
 800166e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001670:	4b21      	ldr	r3, [pc, #132]	@ (80016f8 <HAL_RCC_ClockConfig+0x1ec>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f003 0307 	and.w	r3, r3, #7
 8001678:	683a      	ldr	r2, [r7, #0]
 800167a:	429a      	cmp	r2, r3
 800167c:	d001      	beq.n	8001682 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800167e:	2301      	movs	r3, #1
 8001680:	e036      	b.n	80016f0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f003 0304 	and.w	r3, r3, #4
 800168a:	2b00      	cmp	r3, #0
 800168c:	d008      	beq.n	80016a0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800168e:	4b1b      	ldr	r3, [pc, #108]	@ (80016fc <HAL_RCC_ClockConfig+0x1f0>)
 8001690:	689b      	ldr	r3, [r3, #8]
 8001692:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	68db      	ldr	r3, [r3, #12]
 800169a:	4918      	ldr	r1, [pc, #96]	@ (80016fc <HAL_RCC_ClockConfig+0x1f0>)
 800169c:	4313      	orrs	r3, r2
 800169e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f003 0308 	and.w	r3, r3, #8
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d009      	beq.n	80016c0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80016ac:	4b13      	ldr	r3, [pc, #76]	@ (80016fc <HAL_RCC_ClockConfig+0x1f0>)
 80016ae:	689b      	ldr	r3, [r3, #8]
 80016b0:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	691b      	ldr	r3, [r3, #16]
 80016b8:	00db      	lsls	r3, r3, #3
 80016ba:	4910      	ldr	r1, [pc, #64]	@ (80016fc <HAL_RCC_ClockConfig+0x1f0>)
 80016bc:	4313      	orrs	r3, r2
 80016be:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80016c0:	f000 f858 	bl	8001774 <HAL_RCC_GetSysClockFreq>
 80016c4:	4602      	mov	r2, r0
 80016c6:	4b0d      	ldr	r3, [pc, #52]	@ (80016fc <HAL_RCC_ClockConfig+0x1f0>)
 80016c8:	689b      	ldr	r3, [r3, #8]
 80016ca:	091b      	lsrs	r3, r3, #4
 80016cc:	f003 030f 	and.w	r3, r3, #15
 80016d0:	490b      	ldr	r1, [pc, #44]	@ (8001700 <HAL_RCC_ClockConfig+0x1f4>)
 80016d2:	5ccb      	ldrb	r3, [r1, r3]
 80016d4:	f003 031f 	and.w	r3, r3, #31
 80016d8:	fa22 f303 	lsr.w	r3, r2, r3
 80016dc:	4a09      	ldr	r2, [pc, #36]	@ (8001704 <HAL_RCC_ClockConfig+0x1f8>)
 80016de:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80016e0:	4b09      	ldr	r3, [pc, #36]	@ (8001708 <HAL_RCC_ClockConfig+0x1fc>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4618      	mov	r0, r3
 80016e6:	f7fe ff83 	bl	80005f0 <HAL_InitTick>
 80016ea:	4603      	mov	r3, r0
 80016ec:	72fb      	strb	r3, [r7, #11]

  return status;
 80016ee:	7afb      	ldrb	r3, [r7, #11]
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	3710      	adds	r7, #16
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	40022000 	.word	0x40022000
 80016fc:	40021000 	.word	0x40021000
 8001700:	080021e4 	.word	0x080021e4
 8001704:	20000000 	.word	0x20000000
 8001708:	20000004 	.word	0x20000004

0800170c <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16  division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig( uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b08a      	sub	sp, #40	@ 0x28
 8001710:	af00      	add	r7, sp, #0
 8001712:	60f8      	str	r0, [r7, #12]
 8001714:	60b9      	str	r1, [r7, #8]
 8001716:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning if no assert_param check */
  UNUSED(RCC_MCOx);

  /* MCO Clock Enable */
  __MCO1_CLK_ENABLE();
 8001718:	4b15      	ldr	r3, [pc, #84]	@ (8001770 <HAL_RCC_MCOConfig+0x64>)
 800171a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800171c:	4a14      	ldr	r2, [pc, #80]	@ (8001770 <HAL_RCC_MCOConfig+0x64>)
 800171e:	f043 0301 	orr.w	r3, r3, #1
 8001722:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001724:	4b12      	ldr	r3, [pc, #72]	@ (8001770 <HAL_RCC_MCOConfig+0x64>)
 8001726:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001728:	f003 0301 	and.w	r3, r3, #1
 800172c:	613b      	str	r3, [r7, #16]
 800172e:	693b      	ldr	r3, [r7, #16]

  /* Configure the MCO1 pin in alternate function mode */
  GPIO_InitStruct.Pin = MCO1_PIN;
 8001730:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001734:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001736:	2302      	movs	r3, #2
 8001738:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800173a:	2302      	movs	r3, #2
 800173c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173e:	2300      	movs	r3, #0
 8001740:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8001742:	2300      	movs	r3, #0
 8001744:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8001746:	f107 0314 	add.w	r3, r7, #20
 800174a:	4619      	mov	r1, r3
 800174c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001750:	f7ff f8d8 	bl	8000904 <HAL_GPIO_Init>

  /* Mask MCOSEL[] and MCOPRE[] bits then set MCO1 clock source and prescaler */
  MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCOSEL | RCC_CFGR_MCOPRE), (RCC_MCOSource | RCC_MCODiv ));
 8001754:	4b06      	ldr	r3, [pc, #24]	@ (8001770 <HAL_RCC_MCOConfig+0x64>)
 8001756:	689b      	ldr	r3, [r3, #8]
 8001758:	f023 42ee 	bic.w	r2, r3, #1996488704	@ 0x77000000
 800175c:	68b9      	ldr	r1, [r7, #8]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	430b      	orrs	r3, r1
 8001762:	4903      	ldr	r1, [pc, #12]	@ (8001770 <HAL_RCC_MCOConfig+0x64>)
 8001764:	4313      	orrs	r3, r2
 8001766:	608b      	str	r3, [r1, #8]
}
 8001768:	bf00      	nop
 800176a:	3728      	adds	r7, #40	@ 0x28
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}
 8001770:	40021000 	.word	0x40021000

08001774 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001774:	b480      	push	{r7}
 8001776:	b089      	sub	sp, #36	@ 0x24
 8001778:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800177a:	2300      	movs	r3, #0
 800177c:	61fb      	str	r3, [r7, #28]
 800177e:	2300      	movs	r3, #0
 8001780:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001782:	4b3e      	ldr	r3, [pc, #248]	@ (800187c <HAL_RCC_GetSysClockFreq+0x108>)
 8001784:	689b      	ldr	r3, [r3, #8]
 8001786:	f003 030c 	and.w	r3, r3, #12
 800178a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800178c:	4b3b      	ldr	r3, [pc, #236]	@ (800187c <HAL_RCC_GetSysClockFreq+0x108>)
 800178e:	68db      	ldr	r3, [r3, #12]
 8001790:	f003 0303 	and.w	r3, r3, #3
 8001794:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d005      	beq.n	80017a8 <HAL_RCC_GetSysClockFreq+0x34>
 800179c:	693b      	ldr	r3, [r7, #16]
 800179e:	2b0c      	cmp	r3, #12
 80017a0:	d121      	bne.n	80017e6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	2b01      	cmp	r3, #1
 80017a6:	d11e      	bne.n	80017e6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80017a8:	4b34      	ldr	r3, [pc, #208]	@ (800187c <HAL_RCC_GetSysClockFreq+0x108>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f003 0308 	and.w	r3, r3, #8
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d107      	bne.n	80017c4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80017b4:	4b31      	ldr	r3, [pc, #196]	@ (800187c <HAL_RCC_GetSysClockFreq+0x108>)
 80017b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80017ba:	0a1b      	lsrs	r3, r3, #8
 80017bc:	f003 030f 	and.w	r3, r3, #15
 80017c0:	61fb      	str	r3, [r7, #28]
 80017c2:	e005      	b.n	80017d0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80017c4:	4b2d      	ldr	r3, [pc, #180]	@ (800187c <HAL_RCC_GetSysClockFreq+0x108>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	091b      	lsrs	r3, r3, #4
 80017ca:	f003 030f 	and.w	r3, r3, #15
 80017ce:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80017d0:	4a2b      	ldr	r2, [pc, #172]	@ (8001880 <HAL_RCC_GetSysClockFreq+0x10c>)
 80017d2:	69fb      	ldr	r3, [r7, #28]
 80017d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017d8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80017da:	693b      	ldr	r3, [r7, #16]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d10d      	bne.n	80017fc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80017e0:	69fb      	ldr	r3, [r7, #28]
 80017e2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80017e4:	e00a      	b.n	80017fc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80017e6:	693b      	ldr	r3, [r7, #16]
 80017e8:	2b04      	cmp	r3, #4
 80017ea:	d102      	bne.n	80017f2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80017ec:	4b25      	ldr	r3, [pc, #148]	@ (8001884 <HAL_RCC_GetSysClockFreq+0x110>)
 80017ee:	61bb      	str	r3, [r7, #24]
 80017f0:	e004      	b.n	80017fc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80017f2:	693b      	ldr	r3, [r7, #16]
 80017f4:	2b08      	cmp	r3, #8
 80017f6:	d101      	bne.n	80017fc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80017f8:	4b23      	ldr	r3, [pc, #140]	@ (8001888 <HAL_RCC_GetSysClockFreq+0x114>)
 80017fa:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80017fc:	693b      	ldr	r3, [r7, #16]
 80017fe:	2b0c      	cmp	r3, #12
 8001800:	d134      	bne.n	800186c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001802:	4b1e      	ldr	r3, [pc, #120]	@ (800187c <HAL_RCC_GetSysClockFreq+0x108>)
 8001804:	68db      	ldr	r3, [r3, #12]
 8001806:	f003 0303 	and.w	r3, r3, #3
 800180a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800180c:	68bb      	ldr	r3, [r7, #8]
 800180e:	2b02      	cmp	r3, #2
 8001810:	d003      	beq.n	800181a <HAL_RCC_GetSysClockFreq+0xa6>
 8001812:	68bb      	ldr	r3, [r7, #8]
 8001814:	2b03      	cmp	r3, #3
 8001816:	d003      	beq.n	8001820 <HAL_RCC_GetSysClockFreq+0xac>
 8001818:	e005      	b.n	8001826 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800181a:	4b1a      	ldr	r3, [pc, #104]	@ (8001884 <HAL_RCC_GetSysClockFreq+0x110>)
 800181c:	617b      	str	r3, [r7, #20]
      break;
 800181e:	e005      	b.n	800182c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001820:	4b19      	ldr	r3, [pc, #100]	@ (8001888 <HAL_RCC_GetSysClockFreq+0x114>)
 8001822:	617b      	str	r3, [r7, #20]
      break;
 8001824:	e002      	b.n	800182c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001826:	69fb      	ldr	r3, [r7, #28]
 8001828:	617b      	str	r3, [r7, #20]
      break;
 800182a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800182c:	4b13      	ldr	r3, [pc, #76]	@ (800187c <HAL_RCC_GetSysClockFreq+0x108>)
 800182e:	68db      	ldr	r3, [r3, #12]
 8001830:	091b      	lsrs	r3, r3, #4
 8001832:	f003 0307 	and.w	r3, r3, #7
 8001836:	3301      	adds	r3, #1
 8001838:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800183a:	4b10      	ldr	r3, [pc, #64]	@ (800187c <HAL_RCC_GetSysClockFreq+0x108>)
 800183c:	68db      	ldr	r3, [r3, #12]
 800183e:	0a1b      	lsrs	r3, r3, #8
 8001840:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001844:	697a      	ldr	r2, [r7, #20]
 8001846:	fb03 f202 	mul.w	r2, r3, r2
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001850:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001852:	4b0a      	ldr	r3, [pc, #40]	@ (800187c <HAL_RCC_GetSysClockFreq+0x108>)
 8001854:	68db      	ldr	r3, [r3, #12]
 8001856:	0e5b      	lsrs	r3, r3, #25
 8001858:	f003 0303 	and.w	r3, r3, #3
 800185c:	3301      	adds	r3, #1
 800185e:	005b      	lsls	r3, r3, #1
 8001860:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001862:	697a      	ldr	r2, [r7, #20]
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	fbb2 f3f3 	udiv	r3, r2, r3
 800186a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800186c:	69bb      	ldr	r3, [r7, #24]
}
 800186e:	4618      	mov	r0, r3
 8001870:	3724      	adds	r7, #36	@ 0x24
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr
 800187a:	bf00      	nop
 800187c:	40021000 	.word	0x40021000
 8001880:	080021f4 	.word	0x080021f4
 8001884:	00f42400 	.word	0x00f42400
 8001888:	007a1200 	.word	0x007a1200

0800188c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001890:	4b03      	ldr	r3, [pc, #12]	@ (80018a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001892:	681b      	ldr	r3, [r3, #0]
}
 8001894:	4618      	mov	r0, r3
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr
 800189e:	bf00      	nop
 80018a0:	20000000 	.word	0x20000000

080018a4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b086      	sub	sp, #24
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80018ac:	2300      	movs	r3, #0
 80018ae:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80018b0:	4b2a      	ldr	r3, [pc, #168]	@ (800195c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80018b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d003      	beq.n	80018c4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80018bc:	f7ff f9e6 	bl	8000c8c <HAL_PWREx_GetVoltageRange>
 80018c0:	6178      	str	r0, [r7, #20]
 80018c2:	e014      	b.n	80018ee <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80018c4:	4b25      	ldr	r3, [pc, #148]	@ (800195c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80018c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018c8:	4a24      	ldr	r2, [pc, #144]	@ (800195c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80018ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018ce:	6593      	str	r3, [r2, #88]	@ 0x58
 80018d0:	4b22      	ldr	r3, [pc, #136]	@ (800195c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80018d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018d8:	60fb      	str	r3, [r7, #12]
 80018da:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80018dc:	f7ff f9d6 	bl	8000c8c <HAL_PWREx_GetVoltageRange>
 80018e0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80018e2:	4b1e      	ldr	r3, [pc, #120]	@ (800195c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80018e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018e6:	4a1d      	ldr	r2, [pc, #116]	@ (800195c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80018e8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80018ec:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80018f4:	d10b      	bne.n	800190e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2b80      	cmp	r3, #128	@ 0x80
 80018fa:	d919      	bls.n	8001930 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2ba0      	cmp	r3, #160	@ 0xa0
 8001900:	d902      	bls.n	8001908 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001902:	2302      	movs	r3, #2
 8001904:	613b      	str	r3, [r7, #16]
 8001906:	e013      	b.n	8001930 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001908:	2301      	movs	r3, #1
 800190a:	613b      	str	r3, [r7, #16]
 800190c:	e010      	b.n	8001930 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2b80      	cmp	r3, #128	@ 0x80
 8001912:	d902      	bls.n	800191a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001914:	2303      	movs	r3, #3
 8001916:	613b      	str	r3, [r7, #16]
 8001918:	e00a      	b.n	8001930 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2b80      	cmp	r3, #128	@ 0x80
 800191e:	d102      	bne.n	8001926 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001920:	2302      	movs	r3, #2
 8001922:	613b      	str	r3, [r7, #16]
 8001924:	e004      	b.n	8001930 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2b70      	cmp	r3, #112	@ 0x70
 800192a:	d101      	bne.n	8001930 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800192c:	2301      	movs	r3, #1
 800192e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001930:	4b0b      	ldr	r3, [pc, #44]	@ (8001960 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f023 0207 	bic.w	r2, r3, #7
 8001938:	4909      	ldr	r1, [pc, #36]	@ (8001960 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800193a:	693b      	ldr	r3, [r7, #16]
 800193c:	4313      	orrs	r3, r2
 800193e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001940:	4b07      	ldr	r3, [pc, #28]	@ (8001960 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f003 0307 	and.w	r3, r3, #7
 8001948:	693a      	ldr	r2, [r7, #16]
 800194a:	429a      	cmp	r2, r3
 800194c:	d001      	beq.n	8001952 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800194e:	2301      	movs	r3, #1
 8001950:	e000      	b.n	8001954 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001952:	2300      	movs	r3, #0
}
 8001954:	4618      	mov	r0, r3
 8001956:	3718      	adds	r7, #24
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}
 800195c:	40021000 	.word	0x40021000
 8001960:	40022000 	.word	0x40022000

08001964 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d101      	bne.n	8001976 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001972:	2301      	movs	r3, #1
 8001974:	e049      	b.n	8001a0a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800197c:	b2db      	uxtb	r3, r3
 800197e:	2b00      	cmp	r3, #0
 8001980:	d106      	bne.n	8001990 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2200      	movs	r2, #0
 8001986:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800198a:	6878      	ldr	r0, [r7, #4]
 800198c:	f7fe fc60 	bl	8000250 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2202      	movs	r2, #2
 8001994:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681a      	ldr	r2, [r3, #0]
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	3304      	adds	r3, #4
 80019a0:	4619      	mov	r1, r3
 80019a2:	4610      	mov	r0, r2
 80019a4:	f000 fa18 	bl	8001dd8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2201      	movs	r2, #1
 80019ac:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2201      	movs	r2, #1
 80019b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2201      	movs	r2, #1
 80019bc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2201      	movs	r2, #1
 80019c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2201      	movs	r2, #1
 80019cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2201      	movs	r2, #1
 80019d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2201      	movs	r2, #1
 80019dc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2201      	movs	r2, #1
 80019e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2201      	movs	r2, #1
 80019ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2201      	movs	r2, #1
 80019f4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2201      	movs	r2, #1
 80019fc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2201      	movs	r2, #1
 8001a04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001a08:	2300      	movs	r3, #0
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	3708      	adds	r7, #8
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
	...

08001a14 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b085      	sub	sp, #20
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001a22:	b2db      	uxtb	r3, r3
 8001a24:	2b01      	cmp	r3, #1
 8001a26:	d001      	beq.n	8001a2c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	e04f      	b.n	8001acc <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2202      	movs	r2, #2
 8001a30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	68da      	ldr	r2, [r3, #12]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f042 0201 	orr.w	r2, r2, #1
 8001a42:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a23      	ldr	r2, [pc, #140]	@ (8001ad8 <HAL_TIM_Base_Start_IT+0xc4>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d01d      	beq.n	8001a8a <HAL_TIM_Base_Start_IT+0x76>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001a56:	d018      	beq.n	8001a8a <HAL_TIM_Base_Start_IT+0x76>
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a1f      	ldr	r2, [pc, #124]	@ (8001adc <HAL_TIM_Base_Start_IT+0xc8>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d013      	beq.n	8001a8a <HAL_TIM_Base_Start_IT+0x76>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a1e      	ldr	r2, [pc, #120]	@ (8001ae0 <HAL_TIM_Base_Start_IT+0xcc>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d00e      	beq.n	8001a8a <HAL_TIM_Base_Start_IT+0x76>
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a1c      	ldr	r2, [pc, #112]	@ (8001ae4 <HAL_TIM_Base_Start_IT+0xd0>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d009      	beq.n	8001a8a <HAL_TIM_Base_Start_IT+0x76>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a1b      	ldr	r2, [pc, #108]	@ (8001ae8 <HAL_TIM_Base_Start_IT+0xd4>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d004      	beq.n	8001a8a <HAL_TIM_Base_Start_IT+0x76>
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a19      	ldr	r2, [pc, #100]	@ (8001aec <HAL_TIM_Base_Start_IT+0xd8>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d115      	bne.n	8001ab6 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	689a      	ldr	r2, [r3, #8]
 8001a90:	4b17      	ldr	r3, [pc, #92]	@ (8001af0 <HAL_TIM_Base_Start_IT+0xdc>)
 8001a92:	4013      	ands	r3, r2
 8001a94:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	2b06      	cmp	r3, #6
 8001a9a:	d015      	beq.n	8001ac8 <HAL_TIM_Base_Start_IT+0xb4>
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001aa2:	d011      	beq.n	8001ac8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f042 0201 	orr.w	r2, r2, #1
 8001ab2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ab4:	e008      	b.n	8001ac8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f042 0201 	orr.w	r2, r2, #1
 8001ac4:	601a      	str	r2, [r3, #0]
 8001ac6:	e000      	b.n	8001aca <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ac8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8001aca:	2300      	movs	r3, #0
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	3714      	adds	r7, #20
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr
 8001ad8:	40012c00 	.word	0x40012c00
 8001adc:	40000400 	.word	0x40000400
 8001ae0:	40000800 	.word	0x40000800
 8001ae4:	40000c00 	.word	0x40000c00
 8001ae8:	40013400 	.word	0x40013400
 8001aec:	40014000 	.word	0x40014000
 8001af0:	00010007 	.word	0x00010007

08001af4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b084      	sub	sp, #16
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	68db      	ldr	r3, [r3, #12]
 8001b02:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	691b      	ldr	r3, [r3, #16]
 8001b0a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	f003 0302 	and.w	r3, r3, #2
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d020      	beq.n	8001b58 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	f003 0302 	and.w	r3, r3, #2
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d01b      	beq.n	8001b58 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f06f 0202 	mvn.w	r2, #2
 8001b28:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	699b      	ldr	r3, [r3, #24]
 8001b36:	f003 0303 	and.w	r3, r3, #3
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d003      	beq.n	8001b46 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001b3e:	6878      	ldr	r0, [r7, #4]
 8001b40:	f000 f92b 	bl	8001d9a <HAL_TIM_IC_CaptureCallback>
 8001b44:	e005      	b.n	8001b52 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	f000 f91d 	bl	8001d86 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b4c:	6878      	ldr	r0, [r7, #4]
 8001b4e:	f000 f92e 	bl	8001dae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2200      	movs	r2, #0
 8001b56:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001b58:	68bb      	ldr	r3, [r7, #8]
 8001b5a:	f003 0304 	and.w	r3, r3, #4
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d020      	beq.n	8001ba4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	f003 0304 	and.w	r3, r3, #4
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d01b      	beq.n	8001ba4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f06f 0204 	mvn.w	r2, #4
 8001b74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2202      	movs	r2, #2
 8001b7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	699b      	ldr	r3, [r3, #24]
 8001b82:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d003      	beq.n	8001b92 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b8a:	6878      	ldr	r0, [r7, #4]
 8001b8c:	f000 f905 	bl	8001d9a <HAL_TIM_IC_CaptureCallback>
 8001b90:	e005      	b.n	8001b9e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b92:	6878      	ldr	r0, [r7, #4]
 8001b94:	f000 f8f7 	bl	8001d86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b98:	6878      	ldr	r0, [r7, #4]
 8001b9a:	f000 f908 	bl	8001dae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001ba4:	68bb      	ldr	r3, [r7, #8]
 8001ba6:	f003 0308 	and.w	r3, r3, #8
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d020      	beq.n	8001bf0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	f003 0308 	and.w	r3, r3, #8
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d01b      	beq.n	8001bf0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f06f 0208 	mvn.w	r2, #8
 8001bc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2204      	movs	r2, #4
 8001bc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	69db      	ldr	r3, [r3, #28]
 8001bce:	f003 0303 	and.w	r3, r3, #3
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d003      	beq.n	8001bde <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001bd6:	6878      	ldr	r0, [r7, #4]
 8001bd8:	f000 f8df 	bl	8001d9a <HAL_TIM_IC_CaptureCallback>
 8001bdc:	e005      	b.n	8001bea <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bde:	6878      	ldr	r0, [r7, #4]
 8001be0:	f000 f8d1 	bl	8001d86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001be4:	6878      	ldr	r0, [r7, #4]
 8001be6:	f000 f8e2 	bl	8001dae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2200      	movs	r2, #0
 8001bee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001bf0:	68bb      	ldr	r3, [r7, #8]
 8001bf2:	f003 0310 	and.w	r3, r3, #16
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d020      	beq.n	8001c3c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	f003 0310 	and.w	r3, r3, #16
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d01b      	beq.n	8001c3c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f06f 0210 	mvn.w	r2, #16
 8001c0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2208      	movs	r2, #8
 8001c12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	69db      	ldr	r3, [r3, #28]
 8001c1a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d003      	beq.n	8001c2a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c22:	6878      	ldr	r0, [r7, #4]
 8001c24:	f000 f8b9 	bl	8001d9a <HAL_TIM_IC_CaptureCallback>
 8001c28:	e005      	b.n	8001c36 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c2a:	6878      	ldr	r0, [r7, #4]
 8001c2c:	f000 f8ab 	bl	8001d86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c30:	6878      	ldr	r0, [r7, #4]
 8001c32:	f000 f8bc 	bl	8001dae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2200      	movs	r2, #0
 8001c3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001c3c:	68bb      	ldr	r3, [r7, #8]
 8001c3e:	f003 0301 	and.w	r3, r3, #1
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d00c      	beq.n	8001c60 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	f003 0301 	and.w	r3, r3, #1
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d007      	beq.n	8001c60 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f06f 0201 	mvn.w	r2, #1
 8001c58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001c5a:	6878      	ldr	r0, [r7, #4]
 8001c5c:	f7fe fb4c 	bl	80002f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d104      	bne.n	8001c74 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8001c6a:	68bb      	ldr	r3, [r7, #8]
 8001c6c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d00c      	beq.n	8001c8e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d007      	beq.n	8001c8e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8001c86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001c88:	6878      	ldr	r0, [r7, #4]
 8001c8a:	f000 fa67 	bl	800215c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8001c8e:	68bb      	ldr	r3, [r7, #8]
 8001c90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d00c      	beq.n	8001cb2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d007      	beq.n	8001cb2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8001caa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8001cac:	6878      	ldr	r0, [r7, #4]
 8001cae:	f000 fa5f 	bl	8002170 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001cb2:	68bb      	ldr	r3, [r7, #8]
 8001cb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d00c      	beq.n	8001cd6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d007      	beq.n	8001cd6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001cce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001cd0:	6878      	ldr	r0, [r7, #4]
 8001cd2:	f000 f876 	bl	8001dc2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001cd6:	68bb      	ldr	r3, [r7, #8]
 8001cd8:	f003 0320 	and.w	r3, r3, #32
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d00c      	beq.n	8001cfa <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	f003 0320 	and.w	r3, r3, #32
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d007      	beq.n	8001cfa <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f06f 0220 	mvn.w	r2, #32
 8001cf2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001cf4:	6878      	ldr	r0, [r7, #4]
 8001cf6:	f000 fa27 	bl	8002148 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001cfa:	bf00      	nop
 8001cfc:	3710      	adds	r7, #16
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}

08001d02 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8001d02:	b580      	push	{r7, lr}
 8001d04:	b082      	sub	sp, #8
 8001d06:	af00      	add	r7, sp, #0
 8001d08:	6078      	str	r0, [r7, #4]
 8001d0a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001d12:	2b01      	cmp	r3, #1
 8001d14:	d101      	bne.n	8001d1a <HAL_TIM_SlaveConfigSynchro+0x18>
 8001d16:	2302      	movs	r3, #2
 8001d18:	e031      	b.n	8001d7e <HAL_TIM_SlaveConfigSynchro+0x7c>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2202      	movs	r2, #2
 8001d26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8001d2a:	6839      	ldr	r1, [r7, #0]
 8001d2c:	6878      	ldr	r0, [r7, #4]
 8001d2e:	f000 f8f9 	bl	8001f24 <TIM_SlaveTimer_SetConfig>
 8001d32:	4603      	mov	r3, r0
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d009      	beq.n	8001d4c <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2200      	movs	r2, #0
 8001d44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	e018      	b.n	8001d7e <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	68da      	ldr	r2, [r3, #12]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001d5a:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	68da      	ldr	r2, [r3, #12]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001d6a:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2201      	movs	r2, #1
 8001d70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2200      	movs	r2, #0
 8001d78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8001d7c:	2300      	movs	r3, #0
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3708      	adds	r7, #8
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}

08001d86 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d86:	b480      	push	{r7}
 8001d88:	b083      	sub	sp, #12
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001d8e:	bf00      	nop
 8001d90:	370c      	adds	r7, #12
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr

08001d9a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001d9a:	b480      	push	{r7}
 8001d9c:	b083      	sub	sp, #12
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001da2:	bf00      	nop
 8001da4:	370c      	adds	r7, #12
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr

08001dae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001dae:	b480      	push	{r7}
 8001db0:	b083      	sub	sp, #12
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001db6:	bf00      	nop
 8001db8:	370c      	adds	r7, #12
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr

08001dc2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001dc2:	b480      	push	{r7}
 8001dc4:	b083      	sub	sp, #12
 8001dc6:	af00      	add	r7, sp, #0
 8001dc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001dca:	bf00      	nop
 8001dcc:	370c      	adds	r7, #12
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr
	...

08001dd8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b085      	sub	sp, #20
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
 8001de0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	4a46      	ldr	r2, [pc, #280]	@ (8001f04 <TIM_Base_SetConfig+0x12c>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d013      	beq.n	8001e18 <TIM_Base_SetConfig+0x40>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001df6:	d00f      	beq.n	8001e18 <TIM_Base_SetConfig+0x40>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	4a43      	ldr	r2, [pc, #268]	@ (8001f08 <TIM_Base_SetConfig+0x130>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d00b      	beq.n	8001e18 <TIM_Base_SetConfig+0x40>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	4a42      	ldr	r2, [pc, #264]	@ (8001f0c <TIM_Base_SetConfig+0x134>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d007      	beq.n	8001e18 <TIM_Base_SetConfig+0x40>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	4a41      	ldr	r2, [pc, #260]	@ (8001f10 <TIM_Base_SetConfig+0x138>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d003      	beq.n	8001e18 <TIM_Base_SetConfig+0x40>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	4a40      	ldr	r2, [pc, #256]	@ (8001f14 <TIM_Base_SetConfig+0x13c>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d108      	bne.n	8001e2a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001e1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	68fa      	ldr	r2, [r7, #12]
 8001e26:	4313      	orrs	r3, r2
 8001e28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	4a35      	ldr	r2, [pc, #212]	@ (8001f04 <TIM_Base_SetConfig+0x12c>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d01f      	beq.n	8001e72 <TIM_Base_SetConfig+0x9a>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e38:	d01b      	beq.n	8001e72 <TIM_Base_SetConfig+0x9a>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	4a32      	ldr	r2, [pc, #200]	@ (8001f08 <TIM_Base_SetConfig+0x130>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d017      	beq.n	8001e72 <TIM_Base_SetConfig+0x9a>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	4a31      	ldr	r2, [pc, #196]	@ (8001f0c <TIM_Base_SetConfig+0x134>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d013      	beq.n	8001e72 <TIM_Base_SetConfig+0x9a>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	4a30      	ldr	r2, [pc, #192]	@ (8001f10 <TIM_Base_SetConfig+0x138>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d00f      	beq.n	8001e72 <TIM_Base_SetConfig+0x9a>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	4a2f      	ldr	r2, [pc, #188]	@ (8001f14 <TIM_Base_SetConfig+0x13c>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d00b      	beq.n	8001e72 <TIM_Base_SetConfig+0x9a>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	4a2e      	ldr	r2, [pc, #184]	@ (8001f18 <TIM_Base_SetConfig+0x140>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d007      	beq.n	8001e72 <TIM_Base_SetConfig+0x9a>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4a2d      	ldr	r2, [pc, #180]	@ (8001f1c <TIM_Base_SetConfig+0x144>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d003      	beq.n	8001e72 <TIM_Base_SetConfig+0x9a>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	4a2c      	ldr	r2, [pc, #176]	@ (8001f20 <TIM_Base_SetConfig+0x148>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d108      	bne.n	8001e84 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001e78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	68db      	ldr	r3, [r3, #12]
 8001e7e:	68fa      	ldr	r2, [r7, #12]
 8001e80:	4313      	orrs	r3, r2
 8001e82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	695b      	ldr	r3, [r3, #20]
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	68fa      	ldr	r2, [r7, #12]
 8001e96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	689a      	ldr	r2, [r3, #8]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	681a      	ldr	r2, [r3, #0]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	4a16      	ldr	r2, [pc, #88]	@ (8001f04 <TIM_Base_SetConfig+0x12c>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d00f      	beq.n	8001ed0 <TIM_Base_SetConfig+0xf8>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	4a18      	ldr	r2, [pc, #96]	@ (8001f14 <TIM_Base_SetConfig+0x13c>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d00b      	beq.n	8001ed0 <TIM_Base_SetConfig+0xf8>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	4a17      	ldr	r2, [pc, #92]	@ (8001f18 <TIM_Base_SetConfig+0x140>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d007      	beq.n	8001ed0 <TIM_Base_SetConfig+0xf8>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	4a16      	ldr	r2, [pc, #88]	@ (8001f1c <TIM_Base_SetConfig+0x144>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d003      	beq.n	8001ed0 <TIM_Base_SetConfig+0xf8>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	4a15      	ldr	r2, [pc, #84]	@ (8001f20 <TIM_Base_SetConfig+0x148>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d103      	bne.n	8001ed8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	691a      	ldr	r2, [r3, #16]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2201      	movs	r2, #1
 8001edc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	691b      	ldr	r3, [r3, #16]
 8001ee2:	f003 0301 	and.w	r3, r3, #1
 8001ee6:	2b01      	cmp	r3, #1
 8001ee8:	d105      	bne.n	8001ef6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	691b      	ldr	r3, [r3, #16]
 8001eee:	f023 0201 	bic.w	r2, r3, #1
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	611a      	str	r2, [r3, #16]
  }
}
 8001ef6:	bf00      	nop
 8001ef8:	3714      	adds	r7, #20
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr
 8001f02:	bf00      	nop
 8001f04:	40012c00 	.word	0x40012c00
 8001f08:	40000400 	.word	0x40000400
 8001f0c:	40000800 	.word	0x40000800
 8001f10:	40000c00 	.word	0x40000c00
 8001f14:	40013400 	.word	0x40013400
 8001f18:	40014000 	.word	0x40014000
 8001f1c:	40014400 	.word	0x40014400
 8001f20:	40014800 	.word	0x40014800

08001f24 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b086      	sub	sp, #24
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
 8001f2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	689b      	ldr	r3, [r3, #8]
 8001f38:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001f40:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	693a      	ldr	r2, [r7, #16]
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f52:	f023 0307 	bic.w	r3, r3, #7
 8001f56:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	693a      	ldr	r2, [r7, #16]
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	693a      	ldr	r2, [r7, #16]
 8001f68:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	2b70      	cmp	r3, #112	@ 0x70
 8001f70:	d01a      	beq.n	8001fa8 <TIM_SlaveTimer_SetConfig+0x84>
 8001f72:	2b70      	cmp	r3, #112	@ 0x70
 8001f74:	d860      	bhi.n	8002038 <TIM_SlaveTimer_SetConfig+0x114>
 8001f76:	2b60      	cmp	r3, #96	@ 0x60
 8001f78:	d054      	beq.n	8002024 <TIM_SlaveTimer_SetConfig+0x100>
 8001f7a:	2b60      	cmp	r3, #96	@ 0x60
 8001f7c:	d85c      	bhi.n	8002038 <TIM_SlaveTimer_SetConfig+0x114>
 8001f7e:	2b50      	cmp	r3, #80	@ 0x50
 8001f80:	d046      	beq.n	8002010 <TIM_SlaveTimer_SetConfig+0xec>
 8001f82:	2b50      	cmp	r3, #80	@ 0x50
 8001f84:	d858      	bhi.n	8002038 <TIM_SlaveTimer_SetConfig+0x114>
 8001f86:	2b40      	cmp	r3, #64	@ 0x40
 8001f88:	d019      	beq.n	8001fbe <TIM_SlaveTimer_SetConfig+0x9a>
 8001f8a:	2b40      	cmp	r3, #64	@ 0x40
 8001f8c:	d854      	bhi.n	8002038 <TIM_SlaveTimer_SetConfig+0x114>
 8001f8e:	2b30      	cmp	r3, #48	@ 0x30
 8001f90:	d055      	beq.n	800203e <TIM_SlaveTimer_SetConfig+0x11a>
 8001f92:	2b30      	cmp	r3, #48	@ 0x30
 8001f94:	d850      	bhi.n	8002038 <TIM_SlaveTimer_SetConfig+0x114>
 8001f96:	2b20      	cmp	r3, #32
 8001f98:	d051      	beq.n	800203e <TIM_SlaveTimer_SetConfig+0x11a>
 8001f9a:	2b20      	cmp	r3, #32
 8001f9c:	d84c      	bhi.n	8002038 <TIM_SlaveTimer_SetConfig+0x114>
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d04d      	beq.n	800203e <TIM_SlaveTimer_SetConfig+0x11a>
 8001fa2:	2b10      	cmp	r3, #16
 8001fa4:	d04b      	beq.n	800203e <TIM_SlaveTimer_SetConfig+0x11a>
 8001fa6:	e047      	b.n	8002038 <TIM_SlaveTimer_SetConfig+0x114>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8001fb8:	f000 f8a6 	bl	8002108 <TIM_ETR_SetConfig>
      break;
 8001fbc:	e040      	b.n	8002040 <TIM_SlaveTimer_SetConfig+0x11c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	2b05      	cmp	r3, #5
 8001fc4:	d101      	bne.n	8001fca <TIM_SlaveTimer_SetConfig+0xa6>
      {
        return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e03b      	b.n	8002042 <TIM_SlaveTimer_SetConfig+0x11e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	6a1b      	ldr	r3, [r3, #32]
 8001fd0:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	6a1a      	ldr	r2, [r3, #32]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f022 0201 	bic.w	r2, r2, #1
 8001fe0:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	699b      	ldr	r3, [r3, #24]
 8001fe8:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001fea:	68bb      	ldr	r3, [r7, #8]
 8001fec:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001ff0:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	691b      	ldr	r3, [r3, #16]
 8001ff6:	011b      	lsls	r3, r3, #4
 8001ff8:	68ba      	ldr	r2, [r7, #8]
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	68ba      	ldr	r2, [r7, #8]
 8002004:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	68fa      	ldr	r2, [r7, #12]
 800200c:	621a      	str	r2, [r3, #32]
      break;
 800200e:	e017      	b.n	8002040 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800201c:	461a      	mov	r2, r3
 800201e:	f000 f814 	bl	800204a <TIM_TI1_ConfigInputStage>
      break;
 8002022:	e00d      	b.n	8002040 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002030:	461a      	mov	r2, r3
 8002032:	f000 f839 	bl	80020a8 <TIM_TI2_ConfigInputStage>
      break;
 8002036:	e003      	b.n	8002040 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8002038:	2301      	movs	r3, #1
 800203a:	75fb      	strb	r3, [r7, #23]
      break;
 800203c:	e000      	b.n	8002040 <TIM_SlaveTimer_SetConfig+0x11c>
      break;
 800203e:	bf00      	nop
  }

  return status;
 8002040:	7dfb      	ldrb	r3, [r7, #23]
}
 8002042:	4618      	mov	r0, r3
 8002044:	3718      	adds	r7, #24
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}

0800204a <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800204a:	b480      	push	{r7}
 800204c:	b087      	sub	sp, #28
 800204e:	af00      	add	r7, sp, #0
 8002050:	60f8      	str	r0, [r7, #12]
 8002052:	60b9      	str	r1, [r7, #8]
 8002054:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	6a1b      	ldr	r3, [r3, #32]
 800205a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	6a1b      	ldr	r3, [r3, #32]
 8002060:	f023 0201 	bic.w	r2, r3, #1
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	699b      	ldr	r3, [r3, #24]
 800206c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002074:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	011b      	lsls	r3, r3, #4
 800207a:	693a      	ldr	r2, [r7, #16]
 800207c:	4313      	orrs	r3, r2
 800207e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	f023 030a 	bic.w	r3, r3, #10
 8002086:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002088:	697a      	ldr	r2, [r7, #20]
 800208a:	68bb      	ldr	r3, [r7, #8]
 800208c:	4313      	orrs	r3, r2
 800208e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	693a      	ldr	r2, [r7, #16]
 8002094:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	697a      	ldr	r2, [r7, #20]
 800209a:	621a      	str	r2, [r3, #32]
}
 800209c:	bf00      	nop
 800209e:	371c      	adds	r7, #28
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr

080020a8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b087      	sub	sp, #28
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	60f8      	str	r0, [r7, #12]
 80020b0:	60b9      	str	r1, [r7, #8]
 80020b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	6a1b      	ldr	r3, [r3, #32]
 80020b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	6a1b      	ldr	r3, [r3, #32]
 80020be:	f023 0210 	bic.w	r2, r3, #16
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	699b      	ldr	r3, [r3, #24]
 80020ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80020d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	031b      	lsls	r3, r3, #12
 80020d8:	693a      	ldr	r2, [r7, #16]
 80020da:	4313      	orrs	r3, r2
 80020dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80020e4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80020e6:	68bb      	ldr	r3, [r7, #8]
 80020e8:	011b      	lsls	r3, r3, #4
 80020ea:	697a      	ldr	r2, [r7, #20]
 80020ec:	4313      	orrs	r3, r2
 80020ee:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	693a      	ldr	r2, [r7, #16]
 80020f4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	697a      	ldr	r2, [r7, #20]
 80020fa:	621a      	str	r2, [r3, #32]
}
 80020fc:	bf00      	nop
 80020fe:	371c      	adds	r7, #28
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr

08002108 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002108:	b480      	push	{r7}
 800210a:	b087      	sub	sp, #28
 800210c:	af00      	add	r7, sp, #0
 800210e:	60f8      	str	r0, [r7, #12]
 8002110:	60b9      	str	r1, [r7, #8]
 8002112:	607a      	str	r2, [r7, #4]
 8002114:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002122:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	021a      	lsls	r2, r3, #8
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	431a      	orrs	r2, r3
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	4313      	orrs	r3, r2
 8002130:	697a      	ldr	r2, [r7, #20]
 8002132:	4313      	orrs	r3, r2
 8002134:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	697a      	ldr	r2, [r7, #20]
 800213a:	609a      	str	r2, [r3, #8]
}
 800213c:	bf00      	nop
 800213e:	371c      	adds	r7, #28
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr

08002148 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002148:	b480      	push	{r7}
 800214a:	b083      	sub	sp, #12
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002150:	bf00      	nop
 8002152:	370c      	adds	r7, #12
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr

0800215c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800215c:	b480      	push	{r7}
 800215e:	b083      	sub	sp, #12
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002164:	bf00      	nop
 8002166:	370c      	adds	r7, #12
 8002168:	46bd      	mov	sp, r7
 800216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216e:	4770      	bx	lr

08002170 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002170:	b480      	push	{r7}
 8002172:	b083      	sub	sp, #12
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002178:	bf00      	nop
 800217a:	370c      	adds	r7, #12
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr

08002184 <__libc_init_array>:
 8002184:	b570      	push	{r4, r5, r6, lr}
 8002186:	4d0d      	ldr	r5, [pc, #52]	@ (80021bc <__libc_init_array+0x38>)
 8002188:	4c0d      	ldr	r4, [pc, #52]	@ (80021c0 <__libc_init_array+0x3c>)
 800218a:	1b64      	subs	r4, r4, r5
 800218c:	10a4      	asrs	r4, r4, #2
 800218e:	2600      	movs	r6, #0
 8002190:	42a6      	cmp	r6, r4
 8002192:	d109      	bne.n	80021a8 <__libc_init_array+0x24>
 8002194:	4d0b      	ldr	r5, [pc, #44]	@ (80021c4 <__libc_init_array+0x40>)
 8002196:	4c0c      	ldr	r4, [pc, #48]	@ (80021c8 <__libc_init_array+0x44>)
 8002198:	f000 f818 	bl	80021cc <_init>
 800219c:	1b64      	subs	r4, r4, r5
 800219e:	10a4      	asrs	r4, r4, #2
 80021a0:	2600      	movs	r6, #0
 80021a2:	42a6      	cmp	r6, r4
 80021a4:	d105      	bne.n	80021b2 <__libc_init_array+0x2e>
 80021a6:	bd70      	pop	{r4, r5, r6, pc}
 80021a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80021ac:	4798      	blx	r3
 80021ae:	3601      	adds	r6, #1
 80021b0:	e7ee      	b.n	8002190 <__libc_init_array+0xc>
 80021b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80021b6:	4798      	blx	r3
 80021b8:	3601      	adds	r6, #1
 80021ba:	e7f2      	b.n	80021a2 <__libc_init_array+0x1e>
 80021bc:	08002224 	.word	0x08002224
 80021c0:	08002224 	.word	0x08002224
 80021c4:	08002224 	.word	0x08002224
 80021c8:	08002228 	.word	0x08002228

080021cc <_init>:
 80021cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021ce:	bf00      	nop
 80021d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021d2:	bc08      	pop	{r3}
 80021d4:	469e      	mov	lr, r3
 80021d6:	4770      	bx	lr

080021d8 <_fini>:
 80021d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021da:	bf00      	nop
 80021dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021de:	bc08      	pop	{r3}
 80021e0:	469e      	mov	lr, r3
 80021e2:	4770      	bx	lr
