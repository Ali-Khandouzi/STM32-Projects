
Timer-ex6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009cd4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000490  08009e68  08009e68  0000ae68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a2f8  0800a2f8  0000c1d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800a2f8  0800a2f8  0000b2f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a300  0800a300  0000c1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a300  0800a300  0000b300  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a304  0800a304  0000b304  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800a308  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e8  200001d4  0800a4dc  0000c1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004bc  0800a4dc  0000c4bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001085b  00000000  00000000  0000c204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022d7  00000000  00000000  0001ca5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fc8  00000000  00000000  0001ed38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c49  00000000  00000000  0001fd00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027b71  00000000  00000000  00020949  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000129c3  00000000  00000000  000484ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f4380  00000000  00000000  0005ae7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014f1fd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005710  00000000  00000000  0014f240  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  00154950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009e4c 	.word	0x08009e4c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	08009e4c 	.word	0x08009e4c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a0 	b.w	8000fe0 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	460c      	mov	r4, r1
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d14e      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d30:	4694      	mov	ip, r2
 8000d32:	458c      	cmp	ip, r1
 8000d34:	4686      	mov	lr, r0
 8000d36:	fab2 f282 	clz	r2, r2
 8000d3a:	d962      	bls.n	8000e02 <__udivmoddi4+0xde>
 8000d3c:	b14a      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d3e:	f1c2 0320 	rsb	r3, r2, #32
 8000d42:	4091      	lsls	r1, r2
 8000d44:	fa20 f303 	lsr.w	r3, r0, r3
 8000d48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4c:	4319      	orrs	r1, r3
 8000d4e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d52:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d56:	fa1f f68c 	uxth.w	r6, ip
 8000d5a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d5e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d62:	fb07 1114 	mls	r1, r7, r4, r1
 8000d66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6a:	fb04 f106 	mul.w	r1, r4, r6
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d7a:	f080 8112 	bcs.w	8000fa2 <__udivmoddi4+0x27e>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 810f 	bls.w	8000fa2 <__udivmoddi4+0x27e>
 8000d84:	3c02      	subs	r4, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a59      	subs	r1, r3, r1
 8000d8a:	fa1f f38e 	uxth.w	r3, lr
 8000d8e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d92:	fb07 1110 	mls	r1, r7, r0, r1
 8000d96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9a:	fb00 f606 	mul.w	r6, r0, r6
 8000d9e:	429e      	cmp	r6, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x94>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000daa:	f080 80fc 	bcs.w	8000fa6 <__udivmoddi4+0x282>
 8000dae:	429e      	cmp	r6, r3
 8000db0:	f240 80f9 	bls.w	8000fa6 <__udivmoddi4+0x282>
 8000db4:	4463      	add	r3, ip
 8000db6:	3802      	subs	r0, #2
 8000db8:	1b9b      	subs	r3, r3, r6
 8000dba:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	b11d      	cbz	r5, 8000dca <__udivmoddi4+0xa6>
 8000dc2:	40d3      	lsrs	r3, r2
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d905      	bls.n	8000dde <__udivmoddi4+0xba>
 8000dd2:	b10d      	cbz	r5, 8000dd8 <__udivmoddi4+0xb4>
 8000dd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e7f5      	b.n	8000dca <__udivmoddi4+0xa6>
 8000dde:	fab3 f183 	clz	r1, r3
 8000de2:	2900      	cmp	r1, #0
 8000de4:	d146      	bne.n	8000e74 <__udivmoddi4+0x150>
 8000de6:	42a3      	cmp	r3, r4
 8000de8:	d302      	bcc.n	8000df0 <__udivmoddi4+0xcc>
 8000dea:	4290      	cmp	r0, r2
 8000dec:	f0c0 80f0 	bcc.w	8000fd0 <__udivmoddi4+0x2ac>
 8000df0:	1a86      	subs	r6, r0, r2
 8000df2:	eb64 0303 	sbc.w	r3, r4, r3
 8000df6:	2001      	movs	r0, #1
 8000df8:	2d00      	cmp	r5, #0
 8000dfa:	d0e6      	beq.n	8000dca <__udivmoddi4+0xa6>
 8000dfc:	e9c5 6300 	strd	r6, r3, [r5]
 8000e00:	e7e3      	b.n	8000dca <__udivmoddi4+0xa6>
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	f040 8090 	bne.w	8000f28 <__udivmoddi4+0x204>
 8000e08:	eba1 040c 	sub.w	r4, r1, ip
 8000e0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e10:	fa1f f78c 	uxth.w	r7, ip
 8000e14:	2101      	movs	r1, #1
 8000e16:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e1a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e1e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e26:	fb07 f006 	mul.w	r0, r7, r6
 8000e2a:	4298      	cmp	r0, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x11c>
 8000e2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e32:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x11a>
 8000e38:	4298      	cmp	r0, r3
 8000e3a:	f200 80cd 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e3e:	4626      	mov	r6, r4
 8000e40:	1a1c      	subs	r4, r3, r0
 8000e42:	fa1f f38e 	uxth.w	r3, lr
 8000e46:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e4a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e4e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e52:	fb00 f707 	mul.w	r7, r0, r7
 8000e56:	429f      	cmp	r7, r3
 8000e58:	d908      	bls.n	8000e6c <__udivmoddi4+0x148>
 8000e5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e62:	d202      	bcs.n	8000e6a <__udivmoddi4+0x146>
 8000e64:	429f      	cmp	r7, r3
 8000e66:	f200 80b0 	bhi.w	8000fca <__udivmoddi4+0x2a6>
 8000e6a:	4620      	mov	r0, r4
 8000e6c:	1bdb      	subs	r3, r3, r7
 8000e6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e72:	e7a5      	b.n	8000dc0 <__udivmoddi4+0x9c>
 8000e74:	f1c1 0620 	rsb	r6, r1, #32
 8000e78:	408b      	lsls	r3, r1
 8000e7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7e:	431f      	orrs	r7, r3
 8000e80:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e84:	fa04 f301 	lsl.w	r3, r4, r1
 8000e88:	ea43 030c 	orr.w	r3, r3, ip
 8000e8c:	40f4      	lsrs	r4, r6
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	0c38      	lsrs	r0, r7, #16
 8000e94:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e98:	fbb4 fef0 	udiv	lr, r4, r0
 8000e9c:	fa1f fc87 	uxth.w	ip, r7
 8000ea0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ea4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ea8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eac:	45a1      	cmp	r9, r4
 8000eae:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb2:	d90a      	bls.n	8000eca <__udivmoddi4+0x1a6>
 8000eb4:	193c      	adds	r4, r7, r4
 8000eb6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eba:	f080 8084 	bcs.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ebe:	45a1      	cmp	r9, r4
 8000ec0:	f240 8081 	bls.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ec4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ec8:	443c      	add	r4, r7
 8000eca:	eba4 0409 	sub.w	r4, r4, r9
 8000ece:	fa1f f983 	uxth.w	r9, r3
 8000ed2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ed6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eda:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ede:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ee2:	45a4      	cmp	ip, r4
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x1d2>
 8000ee6:	193c      	adds	r4, r7, r4
 8000ee8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000eec:	d267      	bcs.n	8000fbe <__udivmoddi4+0x29a>
 8000eee:	45a4      	cmp	ip, r4
 8000ef0:	d965      	bls.n	8000fbe <__udivmoddi4+0x29a>
 8000ef2:	3b02      	subs	r3, #2
 8000ef4:	443c      	add	r4, r7
 8000ef6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000efa:	fba0 9302 	umull	r9, r3, r0, r2
 8000efe:	eba4 040c 	sub.w	r4, r4, ip
 8000f02:	429c      	cmp	r4, r3
 8000f04:	46ce      	mov	lr, r9
 8000f06:	469c      	mov	ip, r3
 8000f08:	d351      	bcc.n	8000fae <__udivmoddi4+0x28a>
 8000f0a:	d04e      	beq.n	8000faa <__udivmoddi4+0x286>
 8000f0c:	b155      	cbz	r5, 8000f24 <__udivmoddi4+0x200>
 8000f0e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f12:	eb64 040c 	sbc.w	r4, r4, ip
 8000f16:	fa04 f606 	lsl.w	r6, r4, r6
 8000f1a:	40cb      	lsrs	r3, r1
 8000f1c:	431e      	orrs	r6, r3
 8000f1e:	40cc      	lsrs	r4, r1
 8000f20:	e9c5 6400 	strd	r6, r4, [r5]
 8000f24:	2100      	movs	r1, #0
 8000f26:	e750      	b.n	8000dca <__udivmoddi4+0xa6>
 8000f28:	f1c2 0320 	rsb	r3, r2, #32
 8000f2c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f30:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f34:	fa24 f303 	lsr.w	r3, r4, r3
 8000f38:	4094      	lsls	r4, r2
 8000f3a:	430c      	orrs	r4, r1
 8000f3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f40:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f44:	fa1f f78c 	uxth.w	r7, ip
 8000f48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f4c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f50:	0c23      	lsrs	r3, r4, #16
 8000f52:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f56:	fb00 f107 	mul.w	r1, r0, r7
 8000f5a:	4299      	cmp	r1, r3
 8000f5c:	d908      	bls.n	8000f70 <__udivmoddi4+0x24c>
 8000f5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f62:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f66:	d22c      	bcs.n	8000fc2 <__udivmoddi4+0x29e>
 8000f68:	4299      	cmp	r1, r3
 8000f6a:	d92a      	bls.n	8000fc2 <__udivmoddi4+0x29e>
 8000f6c:	3802      	subs	r0, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	1a5b      	subs	r3, r3, r1
 8000f72:	b2a4      	uxth	r4, r4
 8000f74:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f78:	fb08 3311 	mls	r3, r8, r1, r3
 8000f7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f80:	fb01 f307 	mul.w	r3, r1, r7
 8000f84:	42a3      	cmp	r3, r4
 8000f86:	d908      	bls.n	8000f9a <__udivmoddi4+0x276>
 8000f88:	eb1c 0404 	adds.w	r4, ip, r4
 8000f8c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f90:	d213      	bcs.n	8000fba <__udivmoddi4+0x296>
 8000f92:	42a3      	cmp	r3, r4
 8000f94:	d911      	bls.n	8000fba <__udivmoddi4+0x296>
 8000f96:	3902      	subs	r1, #2
 8000f98:	4464      	add	r4, ip
 8000f9a:	1ae4      	subs	r4, r4, r3
 8000f9c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fa0:	e739      	b.n	8000e16 <__udivmoddi4+0xf2>
 8000fa2:	4604      	mov	r4, r0
 8000fa4:	e6f0      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fa6:	4608      	mov	r0, r1
 8000fa8:	e706      	b.n	8000db8 <__udivmoddi4+0x94>
 8000faa:	45c8      	cmp	r8, r9
 8000fac:	d2ae      	bcs.n	8000f0c <__udivmoddi4+0x1e8>
 8000fae:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fb2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fb6:	3801      	subs	r0, #1
 8000fb8:	e7a8      	b.n	8000f0c <__udivmoddi4+0x1e8>
 8000fba:	4631      	mov	r1, r6
 8000fbc:	e7ed      	b.n	8000f9a <__udivmoddi4+0x276>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	e799      	b.n	8000ef6 <__udivmoddi4+0x1d2>
 8000fc2:	4630      	mov	r0, r6
 8000fc4:	e7d4      	b.n	8000f70 <__udivmoddi4+0x24c>
 8000fc6:	46d6      	mov	lr, sl
 8000fc8:	e77f      	b.n	8000eca <__udivmoddi4+0x1a6>
 8000fca:	4463      	add	r3, ip
 8000fcc:	3802      	subs	r0, #2
 8000fce:	e74d      	b.n	8000e6c <__udivmoddi4+0x148>
 8000fd0:	4606      	mov	r6, r0
 8000fd2:	4623      	mov	r3, r4
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e70f      	b.n	8000df8 <__udivmoddi4+0xd4>
 8000fd8:	3e02      	subs	r6, #2
 8000fda:	4463      	add	r3, ip
 8000fdc:	e730      	b.n	8000e40 <__udivmoddi4+0x11c>
 8000fde:	bf00      	nop

08000fe0 <__aeabi_idiv0>:
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop

08000fe4 <main>:
DMA_HandleTypeDef hdma_tim6_up;

uint32_t captures[2];
volatile uint8_t  captureDone = 0;

int main(void) {
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b08a      	sub	sp, #40	@ 0x28
 8000fe8:	af00      	add	r7, sp, #0
  uint32_t diffCapture = 0;
 8000fea:	2300      	movs	r3, #0
 8000fec:	627b      	str	r3, [r7, #36]	@ 0x24
  char msg[30];

  HAL_Init();
 8000fee:	f000 fc51 	bl	8001894 <HAL_Init>

  Nucleo_BSP_Init();
 8000ff2:	f000 f9c3 	bl	800137c <Nucleo_BSP_Init>
  MX_DMA_Init();
 8000ff6:	f000 f94b 	bl	8001290 <MX_DMA_Init>

  MX_TIM2_Init();
 8000ffa:	f000 f86b 	bl	80010d4 <MX_TIM2_Init>
  MX_TIM6_Init();
 8000ffe:	f000 f907 	bl	8001210 <MX_TIM6_Init>

  HAL_TIM_Base_Start_IT(&htim6);
 8001002:	482d      	ldr	r0, [pc, #180]	@ (80010b8 <main+0xd4>)
 8001004:	f002 fd58 	bl	8003ab8 <HAL_TIM_Base_Start_IT>

  HAL_TIM_IC_Start_DMA(&htim2, TIM_CHANNEL_1, (uint32_t*) captures, 2);
 8001008:	2302      	movs	r3, #2
 800100a:	4a2c      	ldr	r2, [pc, #176]	@ (80010bc <main+0xd8>)
 800100c:	2100      	movs	r1, #0
 800100e:	482c      	ldr	r0, [pc, #176]	@ (80010c0 <main+0xdc>)
 8001010:	f002 fe1a 	bl	8003c48 <HAL_TIM_IC_Start_DMA>

  while (1) {
    if (captureDone != 0) {
 8001014:	4b2b      	ldr	r3, [pc, #172]	@ (80010c4 <main+0xe0>)
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	b2db      	uxtb	r3, r3
 800101a:	2b00      	cmp	r3, #0
 800101c:	d0fa      	beq.n	8001014 <main+0x30>
      if (captures[1] >= captures[0])
 800101e:	4b27      	ldr	r3, [pc, #156]	@ (80010bc <main+0xd8>)
 8001020:	685a      	ldr	r2, [r3, #4]
 8001022:	4b26      	ldr	r3, [pc, #152]	@ (80010bc <main+0xd8>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	429a      	cmp	r2, r3
 8001028:	d306      	bcc.n	8001038 <main+0x54>
        diffCapture = captures[1] - captures[0];
 800102a:	4b24      	ldr	r3, [pc, #144]	@ (80010bc <main+0xd8>)
 800102c:	685a      	ldr	r2, [r3, #4]
 800102e:	4b23      	ldr	r3, [pc, #140]	@ (80010bc <main+0xd8>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	1ad3      	subs	r3, r2, r3
 8001034:	627b      	str	r3, [r7, #36]	@ 0x24
 8001036:	e009      	b.n	800104c <main+0x68>
      else
        diffCapture = (htim2.Instance->ARR - captures[0]) + captures[1];
 8001038:	4b21      	ldr	r3, [pc, #132]	@ (80010c0 <main+0xdc>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800103e:	4b1f      	ldr	r3, [pc, #124]	@ (80010bc <main+0xd8>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	1ad2      	subs	r2, r2, r3
 8001044:	4b1d      	ldr	r3, [pc, #116]	@ (80010bc <main+0xd8>)
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	4413      	add	r3, r2
 800104a:	627b      	str	r3, [r7, #36]	@ 0x24

      frequency = HAL_RCC_GetHCLKFreq() / (htim2.Instance->PSC + 1);
 800104c:	f001 ff88 	bl	8002f60 <HAL_RCC_GetHCLKFreq>
 8001050:	4602      	mov	r2, r0
 8001052:	4b1b      	ldr	r3, [pc, #108]	@ (80010c0 <main+0xdc>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001058:	3301      	adds	r3, #1
 800105a:	fbb2 f3f3 	udiv	r3, r2, r3
 800105e:	ee07 3a90 	vmov	s15, r3
 8001062:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001066:	4b18      	ldr	r3, [pc, #96]	@ (80010c8 <main+0xe4>)
 8001068:	edc3 7a00 	vstr	s15, [r3]
      frequency = (float) frequency / diffCapture;
 800106c:	4b16      	ldr	r3, [pc, #88]	@ (80010c8 <main+0xe4>)
 800106e:	edd3 6a00 	vldr	s13, [r3]
 8001072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001074:	ee07 3a90 	vmov	s15, r3
 8001078:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800107c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001080:	4b11      	ldr	r3, [pc, #68]	@ (80010c8 <main+0xe4>)
 8001082:	edc3 7a00 	vstr	s15, [r3]

      sprintf(msg, "Input frequency: %.3f\r\n", frequency);
 8001086:	4b10      	ldr	r3, [pc, #64]	@ (80010c8 <main+0xe4>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4618      	mov	r0, r3
 800108c:	f7ff fa5c 	bl	8000548 <__aeabi_f2d>
 8001090:	4602      	mov	r2, r0
 8001092:	460b      	mov	r3, r1
 8001094:	1d38      	adds	r0, r7, #4
 8001096:	490d      	ldr	r1, [pc, #52]	@ (80010cc <main+0xe8>)
 8001098:	f005 faa0 	bl	80065dc <siprintf>
      HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 800109c:	1d3b      	adds	r3, r7, #4
 800109e:	4618      	mov	r0, r3
 80010a0:	f7ff f8e6 	bl	8000270 <strlen>
 80010a4:	4603      	mov	r3, r0
 80010a6:	b29a      	uxth	r2, r3
 80010a8:	1d39      	adds	r1, r7, #4
 80010aa:	f04f 33ff 	mov.w	r3, #4294967295
 80010ae:	4808      	ldr	r0, [pc, #32]	@ (80010d0 <main+0xec>)
 80010b0:	f003 fe0b 	bl	8004cca <HAL_UART_Transmit>
      while (1);
 80010b4:	bf00      	nop
 80010b6:	e7fd      	b.n	80010b4 <main+0xd0>
 80010b8:	20000278 	.word	0x20000278
 80010bc:	2000035c 	.word	0x2000035c
 80010c0:	200002c4 	.word	0x200002c4
 80010c4:	20000364 	.word	0x20000364
 80010c8:	20000310 	.word	0x20000310
 80010cc:	08009e68 	.word	0x08009e68
 80010d0:	200001f0 	.word	0x200001f0

080010d4 <MX_TIM2_Init>:
    }
  }
}

/* TIM2 init function */
void MX_TIM2_Init(void) {
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b088      	sub	sp, #32
 80010d8:	af00      	add	r7, sp, #0
  TIM_IC_InitTypeDef sConfigIC;
  TIM_ClockConfigTypeDef sClockSourceConfig;

  htim2.Instance = TIM2;
 80010da:	4b17      	ldr	r3, [pc, #92]	@ (8001138 <MX_TIM2_Init+0x64>)
 80010dc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80010e0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80010e2:	4b15      	ldr	r3, [pc, #84]	@ (8001138 <MX_TIM2_Init+0x64>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010e8:	4b13      	ldr	r3, [pc, #76]	@ (8001138 <MX_TIM2_Init+0x64>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffffffff;
 80010ee:	4b12      	ldr	r3, [pc, #72]	@ (8001138 <MX_TIM2_Init+0x64>)
 80010f0:	f04f 32ff 	mov.w	r2, #4294967295
 80010f4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010f6:	4b10      	ldr	r3, [pc, #64]	@ (8001138 <MX_TIM2_Init+0x64>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	611a      	str	r2, [r3, #16]
  HAL_TIM_IC_Init(&htim2);
 80010fc:	480e      	ldr	r0, [pc, #56]	@ (8001138 <MX_TIM2_Init+0x64>)
 80010fe:	f002 fd4b 	bl	8003b98 <HAL_TIM_IC_Init>

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001102:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001106:	603b      	str	r3, [r7, #0]
  HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig);
 8001108:	463b      	mov	r3, r7
 800110a:	4619      	mov	r1, r3
 800110c:	480a      	ldr	r0, [pc, #40]	@ (8001138 <MX_TIM2_Init+0x64>)
 800110e:	f003 f90a 	bl	8004326 <HAL_TIM_ConfigClockSource>

  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001112:	2300      	movs	r3, #0
 8001114:	613b      	str	r3, [r7, #16]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001116:	2301      	movs	r3, #1
 8001118:	617b      	str	r3, [r7, #20]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800111a:	2300      	movs	r3, #0
 800111c:	61bb      	str	r3, [r7, #24]
  sConfigIC.ICFilter = 0;
 800111e:	2300      	movs	r3, #0
 8001120:	61fb      	str	r3, [r7, #28]
  HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1);
 8001122:	f107 0310 	add.w	r3, r7, #16
 8001126:	2200      	movs	r2, #0
 8001128:	4619      	mov	r1, r3
 800112a:	4803      	ldr	r0, [pc, #12]	@ (8001138 <MX_TIM2_Init+0x64>)
 800112c:	f003 f85f 	bl	80041ee <HAL_TIM_IC_ConfigChannel>
}
 8001130:	bf00      	nop
 8001132:	3720      	adds	r7, #32
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	200002c4 	.word	0x200002c4

0800113c <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic) {
 800113c:	b580      	push	{r7, lr}
 800113e:	b088      	sub	sp, #32
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  if (htim_ic->Instance == TIM2) {
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800114c:	d142      	bne.n	80011d4 <HAL_TIM_IC_MspInit+0x98>
    /* Peripheral clock enable */
    __TIM2_CLK_ENABLE();
 800114e:	4b23      	ldr	r3, [pc, #140]	@ (80011dc <HAL_TIM_IC_MspInit+0xa0>)
 8001150:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001152:	4a22      	ldr	r2, [pc, #136]	@ (80011dc <HAL_TIM_IC_MspInit+0xa0>)
 8001154:	f043 0301 	orr.w	r3, r3, #1
 8001158:	6593      	str	r3, [r2, #88]	@ 0x58
 800115a:	4b20      	ldr	r3, [pc, #128]	@ (80011dc <HAL_TIM_IC_MspInit+0xa0>)
 800115c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800115e:	f003 0301 	and.w	r3, r3, #1
 8001162:	60bb      	str	r3, [r7, #8]
 8001164:	68bb      	ldr	r3, [r7, #8]

    /**TIM2 GPIO Configuration
     PA0     ------> TIM2_CH1
     */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001166:	2301      	movs	r3, #1
 8001168:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800116a:	2302      	movs	r3, #2
 800116c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116e:	2300      	movs	r3, #0
 8001170:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001172:	2303      	movs	r3, #3
 8001174:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001176:	2301      	movs	r3, #1
 8001178:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800117a:	f107 030c 	add.w	r3, r7, #12
 800117e:	4619      	mov	r1, r3
 8001180:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001184:	f000 ff28 	bl	8001fd8 <HAL_GPIO_Init>

    /* Peripheral DMA init*/
    hdma_tim2_ch1.Instance = DMA1_Channel5;
 8001188:	4b15      	ldr	r3, [pc, #84]	@ (80011e0 <HAL_TIM_IC_MspInit+0xa4>)
 800118a:	4a16      	ldr	r2, [pc, #88]	@ (80011e4 <HAL_TIM_IC_MspInit+0xa8>)
 800118c:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Request = DMA_REQUEST_4;
 800118e:	4b14      	ldr	r3, [pc, #80]	@ (80011e0 <HAL_TIM_IC_MspInit+0xa4>)
 8001190:	2204      	movs	r2, #4
 8001192:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001194:	4b12      	ldr	r3, [pc, #72]	@ (80011e0 <HAL_TIM_IC_MspInit+0xa4>)
 8001196:	2200      	movs	r2, #0
 8001198:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800119a:	4b11      	ldr	r3, [pc, #68]	@ (80011e0 <HAL_TIM_IC_MspInit+0xa4>)
 800119c:	2200      	movs	r2, #0
 800119e:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80011a0:	4b0f      	ldr	r3, [pc, #60]	@ (80011e0 <HAL_TIM_IC_MspInit+0xa4>)
 80011a2:	2280      	movs	r2, #128	@ 0x80
 80011a4:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80011a6:	4b0e      	ldr	r3, [pc, #56]	@ (80011e0 <HAL_TIM_IC_MspInit+0xa4>)
 80011a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80011ac:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80011ae:	4b0c      	ldr	r3, [pc, #48]	@ (80011e0 <HAL_TIM_IC_MspInit+0xa4>)
 80011b0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80011b4:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_NORMAL;
 80011b6:	4b0a      	ldr	r3, [pc, #40]	@ (80011e0 <HAL_TIM_IC_MspInit+0xa4>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80011bc:	4b08      	ldr	r3, [pc, #32]	@ (80011e0 <HAL_TIM_IC_MspInit+0xa4>)
 80011be:	2200      	movs	r2, #0
 80011c0:	621a      	str	r2, [r3, #32]
    HAL_DMA_Init(&hdma_tim2_ch1);
 80011c2:	4807      	ldr	r0, [pc, #28]	@ (80011e0 <HAL_TIM_IC_MspInit+0xa4>)
 80011c4:	f000 fd10 	bl	8001be8 <HAL_DMA_Init>

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_ic,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);  }
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	4a05      	ldr	r2, [pc, #20]	@ (80011e0 <HAL_TIM_IC_MspInit+0xa4>)
 80011cc:	625a      	str	r2, [r3, #36]	@ 0x24
 80011ce:	4a04      	ldr	r2, [pc, #16]	@ (80011e0 <HAL_TIM_IC_MspInit+0xa4>)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	6293      	str	r3, [r2, #40]	@ 0x28
}
 80011d4:	bf00      	nop
 80011d6:	3720      	adds	r7, #32
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	40021000 	.word	0x40021000
 80011e0:	20000314 	.word	0x20000314
 80011e4:	40020058 	.word	0x40020058

080011e8 <HAL_TIM_IC_CaptureCallback>:


void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 80011e8:	b480      	push	{r7}
 80011ea:	b083      	sub	sp, #12
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	7f1b      	ldrb	r3, [r3, #28]
 80011f4:	2b01      	cmp	r3, #1
 80011f6:	d102      	bne.n	80011fe <HAL_TIM_IC_CaptureCallback+0x16>
    captureDone = 1;
 80011f8:	4b04      	ldr	r3, [pc, #16]	@ (800120c <HAL_TIM_IC_CaptureCallback+0x24>)
 80011fa:	2201      	movs	r2, #1
 80011fc:	701a      	strb	r2, [r3, #0]
  }
}
 80011fe:	bf00      	nop
 8001200:	370c      	adds	r7, #12
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr
 800120a:	bf00      	nop
 800120c:	20000364 	.word	0x20000364

08001210 <MX_TIM6_Init>:

void MX_TIM6_Init(void) {
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
  htim6.Instance = TIM6;
 8001214:	4b0c      	ldr	r3, [pc, #48]	@ (8001248 <MX_TIM6_Init+0x38>)
 8001216:	4a0d      	ldr	r2, [pc, #52]	@ (800124c <MX_TIM6_Init+0x3c>)
 8001218:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 399; //80MHz/400 = 200KHz
 800121a:	4b0b      	ldr	r3, [pc, #44]	@ (8001248 <MX_TIM6_Init+0x38>)
 800121c:	f240 128f 	movw	r2, #399	@ 0x18f
 8001220:	605a      	str	r2, [r3, #4]
  htim6.Init.Period = 1;      //200KHz/2  = 100KHz
 8001222:	4b09      	ldr	r3, [pc, #36]	@ (8001248 <MX_TIM6_Init+0x38>)
 8001224:	2201      	movs	r2, #1
 8001226:	60da      	str	r2, [r3, #12]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001228:	4b07      	ldr	r3, [pc, #28]	@ (8001248 <MX_TIM6_Init+0x38>)
 800122a:	2200      	movs	r2, #0
 800122c:	609a      	str	r2, [r3, #8]
  HAL_TIM_Base_Init(&htim6);
 800122e:	4806      	ldr	r0, [pc, #24]	@ (8001248 <MX_TIM6_Init+0x38>)
 8001230:	f002 fbea 	bl	8003a08 <HAL_TIM_Base_Init>

  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001234:	2200      	movs	r2, #0
 8001236:	2100      	movs	r1, #0
 8001238:	2036      	movs	r0, #54	@ 0x36
 800123a:	f000 fc82 	bl	8001b42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800123e:	2036      	movs	r0, #54	@ 0x36
 8001240:	f000 fc9b 	bl	8001b7a <HAL_NVIC_EnableIRQ>
}
 8001244:	bf00      	nop
 8001246:	bd80      	pop	{r7, pc}
 8001248:	20000278 	.word	0x20000278
 800124c:	40001000 	.word	0x40001000

08001250 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base) {
 8001250:	b480      	push	{r7}
 8001252:	b085      	sub	sp, #20
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  if (htim_base->Instance == TIM6) {
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a0a      	ldr	r2, [pc, #40]	@ (8001288 <HAL_TIM_Base_MspInit+0x38>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d10b      	bne.n	800127a <HAL_TIM_Base_MspInit+0x2a>
    /* Peripheral clock enable */
    __TIM6_CLK_ENABLE();
 8001262:	4b0a      	ldr	r3, [pc, #40]	@ (800128c <HAL_TIM_Base_MspInit+0x3c>)
 8001264:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001266:	4a09      	ldr	r2, [pc, #36]	@ (800128c <HAL_TIM_Base_MspInit+0x3c>)
 8001268:	f043 0310 	orr.w	r3, r3, #16
 800126c:	6593      	str	r3, [r2, #88]	@ 0x58
 800126e:	4b07      	ldr	r3, [pc, #28]	@ (800128c <HAL_TIM_Base_MspInit+0x3c>)
 8001270:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001272:	f003 0310 	and.w	r3, r3, #16
 8001276:	60fb      	str	r3, [r7, #12]
 8001278:	68fb      	ldr	r3, [r7, #12]
  }
}
 800127a:	bf00      	nop
 800127c:	3714      	adds	r7, #20
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop
 8001288:	40001000 	.word	0x40001000
 800128c:	40021000 	.word	0x40021000

08001290 <MX_DMA_Init>:

void MX_DMA_Init(void) {
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __DMA1_CLK_ENABLE();
 8001296:	4b0c      	ldr	r3, [pc, #48]	@ (80012c8 <MX_DMA_Init+0x38>)
 8001298:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800129a:	4a0b      	ldr	r2, [pc, #44]	@ (80012c8 <MX_DMA_Init+0x38>)
 800129c:	f043 0301 	orr.w	r3, r3, #1
 80012a0:	6493      	str	r3, [r2, #72]	@ 0x48
 80012a2:	4b09      	ldr	r3, [pc, #36]	@ (80012c8 <MX_DMA_Init+0x38>)
 80012a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80012a6:	f003 0301 	and.w	r3, r3, #1
 80012aa:	607b      	str	r3, [r7, #4]
 80012ac:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80012ae:	2200      	movs	r2, #0
 80012b0:	2100      	movs	r1, #0
 80012b2:	200f      	movs	r0, #15
 80012b4:	f000 fc45 	bl	8001b42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80012b8:	200f      	movs	r0, #15
 80012ba:	f000 fc5e 	bl	8001b7a <HAL_NVIC_EnableIRQ>

}
 80012be:	bf00      	nop
 80012c0:	3708      	adds	r7, #8
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	40021000 	.word	0x40021000

080012cc <DMA1_Channel5_IRQHandler>:

void DMA1_Channel5_IRQHandler(void) {
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 80012d0:	4802      	ldr	r0, [pc, #8]	@ (80012dc <DMA1_Channel5_IRQHandler+0x10>)
 80012d2:	f000 fda1 	bl	8001e18 <HAL_DMA_IRQHandler>
}
 80012d6:	bf00      	nop
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	20000314 	.word	0x20000314

080012e0 <TIM6_DAC_IRQHandler>:

void TIM6_DAC_IRQHandler(void) {
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&htim6);
 80012e4:	4802      	ldr	r0, [pc, #8]	@ (80012f0 <TIM6_DAC_IRQHandler+0x10>)
 80012e6:	f002 fe7b 	bl	8003fe0 <HAL_TIM_IRQHandler>
}
 80012ea:	bf00      	nop
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	20000278 	.word	0x20000278

080012f4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  if(htim->Instance == TIM6)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a05      	ldr	r2, [pc, #20]	@ (8001318 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d104      	bne.n	8001310 <HAL_TIM_PeriodElapsedCallback+0x1c>
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8001306:	2120      	movs	r1, #32
 8001308:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800130c:	f001 f80e 	bl	800232c <HAL_GPIO_TogglePin>
}
 8001310:	bf00      	nop
 8001312:	3708      	adds	r7, #8
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}
 8001318:	40001000 	.word	0x40001000

0800131c <MX_USART2_UART_Init>:

void MX_USART2_UART_Init(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001320:	4b11      	ldr	r3, [pc, #68]	@ (8001368 <MX_USART2_UART_Init+0x4c>)
 8001322:	4a12      	ldr	r2, [pc, #72]	@ (800136c <MX_USART2_UART_Init+0x50>)
 8001324:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001326:	4b10      	ldr	r3, [pc, #64]	@ (8001368 <MX_USART2_UART_Init+0x4c>)
 8001328:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800132c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800132e:	4b0e      	ldr	r3, [pc, #56]	@ (8001368 <MX_USART2_UART_Init+0x4c>)
 8001330:	2200      	movs	r2, #0
 8001332:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001334:	4b0c      	ldr	r3, [pc, #48]	@ (8001368 <MX_USART2_UART_Init+0x4c>)
 8001336:	2200      	movs	r2, #0
 8001338:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800133a:	4b0b      	ldr	r3, [pc, #44]	@ (8001368 <MX_USART2_UART_Init+0x4c>)
 800133c:	2200      	movs	r2, #0
 800133e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001340:	4b09      	ldr	r3, [pc, #36]	@ (8001368 <MX_USART2_UART_Init+0x4c>)
 8001342:	220c      	movs	r2, #12
 8001344:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001346:	4b08      	ldr	r3, [pc, #32]	@ (8001368 <MX_USART2_UART_Init+0x4c>)
 8001348:	2200      	movs	r2, #0
 800134a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800134c:	4b06      	ldr	r3, [pc, #24]	@ (8001368 <MX_USART2_UART_Init+0x4c>)
 800134e:	2200      	movs	r2, #0
 8001350:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001352:	4b05      	ldr	r3, [pc, #20]	@ (8001368 <MX_USART2_UART_Init+0x4c>)
 8001354:	2200      	movs	r2, #0
 8001356:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001358:	4b03      	ldr	r3, [pc, #12]	@ (8001368 <MX_USART2_UART_Init+0x4c>)
 800135a:	2200      	movs	r2, #0
 800135c:	625a      	str	r2, [r3, #36]	@ 0x24
  HAL_UART_Init(&huart2);
 800135e:	4802      	ldr	r0, [pc, #8]	@ (8001368 <MX_USART2_UART_Init+0x4c>)
 8001360:	f003 fc65 	bl	8004c2e <HAL_UART_Init>

}
 8001364:	bf00      	nop
 8001366:	bd80      	pop	{r7, pc}
 8001368:	200001f0 	.word	0x200001f0
 800136c:	40004400 	.word	0x40004400

08001370 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001374:	b672      	cpsid	i
}
 8001376:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001378:	bf00      	nop
 800137a:	e7fd      	b.n	8001378 <Error_Handler+0x8>

0800137c <Nucleo_BSP_Init>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_DMA_Init(void);

void Nucleo_BSP_Init() {
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
  /* Configure the system clock */
  SystemClock_Config();
 8001380:	f000 f808 	bl	8001394 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001384:	f000 f884 	bl	8001490 <MX_GPIO_Init>
  MX_DMA_Init();
 8001388:	f000 f864 	bl	8001454 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800138c:	f7ff ffc6 	bl	800131c <MX_USART2_UART_Init>
}
 8001390:	bf00      	nop
 8001392:	bd80      	pop	{r7, pc}

08001394 <SystemClock_Config>:

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b098      	sub	sp, #96	@ 0x60
 8001398:	af00      	add	r7, sp, #0

  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 800139a:	2306      	movs	r3, #6
 800139c:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800139e:	2301      	movs	r3, #1
 80013a0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013a2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80013a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = 16;
 80013a8:	2310      	movs	r3, #16
 80013aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013ac:	2302      	movs	r3, #2
 80013ae:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80013b0:	2302      	movs	r3, #2
 80013b2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLM = 1;
 80013b4:	2301      	movs	r3, #1
 80013b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLN = 10;
 80013b8:	230a      	movs	r3, #10
 80013ba:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80013bc:	2307      	movs	r3, #7
 80013be:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80013c0:	2302      	movs	r3, #2
 80013c2:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80013c4:	2302      	movs	r3, #2
 80013c6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80013c8:	f107 031c 	add.w	r3, r7, #28
 80013cc:	4618      	mov	r0, r3
 80013ce:	f001 f82b 	bl	8002428 <HAL_RCC_OscConfig>

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013d2:	230f      	movs	r3, #15
 80013d4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013d6:	2303      	movs	r3, #3
 80013d8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013da:	2300      	movs	r3, #0
 80013dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013de:	2300      	movs	r3, #0
 80013e0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013e2:	2300      	movs	r3, #0
 80013e4:	61bb      	str	r3, [r7, #24]
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);
 80013e6:	f107 0308 	add.w	r3, r7, #8
 80013ea:	2104      	movs	r1, #4
 80013ec:	4618      	mov	r0, r3
 80013ee:	f001 fbf7 	bl	8002be0 <HAL_RCC_ClockConfig>

  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 80013f2:	2200      	movs	r2, #0
 80013f4:	f04f 7140 	mov.w	r1, #50331648	@ 0x3000000
 80013f8:	2000      	movs	r0, #0
 80013fa:	f001 fcf1 	bl	8002de0 <HAL_RCC_MCOConfig>

  __PWR_CLK_ENABLE();
 80013fe:	4b13      	ldr	r3, [pc, #76]	@ (800144c <SystemClock_Config+0xb8>)
 8001400:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001402:	4a12      	ldr	r2, [pc, #72]	@ (800144c <SystemClock_Config+0xb8>)
 8001404:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001408:	6593      	str	r3, [r2, #88]	@ 0x58
 800140a:	4b10      	ldr	r3, [pc, #64]	@ (800144c <SystemClock_Config+0xb8>)
 800140c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800140e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001412:	607b      	str	r3, [r7, #4]
 8001414:	687b      	ldr	r3, [r7, #4]

  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001416:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800141a:	f000 ffaf 	bl	800237c <HAL_PWREx_ControlVoltageScaling>

  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800141e:	f001 fd9f 	bl	8002f60 <HAL_RCC_GetHCLKFreq>
 8001422:	4603      	mov	r3, r0
 8001424:	4a0a      	ldr	r2, [pc, #40]	@ (8001450 <SystemClock_Config+0xbc>)
 8001426:	fba2 2303 	umull	r2, r3, r2, r3
 800142a:	099b      	lsrs	r3, r3, #6
 800142c:	4618      	mov	r0, r3
 800142e:	f000 fbb2 	bl	8001b96 <HAL_SYSTICK_Config>

  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001432:	2004      	movs	r0, #4
 8001434:	f000 fbbc 	bl	8001bb0 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001438:	2200      	movs	r2, #0
 800143a:	2100      	movs	r1, #0
 800143c:	f04f 30ff 	mov.w	r0, #4294967295
 8001440:	f000 fb7f 	bl	8001b42 <HAL_NVIC_SetPriority>
}
 8001444:	bf00      	nop
 8001446:	3760      	adds	r7, #96	@ 0x60
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	40021000 	.word	0x40021000
 8001450:	10624dd3 	.word	0x10624dd3

08001454 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __DMA1_CLK_ENABLE();
 800145a:	4b0c      	ldr	r3, [pc, #48]	@ (800148c <MX_DMA_Init+0x38>)
 800145c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800145e:	4a0b      	ldr	r2, [pc, #44]	@ (800148c <MX_DMA_Init+0x38>)
 8001460:	f043 0301 	orr.w	r3, r3, #1
 8001464:	6493      	str	r3, [r2, #72]	@ 0x48
 8001466:	4b09      	ldr	r3, [pc, #36]	@ (800148c <MX_DMA_Init+0x38>)
 8001468:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800146a:	f003 0301 	and.w	r3, r3, #1
 800146e:	607b      	str	r3, [r7, #4]
 8001470:	687b      	ldr	r3, [r7, #4]

//  /* DMA interrupt init */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8001472:	2200      	movs	r2, #0
 8001474:	2100      	movs	r1, #0
 8001476:	200e      	movs	r0, #14
 8001478:	f000 fb63 	bl	8001b42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 800147c:	200e      	movs	r0, #14
 800147e:	f000 fb7c 	bl	8001b7a <HAL_NVIC_EnableIRQ>

}
 8001482:	bf00      	nop
 8001484:	3708      	adds	r7, #8
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	40021000 	.word	0x40021000

08001490 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b088      	sub	sp, #32
 8001494:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __GPIOC_CLK_ENABLE();
 8001496:	4b24      	ldr	r3, [pc, #144]	@ (8001528 <MX_GPIO_Init+0x98>)
 8001498:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800149a:	4a23      	ldr	r2, [pc, #140]	@ (8001528 <MX_GPIO_Init+0x98>)
 800149c:	f043 0304 	orr.w	r3, r3, #4
 80014a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014a2:	4b21      	ldr	r3, [pc, #132]	@ (8001528 <MX_GPIO_Init+0x98>)
 80014a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014a6:	f003 0304 	and.w	r3, r3, #4
 80014aa:	60bb      	str	r3, [r7, #8]
 80014ac:	68bb      	ldr	r3, [r7, #8]
  __GPIOA_CLK_ENABLE();
 80014ae:	4b1e      	ldr	r3, [pc, #120]	@ (8001528 <MX_GPIO_Init+0x98>)
 80014b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014b2:	4a1d      	ldr	r2, [pc, #116]	@ (8001528 <MX_GPIO_Init+0x98>)
 80014b4:	f043 0301 	orr.w	r3, r3, #1
 80014b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014ba:	4b1b      	ldr	r3, [pc, #108]	@ (8001528 <MX_GPIO_Init+0x98>)
 80014bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014be:	f003 0301 	and.w	r3, r3, #1
 80014c2:	607b      	str	r3, [r7, #4]
 80014c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80014c6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80014ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80014cc:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80014d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d2:	2300      	movs	r3, #0
 80014d4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80014d6:	f107 030c 	add.w	r3, r7, #12
 80014da:	4619      	mov	r1, r3
 80014dc:	4813      	ldr	r0, [pc, #76]	@ (800152c <MX_GPIO_Init+0x9c>)
 80014de:	f000 fd7b 	bl	8001fd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80014e2:	2320      	movs	r3, #32
 80014e4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014e6:	2301      	movs	r3, #1
 80014e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ea:	2300      	movs	r3, #0
 80014ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 80014ee:	2303      	movs	r3, #3
 80014f0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80014f2:	f107 030c 	add.w	r3, r7, #12
 80014f6:	4619      	mov	r1, r3
 80014f8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014fc:	f000 fd6c 	bl	8001fd8 <HAL_GPIO_Init>

  /*Configure GPIOC pin8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001500:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001504:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001506:	2301      	movs	r3, #1
 8001508:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150a:	2300      	movs	r3, #0
 800150c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800150e:	2303      	movs	r3, #3
 8001510:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001512:	f107 030c 	add.w	r3, r7, #12
 8001516:	4619      	mov	r1, r3
 8001518:	4804      	ldr	r0, [pc, #16]	@ (800152c <MX_GPIO_Init+0x9c>)
 800151a:	f000 fd5d 	bl	8001fd8 <HAL_GPIO_Init>

}
 800151e:	bf00      	nop
 8001520:	3720      	adds	r7, #32
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	40021000 	.word	0x40021000
 800152c:	48000800 	.word	0x48000800

08001530 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001530:	b480      	push	{r7}
 8001532:	b083      	sub	sp, #12
 8001534:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001536:	4b0f      	ldr	r3, [pc, #60]	@ (8001574 <HAL_MspInit+0x44>)
 8001538:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800153a:	4a0e      	ldr	r2, [pc, #56]	@ (8001574 <HAL_MspInit+0x44>)
 800153c:	f043 0301 	orr.w	r3, r3, #1
 8001540:	6613      	str	r3, [r2, #96]	@ 0x60
 8001542:	4b0c      	ldr	r3, [pc, #48]	@ (8001574 <HAL_MspInit+0x44>)
 8001544:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001546:	f003 0301 	and.w	r3, r3, #1
 800154a:	607b      	str	r3, [r7, #4]
 800154c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800154e:	4b09      	ldr	r3, [pc, #36]	@ (8001574 <HAL_MspInit+0x44>)
 8001550:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001552:	4a08      	ldr	r2, [pc, #32]	@ (8001574 <HAL_MspInit+0x44>)
 8001554:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001558:	6593      	str	r3, [r2, #88]	@ 0x58
 800155a:	4b06      	ldr	r3, [pc, #24]	@ (8001574 <HAL_MspInit+0x44>)
 800155c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800155e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001562:	603b      	str	r3, [r7, #0]
 8001564:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001566:	bf00      	nop
 8001568:	370c      	adds	r7, #12
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
 8001572:	bf00      	nop
 8001574:	40021000 	.word	0x40021000

08001578 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b0ac      	sub	sp, #176	@ 0xb0
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001580:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001584:	2200      	movs	r2, #0
 8001586:	601a      	str	r2, [r3, #0]
 8001588:	605a      	str	r2, [r3, #4]
 800158a:	609a      	str	r2, [r3, #8]
 800158c:	60da      	str	r2, [r3, #12]
 800158e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001590:	f107 0314 	add.w	r3, r7, #20
 8001594:	2288      	movs	r2, #136	@ 0x88
 8001596:	2100      	movs	r1, #0
 8001598:	4618      	mov	r0, r3
 800159a:	f005 f882 	bl	80066a2 <memset>
  if(huart->Instance==USART2)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4a21      	ldr	r2, [pc, #132]	@ (8001628 <HAL_UART_MspInit+0xb0>)
 80015a4:	4293      	cmp	r3, r2
 80015a6:	d13b      	bne.n	8001620 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80015a8:	2302      	movs	r3, #2
 80015aa:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80015ac:	2300      	movs	r3, #0
 80015ae:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015b0:	f107 0314 	add.w	r3, r7, #20
 80015b4:	4618      	mov	r0, r3
 80015b6:	f001 fd6b 	bl	8003090 <HAL_RCCEx_PeriphCLKConfig>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d001      	beq.n	80015c4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80015c0:	f7ff fed6 	bl	8001370 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80015c4:	4b19      	ldr	r3, [pc, #100]	@ (800162c <HAL_UART_MspInit+0xb4>)
 80015c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015c8:	4a18      	ldr	r2, [pc, #96]	@ (800162c <HAL_UART_MspInit+0xb4>)
 80015ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015ce:	6593      	str	r3, [r2, #88]	@ 0x58
 80015d0:	4b16      	ldr	r3, [pc, #88]	@ (800162c <HAL_UART_MspInit+0xb4>)
 80015d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015d8:	613b      	str	r3, [r7, #16]
 80015da:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015dc:	4b13      	ldr	r3, [pc, #76]	@ (800162c <HAL_UART_MspInit+0xb4>)
 80015de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015e0:	4a12      	ldr	r2, [pc, #72]	@ (800162c <HAL_UART_MspInit+0xb4>)
 80015e2:	f043 0301 	orr.w	r3, r3, #1
 80015e6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015e8:	4b10      	ldr	r3, [pc, #64]	@ (800162c <HAL_UART_MspInit+0xb4>)
 80015ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015ec:	f003 0301 	and.w	r3, r3, #1
 80015f0:	60fb      	str	r3, [r7, #12]
 80015f2:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80015f4:	230c      	movs	r3, #12
 80015f6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015fa:	2302      	movs	r3, #2
 80015fc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001600:	2300      	movs	r3, #0
 8001602:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001606:	2303      	movs	r3, #3
 8001608:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800160c:	2307      	movs	r3, #7
 800160e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001612:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001616:	4619      	mov	r1, r3
 8001618:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800161c:	f000 fcdc 	bl	8001fd8 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001620:	bf00      	nop
 8001622:	37b0      	adds	r7, #176	@ 0xb0
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}
 8001628:	40004400 	.word	0x40004400
 800162c:	40021000 	.word	0x40021000

08001630 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001634:	bf00      	nop
 8001636:	e7fd      	b.n	8001634 <NMI_Handler+0x4>

08001638 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800163c:	bf00      	nop
 800163e:	e7fd      	b.n	800163c <HardFault_Handler+0x4>

08001640 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001644:	bf00      	nop
 8001646:	e7fd      	b.n	8001644 <MemManage_Handler+0x4>

08001648 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800164c:	bf00      	nop
 800164e:	e7fd      	b.n	800164c <BusFault_Handler+0x4>

08001650 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001654:	bf00      	nop
 8001656:	e7fd      	b.n	8001654 <UsageFault_Handler+0x4>

08001658 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800165c:	bf00      	nop
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr

08001666 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001666:	b480      	push	{r7}
 8001668:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800166a:	bf00      	nop
 800166c:	46bd      	mov	sp, r7
 800166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001672:	4770      	bx	lr

08001674 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001678:	bf00      	nop
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr

08001682 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001682:	b580      	push	{r7, lr}
 8001684:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001686:	f000 f961 	bl	800194c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800168a:	bf00      	nop
 800168c:	bd80      	pop	{r7, pc}

0800168e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800168e:	b480      	push	{r7}
 8001690:	af00      	add	r7, sp, #0
  return 1;
 8001692:	2301      	movs	r3, #1
}
 8001694:	4618      	mov	r0, r3
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr

0800169e <_kill>:

int _kill(int pid, int sig)
{
 800169e:	b580      	push	{r7, lr}
 80016a0:	b082      	sub	sp, #8
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	6078      	str	r0, [r7, #4]
 80016a6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80016a8:	f005 f84e 	bl	8006748 <__errno>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2216      	movs	r2, #22
 80016b0:	601a      	str	r2, [r3, #0]
  return -1;
 80016b2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	3708      	adds	r7, #8
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}

080016be <_exit>:

void _exit (int status)
{
 80016be:	b580      	push	{r7, lr}
 80016c0:	b082      	sub	sp, #8
 80016c2:	af00      	add	r7, sp, #0
 80016c4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80016c6:	f04f 31ff 	mov.w	r1, #4294967295
 80016ca:	6878      	ldr	r0, [r7, #4]
 80016cc:	f7ff ffe7 	bl	800169e <_kill>
  while (1) {}    /* Make sure we hang here */
 80016d0:	bf00      	nop
 80016d2:	e7fd      	b.n	80016d0 <_exit+0x12>

080016d4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b086      	sub	sp, #24
 80016d8:	af00      	add	r7, sp, #0
 80016da:	60f8      	str	r0, [r7, #12]
 80016dc:	60b9      	str	r1, [r7, #8]
 80016de:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016e0:	2300      	movs	r3, #0
 80016e2:	617b      	str	r3, [r7, #20]
 80016e4:	e00a      	b.n	80016fc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80016e6:	f3af 8000 	nop.w
 80016ea:	4601      	mov	r1, r0
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	1c5a      	adds	r2, r3, #1
 80016f0:	60ba      	str	r2, [r7, #8]
 80016f2:	b2ca      	uxtb	r2, r1
 80016f4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	3301      	adds	r3, #1
 80016fa:	617b      	str	r3, [r7, #20]
 80016fc:	697a      	ldr	r2, [r7, #20]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	429a      	cmp	r2, r3
 8001702:	dbf0      	blt.n	80016e6 <_read+0x12>
  }

  return len;
 8001704:	687b      	ldr	r3, [r7, #4]
}
 8001706:	4618      	mov	r0, r3
 8001708:	3718      	adds	r7, #24
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}

0800170e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800170e:	b580      	push	{r7, lr}
 8001710:	b086      	sub	sp, #24
 8001712:	af00      	add	r7, sp, #0
 8001714:	60f8      	str	r0, [r7, #12]
 8001716:	60b9      	str	r1, [r7, #8]
 8001718:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800171a:	2300      	movs	r3, #0
 800171c:	617b      	str	r3, [r7, #20]
 800171e:	e009      	b.n	8001734 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001720:	68bb      	ldr	r3, [r7, #8]
 8001722:	1c5a      	adds	r2, r3, #1
 8001724:	60ba      	str	r2, [r7, #8]
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	4618      	mov	r0, r3
 800172a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	3301      	adds	r3, #1
 8001732:	617b      	str	r3, [r7, #20]
 8001734:	697a      	ldr	r2, [r7, #20]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	429a      	cmp	r2, r3
 800173a:	dbf1      	blt.n	8001720 <_write+0x12>
  }
  return len;
 800173c:	687b      	ldr	r3, [r7, #4]
}
 800173e:	4618      	mov	r0, r3
 8001740:	3718      	adds	r7, #24
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}

08001746 <_close>:

int _close(int file)
{
 8001746:	b480      	push	{r7}
 8001748:	b083      	sub	sp, #12
 800174a:	af00      	add	r7, sp, #0
 800174c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800174e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001752:	4618      	mov	r0, r3
 8001754:	370c      	adds	r7, #12
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr

0800175e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800175e:	b480      	push	{r7}
 8001760:	b083      	sub	sp, #12
 8001762:	af00      	add	r7, sp, #0
 8001764:	6078      	str	r0, [r7, #4]
 8001766:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800176e:	605a      	str	r2, [r3, #4]
  return 0;
 8001770:	2300      	movs	r3, #0
}
 8001772:	4618      	mov	r0, r3
 8001774:	370c      	adds	r7, #12
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr

0800177e <_isatty>:

int _isatty(int file)
{
 800177e:	b480      	push	{r7}
 8001780:	b083      	sub	sp, #12
 8001782:	af00      	add	r7, sp, #0
 8001784:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001786:	2301      	movs	r3, #1
}
 8001788:	4618      	mov	r0, r3
 800178a:	370c      	adds	r7, #12
 800178c:	46bd      	mov	sp, r7
 800178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001792:	4770      	bx	lr

08001794 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001794:	b480      	push	{r7}
 8001796:	b085      	sub	sp, #20
 8001798:	af00      	add	r7, sp, #0
 800179a:	60f8      	str	r0, [r7, #12]
 800179c:	60b9      	str	r1, [r7, #8]
 800179e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80017a0:	2300      	movs	r3, #0
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	3714      	adds	r7, #20
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr
	...

080017b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b086      	sub	sp, #24
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017b8:	4a14      	ldr	r2, [pc, #80]	@ (800180c <_sbrk+0x5c>)
 80017ba:	4b15      	ldr	r3, [pc, #84]	@ (8001810 <_sbrk+0x60>)
 80017bc:	1ad3      	subs	r3, r2, r3
 80017be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017c4:	4b13      	ldr	r3, [pc, #76]	@ (8001814 <_sbrk+0x64>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d102      	bne.n	80017d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017cc:	4b11      	ldr	r3, [pc, #68]	@ (8001814 <_sbrk+0x64>)
 80017ce:	4a12      	ldr	r2, [pc, #72]	@ (8001818 <_sbrk+0x68>)
 80017d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017d2:	4b10      	ldr	r3, [pc, #64]	@ (8001814 <_sbrk+0x64>)
 80017d4:	681a      	ldr	r2, [r3, #0]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	4413      	add	r3, r2
 80017da:	693a      	ldr	r2, [r7, #16]
 80017dc:	429a      	cmp	r2, r3
 80017de:	d207      	bcs.n	80017f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017e0:	f004 ffb2 	bl	8006748 <__errno>
 80017e4:	4603      	mov	r3, r0
 80017e6:	220c      	movs	r2, #12
 80017e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017ea:	f04f 33ff 	mov.w	r3, #4294967295
 80017ee:	e009      	b.n	8001804 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017f0:	4b08      	ldr	r3, [pc, #32]	@ (8001814 <_sbrk+0x64>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017f6:	4b07      	ldr	r3, [pc, #28]	@ (8001814 <_sbrk+0x64>)
 80017f8:	681a      	ldr	r2, [r3, #0]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	4413      	add	r3, r2
 80017fe:	4a05      	ldr	r2, [pc, #20]	@ (8001814 <_sbrk+0x64>)
 8001800:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001802:	68fb      	ldr	r3, [r7, #12]
}
 8001804:	4618      	mov	r0, r3
 8001806:	3718      	adds	r7, #24
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}
 800180c:	20018000 	.word	0x20018000
 8001810:	00000400 	.word	0x00000400
 8001814:	20000368 	.word	0x20000368
 8001818:	200004c0 	.word	0x200004c0

0800181c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001820:	4b06      	ldr	r3, [pc, #24]	@ (800183c <SystemInit+0x20>)
 8001822:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001826:	4a05      	ldr	r2, [pc, #20]	@ (800183c <SystemInit+0x20>)
 8001828:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800182c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001830:	bf00      	nop
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr
 800183a:	bf00      	nop
 800183c:	e000ed00 	.word	0xe000ed00

08001840 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001840:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001878 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001844:	f7ff ffea 	bl	800181c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001848:	480c      	ldr	r0, [pc, #48]	@ (800187c <LoopForever+0x6>)
  ldr r1, =_edata
 800184a:	490d      	ldr	r1, [pc, #52]	@ (8001880 <LoopForever+0xa>)
  ldr r2, =_sidata
 800184c:	4a0d      	ldr	r2, [pc, #52]	@ (8001884 <LoopForever+0xe>)
  movs r3, #0
 800184e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001850:	e002      	b.n	8001858 <LoopCopyDataInit>

08001852 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001852:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001854:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001856:	3304      	adds	r3, #4

08001858 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001858:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800185a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800185c:	d3f9      	bcc.n	8001852 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800185e:	4a0a      	ldr	r2, [pc, #40]	@ (8001888 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001860:	4c0a      	ldr	r4, [pc, #40]	@ (800188c <LoopForever+0x16>)
  movs r3, #0
 8001862:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001864:	e001      	b.n	800186a <LoopFillZerobss>

08001866 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001866:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001868:	3204      	adds	r2, #4

0800186a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800186a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800186c:	d3fb      	bcc.n	8001866 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800186e:	f004 ff71 	bl	8006754 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001872:	f7ff fbb7 	bl	8000fe4 <main>

08001876 <LoopForever>:

LoopForever:
    b LoopForever
 8001876:	e7fe      	b.n	8001876 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001878:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800187c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001880:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001884:	0800a308 	.word	0x0800a308
  ldr r2, =_sbss
 8001888:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 800188c:	200004bc 	.word	0x200004bc

08001890 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001890:	e7fe      	b.n	8001890 <ADC1_2_IRQHandler>
	...

08001894 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b082      	sub	sp, #8
 8001898:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800189a:	2300      	movs	r3, #0
 800189c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800189e:	4b0c      	ldr	r3, [pc, #48]	@ (80018d0 <HAL_Init+0x3c>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4a0b      	ldr	r2, [pc, #44]	@ (80018d0 <HAL_Init+0x3c>)
 80018a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018a8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018aa:	2003      	movs	r0, #3
 80018ac:	f000 f93e 	bl	8001b2c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80018b0:	2000      	movs	r0, #0
 80018b2:	f000 f80f 	bl	80018d4 <HAL_InitTick>
 80018b6:	4603      	mov	r3, r0
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d002      	beq.n	80018c2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80018bc:	2301      	movs	r3, #1
 80018be:	71fb      	strb	r3, [r7, #7]
 80018c0:	e001      	b.n	80018c6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80018c2:	f7ff fe35 	bl	8001530 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80018c6:	79fb      	ldrb	r3, [r7, #7]
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	3708      	adds	r7, #8
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	40022000 	.word	0x40022000

080018d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b084      	sub	sp, #16
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80018dc:	2300      	movs	r3, #0
 80018de:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80018e0:	4b17      	ldr	r3, [pc, #92]	@ (8001940 <HAL_InitTick+0x6c>)
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d023      	beq.n	8001930 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80018e8:	4b16      	ldr	r3, [pc, #88]	@ (8001944 <HAL_InitTick+0x70>)
 80018ea:	681a      	ldr	r2, [r3, #0]
 80018ec:	4b14      	ldr	r3, [pc, #80]	@ (8001940 <HAL_InitTick+0x6c>)
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	4619      	mov	r1, r3
 80018f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80018f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80018fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80018fe:	4618      	mov	r0, r3
 8001900:	f000 f949 	bl	8001b96 <HAL_SYSTICK_Config>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d10f      	bne.n	800192a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2b0f      	cmp	r3, #15
 800190e:	d809      	bhi.n	8001924 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001910:	2200      	movs	r2, #0
 8001912:	6879      	ldr	r1, [r7, #4]
 8001914:	f04f 30ff 	mov.w	r0, #4294967295
 8001918:	f000 f913 	bl	8001b42 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800191c:	4a0a      	ldr	r2, [pc, #40]	@ (8001948 <HAL_InitTick+0x74>)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6013      	str	r3, [r2, #0]
 8001922:	e007      	b.n	8001934 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001924:	2301      	movs	r3, #1
 8001926:	73fb      	strb	r3, [r7, #15]
 8001928:	e004      	b.n	8001934 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800192a:	2301      	movs	r3, #1
 800192c:	73fb      	strb	r3, [r7, #15]
 800192e:	e001      	b.n	8001934 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001930:	2301      	movs	r3, #1
 8001932:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001934:	7bfb      	ldrb	r3, [r7, #15]
}
 8001936:	4618      	mov	r0, r3
 8001938:	3710      	adds	r7, #16
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	20000008 	.word	0x20000008
 8001944:	20000000 	.word	0x20000000
 8001948:	20000004 	.word	0x20000004

0800194c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001950:	4b06      	ldr	r3, [pc, #24]	@ (800196c <HAL_IncTick+0x20>)
 8001952:	781b      	ldrb	r3, [r3, #0]
 8001954:	461a      	mov	r2, r3
 8001956:	4b06      	ldr	r3, [pc, #24]	@ (8001970 <HAL_IncTick+0x24>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4413      	add	r3, r2
 800195c:	4a04      	ldr	r2, [pc, #16]	@ (8001970 <HAL_IncTick+0x24>)
 800195e:	6013      	str	r3, [r2, #0]
}
 8001960:	bf00      	nop
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr
 800196a:	bf00      	nop
 800196c:	20000008 	.word	0x20000008
 8001970:	2000036c 	.word	0x2000036c

08001974 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
  return uwTick;
 8001978:	4b03      	ldr	r3, [pc, #12]	@ (8001988 <HAL_GetTick+0x14>)
 800197a:	681b      	ldr	r3, [r3, #0]
}
 800197c:	4618      	mov	r0, r3
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr
 8001986:	bf00      	nop
 8001988:	2000036c 	.word	0x2000036c

0800198c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800198c:	b480      	push	{r7}
 800198e:	b085      	sub	sp, #20
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	f003 0307 	and.w	r3, r3, #7
 800199a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800199c:	4b0c      	ldr	r3, [pc, #48]	@ (80019d0 <__NVIC_SetPriorityGrouping+0x44>)
 800199e:	68db      	ldr	r3, [r3, #12]
 80019a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019a2:	68ba      	ldr	r2, [r7, #8]
 80019a4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80019a8:	4013      	ands	r3, r2
 80019aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019b0:	68bb      	ldr	r3, [r7, #8]
 80019b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019b4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80019b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80019bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019be:	4a04      	ldr	r2, [pc, #16]	@ (80019d0 <__NVIC_SetPriorityGrouping+0x44>)
 80019c0:	68bb      	ldr	r3, [r7, #8]
 80019c2:	60d3      	str	r3, [r2, #12]
}
 80019c4:	bf00      	nop
 80019c6:	3714      	adds	r7, #20
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr
 80019d0:	e000ed00 	.word	0xe000ed00

080019d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019d8:	4b04      	ldr	r3, [pc, #16]	@ (80019ec <__NVIC_GetPriorityGrouping+0x18>)
 80019da:	68db      	ldr	r3, [r3, #12]
 80019dc:	0a1b      	lsrs	r3, r3, #8
 80019de:	f003 0307 	and.w	r3, r3, #7
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr
 80019ec:	e000ed00 	.word	0xe000ed00

080019f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b083      	sub	sp, #12
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	4603      	mov	r3, r0
 80019f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	db0b      	blt.n	8001a1a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a02:	79fb      	ldrb	r3, [r7, #7]
 8001a04:	f003 021f 	and.w	r2, r3, #31
 8001a08:	4907      	ldr	r1, [pc, #28]	@ (8001a28 <__NVIC_EnableIRQ+0x38>)
 8001a0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a0e:	095b      	lsrs	r3, r3, #5
 8001a10:	2001      	movs	r0, #1
 8001a12:	fa00 f202 	lsl.w	r2, r0, r2
 8001a16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001a1a:	bf00      	nop
 8001a1c:	370c      	adds	r7, #12
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr
 8001a26:	bf00      	nop
 8001a28:	e000e100 	.word	0xe000e100

08001a2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b083      	sub	sp, #12
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	4603      	mov	r3, r0
 8001a34:	6039      	str	r1, [r7, #0]
 8001a36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	db0a      	blt.n	8001a56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	b2da      	uxtb	r2, r3
 8001a44:	490c      	ldr	r1, [pc, #48]	@ (8001a78 <__NVIC_SetPriority+0x4c>)
 8001a46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a4a:	0112      	lsls	r2, r2, #4
 8001a4c:	b2d2      	uxtb	r2, r2
 8001a4e:	440b      	add	r3, r1
 8001a50:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a54:	e00a      	b.n	8001a6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	b2da      	uxtb	r2, r3
 8001a5a:	4908      	ldr	r1, [pc, #32]	@ (8001a7c <__NVIC_SetPriority+0x50>)
 8001a5c:	79fb      	ldrb	r3, [r7, #7]
 8001a5e:	f003 030f 	and.w	r3, r3, #15
 8001a62:	3b04      	subs	r3, #4
 8001a64:	0112      	lsls	r2, r2, #4
 8001a66:	b2d2      	uxtb	r2, r2
 8001a68:	440b      	add	r3, r1
 8001a6a:	761a      	strb	r2, [r3, #24]
}
 8001a6c:	bf00      	nop
 8001a6e:	370c      	adds	r7, #12
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr
 8001a78:	e000e100 	.word	0xe000e100
 8001a7c:	e000ed00 	.word	0xe000ed00

08001a80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b089      	sub	sp, #36	@ 0x24
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	60f8      	str	r0, [r7, #12]
 8001a88:	60b9      	str	r1, [r7, #8]
 8001a8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	f003 0307 	and.w	r3, r3, #7
 8001a92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a94:	69fb      	ldr	r3, [r7, #28]
 8001a96:	f1c3 0307 	rsb	r3, r3, #7
 8001a9a:	2b04      	cmp	r3, #4
 8001a9c:	bf28      	it	cs
 8001a9e:	2304      	movcs	r3, #4
 8001aa0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	3304      	adds	r3, #4
 8001aa6:	2b06      	cmp	r3, #6
 8001aa8:	d902      	bls.n	8001ab0 <NVIC_EncodePriority+0x30>
 8001aaa:	69fb      	ldr	r3, [r7, #28]
 8001aac:	3b03      	subs	r3, #3
 8001aae:	e000      	b.n	8001ab2 <NVIC_EncodePriority+0x32>
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ab4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ab8:	69bb      	ldr	r3, [r7, #24]
 8001aba:	fa02 f303 	lsl.w	r3, r2, r3
 8001abe:	43da      	mvns	r2, r3
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	401a      	ands	r2, r3
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ac8:	f04f 31ff 	mov.w	r1, #4294967295
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	fa01 f303 	lsl.w	r3, r1, r3
 8001ad2:	43d9      	mvns	r1, r3
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ad8:	4313      	orrs	r3, r2
         );
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3724      	adds	r7, #36	@ 0x24
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr
	...

08001ae8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	3b01      	subs	r3, #1
 8001af4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001af8:	d301      	bcc.n	8001afe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001afa:	2301      	movs	r3, #1
 8001afc:	e00f      	b.n	8001b1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001afe:	4a0a      	ldr	r2, [pc, #40]	@ (8001b28 <SysTick_Config+0x40>)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	3b01      	subs	r3, #1
 8001b04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b06:	210f      	movs	r1, #15
 8001b08:	f04f 30ff 	mov.w	r0, #4294967295
 8001b0c:	f7ff ff8e 	bl	8001a2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b10:	4b05      	ldr	r3, [pc, #20]	@ (8001b28 <SysTick_Config+0x40>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b16:	4b04      	ldr	r3, [pc, #16]	@ (8001b28 <SysTick_Config+0x40>)
 8001b18:	2207      	movs	r2, #7
 8001b1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b1c:	2300      	movs	r3, #0
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	3708      	adds	r7, #8
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	e000e010 	.word	0xe000e010

08001b2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b082      	sub	sp, #8
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b34:	6878      	ldr	r0, [r7, #4]
 8001b36:	f7ff ff29 	bl	800198c <__NVIC_SetPriorityGrouping>
}
 8001b3a:	bf00      	nop
 8001b3c:	3708      	adds	r7, #8
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}

08001b42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b42:	b580      	push	{r7, lr}
 8001b44:	b086      	sub	sp, #24
 8001b46:	af00      	add	r7, sp, #0
 8001b48:	4603      	mov	r3, r0
 8001b4a:	60b9      	str	r1, [r7, #8]
 8001b4c:	607a      	str	r2, [r7, #4]
 8001b4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001b50:	2300      	movs	r3, #0
 8001b52:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001b54:	f7ff ff3e 	bl	80019d4 <__NVIC_GetPriorityGrouping>
 8001b58:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b5a:	687a      	ldr	r2, [r7, #4]
 8001b5c:	68b9      	ldr	r1, [r7, #8]
 8001b5e:	6978      	ldr	r0, [r7, #20]
 8001b60:	f7ff ff8e 	bl	8001a80 <NVIC_EncodePriority>
 8001b64:	4602      	mov	r2, r0
 8001b66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b6a:	4611      	mov	r1, r2
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f7ff ff5d 	bl	8001a2c <__NVIC_SetPriority>
}
 8001b72:	bf00      	nop
 8001b74:	3718      	adds	r7, #24
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}

08001b7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b7a:	b580      	push	{r7, lr}
 8001b7c:	b082      	sub	sp, #8
 8001b7e:	af00      	add	r7, sp, #0
 8001b80:	4603      	mov	r3, r0
 8001b82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f7ff ff31 	bl	80019f0 <__NVIC_EnableIRQ>
}
 8001b8e:	bf00      	nop
 8001b90:	3708      	adds	r7, #8
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}

08001b96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b96:	b580      	push	{r7, lr}
 8001b98:	b082      	sub	sp, #8
 8001b9a:	af00      	add	r7, sp, #0
 8001b9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b9e:	6878      	ldr	r0, [r7, #4]
 8001ba0:	f7ff ffa2 	bl	8001ae8 <SysTick_Config>
 8001ba4:	4603      	mov	r3, r0
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	3708      	adds	r7, #8
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
	...

08001bb0 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b083      	sub	sp, #12
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2b04      	cmp	r3, #4
 8001bbc:	d106      	bne.n	8001bcc <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001bbe:	4b09      	ldr	r3, [pc, #36]	@ (8001be4 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4a08      	ldr	r2, [pc, #32]	@ (8001be4 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001bc4:	f043 0304 	orr.w	r3, r3, #4
 8001bc8:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8001bca:	e005      	b.n	8001bd8 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8001bcc:	4b05      	ldr	r3, [pc, #20]	@ (8001be4 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a04      	ldr	r2, [pc, #16]	@ (8001be4 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001bd2:	f023 0304 	bic.w	r3, r3, #4
 8001bd6:	6013      	str	r3, [r2, #0]
}
 8001bd8:	bf00      	nop
 8001bda:	370c      	adds	r7, #12
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr
 8001be4:	e000e010 	.word	0xe000e010

08001be8 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b085      	sub	sp, #20
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d101      	bne.n	8001bfa <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e098      	b.n	8001d2c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	461a      	mov	r2, r3
 8001c00:	4b4d      	ldr	r3, [pc, #308]	@ (8001d38 <HAL_DMA_Init+0x150>)
 8001c02:	429a      	cmp	r2, r3
 8001c04:	d80f      	bhi.n	8001c26 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	461a      	mov	r2, r3
 8001c0c:	4b4b      	ldr	r3, [pc, #300]	@ (8001d3c <HAL_DMA_Init+0x154>)
 8001c0e:	4413      	add	r3, r2
 8001c10:	4a4b      	ldr	r2, [pc, #300]	@ (8001d40 <HAL_DMA_Init+0x158>)
 8001c12:	fba2 2303 	umull	r2, r3, r2, r3
 8001c16:	091b      	lsrs	r3, r3, #4
 8001c18:	009a      	lsls	r2, r3, #2
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	4a48      	ldr	r2, [pc, #288]	@ (8001d44 <HAL_DMA_Init+0x15c>)
 8001c22:	641a      	str	r2, [r3, #64]	@ 0x40
 8001c24:	e00e      	b.n	8001c44 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	461a      	mov	r2, r3
 8001c2c:	4b46      	ldr	r3, [pc, #280]	@ (8001d48 <HAL_DMA_Init+0x160>)
 8001c2e:	4413      	add	r3, r2
 8001c30:	4a43      	ldr	r2, [pc, #268]	@ (8001d40 <HAL_DMA_Init+0x158>)
 8001c32:	fba2 2303 	umull	r2, r3, r2, r3
 8001c36:	091b      	lsrs	r3, r3, #4
 8001c38:	009a      	lsls	r2, r3, #2
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	4a42      	ldr	r2, [pc, #264]	@ (8001d4c <HAL_DMA_Init+0x164>)
 8001c42:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2202      	movs	r2, #2
 8001c48:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8001c5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001c5e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001c68:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	691b      	ldr	r3, [r3, #16]
 8001c6e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c74:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	699b      	ldr	r3, [r3, #24]
 8001c7a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c80:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6a1b      	ldr	r3, [r3, #32]
 8001c86:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001c88:	68fa      	ldr	r2, [r7, #12]
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	68fa      	ldr	r2, [r7, #12]
 8001c94:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	689b      	ldr	r3, [r3, #8]
 8001c9a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001c9e:	d039      	beq.n	8001d14 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ca4:	4a27      	ldr	r2, [pc, #156]	@ (8001d44 <HAL_DMA_Init+0x15c>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d11a      	bne.n	8001ce0 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001caa:	4b29      	ldr	r3, [pc, #164]	@ (8001d50 <HAL_DMA_Init+0x168>)
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cb2:	f003 031c 	and.w	r3, r3, #28
 8001cb6:	210f      	movs	r1, #15
 8001cb8:	fa01 f303 	lsl.w	r3, r1, r3
 8001cbc:	43db      	mvns	r3, r3
 8001cbe:	4924      	ldr	r1, [pc, #144]	@ (8001d50 <HAL_DMA_Init+0x168>)
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001cc4:	4b22      	ldr	r3, [pc, #136]	@ (8001d50 <HAL_DMA_Init+0x168>)
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6859      	ldr	r1, [r3, #4]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cd0:	f003 031c 	and.w	r3, r3, #28
 8001cd4:	fa01 f303 	lsl.w	r3, r1, r3
 8001cd8:	491d      	ldr	r1, [pc, #116]	@ (8001d50 <HAL_DMA_Init+0x168>)
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	600b      	str	r3, [r1, #0]
 8001cde:	e019      	b.n	8001d14 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001ce0:	4b1c      	ldr	r3, [pc, #112]	@ (8001d54 <HAL_DMA_Init+0x16c>)
 8001ce2:	681a      	ldr	r2, [r3, #0]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ce8:	f003 031c 	and.w	r3, r3, #28
 8001cec:	210f      	movs	r1, #15
 8001cee:	fa01 f303 	lsl.w	r3, r1, r3
 8001cf2:	43db      	mvns	r3, r3
 8001cf4:	4917      	ldr	r1, [pc, #92]	@ (8001d54 <HAL_DMA_Init+0x16c>)
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001cfa:	4b16      	ldr	r3, [pc, #88]	@ (8001d54 <HAL_DMA_Init+0x16c>)
 8001cfc:	681a      	ldr	r2, [r3, #0]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6859      	ldr	r1, [r3, #4]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d06:	f003 031c 	and.w	r3, r3, #28
 8001d0a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d0e:	4911      	ldr	r1, [pc, #68]	@ (8001d54 <HAL_DMA_Init+0x16c>)
 8001d10:	4313      	orrs	r3, r2
 8001d12:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2200      	movs	r2, #0
 8001d18:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2200      	movs	r2, #0
 8001d26:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8001d2a:	2300      	movs	r3, #0
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	3714      	adds	r7, #20
 8001d30:	46bd      	mov	sp, r7
 8001d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d36:	4770      	bx	lr
 8001d38:	40020407 	.word	0x40020407
 8001d3c:	bffdfff8 	.word	0xbffdfff8
 8001d40:	cccccccd 	.word	0xcccccccd
 8001d44:	40020000 	.word	0x40020000
 8001d48:	bffdfbf8 	.word	0xbffdfbf8
 8001d4c:	40020400 	.word	0x40020400
 8001d50:	400200a8 	.word	0x400200a8
 8001d54:	400204a8 	.word	0x400204a8

08001d58 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b086      	sub	sp, #24
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	60f8      	str	r0, [r7, #12]
 8001d60:	60b9      	str	r1, [r7, #8]
 8001d62:	607a      	str	r2, [r7, #4]
 8001d64:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001d66:	2300      	movs	r3, #0
 8001d68:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001d70:	2b01      	cmp	r3, #1
 8001d72:	d101      	bne.n	8001d78 <HAL_DMA_Start_IT+0x20>
 8001d74:	2302      	movs	r3, #2
 8001d76:	e04b      	b.n	8001e10 <HAL_DMA_Start_IT+0xb8>
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001d86:	b2db      	uxtb	r3, r3
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	d13a      	bne.n	8001e02 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	2202      	movs	r2, #2
 8001d90:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	2200      	movs	r2, #0
 8001d98:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	681a      	ldr	r2, [r3, #0]
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f022 0201 	bic.w	r2, r2, #1
 8001da8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	687a      	ldr	r2, [r7, #4]
 8001dae:	68b9      	ldr	r1, [r7, #8]
 8001db0:	68f8      	ldr	r0, [r7, #12]
 8001db2:	f000 f8e0 	bl	8001f76 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d008      	beq.n	8001dd0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f042 020e 	orr.w	r2, r2, #14
 8001dcc:	601a      	str	r2, [r3, #0]
 8001dce:	e00f      	b.n	8001df0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f022 0204 	bic.w	r2, r2, #4
 8001dde:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	681a      	ldr	r2, [r3, #0]
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f042 020a 	orr.w	r2, r2, #10
 8001dee:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f042 0201 	orr.w	r2, r2, #1
 8001dfe:	601a      	str	r2, [r3, #0]
 8001e00:	e005      	b.n	8001e0e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	2200      	movs	r2, #0
 8001e06:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001e0a:	2302      	movs	r3, #2
 8001e0c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001e0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	3718      	adds	r7, #24
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}

08001e18 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b084      	sub	sp, #16
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e34:	f003 031c 	and.w	r3, r3, #28
 8001e38:	2204      	movs	r2, #4
 8001e3a:	409a      	lsls	r2, r3
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	4013      	ands	r3, r2
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d026      	beq.n	8001e92 <HAL_DMA_IRQHandler+0x7a>
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	f003 0304 	and.w	r3, r3, #4
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d021      	beq.n	8001e92 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f003 0320 	and.w	r3, r3, #32
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d107      	bne.n	8001e6c <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	681a      	ldr	r2, [r3, #0]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f022 0204 	bic.w	r2, r2, #4
 8001e6a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e70:	f003 021c 	and.w	r2, r3, #28
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e78:	2104      	movs	r1, #4
 8001e7a:	fa01 f202 	lsl.w	r2, r1, r2
 8001e7e:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d071      	beq.n	8001f6c <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e8c:	6878      	ldr	r0, [r7, #4]
 8001e8e:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001e90:	e06c      	b.n	8001f6c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e96:	f003 031c 	and.w	r3, r3, #28
 8001e9a:	2202      	movs	r2, #2
 8001e9c:	409a      	lsls	r2, r3
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d02e      	beq.n	8001f04 <HAL_DMA_IRQHandler+0xec>
 8001ea6:	68bb      	ldr	r3, [r7, #8]
 8001ea8:	f003 0302 	and.w	r3, r3, #2
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d029      	beq.n	8001f04 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f003 0320 	and.w	r3, r3, #32
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d10b      	bne.n	8001ed6 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f022 020a 	bic.w	r2, r2, #10
 8001ecc:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eda:	f003 021c 	and.w	r2, r3, #28
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ee2:	2102      	movs	r1, #2
 8001ee4:	fa01 f202 	lsl.w	r2, r1, r2
 8001ee8:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2200      	movs	r2, #0
 8001eee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d038      	beq.n	8001f6c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001f02:	e033      	b.n	8001f6c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f08:	f003 031c 	and.w	r3, r3, #28
 8001f0c:	2208      	movs	r2, #8
 8001f0e:	409a      	lsls	r2, r3
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	4013      	ands	r3, r2
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d02a      	beq.n	8001f6e <HAL_DMA_IRQHandler+0x156>
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	f003 0308 	and.w	r3, r3, #8
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d025      	beq.n	8001f6e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	681a      	ldr	r2, [r3, #0]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f022 020e 	bic.w	r2, r2, #14
 8001f30:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f36:	f003 021c 	and.w	r2, r3, #28
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f3e:	2101      	movs	r1, #1
 8001f40:	fa01 f202 	lsl.w	r2, r1, r2
 8001f44:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2201      	movs	r2, #1
 8001f4a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2201      	movs	r2, #1
 8001f50:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2200      	movs	r2, #0
 8001f58:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d004      	beq.n	8001f6e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f68:	6878      	ldr	r0, [r7, #4]
 8001f6a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001f6c:	bf00      	nop
 8001f6e:	bf00      	nop
}
 8001f70:	3710      	adds	r7, #16
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}

08001f76 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f76:	b480      	push	{r7}
 8001f78:	b085      	sub	sp, #20
 8001f7a:	af00      	add	r7, sp, #0
 8001f7c:	60f8      	str	r0, [r7, #12]
 8001f7e:	60b9      	str	r1, [r7, #8]
 8001f80:	607a      	str	r2, [r7, #4]
 8001f82:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f88:	f003 021c 	and.w	r2, r3, #28
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f90:	2101      	movs	r1, #1
 8001f92:	fa01 f202 	lsl.w	r2, r1, r2
 8001f96:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	683a      	ldr	r2, [r7, #0]
 8001f9e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	2b10      	cmp	r3, #16
 8001fa6:	d108      	bne.n	8001fba <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	687a      	ldr	r2, [r7, #4]
 8001fae:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	68ba      	ldr	r2, [r7, #8]
 8001fb6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001fb8:	e007      	b.n	8001fca <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	68ba      	ldr	r2, [r7, #8]
 8001fc0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	687a      	ldr	r2, [r7, #4]
 8001fc8:	60da      	str	r2, [r3, #12]
}
 8001fca:	bf00      	nop
 8001fcc:	3714      	adds	r7, #20
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr
	...

08001fd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b087      	sub	sp, #28
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
 8001fe0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fe6:	e17f      	b.n	80022e8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	2101      	movs	r1, #1
 8001fee:	697b      	ldr	r3, [r7, #20]
 8001ff0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	f000 8171 	beq.w	80022e2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	f003 0303 	and.w	r3, r3, #3
 8002008:	2b01      	cmp	r3, #1
 800200a:	d005      	beq.n	8002018 <HAL_GPIO_Init+0x40>
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	f003 0303 	and.w	r3, r3, #3
 8002014:	2b02      	cmp	r3, #2
 8002016:	d130      	bne.n	800207a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	005b      	lsls	r3, r3, #1
 8002022:	2203      	movs	r2, #3
 8002024:	fa02 f303 	lsl.w	r3, r2, r3
 8002028:	43db      	mvns	r3, r3
 800202a:	693a      	ldr	r2, [r7, #16]
 800202c:	4013      	ands	r3, r2
 800202e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	68da      	ldr	r2, [r3, #12]
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	005b      	lsls	r3, r3, #1
 8002038:	fa02 f303 	lsl.w	r3, r2, r3
 800203c:	693a      	ldr	r2, [r7, #16]
 800203e:	4313      	orrs	r3, r2
 8002040:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	693a      	ldr	r2, [r7, #16]
 8002046:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800204e:	2201      	movs	r2, #1
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	fa02 f303 	lsl.w	r3, r2, r3
 8002056:	43db      	mvns	r3, r3
 8002058:	693a      	ldr	r2, [r7, #16]
 800205a:	4013      	ands	r3, r2
 800205c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	091b      	lsrs	r3, r3, #4
 8002064:	f003 0201 	and.w	r2, r3, #1
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	fa02 f303 	lsl.w	r3, r2, r3
 800206e:	693a      	ldr	r2, [r7, #16]
 8002070:	4313      	orrs	r3, r2
 8002072:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	693a      	ldr	r2, [r7, #16]
 8002078:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	f003 0303 	and.w	r3, r3, #3
 8002082:	2b03      	cmp	r3, #3
 8002084:	d118      	bne.n	80020b8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800208a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800208c:	2201      	movs	r2, #1
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	fa02 f303 	lsl.w	r3, r2, r3
 8002094:	43db      	mvns	r3, r3
 8002096:	693a      	ldr	r2, [r7, #16]
 8002098:	4013      	ands	r3, r2
 800209a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	08db      	lsrs	r3, r3, #3
 80020a2:	f003 0201 	and.w	r2, r3, #1
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	fa02 f303 	lsl.w	r3, r2, r3
 80020ac:	693a      	ldr	r2, [r7, #16]
 80020ae:	4313      	orrs	r3, r2
 80020b0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	693a      	ldr	r2, [r7, #16]
 80020b6:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	f003 0303 	and.w	r3, r3, #3
 80020c0:	2b03      	cmp	r3, #3
 80020c2:	d017      	beq.n	80020f4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	68db      	ldr	r3, [r3, #12]
 80020c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	005b      	lsls	r3, r3, #1
 80020ce:	2203      	movs	r2, #3
 80020d0:	fa02 f303 	lsl.w	r3, r2, r3
 80020d4:	43db      	mvns	r3, r3
 80020d6:	693a      	ldr	r2, [r7, #16]
 80020d8:	4013      	ands	r3, r2
 80020da:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	689a      	ldr	r2, [r3, #8]
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	005b      	lsls	r3, r3, #1
 80020e4:	fa02 f303 	lsl.w	r3, r2, r3
 80020e8:	693a      	ldr	r2, [r7, #16]
 80020ea:	4313      	orrs	r3, r2
 80020ec:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	693a      	ldr	r2, [r7, #16]
 80020f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	f003 0303 	and.w	r3, r3, #3
 80020fc:	2b02      	cmp	r3, #2
 80020fe:	d123      	bne.n	8002148 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	08da      	lsrs	r2, r3, #3
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	3208      	adds	r2, #8
 8002108:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800210c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	f003 0307 	and.w	r3, r3, #7
 8002114:	009b      	lsls	r3, r3, #2
 8002116:	220f      	movs	r2, #15
 8002118:	fa02 f303 	lsl.w	r3, r2, r3
 800211c:	43db      	mvns	r3, r3
 800211e:	693a      	ldr	r2, [r7, #16]
 8002120:	4013      	ands	r3, r2
 8002122:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	691a      	ldr	r2, [r3, #16]
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	f003 0307 	and.w	r3, r3, #7
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	fa02 f303 	lsl.w	r3, r2, r3
 8002134:	693a      	ldr	r2, [r7, #16]
 8002136:	4313      	orrs	r3, r2
 8002138:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	08da      	lsrs	r2, r3, #3
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	3208      	adds	r2, #8
 8002142:	6939      	ldr	r1, [r7, #16]
 8002144:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	005b      	lsls	r3, r3, #1
 8002152:	2203      	movs	r2, #3
 8002154:	fa02 f303 	lsl.w	r3, r2, r3
 8002158:	43db      	mvns	r3, r3
 800215a:	693a      	ldr	r2, [r7, #16]
 800215c:	4013      	ands	r3, r2
 800215e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	f003 0203 	and.w	r2, r3, #3
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	005b      	lsls	r3, r3, #1
 800216c:	fa02 f303 	lsl.w	r3, r2, r3
 8002170:	693a      	ldr	r2, [r7, #16]
 8002172:	4313      	orrs	r3, r2
 8002174:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	693a      	ldr	r2, [r7, #16]
 800217a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002184:	2b00      	cmp	r3, #0
 8002186:	f000 80ac 	beq.w	80022e2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800218a:	4b5f      	ldr	r3, [pc, #380]	@ (8002308 <HAL_GPIO_Init+0x330>)
 800218c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800218e:	4a5e      	ldr	r2, [pc, #376]	@ (8002308 <HAL_GPIO_Init+0x330>)
 8002190:	f043 0301 	orr.w	r3, r3, #1
 8002194:	6613      	str	r3, [r2, #96]	@ 0x60
 8002196:	4b5c      	ldr	r3, [pc, #368]	@ (8002308 <HAL_GPIO_Init+0x330>)
 8002198:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800219a:	f003 0301 	and.w	r3, r3, #1
 800219e:	60bb      	str	r3, [r7, #8]
 80021a0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80021a2:	4a5a      	ldr	r2, [pc, #360]	@ (800230c <HAL_GPIO_Init+0x334>)
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	089b      	lsrs	r3, r3, #2
 80021a8:	3302      	adds	r3, #2
 80021aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021ae:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	f003 0303 	and.w	r3, r3, #3
 80021b6:	009b      	lsls	r3, r3, #2
 80021b8:	220f      	movs	r2, #15
 80021ba:	fa02 f303 	lsl.w	r3, r2, r3
 80021be:	43db      	mvns	r3, r3
 80021c0:	693a      	ldr	r2, [r7, #16]
 80021c2:	4013      	ands	r3, r2
 80021c4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80021cc:	d025      	beq.n	800221a <HAL_GPIO_Init+0x242>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	4a4f      	ldr	r2, [pc, #316]	@ (8002310 <HAL_GPIO_Init+0x338>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d01f      	beq.n	8002216 <HAL_GPIO_Init+0x23e>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	4a4e      	ldr	r2, [pc, #312]	@ (8002314 <HAL_GPIO_Init+0x33c>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d019      	beq.n	8002212 <HAL_GPIO_Init+0x23a>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	4a4d      	ldr	r2, [pc, #308]	@ (8002318 <HAL_GPIO_Init+0x340>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d013      	beq.n	800220e <HAL_GPIO_Init+0x236>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	4a4c      	ldr	r2, [pc, #304]	@ (800231c <HAL_GPIO_Init+0x344>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d00d      	beq.n	800220a <HAL_GPIO_Init+0x232>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	4a4b      	ldr	r2, [pc, #300]	@ (8002320 <HAL_GPIO_Init+0x348>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d007      	beq.n	8002206 <HAL_GPIO_Init+0x22e>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	4a4a      	ldr	r2, [pc, #296]	@ (8002324 <HAL_GPIO_Init+0x34c>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d101      	bne.n	8002202 <HAL_GPIO_Init+0x22a>
 80021fe:	2306      	movs	r3, #6
 8002200:	e00c      	b.n	800221c <HAL_GPIO_Init+0x244>
 8002202:	2307      	movs	r3, #7
 8002204:	e00a      	b.n	800221c <HAL_GPIO_Init+0x244>
 8002206:	2305      	movs	r3, #5
 8002208:	e008      	b.n	800221c <HAL_GPIO_Init+0x244>
 800220a:	2304      	movs	r3, #4
 800220c:	e006      	b.n	800221c <HAL_GPIO_Init+0x244>
 800220e:	2303      	movs	r3, #3
 8002210:	e004      	b.n	800221c <HAL_GPIO_Init+0x244>
 8002212:	2302      	movs	r3, #2
 8002214:	e002      	b.n	800221c <HAL_GPIO_Init+0x244>
 8002216:	2301      	movs	r3, #1
 8002218:	e000      	b.n	800221c <HAL_GPIO_Init+0x244>
 800221a:	2300      	movs	r3, #0
 800221c:	697a      	ldr	r2, [r7, #20]
 800221e:	f002 0203 	and.w	r2, r2, #3
 8002222:	0092      	lsls	r2, r2, #2
 8002224:	4093      	lsls	r3, r2
 8002226:	693a      	ldr	r2, [r7, #16]
 8002228:	4313      	orrs	r3, r2
 800222a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800222c:	4937      	ldr	r1, [pc, #220]	@ (800230c <HAL_GPIO_Init+0x334>)
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	089b      	lsrs	r3, r3, #2
 8002232:	3302      	adds	r3, #2
 8002234:	693a      	ldr	r2, [r7, #16]
 8002236:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800223a:	4b3b      	ldr	r3, [pc, #236]	@ (8002328 <HAL_GPIO_Init+0x350>)
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	43db      	mvns	r3, r3
 8002244:	693a      	ldr	r2, [r7, #16]
 8002246:	4013      	ands	r3, r2
 8002248:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002252:	2b00      	cmp	r3, #0
 8002254:	d003      	beq.n	800225e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002256:	693a      	ldr	r2, [r7, #16]
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	4313      	orrs	r3, r2
 800225c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800225e:	4a32      	ldr	r2, [pc, #200]	@ (8002328 <HAL_GPIO_Init+0x350>)
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002264:	4b30      	ldr	r3, [pc, #192]	@ (8002328 <HAL_GPIO_Init+0x350>)
 8002266:	68db      	ldr	r3, [r3, #12]
 8002268:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	43db      	mvns	r3, r3
 800226e:	693a      	ldr	r2, [r7, #16]
 8002270:	4013      	ands	r3, r2
 8002272:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800227c:	2b00      	cmp	r3, #0
 800227e:	d003      	beq.n	8002288 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002280:	693a      	ldr	r2, [r7, #16]
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	4313      	orrs	r3, r2
 8002286:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002288:	4a27      	ldr	r2, [pc, #156]	@ (8002328 <HAL_GPIO_Init+0x350>)
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800228e:	4b26      	ldr	r3, [pc, #152]	@ (8002328 <HAL_GPIO_Init+0x350>)
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	43db      	mvns	r3, r3
 8002298:	693a      	ldr	r2, [r7, #16]
 800229a:	4013      	ands	r3, r2
 800229c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d003      	beq.n	80022b2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80022aa:	693a      	ldr	r2, [r7, #16]
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	4313      	orrs	r3, r2
 80022b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80022b2:	4a1d      	ldr	r2, [pc, #116]	@ (8002328 <HAL_GPIO_Init+0x350>)
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80022b8:	4b1b      	ldr	r3, [pc, #108]	@ (8002328 <HAL_GPIO_Init+0x350>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	43db      	mvns	r3, r3
 80022c2:	693a      	ldr	r2, [r7, #16]
 80022c4:	4013      	ands	r3, r2
 80022c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d003      	beq.n	80022dc <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80022d4:	693a      	ldr	r2, [r7, #16]
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	4313      	orrs	r3, r2
 80022da:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80022dc:	4a12      	ldr	r2, [pc, #72]	@ (8002328 <HAL_GPIO_Init+0x350>)
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	3301      	adds	r3, #1
 80022e6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	681a      	ldr	r2, [r3, #0]
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	fa22 f303 	lsr.w	r3, r2, r3
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	f47f ae78 	bne.w	8001fe8 <HAL_GPIO_Init+0x10>
  }
}
 80022f8:	bf00      	nop
 80022fa:	bf00      	nop
 80022fc:	371c      	adds	r7, #28
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr
 8002306:	bf00      	nop
 8002308:	40021000 	.word	0x40021000
 800230c:	40010000 	.word	0x40010000
 8002310:	48000400 	.word	0x48000400
 8002314:	48000800 	.word	0x48000800
 8002318:	48000c00 	.word	0x48000c00
 800231c:	48001000 	.word	0x48001000
 8002320:	48001400 	.word	0x48001400
 8002324:	48001800 	.word	0x48001800
 8002328:	40010400 	.word	0x40010400

0800232c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800232c:	b480      	push	{r7}
 800232e:	b085      	sub	sp, #20
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
 8002334:	460b      	mov	r3, r1
 8002336:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	695b      	ldr	r3, [r3, #20]
 800233c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800233e:	887a      	ldrh	r2, [r7, #2]
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	4013      	ands	r3, r2
 8002344:	041a      	lsls	r2, r3, #16
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	43d9      	mvns	r1, r3
 800234a:	887b      	ldrh	r3, [r7, #2]
 800234c:	400b      	ands	r3, r1
 800234e:	431a      	orrs	r2, r3
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	619a      	str	r2, [r3, #24]
}
 8002354:	bf00      	nop
 8002356:	3714      	adds	r7, #20
 8002358:	46bd      	mov	sp, r7
 800235a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235e:	4770      	bx	lr

08002360 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002360:	b480      	push	{r7}
 8002362:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002364:	4b04      	ldr	r3, [pc, #16]	@ (8002378 <HAL_PWREx_GetVoltageRange+0x18>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800236c:	4618      	mov	r0, r3
 800236e:	46bd      	mov	sp, r7
 8002370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002374:	4770      	bx	lr
 8002376:	bf00      	nop
 8002378:	40007000 	.word	0x40007000

0800237c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800237c:	b480      	push	{r7}
 800237e:	b085      	sub	sp, #20
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800238a:	d130      	bne.n	80023ee <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800238c:	4b23      	ldr	r3, [pc, #140]	@ (800241c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002394:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002398:	d038      	beq.n	800240c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800239a:	4b20      	ldr	r3, [pc, #128]	@ (800241c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80023a2:	4a1e      	ldr	r2, [pc, #120]	@ (800241c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023a4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80023a8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80023aa:	4b1d      	ldr	r3, [pc, #116]	@ (8002420 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	2232      	movs	r2, #50	@ 0x32
 80023b0:	fb02 f303 	mul.w	r3, r2, r3
 80023b4:	4a1b      	ldr	r2, [pc, #108]	@ (8002424 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80023b6:	fba2 2303 	umull	r2, r3, r2, r3
 80023ba:	0c9b      	lsrs	r3, r3, #18
 80023bc:	3301      	adds	r3, #1
 80023be:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80023c0:	e002      	b.n	80023c8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	3b01      	subs	r3, #1
 80023c6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80023c8:	4b14      	ldr	r3, [pc, #80]	@ (800241c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023ca:	695b      	ldr	r3, [r3, #20]
 80023cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80023d4:	d102      	bne.n	80023dc <HAL_PWREx_ControlVoltageScaling+0x60>
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d1f2      	bne.n	80023c2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80023dc:	4b0f      	ldr	r3, [pc, #60]	@ (800241c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023de:	695b      	ldr	r3, [r3, #20]
 80023e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80023e8:	d110      	bne.n	800240c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80023ea:	2303      	movs	r3, #3
 80023ec:	e00f      	b.n	800240e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80023ee:	4b0b      	ldr	r3, [pc, #44]	@ (800241c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80023f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80023fa:	d007      	beq.n	800240c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80023fc:	4b07      	ldr	r3, [pc, #28]	@ (800241c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002404:	4a05      	ldr	r2, [pc, #20]	@ (800241c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002406:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800240a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800240c:	2300      	movs	r3, #0
}
 800240e:	4618      	mov	r0, r3
 8002410:	3714      	adds	r7, #20
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr
 800241a:	bf00      	nop
 800241c:	40007000 	.word	0x40007000
 8002420:	20000000 	.word	0x20000000
 8002424:	431bde83 	.word	0x431bde83

08002428 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b088      	sub	sp, #32
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d101      	bne.n	800243a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	e3ca      	b.n	8002bd0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800243a:	4b97      	ldr	r3, [pc, #604]	@ (8002698 <HAL_RCC_OscConfig+0x270>)
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	f003 030c 	and.w	r3, r3, #12
 8002442:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002444:	4b94      	ldr	r3, [pc, #592]	@ (8002698 <HAL_RCC_OscConfig+0x270>)
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	f003 0303 	and.w	r3, r3, #3
 800244c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f003 0310 	and.w	r3, r3, #16
 8002456:	2b00      	cmp	r3, #0
 8002458:	f000 80e4 	beq.w	8002624 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800245c:	69bb      	ldr	r3, [r7, #24]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d007      	beq.n	8002472 <HAL_RCC_OscConfig+0x4a>
 8002462:	69bb      	ldr	r3, [r7, #24]
 8002464:	2b0c      	cmp	r3, #12
 8002466:	f040 808b 	bne.w	8002580 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	2b01      	cmp	r3, #1
 800246e:	f040 8087 	bne.w	8002580 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002472:	4b89      	ldr	r3, [pc, #548]	@ (8002698 <HAL_RCC_OscConfig+0x270>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 0302 	and.w	r3, r3, #2
 800247a:	2b00      	cmp	r3, #0
 800247c:	d005      	beq.n	800248a <HAL_RCC_OscConfig+0x62>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	699b      	ldr	r3, [r3, #24]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d101      	bne.n	800248a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	e3a2      	b.n	8002bd0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6a1a      	ldr	r2, [r3, #32]
 800248e:	4b82      	ldr	r3, [pc, #520]	@ (8002698 <HAL_RCC_OscConfig+0x270>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 0308 	and.w	r3, r3, #8
 8002496:	2b00      	cmp	r3, #0
 8002498:	d004      	beq.n	80024a4 <HAL_RCC_OscConfig+0x7c>
 800249a:	4b7f      	ldr	r3, [pc, #508]	@ (8002698 <HAL_RCC_OscConfig+0x270>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80024a2:	e005      	b.n	80024b0 <HAL_RCC_OscConfig+0x88>
 80024a4:	4b7c      	ldr	r3, [pc, #496]	@ (8002698 <HAL_RCC_OscConfig+0x270>)
 80024a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80024aa:	091b      	lsrs	r3, r3, #4
 80024ac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d223      	bcs.n	80024fc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6a1b      	ldr	r3, [r3, #32]
 80024b8:	4618      	mov	r0, r3
 80024ba:	f000 fd89 	bl	8002fd0 <RCC_SetFlashLatencyFromMSIRange>
 80024be:	4603      	mov	r3, r0
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d001      	beq.n	80024c8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80024c4:	2301      	movs	r3, #1
 80024c6:	e383      	b.n	8002bd0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80024c8:	4b73      	ldr	r3, [pc, #460]	@ (8002698 <HAL_RCC_OscConfig+0x270>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a72      	ldr	r2, [pc, #456]	@ (8002698 <HAL_RCC_OscConfig+0x270>)
 80024ce:	f043 0308 	orr.w	r3, r3, #8
 80024d2:	6013      	str	r3, [r2, #0]
 80024d4:	4b70      	ldr	r3, [pc, #448]	@ (8002698 <HAL_RCC_OscConfig+0x270>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6a1b      	ldr	r3, [r3, #32]
 80024e0:	496d      	ldr	r1, [pc, #436]	@ (8002698 <HAL_RCC_OscConfig+0x270>)
 80024e2:	4313      	orrs	r3, r2
 80024e4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80024e6:	4b6c      	ldr	r3, [pc, #432]	@ (8002698 <HAL_RCC_OscConfig+0x270>)
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	69db      	ldr	r3, [r3, #28]
 80024f2:	021b      	lsls	r3, r3, #8
 80024f4:	4968      	ldr	r1, [pc, #416]	@ (8002698 <HAL_RCC_OscConfig+0x270>)
 80024f6:	4313      	orrs	r3, r2
 80024f8:	604b      	str	r3, [r1, #4]
 80024fa:	e025      	b.n	8002548 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80024fc:	4b66      	ldr	r3, [pc, #408]	@ (8002698 <HAL_RCC_OscConfig+0x270>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a65      	ldr	r2, [pc, #404]	@ (8002698 <HAL_RCC_OscConfig+0x270>)
 8002502:	f043 0308 	orr.w	r3, r3, #8
 8002506:	6013      	str	r3, [r2, #0]
 8002508:	4b63      	ldr	r3, [pc, #396]	@ (8002698 <HAL_RCC_OscConfig+0x270>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6a1b      	ldr	r3, [r3, #32]
 8002514:	4960      	ldr	r1, [pc, #384]	@ (8002698 <HAL_RCC_OscConfig+0x270>)
 8002516:	4313      	orrs	r3, r2
 8002518:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800251a:	4b5f      	ldr	r3, [pc, #380]	@ (8002698 <HAL_RCC_OscConfig+0x270>)
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	69db      	ldr	r3, [r3, #28]
 8002526:	021b      	lsls	r3, r3, #8
 8002528:	495b      	ldr	r1, [pc, #364]	@ (8002698 <HAL_RCC_OscConfig+0x270>)
 800252a:	4313      	orrs	r3, r2
 800252c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800252e:	69bb      	ldr	r3, [r7, #24]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d109      	bne.n	8002548 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6a1b      	ldr	r3, [r3, #32]
 8002538:	4618      	mov	r0, r3
 800253a:	f000 fd49 	bl	8002fd0 <RCC_SetFlashLatencyFromMSIRange>
 800253e:	4603      	mov	r3, r0
 8002540:	2b00      	cmp	r3, #0
 8002542:	d001      	beq.n	8002548 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002544:	2301      	movs	r3, #1
 8002546:	e343      	b.n	8002bd0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002548:	f000 fc7e 	bl	8002e48 <HAL_RCC_GetSysClockFreq>
 800254c:	4602      	mov	r2, r0
 800254e:	4b52      	ldr	r3, [pc, #328]	@ (8002698 <HAL_RCC_OscConfig+0x270>)
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	091b      	lsrs	r3, r3, #4
 8002554:	f003 030f 	and.w	r3, r3, #15
 8002558:	4950      	ldr	r1, [pc, #320]	@ (800269c <HAL_RCC_OscConfig+0x274>)
 800255a:	5ccb      	ldrb	r3, [r1, r3]
 800255c:	f003 031f 	and.w	r3, r3, #31
 8002560:	fa22 f303 	lsr.w	r3, r2, r3
 8002564:	4a4e      	ldr	r2, [pc, #312]	@ (80026a0 <HAL_RCC_OscConfig+0x278>)
 8002566:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002568:	4b4e      	ldr	r3, [pc, #312]	@ (80026a4 <HAL_RCC_OscConfig+0x27c>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4618      	mov	r0, r3
 800256e:	f7ff f9b1 	bl	80018d4 <HAL_InitTick>
 8002572:	4603      	mov	r3, r0
 8002574:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002576:	7bfb      	ldrb	r3, [r7, #15]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d052      	beq.n	8002622 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800257c:	7bfb      	ldrb	r3, [r7, #15]
 800257e:	e327      	b.n	8002bd0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	699b      	ldr	r3, [r3, #24]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d032      	beq.n	80025ee <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002588:	4b43      	ldr	r3, [pc, #268]	@ (8002698 <HAL_RCC_OscConfig+0x270>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a42      	ldr	r2, [pc, #264]	@ (8002698 <HAL_RCC_OscConfig+0x270>)
 800258e:	f043 0301 	orr.w	r3, r3, #1
 8002592:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002594:	f7ff f9ee 	bl	8001974 <HAL_GetTick>
 8002598:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800259a:	e008      	b.n	80025ae <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800259c:	f7ff f9ea 	bl	8001974 <HAL_GetTick>
 80025a0:	4602      	mov	r2, r0
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	1ad3      	subs	r3, r2, r3
 80025a6:	2b02      	cmp	r3, #2
 80025a8:	d901      	bls.n	80025ae <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80025aa:	2303      	movs	r3, #3
 80025ac:	e310      	b.n	8002bd0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80025ae:	4b3a      	ldr	r3, [pc, #232]	@ (8002698 <HAL_RCC_OscConfig+0x270>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 0302 	and.w	r3, r3, #2
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d0f0      	beq.n	800259c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80025ba:	4b37      	ldr	r3, [pc, #220]	@ (8002698 <HAL_RCC_OscConfig+0x270>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a36      	ldr	r2, [pc, #216]	@ (8002698 <HAL_RCC_OscConfig+0x270>)
 80025c0:	f043 0308 	orr.w	r3, r3, #8
 80025c4:	6013      	str	r3, [r2, #0]
 80025c6:	4b34      	ldr	r3, [pc, #208]	@ (8002698 <HAL_RCC_OscConfig+0x270>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6a1b      	ldr	r3, [r3, #32]
 80025d2:	4931      	ldr	r1, [pc, #196]	@ (8002698 <HAL_RCC_OscConfig+0x270>)
 80025d4:	4313      	orrs	r3, r2
 80025d6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80025d8:	4b2f      	ldr	r3, [pc, #188]	@ (8002698 <HAL_RCC_OscConfig+0x270>)
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	69db      	ldr	r3, [r3, #28]
 80025e4:	021b      	lsls	r3, r3, #8
 80025e6:	492c      	ldr	r1, [pc, #176]	@ (8002698 <HAL_RCC_OscConfig+0x270>)
 80025e8:	4313      	orrs	r3, r2
 80025ea:	604b      	str	r3, [r1, #4]
 80025ec:	e01a      	b.n	8002624 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80025ee:	4b2a      	ldr	r3, [pc, #168]	@ (8002698 <HAL_RCC_OscConfig+0x270>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a29      	ldr	r2, [pc, #164]	@ (8002698 <HAL_RCC_OscConfig+0x270>)
 80025f4:	f023 0301 	bic.w	r3, r3, #1
 80025f8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80025fa:	f7ff f9bb 	bl	8001974 <HAL_GetTick>
 80025fe:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002600:	e008      	b.n	8002614 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002602:	f7ff f9b7 	bl	8001974 <HAL_GetTick>
 8002606:	4602      	mov	r2, r0
 8002608:	693b      	ldr	r3, [r7, #16]
 800260a:	1ad3      	subs	r3, r2, r3
 800260c:	2b02      	cmp	r3, #2
 800260e:	d901      	bls.n	8002614 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002610:	2303      	movs	r3, #3
 8002612:	e2dd      	b.n	8002bd0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002614:	4b20      	ldr	r3, [pc, #128]	@ (8002698 <HAL_RCC_OscConfig+0x270>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f003 0302 	and.w	r3, r3, #2
 800261c:	2b00      	cmp	r3, #0
 800261e:	d1f0      	bne.n	8002602 <HAL_RCC_OscConfig+0x1da>
 8002620:	e000      	b.n	8002624 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002622:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f003 0301 	and.w	r3, r3, #1
 800262c:	2b00      	cmp	r3, #0
 800262e:	d074      	beq.n	800271a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002630:	69bb      	ldr	r3, [r7, #24]
 8002632:	2b08      	cmp	r3, #8
 8002634:	d005      	beq.n	8002642 <HAL_RCC_OscConfig+0x21a>
 8002636:	69bb      	ldr	r3, [r7, #24]
 8002638:	2b0c      	cmp	r3, #12
 800263a:	d10e      	bne.n	800265a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	2b03      	cmp	r3, #3
 8002640:	d10b      	bne.n	800265a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002642:	4b15      	ldr	r3, [pc, #84]	@ (8002698 <HAL_RCC_OscConfig+0x270>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800264a:	2b00      	cmp	r3, #0
 800264c:	d064      	beq.n	8002718 <HAL_RCC_OscConfig+0x2f0>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d160      	bne.n	8002718 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	e2ba      	b.n	8002bd0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002662:	d106      	bne.n	8002672 <HAL_RCC_OscConfig+0x24a>
 8002664:	4b0c      	ldr	r3, [pc, #48]	@ (8002698 <HAL_RCC_OscConfig+0x270>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a0b      	ldr	r2, [pc, #44]	@ (8002698 <HAL_RCC_OscConfig+0x270>)
 800266a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800266e:	6013      	str	r3, [r2, #0]
 8002670:	e026      	b.n	80026c0 <HAL_RCC_OscConfig+0x298>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800267a:	d115      	bne.n	80026a8 <HAL_RCC_OscConfig+0x280>
 800267c:	4b06      	ldr	r3, [pc, #24]	@ (8002698 <HAL_RCC_OscConfig+0x270>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a05      	ldr	r2, [pc, #20]	@ (8002698 <HAL_RCC_OscConfig+0x270>)
 8002682:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002686:	6013      	str	r3, [r2, #0]
 8002688:	4b03      	ldr	r3, [pc, #12]	@ (8002698 <HAL_RCC_OscConfig+0x270>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a02      	ldr	r2, [pc, #8]	@ (8002698 <HAL_RCC_OscConfig+0x270>)
 800268e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002692:	6013      	str	r3, [r2, #0]
 8002694:	e014      	b.n	80026c0 <HAL_RCC_OscConfig+0x298>
 8002696:	bf00      	nop
 8002698:	40021000 	.word	0x40021000
 800269c:	08009e80 	.word	0x08009e80
 80026a0:	20000000 	.word	0x20000000
 80026a4:	20000004 	.word	0x20000004
 80026a8:	4ba0      	ldr	r3, [pc, #640]	@ (800292c <HAL_RCC_OscConfig+0x504>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a9f      	ldr	r2, [pc, #636]	@ (800292c <HAL_RCC_OscConfig+0x504>)
 80026ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026b2:	6013      	str	r3, [r2, #0]
 80026b4:	4b9d      	ldr	r3, [pc, #628]	@ (800292c <HAL_RCC_OscConfig+0x504>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a9c      	ldr	r2, [pc, #624]	@ (800292c <HAL_RCC_OscConfig+0x504>)
 80026ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80026be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d013      	beq.n	80026f0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026c8:	f7ff f954 	bl	8001974 <HAL_GetTick>
 80026cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026ce:	e008      	b.n	80026e2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026d0:	f7ff f950 	bl	8001974 <HAL_GetTick>
 80026d4:	4602      	mov	r2, r0
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	1ad3      	subs	r3, r2, r3
 80026da:	2b64      	cmp	r3, #100	@ 0x64
 80026dc:	d901      	bls.n	80026e2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80026de:	2303      	movs	r3, #3
 80026e0:	e276      	b.n	8002bd0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026e2:	4b92      	ldr	r3, [pc, #584]	@ (800292c <HAL_RCC_OscConfig+0x504>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d0f0      	beq.n	80026d0 <HAL_RCC_OscConfig+0x2a8>
 80026ee:	e014      	b.n	800271a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026f0:	f7ff f940 	bl	8001974 <HAL_GetTick>
 80026f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80026f6:	e008      	b.n	800270a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026f8:	f7ff f93c 	bl	8001974 <HAL_GetTick>
 80026fc:	4602      	mov	r2, r0
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	1ad3      	subs	r3, r2, r3
 8002702:	2b64      	cmp	r3, #100	@ 0x64
 8002704:	d901      	bls.n	800270a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002706:	2303      	movs	r3, #3
 8002708:	e262      	b.n	8002bd0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800270a:	4b88      	ldr	r3, [pc, #544]	@ (800292c <HAL_RCC_OscConfig+0x504>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002712:	2b00      	cmp	r3, #0
 8002714:	d1f0      	bne.n	80026f8 <HAL_RCC_OscConfig+0x2d0>
 8002716:	e000      	b.n	800271a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002718:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 0302 	and.w	r3, r3, #2
 8002722:	2b00      	cmp	r3, #0
 8002724:	d060      	beq.n	80027e8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002726:	69bb      	ldr	r3, [r7, #24]
 8002728:	2b04      	cmp	r3, #4
 800272a:	d005      	beq.n	8002738 <HAL_RCC_OscConfig+0x310>
 800272c:	69bb      	ldr	r3, [r7, #24]
 800272e:	2b0c      	cmp	r3, #12
 8002730:	d119      	bne.n	8002766 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	2b02      	cmp	r3, #2
 8002736:	d116      	bne.n	8002766 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002738:	4b7c      	ldr	r3, [pc, #496]	@ (800292c <HAL_RCC_OscConfig+0x504>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002740:	2b00      	cmp	r3, #0
 8002742:	d005      	beq.n	8002750 <HAL_RCC_OscConfig+0x328>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	68db      	ldr	r3, [r3, #12]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d101      	bne.n	8002750 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800274c:	2301      	movs	r3, #1
 800274e:	e23f      	b.n	8002bd0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002750:	4b76      	ldr	r3, [pc, #472]	@ (800292c <HAL_RCC_OscConfig+0x504>)
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	691b      	ldr	r3, [r3, #16]
 800275c:	061b      	lsls	r3, r3, #24
 800275e:	4973      	ldr	r1, [pc, #460]	@ (800292c <HAL_RCC_OscConfig+0x504>)
 8002760:	4313      	orrs	r3, r2
 8002762:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002764:	e040      	b.n	80027e8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	68db      	ldr	r3, [r3, #12]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d023      	beq.n	80027b6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800276e:	4b6f      	ldr	r3, [pc, #444]	@ (800292c <HAL_RCC_OscConfig+0x504>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a6e      	ldr	r2, [pc, #440]	@ (800292c <HAL_RCC_OscConfig+0x504>)
 8002774:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002778:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800277a:	f7ff f8fb 	bl	8001974 <HAL_GetTick>
 800277e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002780:	e008      	b.n	8002794 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002782:	f7ff f8f7 	bl	8001974 <HAL_GetTick>
 8002786:	4602      	mov	r2, r0
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	1ad3      	subs	r3, r2, r3
 800278c:	2b02      	cmp	r3, #2
 800278e:	d901      	bls.n	8002794 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002790:	2303      	movs	r3, #3
 8002792:	e21d      	b.n	8002bd0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002794:	4b65      	ldr	r3, [pc, #404]	@ (800292c <HAL_RCC_OscConfig+0x504>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800279c:	2b00      	cmp	r3, #0
 800279e:	d0f0      	beq.n	8002782 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027a0:	4b62      	ldr	r3, [pc, #392]	@ (800292c <HAL_RCC_OscConfig+0x504>)
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	691b      	ldr	r3, [r3, #16]
 80027ac:	061b      	lsls	r3, r3, #24
 80027ae:	495f      	ldr	r1, [pc, #380]	@ (800292c <HAL_RCC_OscConfig+0x504>)
 80027b0:	4313      	orrs	r3, r2
 80027b2:	604b      	str	r3, [r1, #4]
 80027b4:	e018      	b.n	80027e8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027b6:	4b5d      	ldr	r3, [pc, #372]	@ (800292c <HAL_RCC_OscConfig+0x504>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a5c      	ldr	r2, [pc, #368]	@ (800292c <HAL_RCC_OscConfig+0x504>)
 80027bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80027c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027c2:	f7ff f8d7 	bl	8001974 <HAL_GetTick>
 80027c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80027c8:	e008      	b.n	80027dc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027ca:	f7ff f8d3 	bl	8001974 <HAL_GetTick>
 80027ce:	4602      	mov	r2, r0
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	1ad3      	subs	r3, r2, r3
 80027d4:	2b02      	cmp	r3, #2
 80027d6:	d901      	bls.n	80027dc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80027d8:	2303      	movs	r3, #3
 80027da:	e1f9      	b.n	8002bd0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80027dc:	4b53      	ldr	r3, [pc, #332]	@ (800292c <HAL_RCC_OscConfig+0x504>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d1f0      	bne.n	80027ca <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f003 0308 	and.w	r3, r3, #8
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d03c      	beq.n	800286e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	695b      	ldr	r3, [r3, #20]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d01c      	beq.n	8002836 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027fc:	4b4b      	ldr	r3, [pc, #300]	@ (800292c <HAL_RCC_OscConfig+0x504>)
 80027fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002802:	4a4a      	ldr	r2, [pc, #296]	@ (800292c <HAL_RCC_OscConfig+0x504>)
 8002804:	f043 0301 	orr.w	r3, r3, #1
 8002808:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800280c:	f7ff f8b2 	bl	8001974 <HAL_GetTick>
 8002810:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002812:	e008      	b.n	8002826 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002814:	f7ff f8ae 	bl	8001974 <HAL_GetTick>
 8002818:	4602      	mov	r2, r0
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	1ad3      	subs	r3, r2, r3
 800281e:	2b02      	cmp	r3, #2
 8002820:	d901      	bls.n	8002826 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002822:	2303      	movs	r3, #3
 8002824:	e1d4      	b.n	8002bd0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002826:	4b41      	ldr	r3, [pc, #260]	@ (800292c <HAL_RCC_OscConfig+0x504>)
 8002828:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800282c:	f003 0302 	and.w	r3, r3, #2
 8002830:	2b00      	cmp	r3, #0
 8002832:	d0ef      	beq.n	8002814 <HAL_RCC_OscConfig+0x3ec>
 8002834:	e01b      	b.n	800286e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002836:	4b3d      	ldr	r3, [pc, #244]	@ (800292c <HAL_RCC_OscConfig+0x504>)
 8002838:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800283c:	4a3b      	ldr	r2, [pc, #236]	@ (800292c <HAL_RCC_OscConfig+0x504>)
 800283e:	f023 0301 	bic.w	r3, r3, #1
 8002842:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002846:	f7ff f895 	bl	8001974 <HAL_GetTick>
 800284a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800284c:	e008      	b.n	8002860 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800284e:	f7ff f891 	bl	8001974 <HAL_GetTick>
 8002852:	4602      	mov	r2, r0
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	1ad3      	subs	r3, r2, r3
 8002858:	2b02      	cmp	r3, #2
 800285a:	d901      	bls.n	8002860 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800285c:	2303      	movs	r3, #3
 800285e:	e1b7      	b.n	8002bd0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002860:	4b32      	ldr	r3, [pc, #200]	@ (800292c <HAL_RCC_OscConfig+0x504>)
 8002862:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002866:	f003 0302 	and.w	r3, r3, #2
 800286a:	2b00      	cmp	r3, #0
 800286c:	d1ef      	bne.n	800284e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f003 0304 	and.w	r3, r3, #4
 8002876:	2b00      	cmp	r3, #0
 8002878:	f000 80a6 	beq.w	80029c8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800287c:	2300      	movs	r3, #0
 800287e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002880:	4b2a      	ldr	r3, [pc, #168]	@ (800292c <HAL_RCC_OscConfig+0x504>)
 8002882:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002884:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002888:	2b00      	cmp	r3, #0
 800288a:	d10d      	bne.n	80028a8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800288c:	4b27      	ldr	r3, [pc, #156]	@ (800292c <HAL_RCC_OscConfig+0x504>)
 800288e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002890:	4a26      	ldr	r2, [pc, #152]	@ (800292c <HAL_RCC_OscConfig+0x504>)
 8002892:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002896:	6593      	str	r3, [r2, #88]	@ 0x58
 8002898:	4b24      	ldr	r3, [pc, #144]	@ (800292c <HAL_RCC_OscConfig+0x504>)
 800289a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800289c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028a0:	60bb      	str	r3, [r7, #8]
 80028a2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028a4:	2301      	movs	r3, #1
 80028a6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028a8:	4b21      	ldr	r3, [pc, #132]	@ (8002930 <HAL_RCC_OscConfig+0x508>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d118      	bne.n	80028e6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80028b4:	4b1e      	ldr	r3, [pc, #120]	@ (8002930 <HAL_RCC_OscConfig+0x508>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a1d      	ldr	r2, [pc, #116]	@ (8002930 <HAL_RCC_OscConfig+0x508>)
 80028ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028be:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028c0:	f7ff f858 	bl	8001974 <HAL_GetTick>
 80028c4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028c6:	e008      	b.n	80028da <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028c8:	f7ff f854 	bl	8001974 <HAL_GetTick>
 80028cc:	4602      	mov	r2, r0
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	1ad3      	subs	r3, r2, r3
 80028d2:	2b02      	cmp	r3, #2
 80028d4:	d901      	bls.n	80028da <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80028d6:	2303      	movs	r3, #3
 80028d8:	e17a      	b.n	8002bd0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028da:	4b15      	ldr	r3, [pc, #84]	@ (8002930 <HAL_RCC_OscConfig+0x508>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d0f0      	beq.n	80028c8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	2b01      	cmp	r3, #1
 80028ec:	d108      	bne.n	8002900 <HAL_RCC_OscConfig+0x4d8>
 80028ee:	4b0f      	ldr	r3, [pc, #60]	@ (800292c <HAL_RCC_OscConfig+0x504>)
 80028f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028f4:	4a0d      	ldr	r2, [pc, #52]	@ (800292c <HAL_RCC_OscConfig+0x504>)
 80028f6:	f043 0301 	orr.w	r3, r3, #1
 80028fa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80028fe:	e029      	b.n	8002954 <HAL_RCC_OscConfig+0x52c>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	2b05      	cmp	r3, #5
 8002906:	d115      	bne.n	8002934 <HAL_RCC_OscConfig+0x50c>
 8002908:	4b08      	ldr	r3, [pc, #32]	@ (800292c <HAL_RCC_OscConfig+0x504>)
 800290a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800290e:	4a07      	ldr	r2, [pc, #28]	@ (800292c <HAL_RCC_OscConfig+0x504>)
 8002910:	f043 0304 	orr.w	r3, r3, #4
 8002914:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002918:	4b04      	ldr	r3, [pc, #16]	@ (800292c <HAL_RCC_OscConfig+0x504>)
 800291a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800291e:	4a03      	ldr	r2, [pc, #12]	@ (800292c <HAL_RCC_OscConfig+0x504>)
 8002920:	f043 0301 	orr.w	r3, r3, #1
 8002924:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002928:	e014      	b.n	8002954 <HAL_RCC_OscConfig+0x52c>
 800292a:	bf00      	nop
 800292c:	40021000 	.word	0x40021000
 8002930:	40007000 	.word	0x40007000
 8002934:	4b9c      	ldr	r3, [pc, #624]	@ (8002ba8 <HAL_RCC_OscConfig+0x780>)
 8002936:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800293a:	4a9b      	ldr	r2, [pc, #620]	@ (8002ba8 <HAL_RCC_OscConfig+0x780>)
 800293c:	f023 0301 	bic.w	r3, r3, #1
 8002940:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002944:	4b98      	ldr	r3, [pc, #608]	@ (8002ba8 <HAL_RCC_OscConfig+0x780>)
 8002946:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800294a:	4a97      	ldr	r2, [pc, #604]	@ (8002ba8 <HAL_RCC_OscConfig+0x780>)
 800294c:	f023 0304 	bic.w	r3, r3, #4
 8002950:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d016      	beq.n	800298a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800295c:	f7ff f80a 	bl	8001974 <HAL_GetTick>
 8002960:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002962:	e00a      	b.n	800297a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002964:	f7ff f806 	bl	8001974 <HAL_GetTick>
 8002968:	4602      	mov	r2, r0
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	1ad3      	subs	r3, r2, r3
 800296e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002972:	4293      	cmp	r3, r2
 8002974:	d901      	bls.n	800297a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002976:	2303      	movs	r3, #3
 8002978:	e12a      	b.n	8002bd0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800297a:	4b8b      	ldr	r3, [pc, #556]	@ (8002ba8 <HAL_RCC_OscConfig+0x780>)
 800297c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002980:	f003 0302 	and.w	r3, r3, #2
 8002984:	2b00      	cmp	r3, #0
 8002986:	d0ed      	beq.n	8002964 <HAL_RCC_OscConfig+0x53c>
 8002988:	e015      	b.n	80029b6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800298a:	f7fe fff3 	bl	8001974 <HAL_GetTick>
 800298e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002990:	e00a      	b.n	80029a8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002992:	f7fe ffef 	bl	8001974 <HAL_GetTick>
 8002996:	4602      	mov	r2, r0
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	1ad3      	subs	r3, r2, r3
 800299c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d901      	bls.n	80029a8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80029a4:	2303      	movs	r3, #3
 80029a6:	e113      	b.n	8002bd0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80029a8:	4b7f      	ldr	r3, [pc, #508]	@ (8002ba8 <HAL_RCC_OscConfig+0x780>)
 80029aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029ae:	f003 0302 	and.w	r3, r3, #2
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d1ed      	bne.n	8002992 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80029b6:	7ffb      	ldrb	r3, [r7, #31]
 80029b8:	2b01      	cmp	r3, #1
 80029ba:	d105      	bne.n	80029c8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029bc:	4b7a      	ldr	r3, [pc, #488]	@ (8002ba8 <HAL_RCC_OscConfig+0x780>)
 80029be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029c0:	4a79      	ldr	r2, [pc, #484]	@ (8002ba8 <HAL_RCC_OscConfig+0x780>)
 80029c2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80029c6:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	f000 80fe 	beq.w	8002bce <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029d6:	2b02      	cmp	r3, #2
 80029d8:	f040 80d0 	bne.w	8002b7c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80029dc:	4b72      	ldr	r3, [pc, #456]	@ (8002ba8 <HAL_RCC_OscConfig+0x780>)
 80029de:	68db      	ldr	r3, [r3, #12]
 80029e0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	f003 0203 	and.w	r2, r3, #3
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029ec:	429a      	cmp	r2, r3
 80029ee:	d130      	bne.n	8002a52 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029fa:	3b01      	subs	r3, #1
 80029fc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80029fe:	429a      	cmp	r2, r3
 8002a00:	d127      	bne.n	8002a52 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a0c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002a0e:	429a      	cmp	r2, r3
 8002a10:	d11f      	bne.n	8002a52 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a18:	687a      	ldr	r2, [r7, #4]
 8002a1a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002a1c:	2a07      	cmp	r2, #7
 8002a1e:	bf14      	ite	ne
 8002a20:	2201      	movne	r2, #1
 8002a22:	2200      	moveq	r2, #0
 8002a24:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d113      	bne.n	8002a52 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a34:	085b      	lsrs	r3, r3, #1
 8002a36:	3b01      	subs	r3, #1
 8002a38:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002a3a:	429a      	cmp	r2, r3
 8002a3c:	d109      	bne.n	8002a52 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a48:	085b      	lsrs	r3, r3, #1
 8002a4a:	3b01      	subs	r3, #1
 8002a4c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a4e:	429a      	cmp	r2, r3
 8002a50:	d06e      	beq.n	8002b30 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002a52:	69bb      	ldr	r3, [r7, #24]
 8002a54:	2b0c      	cmp	r3, #12
 8002a56:	d069      	beq.n	8002b2c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002a58:	4b53      	ldr	r3, [pc, #332]	@ (8002ba8 <HAL_RCC_OscConfig+0x780>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d105      	bne.n	8002a70 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002a64:	4b50      	ldr	r3, [pc, #320]	@ (8002ba8 <HAL_RCC_OscConfig+0x780>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d001      	beq.n	8002a74 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002a70:	2301      	movs	r3, #1
 8002a72:	e0ad      	b.n	8002bd0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002a74:	4b4c      	ldr	r3, [pc, #304]	@ (8002ba8 <HAL_RCC_OscConfig+0x780>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a4b      	ldr	r2, [pc, #300]	@ (8002ba8 <HAL_RCC_OscConfig+0x780>)
 8002a7a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002a7e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002a80:	f7fe ff78 	bl	8001974 <HAL_GetTick>
 8002a84:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a86:	e008      	b.n	8002a9a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a88:	f7fe ff74 	bl	8001974 <HAL_GetTick>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	1ad3      	subs	r3, r2, r3
 8002a92:	2b02      	cmp	r3, #2
 8002a94:	d901      	bls.n	8002a9a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002a96:	2303      	movs	r3, #3
 8002a98:	e09a      	b.n	8002bd0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a9a:	4b43      	ldr	r3, [pc, #268]	@ (8002ba8 <HAL_RCC_OscConfig+0x780>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d1f0      	bne.n	8002a88 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002aa6:	4b40      	ldr	r3, [pc, #256]	@ (8002ba8 <HAL_RCC_OscConfig+0x780>)
 8002aa8:	68da      	ldr	r2, [r3, #12]
 8002aaa:	4b40      	ldr	r3, [pc, #256]	@ (8002bac <HAL_RCC_OscConfig+0x784>)
 8002aac:	4013      	ands	r3, r2
 8002aae:	687a      	ldr	r2, [r7, #4]
 8002ab0:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002ab2:	687a      	ldr	r2, [r7, #4]
 8002ab4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002ab6:	3a01      	subs	r2, #1
 8002ab8:	0112      	lsls	r2, r2, #4
 8002aba:	4311      	orrs	r1, r2
 8002abc:	687a      	ldr	r2, [r7, #4]
 8002abe:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002ac0:	0212      	lsls	r2, r2, #8
 8002ac2:	4311      	orrs	r1, r2
 8002ac4:	687a      	ldr	r2, [r7, #4]
 8002ac6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002ac8:	0852      	lsrs	r2, r2, #1
 8002aca:	3a01      	subs	r2, #1
 8002acc:	0552      	lsls	r2, r2, #21
 8002ace:	4311      	orrs	r1, r2
 8002ad0:	687a      	ldr	r2, [r7, #4]
 8002ad2:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002ad4:	0852      	lsrs	r2, r2, #1
 8002ad6:	3a01      	subs	r2, #1
 8002ad8:	0652      	lsls	r2, r2, #25
 8002ada:	4311      	orrs	r1, r2
 8002adc:	687a      	ldr	r2, [r7, #4]
 8002ade:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002ae0:	0912      	lsrs	r2, r2, #4
 8002ae2:	0452      	lsls	r2, r2, #17
 8002ae4:	430a      	orrs	r2, r1
 8002ae6:	4930      	ldr	r1, [pc, #192]	@ (8002ba8 <HAL_RCC_OscConfig+0x780>)
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002aec:	4b2e      	ldr	r3, [pc, #184]	@ (8002ba8 <HAL_RCC_OscConfig+0x780>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a2d      	ldr	r2, [pc, #180]	@ (8002ba8 <HAL_RCC_OscConfig+0x780>)
 8002af2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002af6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002af8:	4b2b      	ldr	r3, [pc, #172]	@ (8002ba8 <HAL_RCC_OscConfig+0x780>)
 8002afa:	68db      	ldr	r3, [r3, #12]
 8002afc:	4a2a      	ldr	r2, [pc, #168]	@ (8002ba8 <HAL_RCC_OscConfig+0x780>)
 8002afe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002b02:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002b04:	f7fe ff36 	bl	8001974 <HAL_GetTick>
 8002b08:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b0a:	e008      	b.n	8002b1e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b0c:	f7fe ff32 	bl	8001974 <HAL_GetTick>
 8002b10:	4602      	mov	r2, r0
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	1ad3      	subs	r3, r2, r3
 8002b16:	2b02      	cmp	r3, #2
 8002b18:	d901      	bls.n	8002b1e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002b1a:	2303      	movs	r3, #3
 8002b1c:	e058      	b.n	8002bd0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b1e:	4b22      	ldr	r3, [pc, #136]	@ (8002ba8 <HAL_RCC_OscConfig+0x780>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d0f0      	beq.n	8002b0c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b2a:	e050      	b.n	8002bce <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	e04f      	b.n	8002bd0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b30:	4b1d      	ldr	r3, [pc, #116]	@ (8002ba8 <HAL_RCC_OscConfig+0x780>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d148      	bne.n	8002bce <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002b3c:	4b1a      	ldr	r3, [pc, #104]	@ (8002ba8 <HAL_RCC_OscConfig+0x780>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a19      	ldr	r2, [pc, #100]	@ (8002ba8 <HAL_RCC_OscConfig+0x780>)
 8002b42:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002b46:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002b48:	4b17      	ldr	r3, [pc, #92]	@ (8002ba8 <HAL_RCC_OscConfig+0x780>)
 8002b4a:	68db      	ldr	r3, [r3, #12]
 8002b4c:	4a16      	ldr	r2, [pc, #88]	@ (8002ba8 <HAL_RCC_OscConfig+0x780>)
 8002b4e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002b52:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002b54:	f7fe ff0e 	bl	8001974 <HAL_GetTick>
 8002b58:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b5a:	e008      	b.n	8002b6e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b5c:	f7fe ff0a 	bl	8001974 <HAL_GetTick>
 8002b60:	4602      	mov	r2, r0
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	1ad3      	subs	r3, r2, r3
 8002b66:	2b02      	cmp	r3, #2
 8002b68:	d901      	bls.n	8002b6e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002b6a:	2303      	movs	r3, #3
 8002b6c:	e030      	b.n	8002bd0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b6e:	4b0e      	ldr	r3, [pc, #56]	@ (8002ba8 <HAL_RCC_OscConfig+0x780>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d0f0      	beq.n	8002b5c <HAL_RCC_OscConfig+0x734>
 8002b7a:	e028      	b.n	8002bce <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b7c:	69bb      	ldr	r3, [r7, #24]
 8002b7e:	2b0c      	cmp	r3, #12
 8002b80:	d023      	beq.n	8002bca <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b82:	4b09      	ldr	r3, [pc, #36]	@ (8002ba8 <HAL_RCC_OscConfig+0x780>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a08      	ldr	r2, [pc, #32]	@ (8002ba8 <HAL_RCC_OscConfig+0x780>)
 8002b88:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002b8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b8e:	f7fe fef1 	bl	8001974 <HAL_GetTick>
 8002b92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b94:	e00c      	b.n	8002bb0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b96:	f7fe feed 	bl	8001974 <HAL_GetTick>
 8002b9a:	4602      	mov	r2, r0
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	1ad3      	subs	r3, r2, r3
 8002ba0:	2b02      	cmp	r3, #2
 8002ba2:	d905      	bls.n	8002bb0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002ba4:	2303      	movs	r3, #3
 8002ba6:	e013      	b.n	8002bd0 <HAL_RCC_OscConfig+0x7a8>
 8002ba8:	40021000 	.word	0x40021000
 8002bac:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bb0:	4b09      	ldr	r3, [pc, #36]	@ (8002bd8 <HAL_RCC_OscConfig+0x7b0>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d1ec      	bne.n	8002b96 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002bbc:	4b06      	ldr	r3, [pc, #24]	@ (8002bd8 <HAL_RCC_OscConfig+0x7b0>)
 8002bbe:	68da      	ldr	r2, [r3, #12]
 8002bc0:	4905      	ldr	r1, [pc, #20]	@ (8002bd8 <HAL_RCC_OscConfig+0x7b0>)
 8002bc2:	4b06      	ldr	r3, [pc, #24]	@ (8002bdc <HAL_RCC_OscConfig+0x7b4>)
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	60cb      	str	r3, [r1, #12]
 8002bc8:	e001      	b.n	8002bce <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	e000      	b.n	8002bd0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002bce:	2300      	movs	r3, #0
}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	3720      	adds	r7, #32
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}
 8002bd8:	40021000 	.word	0x40021000
 8002bdc:	feeefffc 	.word	0xfeeefffc

08002be0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b084      	sub	sp, #16
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
 8002be8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d101      	bne.n	8002bf4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	e0e7      	b.n	8002dc4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002bf4:	4b75      	ldr	r3, [pc, #468]	@ (8002dcc <HAL_RCC_ClockConfig+0x1ec>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f003 0307 	and.w	r3, r3, #7
 8002bfc:	683a      	ldr	r2, [r7, #0]
 8002bfe:	429a      	cmp	r2, r3
 8002c00:	d910      	bls.n	8002c24 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c02:	4b72      	ldr	r3, [pc, #456]	@ (8002dcc <HAL_RCC_ClockConfig+0x1ec>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f023 0207 	bic.w	r2, r3, #7
 8002c0a:	4970      	ldr	r1, [pc, #448]	@ (8002dcc <HAL_RCC_ClockConfig+0x1ec>)
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c12:	4b6e      	ldr	r3, [pc, #440]	@ (8002dcc <HAL_RCC_ClockConfig+0x1ec>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f003 0307 	and.w	r3, r3, #7
 8002c1a:	683a      	ldr	r2, [r7, #0]
 8002c1c:	429a      	cmp	r2, r3
 8002c1e:	d001      	beq.n	8002c24 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002c20:	2301      	movs	r3, #1
 8002c22:	e0cf      	b.n	8002dc4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f003 0302 	and.w	r3, r3, #2
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d010      	beq.n	8002c52 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	689a      	ldr	r2, [r3, #8]
 8002c34:	4b66      	ldr	r3, [pc, #408]	@ (8002dd0 <HAL_RCC_ClockConfig+0x1f0>)
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	d908      	bls.n	8002c52 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c40:	4b63      	ldr	r3, [pc, #396]	@ (8002dd0 <HAL_RCC_ClockConfig+0x1f0>)
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	4960      	ldr	r1, [pc, #384]	@ (8002dd0 <HAL_RCC_ClockConfig+0x1f0>)
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f003 0301 	and.w	r3, r3, #1
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d04c      	beq.n	8002cf8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	2b03      	cmp	r3, #3
 8002c64:	d107      	bne.n	8002c76 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c66:	4b5a      	ldr	r3, [pc, #360]	@ (8002dd0 <HAL_RCC_ClockConfig+0x1f0>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d121      	bne.n	8002cb6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	e0a6      	b.n	8002dc4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	2b02      	cmp	r3, #2
 8002c7c:	d107      	bne.n	8002c8e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c7e:	4b54      	ldr	r3, [pc, #336]	@ (8002dd0 <HAL_RCC_ClockConfig+0x1f0>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d115      	bne.n	8002cb6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e09a      	b.n	8002dc4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d107      	bne.n	8002ca6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002c96:	4b4e      	ldr	r3, [pc, #312]	@ (8002dd0 <HAL_RCC_ClockConfig+0x1f0>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 0302 	and.w	r3, r3, #2
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d109      	bne.n	8002cb6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e08e      	b.n	8002dc4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ca6:	4b4a      	ldr	r3, [pc, #296]	@ (8002dd0 <HAL_RCC_ClockConfig+0x1f0>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d101      	bne.n	8002cb6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e086      	b.n	8002dc4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002cb6:	4b46      	ldr	r3, [pc, #280]	@ (8002dd0 <HAL_RCC_ClockConfig+0x1f0>)
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	f023 0203 	bic.w	r2, r3, #3
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	4943      	ldr	r1, [pc, #268]	@ (8002dd0 <HAL_RCC_ClockConfig+0x1f0>)
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cc8:	f7fe fe54 	bl	8001974 <HAL_GetTick>
 8002ccc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cce:	e00a      	b.n	8002ce6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cd0:	f7fe fe50 	bl	8001974 <HAL_GetTick>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	1ad3      	subs	r3, r2, r3
 8002cda:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d901      	bls.n	8002ce6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002ce2:	2303      	movs	r3, #3
 8002ce4:	e06e      	b.n	8002dc4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ce6:	4b3a      	ldr	r3, [pc, #232]	@ (8002dd0 <HAL_RCC_ClockConfig+0x1f0>)
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	f003 020c 	and.w	r2, r3, #12
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	009b      	lsls	r3, r3, #2
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	d1eb      	bne.n	8002cd0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f003 0302 	and.w	r3, r3, #2
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d010      	beq.n	8002d26 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	689a      	ldr	r2, [r3, #8]
 8002d08:	4b31      	ldr	r3, [pc, #196]	@ (8002dd0 <HAL_RCC_ClockConfig+0x1f0>)
 8002d0a:	689b      	ldr	r3, [r3, #8]
 8002d0c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002d10:	429a      	cmp	r2, r3
 8002d12:	d208      	bcs.n	8002d26 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d14:	4b2e      	ldr	r3, [pc, #184]	@ (8002dd0 <HAL_RCC_ClockConfig+0x1f0>)
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	492b      	ldr	r1, [pc, #172]	@ (8002dd0 <HAL_RCC_ClockConfig+0x1f0>)
 8002d22:	4313      	orrs	r3, r2
 8002d24:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d26:	4b29      	ldr	r3, [pc, #164]	@ (8002dcc <HAL_RCC_ClockConfig+0x1ec>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f003 0307 	and.w	r3, r3, #7
 8002d2e:	683a      	ldr	r2, [r7, #0]
 8002d30:	429a      	cmp	r2, r3
 8002d32:	d210      	bcs.n	8002d56 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d34:	4b25      	ldr	r3, [pc, #148]	@ (8002dcc <HAL_RCC_ClockConfig+0x1ec>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f023 0207 	bic.w	r2, r3, #7
 8002d3c:	4923      	ldr	r1, [pc, #140]	@ (8002dcc <HAL_RCC_ClockConfig+0x1ec>)
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	4313      	orrs	r3, r2
 8002d42:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d44:	4b21      	ldr	r3, [pc, #132]	@ (8002dcc <HAL_RCC_ClockConfig+0x1ec>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f003 0307 	and.w	r3, r3, #7
 8002d4c:	683a      	ldr	r2, [r7, #0]
 8002d4e:	429a      	cmp	r2, r3
 8002d50:	d001      	beq.n	8002d56 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	e036      	b.n	8002dc4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 0304 	and.w	r3, r3, #4
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d008      	beq.n	8002d74 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d62:	4b1b      	ldr	r3, [pc, #108]	@ (8002dd0 <HAL_RCC_ClockConfig+0x1f0>)
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	68db      	ldr	r3, [r3, #12]
 8002d6e:	4918      	ldr	r1, [pc, #96]	@ (8002dd0 <HAL_RCC_ClockConfig+0x1f0>)
 8002d70:	4313      	orrs	r3, r2
 8002d72:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f003 0308 	and.w	r3, r3, #8
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d009      	beq.n	8002d94 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d80:	4b13      	ldr	r3, [pc, #76]	@ (8002dd0 <HAL_RCC_ClockConfig+0x1f0>)
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	691b      	ldr	r3, [r3, #16]
 8002d8c:	00db      	lsls	r3, r3, #3
 8002d8e:	4910      	ldr	r1, [pc, #64]	@ (8002dd0 <HAL_RCC_ClockConfig+0x1f0>)
 8002d90:	4313      	orrs	r3, r2
 8002d92:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002d94:	f000 f858 	bl	8002e48 <HAL_RCC_GetSysClockFreq>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	4b0d      	ldr	r3, [pc, #52]	@ (8002dd0 <HAL_RCC_ClockConfig+0x1f0>)
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	091b      	lsrs	r3, r3, #4
 8002da0:	f003 030f 	and.w	r3, r3, #15
 8002da4:	490b      	ldr	r1, [pc, #44]	@ (8002dd4 <HAL_RCC_ClockConfig+0x1f4>)
 8002da6:	5ccb      	ldrb	r3, [r1, r3]
 8002da8:	f003 031f 	and.w	r3, r3, #31
 8002dac:	fa22 f303 	lsr.w	r3, r2, r3
 8002db0:	4a09      	ldr	r2, [pc, #36]	@ (8002dd8 <HAL_RCC_ClockConfig+0x1f8>)
 8002db2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002db4:	4b09      	ldr	r3, [pc, #36]	@ (8002ddc <HAL_RCC_ClockConfig+0x1fc>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4618      	mov	r0, r3
 8002dba:	f7fe fd8b 	bl	80018d4 <HAL_InitTick>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	72fb      	strb	r3, [r7, #11]

  return status;
 8002dc2:	7afb      	ldrb	r3, [r7, #11]
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	3710      	adds	r7, #16
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}
 8002dcc:	40022000 	.word	0x40022000
 8002dd0:	40021000 	.word	0x40021000
 8002dd4:	08009e80 	.word	0x08009e80
 8002dd8:	20000000 	.word	0x20000000
 8002ddc:	20000004 	.word	0x20000004

08002de0 <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16  division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig( uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b08a      	sub	sp, #40	@ 0x28
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	60f8      	str	r0, [r7, #12]
 8002de8:	60b9      	str	r1, [r7, #8]
 8002dea:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning if no assert_param check */
  UNUSED(RCC_MCOx);

  /* MCO Clock Enable */
  __MCO1_CLK_ENABLE();
 8002dec:	4b15      	ldr	r3, [pc, #84]	@ (8002e44 <HAL_RCC_MCOConfig+0x64>)
 8002dee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002df0:	4a14      	ldr	r2, [pc, #80]	@ (8002e44 <HAL_RCC_MCOConfig+0x64>)
 8002df2:	f043 0301 	orr.w	r3, r3, #1
 8002df6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002df8:	4b12      	ldr	r3, [pc, #72]	@ (8002e44 <HAL_RCC_MCOConfig+0x64>)
 8002dfa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002dfc:	f003 0301 	and.w	r3, r3, #1
 8002e00:	613b      	str	r3, [r7, #16]
 8002e02:	693b      	ldr	r3, [r7, #16]

  /* Configure the MCO1 pin in alternate function mode */
  GPIO_InitStruct.Pin = MCO1_PIN;
 8002e04:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002e08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e0a:	2302      	movs	r3, #2
 8002e0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002e0e:	2302      	movs	r3, #2
 8002e10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e12:	2300      	movs	r3, #0
 8002e14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8002e16:	2300      	movs	r3, #0
 8002e18:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8002e1a:	f107 0314 	add.w	r3, r7, #20
 8002e1e:	4619      	mov	r1, r3
 8002e20:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002e24:	f7ff f8d8 	bl	8001fd8 <HAL_GPIO_Init>

  /* Mask MCOSEL[] and MCOPRE[] bits then set MCO1 clock source and prescaler */
  MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCOSEL | RCC_CFGR_MCOPRE), (RCC_MCOSource | RCC_MCODiv ));
 8002e28:	4b06      	ldr	r3, [pc, #24]	@ (8002e44 <HAL_RCC_MCOConfig+0x64>)
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	f023 42ee 	bic.w	r2, r3, #1996488704	@ 0x77000000
 8002e30:	68b9      	ldr	r1, [r7, #8]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	430b      	orrs	r3, r1
 8002e36:	4903      	ldr	r1, [pc, #12]	@ (8002e44 <HAL_RCC_MCOConfig+0x64>)
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	608b      	str	r3, [r1, #8]
}
 8002e3c:	bf00      	nop
 8002e3e:	3728      	adds	r7, #40	@ 0x28
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}
 8002e44:	40021000 	.word	0x40021000

08002e48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b089      	sub	sp, #36	@ 0x24
 8002e4c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	61fb      	str	r3, [r7, #28]
 8002e52:	2300      	movs	r3, #0
 8002e54:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e56:	4b3e      	ldr	r3, [pc, #248]	@ (8002f50 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e58:	689b      	ldr	r3, [r3, #8]
 8002e5a:	f003 030c 	and.w	r3, r3, #12
 8002e5e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e60:	4b3b      	ldr	r3, [pc, #236]	@ (8002f50 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e62:	68db      	ldr	r3, [r3, #12]
 8002e64:	f003 0303 	and.w	r3, r3, #3
 8002e68:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d005      	beq.n	8002e7c <HAL_RCC_GetSysClockFreq+0x34>
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	2b0c      	cmp	r3, #12
 8002e74:	d121      	bne.n	8002eba <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	d11e      	bne.n	8002eba <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002e7c:	4b34      	ldr	r3, [pc, #208]	@ (8002f50 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f003 0308 	and.w	r3, r3, #8
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d107      	bne.n	8002e98 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002e88:	4b31      	ldr	r3, [pc, #196]	@ (8002f50 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e8e:	0a1b      	lsrs	r3, r3, #8
 8002e90:	f003 030f 	and.w	r3, r3, #15
 8002e94:	61fb      	str	r3, [r7, #28]
 8002e96:	e005      	b.n	8002ea4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002e98:	4b2d      	ldr	r3, [pc, #180]	@ (8002f50 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	091b      	lsrs	r3, r3, #4
 8002e9e:	f003 030f 	and.w	r3, r3, #15
 8002ea2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002ea4:	4a2b      	ldr	r2, [pc, #172]	@ (8002f54 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002ea6:	69fb      	ldr	r3, [r7, #28]
 8002ea8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002eac:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d10d      	bne.n	8002ed0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002eb4:	69fb      	ldr	r3, [r7, #28]
 8002eb6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002eb8:	e00a      	b.n	8002ed0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	2b04      	cmp	r3, #4
 8002ebe:	d102      	bne.n	8002ec6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002ec0:	4b25      	ldr	r3, [pc, #148]	@ (8002f58 <HAL_RCC_GetSysClockFreq+0x110>)
 8002ec2:	61bb      	str	r3, [r7, #24]
 8002ec4:	e004      	b.n	8002ed0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	2b08      	cmp	r3, #8
 8002eca:	d101      	bne.n	8002ed0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002ecc:	4b23      	ldr	r3, [pc, #140]	@ (8002f5c <HAL_RCC_GetSysClockFreq+0x114>)
 8002ece:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	2b0c      	cmp	r3, #12
 8002ed4:	d134      	bne.n	8002f40 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002ed6:	4b1e      	ldr	r3, [pc, #120]	@ (8002f50 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ed8:	68db      	ldr	r3, [r3, #12]
 8002eda:	f003 0303 	and.w	r3, r3, #3
 8002ede:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	2b02      	cmp	r3, #2
 8002ee4:	d003      	beq.n	8002eee <HAL_RCC_GetSysClockFreq+0xa6>
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	2b03      	cmp	r3, #3
 8002eea:	d003      	beq.n	8002ef4 <HAL_RCC_GetSysClockFreq+0xac>
 8002eec:	e005      	b.n	8002efa <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002eee:	4b1a      	ldr	r3, [pc, #104]	@ (8002f58 <HAL_RCC_GetSysClockFreq+0x110>)
 8002ef0:	617b      	str	r3, [r7, #20]
      break;
 8002ef2:	e005      	b.n	8002f00 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002ef4:	4b19      	ldr	r3, [pc, #100]	@ (8002f5c <HAL_RCC_GetSysClockFreq+0x114>)
 8002ef6:	617b      	str	r3, [r7, #20]
      break;
 8002ef8:	e002      	b.n	8002f00 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002efa:	69fb      	ldr	r3, [r7, #28]
 8002efc:	617b      	str	r3, [r7, #20]
      break;
 8002efe:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002f00:	4b13      	ldr	r3, [pc, #76]	@ (8002f50 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f02:	68db      	ldr	r3, [r3, #12]
 8002f04:	091b      	lsrs	r3, r3, #4
 8002f06:	f003 0307 	and.w	r3, r3, #7
 8002f0a:	3301      	adds	r3, #1
 8002f0c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002f0e:	4b10      	ldr	r3, [pc, #64]	@ (8002f50 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f10:	68db      	ldr	r3, [r3, #12]
 8002f12:	0a1b      	lsrs	r3, r3, #8
 8002f14:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002f18:	697a      	ldr	r2, [r7, #20]
 8002f1a:	fb03 f202 	mul.w	r2, r3, r2
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f24:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002f26:	4b0a      	ldr	r3, [pc, #40]	@ (8002f50 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f28:	68db      	ldr	r3, [r3, #12]
 8002f2a:	0e5b      	lsrs	r3, r3, #25
 8002f2c:	f003 0303 	and.w	r3, r3, #3
 8002f30:	3301      	adds	r3, #1
 8002f32:	005b      	lsls	r3, r3, #1
 8002f34:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002f36:	697a      	ldr	r2, [r7, #20]
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f3e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002f40:	69bb      	ldr	r3, [r7, #24]
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	3724      	adds	r7, #36	@ 0x24
 8002f46:	46bd      	mov	sp, r7
 8002f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4c:	4770      	bx	lr
 8002f4e:	bf00      	nop
 8002f50:	40021000 	.word	0x40021000
 8002f54:	08009e98 	.word	0x08009e98
 8002f58:	00f42400 	.word	0x00f42400
 8002f5c:	007a1200 	.word	0x007a1200

08002f60 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f60:	b480      	push	{r7}
 8002f62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f64:	4b03      	ldr	r3, [pc, #12]	@ (8002f74 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f66:	681b      	ldr	r3, [r3, #0]
}
 8002f68:	4618      	mov	r0, r3
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f70:	4770      	bx	lr
 8002f72:	bf00      	nop
 8002f74:	20000000 	.word	0x20000000

08002f78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002f7c:	f7ff fff0 	bl	8002f60 <HAL_RCC_GetHCLKFreq>
 8002f80:	4602      	mov	r2, r0
 8002f82:	4b06      	ldr	r3, [pc, #24]	@ (8002f9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	0a1b      	lsrs	r3, r3, #8
 8002f88:	f003 0307 	and.w	r3, r3, #7
 8002f8c:	4904      	ldr	r1, [pc, #16]	@ (8002fa0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002f8e:	5ccb      	ldrb	r3, [r1, r3]
 8002f90:	f003 031f 	and.w	r3, r3, #31
 8002f94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f98:	4618      	mov	r0, r3
 8002f9a:	bd80      	pop	{r7, pc}
 8002f9c:	40021000 	.word	0x40021000
 8002fa0:	08009e90 	.word	0x08009e90

08002fa4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002fa8:	f7ff ffda 	bl	8002f60 <HAL_RCC_GetHCLKFreq>
 8002fac:	4602      	mov	r2, r0
 8002fae:	4b06      	ldr	r3, [pc, #24]	@ (8002fc8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	0adb      	lsrs	r3, r3, #11
 8002fb4:	f003 0307 	and.w	r3, r3, #7
 8002fb8:	4904      	ldr	r1, [pc, #16]	@ (8002fcc <HAL_RCC_GetPCLK2Freq+0x28>)
 8002fba:	5ccb      	ldrb	r3, [r1, r3]
 8002fbc:	f003 031f 	and.w	r3, r3, #31
 8002fc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	bd80      	pop	{r7, pc}
 8002fc8:	40021000 	.word	0x40021000
 8002fcc:	08009e90 	.word	0x08009e90

08002fd0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b086      	sub	sp, #24
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002fd8:	2300      	movs	r3, #0
 8002fda:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002fdc:	4b2a      	ldr	r3, [pc, #168]	@ (8003088 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002fde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fe0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d003      	beq.n	8002ff0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002fe8:	f7ff f9ba 	bl	8002360 <HAL_PWREx_GetVoltageRange>
 8002fec:	6178      	str	r0, [r7, #20]
 8002fee:	e014      	b.n	800301a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002ff0:	4b25      	ldr	r3, [pc, #148]	@ (8003088 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ff2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ff4:	4a24      	ldr	r2, [pc, #144]	@ (8003088 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ff6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ffa:	6593      	str	r3, [r2, #88]	@ 0x58
 8002ffc:	4b22      	ldr	r3, [pc, #136]	@ (8003088 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ffe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003000:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003004:	60fb      	str	r3, [r7, #12]
 8003006:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003008:	f7ff f9aa 	bl	8002360 <HAL_PWREx_GetVoltageRange>
 800300c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800300e:	4b1e      	ldr	r3, [pc, #120]	@ (8003088 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003010:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003012:	4a1d      	ldr	r2, [pc, #116]	@ (8003088 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003014:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003018:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003020:	d10b      	bne.n	800303a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2b80      	cmp	r3, #128	@ 0x80
 8003026:	d919      	bls.n	800305c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2ba0      	cmp	r3, #160	@ 0xa0
 800302c:	d902      	bls.n	8003034 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800302e:	2302      	movs	r3, #2
 8003030:	613b      	str	r3, [r7, #16]
 8003032:	e013      	b.n	800305c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003034:	2301      	movs	r3, #1
 8003036:	613b      	str	r3, [r7, #16]
 8003038:	e010      	b.n	800305c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2b80      	cmp	r3, #128	@ 0x80
 800303e:	d902      	bls.n	8003046 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003040:	2303      	movs	r3, #3
 8003042:	613b      	str	r3, [r7, #16]
 8003044:	e00a      	b.n	800305c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2b80      	cmp	r3, #128	@ 0x80
 800304a:	d102      	bne.n	8003052 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800304c:	2302      	movs	r3, #2
 800304e:	613b      	str	r3, [r7, #16]
 8003050:	e004      	b.n	800305c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2b70      	cmp	r3, #112	@ 0x70
 8003056:	d101      	bne.n	800305c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003058:	2301      	movs	r3, #1
 800305a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800305c:	4b0b      	ldr	r3, [pc, #44]	@ (800308c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f023 0207 	bic.w	r2, r3, #7
 8003064:	4909      	ldr	r1, [pc, #36]	@ (800308c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	4313      	orrs	r3, r2
 800306a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800306c:	4b07      	ldr	r3, [pc, #28]	@ (800308c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f003 0307 	and.w	r3, r3, #7
 8003074:	693a      	ldr	r2, [r7, #16]
 8003076:	429a      	cmp	r2, r3
 8003078:	d001      	beq.n	800307e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	e000      	b.n	8003080 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800307e:	2300      	movs	r3, #0
}
 8003080:	4618      	mov	r0, r3
 8003082:	3718      	adds	r7, #24
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}
 8003088:	40021000 	.word	0x40021000
 800308c:	40022000 	.word	0x40022000

08003090 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b086      	sub	sp, #24
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003098:	2300      	movs	r3, #0
 800309a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800309c:	2300      	movs	r3, #0
 800309e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d041      	beq.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80030b0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80030b4:	d02a      	beq.n	800310c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80030b6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80030ba:	d824      	bhi.n	8003106 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80030bc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80030c0:	d008      	beq.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80030c2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80030c6:	d81e      	bhi.n	8003106 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d00a      	beq.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80030cc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80030d0:	d010      	beq.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80030d2:	e018      	b.n	8003106 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80030d4:	4b86      	ldr	r3, [pc, #536]	@ (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030d6:	68db      	ldr	r3, [r3, #12]
 80030d8:	4a85      	ldr	r2, [pc, #532]	@ (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030de:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80030e0:	e015      	b.n	800310e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	3304      	adds	r3, #4
 80030e6:	2100      	movs	r1, #0
 80030e8:	4618      	mov	r0, r3
 80030ea:	f000 fabb 	bl	8003664 <RCCEx_PLLSAI1_Config>
 80030ee:	4603      	mov	r3, r0
 80030f0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80030f2:	e00c      	b.n	800310e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	3320      	adds	r3, #32
 80030f8:	2100      	movs	r1, #0
 80030fa:	4618      	mov	r0, r3
 80030fc:	f000 fba6 	bl	800384c <RCCEx_PLLSAI2_Config>
 8003100:	4603      	mov	r3, r0
 8003102:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003104:	e003      	b.n	800310e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	74fb      	strb	r3, [r7, #19]
      break;
 800310a:	e000      	b.n	800310e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800310c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800310e:	7cfb      	ldrb	r3, [r7, #19]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d10b      	bne.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003114:	4b76      	ldr	r3, [pc, #472]	@ (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003116:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800311a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003122:	4973      	ldr	r1, [pc, #460]	@ (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003124:	4313      	orrs	r3, r2
 8003126:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800312a:	e001      	b.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800312c:	7cfb      	ldrb	r3, [r7, #19]
 800312e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003138:	2b00      	cmp	r3, #0
 800313a:	d041      	beq.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003140:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003144:	d02a      	beq.n	800319c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003146:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800314a:	d824      	bhi.n	8003196 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800314c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003150:	d008      	beq.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003152:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003156:	d81e      	bhi.n	8003196 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003158:	2b00      	cmp	r3, #0
 800315a:	d00a      	beq.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800315c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003160:	d010      	beq.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003162:	e018      	b.n	8003196 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003164:	4b62      	ldr	r3, [pc, #392]	@ (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003166:	68db      	ldr	r3, [r3, #12]
 8003168:	4a61      	ldr	r2, [pc, #388]	@ (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800316a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800316e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003170:	e015      	b.n	800319e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	3304      	adds	r3, #4
 8003176:	2100      	movs	r1, #0
 8003178:	4618      	mov	r0, r3
 800317a:	f000 fa73 	bl	8003664 <RCCEx_PLLSAI1_Config>
 800317e:	4603      	mov	r3, r0
 8003180:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003182:	e00c      	b.n	800319e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	3320      	adds	r3, #32
 8003188:	2100      	movs	r1, #0
 800318a:	4618      	mov	r0, r3
 800318c:	f000 fb5e 	bl	800384c <RCCEx_PLLSAI2_Config>
 8003190:	4603      	mov	r3, r0
 8003192:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003194:	e003      	b.n	800319e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	74fb      	strb	r3, [r7, #19]
      break;
 800319a:	e000      	b.n	800319e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800319c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800319e:	7cfb      	ldrb	r3, [r7, #19]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d10b      	bne.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80031a4:	4b52      	ldr	r3, [pc, #328]	@ (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031aa:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80031b2:	494f      	ldr	r1, [pc, #316]	@ (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031b4:	4313      	orrs	r3, r2
 80031b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80031ba:	e001      	b.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031bc:	7cfb      	ldrb	r3, [r7, #19]
 80031be:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	f000 80a0 	beq.w	800330e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031ce:	2300      	movs	r3, #0
 80031d0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80031d2:	4b47      	ldr	r3, [pc, #284]	@ (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d101      	bne.n	80031e2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80031de:	2301      	movs	r3, #1
 80031e0:	e000      	b.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80031e2:	2300      	movs	r3, #0
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d00d      	beq.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031e8:	4b41      	ldr	r3, [pc, #260]	@ (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031ec:	4a40      	ldr	r2, [pc, #256]	@ (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80031f2:	6593      	str	r3, [r2, #88]	@ 0x58
 80031f4:	4b3e      	ldr	r3, [pc, #248]	@ (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031fc:	60bb      	str	r3, [r7, #8]
 80031fe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003200:	2301      	movs	r3, #1
 8003202:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003204:	4b3b      	ldr	r3, [pc, #236]	@ (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a3a      	ldr	r2, [pc, #232]	@ (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800320a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800320e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003210:	f7fe fbb0 	bl	8001974 <HAL_GetTick>
 8003214:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003216:	e009      	b.n	800322c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003218:	f7fe fbac 	bl	8001974 <HAL_GetTick>
 800321c:	4602      	mov	r2, r0
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	1ad3      	subs	r3, r2, r3
 8003222:	2b02      	cmp	r3, #2
 8003224:	d902      	bls.n	800322c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003226:	2303      	movs	r3, #3
 8003228:	74fb      	strb	r3, [r7, #19]
        break;
 800322a:	e005      	b.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800322c:	4b31      	ldr	r3, [pc, #196]	@ (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003234:	2b00      	cmp	r3, #0
 8003236:	d0ef      	beq.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003238:	7cfb      	ldrb	r3, [r7, #19]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d15c      	bne.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800323e:	4b2c      	ldr	r3, [pc, #176]	@ (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003240:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003244:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003248:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d01f      	beq.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003256:	697a      	ldr	r2, [r7, #20]
 8003258:	429a      	cmp	r2, r3
 800325a:	d019      	beq.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800325c:	4b24      	ldr	r3, [pc, #144]	@ (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800325e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003262:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003266:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003268:	4b21      	ldr	r3, [pc, #132]	@ (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800326a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800326e:	4a20      	ldr	r2, [pc, #128]	@ (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003270:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003274:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003278:	4b1d      	ldr	r3, [pc, #116]	@ (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800327a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800327e:	4a1c      	ldr	r2, [pc, #112]	@ (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003280:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003284:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003288:	4a19      	ldr	r2, [pc, #100]	@ (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	f003 0301 	and.w	r3, r3, #1
 8003296:	2b00      	cmp	r3, #0
 8003298:	d016      	beq.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800329a:	f7fe fb6b 	bl	8001974 <HAL_GetTick>
 800329e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032a0:	e00b      	b.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032a2:	f7fe fb67 	bl	8001974 <HAL_GetTick>
 80032a6:	4602      	mov	r2, r0
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	1ad3      	subs	r3, r2, r3
 80032ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d902      	bls.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80032b4:	2303      	movs	r3, #3
 80032b6:	74fb      	strb	r3, [r7, #19]
            break;
 80032b8:	e006      	b.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032ba:	4b0d      	ldr	r3, [pc, #52]	@ (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032c0:	f003 0302 	and.w	r3, r3, #2
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d0ec      	beq.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80032c8:	7cfb      	ldrb	r3, [r7, #19]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d10c      	bne.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80032ce:	4b08      	ldr	r3, [pc, #32]	@ (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032d4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80032de:	4904      	ldr	r1, [pc, #16]	@ (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032e0:	4313      	orrs	r3, r2
 80032e2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80032e6:	e009      	b.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80032e8:	7cfb      	ldrb	r3, [r7, #19]
 80032ea:	74bb      	strb	r3, [r7, #18]
 80032ec:	e006      	b.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80032ee:	bf00      	nop
 80032f0:	40021000 	.word	0x40021000
 80032f4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032f8:	7cfb      	ldrb	r3, [r7, #19]
 80032fa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80032fc:	7c7b      	ldrb	r3, [r7, #17]
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d105      	bne.n	800330e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003302:	4b9e      	ldr	r3, [pc, #632]	@ (800357c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003304:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003306:	4a9d      	ldr	r2, [pc, #628]	@ (800357c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003308:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800330c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 0301 	and.w	r3, r3, #1
 8003316:	2b00      	cmp	r3, #0
 8003318:	d00a      	beq.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800331a:	4b98      	ldr	r3, [pc, #608]	@ (800357c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800331c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003320:	f023 0203 	bic.w	r2, r3, #3
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003328:	4994      	ldr	r1, [pc, #592]	@ (800357c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800332a:	4313      	orrs	r3, r2
 800332c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f003 0302 	and.w	r3, r3, #2
 8003338:	2b00      	cmp	r3, #0
 800333a:	d00a      	beq.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800333c:	4b8f      	ldr	r3, [pc, #572]	@ (800357c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800333e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003342:	f023 020c 	bic.w	r2, r3, #12
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800334a:	498c      	ldr	r1, [pc, #560]	@ (800357c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800334c:	4313      	orrs	r3, r2
 800334e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 0304 	and.w	r3, r3, #4
 800335a:	2b00      	cmp	r3, #0
 800335c:	d00a      	beq.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800335e:	4b87      	ldr	r3, [pc, #540]	@ (800357c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003360:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003364:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800336c:	4983      	ldr	r1, [pc, #524]	@ (800357c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800336e:	4313      	orrs	r3, r2
 8003370:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f003 0308 	and.w	r3, r3, #8
 800337c:	2b00      	cmp	r3, #0
 800337e:	d00a      	beq.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003380:	4b7e      	ldr	r3, [pc, #504]	@ (800357c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003382:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003386:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800338e:	497b      	ldr	r1, [pc, #492]	@ (800357c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003390:	4313      	orrs	r3, r2
 8003392:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f003 0310 	and.w	r3, r3, #16
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d00a      	beq.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80033a2:	4b76      	ldr	r3, [pc, #472]	@ (800357c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033a8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033b0:	4972      	ldr	r1, [pc, #456]	@ (800357c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033b2:	4313      	orrs	r3, r2
 80033b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f003 0320 	and.w	r3, r3, #32
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d00a      	beq.n	80033da <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80033c4:	4b6d      	ldr	r3, [pc, #436]	@ (800357c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033ca:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033d2:	496a      	ldr	r1, [pc, #424]	@ (800357c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033d4:	4313      	orrs	r3, r2
 80033d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d00a      	beq.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80033e6:	4b65      	ldr	r3, [pc, #404]	@ (800357c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033ec:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033f4:	4961      	ldr	r1, [pc, #388]	@ (800357c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033f6:	4313      	orrs	r3, r2
 80033f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003404:	2b00      	cmp	r3, #0
 8003406:	d00a      	beq.n	800341e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003408:	4b5c      	ldr	r3, [pc, #368]	@ (800357c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800340a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800340e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003416:	4959      	ldr	r1, [pc, #356]	@ (800357c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003418:	4313      	orrs	r3, r2
 800341a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003426:	2b00      	cmp	r3, #0
 8003428:	d00a      	beq.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800342a:	4b54      	ldr	r3, [pc, #336]	@ (800357c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800342c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003430:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003438:	4950      	ldr	r1, [pc, #320]	@ (800357c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800343a:	4313      	orrs	r3, r2
 800343c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003448:	2b00      	cmp	r3, #0
 800344a:	d00a      	beq.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800344c:	4b4b      	ldr	r3, [pc, #300]	@ (800357c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800344e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003452:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800345a:	4948      	ldr	r1, [pc, #288]	@ (800357c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800345c:	4313      	orrs	r3, r2
 800345e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800346a:	2b00      	cmp	r3, #0
 800346c:	d00a      	beq.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800346e:	4b43      	ldr	r3, [pc, #268]	@ (800357c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003470:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003474:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800347c:	493f      	ldr	r1, [pc, #252]	@ (800357c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800347e:	4313      	orrs	r3, r2
 8003480:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800348c:	2b00      	cmp	r3, #0
 800348e:	d028      	beq.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003490:	4b3a      	ldr	r3, [pc, #232]	@ (800357c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003492:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003496:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800349e:	4937      	ldr	r1, [pc, #220]	@ (800357c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034a0:	4313      	orrs	r3, r2
 80034a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80034aa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80034ae:	d106      	bne.n	80034be <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80034b0:	4b32      	ldr	r3, [pc, #200]	@ (800357c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034b2:	68db      	ldr	r3, [r3, #12]
 80034b4:	4a31      	ldr	r2, [pc, #196]	@ (800357c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034b6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80034ba:	60d3      	str	r3, [r2, #12]
 80034bc:	e011      	b.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80034c2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80034c6:	d10c      	bne.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	3304      	adds	r3, #4
 80034cc:	2101      	movs	r1, #1
 80034ce:	4618      	mov	r0, r3
 80034d0:	f000 f8c8 	bl	8003664 <RCCEx_PLLSAI1_Config>
 80034d4:	4603      	mov	r3, r0
 80034d6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80034d8:	7cfb      	ldrb	r3, [r7, #19]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d001      	beq.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80034de:	7cfb      	ldrb	r3, [r7, #19]
 80034e0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d028      	beq.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80034ee:	4b23      	ldr	r3, [pc, #140]	@ (800357c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034f4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034fc:	491f      	ldr	r1, [pc, #124]	@ (800357c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034fe:	4313      	orrs	r3, r2
 8003500:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003508:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800350c:	d106      	bne.n	800351c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800350e:	4b1b      	ldr	r3, [pc, #108]	@ (800357c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003510:	68db      	ldr	r3, [r3, #12]
 8003512:	4a1a      	ldr	r2, [pc, #104]	@ (800357c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003518:	60d3      	str	r3, [r2, #12]
 800351a:	e011      	b.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003520:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003524:	d10c      	bne.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	3304      	adds	r3, #4
 800352a:	2101      	movs	r1, #1
 800352c:	4618      	mov	r0, r3
 800352e:	f000 f899 	bl	8003664 <RCCEx_PLLSAI1_Config>
 8003532:	4603      	mov	r3, r0
 8003534:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003536:	7cfb      	ldrb	r3, [r7, #19]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d001      	beq.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800353c:	7cfb      	ldrb	r3, [r7, #19]
 800353e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003548:	2b00      	cmp	r3, #0
 800354a:	d02b      	beq.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800354c:	4b0b      	ldr	r3, [pc, #44]	@ (800357c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800354e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003552:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800355a:	4908      	ldr	r1, [pc, #32]	@ (800357c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800355c:	4313      	orrs	r3, r2
 800355e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003566:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800356a:	d109      	bne.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800356c:	4b03      	ldr	r3, [pc, #12]	@ (800357c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800356e:	68db      	ldr	r3, [r3, #12]
 8003570:	4a02      	ldr	r2, [pc, #8]	@ (800357c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003572:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003576:	60d3      	str	r3, [r2, #12]
 8003578:	e014      	b.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800357a:	bf00      	nop
 800357c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003584:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003588:	d10c      	bne.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	3304      	adds	r3, #4
 800358e:	2101      	movs	r1, #1
 8003590:	4618      	mov	r0, r3
 8003592:	f000 f867 	bl	8003664 <RCCEx_PLLSAI1_Config>
 8003596:	4603      	mov	r3, r0
 8003598:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800359a:	7cfb      	ldrb	r3, [r7, #19]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d001      	beq.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80035a0:	7cfb      	ldrb	r3, [r7, #19]
 80035a2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d02f      	beq.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80035b0:	4b2b      	ldr	r3, [pc, #172]	@ (8003660 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80035b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035b6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80035be:	4928      	ldr	r1, [pc, #160]	@ (8003660 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80035c0:	4313      	orrs	r3, r2
 80035c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80035ca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80035ce:	d10d      	bne.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	3304      	adds	r3, #4
 80035d4:	2102      	movs	r1, #2
 80035d6:	4618      	mov	r0, r3
 80035d8:	f000 f844 	bl	8003664 <RCCEx_PLLSAI1_Config>
 80035dc:	4603      	mov	r3, r0
 80035de:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80035e0:	7cfb      	ldrb	r3, [r7, #19]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d014      	beq.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80035e6:	7cfb      	ldrb	r3, [r7, #19]
 80035e8:	74bb      	strb	r3, [r7, #18]
 80035ea:	e011      	b.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80035f0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80035f4:	d10c      	bne.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	3320      	adds	r3, #32
 80035fa:	2102      	movs	r1, #2
 80035fc:	4618      	mov	r0, r3
 80035fe:	f000 f925 	bl	800384c <RCCEx_PLLSAI2_Config>
 8003602:	4603      	mov	r3, r0
 8003604:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003606:	7cfb      	ldrb	r3, [r7, #19]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d001      	beq.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800360c:	7cfb      	ldrb	r3, [r7, #19]
 800360e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003618:	2b00      	cmp	r3, #0
 800361a:	d00a      	beq.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800361c:	4b10      	ldr	r3, [pc, #64]	@ (8003660 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800361e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003622:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800362a:	490d      	ldr	r1, [pc, #52]	@ (8003660 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800362c:	4313      	orrs	r3, r2
 800362e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800363a:	2b00      	cmp	r3, #0
 800363c:	d00b      	beq.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800363e:	4b08      	ldr	r3, [pc, #32]	@ (8003660 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003640:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003644:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800364e:	4904      	ldr	r1, [pc, #16]	@ (8003660 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003650:	4313      	orrs	r3, r2
 8003652:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003656:	7cbb      	ldrb	r3, [r7, #18]
}
 8003658:	4618      	mov	r0, r3
 800365a:	3718      	adds	r7, #24
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}
 8003660:	40021000 	.word	0x40021000

08003664 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b084      	sub	sp, #16
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
 800366c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800366e:	2300      	movs	r3, #0
 8003670:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003672:	4b75      	ldr	r3, [pc, #468]	@ (8003848 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003674:	68db      	ldr	r3, [r3, #12]
 8003676:	f003 0303 	and.w	r3, r3, #3
 800367a:	2b00      	cmp	r3, #0
 800367c:	d018      	beq.n	80036b0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800367e:	4b72      	ldr	r3, [pc, #456]	@ (8003848 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003680:	68db      	ldr	r3, [r3, #12]
 8003682:	f003 0203 	and.w	r2, r3, #3
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	429a      	cmp	r2, r3
 800368c:	d10d      	bne.n	80036aa <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
       ||
 8003692:	2b00      	cmp	r3, #0
 8003694:	d009      	beq.n	80036aa <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003696:	4b6c      	ldr	r3, [pc, #432]	@ (8003848 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003698:	68db      	ldr	r3, [r3, #12]
 800369a:	091b      	lsrs	r3, r3, #4
 800369c:	f003 0307 	and.w	r3, r3, #7
 80036a0:	1c5a      	adds	r2, r3, #1
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	685b      	ldr	r3, [r3, #4]
       ||
 80036a6:	429a      	cmp	r2, r3
 80036a8:	d047      	beq.n	800373a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	73fb      	strb	r3, [r7, #15]
 80036ae:	e044      	b.n	800373a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	2b03      	cmp	r3, #3
 80036b6:	d018      	beq.n	80036ea <RCCEx_PLLSAI1_Config+0x86>
 80036b8:	2b03      	cmp	r3, #3
 80036ba:	d825      	bhi.n	8003708 <RCCEx_PLLSAI1_Config+0xa4>
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d002      	beq.n	80036c6 <RCCEx_PLLSAI1_Config+0x62>
 80036c0:	2b02      	cmp	r3, #2
 80036c2:	d009      	beq.n	80036d8 <RCCEx_PLLSAI1_Config+0x74>
 80036c4:	e020      	b.n	8003708 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80036c6:	4b60      	ldr	r3, [pc, #384]	@ (8003848 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f003 0302 	and.w	r3, r3, #2
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d11d      	bne.n	800370e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036d6:	e01a      	b.n	800370e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80036d8:	4b5b      	ldr	r3, [pc, #364]	@ (8003848 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d116      	bne.n	8003712 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80036e4:	2301      	movs	r3, #1
 80036e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036e8:	e013      	b.n	8003712 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80036ea:	4b57      	ldr	r3, [pc, #348]	@ (8003848 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d10f      	bne.n	8003716 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80036f6:	4b54      	ldr	r3, [pc, #336]	@ (8003848 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d109      	bne.n	8003716 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003706:	e006      	b.n	8003716 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003708:	2301      	movs	r3, #1
 800370a:	73fb      	strb	r3, [r7, #15]
      break;
 800370c:	e004      	b.n	8003718 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800370e:	bf00      	nop
 8003710:	e002      	b.n	8003718 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003712:	bf00      	nop
 8003714:	e000      	b.n	8003718 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003716:	bf00      	nop
    }

    if(status == HAL_OK)
 8003718:	7bfb      	ldrb	r3, [r7, #15]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d10d      	bne.n	800373a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800371e:	4b4a      	ldr	r3, [pc, #296]	@ (8003848 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003720:	68db      	ldr	r3, [r3, #12]
 8003722:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6819      	ldr	r1, [r3, #0]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	3b01      	subs	r3, #1
 8003730:	011b      	lsls	r3, r3, #4
 8003732:	430b      	orrs	r3, r1
 8003734:	4944      	ldr	r1, [pc, #272]	@ (8003848 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003736:	4313      	orrs	r3, r2
 8003738:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800373a:	7bfb      	ldrb	r3, [r7, #15]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d17d      	bne.n	800383c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003740:	4b41      	ldr	r3, [pc, #260]	@ (8003848 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a40      	ldr	r2, [pc, #256]	@ (8003848 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003746:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800374a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800374c:	f7fe f912 	bl	8001974 <HAL_GetTick>
 8003750:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003752:	e009      	b.n	8003768 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003754:	f7fe f90e 	bl	8001974 <HAL_GetTick>
 8003758:	4602      	mov	r2, r0
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	1ad3      	subs	r3, r2, r3
 800375e:	2b02      	cmp	r3, #2
 8003760:	d902      	bls.n	8003768 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003762:	2303      	movs	r3, #3
 8003764:	73fb      	strb	r3, [r7, #15]
        break;
 8003766:	e005      	b.n	8003774 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003768:	4b37      	ldr	r3, [pc, #220]	@ (8003848 <RCCEx_PLLSAI1_Config+0x1e4>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003770:	2b00      	cmp	r3, #0
 8003772:	d1ef      	bne.n	8003754 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003774:	7bfb      	ldrb	r3, [r7, #15]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d160      	bne.n	800383c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d111      	bne.n	80037a4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003780:	4b31      	ldr	r3, [pc, #196]	@ (8003848 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003782:	691b      	ldr	r3, [r3, #16]
 8003784:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003788:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800378c:	687a      	ldr	r2, [r7, #4]
 800378e:	6892      	ldr	r2, [r2, #8]
 8003790:	0211      	lsls	r1, r2, #8
 8003792:	687a      	ldr	r2, [r7, #4]
 8003794:	68d2      	ldr	r2, [r2, #12]
 8003796:	0912      	lsrs	r2, r2, #4
 8003798:	0452      	lsls	r2, r2, #17
 800379a:	430a      	orrs	r2, r1
 800379c:	492a      	ldr	r1, [pc, #168]	@ (8003848 <RCCEx_PLLSAI1_Config+0x1e4>)
 800379e:	4313      	orrs	r3, r2
 80037a0:	610b      	str	r3, [r1, #16]
 80037a2:	e027      	b.n	80037f4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	2b01      	cmp	r3, #1
 80037a8:	d112      	bne.n	80037d0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80037aa:	4b27      	ldr	r3, [pc, #156]	@ (8003848 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037ac:	691b      	ldr	r3, [r3, #16]
 80037ae:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80037b2:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80037b6:	687a      	ldr	r2, [r7, #4]
 80037b8:	6892      	ldr	r2, [r2, #8]
 80037ba:	0211      	lsls	r1, r2, #8
 80037bc:	687a      	ldr	r2, [r7, #4]
 80037be:	6912      	ldr	r2, [r2, #16]
 80037c0:	0852      	lsrs	r2, r2, #1
 80037c2:	3a01      	subs	r2, #1
 80037c4:	0552      	lsls	r2, r2, #21
 80037c6:	430a      	orrs	r2, r1
 80037c8:	491f      	ldr	r1, [pc, #124]	@ (8003848 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037ca:	4313      	orrs	r3, r2
 80037cc:	610b      	str	r3, [r1, #16]
 80037ce:	e011      	b.n	80037f4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80037d0:	4b1d      	ldr	r3, [pc, #116]	@ (8003848 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037d2:	691b      	ldr	r3, [r3, #16]
 80037d4:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80037d8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80037dc:	687a      	ldr	r2, [r7, #4]
 80037de:	6892      	ldr	r2, [r2, #8]
 80037e0:	0211      	lsls	r1, r2, #8
 80037e2:	687a      	ldr	r2, [r7, #4]
 80037e4:	6952      	ldr	r2, [r2, #20]
 80037e6:	0852      	lsrs	r2, r2, #1
 80037e8:	3a01      	subs	r2, #1
 80037ea:	0652      	lsls	r2, r2, #25
 80037ec:	430a      	orrs	r2, r1
 80037ee:	4916      	ldr	r1, [pc, #88]	@ (8003848 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037f0:	4313      	orrs	r3, r2
 80037f2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80037f4:	4b14      	ldr	r3, [pc, #80]	@ (8003848 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a13      	ldr	r2, [pc, #76]	@ (8003848 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037fa:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80037fe:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003800:	f7fe f8b8 	bl	8001974 <HAL_GetTick>
 8003804:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003806:	e009      	b.n	800381c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003808:	f7fe f8b4 	bl	8001974 <HAL_GetTick>
 800380c:	4602      	mov	r2, r0
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	1ad3      	subs	r3, r2, r3
 8003812:	2b02      	cmp	r3, #2
 8003814:	d902      	bls.n	800381c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003816:	2303      	movs	r3, #3
 8003818:	73fb      	strb	r3, [r7, #15]
          break;
 800381a:	e005      	b.n	8003828 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800381c:	4b0a      	ldr	r3, [pc, #40]	@ (8003848 <RCCEx_PLLSAI1_Config+0x1e4>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003824:	2b00      	cmp	r3, #0
 8003826:	d0ef      	beq.n	8003808 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003828:	7bfb      	ldrb	r3, [r7, #15]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d106      	bne.n	800383c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800382e:	4b06      	ldr	r3, [pc, #24]	@ (8003848 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003830:	691a      	ldr	r2, [r3, #16]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	699b      	ldr	r3, [r3, #24]
 8003836:	4904      	ldr	r1, [pc, #16]	@ (8003848 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003838:	4313      	orrs	r3, r2
 800383a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800383c:	7bfb      	ldrb	r3, [r7, #15]
}
 800383e:	4618      	mov	r0, r3
 8003840:	3710      	adds	r7, #16
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}
 8003846:	bf00      	nop
 8003848:	40021000 	.word	0x40021000

0800384c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b084      	sub	sp, #16
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
 8003854:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003856:	2300      	movs	r3, #0
 8003858:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800385a:	4b6a      	ldr	r3, [pc, #424]	@ (8003a04 <RCCEx_PLLSAI2_Config+0x1b8>)
 800385c:	68db      	ldr	r3, [r3, #12]
 800385e:	f003 0303 	and.w	r3, r3, #3
 8003862:	2b00      	cmp	r3, #0
 8003864:	d018      	beq.n	8003898 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003866:	4b67      	ldr	r3, [pc, #412]	@ (8003a04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003868:	68db      	ldr	r3, [r3, #12]
 800386a:	f003 0203 	and.w	r2, r3, #3
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	429a      	cmp	r2, r3
 8003874:	d10d      	bne.n	8003892 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
       ||
 800387a:	2b00      	cmp	r3, #0
 800387c:	d009      	beq.n	8003892 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800387e:	4b61      	ldr	r3, [pc, #388]	@ (8003a04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003880:	68db      	ldr	r3, [r3, #12]
 8003882:	091b      	lsrs	r3, r3, #4
 8003884:	f003 0307 	and.w	r3, r3, #7
 8003888:	1c5a      	adds	r2, r3, #1
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	685b      	ldr	r3, [r3, #4]
       ||
 800388e:	429a      	cmp	r2, r3
 8003890:	d047      	beq.n	8003922 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003892:	2301      	movs	r3, #1
 8003894:	73fb      	strb	r3, [r7, #15]
 8003896:	e044      	b.n	8003922 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	2b03      	cmp	r3, #3
 800389e:	d018      	beq.n	80038d2 <RCCEx_PLLSAI2_Config+0x86>
 80038a0:	2b03      	cmp	r3, #3
 80038a2:	d825      	bhi.n	80038f0 <RCCEx_PLLSAI2_Config+0xa4>
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	d002      	beq.n	80038ae <RCCEx_PLLSAI2_Config+0x62>
 80038a8:	2b02      	cmp	r3, #2
 80038aa:	d009      	beq.n	80038c0 <RCCEx_PLLSAI2_Config+0x74>
 80038ac:	e020      	b.n	80038f0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80038ae:	4b55      	ldr	r3, [pc, #340]	@ (8003a04 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f003 0302 	and.w	r3, r3, #2
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d11d      	bne.n	80038f6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038be:	e01a      	b.n	80038f6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80038c0:	4b50      	ldr	r3, [pc, #320]	@ (8003a04 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d116      	bne.n	80038fa <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80038cc:	2301      	movs	r3, #1
 80038ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038d0:	e013      	b.n	80038fa <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80038d2:	4b4c      	ldr	r3, [pc, #304]	@ (8003a04 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d10f      	bne.n	80038fe <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80038de:	4b49      	ldr	r3, [pc, #292]	@ (8003a04 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d109      	bne.n	80038fe <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80038ee:	e006      	b.n	80038fe <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80038f0:	2301      	movs	r3, #1
 80038f2:	73fb      	strb	r3, [r7, #15]
      break;
 80038f4:	e004      	b.n	8003900 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80038f6:	bf00      	nop
 80038f8:	e002      	b.n	8003900 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80038fa:	bf00      	nop
 80038fc:	e000      	b.n	8003900 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80038fe:	bf00      	nop
    }

    if(status == HAL_OK)
 8003900:	7bfb      	ldrb	r3, [r7, #15]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d10d      	bne.n	8003922 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003906:	4b3f      	ldr	r3, [pc, #252]	@ (8003a04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003908:	68db      	ldr	r3, [r3, #12]
 800390a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6819      	ldr	r1, [r3, #0]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	3b01      	subs	r3, #1
 8003918:	011b      	lsls	r3, r3, #4
 800391a:	430b      	orrs	r3, r1
 800391c:	4939      	ldr	r1, [pc, #228]	@ (8003a04 <RCCEx_PLLSAI2_Config+0x1b8>)
 800391e:	4313      	orrs	r3, r2
 8003920:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003922:	7bfb      	ldrb	r3, [r7, #15]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d167      	bne.n	80039f8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003928:	4b36      	ldr	r3, [pc, #216]	@ (8003a04 <RCCEx_PLLSAI2_Config+0x1b8>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a35      	ldr	r2, [pc, #212]	@ (8003a04 <RCCEx_PLLSAI2_Config+0x1b8>)
 800392e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003932:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003934:	f7fe f81e 	bl	8001974 <HAL_GetTick>
 8003938:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800393a:	e009      	b.n	8003950 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800393c:	f7fe f81a 	bl	8001974 <HAL_GetTick>
 8003940:	4602      	mov	r2, r0
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	1ad3      	subs	r3, r2, r3
 8003946:	2b02      	cmp	r3, #2
 8003948:	d902      	bls.n	8003950 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800394a:	2303      	movs	r3, #3
 800394c:	73fb      	strb	r3, [r7, #15]
        break;
 800394e:	e005      	b.n	800395c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003950:	4b2c      	ldr	r3, [pc, #176]	@ (8003a04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003958:	2b00      	cmp	r3, #0
 800395a:	d1ef      	bne.n	800393c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800395c:	7bfb      	ldrb	r3, [r7, #15]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d14a      	bne.n	80039f8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d111      	bne.n	800398c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003968:	4b26      	ldr	r3, [pc, #152]	@ (8003a04 <RCCEx_PLLSAI2_Config+0x1b8>)
 800396a:	695b      	ldr	r3, [r3, #20]
 800396c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003970:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003974:	687a      	ldr	r2, [r7, #4]
 8003976:	6892      	ldr	r2, [r2, #8]
 8003978:	0211      	lsls	r1, r2, #8
 800397a:	687a      	ldr	r2, [r7, #4]
 800397c:	68d2      	ldr	r2, [r2, #12]
 800397e:	0912      	lsrs	r2, r2, #4
 8003980:	0452      	lsls	r2, r2, #17
 8003982:	430a      	orrs	r2, r1
 8003984:	491f      	ldr	r1, [pc, #124]	@ (8003a04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003986:	4313      	orrs	r3, r2
 8003988:	614b      	str	r3, [r1, #20]
 800398a:	e011      	b.n	80039b0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800398c:	4b1d      	ldr	r3, [pc, #116]	@ (8003a04 <RCCEx_PLLSAI2_Config+0x1b8>)
 800398e:	695b      	ldr	r3, [r3, #20]
 8003990:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003994:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003998:	687a      	ldr	r2, [r7, #4]
 800399a:	6892      	ldr	r2, [r2, #8]
 800399c:	0211      	lsls	r1, r2, #8
 800399e:	687a      	ldr	r2, [r7, #4]
 80039a0:	6912      	ldr	r2, [r2, #16]
 80039a2:	0852      	lsrs	r2, r2, #1
 80039a4:	3a01      	subs	r2, #1
 80039a6:	0652      	lsls	r2, r2, #25
 80039a8:	430a      	orrs	r2, r1
 80039aa:	4916      	ldr	r1, [pc, #88]	@ (8003a04 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039ac:	4313      	orrs	r3, r2
 80039ae:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80039b0:	4b14      	ldr	r3, [pc, #80]	@ (8003a04 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a13      	ldr	r2, [pc, #76]	@ (8003a04 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80039ba:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039bc:	f7fd ffda 	bl	8001974 <HAL_GetTick>
 80039c0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80039c2:	e009      	b.n	80039d8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80039c4:	f7fd ffd6 	bl	8001974 <HAL_GetTick>
 80039c8:	4602      	mov	r2, r0
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	1ad3      	subs	r3, r2, r3
 80039ce:	2b02      	cmp	r3, #2
 80039d0:	d902      	bls.n	80039d8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80039d2:	2303      	movs	r3, #3
 80039d4:	73fb      	strb	r3, [r7, #15]
          break;
 80039d6:	e005      	b.n	80039e4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80039d8:	4b0a      	ldr	r3, [pc, #40]	@ (8003a04 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d0ef      	beq.n	80039c4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80039e4:	7bfb      	ldrb	r3, [r7, #15]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d106      	bne.n	80039f8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80039ea:	4b06      	ldr	r3, [pc, #24]	@ (8003a04 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039ec:	695a      	ldr	r2, [r3, #20]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	695b      	ldr	r3, [r3, #20]
 80039f2:	4904      	ldr	r1, [pc, #16]	@ (8003a04 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039f4:	4313      	orrs	r3, r2
 80039f6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80039f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80039fa:	4618      	mov	r0, r3
 80039fc:	3710      	adds	r7, #16
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}
 8003a02:	bf00      	nop
 8003a04:	40021000 	.word	0x40021000

08003a08 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b082      	sub	sp, #8
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d101      	bne.n	8003a1a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	e049      	b.n	8003aae <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a20:	b2db      	uxtb	r3, r3
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d106      	bne.n	8003a34 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a2e:	6878      	ldr	r0, [r7, #4]
 8003a30:	f7fd fc0e 	bl	8001250 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2202      	movs	r2, #2
 8003a38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681a      	ldr	r2, [r3, #0]
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	3304      	adds	r3, #4
 8003a44:	4619      	mov	r1, r3
 8003a46:	4610      	mov	r0, r2
 8003a48:	f000 fe4a 	bl	80046e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2201      	movs	r2, #1
 8003a50:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2201      	movs	r2, #1
 8003a58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2201      	movs	r2, #1
 8003a60:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2201      	movs	r2, #1
 8003a68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2201      	movs	r2, #1
 8003a70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2201      	movs	r2, #1
 8003a78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2201      	movs	r2, #1
 8003a80:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2201      	movs	r2, #1
 8003a88:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2201      	movs	r2, #1
 8003a90:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2201      	movs	r2, #1
 8003a98:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003aac:	2300      	movs	r3, #0
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	3708      	adds	r7, #8
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}
	...

08003ab8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b085      	sub	sp, #20
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ac6:	b2db      	uxtb	r3, r3
 8003ac8:	2b01      	cmp	r3, #1
 8003aca:	d001      	beq.n	8003ad0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003acc:	2301      	movs	r3, #1
 8003ace:	e04f      	b.n	8003b70 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2202      	movs	r2, #2
 8003ad4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	68da      	ldr	r2, [r3, #12]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f042 0201 	orr.w	r2, r2, #1
 8003ae6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a23      	ldr	r2, [pc, #140]	@ (8003b7c <HAL_TIM_Base_Start_IT+0xc4>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d01d      	beq.n	8003b2e <HAL_TIM_Base_Start_IT+0x76>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003afa:	d018      	beq.n	8003b2e <HAL_TIM_Base_Start_IT+0x76>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a1f      	ldr	r2, [pc, #124]	@ (8003b80 <HAL_TIM_Base_Start_IT+0xc8>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d013      	beq.n	8003b2e <HAL_TIM_Base_Start_IT+0x76>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a1e      	ldr	r2, [pc, #120]	@ (8003b84 <HAL_TIM_Base_Start_IT+0xcc>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d00e      	beq.n	8003b2e <HAL_TIM_Base_Start_IT+0x76>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a1c      	ldr	r2, [pc, #112]	@ (8003b88 <HAL_TIM_Base_Start_IT+0xd0>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d009      	beq.n	8003b2e <HAL_TIM_Base_Start_IT+0x76>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a1b      	ldr	r2, [pc, #108]	@ (8003b8c <HAL_TIM_Base_Start_IT+0xd4>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d004      	beq.n	8003b2e <HAL_TIM_Base_Start_IT+0x76>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a19      	ldr	r2, [pc, #100]	@ (8003b90 <HAL_TIM_Base_Start_IT+0xd8>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d115      	bne.n	8003b5a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	689a      	ldr	r2, [r3, #8]
 8003b34:	4b17      	ldr	r3, [pc, #92]	@ (8003b94 <HAL_TIM_Base_Start_IT+0xdc>)
 8003b36:	4013      	ands	r3, r2
 8003b38:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	2b06      	cmp	r3, #6
 8003b3e:	d015      	beq.n	8003b6c <HAL_TIM_Base_Start_IT+0xb4>
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b46:	d011      	beq.n	8003b6c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	681a      	ldr	r2, [r3, #0]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f042 0201 	orr.w	r2, r2, #1
 8003b56:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b58:	e008      	b.n	8003b6c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	681a      	ldr	r2, [r3, #0]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f042 0201 	orr.w	r2, r2, #1
 8003b68:	601a      	str	r2, [r3, #0]
 8003b6a:	e000      	b.n	8003b6e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b6c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003b6e:	2300      	movs	r3, #0
}
 8003b70:	4618      	mov	r0, r3
 8003b72:	3714      	adds	r7, #20
 8003b74:	46bd      	mov	sp, r7
 8003b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7a:	4770      	bx	lr
 8003b7c:	40012c00 	.word	0x40012c00
 8003b80:	40000400 	.word	0x40000400
 8003b84:	40000800 	.word	0x40000800
 8003b88:	40000c00 	.word	0x40000c00
 8003b8c:	40013400 	.word	0x40013400
 8003b90:	40014000 	.word	0x40014000
 8003b94:	00010007 	.word	0x00010007

08003b98 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b082      	sub	sp, #8
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d101      	bne.n	8003baa <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	e049      	b.n	8003c3e <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003bb0:	b2db      	uxtb	r3, r3
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d106      	bne.n	8003bc4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	f7fd fabc 	bl	800113c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2202      	movs	r2, #2
 8003bc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681a      	ldr	r2, [r3, #0]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	3304      	adds	r3, #4
 8003bd4:	4619      	mov	r1, r3
 8003bd6:	4610      	mov	r0, r2
 8003bd8:	f000 fd82 	bl	80046e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2201      	movs	r2, #1
 8003be0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2201      	movs	r2, #1
 8003be8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2201      	movs	r2, #1
 8003bf0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2201      	movs	r2, #1
 8003c00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2201      	movs	r2, #1
 8003c08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2201      	movs	r2, #1
 8003c10:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2201      	movs	r2, #1
 8003c18:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2201      	movs	r2, #1
 8003c20:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2201      	movs	r2, #1
 8003c28:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2201      	movs	r2, #1
 8003c30:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2201      	movs	r2, #1
 8003c38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003c3c:	2300      	movs	r3, #0
}
 8003c3e:	4618      	mov	r0, r3
 8003c40:	3708      	adds	r7, #8
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd80      	pop	{r7, pc}
	...

08003c48 <HAL_TIM_IC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from TIM peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b086      	sub	sp, #24
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	60f8      	str	r0, [r7, #12]
 8003c50:	60b9      	str	r1, [r7, #8]
 8003c52:	607a      	str	r2, [r7, #4]
 8003c54:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8003c56:	2300      	movs	r3, #0
 8003c58:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d104      	bne.n	8003c6a <HAL_TIM_IC_Start_DMA+0x22>
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003c66:	b2db      	uxtb	r3, r3
 8003c68:	e023      	b.n	8003cb2 <HAL_TIM_IC_Start_DMA+0x6a>
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	2b04      	cmp	r3, #4
 8003c6e:	d104      	bne.n	8003c7a <HAL_TIM_IC_Start_DMA+0x32>
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003c76:	b2db      	uxtb	r3, r3
 8003c78:	e01b      	b.n	8003cb2 <HAL_TIM_IC_Start_DMA+0x6a>
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	2b08      	cmp	r3, #8
 8003c7e:	d104      	bne.n	8003c8a <HAL_TIM_IC_Start_DMA+0x42>
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003c86:	b2db      	uxtb	r3, r3
 8003c88:	e013      	b.n	8003cb2 <HAL_TIM_IC_Start_DMA+0x6a>
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	2b0c      	cmp	r3, #12
 8003c8e:	d104      	bne.n	8003c9a <HAL_TIM_IC_Start_DMA+0x52>
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c96:	b2db      	uxtb	r3, r3
 8003c98:	e00b      	b.n	8003cb2 <HAL_TIM_IC_Start_DMA+0x6a>
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	2b10      	cmp	r3, #16
 8003c9e:	d104      	bne.n	8003caa <HAL_TIM_IC_Start_DMA+0x62>
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003ca6:	b2db      	uxtb	r3, r3
 8003ca8:	e003      	b.n	8003cb2 <HAL_TIM_IC_Start_DMA+0x6a>
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003cb0:	b2db      	uxtb	r3, r3
 8003cb2:	75bb      	strb	r3, [r7, #22]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d104      	bne.n	8003cc4 <HAL_TIM_IC_Start_DMA+0x7c>
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003cc0:	b2db      	uxtb	r3, r3
 8003cc2:	e013      	b.n	8003cec <HAL_TIM_IC_Start_DMA+0xa4>
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	2b04      	cmp	r3, #4
 8003cc8:	d104      	bne.n	8003cd4 <HAL_TIM_IC_Start_DMA+0x8c>
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003cd0:	b2db      	uxtb	r3, r3
 8003cd2:	e00b      	b.n	8003cec <HAL_TIM_IC_Start_DMA+0xa4>
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	2b08      	cmp	r3, #8
 8003cd8:	d104      	bne.n	8003ce4 <HAL_TIM_IC_Start_DMA+0x9c>
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8003ce0:	b2db      	uxtb	r3, r3
 8003ce2:	e003      	b.n	8003cec <HAL_TIM_IC_Start_DMA+0xa4>
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8003cea:	b2db      	uxtb	r3, r3
 8003cec:	757b      	strb	r3, [r7, #21]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  /* Set the TIM channel state */
  if ((channel_state == HAL_TIM_CHANNEL_STATE_BUSY)
 8003cee:	7dbb      	ldrb	r3, [r7, #22]
 8003cf0:	2b02      	cmp	r3, #2
 8003cf2:	d002      	beq.n	8003cfa <HAL_TIM_IC_Start_DMA+0xb2>
      || (complementary_channel_state == HAL_TIM_CHANNEL_STATE_BUSY))
 8003cf4:	7d7b      	ldrb	r3, [r7, #21]
 8003cf6:	2b02      	cmp	r3, #2
 8003cf8:	d101      	bne.n	8003cfe <HAL_TIM_IC_Start_DMA+0xb6>
  {
    return HAL_BUSY;
 8003cfa:	2302      	movs	r3, #2
 8003cfc:	e157      	b.n	8003fae <HAL_TIM_IC_Start_DMA+0x366>
  }
  else if ((channel_state == HAL_TIM_CHANNEL_STATE_READY)
 8003cfe:	7dbb      	ldrb	r3, [r7, #22]
 8003d00:	2b01      	cmp	r3, #1
 8003d02:	d153      	bne.n	8003dac <HAL_TIM_IC_Start_DMA+0x164>
           && (complementary_channel_state == HAL_TIM_CHANNEL_STATE_READY))
 8003d04:	7d7b      	ldrb	r3, [r7, #21]
 8003d06:	2b01      	cmp	r3, #1
 8003d08:	d150      	bne.n	8003dac <HAL_TIM_IC_Start_DMA+0x164>
  {
    if ((pData == NULL) || (Length == 0U))
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d002      	beq.n	8003d16 <HAL_TIM_IC_Start_DMA+0xce>
 8003d10:	887b      	ldrh	r3, [r7, #2]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d101      	bne.n	8003d1a <HAL_TIM_IC_Start_DMA+0xd2>
    {
      return HAL_ERROR;
 8003d16:	2301      	movs	r3, #1
 8003d18:	e149      	b.n	8003fae <HAL_TIM_IC_Start_DMA+0x366>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d104      	bne.n	8003d2a <HAL_TIM_IC_Start_DMA+0xe2>
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	2202      	movs	r2, #2
 8003d24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003d28:	e023      	b.n	8003d72 <HAL_TIM_IC_Start_DMA+0x12a>
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	2b04      	cmp	r3, #4
 8003d2e:	d104      	bne.n	8003d3a <HAL_TIM_IC_Start_DMA+0xf2>
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	2202      	movs	r2, #2
 8003d34:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003d38:	e01b      	b.n	8003d72 <HAL_TIM_IC_Start_DMA+0x12a>
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	2b08      	cmp	r3, #8
 8003d3e:	d104      	bne.n	8003d4a <HAL_TIM_IC_Start_DMA+0x102>
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	2202      	movs	r2, #2
 8003d44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003d48:	e013      	b.n	8003d72 <HAL_TIM_IC_Start_DMA+0x12a>
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	2b0c      	cmp	r3, #12
 8003d4e:	d104      	bne.n	8003d5a <HAL_TIM_IC_Start_DMA+0x112>
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	2202      	movs	r2, #2
 8003d54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003d58:	e00b      	b.n	8003d72 <HAL_TIM_IC_Start_DMA+0x12a>
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	2b10      	cmp	r3, #16
 8003d5e:	d104      	bne.n	8003d6a <HAL_TIM_IC_Start_DMA+0x122>
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	2202      	movs	r2, #2
 8003d64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003d68:	e003      	b.n	8003d72 <HAL_TIM_IC_Start_DMA+0x12a>
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	2202      	movs	r2, #2
 8003d6e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d104      	bne.n	8003d82 <HAL_TIM_IC_Start_DMA+0x13a>
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	2202      	movs	r2, #2
 8003d7c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    if ((pData == NULL) || (Length == 0U))
 8003d80:	e016      	b.n	8003db0 <HAL_TIM_IC_Start_DMA+0x168>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	2b04      	cmp	r3, #4
 8003d86:	d104      	bne.n	8003d92 <HAL_TIM_IC_Start_DMA+0x14a>
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	2202      	movs	r2, #2
 8003d8c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    if ((pData == NULL) || (Length == 0U))
 8003d90:	e00e      	b.n	8003db0 <HAL_TIM_IC_Start_DMA+0x168>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	2b08      	cmp	r3, #8
 8003d96:	d104      	bne.n	8003da2 <HAL_TIM_IC_Start_DMA+0x15a>
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	2202      	movs	r2, #2
 8003d9c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
    if ((pData == NULL) || (Length == 0U))
 8003da0:	e006      	b.n	8003db0 <HAL_TIM_IC_Start_DMA+0x168>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	2202      	movs	r2, #2
 8003da6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
    if ((pData == NULL) || (Length == 0U))
 8003daa:	e001      	b.n	8003db0 <HAL_TIM_IC_Start_DMA+0x168>
    }
  }
  else
  {
    return HAL_ERROR;
 8003dac:	2301      	movs	r3, #1
 8003dae:	e0fe      	b.n	8003fae <HAL_TIM_IC_Start_DMA+0x366>
  }

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	2201      	movs	r2, #1
 8003db6:	68b9      	ldr	r1, [r7, #8]
 8003db8:	4618      	mov	r0, r3
 8003dba:	f000 fef5 	bl	8004ba8 <TIM_CCxChannelCmd>

  switch (Channel)
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	2b0c      	cmp	r3, #12
 8003dc2:	f200 80ad 	bhi.w	8003f20 <HAL_TIM_IC_Start_DMA+0x2d8>
 8003dc6:	a201      	add	r2, pc, #4	@ (adr r2, 8003dcc <HAL_TIM_IC_Start_DMA+0x184>)
 8003dc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dcc:	08003e01 	.word	0x08003e01
 8003dd0:	08003f21 	.word	0x08003f21
 8003dd4:	08003f21 	.word	0x08003f21
 8003dd8:	08003f21 	.word	0x08003f21
 8003ddc:	08003e49 	.word	0x08003e49
 8003de0:	08003f21 	.word	0x08003f21
 8003de4:	08003f21 	.word	0x08003f21
 8003de8:	08003f21 	.word	0x08003f21
 8003dec:	08003e91 	.word	0x08003e91
 8003df0:	08003f21 	.word	0x08003f21
 8003df4:	08003f21 	.word	0x08003f21
 8003df8:	08003f21 	.word	0x08003f21
 8003dfc:	08003ed9 	.word	0x08003ed9
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e04:	4a6c      	ldr	r2, [pc, #432]	@ (8003fb8 <HAL_TIM_IC_Start_DMA+0x370>)
 8003e06:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e0c:	4a6b      	ldr	r2, [pc, #428]	@ (8003fbc <HAL_TIM_IC_Start_DMA+0x374>)
 8003e0e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e14:	4a6a      	ldr	r2, [pc, #424]	@ (8003fc0 <HAL_TIM_IC_Start_DMA+0x378>)
 8003e16:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData,
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	3334      	adds	r3, #52	@ 0x34
 8003e22:	4619      	mov	r1, r3
 8003e24:	687a      	ldr	r2, [r7, #4]
 8003e26:	887b      	ldrh	r3, [r7, #2]
 8003e28:	f7fd ff96 	bl	8001d58 <HAL_DMA_Start_IT>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d001      	beq.n	8003e36 <HAL_TIM_IC_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003e32:	2301      	movs	r3, #1
 8003e34:	e0bb      	b.n	8003fae <HAL_TIM_IC_Start_DMA+0x366>
      }
      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	68da      	ldr	r2, [r3, #12]
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e44:	60da      	str	r2, [r3, #12]
      break;
 8003e46:	e06e      	b.n	8003f26 <HAL_TIM_IC_Start_DMA+0x2de>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e4c:	4a5a      	ldr	r2, [pc, #360]	@ (8003fb8 <HAL_TIM_IC_Start_DMA+0x370>)
 8003e4e:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e54:	4a59      	ldr	r2, [pc, #356]	@ (8003fbc <HAL_TIM_IC_Start_DMA+0x374>)
 8003e56:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e5c:	4a58      	ldr	r2, [pc, #352]	@ (8003fc0 <HAL_TIM_IC_Start_DMA+0x378>)
 8003e5e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData,
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	3338      	adds	r3, #56	@ 0x38
 8003e6a:	4619      	mov	r1, r3
 8003e6c:	687a      	ldr	r2, [r7, #4]
 8003e6e:	887b      	ldrh	r3, [r7, #2]
 8003e70:	f7fd ff72 	bl	8001d58 <HAL_DMA_Start_IT>
 8003e74:	4603      	mov	r3, r0
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d001      	beq.n	8003e7e <HAL_TIM_IC_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	e097      	b.n	8003fae <HAL_TIM_IC_Start_DMA+0x366>
      }
      /* Enable the TIM Capture/Compare 2  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	68da      	ldr	r2, [r3, #12]
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003e8c:	60da      	str	r2, [r3, #12]
      break;
 8003e8e:	e04a      	b.n	8003f26 <HAL_TIM_IC_Start_DMA+0x2de>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e94:	4a48      	ldr	r2, [pc, #288]	@ (8003fb8 <HAL_TIM_IC_Start_DMA+0x370>)
 8003e96:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e9c:	4a47      	ldr	r2, [pc, #284]	@ (8003fbc <HAL_TIM_IC_Start_DMA+0x374>)
 8003e9e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ea4:	4a46      	ldr	r2, [pc, #280]	@ (8003fc0 <HAL_TIM_IC_Start_DMA+0x378>)
 8003ea6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData,
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	333c      	adds	r3, #60	@ 0x3c
 8003eb2:	4619      	mov	r1, r3
 8003eb4:	687a      	ldr	r2, [r7, #4]
 8003eb6:	887b      	ldrh	r3, [r7, #2]
 8003eb8:	f7fd ff4e 	bl	8001d58 <HAL_DMA_Start_IT>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d001      	beq.n	8003ec6 <HAL_TIM_IC_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	e073      	b.n	8003fae <HAL_TIM_IC_Start_DMA+0x366>
      }
      /* Enable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	68da      	ldr	r2, [r3, #12]
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003ed4:	60da      	str	r2, [r3, #12]
      break;
 8003ed6:	e026      	b.n	8003f26 <HAL_TIM_IC_Start_DMA+0x2de>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003edc:	4a36      	ldr	r2, [pc, #216]	@ (8003fb8 <HAL_TIM_IC_Start_DMA+0x370>)
 8003ede:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ee4:	4a35      	ldr	r2, [pc, #212]	@ (8003fbc <HAL_TIM_IC_Start_DMA+0x374>)
 8003ee6:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003eec:	4a34      	ldr	r2, [pc, #208]	@ (8003fc0 <HAL_TIM_IC_Start_DMA+0x378>)
 8003eee:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData,
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	3340      	adds	r3, #64	@ 0x40
 8003efa:	4619      	mov	r1, r3
 8003efc:	687a      	ldr	r2, [r7, #4]
 8003efe:	887b      	ldrh	r3, [r7, #2]
 8003f00:	f7fd ff2a 	bl	8001d58 <HAL_DMA_Start_IT>
 8003f04:	4603      	mov	r3, r0
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d001      	beq.n	8003f0e <HAL_TIM_IC_Start_DMA+0x2c6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	e04f      	b.n	8003fae <HAL_TIM_IC_Start_DMA+0x366>
      }
      /* Enable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	68da      	ldr	r2, [r3, #12]
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003f1c:	60da      	str	r2, [r3, #12]
      break;
 8003f1e:	e002      	b.n	8003f26 <HAL_TIM_IC_Start_DMA+0x2de>
    }

    default:
      status = HAL_ERROR;
 8003f20:	2301      	movs	r3, #1
 8003f22:	75fb      	strb	r3, [r7, #23]
      break;
 8003f24:	bf00      	nop
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a26      	ldr	r2, [pc, #152]	@ (8003fc4 <HAL_TIM_IC_Start_DMA+0x37c>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d01d      	beq.n	8003f6c <HAL_TIM_IC_Start_DMA+0x324>
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f38:	d018      	beq.n	8003f6c <HAL_TIM_IC_Start_DMA+0x324>
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a22      	ldr	r2, [pc, #136]	@ (8003fc8 <HAL_TIM_IC_Start_DMA+0x380>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d013      	beq.n	8003f6c <HAL_TIM_IC_Start_DMA+0x324>
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a20      	ldr	r2, [pc, #128]	@ (8003fcc <HAL_TIM_IC_Start_DMA+0x384>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d00e      	beq.n	8003f6c <HAL_TIM_IC_Start_DMA+0x324>
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a1f      	ldr	r2, [pc, #124]	@ (8003fd0 <HAL_TIM_IC_Start_DMA+0x388>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d009      	beq.n	8003f6c <HAL_TIM_IC_Start_DMA+0x324>
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a1d      	ldr	r2, [pc, #116]	@ (8003fd4 <HAL_TIM_IC_Start_DMA+0x38c>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d004      	beq.n	8003f6c <HAL_TIM_IC_Start_DMA+0x324>
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a1c      	ldr	r2, [pc, #112]	@ (8003fd8 <HAL_TIM_IC_Start_DMA+0x390>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d115      	bne.n	8003f98 <HAL_TIM_IC_Start_DMA+0x350>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	689a      	ldr	r2, [r3, #8]
 8003f72:	4b1a      	ldr	r3, [pc, #104]	@ (8003fdc <HAL_TIM_IC_Start_DMA+0x394>)
 8003f74:	4013      	ands	r3, r2
 8003f76:	613b      	str	r3, [r7, #16]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f78:	693b      	ldr	r3, [r7, #16]
 8003f7a:	2b06      	cmp	r3, #6
 8003f7c:	d015      	beq.n	8003faa <HAL_TIM_IC_Start_DMA+0x362>
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f84:	d011      	beq.n	8003faa <HAL_TIM_IC_Start_DMA+0x362>
    {
      __HAL_TIM_ENABLE(htim);
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	681a      	ldr	r2, [r3, #0]
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f042 0201 	orr.w	r2, r2, #1
 8003f94:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f96:	e008      	b.n	8003faa <HAL_TIM_IC_Start_DMA+0x362>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f042 0201 	orr.w	r2, r2, #1
 8003fa6:	601a      	str	r2, [r3, #0]
 8003fa8:	e000      	b.n	8003fac <HAL_TIM_IC_Start_DMA+0x364>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003faa:	bf00      	nop
  }

  /* Return function status */
  return status;
 8003fac:	7dfb      	ldrb	r3, [r7, #23]
}
 8003fae:	4618      	mov	r0, r3
 8003fb0:	3718      	adds	r7, #24
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bd80      	pop	{r7, pc}
 8003fb6:	bf00      	nop
 8003fb8:	080045af 	.word	0x080045af
 8003fbc:	08004677 	.word	0x08004677
 8003fc0:	0800451d 	.word	0x0800451d
 8003fc4:	40012c00 	.word	0x40012c00
 8003fc8:	40000400 	.word	0x40000400
 8003fcc:	40000800 	.word	0x40000800
 8003fd0:	40000c00 	.word	0x40000c00
 8003fd4:	40013400 	.word	0x40013400
 8003fd8:	40014000 	.word	0x40014000
 8003fdc:	00010007 	.word	0x00010007

08003fe0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b084      	sub	sp, #16
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	68db      	ldr	r3, [r3, #12]
 8003fee:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	691b      	ldr	r3, [r3, #16]
 8003ff6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	f003 0302 	and.w	r3, r3, #2
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d020      	beq.n	8004044 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	f003 0302 	and.w	r3, r3, #2
 8004008:	2b00      	cmp	r3, #0
 800400a:	d01b      	beq.n	8004044 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f06f 0202 	mvn.w	r2, #2
 8004014:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2201      	movs	r2, #1
 800401a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	699b      	ldr	r3, [r3, #24]
 8004022:	f003 0303 	and.w	r3, r3, #3
 8004026:	2b00      	cmp	r3, #0
 8004028:	d003      	beq.n	8004032 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800402a:	6878      	ldr	r0, [r7, #4]
 800402c:	f7fd f8dc 	bl	80011e8 <HAL_TIM_IC_CaptureCallback>
 8004030:	e005      	b.n	800403e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004032:	6878      	ldr	r0, [r7, #4]
 8004034:	f000 fa40 	bl	80044b8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004038:	6878      	ldr	r0, [r7, #4]
 800403a:	f000 fa51 	bl	80044e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2200      	movs	r2, #0
 8004042:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	f003 0304 	and.w	r3, r3, #4
 800404a:	2b00      	cmp	r3, #0
 800404c:	d020      	beq.n	8004090 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	f003 0304 	and.w	r3, r3, #4
 8004054:	2b00      	cmp	r3, #0
 8004056:	d01b      	beq.n	8004090 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f06f 0204 	mvn.w	r2, #4
 8004060:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2202      	movs	r2, #2
 8004066:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	699b      	ldr	r3, [r3, #24]
 800406e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004072:	2b00      	cmp	r3, #0
 8004074:	d003      	beq.n	800407e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004076:	6878      	ldr	r0, [r7, #4]
 8004078:	f7fd f8b6 	bl	80011e8 <HAL_TIM_IC_CaptureCallback>
 800407c:	e005      	b.n	800408a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800407e:	6878      	ldr	r0, [r7, #4]
 8004080:	f000 fa1a 	bl	80044b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004084:	6878      	ldr	r0, [r7, #4]
 8004086:	f000 fa2b 	bl	80044e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2200      	movs	r2, #0
 800408e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	f003 0308 	and.w	r3, r3, #8
 8004096:	2b00      	cmp	r3, #0
 8004098:	d020      	beq.n	80040dc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	f003 0308 	and.w	r3, r3, #8
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d01b      	beq.n	80040dc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f06f 0208 	mvn.w	r2, #8
 80040ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2204      	movs	r2, #4
 80040b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	69db      	ldr	r3, [r3, #28]
 80040ba:	f003 0303 	and.w	r3, r3, #3
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d003      	beq.n	80040ca <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040c2:	6878      	ldr	r0, [r7, #4]
 80040c4:	f7fd f890 	bl	80011e8 <HAL_TIM_IC_CaptureCallback>
 80040c8:	e005      	b.n	80040d6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040ca:	6878      	ldr	r0, [r7, #4]
 80040cc:	f000 f9f4 	bl	80044b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040d0:	6878      	ldr	r0, [r7, #4]
 80040d2:	f000 fa05 	bl	80044e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2200      	movs	r2, #0
 80040da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	f003 0310 	and.w	r3, r3, #16
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d020      	beq.n	8004128 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	f003 0310 	and.w	r3, r3, #16
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d01b      	beq.n	8004128 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f06f 0210 	mvn.w	r2, #16
 80040f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2208      	movs	r2, #8
 80040fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	69db      	ldr	r3, [r3, #28]
 8004106:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800410a:	2b00      	cmp	r3, #0
 800410c:	d003      	beq.n	8004116 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800410e:	6878      	ldr	r0, [r7, #4]
 8004110:	f7fd f86a 	bl	80011e8 <HAL_TIM_IC_CaptureCallback>
 8004114:	e005      	b.n	8004122 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004116:	6878      	ldr	r0, [r7, #4]
 8004118:	f000 f9ce 	bl	80044b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800411c:	6878      	ldr	r0, [r7, #4]
 800411e:	f000 f9df 	bl	80044e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2200      	movs	r2, #0
 8004126:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	f003 0301 	and.w	r3, r3, #1
 800412e:	2b00      	cmp	r3, #0
 8004130:	d00c      	beq.n	800414c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	f003 0301 	and.w	r3, r3, #1
 8004138:	2b00      	cmp	r3, #0
 800413a:	d007      	beq.n	800414c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f06f 0201 	mvn.w	r2, #1
 8004144:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	f7fd f8d4 	bl	80012f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004152:	2b00      	cmp	r3, #0
 8004154:	d104      	bne.n	8004160 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800415c:	2b00      	cmp	r3, #0
 800415e:	d00c      	beq.n	800417a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004166:	2b00      	cmp	r3, #0
 8004168:	d007      	beq.n	800417a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8004172:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004174:	6878      	ldr	r0, [r7, #4]
 8004176:	f000 fd46 	bl	8004c06 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004180:	2b00      	cmp	r3, #0
 8004182:	d00c      	beq.n	800419e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800418a:	2b00      	cmp	r3, #0
 800418c:	d007      	beq.n	800419e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004196:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004198:	6878      	ldr	r0, [r7, #4]
 800419a:	f000 fd3e 	bl	8004c1a <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d00c      	beq.n	80041c2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d007      	beq.n	80041c2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80041ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80041bc:	6878      	ldr	r0, [r7, #4]
 80041be:	f000 f999 	bl	80044f4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	f003 0320 	and.w	r3, r3, #32
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d00c      	beq.n	80041e6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	f003 0320 	and.w	r3, r3, #32
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d007      	beq.n	80041e6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f06f 0220 	mvn.w	r2, #32
 80041de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80041e0:	6878      	ldr	r0, [r7, #4]
 80041e2:	f000 fd06 	bl	8004bf2 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80041e6:	bf00      	nop
 80041e8:	3710      	adds	r7, #16
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd80      	pop	{r7, pc}

080041ee <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80041ee:	b580      	push	{r7, lr}
 80041f0:	b086      	sub	sp, #24
 80041f2:	af00      	add	r7, sp, #0
 80041f4:	60f8      	str	r0, [r7, #12]
 80041f6:	60b9      	str	r1, [r7, #8]
 80041f8:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041fa:	2300      	movs	r3, #0
 80041fc:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004204:	2b01      	cmp	r3, #1
 8004206:	d101      	bne.n	800420c <HAL_TIM_IC_ConfigChannel+0x1e>
 8004208:	2302      	movs	r3, #2
 800420a:	e088      	b.n	800431e <HAL_TIM_IC_ConfigChannel+0x130>
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	2201      	movs	r2, #1
 8004210:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d11b      	bne.n	8004252 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004226:	68bb      	ldr	r3, [r7, #8]
 8004228:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800422a:	f000 faff 	bl	800482c <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	699a      	ldr	r2, [r3, #24]
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f022 020c 	bic.w	r2, r2, #12
 800423c:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	6999      	ldr	r1, [r3, #24]
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	689a      	ldr	r2, [r3, #8]
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	430a      	orrs	r2, r1
 800424e:	619a      	str	r2, [r3, #24]
 8004250:	e060      	b.n	8004314 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2b04      	cmp	r3, #4
 8004256:	d11c      	bne.n	8004292 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8004268:	f000 fb7d 	bl	8004966 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	699a      	ldr	r2, [r3, #24]
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800427a:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	6999      	ldr	r1, [r3, #24]
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	689b      	ldr	r3, [r3, #8]
 8004286:	021a      	lsls	r2, r3, #8
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	430a      	orrs	r2, r1
 800428e:	619a      	str	r2, [r3, #24]
 8004290:	e040      	b.n	8004314 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2b08      	cmp	r3, #8
 8004296:	d11b      	bne.n	80042d0 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80042a8:	f000 fbca 	bl	8004a40 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	69da      	ldr	r2, [r3, #28]
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f022 020c 	bic.w	r2, r2, #12
 80042ba:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	69d9      	ldr	r1, [r3, #28]
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	689a      	ldr	r2, [r3, #8]
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	430a      	orrs	r2, r1
 80042cc:	61da      	str	r2, [r3, #28]
 80042ce:	e021      	b.n	8004314 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2b0c      	cmp	r3, #12
 80042d4:	d11c      	bne.n	8004310 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80042e6:	f000 fbe7 	bl	8004ab8 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	69da      	ldr	r2, [r3, #28]
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80042f8:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	69d9      	ldr	r1, [r3, #28]
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	689b      	ldr	r3, [r3, #8]
 8004304:	021a      	lsls	r2, r3, #8
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	430a      	orrs	r2, r1
 800430c:	61da      	str	r2, [r3, #28]
 800430e:	e001      	b.n	8004314 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8004310:	2301      	movs	r3, #1
 8004312:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2200      	movs	r2, #0
 8004318:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800431c:	7dfb      	ldrb	r3, [r7, #23]
}
 800431e:	4618      	mov	r0, r3
 8004320:	3718      	adds	r7, #24
 8004322:	46bd      	mov	sp, r7
 8004324:	bd80      	pop	{r7, pc}

08004326 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004326:	b580      	push	{r7, lr}
 8004328:	b084      	sub	sp, #16
 800432a:	af00      	add	r7, sp, #0
 800432c:	6078      	str	r0, [r7, #4]
 800432e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004330:	2300      	movs	r3, #0
 8004332:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800433a:	2b01      	cmp	r3, #1
 800433c:	d101      	bne.n	8004342 <HAL_TIM_ConfigClockSource+0x1c>
 800433e:	2302      	movs	r3, #2
 8004340:	e0b6      	b.n	80044b0 <HAL_TIM_ConfigClockSource+0x18a>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2201      	movs	r2, #1
 8004346:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2202      	movs	r2, #2
 800434e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	689b      	ldr	r3, [r3, #8]
 8004358:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004360:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004364:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800436c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	68ba      	ldr	r2, [r7, #8]
 8004374:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800437e:	d03e      	beq.n	80043fe <HAL_TIM_ConfigClockSource+0xd8>
 8004380:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004384:	f200 8087 	bhi.w	8004496 <HAL_TIM_ConfigClockSource+0x170>
 8004388:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800438c:	f000 8086 	beq.w	800449c <HAL_TIM_ConfigClockSource+0x176>
 8004390:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004394:	d87f      	bhi.n	8004496 <HAL_TIM_ConfigClockSource+0x170>
 8004396:	2b70      	cmp	r3, #112	@ 0x70
 8004398:	d01a      	beq.n	80043d0 <HAL_TIM_ConfigClockSource+0xaa>
 800439a:	2b70      	cmp	r3, #112	@ 0x70
 800439c:	d87b      	bhi.n	8004496 <HAL_TIM_ConfigClockSource+0x170>
 800439e:	2b60      	cmp	r3, #96	@ 0x60
 80043a0:	d050      	beq.n	8004444 <HAL_TIM_ConfigClockSource+0x11e>
 80043a2:	2b60      	cmp	r3, #96	@ 0x60
 80043a4:	d877      	bhi.n	8004496 <HAL_TIM_ConfigClockSource+0x170>
 80043a6:	2b50      	cmp	r3, #80	@ 0x50
 80043a8:	d03c      	beq.n	8004424 <HAL_TIM_ConfigClockSource+0xfe>
 80043aa:	2b50      	cmp	r3, #80	@ 0x50
 80043ac:	d873      	bhi.n	8004496 <HAL_TIM_ConfigClockSource+0x170>
 80043ae:	2b40      	cmp	r3, #64	@ 0x40
 80043b0:	d058      	beq.n	8004464 <HAL_TIM_ConfigClockSource+0x13e>
 80043b2:	2b40      	cmp	r3, #64	@ 0x40
 80043b4:	d86f      	bhi.n	8004496 <HAL_TIM_ConfigClockSource+0x170>
 80043b6:	2b30      	cmp	r3, #48	@ 0x30
 80043b8:	d064      	beq.n	8004484 <HAL_TIM_ConfigClockSource+0x15e>
 80043ba:	2b30      	cmp	r3, #48	@ 0x30
 80043bc:	d86b      	bhi.n	8004496 <HAL_TIM_ConfigClockSource+0x170>
 80043be:	2b20      	cmp	r3, #32
 80043c0:	d060      	beq.n	8004484 <HAL_TIM_ConfigClockSource+0x15e>
 80043c2:	2b20      	cmp	r3, #32
 80043c4:	d867      	bhi.n	8004496 <HAL_TIM_ConfigClockSource+0x170>
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d05c      	beq.n	8004484 <HAL_TIM_ConfigClockSource+0x15e>
 80043ca:	2b10      	cmp	r3, #16
 80043cc:	d05a      	beq.n	8004484 <HAL_TIM_ConfigClockSource+0x15e>
 80043ce:	e062      	b.n	8004496 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80043e0:	f000 fbc2 	bl	8004b68 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	689b      	ldr	r3, [r3, #8]
 80043ea:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80043f2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	68ba      	ldr	r2, [r7, #8]
 80043fa:	609a      	str	r2, [r3, #8]
      break;
 80043fc:	e04f      	b.n	800449e <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800440e:	f000 fbab 	bl	8004b68 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	689a      	ldr	r2, [r3, #8]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004420:	609a      	str	r2, [r3, #8]
      break;
 8004422:	e03c      	b.n	800449e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004430:	461a      	mov	r2, r3
 8004432:	f000 fa69 	bl	8004908 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	2150      	movs	r1, #80	@ 0x50
 800443c:	4618      	mov	r0, r3
 800443e:	f000 fb78 	bl	8004b32 <TIM_ITRx_SetConfig>
      break;
 8004442:	e02c      	b.n	800449e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004450:	461a      	mov	r2, r3
 8004452:	f000 fac5 	bl	80049e0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	2160      	movs	r1, #96	@ 0x60
 800445c:	4618      	mov	r0, r3
 800445e:	f000 fb68 	bl	8004b32 <TIM_ITRx_SetConfig>
      break;
 8004462:	e01c      	b.n	800449e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004470:	461a      	mov	r2, r3
 8004472:	f000 fa49 	bl	8004908 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	2140      	movs	r1, #64	@ 0x40
 800447c:	4618      	mov	r0, r3
 800447e:	f000 fb58 	bl	8004b32 <TIM_ITRx_SetConfig>
      break;
 8004482:	e00c      	b.n	800449e <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681a      	ldr	r2, [r3, #0]
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4619      	mov	r1, r3
 800448e:	4610      	mov	r0, r2
 8004490:	f000 fb4f 	bl	8004b32 <TIM_ITRx_SetConfig>
      break;
 8004494:	e003      	b.n	800449e <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004496:	2301      	movs	r3, #1
 8004498:	73fb      	strb	r3, [r7, #15]
      break;
 800449a:	e000      	b.n	800449e <HAL_TIM_ConfigClockSource+0x178>
      break;
 800449c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2201      	movs	r2, #1
 80044a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2200      	movs	r2, #0
 80044aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80044ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80044b0:	4618      	mov	r0, r3
 80044b2:	3710      	adds	r7, #16
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bd80      	pop	{r7, pc}

080044b8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80044b8:	b480      	push	{r7}
 80044ba:	b083      	sub	sp, #12
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80044c0:	bf00      	nop
 80044c2:	370c      	adds	r7, #12
 80044c4:	46bd      	mov	sp, r7
 80044c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ca:	4770      	bx	lr

080044cc <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b083      	sub	sp, #12
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 80044d4:	bf00      	nop
 80044d6:	370c      	adds	r7, #12
 80044d8:	46bd      	mov	sp, r7
 80044da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044de:	4770      	bx	lr

080044e0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b083      	sub	sp, #12
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80044e8:	bf00      	nop
 80044ea:	370c      	adds	r7, #12
 80044ec:	46bd      	mov	sp, r7
 80044ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f2:	4770      	bx	lr

080044f4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80044f4:	b480      	push	{r7}
 80044f6:	b083      	sub	sp, #12
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80044fc:	bf00      	nop
 80044fe:	370c      	adds	r7, #12
 8004500:	46bd      	mov	sp, r7
 8004502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004506:	4770      	bx	lr

08004508 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8004508:	b480      	push	{r7}
 800450a:	b083      	sub	sp, #12
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8004510:	bf00      	nop
 8004512:	370c      	adds	r7, #12
 8004514:	46bd      	mov	sp, r7
 8004516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451a:	4770      	bx	lr

0800451c <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b084      	sub	sp, #16
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004528:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800452e:	687a      	ldr	r2, [r7, #4]
 8004530:	429a      	cmp	r2, r3
 8004532:	d107      	bne.n	8004544 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	2201      	movs	r2, #1
 8004538:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	2201      	movs	r2, #1
 800453e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004542:	e02a      	b.n	800459a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004548:	687a      	ldr	r2, [r7, #4]
 800454a:	429a      	cmp	r2, r3
 800454c:	d107      	bne.n	800455e <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	2202      	movs	r2, #2
 8004552:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	2201      	movs	r2, #1
 8004558:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800455c:	e01d      	b.n	800459a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004562:	687a      	ldr	r2, [r7, #4]
 8004564:	429a      	cmp	r2, r3
 8004566:	d107      	bne.n	8004578 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	2204      	movs	r2, #4
 800456c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	2201      	movs	r2, #1
 8004572:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004576:	e010      	b.n	800459a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800457c:	687a      	ldr	r2, [r7, #4]
 800457e:	429a      	cmp	r2, r3
 8004580:	d107      	bne.n	8004592 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	2208      	movs	r2, #8
 8004586:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	2201      	movs	r2, #1
 800458c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004590:	e003      	b.n	800459a <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	2201      	movs	r2, #1
 8004596:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800459a:	68f8      	ldr	r0, [r7, #12]
 800459c:	f7ff ffb4 	bl	8004508 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	2200      	movs	r2, #0
 80045a4:	771a      	strb	r2, [r3, #28]
}
 80045a6:	bf00      	nop
 80045a8:	3710      	adds	r7, #16
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}

080045ae <TIM_DMACaptureCplt>:
  * @brief  TIM DMA Capture complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureCplt(DMA_HandleTypeDef *hdma)
{
 80045ae:	b580      	push	{r7, lr}
 80045b0:	b084      	sub	sp, #16
 80045b2:	af00      	add	r7, sp, #0
 80045b4:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045ba:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045c0:	687a      	ldr	r2, [r7, #4]
 80045c2:	429a      	cmp	r2, r3
 80045c4:	d10f      	bne.n	80045e6 <TIM_DMACaptureCplt+0x38>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	2201      	movs	r2, #1
 80045ca:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	69db      	ldr	r3, [r3, #28]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d146      	bne.n	8004662 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	2201      	movs	r2, #1
 80045d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	2201      	movs	r2, #1
 80045e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80045e4:	e03d      	b.n	8004662 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045ea:	687a      	ldr	r2, [r7, #4]
 80045ec:	429a      	cmp	r2, r3
 80045ee:	d10f      	bne.n	8004610 <TIM_DMACaptureCplt+0x62>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	2202      	movs	r2, #2
 80045f4:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	69db      	ldr	r3, [r3, #28]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d131      	bne.n	8004662 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	2201      	movs	r2, #1
 8004602:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	2201      	movs	r2, #1
 800460a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800460e:	e028      	b.n	8004662 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004614:	687a      	ldr	r2, [r7, #4]
 8004616:	429a      	cmp	r2, r3
 8004618:	d10f      	bne.n	800463a <TIM_DMACaptureCplt+0x8c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	2204      	movs	r2, #4
 800461e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	69db      	ldr	r3, [r3, #28]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d11c      	bne.n	8004662 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	2201      	movs	r2, #1
 800462c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	2201      	movs	r2, #1
 8004634:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004638:	e013      	b.n	8004662 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800463e:	687a      	ldr	r2, [r7, #4]
 8004640:	429a      	cmp	r2, r3
 8004642:	d10e      	bne.n	8004662 <TIM_DMACaptureCplt+0xb4>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	2208      	movs	r2, #8
 8004648:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	69db      	ldr	r3, [r3, #28]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d107      	bne.n	8004662 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	2201      	movs	r2, #1
 8004656:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	2201      	movs	r2, #1
 800465e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureCallback(htim);
#else
  HAL_TIM_IC_CaptureCallback(htim);
 8004662:	68f8      	ldr	r0, [r7, #12]
 8004664:	f7fc fdc0 	bl	80011e8 <HAL_TIM_IC_CaptureCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	2200      	movs	r2, #0
 800466c:	771a      	strb	r2, [r3, #28]
}
 800466e:	bf00      	nop
 8004670:	3710      	adds	r7, #16
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}

08004676 <TIM_DMACaptureHalfCplt>:
  * @brief  TIM DMA Capture half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004676:	b580      	push	{r7, lr}
 8004678:	b084      	sub	sp, #16
 800467a:	af00      	add	r7, sp, #0
 800467c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004682:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004688:	687a      	ldr	r2, [r7, #4]
 800468a:	429a      	cmp	r2, r3
 800468c:	d103      	bne.n	8004696 <TIM_DMACaptureHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	2201      	movs	r2, #1
 8004692:	771a      	strb	r2, [r3, #28]
 8004694:	e019      	b.n	80046ca <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800469a:	687a      	ldr	r2, [r7, #4]
 800469c:	429a      	cmp	r2, r3
 800469e:	d103      	bne.n	80046a8 <TIM_DMACaptureHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	2202      	movs	r2, #2
 80046a4:	771a      	strb	r2, [r3, #28]
 80046a6:	e010      	b.n	80046ca <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046ac:	687a      	ldr	r2, [r7, #4]
 80046ae:	429a      	cmp	r2, r3
 80046b0:	d103      	bne.n	80046ba <TIM_DMACaptureHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	2204      	movs	r2, #4
 80046b6:	771a      	strb	r2, [r3, #28]
 80046b8:	e007      	b.n	80046ca <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046be:	687a      	ldr	r2, [r7, #4]
 80046c0:	429a      	cmp	r2, r3
 80046c2:	d102      	bne.n	80046ca <TIM_DMACaptureHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	2208      	movs	r2, #8
 80046c8:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureHalfCpltCallback(htim);
#else
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 80046ca:	68f8      	ldr	r0, [r7, #12]
 80046cc:	f7ff fefe 	bl	80044cc <HAL_TIM_IC_CaptureHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	2200      	movs	r2, #0
 80046d4:	771a      	strb	r2, [r3, #28]
}
 80046d6:	bf00      	nop
 80046d8:	3710      	adds	r7, #16
 80046da:	46bd      	mov	sp, r7
 80046dc:	bd80      	pop	{r7, pc}
	...

080046e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80046e0:	b480      	push	{r7}
 80046e2:	b085      	sub	sp, #20
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
 80046e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	4a46      	ldr	r2, [pc, #280]	@ (800480c <TIM_Base_SetConfig+0x12c>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d013      	beq.n	8004720 <TIM_Base_SetConfig+0x40>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046fe:	d00f      	beq.n	8004720 <TIM_Base_SetConfig+0x40>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	4a43      	ldr	r2, [pc, #268]	@ (8004810 <TIM_Base_SetConfig+0x130>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d00b      	beq.n	8004720 <TIM_Base_SetConfig+0x40>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	4a42      	ldr	r2, [pc, #264]	@ (8004814 <TIM_Base_SetConfig+0x134>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d007      	beq.n	8004720 <TIM_Base_SetConfig+0x40>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	4a41      	ldr	r2, [pc, #260]	@ (8004818 <TIM_Base_SetConfig+0x138>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d003      	beq.n	8004720 <TIM_Base_SetConfig+0x40>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	4a40      	ldr	r2, [pc, #256]	@ (800481c <TIM_Base_SetConfig+0x13c>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d108      	bne.n	8004732 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004726:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	68fa      	ldr	r2, [r7, #12]
 800472e:	4313      	orrs	r3, r2
 8004730:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	4a35      	ldr	r2, [pc, #212]	@ (800480c <TIM_Base_SetConfig+0x12c>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d01f      	beq.n	800477a <TIM_Base_SetConfig+0x9a>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004740:	d01b      	beq.n	800477a <TIM_Base_SetConfig+0x9a>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	4a32      	ldr	r2, [pc, #200]	@ (8004810 <TIM_Base_SetConfig+0x130>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d017      	beq.n	800477a <TIM_Base_SetConfig+0x9a>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	4a31      	ldr	r2, [pc, #196]	@ (8004814 <TIM_Base_SetConfig+0x134>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d013      	beq.n	800477a <TIM_Base_SetConfig+0x9a>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	4a30      	ldr	r2, [pc, #192]	@ (8004818 <TIM_Base_SetConfig+0x138>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d00f      	beq.n	800477a <TIM_Base_SetConfig+0x9a>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	4a2f      	ldr	r2, [pc, #188]	@ (800481c <TIM_Base_SetConfig+0x13c>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d00b      	beq.n	800477a <TIM_Base_SetConfig+0x9a>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	4a2e      	ldr	r2, [pc, #184]	@ (8004820 <TIM_Base_SetConfig+0x140>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d007      	beq.n	800477a <TIM_Base_SetConfig+0x9a>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	4a2d      	ldr	r2, [pc, #180]	@ (8004824 <TIM_Base_SetConfig+0x144>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d003      	beq.n	800477a <TIM_Base_SetConfig+0x9a>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	4a2c      	ldr	r2, [pc, #176]	@ (8004828 <TIM_Base_SetConfig+0x148>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d108      	bne.n	800478c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004780:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	68db      	ldr	r3, [r3, #12]
 8004786:	68fa      	ldr	r2, [r7, #12]
 8004788:	4313      	orrs	r3, r2
 800478a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	695b      	ldr	r3, [r3, #20]
 8004796:	4313      	orrs	r3, r2
 8004798:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	68fa      	ldr	r2, [r7, #12]
 800479e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	689a      	ldr	r2, [r3, #8]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	681a      	ldr	r2, [r3, #0]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	4a16      	ldr	r2, [pc, #88]	@ (800480c <TIM_Base_SetConfig+0x12c>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d00f      	beq.n	80047d8 <TIM_Base_SetConfig+0xf8>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	4a18      	ldr	r2, [pc, #96]	@ (800481c <TIM_Base_SetConfig+0x13c>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d00b      	beq.n	80047d8 <TIM_Base_SetConfig+0xf8>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	4a17      	ldr	r2, [pc, #92]	@ (8004820 <TIM_Base_SetConfig+0x140>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d007      	beq.n	80047d8 <TIM_Base_SetConfig+0xf8>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	4a16      	ldr	r2, [pc, #88]	@ (8004824 <TIM_Base_SetConfig+0x144>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d003      	beq.n	80047d8 <TIM_Base_SetConfig+0xf8>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	4a15      	ldr	r2, [pc, #84]	@ (8004828 <TIM_Base_SetConfig+0x148>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d103      	bne.n	80047e0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	691a      	ldr	r2, [r3, #16]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2201      	movs	r2, #1
 80047e4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	691b      	ldr	r3, [r3, #16]
 80047ea:	f003 0301 	and.w	r3, r3, #1
 80047ee:	2b01      	cmp	r3, #1
 80047f0:	d105      	bne.n	80047fe <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	691b      	ldr	r3, [r3, #16]
 80047f6:	f023 0201 	bic.w	r2, r3, #1
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	611a      	str	r2, [r3, #16]
  }
}
 80047fe:	bf00      	nop
 8004800:	3714      	adds	r7, #20
 8004802:	46bd      	mov	sp, r7
 8004804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004808:	4770      	bx	lr
 800480a:	bf00      	nop
 800480c:	40012c00 	.word	0x40012c00
 8004810:	40000400 	.word	0x40000400
 8004814:	40000800 	.word	0x40000800
 8004818:	40000c00 	.word	0x40000c00
 800481c:	40013400 	.word	0x40013400
 8004820:	40014000 	.word	0x40014000
 8004824:	40014400 	.word	0x40014400
 8004828:	40014800 	.word	0x40014800

0800482c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800482c:	b480      	push	{r7}
 800482e:	b087      	sub	sp, #28
 8004830:	af00      	add	r7, sp, #0
 8004832:	60f8      	str	r0, [r7, #12]
 8004834:	60b9      	str	r1, [r7, #8]
 8004836:	607a      	str	r2, [r7, #4]
 8004838:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	6a1b      	ldr	r3, [r3, #32]
 800483e:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	6a1b      	ldr	r3, [r3, #32]
 8004844:	f023 0201 	bic.w	r2, r3, #1
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	699b      	ldr	r3, [r3, #24]
 8004850:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	4a26      	ldr	r2, [pc, #152]	@ (80048f0 <TIM_TI1_SetConfig+0xc4>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d017      	beq.n	800488a <TIM_TI1_SetConfig+0x5e>
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004860:	d013      	beq.n	800488a <TIM_TI1_SetConfig+0x5e>
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	4a23      	ldr	r2, [pc, #140]	@ (80048f4 <TIM_TI1_SetConfig+0xc8>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d00f      	beq.n	800488a <TIM_TI1_SetConfig+0x5e>
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	4a22      	ldr	r2, [pc, #136]	@ (80048f8 <TIM_TI1_SetConfig+0xcc>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d00b      	beq.n	800488a <TIM_TI1_SetConfig+0x5e>
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	4a21      	ldr	r2, [pc, #132]	@ (80048fc <TIM_TI1_SetConfig+0xd0>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d007      	beq.n	800488a <TIM_TI1_SetConfig+0x5e>
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	4a20      	ldr	r2, [pc, #128]	@ (8004900 <TIM_TI1_SetConfig+0xd4>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d003      	beq.n	800488a <TIM_TI1_SetConfig+0x5e>
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	4a1f      	ldr	r2, [pc, #124]	@ (8004904 <TIM_TI1_SetConfig+0xd8>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d101      	bne.n	800488e <TIM_TI1_SetConfig+0x62>
 800488a:	2301      	movs	r3, #1
 800488c:	e000      	b.n	8004890 <TIM_TI1_SetConfig+0x64>
 800488e:	2300      	movs	r3, #0
 8004890:	2b00      	cmp	r3, #0
 8004892:	d008      	beq.n	80048a6 <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004894:	697b      	ldr	r3, [r7, #20]
 8004896:	f023 0303 	bic.w	r3, r3, #3
 800489a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800489c:	697a      	ldr	r2, [r7, #20]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	4313      	orrs	r3, r2
 80048a2:	617b      	str	r3, [r7, #20]
 80048a4:	e003      	b.n	80048ae <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80048a6:	697b      	ldr	r3, [r7, #20]
 80048a8:	f043 0301 	orr.w	r3, r3, #1
 80048ac:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80048ae:	697b      	ldr	r3, [r7, #20]
 80048b0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80048b4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	011b      	lsls	r3, r3, #4
 80048ba:	b2db      	uxtb	r3, r3
 80048bc:	697a      	ldr	r2, [r7, #20]
 80048be:	4313      	orrs	r3, r2
 80048c0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80048c2:	693b      	ldr	r3, [r7, #16]
 80048c4:	f023 030a 	bic.w	r3, r3, #10
 80048c8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	f003 030a 	and.w	r3, r3, #10
 80048d0:	693a      	ldr	r2, [r7, #16]
 80048d2:	4313      	orrs	r3, r2
 80048d4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	697a      	ldr	r2, [r7, #20]
 80048da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	693a      	ldr	r2, [r7, #16]
 80048e0:	621a      	str	r2, [r3, #32]
}
 80048e2:	bf00      	nop
 80048e4:	371c      	adds	r7, #28
 80048e6:	46bd      	mov	sp, r7
 80048e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ec:	4770      	bx	lr
 80048ee:	bf00      	nop
 80048f0:	40012c00 	.word	0x40012c00
 80048f4:	40000400 	.word	0x40000400
 80048f8:	40000800 	.word	0x40000800
 80048fc:	40000c00 	.word	0x40000c00
 8004900:	40013400 	.word	0x40013400
 8004904:	40014000 	.word	0x40014000

08004908 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004908:	b480      	push	{r7}
 800490a:	b087      	sub	sp, #28
 800490c:	af00      	add	r7, sp, #0
 800490e:	60f8      	str	r0, [r7, #12]
 8004910:	60b9      	str	r1, [r7, #8]
 8004912:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	6a1b      	ldr	r3, [r3, #32]
 8004918:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	6a1b      	ldr	r3, [r3, #32]
 800491e:	f023 0201 	bic.w	r2, r3, #1
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	699b      	ldr	r3, [r3, #24]
 800492a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800492c:	693b      	ldr	r3, [r7, #16]
 800492e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004932:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	011b      	lsls	r3, r3, #4
 8004938:	693a      	ldr	r2, [r7, #16]
 800493a:	4313      	orrs	r3, r2
 800493c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800493e:	697b      	ldr	r3, [r7, #20]
 8004940:	f023 030a 	bic.w	r3, r3, #10
 8004944:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004946:	697a      	ldr	r2, [r7, #20]
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	4313      	orrs	r3, r2
 800494c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	693a      	ldr	r2, [r7, #16]
 8004952:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	697a      	ldr	r2, [r7, #20]
 8004958:	621a      	str	r2, [r3, #32]
}
 800495a:	bf00      	nop
 800495c:	371c      	adds	r7, #28
 800495e:	46bd      	mov	sp, r7
 8004960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004964:	4770      	bx	lr

08004966 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004966:	b480      	push	{r7}
 8004968:	b087      	sub	sp, #28
 800496a:	af00      	add	r7, sp, #0
 800496c:	60f8      	str	r0, [r7, #12]
 800496e:	60b9      	str	r1, [r7, #8]
 8004970:	607a      	str	r2, [r7, #4]
 8004972:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	6a1b      	ldr	r3, [r3, #32]
 8004978:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	6a1b      	ldr	r3, [r3, #32]
 800497e:	f023 0210 	bic.w	r2, r3, #16
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	699b      	ldr	r3, [r3, #24]
 800498a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004992:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	021b      	lsls	r3, r3, #8
 8004998:	693a      	ldr	r2, [r7, #16]
 800499a:	4313      	orrs	r3, r2
 800499c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800499e:	693b      	ldr	r3, [r7, #16]
 80049a0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80049a4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	031b      	lsls	r3, r3, #12
 80049aa:	b29b      	uxth	r3, r3
 80049ac:	693a      	ldr	r2, [r7, #16]
 80049ae:	4313      	orrs	r3, r2
 80049b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80049b8:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	011b      	lsls	r3, r3, #4
 80049be:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80049c2:	697a      	ldr	r2, [r7, #20]
 80049c4:	4313      	orrs	r3, r2
 80049c6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	693a      	ldr	r2, [r7, #16]
 80049cc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	697a      	ldr	r2, [r7, #20]
 80049d2:	621a      	str	r2, [r3, #32]
}
 80049d4:	bf00      	nop
 80049d6:	371c      	adds	r7, #28
 80049d8:	46bd      	mov	sp, r7
 80049da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049de:	4770      	bx	lr

080049e0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80049e0:	b480      	push	{r7}
 80049e2:	b087      	sub	sp, #28
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	60f8      	str	r0, [r7, #12]
 80049e8:	60b9      	str	r1, [r7, #8]
 80049ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	6a1b      	ldr	r3, [r3, #32]
 80049f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	6a1b      	ldr	r3, [r3, #32]
 80049f6:	f023 0210 	bic.w	r2, r3, #16
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	699b      	ldr	r3, [r3, #24]
 8004a02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004a04:	693b      	ldr	r3, [r7, #16]
 8004a06:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004a0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	031b      	lsls	r3, r3, #12
 8004a10:	693a      	ldr	r2, [r7, #16]
 8004a12:	4313      	orrs	r3, r2
 8004a14:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004a16:	697b      	ldr	r3, [r7, #20]
 8004a18:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004a1c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004a1e:	68bb      	ldr	r3, [r7, #8]
 8004a20:	011b      	lsls	r3, r3, #4
 8004a22:	697a      	ldr	r2, [r7, #20]
 8004a24:	4313      	orrs	r3, r2
 8004a26:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	693a      	ldr	r2, [r7, #16]
 8004a2c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	697a      	ldr	r2, [r7, #20]
 8004a32:	621a      	str	r2, [r3, #32]
}
 8004a34:	bf00      	nop
 8004a36:	371c      	adds	r7, #28
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3e:	4770      	bx	lr

08004a40 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004a40:	b480      	push	{r7}
 8004a42:	b087      	sub	sp, #28
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	60f8      	str	r0, [r7, #12]
 8004a48:	60b9      	str	r1, [r7, #8]
 8004a4a:	607a      	str	r2, [r7, #4]
 8004a4c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	6a1b      	ldr	r3, [r3, #32]
 8004a52:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	6a1b      	ldr	r3, [r3, #32]
 8004a58:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	69db      	ldr	r3, [r3, #28]
 8004a64:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004a66:	693b      	ldr	r3, [r7, #16]
 8004a68:	f023 0303 	bic.w	r3, r3, #3
 8004a6c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8004a6e:	693a      	ldr	r2, [r7, #16]
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	4313      	orrs	r3, r2
 8004a74:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004a76:	693b      	ldr	r3, [r7, #16]
 8004a78:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004a7c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	011b      	lsls	r3, r3, #4
 8004a82:	b2db      	uxtb	r3, r3
 8004a84:	693a      	ldr	r2, [r7, #16]
 8004a86:	4313      	orrs	r3, r2
 8004a88:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8004a90:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004a92:	68bb      	ldr	r3, [r7, #8]
 8004a94:	021b      	lsls	r3, r3, #8
 8004a96:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8004a9a:	697a      	ldr	r2, [r7, #20]
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	693a      	ldr	r2, [r7, #16]
 8004aa4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	697a      	ldr	r2, [r7, #20]
 8004aaa:	621a      	str	r2, [r3, #32]
}
 8004aac:	bf00      	nop
 8004aae:	371c      	adds	r7, #28
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab6:	4770      	bx	lr

08004ab8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	b087      	sub	sp, #28
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	60f8      	str	r0, [r7, #12]
 8004ac0:	60b9      	str	r1, [r7, #8]
 8004ac2:	607a      	str	r2, [r7, #4]
 8004ac4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	6a1b      	ldr	r3, [r3, #32]
 8004aca:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	6a1b      	ldr	r3, [r3, #32]
 8004ad0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	69db      	ldr	r3, [r3, #28]
 8004adc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004ade:	693b      	ldr	r3, [r7, #16]
 8004ae0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ae4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	021b      	lsls	r3, r3, #8
 8004aea:	693a      	ldr	r2, [r7, #16]
 8004aec:	4313      	orrs	r3, r2
 8004aee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004af0:	693b      	ldr	r3, [r7, #16]
 8004af2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004af6:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	031b      	lsls	r3, r3, #12
 8004afc:	b29b      	uxth	r3, r3
 8004afe:	693a      	ldr	r2, [r7, #16]
 8004b00:	4313      	orrs	r3, r2
 8004b02:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004b04:	697b      	ldr	r3, [r7, #20]
 8004b06:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8004b0a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	031b      	lsls	r3, r3, #12
 8004b10:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8004b14:	697a      	ldr	r2, [r7, #20]
 8004b16:	4313      	orrs	r3, r2
 8004b18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	693a      	ldr	r2, [r7, #16]
 8004b1e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	697a      	ldr	r2, [r7, #20]
 8004b24:	621a      	str	r2, [r3, #32]
}
 8004b26:	bf00      	nop
 8004b28:	371c      	adds	r7, #28
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b30:	4770      	bx	lr

08004b32 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004b32:	b480      	push	{r7}
 8004b34:	b085      	sub	sp, #20
 8004b36:	af00      	add	r7, sp, #0
 8004b38:	6078      	str	r0, [r7, #4]
 8004b3a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	689b      	ldr	r3, [r3, #8]
 8004b40:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b48:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004b4a:	683a      	ldr	r2, [r7, #0]
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	f043 0307 	orr.w	r3, r3, #7
 8004b54:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	68fa      	ldr	r2, [r7, #12]
 8004b5a:	609a      	str	r2, [r3, #8]
}
 8004b5c:	bf00      	nop
 8004b5e:	3714      	adds	r7, #20
 8004b60:	46bd      	mov	sp, r7
 8004b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b66:	4770      	bx	lr

08004b68 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004b68:	b480      	push	{r7}
 8004b6a:	b087      	sub	sp, #28
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	60f8      	str	r0, [r7, #12]
 8004b70:	60b9      	str	r1, [r7, #8]
 8004b72:	607a      	str	r2, [r7, #4]
 8004b74:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	689b      	ldr	r3, [r3, #8]
 8004b7a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b7c:	697b      	ldr	r3, [r7, #20]
 8004b7e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004b82:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	021a      	lsls	r2, r3, #8
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	431a      	orrs	r2, r3
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	697a      	ldr	r2, [r7, #20]
 8004b92:	4313      	orrs	r3, r2
 8004b94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	697a      	ldr	r2, [r7, #20]
 8004b9a:	609a      	str	r2, [r3, #8]
}
 8004b9c:	bf00      	nop
 8004b9e:	371c      	adds	r7, #28
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba6:	4770      	bx	lr

08004ba8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004ba8:	b480      	push	{r7}
 8004baa:	b087      	sub	sp, #28
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	60f8      	str	r0, [r7, #12]
 8004bb0:	60b9      	str	r1, [r7, #8]
 8004bb2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	f003 031f 	and.w	r3, r3, #31
 8004bba:	2201      	movs	r2, #1
 8004bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8004bc0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	6a1a      	ldr	r2, [r3, #32]
 8004bc6:	697b      	ldr	r3, [r7, #20]
 8004bc8:	43db      	mvns	r3, r3
 8004bca:	401a      	ands	r2, r3
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	6a1a      	ldr	r2, [r3, #32]
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	f003 031f 	and.w	r3, r3, #31
 8004bda:	6879      	ldr	r1, [r7, #4]
 8004bdc:	fa01 f303 	lsl.w	r3, r1, r3
 8004be0:	431a      	orrs	r2, r3
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	621a      	str	r2, [r3, #32]
}
 8004be6:	bf00      	nop
 8004be8:	371c      	adds	r7, #28
 8004bea:	46bd      	mov	sp, r7
 8004bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf0:	4770      	bx	lr

08004bf2 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004bf2:	b480      	push	{r7}
 8004bf4:	b083      	sub	sp, #12
 8004bf6:	af00      	add	r7, sp, #0
 8004bf8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004bfa:	bf00      	nop
 8004bfc:	370c      	adds	r7, #12
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c04:	4770      	bx	lr

08004c06 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004c06:	b480      	push	{r7}
 8004c08:	b083      	sub	sp, #12
 8004c0a:	af00      	add	r7, sp, #0
 8004c0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004c0e:	bf00      	nop
 8004c10:	370c      	adds	r7, #12
 8004c12:	46bd      	mov	sp, r7
 8004c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c18:	4770      	bx	lr

08004c1a <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004c1a:	b480      	push	{r7}
 8004c1c:	b083      	sub	sp, #12
 8004c1e:	af00      	add	r7, sp, #0
 8004c20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004c22:	bf00      	nop
 8004c24:	370c      	adds	r7, #12
 8004c26:	46bd      	mov	sp, r7
 8004c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2c:	4770      	bx	lr

08004c2e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c2e:	b580      	push	{r7, lr}
 8004c30:	b082      	sub	sp, #8
 8004c32:	af00      	add	r7, sp, #0
 8004c34:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d101      	bne.n	8004c40 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	e040      	b.n	8004cc2 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d106      	bne.n	8004c56 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c50:	6878      	ldr	r0, [r7, #4]
 8004c52:	f7fc fc91 	bl	8001578 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2224      	movs	r2, #36	@ 0x24
 8004c5a:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	681a      	ldr	r2, [r3, #0]
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f022 0201 	bic.w	r2, r2, #1
 8004c6a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d002      	beq.n	8004c7a <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004c74:	6878      	ldr	r0, [r7, #4]
 8004c76:	f000 fb69 	bl	800534c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004c7a:	6878      	ldr	r0, [r7, #4]
 8004c7c:	f000 f8ae 	bl	8004ddc <UART_SetConfig>
 8004c80:	4603      	mov	r3, r0
 8004c82:	2b01      	cmp	r3, #1
 8004c84:	d101      	bne.n	8004c8a <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004c86:	2301      	movs	r3, #1
 8004c88:	e01b      	b.n	8004cc2 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	685a      	ldr	r2, [r3, #4]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004c98:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	689a      	ldr	r2, [r3, #8]
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004ca8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	681a      	ldr	r2, [r3, #0]
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f042 0201 	orr.w	r2, r2, #1
 8004cb8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004cba:	6878      	ldr	r0, [r7, #4]
 8004cbc:	f000 fbe8 	bl	8005490 <UART_CheckIdleState>
 8004cc0:	4603      	mov	r3, r0
}
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	3708      	adds	r7, #8
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}

08004cca <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004cca:	b580      	push	{r7, lr}
 8004ccc:	b08a      	sub	sp, #40	@ 0x28
 8004cce:	af02      	add	r7, sp, #8
 8004cd0:	60f8      	str	r0, [r7, #12]
 8004cd2:	60b9      	str	r1, [r7, #8]
 8004cd4:	603b      	str	r3, [r7, #0]
 8004cd6:	4613      	mov	r3, r2
 8004cd8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004cde:	2b20      	cmp	r3, #32
 8004ce0:	d177      	bne.n	8004dd2 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d002      	beq.n	8004cee <HAL_UART_Transmit+0x24>
 8004ce8:	88fb      	ldrh	r3, [r7, #6]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d101      	bne.n	8004cf2 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004cee:	2301      	movs	r3, #1
 8004cf0:	e070      	b.n	8004dd4 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	2221      	movs	r2, #33	@ 0x21
 8004cfe:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004d00:	f7fc fe38 	bl	8001974 <HAL_GetTick>
 8004d04:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	88fa      	ldrh	r2, [r7, #6]
 8004d0a:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	88fa      	ldrh	r2, [r7, #6]
 8004d12:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	689b      	ldr	r3, [r3, #8]
 8004d1a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d1e:	d108      	bne.n	8004d32 <HAL_UART_Transmit+0x68>
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	691b      	ldr	r3, [r3, #16]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d104      	bne.n	8004d32 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004d28:	2300      	movs	r3, #0
 8004d2a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	61bb      	str	r3, [r7, #24]
 8004d30:	e003      	b.n	8004d3a <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004d36:	2300      	movs	r3, #0
 8004d38:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004d3a:	e02f      	b.n	8004d9c <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	9300      	str	r3, [sp, #0]
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	2200      	movs	r2, #0
 8004d44:	2180      	movs	r1, #128	@ 0x80
 8004d46:	68f8      	ldr	r0, [r7, #12]
 8004d48:	f000 fc4a 	bl	80055e0 <UART_WaitOnFlagUntilTimeout>
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d004      	beq.n	8004d5c <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	2220      	movs	r2, #32
 8004d56:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8004d58:	2303      	movs	r3, #3
 8004d5a:	e03b      	b.n	8004dd4 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8004d5c:	69fb      	ldr	r3, [r7, #28]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d10b      	bne.n	8004d7a <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004d62:	69bb      	ldr	r3, [r7, #24]
 8004d64:	881a      	ldrh	r2, [r3, #0]
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d6e:	b292      	uxth	r2, r2
 8004d70:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004d72:	69bb      	ldr	r3, [r7, #24]
 8004d74:	3302      	adds	r3, #2
 8004d76:	61bb      	str	r3, [r7, #24]
 8004d78:	e007      	b.n	8004d8a <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004d7a:	69fb      	ldr	r3, [r7, #28]
 8004d7c:	781a      	ldrb	r2, [r3, #0]
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004d84:	69fb      	ldr	r3, [r7, #28]
 8004d86:	3301      	adds	r3, #1
 8004d88:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004d90:	b29b      	uxth	r3, r3
 8004d92:	3b01      	subs	r3, #1
 8004d94:	b29a      	uxth	r2, r3
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004da2:	b29b      	uxth	r3, r3
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d1c9      	bne.n	8004d3c <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	9300      	str	r3, [sp, #0]
 8004dac:	697b      	ldr	r3, [r7, #20]
 8004dae:	2200      	movs	r2, #0
 8004db0:	2140      	movs	r1, #64	@ 0x40
 8004db2:	68f8      	ldr	r0, [r7, #12]
 8004db4:	f000 fc14 	bl	80055e0 <UART_WaitOnFlagUntilTimeout>
 8004db8:	4603      	mov	r3, r0
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d004      	beq.n	8004dc8 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	2220      	movs	r2, #32
 8004dc2:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8004dc4:	2303      	movs	r3, #3
 8004dc6:	e005      	b.n	8004dd4 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	2220      	movs	r2, #32
 8004dcc:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004dce:	2300      	movs	r3, #0
 8004dd0:	e000      	b.n	8004dd4 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004dd2:	2302      	movs	r3, #2
  }
}
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	3720      	adds	r7, #32
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bd80      	pop	{r7, pc}

08004ddc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ddc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004de0:	b08a      	sub	sp, #40	@ 0x28
 8004de2:	af00      	add	r7, sp, #0
 8004de4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004de6:	2300      	movs	r3, #0
 8004de8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	689a      	ldr	r2, [r3, #8]
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	691b      	ldr	r3, [r3, #16]
 8004df4:	431a      	orrs	r2, r3
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	695b      	ldr	r3, [r3, #20]
 8004dfa:	431a      	orrs	r2, r3
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	69db      	ldr	r3, [r3, #28]
 8004e00:	4313      	orrs	r3, r2
 8004e02:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	681a      	ldr	r2, [r3, #0]
 8004e0a:	4ba4      	ldr	r3, [pc, #656]	@ (800509c <UART_SetConfig+0x2c0>)
 8004e0c:	4013      	ands	r3, r2
 8004e0e:	68fa      	ldr	r2, [r7, #12]
 8004e10:	6812      	ldr	r2, [r2, #0]
 8004e12:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004e14:	430b      	orrs	r3, r1
 8004e16:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	68da      	ldr	r2, [r3, #12]
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	430a      	orrs	r2, r1
 8004e2c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	699b      	ldr	r3, [r3, #24]
 8004e32:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4a99      	ldr	r2, [pc, #612]	@ (80050a0 <UART_SetConfig+0x2c4>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d004      	beq.n	8004e48 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	6a1b      	ldr	r3, [r3, #32]
 8004e42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e44:	4313      	orrs	r3, r2
 8004e46:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	689b      	ldr	r3, [r3, #8]
 8004e4e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e58:	430a      	orrs	r2, r1
 8004e5a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a90      	ldr	r2, [pc, #576]	@ (80050a4 <UART_SetConfig+0x2c8>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d126      	bne.n	8004eb4 <UART_SetConfig+0xd8>
 8004e66:	4b90      	ldr	r3, [pc, #576]	@ (80050a8 <UART_SetConfig+0x2cc>)
 8004e68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e6c:	f003 0303 	and.w	r3, r3, #3
 8004e70:	2b03      	cmp	r3, #3
 8004e72:	d81b      	bhi.n	8004eac <UART_SetConfig+0xd0>
 8004e74:	a201      	add	r2, pc, #4	@ (adr r2, 8004e7c <UART_SetConfig+0xa0>)
 8004e76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e7a:	bf00      	nop
 8004e7c:	08004e8d 	.word	0x08004e8d
 8004e80:	08004e9d 	.word	0x08004e9d
 8004e84:	08004e95 	.word	0x08004e95
 8004e88:	08004ea5 	.word	0x08004ea5
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e92:	e116      	b.n	80050c2 <UART_SetConfig+0x2e6>
 8004e94:	2302      	movs	r3, #2
 8004e96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e9a:	e112      	b.n	80050c2 <UART_SetConfig+0x2e6>
 8004e9c:	2304      	movs	r3, #4
 8004e9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ea2:	e10e      	b.n	80050c2 <UART_SetConfig+0x2e6>
 8004ea4:	2308      	movs	r3, #8
 8004ea6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004eaa:	e10a      	b.n	80050c2 <UART_SetConfig+0x2e6>
 8004eac:	2310      	movs	r3, #16
 8004eae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004eb2:	e106      	b.n	80050c2 <UART_SetConfig+0x2e6>
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4a7c      	ldr	r2, [pc, #496]	@ (80050ac <UART_SetConfig+0x2d0>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d138      	bne.n	8004f30 <UART_SetConfig+0x154>
 8004ebe:	4b7a      	ldr	r3, [pc, #488]	@ (80050a8 <UART_SetConfig+0x2cc>)
 8004ec0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ec4:	f003 030c 	and.w	r3, r3, #12
 8004ec8:	2b0c      	cmp	r3, #12
 8004eca:	d82d      	bhi.n	8004f28 <UART_SetConfig+0x14c>
 8004ecc:	a201      	add	r2, pc, #4	@ (adr r2, 8004ed4 <UART_SetConfig+0xf8>)
 8004ece:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ed2:	bf00      	nop
 8004ed4:	08004f09 	.word	0x08004f09
 8004ed8:	08004f29 	.word	0x08004f29
 8004edc:	08004f29 	.word	0x08004f29
 8004ee0:	08004f29 	.word	0x08004f29
 8004ee4:	08004f19 	.word	0x08004f19
 8004ee8:	08004f29 	.word	0x08004f29
 8004eec:	08004f29 	.word	0x08004f29
 8004ef0:	08004f29 	.word	0x08004f29
 8004ef4:	08004f11 	.word	0x08004f11
 8004ef8:	08004f29 	.word	0x08004f29
 8004efc:	08004f29 	.word	0x08004f29
 8004f00:	08004f29 	.word	0x08004f29
 8004f04:	08004f21 	.word	0x08004f21
 8004f08:	2300      	movs	r3, #0
 8004f0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f0e:	e0d8      	b.n	80050c2 <UART_SetConfig+0x2e6>
 8004f10:	2302      	movs	r3, #2
 8004f12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f16:	e0d4      	b.n	80050c2 <UART_SetConfig+0x2e6>
 8004f18:	2304      	movs	r3, #4
 8004f1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f1e:	e0d0      	b.n	80050c2 <UART_SetConfig+0x2e6>
 8004f20:	2308      	movs	r3, #8
 8004f22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f26:	e0cc      	b.n	80050c2 <UART_SetConfig+0x2e6>
 8004f28:	2310      	movs	r3, #16
 8004f2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f2e:	e0c8      	b.n	80050c2 <UART_SetConfig+0x2e6>
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4a5e      	ldr	r2, [pc, #376]	@ (80050b0 <UART_SetConfig+0x2d4>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d125      	bne.n	8004f86 <UART_SetConfig+0x1aa>
 8004f3a:	4b5b      	ldr	r3, [pc, #364]	@ (80050a8 <UART_SetConfig+0x2cc>)
 8004f3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f40:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004f44:	2b30      	cmp	r3, #48	@ 0x30
 8004f46:	d016      	beq.n	8004f76 <UART_SetConfig+0x19a>
 8004f48:	2b30      	cmp	r3, #48	@ 0x30
 8004f4a:	d818      	bhi.n	8004f7e <UART_SetConfig+0x1a2>
 8004f4c:	2b20      	cmp	r3, #32
 8004f4e:	d00a      	beq.n	8004f66 <UART_SetConfig+0x18a>
 8004f50:	2b20      	cmp	r3, #32
 8004f52:	d814      	bhi.n	8004f7e <UART_SetConfig+0x1a2>
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d002      	beq.n	8004f5e <UART_SetConfig+0x182>
 8004f58:	2b10      	cmp	r3, #16
 8004f5a:	d008      	beq.n	8004f6e <UART_SetConfig+0x192>
 8004f5c:	e00f      	b.n	8004f7e <UART_SetConfig+0x1a2>
 8004f5e:	2300      	movs	r3, #0
 8004f60:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f64:	e0ad      	b.n	80050c2 <UART_SetConfig+0x2e6>
 8004f66:	2302      	movs	r3, #2
 8004f68:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f6c:	e0a9      	b.n	80050c2 <UART_SetConfig+0x2e6>
 8004f6e:	2304      	movs	r3, #4
 8004f70:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f74:	e0a5      	b.n	80050c2 <UART_SetConfig+0x2e6>
 8004f76:	2308      	movs	r3, #8
 8004f78:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f7c:	e0a1      	b.n	80050c2 <UART_SetConfig+0x2e6>
 8004f7e:	2310      	movs	r3, #16
 8004f80:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f84:	e09d      	b.n	80050c2 <UART_SetConfig+0x2e6>
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4a4a      	ldr	r2, [pc, #296]	@ (80050b4 <UART_SetConfig+0x2d8>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d125      	bne.n	8004fdc <UART_SetConfig+0x200>
 8004f90:	4b45      	ldr	r3, [pc, #276]	@ (80050a8 <UART_SetConfig+0x2cc>)
 8004f92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f96:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004f9a:	2bc0      	cmp	r3, #192	@ 0xc0
 8004f9c:	d016      	beq.n	8004fcc <UART_SetConfig+0x1f0>
 8004f9e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004fa0:	d818      	bhi.n	8004fd4 <UART_SetConfig+0x1f8>
 8004fa2:	2b80      	cmp	r3, #128	@ 0x80
 8004fa4:	d00a      	beq.n	8004fbc <UART_SetConfig+0x1e0>
 8004fa6:	2b80      	cmp	r3, #128	@ 0x80
 8004fa8:	d814      	bhi.n	8004fd4 <UART_SetConfig+0x1f8>
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d002      	beq.n	8004fb4 <UART_SetConfig+0x1d8>
 8004fae:	2b40      	cmp	r3, #64	@ 0x40
 8004fb0:	d008      	beq.n	8004fc4 <UART_SetConfig+0x1e8>
 8004fb2:	e00f      	b.n	8004fd4 <UART_SetConfig+0x1f8>
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004fba:	e082      	b.n	80050c2 <UART_SetConfig+0x2e6>
 8004fbc:	2302      	movs	r3, #2
 8004fbe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004fc2:	e07e      	b.n	80050c2 <UART_SetConfig+0x2e6>
 8004fc4:	2304      	movs	r3, #4
 8004fc6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004fca:	e07a      	b.n	80050c2 <UART_SetConfig+0x2e6>
 8004fcc:	2308      	movs	r3, #8
 8004fce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004fd2:	e076      	b.n	80050c2 <UART_SetConfig+0x2e6>
 8004fd4:	2310      	movs	r3, #16
 8004fd6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004fda:	e072      	b.n	80050c2 <UART_SetConfig+0x2e6>
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4a35      	ldr	r2, [pc, #212]	@ (80050b8 <UART_SetConfig+0x2dc>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d12a      	bne.n	800503c <UART_SetConfig+0x260>
 8004fe6:	4b30      	ldr	r3, [pc, #192]	@ (80050a8 <UART_SetConfig+0x2cc>)
 8004fe8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fec:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ff0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004ff4:	d01a      	beq.n	800502c <UART_SetConfig+0x250>
 8004ff6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004ffa:	d81b      	bhi.n	8005034 <UART_SetConfig+0x258>
 8004ffc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005000:	d00c      	beq.n	800501c <UART_SetConfig+0x240>
 8005002:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005006:	d815      	bhi.n	8005034 <UART_SetConfig+0x258>
 8005008:	2b00      	cmp	r3, #0
 800500a:	d003      	beq.n	8005014 <UART_SetConfig+0x238>
 800500c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005010:	d008      	beq.n	8005024 <UART_SetConfig+0x248>
 8005012:	e00f      	b.n	8005034 <UART_SetConfig+0x258>
 8005014:	2300      	movs	r3, #0
 8005016:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800501a:	e052      	b.n	80050c2 <UART_SetConfig+0x2e6>
 800501c:	2302      	movs	r3, #2
 800501e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005022:	e04e      	b.n	80050c2 <UART_SetConfig+0x2e6>
 8005024:	2304      	movs	r3, #4
 8005026:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800502a:	e04a      	b.n	80050c2 <UART_SetConfig+0x2e6>
 800502c:	2308      	movs	r3, #8
 800502e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005032:	e046      	b.n	80050c2 <UART_SetConfig+0x2e6>
 8005034:	2310      	movs	r3, #16
 8005036:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800503a:	e042      	b.n	80050c2 <UART_SetConfig+0x2e6>
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a17      	ldr	r2, [pc, #92]	@ (80050a0 <UART_SetConfig+0x2c4>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d13a      	bne.n	80050bc <UART_SetConfig+0x2e0>
 8005046:	4b18      	ldr	r3, [pc, #96]	@ (80050a8 <UART_SetConfig+0x2cc>)
 8005048:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800504c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005050:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005054:	d01a      	beq.n	800508c <UART_SetConfig+0x2b0>
 8005056:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800505a:	d81b      	bhi.n	8005094 <UART_SetConfig+0x2b8>
 800505c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005060:	d00c      	beq.n	800507c <UART_SetConfig+0x2a0>
 8005062:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005066:	d815      	bhi.n	8005094 <UART_SetConfig+0x2b8>
 8005068:	2b00      	cmp	r3, #0
 800506a:	d003      	beq.n	8005074 <UART_SetConfig+0x298>
 800506c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005070:	d008      	beq.n	8005084 <UART_SetConfig+0x2a8>
 8005072:	e00f      	b.n	8005094 <UART_SetConfig+0x2b8>
 8005074:	2300      	movs	r3, #0
 8005076:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800507a:	e022      	b.n	80050c2 <UART_SetConfig+0x2e6>
 800507c:	2302      	movs	r3, #2
 800507e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005082:	e01e      	b.n	80050c2 <UART_SetConfig+0x2e6>
 8005084:	2304      	movs	r3, #4
 8005086:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800508a:	e01a      	b.n	80050c2 <UART_SetConfig+0x2e6>
 800508c:	2308      	movs	r3, #8
 800508e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005092:	e016      	b.n	80050c2 <UART_SetConfig+0x2e6>
 8005094:	2310      	movs	r3, #16
 8005096:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800509a:	e012      	b.n	80050c2 <UART_SetConfig+0x2e6>
 800509c:	efff69f3 	.word	0xefff69f3
 80050a0:	40008000 	.word	0x40008000
 80050a4:	40013800 	.word	0x40013800
 80050a8:	40021000 	.word	0x40021000
 80050ac:	40004400 	.word	0x40004400
 80050b0:	40004800 	.word	0x40004800
 80050b4:	40004c00 	.word	0x40004c00
 80050b8:	40005000 	.word	0x40005000
 80050bc:	2310      	movs	r3, #16
 80050be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4a9f      	ldr	r2, [pc, #636]	@ (8005344 <UART_SetConfig+0x568>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d17a      	bne.n	80051c2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80050cc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80050d0:	2b08      	cmp	r3, #8
 80050d2:	d824      	bhi.n	800511e <UART_SetConfig+0x342>
 80050d4:	a201      	add	r2, pc, #4	@ (adr r2, 80050dc <UART_SetConfig+0x300>)
 80050d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050da:	bf00      	nop
 80050dc:	08005101 	.word	0x08005101
 80050e0:	0800511f 	.word	0x0800511f
 80050e4:	08005109 	.word	0x08005109
 80050e8:	0800511f 	.word	0x0800511f
 80050ec:	0800510f 	.word	0x0800510f
 80050f0:	0800511f 	.word	0x0800511f
 80050f4:	0800511f 	.word	0x0800511f
 80050f8:	0800511f 	.word	0x0800511f
 80050fc:	08005117 	.word	0x08005117
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005100:	f7fd ff3a 	bl	8002f78 <HAL_RCC_GetPCLK1Freq>
 8005104:	61f8      	str	r0, [r7, #28]
        break;
 8005106:	e010      	b.n	800512a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005108:	4b8f      	ldr	r3, [pc, #572]	@ (8005348 <UART_SetConfig+0x56c>)
 800510a:	61fb      	str	r3, [r7, #28]
        break;
 800510c:	e00d      	b.n	800512a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800510e:	f7fd fe9b 	bl	8002e48 <HAL_RCC_GetSysClockFreq>
 8005112:	61f8      	str	r0, [r7, #28]
        break;
 8005114:	e009      	b.n	800512a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005116:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800511a:	61fb      	str	r3, [r7, #28]
        break;
 800511c:	e005      	b.n	800512a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800511e:	2300      	movs	r3, #0
 8005120:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005122:	2301      	movs	r3, #1
 8005124:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005128:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800512a:	69fb      	ldr	r3, [r7, #28]
 800512c:	2b00      	cmp	r3, #0
 800512e:	f000 80fb 	beq.w	8005328 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	685a      	ldr	r2, [r3, #4]
 8005136:	4613      	mov	r3, r2
 8005138:	005b      	lsls	r3, r3, #1
 800513a:	4413      	add	r3, r2
 800513c:	69fa      	ldr	r2, [r7, #28]
 800513e:	429a      	cmp	r2, r3
 8005140:	d305      	bcc.n	800514e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005148:	69fa      	ldr	r2, [r7, #28]
 800514a:	429a      	cmp	r2, r3
 800514c:	d903      	bls.n	8005156 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800514e:	2301      	movs	r3, #1
 8005150:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005154:	e0e8      	b.n	8005328 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005156:	69fb      	ldr	r3, [r7, #28]
 8005158:	2200      	movs	r2, #0
 800515a:	461c      	mov	r4, r3
 800515c:	4615      	mov	r5, r2
 800515e:	f04f 0200 	mov.w	r2, #0
 8005162:	f04f 0300 	mov.w	r3, #0
 8005166:	022b      	lsls	r3, r5, #8
 8005168:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800516c:	0222      	lsls	r2, r4, #8
 800516e:	68f9      	ldr	r1, [r7, #12]
 8005170:	6849      	ldr	r1, [r1, #4]
 8005172:	0849      	lsrs	r1, r1, #1
 8005174:	2000      	movs	r0, #0
 8005176:	4688      	mov	r8, r1
 8005178:	4681      	mov	r9, r0
 800517a:	eb12 0a08 	adds.w	sl, r2, r8
 800517e:	eb43 0b09 	adc.w	fp, r3, r9
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	685b      	ldr	r3, [r3, #4]
 8005186:	2200      	movs	r2, #0
 8005188:	603b      	str	r3, [r7, #0]
 800518a:	607a      	str	r2, [r7, #4]
 800518c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005190:	4650      	mov	r0, sl
 8005192:	4659      	mov	r1, fp
 8005194:	f7fb fd78 	bl	8000c88 <__aeabi_uldivmod>
 8005198:	4602      	mov	r2, r0
 800519a:	460b      	mov	r3, r1
 800519c:	4613      	mov	r3, r2
 800519e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80051a0:	69bb      	ldr	r3, [r7, #24]
 80051a2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80051a6:	d308      	bcc.n	80051ba <UART_SetConfig+0x3de>
 80051a8:	69bb      	ldr	r3, [r7, #24]
 80051aa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80051ae:	d204      	bcs.n	80051ba <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	69ba      	ldr	r2, [r7, #24]
 80051b6:	60da      	str	r2, [r3, #12]
 80051b8:	e0b6      	b.n	8005328 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80051ba:	2301      	movs	r3, #1
 80051bc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80051c0:	e0b2      	b.n	8005328 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	69db      	ldr	r3, [r3, #28]
 80051c6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80051ca:	d15e      	bne.n	800528a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80051cc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80051d0:	2b08      	cmp	r3, #8
 80051d2:	d828      	bhi.n	8005226 <UART_SetConfig+0x44a>
 80051d4:	a201      	add	r2, pc, #4	@ (adr r2, 80051dc <UART_SetConfig+0x400>)
 80051d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051da:	bf00      	nop
 80051dc:	08005201 	.word	0x08005201
 80051e0:	08005209 	.word	0x08005209
 80051e4:	08005211 	.word	0x08005211
 80051e8:	08005227 	.word	0x08005227
 80051ec:	08005217 	.word	0x08005217
 80051f0:	08005227 	.word	0x08005227
 80051f4:	08005227 	.word	0x08005227
 80051f8:	08005227 	.word	0x08005227
 80051fc:	0800521f 	.word	0x0800521f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005200:	f7fd feba 	bl	8002f78 <HAL_RCC_GetPCLK1Freq>
 8005204:	61f8      	str	r0, [r7, #28]
        break;
 8005206:	e014      	b.n	8005232 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005208:	f7fd fecc 	bl	8002fa4 <HAL_RCC_GetPCLK2Freq>
 800520c:	61f8      	str	r0, [r7, #28]
        break;
 800520e:	e010      	b.n	8005232 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005210:	4b4d      	ldr	r3, [pc, #308]	@ (8005348 <UART_SetConfig+0x56c>)
 8005212:	61fb      	str	r3, [r7, #28]
        break;
 8005214:	e00d      	b.n	8005232 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005216:	f7fd fe17 	bl	8002e48 <HAL_RCC_GetSysClockFreq>
 800521a:	61f8      	str	r0, [r7, #28]
        break;
 800521c:	e009      	b.n	8005232 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800521e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005222:	61fb      	str	r3, [r7, #28]
        break;
 8005224:	e005      	b.n	8005232 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8005226:	2300      	movs	r3, #0
 8005228:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800522a:	2301      	movs	r3, #1
 800522c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005230:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005232:	69fb      	ldr	r3, [r7, #28]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d077      	beq.n	8005328 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005238:	69fb      	ldr	r3, [r7, #28]
 800523a:	005a      	lsls	r2, r3, #1
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	685b      	ldr	r3, [r3, #4]
 8005240:	085b      	lsrs	r3, r3, #1
 8005242:	441a      	add	r2, r3
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	fbb2 f3f3 	udiv	r3, r2, r3
 800524c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800524e:	69bb      	ldr	r3, [r7, #24]
 8005250:	2b0f      	cmp	r3, #15
 8005252:	d916      	bls.n	8005282 <UART_SetConfig+0x4a6>
 8005254:	69bb      	ldr	r3, [r7, #24]
 8005256:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800525a:	d212      	bcs.n	8005282 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800525c:	69bb      	ldr	r3, [r7, #24]
 800525e:	b29b      	uxth	r3, r3
 8005260:	f023 030f 	bic.w	r3, r3, #15
 8005264:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005266:	69bb      	ldr	r3, [r7, #24]
 8005268:	085b      	lsrs	r3, r3, #1
 800526a:	b29b      	uxth	r3, r3
 800526c:	f003 0307 	and.w	r3, r3, #7
 8005270:	b29a      	uxth	r2, r3
 8005272:	8afb      	ldrh	r3, [r7, #22]
 8005274:	4313      	orrs	r3, r2
 8005276:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	8afa      	ldrh	r2, [r7, #22]
 800527e:	60da      	str	r2, [r3, #12]
 8005280:	e052      	b.n	8005328 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005282:	2301      	movs	r3, #1
 8005284:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005288:	e04e      	b.n	8005328 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800528a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800528e:	2b08      	cmp	r3, #8
 8005290:	d827      	bhi.n	80052e2 <UART_SetConfig+0x506>
 8005292:	a201      	add	r2, pc, #4	@ (adr r2, 8005298 <UART_SetConfig+0x4bc>)
 8005294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005298:	080052bd 	.word	0x080052bd
 800529c:	080052c5 	.word	0x080052c5
 80052a0:	080052cd 	.word	0x080052cd
 80052a4:	080052e3 	.word	0x080052e3
 80052a8:	080052d3 	.word	0x080052d3
 80052ac:	080052e3 	.word	0x080052e3
 80052b0:	080052e3 	.word	0x080052e3
 80052b4:	080052e3 	.word	0x080052e3
 80052b8:	080052db 	.word	0x080052db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052bc:	f7fd fe5c 	bl	8002f78 <HAL_RCC_GetPCLK1Freq>
 80052c0:	61f8      	str	r0, [r7, #28]
        break;
 80052c2:	e014      	b.n	80052ee <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80052c4:	f7fd fe6e 	bl	8002fa4 <HAL_RCC_GetPCLK2Freq>
 80052c8:	61f8      	str	r0, [r7, #28]
        break;
 80052ca:	e010      	b.n	80052ee <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80052cc:	4b1e      	ldr	r3, [pc, #120]	@ (8005348 <UART_SetConfig+0x56c>)
 80052ce:	61fb      	str	r3, [r7, #28]
        break;
 80052d0:	e00d      	b.n	80052ee <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80052d2:	f7fd fdb9 	bl	8002e48 <HAL_RCC_GetSysClockFreq>
 80052d6:	61f8      	str	r0, [r7, #28]
        break;
 80052d8:	e009      	b.n	80052ee <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80052da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80052de:	61fb      	str	r3, [r7, #28]
        break;
 80052e0:	e005      	b.n	80052ee <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80052e2:	2300      	movs	r3, #0
 80052e4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80052e6:	2301      	movs	r3, #1
 80052e8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80052ec:	bf00      	nop
    }

    if (pclk != 0U)
 80052ee:	69fb      	ldr	r3, [r7, #28]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d019      	beq.n	8005328 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	685b      	ldr	r3, [r3, #4]
 80052f8:	085a      	lsrs	r2, r3, #1
 80052fa:	69fb      	ldr	r3, [r7, #28]
 80052fc:	441a      	add	r2, r3
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	685b      	ldr	r3, [r3, #4]
 8005302:	fbb2 f3f3 	udiv	r3, r2, r3
 8005306:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005308:	69bb      	ldr	r3, [r7, #24]
 800530a:	2b0f      	cmp	r3, #15
 800530c:	d909      	bls.n	8005322 <UART_SetConfig+0x546>
 800530e:	69bb      	ldr	r3, [r7, #24]
 8005310:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005314:	d205      	bcs.n	8005322 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005316:	69bb      	ldr	r3, [r7, #24]
 8005318:	b29a      	uxth	r2, r3
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	60da      	str	r2, [r3, #12]
 8005320:	e002      	b.n	8005328 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005322:	2301      	movs	r3, #1
 8005324:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	2200      	movs	r2, #0
 800532c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	2200      	movs	r2, #0
 8005332:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005334:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8005338:	4618      	mov	r0, r3
 800533a:	3728      	adds	r7, #40	@ 0x28
 800533c:	46bd      	mov	sp, r7
 800533e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005342:	bf00      	nop
 8005344:	40008000 	.word	0x40008000
 8005348:	00f42400 	.word	0x00f42400

0800534c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800534c:	b480      	push	{r7}
 800534e:	b083      	sub	sp, #12
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005358:	f003 0308 	and.w	r3, r3, #8
 800535c:	2b00      	cmp	r3, #0
 800535e:	d00a      	beq.n	8005376 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	685b      	ldr	r3, [r3, #4]
 8005366:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	430a      	orrs	r2, r1
 8005374:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800537a:	f003 0301 	and.w	r3, r3, #1
 800537e:	2b00      	cmp	r3, #0
 8005380:	d00a      	beq.n	8005398 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	430a      	orrs	r2, r1
 8005396:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800539c:	f003 0302 	and.w	r3, r3, #2
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d00a      	beq.n	80053ba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	685b      	ldr	r3, [r3, #4]
 80053aa:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	430a      	orrs	r2, r1
 80053b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053be:	f003 0304 	and.w	r3, r3, #4
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d00a      	beq.n	80053dc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	685b      	ldr	r3, [r3, #4]
 80053cc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	430a      	orrs	r2, r1
 80053da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053e0:	f003 0310 	and.w	r3, r3, #16
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d00a      	beq.n	80053fe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	689b      	ldr	r3, [r3, #8]
 80053ee:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	430a      	orrs	r2, r1
 80053fc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005402:	f003 0320 	and.w	r3, r3, #32
 8005406:	2b00      	cmp	r3, #0
 8005408:	d00a      	beq.n	8005420 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	689b      	ldr	r3, [r3, #8]
 8005410:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	430a      	orrs	r2, r1
 800541e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005424:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005428:	2b00      	cmp	r3, #0
 800542a:	d01a      	beq.n	8005462 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	685b      	ldr	r3, [r3, #4]
 8005432:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	430a      	orrs	r2, r1
 8005440:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005446:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800544a:	d10a      	bne.n	8005462 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	685b      	ldr	r3, [r3, #4]
 8005452:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	430a      	orrs	r2, r1
 8005460:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005466:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800546a:	2b00      	cmp	r3, #0
 800546c:	d00a      	beq.n	8005484 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	685b      	ldr	r3, [r3, #4]
 8005474:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	430a      	orrs	r2, r1
 8005482:	605a      	str	r2, [r3, #4]
  }
}
 8005484:	bf00      	nop
 8005486:	370c      	adds	r7, #12
 8005488:	46bd      	mov	sp, r7
 800548a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548e:	4770      	bx	lr

08005490 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b098      	sub	sp, #96	@ 0x60
 8005494:	af02      	add	r7, sp, #8
 8005496:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2200      	movs	r2, #0
 800549c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80054a0:	f7fc fa68 	bl	8001974 <HAL_GetTick>
 80054a4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f003 0308 	and.w	r3, r3, #8
 80054b0:	2b08      	cmp	r3, #8
 80054b2:	d12e      	bne.n	8005512 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80054b4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80054b8:	9300      	str	r3, [sp, #0]
 80054ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80054bc:	2200      	movs	r2, #0
 80054be:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80054c2:	6878      	ldr	r0, [r7, #4]
 80054c4:	f000 f88c 	bl	80055e0 <UART_WaitOnFlagUntilTimeout>
 80054c8:	4603      	mov	r3, r0
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d021      	beq.n	8005512 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054d6:	e853 3f00 	ldrex	r3, [r3]
 80054da:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80054dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054de:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80054e2:	653b      	str	r3, [r7, #80]	@ 0x50
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	461a      	mov	r2, r3
 80054ea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80054ec:	647b      	str	r3, [r7, #68]	@ 0x44
 80054ee:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054f0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80054f2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80054f4:	e841 2300 	strex	r3, r2, [r1]
 80054f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80054fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d1e6      	bne.n	80054ce <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2220      	movs	r2, #32
 8005504:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2200      	movs	r2, #0
 800550a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800550e:	2303      	movs	r3, #3
 8005510:	e062      	b.n	80055d8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f003 0304 	and.w	r3, r3, #4
 800551c:	2b04      	cmp	r3, #4
 800551e:	d149      	bne.n	80055b4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005520:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005524:	9300      	str	r3, [sp, #0]
 8005526:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005528:	2200      	movs	r2, #0
 800552a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800552e:	6878      	ldr	r0, [r7, #4]
 8005530:	f000 f856 	bl	80055e0 <UART_WaitOnFlagUntilTimeout>
 8005534:	4603      	mov	r3, r0
 8005536:	2b00      	cmp	r3, #0
 8005538:	d03c      	beq.n	80055b4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005542:	e853 3f00 	ldrex	r3, [r3]
 8005546:	623b      	str	r3, [r7, #32]
   return(result);
 8005548:	6a3b      	ldr	r3, [r7, #32]
 800554a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800554e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	461a      	mov	r2, r3
 8005556:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005558:	633b      	str	r3, [r7, #48]	@ 0x30
 800555a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800555c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800555e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005560:	e841 2300 	strex	r3, r2, [r1]
 8005564:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005566:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005568:	2b00      	cmp	r3, #0
 800556a:	d1e6      	bne.n	800553a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	3308      	adds	r3, #8
 8005572:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005574:	693b      	ldr	r3, [r7, #16]
 8005576:	e853 3f00 	ldrex	r3, [r3]
 800557a:	60fb      	str	r3, [r7, #12]
   return(result);
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	f023 0301 	bic.w	r3, r3, #1
 8005582:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	3308      	adds	r3, #8
 800558a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800558c:	61fa      	str	r2, [r7, #28]
 800558e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005590:	69b9      	ldr	r1, [r7, #24]
 8005592:	69fa      	ldr	r2, [r7, #28]
 8005594:	e841 2300 	strex	r3, r2, [r1]
 8005598:	617b      	str	r3, [r7, #20]
   return(result);
 800559a:	697b      	ldr	r3, [r7, #20]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d1e5      	bne.n	800556c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2220      	movs	r2, #32
 80055a4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2200      	movs	r2, #0
 80055ac:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80055b0:	2303      	movs	r3, #3
 80055b2:	e011      	b.n	80055d8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2220      	movs	r2, #32
 80055b8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2220      	movs	r2, #32
 80055be:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2200      	movs	r2, #0
 80055c6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2200      	movs	r2, #0
 80055cc:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2200      	movs	r2, #0
 80055d2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80055d6:	2300      	movs	r3, #0
}
 80055d8:	4618      	mov	r0, r3
 80055da:	3758      	adds	r7, #88	@ 0x58
 80055dc:	46bd      	mov	sp, r7
 80055de:	bd80      	pop	{r7, pc}

080055e0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b084      	sub	sp, #16
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	60f8      	str	r0, [r7, #12]
 80055e8:	60b9      	str	r1, [r7, #8]
 80055ea:	603b      	str	r3, [r7, #0]
 80055ec:	4613      	mov	r3, r2
 80055ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055f0:	e04f      	b.n	8005692 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055f2:	69bb      	ldr	r3, [r7, #24]
 80055f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055f8:	d04b      	beq.n	8005692 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055fa:	f7fc f9bb 	bl	8001974 <HAL_GetTick>
 80055fe:	4602      	mov	r2, r0
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	1ad3      	subs	r3, r2, r3
 8005604:	69ba      	ldr	r2, [r7, #24]
 8005606:	429a      	cmp	r2, r3
 8005608:	d302      	bcc.n	8005610 <UART_WaitOnFlagUntilTimeout+0x30>
 800560a:	69bb      	ldr	r3, [r7, #24]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d101      	bne.n	8005614 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005610:	2303      	movs	r3, #3
 8005612:	e04e      	b.n	80056b2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f003 0304 	and.w	r3, r3, #4
 800561e:	2b00      	cmp	r3, #0
 8005620:	d037      	beq.n	8005692 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	2b80      	cmp	r3, #128	@ 0x80
 8005626:	d034      	beq.n	8005692 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	2b40      	cmp	r3, #64	@ 0x40
 800562c:	d031      	beq.n	8005692 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	69db      	ldr	r3, [r3, #28]
 8005634:	f003 0308 	and.w	r3, r3, #8
 8005638:	2b08      	cmp	r3, #8
 800563a:	d110      	bne.n	800565e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	2208      	movs	r2, #8
 8005642:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005644:	68f8      	ldr	r0, [r7, #12]
 8005646:	f000 f838 	bl	80056ba <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	2208      	movs	r2, #8
 800564e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	2200      	movs	r2, #0
 8005656:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800565a:	2301      	movs	r3, #1
 800565c:	e029      	b.n	80056b2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	69db      	ldr	r3, [r3, #28]
 8005664:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005668:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800566c:	d111      	bne.n	8005692 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005676:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005678:	68f8      	ldr	r0, [r7, #12]
 800567a:	f000 f81e 	bl	80056ba <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	2220      	movs	r2, #32
 8005682:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	2200      	movs	r2, #0
 800568a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800568e:	2303      	movs	r3, #3
 8005690:	e00f      	b.n	80056b2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	69da      	ldr	r2, [r3, #28]
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	4013      	ands	r3, r2
 800569c:	68ba      	ldr	r2, [r7, #8]
 800569e:	429a      	cmp	r2, r3
 80056a0:	bf0c      	ite	eq
 80056a2:	2301      	moveq	r3, #1
 80056a4:	2300      	movne	r3, #0
 80056a6:	b2db      	uxtb	r3, r3
 80056a8:	461a      	mov	r2, r3
 80056aa:	79fb      	ldrb	r3, [r7, #7]
 80056ac:	429a      	cmp	r2, r3
 80056ae:	d0a0      	beq.n	80055f2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80056b0:	2300      	movs	r3, #0
}
 80056b2:	4618      	mov	r0, r3
 80056b4:	3710      	adds	r7, #16
 80056b6:	46bd      	mov	sp, r7
 80056b8:	bd80      	pop	{r7, pc}

080056ba <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80056ba:	b480      	push	{r7}
 80056bc:	b095      	sub	sp, #84	@ 0x54
 80056be:	af00      	add	r7, sp, #0
 80056c0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056ca:	e853 3f00 	ldrex	r3, [r3]
 80056ce:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80056d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056d2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80056d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	461a      	mov	r2, r3
 80056de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80056e0:	643b      	str	r3, [r7, #64]	@ 0x40
 80056e2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056e4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80056e6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80056e8:	e841 2300 	strex	r3, r2, [r1]
 80056ec:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80056ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d1e6      	bne.n	80056c2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	3308      	adds	r3, #8
 80056fa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056fc:	6a3b      	ldr	r3, [r7, #32]
 80056fe:	e853 3f00 	ldrex	r3, [r3]
 8005702:	61fb      	str	r3, [r7, #28]
   return(result);
 8005704:	69fb      	ldr	r3, [r7, #28]
 8005706:	f023 0301 	bic.w	r3, r3, #1
 800570a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	3308      	adds	r3, #8
 8005712:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005714:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005716:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005718:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800571a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800571c:	e841 2300 	strex	r3, r2, [r1]
 8005720:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005724:	2b00      	cmp	r3, #0
 8005726:	d1e5      	bne.n	80056f4 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800572c:	2b01      	cmp	r3, #1
 800572e:	d118      	bne.n	8005762 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	e853 3f00 	ldrex	r3, [r3]
 800573c:	60bb      	str	r3, [r7, #8]
   return(result);
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	f023 0310 	bic.w	r3, r3, #16
 8005744:	647b      	str	r3, [r7, #68]	@ 0x44
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	461a      	mov	r2, r3
 800574c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800574e:	61bb      	str	r3, [r7, #24]
 8005750:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005752:	6979      	ldr	r1, [r7, #20]
 8005754:	69ba      	ldr	r2, [r7, #24]
 8005756:	e841 2300 	strex	r3, r2, [r1]
 800575a:	613b      	str	r3, [r7, #16]
   return(result);
 800575c:	693b      	ldr	r3, [r7, #16]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d1e6      	bne.n	8005730 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2220      	movs	r2, #32
 8005766:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2200      	movs	r2, #0
 800576e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2200      	movs	r2, #0
 8005774:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005776:	bf00      	nop
 8005778:	3754      	adds	r7, #84	@ 0x54
 800577a:	46bd      	mov	sp, r7
 800577c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005780:	4770      	bx	lr

08005782 <__cvt>:
 8005782:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005786:	ec57 6b10 	vmov	r6, r7, d0
 800578a:	2f00      	cmp	r7, #0
 800578c:	460c      	mov	r4, r1
 800578e:	4619      	mov	r1, r3
 8005790:	463b      	mov	r3, r7
 8005792:	bfbb      	ittet	lt
 8005794:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8005798:	461f      	movlt	r7, r3
 800579a:	2300      	movge	r3, #0
 800579c:	232d      	movlt	r3, #45	@ 0x2d
 800579e:	700b      	strb	r3, [r1, #0]
 80057a0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80057a2:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80057a6:	4691      	mov	r9, r2
 80057a8:	f023 0820 	bic.w	r8, r3, #32
 80057ac:	bfbc      	itt	lt
 80057ae:	4632      	movlt	r2, r6
 80057b0:	4616      	movlt	r6, r2
 80057b2:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80057b6:	d005      	beq.n	80057c4 <__cvt+0x42>
 80057b8:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80057bc:	d100      	bne.n	80057c0 <__cvt+0x3e>
 80057be:	3401      	adds	r4, #1
 80057c0:	2102      	movs	r1, #2
 80057c2:	e000      	b.n	80057c6 <__cvt+0x44>
 80057c4:	2103      	movs	r1, #3
 80057c6:	ab03      	add	r3, sp, #12
 80057c8:	9301      	str	r3, [sp, #4]
 80057ca:	ab02      	add	r3, sp, #8
 80057cc:	9300      	str	r3, [sp, #0]
 80057ce:	ec47 6b10 	vmov	d0, r6, r7
 80057d2:	4653      	mov	r3, sl
 80057d4:	4622      	mov	r2, r4
 80057d6:	f001 f873 	bl	80068c0 <_dtoa_r>
 80057da:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80057de:	4605      	mov	r5, r0
 80057e0:	d119      	bne.n	8005816 <__cvt+0x94>
 80057e2:	f019 0f01 	tst.w	r9, #1
 80057e6:	d00e      	beq.n	8005806 <__cvt+0x84>
 80057e8:	eb00 0904 	add.w	r9, r0, r4
 80057ec:	2200      	movs	r2, #0
 80057ee:	2300      	movs	r3, #0
 80057f0:	4630      	mov	r0, r6
 80057f2:	4639      	mov	r1, r7
 80057f4:	f7fb f968 	bl	8000ac8 <__aeabi_dcmpeq>
 80057f8:	b108      	cbz	r0, 80057fe <__cvt+0x7c>
 80057fa:	f8cd 900c 	str.w	r9, [sp, #12]
 80057fe:	2230      	movs	r2, #48	@ 0x30
 8005800:	9b03      	ldr	r3, [sp, #12]
 8005802:	454b      	cmp	r3, r9
 8005804:	d31e      	bcc.n	8005844 <__cvt+0xc2>
 8005806:	9b03      	ldr	r3, [sp, #12]
 8005808:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800580a:	1b5b      	subs	r3, r3, r5
 800580c:	4628      	mov	r0, r5
 800580e:	6013      	str	r3, [r2, #0]
 8005810:	b004      	add	sp, #16
 8005812:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005816:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800581a:	eb00 0904 	add.w	r9, r0, r4
 800581e:	d1e5      	bne.n	80057ec <__cvt+0x6a>
 8005820:	7803      	ldrb	r3, [r0, #0]
 8005822:	2b30      	cmp	r3, #48	@ 0x30
 8005824:	d10a      	bne.n	800583c <__cvt+0xba>
 8005826:	2200      	movs	r2, #0
 8005828:	2300      	movs	r3, #0
 800582a:	4630      	mov	r0, r6
 800582c:	4639      	mov	r1, r7
 800582e:	f7fb f94b 	bl	8000ac8 <__aeabi_dcmpeq>
 8005832:	b918      	cbnz	r0, 800583c <__cvt+0xba>
 8005834:	f1c4 0401 	rsb	r4, r4, #1
 8005838:	f8ca 4000 	str.w	r4, [sl]
 800583c:	f8da 3000 	ldr.w	r3, [sl]
 8005840:	4499      	add	r9, r3
 8005842:	e7d3      	b.n	80057ec <__cvt+0x6a>
 8005844:	1c59      	adds	r1, r3, #1
 8005846:	9103      	str	r1, [sp, #12]
 8005848:	701a      	strb	r2, [r3, #0]
 800584a:	e7d9      	b.n	8005800 <__cvt+0x7e>

0800584c <__exponent>:
 800584c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800584e:	2900      	cmp	r1, #0
 8005850:	bfba      	itte	lt
 8005852:	4249      	neglt	r1, r1
 8005854:	232d      	movlt	r3, #45	@ 0x2d
 8005856:	232b      	movge	r3, #43	@ 0x2b
 8005858:	2909      	cmp	r1, #9
 800585a:	7002      	strb	r2, [r0, #0]
 800585c:	7043      	strb	r3, [r0, #1]
 800585e:	dd29      	ble.n	80058b4 <__exponent+0x68>
 8005860:	f10d 0307 	add.w	r3, sp, #7
 8005864:	461d      	mov	r5, r3
 8005866:	270a      	movs	r7, #10
 8005868:	461a      	mov	r2, r3
 800586a:	fbb1 f6f7 	udiv	r6, r1, r7
 800586e:	fb07 1416 	mls	r4, r7, r6, r1
 8005872:	3430      	adds	r4, #48	@ 0x30
 8005874:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005878:	460c      	mov	r4, r1
 800587a:	2c63      	cmp	r4, #99	@ 0x63
 800587c:	f103 33ff 	add.w	r3, r3, #4294967295
 8005880:	4631      	mov	r1, r6
 8005882:	dcf1      	bgt.n	8005868 <__exponent+0x1c>
 8005884:	3130      	adds	r1, #48	@ 0x30
 8005886:	1e94      	subs	r4, r2, #2
 8005888:	f803 1c01 	strb.w	r1, [r3, #-1]
 800588c:	1c41      	adds	r1, r0, #1
 800588e:	4623      	mov	r3, r4
 8005890:	42ab      	cmp	r3, r5
 8005892:	d30a      	bcc.n	80058aa <__exponent+0x5e>
 8005894:	f10d 0309 	add.w	r3, sp, #9
 8005898:	1a9b      	subs	r3, r3, r2
 800589a:	42ac      	cmp	r4, r5
 800589c:	bf88      	it	hi
 800589e:	2300      	movhi	r3, #0
 80058a0:	3302      	adds	r3, #2
 80058a2:	4403      	add	r3, r0
 80058a4:	1a18      	subs	r0, r3, r0
 80058a6:	b003      	add	sp, #12
 80058a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80058aa:	f813 6b01 	ldrb.w	r6, [r3], #1
 80058ae:	f801 6f01 	strb.w	r6, [r1, #1]!
 80058b2:	e7ed      	b.n	8005890 <__exponent+0x44>
 80058b4:	2330      	movs	r3, #48	@ 0x30
 80058b6:	3130      	adds	r1, #48	@ 0x30
 80058b8:	7083      	strb	r3, [r0, #2]
 80058ba:	70c1      	strb	r1, [r0, #3]
 80058bc:	1d03      	adds	r3, r0, #4
 80058be:	e7f1      	b.n	80058a4 <__exponent+0x58>

080058c0 <_printf_float>:
 80058c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058c4:	b08d      	sub	sp, #52	@ 0x34
 80058c6:	460c      	mov	r4, r1
 80058c8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80058cc:	4616      	mov	r6, r2
 80058ce:	461f      	mov	r7, r3
 80058d0:	4605      	mov	r5, r0
 80058d2:	f000 feef 	bl	80066b4 <_localeconv_r>
 80058d6:	6803      	ldr	r3, [r0, #0]
 80058d8:	9304      	str	r3, [sp, #16]
 80058da:	4618      	mov	r0, r3
 80058dc:	f7fa fcc8 	bl	8000270 <strlen>
 80058e0:	2300      	movs	r3, #0
 80058e2:	930a      	str	r3, [sp, #40]	@ 0x28
 80058e4:	f8d8 3000 	ldr.w	r3, [r8]
 80058e8:	9005      	str	r0, [sp, #20]
 80058ea:	3307      	adds	r3, #7
 80058ec:	f023 0307 	bic.w	r3, r3, #7
 80058f0:	f103 0208 	add.w	r2, r3, #8
 80058f4:	f894 a018 	ldrb.w	sl, [r4, #24]
 80058f8:	f8d4 b000 	ldr.w	fp, [r4]
 80058fc:	f8c8 2000 	str.w	r2, [r8]
 8005900:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005904:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005908:	9307      	str	r3, [sp, #28]
 800590a:	f8cd 8018 	str.w	r8, [sp, #24]
 800590e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005912:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005916:	4b9c      	ldr	r3, [pc, #624]	@ (8005b88 <_printf_float+0x2c8>)
 8005918:	f04f 32ff 	mov.w	r2, #4294967295
 800591c:	f7fb f906 	bl	8000b2c <__aeabi_dcmpun>
 8005920:	bb70      	cbnz	r0, 8005980 <_printf_float+0xc0>
 8005922:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005926:	4b98      	ldr	r3, [pc, #608]	@ (8005b88 <_printf_float+0x2c8>)
 8005928:	f04f 32ff 	mov.w	r2, #4294967295
 800592c:	f7fb f8e0 	bl	8000af0 <__aeabi_dcmple>
 8005930:	bb30      	cbnz	r0, 8005980 <_printf_float+0xc0>
 8005932:	2200      	movs	r2, #0
 8005934:	2300      	movs	r3, #0
 8005936:	4640      	mov	r0, r8
 8005938:	4649      	mov	r1, r9
 800593a:	f7fb f8cf 	bl	8000adc <__aeabi_dcmplt>
 800593e:	b110      	cbz	r0, 8005946 <_printf_float+0x86>
 8005940:	232d      	movs	r3, #45	@ 0x2d
 8005942:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005946:	4a91      	ldr	r2, [pc, #580]	@ (8005b8c <_printf_float+0x2cc>)
 8005948:	4b91      	ldr	r3, [pc, #580]	@ (8005b90 <_printf_float+0x2d0>)
 800594a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800594e:	bf94      	ite	ls
 8005950:	4690      	movls	r8, r2
 8005952:	4698      	movhi	r8, r3
 8005954:	2303      	movs	r3, #3
 8005956:	6123      	str	r3, [r4, #16]
 8005958:	f02b 0304 	bic.w	r3, fp, #4
 800595c:	6023      	str	r3, [r4, #0]
 800595e:	f04f 0900 	mov.w	r9, #0
 8005962:	9700      	str	r7, [sp, #0]
 8005964:	4633      	mov	r3, r6
 8005966:	aa0b      	add	r2, sp, #44	@ 0x2c
 8005968:	4621      	mov	r1, r4
 800596a:	4628      	mov	r0, r5
 800596c:	f000 f9d2 	bl	8005d14 <_printf_common>
 8005970:	3001      	adds	r0, #1
 8005972:	f040 808d 	bne.w	8005a90 <_printf_float+0x1d0>
 8005976:	f04f 30ff 	mov.w	r0, #4294967295
 800597a:	b00d      	add	sp, #52	@ 0x34
 800597c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005980:	4642      	mov	r2, r8
 8005982:	464b      	mov	r3, r9
 8005984:	4640      	mov	r0, r8
 8005986:	4649      	mov	r1, r9
 8005988:	f7fb f8d0 	bl	8000b2c <__aeabi_dcmpun>
 800598c:	b140      	cbz	r0, 80059a0 <_printf_float+0xe0>
 800598e:	464b      	mov	r3, r9
 8005990:	2b00      	cmp	r3, #0
 8005992:	bfbc      	itt	lt
 8005994:	232d      	movlt	r3, #45	@ 0x2d
 8005996:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800599a:	4a7e      	ldr	r2, [pc, #504]	@ (8005b94 <_printf_float+0x2d4>)
 800599c:	4b7e      	ldr	r3, [pc, #504]	@ (8005b98 <_printf_float+0x2d8>)
 800599e:	e7d4      	b.n	800594a <_printf_float+0x8a>
 80059a0:	6863      	ldr	r3, [r4, #4]
 80059a2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80059a6:	9206      	str	r2, [sp, #24]
 80059a8:	1c5a      	adds	r2, r3, #1
 80059aa:	d13b      	bne.n	8005a24 <_printf_float+0x164>
 80059ac:	2306      	movs	r3, #6
 80059ae:	6063      	str	r3, [r4, #4]
 80059b0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80059b4:	2300      	movs	r3, #0
 80059b6:	6022      	str	r2, [r4, #0]
 80059b8:	9303      	str	r3, [sp, #12]
 80059ba:	ab0a      	add	r3, sp, #40	@ 0x28
 80059bc:	e9cd a301 	strd	sl, r3, [sp, #4]
 80059c0:	ab09      	add	r3, sp, #36	@ 0x24
 80059c2:	9300      	str	r3, [sp, #0]
 80059c4:	6861      	ldr	r1, [r4, #4]
 80059c6:	ec49 8b10 	vmov	d0, r8, r9
 80059ca:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80059ce:	4628      	mov	r0, r5
 80059d0:	f7ff fed7 	bl	8005782 <__cvt>
 80059d4:	9b06      	ldr	r3, [sp, #24]
 80059d6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80059d8:	2b47      	cmp	r3, #71	@ 0x47
 80059da:	4680      	mov	r8, r0
 80059dc:	d129      	bne.n	8005a32 <_printf_float+0x172>
 80059de:	1cc8      	adds	r0, r1, #3
 80059e0:	db02      	blt.n	80059e8 <_printf_float+0x128>
 80059e2:	6863      	ldr	r3, [r4, #4]
 80059e4:	4299      	cmp	r1, r3
 80059e6:	dd41      	ble.n	8005a6c <_printf_float+0x1ac>
 80059e8:	f1aa 0a02 	sub.w	sl, sl, #2
 80059ec:	fa5f fa8a 	uxtb.w	sl, sl
 80059f0:	3901      	subs	r1, #1
 80059f2:	4652      	mov	r2, sl
 80059f4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80059f8:	9109      	str	r1, [sp, #36]	@ 0x24
 80059fa:	f7ff ff27 	bl	800584c <__exponent>
 80059fe:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005a00:	1813      	adds	r3, r2, r0
 8005a02:	2a01      	cmp	r2, #1
 8005a04:	4681      	mov	r9, r0
 8005a06:	6123      	str	r3, [r4, #16]
 8005a08:	dc02      	bgt.n	8005a10 <_printf_float+0x150>
 8005a0a:	6822      	ldr	r2, [r4, #0]
 8005a0c:	07d2      	lsls	r2, r2, #31
 8005a0e:	d501      	bpl.n	8005a14 <_printf_float+0x154>
 8005a10:	3301      	adds	r3, #1
 8005a12:	6123      	str	r3, [r4, #16]
 8005a14:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d0a2      	beq.n	8005962 <_printf_float+0xa2>
 8005a1c:	232d      	movs	r3, #45	@ 0x2d
 8005a1e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005a22:	e79e      	b.n	8005962 <_printf_float+0xa2>
 8005a24:	9a06      	ldr	r2, [sp, #24]
 8005a26:	2a47      	cmp	r2, #71	@ 0x47
 8005a28:	d1c2      	bne.n	80059b0 <_printf_float+0xf0>
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d1c0      	bne.n	80059b0 <_printf_float+0xf0>
 8005a2e:	2301      	movs	r3, #1
 8005a30:	e7bd      	b.n	80059ae <_printf_float+0xee>
 8005a32:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005a36:	d9db      	bls.n	80059f0 <_printf_float+0x130>
 8005a38:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005a3c:	d118      	bne.n	8005a70 <_printf_float+0x1b0>
 8005a3e:	2900      	cmp	r1, #0
 8005a40:	6863      	ldr	r3, [r4, #4]
 8005a42:	dd0b      	ble.n	8005a5c <_printf_float+0x19c>
 8005a44:	6121      	str	r1, [r4, #16]
 8005a46:	b913      	cbnz	r3, 8005a4e <_printf_float+0x18e>
 8005a48:	6822      	ldr	r2, [r4, #0]
 8005a4a:	07d0      	lsls	r0, r2, #31
 8005a4c:	d502      	bpl.n	8005a54 <_printf_float+0x194>
 8005a4e:	3301      	adds	r3, #1
 8005a50:	440b      	add	r3, r1
 8005a52:	6123      	str	r3, [r4, #16]
 8005a54:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005a56:	f04f 0900 	mov.w	r9, #0
 8005a5a:	e7db      	b.n	8005a14 <_printf_float+0x154>
 8005a5c:	b913      	cbnz	r3, 8005a64 <_printf_float+0x1a4>
 8005a5e:	6822      	ldr	r2, [r4, #0]
 8005a60:	07d2      	lsls	r2, r2, #31
 8005a62:	d501      	bpl.n	8005a68 <_printf_float+0x1a8>
 8005a64:	3302      	adds	r3, #2
 8005a66:	e7f4      	b.n	8005a52 <_printf_float+0x192>
 8005a68:	2301      	movs	r3, #1
 8005a6a:	e7f2      	b.n	8005a52 <_printf_float+0x192>
 8005a6c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005a70:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005a72:	4299      	cmp	r1, r3
 8005a74:	db05      	blt.n	8005a82 <_printf_float+0x1c2>
 8005a76:	6823      	ldr	r3, [r4, #0]
 8005a78:	6121      	str	r1, [r4, #16]
 8005a7a:	07d8      	lsls	r0, r3, #31
 8005a7c:	d5ea      	bpl.n	8005a54 <_printf_float+0x194>
 8005a7e:	1c4b      	adds	r3, r1, #1
 8005a80:	e7e7      	b.n	8005a52 <_printf_float+0x192>
 8005a82:	2900      	cmp	r1, #0
 8005a84:	bfd4      	ite	le
 8005a86:	f1c1 0202 	rsble	r2, r1, #2
 8005a8a:	2201      	movgt	r2, #1
 8005a8c:	4413      	add	r3, r2
 8005a8e:	e7e0      	b.n	8005a52 <_printf_float+0x192>
 8005a90:	6823      	ldr	r3, [r4, #0]
 8005a92:	055a      	lsls	r2, r3, #21
 8005a94:	d407      	bmi.n	8005aa6 <_printf_float+0x1e6>
 8005a96:	6923      	ldr	r3, [r4, #16]
 8005a98:	4642      	mov	r2, r8
 8005a9a:	4631      	mov	r1, r6
 8005a9c:	4628      	mov	r0, r5
 8005a9e:	47b8      	blx	r7
 8005aa0:	3001      	adds	r0, #1
 8005aa2:	d12b      	bne.n	8005afc <_printf_float+0x23c>
 8005aa4:	e767      	b.n	8005976 <_printf_float+0xb6>
 8005aa6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005aaa:	f240 80dd 	bls.w	8005c68 <_printf_float+0x3a8>
 8005aae:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	f7fb f807 	bl	8000ac8 <__aeabi_dcmpeq>
 8005aba:	2800      	cmp	r0, #0
 8005abc:	d033      	beq.n	8005b26 <_printf_float+0x266>
 8005abe:	4a37      	ldr	r2, [pc, #220]	@ (8005b9c <_printf_float+0x2dc>)
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	4631      	mov	r1, r6
 8005ac4:	4628      	mov	r0, r5
 8005ac6:	47b8      	blx	r7
 8005ac8:	3001      	adds	r0, #1
 8005aca:	f43f af54 	beq.w	8005976 <_printf_float+0xb6>
 8005ace:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8005ad2:	4543      	cmp	r3, r8
 8005ad4:	db02      	blt.n	8005adc <_printf_float+0x21c>
 8005ad6:	6823      	ldr	r3, [r4, #0]
 8005ad8:	07d8      	lsls	r0, r3, #31
 8005ada:	d50f      	bpl.n	8005afc <_printf_float+0x23c>
 8005adc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005ae0:	4631      	mov	r1, r6
 8005ae2:	4628      	mov	r0, r5
 8005ae4:	47b8      	blx	r7
 8005ae6:	3001      	adds	r0, #1
 8005ae8:	f43f af45 	beq.w	8005976 <_printf_float+0xb6>
 8005aec:	f04f 0900 	mov.w	r9, #0
 8005af0:	f108 38ff 	add.w	r8, r8, #4294967295
 8005af4:	f104 0a1a 	add.w	sl, r4, #26
 8005af8:	45c8      	cmp	r8, r9
 8005afa:	dc09      	bgt.n	8005b10 <_printf_float+0x250>
 8005afc:	6823      	ldr	r3, [r4, #0]
 8005afe:	079b      	lsls	r3, r3, #30
 8005b00:	f100 8103 	bmi.w	8005d0a <_printf_float+0x44a>
 8005b04:	68e0      	ldr	r0, [r4, #12]
 8005b06:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005b08:	4298      	cmp	r0, r3
 8005b0a:	bfb8      	it	lt
 8005b0c:	4618      	movlt	r0, r3
 8005b0e:	e734      	b.n	800597a <_printf_float+0xba>
 8005b10:	2301      	movs	r3, #1
 8005b12:	4652      	mov	r2, sl
 8005b14:	4631      	mov	r1, r6
 8005b16:	4628      	mov	r0, r5
 8005b18:	47b8      	blx	r7
 8005b1a:	3001      	adds	r0, #1
 8005b1c:	f43f af2b 	beq.w	8005976 <_printf_float+0xb6>
 8005b20:	f109 0901 	add.w	r9, r9, #1
 8005b24:	e7e8      	b.n	8005af8 <_printf_float+0x238>
 8005b26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	dc39      	bgt.n	8005ba0 <_printf_float+0x2e0>
 8005b2c:	4a1b      	ldr	r2, [pc, #108]	@ (8005b9c <_printf_float+0x2dc>)
 8005b2e:	2301      	movs	r3, #1
 8005b30:	4631      	mov	r1, r6
 8005b32:	4628      	mov	r0, r5
 8005b34:	47b8      	blx	r7
 8005b36:	3001      	adds	r0, #1
 8005b38:	f43f af1d 	beq.w	8005976 <_printf_float+0xb6>
 8005b3c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8005b40:	ea59 0303 	orrs.w	r3, r9, r3
 8005b44:	d102      	bne.n	8005b4c <_printf_float+0x28c>
 8005b46:	6823      	ldr	r3, [r4, #0]
 8005b48:	07d9      	lsls	r1, r3, #31
 8005b4a:	d5d7      	bpl.n	8005afc <_printf_float+0x23c>
 8005b4c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005b50:	4631      	mov	r1, r6
 8005b52:	4628      	mov	r0, r5
 8005b54:	47b8      	blx	r7
 8005b56:	3001      	adds	r0, #1
 8005b58:	f43f af0d 	beq.w	8005976 <_printf_float+0xb6>
 8005b5c:	f04f 0a00 	mov.w	sl, #0
 8005b60:	f104 0b1a 	add.w	fp, r4, #26
 8005b64:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b66:	425b      	negs	r3, r3
 8005b68:	4553      	cmp	r3, sl
 8005b6a:	dc01      	bgt.n	8005b70 <_printf_float+0x2b0>
 8005b6c:	464b      	mov	r3, r9
 8005b6e:	e793      	b.n	8005a98 <_printf_float+0x1d8>
 8005b70:	2301      	movs	r3, #1
 8005b72:	465a      	mov	r2, fp
 8005b74:	4631      	mov	r1, r6
 8005b76:	4628      	mov	r0, r5
 8005b78:	47b8      	blx	r7
 8005b7a:	3001      	adds	r0, #1
 8005b7c:	f43f aefb 	beq.w	8005976 <_printf_float+0xb6>
 8005b80:	f10a 0a01 	add.w	sl, sl, #1
 8005b84:	e7ee      	b.n	8005b64 <_printf_float+0x2a4>
 8005b86:	bf00      	nop
 8005b88:	7fefffff 	.word	0x7fefffff
 8005b8c:	08009ec8 	.word	0x08009ec8
 8005b90:	08009ecc 	.word	0x08009ecc
 8005b94:	08009ed0 	.word	0x08009ed0
 8005b98:	08009ed4 	.word	0x08009ed4
 8005b9c:	08009ed8 	.word	0x08009ed8
 8005ba0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005ba2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005ba6:	4553      	cmp	r3, sl
 8005ba8:	bfa8      	it	ge
 8005baa:	4653      	movge	r3, sl
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	4699      	mov	r9, r3
 8005bb0:	dc36      	bgt.n	8005c20 <_printf_float+0x360>
 8005bb2:	f04f 0b00 	mov.w	fp, #0
 8005bb6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005bba:	f104 021a 	add.w	r2, r4, #26
 8005bbe:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005bc0:	9306      	str	r3, [sp, #24]
 8005bc2:	eba3 0309 	sub.w	r3, r3, r9
 8005bc6:	455b      	cmp	r3, fp
 8005bc8:	dc31      	bgt.n	8005c2e <_printf_float+0x36e>
 8005bca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005bcc:	459a      	cmp	sl, r3
 8005bce:	dc3a      	bgt.n	8005c46 <_printf_float+0x386>
 8005bd0:	6823      	ldr	r3, [r4, #0]
 8005bd2:	07da      	lsls	r2, r3, #31
 8005bd4:	d437      	bmi.n	8005c46 <_printf_float+0x386>
 8005bd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005bd8:	ebaa 0903 	sub.w	r9, sl, r3
 8005bdc:	9b06      	ldr	r3, [sp, #24]
 8005bde:	ebaa 0303 	sub.w	r3, sl, r3
 8005be2:	4599      	cmp	r9, r3
 8005be4:	bfa8      	it	ge
 8005be6:	4699      	movge	r9, r3
 8005be8:	f1b9 0f00 	cmp.w	r9, #0
 8005bec:	dc33      	bgt.n	8005c56 <_printf_float+0x396>
 8005bee:	f04f 0800 	mov.w	r8, #0
 8005bf2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005bf6:	f104 0b1a 	add.w	fp, r4, #26
 8005bfa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005bfc:	ebaa 0303 	sub.w	r3, sl, r3
 8005c00:	eba3 0309 	sub.w	r3, r3, r9
 8005c04:	4543      	cmp	r3, r8
 8005c06:	f77f af79 	ble.w	8005afc <_printf_float+0x23c>
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	465a      	mov	r2, fp
 8005c0e:	4631      	mov	r1, r6
 8005c10:	4628      	mov	r0, r5
 8005c12:	47b8      	blx	r7
 8005c14:	3001      	adds	r0, #1
 8005c16:	f43f aeae 	beq.w	8005976 <_printf_float+0xb6>
 8005c1a:	f108 0801 	add.w	r8, r8, #1
 8005c1e:	e7ec      	b.n	8005bfa <_printf_float+0x33a>
 8005c20:	4642      	mov	r2, r8
 8005c22:	4631      	mov	r1, r6
 8005c24:	4628      	mov	r0, r5
 8005c26:	47b8      	blx	r7
 8005c28:	3001      	adds	r0, #1
 8005c2a:	d1c2      	bne.n	8005bb2 <_printf_float+0x2f2>
 8005c2c:	e6a3      	b.n	8005976 <_printf_float+0xb6>
 8005c2e:	2301      	movs	r3, #1
 8005c30:	4631      	mov	r1, r6
 8005c32:	4628      	mov	r0, r5
 8005c34:	9206      	str	r2, [sp, #24]
 8005c36:	47b8      	blx	r7
 8005c38:	3001      	adds	r0, #1
 8005c3a:	f43f ae9c 	beq.w	8005976 <_printf_float+0xb6>
 8005c3e:	9a06      	ldr	r2, [sp, #24]
 8005c40:	f10b 0b01 	add.w	fp, fp, #1
 8005c44:	e7bb      	b.n	8005bbe <_printf_float+0x2fe>
 8005c46:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005c4a:	4631      	mov	r1, r6
 8005c4c:	4628      	mov	r0, r5
 8005c4e:	47b8      	blx	r7
 8005c50:	3001      	adds	r0, #1
 8005c52:	d1c0      	bne.n	8005bd6 <_printf_float+0x316>
 8005c54:	e68f      	b.n	8005976 <_printf_float+0xb6>
 8005c56:	9a06      	ldr	r2, [sp, #24]
 8005c58:	464b      	mov	r3, r9
 8005c5a:	4442      	add	r2, r8
 8005c5c:	4631      	mov	r1, r6
 8005c5e:	4628      	mov	r0, r5
 8005c60:	47b8      	blx	r7
 8005c62:	3001      	adds	r0, #1
 8005c64:	d1c3      	bne.n	8005bee <_printf_float+0x32e>
 8005c66:	e686      	b.n	8005976 <_printf_float+0xb6>
 8005c68:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005c6c:	f1ba 0f01 	cmp.w	sl, #1
 8005c70:	dc01      	bgt.n	8005c76 <_printf_float+0x3b6>
 8005c72:	07db      	lsls	r3, r3, #31
 8005c74:	d536      	bpl.n	8005ce4 <_printf_float+0x424>
 8005c76:	2301      	movs	r3, #1
 8005c78:	4642      	mov	r2, r8
 8005c7a:	4631      	mov	r1, r6
 8005c7c:	4628      	mov	r0, r5
 8005c7e:	47b8      	blx	r7
 8005c80:	3001      	adds	r0, #1
 8005c82:	f43f ae78 	beq.w	8005976 <_printf_float+0xb6>
 8005c86:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005c8a:	4631      	mov	r1, r6
 8005c8c:	4628      	mov	r0, r5
 8005c8e:	47b8      	blx	r7
 8005c90:	3001      	adds	r0, #1
 8005c92:	f43f ae70 	beq.w	8005976 <_printf_float+0xb6>
 8005c96:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005ca2:	f7fa ff11 	bl	8000ac8 <__aeabi_dcmpeq>
 8005ca6:	b9c0      	cbnz	r0, 8005cda <_printf_float+0x41a>
 8005ca8:	4653      	mov	r3, sl
 8005caa:	f108 0201 	add.w	r2, r8, #1
 8005cae:	4631      	mov	r1, r6
 8005cb0:	4628      	mov	r0, r5
 8005cb2:	47b8      	blx	r7
 8005cb4:	3001      	adds	r0, #1
 8005cb6:	d10c      	bne.n	8005cd2 <_printf_float+0x412>
 8005cb8:	e65d      	b.n	8005976 <_printf_float+0xb6>
 8005cba:	2301      	movs	r3, #1
 8005cbc:	465a      	mov	r2, fp
 8005cbe:	4631      	mov	r1, r6
 8005cc0:	4628      	mov	r0, r5
 8005cc2:	47b8      	blx	r7
 8005cc4:	3001      	adds	r0, #1
 8005cc6:	f43f ae56 	beq.w	8005976 <_printf_float+0xb6>
 8005cca:	f108 0801 	add.w	r8, r8, #1
 8005cce:	45d0      	cmp	r8, sl
 8005cd0:	dbf3      	blt.n	8005cba <_printf_float+0x3fa>
 8005cd2:	464b      	mov	r3, r9
 8005cd4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005cd8:	e6df      	b.n	8005a9a <_printf_float+0x1da>
 8005cda:	f04f 0800 	mov.w	r8, #0
 8005cde:	f104 0b1a 	add.w	fp, r4, #26
 8005ce2:	e7f4      	b.n	8005cce <_printf_float+0x40e>
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	4642      	mov	r2, r8
 8005ce8:	e7e1      	b.n	8005cae <_printf_float+0x3ee>
 8005cea:	2301      	movs	r3, #1
 8005cec:	464a      	mov	r2, r9
 8005cee:	4631      	mov	r1, r6
 8005cf0:	4628      	mov	r0, r5
 8005cf2:	47b8      	blx	r7
 8005cf4:	3001      	adds	r0, #1
 8005cf6:	f43f ae3e 	beq.w	8005976 <_printf_float+0xb6>
 8005cfa:	f108 0801 	add.w	r8, r8, #1
 8005cfe:	68e3      	ldr	r3, [r4, #12]
 8005d00:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005d02:	1a5b      	subs	r3, r3, r1
 8005d04:	4543      	cmp	r3, r8
 8005d06:	dcf0      	bgt.n	8005cea <_printf_float+0x42a>
 8005d08:	e6fc      	b.n	8005b04 <_printf_float+0x244>
 8005d0a:	f04f 0800 	mov.w	r8, #0
 8005d0e:	f104 0919 	add.w	r9, r4, #25
 8005d12:	e7f4      	b.n	8005cfe <_printf_float+0x43e>

08005d14 <_printf_common>:
 8005d14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d18:	4616      	mov	r6, r2
 8005d1a:	4698      	mov	r8, r3
 8005d1c:	688a      	ldr	r2, [r1, #8]
 8005d1e:	690b      	ldr	r3, [r1, #16]
 8005d20:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005d24:	4293      	cmp	r3, r2
 8005d26:	bfb8      	it	lt
 8005d28:	4613      	movlt	r3, r2
 8005d2a:	6033      	str	r3, [r6, #0]
 8005d2c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005d30:	4607      	mov	r7, r0
 8005d32:	460c      	mov	r4, r1
 8005d34:	b10a      	cbz	r2, 8005d3a <_printf_common+0x26>
 8005d36:	3301      	adds	r3, #1
 8005d38:	6033      	str	r3, [r6, #0]
 8005d3a:	6823      	ldr	r3, [r4, #0]
 8005d3c:	0699      	lsls	r1, r3, #26
 8005d3e:	bf42      	ittt	mi
 8005d40:	6833      	ldrmi	r3, [r6, #0]
 8005d42:	3302      	addmi	r3, #2
 8005d44:	6033      	strmi	r3, [r6, #0]
 8005d46:	6825      	ldr	r5, [r4, #0]
 8005d48:	f015 0506 	ands.w	r5, r5, #6
 8005d4c:	d106      	bne.n	8005d5c <_printf_common+0x48>
 8005d4e:	f104 0a19 	add.w	sl, r4, #25
 8005d52:	68e3      	ldr	r3, [r4, #12]
 8005d54:	6832      	ldr	r2, [r6, #0]
 8005d56:	1a9b      	subs	r3, r3, r2
 8005d58:	42ab      	cmp	r3, r5
 8005d5a:	dc26      	bgt.n	8005daa <_printf_common+0x96>
 8005d5c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005d60:	6822      	ldr	r2, [r4, #0]
 8005d62:	3b00      	subs	r3, #0
 8005d64:	bf18      	it	ne
 8005d66:	2301      	movne	r3, #1
 8005d68:	0692      	lsls	r2, r2, #26
 8005d6a:	d42b      	bmi.n	8005dc4 <_printf_common+0xb0>
 8005d6c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005d70:	4641      	mov	r1, r8
 8005d72:	4638      	mov	r0, r7
 8005d74:	47c8      	blx	r9
 8005d76:	3001      	adds	r0, #1
 8005d78:	d01e      	beq.n	8005db8 <_printf_common+0xa4>
 8005d7a:	6823      	ldr	r3, [r4, #0]
 8005d7c:	6922      	ldr	r2, [r4, #16]
 8005d7e:	f003 0306 	and.w	r3, r3, #6
 8005d82:	2b04      	cmp	r3, #4
 8005d84:	bf02      	ittt	eq
 8005d86:	68e5      	ldreq	r5, [r4, #12]
 8005d88:	6833      	ldreq	r3, [r6, #0]
 8005d8a:	1aed      	subeq	r5, r5, r3
 8005d8c:	68a3      	ldr	r3, [r4, #8]
 8005d8e:	bf0c      	ite	eq
 8005d90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005d94:	2500      	movne	r5, #0
 8005d96:	4293      	cmp	r3, r2
 8005d98:	bfc4      	itt	gt
 8005d9a:	1a9b      	subgt	r3, r3, r2
 8005d9c:	18ed      	addgt	r5, r5, r3
 8005d9e:	2600      	movs	r6, #0
 8005da0:	341a      	adds	r4, #26
 8005da2:	42b5      	cmp	r5, r6
 8005da4:	d11a      	bne.n	8005ddc <_printf_common+0xc8>
 8005da6:	2000      	movs	r0, #0
 8005da8:	e008      	b.n	8005dbc <_printf_common+0xa8>
 8005daa:	2301      	movs	r3, #1
 8005dac:	4652      	mov	r2, sl
 8005dae:	4641      	mov	r1, r8
 8005db0:	4638      	mov	r0, r7
 8005db2:	47c8      	blx	r9
 8005db4:	3001      	adds	r0, #1
 8005db6:	d103      	bne.n	8005dc0 <_printf_common+0xac>
 8005db8:	f04f 30ff 	mov.w	r0, #4294967295
 8005dbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005dc0:	3501      	adds	r5, #1
 8005dc2:	e7c6      	b.n	8005d52 <_printf_common+0x3e>
 8005dc4:	18e1      	adds	r1, r4, r3
 8005dc6:	1c5a      	adds	r2, r3, #1
 8005dc8:	2030      	movs	r0, #48	@ 0x30
 8005dca:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005dce:	4422      	add	r2, r4
 8005dd0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005dd4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005dd8:	3302      	adds	r3, #2
 8005dda:	e7c7      	b.n	8005d6c <_printf_common+0x58>
 8005ddc:	2301      	movs	r3, #1
 8005dde:	4622      	mov	r2, r4
 8005de0:	4641      	mov	r1, r8
 8005de2:	4638      	mov	r0, r7
 8005de4:	47c8      	blx	r9
 8005de6:	3001      	adds	r0, #1
 8005de8:	d0e6      	beq.n	8005db8 <_printf_common+0xa4>
 8005dea:	3601      	adds	r6, #1
 8005dec:	e7d9      	b.n	8005da2 <_printf_common+0x8e>
	...

08005df0 <_printf_i>:
 8005df0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005df4:	7e0f      	ldrb	r7, [r1, #24]
 8005df6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005df8:	2f78      	cmp	r7, #120	@ 0x78
 8005dfa:	4691      	mov	r9, r2
 8005dfc:	4680      	mov	r8, r0
 8005dfe:	460c      	mov	r4, r1
 8005e00:	469a      	mov	sl, r3
 8005e02:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005e06:	d807      	bhi.n	8005e18 <_printf_i+0x28>
 8005e08:	2f62      	cmp	r7, #98	@ 0x62
 8005e0a:	d80a      	bhi.n	8005e22 <_printf_i+0x32>
 8005e0c:	2f00      	cmp	r7, #0
 8005e0e:	f000 80d2 	beq.w	8005fb6 <_printf_i+0x1c6>
 8005e12:	2f58      	cmp	r7, #88	@ 0x58
 8005e14:	f000 80b9 	beq.w	8005f8a <_printf_i+0x19a>
 8005e18:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005e1c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005e20:	e03a      	b.n	8005e98 <_printf_i+0xa8>
 8005e22:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005e26:	2b15      	cmp	r3, #21
 8005e28:	d8f6      	bhi.n	8005e18 <_printf_i+0x28>
 8005e2a:	a101      	add	r1, pc, #4	@ (adr r1, 8005e30 <_printf_i+0x40>)
 8005e2c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005e30:	08005e89 	.word	0x08005e89
 8005e34:	08005e9d 	.word	0x08005e9d
 8005e38:	08005e19 	.word	0x08005e19
 8005e3c:	08005e19 	.word	0x08005e19
 8005e40:	08005e19 	.word	0x08005e19
 8005e44:	08005e19 	.word	0x08005e19
 8005e48:	08005e9d 	.word	0x08005e9d
 8005e4c:	08005e19 	.word	0x08005e19
 8005e50:	08005e19 	.word	0x08005e19
 8005e54:	08005e19 	.word	0x08005e19
 8005e58:	08005e19 	.word	0x08005e19
 8005e5c:	08005f9d 	.word	0x08005f9d
 8005e60:	08005ec7 	.word	0x08005ec7
 8005e64:	08005f57 	.word	0x08005f57
 8005e68:	08005e19 	.word	0x08005e19
 8005e6c:	08005e19 	.word	0x08005e19
 8005e70:	08005fbf 	.word	0x08005fbf
 8005e74:	08005e19 	.word	0x08005e19
 8005e78:	08005ec7 	.word	0x08005ec7
 8005e7c:	08005e19 	.word	0x08005e19
 8005e80:	08005e19 	.word	0x08005e19
 8005e84:	08005f5f 	.word	0x08005f5f
 8005e88:	6833      	ldr	r3, [r6, #0]
 8005e8a:	1d1a      	adds	r2, r3, #4
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	6032      	str	r2, [r6, #0]
 8005e90:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005e94:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005e98:	2301      	movs	r3, #1
 8005e9a:	e09d      	b.n	8005fd8 <_printf_i+0x1e8>
 8005e9c:	6833      	ldr	r3, [r6, #0]
 8005e9e:	6820      	ldr	r0, [r4, #0]
 8005ea0:	1d19      	adds	r1, r3, #4
 8005ea2:	6031      	str	r1, [r6, #0]
 8005ea4:	0606      	lsls	r6, r0, #24
 8005ea6:	d501      	bpl.n	8005eac <_printf_i+0xbc>
 8005ea8:	681d      	ldr	r5, [r3, #0]
 8005eaa:	e003      	b.n	8005eb4 <_printf_i+0xc4>
 8005eac:	0645      	lsls	r5, r0, #25
 8005eae:	d5fb      	bpl.n	8005ea8 <_printf_i+0xb8>
 8005eb0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005eb4:	2d00      	cmp	r5, #0
 8005eb6:	da03      	bge.n	8005ec0 <_printf_i+0xd0>
 8005eb8:	232d      	movs	r3, #45	@ 0x2d
 8005eba:	426d      	negs	r5, r5
 8005ebc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005ec0:	4859      	ldr	r0, [pc, #356]	@ (8006028 <_printf_i+0x238>)
 8005ec2:	230a      	movs	r3, #10
 8005ec4:	e011      	b.n	8005eea <_printf_i+0xfa>
 8005ec6:	6821      	ldr	r1, [r4, #0]
 8005ec8:	6833      	ldr	r3, [r6, #0]
 8005eca:	0608      	lsls	r0, r1, #24
 8005ecc:	f853 5b04 	ldr.w	r5, [r3], #4
 8005ed0:	d402      	bmi.n	8005ed8 <_printf_i+0xe8>
 8005ed2:	0649      	lsls	r1, r1, #25
 8005ed4:	bf48      	it	mi
 8005ed6:	b2ad      	uxthmi	r5, r5
 8005ed8:	2f6f      	cmp	r7, #111	@ 0x6f
 8005eda:	4853      	ldr	r0, [pc, #332]	@ (8006028 <_printf_i+0x238>)
 8005edc:	6033      	str	r3, [r6, #0]
 8005ede:	bf14      	ite	ne
 8005ee0:	230a      	movne	r3, #10
 8005ee2:	2308      	moveq	r3, #8
 8005ee4:	2100      	movs	r1, #0
 8005ee6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005eea:	6866      	ldr	r6, [r4, #4]
 8005eec:	60a6      	str	r6, [r4, #8]
 8005eee:	2e00      	cmp	r6, #0
 8005ef0:	bfa2      	ittt	ge
 8005ef2:	6821      	ldrge	r1, [r4, #0]
 8005ef4:	f021 0104 	bicge.w	r1, r1, #4
 8005ef8:	6021      	strge	r1, [r4, #0]
 8005efa:	b90d      	cbnz	r5, 8005f00 <_printf_i+0x110>
 8005efc:	2e00      	cmp	r6, #0
 8005efe:	d04b      	beq.n	8005f98 <_printf_i+0x1a8>
 8005f00:	4616      	mov	r6, r2
 8005f02:	fbb5 f1f3 	udiv	r1, r5, r3
 8005f06:	fb03 5711 	mls	r7, r3, r1, r5
 8005f0a:	5dc7      	ldrb	r7, [r0, r7]
 8005f0c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005f10:	462f      	mov	r7, r5
 8005f12:	42bb      	cmp	r3, r7
 8005f14:	460d      	mov	r5, r1
 8005f16:	d9f4      	bls.n	8005f02 <_printf_i+0x112>
 8005f18:	2b08      	cmp	r3, #8
 8005f1a:	d10b      	bne.n	8005f34 <_printf_i+0x144>
 8005f1c:	6823      	ldr	r3, [r4, #0]
 8005f1e:	07df      	lsls	r7, r3, #31
 8005f20:	d508      	bpl.n	8005f34 <_printf_i+0x144>
 8005f22:	6923      	ldr	r3, [r4, #16]
 8005f24:	6861      	ldr	r1, [r4, #4]
 8005f26:	4299      	cmp	r1, r3
 8005f28:	bfde      	ittt	le
 8005f2a:	2330      	movle	r3, #48	@ 0x30
 8005f2c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005f30:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005f34:	1b92      	subs	r2, r2, r6
 8005f36:	6122      	str	r2, [r4, #16]
 8005f38:	f8cd a000 	str.w	sl, [sp]
 8005f3c:	464b      	mov	r3, r9
 8005f3e:	aa03      	add	r2, sp, #12
 8005f40:	4621      	mov	r1, r4
 8005f42:	4640      	mov	r0, r8
 8005f44:	f7ff fee6 	bl	8005d14 <_printf_common>
 8005f48:	3001      	adds	r0, #1
 8005f4a:	d14a      	bne.n	8005fe2 <_printf_i+0x1f2>
 8005f4c:	f04f 30ff 	mov.w	r0, #4294967295
 8005f50:	b004      	add	sp, #16
 8005f52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f56:	6823      	ldr	r3, [r4, #0]
 8005f58:	f043 0320 	orr.w	r3, r3, #32
 8005f5c:	6023      	str	r3, [r4, #0]
 8005f5e:	4833      	ldr	r0, [pc, #204]	@ (800602c <_printf_i+0x23c>)
 8005f60:	2778      	movs	r7, #120	@ 0x78
 8005f62:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005f66:	6823      	ldr	r3, [r4, #0]
 8005f68:	6831      	ldr	r1, [r6, #0]
 8005f6a:	061f      	lsls	r7, r3, #24
 8005f6c:	f851 5b04 	ldr.w	r5, [r1], #4
 8005f70:	d402      	bmi.n	8005f78 <_printf_i+0x188>
 8005f72:	065f      	lsls	r7, r3, #25
 8005f74:	bf48      	it	mi
 8005f76:	b2ad      	uxthmi	r5, r5
 8005f78:	6031      	str	r1, [r6, #0]
 8005f7a:	07d9      	lsls	r1, r3, #31
 8005f7c:	bf44      	itt	mi
 8005f7e:	f043 0320 	orrmi.w	r3, r3, #32
 8005f82:	6023      	strmi	r3, [r4, #0]
 8005f84:	b11d      	cbz	r5, 8005f8e <_printf_i+0x19e>
 8005f86:	2310      	movs	r3, #16
 8005f88:	e7ac      	b.n	8005ee4 <_printf_i+0xf4>
 8005f8a:	4827      	ldr	r0, [pc, #156]	@ (8006028 <_printf_i+0x238>)
 8005f8c:	e7e9      	b.n	8005f62 <_printf_i+0x172>
 8005f8e:	6823      	ldr	r3, [r4, #0]
 8005f90:	f023 0320 	bic.w	r3, r3, #32
 8005f94:	6023      	str	r3, [r4, #0]
 8005f96:	e7f6      	b.n	8005f86 <_printf_i+0x196>
 8005f98:	4616      	mov	r6, r2
 8005f9a:	e7bd      	b.n	8005f18 <_printf_i+0x128>
 8005f9c:	6833      	ldr	r3, [r6, #0]
 8005f9e:	6825      	ldr	r5, [r4, #0]
 8005fa0:	6961      	ldr	r1, [r4, #20]
 8005fa2:	1d18      	adds	r0, r3, #4
 8005fa4:	6030      	str	r0, [r6, #0]
 8005fa6:	062e      	lsls	r6, r5, #24
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	d501      	bpl.n	8005fb0 <_printf_i+0x1c0>
 8005fac:	6019      	str	r1, [r3, #0]
 8005fae:	e002      	b.n	8005fb6 <_printf_i+0x1c6>
 8005fb0:	0668      	lsls	r0, r5, #25
 8005fb2:	d5fb      	bpl.n	8005fac <_printf_i+0x1bc>
 8005fb4:	8019      	strh	r1, [r3, #0]
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	6123      	str	r3, [r4, #16]
 8005fba:	4616      	mov	r6, r2
 8005fbc:	e7bc      	b.n	8005f38 <_printf_i+0x148>
 8005fbe:	6833      	ldr	r3, [r6, #0]
 8005fc0:	1d1a      	adds	r2, r3, #4
 8005fc2:	6032      	str	r2, [r6, #0]
 8005fc4:	681e      	ldr	r6, [r3, #0]
 8005fc6:	6862      	ldr	r2, [r4, #4]
 8005fc8:	2100      	movs	r1, #0
 8005fca:	4630      	mov	r0, r6
 8005fcc:	f7fa f900 	bl	80001d0 <memchr>
 8005fd0:	b108      	cbz	r0, 8005fd6 <_printf_i+0x1e6>
 8005fd2:	1b80      	subs	r0, r0, r6
 8005fd4:	6060      	str	r0, [r4, #4]
 8005fd6:	6863      	ldr	r3, [r4, #4]
 8005fd8:	6123      	str	r3, [r4, #16]
 8005fda:	2300      	movs	r3, #0
 8005fdc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005fe0:	e7aa      	b.n	8005f38 <_printf_i+0x148>
 8005fe2:	6923      	ldr	r3, [r4, #16]
 8005fe4:	4632      	mov	r2, r6
 8005fe6:	4649      	mov	r1, r9
 8005fe8:	4640      	mov	r0, r8
 8005fea:	47d0      	blx	sl
 8005fec:	3001      	adds	r0, #1
 8005fee:	d0ad      	beq.n	8005f4c <_printf_i+0x15c>
 8005ff0:	6823      	ldr	r3, [r4, #0]
 8005ff2:	079b      	lsls	r3, r3, #30
 8005ff4:	d413      	bmi.n	800601e <_printf_i+0x22e>
 8005ff6:	68e0      	ldr	r0, [r4, #12]
 8005ff8:	9b03      	ldr	r3, [sp, #12]
 8005ffa:	4298      	cmp	r0, r3
 8005ffc:	bfb8      	it	lt
 8005ffe:	4618      	movlt	r0, r3
 8006000:	e7a6      	b.n	8005f50 <_printf_i+0x160>
 8006002:	2301      	movs	r3, #1
 8006004:	4632      	mov	r2, r6
 8006006:	4649      	mov	r1, r9
 8006008:	4640      	mov	r0, r8
 800600a:	47d0      	blx	sl
 800600c:	3001      	adds	r0, #1
 800600e:	d09d      	beq.n	8005f4c <_printf_i+0x15c>
 8006010:	3501      	adds	r5, #1
 8006012:	68e3      	ldr	r3, [r4, #12]
 8006014:	9903      	ldr	r1, [sp, #12]
 8006016:	1a5b      	subs	r3, r3, r1
 8006018:	42ab      	cmp	r3, r5
 800601a:	dcf2      	bgt.n	8006002 <_printf_i+0x212>
 800601c:	e7eb      	b.n	8005ff6 <_printf_i+0x206>
 800601e:	2500      	movs	r5, #0
 8006020:	f104 0619 	add.w	r6, r4, #25
 8006024:	e7f5      	b.n	8006012 <_printf_i+0x222>
 8006026:	bf00      	nop
 8006028:	08009eda 	.word	0x08009eda
 800602c:	08009eeb 	.word	0x08009eeb

08006030 <_scanf_float>:
 8006030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006034:	b087      	sub	sp, #28
 8006036:	4617      	mov	r7, r2
 8006038:	9303      	str	r3, [sp, #12]
 800603a:	688b      	ldr	r3, [r1, #8]
 800603c:	1e5a      	subs	r2, r3, #1
 800603e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8006042:	bf81      	itttt	hi
 8006044:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8006048:	eb03 0b05 	addhi.w	fp, r3, r5
 800604c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8006050:	608b      	strhi	r3, [r1, #8]
 8006052:	680b      	ldr	r3, [r1, #0]
 8006054:	460a      	mov	r2, r1
 8006056:	f04f 0500 	mov.w	r5, #0
 800605a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800605e:	f842 3b1c 	str.w	r3, [r2], #28
 8006062:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006066:	4680      	mov	r8, r0
 8006068:	460c      	mov	r4, r1
 800606a:	bf98      	it	ls
 800606c:	f04f 0b00 	movls.w	fp, #0
 8006070:	9201      	str	r2, [sp, #4]
 8006072:	4616      	mov	r6, r2
 8006074:	46aa      	mov	sl, r5
 8006076:	46a9      	mov	r9, r5
 8006078:	9502      	str	r5, [sp, #8]
 800607a:	68a2      	ldr	r2, [r4, #8]
 800607c:	b152      	cbz	r2, 8006094 <_scanf_float+0x64>
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	781b      	ldrb	r3, [r3, #0]
 8006082:	2b4e      	cmp	r3, #78	@ 0x4e
 8006084:	d864      	bhi.n	8006150 <_scanf_float+0x120>
 8006086:	2b40      	cmp	r3, #64	@ 0x40
 8006088:	d83c      	bhi.n	8006104 <_scanf_float+0xd4>
 800608a:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800608e:	b2c8      	uxtb	r0, r1
 8006090:	280e      	cmp	r0, #14
 8006092:	d93a      	bls.n	800610a <_scanf_float+0xda>
 8006094:	f1b9 0f00 	cmp.w	r9, #0
 8006098:	d003      	beq.n	80060a2 <_scanf_float+0x72>
 800609a:	6823      	ldr	r3, [r4, #0]
 800609c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80060a0:	6023      	str	r3, [r4, #0]
 80060a2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80060a6:	f1ba 0f01 	cmp.w	sl, #1
 80060aa:	f200 8117 	bhi.w	80062dc <_scanf_float+0x2ac>
 80060ae:	9b01      	ldr	r3, [sp, #4]
 80060b0:	429e      	cmp	r6, r3
 80060b2:	f200 8108 	bhi.w	80062c6 <_scanf_float+0x296>
 80060b6:	2001      	movs	r0, #1
 80060b8:	b007      	add	sp, #28
 80060ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060be:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80060c2:	2a0d      	cmp	r2, #13
 80060c4:	d8e6      	bhi.n	8006094 <_scanf_float+0x64>
 80060c6:	a101      	add	r1, pc, #4	@ (adr r1, 80060cc <_scanf_float+0x9c>)
 80060c8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80060cc:	08006213 	.word	0x08006213
 80060d0:	08006095 	.word	0x08006095
 80060d4:	08006095 	.word	0x08006095
 80060d8:	08006095 	.word	0x08006095
 80060dc:	08006273 	.word	0x08006273
 80060e0:	0800624b 	.word	0x0800624b
 80060e4:	08006095 	.word	0x08006095
 80060e8:	08006095 	.word	0x08006095
 80060ec:	08006221 	.word	0x08006221
 80060f0:	08006095 	.word	0x08006095
 80060f4:	08006095 	.word	0x08006095
 80060f8:	08006095 	.word	0x08006095
 80060fc:	08006095 	.word	0x08006095
 8006100:	080061d9 	.word	0x080061d9
 8006104:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8006108:	e7db      	b.n	80060c2 <_scanf_float+0x92>
 800610a:	290e      	cmp	r1, #14
 800610c:	d8c2      	bhi.n	8006094 <_scanf_float+0x64>
 800610e:	a001      	add	r0, pc, #4	@ (adr r0, 8006114 <_scanf_float+0xe4>)
 8006110:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006114:	080061c9 	.word	0x080061c9
 8006118:	08006095 	.word	0x08006095
 800611c:	080061c9 	.word	0x080061c9
 8006120:	0800625f 	.word	0x0800625f
 8006124:	08006095 	.word	0x08006095
 8006128:	08006171 	.word	0x08006171
 800612c:	080061af 	.word	0x080061af
 8006130:	080061af 	.word	0x080061af
 8006134:	080061af 	.word	0x080061af
 8006138:	080061af 	.word	0x080061af
 800613c:	080061af 	.word	0x080061af
 8006140:	080061af 	.word	0x080061af
 8006144:	080061af 	.word	0x080061af
 8006148:	080061af 	.word	0x080061af
 800614c:	080061af 	.word	0x080061af
 8006150:	2b6e      	cmp	r3, #110	@ 0x6e
 8006152:	d809      	bhi.n	8006168 <_scanf_float+0x138>
 8006154:	2b60      	cmp	r3, #96	@ 0x60
 8006156:	d8b2      	bhi.n	80060be <_scanf_float+0x8e>
 8006158:	2b54      	cmp	r3, #84	@ 0x54
 800615a:	d07b      	beq.n	8006254 <_scanf_float+0x224>
 800615c:	2b59      	cmp	r3, #89	@ 0x59
 800615e:	d199      	bne.n	8006094 <_scanf_float+0x64>
 8006160:	2d07      	cmp	r5, #7
 8006162:	d197      	bne.n	8006094 <_scanf_float+0x64>
 8006164:	2508      	movs	r5, #8
 8006166:	e02c      	b.n	80061c2 <_scanf_float+0x192>
 8006168:	2b74      	cmp	r3, #116	@ 0x74
 800616a:	d073      	beq.n	8006254 <_scanf_float+0x224>
 800616c:	2b79      	cmp	r3, #121	@ 0x79
 800616e:	e7f6      	b.n	800615e <_scanf_float+0x12e>
 8006170:	6821      	ldr	r1, [r4, #0]
 8006172:	05c8      	lsls	r0, r1, #23
 8006174:	d51b      	bpl.n	80061ae <_scanf_float+0x17e>
 8006176:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800617a:	6021      	str	r1, [r4, #0]
 800617c:	f109 0901 	add.w	r9, r9, #1
 8006180:	f1bb 0f00 	cmp.w	fp, #0
 8006184:	d003      	beq.n	800618e <_scanf_float+0x15e>
 8006186:	3201      	adds	r2, #1
 8006188:	f10b 3bff 	add.w	fp, fp, #4294967295
 800618c:	60a2      	str	r2, [r4, #8]
 800618e:	68a3      	ldr	r3, [r4, #8]
 8006190:	3b01      	subs	r3, #1
 8006192:	60a3      	str	r3, [r4, #8]
 8006194:	6923      	ldr	r3, [r4, #16]
 8006196:	3301      	adds	r3, #1
 8006198:	6123      	str	r3, [r4, #16]
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	3b01      	subs	r3, #1
 800619e:	2b00      	cmp	r3, #0
 80061a0:	607b      	str	r3, [r7, #4]
 80061a2:	f340 8087 	ble.w	80062b4 <_scanf_float+0x284>
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	3301      	adds	r3, #1
 80061aa:	603b      	str	r3, [r7, #0]
 80061ac:	e765      	b.n	800607a <_scanf_float+0x4a>
 80061ae:	eb1a 0105 	adds.w	r1, sl, r5
 80061b2:	f47f af6f 	bne.w	8006094 <_scanf_float+0x64>
 80061b6:	6822      	ldr	r2, [r4, #0]
 80061b8:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80061bc:	6022      	str	r2, [r4, #0]
 80061be:	460d      	mov	r5, r1
 80061c0:	468a      	mov	sl, r1
 80061c2:	f806 3b01 	strb.w	r3, [r6], #1
 80061c6:	e7e2      	b.n	800618e <_scanf_float+0x15e>
 80061c8:	6822      	ldr	r2, [r4, #0]
 80061ca:	0610      	lsls	r0, r2, #24
 80061cc:	f57f af62 	bpl.w	8006094 <_scanf_float+0x64>
 80061d0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80061d4:	6022      	str	r2, [r4, #0]
 80061d6:	e7f4      	b.n	80061c2 <_scanf_float+0x192>
 80061d8:	f1ba 0f00 	cmp.w	sl, #0
 80061dc:	d10e      	bne.n	80061fc <_scanf_float+0x1cc>
 80061de:	f1b9 0f00 	cmp.w	r9, #0
 80061e2:	d10e      	bne.n	8006202 <_scanf_float+0x1d2>
 80061e4:	6822      	ldr	r2, [r4, #0]
 80061e6:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80061ea:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80061ee:	d108      	bne.n	8006202 <_scanf_float+0x1d2>
 80061f0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80061f4:	6022      	str	r2, [r4, #0]
 80061f6:	f04f 0a01 	mov.w	sl, #1
 80061fa:	e7e2      	b.n	80061c2 <_scanf_float+0x192>
 80061fc:	f1ba 0f02 	cmp.w	sl, #2
 8006200:	d055      	beq.n	80062ae <_scanf_float+0x27e>
 8006202:	2d01      	cmp	r5, #1
 8006204:	d002      	beq.n	800620c <_scanf_float+0x1dc>
 8006206:	2d04      	cmp	r5, #4
 8006208:	f47f af44 	bne.w	8006094 <_scanf_float+0x64>
 800620c:	3501      	adds	r5, #1
 800620e:	b2ed      	uxtb	r5, r5
 8006210:	e7d7      	b.n	80061c2 <_scanf_float+0x192>
 8006212:	f1ba 0f01 	cmp.w	sl, #1
 8006216:	f47f af3d 	bne.w	8006094 <_scanf_float+0x64>
 800621a:	f04f 0a02 	mov.w	sl, #2
 800621e:	e7d0      	b.n	80061c2 <_scanf_float+0x192>
 8006220:	b97d      	cbnz	r5, 8006242 <_scanf_float+0x212>
 8006222:	f1b9 0f00 	cmp.w	r9, #0
 8006226:	f47f af38 	bne.w	800609a <_scanf_float+0x6a>
 800622a:	6822      	ldr	r2, [r4, #0]
 800622c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8006230:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006234:	f040 8108 	bne.w	8006448 <_scanf_float+0x418>
 8006238:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800623c:	6022      	str	r2, [r4, #0]
 800623e:	2501      	movs	r5, #1
 8006240:	e7bf      	b.n	80061c2 <_scanf_float+0x192>
 8006242:	2d03      	cmp	r5, #3
 8006244:	d0e2      	beq.n	800620c <_scanf_float+0x1dc>
 8006246:	2d05      	cmp	r5, #5
 8006248:	e7de      	b.n	8006208 <_scanf_float+0x1d8>
 800624a:	2d02      	cmp	r5, #2
 800624c:	f47f af22 	bne.w	8006094 <_scanf_float+0x64>
 8006250:	2503      	movs	r5, #3
 8006252:	e7b6      	b.n	80061c2 <_scanf_float+0x192>
 8006254:	2d06      	cmp	r5, #6
 8006256:	f47f af1d 	bne.w	8006094 <_scanf_float+0x64>
 800625a:	2507      	movs	r5, #7
 800625c:	e7b1      	b.n	80061c2 <_scanf_float+0x192>
 800625e:	6822      	ldr	r2, [r4, #0]
 8006260:	0591      	lsls	r1, r2, #22
 8006262:	f57f af17 	bpl.w	8006094 <_scanf_float+0x64>
 8006266:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800626a:	6022      	str	r2, [r4, #0]
 800626c:	f8cd 9008 	str.w	r9, [sp, #8]
 8006270:	e7a7      	b.n	80061c2 <_scanf_float+0x192>
 8006272:	6822      	ldr	r2, [r4, #0]
 8006274:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8006278:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800627c:	d006      	beq.n	800628c <_scanf_float+0x25c>
 800627e:	0550      	lsls	r0, r2, #21
 8006280:	f57f af08 	bpl.w	8006094 <_scanf_float+0x64>
 8006284:	f1b9 0f00 	cmp.w	r9, #0
 8006288:	f000 80de 	beq.w	8006448 <_scanf_float+0x418>
 800628c:	0591      	lsls	r1, r2, #22
 800628e:	bf58      	it	pl
 8006290:	9902      	ldrpl	r1, [sp, #8]
 8006292:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006296:	bf58      	it	pl
 8006298:	eba9 0101 	subpl.w	r1, r9, r1
 800629c:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80062a0:	bf58      	it	pl
 80062a2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80062a6:	6022      	str	r2, [r4, #0]
 80062a8:	f04f 0900 	mov.w	r9, #0
 80062ac:	e789      	b.n	80061c2 <_scanf_float+0x192>
 80062ae:	f04f 0a03 	mov.w	sl, #3
 80062b2:	e786      	b.n	80061c2 <_scanf_float+0x192>
 80062b4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80062b8:	4639      	mov	r1, r7
 80062ba:	4640      	mov	r0, r8
 80062bc:	4798      	blx	r3
 80062be:	2800      	cmp	r0, #0
 80062c0:	f43f aedb 	beq.w	800607a <_scanf_float+0x4a>
 80062c4:	e6e6      	b.n	8006094 <_scanf_float+0x64>
 80062c6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80062ca:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80062ce:	463a      	mov	r2, r7
 80062d0:	4640      	mov	r0, r8
 80062d2:	4798      	blx	r3
 80062d4:	6923      	ldr	r3, [r4, #16]
 80062d6:	3b01      	subs	r3, #1
 80062d8:	6123      	str	r3, [r4, #16]
 80062da:	e6e8      	b.n	80060ae <_scanf_float+0x7e>
 80062dc:	1e6b      	subs	r3, r5, #1
 80062de:	2b06      	cmp	r3, #6
 80062e0:	d824      	bhi.n	800632c <_scanf_float+0x2fc>
 80062e2:	2d02      	cmp	r5, #2
 80062e4:	d836      	bhi.n	8006354 <_scanf_float+0x324>
 80062e6:	9b01      	ldr	r3, [sp, #4]
 80062e8:	429e      	cmp	r6, r3
 80062ea:	f67f aee4 	bls.w	80060b6 <_scanf_float+0x86>
 80062ee:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80062f2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80062f6:	463a      	mov	r2, r7
 80062f8:	4640      	mov	r0, r8
 80062fa:	4798      	blx	r3
 80062fc:	6923      	ldr	r3, [r4, #16]
 80062fe:	3b01      	subs	r3, #1
 8006300:	6123      	str	r3, [r4, #16]
 8006302:	e7f0      	b.n	80062e6 <_scanf_float+0x2b6>
 8006304:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006308:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800630c:	463a      	mov	r2, r7
 800630e:	4640      	mov	r0, r8
 8006310:	4798      	blx	r3
 8006312:	6923      	ldr	r3, [r4, #16]
 8006314:	3b01      	subs	r3, #1
 8006316:	6123      	str	r3, [r4, #16]
 8006318:	f10a 3aff 	add.w	sl, sl, #4294967295
 800631c:	fa5f fa8a 	uxtb.w	sl, sl
 8006320:	f1ba 0f02 	cmp.w	sl, #2
 8006324:	d1ee      	bne.n	8006304 <_scanf_float+0x2d4>
 8006326:	3d03      	subs	r5, #3
 8006328:	b2ed      	uxtb	r5, r5
 800632a:	1b76      	subs	r6, r6, r5
 800632c:	6823      	ldr	r3, [r4, #0]
 800632e:	05da      	lsls	r2, r3, #23
 8006330:	d530      	bpl.n	8006394 <_scanf_float+0x364>
 8006332:	055b      	lsls	r3, r3, #21
 8006334:	d511      	bpl.n	800635a <_scanf_float+0x32a>
 8006336:	9b01      	ldr	r3, [sp, #4]
 8006338:	429e      	cmp	r6, r3
 800633a:	f67f aebc 	bls.w	80060b6 <_scanf_float+0x86>
 800633e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006342:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006346:	463a      	mov	r2, r7
 8006348:	4640      	mov	r0, r8
 800634a:	4798      	blx	r3
 800634c:	6923      	ldr	r3, [r4, #16]
 800634e:	3b01      	subs	r3, #1
 8006350:	6123      	str	r3, [r4, #16]
 8006352:	e7f0      	b.n	8006336 <_scanf_float+0x306>
 8006354:	46aa      	mov	sl, r5
 8006356:	46b3      	mov	fp, r6
 8006358:	e7de      	b.n	8006318 <_scanf_float+0x2e8>
 800635a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800635e:	6923      	ldr	r3, [r4, #16]
 8006360:	2965      	cmp	r1, #101	@ 0x65
 8006362:	f103 33ff 	add.w	r3, r3, #4294967295
 8006366:	f106 35ff 	add.w	r5, r6, #4294967295
 800636a:	6123      	str	r3, [r4, #16]
 800636c:	d00c      	beq.n	8006388 <_scanf_float+0x358>
 800636e:	2945      	cmp	r1, #69	@ 0x45
 8006370:	d00a      	beq.n	8006388 <_scanf_float+0x358>
 8006372:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006376:	463a      	mov	r2, r7
 8006378:	4640      	mov	r0, r8
 800637a:	4798      	blx	r3
 800637c:	6923      	ldr	r3, [r4, #16]
 800637e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006382:	3b01      	subs	r3, #1
 8006384:	1eb5      	subs	r5, r6, #2
 8006386:	6123      	str	r3, [r4, #16]
 8006388:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800638c:	463a      	mov	r2, r7
 800638e:	4640      	mov	r0, r8
 8006390:	4798      	blx	r3
 8006392:	462e      	mov	r6, r5
 8006394:	6822      	ldr	r2, [r4, #0]
 8006396:	f012 0210 	ands.w	r2, r2, #16
 800639a:	d001      	beq.n	80063a0 <_scanf_float+0x370>
 800639c:	2000      	movs	r0, #0
 800639e:	e68b      	b.n	80060b8 <_scanf_float+0x88>
 80063a0:	7032      	strb	r2, [r6, #0]
 80063a2:	6823      	ldr	r3, [r4, #0]
 80063a4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80063a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80063ac:	d11c      	bne.n	80063e8 <_scanf_float+0x3b8>
 80063ae:	9b02      	ldr	r3, [sp, #8]
 80063b0:	454b      	cmp	r3, r9
 80063b2:	eba3 0209 	sub.w	r2, r3, r9
 80063b6:	d123      	bne.n	8006400 <_scanf_float+0x3d0>
 80063b8:	9901      	ldr	r1, [sp, #4]
 80063ba:	2200      	movs	r2, #0
 80063bc:	4640      	mov	r0, r8
 80063be:	f002 fbf7 	bl	8008bb0 <_strtod_r>
 80063c2:	9b03      	ldr	r3, [sp, #12]
 80063c4:	6821      	ldr	r1, [r4, #0]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f011 0f02 	tst.w	r1, #2
 80063cc:	ec57 6b10 	vmov	r6, r7, d0
 80063d0:	f103 0204 	add.w	r2, r3, #4
 80063d4:	d01f      	beq.n	8006416 <_scanf_float+0x3e6>
 80063d6:	9903      	ldr	r1, [sp, #12]
 80063d8:	600a      	str	r2, [r1, #0]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	e9c3 6700 	strd	r6, r7, [r3]
 80063e0:	68e3      	ldr	r3, [r4, #12]
 80063e2:	3301      	adds	r3, #1
 80063e4:	60e3      	str	r3, [r4, #12]
 80063e6:	e7d9      	b.n	800639c <_scanf_float+0x36c>
 80063e8:	9b04      	ldr	r3, [sp, #16]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d0e4      	beq.n	80063b8 <_scanf_float+0x388>
 80063ee:	9905      	ldr	r1, [sp, #20]
 80063f0:	230a      	movs	r3, #10
 80063f2:	3101      	adds	r1, #1
 80063f4:	4640      	mov	r0, r8
 80063f6:	f002 fc5b 	bl	8008cb0 <_strtol_r>
 80063fa:	9b04      	ldr	r3, [sp, #16]
 80063fc:	9e05      	ldr	r6, [sp, #20]
 80063fe:	1ac2      	subs	r2, r0, r3
 8006400:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8006404:	429e      	cmp	r6, r3
 8006406:	bf28      	it	cs
 8006408:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800640c:	4910      	ldr	r1, [pc, #64]	@ (8006450 <_scanf_float+0x420>)
 800640e:	4630      	mov	r0, r6
 8006410:	f000 f8e4 	bl	80065dc <siprintf>
 8006414:	e7d0      	b.n	80063b8 <_scanf_float+0x388>
 8006416:	f011 0f04 	tst.w	r1, #4
 800641a:	9903      	ldr	r1, [sp, #12]
 800641c:	600a      	str	r2, [r1, #0]
 800641e:	d1dc      	bne.n	80063da <_scanf_float+0x3aa>
 8006420:	681d      	ldr	r5, [r3, #0]
 8006422:	4632      	mov	r2, r6
 8006424:	463b      	mov	r3, r7
 8006426:	4630      	mov	r0, r6
 8006428:	4639      	mov	r1, r7
 800642a:	f7fa fb7f 	bl	8000b2c <__aeabi_dcmpun>
 800642e:	b128      	cbz	r0, 800643c <_scanf_float+0x40c>
 8006430:	4808      	ldr	r0, [pc, #32]	@ (8006454 <_scanf_float+0x424>)
 8006432:	f000 f9b7 	bl	80067a4 <nanf>
 8006436:	ed85 0a00 	vstr	s0, [r5]
 800643a:	e7d1      	b.n	80063e0 <_scanf_float+0x3b0>
 800643c:	4630      	mov	r0, r6
 800643e:	4639      	mov	r1, r7
 8006440:	f7fa fbd2 	bl	8000be8 <__aeabi_d2f>
 8006444:	6028      	str	r0, [r5, #0]
 8006446:	e7cb      	b.n	80063e0 <_scanf_float+0x3b0>
 8006448:	f04f 0900 	mov.w	r9, #0
 800644c:	e629      	b.n	80060a2 <_scanf_float+0x72>
 800644e:	bf00      	nop
 8006450:	08009efc 	.word	0x08009efc
 8006454:	0800a295 	.word	0x0800a295

08006458 <std>:
 8006458:	2300      	movs	r3, #0
 800645a:	b510      	push	{r4, lr}
 800645c:	4604      	mov	r4, r0
 800645e:	e9c0 3300 	strd	r3, r3, [r0]
 8006462:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006466:	6083      	str	r3, [r0, #8]
 8006468:	8181      	strh	r1, [r0, #12]
 800646a:	6643      	str	r3, [r0, #100]	@ 0x64
 800646c:	81c2      	strh	r2, [r0, #14]
 800646e:	6183      	str	r3, [r0, #24]
 8006470:	4619      	mov	r1, r3
 8006472:	2208      	movs	r2, #8
 8006474:	305c      	adds	r0, #92	@ 0x5c
 8006476:	f000 f914 	bl	80066a2 <memset>
 800647a:	4b0d      	ldr	r3, [pc, #52]	@ (80064b0 <std+0x58>)
 800647c:	6263      	str	r3, [r4, #36]	@ 0x24
 800647e:	4b0d      	ldr	r3, [pc, #52]	@ (80064b4 <std+0x5c>)
 8006480:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006482:	4b0d      	ldr	r3, [pc, #52]	@ (80064b8 <std+0x60>)
 8006484:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006486:	4b0d      	ldr	r3, [pc, #52]	@ (80064bc <std+0x64>)
 8006488:	6323      	str	r3, [r4, #48]	@ 0x30
 800648a:	4b0d      	ldr	r3, [pc, #52]	@ (80064c0 <std+0x68>)
 800648c:	6224      	str	r4, [r4, #32]
 800648e:	429c      	cmp	r4, r3
 8006490:	d006      	beq.n	80064a0 <std+0x48>
 8006492:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006496:	4294      	cmp	r4, r2
 8006498:	d002      	beq.n	80064a0 <std+0x48>
 800649a:	33d0      	adds	r3, #208	@ 0xd0
 800649c:	429c      	cmp	r4, r3
 800649e:	d105      	bne.n	80064ac <std+0x54>
 80064a0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80064a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80064a8:	f000 b978 	b.w	800679c <__retarget_lock_init_recursive>
 80064ac:	bd10      	pop	{r4, pc}
 80064ae:	bf00      	nop
 80064b0:	0800661d 	.word	0x0800661d
 80064b4:	0800663f 	.word	0x0800663f
 80064b8:	08006677 	.word	0x08006677
 80064bc:	0800669b 	.word	0x0800669b
 80064c0:	20000370 	.word	0x20000370

080064c4 <stdio_exit_handler>:
 80064c4:	4a02      	ldr	r2, [pc, #8]	@ (80064d0 <stdio_exit_handler+0xc>)
 80064c6:	4903      	ldr	r1, [pc, #12]	@ (80064d4 <stdio_exit_handler+0x10>)
 80064c8:	4803      	ldr	r0, [pc, #12]	@ (80064d8 <stdio_exit_handler+0x14>)
 80064ca:	f000 b869 	b.w	80065a0 <_fwalk_sglue>
 80064ce:	bf00      	nop
 80064d0:	2000000c 	.word	0x2000000c
 80064d4:	0800906d 	.word	0x0800906d
 80064d8:	2000001c 	.word	0x2000001c

080064dc <cleanup_stdio>:
 80064dc:	6841      	ldr	r1, [r0, #4]
 80064de:	4b0c      	ldr	r3, [pc, #48]	@ (8006510 <cleanup_stdio+0x34>)
 80064e0:	4299      	cmp	r1, r3
 80064e2:	b510      	push	{r4, lr}
 80064e4:	4604      	mov	r4, r0
 80064e6:	d001      	beq.n	80064ec <cleanup_stdio+0x10>
 80064e8:	f002 fdc0 	bl	800906c <_fflush_r>
 80064ec:	68a1      	ldr	r1, [r4, #8]
 80064ee:	4b09      	ldr	r3, [pc, #36]	@ (8006514 <cleanup_stdio+0x38>)
 80064f0:	4299      	cmp	r1, r3
 80064f2:	d002      	beq.n	80064fa <cleanup_stdio+0x1e>
 80064f4:	4620      	mov	r0, r4
 80064f6:	f002 fdb9 	bl	800906c <_fflush_r>
 80064fa:	68e1      	ldr	r1, [r4, #12]
 80064fc:	4b06      	ldr	r3, [pc, #24]	@ (8006518 <cleanup_stdio+0x3c>)
 80064fe:	4299      	cmp	r1, r3
 8006500:	d004      	beq.n	800650c <cleanup_stdio+0x30>
 8006502:	4620      	mov	r0, r4
 8006504:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006508:	f002 bdb0 	b.w	800906c <_fflush_r>
 800650c:	bd10      	pop	{r4, pc}
 800650e:	bf00      	nop
 8006510:	20000370 	.word	0x20000370
 8006514:	200003d8 	.word	0x200003d8
 8006518:	20000440 	.word	0x20000440

0800651c <global_stdio_init.part.0>:
 800651c:	b510      	push	{r4, lr}
 800651e:	4b0b      	ldr	r3, [pc, #44]	@ (800654c <global_stdio_init.part.0+0x30>)
 8006520:	4c0b      	ldr	r4, [pc, #44]	@ (8006550 <global_stdio_init.part.0+0x34>)
 8006522:	4a0c      	ldr	r2, [pc, #48]	@ (8006554 <global_stdio_init.part.0+0x38>)
 8006524:	601a      	str	r2, [r3, #0]
 8006526:	4620      	mov	r0, r4
 8006528:	2200      	movs	r2, #0
 800652a:	2104      	movs	r1, #4
 800652c:	f7ff ff94 	bl	8006458 <std>
 8006530:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006534:	2201      	movs	r2, #1
 8006536:	2109      	movs	r1, #9
 8006538:	f7ff ff8e 	bl	8006458 <std>
 800653c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006540:	2202      	movs	r2, #2
 8006542:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006546:	2112      	movs	r1, #18
 8006548:	f7ff bf86 	b.w	8006458 <std>
 800654c:	200004a8 	.word	0x200004a8
 8006550:	20000370 	.word	0x20000370
 8006554:	080064c5 	.word	0x080064c5

08006558 <__sfp_lock_acquire>:
 8006558:	4801      	ldr	r0, [pc, #4]	@ (8006560 <__sfp_lock_acquire+0x8>)
 800655a:	f000 b920 	b.w	800679e <__retarget_lock_acquire_recursive>
 800655e:	bf00      	nop
 8006560:	200004b1 	.word	0x200004b1

08006564 <__sfp_lock_release>:
 8006564:	4801      	ldr	r0, [pc, #4]	@ (800656c <__sfp_lock_release+0x8>)
 8006566:	f000 b91b 	b.w	80067a0 <__retarget_lock_release_recursive>
 800656a:	bf00      	nop
 800656c:	200004b1 	.word	0x200004b1

08006570 <__sinit>:
 8006570:	b510      	push	{r4, lr}
 8006572:	4604      	mov	r4, r0
 8006574:	f7ff fff0 	bl	8006558 <__sfp_lock_acquire>
 8006578:	6a23      	ldr	r3, [r4, #32]
 800657a:	b11b      	cbz	r3, 8006584 <__sinit+0x14>
 800657c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006580:	f7ff bff0 	b.w	8006564 <__sfp_lock_release>
 8006584:	4b04      	ldr	r3, [pc, #16]	@ (8006598 <__sinit+0x28>)
 8006586:	6223      	str	r3, [r4, #32]
 8006588:	4b04      	ldr	r3, [pc, #16]	@ (800659c <__sinit+0x2c>)
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d1f5      	bne.n	800657c <__sinit+0xc>
 8006590:	f7ff ffc4 	bl	800651c <global_stdio_init.part.0>
 8006594:	e7f2      	b.n	800657c <__sinit+0xc>
 8006596:	bf00      	nop
 8006598:	080064dd 	.word	0x080064dd
 800659c:	200004a8 	.word	0x200004a8

080065a0 <_fwalk_sglue>:
 80065a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80065a4:	4607      	mov	r7, r0
 80065a6:	4688      	mov	r8, r1
 80065a8:	4614      	mov	r4, r2
 80065aa:	2600      	movs	r6, #0
 80065ac:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80065b0:	f1b9 0901 	subs.w	r9, r9, #1
 80065b4:	d505      	bpl.n	80065c2 <_fwalk_sglue+0x22>
 80065b6:	6824      	ldr	r4, [r4, #0]
 80065b8:	2c00      	cmp	r4, #0
 80065ba:	d1f7      	bne.n	80065ac <_fwalk_sglue+0xc>
 80065bc:	4630      	mov	r0, r6
 80065be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80065c2:	89ab      	ldrh	r3, [r5, #12]
 80065c4:	2b01      	cmp	r3, #1
 80065c6:	d907      	bls.n	80065d8 <_fwalk_sglue+0x38>
 80065c8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80065cc:	3301      	adds	r3, #1
 80065ce:	d003      	beq.n	80065d8 <_fwalk_sglue+0x38>
 80065d0:	4629      	mov	r1, r5
 80065d2:	4638      	mov	r0, r7
 80065d4:	47c0      	blx	r8
 80065d6:	4306      	orrs	r6, r0
 80065d8:	3568      	adds	r5, #104	@ 0x68
 80065da:	e7e9      	b.n	80065b0 <_fwalk_sglue+0x10>

080065dc <siprintf>:
 80065dc:	b40e      	push	{r1, r2, r3}
 80065de:	b500      	push	{lr}
 80065e0:	b09c      	sub	sp, #112	@ 0x70
 80065e2:	ab1d      	add	r3, sp, #116	@ 0x74
 80065e4:	9002      	str	r0, [sp, #8]
 80065e6:	9006      	str	r0, [sp, #24]
 80065e8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80065ec:	4809      	ldr	r0, [pc, #36]	@ (8006614 <siprintf+0x38>)
 80065ee:	9107      	str	r1, [sp, #28]
 80065f0:	9104      	str	r1, [sp, #16]
 80065f2:	4909      	ldr	r1, [pc, #36]	@ (8006618 <siprintf+0x3c>)
 80065f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80065f8:	9105      	str	r1, [sp, #20]
 80065fa:	6800      	ldr	r0, [r0, #0]
 80065fc:	9301      	str	r3, [sp, #4]
 80065fe:	a902      	add	r1, sp, #8
 8006600:	f002 fbb4 	bl	8008d6c <_svfiprintf_r>
 8006604:	9b02      	ldr	r3, [sp, #8]
 8006606:	2200      	movs	r2, #0
 8006608:	701a      	strb	r2, [r3, #0]
 800660a:	b01c      	add	sp, #112	@ 0x70
 800660c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006610:	b003      	add	sp, #12
 8006612:	4770      	bx	lr
 8006614:	20000018 	.word	0x20000018
 8006618:	ffff0208 	.word	0xffff0208

0800661c <__sread>:
 800661c:	b510      	push	{r4, lr}
 800661e:	460c      	mov	r4, r1
 8006620:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006624:	f000 f86c 	bl	8006700 <_read_r>
 8006628:	2800      	cmp	r0, #0
 800662a:	bfab      	itete	ge
 800662c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800662e:	89a3      	ldrhlt	r3, [r4, #12]
 8006630:	181b      	addge	r3, r3, r0
 8006632:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006636:	bfac      	ite	ge
 8006638:	6563      	strge	r3, [r4, #84]	@ 0x54
 800663a:	81a3      	strhlt	r3, [r4, #12]
 800663c:	bd10      	pop	{r4, pc}

0800663e <__swrite>:
 800663e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006642:	461f      	mov	r7, r3
 8006644:	898b      	ldrh	r3, [r1, #12]
 8006646:	05db      	lsls	r3, r3, #23
 8006648:	4605      	mov	r5, r0
 800664a:	460c      	mov	r4, r1
 800664c:	4616      	mov	r6, r2
 800664e:	d505      	bpl.n	800665c <__swrite+0x1e>
 8006650:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006654:	2302      	movs	r3, #2
 8006656:	2200      	movs	r2, #0
 8006658:	f000 f840 	bl	80066dc <_lseek_r>
 800665c:	89a3      	ldrh	r3, [r4, #12]
 800665e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006662:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006666:	81a3      	strh	r3, [r4, #12]
 8006668:	4632      	mov	r2, r6
 800666a:	463b      	mov	r3, r7
 800666c:	4628      	mov	r0, r5
 800666e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006672:	f000 b857 	b.w	8006724 <_write_r>

08006676 <__sseek>:
 8006676:	b510      	push	{r4, lr}
 8006678:	460c      	mov	r4, r1
 800667a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800667e:	f000 f82d 	bl	80066dc <_lseek_r>
 8006682:	1c43      	adds	r3, r0, #1
 8006684:	89a3      	ldrh	r3, [r4, #12]
 8006686:	bf15      	itete	ne
 8006688:	6560      	strne	r0, [r4, #84]	@ 0x54
 800668a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800668e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006692:	81a3      	strheq	r3, [r4, #12]
 8006694:	bf18      	it	ne
 8006696:	81a3      	strhne	r3, [r4, #12]
 8006698:	bd10      	pop	{r4, pc}

0800669a <__sclose>:
 800669a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800669e:	f000 b80d 	b.w	80066bc <_close_r>

080066a2 <memset>:
 80066a2:	4402      	add	r2, r0
 80066a4:	4603      	mov	r3, r0
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d100      	bne.n	80066ac <memset+0xa>
 80066aa:	4770      	bx	lr
 80066ac:	f803 1b01 	strb.w	r1, [r3], #1
 80066b0:	e7f9      	b.n	80066a6 <memset+0x4>
	...

080066b4 <_localeconv_r>:
 80066b4:	4800      	ldr	r0, [pc, #0]	@ (80066b8 <_localeconv_r+0x4>)
 80066b6:	4770      	bx	lr
 80066b8:	20000158 	.word	0x20000158

080066bc <_close_r>:
 80066bc:	b538      	push	{r3, r4, r5, lr}
 80066be:	4d06      	ldr	r5, [pc, #24]	@ (80066d8 <_close_r+0x1c>)
 80066c0:	2300      	movs	r3, #0
 80066c2:	4604      	mov	r4, r0
 80066c4:	4608      	mov	r0, r1
 80066c6:	602b      	str	r3, [r5, #0]
 80066c8:	f7fb f83d 	bl	8001746 <_close>
 80066cc:	1c43      	adds	r3, r0, #1
 80066ce:	d102      	bne.n	80066d6 <_close_r+0x1a>
 80066d0:	682b      	ldr	r3, [r5, #0]
 80066d2:	b103      	cbz	r3, 80066d6 <_close_r+0x1a>
 80066d4:	6023      	str	r3, [r4, #0]
 80066d6:	bd38      	pop	{r3, r4, r5, pc}
 80066d8:	200004ac 	.word	0x200004ac

080066dc <_lseek_r>:
 80066dc:	b538      	push	{r3, r4, r5, lr}
 80066de:	4d07      	ldr	r5, [pc, #28]	@ (80066fc <_lseek_r+0x20>)
 80066e0:	4604      	mov	r4, r0
 80066e2:	4608      	mov	r0, r1
 80066e4:	4611      	mov	r1, r2
 80066e6:	2200      	movs	r2, #0
 80066e8:	602a      	str	r2, [r5, #0]
 80066ea:	461a      	mov	r2, r3
 80066ec:	f7fb f852 	bl	8001794 <_lseek>
 80066f0:	1c43      	adds	r3, r0, #1
 80066f2:	d102      	bne.n	80066fa <_lseek_r+0x1e>
 80066f4:	682b      	ldr	r3, [r5, #0]
 80066f6:	b103      	cbz	r3, 80066fa <_lseek_r+0x1e>
 80066f8:	6023      	str	r3, [r4, #0]
 80066fa:	bd38      	pop	{r3, r4, r5, pc}
 80066fc:	200004ac 	.word	0x200004ac

08006700 <_read_r>:
 8006700:	b538      	push	{r3, r4, r5, lr}
 8006702:	4d07      	ldr	r5, [pc, #28]	@ (8006720 <_read_r+0x20>)
 8006704:	4604      	mov	r4, r0
 8006706:	4608      	mov	r0, r1
 8006708:	4611      	mov	r1, r2
 800670a:	2200      	movs	r2, #0
 800670c:	602a      	str	r2, [r5, #0]
 800670e:	461a      	mov	r2, r3
 8006710:	f7fa ffe0 	bl	80016d4 <_read>
 8006714:	1c43      	adds	r3, r0, #1
 8006716:	d102      	bne.n	800671e <_read_r+0x1e>
 8006718:	682b      	ldr	r3, [r5, #0]
 800671a:	b103      	cbz	r3, 800671e <_read_r+0x1e>
 800671c:	6023      	str	r3, [r4, #0]
 800671e:	bd38      	pop	{r3, r4, r5, pc}
 8006720:	200004ac 	.word	0x200004ac

08006724 <_write_r>:
 8006724:	b538      	push	{r3, r4, r5, lr}
 8006726:	4d07      	ldr	r5, [pc, #28]	@ (8006744 <_write_r+0x20>)
 8006728:	4604      	mov	r4, r0
 800672a:	4608      	mov	r0, r1
 800672c:	4611      	mov	r1, r2
 800672e:	2200      	movs	r2, #0
 8006730:	602a      	str	r2, [r5, #0]
 8006732:	461a      	mov	r2, r3
 8006734:	f7fa ffeb 	bl	800170e <_write>
 8006738:	1c43      	adds	r3, r0, #1
 800673a:	d102      	bne.n	8006742 <_write_r+0x1e>
 800673c:	682b      	ldr	r3, [r5, #0]
 800673e:	b103      	cbz	r3, 8006742 <_write_r+0x1e>
 8006740:	6023      	str	r3, [r4, #0]
 8006742:	bd38      	pop	{r3, r4, r5, pc}
 8006744:	200004ac 	.word	0x200004ac

08006748 <__errno>:
 8006748:	4b01      	ldr	r3, [pc, #4]	@ (8006750 <__errno+0x8>)
 800674a:	6818      	ldr	r0, [r3, #0]
 800674c:	4770      	bx	lr
 800674e:	bf00      	nop
 8006750:	20000018 	.word	0x20000018

08006754 <__libc_init_array>:
 8006754:	b570      	push	{r4, r5, r6, lr}
 8006756:	4d0d      	ldr	r5, [pc, #52]	@ (800678c <__libc_init_array+0x38>)
 8006758:	4c0d      	ldr	r4, [pc, #52]	@ (8006790 <__libc_init_array+0x3c>)
 800675a:	1b64      	subs	r4, r4, r5
 800675c:	10a4      	asrs	r4, r4, #2
 800675e:	2600      	movs	r6, #0
 8006760:	42a6      	cmp	r6, r4
 8006762:	d109      	bne.n	8006778 <__libc_init_array+0x24>
 8006764:	4d0b      	ldr	r5, [pc, #44]	@ (8006794 <__libc_init_array+0x40>)
 8006766:	4c0c      	ldr	r4, [pc, #48]	@ (8006798 <__libc_init_array+0x44>)
 8006768:	f003 fb70 	bl	8009e4c <_init>
 800676c:	1b64      	subs	r4, r4, r5
 800676e:	10a4      	asrs	r4, r4, #2
 8006770:	2600      	movs	r6, #0
 8006772:	42a6      	cmp	r6, r4
 8006774:	d105      	bne.n	8006782 <__libc_init_array+0x2e>
 8006776:	bd70      	pop	{r4, r5, r6, pc}
 8006778:	f855 3b04 	ldr.w	r3, [r5], #4
 800677c:	4798      	blx	r3
 800677e:	3601      	adds	r6, #1
 8006780:	e7ee      	b.n	8006760 <__libc_init_array+0xc>
 8006782:	f855 3b04 	ldr.w	r3, [r5], #4
 8006786:	4798      	blx	r3
 8006788:	3601      	adds	r6, #1
 800678a:	e7f2      	b.n	8006772 <__libc_init_array+0x1e>
 800678c:	0800a300 	.word	0x0800a300
 8006790:	0800a300 	.word	0x0800a300
 8006794:	0800a300 	.word	0x0800a300
 8006798:	0800a304 	.word	0x0800a304

0800679c <__retarget_lock_init_recursive>:
 800679c:	4770      	bx	lr

0800679e <__retarget_lock_acquire_recursive>:
 800679e:	4770      	bx	lr

080067a0 <__retarget_lock_release_recursive>:
 80067a0:	4770      	bx	lr
	...

080067a4 <nanf>:
 80067a4:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80067ac <nanf+0x8>
 80067a8:	4770      	bx	lr
 80067aa:	bf00      	nop
 80067ac:	7fc00000 	.word	0x7fc00000

080067b0 <quorem>:
 80067b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067b4:	6903      	ldr	r3, [r0, #16]
 80067b6:	690c      	ldr	r4, [r1, #16]
 80067b8:	42a3      	cmp	r3, r4
 80067ba:	4607      	mov	r7, r0
 80067bc:	db7e      	blt.n	80068bc <quorem+0x10c>
 80067be:	3c01      	subs	r4, #1
 80067c0:	f101 0814 	add.w	r8, r1, #20
 80067c4:	00a3      	lsls	r3, r4, #2
 80067c6:	f100 0514 	add.w	r5, r0, #20
 80067ca:	9300      	str	r3, [sp, #0]
 80067cc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80067d0:	9301      	str	r3, [sp, #4]
 80067d2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80067d6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80067da:	3301      	adds	r3, #1
 80067dc:	429a      	cmp	r2, r3
 80067de:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80067e2:	fbb2 f6f3 	udiv	r6, r2, r3
 80067e6:	d32e      	bcc.n	8006846 <quorem+0x96>
 80067e8:	f04f 0a00 	mov.w	sl, #0
 80067ec:	46c4      	mov	ip, r8
 80067ee:	46ae      	mov	lr, r5
 80067f0:	46d3      	mov	fp, sl
 80067f2:	f85c 3b04 	ldr.w	r3, [ip], #4
 80067f6:	b298      	uxth	r0, r3
 80067f8:	fb06 a000 	mla	r0, r6, r0, sl
 80067fc:	0c02      	lsrs	r2, r0, #16
 80067fe:	0c1b      	lsrs	r3, r3, #16
 8006800:	fb06 2303 	mla	r3, r6, r3, r2
 8006804:	f8de 2000 	ldr.w	r2, [lr]
 8006808:	b280      	uxth	r0, r0
 800680a:	b292      	uxth	r2, r2
 800680c:	1a12      	subs	r2, r2, r0
 800680e:	445a      	add	r2, fp
 8006810:	f8de 0000 	ldr.w	r0, [lr]
 8006814:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006818:	b29b      	uxth	r3, r3
 800681a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800681e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006822:	b292      	uxth	r2, r2
 8006824:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006828:	45e1      	cmp	r9, ip
 800682a:	f84e 2b04 	str.w	r2, [lr], #4
 800682e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006832:	d2de      	bcs.n	80067f2 <quorem+0x42>
 8006834:	9b00      	ldr	r3, [sp, #0]
 8006836:	58eb      	ldr	r3, [r5, r3]
 8006838:	b92b      	cbnz	r3, 8006846 <quorem+0x96>
 800683a:	9b01      	ldr	r3, [sp, #4]
 800683c:	3b04      	subs	r3, #4
 800683e:	429d      	cmp	r5, r3
 8006840:	461a      	mov	r2, r3
 8006842:	d32f      	bcc.n	80068a4 <quorem+0xf4>
 8006844:	613c      	str	r4, [r7, #16]
 8006846:	4638      	mov	r0, r7
 8006848:	f001 f9c2 	bl	8007bd0 <__mcmp>
 800684c:	2800      	cmp	r0, #0
 800684e:	db25      	blt.n	800689c <quorem+0xec>
 8006850:	4629      	mov	r1, r5
 8006852:	2000      	movs	r0, #0
 8006854:	f858 2b04 	ldr.w	r2, [r8], #4
 8006858:	f8d1 c000 	ldr.w	ip, [r1]
 800685c:	fa1f fe82 	uxth.w	lr, r2
 8006860:	fa1f f38c 	uxth.w	r3, ip
 8006864:	eba3 030e 	sub.w	r3, r3, lr
 8006868:	4403      	add	r3, r0
 800686a:	0c12      	lsrs	r2, r2, #16
 800686c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006870:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006874:	b29b      	uxth	r3, r3
 8006876:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800687a:	45c1      	cmp	r9, r8
 800687c:	f841 3b04 	str.w	r3, [r1], #4
 8006880:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006884:	d2e6      	bcs.n	8006854 <quorem+0xa4>
 8006886:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800688a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800688e:	b922      	cbnz	r2, 800689a <quorem+0xea>
 8006890:	3b04      	subs	r3, #4
 8006892:	429d      	cmp	r5, r3
 8006894:	461a      	mov	r2, r3
 8006896:	d30b      	bcc.n	80068b0 <quorem+0x100>
 8006898:	613c      	str	r4, [r7, #16]
 800689a:	3601      	adds	r6, #1
 800689c:	4630      	mov	r0, r6
 800689e:	b003      	add	sp, #12
 80068a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068a4:	6812      	ldr	r2, [r2, #0]
 80068a6:	3b04      	subs	r3, #4
 80068a8:	2a00      	cmp	r2, #0
 80068aa:	d1cb      	bne.n	8006844 <quorem+0x94>
 80068ac:	3c01      	subs	r4, #1
 80068ae:	e7c6      	b.n	800683e <quorem+0x8e>
 80068b0:	6812      	ldr	r2, [r2, #0]
 80068b2:	3b04      	subs	r3, #4
 80068b4:	2a00      	cmp	r2, #0
 80068b6:	d1ef      	bne.n	8006898 <quorem+0xe8>
 80068b8:	3c01      	subs	r4, #1
 80068ba:	e7ea      	b.n	8006892 <quorem+0xe2>
 80068bc:	2000      	movs	r0, #0
 80068be:	e7ee      	b.n	800689e <quorem+0xee>

080068c0 <_dtoa_r>:
 80068c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068c4:	69c7      	ldr	r7, [r0, #28]
 80068c6:	b099      	sub	sp, #100	@ 0x64
 80068c8:	ed8d 0b02 	vstr	d0, [sp, #8]
 80068cc:	ec55 4b10 	vmov	r4, r5, d0
 80068d0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80068d2:	9109      	str	r1, [sp, #36]	@ 0x24
 80068d4:	4683      	mov	fp, r0
 80068d6:	920e      	str	r2, [sp, #56]	@ 0x38
 80068d8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80068da:	b97f      	cbnz	r7, 80068fc <_dtoa_r+0x3c>
 80068dc:	2010      	movs	r0, #16
 80068de:	f000 fdfd 	bl	80074dc <malloc>
 80068e2:	4602      	mov	r2, r0
 80068e4:	f8cb 001c 	str.w	r0, [fp, #28]
 80068e8:	b920      	cbnz	r0, 80068f4 <_dtoa_r+0x34>
 80068ea:	4ba7      	ldr	r3, [pc, #668]	@ (8006b88 <_dtoa_r+0x2c8>)
 80068ec:	21ef      	movs	r1, #239	@ 0xef
 80068ee:	48a7      	ldr	r0, [pc, #668]	@ (8006b8c <_dtoa_r+0x2cc>)
 80068f0:	f002 fc36 	bl	8009160 <__assert_func>
 80068f4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80068f8:	6007      	str	r7, [r0, #0]
 80068fa:	60c7      	str	r7, [r0, #12]
 80068fc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006900:	6819      	ldr	r1, [r3, #0]
 8006902:	b159      	cbz	r1, 800691c <_dtoa_r+0x5c>
 8006904:	685a      	ldr	r2, [r3, #4]
 8006906:	604a      	str	r2, [r1, #4]
 8006908:	2301      	movs	r3, #1
 800690a:	4093      	lsls	r3, r2
 800690c:	608b      	str	r3, [r1, #8]
 800690e:	4658      	mov	r0, fp
 8006910:	f000 feda 	bl	80076c8 <_Bfree>
 8006914:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006918:	2200      	movs	r2, #0
 800691a:	601a      	str	r2, [r3, #0]
 800691c:	1e2b      	subs	r3, r5, #0
 800691e:	bfb9      	ittee	lt
 8006920:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006924:	9303      	strlt	r3, [sp, #12]
 8006926:	2300      	movge	r3, #0
 8006928:	6033      	strge	r3, [r6, #0]
 800692a:	9f03      	ldr	r7, [sp, #12]
 800692c:	4b98      	ldr	r3, [pc, #608]	@ (8006b90 <_dtoa_r+0x2d0>)
 800692e:	bfbc      	itt	lt
 8006930:	2201      	movlt	r2, #1
 8006932:	6032      	strlt	r2, [r6, #0]
 8006934:	43bb      	bics	r3, r7
 8006936:	d112      	bne.n	800695e <_dtoa_r+0x9e>
 8006938:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800693a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800693e:	6013      	str	r3, [r2, #0]
 8006940:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006944:	4323      	orrs	r3, r4
 8006946:	f000 854d 	beq.w	80073e4 <_dtoa_r+0xb24>
 800694a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800694c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8006ba4 <_dtoa_r+0x2e4>
 8006950:	2b00      	cmp	r3, #0
 8006952:	f000 854f 	beq.w	80073f4 <_dtoa_r+0xb34>
 8006956:	f10a 0303 	add.w	r3, sl, #3
 800695a:	f000 bd49 	b.w	80073f0 <_dtoa_r+0xb30>
 800695e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006962:	2200      	movs	r2, #0
 8006964:	ec51 0b17 	vmov	r0, r1, d7
 8006968:	2300      	movs	r3, #0
 800696a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800696e:	f7fa f8ab 	bl	8000ac8 <__aeabi_dcmpeq>
 8006972:	4680      	mov	r8, r0
 8006974:	b158      	cbz	r0, 800698e <_dtoa_r+0xce>
 8006976:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006978:	2301      	movs	r3, #1
 800697a:	6013      	str	r3, [r2, #0]
 800697c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800697e:	b113      	cbz	r3, 8006986 <_dtoa_r+0xc6>
 8006980:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006982:	4b84      	ldr	r3, [pc, #528]	@ (8006b94 <_dtoa_r+0x2d4>)
 8006984:	6013      	str	r3, [r2, #0]
 8006986:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8006ba8 <_dtoa_r+0x2e8>
 800698a:	f000 bd33 	b.w	80073f4 <_dtoa_r+0xb34>
 800698e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8006992:	aa16      	add	r2, sp, #88	@ 0x58
 8006994:	a917      	add	r1, sp, #92	@ 0x5c
 8006996:	4658      	mov	r0, fp
 8006998:	f001 fa3a 	bl	8007e10 <__d2b>
 800699c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80069a0:	4681      	mov	r9, r0
 80069a2:	2e00      	cmp	r6, #0
 80069a4:	d077      	beq.n	8006a96 <_dtoa_r+0x1d6>
 80069a6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80069a8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80069ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80069b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80069b4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80069b8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80069bc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80069c0:	4619      	mov	r1, r3
 80069c2:	2200      	movs	r2, #0
 80069c4:	4b74      	ldr	r3, [pc, #464]	@ (8006b98 <_dtoa_r+0x2d8>)
 80069c6:	f7f9 fc5f 	bl	8000288 <__aeabi_dsub>
 80069ca:	a369      	add	r3, pc, #420	@ (adr r3, 8006b70 <_dtoa_r+0x2b0>)
 80069cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069d0:	f7f9 fe12 	bl	80005f8 <__aeabi_dmul>
 80069d4:	a368      	add	r3, pc, #416	@ (adr r3, 8006b78 <_dtoa_r+0x2b8>)
 80069d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069da:	f7f9 fc57 	bl	800028c <__adddf3>
 80069de:	4604      	mov	r4, r0
 80069e0:	4630      	mov	r0, r6
 80069e2:	460d      	mov	r5, r1
 80069e4:	f7f9 fd9e 	bl	8000524 <__aeabi_i2d>
 80069e8:	a365      	add	r3, pc, #404	@ (adr r3, 8006b80 <_dtoa_r+0x2c0>)
 80069ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069ee:	f7f9 fe03 	bl	80005f8 <__aeabi_dmul>
 80069f2:	4602      	mov	r2, r0
 80069f4:	460b      	mov	r3, r1
 80069f6:	4620      	mov	r0, r4
 80069f8:	4629      	mov	r1, r5
 80069fa:	f7f9 fc47 	bl	800028c <__adddf3>
 80069fe:	4604      	mov	r4, r0
 8006a00:	460d      	mov	r5, r1
 8006a02:	f7fa f8a9 	bl	8000b58 <__aeabi_d2iz>
 8006a06:	2200      	movs	r2, #0
 8006a08:	4607      	mov	r7, r0
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	4620      	mov	r0, r4
 8006a0e:	4629      	mov	r1, r5
 8006a10:	f7fa f864 	bl	8000adc <__aeabi_dcmplt>
 8006a14:	b140      	cbz	r0, 8006a28 <_dtoa_r+0x168>
 8006a16:	4638      	mov	r0, r7
 8006a18:	f7f9 fd84 	bl	8000524 <__aeabi_i2d>
 8006a1c:	4622      	mov	r2, r4
 8006a1e:	462b      	mov	r3, r5
 8006a20:	f7fa f852 	bl	8000ac8 <__aeabi_dcmpeq>
 8006a24:	b900      	cbnz	r0, 8006a28 <_dtoa_r+0x168>
 8006a26:	3f01      	subs	r7, #1
 8006a28:	2f16      	cmp	r7, #22
 8006a2a:	d851      	bhi.n	8006ad0 <_dtoa_r+0x210>
 8006a2c:	4b5b      	ldr	r3, [pc, #364]	@ (8006b9c <_dtoa_r+0x2dc>)
 8006a2e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a36:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006a3a:	f7fa f84f 	bl	8000adc <__aeabi_dcmplt>
 8006a3e:	2800      	cmp	r0, #0
 8006a40:	d048      	beq.n	8006ad4 <_dtoa_r+0x214>
 8006a42:	3f01      	subs	r7, #1
 8006a44:	2300      	movs	r3, #0
 8006a46:	9312      	str	r3, [sp, #72]	@ 0x48
 8006a48:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006a4a:	1b9b      	subs	r3, r3, r6
 8006a4c:	1e5a      	subs	r2, r3, #1
 8006a4e:	bf44      	itt	mi
 8006a50:	f1c3 0801 	rsbmi	r8, r3, #1
 8006a54:	2300      	movmi	r3, #0
 8006a56:	9208      	str	r2, [sp, #32]
 8006a58:	bf54      	ite	pl
 8006a5a:	f04f 0800 	movpl.w	r8, #0
 8006a5e:	9308      	strmi	r3, [sp, #32]
 8006a60:	2f00      	cmp	r7, #0
 8006a62:	db39      	blt.n	8006ad8 <_dtoa_r+0x218>
 8006a64:	9b08      	ldr	r3, [sp, #32]
 8006a66:	970f      	str	r7, [sp, #60]	@ 0x3c
 8006a68:	443b      	add	r3, r7
 8006a6a:	9308      	str	r3, [sp, #32]
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006a70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a72:	2b09      	cmp	r3, #9
 8006a74:	d864      	bhi.n	8006b40 <_dtoa_r+0x280>
 8006a76:	2b05      	cmp	r3, #5
 8006a78:	bfc4      	itt	gt
 8006a7a:	3b04      	subgt	r3, #4
 8006a7c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8006a7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a80:	f1a3 0302 	sub.w	r3, r3, #2
 8006a84:	bfcc      	ite	gt
 8006a86:	2400      	movgt	r4, #0
 8006a88:	2401      	movle	r4, #1
 8006a8a:	2b03      	cmp	r3, #3
 8006a8c:	d863      	bhi.n	8006b56 <_dtoa_r+0x296>
 8006a8e:	e8df f003 	tbb	[pc, r3]
 8006a92:	372a      	.short	0x372a
 8006a94:	5535      	.short	0x5535
 8006a96:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8006a9a:	441e      	add	r6, r3
 8006a9c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006aa0:	2b20      	cmp	r3, #32
 8006aa2:	bfc1      	itttt	gt
 8006aa4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006aa8:	409f      	lslgt	r7, r3
 8006aaa:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006aae:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006ab2:	bfd6      	itet	le
 8006ab4:	f1c3 0320 	rsble	r3, r3, #32
 8006ab8:	ea47 0003 	orrgt.w	r0, r7, r3
 8006abc:	fa04 f003 	lslle.w	r0, r4, r3
 8006ac0:	f7f9 fd20 	bl	8000504 <__aeabi_ui2d>
 8006ac4:	2201      	movs	r2, #1
 8006ac6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006aca:	3e01      	subs	r6, #1
 8006acc:	9214      	str	r2, [sp, #80]	@ 0x50
 8006ace:	e777      	b.n	80069c0 <_dtoa_r+0x100>
 8006ad0:	2301      	movs	r3, #1
 8006ad2:	e7b8      	b.n	8006a46 <_dtoa_r+0x186>
 8006ad4:	9012      	str	r0, [sp, #72]	@ 0x48
 8006ad6:	e7b7      	b.n	8006a48 <_dtoa_r+0x188>
 8006ad8:	427b      	negs	r3, r7
 8006ada:	930a      	str	r3, [sp, #40]	@ 0x28
 8006adc:	2300      	movs	r3, #0
 8006ade:	eba8 0807 	sub.w	r8, r8, r7
 8006ae2:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006ae4:	e7c4      	b.n	8006a70 <_dtoa_r+0x1b0>
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006aea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	dc35      	bgt.n	8006b5c <_dtoa_r+0x29c>
 8006af0:	2301      	movs	r3, #1
 8006af2:	9300      	str	r3, [sp, #0]
 8006af4:	9307      	str	r3, [sp, #28]
 8006af6:	461a      	mov	r2, r3
 8006af8:	920e      	str	r2, [sp, #56]	@ 0x38
 8006afa:	e00b      	b.n	8006b14 <_dtoa_r+0x254>
 8006afc:	2301      	movs	r3, #1
 8006afe:	e7f3      	b.n	8006ae8 <_dtoa_r+0x228>
 8006b00:	2300      	movs	r3, #0
 8006b02:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006b04:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006b06:	18fb      	adds	r3, r7, r3
 8006b08:	9300      	str	r3, [sp, #0]
 8006b0a:	3301      	adds	r3, #1
 8006b0c:	2b01      	cmp	r3, #1
 8006b0e:	9307      	str	r3, [sp, #28]
 8006b10:	bfb8      	it	lt
 8006b12:	2301      	movlt	r3, #1
 8006b14:	f8db 001c 	ldr.w	r0, [fp, #28]
 8006b18:	2100      	movs	r1, #0
 8006b1a:	2204      	movs	r2, #4
 8006b1c:	f102 0514 	add.w	r5, r2, #20
 8006b20:	429d      	cmp	r5, r3
 8006b22:	d91f      	bls.n	8006b64 <_dtoa_r+0x2a4>
 8006b24:	6041      	str	r1, [r0, #4]
 8006b26:	4658      	mov	r0, fp
 8006b28:	f000 fd8e 	bl	8007648 <_Balloc>
 8006b2c:	4682      	mov	sl, r0
 8006b2e:	2800      	cmp	r0, #0
 8006b30:	d13c      	bne.n	8006bac <_dtoa_r+0x2ec>
 8006b32:	4b1b      	ldr	r3, [pc, #108]	@ (8006ba0 <_dtoa_r+0x2e0>)
 8006b34:	4602      	mov	r2, r0
 8006b36:	f240 11af 	movw	r1, #431	@ 0x1af
 8006b3a:	e6d8      	b.n	80068ee <_dtoa_r+0x2e>
 8006b3c:	2301      	movs	r3, #1
 8006b3e:	e7e0      	b.n	8006b02 <_dtoa_r+0x242>
 8006b40:	2401      	movs	r4, #1
 8006b42:	2300      	movs	r3, #0
 8006b44:	9309      	str	r3, [sp, #36]	@ 0x24
 8006b46:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006b48:	f04f 33ff 	mov.w	r3, #4294967295
 8006b4c:	9300      	str	r3, [sp, #0]
 8006b4e:	9307      	str	r3, [sp, #28]
 8006b50:	2200      	movs	r2, #0
 8006b52:	2312      	movs	r3, #18
 8006b54:	e7d0      	b.n	8006af8 <_dtoa_r+0x238>
 8006b56:	2301      	movs	r3, #1
 8006b58:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006b5a:	e7f5      	b.n	8006b48 <_dtoa_r+0x288>
 8006b5c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006b5e:	9300      	str	r3, [sp, #0]
 8006b60:	9307      	str	r3, [sp, #28]
 8006b62:	e7d7      	b.n	8006b14 <_dtoa_r+0x254>
 8006b64:	3101      	adds	r1, #1
 8006b66:	0052      	lsls	r2, r2, #1
 8006b68:	e7d8      	b.n	8006b1c <_dtoa_r+0x25c>
 8006b6a:	bf00      	nop
 8006b6c:	f3af 8000 	nop.w
 8006b70:	636f4361 	.word	0x636f4361
 8006b74:	3fd287a7 	.word	0x3fd287a7
 8006b78:	8b60c8b3 	.word	0x8b60c8b3
 8006b7c:	3fc68a28 	.word	0x3fc68a28
 8006b80:	509f79fb 	.word	0x509f79fb
 8006b84:	3fd34413 	.word	0x3fd34413
 8006b88:	08009f0e 	.word	0x08009f0e
 8006b8c:	08009f25 	.word	0x08009f25
 8006b90:	7ff00000 	.word	0x7ff00000
 8006b94:	08009ed9 	.word	0x08009ed9
 8006b98:	3ff80000 	.word	0x3ff80000
 8006b9c:	0800a020 	.word	0x0800a020
 8006ba0:	08009f7d 	.word	0x08009f7d
 8006ba4:	08009f0a 	.word	0x08009f0a
 8006ba8:	08009ed8 	.word	0x08009ed8
 8006bac:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006bb0:	6018      	str	r0, [r3, #0]
 8006bb2:	9b07      	ldr	r3, [sp, #28]
 8006bb4:	2b0e      	cmp	r3, #14
 8006bb6:	f200 80a4 	bhi.w	8006d02 <_dtoa_r+0x442>
 8006bba:	2c00      	cmp	r4, #0
 8006bbc:	f000 80a1 	beq.w	8006d02 <_dtoa_r+0x442>
 8006bc0:	2f00      	cmp	r7, #0
 8006bc2:	dd33      	ble.n	8006c2c <_dtoa_r+0x36c>
 8006bc4:	4bad      	ldr	r3, [pc, #692]	@ (8006e7c <_dtoa_r+0x5bc>)
 8006bc6:	f007 020f 	and.w	r2, r7, #15
 8006bca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006bce:	ed93 7b00 	vldr	d7, [r3]
 8006bd2:	05f8      	lsls	r0, r7, #23
 8006bd4:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006bd8:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006bdc:	d516      	bpl.n	8006c0c <_dtoa_r+0x34c>
 8006bde:	4ba8      	ldr	r3, [pc, #672]	@ (8006e80 <_dtoa_r+0x5c0>)
 8006be0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006be4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006be8:	f7f9 fe30 	bl	800084c <__aeabi_ddiv>
 8006bec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006bf0:	f004 040f 	and.w	r4, r4, #15
 8006bf4:	2603      	movs	r6, #3
 8006bf6:	4da2      	ldr	r5, [pc, #648]	@ (8006e80 <_dtoa_r+0x5c0>)
 8006bf8:	b954      	cbnz	r4, 8006c10 <_dtoa_r+0x350>
 8006bfa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006bfe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006c02:	f7f9 fe23 	bl	800084c <__aeabi_ddiv>
 8006c06:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006c0a:	e028      	b.n	8006c5e <_dtoa_r+0x39e>
 8006c0c:	2602      	movs	r6, #2
 8006c0e:	e7f2      	b.n	8006bf6 <_dtoa_r+0x336>
 8006c10:	07e1      	lsls	r1, r4, #31
 8006c12:	d508      	bpl.n	8006c26 <_dtoa_r+0x366>
 8006c14:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006c18:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006c1c:	f7f9 fcec 	bl	80005f8 <__aeabi_dmul>
 8006c20:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006c24:	3601      	adds	r6, #1
 8006c26:	1064      	asrs	r4, r4, #1
 8006c28:	3508      	adds	r5, #8
 8006c2a:	e7e5      	b.n	8006bf8 <_dtoa_r+0x338>
 8006c2c:	f000 80d2 	beq.w	8006dd4 <_dtoa_r+0x514>
 8006c30:	427c      	negs	r4, r7
 8006c32:	4b92      	ldr	r3, [pc, #584]	@ (8006e7c <_dtoa_r+0x5bc>)
 8006c34:	4d92      	ldr	r5, [pc, #584]	@ (8006e80 <_dtoa_r+0x5c0>)
 8006c36:	f004 020f 	and.w	r2, r4, #15
 8006c3a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c42:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006c46:	f7f9 fcd7 	bl	80005f8 <__aeabi_dmul>
 8006c4a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006c4e:	1124      	asrs	r4, r4, #4
 8006c50:	2300      	movs	r3, #0
 8006c52:	2602      	movs	r6, #2
 8006c54:	2c00      	cmp	r4, #0
 8006c56:	f040 80b2 	bne.w	8006dbe <_dtoa_r+0x4fe>
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d1d3      	bne.n	8006c06 <_dtoa_r+0x346>
 8006c5e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006c60:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	f000 80b7 	beq.w	8006dd8 <_dtoa_r+0x518>
 8006c6a:	4b86      	ldr	r3, [pc, #536]	@ (8006e84 <_dtoa_r+0x5c4>)
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	4620      	mov	r0, r4
 8006c70:	4629      	mov	r1, r5
 8006c72:	f7f9 ff33 	bl	8000adc <__aeabi_dcmplt>
 8006c76:	2800      	cmp	r0, #0
 8006c78:	f000 80ae 	beq.w	8006dd8 <_dtoa_r+0x518>
 8006c7c:	9b07      	ldr	r3, [sp, #28]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	f000 80aa 	beq.w	8006dd8 <_dtoa_r+0x518>
 8006c84:	9b00      	ldr	r3, [sp, #0]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	dd37      	ble.n	8006cfa <_dtoa_r+0x43a>
 8006c8a:	1e7b      	subs	r3, r7, #1
 8006c8c:	9304      	str	r3, [sp, #16]
 8006c8e:	4620      	mov	r0, r4
 8006c90:	4b7d      	ldr	r3, [pc, #500]	@ (8006e88 <_dtoa_r+0x5c8>)
 8006c92:	2200      	movs	r2, #0
 8006c94:	4629      	mov	r1, r5
 8006c96:	f7f9 fcaf 	bl	80005f8 <__aeabi_dmul>
 8006c9a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006c9e:	9c00      	ldr	r4, [sp, #0]
 8006ca0:	3601      	adds	r6, #1
 8006ca2:	4630      	mov	r0, r6
 8006ca4:	f7f9 fc3e 	bl	8000524 <__aeabi_i2d>
 8006ca8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006cac:	f7f9 fca4 	bl	80005f8 <__aeabi_dmul>
 8006cb0:	4b76      	ldr	r3, [pc, #472]	@ (8006e8c <_dtoa_r+0x5cc>)
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	f7f9 faea 	bl	800028c <__adddf3>
 8006cb8:	4605      	mov	r5, r0
 8006cba:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006cbe:	2c00      	cmp	r4, #0
 8006cc0:	f040 808d 	bne.w	8006dde <_dtoa_r+0x51e>
 8006cc4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006cc8:	4b71      	ldr	r3, [pc, #452]	@ (8006e90 <_dtoa_r+0x5d0>)
 8006cca:	2200      	movs	r2, #0
 8006ccc:	f7f9 fadc 	bl	8000288 <__aeabi_dsub>
 8006cd0:	4602      	mov	r2, r0
 8006cd2:	460b      	mov	r3, r1
 8006cd4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006cd8:	462a      	mov	r2, r5
 8006cda:	4633      	mov	r3, r6
 8006cdc:	f7f9 ff1c 	bl	8000b18 <__aeabi_dcmpgt>
 8006ce0:	2800      	cmp	r0, #0
 8006ce2:	f040 828b 	bne.w	80071fc <_dtoa_r+0x93c>
 8006ce6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006cea:	462a      	mov	r2, r5
 8006cec:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006cf0:	f7f9 fef4 	bl	8000adc <__aeabi_dcmplt>
 8006cf4:	2800      	cmp	r0, #0
 8006cf6:	f040 8128 	bne.w	8006f4a <_dtoa_r+0x68a>
 8006cfa:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8006cfe:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8006d02:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	f2c0 815a 	blt.w	8006fbe <_dtoa_r+0x6fe>
 8006d0a:	2f0e      	cmp	r7, #14
 8006d0c:	f300 8157 	bgt.w	8006fbe <_dtoa_r+0x6fe>
 8006d10:	4b5a      	ldr	r3, [pc, #360]	@ (8006e7c <_dtoa_r+0x5bc>)
 8006d12:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006d16:	ed93 7b00 	vldr	d7, [r3]
 8006d1a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	ed8d 7b00 	vstr	d7, [sp]
 8006d22:	da03      	bge.n	8006d2c <_dtoa_r+0x46c>
 8006d24:	9b07      	ldr	r3, [sp, #28]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	f340 8101 	ble.w	8006f2e <_dtoa_r+0x66e>
 8006d2c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006d30:	4656      	mov	r6, sl
 8006d32:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006d36:	4620      	mov	r0, r4
 8006d38:	4629      	mov	r1, r5
 8006d3a:	f7f9 fd87 	bl	800084c <__aeabi_ddiv>
 8006d3e:	f7f9 ff0b 	bl	8000b58 <__aeabi_d2iz>
 8006d42:	4680      	mov	r8, r0
 8006d44:	f7f9 fbee 	bl	8000524 <__aeabi_i2d>
 8006d48:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006d4c:	f7f9 fc54 	bl	80005f8 <__aeabi_dmul>
 8006d50:	4602      	mov	r2, r0
 8006d52:	460b      	mov	r3, r1
 8006d54:	4620      	mov	r0, r4
 8006d56:	4629      	mov	r1, r5
 8006d58:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006d5c:	f7f9 fa94 	bl	8000288 <__aeabi_dsub>
 8006d60:	f806 4b01 	strb.w	r4, [r6], #1
 8006d64:	9d07      	ldr	r5, [sp, #28]
 8006d66:	eba6 040a 	sub.w	r4, r6, sl
 8006d6a:	42a5      	cmp	r5, r4
 8006d6c:	4602      	mov	r2, r0
 8006d6e:	460b      	mov	r3, r1
 8006d70:	f040 8117 	bne.w	8006fa2 <_dtoa_r+0x6e2>
 8006d74:	f7f9 fa8a 	bl	800028c <__adddf3>
 8006d78:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006d7c:	4604      	mov	r4, r0
 8006d7e:	460d      	mov	r5, r1
 8006d80:	f7f9 feca 	bl	8000b18 <__aeabi_dcmpgt>
 8006d84:	2800      	cmp	r0, #0
 8006d86:	f040 80f9 	bne.w	8006f7c <_dtoa_r+0x6bc>
 8006d8a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006d8e:	4620      	mov	r0, r4
 8006d90:	4629      	mov	r1, r5
 8006d92:	f7f9 fe99 	bl	8000ac8 <__aeabi_dcmpeq>
 8006d96:	b118      	cbz	r0, 8006da0 <_dtoa_r+0x4e0>
 8006d98:	f018 0f01 	tst.w	r8, #1
 8006d9c:	f040 80ee 	bne.w	8006f7c <_dtoa_r+0x6bc>
 8006da0:	4649      	mov	r1, r9
 8006da2:	4658      	mov	r0, fp
 8006da4:	f000 fc90 	bl	80076c8 <_Bfree>
 8006da8:	2300      	movs	r3, #0
 8006daa:	7033      	strb	r3, [r6, #0]
 8006dac:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006dae:	3701      	adds	r7, #1
 8006db0:	601f      	str	r7, [r3, #0]
 8006db2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	f000 831d 	beq.w	80073f4 <_dtoa_r+0xb34>
 8006dba:	601e      	str	r6, [r3, #0]
 8006dbc:	e31a      	b.n	80073f4 <_dtoa_r+0xb34>
 8006dbe:	07e2      	lsls	r2, r4, #31
 8006dc0:	d505      	bpl.n	8006dce <_dtoa_r+0x50e>
 8006dc2:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006dc6:	f7f9 fc17 	bl	80005f8 <__aeabi_dmul>
 8006dca:	3601      	adds	r6, #1
 8006dcc:	2301      	movs	r3, #1
 8006dce:	1064      	asrs	r4, r4, #1
 8006dd0:	3508      	adds	r5, #8
 8006dd2:	e73f      	b.n	8006c54 <_dtoa_r+0x394>
 8006dd4:	2602      	movs	r6, #2
 8006dd6:	e742      	b.n	8006c5e <_dtoa_r+0x39e>
 8006dd8:	9c07      	ldr	r4, [sp, #28]
 8006dda:	9704      	str	r7, [sp, #16]
 8006ddc:	e761      	b.n	8006ca2 <_dtoa_r+0x3e2>
 8006dde:	4b27      	ldr	r3, [pc, #156]	@ (8006e7c <_dtoa_r+0x5bc>)
 8006de0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006de2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006de6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006dea:	4454      	add	r4, sl
 8006dec:	2900      	cmp	r1, #0
 8006dee:	d053      	beq.n	8006e98 <_dtoa_r+0x5d8>
 8006df0:	4928      	ldr	r1, [pc, #160]	@ (8006e94 <_dtoa_r+0x5d4>)
 8006df2:	2000      	movs	r0, #0
 8006df4:	f7f9 fd2a 	bl	800084c <__aeabi_ddiv>
 8006df8:	4633      	mov	r3, r6
 8006dfa:	462a      	mov	r2, r5
 8006dfc:	f7f9 fa44 	bl	8000288 <__aeabi_dsub>
 8006e00:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006e04:	4656      	mov	r6, sl
 8006e06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006e0a:	f7f9 fea5 	bl	8000b58 <__aeabi_d2iz>
 8006e0e:	4605      	mov	r5, r0
 8006e10:	f7f9 fb88 	bl	8000524 <__aeabi_i2d>
 8006e14:	4602      	mov	r2, r0
 8006e16:	460b      	mov	r3, r1
 8006e18:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006e1c:	f7f9 fa34 	bl	8000288 <__aeabi_dsub>
 8006e20:	3530      	adds	r5, #48	@ 0x30
 8006e22:	4602      	mov	r2, r0
 8006e24:	460b      	mov	r3, r1
 8006e26:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006e2a:	f806 5b01 	strb.w	r5, [r6], #1
 8006e2e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006e32:	f7f9 fe53 	bl	8000adc <__aeabi_dcmplt>
 8006e36:	2800      	cmp	r0, #0
 8006e38:	d171      	bne.n	8006f1e <_dtoa_r+0x65e>
 8006e3a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006e3e:	4911      	ldr	r1, [pc, #68]	@ (8006e84 <_dtoa_r+0x5c4>)
 8006e40:	2000      	movs	r0, #0
 8006e42:	f7f9 fa21 	bl	8000288 <__aeabi_dsub>
 8006e46:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006e4a:	f7f9 fe47 	bl	8000adc <__aeabi_dcmplt>
 8006e4e:	2800      	cmp	r0, #0
 8006e50:	f040 8095 	bne.w	8006f7e <_dtoa_r+0x6be>
 8006e54:	42a6      	cmp	r6, r4
 8006e56:	f43f af50 	beq.w	8006cfa <_dtoa_r+0x43a>
 8006e5a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006e5e:	4b0a      	ldr	r3, [pc, #40]	@ (8006e88 <_dtoa_r+0x5c8>)
 8006e60:	2200      	movs	r2, #0
 8006e62:	f7f9 fbc9 	bl	80005f8 <__aeabi_dmul>
 8006e66:	4b08      	ldr	r3, [pc, #32]	@ (8006e88 <_dtoa_r+0x5c8>)
 8006e68:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006e72:	f7f9 fbc1 	bl	80005f8 <__aeabi_dmul>
 8006e76:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006e7a:	e7c4      	b.n	8006e06 <_dtoa_r+0x546>
 8006e7c:	0800a020 	.word	0x0800a020
 8006e80:	08009ff8 	.word	0x08009ff8
 8006e84:	3ff00000 	.word	0x3ff00000
 8006e88:	40240000 	.word	0x40240000
 8006e8c:	401c0000 	.word	0x401c0000
 8006e90:	40140000 	.word	0x40140000
 8006e94:	3fe00000 	.word	0x3fe00000
 8006e98:	4631      	mov	r1, r6
 8006e9a:	4628      	mov	r0, r5
 8006e9c:	f7f9 fbac 	bl	80005f8 <__aeabi_dmul>
 8006ea0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006ea4:	9415      	str	r4, [sp, #84]	@ 0x54
 8006ea6:	4656      	mov	r6, sl
 8006ea8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006eac:	f7f9 fe54 	bl	8000b58 <__aeabi_d2iz>
 8006eb0:	4605      	mov	r5, r0
 8006eb2:	f7f9 fb37 	bl	8000524 <__aeabi_i2d>
 8006eb6:	4602      	mov	r2, r0
 8006eb8:	460b      	mov	r3, r1
 8006eba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006ebe:	f7f9 f9e3 	bl	8000288 <__aeabi_dsub>
 8006ec2:	3530      	adds	r5, #48	@ 0x30
 8006ec4:	f806 5b01 	strb.w	r5, [r6], #1
 8006ec8:	4602      	mov	r2, r0
 8006eca:	460b      	mov	r3, r1
 8006ecc:	42a6      	cmp	r6, r4
 8006ece:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006ed2:	f04f 0200 	mov.w	r2, #0
 8006ed6:	d124      	bne.n	8006f22 <_dtoa_r+0x662>
 8006ed8:	4bac      	ldr	r3, [pc, #688]	@ (800718c <_dtoa_r+0x8cc>)
 8006eda:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006ede:	f7f9 f9d5 	bl	800028c <__adddf3>
 8006ee2:	4602      	mov	r2, r0
 8006ee4:	460b      	mov	r3, r1
 8006ee6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006eea:	f7f9 fe15 	bl	8000b18 <__aeabi_dcmpgt>
 8006eee:	2800      	cmp	r0, #0
 8006ef0:	d145      	bne.n	8006f7e <_dtoa_r+0x6be>
 8006ef2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006ef6:	49a5      	ldr	r1, [pc, #660]	@ (800718c <_dtoa_r+0x8cc>)
 8006ef8:	2000      	movs	r0, #0
 8006efa:	f7f9 f9c5 	bl	8000288 <__aeabi_dsub>
 8006efe:	4602      	mov	r2, r0
 8006f00:	460b      	mov	r3, r1
 8006f02:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006f06:	f7f9 fde9 	bl	8000adc <__aeabi_dcmplt>
 8006f0a:	2800      	cmp	r0, #0
 8006f0c:	f43f aef5 	beq.w	8006cfa <_dtoa_r+0x43a>
 8006f10:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8006f12:	1e73      	subs	r3, r6, #1
 8006f14:	9315      	str	r3, [sp, #84]	@ 0x54
 8006f16:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006f1a:	2b30      	cmp	r3, #48	@ 0x30
 8006f1c:	d0f8      	beq.n	8006f10 <_dtoa_r+0x650>
 8006f1e:	9f04      	ldr	r7, [sp, #16]
 8006f20:	e73e      	b.n	8006da0 <_dtoa_r+0x4e0>
 8006f22:	4b9b      	ldr	r3, [pc, #620]	@ (8007190 <_dtoa_r+0x8d0>)
 8006f24:	f7f9 fb68 	bl	80005f8 <__aeabi_dmul>
 8006f28:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006f2c:	e7bc      	b.n	8006ea8 <_dtoa_r+0x5e8>
 8006f2e:	d10c      	bne.n	8006f4a <_dtoa_r+0x68a>
 8006f30:	4b98      	ldr	r3, [pc, #608]	@ (8007194 <_dtoa_r+0x8d4>)
 8006f32:	2200      	movs	r2, #0
 8006f34:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006f38:	f7f9 fb5e 	bl	80005f8 <__aeabi_dmul>
 8006f3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006f40:	f7f9 fde0 	bl	8000b04 <__aeabi_dcmpge>
 8006f44:	2800      	cmp	r0, #0
 8006f46:	f000 8157 	beq.w	80071f8 <_dtoa_r+0x938>
 8006f4a:	2400      	movs	r4, #0
 8006f4c:	4625      	mov	r5, r4
 8006f4e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006f50:	43db      	mvns	r3, r3
 8006f52:	9304      	str	r3, [sp, #16]
 8006f54:	4656      	mov	r6, sl
 8006f56:	2700      	movs	r7, #0
 8006f58:	4621      	mov	r1, r4
 8006f5a:	4658      	mov	r0, fp
 8006f5c:	f000 fbb4 	bl	80076c8 <_Bfree>
 8006f60:	2d00      	cmp	r5, #0
 8006f62:	d0dc      	beq.n	8006f1e <_dtoa_r+0x65e>
 8006f64:	b12f      	cbz	r7, 8006f72 <_dtoa_r+0x6b2>
 8006f66:	42af      	cmp	r7, r5
 8006f68:	d003      	beq.n	8006f72 <_dtoa_r+0x6b2>
 8006f6a:	4639      	mov	r1, r7
 8006f6c:	4658      	mov	r0, fp
 8006f6e:	f000 fbab 	bl	80076c8 <_Bfree>
 8006f72:	4629      	mov	r1, r5
 8006f74:	4658      	mov	r0, fp
 8006f76:	f000 fba7 	bl	80076c8 <_Bfree>
 8006f7a:	e7d0      	b.n	8006f1e <_dtoa_r+0x65e>
 8006f7c:	9704      	str	r7, [sp, #16]
 8006f7e:	4633      	mov	r3, r6
 8006f80:	461e      	mov	r6, r3
 8006f82:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006f86:	2a39      	cmp	r2, #57	@ 0x39
 8006f88:	d107      	bne.n	8006f9a <_dtoa_r+0x6da>
 8006f8a:	459a      	cmp	sl, r3
 8006f8c:	d1f8      	bne.n	8006f80 <_dtoa_r+0x6c0>
 8006f8e:	9a04      	ldr	r2, [sp, #16]
 8006f90:	3201      	adds	r2, #1
 8006f92:	9204      	str	r2, [sp, #16]
 8006f94:	2230      	movs	r2, #48	@ 0x30
 8006f96:	f88a 2000 	strb.w	r2, [sl]
 8006f9a:	781a      	ldrb	r2, [r3, #0]
 8006f9c:	3201      	adds	r2, #1
 8006f9e:	701a      	strb	r2, [r3, #0]
 8006fa0:	e7bd      	b.n	8006f1e <_dtoa_r+0x65e>
 8006fa2:	4b7b      	ldr	r3, [pc, #492]	@ (8007190 <_dtoa_r+0x8d0>)
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	f7f9 fb27 	bl	80005f8 <__aeabi_dmul>
 8006faa:	2200      	movs	r2, #0
 8006fac:	2300      	movs	r3, #0
 8006fae:	4604      	mov	r4, r0
 8006fb0:	460d      	mov	r5, r1
 8006fb2:	f7f9 fd89 	bl	8000ac8 <__aeabi_dcmpeq>
 8006fb6:	2800      	cmp	r0, #0
 8006fb8:	f43f aebb 	beq.w	8006d32 <_dtoa_r+0x472>
 8006fbc:	e6f0      	b.n	8006da0 <_dtoa_r+0x4e0>
 8006fbe:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006fc0:	2a00      	cmp	r2, #0
 8006fc2:	f000 80db 	beq.w	800717c <_dtoa_r+0x8bc>
 8006fc6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006fc8:	2a01      	cmp	r2, #1
 8006fca:	f300 80bf 	bgt.w	800714c <_dtoa_r+0x88c>
 8006fce:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8006fd0:	2a00      	cmp	r2, #0
 8006fd2:	f000 80b7 	beq.w	8007144 <_dtoa_r+0x884>
 8006fd6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006fda:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006fdc:	4646      	mov	r6, r8
 8006fde:	9a08      	ldr	r2, [sp, #32]
 8006fe0:	2101      	movs	r1, #1
 8006fe2:	441a      	add	r2, r3
 8006fe4:	4658      	mov	r0, fp
 8006fe6:	4498      	add	r8, r3
 8006fe8:	9208      	str	r2, [sp, #32]
 8006fea:	f000 fc6b 	bl	80078c4 <__i2b>
 8006fee:	4605      	mov	r5, r0
 8006ff0:	b15e      	cbz	r6, 800700a <_dtoa_r+0x74a>
 8006ff2:	9b08      	ldr	r3, [sp, #32]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	dd08      	ble.n	800700a <_dtoa_r+0x74a>
 8006ff8:	42b3      	cmp	r3, r6
 8006ffa:	9a08      	ldr	r2, [sp, #32]
 8006ffc:	bfa8      	it	ge
 8006ffe:	4633      	movge	r3, r6
 8007000:	eba8 0803 	sub.w	r8, r8, r3
 8007004:	1af6      	subs	r6, r6, r3
 8007006:	1ad3      	subs	r3, r2, r3
 8007008:	9308      	str	r3, [sp, #32]
 800700a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800700c:	b1f3      	cbz	r3, 800704c <_dtoa_r+0x78c>
 800700e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007010:	2b00      	cmp	r3, #0
 8007012:	f000 80b7 	beq.w	8007184 <_dtoa_r+0x8c4>
 8007016:	b18c      	cbz	r4, 800703c <_dtoa_r+0x77c>
 8007018:	4629      	mov	r1, r5
 800701a:	4622      	mov	r2, r4
 800701c:	4658      	mov	r0, fp
 800701e:	f000 fd11 	bl	8007a44 <__pow5mult>
 8007022:	464a      	mov	r2, r9
 8007024:	4601      	mov	r1, r0
 8007026:	4605      	mov	r5, r0
 8007028:	4658      	mov	r0, fp
 800702a:	f000 fc61 	bl	80078f0 <__multiply>
 800702e:	4649      	mov	r1, r9
 8007030:	9004      	str	r0, [sp, #16]
 8007032:	4658      	mov	r0, fp
 8007034:	f000 fb48 	bl	80076c8 <_Bfree>
 8007038:	9b04      	ldr	r3, [sp, #16]
 800703a:	4699      	mov	r9, r3
 800703c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800703e:	1b1a      	subs	r2, r3, r4
 8007040:	d004      	beq.n	800704c <_dtoa_r+0x78c>
 8007042:	4649      	mov	r1, r9
 8007044:	4658      	mov	r0, fp
 8007046:	f000 fcfd 	bl	8007a44 <__pow5mult>
 800704a:	4681      	mov	r9, r0
 800704c:	2101      	movs	r1, #1
 800704e:	4658      	mov	r0, fp
 8007050:	f000 fc38 	bl	80078c4 <__i2b>
 8007054:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007056:	4604      	mov	r4, r0
 8007058:	2b00      	cmp	r3, #0
 800705a:	f000 81cf 	beq.w	80073fc <_dtoa_r+0xb3c>
 800705e:	461a      	mov	r2, r3
 8007060:	4601      	mov	r1, r0
 8007062:	4658      	mov	r0, fp
 8007064:	f000 fcee 	bl	8007a44 <__pow5mult>
 8007068:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800706a:	2b01      	cmp	r3, #1
 800706c:	4604      	mov	r4, r0
 800706e:	f300 8095 	bgt.w	800719c <_dtoa_r+0x8dc>
 8007072:	9b02      	ldr	r3, [sp, #8]
 8007074:	2b00      	cmp	r3, #0
 8007076:	f040 8087 	bne.w	8007188 <_dtoa_r+0x8c8>
 800707a:	9b03      	ldr	r3, [sp, #12]
 800707c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007080:	2b00      	cmp	r3, #0
 8007082:	f040 8089 	bne.w	8007198 <_dtoa_r+0x8d8>
 8007086:	9b03      	ldr	r3, [sp, #12]
 8007088:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800708c:	0d1b      	lsrs	r3, r3, #20
 800708e:	051b      	lsls	r3, r3, #20
 8007090:	b12b      	cbz	r3, 800709e <_dtoa_r+0x7de>
 8007092:	9b08      	ldr	r3, [sp, #32]
 8007094:	3301      	adds	r3, #1
 8007096:	9308      	str	r3, [sp, #32]
 8007098:	f108 0801 	add.w	r8, r8, #1
 800709c:	2301      	movs	r3, #1
 800709e:	930a      	str	r3, [sp, #40]	@ 0x28
 80070a0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	f000 81b0 	beq.w	8007408 <_dtoa_r+0xb48>
 80070a8:	6923      	ldr	r3, [r4, #16]
 80070aa:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80070ae:	6918      	ldr	r0, [r3, #16]
 80070b0:	f000 fbbc 	bl	800782c <__hi0bits>
 80070b4:	f1c0 0020 	rsb	r0, r0, #32
 80070b8:	9b08      	ldr	r3, [sp, #32]
 80070ba:	4418      	add	r0, r3
 80070bc:	f010 001f 	ands.w	r0, r0, #31
 80070c0:	d077      	beq.n	80071b2 <_dtoa_r+0x8f2>
 80070c2:	f1c0 0320 	rsb	r3, r0, #32
 80070c6:	2b04      	cmp	r3, #4
 80070c8:	dd6b      	ble.n	80071a2 <_dtoa_r+0x8e2>
 80070ca:	9b08      	ldr	r3, [sp, #32]
 80070cc:	f1c0 001c 	rsb	r0, r0, #28
 80070d0:	4403      	add	r3, r0
 80070d2:	4480      	add	r8, r0
 80070d4:	4406      	add	r6, r0
 80070d6:	9308      	str	r3, [sp, #32]
 80070d8:	f1b8 0f00 	cmp.w	r8, #0
 80070dc:	dd05      	ble.n	80070ea <_dtoa_r+0x82a>
 80070de:	4649      	mov	r1, r9
 80070e0:	4642      	mov	r2, r8
 80070e2:	4658      	mov	r0, fp
 80070e4:	f000 fd08 	bl	8007af8 <__lshift>
 80070e8:	4681      	mov	r9, r0
 80070ea:	9b08      	ldr	r3, [sp, #32]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	dd05      	ble.n	80070fc <_dtoa_r+0x83c>
 80070f0:	4621      	mov	r1, r4
 80070f2:	461a      	mov	r2, r3
 80070f4:	4658      	mov	r0, fp
 80070f6:	f000 fcff 	bl	8007af8 <__lshift>
 80070fa:	4604      	mov	r4, r0
 80070fc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d059      	beq.n	80071b6 <_dtoa_r+0x8f6>
 8007102:	4621      	mov	r1, r4
 8007104:	4648      	mov	r0, r9
 8007106:	f000 fd63 	bl	8007bd0 <__mcmp>
 800710a:	2800      	cmp	r0, #0
 800710c:	da53      	bge.n	80071b6 <_dtoa_r+0x8f6>
 800710e:	1e7b      	subs	r3, r7, #1
 8007110:	9304      	str	r3, [sp, #16]
 8007112:	4649      	mov	r1, r9
 8007114:	2300      	movs	r3, #0
 8007116:	220a      	movs	r2, #10
 8007118:	4658      	mov	r0, fp
 800711a:	f000 faf7 	bl	800770c <__multadd>
 800711e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007120:	4681      	mov	r9, r0
 8007122:	2b00      	cmp	r3, #0
 8007124:	f000 8172 	beq.w	800740c <_dtoa_r+0xb4c>
 8007128:	2300      	movs	r3, #0
 800712a:	4629      	mov	r1, r5
 800712c:	220a      	movs	r2, #10
 800712e:	4658      	mov	r0, fp
 8007130:	f000 faec 	bl	800770c <__multadd>
 8007134:	9b00      	ldr	r3, [sp, #0]
 8007136:	2b00      	cmp	r3, #0
 8007138:	4605      	mov	r5, r0
 800713a:	dc67      	bgt.n	800720c <_dtoa_r+0x94c>
 800713c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800713e:	2b02      	cmp	r3, #2
 8007140:	dc41      	bgt.n	80071c6 <_dtoa_r+0x906>
 8007142:	e063      	b.n	800720c <_dtoa_r+0x94c>
 8007144:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007146:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800714a:	e746      	b.n	8006fda <_dtoa_r+0x71a>
 800714c:	9b07      	ldr	r3, [sp, #28]
 800714e:	1e5c      	subs	r4, r3, #1
 8007150:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007152:	42a3      	cmp	r3, r4
 8007154:	bfbf      	itttt	lt
 8007156:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007158:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800715a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800715c:	1ae3      	sublt	r3, r4, r3
 800715e:	bfb4      	ite	lt
 8007160:	18d2      	addlt	r2, r2, r3
 8007162:	1b1c      	subge	r4, r3, r4
 8007164:	9b07      	ldr	r3, [sp, #28]
 8007166:	bfbc      	itt	lt
 8007168:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800716a:	2400      	movlt	r4, #0
 800716c:	2b00      	cmp	r3, #0
 800716e:	bfb5      	itete	lt
 8007170:	eba8 0603 	sublt.w	r6, r8, r3
 8007174:	9b07      	ldrge	r3, [sp, #28]
 8007176:	2300      	movlt	r3, #0
 8007178:	4646      	movge	r6, r8
 800717a:	e730      	b.n	8006fde <_dtoa_r+0x71e>
 800717c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800717e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007180:	4646      	mov	r6, r8
 8007182:	e735      	b.n	8006ff0 <_dtoa_r+0x730>
 8007184:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007186:	e75c      	b.n	8007042 <_dtoa_r+0x782>
 8007188:	2300      	movs	r3, #0
 800718a:	e788      	b.n	800709e <_dtoa_r+0x7de>
 800718c:	3fe00000 	.word	0x3fe00000
 8007190:	40240000 	.word	0x40240000
 8007194:	40140000 	.word	0x40140000
 8007198:	9b02      	ldr	r3, [sp, #8]
 800719a:	e780      	b.n	800709e <_dtoa_r+0x7de>
 800719c:	2300      	movs	r3, #0
 800719e:	930a      	str	r3, [sp, #40]	@ 0x28
 80071a0:	e782      	b.n	80070a8 <_dtoa_r+0x7e8>
 80071a2:	d099      	beq.n	80070d8 <_dtoa_r+0x818>
 80071a4:	9a08      	ldr	r2, [sp, #32]
 80071a6:	331c      	adds	r3, #28
 80071a8:	441a      	add	r2, r3
 80071aa:	4498      	add	r8, r3
 80071ac:	441e      	add	r6, r3
 80071ae:	9208      	str	r2, [sp, #32]
 80071b0:	e792      	b.n	80070d8 <_dtoa_r+0x818>
 80071b2:	4603      	mov	r3, r0
 80071b4:	e7f6      	b.n	80071a4 <_dtoa_r+0x8e4>
 80071b6:	9b07      	ldr	r3, [sp, #28]
 80071b8:	9704      	str	r7, [sp, #16]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	dc20      	bgt.n	8007200 <_dtoa_r+0x940>
 80071be:	9300      	str	r3, [sp, #0]
 80071c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80071c2:	2b02      	cmp	r3, #2
 80071c4:	dd1e      	ble.n	8007204 <_dtoa_r+0x944>
 80071c6:	9b00      	ldr	r3, [sp, #0]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	f47f aec0 	bne.w	8006f4e <_dtoa_r+0x68e>
 80071ce:	4621      	mov	r1, r4
 80071d0:	2205      	movs	r2, #5
 80071d2:	4658      	mov	r0, fp
 80071d4:	f000 fa9a 	bl	800770c <__multadd>
 80071d8:	4601      	mov	r1, r0
 80071da:	4604      	mov	r4, r0
 80071dc:	4648      	mov	r0, r9
 80071de:	f000 fcf7 	bl	8007bd0 <__mcmp>
 80071e2:	2800      	cmp	r0, #0
 80071e4:	f77f aeb3 	ble.w	8006f4e <_dtoa_r+0x68e>
 80071e8:	4656      	mov	r6, sl
 80071ea:	2331      	movs	r3, #49	@ 0x31
 80071ec:	f806 3b01 	strb.w	r3, [r6], #1
 80071f0:	9b04      	ldr	r3, [sp, #16]
 80071f2:	3301      	adds	r3, #1
 80071f4:	9304      	str	r3, [sp, #16]
 80071f6:	e6ae      	b.n	8006f56 <_dtoa_r+0x696>
 80071f8:	9c07      	ldr	r4, [sp, #28]
 80071fa:	9704      	str	r7, [sp, #16]
 80071fc:	4625      	mov	r5, r4
 80071fe:	e7f3      	b.n	80071e8 <_dtoa_r+0x928>
 8007200:	9b07      	ldr	r3, [sp, #28]
 8007202:	9300      	str	r3, [sp, #0]
 8007204:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007206:	2b00      	cmp	r3, #0
 8007208:	f000 8104 	beq.w	8007414 <_dtoa_r+0xb54>
 800720c:	2e00      	cmp	r6, #0
 800720e:	dd05      	ble.n	800721c <_dtoa_r+0x95c>
 8007210:	4629      	mov	r1, r5
 8007212:	4632      	mov	r2, r6
 8007214:	4658      	mov	r0, fp
 8007216:	f000 fc6f 	bl	8007af8 <__lshift>
 800721a:	4605      	mov	r5, r0
 800721c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800721e:	2b00      	cmp	r3, #0
 8007220:	d05a      	beq.n	80072d8 <_dtoa_r+0xa18>
 8007222:	6869      	ldr	r1, [r5, #4]
 8007224:	4658      	mov	r0, fp
 8007226:	f000 fa0f 	bl	8007648 <_Balloc>
 800722a:	4606      	mov	r6, r0
 800722c:	b928      	cbnz	r0, 800723a <_dtoa_r+0x97a>
 800722e:	4b84      	ldr	r3, [pc, #528]	@ (8007440 <_dtoa_r+0xb80>)
 8007230:	4602      	mov	r2, r0
 8007232:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007236:	f7ff bb5a 	b.w	80068ee <_dtoa_r+0x2e>
 800723a:	692a      	ldr	r2, [r5, #16]
 800723c:	3202      	adds	r2, #2
 800723e:	0092      	lsls	r2, r2, #2
 8007240:	f105 010c 	add.w	r1, r5, #12
 8007244:	300c      	adds	r0, #12
 8007246:	f001 ff75 	bl	8009134 <memcpy>
 800724a:	2201      	movs	r2, #1
 800724c:	4631      	mov	r1, r6
 800724e:	4658      	mov	r0, fp
 8007250:	f000 fc52 	bl	8007af8 <__lshift>
 8007254:	f10a 0301 	add.w	r3, sl, #1
 8007258:	9307      	str	r3, [sp, #28]
 800725a:	9b00      	ldr	r3, [sp, #0]
 800725c:	4453      	add	r3, sl
 800725e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007260:	9b02      	ldr	r3, [sp, #8]
 8007262:	f003 0301 	and.w	r3, r3, #1
 8007266:	462f      	mov	r7, r5
 8007268:	930a      	str	r3, [sp, #40]	@ 0x28
 800726a:	4605      	mov	r5, r0
 800726c:	9b07      	ldr	r3, [sp, #28]
 800726e:	4621      	mov	r1, r4
 8007270:	3b01      	subs	r3, #1
 8007272:	4648      	mov	r0, r9
 8007274:	9300      	str	r3, [sp, #0]
 8007276:	f7ff fa9b 	bl	80067b0 <quorem>
 800727a:	4639      	mov	r1, r7
 800727c:	9002      	str	r0, [sp, #8]
 800727e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007282:	4648      	mov	r0, r9
 8007284:	f000 fca4 	bl	8007bd0 <__mcmp>
 8007288:	462a      	mov	r2, r5
 800728a:	9008      	str	r0, [sp, #32]
 800728c:	4621      	mov	r1, r4
 800728e:	4658      	mov	r0, fp
 8007290:	f000 fcba 	bl	8007c08 <__mdiff>
 8007294:	68c2      	ldr	r2, [r0, #12]
 8007296:	4606      	mov	r6, r0
 8007298:	bb02      	cbnz	r2, 80072dc <_dtoa_r+0xa1c>
 800729a:	4601      	mov	r1, r0
 800729c:	4648      	mov	r0, r9
 800729e:	f000 fc97 	bl	8007bd0 <__mcmp>
 80072a2:	4602      	mov	r2, r0
 80072a4:	4631      	mov	r1, r6
 80072a6:	4658      	mov	r0, fp
 80072a8:	920e      	str	r2, [sp, #56]	@ 0x38
 80072aa:	f000 fa0d 	bl	80076c8 <_Bfree>
 80072ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80072b0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80072b2:	9e07      	ldr	r6, [sp, #28]
 80072b4:	ea43 0102 	orr.w	r1, r3, r2
 80072b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80072ba:	4319      	orrs	r1, r3
 80072bc:	d110      	bne.n	80072e0 <_dtoa_r+0xa20>
 80072be:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80072c2:	d029      	beq.n	8007318 <_dtoa_r+0xa58>
 80072c4:	9b08      	ldr	r3, [sp, #32]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	dd02      	ble.n	80072d0 <_dtoa_r+0xa10>
 80072ca:	9b02      	ldr	r3, [sp, #8]
 80072cc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80072d0:	9b00      	ldr	r3, [sp, #0]
 80072d2:	f883 8000 	strb.w	r8, [r3]
 80072d6:	e63f      	b.n	8006f58 <_dtoa_r+0x698>
 80072d8:	4628      	mov	r0, r5
 80072da:	e7bb      	b.n	8007254 <_dtoa_r+0x994>
 80072dc:	2201      	movs	r2, #1
 80072de:	e7e1      	b.n	80072a4 <_dtoa_r+0x9e4>
 80072e0:	9b08      	ldr	r3, [sp, #32]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	db04      	blt.n	80072f0 <_dtoa_r+0xa30>
 80072e6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80072e8:	430b      	orrs	r3, r1
 80072ea:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80072ec:	430b      	orrs	r3, r1
 80072ee:	d120      	bne.n	8007332 <_dtoa_r+0xa72>
 80072f0:	2a00      	cmp	r2, #0
 80072f2:	dded      	ble.n	80072d0 <_dtoa_r+0xa10>
 80072f4:	4649      	mov	r1, r9
 80072f6:	2201      	movs	r2, #1
 80072f8:	4658      	mov	r0, fp
 80072fa:	f000 fbfd 	bl	8007af8 <__lshift>
 80072fe:	4621      	mov	r1, r4
 8007300:	4681      	mov	r9, r0
 8007302:	f000 fc65 	bl	8007bd0 <__mcmp>
 8007306:	2800      	cmp	r0, #0
 8007308:	dc03      	bgt.n	8007312 <_dtoa_r+0xa52>
 800730a:	d1e1      	bne.n	80072d0 <_dtoa_r+0xa10>
 800730c:	f018 0f01 	tst.w	r8, #1
 8007310:	d0de      	beq.n	80072d0 <_dtoa_r+0xa10>
 8007312:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007316:	d1d8      	bne.n	80072ca <_dtoa_r+0xa0a>
 8007318:	9a00      	ldr	r2, [sp, #0]
 800731a:	2339      	movs	r3, #57	@ 0x39
 800731c:	7013      	strb	r3, [r2, #0]
 800731e:	4633      	mov	r3, r6
 8007320:	461e      	mov	r6, r3
 8007322:	3b01      	subs	r3, #1
 8007324:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007328:	2a39      	cmp	r2, #57	@ 0x39
 800732a:	d052      	beq.n	80073d2 <_dtoa_r+0xb12>
 800732c:	3201      	adds	r2, #1
 800732e:	701a      	strb	r2, [r3, #0]
 8007330:	e612      	b.n	8006f58 <_dtoa_r+0x698>
 8007332:	2a00      	cmp	r2, #0
 8007334:	dd07      	ble.n	8007346 <_dtoa_r+0xa86>
 8007336:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800733a:	d0ed      	beq.n	8007318 <_dtoa_r+0xa58>
 800733c:	9a00      	ldr	r2, [sp, #0]
 800733e:	f108 0301 	add.w	r3, r8, #1
 8007342:	7013      	strb	r3, [r2, #0]
 8007344:	e608      	b.n	8006f58 <_dtoa_r+0x698>
 8007346:	9b07      	ldr	r3, [sp, #28]
 8007348:	9a07      	ldr	r2, [sp, #28]
 800734a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800734e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007350:	4293      	cmp	r3, r2
 8007352:	d028      	beq.n	80073a6 <_dtoa_r+0xae6>
 8007354:	4649      	mov	r1, r9
 8007356:	2300      	movs	r3, #0
 8007358:	220a      	movs	r2, #10
 800735a:	4658      	mov	r0, fp
 800735c:	f000 f9d6 	bl	800770c <__multadd>
 8007360:	42af      	cmp	r7, r5
 8007362:	4681      	mov	r9, r0
 8007364:	f04f 0300 	mov.w	r3, #0
 8007368:	f04f 020a 	mov.w	r2, #10
 800736c:	4639      	mov	r1, r7
 800736e:	4658      	mov	r0, fp
 8007370:	d107      	bne.n	8007382 <_dtoa_r+0xac2>
 8007372:	f000 f9cb 	bl	800770c <__multadd>
 8007376:	4607      	mov	r7, r0
 8007378:	4605      	mov	r5, r0
 800737a:	9b07      	ldr	r3, [sp, #28]
 800737c:	3301      	adds	r3, #1
 800737e:	9307      	str	r3, [sp, #28]
 8007380:	e774      	b.n	800726c <_dtoa_r+0x9ac>
 8007382:	f000 f9c3 	bl	800770c <__multadd>
 8007386:	4629      	mov	r1, r5
 8007388:	4607      	mov	r7, r0
 800738a:	2300      	movs	r3, #0
 800738c:	220a      	movs	r2, #10
 800738e:	4658      	mov	r0, fp
 8007390:	f000 f9bc 	bl	800770c <__multadd>
 8007394:	4605      	mov	r5, r0
 8007396:	e7f0      	b.n	800737a <_dtoa_r+0xaba>
 8007398:	9b00      	ldr	r3, [sp, #0]
 800739a:	2b00      	cmp	r3, #0
 800739c:	bfcc      	ite	gt
 800739e:	461e      	movgt	r6, r3
 80073a0:	2601      	movle	r6, #1
 80073a2:	4456      	add	r6, sl
 80073a4:	2700      	movs	r7, #0
 80073a6:	4649      	mov	r1, r9
 80073a8:	2201      	movs	r2, #1
 80073aa:	4658      	mov	r0, fp
 80073ac:	f000 fba4 	bl	8007af8 <__lshift>
 80073b0:	4621      	mov	r1, r4
 80073b2:	4681      	mov	r9, r0
 80073b4:	f000 fc0c 	bl	8007bd0 <__mcmp>
 80073b8:	2800      	cmp	r0, #0
 80073ba:	dcb0      	bgt.n	800731e <_dtoa_r+0xa5e>
 80073bc:	d102      	bne.n	80073c4 <_dtoa_r+0xb04>
 80073be:	f018 0f01 	tst.w	r8, #1
 80073c2:	d1ac      	bne.n	800731e <_dtoa_r+0xa5e>
 80073c4:	4633      	mov	r3, r6
 80073c6:	461e      	mov	r6, r3
 80073c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80073cc:	2a30      	cmp	r2, #48	@ 0x30
 80073ce:	d0fa      	beq.n	80073c6 <_dtoa_r+0xb06>
 80073d0:	e5c2      	b.n	8006f58 <_dtoa_r+0x698>
 80073d2:	459a      	cmp	sl, r3
 80073d4:	d1a4      	bne.n	8007320 <_dtoa_r+0xa60>
 80073d6:	9b04      	ldr	r3, [sp, #16]
 80073d8:	3301      	adds	r3, #1
 80073da:	9304      	str	r3, [sp, #16]
 80073dc:	2331      	movs	r3, #49	@ 0x31
 80073de:	f88a 3000 	strb.w	r3, [sl]
 80073e2:	e5b9      	b.n	8006f58 <_dtoa_r+0x698>
 80073e4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80073e6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8007444 <_dtoa_r+0xb84>
 80073ea:	b11b      	cbz	r3, 80073f4 <_dtoa_r+0xb34>
 80073ec:	f10a 0308 	add.w	r3, sl, #8
 80073f0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80073f2:	6013      	str	r3, [r2, #0]
 80073f4:	4650      	mov	r0, sl
 80073f6:	b019      	add	sp, #100	@ 0x64
 80073f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073fe:	2b01      	cmp	r3, #1
 8007400:	f77f ae37 	ble.w	8007072 <_dtoa_r+0x7b2>
 8007404:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007406:	930a      	str	r3, [sp, #40]	@ 0x28
 8007408:	2001      	movs	r0, #1
 800740a:	e655      	b.n	80070b8 <_dtoa_r+0x7f8>
 800740c:	9b00      	ldr	r3, [sp, #0]
 800740e:	2b00      	cmp	r3, #0
 8007410:	f77f aed6 	ble.w	80071c0 <_dtoa_r+0x900>
 8007414:	4656      	mov	r6, sl
 8007416:	4621      	mov	r1, r4
 8007418:	4648      	mov	r0, r9
 800741a:	f7ff f9c9 	bl	80067b0 <quorem>
 800741e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007422:	f806 8b01 	strb.w	r8, [r6], #1
 8007426:	9b00      	ldr	r3, [sp, #0]
 8007428:	eba6 020a 	sub.w	r2, r6, sl
 800742c:	4293      	cmp	r3, r2
 800742e:	ddb3      	ble.n	8007398 <_dtoa_r+0xad8>
 8007430:	4649      	mov	r1, r9
 8007432:	2300      	movs	r3, #0
 8007434:	220a      	movs	r2, #10
 8007436:	4658      	mov	r0, fp
 8007438:	f000 f968 	bl	800770c <__multadd>
 800743c:	4681      	mov	r9, r0
 800743e:	e7ea      	b.n	8007416 <_dtoa_r+0xb56>
 8007440:	08009f7d 	.word	0x08009f7d
 8007444:	08009f01 	.word	0x08009f01

08007448 <_free_r>:
 8007448:	b538      	push	{r3, r4, r5, lr}
 800744a:	4605      	mov	r5, r0
 800744c:	2900      	cmp	r1, #0
 800744e:	d041      	beq.n	80074d4 <_free_r+0x8c>
 8007450:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007454:	1f0c      	subs	r4, r1, #4
 8007456:	2b00      	cmp	r3, #0
 8007458:	bfb8      	it	lt
 800745a:	18e4      	addlt	r4, r4, r3
 800745c:	f000 f8e8 	bl	8007630 <__malloc_lock>
 8007460:	4a1d      	ldr	r2, [pc, #116]	@ (80074d8 <_free_r+0x90>)
 8007462:	6813      	ldr	r3, [r2, #0]
 8007464:	b933      	cbnz	r3, 8007474 <_free_r+0x2c>
 8007466:	6063      	str	r3, [r4, #4]
 8007468:	6014      	str	r4, [r2, #0]
 800746a:	4628      	mov	r0, r5
 800746c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007470:	f000 b8e4 	b.w	800763c <__malloc_unlock>
 8007474:	42a3      	cmp	r3, r4
 8007476:	d908      	bls.n	800748a <_free_r+0x42>
 8007478:	6820      	ldr	r0, [r4, #0]
 800747a:	1821      	adds	r1, r4, r0
 800747c:	428b      	cmp	r3, r1
 800747e:	bf01      	itttt	eq
 8007480:	6819      	ldreq	r1, [r3, #0]
 8007482:	685b      	ldreq	r3, [r3, #4]
 8007484:	1809      	addeq	r1, r1, r0
 8007486:	6021      	streq	r1, [r4, #0]
 8007488:	e7ed      	b.n	8007466 <_free_r+0x1e>
 800748a:	461a      	mov	r2, r3
 800748c:	685b      	ldr	r3, [r3, #4]
 800748e:	b10b      	cbz	r3, 8007494 <_free_r+0x4c>
 8007490:	42a3      	cmp	r3, r4
 8007492:	d9fa      	bls.n	800748a <_free_r+0x42>
 8007494:	6811      	ldr	r1, [r2, #0]
 8007496:	1850      	adds	r0, r2, r1
 8007498:	42a0      	cmp	r0, r4
 800749a:	d10b      	bne.n	80074b4 <_free_r+0x6c>
 800749c:	6820      	ldr	r0, [r4, #0]
 800749e:	4401      	add	r1, r0
 80074a0:	1850      	adds	r0, r2, r1
 80074a2:	4283      	cmp	r3, r0
 80074a4:	6011      	str	r1, [r2, #0]
 80074a6:	d1e0      	bne.n	800746a <_free_r+0x22>
 80074a8:	6818      	ldr	r0, [r3, #0]
 80074aa:	685b      	ldr	r3, [r3, #4]
 80074ac:	6053      	str	r3, [r2, #4]
 80074ae:	4408      	add	r0, r1
 80074b0:	6010      	str	r0, [r2, #0]
 80074b2:	e7da      	b.n	800746a <_free_r+0x22>
 80074b4:	d902      	bls.n	80074bc <_free_r+0x74>
 80074b6:	230c      	movs	r3, #12
 80074b8:	602b      	str	r3, [r5, #0]
 80074ba:	e7d6      	b.n	800746a <_free_r+0x22>
 80074bc:	6820      	ldr	r0, [r4, #0]
 80074be:	1821      	adds	r1, r4, r0
 80074c0:	428b      	cmp	r3, r1
 80074c2:	bf04      	itt	eq
 80074c4:	6819      	ldreq	r1, [r3, #0]
 80074c6:	685b      	ldreq	r3, [r3, #4]
 80074c8:	6063      	str	r3, [r4, #4]
 80074ca:	bf04      	itt	eq
 80074cc:	1809      	addeq	r1, r1, r0
 80074ce:	6021      	streq	r1, [r4, #0]
 80074d0:	6054      	str	r4, [r2, #4]
 80074d2:	e7ca      	b.n	800746a <_free_r+0x22>
 80074d4:	bd38      	pop	{r3, r4, r5, pc}
 80074d6:	bf00      	nop
 80074d8:	200004b8 	.word	0x200004b8

080074dc <malloc>:
 80074dc:	4b02      	ldr	r3, [pc, #8]	@ (80074e8 <malloc+0xc>)
 80074de:	4601      	mov	r1, r0
 80074e0:	6818      	ldr	r0, [r3, #0]
 80074e2:	f000 b825 	b.w	8007530 <_malloc_r>
 80074e6:	bf00      	nop
 80074e8:	20000018 	.word	0x20000018

080074ec <sbrk_aligned>:
 80074ec:	b570      	push	{r4, r5, r6, lr}
 80074ee:	4e0f      	ldr	r6, [pc, #60]	@ (800752c <sbrk_aligned+0x40>)
 80074f0:	460c      	mov	r4, r1
 80074f2:	6831      	ldr	r1, [r6, #0]
 80074f4:	4605      	mov	r5, r0
 80074f6:	b911      	cbnz	r1, 80074fe <sbrk_aligned+0x12>
 80074f8:	f001 fe0c 	bl	8009114 <_sbrk_r>
 80074fc:	6030      	str	r0, [r6, #0]
 80074fe:	4621      	mov	r1, r4
 8007500:	4628      	mov	r0, r5
 8007502:	f001 fe07 	bl	8009114 <_sbrk_r>
 8007506:	1c43      	adds	r3, r0, #1
 8007508:	d103      	bne.n	8007512 <sbrk_aligned+0x26>
 800750a:	f04f 34ff 	mov.w	r4, #4294967295
 800750e:	4620      	mov	r0, r4
 8007510:	bd70      	pop	{r4, r5, r6, pc}
 8007512:	1cc4      	adds	r4, r0, #3
 8007514:	f024 0403 	bic.w	r4, r4, #3
 8007518:	42a0      	cmp	r0, r4
 800751a:	d0f8      	beq.n	800750e <sbrk_aligned+0x22>
 800751c:	1a21      	subs	r1, r4, r0
 800751e:	4628      	mov	r0, r5
 8007520:	f001 fdf8 	bl	8009114 <_sbrk_r>
 8007524:	3001      	adds	r0, #1
 8007526:	d1f2      	bne.n	800750e <sbrk_aligned+0x22>
 8007528:	e7ef      	b.n	800750a <sbrk_aligned+0x1e>
 800752a:	bf00      	nop
 800752c:	200004b4 	.word	0x200004b4

08007530 <_malloc_r>:
 8007530:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007534:	1ccd      	adds	r5, r1, #3
 8007536:	f025 0503 	bic.w	r5, r5, #3
 800753a:	3508      	adds	r5, #8
 800753c:	2d0c      	cmp	r5, #12
 800753e:	bf38      	it	cc
 8007540:	250c      	movcc	r5, #12
 8007542:	2d00      	cmp	r5, #0
 8007544:	4606      	mov	r6, r0
 8007546:	db01      	blt.n	800754c <_malloc_r+0x1c>
 8007548:	42a9      	cmp	r1, r5
 800754a:	d904      	bls.n	8007556 <_malloc_r+0x26>
 800754c:	230c      	movs	r3, #12
 800754e:	6033      	str	r3, [r6, #0]
 8007550:	2000      	movs	r0, #0
 8007552:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007556:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800762c <_malloc_r+0xfc>
 800755a:	f000 f869 	bl	8007630 <__malloc_lock>
 800755e:	f8d8 3000 	ldr.w	r3, [r8]
 8007562:	461c      	mov	r4, r3
 8007564:	bb44      	cbnz	r4, 80075b8 <_malloc_r+0x88>
 8007566:	4629      	mov	r1, r5
 8007568:	4630      	mov	r0, r6
 800756a:	f7ff ffbf 	bl	80074ec <sbrk_aligned>
 800756e:	1c43      	adds	r3, r0, #1
 8007570:	4604      	mov	r4, r0
 8007572:	d158      	bne.n	8007626 <_malloc_r+0xf6>
 8007574:	f8d8 4000 	ldr.w	r4, [r8]
 8007578:	4627      	mov	r7, r4
 800757a:	2f00      	cmp	r7, #0
 800757c:	d143      	bne.n	8007606 <_malloc_r+0xd6>
 800757e:	2c00      	cmp	r4, #0
 8007580:	d04b      	beq.n	800761a <_malloc_r+0xea>
 8007582:	6823      	ldr	r3, [r4, #0]
 8007584:	4639      	mov	r1, r7
 8007586:	4630      	mov	r0, r6
 8007588:	eb04 0903 	add.w	r9, r4, r3
 800758c:	f001 fdc2 	bl	8009114 <_sbrk_r>
 8007590:	4581      	cmp	r9, r0
 8007592:	d142      	bne.n	800761a <_malloc_r+0xea>
 8007594:	6821      	ldr	r1, [r4, #0]
 8007596:	1a6d      	subs	r5, r5, r1
 8007598:	4629      	mov	r1, r5
 800759a:	4630      	mov	r0, r6
 800759c:	f7ff ffa6 	bl	80074ec <sbrk_aligned>
 80075a0:	3001      	adds	r0, #1
 80075a2:	d03a      	beq.n	800761a <_malloc_r+0xea>
 80075a4:	6823      	ldr	r3, [r4, #0]
 80075a6:	442b      	add	r3, r5
 80075a8:	6023      	str	r3, [r4, #0]
 80075aa:	f8d8 3000 	ldr.w	r3, [r8]
 80075ae:	685a      	ldr	r2, [r3, #4]
 80075b0:	bb62      	cbnz	r2, 800760c <_malloc_r+0xdc>
 80075b2:	f8c8 7000 	str.w	r7, [r8]
 80075b6:	e00f      	b.n	80075d8 <_malloc_r+0xa8>
 80075b8:	6822      	ldr	r2, [r4, #0]
 80075ba:	1b52      	subs	r2, r2, r5
 80075bc:	d420      	bmi.n	8007600 <_malloc_r+0xd0>
 80075be:	2a0b      	cmp	r2, #11
 80075c0:	d917      	bls.n	80075f2 <_malloc_r+0xc2>
 80075c2:	1961      	adds	r1, r4, r5
 80075c4:	42a3      	cmp	r3, r4
 80075c6:	6025      	str	r5, [r4, #0]
 80075c8:	bf18      	it	ne
 80075ca:	6059      	strne	r1, [r3, #4]
 80075cc:	6863      	ldr	r3, [r4, #4]
 80075ce:	bf08      	it	eq
 80075d0:	f8c8 1000 	streq.w	r1, [r8]
 80075d4:	5162      	str	r2, [r4, r5]
 80075d6:	604b      	str	r3, [r1, #4]
 80075d8:	4630      	mov	r0, r6
 80075da:	f000 f82f 	bl	800763c <__malloc_unlock>
 80075de:	f104 000b 	add.w	r0, r4, #11
 80075e2:	1d23      	adds	r3, r4, #4
 80075e4:	f020 0007 	bic.w	r0, r0, #7
 80075e8:	1ac2      	subs	r2, r0, r3
 80075ea:	bf1c      	itt	ne
 80075ec:	1a1b      	subne	r3, r3, r0
 80075ee:	50a3      	strne	r3, [r4, r2]
 80075f0:	e7af      	b.n	8007552 <_malloc_r+0x22>
 80075f2:	6862      	ldr	r2, [r4, #4]
 80075f4:	42a3      	cmp	r3, r4
 80075f6:	bf0c      	ite	eq
 80075f8:	f8c8 2000 	streq.w	r2, [r8]
 80075fc:	605a      	strne	r2, [r3, #4]
 80075fe:	e7eb      	b.n	80075d8 <_malloc_r+0xa8>
 8007600:	4623      	mov	r3, r4
 8007602:	6864      	ldr	r4, [r4, #4]
 8007604:	e7ae      	b.n	8007564 <_malloc_r+0x34>
 8007606:	463c      	mov	r4, r7
 8007608:	687f      	ldr	r7, [r7, #4]
 800760a:	e7b6      	b.n	800757a <_malloc_r+0x4a>
 800760c:	461a      	mov	r2, r3
 800760e:	685b      	ldr	r3, [r3, #4]
 8007610:	42a3      	cmp	r3, r4
 8007612:	d1fb      	bne.n	800760c <_malloc_r+0xdc>
 8007614:	2300      	movs	r3, #0
 8007616:	6053      	str	r3, [r2, #4]
 8007618:	e7de      	b.n	80075d8 <_malloc_r+0xa8>
 800761a:	230c      	movs	r3, #12
 800761c:	6033      	str	r3, [r6, #0]
 800761e:	4630      	mov	r0, r6
 8007620:	f000 f80c 	bl	800763c <__malloc_unlock>
 8007624:	e794      	b.n	8007550 <_malloc_r+0x20>
 8007626:	6005      	str	r5, [r0, #0]
 8007628:	e7d6      	b.n	80075d8 <_malloc_r+0xa8>
 800762a:	bf00      	nop
 800762c:	200004b8 	.word	0x200004b8

08007630 <__malloc_lock>:
 8007630:	4801      	ldr	r0, [pc, #4]	@ (8007638 <__malloc_lock+0x8>)
 8007632:	f7ff b8b4 	b.w	800679e <__retarget_lock_acquire_recursive>
 8007636:	bf00      	nop
 8007638:	200004b0 	.word	0x200004b0

0800763c <__malloc_unlock>:
 800763c:	4801      	ldr	r0, [pc, #4]	@ (8007644 <__malloc_unlock+0x8>)
 800763e:	f7ff b8af 	b.w	80067a0 <__retarget_lock_release_recursive>
 8007642:	bf00      	nop
 8007644:	200004b0 	.word	0x200004b0

08007648 <_Balloc>:
 8007648:	b570      	push	{r4, r5, r6, lr}
 800764a:	69c6      	ldr	r6, [r0, #28]
 800764c:	4604      	mov	r4, r0
 800764e:	460d      	mov	r5, r1
 8007650:	b976      	cbnz	r6, 8007670 <_Balloc+0x28>
 8007652:	2010      	movs	r0, #16
 8007654:	f7ff ff42 	bl	80074dc <malloc>
 8007658:	4602      	mov	r2, r0
 800765a:	61e0      	str	r0, [r4, #28]
 800765c:	b920      	cbnz	r0, 8007668 <_Balloc+0x20>
 800765e:	4b18      	ldr	r3, [pc, #96]	@ (80076c0 <_Balloc+0x78>)
 8007660:	4818      	ldr	r0, [pc, #96]	@ (80076c4 <_Balloc+0x7c>)
 8007662:	216b      	movs	r1, #107	@ 0x6b
 8007664:	f001 fd7c 	bl	8009160 <__assert_func>
 8007668:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800766c:	6006      	str	r6, [r0, #0]
 800766e:	60c6      	str	r6, [r0, #12]
 8007670:	69e6      	ldr	r6, [r4, #28]
 8007672:	68f3      	ldr	r3, [r6, #12]
 8007674:	b183      	cbz	r3, 8007698 <_Balloc+0x50>
 8007676:	69e3      	ldr	r3, [r4, #28]
 8007678:	68db      	ldr	r3, [r3, #12]
 800767a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800767e:	b9b8      	cbnz	r0, 80076b0 <_Balloc+0x68>
 8007680:	2101      	movs	r1, #1
 8007682:	fa01 f605 	lsl.w	r6, r1, r5
 8007686:	1d72      	adds	r2, r6, #5
 8007688:	0092      	lsls	r2, r2, #2
 800768a:	4620      	mov	r0, r4
 800768c:	f001 fd86 	bl	800919c <_calloc_r>
 8007690:	b160      	cbz	r0, 80076ac <_Balloc+0x64>
 8007692:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007696:	e00e      	b.n	80076b6 <_Balloc+0x6e>
 8007698:	2221      	movs	r2, #33	@ 0x21
 800769a:	2104      	movs	r1, #4
 800769c:	4620      	mov	r0, r4
 800769e:	f001 fd7d 	bl	800919c <_calloc_r>
 80076a2:	69e3      	ldr	r3, [r4, #28]
 80076a4:	60f0      	str	r0, [r6, #12]
 80076a6:	68db      	ldr	r3, [r3, #12]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d1e4      	bne.n	8007676 <_Balloc+0x2e>
 80076ac:	2000      	movs	r0, #0
 80076ae:	bd70      	pop	{r4, r5, r6, pc}
 80076b0:	6802      	ldr	r2, [r0, #0]
 80076b2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80076b6:	2300      	movs	r3, #0
 80076b8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80076bc:	e7f7      	b.n	80076ae <_Balloc+0x66>
 80076be:	bf00      	nop
 80076c0:	08009f0e 	.word	0x08009f0e
 80076c4:	08009f8e 	.word	0x08009f8e

080076c8 <_Bfree>:
 80076c8:	b570      	push	{r4, r5, r6, lr}
 80076ca:	69c6      	ldr	r6, [r0, #28]
 80076cc:	4605      	mov	r5, r0
 80076ce:	460c      	mov	r4, r1
 80076d0:	b976      	cbnz	r6, 80076f0 <_Bfree+0x28>
 80076d2:	2010      	movs	r0, #16
 80076d4:	f7ff ff02 	bl	80074dc <malloc>
 80076d8:	4602      	mov	r2, r0
 80076da:	61e8      	str	r0, [r5, #28]
 80076dc:	b920      	cbnz	r0, 80076e8 <_Bfree+0x20>
 80076de:	4b09      	ldr	r3, [pc, #36]	@ (8007704 <_Bfree+0x3c>)
 80076e0:	4809      	ldr	r0, [pc, #36]	@ (8007708 <_Bfree+0x40>)
 80076e2:	218f      	movs	r1, #143	@ 0x8f
 80076e4:	f001 fd3c 	bl	8009160 <__assert_func>
 80076e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80076ec:	6006      	str	r6, [r0, #0]
 80076ee:	60c6      	str	r6, [r0, #12]
 80076f0:	b13c      	cbz	r4, 8007702 <_Bfree+0x3a>
 80076f2:	69eb      	ldr	r3, [r5, #28]
 80076f4:	6862      	ldr	r2, [r4, #4]
 80076f6:	68db      	ldr	r3, [r3, #12]
 80076f8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80076fc:	6021      	str	r1, [r4, #0]
 80076fe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007702:	bd70      	pop	{r4, r5, r6, pc}
 8007704:	08009f0e 	.word	0x08009f0e
 8007708:	08009f8e 	.word	0x08009f8e

0800770c <__multadd>:
 800770c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007710:	690d      	ldr	r5, [r1, #16]
 8007712:	4607      	mov	r7, r0
 8007714:	460c      	mov	r4, r1
 8007716:	461e      	mov	r6, r3
 8007718:	f101 0c14 	add.w	ip, r1, #20
 800771c:	2000      	movs	r0, #0
 800771e:	f8dc 3000 	ldr.w	r3, [ip]
 8007722:	b299      	uxth	r1, r3
 8007724:	fb02 6101 	mla	r1, r2, r1, r6
 8007728:	0c1e      	lsrs	r6, r3, #16
 800772a:	0c0b      	lsrs	r3, r1, #16
 800772c:	fb02 3306 	mla	r3, r2, r6, r3
 8007730:	b289      	uxth	r1, r1
 8007732:	3001      	adds	r0, #1
 8007734:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007738:	4285      	cmp	r5, r0
 800773a:	f84c 1b04 	str.w	r1, [ip], #4
 800773e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007742:	dcec      	bgt.n	800771e <__multadd+0x12>
 8007744:	b30e      	cbz	r6, 800778a <__multadd+0x7e>
 8007746:	68a3      	ldr	r3, [r4, #8]
 8007748:	42ab      	cmp	r3, r5
 800774a:	dc19      	bgt.n	8007780 <__multadd+0x74>
 800774c:	6861      	ldr	r1, [r4, #4]
 800774e:	4638      	mov	r0, r7
 8007750:	3101      	adds	r1, #1
 8007752:	f7ff ff79 	bl	8007648 <_Balloc>
 8007756:	4680      	mov	r8, r0
 8007758:	b928      	cbnz	r0, 8007766 <__multadd+0x5a>
 800775a:	4602      	mov	r2, r0
 800775c:	4b0c      	ldr	r3, [pc, #48]	@ (8007790 <__multadd+0x84>)
 800775e:	480d      	ldr	r0, [pc, #52]	@ (8007794 <__multadd+0x88>)
 8007760:	21ba      	movs	r1, #186	@ 0xba
 8007762:	f001 fcfd 	bl	8009160 <__assert_func>
 8007766:	6922      	ldr	r2, [r4, #16]
 8007768:	3202      	adds	r2, #2
 800776a:	f104 010c 	add.w	r1, r4, #12
 800776e:	0092      	lsls	r2, r2, #2
 8007770:	300c      	adds	r0, #12
 8007772:	f001 fcdf 	bl	8009134 <memcpy>
 8007776:	4621      	mov	r1, r4
 8007778:	4638      	mov	r0, r7
 800777a:	f7ff ffa5 	bl	80076c8 <_Bfree>
 800777e:	4644      	mov	r4, r8
 8007780:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007784:	3501      	adds	r5, #1
 8007786:	615e      	str	r6, [r3, #20]
 8007788:	6125      	str	r5, [r4, #16]
 800778a:	4620      	mov	r0, r4
 800778c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007790:	08009f7d 	.word	0x08009f7d
 8007794:	08009f8e 	.word	0x08009f8e

08007798 <__s2b>:
 8007798:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800779c:	460c      	mov	r4, r1
 800779e:	4615      	mov	r5, r2
 80077a0:	461f      	mov	r7, r3
 80077a2:	2209      	movs	r2, #9
 80077a4:	3308      	adds	r3, #8
 80077a6:	4606      	mov	r6, r0
 80077a8:	fb93 f3f2 	sdiv	r3, r3, r2
 80077ac:	2100      	movs	r1, #0
 80077ae:	2201      	movs	r2, #1
 80077b0:	429a      	cmp	r2, r3
 80077b2:	db09      	blt.n	80077c8 <__s2b+0x30>
 80077b4:	4630      	mov	r0, r6
 80077b6:	f7ff ff47 	bl	8007648 <_Balloc>
 80077ba:	b940      	cbnz	r0, 80077ce <__s2b+0x36>
 80077bc:	4602      	mov	r2, r0
 80077be:	4b19      	ldr	r3, [pc, #100]	@ (8007824 <__s2b+0x8c>)
 80077c0:	4819      	ldr	r0, [pc, #100]	@ (8007828 <__s2b+0x90>)
 80077c2:	21d3      	movs	r1, #211	@ 0xd3
 80077c4:	f001 fccc 	bl	8009160 <__assert_func>
 80077c8:	0052      	lsls	r2, r2, #1
 80077ca:	3101      	adds	r1, #1
 80077cc:	e7f0      	b.n	80077b0 <__s2b+0x18>
 80077ce:	9b08      	ldr	r3, [sp, #32]
 80077d0:	6143      	str	r3, [r0, #20]
 80077d2:	2d09      	cmp	r5, #9
 80077d4:	f04f 0301 	mov.w	r3, #1
 80077d8:	6103      	str	r3, [r0, #16]
 80077da:	dd16      	ble.n	800780a <__s2b+0x72>
 80077dc:	f104 0909 	add.w	r9, r4, #9
 80077e0:	46c8      	mov	r8, r9
 80077e2:	442c      	add	r4, r5
 80077e4:	f818 3b01 	ldrb.w	r3, [r8], #1
 80077e8:	4601      	mov	r1, r0
 80077ea:	3b30      	subs	r3, #48	@ 0x30
 80077ec:	220a      	movs	r2, #10
 80077ee:	4630      	mov	r0, r6
 80077f0:	f7ff ff8c 	bl	800770c <__multadd>
 80077f4:	45a0      	cmp	r8, r4
 80077f6:	d1f5      	bne.n	80077e4 <__s2b+0x4c>
 80077f8:	f1a5 0408 	sub.w	r4, r5, #8
 80077fc:	444c      	add	r4, r9
 80077fe:	1b2d      	subs	r5, r5, r4
 8007800:	1963      	adds	r3, r4, r5
 8007802:	42bb      	cmp	r3, r7
 8007804:	db04      	blt.n	8007810 <__s2b+0x78>
 8007806:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800780a:	340a      	adds	r4, #10
 800780c:	2509      	movs	r5, #9
 800780e:	e7f6      	b.n	80077fe <__s2b+0x66>
 8007810:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007814:	4601      	mov	r1, r0
 8007816:	3b30      	subs	r3, #48	@ 0x30
 8007818:	220a      	movs	r2, #10
 800781a:	4630      	mov	r0, r6
 800781c:	f7ff ff76 	bl	800770c <__multadd>
 8007820:	e7ee      	b.n	8007800 <__s2b+0x68>
 8007822:	bf00      	nop
 8007824:	08009f7d 	.word	0x08009f7d
 8007828:	08009f8e 	.word	0x08009f8e

0800782c <__hi0bits>:
 800782c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007830:	4603      	mov	r3, r0
 8007832:	bf36      	itet	cc
 8007834:	0403      	lslcc	r3, r0, #16
 8007836:	2000      	movcs	r0, #0
 8007838:	2010      	movcc	r0, #16
 800783a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800783e:	bf3c      	itt	cc
 8007840:	021b      	lslcc	r3, r3, #8
 8007842:	3008      	addcc	r0, #8
 8007844:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007848:	bf3c      	itt	cc
 800784a:	011b      	lslcc	r3, r3, #4
 800784c:	3004      	addcc	r0, #4
 800784e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007852:	bf3c      	itt	cc
 8007854:	009b      	lslcc	r3, r3, #2
 8007856:	3002      	addcc	r0, #2
 8007858:	2b00      	cmp	r3, #0
 800785a:	db05      	blt.n	8007868 <__hi0bits+0x3c>
 800785c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007860:	f100 0001 	add.w	r0, r0, #1
 8007864:	bf08      	it	eq
 8007866:	2020      	moveq	r0, #32
 8007868:	4770      	bx	lr

0800786a <__lo0bits>:
 800786a:	6803      	ldr	r3, [r0, #0]
 800786c:	4602      	mov	r2, r0
 800786e:	f013 0007 	ands.w	r0, r3, #7
 8007872:	d00b      	beq.n	800788c <__lo0bits+0x22>
 8007874:	07d9      	lsls	r1, r3, #31
 8007876:	d421      	bmi.n	80078bc <__lo0bits+0x52>
 8007878:	0798      	lsls	r0, r3, #30
 800787a:	bf49      	itett	mi
 800787c:	085b      	lsrmi	r3, r3, #1
 800787e:	089b      	lsrpl	r3, r3, #2
 8007880:	2001      	movmi	r0, #1
 8007882:	6013      	strmi	r3, [r2, #0]
 8007884:	bf5c      	itt	pl
 8007886:	6013      	strpl	r3, [r2, #0]
 8007888:	2002      	movpl	r0, #2
 800788a:	4770      	bx	lr
 800788c:	b299      	uxth	r1, r3
 800788e:	b909      	cbnz	r1, 8007894 <__lo0bits+0x2a>
 8007890:	0c1b      	lsrs	r3, r3, #16
 8007892:	2010      	movs	r0, #16
 8007894:	b2d9      	uxtb	r1, r3
 8007896:	b909      	cbnz	r1, 800789c <__lo0bits+0x32>
 8007898:	3008      	adds	r0, #8
 800789a:	0a1b      	lsrs	r3, r3, #8
 800789c:	0719      	lsls	r1, r3, #28
 800789e:	bf04      	itt	eq
 80078a0:	091b      	lsreq	r3, r3, #4
 80078a2:	3004      	addeq	r0, #4
 80078a4:	0799      	lsls	r1, r3, #30
 80078a6:	bf04      	itt	eq
 80078a8:	089b      	lsreq	r3, r3, #2
 80078aa:	3002      	addeq	r0, #2
 80078ac:	07d9      	lsls	r1, r3, #31
 80078ae:	d403      	bmi.n	80078b8 <__lo0bits+0x4e>
 80078b0:	085b      	lsrs	r3, r3, #1
 80078b2:	f100 0001 	add.w	r0, r0, #1
 80078b6:	d003      	beq.n	80078c0 <__lo0bits+0x56>
 80078b8:	6013      	str	r3, [r2, #0]
 80078ba:	4770      	bx	lr
 80078bc:	2000      	movs	r0, #0
 80078be:	4770      	bx	lr
 80078c0:	2020      	movs	r0, #32
 80078c2:	4770      	bx	lr

080078c4 <__i2b>:
 80078c4:	b510      	push	{r4, lr}
 80078c6:	460c      	mov	r4, r1
 80078c8:	2101      	movs	r1, #1
 80078ca:	f7ff febd 	bl	8007648 <_Balloc>
 80078ce:	4602      	mov	r2, r0
 80078d0:	b928      	cbnz	r0, 80078de <__i2b+0x1a>
 80078d2:	4b05      	ldr	r3, [pc, #20]	@ (80078e8 <__i2b+0x24>)
 80078d4:	4805      	ldr	r0, [pc, #20]	@ (80078ec <__i2b+0x28>)
 80078d6:	f240 1145 	movw	r1, #325	@ 0x145
 80078da:	f001 fc41 	bl	8009160 <__assert_func>
 80078de:	2301      	movs	r3, #1
 80078e0:	6144      	str	r4, [r0, #20]
 80078e2:	6103      	str	r3, [r0, #16]
 80078e4:	bd10      	pop	{r4, pc}
 80078e6:	bf00      	nop
 80078e8:	08009f7d 	.word	0x08009f7d
 80078ec:	08009f8e 	.word	0x08009f8e

080078f0 <__multiply>:
 80078f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078f4:	4614      	mov	r4, r2
 80078f6:	690a      	ldr	r2, [r1, #16]
 80078f8:	6923      	ldr	r3, [r4, #16]
 80078fa:	429a      	cmp	r2, r3
 80078fc:	bfa8      	it	ge
 80078fe:	4623      	movge	r3, r4
 8007900:	460f      	mov	r7, r1
 8007902:	bfa4      	itt	ge
 8007904:	460c      	movge	r4, r1
 8007906:	461f      	movge	r7, r3
 8007908:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800790c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8007910:	68a3      	ldr	r3, [r4, #8]
 8007912:	6861      	ldr	r1, [r4, #4]
 8007914:	eb0a 0609 	add.w	r6, sl, r9
 8007918:	42b3      	cmp	r3, r6
 800791a:	b085      	sub	sp, #20
 800791c:	bfb8      	it	lt
 800791e:	3101      	addlt	r1, #1
 8007920:	f7ff fe92 	bl	8007648 <_Balloc>
 8007924:	b930      	cbnz	r0, 8007934 <__multiply+0x44>
 8007926:	4602      	mov	r2, r0
 8007928:	4b44      	ldr	r3, [pc, #272]	@ (8007a3c <__multiply+0x14c>)
 800792a:	4845      	ldr	r0, [pc, #276]	@ (8007a40 <__multiply+0x150>)
 800792c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007930:	f001 fc16 	bl	8009160 <__assert_func>
 8007934:	f100 0514 	add.w	r5, r0, #20
 8007938:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800793c:	462b      	mov	r3, r5
 800793e:	2200      	movs	r2, #0
 8007940:	4543      	cmp	r3, r8
 8007942:	d321      	bcc.n	8007988 <__multiply+0x98>
 8007944:	f107 0114 	add.w	r1, r7, #20
 8007948:	f104 0214 	add.w	r2, r4, #20
 800794c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8007950:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8007954:	9302      	str	r3, [sp, #8]
 8007956:	1b13      	subs	r3, r2, r4
 8007958:	3b15      	subs	r3, #21
 800795a:	f023 0303 	bic.w	r3, r3, #3
 800795e:	3304      	adds	r3, #4
 8007960:	f104 0715 	add.w	r7, r4, #21
 8007964:	42ba      	cmp	r2, r7
 8007966:	bf38      	it	cc
 8007968:	2304      	movcc	r3, #4
 800796a:	9301      	str	r3, [sp, #4]
 800796c:	9b02      	ldr	r3, [sp, #8]
 800796e:	9103      	str	r1, [sp, #12]
 8007970:	428b      	cmp	r3, r1
 8007972:	d80c      	bhi.n	800798e <__multiply+0x9e>
 8007974:	2e00      	cmp	r6, #0
 8007976:	dd03      	ble.n	8007980 <__multiply+0x90>
 8007978:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800797c:	2b00      	cmp	r3, #0
 800797e:	d05b      	beq.n	8007a38 <__multiply+0x148>
 8007980:	6106      	str	r6, [r0, #16]
 8007982:	b005      	add	sp, #20
 8007984:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007988:	f843 2b04 	str.w	r2, [r3], #4
 800798c:	e7d8      	b.n	8007940 <__multiply+0x50>
 800798e:	f8b1 a000 	ldrh.w	sl, [r1]
 8007992:	f1ba 0f00 	cmp.w	sl, #0
 8007996:	d024      	beq.n	80079e2 <__multiply+0xf2>
 8007998:	f104 0e14 	add.w	lr, r4, #20
 800799c:	46a9      	mov	r9, r5
 800799e:	f04f 0c00 	mov.w	ip, #0
 80079a2:	f85e 7b04 	ldr.w	r7, [lr], #4
 80079a6:	f8d9 3000 	ldr.w	r3, [r9]
 80079aa:	fa1f fb87 	uxth.w	fp, r7
 80079ae:	b29b      	uxth	r3, r3
 80079b0:	fb0a 330b 	mla	r3, sl, fp, r3
 80079b4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80079b8:	f8d9 7000 	ldr.w	r7, [r9]
 80079bc:	4463      	add	r3, ip
 80079be:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80079c2:	fb0a c70b 	mla	r7, sl, fp, ip
 80079c6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80079ca:	b29b      	uxth	r3, r3
 80079cc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80079d0:	4572      	cmp	r2, lr
 80079d2:	f849 3b04 	str.w	r3, [r9], #4
 80079d6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80079da:	d8e2      	bhi.n	80079a2 <__multiply+0xb2>
 80079dc:	9b01      	ldr	r3, [sp, #4]
 80079de:	f845 c003 	str.w	ip, [r5, r3]
 80079e2:	9b03      	ldr	r3, [sp, #12]
 80079e4:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80079e8:	3104      	adds	r1, #4
 80079ea:	f1b9 0f00 	cmp.w	r9, #0
 80079ee:	d021      	beq.n	8007a34 <__multiply+0x144>
 80079f0:	682b      	ldr	r3, [r5, #0]
 80079f2:	f104 0c14 	add.w	ip, r4, #20
 80079f6:	46ae      	mov	lr, r5
 80079f8:	f04f 0a00 	mov.w	sl, #0
 80079fc:	f8bc b000 	ldrh.w	fp, [ip]
 8007a00:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8007a04:	fb09 770b 	mla	r7, r9, fp, r7
 8007a08:	4457      	add	r7, sl
 8007a0a:	b29b      	uxth	r3, r3
 8007a0c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007a10:	f84e 3b04 	str.w	r3, [lr], #4
 8007a14:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007a18:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007a1c:	f8be 3000 	ldrh.w	r3, [lr]
 8007a20:	fb09 330a 	mla	r3, r9, sl, r3
 8007a24:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8007a28:	4562      	cmp	r2, ip
 8007a2a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007a2e:	d8e5      	bhi.n	80079fc <__multiply+0x10c>
 8007a30:	9f01      	ldr	r7, [sp, #4]
 8007a32:	51eb      	str	r3, [r5, r7]
 8007a34:	3504      	adds	r5, #4
 8007a36:	e799      	b.n	800796c <__multiply+0x7c>
 8007a38:	3e01      	subs	r6, #1
 8007a3a:	e79b      	b.n	8007974 <__multiply+0x84>
 8007a3c:	08009f7d 	.word	0x08009f7d
 8007a40:	08009f8e 	.word	0x08009f8e

08007a44 <__pow5mult>:
 8007a44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a48:	4615      	mov	r5, r2
 8007a4a:	f012 0203 	ands.w	r2, r2, #3
 8007a4e:	4607      	mov	r7, r0
 8007a50:	460e      	mov	r6, r1
 8007a52:	d007      	beq.n	8007a64 <__pow5mult+0x20>
 8007a54:	4c25      	ldr	r4, [pc, #148]	@ (8007aec <__pow5mult+0xa8>)
 8007a56:	3a01      	subs	r2, #1
 8007a58:	2300      	movs	r3, #0
 8007a5a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007a5e:	f7ff fe55 	bl	800770c <__multadd>
 8007a62:	4606      	mov	r6, r0
 8007a64:	10ad      	asrs	r5, r5, #2
 8007a66:	d03d      	beq.n	8007ae4 <__pow5mult+0xa0>
 8007a68:	69fc      	ldr	r4, [r7, #28]
 8007a6a:	b97c      	cbnz	r4, 8007a8c <__pow5mult+0x48>
 8007a6c:	2010      	movs	r0, #16
 8007a6e:	f7ff fd35 	bl	80074dc <malloc>
 8007a72:	4602      	mov	r2, r0
 8007a74:	61f8      	str	r0, [r7, #28]
 8007a76:	b928      	cbnz	r0, 8007a84 <__pow5mult+0x40>
 8007a78:	4b1d      	ldr	r3, [pc, #116]	@ (8007af0 <__pow5mult+0xac>)
 8007a7a:	481e      	ldr	r0, [pc, #120]	@ (8007af4 <__pow5mult+0xb0>)
 8007a7c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007a80:	f001 fb6e 	bl	8009160 <__assert_func>
 8007a84:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007a88:	6004      	str	r4, [r0, #0]
 8007a8a:	60c4      	str	r4, [r0, #12]
 8007a8c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007a90:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007a94:	b94c      	cbnz	r4, 8007aaa <__pow5mult+0x66>
 8007a96:	f240 2171 	movw	r1, #625	@ 0x271
 8007a9a:	4638      	mov	r0, r7
 8007a9c:	f7ff ff12 	bl	80078c4 <__i2b>
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	f8c8 0008 	str.w	r0, [r8, #8]
 8007aa6:	4604      	mov	r4, r0
 8007aa8:	6003      	str	r3, [r0, #0]
 8007aaa:	f04f 0900 	mov.w	r9, #0
 8007aae:	07eb      	lsls	r3, r5, #31
 8007ab0:	d50a      	bpl.n	8007ac8 <__pow5mult+0x84>
 8007ab2:	4631      	mov	r1, r6
 8007ab4:	4622      	mov	r2, r4
 8007ab6:	4638      	mov	r0, r7
 8007ab8:	f7ff ff1a 	bl	80078f0 <__multiply>
 8007abc:	4631      	mov	r1, r6
 8007abe:	4680      	mov	r8, r0
 8007ac0:	4638      	mov	r0, r7
 8007ac2:	f7ff fe01 	bl	80076c8 <_Bfree>
 8007ac6:	4646      	mov	r6, r8
 8007ac8:	106d      	asrs	r5, r5, #1
 8007aca:	d00b      	beq.n	8007ae4 <__pow5mult+0xa0>
 8007acc:	6820      	ldr	r0, [r4, #0]
 8007ace:	b938      	cbnz	r0, 8007ae0 <__pow5mult+0x9c>
 8007ad0:	4622      	mov	r2, r4
 8007ad2:	4621      	mov	r1, r4
 8007ad4:	4638      	mov	r0, r7
 8007ad6:	f7ff ff0b 	bl	80078f0 <__multiply>
 8007ada:	6020      	str	r0, [r4, #0]
 8007adc:	f8c0 9000 	str.w	r9, [r0]
 8007ae0:	4604      	mov	r4, r0
 8007ae2:	e7e4      	b.n	8007aae <__pow5mult+0x6a>
 8007ae4:	4630      	mov	r0, r6
 8007ae6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007aea:	bf00      	nop
 8007aec:	08009fe8 	.word	0x08009fe8
 8007af0:	08009f0e 	.word	0x08009f0e
 8007af4:	08009f8e 	.word	0x08009f8e

08007af8 <__lshift>:
 8007af8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007afc:	460c      	mov	r4, r1
 8007afe:	6849      	ldr	r1, [r1, #4]
 8007b00:	6923      	ldr	r3, [r4, #16]
 8007b02:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007b06:	68a3      	ldr	r3, [r4, #8]
 8007b08:	4607      	mov	r7, r0
 8007b0a:	4691      	mov	r9, r2
 8007b0c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007b10:	f108 0601 	add.w	r6, r8, #1
 8007b14:	42b3      	cmp	r3, r6
 8007b16:	db0b      	blt.n	8007b30 <__lshift+0x38>
 8007b18:	4638      	mov	r0, r7
 8007b1a:	f7ff fd95 	bl	8007648 <_Balloc>
 8007b1e:	4605      	mov	r5, r0
 8007b20:	b948      	cbnz	r0, 8007b36 <__lshift+0x3e>
 8007b22:	4602      	mov	r2, r0
 8007b24:	4b28      	ldr	r3, [pc, #160]	@ (8007bc8 <__lshift+0xd0>)
 8007b26:	4829      	ldr	r0, [pc, #164]	@ (8007bcc <__lshift+0xd4>)
 8007b28:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007b2c:	f001 fb18 	bl	8009160 <__assert_func>
 8007b30:	3101      	adds	r1, #1
 8007b32:	005b      	lsls	r3, r3, #1
 8007b34:	e7ee      	b.n	8007b14 <__lshift+0x1c>
 8007b36:	2300      	movs	r3, #0
 8007b38:	f100 0114 	add.w	r1, r0, #20
 8007b3c:	f100 0210 	add.w	r2, r0, #16
 8007b40:	4618      	mov	r0, r3
 8007b42:	4553      	cmp	r3, sl
 8007b44:	db33      	blt.n	8007bae <__lshift+0xb6>
 8007b46:	6920      	ldr	r0, [r4, #16]
 8007b48:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007b4c:	f104 0314 	add.w	r3, r4, #20
 8007b50:	f019 091f 	ands.w	r9, r9, #31
 8007b54:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007b58:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007b5c:	d02b      	beq.n	8007bb6 <__lshift+0xbe>
 8007b5e:	f1c9 0e20 	rsb	lr, r9, #32
 8007b62:	468a      	mov	sl, r1
 8007b64:	2200      	movs	r2, #0
 8007b66:	6818      	ldr	r0, [r3, #0]
 8007b68:	fa00 f009 	lsl.w	r0, r0, r9
 8007b6c:	4310      	orrs	r0, r2
 8007b6e:	f84a 0b04 	str.w	r0, [sl], #4
 8007b72:	f853 2b04 	ldr.w	r2, [r3], #4
 8007b76:	459c      	cmp	ip, r3
 8007b78:	fa22 f20e 	lsr.w	r2, r2, lr
 8007b7c:	d8f3      	bhi.n	8007b66 <__lshift+0x6e>
 8007b7e:	ebac 0304 	sub.w	r3, ip, r4
 8007b82:	3b15      	subs	r3, #21
 8007b84:	f023 0303 	bic.w	r3, r3, #3
 8007b88:	3304      	adds	r3, #4
 8007b8a:	f104 0015 	add.w	r0, r4, #21
 8007b8e:	4584      	cmp	ip, r0
 8007b90:	bf38      	it	cc
 8007b92:	2304      	movcc	r3, #4
 8007b94:	50ca      	str	r2, [r1, r3]
 8007b96:	b10a      	cbz	r2, 8007b9c <__lshift+0xa4>
 8007b98:	f108 0602 	add.w	r6, r8, #2
 8007b9c:	3e01      	subs	r6, #1
 8007b9e:	4638      	mov	r0, r7
 8007ba0:	612e      	str	r6, [r5, #16]
 8007ba2:	4621      	mov	r1, r4
 8007ba4:	f7ff fd90 	bl	80076c8 <_Bfree>
 8007ba8:	4628      	mov	r0, r5
 8007baa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007bae:	f842 0f04 	str.w	r0, [r2, #4]!
 8007bb2:	3301      	adds	r3, #1
 8007bb4:	e7c5      	b.n	8007b42 <__lshift+0x4a>
 8007bb6:	3904      	subs	r1, #4
 8007bb8:	f853 2b04 	ldr.w	r2, [r3], #4
 8007bbc:	f841 2f04 	str.w	r2, [r1, #4]!
 8007bc0:	459c      	cmp	ip, r3
 8007bc2:	d8f9      	bhi.n	8007bb8 <__lshift+0xc0>
 8007bc4:	e7ea      	b.n	8007b9c <__lshift+0xa4>
 8007bc6:	bf00      	nop
 8007bc8:	08009f7d 	.word	0x08009f7d
 8007bcc:	08009f8e 	.word	0x08009f8e

08007bd0 <__mcmp>:
 8007bd0:	690a      	ldr	r2, [r1, #16]
 8007bd2:	4603      	mov	r3, r0
 8007bd4:	6900      	ldr	r0, [r0, #16]
 8007bd6:	1a80      	subs	r0, r0, r2
 8007bd8:	b530      	push	{r4, r5, lr}
 8007bda:	d10e      	bne.n	8007bfa <__mcmp+0x2a>
 8007bdc:	3314      	adds	r3, #20
 8007bde:	3114      	adds	r1, #20
 8007be0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007be4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007be8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007bec:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007bf0:	4295      	cmp	r5, r2
 8007bf2:	d003      	beq.n	8007bfc <__mcmp+0x2c>
 8007bf4:	d205      	bcs.n	8007c02 <__mcmp+0x32>
 8007bf6:	f04f 30ff 	mov.w	r0, #4294967295
 8007bfa:	bd30      	pop	{r4, r5, pc}
 8007bfc:	42a3      	cmp	r3, r4
 8007bfe:	d3f3      	bcc.n	8007be8 <__mcmp+0x18>
 8007c00:	e7fb      	b.n	8007bfa <__mcmp+0x2a>
 8007c02:	2001      	movs	r0, #1
 8007c04:	e7f9      	b.n	8007bfa <__mcmp+0x2a>
	...

08007c08 <__mdiff>:
 8007c08:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c0c:	4689      	mov	r9, r1
 8007c0e:	4606      	mov	r6, r0
 8007c10:	4611      	mov	r1, r2
 8007c12:	4648      	mov	r0, r9
 8007c14:	4614      	mov	r4, r2
 8007c16:	f7ff ffdb 	bl	8007bd0 <__mcmp>
 8007c1a:	1e05      	subs	r5, r0, #0
 8007c1c:	d112      	bne.n	8007c44 <__mdiff+0x3c>
 8007c1e:	4629      	mov	r1, r5
 8007c20:	4630      	mov	r0, r6
 8007c22:	f7ff fd11 	bl	8007648 <_Balloc>
 8007c26:	4602      	mov	r2, r0
 8007c28:	b928      	cbnz	r0, 8007c36 <__mdiff+0x2e>
 8007c2a:	4b3f      	ldr	r3, [pc, #252]	@ (8007d28 <__mdiff+0x120>)
 8007c2c:	f240 2137 	movw	r1, #567	@ 0x237
 8007c30:	483e      	ldr	r0, [pc, #248]	@ (8007d2c <__mdiff+0x124>)
 8007c32:	f001 fa95 	bl	8009160 <__assert_func>
 8007c36:	2301      	movs	r3, #1
 8007c38:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007c3c:	4610      	mov	r0, r2
 8007c3e:	b003      	add	sp, #12
 8007c40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c44:	bfbc      	itt	lt
 8007c46:	464b      	movlt	r3, r9
 8007c48:	46a1      	movlt	r9, r4
 8007c4a:	4630      	mov	r0, r6
 8007c4c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007c50:	bfba      	itte	lt
 8007c52:	461c      	movlt	r4, r3
 8007c54:	2501      	movlt	r5, #1
 8007c56:	2500      	movge	r5, #0
 8007c58:	f7ff fcf6 	bl	8007648 <_Balloc>
 8007c5c:	4602      	mov	r2, r0
 8007c5e:	b918      	cbnz	r0, 8007c68 <__mdiff+0x60>
 8007c60:	4b31      	ldr	r3, [pc, #196]	@ (8007d28 <__mdiff+0x120>)
 8007c62:	f240 2145 	movw	r1, #581	@ 0x245
 8007c66:	e7e3      	b.n	8007c30 <__mdiff+0x28>
 8007c68:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007c6c:	6926      	ldr	r6, [r4, #16]
 8007c6e:	60c5      	str	r5, [r0, #12]
 8007c70:	f109 0310 	add.w	r3, r9, #16
 8007c74:	f109 0514 	add.w	r5, r9, #20
 8007c78:	f104 0e14 	add.w	lr, r4, #20
 8007c7c:	f100 0b14 	add.w	fp, r0, #20
 8007c80:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007c84:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007c88:	9301      	str	r3, [sp, #4]
 8007c8a:	46d9      	mov	r9, fp
 8007c8c:	f04f 0c00 	mov.w	ip, #0
 8007c90:	9b01      	ldr	r3, [sp, #4]
 8007c92:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007c96:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007c9a:	9301      	str	r3, [sp, #4]
 8007c9c:	fa1f f38a 	uxth.w	r3, sl
 8007ca0:	4619      	mov	r1, r3
 8007ca2:	b283      	uxth	r3, r0
 8007ca4:	1acb      	subs	r3, r1, r3
 8007ca6:	0c00      	lsrs	r0, r0, #16
 8007ca8:	4463      	add	r3, ip
 8007caa:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007cae:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007cb2:	b29b      	uxth	r3, r3
 8007cb4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007cb8:	4576      	cmp	r6, lr
 8007cba:	f849 3b04 	str.w	r3, [r9], #4
 8007cbe:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007cc2:	d8e5      	bhi.n	8007c90 <__mdiff+0x88>
 8007cc4:	1b33      	subs	r3, r6, r4
 8007cc6:	3b15      	subs	r3, #21
 8007cc8:	f023 0303 	bic.w	r3, r3, #3
 8007ccc:	3415      	adds	r4, #21
 8007cce:	3304      	adds	r3, #4
 8007cd0:	42a6      	cmp	r6, r4
 8007cd2:	bf38      	it	cc
 8007cd4:	2304      	movcc	r3, #4
 8007cd6:	441d      	add	r5, r3
 8007cd8:	445b      	add	r3, fp
 8007cda:	461e      	mov	r6, r3
 8007cdc:	462c      	mov	r4, r5
 8007cde:	4544      	cmp	r4, r8
 8007ce0:	d30e      	bcc.n	8007d00 <__mdiff+0xf8>
 8007ce2:	f108 0103 	add.w	r1, r8, #3
 8007ce6:	1b49      	subs	r1, r1, r5
 8007ce8:	f021 0103 	bic.w	r1, r1, #3
 8007cec:	3d03      	subs	r5, #3
 8007cee:	45a8      	cmp	r8, r5
 8007cf0:	bf38      	it	cc
 8007cf2:	2100      	movcc	r1, #0
 8007cf4:	440b      	add	r3, r1
 8007cf6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007cfa:	b191      	cbz	r1, 8007d22 <__mdiff+0x11a>
 8007cfc:	6117      	str	r7, [r2, #16]
 8007cfe:	e79d      	b.n	8007c3c <__mdiff+0x34>
 8007d00:	f854 1b04 	ldr.w	r1, [r4], #4
 8007d04:	46e6      	mov	lr, ip
 8007d06:	0c08      	lsrs	r0, r1, #16
 8007d08:	fa1c fc81 	uxtah	ip, ip, r1
 8007d0c:	4471      	add	r1, lr
 8007d0e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007d12:	b289      	uxth	r1, r1
 8007d14:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007d18:	f846 1b04 	str.w	r1, [r6], #4
 8007d1c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007d20:	e7dd      	b.n	8007cde <__mdiff+0xd6>
 8007d22:	3f01      	subs	r7, #1
 8007d24:	e7e7      	b.n	8007cf6 <__mdiff+0xee>
 8007d26:	bf00      	nop
 8007d28:	08009f7d 	.word	0x08009f7d
 8007d2c:	08009f8e 	.word	0x08009f8e

08007d30 <__ulp>:
 8007d30:	b082      	sub	sp, #8
 8007d32:	ed8d 0b00 	vstr	d0, [sp]
 8007d36:	9a01      	ldr	r2, [sp, #4]
 8007d38:	4b0f      	ldr	r3, [pc, #60]	@ (8007d78 <__ulp+0x48>)
 8007d3a:	4013      	ands	r3, r2
 8007d3c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	dc08      	bgt.n	8007d56 <__ulp+0x26>
 8007d44:	425b      	negs	r3, r3
 8007d46:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8007d4a:	ea4f 5223 	mov.w	r2, r3, asr #20
 8007d4e:	da04      	bge.n	8007d5a <__ulp+0x2a>
 8007d50:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8007d54:	4113      	asrs	r3, r2
 8007d56:	2200      	movs	r2, #0
 8007d58:	e008      	b.n	8007d6c <__ulp+0x3c>
 8007d5a:	f1a2 0314 	sub.w	r3, r2, #20
 8007d5e:	2b1e      	cmp	r3, #30
 8007d60:	bfda      	itte	le
 8007d62:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8007d66:	40da      	lsrle	r2, r3
 8007d68:	2201      	movgt	r2, #1
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	4619      	mov	r1, r3
 8007d6e:	4610      	mov	r0, r2
 8007d70:	ec41 0b10 	vmov	d0, r0, r1
 8007d74:	b002      	add	sp, #8
 8007d76:	4770      	bx	lr
 8007d78:	7ff00000 	.word	0x7ff00000

08007d7c <__b2d>:
 8007d7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d80:	6906      	ldr	r6, [r0, #16]
 8007d82:	f100 0814 	add.w	r8, r0, #20
 8007d86:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8007d8a:	1f37      	subs	r7, r6, #4
 8007d8c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8007d90:	4610      	mov	r0, r2
 8007d92:	f7ff fd4b 	bl	800782c <__hi0bits>
 8007d96:	f1c0 0320 	rsb	r3, r0, #32
 8007d9a:	280a      	cmp	r0, #10
 8007d9c:	600b      	str	r3, [r1, #0]
 8007d9e:	491b      	ldr	r1, [pc, #108]	@ (8007e0c <__b2d+0x90>)
 8007da0:	dc15      	bgt.n	8007dce <__b2d+0x52>
 8007da2:	f1c0 0c0b 	rsb	ip, r0, #11
 8007da6:	fa22 f30c 	lsr.w	r3, r2, ip
 8007daa:	45b8      	cmp	r8, r7
 8007dac:	ea43 0501 	orr.w	r5, r3, r1
 8007db0:	bf34      	ite	cc
 8007db2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8007db6:	2300      	movcs	r3, #0
 8007db8:	3015      	adds	r0, #21
 8007dba:	fa02 f000 	lsl.w	r0, r2, r0
 8007dbe:	fa23 f30c 	lsr.w	r3, r3, ip
 8007dc2:	4303      	orrs	r3, r0
 8007dc4:	461c      	mov	r4, r3
 8007dc6:	ec45 4b10 	vmov	d0, r4, r5
 8007dca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007dce:	45b8      	cmp	r8, r7
 8007dd0:	bf3a      	itte	cc
 8007dd2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8007dd6:	f1a6 0708 	subcc.w	r7, r6, #8
 8007dda:	2300      	movcs	r3, #0
 8007ddc:	380b      	subs	r0, #11
 8007dde:	d012      	beq.n	8007e06 <__b2d+0x8a>
 8007de0:	f1c0 0120 	rsb	r1, r0, #32
 8007de4:	fa23 f401 	lsr.w	r4, r3, r1
 8007de8:	4082      	lsls	r2, r0
 8007dea:	4322      	orrs	r2, r4
 8007dec:	4547      	cmp	r7, r8
 8007dee:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8007df2:	bf8c      	ite	hi
 8007df4:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8007df8:	2200      	movls	r2, #0
 8007dfa:	4083      	lsls	r3, r0
 8007dfc:	40ca      	lsrs	r2, r1
 8007dfe:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8007e02:	4313      	orrs	r3, r2
 8007e04:	e7de      	b.n	8007dc4 <__b2d+0x48>
 8007e06:	ea42 0501 	orr.w	r5, r2, r1
 8007e0a:	e7db      	b.n	8007dc4 <__b2d+0x48>
 8007e0c:	3ff00000 	.word	0x3ff00000

08007e10 <__d2b>:
 8007e10:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007e14:	460f      	mov	r7, r1
 8007e16:	2101      	movs	r1, #1
 8007e18:	ec59 8b10 	vmov	r8, r9, d0
 8007e1c:	4616      	mov	r6, r2
 8007e1e:	f7ff fc13 	bl	8007648 <_Balloc>
 8007e22:	4604      	mov	r4, r0
 8007e24:	b930      	cbnz	r0, 8007e34 <__d2b+0x24>
 8007e26:	4602      	mov	r2, r0
 8007e28:	4b23      	ldr	r3, [pc, #140]	@ (8007eb8 <__d2b+0xa8>)
 8007e2a:	4824      	ldr	r0, [pc, #144]	@ (8007ebc <__d2b+0xac>)
 8007e2c:	f240 310f 	movw	r1, #783	@ 0x30f
 8007e30:	f001 f996 	bl	8009160 <__assert_func>
 8007e34:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007e38:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007e3c:	b10d      	cbz	r5, 8007e42 <__d2b+0x32>
 8007e3e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007e42:	9301      	str	r3, [sp, #4]
 8007e44:	f1b8 0300 	subs.w	r3, r8, #0
 8007e48:	d023      	beq.n	8007e92 <__d2b+0x82>
 8007e4a:	4668      	mov	r0, sp
 8007e4c:	9300      	str	r3, [sp, #0]
 8007e4e:	f7ff fd0c 	bl	800786a <__lo0bits>
 8007e52:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007e56:	b1d0      	cbz	r0, 8007e8e <__d2b+0x7e>
 8007e58:	f1c0 0320 	rsb	r3, r0, #32
 8007e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8007e60:	430b      	orrs	r3, r1
 8007e62:	40c2      	lsrs	r2, r0
 8007e64:	6163      	str	r3, [r4, #20]
 8007e66:	9201      	str	r2, [sp, #4]
 8007e68:	9b01      	ldr	r3, [sp, #4]
 8007e6a:	61a3      	str	r3, [r4, #24]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	bf0c      	ite	eq
 8007e70:	2201      	moveq	r2, #1
 8007e72:	2202      	movne	r2, #2
 8007e74:	6122      	str	r2, [r4, #16]
 8007e76:	b1a5      	cbz	r5, 8007ea2 <__d2b+0x92>
 8007e78:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007e7c:	4405      	add	r5, r0
 8007e7e:	603d      	str	r5, [r7, #0]
 8007e80:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007e84:	6030      	str	r0, [r6, #0]
 8007e86:	4620      	mov	r0, r4
 8007e88:	b003      	add	sp, #12
 8007e8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007e8e:	6161      	str	r1, [r4, #20]
 8007e90:	e7ea      	b.n	8007e68 <__d2b+0x58>
 8007e92:	a801      	add	r0, sp, #4
 8007e94:	f7ff fce9 	bl	800786a <__lo0bits>
 8007e98:	9b01      	ldr	r3, [sp, #4]
 8007e9a:	6163      	str	r3, [r4, #20]
 8007e9c:	3020      	adds	r0, #32
 8007e9e:	2201      	movs	r2, #1
 8007ea0:	e7e8      	b.n	8007e74 <__d2b+0x64>
 8007ea2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007ea6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007eaa:	6038      	str	r0, [r7, #0]
 8007eac:	6918      	ldr	r0, [r3, #16]
 8007eae:	f7ff fcbd 	bl	800782c <__hi0bits>
 8007eb2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007eb6:	e7e5      	b.n	8007e84 <__d2b+0x74>
 8007eb8:	08009f7d 	.word	0x08009f7d
 8007ebc:	08009f8e 	.word	0x08009f8e

08007ec0 <__ratio>:
 8007ec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ec4:	b085      	sub	sp, #20
 8007ec6:	e9cd 1000 	strd	r1, r0, [sp]
 8007eca:	a902      	add	r1, sp, #8
 8007ecc:	f7ff ff56 	bl	8007d7c <__b2d>
 8007ed0:	9800      	ldr	r0, [sp, #0]
 8007ed2:	a903      	add	r1, sp, #12
 8007ed4:	ec55 4b10 	vmov	r4, r5, d0
 8007ed8:	f7ff ff50 	bl	8007d7c <__b2d>
 8007edc:	9b01      	ldr	r3, [sp, #4]
 8007ede:	6919      	ldr	r1, [r3, #16]
 8007ee0:	9b00      	ldr	r3, [sp, #0]
 8007ee2:	691b      	ldr	r3, [r3, #16]
 8007ee4:	1ac9      	subs	r1, r1, r3
 8007ee6:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8007eea:	1a9b      	subs	r3, r3, r2
 8007eec:	ec5b ab10 	vmov	sl, fp, d0
 8007ef0:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	bfce      	itee	gt
 8007ef8:	462a      	movgt	r2, r5
 8007efa:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007efe:	465a      	movle	r2, fp
 8007f00:	462f      	mov	r7, r5
 8007f02:	46d9      	mov	r9, fp
 8007f04:	bfcc      	ite	gt
 8007f06:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8007f0a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8007f0e:	464b      	mov	r3, r9
 8007f10:	4652      	mov	r2, sl
 8007f12:	4620      	mov	r0, r4
 8007f14:	4639      	mov	r1, r7
 8007f16:	f7f8 fc99 	bl	800084c <__aeabi_ddiv>
 8007f1a:	ec41 0b10 	vmov	d0, r0, r1
 8007f1e:	b005      	add	sp, #20
 8007f20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007f24 <__copybits>:
 8007f24:	3901      	subs	r1, #1
 8007f26:	b570      	push	{r4, r5, r6, lr}
 8007f28:	1149      	asrs	r1, r1, #5
 8007f2a:	6914      	ldr	r4, [r2, #16]
 8007f2c:	3101      	adds	r1, #1
 8007f2e:	f102 0314 	add.w	r3, r2, #20
 8007f32:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007f36:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007f3a:	1f05      	subs	r5, r0, #4
 8007f3c:	42a3      	cmp	r3, r4
 8007f3e:	d30c      	bcc.n	8007f5a <__copybits+0x36>
 8007f40:	1aa3      	subs	r3, r4, r2
 8007f42:	3b11      	subs	r3, #17
 8007f44:	f023 0303 	bic.w	r3, r3, #3
 8007f48:	3211      	adds	r2, #17
 8007f4a:	42a2      	cmp	r2, r4
 8007f4c:	bf88      	it	hi
 8007f4e:	2300      	movhi	r3, #0
 8007f50:	4418      	add	r0, r3
 8007f52:	2300      	movs	r3, #0
 8007f54:	4288      	cmp	r0, r1
 8007f56:	d305      	bcc.n	8007f64 <__copybits+0x40>
 8007f58:	bd70      	pop	{r4, r5, r6, pc}
 8007f5a:	f853 6b04 	ldr.w	r6, [r3], #4
 8007f5e:	f845 6f04 	str.w	r6, [r5, #4]!
 8007f62:	e7eb      	b.n	8007f3c <__copybits+0x18>
 8007f64:	f840 3b04 	str.w	r3, [r0], #4
 8007f68:	e7f4      	b.n	8007f54 <__copybits+0x30>

08007f6a <__any_on>:
 8007f6a:	f100 0214 	add.w	r2, r0, #20
 8007f6e:	6900      	ldr	r0, [r0, #16]
 8007f70:	114b      	asrs	r3, r1, #5
 8007f72:	4298      	cmp	r0, r3
 8007f74:	b510      	push	{r4, lr}
 8007f76:	db11      	blt.n	8007f9c <__any_on+0x32>
 8007f78:	dd0a      	ble.n	8007f90 <__any_on+0x26>
 8007f7a:	f011 011f 	ands.w	r1, r1, #31
 8007f7e:	d007      	beq.n	8007f90 <__any_on+0x26>
 8007f80:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007f84:	fa24 f001 	lsr.w	r0, r4, r1
 8007f88:	fa00 f101 	lsl.w	r1, r0, r1
 8007f8c:	428c      	cmp	r4, r1
 8007f8e:	d10b      	bne.n	8007fa8 <__any_on+0x3e>
 8007f90:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007f94:	4293      	cmp	r3, r2
 8007f96:	d803      	bhi.n	8007fa0 <__any_on+0x36>
 8007f98:	2000      	movs	r0, #0
 8007f9a:	bd10      	pop	{r4, pc}
 8007f9c:	4603      	mov	r3, r0
 8007f9e:	e7f7      	b.n	8007f90 <__any_on+0x26>
 8007fa0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007fa4:	2900      	cmp	r1, #0
 8007fa6:	d0f5      	beq.n	8007f94 <__any_on+0x2a>
 8007fa8:	2001      	movs	r0, #1
 8007faa:	e7f6      	b.n	8007f9a <__any_on+0x30>

08007fac <sulp>:
 8007fac:	b570      	push	{r4, r5, r6, lr}
 8007fae:	4604      	mov	r4, r0
 8007fb0:	460d      	mov	r5, r1
 8007fb2:	ec45 4b10 	vmov	d0, r4, r5
 8007fb6:	4616      	mov	r6, r2
 8007fb8:	f7ff feba 	bl	8007d30 <__ulp>
 8007fbc:	ec51 0b10 	vmov	r0, r1, d0
 8007fc0:	b17e      	cbz	r6, 8007fe2 <sulp+0x36>
 8007fc2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007fc6:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	dd09      	ble.n	8007fe2 <sulp+0x36>
 8007fce:	051b      	lsls	r3, r3, #20
 8007fd0:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8007fd4:	2400      	movs	r4, #0
 8007fd6:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8007fda:	4622      	mov	r2, r4
 8007fdc:	462b      	mov	r3, r5
 8007fde:	f7f8 fb0b 	bl	80005f8 <__aeabi_dmul>
 8007fe2:	ec41 0b10 	vmov	d0, r0, r1
 8007fe6:	bd70      	pop	{r4, r5, r6, pc}

08007fe8 <_strtod_l>:
 8007fe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fec:	b09f      	sub	sp, #124	@ 0x7c
 8007fee:	460c      	mov	r4, r1
 8007ff0:	9217      	str	r2, [sp, #92]	@ 0x5c
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	921a      	str	r2, [sp, #104]	@ 0x68
 8007ff6:	9005      	str	r0, [sp, #20]
 8007ff8:	f04f 0a00 	mov.w	sl, #0
 8007ffc:	f04f 0b00 	mov.w	fp, #0
 8008000:	460a      	mov	r2, r1
 8008002:	9219      	str	r2, [sp, #100]	@ 0x64
 8008004:	7811      	ldrb	r1, [r2, #0]
 8008006:	292b      	cmp	r1, #43	@ 0x2b
 8008008:	d04a      	beq.n	80080a0 <_strtod_l+0xb8>
 800800a:	d838      	bhi.n	800807e <_strtod_l+0x96>
 800800c:	290d      	cmp	r1, #13
 800800e:	d832      	bhi.n	8008076 <_strtod_l+0x8e>
 8008010:	2908      	cmp	r1, #8
 8008012:	d832      	bhi.n	800807a <_strtod_l+0x92>
 8008014:	2900      	cmp	r1, #0
 8008016:	d03b      	beq.n	8008090 <_strtod_l+0xa8>
 8008018:	2200      	movs	r2, #0
 800801a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800801c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800801e:	782a      	ldrb	r2, [r5, #0]
 8008020:	2a30      	cmp	r2, #48	@ 0x30
 8008022:	f040 80b3 	bne.w	800818c <_strtod_l+0x1a4>
 8008026:	786a      	ldrb	r2, [r5, #1]
 8008028:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800802c:	2a58      	cmp	r2, #88	@ 0x58
 800802e:	d16e      	bne.n	800810e <_strtod_l+0x126>
 8008030:	9302      	str	r3, [sp, #8]
 8008032:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008034:	9301      	str	r3, [sp, #4]
 8008036:	ab1a      	add	r3, sp, #104	@ 0x68
 8008038:	9300      	str	r3, [sp, #0]
 800803a:	4a8e      	ldr	r2, [pc, #568]	@ (8008274 <_strtod_l+0x28c>)
 800803c:	9805      	ldr	r0, [sp, #20]
 800803e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8008040:	a919      	add	r1, sp, #100	@ 0x64
 8008042:	f001 f927 	bl	8009294 <__gethex>
 8008046:	f010 060f 	ands.w	r6, r0, #15
 800804a:	4604      	mov	r4, r0
 800804c:	d005      	beq.n	800805a <_strtod_l+0x72>
 800804e:	2e06      	cmp	r6, #6
 8008050:	d128      	bne.n	80080a4 <_strtod_l+0xbc>
 8008052:	3501      	adds	r5, #1
 8008054:	2300      	movs	r3, #0
 8008056:	9519      	str	r5, [sp, #100]	@ 0x64
 8008058:	930b      	str	r3, [sp, #44]	@ 0x2c
 800805a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800805c:	2b00      	cmp	r3, #0
 800805e:	f040 858e 	bne.w	8008b7e <_strtod_l+0xb96>
 8008062:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008064:	b1cb      	cbz	r3, 800809a <_strtod_l+0xb2>
 8008066:	4652      	mov	r2, sl
 8008068:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800806c:	ec43 2b10 	vmov	d0, r2, r3
 8008070:	b01f      	add	sp, #124	@ 0x7c
 8008072:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008076:	2920      	cmp	r1, #32
 8008078:	d1ce      	bne.n	8008018 <_strtod_l+0x30>
 800807a:	3201      	adds	r2, #1
 800807c:	e7c1      	b.n	8008002 <_strtod_l+0x1a>
 800807e:	292d      	cmp	r1, #45	@ 0x2d
 8008080:	d1ca      	bne.n	8008018 <_strtod_l+0x30>
 8008082:	2101      	movs	r1, #1
 8008084:	910b      	str	r1, [sp, #44]	@ 0x2c
 8008086:	1c51      	adds	r1, r2, #1
 8008088:	9119      	str	r1, [sp, #100]	@ 0x64
 800808a:	7852      	ldrb	r2, [r2, #1]
 800808c:	2a00      	cmp	r2, #0
 800808e:	d1c5      	bne.n	800801c <_strtod_l+0x34>
 8008090:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008092:	9419      	str	r4, [sp, #100]	@ 0x64
 8008094:	2b00      	cmp	r3, #0
 8008096:	f040 8570 	bne.w	8008b7a <_strtod_l+0xb92>
 800809a:	4652      	mov	r2, sl
 800809c:	465b      	mov	r3, fp
 800809e:	e7e5      	b.n	800806c <_strtod_l+0x84>
 80080a0:	2100      	movs	r1, #0
 80080a2:	e7ef      	b.n	8008084 <_strtod_l+0x9c>
 80080a4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80080a6:	b13a      	cbz	r2, 80080b8 <_strtod_l+0xd0>
 80080a8:	2135      	movs	r1, #53	@ 0x35
 80080aa:	a81c      	add	r0, sp, #112	@ 0x70
 80080ac:	f7ff ff3a 	bl	8007f24 <__copybits>
 80080b0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80080b2:	9805      	ldr	r0, [sp, #20]
 80080b4:	f7ff fb08 	bl	80076c8 <_Bfree>
 80080b8:	3e01      	subs	r6, #1
 80080ba:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80080bc:	2e04      	cmp	r6, #4
 80080be:	d806      	bhi.n	80080ce <_strtod_l+0xe6>
 80080c0:	e8df f006 	tbb	[pc, r6]
 80080c4:	201d0314 	.word	0x201d0314
 80080c8:	14          	.byte	0x14
 80080c9:	00          	.byte	0x00
 80080ca:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80080ce:	05e1      	lsls	r1, r4, #23
 80080d0:	bf48      	it	mi
 80080d2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80080d6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80080da:	0d1b      	lsrs	r3, r3, #20
 80080dc:	051b      	lsls	r3, r3, #20
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d1bb      	bne.n	800805a <_strtod_l+0x72>
 80080e2:	f7fe fb31 	bl	8006748 <__errno>
 80080e6:	2322      	movs	r3, #34	@ 0x22
 80080e8:	6003      	str	r3, [r0, #0]
 80080ea:	e7b6      	b.n	800805a <_strtod_l+0x72>
 80080ec:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80080f0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80080f4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80080f8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80080fc:	e7e7      	b.n	80080ce <_strtod_l+0xe6>
 80080fe:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800827c <_strtod_l+0x294>
 8008102:	e7e4      	b.n	80080ce <_strtod_l+0xe6>
 8008104:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8008108:	f04f 3aff 	mov.w	sl, #4294967295
 800810c:	e7df      	b.n	80080ce <_strtod_l+0xe6>
 800810e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008110:	1c5a      	adds	r2, r3, #1
 8008112:	9219      	str	r2, [sp, #100]	@ 0x64
 8008114:	785b      	ldrb	r3, [r3, #1]
 8008116:	2b30      	cmp	r3, #48	@ 0x30
 8008118:	d0f9      	beq.n	800810e <_strtod_l+0x126>
 800811a:	2b00      	cmp	r3, #0
 800811c:	d09d      	beq.n	800805a <_strtod_l+0x72>
 800811e:	2301      	movs	r3, #1
 8008120:	9309      	str	r3, [sp, #36]	@ 0x24
 8008122:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008124:	930c      	str	r3, [sp, #48]	@ 0x30
 8008126:	2300      	movs	r3, #0
 8008128:	9308      	str	r3, [sp, #32]
 800812a:	930a      	str	r3, [sp, #40]	@ 0x28
 800812c:	461f      	mov	r7, r3
 800812e:	220a      	movs	r2, #10
 8008130:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8008132:	7805      	ldrb	r5, [r0, #0]
 8008134:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8008138:	b2d9      	uxtb	r1, r3
 800813a:	2909      	cmp	r1, #9
 800813c:	d928      	bls.n	8008190 <_strtod_l+0x1a8>
 800813e:	494e      	ldr	r1, [pc, #312]	@ (8008278 <_strtod_l+0x290>)
 8008140:	2201      	movs	r2, #1
 8008142:	f000 ffd5 	bl	80090f0 <strncmp>
 8008146:	2800      	cmp	r0, #0
 8008148:	d032      	beq.n	80081b0 <_strtod_l+0x1c8>
 800814a:	2000      	movs	r0, #0
 800814c:	462a      	mov	r2, r5
 800814e:	4681      	mov	r9, r0
 8008150:	463d      	mov	r5, r7
 8008152:	4603      	mov	r3, r0
 8008154:	2a65      	cmp	r2, #101	@ 0x65
 8008156:	d001      	beq.n	800815c <_strtod_l+0x174>
 8008158:	2a45      	cmp	r2, #69	@ 0x45
 800815a:	d114      	bne.n	8008186 <_strtod_l+0x19e>
 800815c:	b91d      	cbnz	r5, 8008166 <_strtod_l+0x17e>
 800815e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008160:	4302      	orrs	r2, r0
 8008162:	d095      	beq.n	8008090 <_strtod_l+0xa8>
 8008164:	2500      	movs	r5, #0
 8008166:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8008168:	1c62      	adds	r2, r4, #1
 800816a:	9219      	str	r2, [sp, #100]	@ 0x64
 800816c:	7862      	ldrb	r2, [r4, #1]
 800816e:	2a2b      	cmp	r2, #43	@ 0x2b
 8008170:	d077      	beq.n	8008262 <_strtod_l+0x27a>
 8008172:	2a2d      	cmp	r2, #45	@ 0x2d
 8008174:	d07b      	beq.n	800826e <_strtod_l+0x286>
 8008176:	f04f 0c00 	mov.w	ip, #0
 800817a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800817e:	2909      	cmp	r1, #9
 8008180:	f240 8082 	bls.w	8008288 <_strtod_l+0x2a0>
 8008184:	9419      	str	r4, [sp, #100]	@ 0x64
 8008186:	f04f 0800 	mov.w	r8, #0
 800818a:	e0a2      	b.n	80082d2 <_strtod_l+0x2ea>
 800818c:	2300      	movs	r3, #0
 800818e:	e7c7      	b.n	8008120 <_strtod_l+0x138>
 8008190:	2f08      	cmp	r7, #8
 8008192:	bfd5      	itete	le
 8008194:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8008196:	9908      	ldrgt	r1, [sp, #32]
 8008198:	fb02 3301 	mlale	r3, r2, r1, r3
 800819c:	fb02 3301 	mlagt	r3, r2, r1, r3
 80081a0:	f100 0001 	add.w	r0, r0, #1
 80081a4:	bfd4      	ite	le
 80081a6:	930a      	strle	r3, [sp, #40]	@ 0x28
 80081a8:	9308      	strgt	r3, [sp, #32]
 80081aa:	3701      	adds	r7, #1
 80081ac:	9019      	str	r0, [sp, #100]	@ 0x64
 80081ae:	e7bf      	b.n	8008130 <_strtod_l+0x148>
 80081b0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80081b2:	1c5a      	adds	r2, r3, #1
 80081b4:	9219      	str	r2, [sp, #100]	@ 0x64
 80081b6:	785a      	ldrb	r2, [r3, #1]
 80081b8:	b37f      	cbz	r7, 800821a <_strtod_l+0x232>
 80081ba:	4681      	mov	r9, r0
 80081bc:	463d      	mov	r5, r7
 80081be:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80081c2:	2b09      	cmp	r3, #9
 80081c4:	d912      	bls.n	80081ec <_strtod_l+0x204>
 80081c6:	2301      	movs	r3, #1
 80081c8:	e7c4      	b.n	8008154 <_strtod_l+0x16c>
 80081ca:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80081cc:	1c5a      	adds	r2, r3, #1
 80081ce:	9219      	str	r2, [sp, #100]	@ 0x64
 80081d0:	785a      	ldrb	r2, [r3, #1]
 80081d2:	3001      	adds	r0, #1
 80081d4:	2a30      	cmp	r2, #48	@ 0x30
 80081d6:	d0f8      	beq.n	80081ca <_strtod_l+0x1e2>
 80081d8:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80081dc:	2b08      	cmp	r3, #8
 80081de:	f200 84d3 	bhi.w	8008b88 <_strtod_l+0xba0>
 80081e2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80081e4:	930c      	str	r3, [sp, #48]	@ 0x30
 80081e6:	4681      	mov	r9, r0
 80081e8:	2000      	movs	r0, #0
 80081ea:	4605      	mov	r5, r0
 80081ec:	3a30      	subs	r2, #48	@ 0x30
 80081ee:	f100 0301 	add.w	r3, r0, #1
 80081f2:	d02a      	beq.n	800824a <_strtod_l+0x262>
 80081f4:	4499      	add	r9, r3
 80081f6:	eb00 0c05 	add.w	ip, r0, r5
 80081fa:	462b      	mov	r3, r5
 80081fc:	210a      	movs	r1, #10
 80081fe:	4563      	cmp	r3, ip
 8008200:	d10d      	bne.n	800821e <_strtod_l+0x236>
 8008202:	1c69      	adds	r1, r5, #1
 8008204:	4401      	add	r1, r0
 8008206:	4428      	add	r0, r5
 8008208:	2808      	cmp	r0, #8
 800820a:	dc16      	bgt.n	800823a <_strtod_l+0x252>
 800820c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800820e:	230a      	movs	r3, #10
 8008210:	fb03 2300 	mla	r3, r3, r0, r2
 8008214:	930a      	str	r3, [sp, #40]	@ 0x28
 8008216:	2300      	movs	r3, #0
 8008218:	e018      	b.n	800824c <_strtod_l+0x264>
 800821a:	4638      	mov	r0, r7
 800821c:	e7da      	b.n	80081d4 <_strtod_l+0x1ec>
 800821e:	2b08      	cmp	r3, #8
 8008220:	f103 0301 	add.w	r3, r3, #1
 8008224:	dc03      	bgt.n	800822e <_strtod_l+0x246>
 8008226:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8008228:	434e      	muls	r6, r1
 800822a:	960a      	str	r6, [sp, #40]	@ 0x28
 800822c:	e7e7      	b.n	80081fe <_strtod_l+0x216>
 800822e:	2b10      	cmp	r3, #16
 8008230:	bfde      	ittt	le
 8008232:	9e08      	ldrle	r6, [sp, #32]
 8008234:	434e      	mulle	r6, r1
 8008236:	9608      	strle	r6, [sp, #32]
 8008238:	e7e1      	b.n	80081fe <_strtod_l+0x216>
 800823a:	280f      	cmp	r0, #15
 800823c:	dceb      	bgt.n	8008216 <_strtod_l+0x22e>
 800823e:	9808      	ldr	r0, [sp, #32]
 8008240:	230a      	movs	r3, #10
 8008242:	fb03 2300 	mla	r3, r3, r0, r2
 8008246:	9308      	str	r3, [sp, #32]
 8008248:	e7e5      	b.n	8008216 <_strtod_l+0x22e>
 800824a:	4629      	mov	r1, r5
 800824c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800824e:	1c50      	adds	r0, r2, #1
 8008250:	9019      	str	r0, [sp, #100]	@ 0x64
 8008252:	7852      	ldrb	r2, [r2, #1]
 8008254:	4618      	mov	r0, r3
 8008256:	460d      	mov	r5, r1
 8008258:	e7b1      	b.n	80081be <_strtod_l+0x1d6>
 800825a:	f04f 0900 	mov.w	r9, #0
 800825e:	2301      	movs	r3, #1
 8008260:	e77d      	b.n	800815e <_strtod_l+0x176>
 8008262:	f04f 0c00 	mov.w	ip, #0
 8008266:	1ca2      	adds	r2, r4, #2
 8008268:	9219      	str	r2, [sp, #100]	@ 0x64
 800826a:	78a2      	ldrb	r2, [r4, #2]
 800826c:	e785      	b.n	800817a <_strtod_l+0x192>
 800826e:	f04f 0c01 	mov.w	ip, #1
 8008272:	e7f8      	b.n	8008266 <_strtod_l+0x27e>
 8008274:	0800a100 	.word	0x0800a100
 8008278:	0800a0e8 	.word	0x0800a0e8
 800827c:	7ff00000 	.word	0x7ff00000
 8008280:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008282:	1c51      	adds	r1, r2, #1
 8008284:	9119      	str	r1, [sp, #100]	@ 0x64
 8008286:	7852      	ldrb	r2, [r2, #1]
 8008288:	2a30      	cmp	r2, #48	@ 0x30
 800828a:	d0f9      	beq.n	8008280 <_strtod_l+0x298>
 800828c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8008290:	2908      	cmp	r1, #8
 8008292:	f63f af78 	bhi.w	8008186 <_strtod_l+0x19e>
 8008296:	3a30      	subs	r2, #48	@ 0x30
 8008298:	920e      	str	r2, [sp, #56]	@ 0x38
 800829a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800829c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800829e:	f04f 080a 	mov.w	r8, #10
 80082a2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80082a4:	1c56      	adds	r6, r2, #1
 80082a6:	9619      	str	r6, [sp, #100]	@ 0x64
 80082a8:	7852      	ldrb	r2, [r2, #1]
 80082aa:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80082ae:	f1be 0f09 	cmp.w	lr, #9
 80082b2:	d939      	bls.n	8008328 <_strtod_l+0x340>
 80082b4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80082b6:	1a76      	subs	r6, r6, r1
 80082b8:	2e08      	cmp	r6, #8
 80082ba:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80082be:	dc03      	bgt.n	80082c8 <_strtod_l+0x2e0>
 80082c0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80082c2:	4588      	cmp	r8, r1
 80082c4:	bfa8      	it	ge
 80082c6:	4688      	movge	r8, r1
 80082c8:	f1bc 0f00 	cmp.w	ip, #0
 80082cc:	d001      	beq.n	80082d2 <_strtod_l+0x2ea>
 80082ce:	f1c8 0800 	rsb	r8, r8, #0
 80082d2:	2d00      	cmp	r5, #0
 80082d4:	d14e      	bne.n	8008374 <_strtod_l+0x38c>
 80082d6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80082d8:	4308      	orrs	r0, r1
 80082da:	f47f aebe 	bne.w	800805a <_strtod_l+0x72>
 80082de:	2b00      	cmp	r3, #0
 80082e0:	f47f aed6 	bne.w	8008090 <_strtod_l+0xa8>
 80082e4:	2a69      	cmp	r2, #105	@ 0x69
 80082e6:	d028      	beq.n	800833a <_strtod_l+0x352>
 80082e8:	dc25      	bgt.n	8008336 <_strtod_l+0x34e>
 80082ea:	2a49      	cmp	r2, #73	@ 0x49
 80082ec:	d025      	beq.n	800833a <_strtod_l+0x352>
 80082ee:	2a4e      	cmp	r2, #78	@ 0x4e
 80082f0:	f47f aece 	bne.w	8008090 <_strtod_l+0xa8>
 80082f4:	499b      	ldr	r1, [pc, #620]	@ (8008564 <_strtod_l+0x57c>)
 80082f6:	a819      	add	r0, sp, #100	@ 0x64
 80082f8:	f001 f9ee 	bl	80096d8 <__match>
 80082fc:	2800      	cmp	r0, #0
 80082fe:	f43f aec7 	beq.w	8008090 <_strtod_l+0xa8>
 8008302:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008304:	781b      	ldrb	r3, [r3, #0]
 8008306:	2b28      	cmp	r3, #40	@ 0x28
 8008308:	d12e      	bne.n	8008368 <_strtod_l+0x380>
 800830a:	4997      	ldr	r1, [pc, #604]	@ (8008568 <_strtod_l+0x580>)
 800830c:	aa1c      	add	r2, sp, #112	@ 0x70
 800830e:	a819      	add	r0, sp, #100	@ 0x64
 8008310:	f001 f9f6 	bl	8009700 <__hexnan>
 8008314:	2805      	cmp	r0, #5
 8008316:	d127      	bne.n	8008368 <_strtod_l+0x380>
 8008318:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800831a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800831e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8008322:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8008326:	e698      	b.n	800805a <_strtod_l+0x72>
 8008328:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800832a:	fb08 2101 	mla	r1, r8, r1, r2
 800832e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8008332:	920e      	str	r2, [sp, #56]	@ 0x38
 8008334:	e7b5      	b.n	80082a2 <_strtod_l+0x2ba>
 8008336:	2a6e      	cmp	r2, #110	@ 0x6e
 8008338:	e7da      	b.n	80082f0 <_strtod_l+0x308>
 800833a:	498c      	ldr	r1, [pc, #560]	@ (800856c <_strtod_l+0x584>)
 800833c:	a819      	add	r0, sp, #100	@ 0x64
 800833e:	f001 f9cb 	bl	80096d8 <__match>
 8008342:	2800      	cmp	r0, #0
 8008344:	f43f aea4 	beq.w	8008090 <_strtod_l+0xa8>
 8008348:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800834a:	4989      	ldr	r1, [pc, #548]	@ (8008570 <_strtod_l+0x588>)
 800834c:	3b01      	subs	r3, #1
 800834e:	a819      	add	r0, sp, #100	@ 0x64
 8008350:	9319      	str	r3, [sp, #100]	@ 0x64
 8008352:	f001 f9c1 	bl	80096d8 <__match>
 8008356:	b910      	cbnz	r0, 800835e <_strtod_l+0x376>
 8008358:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800835a:	3301      	adds	r3, #1
 800835c:	9319      	str	r3, [sp, #100]	@ 0x64
 800835e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8008580 <_strtod_l+0x598>
 8008362:	f04f 0a00 	mov.w	sl, #0
 8008366:	e678      	b.n	800805a <_strtod_l+0x72>
 8008368:	4882      	ldr	r0, [pc, #520]	@ (8008574 <_strtod_l+0x58c>)
 800836a:	f000 fef1 	bl	8009150 <nan>
 800836e:	ec5b ab10 	vmov	sl, fp, d0
 8008372:	e672      	b.n	800805a <_strtod_l+0x72>
 8008374:	eba8 0309 	sub.w	r3, r8, r9
 8008378:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800837a:	9309      	str	r3, [sp, #36]	@ 0x24
 800837c:	2f00      	cmp	r7, #0
 800837e:	bf08      	it	eq
 8008380:	462f      	moveq	r7, r5
 8008382:	2d10      	cmp	r5, #16
 8008384:	462c      	mov	r4, r5
 8008386:	bfa8      	it	ge
 8008388:	2410      	movge	r4, #16
 800838a:	f7f8 f8bb 	bl	8000504 <__aeabi_ui2d>
 800838e:	2d09      	cmp	r5, #9
 8008390:	4682      	mov	sl, r0
 8008392:	468b      	mov	fp, r1
 8008394:	dc13      	bgt.n	80083be <_strtod_l+0x3d6>
 8008396:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008398:	2b00      	cmp	r3, #0
 800839a:	f43f ae5e 	beq.w	800805a <_strtod_l+0x72>
 800839e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80083a0:	dd78      	ble.n	8008494 <_strtod_l+0x4ac>
 80083a2:	2b16      	cmp	r3, #22
 80083a4:	dc5f      	bgt.n	8008466 <_strtod_l+0x47e>
 80083a6:	4974      	ldr	r1, [pc, #464]	@ (8008578 <_strtod_l+0x590>)
 80083a8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80083ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 80083b0:	4652      	mov	r2, sl
 80083b2:	465b      	mov	r3, fp
 80083b4:	f7f8 f920 	bl	80005f8 <__aeabi_dmul>
 80083b8:	4682      	mov	sl, r0
 80083ba:	468b      	mov	fp, r1
 80083bc:	e64d      	b.n	800805a <_strtod_l+0x72>
 80083be:	4b6e      	ldr	r3, [pc, #440]	@ (8008578 <_strtod_l+0x590>)
 80083c0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80083c4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80083c8:	f7f8 f916 	bl	80005f8 <__aeabi_dmul>
 80083cc:	4682      	mov	sl, r0
 80083ce:	9808      	ldr	r0, [sp, #32]
 80083d0:	468b      	mov	fp, r1
 80083d2:	f7f8 f897 	bl	8000504 <__aeabi_ui2d>
 80083d6:	4602      	mov	r2, r0
 80083d8:	460b      	mov	r3, r1
 80083da:	4650      	mov	r0, sl
 80083dc:	4659      	mov	r1, fp
 80083de:	f7f7 ff55 	bl	800028c <__adddf3>
 80083e2:	2d0f      	cmp	r5, #15
 80083e4:	4682      	mov	sl, r0
 80083e6:	468b      	mov	fp, r1
 80083e8:	ddd5      	ble.n	8008396 <_strtod_l+0x3ae>
 80083ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80083ec:	1b2c      	subs	r4, r5, r4
 80083ee:	441c      	add	r4, r3
 80083f0:	2c00      	cmp	r4, #0
 80083f2:	f340 8096 	ble.w	8008522 <_strtod_l+0x53a>
 80083f6:	f014 030f 	ands.w	r3, r4, #15
 80083fa:	d00a      	beq.n	8008412 <_strtod_l+0x42a>
 80083fc:	495e      	ldr	r1, [pc, #376]	@ (8008578 <_strtod_l+0x590>)
 80083fe:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008402:	4652      	mov	r2, sl
 8008404:	465b      	mov	r3, fp
 8008406:	e9d1 0100 	ldrd	r0, r1, [r1]
 800840a:	f7f8 f8f5 	bl	80005f8 <__aeabi_dmul>
 800840e:	4682      	mov	sl, r0
 8008410:	468b      	mov	fp, r1
 8008412:	f034 040f 	bics.w	r4, r4, #15
 8008416:	d073      	beq.n	8008500 <_strtod_l+0x518>
 8008418:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800841c:	dd48      	ble.n	80084b0 <_strtod_l+0x4c8>
 800841e:	2400      	movs	r4, #0
 8008420:	46a0      	mov	r8, r4
 8008422:	940a      	str	r4, [sp, #40]	@ 0x28
 8008424:	46a1      	mov	r9, r4
 8008426:	9a05      	ldr	r2, [sp, #20]
 8008428:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8008580 <_strtod_l+0x598>
 800842c:	2322      	movs	r3, #34	@ 0x22
 800842e:	6013      	str	r3, [r2, #0]
 8008430:	f04f 0a00 	mov.w	sl, #0
 8008434:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008436:	2b00      	cmp	r3, #0
 8008438:	f43f ae0f 	beq.w	800805a <_strtod_l+0x72>
 800843c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800843e:	9805      	ldr	r0, [sp, #20]
 8008440:	f7ff f942 	bl	80076c8 <_Bfree>
 8008444:	9805      	ldr	r0, [sp, #20]
 8008446:	4649      	mov	r1, r9
 8008448:	f7ff f93e 	bl	80076c8 <_Bfree>
 800844c:	9805      	ldr	r0, [sp, #20]
 800844e:	4641      	mov	r1, r8
 8008450:	f7ff f93a 	bl	80076c8 <_Bfree>
 8008454:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008456:	9805      	ldr	r0, [sp, #20]
 8008458:	f7ff f936 	bl	80076c8 <_Bfree>
 800845c:	9805      	ldr	r0, [sp, #20]
 800845e:	4621      	mov	r1, r4
 8008460:	f7ff f932 	bl	80076c8 <_Bfree>
 8008464:	e5f9      	b.n	800805a <_strtod_l+0x72>
 8008466:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008468:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800846c:	4293      	cmp	r3, r2
 800846e:	dbbc      	blt.n	80083ea <_strtod_l+0x402>
 8008470:	4c41      	ldr	r4, [pc, #260]	@ (8008578 <_strtod_l+0x590>)
 8008472:	f1c5 050f 	rsb	r5, r5, #15
 8008476:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800847a:	4652      	mov	r2, sl
 800847c:	465b      	mov	r3, fp
 800847e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008482:	f7f8 f8b9 	bl	80005f8 <__aeabi_dmul>
 8008486:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008488:	1b5d      	subs	r5, r3, r5
 800848a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800848e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008492:	e78f      	b.n	80083b4 <_strtod_l+0x3cc>
 8008494:	3316      	adds	r3, #22
 8008496:	dba8      	blt.n	80083ea <_strtod_l+0x402>
 8008498:	4b37      	ldr	r3, [pc, #220]	@ (8008578 <_strtod_l+0x590>)
 800849a:	eba9 0808 	sub.w	r8, r9, r8
 800849e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80084a2:	e9d8 2300 	ldrd	r2, r3, [r8]
 80084a6:	4650      	mov	r0, sl
 80084a8:	4659      	mov	r1, fp
 80084aa:	f7f8 f9cf 	bl	800084c <__aeabi_ddiv>
 80084ae:	e783      	b.n	80083b8 <_strtod_l+0x3d0>
 80084b0:	4b32      	ldr	r3, [pc, #200]	@ (800857c <_strtod_l+0x594>)
 80084b2:	9308      	str	r3, [sp, #32]
 80084b4:	2300      	movs	r3, #0
 80084b6:	1124      	asrs	r4, r4, #4
 80084b8:	4650      	mov	r0, sl
 80084ba:	4659      	mov	r1, fp
 80084bc:	461e      	mov	r6, r3
 80084be:	2c01      	cmp	r4, #1
 80084c0:	dc21      	bgt.n	8008506 <_strtod_l+0x51e>
 80084c2:	b10b      	cbz	r3, 80084c8 <_strtod_l+0x4e0>
 80084c4:	4682      	mov	sl, r0
 80084c6:	468b      	mov	fp, r1
 80084c8:	492c      	ldr	r1, [pc, #176]	@ (800857c <_strtod_l+0x594>)
 80084ca:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80084ce:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80084d2:	4652      	mov	r2, sl
 80084d4:	465b      	mov	r3, fp
 80084d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80084da:	f7f8 f88d 	bl	80005f8 <__aeabi_dmul>
 80084de:	4b28      	ldr	r3, [pc, #160]	@ (8008580 <_strtod_l+0x598>)
 80084e0:	460a      	mov	r2, r1
 80084e2:	400b      	ands	r3, r1
 80084e4:	4927      	ldr	r1, [pc, #156]	@ (8008584 <_strtod_l+0x59c>)
 80084e6:	428b      	cmp	r3, r1
 80084e8:	4682      	mov	sl, r0
 80084ea:	d898      	bhi.n	800841e <_strtod_l+0x436>
 80084ec:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80084f0:	428b      	cmp	r3, r1
 80084f2:	bf86      	itte	hi
 80084f4:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8008588 <_strtod_l+0x5a0>
 80084f8:	f04f 3aff 	movhi.w	sl, #4294967295
 80084fc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8008500:	2300      	movs	r3, #0
 8008502:	9308      	str	r3, [sp, #32]
 8008504:	e07a      	b.n	80085fc <_strtod_l+0x614>
 8008506:	07e2      	lsls	r2, r4, #31
 8008508:	d505      	bpl.n	8008516 <_strtod_l+0x52e>
 800850a:	9b08      	ldr	r3, [sp, #32]
 800850c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008510:	f7f8 f872 	bl	80005f8 <__aeabi_dmul>
 8008514:	2301      	movs	r3, #1
 8008516:	9a08      	ldr	r2, [sp, #32]
 8008518:	3208      	adds	r2, #8
 800851a:	3601      	adds	r6, #1
 800851c:	1064      	asrs	r4, r4, #1
 800851e:	9208      	str	r2, [sp, #32]
 8008520:	e7cd      	b.n	80084be <_strtod_l+0x4d6>
 8008522:	d0ed      	beq.n	8008500 <_strtod_l+0x518>
 8008524:	4264      	negs	r4, r4
 8008526:	f014 020f 	ands.w	r2, r4, #15
 800852a:	d00a      	beq.n	8008542 <_strtod_l+0x55a>
 800852c:	4b12      	ldr	r3, [pc, #72]	@ (8008578 <_strtod_l+0x590>)
 800852e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008532:	4650      	mov	r0, sl
 8008534:	4659      	mov	r1, fp
 8008536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800853a:	f7f8 f987 	bl	800084c <__aeabi_ddiv>
 800853e:	4682      	mov	sl, r0
 8008540:	468b      	mov	fp, r1
 8008542:	1124      	asrs	r4, r4, #4
 8008544:	d0dc      	beq.n	8008500 <_strtod_l+0x518>
 8008546:	2c1f      	cmp	r4, #31
 8008548:	dd20      	ble.n	800858c <_strtod_l+0x5a4>
 800854a:	2400      	movs	r4, #0
 800854c:	46a0      	mov	r8, r4
 800854e:	940a      	str	r4, [sp, #40]	@ 0x28
 8008550:	46a1      	mov	r9, r4
 8008552:	9a05      	ldr	r2, [sp, #20]
 8008554:	2322      	movs	r3, #34	@ 0x22
 8008556:	f04f 0a00 	mov.w	sl, #0
 800855a:	f04f 0b00 	mov.w	fp, #0
 800855e:	6013      	str	r3, [r2, #0]
 8008560:	e768      	b.n	8008434 <_strtod_l+0x44c>
 8008562:	bf00      	nop
 8008564:	08009ed5 	.word	0x08009ed5
 8008568:	0800a0ec 	.word	0x0800a0ec
 800856c:	08009ecd 	.word	0x08009ecd
 8008570:	08009f04 	.word	0x08009f04
 8008574:	0800a295 	.word	0x0800a295
 8008578:	0800a020 	.word	0x0800a020
 800857c:	08009ff8 	.word	0x08009ff8
 8008580:	7ff00000 	.word	0x7ff00000
 8008584:	7ca00000 	.word	0x7ca00000
 8008588:	7fefffff 	.word	0x7fefffff
 800858c:	f014 0310 	ands.w	r3, r4, #16
 8008590:	bf18      	it	ne
 8008592:	236a      	movne	r3, #106	@ 0x6a
 8008594:	4ea9      	ldr	r6, [pc, #676]	@ (800883c <_strtod_l+0x854>)
 8008596:	9308      	str	r3, [sp, #32]
 8008598:	4650      	mov	r0, sl
 800859a:	4659      	mov	r1, fp
 800859c:	2300      	movs	r3, #0
 800859e:	07e2      	lsls	r2, r4, #31
 80085a0:	d504      	bpl.n	80085ac <_strtod_l+0x5c4>
 80085a2:	e9d6 2300 	ldrd	r2, r3, [r6]
 80085a6:	f7f8 f827 	bl	80005f8 <__aeabi_dmul>
 80085aa:	2301      	movs	r3, #1
 80085ac:	1064      	asrs	r4, r4, #1
 80085ae:	f106 0608 	add.w	r6, r6, #8
 80085b2:	d1f4      	bne.n	800859e <_strtod_l+0x5b6>
 80085b4:	b10b      	cbz	r3, 80085ba <_strtod_l+0x5d2>
 80085b6:	4682      	mov	sl, r0
 80085b8:	468b      	mov	fp, r1
 80085ba:	9b08      	ldr	r3, [sp, #32]
 80085bc:	b1b3      	cbz	r3, 80085ec <_strtod_l+0x604>
 80085be:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80085c2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	4659      	mov	r1, fp
 80085ca:	dd0f      	ble.n	80085ec <_strtod_l+0x604>
 80085cc:	2b1f      	cmp	r3, #31
 80085ce:	dd55      	ble.n	800867c <_strtod_l+0x694>
 80085d0:	2b34      	cmp	r3, #52	@ 0x34
 80085d2:	bfde      	ittt	le
 80085d4:	f04f 33ff 	movle.w	r3, #4294967295
 80085d8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80085dc:	4093      	lslle	r3, r2
 80085de:	f04f 0a00 	mov.w	sl, #0
 80085e2:	bfcc      	ite	gt
 80085e4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80085e8:	ea03 0b01 	andle.w	fp, r3, r1
 80085ec:	2200      	movs	r2, #0
 80085ee:	2300      	movs	r3, #0
 80085f0:	4650      	mov	r0, sl
 80085f2:	4659      	mov	r1, fp
 80085f4:	f7f8 fa68 	bl	8000ac8 <__aeabi_dcmpeq>
 80085f8:	2800      	cmp	r0, #0
 80085fa:	d1a6      	bne.n	800854a <_strtod_l+0x562>
 80085fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80085fe:	9300      	str	r3, [sp, #0]
 8008600:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8008602:	9805      	ldr	r0, [sp, #20]
 8008604:	462b      	mov	r3, r5
 8008606:	463a      	mov	r2, r7
 8008608:	f7ff f8c6 	bl	8007798 <__s2b>
 800860c:	900a      	str	r0, [sp, #40]	@ 0x28
 800860e:	2800      	cmp	r0, #0
 8008610:	f43f af05 	beq.w	800841e <_strtod_l+0x436>
 8008614:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008616:	2a00      	cmp	r2, #0
 8008618:	eba9 0308 	sub.w	r3, r9, r8
 800861c:	bfa8      	it	ge
 800861e:	2300      	movge	r3, #0
 8008620:	9312      	str	r3, [sp, #72]	@ 0x48
 8008622:	2400      	movs	r4, #0
 8008624:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8008628:	9316      	str	r3, [sp, #88]	@ 0x58
 800862a:	46a0      	mov	r8, r4
 800862c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800862e:	9805      	ldr	r0, [sp, #20]
 8008630:	6859      	ldr	r1, [r3, #4]
 8008632:	f7ff f809 	bl	8007648 <_Balloc>
 8008636:	4681      	mov	r9, r0
 8008638:	2800      	cmp	r0, #0
 800863a:	f43f aef4 	beq.w	8008426 <_strtod_l+0x43e>
 800863e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008640:	691a      	ldr	r2, [r3, #16]
 8008642:	3202      	adds	r2, #2
 8008644:	f103 010c 	add.w	r1, r3, #12
 8008648:	0092      	lsls	r2, r2, #2
 800864a:	300c      	adds	r0, #12
 800864c:	f000 fd72 	bl	8009134 <memcpy>
 8008650:	ec4b ab10 	vmov	d0, sl, fp
 8008654:	9805      	ldr	r0, [sp, #20]
 8008656:	aa1c      	add	r2, sp, #112	@ 0x70
 8008658:	a91b      	add	r1, sp, #108	@ 0x6c
 800865a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800865e:	f7ff fbd7 	bl	8007e10 <__d2b>
 8008662:	901a      	str	r0, [sp, #104]	@ 0x68
 8008664:	2800      	cmp	r0, #0
 8008666:	f43f aede 	beq.w	8008426 <_strtod_l+0x43e>
 800866a:	9805      	ldr	r0, [sp, #20]
 800866c:	2101      	movs	r1, #1
 800866e:	f7ff f929 	bl	80078c4 <__i2b>
 8008672:	4680      	mov	r8, r0
 8008674:	b948      	cbnz	r0, 800868a <_strtod_l+0x6a2>
 8008676:	f04f 0800 	mov.w	r8, #0
 800867a:	e6d4      	b.n	8008426 <_strtod_l+0x43e>
 800867c:	f04f 32ff 	mov.w	r2, #4294967295
 8008680:	fa02 f303 	lsl.w	r3, r2, r3
 8008684:	ea03 0a0a 	and.w	sl, r3, sl
 8008688:	e7b0      	b.n	80085ec <_strtod_l+0x604>
 800868a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800868c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800868e:	2d00      	cmp	r5, #0
 8008690:	bfab      	itete	ge
 8008692:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8008694:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8008696:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8008698:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800869a:	bfac      	ite	ge
 800869c:	18ef      	addge	r7, r5, r3
 800869e:	1b5e      	sublt	r6, r3, r5
 80086a0:	9b08      	ldr	r3, [sp, #32]
 80086a2:	1aed      	subs	r5, r5, r3
 80086a4:	4415      	add	r5, r2
 80086a6:	4b66      	ldr	r3, [pc, #408]	@ (8008840 <_strtod_l+0x858>)
 80086a8:	3d01      	subs	r5, #1
 80086aa:	429d      	cmp	r5, r3
 80086ac:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80086b0:	da50      	bge.n	8008754 <_strtod_l+0x76c>
 80086b2:	1b5b      	subs	r3, r3, r5
 80086b4:	2b1f      	cmp	r3, #31
 80086b6:	eba2 0203 	sub.w	r2, r2, r3
 80086ba:	f04f 0101 	mov.w	r1, #1
 80086be:	dc3d      	bgt.n	800873c <_strtod_l+0x754>
 80086c0:	fa01 f303 	lsl.w	r3, r1, r3
 80086c4:	9313      	str	r3, [sp, #76]	@ 0x4c
 80086c6:	2300      	movs	r3, #0
 80086c8:	9310      	str	r3, [sp, #64]	@ 0x40
 80086ca:	18bd      	adds	r5, r7, r2
 80086cc:	9b08      	ldr	r3, [sp, #32]
 80086ce:	42af      	cmp	r7, r5
 80086d0:	4416      	add	r6, r2
 80086d2:	441e      	add	r6, r3
 80086d4:	463b      	mov	r3, r7
 80086d6:	bfa8      	it	ge
 80086d8:	462b      	movge	r3, r5
 80086da:	42b3      	cmp	r3, r6
 80086dc:	bfa8      	it	ge
 80086de:	4633      	movge	r3, r6
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	bfc2      	ittt	gt
 80086e4:	1aed      	subgt	r5, r5, r3
 80086e6:	1af6      	subgt	r6, r6, r3
 80086e8:	1aff      	subgt	r7, r7, r3
 80086ea:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	dd16      	ble.n	800871e <_strtod_l+0x736>
 80086f0:	4641      	mov	r1, r8
 80086f2:	9805      	ldr	r0, [sp, #20]
 80086f4:	461a      	mov	r2, r3
 80086f6:	f7ff f9a5 	bl	8007a44 <__pow5mult>
 80086fa:	4680      	mov	r8, r0
 80086fc:	2800      	cmp	r0, #0
 80086fe:	d0ba      	beq.n	8008676 <_strtod_l+0x68e>
 8008700:	4601      	mov	r1, r0
 8008702:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008704:	9805      	ldr	r0, [sp, #20]
 8008706:	f7ff f8f3 	bl	80078f0 <__multiply>
 800870a:	900e      	str	r0, [sp, #56]	@ 0x38
 800870c:	2800      	cmp	r0, #0
 800870e:	f43f ae8a 	beq.w	8008426 <_strtod_l+0x43e>
 8008712:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008714:	9805      	ldr	r0, [sp, #20]
 8008716:	f7fe ffd7 	bl	80076c8 <_Bfree>
 800871a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800871c:	931a      	str	r3, [sp, #104]	@ 0x68
 800871e:	2d00      	cmp	r5, #0
 8008720:	dc1d      	bgt.n	800875e <_strtod_l+0x776>
 8008722:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008724:	2b00      	cmp	r3, #0
 8008726:	dd23      	ble.n	8008770 <_strtod_l+0x788>
 8008728:	4649      	mov	r1, r9
 800872a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800872c:	9805      	ldr	r0, [sp, #20]
 800872e:	f7ff f989 	bl	8007a44 <__pow5mult>
 8008732:	4681      	mov	r9, r0
 8008734:	b9e0      	cbnz	r0, 8008770 <_strtod_l+0x788>
 8008736:	f04f 0900 	mov.w	r9, #0
 800873a:	e674      	b.n	8008426 <_strtod_l+0x43e>
 800873c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8008740:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8008744:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8008748:	35e2      	adds	r5, #226	@ 0xe2
 800874a:	fa01 f305 	lsl.w	r3, r1, r5
 800874e:	9310      	str	r3, [sp, #64]	@ 0x40
 8008750:	9113      	str	r1, [sp, #76]	@ 0x4c
 8008752:	e7ba      	b.n	80086ca <_strtod_l+0x6e2>
 8008754:	2300      	movs	r3, #0
 8008756:	9310      	str	r3, [sp, #64]	@ 0x40
 8008758:	2301      	movs	r3, #1
 800875a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800875c:	e7b5      	b.n	80086ca <_strtod_l+0x6e2>
 800875e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008760:	9805      	ldr	r0, [sp, #20]
 8008762:	462a      	mov	r2, r5
 8008764:	f7ff f9c8 	bl	8007af8 <__lshift>
 8008768:	901a      	str	r0, [sp, #104]	@ 0x68
 800876a:	2800      	cmp	r0, #0
 800876c:	d1d9      	bne.n	8008722 <_strtod_l+0x73a>
 800876e:	e65a      	b.n	8008426 <_strtod_l+0x43e>
 8008770:	2e00      	cmp	r6, #0
 8008772:	dd07      	ble.n	8008784 <_strtod_l+0x79c>
 8008774:	4649      	mov	r1, r9
 8008776:	9805      	ldr	r0, [sp, #20]
 8008778:	4632      	mov	r2, r6
 800877a:	f7ff f9bd 	bl	8007af8 <__lshift>
 800877e:	4681      	mov	r9, r0
 8008780:	2800      	cmp	r0, #0
 8008782:	d0d8      	beq.n	8008736 <_strtod_l+0x74e>
 8008784:	2f00      	cmp	r7, #0
 8008786:	dd08      	ble.n	800879a <_strtod_l+0x7b2>
 8008788:	4641      	mov	r1, r8
 800878a:	9805      	ldr	r0, [sp, #20]
 800878c:	463a      	mov	r2, r7
 800878e:	f7ff f9b3 	bl	8007af8 <__lshift>
 8008792:	4680      	mov	r8, r0
 8008794:	2800      	cmp	r0, #0
 8008796:	f43f ae46 	beq.w	8008426 <_strtod_l+0x43e>
 800879a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800879c:	9805      	ldr	r0, [sp, #20]
 800879e:	464a      	mov	r2, r9
 80087a0:	f7ff fa32 	bl	8007c08 <__mdiff>
 80087a4:	4604      	mov	r4, r0
 80087a6:	2800      	cmp	r0, #0
 80087a8:	f43f ae3d 	beq.w	8008426 <_strtod_l+0x43e>
 80087ac:	68c3      	ldr	r3, [r0, #12]
 80087ae:	930f      	str	r3, [sp, #60]	@ 0x3c
 80087b0:	2300      	movs	r3, #0
 80087b2:	60c3      	str	r3, [r0, #12]
 80087b4:	4641      	mov	r1, r8
 80087b6:	f7ff fa0b 	bl	8007bd0 <__mcmp>
 80087ba:	2800      	cmp	r0, #0
 80087bc:	da46      	bge.n	800884c <_strtod_l+0x864>
 80087be:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80087c0:	ea53 030a 	orrs.w	r3, r3, sl
 80087c4:	d16c      	bne.n	80088a0 <_strtod_l+0x8b8>
 80087c6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d168      	bne.n	80088a0 <_strtod_l+0x8b8>
 80087ce:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80087d2:	0d1b      	lsrs	r3, r3, #20
 80087d4:	051b      	lsls	r3, r3, #20
 80087d6:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80087da:	d961      	bls.n	80088a0 <_strtod_l+0x8b8>
 80087dc:	6963      	ldr	r3, [r4, #20]
 80087de:	b913      	cbnz	r3, 80087e6 <_strtod_l+0x7fe>
 80087e0:	6923      	ldr	r3, [r4, #16]
 80087e2:	2b01      	cmp	r3, #1
 80087e4:	dd5c      	ble.n	80088a0 <_strtod_l+0x8b8>
 80087e6:	4621      	mov	r1, r4
 80087e8:	2201      	movs	r2, #1
 80087ea:	9805      	ldr	r0, [sp, #20]
 80087ec:	f7ff f984 	bl	8007af8 <__lshift>
 80087f0:	4641      	mov	r1, r8
 80087f2:	4604      	mov	r4, r0
 80087f4:	f7ff f9ec 	bl	8007bd0 <__mcmp>
 80087f8:	2800      	cmp	r0, #0
 80087fa:	dd51      	ble.n	80088a0 <_strtod_l+0x8b8>
 80087fc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008800:	9a08      	ldr	r2, [sp, #32]
 8008802:	0d1b      	lsrs	r3, r3, #20
 8008804:	051b      	lsls	r3, r3, #20
 8008806:	2a00      	cmp	r2, #0
 8008808:	d06b      	beq.n	80088e2 <_strtod_l+0x8fa>
 800880a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800880e:	d868      	bhi.n	80088e2 <_strtod_l+0x8fa>
 8008810:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8008814:	f67f ae9d 	bls.w	8008552 <_strtod_l+0x56a>
 8008818:	4b0a      	ldr	r3, [pc, #40]	@ (8008844 <_strtod_l+0x85c>)
 800881a:	4650      	mov	r0, sl
 800881c:	4659      	mov	r1, fp
 800881e:	2200      	movs	r2, #0
 8008820:	f7f7 feea 	bl	80005f8 <__aeabi_dmul>
 8008824:	4b08      	ldr	r3, [pc, #32]	@ (8008848 <_strtod_l+0x860>)
 8008826:	400b      	ands	r3, r1
 8008828:	4682      	mov	sl, r0
 800882a:	468b      	mov	fp, r1
 800882c:	2b00      	cmp	r3, #0
 800882e:	f47f ae05 	bne.w	800843c <_strtod_l+0x454>
 8008832:	9a05      	ldr	r2, [sp, #20]
 8008834:	2322      	movs	r3, #34	@ 0x22
 8008836:	6013      	str	r3, [r2, #0]
 8008838:	e600      	b.n	800843c <_strtod_l+0x454>
 800883a:	bf00      	nop
 800883c:	0800a118 	.word	0x0800a118
 8008840:	fffffc02 	.word	0xfffffc02
 8008844:	39500000 	.word	0x39500000
 8008848:	7ff00000 	.word	0x7ff00000
 800884c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8008850:	d165      	bne.n	800891e <_strtod_l+0x936>
 8008852:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8008854:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008858:	b35a      	cbz	r2, 80088b2 <_strtod_l+0x8ca>
 800885a:	4a9f      	ldr	r2, [pc, #636]	@ (8008ad8 <_strtod_l+0xaf0>)
 800885c:	4293      	cmp	r3, r2
 800885e:	d12b      	bne.n	80088b8 <_strtod_l+0x8d0>
 8008860:	9b08      	ldr	r3, [sp, #32]
 8008862:	4651      	mov	r1, sl
 8008864:	b303      	cbz	r3, 80088a8 <_strtod_l+0x8c0>
 8008866:	4b9d      	ldr	r3, [pc, #628]	@ (8008adc <_strtod_l+0xaf4>)
 8008868:	465a      	mov	r2, fp
 800886a:	4013      	ands	r3, r2
 800886c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8008870:	f04f 32ff 	mov.w	r2, #4294967295
 8008874:	d81b      	bhi.n	80088ae <_strtod_l+0x8c6>
 8008876:	0d1b      	lsrs	r3, r3, #20
 8008878:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800887c:	fa02 f303 	lsl.w	r3, r2, r3
 8008880:	4299      	cmp	r1, r3
 8008882:	d119      	bne.n	80088b8 <_strtod_l+0x8d0>
 8008884:	4b96      	ldr	r3, [pc, #600]	@ (8008ae0 <_strtod_l+0xaf8>)
 8008886:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008888:	429a      	cmp	r2, r3
 800888a:	d102      	bne.n	8008892 <_strtod_l+0x8aa>
 800888c:	3101      	adds	r1, #1
 800888e:	f43f adca 	beq.w	8008426 <_strtod_l+0x43e>
 8008892:	4b92      	ldr	r3, [pc, #584]	@ (8008adc <_strtod_l+0xaf4>)
 8008894:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008896:	401a      	ands	r2, r3
 8008898:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800889c:	f04f 0a00 	mov.w	sl, #0
 80088a0:	9b08      	ldr	r3, [sp, #32]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d1b8      	bne.n	8008818 <_strtod_l+0x830>
 80088a6:	e5c9      	b.n	800843c <_strtod_l+0x454>
 80088a8:	f04f 33ff 	mov.w	r3, #4294967295
 80088ac:	e7e8      	b.n	8008880 <_strtod_l+0x898>
 80088ae:	4613      	mov	r3, r2
 80088b0:	e7e6      	b.n	8008880 <_strtod_l+0x898>
 80088b2:	ea53 030a 	orrs.w	r3, r3, sl
 80088b6:	d0a1      	beq.n	80087fc <_strtod_l+0x814>
 80088b8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80088ba:	b1db      	cbz	r3, 80088f4 <_strtod_l+0x90c>
 80088bc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80088be:	4213      	tst	r3, r2
 80088c0:	d0ee      	beq.n	80088a0 <_strtod_l+0x8b8>
 80088c2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80088c4:	9a08      	ldr	r2, [sp, #32]
 80088c6:	4650      	mov	r0, sl
 80088c8:	4659      	mov	r1, fp
 80088ca:	b1bb      	cbz	r3, 80088fc <_strtod_l+0x914>
 80088cc:	f7ff fb6e 	bl	8007fac <sulp>
 80088d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80088d4:	ec53 2b10 	vmov	r2, r3, d0
 80088d8:	f7f7 fcd8 	bl	800028c <__adddf3>
 80088dc:	4682      	mov	sl, r0
 80088de:	468b      	mov	fp, r1
 80088e0:	e7de      	b.n	80088a0 <_strtod_l+0x8b8>
 80088e2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80088e6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80088ea:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80088ee:	f04f 3aff 	mov.w	sl, #4294967295
 80088f2:	e7d5      	b.n	80088a0 <_strtod_l+0x8b8>
 80088f4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80088f6:	ea13 0f0a 	tst.w	r3, sl
 80088fa:	e7e1      	b.n	80088c0 <_strtod_l+0x8d8>
 80088fc:	f7ff fb56 	bl	8007fac <sulp>
 8008900:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008904:	ec53 2b10 	vmov	r2, r3, d0
 8008908:	f7f7 fcbe 	bl	8000288 <__aeabi_dsub>
 800890c:	2200      	movs	r2, #0
 800890e:	2300      	movs	r3, #0
 8008910:	4682      	mov	sl, r0
 8008912:	468b      	mov	fp, r1
 8008914:	f7f8 f8d8 	bl	8000ac8 <__aeabi_dcmpeq>
 8008918:	2800      	cmp	r0, #0
 800891a:	d0c1      	beq.n	80088a0 <_strtod_l+0x8b8>
 800891c:	e619      	b.n	8008552 <_strtod_l+0x56a>
 800891e:	4641      	mov	r1, r8
 8008920:	4620      	mov	r0, r4
 8008922:	f7ff facd 	bl	8007ec0 <__ratio>
 8008926:	ec57 6b10 	vmov	r6, r7, d0
 800892a:	2200      	movs	r2, #0
 800892c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008930:	4630      	mov	r0, r6
 8008932:	4639      	mov	r1, r7
 8008934:	f7f8 f8dc 	bl	8000af0 <__aeabi_dcmple>
 8008938:	2800      	cmp	r0, #0
 800893a:	d06f      	beq.n	8008a1c <_strtod_l+0xa34>
 800893c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800893e:	2b00      	cmp	r3, #0
 8008940:	d17a      	bne.n	8008a38 <_strtod_l+0xa50>
 8008942:	f1ba 0f00 	cmp.w	sl, #0
 8008946:	d158      	bne.n	80089fa <_strtod_l+0xa12>
 8008948:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800894a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800894e:	2b00      	cmp	r3, #0
 8008950:	d15a      	bne.n	8008a08 <_strtod_l+0xa20>
 8008952:	4b64      	ldr	r3, [pc, #400]	@ (8008ae4 <_strtod_l+0xafc>)
 8008954:	2200      	movs	r2, #0
 8008956:	4630      	mov	r0, r6
 8008958:	4639      	mov	r1, r7
 800895a:	f7f8 f8bf 	bl	8000adc <__aeabi_dcmplt>
 800895e:	2800      	cmp	r0, #0
 8008960:	d159      	bne.n	8008a16 <_strtod_l+0xa2e>
 8008962:	4630      	mov	r0, r6
 8008964:	4639      	mov	r1, r7
 8008966:	4b60      	ldr	r3, [pc, #384]	@ (8008ae8 <_strtod_l+0xb00>)
 8008968:	2200      	movs	r2, #0
 800896a:	f7f7 fe45 	bl	80005f8 <__aeabi_dmul>
 800896e:	4606      	mov	r6, r0
 8008970:	460f      	mov	r7, r1
 8008972:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8008976:	9606      	str	r6, [sp, #24]
 8008978:	9307      	str	r3, [sp, #28]
 800897a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800897e:	4d57      	ldr	r5, [pc, #348]	@ (8008adc <_strtod_l+0xaf4>)
 8008980:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008984:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008986:	401d      	ands	r5, r3
 8008988:	4b58      	ldr	r3, [pc, #352]	@ (8008aec <_strtod_l+0xb04>)
 800898a:	429d      	cmp	r5, r3
 800898c:	f040 80b2 	bne.w	8008af4 <_strtod_l+0xb0c>
 8008990:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008992:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8008996:	ec4b ab10 	vmov	d0, sl, fp
 800899a:	f7ff f9c9 	bl	8007d30 <__ulp>
 800899e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80089a2:	ec51 0b10 	vmov	r0, r1, d0
 80089a6:	f7f7 fe27 	bl	80005f8 <__aeabi_dmul>
 80089aa:	4652      	mov	r2, sl
 80089ac:	465b      	mov	r3, fp
 80089ae:	f7f7 fc6d 	bl	800028c <__adddf3>
 80089b2:	460b      	mov	r3, r1
 80089b4:	4949      	ldr	r1, [pc, #292]	@ (8008adc <_strtod_l+0xaf4>)
 80089b6:	4a4e      	ldr	r2, [pc, #312]	@ (8008af0 <_strtod_l+0xb08>)
 80089b8:	4019      	ands	r1, r3
 80089ba:	4291      	cmp	r1, r2
 80089bc:	4682      	mov	sl, r0
 80089be:	d942      	bls.n	8008a46 <_strtod_l+0xa5e>
 80089c0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80089c2:	4b47      	ldr	r3, [pc, #284]	@ (8008ae0 <_strtod_l+0xaf8>)
 80089c4:	429a      	cmp	r2, r3
 80089c6:	d103      	bne.n	80089d0 <_strtod_l+0x9e8>
 80089c8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80089ca:	3301      	adds	r3, #1
 80089cc:	f43f ad2b 	beq.w	8008426 <_strtod_l+0x43e>
 80089d0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8008ae0 <_strtod_l+0xaf8>
 80089d4:	f04f 3aff 	mov.w	sl, #4294967295
 80089d8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80089da:	9805      	ldr	r0, [sp, #20]
 80089dc:	f7fe fe74 	bl	80076c8 <_Bfree>
 80089e0:	9805      	ldr	r0, [sp, #20]
 80089e2:	4649      	mov	r1, r9
 80089e4:	f7fe fe70 	bl	80076c8 <_Bfree>
 80089e8:	9805      	ldr	r0, [sp, #20]
 80089ea:	4641      	mov	r1, r8
 80089ec:	f7fe fe6c 	bl	80076c8 <_Bfree>
 80089f0:	9805      	ldr	r0, [sp, #20]
 80089f2:	4621      	mov	r1, r4
 80089f4:	f7fe fe68 	bl	80076c8 <_Bfree>
 80089f8:	e618      	b.n	800862c <_strtod_l+0x644>
 80089fa:	f1ba 0f01 	cmp.w	sl, #1
 80089fe:	d103      	bne.n	8008a08 <_strtod_l+0xa20>
 8008a00:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	f43f ada5 	beq.w	8008552 <_strtod_l+0x56a>
 8008a08:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8008ab8 <_strtod_l+0xad0>
 8008a0c:	4f35      	ldr	r7, [pc, #212]	@ (8008ae4 <_strtod_l+0xafc>)
 8008a0e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008a12:	2600      	movs	r6, #0
 8008a14:	e7b1      	b.n	800897a <_strtod_l+0x992>
 8008a16:	4f34      	ldr	r7, [pc, #208]	@ (8008ae8 <_strtod_l+0xb00>)
 8008a18:	2600      	movs	r6, #0
 8008a1a:	e7aa      	b.n	8008972 <_strtod_l+0x98a>
 8008a1c:	4b32      	ldr	r3, [pc, #200]	@ (8008ae8 <_strtod_l+0xb00>)
 8008a1e:	4630      	mov	r0, r6
 8008a20:	4639      	mov	r1, r7
 8008a22:	2200      	movs	r2, #0
 8008a24:	f7f7 fde8 	bl	80005f8 <__aeabi_dmul>
 8008a28:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008a2a:	4606      	mov	r6, r0
 8008a2c:	460f      	mov	r7, r1
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d09f      	beq.n	8008972 <_strtod_l+0x98a>
 8008a32:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8008a36:	e7a0      	b.n	800897a <_strtod_l+0x992>
 8008a38:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8008ac0 <_strtod_l+0xad8>
 8008a3c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008a40:	ec57 6b17 	vmov	r6, r7, d7
 8008a44:	e799      	b.n	800897a <_strtod_l+0x992>
 8008a46:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8008a4a:	9b08      	ldr	r3, [sp, #32]
 8008a4c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d1c1      	bne.n	80089d8 <_strtod_l+0x9f0>
 8008a54:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008a58:	0d1b      	lsrs	r3, r3, #20
 8008a5a:	051b      	lsls	r3, r3, #20
 8008a5c:	429d      	cmp	r5, r3
 8008a5e:	d1bb      	bne.n	80089d8 <_strtod_l+0x9f0>
 8008a60:	4630      	mov	r0, r6
 8008a62:	4639      	mov	r1, r7
 8008a64:	f7f8 f928 	bl	8000cb8 <__aeabi_d2lz>
 8008a68:	f7f7 fd98 	bl	800059c <__aeabi_l2d>
 8008a6c:	4602      	mov	r2, r0
 8008a6e:	460b      	mov	r3, r1
 8008a70:	4630      	mov	r0, r6
 8008a72:	4639      	mov	r1, r7
 8008a74:	f7f7 fc08 	bl	8000288 <__aeabi_dsub>
 8008a78:	460b      	mov	r3, r1
 8008a7a:	4602      	mov	r2, r0
 8008a7c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8008a80:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8008a84:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008a86:	ea46 060a 	orr.w	r6, r6, sl
 8008a8a:	431e      	orrs	r6, r3
 8008a8c:	d06f      	beq.n	8008b6e <_strtod_l+0xb86>
 8008a8e:	a30e      	add	r3, pc, #56	@ (adr r3, 8008ac8 <_strtod_l+0xae0>)
 8008a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a94:	f7f8 f822 	bl	8000adc <__aeabi_dcmplt>
 8008a98:	2800      	cmp	r0, #0
 8008a9a:	f47f accf 	bne.w	800843c <_strtod_l+0x454>
 8008a9e:	a30c      	add	r3, pc, #48	@ (adr r3, 8008ad0 <_strtod_l+0xae8>)
 8008aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aa4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008aa8:	f7f8 f836 	bl	8000b18 <__aeabi_dcmpgt>
 8008aac:	2800      	cmp	r0, #0
 8008aae:	d093      	beq.n	80089d8 <_strtod_l+0x9f0>
 8008ab0:	e4c4      	b.n	800843c <_strtod_l+0x454>
 8008ab2:	bf00      	nop
 8008ab4:	f3af 8000 	nop.w
 8008ab8:	00000000 	.word	0x00000000
 8008abc:	bff00000 	.word	0xbff00000
 8008ac0:	00000000 	.word	0x00000000
 8008ac4:	3ff00000 	.word	0x3ff00000
 8008ac8:	94a03595 	.word	0x94a03595
 8008acc:	3fdfffff 	.word	0x3fdfffff
 8008ad0:	35afe535 	.word	0x35afe535
 8008ad4:	3fe00000 	.word	0x3fe00000
 8008ad8:	000fffff 	.word	0x000fffff
 8008adc:	7ff00000 	.word	0x7ff00000
 8008ae0:	7fefffff 	.word	0x7fefffff
 8008ae4:	3ff00000 	.word	0x3ff00000
 8008ae8:	3fe00000 	.word	0x3fe00000
 8008aec:	7fe00000 	.word	0x7fe00000
 8008af0:	7c9fffff 	.word	0x7c9fffff
 8008af4:	9b08      	ldr	r3, [sp, #32]
 8008af6:	b323      	cbz	r3, 8008b42 <_strtod_l+0xb5a>
 8008af8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8008afc:	d821      	bhi.n	8008b42 <_strtod_l+0xb5a>
 8008afe:	a328      	add	r3, pc, #160	@ (adr r3, 8008ba0 <_strtod_l+0xbb8>)
 8008b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b04:	4630      	mov	r0, r6
 8008b06:	4639      	mov	r1, r7
 8008b08:	f7f7 fff2 	bl	8000af0 <__aeabi_dcmple>
 8008b0c:	b1a0      	cbz	r0, 8008b38 <_strtod_l+0xb50>
 8008b0e:	4639      	mov	r1, r7
 8008b10:	4630      	mov	r0, r6
 8008b12:	f7f8 f849 	bl	8000ba8 <__aeabi_d2uiz>
 8008b16:	2801      	cmp	r0, #1
 8008b18:	bf38      	it	cc
 8008b1a:	2001      	movcc	r0, #1
 8008b1c:	f7f7 fcf2 	bl	8000504 <__aeabi_ui2d>
 8008b20:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008b22:	4606      	mov	r6, r0
 8008b24:	460f      	mov	r7, r1
 8008b26:	b9fb      	cbnz	r3, 8008b68 <_strtod_l+0xb80>
 8008b28:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008b2c:	9014      	str	r0, [sp, #80]	@ 0x50
 8008b2e:	9315      	str	r3, [sp, #84]	@ 0x54
 8008b30:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8008b34:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008b38:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008b3a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8008b3e:	1b5b      	subs	r3, r3, r5
 8008b40:	9311      	str	r3, [sp, #68]	@ 0x44
 8008b42:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8008b46:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8008b4a:	f7ff f8f1 	bl	8007d30 <__ulp>
 8008b4e:	4650      	mov	r0, sl
 8008b50:	ec53 2b10 	vmov	r2, r3, d0
 8008b54:	4659      	mov	r1, fp
 8008b56:	f7f7 fd4f 	bl	80005f8 <__aeabi_dmul>
 8008b5a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8008b5e:	f7f7 fb95 	bl	800028c <__adddf3>
 8008b62:	4682      	mov	sl, r0
 8008b64:	468b      	mov	fp, r1
 8008b66:	e770      	b.n	8008a4a <_strtod_l+0xa62>
 8008b68:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8008b6c:	e7e0      	b.n	8008b30 <_strtod_l+0xb48>
 8008b6e:	a30e      	add	r3, pc, #56	@ (adr r3, 8008ba8 <_strtod_l+0xbc0>)
 8008b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b74:	f7f7 ffb2 	bl	8000adc <__aeabi_dcmplt>
 8008b78:	e798      	b.n	8008aac <_strtod_l+0xac4>
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008b7e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8008b80:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008b82:	6013      	str	r3, [r2, #0]
 8008b84:	f7ff ba6d 	b.w	8008062 <_strtod_l+0x7a>
 8008b88:	2a65      	cmp	r2, #101	@ 0x65
 8008b8a:	f43f ab66 	beq.w	800825a <_strtod_l+0x272>
 8008b8e:	2a45      	cmp	r2, #69	@ 0x45
 8008b90:	f43f ab63 	beq.w	800825a <_strtod_l+0x272>
 8008b94:	2301      	movs	r3, #1
 8008b96:	f7ff bb9e 	b.w	80082d6 <_strtod_l+0x2ee>
 8008b9a:	bf00      	nop
 8008b9c:	f3af 8000 	nop.w
 8008ba0:	ffc00000 	.word	0xffc00000
 8008ba4:	41dfffff 	.word	0x41dfffff
 8008ba8:	94a03595 	.word	0x94a03595
 8008bac:	3fcfffff 	.word	0x3fcfffff

08008bb0 <_strtod_r>:
 8008bb0:	4b01      	ldr	r3, [pc, #4]	@ (8008bb8 <_strtod_r+0x8>)
 8008bb2:	f7ff ba19 	b.w	8007fe8 <_strtod_l>
 8008bb6:	bf00      	nop
 8008bb8:	20000068 	.word	0x20000068

08008bbc <_strtol_l.constprop.0>:
 8008bbc:	2b24      	cmp	r3, #36	@ 0x24
 8008bbe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008bc2:	4686      	mov	lr, r0
 8008bc4:	4690      	mov	r8, r2
 8008bc6:	d801      	bhi.n	8008bcc <_strtol_l.constprop.0+0x10>
 8008bc8:	2b01      	cmp	r3, #1
 8008bca:	d106      	bne.n	8008bda <_strtol_l.constprop.0+0x1e>
 8008bcc:	f7fd fdbc 	bl	8006748 <__errno>
 8008bd0:	2316      	movs	r3, #22
 8008bd2:	6003      	str	r3, [r0, #0]
 8008bd4:	2000      	movs	r0, #0
 8008bd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bda:	4834      	ldr	r0, [pc, #208]	@ (8008cac <_strtol_l.constprop.0+0xf0>)
 8008bdc:	460d      	mov	r5, r1
 8008bde:	462a      	mov	r2, r5
 8008be0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008be4:	5d06      	ldrb	r6, [r0, r4]
 8008be6:	f016 0608 	ands.w	r6, r6, #8
 8008bea:	d1f8      	bne.n	8008bde <_strtol_l.constprop.0+0x22>
 8008bec:	2c2d      	cmp	r4, #45	@ 0x2d
 8008bee:	d12d      	bne.n	8008c4c <_strtol_l.constprop.0+0x90>
 8008bf0:	782c      	ldrb	r4, [r5, #0]
 8008bf2:	2601      	movs	r6, #1
 8008bf4:	1c95      	adds	r5, r2, #2
 8008bf6:	f033 0210 	bics.w	r2, r3, #16
 8008bfa:	d109      	bne.n	8008c10 <_strtol_l.constprop.0+0x54>
 8008bfc:	2c30      	cmp	r4, #48	@ 0x30
 8008bfe:	d12a      	bne.n	8008c56 <_strtol_l.constprop.0+0x9a>
 8008c00:	782a      	ldrb	r2, [r5, #0]
 8008c02:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008c06:	2a58      	cmp	r2, #88	@ 0x58
 8008c08:	d125      	bne.n	8008c56 <_strtol_l.constprop.0+0x9a>
 8008c0a:	786c      	ldrb	r4, [r5, #1]
 8008c0c:	2310      	movs	r3, #16
 8008c0e:	3502      	adds	r5, #2
 8008c10:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8008c14:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008c18:	2200      	movs	r2, #0
 8008c1a:	fbbc f9f3 	udiv	r9, ip, r3
 8008c1e:	4610      	mov	r0, r2
 8008c20:	fb03 ca19 	mls	sl, r3, r9, ip
 8008c24:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8008c28:	2f09      	cmp	r7, #9
 8008c2a:	d81b      	bhi.n	8008c64 <_strtol_l.constprop.0+0xa8>
 8008c2c:	463c      	mov	r4, r7
 8008c2e:	42a3      	cmp	r3, r4
 8008c30:	dd27      	ble.n	8008c82 <_strtol_l.constprop.0+0xc6>
 8008c32:	1c57      	adds	r7, r2, #1
 8008c34:	d007      	beq.n	8008c46 <_strtol_l.constprop.0+0x8a>
 8008c36:	4581      	cmp	r9, r0
 8008c38:	d320      	bcc.n	8008c7c <_strtol_l.constprop.0+0xc0>
 8008c3a:	d101      	bne.n	8008c40 <_strtol_l.constprop.0+0x84>
 8008c3c:	45a2      	cmp	sl, r4
 8008c3e:	db1d      	blt.n	8008c7c <_strtol_l.constprop.0+0xc0>
 8008c40:	fb00 4003 	mla	r0, r0, r3, r4
 8008c44:	2201      	movs	r2, #1
 8008c46:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008c4a:	e7eb      	b.n	8008c24 <_strtol_l.constprop.0+0x68>
 8008c4c:	2c2b      	cmp	r4, #43	@ 0x2b
 8008c4e:	bf04      	itt	eq
 8008c50:	782c      	ldrbeq	r4, [r5, #0]
 8008c52:	1c95      	addeq	r5, r2, #2
 8008c54:	e7cf      	b.n	8008bf6 <_strtol_l.constprop.0+0x3a>
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d1da      	bne.n	8008c10 <_strtol_l.constprop.0+0x54>
 8008c5a:	2c30      	cmp	r4, #48	@ 0x30
 8008c5c:	bf0c      	ite	eq
 8008c5e:	2308      	moveq	r3, #8
 8008c60:	230a      	movne	r3, #10
 8008c62:	e7d5      	b.n	8008c10 <_strtol_l.constprop.0+0x54>
 8008c64:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8008c68:	2f19      	cmp	r7, #25
 8008c6a:	d801      	bhi.n	8008c70 <_strtol_l.constprop.0+0xb4>
 8008c6c:	3c37      	subs	r4, #55	@ 0x37
 8008c6e:	e7de      	b.n	8008c2e <_strtol_l.constprop.0+0x72>
 8008c70:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8008c74:	2f19      	cmp	r7, #25
 8008c76:	d804      	bhi.n	8008c82 <_strtol_l.constprop.0+0xc6>
 8008c78:	3c57      	subs	r4, #87	@ 0x57
 8008c7a:	e7d8      	b.n	8008c2e <_strtol_l.constprop.0+0x72>
 8008c7c:	f04f 32ff 	mov.w	r2, #4294967295
 8008c80:	e7e1      	b.n	8008c46 <_strtol_l.constprop.0+0x8a>
 8008c82:	1c53      	adds	r3, r2, #1
 8008c84:	d108      	bne.n	8008c98 <_strtol_l.constprop.0+0xdc>
 8008c86:	2322      	movs	r3, #34	@ 0x22
 8008c88:	f8ce 3000 	str.w	r3, [lr]
 8008c8c:	4660      	mov	r0, ip
 8008c8e:	f1b8 0f00 	cmp.w	r8, #0
 8008c92:	d0a0      	beq.n	8008bd6 <_strtol_l.constprop.0+0x1a>
 8008c94:	1e69      	subs	r1, r5, #1
 8008c96:	e006      	b.n	8008ca6 <_strtol_l.constprop.0+0xea>
 8008c98:	b106      	cbz	r6, 8008c9c <_strtol_l.constprop.0+0xe0>
 8008c9a:	4240      	negs	r0, r0
 8008c9c:	f1b8 0f00 	cmp.w	r8, #0
 8008ca0:	d099      	beq.n	8008bd6 <_strtol_l.constprop.0+0x1a>
 8008ca2:	2a00      	cmp	r2, #0
 8008ca4:	d1f6      	bne.n	8008c94 <_strtol_l.constprop.0+0xd8>
 8008ca6:	f8c8 1000 	str.w	r1, [r8]
 8008caa:	e794      	b.n	8008bd6 <_strtol_l.constprop.0+0x1a>
 8008cac:	0800a141 	.word	0x0800a141

08008cb0 <_strtol_r>:
 8008cb0:	f7ff bf84 	b.w	8008bbc <_strtol_l.constprop.0>

08008cb4 <__ssputs_r>:
 8008cb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008cb8:	688e      	ldr	r6, [r1, #8]
 8008cba:	461f      	mov	r7, r3
 8008cbc:	42be      	cmp	r6, r7
 8008cbe:	680b      	ldr	r3, [r1, #0]
 8008cc0:	4682      	mov	sl, r0
 8008cc2:	460c      	mov	r4, r1
 8008cc4:	4690      	mov	r8, r2
 8008cc6:	d82d      	bhi.n	8008d24 <__ssputs_r+0x70>
 8008cc8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008ccc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008cd0:	d026      	beq.n	8008d20 <__ssputs_r+0x6c>
 8008cd2:	6965      	ldr	r5, [r4, #20]
 8008cd4:	6909      	ldr	r1, [r1, #16]
 8008cd6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008cda:	eba3 0901 	sub.w	r9, r3, r1
 8008cde:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008ce2:	1c7b      	adds	r3, r7, #1
 8008ce4:	444b      	add	r3, r9
 8008ce6:	106d      	asrs	r5, r5, #1
 8008ce8:	429d      	cmp	r5, r3
 8008cea:	bf38      	it	cc
 8008cec:	461d      	movcc	r5, r3
 8008cee:	0553      	lsls	r3, r2, #21
 8008cf0:	d527      	bpl.n	8008d42 <__ssputs_r+0x8e>
 8008cf2:	4629      	mov	r1, r5
 8008cf4:	f7fe fc1c 	bl	8007530 <_malloc_r>
 8008cf8:	4606      	mov	r6, r0
 8008cfa:	b360      	cbz	r0, 8008d56 <__ssputs_r+0xa2>
 8008cfc:	6921      	ldr	r1, [r4, #16]
 8008cfe:	464a      	mov	r2, r9
 8008d00:	f000 fa18 	bl	8009134 <memcpy>
 8008d04:	89a3      	ldrh	r3, [r4, #12]
 8008d06:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008d0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008d0e:	81a3      	strh	r3, [r4, #12]
 8008d10:	6126      	str	r6, [r4, #16]
 8008d12:	6165      	str	r5, [r4, #20]
 8008d14:	444e      	add	r6, r9
 8008d16:	eba5 0509 	sub.w	r5, r5, r9
 8008d1a:	6026      	str	r6, [r4, #0]
 8008d1c:	60a5      	str	r5, [r4, #8]
 8008d1e:	463e      	mov	r6, r7
 8008d20:	42be      	cmp	r6, r7
 8008d22:	d900      	bls.n	8008d26 <__ssputs_r+0x72>
 8008d24:	463e      	mov	r6, r7
 8008d26:	6820      	ldr	r0, [r4, #0]
 8008d28:	4632      	mov	r2, r6
 8008d2a:	4641      	mov	r1, r8
 8008d2c:	f000 f9c6 	bl	80090bc <memmove>
 8008d30:	68a3      	ldr	r3, [r4, #8]
 8008d32:	1b9b      	subs	r3, r3, r6
 8008d34:	60a3      	str	r3, [r4, #8]
 8008d36:	6823      	ldr	r3, [r4, #0]
 8008d38:	4433      	add	r3, r6
 8008d3a:	6023      	str	r3, [r4, #0]
 8008d3c:	2000      	movs	r0, #0
 8008d3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d42:	462a      	mov	r2, r5
 8008d44:	f000 fd89 	bl	800985a <_realloc_r>
 8008d48:	4606      	mov	r6, r0
 8008d4a:	2800      	cmp	r0, #0
 8008d4c:	d1e0      	bne.n	8008d10 <__ssputs_r+0x5c>
 8008d4e:	6921      	ldr	r1, [r4, #16]
 8008d50:	4650      	mov	r0, sl
 8008d52:	f7fe fb79 	bl	8007448 <_free_r>
 8008d56:	230c      	movs	r3, #12
 8008d58:	f8ca 3000 	str.w	r3, [sl]
 8008d5c:	89a3      	ldrh	r3, [r4, #12]
 8008d5e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008d62:	81a3      	strh	r3, [r4, #12]
 8008d64:	f04f 30ff 	mov.w	r0, #4294967295
 8008d68:	e7e9      	b.n	8008d3e <__ssputs_r+0x8a>
	...

08008d6c <_svfiprintf_r>:
 8008d6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d70:	4698      	mov	r8, r3
 8008d72:	898b      	ldrh	r3, [r1, #12]
 8008d74:	061b      	lsls	r3, r3, #24
 8008d76:	b09d      	sub	sp, #116	@ 0x74
 8008d78:	4607      	mov	r7, r0
 8008d7a:	460d      	mov	r5, r1
 8008d7c:	4614      	mov	r4, r2
 8008d7e:	d510      	bpl.n	8008da2 <_svfiprintf_r+0x36>
 8008d80:	690b      	ldr	r3, [r1, #16]
 8008d82:	b973      	cbnz	r3, 8008da2 <_svfiprintf_r+0x36>
 8008d84:	2140      	movs	r1, #64	@ 0x40
 8008d86:	f7fe fbd3 	bl	8007530 <_malloc_r>
 8008d8a:	6028      	str	r0, [r5, #0]
 8008d8c:	6128      	str	r0, [r5, #16]
 8008d8e:	b930      	cbnz	r0, 8008d9e <_svfiprintf_r+0x32>
 8008d90:	230c      	movs	r3, #12
 8008d92:	603b      	str	r3, [r7, #0]
 8008d94:	f04f 30ff 	mov.w	r0, #4294967295
 8008d98:	b01d      	add	sp, #116	@ 0x74
 8008d9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d9e:	2340      	movs	r3, #64	@ 0x40
 8008da0:	616b      	str	r3, [r5, #20]
 8008da2:	2300      	movs	r3, #0
 8008da4:	9309      	str	r3, [sp, #36]	@ 0x24
 8008da6:	2320      	movs	r3, #32
 8008da8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008dac:	f8cd 800c 	str.w	r8, [sp, #12]
 8008db0:	2330      	movs	r3, #48	@ 0x30
 8008db2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008f50 <_svfiprintf_r+0x1e4>
 8008db6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008dba:	f04f 0901 	mov.w	r9, #1
 8008dbe:	4623      	mov	r3, r4
 8008dc0:	469a      	mov	sl, r3
 8008dc2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008dc6:	b10a      	cbz	r2, 8008dcc <_svfiprintf_r+0x60>
 8008dc8:	2a25      	cmp	r2, #37	@ 0x25
 8008dca:	d1f9      	bne.n	8008dc0 <_svfiprintf_r+0x54>
 8008dcc:	ebba 0b04 	subs.w	fp, sl, r4
 8008dd0:	d00b      	beq.n	8008dea <_svfiprintf_r+0x7e>
 8008dd2:	465b      	mov	r3, fp
 8008dd4:	4622      	mov	r2, r4
 8008dd6:	4629      	mov	r1, r5
 8008dd8:	4638      	mov	r0, r7
 8008dda:	f7ff ff6b 	bl	8008cb4 <__ssputs_r>
 8008dde:	3001      	adds	r0, #1
 8008de0:	f000 80a7 	beq.w	8008f32 <_svfiprintf_r+0x1c6>
 8008de4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008de6:	445a      	add	r2, fp
 8008de8:	9209      	str	r2, [sp, #36]	@ 0x24
 8008dea:	f89a 3000 	ldrb.w	r3, [sl]
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	f000 809f 	beq.w	8008f32 <_svfiprintf_r+0x1c6>
 8008df4:	2300      	movs	r3, #0
 8008df6:	f04f 32ff 	mov.w	r2, #4294967295
 8008dfa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008dfe:	f10a 0a01 	add.w	sl, sl, #1
 8008e02:	9304      	str	r3, [sp, #16]
 8008e04:	9307      	str	r3, [sp, #28]
 8008e06:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008e0a:	931a      	str	r3, [sp, #104]	@ 0x68
 8008e0c:	4654      	mov	r4, sl
 8008e0e:	2205      	movs	r2, #5
 8008e10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e14:	484e      	ldr	r0, [pc, #312]	@ (8008f50 <_svfiprintf_r+0x1e4>)
 8008e16:	f7f7 f9db 	bl	80001d0 <memchr>
 8008e1a:	9a04      	ldr	r2, [sp, #16]
 8008e1c:	b9d8      	cbnz	r0, 8008e56 <_svfiprintf_r+0xea>
 8008e1e:	06d0      	lsls	r0, r2, #27
 8008e20:	bf44      	itt	mi
 8008e22:	2320      	movmi	r3, #32
 8008e24:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008e28:	0711      	lsls	r1, r2, #28
 8008e2a:	bf44      	itt	mi
 8008e2c:	232b      	movmi	r3, #43	@ 0x2b
 8008e2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008e32:	f89a 3000 	ldrb.w	r3, [sl]
 8008e36:	2b2a      	cmp	r3, #42	@ 0x2a
 8008e38:	d015      	beq.n	8008e66 <_svfiprintf_r+0xfa>
 8008e3a:	9a07      	ldr	r2, [sp, #28]
 8008e3c:	4654      	mov	r4, sl
 8008e3e:	2000      	movs	r0, #0
 8008e40:	f04f 0c0a 	mov.w	ip, #10
 8008e44:	4621      	mov	r1, r4
 8008e46:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008e4a:	3b30      	subs	r3, #48	@ 0x30
 8008e4c:	2b09      	cmp	r3, #9
 8008e4e:	d94b      	bls.n	8008ee8 <_svfiprintf_r+0x17c>
 8008e50:	b1b0      	cbz	r0, 8008e80 <_svfiprintf_r+0x114>
 8008e52:	9207      	str	r2, [sp, #28]
 8008e54:	e014      	b.n	8008e80 <_svfiprintf_r+0x114>
 8008e56:	eba0 0308 	sub.w	r3, r0, r8
 8008e5a:	fa09 f303 	lsl.w	r3, r9, r3
 8008e5e:	4313      	orrs	r3, r2
 8008e60:	9304      	str	r3, [sp, #16]
 8008e62:	46a2      	mov	sl, r4
 8008e64:	e7d2      	b.n	8008e0c <_svfiprintf_r+0xa0>
 8008e66:	9b03      	ldr	r3, [sp, #12]
 8008e68:	1d19      	adds	r1, r3, #4
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	9103      	str	r1, [sp, #12]
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	bfbb      	ittet	lt
 8008e72:	425b      	neglt	r3, r3
 8008e74:	f042 0202 	orrlt.w	r2, r2, #2
 8008e78:	9307      	strge	r3, [sp, #28]
 8008e7a:	9307      	strlt	r3, [sp, #28]
 8008e7c:	bfb8      	it	lt
 8008e7e:	9204      	strlt	r2, [sp, #16]
 8008e80:	7823      	ldrb	r3, [r4, #0]
 8008e82:	2b2e      	cmp	r3, #46	@ 0x2e
 8008e84:	d10a      	bne.n	8008e9c <_svfiprintf_r+0x130>
 8008e86:	7863      	ldrb	r3, [r4, #1]
 8008e88:	2b2a      	cmp	r3, #42	@ 0x2a
 8008e8a:	d132      	bne.n	8008ef2 <_svfiprintf_r+0x186>
 8008e8c:	9b03      	ldr	r3, [sp, #12]
 8008e8e:	1d1a      	adds	r2, r3, #4
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	9203      	str	r2, [sp, #12]
 8008e94:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008e98:	3402      	adds	r4, #2
 8008e9a:	9305      	str	r3, [sp, #20]
 8008e9c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008f60 <_svfiprintf_r+0x1f4>
 8008ea0:	7821      	ldrb	r1, [r4, #0]
 8008ea2:	2203      	movs	r2, #3
 8008ea4:	4650      	mov	r0, sl
 8008ea6:	f7f7 f993 	bl	80001d0 <memchr>
 8008eaa:	b138      	cbz	r0, 8008ebc <_svfiprintf_r+0x150>
 8008eac:	9b04      	ldr	r3, [sp, #16]
 8008eae:	eba0 000a 	sub.w	r0, r0, sl
 8008eb2:	2240      	movs	r2, #64	@ 0x40
 8008eb4:	4082      	lsls	r2, r0
 8008eb6:	4313      	orrs	r3, r2
 8008eb8:	3401      	adds	r4, #1
 8008eba:	9304      	str	r3, [sp, #16]
 8008ebc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ec0:	4824      	ldr	r0, [pc, #144]	@ (8008f54 <_svfiprintf_r+0x1e8>)
 8008ec2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008ec6:	2206      	movs	r2, #6
 8008ec8:	f7f7 f982 	bl	80001d0 <memchr>
 8008ecc:	2800      	cmp	r0, #0
 8008ece:	d036      	beq.n	8008f3e <_svfiprintf_r+0x1d2>
 8008ed0:	4b21      	ldr	r3, [pc, #132]	@ (8008f58 <_svfiprintf_r+0x1ec>)
 8008ed2:	bb1b      	cbnz	r3, 8008f1c <_svfiprintf_r+0x1b0>
 8008ed4:	9b03      	ldr	r3, [sp, #12]
 8008ed6:	3307      	adds	r3, #7
 8008ed8:	f023 0307 	bic.w	r3, r3, #7
 8008edc:	3308      	adds	r3, #8
 8008ede:	9303      	str	r3, [sp, #12]
 8008ee0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ee2:	4433      	add	r3, r6
 8008ee4:	9309      	str	r3, [sp, #36]	@ 0x24
 8008ee6:	e76a      	b.n	8008dbe <_svfiprintf_r+0x52>
 8008ee8:	fb0c 3202 	mla	r2, ip, r2, r3
 8008eec:	460c      	mov	r4, r1
 8008eee:	2001      	movs	r0, #1
 8008ef0:	e7a8      	b.n	8008e44 <_svfiprintf_r+0xd8>
 8008ef2:	2300      	movs	r3, #0
 8008ef4:	3401      	adds	r4, #1
 8008ef6:	9305      	str	r3, [sp, #20]
 8008ef8:	4619      	mov	r1, r3
 8008efa:	f04f 0c0a 	mov.w	ip, #10
 8008efe:	4620      	mov	r0, r4
 8008f00:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008f04:	3a30      	subs	r2, #48	@ 0x30
 8008f06:	2a09      	cmp	r2, #9
 8008f08:	d903      	bls.n	8008f12 <_svfiprintf_r+0x1a6>
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d0c6      	beq.n	8008e9c <_svfiprintf_r+0x130>
 8008f0e:	9105      	str	r1, [sp, #20]
 8008f10:	e7c4      	b.n	8008e9c <_svfiprintf_r+0x130>
 8008f12:	fb0c 2101 	mla	r1, ip, r1, r2
 8008f16:	4604      	mov	r4, r0
 8008f18:	2301      	movs	r3, #1
 8008f1a:	e7f0      	b.n	8008efe <_svfiprintf_r+0x192>
 8008f1c:	ab03      	add	r3, sp, #12
 8008f1e:	9300      	str	r3, [sp, #0]
 8008f20:	462a      	mov	r2, r5
 8008f22:	4b0e      	ldr	r3, [pc, #56]	@ (8008f5c <_svfiprintf_r+0x1f0>)
 8008f24:	a904      	add	r1, sp, #16
 8008f26:	4638      	mov	r0, r7
 8008f28:	f7fc fcca 	bl	80058c0 <_printf_float>
 8008f2c:	1c42      	adds	r2, r0, #1
 8008f2e:	4606      	mov	r6, r0
 8008f30:	d1d6      	bne.n	8008ee0 <_svfiprintf_r+0x174>
 8008f32:	89ab      	ldrh	r3, [r5, #12]
 8008f34:	065b      	lsls	r3, r3, #25
 8008f36:	f53f af2d 	bmi.w	8008d94 <_svfiprintf_r+0x28>
 8008f3a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008f3c:	e72c      	b.n	8008d98 <_svfiprintf_r+0x2c>
 8008f3e:	ab03      	add	r3, sp, #12
 8008f40:	9300      	str	r3, [sp, #0]
 8008f42:	462a      	mov	r2, r5
 8008f44:	4b05      	ldr	r3, [pc, #20]	@ (8008f5c <_svfiprintf_r+0x1f0>)
 8008f46:	a904      	add	r1, sp, #16
 8008f48:	4638      	mov	r0, r7
 8008f4a:	f7fc ff51 	bl	8005df0 <_printf_i>
 8008f4e:	e7ed      	b.n	8008f2c <_svfiprintf_r+0x1c0>
 8008f50:	0800a241 	.word	0x0800a241
 8008f54:	0800a24b 	.word	0x0800a24b
 8008f58:	080058c1 	.word	0x080058c1
 8008f5c:	08008cb5 	.word	0x08008cb5
 8008f60:	0800a247 	.word	0x0800a247

08008f64 <__sflush_r>:
 8008f64:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008f68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f6c:	0716      	lsls	r6, r2, #28
 8008f6e:	4605      	mov	r5, r0
 8008f70:	460c      	mov	r4, r1
 8008f72:	d454      	bmi.n	800901e <__sflush_r+0xba>
 8008f74:	684b      	ldr	r3, [r1, #4]
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	dc02      	bgt.n	8008f80 <__sflush_r+0x1c>
 8008f7a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	dd48      	ble.n	8009012 <__sflush_r+0xae>
 8008f80:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008f82:	2e00      	cmp	r6, #0
 8008f84:	d045      	beq.n	8009012 <__sflush_r+0xae>
 8008f86:	2300      	movs	r3, #0
 8008f88:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008f8c:	682f      	ldr	r7, [r5, #0]
 8008f8e:	6a21      	ldr	r1, [r4, #32]
 8008f90:	602b      	str	r3, [r5, #0]
 8008f92:	d030      	beq.n	8008ff6 <__sflush_r+0x92>
 8008f94:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008f96:	89a3      	ldrh	r3, [r4, #12]
 8008f98:	0759      	lsls	r1, r3, #29
 8008f9a:	d505      	bpl.n	8008fa8 <__sflush_r+0x44>
 8008f9c:	6863      	ldr	r3, [r4, #4]
 8008f9e:	1ad2      	subs	r2, r2, r3
 8008fa0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008fa2:	b10b      	cbz	r3, 8008fa8 <__sflush_r+0x44>
 8008fa4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008fa6:	1ad2      	subs	r2, r2, r3
 8008fa8:	2300      	movs	r3, #0
 8008faa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008fac:	6a21      	ldr	r1, [r4, #32]
 8008fae:	4628      	mov	r0, r5
 8008fb0:	47b0      	blx	r6
 8008fb2:	1c43      	adds	r3, r0, #1
 8008fb4:	89a3      	ldrh	r3, [r4, #12]
 8008fb6:	d106      	bne.n	8008fc6 <__sflush_r+0x62>
 8008fb8:	6829      	ldr	r1, [r5, #0]
 8008fba:	291d      	cmp	r1, #29
 8008fbc:	d82b      	bhi.n	8009016 <__sflush_r+0xb2>
 8008fbe:	4a2a      	ldr	r2, [pc, #168]	@ (8009068 <__sflush_r+0x104>)
 8008fc0:	410a      	asrs	r2, r1
 8008fc2:	07d6      	lsls	r6, r2, #31
 8008fc4:	d427      	bmi.n	8009016 <__sflush_r+0xb2>
 8008fc6:	2200      	movs	r2, #0
 8008fc8:	6062      	str	r2, [r4, #4]
 8008fca:	04d9      	lsls	r1, r3, #19
 8008fcc:	6922      	ldr	r2, [r4, #16]
 8008fce:	6022      	str	r2, [r4, #0]
 8008fd0:	d504      	bpl.n	8008fdc <__sflush_r+0x78>
 8008fd2:	1c42      	adds	r2, r0, #1
 8008fd4:	d101      	bne.n	8008fda <__sflush_r+0x76>
 8008fd6:	682b      	ldr	r3, [r5, #0]
 8008fd8:	b903      	cbnz	r3, 8008fdc <__sflush_r+0x78>
 8008fda:	6560      	str	r0, [r4, #84]	@ 0x54
 8008fdc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008fde:	602f      	str	r7, [r5, #0]
 8008fe0:	b1b9      	cbz	r1, 8009012 <__sflush_r+0xae>
 8008fe2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008fe6:	4299      	cmp	r1, r3
 8008fe8:	d002      	beq.n	8008ff0 <__sflush_r+0x8c>
 8008fea:	4628      	mov	r0, r5
 8008fec:	f7fe fa2c 	bl	8007448 <_free_r>
 8008ff0:	2300      	movs	r3, #0
 8008ff2:	6363      	str	r3, [r4, #52]	@ 0x34
 8008ff4:	e00d      	b.n	8009012 <__sflush_r+0xae>
 8008ff6:	2301      	movs	r3, #1
 8008ff8:	4628      	mov	r0, r5
 8008ffa:	47b0      	blx	r6
 8008ffc:	4602      	mov	r2, r0
 8008ffe:	1c50      	adds	r0, r2, #1
 8009000:	d1c9      	bne.n	8008f96 <__sflush_r+0x32>
 8009002:	682b      	ldr	r3, [r5, #0]
 8009004:	2b00      	cmp	r3, #0
 8009006:	d0c6      	beq.n	8008f96 <__sflush_r+0x32>
 8009008:	2b1d      	cmp	r3, #29
 800900a:	d001      	beq.n	8009010 <__sflush_r+0xac>
 800900c:	2b16      	cmp	r3, #22
 800900e:	d11e      	bne.n	800904e <__sflush_r+0xea>
 8009010:	602f      	str	r7, [r5, #0]
 8009012:	2000      	movs	r0, #0
 8009014:	e022      	b.n	800905c <__sflush_r+0xf8>
 8009016:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800901a:	b21b      	sxth	r3, r3
 800901c:	e01b      	b.n	8009056 <__sflush_r+0xf2>
 800901e:	690f      	ldr	r7, [r1, #16]
 8009020:	2f00      	cmp	r7, #0
 8009022:	d0f6      	beq.n	8009012 <__sflush_r+0xae>
 8009024:	0793      	lsls	r3, r2, #30
 8009026:	680e      	ldr	r6, [r1, #0]
 8009028:	bf08      	it	eq
 800902a:	694b      	ldreq	r3, [r1, #20]
 800902c:	600f      	str	r7, [r1, #0]
 800902e:	bf18      	it	ne
 8009030:	2300      	movne	r3, #0
 8009032:	eba6 0807 	sub.w	r8, r6, r7
 8009036:	608b      	str	r3, [r1, #8]
 8009038:	f1b8 0f00 	cmp.w	r8, #0
 800903c:	dde9      	ble.n	8009012 <__sflush_r+0xae>
 800903e:	6a21      	ldr	r1, [r4, #32]
 8009040:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009042:	4643      	mov	r3, r8
 8009044:	463a      	mov	r2, r7
 8009046:	4628      	mov	r0, r5
 8009048:	47b0      	blx	r6
 800904a:	2800      	cmp	r0, #0
 800904c:	dc08      	bgt.n	8009060 <__sflush_r+0xfc>
 800904e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009052:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009056:	81a3      	strh	r3, [r4, #12]
 8009058:	f04f 30ff 	mov.w	r0, #4294967295
 800905c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009060:	4407      	add	r7, r0
 8009062:	eba8 0800 	sub.w	r8, r8, r0
 8009066:	e7e7      	b.n	8009038 <__sflush_r+0xd4>
 8009068:	dfbffffe 	.word	0xdfbffffe

0800906c <_fflush_r>:
 800906c:	b538      	push	{r3, r4, r5, lr}
 800906e:	690b      	ldr	r3, [r1, #16]
 8009070:	4605      	mov	r5, r0
 8009072:	460c      	mov	r4, r1
 8009074:	b913      	cbnz	r3, 800907c <_fflush_r+0x10>
 8009076:	2500      	movs	r5, #0
 8009078:	4628      	mov	r0, r5
 800907a:	bd38      	pop	{r3, r4, r5, pc}
 800907c:	b118      	cbz	r0, 8009086 <_fflush_r+0x1a>
 800907e:	6a03      	ldr	r3, [r0, #32]
 8009080:	b90b      	cbnz	r3, 8009086 <_fflush_r+0x1a>
 8009082:	f7fd fa75 	bl	8006570 <__sinit>
 8009086:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800908a:	2b00      	cmp	r3, #0
 800908c:	d0f3      	beq.n	8009076 <_fflush_r+0xa>
 800908e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009090:	07d0      	lsls	r0, r2, #31
 8009092:	d404      	bmi.n	800909e <_fflush_r+0x32>
 8009094:	0599      	lsls	r1, r3, #22
 8009096:	d402      	bmi.n	800909e <_fflush_r+0x32>
 8009098:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800909a:	f7fd fb80 	bl	800679e <__retarget_lock_acquire_recursive>
 800909e:	4628      	mov	r0, r5
 80090a0:	4621      	mov	r1, r4
 80090a2:	f7ff ff5f 	bl	8008f64 <__sflush_r>
 80090a6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80090a8:	07da      	lsls	r2, r3, #31
 80090aa:	4605      	mov	r5, r0
 80090ac:	d4e4      	bmi.n	8009078 <_fflush_r+0xc>
 80090ae:	89a3      	ldrh	r3, [r4, #12]
 80090b0:	059b      	lsls	r3, r3, #22
 80090b2:	d4e1      	bmi.n	8009078 <_fflush_r+0xc>
 80090b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80090b6:	f7fd fb73 	bl	80067a0 <__retarget_lock_release_recursive>
 80090ba:	e7dd      	b.n	8009078 <_fflush_r+0xc>

080090bc <memmove>:
 80090bc:	4288      	cmp	r0, r1
 80090be:	b510      	push	{r4, lr}
 80090c0:	eb01 0402 	add.w	r4, r1, r2
 80090c4:	d902      	bls.n	80090cc <memmove+0x10>
 80090c6:	4284      	cmp	r4, r0
 80090c8:	4623      	mov	r3, r4
 80090ca:	d807      	bhi.n	80090dc <memmove+0x20>
 80090cc:	1e43      	subs	r3, r0, #1
 80090ce:	42a1      	cmp	r1, r4
 80090d0:	d008      	beq.n	80090e4 <memmove+0x28>
 80090d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80090d6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80090da:	e7f8      	b.n	80090ce <memmove+0x12>
 80090dc:	4402      	add	r2, r0
 80090de:	4601      	mov	r1, r0
 80090e0:	428a      	cmp	r2, r1
 80090e2:	d100      	bne.n	80090e6 <memmove+0x2a>
 80090e4:	bd10      	pop	{r4, pc}
 80090e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80090ea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80090ee:	e7f7      	b.n	80090e0 <memmove+0x24>

080090f0 <strncmp>:
 80090f0:	b510      	push	{r4, lr}
 80090f2:	b16a      	cbz	r2, 8009110 <strncmp+0x20>
 80090f4:	3901      	subs	r1, #1
 80090f6:	1884      	adds	r4, r0, r2
 80090f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80090fc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009100:	429a      	cmp	r2, r3
 8009102:	d103      	bne.n	800910c <strncmp+0x1c>
 8009104:	42a0      	cmp	r0, r4
 8009106:	d001      	beq.n	800910c <strncmp+0x1c>
 8009108:	2a00      	cmp	r2, #0
 800910a:	d1f5      	bne.n	80090f8 <strncmp+0x8>
 800910c:	1ad0      	subs	r0, r2, r3
 800910e:	bd10      	pop	{r4, pc}
 8009110:	4610      	mov	r0, r2
 8009112:	e7fc      	b.n	800910e <strncmp+0x1e>

08009114 <_sbrk_r>:
 8009114:	b538      	push	{r3, r4, r5, lr}
 8009116:	4d06      	ldr	r5, [pc, #24]	@ (8009130 <_sbrk_r+0x1c>)
 8009118:	2300      	movs	r3, #0
 800911a:	4604      	mov	r4, r0
 800911c:	4608      	mov	r0, r1
 800911e:	602b      	str	r3, [r5, #0]
 8009120:	f7f8 fb46 	bl	80017b0 <_sbrk>
 8009124:	1c43      	adds	r3, r0, #1
 8009126:	d102      	bne.n	800912e <_sbrk_r+0x1a>
 8009128:	682b      	ldr	r3, [r5, #0]
 800912a:	b103      	cbz	r3, 800912e <_sbrk_r+0x1a>
 800912c:	6023      	str	r3, [r4, #0]
 800912e:	bd38      	pop	{r3, r4, r5, pc}
 8009130:	200004ac 	.word	0x200004ac

08009134 <memcpy>:
 8009134:	440a      	add	r2, r1
 8009136:	4291      	cmp	r1, r2
 8009138:	f100 33ff 	add.w	r3, r0, #4294967295
 800913c:	d100      	bne.n	8009140 <memcpy+0xc>
 800913e:	4770      	bx	lr
 8009140:	b510      	push	{r4, lr}
 8009142:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009146:	f803 4f01 	strb.w	r4, [r3, #1]!
 800914a:	4291      	cmp	r1, r2
 800914c:	d1f9      	bne.n	8009142 <memcpy+0xe>
 800914e:	bd10      	pop	{r4, pc}

08009150 <nan>:
 8009150:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8009158 <nan+0x8>
 8009154:	4770      	bx	lr
 8009156:	bf00      	nop
 8009158:	00000000 	.word	0x00000000
 800915c:	7ff80000 	.word	0x7ff80000

08009160 <__assert_func>:
 8009160:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009162:	4614      	mov	r4, r2
 8009164:	461a      	mov	r2, r3
 8009166:	4b09      	ldr	r3, [pc, #36]	@ (800918c <__assert_func+0x2c>)
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	4605      	mov	r5, r0
 800916c:	68d8      	ldr	r0, [r3, #12]
 800916e:	b954      	cbnz	r4, 8009186 <__assert_func+0x26>
 8009170:	4b07      	ldr	r3, [pc, #28]	@ (8009190 <__assert_func+0x30>)
 8009172:	461c      	mov	r4, r3
 8009174:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009178:	9100      	str	r1, [sp, #0]
 800917a:	462b      	mov	r3, r5
 800917c:	4905      	ldr	r1, [pc, #20]	@ (8009194 <__assert_func+0x34>)
 800917e:	f000 fba7 	bl	80098d0 <fiprintf>
 8009182:	f000 fbb7 	bl	80098f4 <abort>
 8009186:	4b04      	ldr	r3, [pc, #16]	@ (8009198 <__assert_func+0x38>)
 8009188:	e7f4      	b.n	8009174 <__assert_func+0x14>
 800918a:	bf00      	nop
 800918c:	20000018 	.word	0x20000018
 8009190:	0800a295 	.word	0x0800a295
 8009194:	0800a267 	.word	0x0800a267
 8009198:	0800a25a 	.word	0x0800a25a

0800919c <_calloc_r>:
 800919c:	b570      	push	{r4, r5, r6, lr}
 800919e:	fba1 5402 	umull	r5, r4, r1, r2
 80091a2:	b93c      	cbnz	r4, 80091b4 <_calloc_r+0x18>
 80091a4:	4629      	mov	r1, r5
 80091a6:	f7fe f9c3 	bl	8007530 <_malloc_r>
 80091aa:	4606      	mov	r6, r0
 80091ac:	b928      	cbnz	r0, 80091ba <_calloc_r+0x1e>
 80091ae:	2600      	movs	r6, #0
 80091b0:	4630      	mov	r0, r6
 80091b2:	bd70      	pop	{r4, r5, r6, pc}
 80091b4:	220c      	movs	r2, #12
 80091b6:	6002      	str	r2, [r0, #0]
 80091b8:	e7f9      	b.n	80091ae <_calloc_r+0x12>
 80091ba:	462a      	mov	r2, r5
 80091bc:	4621      	mov	r1, r4
 80091be:	f7fd fa70 	bl	80066a2 <memset>
 80091c2:	e7f5      	b.n	80091b0 <_calloc_r+0x14>

080091c4 <rshift>:
 80091c4:	6903      	ldr	r3, [r0, #16]
 80091c6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80091ca:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80091ce:	ea4f 1261 	mov.w	r2, r1, asr #5
 80091d2:	f100 0414 	add.w	r4, r0, #20
 80091d6:	dd45      	ble.n	8009264 <rshift+0xa0>
 80091d8:	f011 011f 	ands.w	r1, r1, #31
 80091dc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80091e0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80091e4:	d10c      	bne.n	8009200 <rshift+0x3c>
 80091e6:	f100 0710 	add.w	r7, r0, #16
 80091ea:	4629      	mov	r1, r5
 80091ec:	42b1      	cmp	r1, r6
 80091ee:	d334      	bcc.n	800925a <rshift+0x96>
 80091f0:	1a9b      	subs	r3, r3, r2
 80091f2:	009b      	lsls	r3, r3, #2
 80091f4:	1eea      	subs	r2, r5, #3
 80091f6:	4296      	cmp	r6, r2
 80091f8:	bf38      	it	cc
 80091fa:	2300      	movcc	r3, #0
 80091fc:	4423      	add	r3, r4
 80091fe:	e015      	b.n	800922c <rshift+0x68>
 8009200:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009204:	f1c1 0820 	rsb	r8, r1, #32
 8009208:	40cf      	lsrs	r7, r1
 800920a:	f105 0e04 	add.w	lr, r5, #4
 800920e:	46a1      	mov	r9, r4
 8009210:	4576      	cmp	r6, lr
 8009212:	46f4      	mov	ip, lr
 8009214:	d815      	bhi.n	8009242 <rshift+0x7e>
 8009216:	1a9a      	subs	r2, r3, r2
 8009218:	0092      	lsls	r2, r2, #2
 800921a:	3a04      	subs	r2, #4
 800921c:	3501      	adds	r5, #1
 800921e:	42ae      	cmp	r6, r5
 8009220:	bf38      	it	cc
 8009222:	2200      	movcc	r2, #0
 8009224:	18a3      	adds	r3, r4, r2
 8009226:	50a7      	str	r7, [r4, r2]
 8009228:	b107      	cbz	r7, 800922c <rshift+0x68>
 800922a:	3304      	adds	r3, #4
 800922c:	1b1a      	subs	r2, r3, r4
 800922e:	42a3      	cmp	r3, r4
 8009230:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009234:	bf08      	it	eq
 8009236:	2300      	moveq	r3, #0
 8009238:	6102      	str	r2, [r0, #16]
 800923a:	bf08      	it	eq
 800923c:	6143      	streq	r3, [r0, #20]
 800923e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009242:	f8dc c000 	ldr.w	ip, [ip]
 8009246:	fa0c fc08 	lsl.w	ip, ip, r8
 800924a:	ea4c 0707 	orr.w	r7, ip, r7
 800924e:	f849 7b04 	str.w	r7, [r9], #4
 8009252:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009256:	40cf      	lsrs	r7, r1
 8009258:	e7da      	b.n	8009210 <rshift+0x4c>
 800925a:	f851 cb04 	ldr.w	ip, [r1], #4
 800925e:	f847 cf04 	str.w	ip, [r7, #4]!
 8009262:	e7c3      	b.n	80091ec <rshift+0x28>
 8009264:	4623      	mov	r3, r4
 8009266:	e7e1      	b.n	800922c <rshift+0x68>

08009268 <__hexdig_fun>:
 8009268:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800926c:	2b09      	cmp	r3, #9
 800926e:	d802      	bhi.n	8009276 <__hexdig_fun+0xe>
 8009270:	3820      	subs	r0, #32
 8009272:	b2c0      	uxtb	r0, r0
 8009274:	4770      	bx	lr
 8009276:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800927a:	2b05      	cmp	r3, #5
 800927c:	d801      	bhi.n	8009282 <__hexdig_fun+0x1a>
 800927e:	3847      	subs	r0, #71	@ 0x47
 8009280:	e7f7      	b.n	8009272 <__hexdig_fun+0xa>
 8009282:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8009286:	2b05      	cmp	r3, #5
 8009288:	d801      	bhi.n	800928e <__hexdig_fun+0x26>
 800928a:	3827      	subs	r0, #39	@ 0x27
 800928c:	e7f1      	b.n	8009272 <__hexdig_fun+0xa>
 800928e:	2000      	movs	r0, #0
 8009290:	4770      	bx	lr
	...

08009294 <__gethex>:
 8009294:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009298:	b085      	sub	sp, #20
 800929a:	468a      	mov	sl, r1
 800929c:	9302      	str	r3, [sp, #8]
 800929e:	680b      	ldr	r3, [r1, #0]
 80092a0:	9001      	str	r0, [sp, #4]
 80092a2:	4690      	mov	r8, r2
 80092a4:	1c9c      	adds	r4, r3, #2
 80092a6:	46a1      	mov	r9, r4
 80092a8:	f814 0b01 	ldrb.w	r0, [r4], #1
 80092ac:	2830      	cmp	r0, #48	@ 0x30
 80092ae:	d0fa      	beq.n	80092a6 <__gethex+0x12>
 80092b0:	eba9 0303 	sub.w	r3, r9, r3
 80092b4:	f1a3 0b02 	sub.w	fp, r3, #2
 80092b8:	f7ff ffd6 	bl	8009268 <__hexdig_fun>
 80092bc:	4605      	mov	r5, r0
 80092be:	2800      	cmp	r0, #0
 80092c0:	d168      	bne.n	8009394 <__gethex+0x100>
 80092c2:	49a0      	ldr	r1, [pc, #640]	@ (8009544 <__gethex+0x2b0>)
 80092c4:	2201      	movs	r2, #1
 80092c6:	4648      	mov	r0, r9
 80092c8:	f7ff ff12 	bl	80090f0 <strncmp>
 80092cc:	4607      	mov	r7, r0
 80092ce:	2800      	cmp	r0, #0
 80092d0:	d167      	bne.n	80093a2 <__gethex+0x10e>
 80092d2:	f899 0001 	ldrb.w	r0, [r9, #1]
 80092d6:	4626      	mov	r6, r4
 80092d8:	f7ff ffc6 	bl	8009268 <__hexdig_fun>
 80092dc:	2800      	cmp	r0, #0
 80092de:	d062      	beq.n	80093a6 <__gethex+0x112>
 80092e0:	4623      	mov	r3, r4
 80092e2:	7818      	ldrb	r0, [r3, #0]
 80092e4:	2830      	cmp	r0, #48	@ 0x30
 80092e6:	4699      	mov	r9, r3
 80092e8:	f103 0301 	add.w	r3, r3, #1
 80092ec:	d0f9      	beq.n	80092e2 <__gethex+0x4e>
 80092ee:	f7ff ffbb 	bl	8009268 <__hexdig_fun>
 80092f2:	fab0 f580 	clz	r5, r0
 80092f6:	096d      	lsrs	r5, r5, #5
 80092f8:	f04f 0b01 	mov.w	fp, #1
 80092fc:	464a      	mov	r2, r9
 80092fe:	4616      	mov	r6, r2
 8009300:	3201      	adds	r2, #1
 8009302:	7830      	ldrb	r0, [r6, #0]
 8009304:	f7ff ffb0 	bl	8009268 <__hexdig_fun>
 8009308:	2800      	cmp	r0, #0
 800930a:	d1f8      	bne.n	80092fe <__gethex+0x6a>
 800930c:	498d      	ldr	r1, [pc, #564]	@ (8009544 <__gethex+0x2b0>)
 800930e:	2201      	movs	r2, #1
 8009310:	4630      	mov	r0, r6
 8009312:	f7ff feed 	bl	80090f0 <strncmp>
 8009316:	2800      	cmp	r0, #0
 8009318:	d13f      	bne.n	800939a <__gethex+0x106>
 800931a:	b944      	cbnz	r4, 800932e <__gethex+0x9a>
 800931c:	1c74      	adds	r4, r6, #1
 800931e:	4622      	mov	r2, r4
 8009320:	4616      	mov	r6, r2
 8009322:	3201      	adds	r2, #1
 8009324:	7830      	ldrb	r0, [r6, #0]
 8009326:	f7ff ff9f 	bl	8009268 <__hexdig_fun>
 800932a:	2800      	cmp	r0, #0
 800932c:	d1f8      	bne.n	8009320 <__gethex+0x8c>
 800932e:	1ba4      	subs	r4, r4, r6
 8009330:	00a7      	lsls	r7, r4, #2
 8009332:	7833      	ldrb	r3, [r6, #0]
 8009334:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8009338:	2b50      	cmp	r3, #80	@ 0x50
 800933a:	d13e      	bne.n	80093ba <__gethex+0x126>
 800933c:	7873      	ldrb	r3, [r6, #1]
 800933e:	2b2b      	cmp	r3, #43	@ 0x2b
 8009340:	d033      	beq.n	80093aa <__gethex+0x116>
 8009342:	2b2d      	cmp	r3, #45	@ 0x2d
 8009344:	d034      	beq.n	80093b0 <__gethex+0x11c>
 8009346:	1c71      	adds	r1, r6, #1
 8009348:	2400      	movs	r4, #0
 800934a:	7808      	ldrb	r0, [r1, #0]
 800934c:	f7ff ff8c 	bl	8009268 <__hexdig_fun>
 8009350:	1e43      	subs	r3, r0, #1
 8009352:	b2db      	uxtb	r3, r3
 8009354:	2b18      	cmp	r3, #24
 8009356:	d830      	bhi.n	80093ba <__gethex+0x126>
 8009358:	f1a0 0210 	sub.w	r2, r0, #16
 800935c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009360:	f7ff ff82 	bl	8009268 <__hexdig_fun>
 8009364:	f100 3cff 	add.w	ip, r0, #4294967295
 8009368:	fa5f fc8c 	uxtb.w	ip, ip
 800936c:	f1bc 0f18 	cmp.w	ip, #24
 8009370:	f04f 030a 	mov.w	r3, #10
 8009374:	d91e      	bls.n	80093b4 <__gethex+0x120>
 8009376:	b104      	cbz	r4, 800937a <__gethex+0xe6>
 8009378:	4252      	negs	r2, r2
 800937a:	4417      	add	r7, r2
 800937c:	f8ca 1000 	str.w	r1, [sl]
 8009380:	b1ed      	cbz	r5, 80093be <__gethex+0x12a>
 8009382:	f1bb 0f00 	cmp.w	fp, #0
 8009386:	bf0c      	ite	eq
 8009388:	2506      	moveq	r5, #6
 800938a:	2500      	movne	r5, #0
 800938c:	4628      	mov	r0, r5
 800938e:	b005      	add	sp, #20
 8009390:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009394:	2500      	movs	r5, #0
 8009396:	462c      	mov	r4, r5
 8009398:	e7b0      	b.n	80092fc <__gethex+0x68>
 800939a:	2c00      	cmp	r4, #0
 800939c:	d1c7      	bne.n	800932e <__gethex+0x9a>
 800939e:	4627      	mov	r7, r4
 80093a0:	e7c7      	b.n	8009332 <__gethex+0x9e>
 80093a2:	464e      	mov	r6, r9
 80093a4:	462f      	mov	r7, r5
 80093a6:	2501      	movs	r5, #1
 80093a8:	e7c3      	b.n	8009332 <__gethex+0x9e>
 80093aa:	2400      	movs	r4, #0
 80093ac:	1cb1      	adds	r1, r6, #2
 80093ae:	e7cc      	b.n	800934a <__gethex+0xb6>
 80093b0:	2401      	movs	r4, #1
 80093b2:	e7fb      	b.n	80093ac <__gethex+0x118>
 80093b4:	fb03 0002 	mla	r0, r3, r2, r0
 80093b8:	e7ce      	b.n	8009358 <__gethex+0xc4>
 80093ba:	4631      	mov	r1, r6
 80093bc:	e7de      	b.n	800937c <__gethex+0xe8>
 80093be:	eba6 0309 	sub.w	r3, r6, r9
 80093c2:	3b01      	subs	r3, #1
 80093c4:	4629      	mov	r1, r5
 80093c6:	2b07      	cmp	r3, #7
 80093c8:	dc0a      	bgt.n	80093e0 <__gethex+0x14c>
 80093ca:	9801      	ldr	r0, [sp, #4]
 80093cc:	f7fe f93c 	bl	8007648 <_Balloc>
 80093d0:	4604      	mov	r4, r0
 80093d2:	b940      	cbnz	r0, 80093e6 <__gethex+0x152>
 80093d4:	4b5c      	ldr	r3, [pc, #368]	@ (8009548 <__gethex+0x2b4>)
 80093d6:	4602      	mov	r2, r0
 80093d8:	21e4      	movs	r1, #228	@ 0xe4
 80093da:	485c      	ldr	r0, [pc, #368]	@ (800954c <__gethex+0x2b8>)
 80093dc:	f7ff fec0 	bl	8009160 <__assert_func>
 80093e0:	3101      	adds	r1, #1
 80093e2:	105b      	asrs	r3, r3, #1
 80093e4:	e7ef      	b.n	80093c6 <__gethex+0x132>
 80093e6:	f100 0a14 	add.w	sl, r0, #20
 80093ea:	2300      	movs	r3, #0
 80093ec:	4655      	mov	r5, sl
 80093ee:	469b      	mov	fp, r3
 80093f0:	45b1      	cmp	r9, r6
 80093f2:	d337      	bcc.n	8009464 <__gethex+0x1d0>
 80093f4:	f845 bb04 	str.w	fp, [r5], #4
 80093f8:	eba5 050a 	sub.w	r5, r5, sl
 80093fc:	10ad      	asrs	r5, r5, #2
 80093fe:	6125      	str	r5, [r4, #16]
 8009400:	4658      	mov	r0, fp
 8009402:	f7fe fa13 	bl	800782c <__hi0bits>
 8009406:	016d      	lsls	r5, r5, #5
 8009408:	f8d8 6000 	ldr.w	r6, [r8]
 800940c:	1a2d      	subs	r5, r5, r0
 800940e:	42b5      	cmp	r5, r6
 8009410:	dd54      	ble.n	80094bc <__gethex+0x228>
 8009412:	1bad      	subs	r5, r5, r6
 8009414:	4629      	mov	r1, r5
 8009416:	4620      	mov	r0, r4
 8009418:	f7fe fda7 	bl	8007f6a <__any_on>
 800941c:	4681      	mov	r9, r0
 800941e:	b178      	cbz	r0, 8009440 <__gethex+0x1ac>
 8009420:	1e6b      	subs	r3, r5, #1
 8009422:	1159      	asrs	r1, r3, #5
 8009424:	f003 021f 	and.w	r2, r3, #31
 8009428:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800942c:	f04f 0901 	mov.w	r9, #1
 8009430:	fa09 f202 	lsl.w	r2, r9, r2
 8009434:	420a      	tst	r2, r1
 8009436:	d003      	beq.n	8009440 <__gethex+0x1ac>
 8009438:	454b      	cmp	r3, r9
 800943a:	dc36      	bgt.n	80094aa <__gethex+0x216>
 800943c:	f04f 0902 	mov.w	r9, #2
 8009440:	4629      	mov	r1, r5
 8009442:	4620      	mov	r0, r4
 8009444:	f7ff febe 	bl	80091c4 <rshift>
 8009448:	442f      	add	r7, r5
 800944a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800944e:	42bb      	cmp	r3, r7
 8009450:	da42      	bge.n	80094d8 <__gethex+0x244>
 8009452:	9801      	ldr	r0, [sp, #4]
 8009454:	4621      	mov	r1, r4
 8009456:	f7fe f937 	bl	80076c8 <_Bfree>
 800945a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800945c:	2300      	movs	r3, #0
 800945e:	6013      	str	r3, [r2, #0]
 8009460:	25a3      	movs	r5, #163	@ 0xa3
 8009462:	e793      	b.n	800938c <__gethex+0xf8>
 8009464:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8009468:	2a2e      	cmp	r2, #46	@ 0x2e
 800946a:	d012      	beq.n	8009492 <__gethex+0x1fe>
 800946c:	2b20      	cmp	r3, #32
 800946e:	d104      	bne.n	800947a <__gethex+0x1e6>
 8009470:	f845 bb04 	str.w	fp, [r5], #4
 8009474:	f04f 0b00 	mov.w	fp, #0
 8009478:	465b      	mov	r3, fp
 800947a:	7830      	ldrb	r0, [r6, #0]
 800947c:	9303      	str	r3, [sp, #12]
 800947e:	f7ff fef3 	bl	8009268 <__hexdig_fun>
 8009482:	9b03      	ldr	r3, [sp, #12]
 8009484:	f000 000f 	and.w	r0, r0, #15
 8009488:	4098      	lsls	r0, r3
 800948a:	ea4b 0b00 	orr.w	fp, fp, r0
 800948e:	3304      	adds	r3, #4
 8009490:	e7ae      	b.n	80093f0 <__gethex+0x15c>
 8009492:	45b1      	cmp	r9, r6
 8009494:	d8ea      	bhi.n	800946c <__gethex+0x1d8>
 8009496:	492b      	ldr	r1, [pc, #172]	@ (8009544 <__gethex+0x2b0>)
 8009498:	9303      	str	r3, [sp, #12]
 800949a:	2201      	movs	r2, #1
 800949c:	4630      	mov	r0, r6
 800949e:	f7ff fe27 	bl	80090f0 <strncmp>
 80094a2:	9b03      	ldr	r3, [sp, #12]
 80094a4:	2800      	cmp	r0, #0
 80094a6:	d1e1      	bne.n	800946c <__gethex+0x1d8>
 80094a8:	e7a2      	b.n	80093f0 <__gethex+0x15c>
 80094aa:	1ea9      	subs	r1, r5, #2
 80094ac:	4620      	mov	r0, r4
 80094ae:	f7fe fd5c 	bl	8007f6a <__any_on>
 80094b2:	2800      	cmp	r0, #0
 80094b4:	d0c2      	beq.n	800943c <__gethex+0x1a8>
 80094b6:	f04f 0903 	mov.w	r9, #3
 80094ba:	e7c1      	b.n	8009440 <__gethex+0x1ac>
 80094bc:	da09      	bge.n	80094d2 <__gethex+0x23e>
 80094be:	1b75      	subs	r5, r6, r5
 80094c0:	4621      	mov	r1, r4
 80094c2:	9801      	ldr	r0, [sp, #4]
 80094c4:	462a      	mov	r2, r5
 80094c6:	f7fe fb17 	bl	8007af8 <__lshift>
 80094ca:	1b7f      	subs	r7, r7, r5
 80094cc:	4604      	mov	r4, r0
 80094ce:	f100 0a14 	add.w	sl, r0, #20
 80094d2:	f04f 0900 	mov.w	r9, #0
 80094d6:	e7b8      	b.n	800944a <__gethex+0x1b6>
 80094d8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80094dc:	42bd      	cmp	r5, r7
 80094de:	dd6f      	ble.n	80095c0 <__gethex+0x32c>
 80094e0:	1bed      	subs	r5, r5, r7
 80094e2:	42ae      	cmp	r6, r5
 80094e4:	dc34      	bgt.n	8009550 <__gethex+0x2bc>
 80094e6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80094ea:	2b02      	cmp	r3, #2
 80094ec:	d022      	beq.n	8009534 <__gethex+0x2a0>
 80094ee:	2b03      	cmp	r3, #3
 80094f0:	d024      	beq.n	800953c <__gethex+0x2a8>
 80094f2:	2b01      	cmp	r3, #1
 80094f4:	d115      	bne.n	8009522 <__gethex+0x28e>
 80094f6:	42ae      	cmp	r6, r5
 80094f8:	d113      	bne.n	8009522 <__gethex+0x28e>
 80094fa:	2e01      	cmp	r6, #1
 80094fc:	d10b      	bne.n	8009516 <__gethex+0x282>
 80094fe:	9a02      	ldr	r2, [sp, #8]
 8009500:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009504:	6013      	str	r3, [r2, #0]
 8009506:	2301      	movs	r3, #1
 8009508:	6123      	str	r3, [r4, #16]
 800950a:	f8ca 3000 	str.w	r3, [sl]
 800950e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009510:	2562      	movs	r5, #98	@ 0x62
 8009512:	601c      	str	r4, [r3, #0]
 8009514:	e73a      	b.n	800938c <__gethex+0xf8>
 8009516:	1e71      	subs	r1, r6, #1
 8009518:	4620      	mov	r0, r4
 800951a:	f7fe fd26 	bl	8007f6a <__any_on>
 800951e:	2800      	cmp	r0, #0
 8009520:	d1ed      	bne.n	80094fe <__gethex+0x26a>
 8009522:	9801      	ldr	r0, [sp, #4]
 8009524:	4621      	mov	r1, r4
 8009526:	f7fe f8cf 	bl	80076c8 <_Bfree>
 800952a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800952c:	2300      	movs	r3, #0
 800952e:	6013      	str	r3, [r2, #0]
 8009530:	2550      	movs	r5, #80	@ 0x50
 8009532:	e72b      	b.n	800938c <__gethex+0xf8>
 8009534:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009536:	2b00      	cmp	r3, #0
 8009538:	d1f3      	bne.n	8009522 <__gethex+0x28e>
 800953a:	e7e0      	b.n	80094fe <__gethex+0x26a>
 800953c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800953e:	2b00      	cmp	r3, #0
 8009540:	d1dd      	bne.n	80094fe <__gethex+0x26a>
 8009542:	e7ee      	b.n	8009522 <__gethex+0x28e>
 8009544:	0800a0e8 	.word	0x0800a0e8
 8009548:	08009f7d 	.word	0x08009f7d
 800954c:	0800a296 	.word	0x0800a296
 8009550:	1e6f      	subs	r7, r5, #1
 8009552:	f1b9 0f00 	cmp.w	r9, #0
 8009556:	d130      	bne.n	80095ba <__gethex+0x326>
 8009558:	b127      	cbz	r7, 8009564 <__gethex+0x2d0>
 800955a:	4639      	mov	r1, r7
 800955c:	4620      	mov	r0, r4
 800955e:	f7fe fd04 	bl	8007f6a <__any_on>
 8009562:	4681      	mov	r9, r0
 8009564:	117a      	asrs	r2, r7, #5
 8009566:	2301      	movs	r3, #1
 8009568:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800956c:	f007 071f 	and.w	r7, r7, #31
 8009570:	40bb      	lsls	r3, r7
 8009572:	4213      	tst	r3, r2
 8009574:	4629      	mov	r1, r5
 8009576:	4620      	mov	r0, r4
 8009578:	bf18      	it	ne
 800957a:	f049 0902 	orrne.w	r9, r9, #2
 800957e:	f7ff fe21 	bl	80091c4 <rshift>
 8009582:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8009586:	1b76      	subs	r6, r6, r5
 8009588:	2502      	movs	r5, #2
 800958a:	f1b9 0f00 	cmp.w	r9, #0
 800958e:	d047      	beq.n	8009620 <__gethex+0x38c>
 8009590:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009594:	2b02      	cmp	r3, #2
 8009596:	d015      	beq.n	80095c4 <__gethex+0x330>
 8009598:	2b03      	cmp	r3, #3
 800959a:	d017      	beq.n	80095cc <__gethex+0x338>
 800959c:	2b01      	cmp	r3, #1
 800959e:	d109      	bne.n	80095b4 <__gethex+0x320>
 80095a0:	f019 0f02 	tst.w	r9, #2
 80095a4:	d006      	beq.n	80095b4 <__gethex+0x320>
 80095a6:	f8da 3000 	ldr.w	r3, [sl]
 80095aa:	ea49 0903 	orr.w	r9, r9, r3
 80095ae:	f019 0f01 	tst.w	r9, #1
 80095b2:	d10e      	bne.n	80095d2 <__gethex+0x33e>
 80095b4:	f045 0510 	orr.w	r5, r5, #16
 80095b8:	e032      	b.n	8009620 <__gethex+0x38c>
 80095ba:	f04f 0901 	mov.w	r9, #1
 80095be:	e7d1      	b.n	8009564 <__gethex+0x2d0>
 80095c0:	2501      	movs	r5, #1
 80095c2:	e7e2      	b.n	800958a <__gethex+0x2f6>
 80095c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80095c6:	f1c3 0301 	rsb	r3, r3, #1
 80095ca:	930f      	str	r3, [sp, #60]	@ 0x3c
 80095cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d0f0      	beq.n	80095b4 <__gethex+0x320>
 80095d2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80095d6:	f104 0314 	add.w	r3, r4, #20
 80095da:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80095de:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80095e2:	f04f 0c00 	mov.w	ip, #0
 80095e6:	4618      	mov	r0, r3
 80095e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80095ec:	f1b2 3fff 	cmp.w	r2, #4294967295
 80095f0:	d01b      	beq.n	800962a <__gethex+0x396>
 80095f2:	3201      	adds	r2, #1
 80095f4:	6002      	str	r2, [r0, #0]
 80095f6:	2d02      	cmp	r5, #2
 80095f8:	f104 0314 	add.w	r3, r4, #20
 80095fc:	d13c      	bne.n	8009678 <__gethex+0x3e4>
 80095fe:	f8d8 2000 	ldr.w	r2, [r8]
 8009602:	3a01      	subs	r2, #1
 8009604:	42b2      	cmp	r2, r6
 8009606:	d109      	bne.n	800961c <__gethex+0x388>
 8009608:	1171      	asrs	r1, r6, #5
 800960a:	2201      	movs	r2, #1
 800960c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009610:	f006 061f 	and.w	r6, r6, #31
 8009614:	fa02 f606 	lsl.w	r6, r2, r6
 8009618:	421e      	tst	r6, r3
 800961a:	d13a      	bne.n	8009692 <__gethex+0x3fe>
 800961c:	f045 0520 	orr.w	r5, r5, #32
 8009620:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009622:	601c      	str	r4, [r3, #0]
 8009624:	9b02      	ldr	r3, [sp, #8]
 8009626:	601f      	str	r7, [r3, #0]
 8009628:	e6b0      	b.n	800938c <__gethex+0xf8>
 800962a:	4299      	cmp	r1, r3
 800962c:	f843 cc04 	str.w	ip, [r3, #-4]
 8009630:	d8d9      	bhi.n	80095e6 <__gethex+0x352>
 8009632:	68a3      	ldr	r3, [r4, #8]
 8009634:	459b      	cmp	fp, r3
 8009636:	db17      	blt.n	8009668 <__gethex+0x3d4>
 8009638:	6861      	ldr	r1, [r4, #4]
 800963a:	9801      	ldr	r0, [sp, #4]
 800963c:	3101      	adds	r1, #1
 800963e:	f7fe f803 	bl	8007648 <_Balloc>
 8009642:	4681      	mov	r9, r0
 8009644:	b918      	cbnz	r0, 800964e <__gethex+0x3ba>
 8009646:	4b1a      	ldr	r3, [pc, #104]	@ (80096b0 <__gethex+0x41c>)
 8009648:	4602      	mov	r2, r0
 800964a:	2184      	movs	r1, #132	@ 0x84
 800964c:	e6c5      	b.n	80093da <__gethex+0x146>
 800964e:	6922      	ldr	r2, [r4, #16]
 8009650:	3202      	adds	r2, #2
 8009652:	f104 010c 	add.w	r1, r4, #12
 8009656:	0092      	lsls	r2, r2, #2
 8009658:	300c      	adds	r0, #12
 800965a:	f7ff fd6b 	bl	8009134 <memcpy>
 800965e:	4621      	mov	r1, r4
 8009660:	9801      	ldr	r0, [sp, #4]
 8009662:	f7fe f831 	bl	80076c8 <_Bfree>
 8009666:	464c      	mov	r4, r9
 8009668:	6923      	ldr	r3, [r4, #16]
 800966a:	1c5a      	adds	r2, r3, #1
 800966c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009670:	6122      	str	r2, [r4, #16]
 8009672:	2201      	movs	r2, #1
 8009674:	615a      	str	r2, [r3, #20]
 8009676:	e7be      	b.n	80095f6 <__gethex+0x362>
 8009678:	6922      	ldr	r2, [r4, #16]
 800967a:	455a      	cmp	r2, fp
 800967c:	dd0b      	ble.n	8009696 <__gethex+0x402>
 800967e:	2101      	movs	r1, #1
 8009680:	4620      	mov	r0, r4
 8009682:	f7ff fd9f 	bl	80091c4 <rshift>
 8009686:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800968a:	3701      	adds	r7, #1
 800968c:	42bb      	cmp	r3, r7
 800968e:	f6ff aee0 	blt.w	8009452 <__gethex+0x1be>
 8009692:	2501      	movs	r5, #1
 8009694:	e7c2      	b.n	800961c <__gethex+0x388>
 8009696:	f016 061f 	ands.w	r6, r6, #31
 800969a:	d0fa      	beq.n	8009692 <__gethex+0x3fe>
 800969c:	4453      	add	r3, sl
 800969e:	f1c6 0620 	rsb	r6, r6, #32
 80096a2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80096a6:	f7fe f8c1 	bl	800782c <__hi0bits>
 80096aa:	42b0      	cmp	r0, r6
 80096ac:	dbe7      	blt.n	800967e <__gethex+0x3ea>
 80096ae:	e7f0      	b.n	8009692 <__gethex+0x3fe>
 80096b0:	08009f7d 	.word	0x08009f7d

080096b4 <L_shift>:
 80096b4:	f1c2 0208 	rsb	r2, r2, #8
 80096b8:	0092      	lsls	r2, r2, #2
 80096ba:	b570      	push	{r4, r5, r6, lr}
 80096bc:	f1c2 0620 	rsb	r6, r2, #32
 80096c0:	6843      	ldr	r3, [r0, #4]
 80096c2:	6804      	ldr	r4, [r0, #0]
 80096c4:	fa03 f506 	lsl.w	r5, r3, r6
 80096c8:	432c      	orrs	r4, r5
 80096ca:	40d3      	lsrs	r3, r2
 80096cc:	6004      	str	r4, [r0, #0]
 80096ce:	f840 3f04 	str.w	r3, [r0, #4]!
 80096d2:	4288      	cmp	r0, r1
 80096d4:	d3f4      	bcc.n	80096c0 <L_shift+0xc>
 80096d6:	bd70      	pop	{r4, r5, r6, pc}

080096d8 <__match>:
 80096d8:	b530      	push	{r4, r5, lr}
 80096da:	6803      	ldr	r3, [r0, #0]
 80096dc:	3301      	adds	r3, #1
 80096de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80096e2:	b914      	cbnz	r4, 80096ea <__match+0x12>
 80096e4:	6003      	str	r3, [r0, #0]
 80096e6:	2001      	movs	r0, #1
 80096e8:	bd30      	pop	{r4, r5, pc}
 80096ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80096ee:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80096f2:	2d19      	cmp	r5, #25
 80096f4:	bf98      	it	ls
 80096f6:	3220      	addls	r2, #32
 80096f8:	42a2      	cmp	r2, r4
 80096fa:	d0f0      	beq.n	80096de <__match+0x6>
 80096fc:	2000      	movs	r0, #0
 80096fe:	e7f3      	b.n	80096e8 <__match+0x10>

08009700 <__hexnan>:
 8009700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009704:	680b      	ldr	r3, [r1, #0]
 8009706:	6801      	ldr	r1, [r0, #0]
 8009708:	115e      	asrs	r6, r3, #5
 800970a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800970e:	f013 031f 	ands.w	r3, r3, #31
 8009712:	b087      	sub	sp, #28
 8009714:	bf18      	it	ne
 8009716:	3604      	addne	r6, #4
 8009718:	2500      	movs	r5, #0
 800971a:	1f37      	subs	r7, r6, #4
 800971c:	4682      	mov	sl, r0
 800971e:	4690      	mov	r8, r2
 8009720:	9301      	str	r3, [sp, #4]
 8009722:	f846 5c04 	str.w	r5, [r6, #-4]
 8009726:	46b9      	mov	r9, r7
 8009728:	463c      	mov	r4, r7
 800972a:	9502      	str	r5, [sp, #8]
 800972c:	46ab      	mov	fp, r5
 800972e:	784a      	ldrb	r2, [r1, #1]
 8009730:	1c4b      	adds	r3, r1, #1
 8009732:	9303      	str	r3, [sp, #12]
 8009734:	b342      	cbz	r2, 8009788 <__hexnan+0x88>
 8009736:	4610      	mov	r0, r2
 8009738:	9105      	str	r1, [sp, #20]
 800973a:	9204      	str	r2, [sp, #16]
 800973c:	f7ff fd94 	bl	8009268 <__hexdig_fun>
 8009740:	2800      	cmp	r0, #0
 8009742:	d151      	bne.n	80097e8 <__hexnan+0xe8>
 8009744:	9a04      	ldr	r2, [sp, #16]
 8009746:	9905      	ldr	r1, [sp, #20]
 8009748:	2a20      	cmp	r2, #32
 800974a:	d818      	bhi.n	800977e <__hexnan+0x7e>
 800974c:	9b02      	ldr	r3, [sp, #8]
 800974e:	459b      	cmp	fp, r3
 8009750:	dd13      	ble.n	800977a <__hexnan+0x7a>
 8009752:	454c      	cmp	r4, r9
 8009754:	d206      	bcs.n	8009764 <__hexnan+0x64>
 8009756:	2d07      	cmp	r5, #7
 8009758:	dc04      	bgt.n	8009764 <__hexnan+0x64>
 800975a:	462a      	mov	r2, r5
 800975c:	4649      	mov	r1, r9
 800975e:	4620      	mov	r0, r4
 8009760:	f7ff ffa8 	bl	80096b4 <L_shift>
 8009764:	4544      	cmp	r4, r8
 8009766:	d952      	bls.n	800980e <__hexnan+0x10e>
 8009768:	2300      	movs	r3, #0
 800976a:	f1a4 0904 	sub.w	r9, r4, #4
 800976e:	f844 3c04 	str.w	r3, [r4, #-4]
 8009772:	f8cd b008 	str.w	fp, [sp, #8]
 8009776:	464c      	mov	r4, r9
 8009778:	461d      	mov	r5, r3
 800977a:	9903      	ldr	r1, [sp, #12]
 800977c:	e7d7      	b.n	800972e <__hexnan+0x2e>
 800977e:	2a29      	cmp	r2, #41	@ 0x29
 8009780:	d157      	bne.n	8009832 <__hexnan+0x132>
 8009782:	3102      	adds	r1, #2
 8009784:	f8ca 1000 	str.w	r1, [sl]
 8009788:	f1bb 0f00 	cmp.w	fp, #0
 800978c:	d051      	beq.n	8009832 <__hexnan+0x132>
 800978e:	454c      	cmp	r4, r9
 8009790:	d206      	bcs.n	80097a0 <__hexnan+0xa0>
 8009792:	2d07      	cmp	r5, #7
 8009794:	dc04      	bgt.n	80097a0 <__hexnan+0xa0>
 8009796:	462a      	mov	r2, r5
 8009798:	4649      	mov	r1, r9
 800979a:	4620      	mov	r0, r4
 800979c:	f7ff ff8a 	bl	80096b4 <L_shift>
 80097a0:	4544      	cmp	r4, r8
 80097a2:	d936      	bls.n	8009812 <__hexnan+0x112>
 80097a4:	f1a8 0204 	sub.w	r2, r8, #4
 80097a8:	4623      	mov	r3, r4
 80097aa:	f853 1b04 	ldr.w	r1, [r3], #4
 80097ae:	f842 1f04 	str.w	r1, [r2, #4]!
 80097b2:	429f      	cmp	r7, r3
 80097b4:	d2f9      	bcs.n	80097aa <__hexnan+0xaa>
 80097b6:	1b3b      	subs	r3, r7, r4
 80097b8:	f023 0303 	bic.w	r3, r3, #3
 80097bc:	3304      	adds	r3, #4
 80097be:	3401      	adds	r4, #1
 80097c0:	3e03      	subs	r6, #3
 80097c2:	42b4      	cmp	r4, r6
 80097c4:	bf88      	it	hi
 80097c6:	2304      	movhi	r3, #4
 80097c8:	4443      	add	r3, r8
 80097ca:	2200      	movs	r2, #0
 80097cc:	f843 2b04 	str.w	r2, [r3], #4
 80097d0:	429f      	cmp	r7, r3
 80097d2:	d2fb      	bcs.n	80097cc <__hexnan+0xcc>
 80097d4:	683b      	ldr	r3, [r7, #0]
 80097d6:	b91b      	cbnz	r3, 80097e0 <__hexnan+0xe0>
 80097d8:	4547      	cmp	r7, r8
 80097da:	d128      	bne.n	800982e <__hexnan+0x12e>
 80097dc:	2301      	movs	r3, #1
 80097de:	603b      	str	r3, [r7, #0]
 80097e0:	2005      	movs	r0, #5
 80097e2:	b007      	add	sp, #28
 80097e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097e8:	3501      	adds	r5, #1
 80097ea:	2d08      	cmp	r5, #8
 80097ec:	f10b 0b01 	add.w	fp, fp, #1
 80097f0:	dd06      	ble.n	8009800 <__hexnan+0x100>
 80097f2:	4544      	cmp	r4, r8
 80097f4:	d9c1      	bls.n	800977a <__hexnan+0x7a>
 80097f6:	2300      	movs	r3, #0
 80097f8:	f844 3c04 	str.w	r3, [r4, #-4]
 80097fc:	2501      	movs	r5, #1
 80097fe:	3c04      	subs	r4, #4
 8009800:	6822      	ldr	r2, [r4, #0]
 8009802:	f000 000f 	and.w	r0, r0, #15
 8009806:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800980a:	6020      	str	r0, [r4, #0]
 800980c:	e7b5      	b.n	800977a <__hexnan+0x7a>
 800980e:	2508      	movs	r5, #8
 8009810:	e7b3      	b.n	800977a <__hexnan+0x7a>
 8009812:	9b01      	ldr	r3, [sp, #4]
 8009814:	2b00      	cmp	r3, #0
 8009816:	d0dd      	beq.n	80097d4 <__hexnan+0xd4>
 8009818:	f1c3 0320 	rsb	r3, r3, #32
 800981c:	f04f 32ff 	mov.w	r2, #4294967295
 8009820:	40da      	lsrs	r2, r3
 8009822:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8009826:	4013      	ands	r3, r2
 8009828:	f846 3c04 	str.w	r3, [r6, #-4]
 800982c:	e7d2      	b.n	80097d4 <__hexnan+0xd4>
 800982e:	3f04      	subs	r7, #4
 8009830:	e7d0      	b.n	80097d4 <__hexnan+0xd4>
 8009832:	2004      	movs	r0, #4
 8009834:	e7d5      	b.n	80097e2 <__hexnan+0xe2>

08009836 <__ascii_mbtowc>:
 8009836:	b082      	sub	sp, #8
 8009838:	b901      	cbnz	r1, 800983c <__ascii_mbtowc+0x6>
 800983a:	a901      	add	r1, sp, #4
 800983c:	b142      	cbz	r2, 8009850 <__ascii_mbtowc+0x1a>
 800983e:	b14b      	cbz	r3, 8009854 <__ascii_mbtowc+0x1e>
 8009840:	7813      	ldrb	r3, [r2, #0]
 8009842:	600b      	str	r3, [r1, #0]
 8009844:	7812      	ldrb	r2, [r2, #0]
 8009846:	1e10      	subs	r0, r2, #0
 8009848:	bf18      	it	ne
 800984a:	2001      	movne	r0, #1
 800984c:	b002      	add	sp, #8
 800984e:	4770      	bx	lr
 8009850:	4610      	mov	r0, r2
 8009852:	e7fb      	b.n	800984c <__ascii_mbtowc+0x16>
 8009854:	f06f 0001 	mvn.w	r0, #1
 8009858:	e7f8      	b.n	800984c <__ascii_mbtowc+0x16>

0800985a <_realloc_r>:
 800985a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800985e:	4680      	mov	r8, r0
 8009860:	4615      	mov	r5, r2
 8009862:	460c      	mov	r4, r1
 8009864:	b921      	cbnz	r1, 8009870 <_realloc_r+0x16>
 8009866:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800986a:	4611      	mov	r1, r2
 800986c:	f7fd be60 	b.w	8007530 <_malloc_r>
 8009870:	b92a      	cbnz	r2, 800987e <_realloc_r+0x24>
 8009872:	f7fd fde9 	bl	8007448 <_free_r>
 8009876:	2400      	movs	r4, #0
 8009878:	4620      	mov	r0, r4
 800987a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800987e:	f000 f840 	bl	8009902 <_malloc_usable_size_r>
 8009882:	4285      	cmp	r5, r0
 8009884:	4606      	mov	r6, r0
 8009886:	d802      	bhi.n	800988e <_realloc_r+0x34>
 8009888:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800988c:	d8f4      	bhi.n	8009878 <_realloc_r+0x1e>
 800988e:	4629      	mov	r1, r5
 8009890:	4640      	mov	r0, r8
 8009892:	f7fd fe4d 	bl	8007530 <_malloc_r>
 8009896:	4607      	mov	r7, r0
 8009898:	2800      	cmp	r0, #0
 800989a:	d0ec      	beq.n	8009876 <_realloc_r+0x1c>
 800989c:	42b5      	cmp	r5, r6
 800989e:	462a      	mov	r2, r5
 80098a0:	4621      	mov	r1, r4
 80098a2:	bf28      	it	cs
 80098a4:	4632      	movcs	r2, r6
 80098a6:	f7ff fc45 	bl	8009134 <memcpy>
 80098aa:	4621      	mov	r1, r4
 80098ac:	4640      	mov	r0, r8
 80098ae:	f7fd fdcb 	bl	8007448 <_free_r>
 80098b2:	463c      	mov	r4, r7
 80098b4:	e7e0      	b.n	8009878 <_realloc_r+0x1e>

080098b6 <__ascii_wctomb>:
 80098b6:	4603      	mov	r3, r0
 80098b8:	4608      	mov	r0, r1
 80098ba:	b141      	cbz	r1, 80098ce <__ascii_wctomb+0x18>
 80098bc:	2aff      	cmp	r2, #255	@ 0xff
 80098be:	d904      	bls.n	80098ca <__ascii_wctomb+0x14>
 80098c0:	228a      	movs	r2, #138	@ 0x8a
 80098c2:	601a      	str	r2, [r3, #0]
 80098c4:	f04f 30ff 	mov.w	r0, #4294967295
 80098c8:	4770      	bx	lr
 80098ca:	700a      	strb	r2, [r1, #0]
 80098cc:	2001      	movs	r0, #1
 80098ce:	4770      	bx	lr

080098d0 <fiprintf>:
 80098d0:	b40e      	push	{r1, r2, r3}
 80098d2:	b503      	push	{r0, r1, lr}
 80098d4:	4601      	mov	r1, r0
 80098d6:	ab03      	add	r3, sp, #12
 80098d8:	4805      	ldr	r0, [pc, #20]	@ (80098f0 <fiprintf+0x20>)
 80098da:	f853 2b04 	ldr.w	r2, [r3], #4
 80098de:	6800      	ldr	r0, [r0, #0]
 80098e0:	9301      	str	r3, [sp, #4]
 80098e2:	f000 f83f 	bl	8009964 <_vfiprintf_r>
 80098e6:	b002      	add	sp, #8
 80098e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80098ec:	b003      	add	sp, #12
 80098ee:	4770      	bx	lr
 80098f0:	20000018 	.word	0x20000018

080098f4 <abort>:
 80098f4:	b508      	push	{r3, lr}
 80098f6:	2006      	movs	r0, #6
 80098f8:	f000 fa08 	bl	8009d0c <raise>
 80098fc:	2001      	movs	r0, #1
 80098fe:	f7f7 fede 	bl	80016be <_exit>

08009902 <_malloc_usable_size_r>:
 8009902:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009906:	1f18      	subs	r0, r3, #4
 8009908:	2b00      	cmp	r3, #0
 800990a:	bfbc      	itt	lt
 800990c:	580b      	ldrlt	r3, [r1, r0]
 800990e:	18c0      	addlt	r0, r0, r3
 8009910:	4770      	bx	lr

08009912 <__sfputc_r>:
 8009912:	6893      	ldr	r3, [r2, #8]
 8009914:	3b01      	subs	r3, #1
 8009916:	2b00      	cmp	r3, #0
 8009918:	b410      	push	{r4}
 800991a:	6093      	str	r3, [r2, #8]
 800991c:	da08      	bge.n	8009930 <__sfputc_r+0x1e>
 800991e:	6994      	ldr	r4, [r2, #24]
 8009920:	42a3      	cmp	r3, r4
 8009922:	db01      	blt.n	8009928 <__sfputc_r+0x16>
 8009924:	290a      	cmp	r1, #10
 8009926:	d103      	bne.n	8009930 <__sfputc_r+0x1e>
 8009928:	f85d 4b04 	ldr.w	r4, [sp], #4
 800992c:	f000 b932 	b.w	8009b94 <__swbuf_r>
 8009930:	6813      	ldr	r3, [r2, #0]
 8009932:	1c58      	adds	r0, r3, #1
 8009934:	6010      	str	r0, [r2, #0]
 8009936:	7019      	strb	r1, [r3, #0]
 8009938:	4608      	mov	r0, r1
 800993a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800993e:	4770      	bx	lr

08009940 <__sfputs_r>:
 8009940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009942:	4606      	mov	r6, r0
 8009944:	460f      	mov	r7, r1
 8009946:	4614      	mov	r4, r2
 8009948:	18d5      	adds	r5, r2, r3
 800994a:	42ac      	cmp	r4, r5
 800994c:	d101      	bne.n	8009952 <__sfputs_r+0x12>
 800994e:	2000      	movs	r0, #0
 8009950:	e007      	b.n	8009962 <__sfputs_r+0x22>
 8009952:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009956:	463a      	mov	r2, r7
 8009958:	4630      	mov	r0, r6
 800995a:	f7ff ffda 	bl	8009912 <__sfputc_r>
 800995e:	1c43      	adds	r3, r0, #1
 8009960:	d1f3      	bne.n	800994a <__sfputs_r+0xa>
 8009962:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009964 <_vfiprintf_r>:
 8009964:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009968:	460d      	mov	r5, r1
 800996a:	b09d      	sub	sp, #116	@ 0x74
 800996c:	4614      	mov	r4, r2
 800996e:	4698      	mov	r8, r3
 8009970:	4606      	mov	r6, r0
 8009972:	b118      	cbz	r0, 800997c <_vfiprintf_r+0x18>
 8009974:	6a03      	ldr	r3, [r0, #32]
 8009976:	b90b      	cbnz	r3, 800997c <_vfiprintf_r+0x18>
 8009978:	f7fc fdfa 	bl	8006570 <__sinit>
 800997c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800997e:	07d9      	lsls	r1, r3, #31
 8009980:	d405      	bmi.n	800998e <_vfiprintf_r+0x2a>
 8009982:	89ab      	ldrh	r3, [r5, #12]
 8009984:	059a      	lsls	r2, r3, #22
 8009986:	d402      	bmi.n	800998e <_vfiprintf_r+0x2a>
 8009988:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800998a:	f7fc ff08 	bl	800679e <__retarget_lock_acquire_recursive>
 800998e:	89ab      	ldrh	r3, [r5, #12]
 8009990:	071b      	lsls	r3, r3, #28
 8009992:	d501      	bpl.n	8009998 <_vfiprintf_r+0x34>
 8009994:	692b      	ldr	r3, [r5, #16]
 8009996:	b99b      	cbnz	r3, 80099c0 <_vfiprintf_r+0x5c>
 8009998:	4629      	mov	r1, r5
 800999a:	4630      	mov	r0, r6
 800999c:	f000 f938 	bl	8009c10 <__swsetup_r>
 80099a0:	b170      	cbz	r0, 80099c0 <_vfiprintf_r+0x5c>
 80099a2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80099a4:	07dc      	lsls	r4, r3, #31
 80099a6:	d504      	bpl.n	80099b2 <_vfiprintf_r+0x4e>
 80099a8:	f04f 30ff 	mov.w	r0, #4294967295
 80099ac:	b01d      	add	sp, #116	@ 0x74
 80099ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099b2:	89ab      	ldrh	r3, [r5, #12]
 80099b4:	0598      	lsls	r0, r3, #22
 80099b6:	d4f7      	bmi.n	80099a8 <_vfiprintf_r+0x44>
 80099b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80099ba:	f7fc fef1 	bl	80067a0 <__retarget_lock_release_recursive>
 80099be:	e7f3      	b.n	80099a8 <_vfiprintf_r+0x44>
 80099c0:	2300      	movs	r3, #0
 80099c2:	9309      	str	r3, [sp, #36]	@ 0x24
 80099c4:	2320      	movs	r3, #32
 80099c6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80099ca:	f8cd 800c 	str.w	r8, [sp, #12]
 80099ce:	2330      	movs	r3, #48	@ 0x30
 80099d0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009b80 <_vfiprintf_r+0x21c>
 80099d4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80099d8:	f04f 0901 	mov.w	r9, #1
 80099dc:	4623      	mov	r3, r4
 80099de:	469a      	mov	sl, r3
 80099e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80099e4:	b10a      	cbz	r2, 80099ea <_vfiprintf_r+0x86>
 80099e6:	2a25      	cmp	r2, #37	@ 0x25
 80099e8:	d1f9      	bne.n	80099de <_vfiprintf_r+0x7a>
 80099ea:	ebba 0b04 	subs.w	fp, sl, r4
 80099ee:	d00b      	beq.n	8009a08 <_vfiprintf_r+0xa4>
 80099f0:	465b      	mov	r3, fp
 80099f2:	4622      	mov	r2, r4
 80099f4:	4629      	mov	r1, r5
 80099f6:	4630      	mov	r0, r6
 80099f8:	f7ff ffa2 	bl	8009940 <__sfputs_r>
 80099fc:	3001      	adds	r0, #1
 80099fe:	f000 80a7 	beq.w	8009b50 <_vfiprintf_r+0x1ec>
 8009a02:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009a04:	445a      	add	r2, fp
 8009a06:	9209      	str	r2, [sp, #36]	@ 0x24
 8009a08:	f89a 3000 	ldrb.w	r3, [sl]
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	f000 809f 	beq.w	8009b50 <_vfiprintf_r+0x1ec>
 8009a12:	2300      	movs	r3, #0
 8009a14:	f04f 32ff 	mov.w	r2, #4294967295
 8009a18:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009a1c:	f10a 0a01 	add.w	sl, sl, #1
 8009a20:	9304      	str	r3, [sp, #16]
 8009a22:	9307      	str	r3, [sp, #28]
 8009a24:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009a28:	931a      	str	r3, [sp, #104]	@ 0x68
 8009a2a:	4654      	mov	r4, sl
 8009a2c:	2205      	movs	r2, #5
 8009a2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a32:	4853      	ldr	r0, [pc, #332]	@ (8009b80 <_vfiprintf_r+0x21c>)
 8009a34:	f7f6 fbcc 	bl	80001d0 <memchr>
 8009a38:	9a04      	ldr	r2, [sp, #16]
 8009a3a:	b9d8      	cbnz	r0, 8009a74 <_vfiprintf_r+0x110>
 8009a3c:	06d1      	lsls	r1, r2, #27
 8009a3e:	bf44      	itt	mi
 8009a40:	2320      	movmi	r3, #32
 8009a42:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009a46:	0713      	lsls	r3, r2, #28
 8009a48:	bf44      	itt	mi
 8009a4a:	232b      	movmi	r3, #43	@ 0x2b
 8009a4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009a50:	f89a 3000 	ldrb.w	r3, [sl]
 8009a54:	2b2a      	cmp	r3, #42	@ 0x2a
 8009a56:	d015      	beq.n	8009a84 <_vfiprintf_r+0x120>
 8009a58:	9a07      	ldr	r2, [sp, #28]
 8009a5a:	4654      	mov	r4, sl
 8009a5c:	2000      	movs	r0, #0
 8009a5e:	f04f 0c0a 	mov.w	ip, #10
 8009a62:	4621      	mov	r1, r4
 8009a64:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009a68:	3b30      	subs	r3, #48	@ 0x30
 8009a6a:	2b09      	cmp	r3, #9
 8009a6c:	d94b      	bls.n	8009b06 <_vfiprintf_r+0x1a2>
 8009a6e:	b1b0      	cbz	r0, 8009a9e <_vfiprintf_r+0x13a>
 8009a70:	9207      	str	r2, [sp, #28]
 8009a72:	e014      	b.n	8009a9e <_vfiprintf_r+0x13a>
 8009a74:	eba0 0308 	sub.w	r3, r0, r8
 8009a78:	fa09 f303 	lsl.w	r3, r9, r3
 8009a7c:	4313      	orrs	r3, r2
 8009a7e:	9304      	str	r3, [sp, #16]
 8009a80:	46a2      	mov	sl, r4
 8009a82:	e7d2      	b.n	8009a2a <_vfiprintf_r+0xc6>
 8009a84:	9b03      	ldr	r3, [sp, #12]
 8009a86:	1d19      	adds	r1, r3, #4
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	9103      	str	r1, [sp, #12]
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	bfbb      	ittet	lt
 8009a90:	425b      	neglt	r3, r3
 8009a92:	f042 0202 	orrlt.w	r2, r2, #2
 8009a96:	9307      	strge	r3, [sp, #28]
 8009a98:	9307      	strlt	r3, [sp, #28]
 8009a9a:	bfb8      	it	lt
 8009a9c:	9204      	strlt	r2, [sp, #16]
 8009a9e:	7823      	ldrb	r3, [r4, #0]
 8009aa0:	2b2e      	cmp	r3, #46	@ 0x2e
 8009aa2:	d10a      	bne.n	8009aba <_vfiprintf_r+0x156>
 8009aa4:	7863      	ldrb	r3, [r4, #1]
 8009aa6:	2b2a      	cmp	r3, #42	@ 0x2a
 8009aa8:	d132      	bne.n	8009b10 <_vfiprintf_r+0x1ac>
 8009aaa:	9b03      	ldr	r3, [sp, #12]
 8009aac:	1d1a      	adds	r2, r3, #4
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	9203      	str	r2, [sp, #12]
 8009ab2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009ab6:	3402      	adds	r4, #2
 8009ab8:	9305      	str	r3, [sp, #20]
 8009aba:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009b90 <_vfiprintf_r+0x22c>
 8009abe:	7821      	ldrb	r1, [r4, #0]
 8009ac0:	2203      	movs	r2, #3
 8009ac2:	4650      	mov	r0, sl
 8009ac4:	f7f6 fb84 	bl	80001d0 <memchr>
 8009ac8:	b138      	cbz	r0, 8009ada <_vfiprintf_r+0x176>
 8009aca:	9b04      	ldr	r3, [sp, #16]
 8009acc:	eba0 000a 	sub.w	r0, r0, sl
 8009ad0:	2240      	movs	r2, #64	@ 0x40
 8009ad2:	4082      	lsls	r2, r0
 8009ad4:	4313      	orrs	r3, r2
 8009ad6:	3401      	adds	r4, #1
 8009ad8:	9304      	str	r3, [sp, #16]
 8009ada:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ade:	4829      	ldr	r0, [pc, #164]	@ (8009b84 <_vfiprintf_r+0x220>)
 8009ae0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009ae4:	2206      	movs	r2, #6
 8009ae6:	f7f6 fb73 	bl	80001d0 <memchr>
 8009aea:	2800      	cmp	r0, #0
 8009aec:	d03f      	beq.n	8009b6e <_vfiprintf_r+0x20a>
 8009aee:	4b26      	ldr	r3, [pc, #152]	@ (8009b88 <_vfiprintf_r+0x224>)
 8009af0:	bb1b      	cbnz	r3, 8009b3a <_vfiprintf_r+0x1d6>
 8009af2:	9b03      	ldr	r3, [sp, #12]
 8009af4:	3307      	adds	r3, #7
 8009af6:	f023 0307 	bic.w	r3, r3, #7
 8009afa:	3308      	adds	r3, #8
 8009afc:	9303      	str	r3, [sp, #12]
 8009afe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b00:	443b      	add	r3, r7
 8009b02:	9309      	str	r3, [sp, #36]	@ 0x24
 8009b04:	e76a      	b.n	80099dc <_vfiprintf_r+0x78>
 8009b06:	fb0c 3202 	mla	r2, ip, r2, r3
 8009b0a:	460c      	mov	r4, r1
 8009b0c:	2001      	movs	r0, #1
 8009b0e:	e7a8      	b.n	8009a62 <_vfiprintf_r+0xfe>
 8009b10:	2300      	movs	r3, #0
 8009b12:	3401      	adds	r4, #1
 8009b14:	9305      	str	r3, [sp, #20]
 8009b16:	4619      	mov	r1, r3
 8009b18:	f04f 0c0a 	mov.w	ip, #10
 8009b1c:	4620      	mov	r0, r4
 8009b1e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009b22:	3a30      	subs	r2, #48	@ 0x30
 8009b24:	2a09      	cmp	r2, #9
 8009b26:	d903      	bls.n	8009b30 <_vfiprintf_r+0x1cc>
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d0c6      	beq.n	8009aba <_vfiprintf_r+0x156>
 8009b2c:	9105      	str	r1, [sp, #20]
 8009b2e:	e7c4      	b.n	8009aba <_vfiprintf_r+0x156>
 8009b30:	fb0c 2101 	mla	r1, ip, r1, r2
 8009b34:	4604      	mov	r4, r0
 8009b36:	2301      	movs	r3, #1
 8009b38:	e7f0      	b.n	8009b1c <_vfiprintf_r+0x1b8>
 8009b3a:	ab03      	add	r3, sp, #12
 8009b3c:	9300      	str	r3, [sp, #0]
 8009b3e:	462a      	mov	r2, r5
 8009b40:	4b12      	ldr	r3, [pc, #72]	@ (8009b8c <_vfiprintf_r+0x228>)
 8009b42:	a904      	add	r1, sp, #16
 8009b44:	4630      	mov	r0, r6
 8009b46:	f7fb febb 	bl	80058c0 <_printf_float>
 8009b4a:	4607      	mov	r7, r0
 8009b4c:	1c78      	adds	r0, r7, #1
 8009b4e:	d1d6      	bne.n	8009afe <_vfiprintf_r+0x19a>
 8009b50:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009b52:	07d9      	lsls	r1, r3, #31
 8009b54:	d405      	bmi.n	8009b62 <_vfiprintf_r+0x1fe>
 8009b56:	89ab      	ldrh	r3, [r5, #12]
 8009b58:	059a      	lsls	r2, r3, #22
 8009b5a:	d402      	bmi.n	8009b62 <_vfiprintf_r+0x1fe>
 8009b5c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009b5e:	f7fc fe1f 	bl	80067a0 <__retarget_lock_release_recursive>
 8009b62:	89ab      	ldrh	r3, [r5, #12]
 8009b64:	065b      	lsls	r3, r3, #25
 8009b66:	f53f af1f 	bmi.w	80099a8 <_vfiprintf_r+0x44>
 8009b6a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009b6c:	e71e      	b.n	80099ac <_vfiprintf_r+0x48>
 8009b6e:	ab03      	add	r3, sp, #12
 8009b70:	9300      	str	r3, [sp, #0]
 8009b72:	462a      	mov	r2, r5
 8009b74:	4b05      	ldr	r3, [pc, #20]	@ (8009b8c <_vfiprintf_r+0x228>)
 8009b76:	a904      	add	r1, sp, #16
 8009b78:	4630      	mov	r0, r6
 8009b7a:	f7fc f939 	bl	8005df0 <_printf_i>
 8009b7e:	e7e4      	b.n	8009b4a <_vfiprintf_r+0x1e6>
 8009b80:	0800a241 	.word	0x0800a241
 8009b84:	0800a24b 	.word	0x0800a24b
 8009b88:	080058c1 	.word	0x080058c1
 8009b8c:	08009941 	.word	0x08009941
 8009b90:	0800a247 	.word	0x0800a247

08009b94 <__swbuf_r>:
 8009b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b96:	460e      	mov	r6, r1
 8009b98:	4614      	mov	r4, r2
 8009b9a:	4605      	mov	r5, r0
 8009b9c:	b118      	cbz	r0, 8009ba6 <__swbuf_r+0x12>
 8009b9e:	6a03      	ldr	r3, [r0, #32]
 8009ba0:	b90b      	cbnz	r3, 8009ba6 <__swbuf_r+0x12>
 8009ba2:	f7fc fce5 	bl	8006570 <__sinit>
 8009ba6:	69a3      	ldr	r3, [r4, #24]
 8009ba8:	60a3      	str	r3, [r4, #8]
 8009baa:	89a3      	ldrh	r3, [r4, #12]
 8009bac:	071a      	lsls	r2, r3, #28
 8009bae:	d501      	bpl.n	8009bb4 <__swbuf_r+0x20>
 8009bb0:	6923      	ldr	r3, [r4, #16]
 8009bb2:	b943      	cbnz	r3, 8009bc6 <__swbuf_r+0x32>
 8009bb4:	4621      	mov	r1, r4
 8009bb6:	4628      	mov	r0, r5
 8009bb8:	f000 f82a 	bl	8009c10 <__swsetup_r>
 8009bbc:	b118      	cbz	r0, 8009bc6 <__swbuf_r+0x32>
 8009bbe:	f04f 37ff 	mov.w	r7, #4294967295
 8009bc2:	4638      	mov	r0, r7
 8009bc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009bc6:	6823      	ldr	r3, [r4, #0]
 8009bc8:	6922      	ldr	r2, [r4, #16]
 8009bca:	1a98      	subs	r0, r3, r2
 8009bcc:	6963      	ldr	r3, [r4, #20]
 8009bce:	b2f6      	uxtb	r6, r6
 8009bd0:	4283      	cmp	r3, r0
 8009bd2:	4637      	mov	r7, r6
 8009bd4:	dc05      	bgt.n	8009be2 <__swbuf_r+0x4e>
 8009bd6:	4621      	mov	r1, r4
 8009bd8:	4628      	mov	r0, r5
 8009bda:	f7ff fa47 	bl	800906c <_fflush_r>
 8009bde:	2800      	cmp	r0, #0
 8009be0:	d1ed      	bne.n	8009bbe <__swbuf_r+0x2a>
 8009be2:	68a3      	ldr	r3, [r4, #8]
 8009be4:	3b01      	subs	r3, #1
 8009be6:	60a3      	str	r3, [r4, #8]
 8009be8:	6823      	ldr	r3, [r4, #0]
 8009bea:	1c5a      	adds	r2, r3, #1
 8009bec:	6022      	str	r2, [r4, #0]
 8009bee:	701e      	strb	r6, [r3, #0]
 8009bf0:	6962      	ldr	r2, [r4, #20]
 8009bf2:	1c43      	adds	r3, r0, #1
 8009bf4:	429a      	cmp	r2, r3
 8009bf6:	d004      	beq.n	8009c02 <__swbuf_r+0x6e>
 8009bf8:	89a3      	ldrh	r3, [r4, #12]
 8009bfa:	07db      	lsls	r3, r3, #31
 8009bfc:	d5e1      	bpl.n	8009bc2 <__swbuf_r+0x2e>
 8009bfe:	2e0a      	cmp	r6, #10
 8009c00:	d1df      	bne.n	8009bc2 <__swbuf_r+0x2e>
 8009c02:	4621      	mov	r1, r4
 8009c04:	4628      	mov	r0, r5
 8009c06:	f7ff fa31 	bl	800906c <_fflush_r>
 8009c0a:	2800      	cmp	r0, #0
 8009c0c:	d0d9      	beq.n	8009bc2 <__swbuf_r+0x2e>
 8009c0e:	e7d6      	b.n	8009bbe <__swbuf_r+0x2a>

08009c10 <__swsetup_r>:
 8009c10:	b538      	push	{r3, r4, r5, lr}
 8009c12:	4b29      	ldr	r3, [pc, #164]	@ (8009cb8 <__swsetup_r+0xa8>)
 8009c14:	4605      	mov	r5, r0
 8009c16:	6818      	ldr	r0, [r3, #0]
 8009c18:	460c      	mov	r4, r1
 8009c1a:	b118      	cbz	r0, 8009c24 <__swsetup_r+0x14>
 8009c1c:	6a03      	ldr	r3, [r0, #32]
 8009c1e:	b90b      	cbnz	r3, 8009c24 <__swsetup_r+0x14>
 8009c20:	f7fc fca6 	bl	8006570 <__sinit>
 8009c24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c28:	0719      	lsls	r1, r3, #28
 8009c2a:	d422      	bmi.n	8009c72 <__swsetup_r+0x62>
 8009c2c:	06da      	lsls	r2, r3, #27
 8009c2e:	d407      	bmi.n	8009c40 <__swsetup_r+0x30>
 8009c30:	2209      	movs	r2, #9
 8009c32:	602a      	str	r2, [r5, #0]
 8009c34:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009c38:	81a3      	strh	r3, [r4, #12]
 8009c3a:	f04f 30ff 	mov.w	r0, #4294967295
 8009c3e:	e033      	b.n	8009ca8 <__swsetup_r+0x98>
 8009c40:	0758      	lsls	r0, r3, #29
 8009c42:	d512      	bpl.n	8009c6a <__swsetup_r+0x5a>
 8009c44:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009c46:	b141      	cbz	r1, 8009c5a <__swsetup_r+0x4a>
 8009c48:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009c4c:	4299      	cmp	r1, r3
 8009c4e:	d002      	beq.n	8009c56 <__swsetup_r+0x46>
 8009c50:	4628      	mov	r0, r5
 8009c52:	f7fd fbf9 	bl	8007448 <_free_r>
 8009c56:	2300      	movs	r3, #0
 8009c58:	6363      	str	r3, [r4, #52]	@ 0x34
 8009c5a:	89a3      	ldrh	r3, [r4, #12]
 8009c5c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009c60:	81a3      	strh	r3, [r4, #12]
 8009c62:	2300      	movs	r3, #0
 8009c64:	6063      	str	r3, [r4, #4]
 8009c66:	6923      	ldr	r3, [r4, #16]
 8009c68:	6023      	str	r3, [r4, #0]
 8009c6a:	89a3      	ldrh	r3, [r4, #12]
 8009c6c:	f043 0308 	orr.w	r3, r3, #8
 8009c70:	81a3      	strh	r3, [r4, #12]
 8009c72:	6923      	ldr	r3, [r4, #16]
 8009c74:	b94b      	cbnz	r3, 8009c8a <__swsetup_r+0x7a>
 8009c76:	89a3      	ldrh	r3, [r4, #12]
 8009c78:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009c7c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009c80:	d003      	beq.n	8009c8a <__swsetup_r+0x7a>
 8009c82:	4621      	mov	r1, r4
 8009c84:	4628      	mov	r0, r5
 8009c86:	f000 f883 	bl	8009d90 <__smakebuf_r>
 8009c8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c8e:	f013 0201 	ands.w	r2, r3, #1
 8009c92:	d00a      	beq.n	8009caa <__swsetup_r+0x9a>
 8009c94:	2200      	movs	r2, #0
 8009c96:	60a2      	str	r2, [r4, #8]
 8009c98:	6962      	ldr	r2, [r4, #20]
 8009c9a:	4252      	negs	r2, r2
 8009c9c:	61a2      	str	r2, [r4, #24]
 8009c9e:	6922      	ldr	r2, [r4, #16]
 8009ca0:	b942      	cbnz	r2, 8009cb4 <__swsetup_r+0xa4>
 8009ca2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009ca6:	d1c5      	bne.n	8009c34 <__swsetup_r+0x24>
 8009ca8:	bd38      	pop	{r3, r4, r5, pc}
 8009caa:	0799      	lsls	r1, r3, #30
 8009cac:	bf58      	it	pl
 8009cae:	6962      	ldrpl	r2, [r4, #20]
 8009cb0:	60a2      	str	r2, [r4, #8]
 8009cb2:	e7f4      	b.n	8009c9e <__swsetup_r+0x8e>
 8009cb4:	2000      	movs	r0, #0
 8009cb6:	e7f7      	b.n	8009ca8 <__swsetup_r+0x98>
 8009cb8:	20000018 	.word	0x20000018

08009cbc <_raise_r>:
 8009cbc:	291f      	cmp	r1, #31
 8009cbe:	b538      	push	{r3, r4, r5, lr}
 8009cc0:	4605      	mov	r5, r0
 8009cc2:	460c      	mov	r4, r1
 8009cc4:	d904      	bls.n	8009cd0 <_raise_r+0x14>
 8009cc6:	2316      	movs	r3, #22
 8009cc8:	6003      	str	r3, [r0, #0]
 8009cca:	f04f 30ff 	mov.w	r0, #4294967295
 8009cce:	bd38      	pop	{r3, r4, r5, pc}
 8009cd0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009cd2:	b112      	cbz	r2, 8009cda <_raise_r+0x1e>
 8009cd4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009cd8:	b94b      	cbnz	r3, 8009cee <_raise_r+0x32>
 8009cda:	4628      	mov	r0, r5
 8009cdc:	f000 f830 	bl	8009d40 <_getpid_r>
 8009ce0:	4622      	mov	r2, r4
 8009ce2:	4601      	mov	r1, r0
 8009ce4:	4628      	mov	r0, r5
 8009ce6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009cea:	f000 b817 	b.w	8009d1c <_kill_r>
 8009cee:	2b01      	cmp	r3, #1
 8009cf0:	d00a      	beq.n	8009d08 <_raise_r+0x4c>
 8009cf2:	1c59      	adds	r1, r3, #1
 8009cf4:	d103      	bne.n	8009cfe <_raise_r+0x42>
 8009cf6:	2316      	movs	r3, #22
 8009cf8:	6003      	str	r3, [r0, #0]
 8009cfa:	2001      	movs	r0, #1
 8009cfc:	e7e7      	b.n	8009cce <_raise_r+0x12>
 8009cfe:	2100      	movs	r1, #0
 8009d00:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009d04:	4620      	mov	r0, r4
 8009d06:	4798      	blx	r3
 8009d08:	2000      	movs	r0, #0
 8009d0a:	e7e0      	b.n	8009cce <_raise_r+0x12>

08009d0c <raise>:
 8009d0c:	4b02      	ldr	r3, [pc, #8]	@ (8009d18 <raise+0xc>)
 8009d0e:	4601      	mov	r1, r0
 8009d10:	6818      	ldr	r0, [r3, #0]
 8009d12:	f7ff bfd3 	b.w	8009cbc <_raise_r>
 8009d16:	bf00      	nop
 8009d18:	20000018 	.word	0x20000018

08009d1c <_kill_r>:
 8009d1c:	b538      	push	{r3, r4, r5, lr}
 8009d1e:	4d07      	ldr	r5, [pc, #28]	@ (8009d3c <_kill_r+0x20>)
 8009d20:	2300      	movs	r3, #0
 8009d22:	4604      	mov	r4, r0
 8009d24:	4608      	mov	r0, r1
 8009d26:	4611      	mov	r1, r2
 8009d28:	602b      	str	r3, [r5, #0]
 8009d2a:	f7f7 fcb8 	bl	800169e <_kill>
 8009d2e:	1c43      	adds	r3, r0, #1
 8009d30:	d102      	bne.n	8009d38 <_kill_r+0x1c>
 8009d32:	682b      	ldr	r3, [r5, #0]
 8009d34:	b103      	cbz	r3, 8009d38 <_kill_r+0x1c>
 8009d36:	6023      	str	r3, [r4, #0]
 8009d38:	bd38      	pop	{r3, r4, r5, pc}
 8009d3a:	bf00      	nop
 8009d3c:	200004ac 	.word	0x200004ac

08009d40 <_getpid_r>:
 8009d40:	f7f7 bca5 	b.w	800168e <_getpid>

08009d44 <__swhatbuf_r>:
 8009d44:	b570      	push	{r4, r5, r6, lr}
 8009d46:	460c      	mov	r4, r1
 8009d48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d4c:	2900      	cmp	r1, #0
 8009d4e:	b096      	sub	sp, #88	@ 0x58
 8009d50:	4615      	mov	r5, r2
 8009d52:	461e      	mov	r6, r3
 8009d54:	da0d      	bge.n	8009d72 <__swhatbuf_r+0x2e>
 8009d56:	89a3      	ldrh	r3, [r4, #12]
 8009d58:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009d5c:	f04f 0100 	mov.w	r1, #0
 8009d60:	bf14      	ite	ne
 8009d62:	2340      	movne	r3, #64	@ 0x40
 8009d64:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009d68:	2000      	movs	r0, #0
 8009d6a:	6031      	str	r1, [r6, #0]
 8009d6c:	602b      	str	r3, [r5, #0]
 8009d6e:	b016      	add	sp, #88	@ 0x58
 8009d70:	bd70      	pop	{r4, r5, r6, pc}
 8009d72:	466a      	mov	r2, sp
 8009d74:	f000 f848 	bl	8009e08 <_fstat_r>
 8009d78:	2800      	cmp	r0, #0
 8009d7a:	dbec      	blt.n	8009d56 <__swhatbuf_r+0x12>
 8009d7c:	9901      	ldr	r1, [sp, #4]
 8009d7e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009d82:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009d86:	4259      	negs	r1, r3
 8009d88:	4159      	adcs	r1, r3
 8009d8a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009d8e:	e7eb      	b.n	8009d68 <__swhatbuf_r+0x24>

08009d90 <__smakebuf_r>:
 8009d90:	898b      	ldrh	r3, [r1, #12]
 8009d92:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009d94:	079d      	lsls	r5, r3, #30
 8009d96:	4606      	mov	r6, r0
 8009d98:	460c      	mov	r4, r1
 8009d9a:	d507      	bpl.n	8009dac <__smakebuf_r+0x1c>
 8009d9c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009da0:	6023      	str	r3, [r4, #0]
 8009da2:	6123      	str	r3, [r4, #16]
 8009da4:	2301      	movs	r3, #1
 8009da6:	6163      	str	r3, [r4, #20]
 8009da8:	b003      	add	sp, #12
 8009daa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009dac:	ab01      	add	r3, sp, #4
 8009dae:	466a      	mov	r2, sp
 8009db0:	f7ff ffc8 	bl	8009d44 <__swhatbuf_r>
 8009db4:	9f00      	ldr	r7, [sp, #0]
 8009db6:	4605      	mov	r5, r0
 8009db8:	4639      	mov	r1, r7
 8009dba:	4630      	mov	r0, r6
 8009dbc:	f7fd fbb8 	bl	8007530 <_malloc_r>
 8009dc0:	b948      	cbnz	r0, 8009dd6 <__smakebuf_r+0x46>
 8009dc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009dc6:	059a      	lsls	r2, r3, #22
 8009dc8:	d4ee      	bmi.n	8009da8 <__smakebuf_r+0x18>
 8009dca:	f023 0303 	bic.w	r3, r3, #3
 8009dce:	f043 0302 	orr.w	r3, r3, #2
 8009dd2:	81a3      	strh	r3, [r4, #12]
 8009dd4:	e7e2      	b.n	8009d9c <__smakebuf_r+0xc>
 8009dd6:	89a3      	ldrh	r3, [r4, #12]
 8009dd8:	6020      	str	r0, [r4, #0]
 8009dda:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009dde:	81a3      	strh	r3, [r4, #12]
 8009de0:	9b01      	ldr	r3, [sp, #4]
 8009de2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009de6:	b15b      	cbz	r3, 8009e00 <__smakebuf_r+0x70>
 8009de8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009dec:	4630      	mov	r0, r6
 8009dee:	f000 f81d 	bl	8009e2c <_isatty_r>
 8009df2:	b128      	cbz	r0, 8009e00 <__smakebuf_r+0x70>
 8009df4:	89a3      	ldrh	r3, [r4, #12]
 8009df6:	f023 0303 	bic.w	r3, r3, #3
 8009dfa:	f043 0301 	orr.w	r3, r3, #1
 8009dfe:	81a3      	strh	r3, [r4, #12]
 8009e00:	89a3      	ldrh	r3, [r4, #12]
 8009e02:	431d      	orrs	r5, r3
 8009e04:	81a5      	strh	r5, [r4, #12]
 8009e06:	e7cf      	b.n	8009da8 <__smakebuf_r+0x18>

08009e08 <_fstat_r>:
 8009e08:	b538      	push	{r3, r4, r5, lr}
 8009e0a:	4d07      	ldr	r5, [pc, #28]	@ (8009e28 <_fstat_r+0x20>)
 8009e0c:	2300      	movs	r3, #0
 8009e0e:	4604      	mov	r4, r0
 8009e10:	4608      	mov	r0, r1
 8009e12:	4611      	mov	r1, r2
 8009e14:	602b      	str	r3, [r5, #0]
 8009e16:	f7f7 fca2 	bl	800175e <_fstat>
 8009e1a:	1c43      	adds	r3, r0, #1
 8009e1c:	d102      	bne.n	8009e24 <_fstat_r+0x1c>
 8009e1e:	682b      	ldr	r3, [r5, #0]
 8009e20:	b103      	cbz	r3, 8009e24 <_fstat_r+0x1c>
 8009e22:	6023      	str	r3, [r4, #0]
 8009e24:	bd38      	pop	{r3, r4, r5, pc}
 8009e26:	bf00      	nop
 8009e28:	200004ac 	.word	0x200004ac

08009e2c <_isatty_r>:
 8009e2c:	b538      	push	{r3, r4, r5, lr}
 8009e2e:	4d06      	ldr	r5, [pc, #24]	@ (8009e48 <_isatty_r+0x1c>)
 8009e30:	2300      	movs	r3, #0
 8009e32:	4604      	mov	r4, r0
 8009e34:	4608      	mov	r0, r1
 8009e36:	602b      	str	r3, [r5, #0]
 8009e38:	f7f7 fca1 	bl	800177e <_isatty>
 8009e3c:	1c43      	adds	r3, r0, #1
 8009e3e:	d102      	bne.n	8009e46 <_isatty_r+0x1a>
 8009e40:	682b      	ldr	r3, [r5, #0]
 8009e42:	b103      	cbz	r3, 8009e46 <_isatty_r+0x1a>
 8009e44:	6023      	str	r3, [r4, #0]
 8009e46:	bd38      	pop	{r3, r4, r5, pc}
 8009e48:	200004ac 	.word	0x200004ac

08009e4c <_init>:
 8009e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e4e:	bf00      	nop
 8009e50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e52:	bc08      	pop	{r3}
 8009e54:	469e      	mov	lr, r3
 8009e56:	4770      	bx	lr

08009e58 <_fini>:
 8009e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e5a:	bf00      	nop
 8009e5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e5e:	bc08      	pop	{r3}
 8009e60:	469e      	mov	lr, r3
 8009e62:	4770      	bx	lr
