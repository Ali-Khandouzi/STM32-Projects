
Timer-ex7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002790  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08002918  08002918  00003918  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002958  08002958  0000400c  2**0
                  CONTENTS
  4 .ARM          00000000  08002958  08002958  0000400c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002958  08002958  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002958  08002958  00003958  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800295c  0800295c  0000395c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002960  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000070  2000000c  0800296c  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000007c  0800296c  0000407c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a139  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001898  00000000  00000000  0000e175  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b60  00000000  00000000  0000fa10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008bf  00000000  00000000  00010570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025cea  00000000  00000000  00010e2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c309  00000000  00000000  00036b19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ec1b1  00000000  00000000  00042e22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012efd3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002eb8  00000000  00000000  0012f018  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  00131ed0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002900 	.word	0x08002900

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08002900 	.word	0x08002900

080001c8 <computePulse>:

TIM_HandleTypeDef htim2;

static void MX_TIM2_Init(void);

uint16_t computePulse(TIM_HandleTypeDef *htim, uint32_t chFrequency) {
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b084      	sub	sp, #16
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
 80001d0:	6039      	str	r1, [r7, #0]
	uint32_t timFrequency= HAL_RCC_GetHCLKFreq() / (htim->Instance->PSC + 1);
 80001d2:	f001 fbab 	bl	800192c <HAL_RCC_GetHCLKFreq>
 80001d6:	4602      	mov	r2, r0
 80001d8:	687b      	ldr	r3, [r7, #4]
 80001da:	681b      	ldr	r3, [r3, #0]
 80001dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80001de:	3301      	adds	r3, #1
 80001e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80001e4:	60fb      	str	r3, [r7, #12]
	return (uint16_t)(timFrequency / chFrequency);
 80001e6:	68fa      	ldr	r2, [r7, #12]
 80001e8:	683b      	ldr	r3, [r7, #0]
 80001ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80001ee:	b29b      	uxth	r3, r3
}
 80001f0:	4618      	mov	r0, r3
 80001f2:	3710      	adds	r7, #16
 80001f4:	46bd      	mov	sp, r7
 80001f6:	bd80      	pop	{r7, pc}

080001f8 <main>:


volatile uint16_t CH1_FREQ = 0;
volatile uint16_t CH2_FREQ = 0;
int main(void)
{
 80001f8:	b580      	push	{r7, lr}
 80001fa:	af00      	add	r7, sp, #0
  HAL_Init();
 80001fc:	f000 fa42 	bl	8000684 <HAL_Init>
  Nucleo_BSP_Init();
 8000200:	f000 f8f8 	bl	80003f4 <Nucleo_BSP_Init>

  MX_TIM2_Init();
 8000204:	f000 f80c 	bl	8000220 <MX_TIM2_Init>
  HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_1);
 8000208:	2100      	movs	r1, #0
 800020a:	4804      	ldr	r0, [pc, #16]	@ (800021c <main+0x24>)
 800020c:	f001 fc52 	bl	8001ab4 <HAL_TIM_OC_Start_IT>
  HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_2);
 8000210:	2104      	movs	r1, #4
 8000212:	4802      	ldr	r0, [pc, #8]	@ (800021c <main+0x24>)
 8000214:	f001 fc4e 	bl	8001ab4 <HAL_TIM_OC_Start_IT>

  while (1);
 8000218:	bf00      	nop
 800021a:	e7fd      	b.n	8000218 <main+0x20>
 800021c:	20000028 	.word	0x20000028

08000220 <MX_TIM2_Init>:
}

void MX_TIM2_Init(void) {
 8000220:	b580      	push	{r7, lr}
 8000222:	b088      	sub	sp, #32
 8000224:	af00      	add	r7, sp, #0

  TIM_OC_InitTypeDef sConfigOC;

  htim2.Instance = TIM2;
 8000226:	4b22      	ldr	r3, [pc, #136]	@ (80002b0 <MX_TIM2_Init+0x90>)
 8000228:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800022c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10;
 800022e:	4b20      	ldr	r3, [pc, #128]	@ (80002b0 <MX_TIM2_Init+0x90>)
 8000230:	220a      	movs	r2, #10
 8000232:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000234:	4b1e      	ldr	r3, [pc, #120]	@ (80002b0 <MX_TIM2_Init+0x90>)
 8000236:	2200      	movs	r2, #0
 8000238:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800023a:	4b1d      	ldr	r3, [pc, #116]	@ (80002b0 <MX_TIM2_Init+0x90>)
 800023c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000240:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000242:	4b1b      	ldr	r3, [pc, #108]	@ (80002b0 <MX_TIM2_Init+0x90>)
 8000244:	2200      	movs	r2, #0
 8000246:	611a      	str	r2, [r3, #16]
  HAL_TIM_OC_Init(&htim2);
 8000248:	4819      	ldr	r0, [pc, #100]	@ (80002b0 <MX_TIM2_Init+0x90>)
 800024a:	f001 fbdb 	bl	8001a04 <HAL_TIM_OC_Init>

  CH1_FREQ = computePulse(&htim2, 25000);
 800024e:	f246 11a8 	movw	r1, #25000	@ 0x61a8
 8000252:	4817      	ldr	r0, [pc, #92]	@ (80002b0 <MX_TIM2_Init+0x90>)
 8000254:	f7ff ffb8 	bl	80001c8 <computePulse>
 8000258:	4603      	mov	r3, r0
 800025a:	461a      	mov	r2, r3
 800025c:	4b15      	ldr	r3, [pc, #84]	@ (80002b4 <MX_TIM2_Init+0x94>)
 800025e:	801a      	strh	r2, [r3, #0]
  CH2_FREQ = computePulse(&htim2, 50000);
 8000260:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8000264:	4812      	ldr	r0, [pc, #72]	@ (80002b0 <MX_TIM2_Init+0x90>)
 8000266:	f7ff ffaf 	bl	80001c8 <computePulse>
 800026a:	4603      	mov	r3, r0
 800026c:	461a      	mov	r2, r3
 800026e:	4b12      	ldr	r3, [pc, #72]	@ (80002b8 <MX_TIM2_Init+0x98>)
 8000270:	801a      	strh	r2, [r3, #0]

  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8000272:	2330      	movs	r3, #48	@ 0x30
 8000274:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = CH1_FREQ;
 8000276:	4b0f      	ldr	r3, [pc, #60]	@ (80002b4 <MX_TIM2_Init+0x94>)
 8000278:	881b      	ldrh	r3, [r3, #0]
 800027a:	b29b      	uxth	r3, r3
 800027c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800027e:	2300      	movs	r3, #0
 8000280:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000282:	2300      	movs	r3, #0
 8000284:	617b      	str	r3, [r7, #20]
  HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1);
 8000286:	1d3b      	adds	r3, r7, #4
 8000288:	2200      	movs	r2, #0
 800028a:	4619      	mov	r1, r3
 800028c:	4808      	ldr	r0, [pc, #32]	@ (80002b0 <MX_TIM2_Init+0x90>)
 800028e:	f001 fe6d 	bl	8001f6c <HAL_TIM_OC_ConfigChannel>

  sConfigOC.Pulse = CH2_FREQ;
 8000292:	4b09      	ldr	r3, [pc, #36]	@ (80002b8 <MX_TIM2_Init+0x98>)
 8000294:	881b      	ldrh	r3, [r3, #0]
 8000296:	b29b      	uxth	r3, r3
 8000298:	60bb      	str	r3, [r7, #8]
  HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2);
 800029a:	1d3b      	adds	r3, r7, #4
 800029c:	2204      	movs	r2, #4
 800029e:	4619      	mov	r1, r3
 80002a0:	4803      	ldr	r0, [pc, #12]	@ (80002b0 <MX_TIM2_Init+0x90>)
 80002a2:	f001 fe63 	bl	8001f6c <HAL_TIM_OC_ConfigChannel>
}
 80002a6:	bf00      	nop
 80002a8:	3720      	adds	r7, #32
 80002aa:	46bd      	mov	sp, r7
 80002ac:	bd80      	pop	{r7, pc}
 80002ae:	bf00      	nop
 80002b0:	20000028 	.word	0x20000028
 80002b4:	20000074 	.word	0x20000074
 80002b8:	20000076 	.word	0x20000076

080002bc <HAL_TIM_OC_DelayElapsedCallback>:

void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim) {
 80002bc:	b580      	push	{r7, lr}
 80002be:	b084      	sub	sp, #16
 80002c0:	af00      	add	r7, sp, #0
 80002c2:	6078      	str	r0, [r7, #4]
  uint32_t pulse;
  uint16_t arr = __HAL_TIM_GET_AUTORELOAD(htim);
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80002ca:	81fb      	strh	r3, [r7, #14]

  /* TIMx_CH1 toggling with frequency = 50KHz */
  if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	7f1b      	ldrb	r3, [r3, #28]
 80002d0:	2b01      	cmp	r3, #1
 80002d2:	d122      	bne.n	800031a <HAL_TIM_OC_DelayElapsedCallback+0x5e>
    pulse = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80002d4:	2100      	movs	r1, #0
 80002d6:	6878      	ldr	r0, [r7, #4]
 80002d8:	f001 fec2 	bl	8002060 <HAL_TIM_ReadCapturedValue>
 80002dc:	60b8      	str	r0, [r7, #8]
    /* Set the Capture Compare Register value */
    if((pulse + CH1_FREQ) < arr)
 80002de:	4b24      	ldr	r3, [pc, #144]	@ (8000370 <HAL_TIM_OC_DelayElapsedCallback+0xb4>)
 80002e0:	881b      	ldrh	r3, [r3, #0]
 80002e2:	b29b      	uxth	r3, r3
 80002e4:	461a      	mov	r2, r3
 80002e6:	68bb      	ldr	r3, [r7, #8]
 80002e8:	441a      	add	r2, r3
 80002ea:	89fb      	ldrh	r3, [r7, #14]
 80002ec:	429a      	cmp	r2, r3
 80002ee:	d209      	bcs.n	8000304 <HAL_TIM_OC_DelayElapsedCallback+0x48>
      __HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_1, (pulse + CH1_FREQ));
 80002f0:	4b1f      	ldr	r3, [pc, #124]	@ (8000370 <HAL_TIM_OC_DelayElapsedCallback+0xb4>)
 80002f2:	881b      	ldrh	r3, [r3, #0]
 80002f4:	b29b      	uxth	r3, r3
 80002f6:	4619      	mov	r1, r3
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	68ba      	ldr	r2, [r7, #8]
 80002fe:	440a      	add	r2, r1
 8000300:	635a      	str	r2, [r3, #52]	@ 0x34
 8000302:	e00a      	b.n	800031a <HAL_TIM_OC_DelayElapsedCallback+0x5e>
    else
      __HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_1, (pulse + CH1_FREQ) - arr);
 8000304:	4b1a      	ldr	r3, [pc, #104]	@ (8000370 <HAL_TIM_OC_DelayElapsedCallback+0xb4>)
 8000306:	881b      	ldrh	r3, [r3, #0]
 8000308:	b29b      	uxth	r3, r3
 800030a:	461a      	mov	r2, r3
 800030c:	68bb      	ldr	r3, [r7, #8]
 800030e:	18d1      	adds	r1, r2, r3
 8000310:	89fa      	ldrh	r2, [r7, #14]
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	1a8a      	subs	r2, r1, r2
 8000318:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* TIMx_CH2 toggling with frequency = 100KHz */
  if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2) {
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	7f1b      	ldrb	r3, [r3, #28]
 800031e:	2b02      	cmp	r3, #2
 8000320:	d122      	bne.n	8000368 <HAL_TIM_OC_DelayElapsedCallback+0xac>
  pulse = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8000322:	2104      	movs	r1, #4
 8000324:	6878      	ldr	r0, [r7, #4]
 8000326:	f001 fe9b 	bl	8002060 <HAL_TIM_ReadCapturedValue>
 800032a:	60b8      	str	r0, [r7, #8]
  /* Set the Capture Compare Register value */
  if((pulse + CH2_FREQ) < arr)
 800032c:	4b11      	ldr	r3, [pc, #68]	@ (8000374 <HAL_TIM_OC_DelayElapsedCallback+0xb8>)
 800032e:	881b      	ldrh	r3, [r3, #0]
 8000330:	b29b      	uxth	r3, r3
 8000332:	461a      	mov	r2, r3
 8000334:	68bb      	ldr	r3, [r7, #8]
 8000336:	441a      	add	r2, r3
 8000338:	89fb      	ldrh	r3, [r7, #14]
 800033a:	429a      	cmp	r2, r3
 800033c:	d209      	bcs.n	8000352 <HAL_TIM_OC_DelayElapsedCallback+0x96>
    __HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_2, (pulse + CH2_FREQ));
 800033e:	4b0d      	ldr	r3, [pc, #52]	@ (8000374 <HAL_TIM_OC_DelayElapsedCallback+0xb8>)
 8000340:	881b      	ldrh	r3, [r3, #0]
 8000342:	b29b      	uxth	r3, r3
 8000344:	4619      	mov	r1, r3
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	68ba      	ldr	r2, [r7, #8]
 800034c:	440a      	add	r2, r1
 800034e:	639a      	str	r2, [r3, #56]	@ 0x38
  else
    __HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_2, (pulse + CH2_FREQ) - arr);
  }
}
 8000350:	e00a      	b.n	8000368 <HAL_TIM_OC_DelayElapsedCallback+0xac>
    __HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_2, (pulse + CH2_FREQ) - arr);
 8000352:	4b08      	ldr	r3, [pc, #32]	@ (8000374 <HAL_TIM_OC_DelayElapsedCallback+0xb8>)
 8000354:	881b      	ldrh	r3, [r3, #0]
 8000356:	b29b      	uxth	r3, r3
 8000358:	461a      	mov	r2, r3
 800035a:	68bb      	ldr	r3, [r7, #8]
 800035c:	18d1      	adds	r1, r2, r3
 800035e:	89fa      	ldrh	r2, [r7, #14]
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	1a8a      	subs	r2, r1, r2
 8000366:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8000368:	bf00      	nop
 800036a:	3710      	adds	r7, #16
 800036c:	46bd      	mov	sp, r7
 800036e:	bd80      	pop	{r7, pc}
 8000370:	20000074 	.word	0x20000074
 8000374:	20000076 	.word	0x20000076

08000378 <HAL_TIM_OC_MspInit>:

void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_base) {
 8000378:	b580      	push	{r7, lr}
 800037a:	b088      	sub	sp, #32
 800037c:	af00      	add	r7, sp, #0
 800037e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim_base->Instance==TIM2) {
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	681b      	ldr	r3, [r3, #0]
 8000384:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000388:	d124      	bne.n	80003d4 <HAL_TIM_OC_MspInit+0x5c>
    __TIM2_CLK_ENABLE();
 800038a:	4b14      	ldr	r3, [pc, #80]	@ (80003dc <HAL_TIM_OC_MspInit+0x64>)
 800038c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800038e:	4a13      	ldr	r2, [pc, #76]	@ (80003dc <HAL_TIM_OC_MspInit+0x64>)
 8000390:	f043 0301 	orr.w	r3, r3, #1
 8000394:	6593      	str	r3, [r2, #88]	@ 0x58
 8000396:	4b11      	ldr	r3, [pc, #68]	@ (80003dc <HAL_TIM_OC_MspInit+0x64>)
 8000398:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800039a:	f003 0301 	and.w	r3, r3, #1
 800039e:	60bb      	str	r3, [r7, #8]
 80003a0:	68bb      	ldr	r3, [r7, #8]

    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80003a2:	2303      	movs	r3, #3
 80003a4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80003a6:	2302      	movs	r3, #2
 80003a8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003aa:	2300      	movs	r3, #0
 80003ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80003ae:	2303      	movs	r3, #3
 80003b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80003b2:	2301      	movs	r3, #1
 80003b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003b6:	f107 030c 	add.w	r3, r7, #12
 80003ba:	4619      	mov	r1, r3
 80003bc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80003c0:	f000 fb0a 	bl	80009d8 <HAL_GPIO_Init>

    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80003c4:	2200      	movs	r2, #0
 80003c6:	2100      	movs	r1, #0
 80003c8:	201c      	movs	r0, #28
 80003ca:	f000 fab2 	bl	8000932 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80003ce:	201c      	movs	r0, #28
 80003d0:	f000 facb 	bl	800096a <HAL_NVIC_EnableIRQ>
  }
}
 80003d4:	bf00      	nop
 80003d6:	3720      	adds	r7, #32
 80003d8:	46bd      	mov	sp, r7
 80003da:	bd80      	pop	{r7, pc}
 80003dc:	40021000 	.word	0x40021000

080003e0 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void) {
 80003e0:	b580      	push	{r7, lr}
 80003e2:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&htim2);
 80003e4:	4802      	ldr	r0, [pc, #8]	@ (80003f0 <TIM2_IRQHandler+0x10>)
 80003e6:	f001 fcb9 	bl	8001d5c <HAL_TIM_IRQHandler>
}
 80003ea:	bf00      	nop
 80003ec:	bd80      	pop	{r7, pc}
 80003ee:	bf00      	nop
 80003f0:	20000028 	.word	0x20000028

080003f4 <Nucleo_BSP_Init>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);

void Nucleo_BSP_Init() {
 80003f4:	b580      	push	{r7, lr}
 80003f6:	af00      	add	r7, sp, #0
  /* Configure the system clock */
  SystemClock_Config();
 80003f8:	f000 f804 	bl	8000404 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003fc:	f000 f862 	bl	80004c4 <MX_GPIO_Init>
}
 8000400:	bf00      	nop
 8000402:	bd80      	pop	{r7, pc}

08000404 <SystemClock_Config>:

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b098      	sub	sp, #96	@ 0x60
 8000408:	af00      	add	r7, sp, #0

  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 800040a:	2306      	movs	r3, #6
 800040c:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800040e:	2301      	movs	r3, #1
 8000410:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000412:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000416:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8000418:	2310      	movs	r3, #16
 800041a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800041c:	2302      	movs	r3, #2
 800041e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000420:	2302      	movs	r3, #2
 8000422:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000424:	2301      	movs	r3, #1
 8000426:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000428:	230a      	movs	r3, #10
 800042a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800042c:	2307      	movs	r3, #7
 800042e:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000430:	2302      	movs	r3, #2
 8000432:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000434:	2302      	movs	r3, #2
 8000436:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8000438:	f107 031c 	add.w	r3, r7, #28
 800043c:	4618      	mov	r0, r3
 800043e:	f000 fcd9 	bl	8000df4 <HAL_RCC_OscConfig>

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000442:	230f      	movs	r3, #15
 8000444:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000446:	2303      	movs	r3, #3
 8000448:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800044a:	2300      	movs	r3, #0
 800044c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800044e:	2300      	movs	r3, #0
 8000450:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000452:	2300      	movs	r3, #0
 8000454:	61bb      	str	r3, [r7, #24]
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);
 8000456:	f107 0308 	add.w	r3, r7, #8
 800045a:	2104      	movs	r1, #4
 800045c:	4618      	mov	r0, r3
 800045e:	f001 f8a5 	bl	80015ac <HAL_RCC_ClockConfig>

  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8000462:	2200      	movs	r2, #0
 8000464:	f04f 7140 	mov.w	r1, #50331648	@ 0x3000000
 8000468:	2000      	movs	r0, #0
 800046a:	f001 f99f 	bl	80017ac <HAL_RCC_MCOConfig>

  __PWR_CLK_ENABLE();
 800046e:	4b13      	ldr	r3, [pc, #76]	@ (80004bc <SystemClock_Config+0xb8>)
 8000470:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000472:	4a12      	ldr	r2, [pc, #72]	@ (80004bc <SystemClock_Config+0xb8>)
 8000474:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000478:	6593      	str	r3, [r2, #88]	@ 0x58
 800047a:	4b10      	ldr	r3, [pc, #64]	@ (80004bc <SystemClock_Config+0xb8>)
 800047c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800047e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000482:	607b      	str	r3, [r7, #4]
 8000484:	687b      	ldr	r3, [r7, #4]

  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000486:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800048a:	f000 fc5d 	bl	8000d48 <HAL_PWREx_ControlVoltageScaling>

  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800048e:	f001 fa4d 	bl	800192c <HAL_RCC_GetHCLKFreq>
 8000492:	4603      	mov	r3, r0
 8000494:	4a0a      	ldr	r2, [pc, #40]	@ (80004c0 <SystemClock_Config+0xbc>)
 8000496:	fba2 2303 	umull	r2, r3, r2, r3
 800049a:	099b      	lsrs	r3, r3, #6
 800049c:	4618      	mov	r0, r3
 800049e:	f000 fa72 	bl	8000986 <HAL_SYSTICK_Config>

  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80004a2:	2004      	movs	r0, #4
 80004a4:	f000 fa7c 	bl	80009a0 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80004a8:	2200      	movs	r2, #0
 80004aa:	2100      	movs	r1, #0
 80004ac:	f04f 30ff 	mov.w	r0, #4294967295
 80004b0:	f000 fa3f 	bl	8000932 <HAL_NVIC_SetPriority>
}
 80004b4:	bf00      	nop
 80004b6:	3760      	adds	r7, #96	@ 0x60
 80004b8:	46bd      	mov	sp, r7
 80004ba:	bd80      	pop	{r7, pc}
 80004bc:	40021000 	.word	0x40021000
 80004c0:	10624dd3 	.word	0x10624dd3

080004c4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b088      	sub	sp, #32
 80004c8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __GPIOC_CLK_ENABLE();
 80004ca:	4b24      	ldr	r3, [pc, #144]	@ (800055c <MX_GPIO_Init+0x98>)
 80004cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004ce:	4a23      	ldr	r2, [pc, #140]	@ (800055c <MX_GPIO_Init+0x98>)
 80004d0:	f043 0304 	orr.w	r3, r3, #4
 80004d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80004d6:	4b21      	ldr	r3, [pc, #132]	@ (800055c <MX_GPIO_Init+0x98>)
 80004d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004da:	f003 0304 	and.w	r3, r3, #4
 80004de:	60bb      	str	r3, [r7, #8]
 80004e0:	68bb      	ldr	r3, [r7, #8]
  __GPIOA_CLK_ENABLE();
 80004e2:	4b1e      	ldr	r3, [pc, #120]	@ (800055c <MX_GPIO_Init+0x98>)
 80004e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004e6:	4a1d      	ldr	r2, [pc, #116]	@ (800055c <MX_GPIO_Init+0x98>)
 80004e8:	f043 0301 	orr.w	r3, r3, #1
 80004ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80004ee:	4b1b      	ldr	r3, [pc, #108]	@ (800055c <MX_GPIO_Init+0x98>)
 80004f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004f2:	f003 0301 	and.w	r3, r3, #1
 80004f6:	607b      	str	r3, [r7, #4]
 80004f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80004fa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80004fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000500:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000504:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000506:	2300      	movs	r3, #0
 8000508:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800050a:	f107 030c 	add.w	r3, r7, #12
 800050e:	4619      	mov	r1, r3
 8000510:	4813      	ldr	r0, [pc, #76]	@ (8000560 <MX_GPIO_Init+0x9c>)
 8000512:	f000 fa61 	bl	80009d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000516:	2320      	movs	r3, #32
 8000518:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800051a:	2301      	movs	r3, #1
 800051c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800051e:	2300      	movs	r3, #0
 8000520:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8000522:	2303      	movs	r3, #3
 8000524:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000526:	f107 030c 	add.w	r3, r7, #12
 800052a:	4619      	mov	r1, r3
 800052c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000530:	f000 fa52 	bl	80009d8 <HAL_GPIO_Init>

  /*Configure GPIOC pin8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000534:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000538:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800053a:	2301      	movs	r3, #1
 800053c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800053e:	2300      	movs	r3, #0
 8000540:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8000542:	2303      	movs	r3, #3
 8000544:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000546:	f107 030c 	add.w	r3, r7, #12
 800054a:	4619      	mov	r1, r3
 800054c:	4804      	ldr	r0, [pc, #16]	@ (8000560 <MX_GPIO_Init+0x9c>)
 800054e:	f000 fa43 	bl	80009d8 <HAL_GPIO_Init>

}
 8000552:	bf00      	nop
 8000554:	3720      	adds	r7, #32
 8000556:	46bd      	mov	sp, r7
 8000558:	bd80      	pop	{r7, pc}
 800055a:	bf00      	nop
 800055c:	40021000 	.word	0x40021000
 8000560:	48000800 	.word	0x48000800

08000564 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000564:	b480      	push	{r7}
 8000566:	b083      	sub	sp, #12
 8000568:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800056a:	4b0f      	ldr	r3, [pc, #60]	@ (80005a8 <HAL_MspInit+0x44>)
 800056c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800056e:	4a0e      	ldr	r2, [pc, #56]	@ (80005a8 <HAL_MspInit+0x44>)
 8000570:	f043 0301 	orr.w	r3, r3, #1
 8000574:	6613      	str	r3, [r2, #96]	@ 0x60
 8000576:	4b0c      	ldr	r3, [pc, #48]	@ (80005a8 <HAL_MspInit+0x44>)
 8000578:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800057a:	f003 0301 	and.w	r3, r3, #1
 800057e:	607b      	str	r3, [r7, #4]
 8000580:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000582:	4b09      	ldr	r3, [pc, #36]	@ (80005a8 <HAL_MspInit+0x44>)
 8000584:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000586:	4a08      	ldr	r2, [pc, #32]	@ (80005a8 <HAL_MspInit+0x44>)
 8000588:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800058c:	6593      	str	r3, [r2, #88]	@ 0x58
 800058e:	4b06      	ldr	r3, [pc, #24]	@ (80005a8 <HAL_MspInit+0x44>)
 8000590:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000592:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000596:	603b      	str	r3, [r7, #0]
 8000598:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800059a:	bf00      	nop
 800059c:	370c      	adds	r7, #12
 800059e:	46bd      	mov	sp, r7
 80005a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop
 80005a8:	40021000 	.word	0x40021000

080005ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005ac:	b480      	push	{r7}
 80005ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80005b0:	bf00      	nop
 80005b2:	e7fd      	b.n	80005b0 <NMI_Handler+0x4>

080005b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005b8:	bf00      	nop
 80005ba:	e7fd      	b.n	80005b8 <HardFault_Handler+0x4>

080005bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005bc:	b480      	push	{r7}
 80005be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005c0:	bf00      	nop
 80005c2:	e7fd      	b.n	80005c0 <MemManage_Handler+0x4>

080005c4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005c4:	b480      	push	{r7}
 80005c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005c8:	bf00      	nop
 80005ca:	e7fd      	b.n	80005c8 <BusFault_Handler+0x4>

080005cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005cc:	b480      	push	{r7}
 80005ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005d0:	bf00      	nop
 80005d2:	e7fd      	b.n	80005d0 <UsageFault_Handler+0x4>

080005d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005d8:	bf00      	nop
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr

080005e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005e2:	b480      	push	{r7}
 80005e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005e6:	bf00      	nop
 80005e8:	46bd      	mov	sp, r7
 80005ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ee:	4770      	bx	lr

080005f0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005f0:	b480      	push	{r7}
 80005f2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005f4:	bf00      	nop
 80005f6:	46bd      	mov	sp, r7
 80005f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fc:	4770      	bx	lr

080005fe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005fe:	b580      	push	{r7, lr}
 8000600:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000602:	f000 f89b 	bl	800073c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000606:	bf00      	nop
 8000608:	bd80      	pop	{r7, pc}
	...

0800060c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800060c:	b480      	push	{r7}
 800060e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000610:	4b06      	ldr	r3, [pc, #24]	@ (800062c <SystemInit+0x20>)
 8000612:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000616:	4a05      	ldr	r2, [pc, #20]	@ (800062c <SystemInit+0x20>)
 8000618:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800061c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000620:	bf00      	nop
 8000622:	46bd      	mov	sp, r7
 8000624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000628:	4770      	bx	lr
 800062a:	bf00      	nop
 800062c:	e000ed00 	.word	0xe000ed00

08000630 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000630:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000668 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000634:	f7ff ffea 	bl	800060c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000638:	480c      	ldr	r0, [pc, #48]	@ (800066c <LoopForever+0x6>)
  ldr r1, =_edata
 800063a:	490d      	ldr	r1, [pc, #52]	@ (8000670 <LoopForever+0xa>)
  ldr r2, =_sidata
 800063c:	4a0d      	ldr	r2, [pc, #52]	@ (8000674 <LoopForever+0xe>)
  movs r3, #0
 800063e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000640:	e002      	b.n	8000648 <LoopCopyDataInit>

08000642 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000642:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000644:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000646:	3304      	adds	r3, #4

08000648 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000648:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800064a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800064c:	d3f9      	bcc.n	8000642 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800064e:	4a0a      	ldr	r2, [pc, #40]	@ (8000678 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000650:	4c0a      	ldr	r4, [pc, #40]	@ (800067c <LoopForever+0x16>)
  movs r3, #0
 8000652:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000654:	e001      	b.n	800065a <LoopFillZerobss>

08000656 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000656:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000658:	3204      	adds	r2, #4

0800065a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800065a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800065c:	d3fb      	bcc.n	8000656 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800065e:	f002 f92b 	bl	80028b8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000662:	f7ff fdc9 	bl	80001f8 <main>

08000666 <LoopForever>:

LoopForever:
    b LoopForever
 8000666:	e7fe      	b.n	8000666 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000668:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800066c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000670:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000674:	08002960 	.word	0x08002960
  ldr r2, =_sbss
 8000678:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800067c:	2000007c 	.word	0x2000007c

08000680 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000680:	e7fe      	b.n	8000680 <ADC1_2_IRQHandler>
	...

08000684 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800068a:	2300      	movs	r3, #0
 800068c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800068e:	4b0c      	ldr	r3, [pc, #48]	@ (80006c0 <HAL_Init+0x3c>)
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	4a0b      	ldr	r2, [pc, #44]	@ (80006c0 <HAL_Init+0x3c>)
 8000694:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000698:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800069a:	2003      	movs	r0, #3
 800069c:	f000 f93e 	bl	800091c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80006a0:	2000      	movs	r0, #0
 80006a2:	f000 f80f 	bl	80006c4 <HAL_InitTick>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d002      	beq.n	80006b2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80006ac:	2301      	movs	r3, #1
 80006ae:	71fb      	strb	r3, [r7, #7]
 80006b0:	e001      	b.n	80006b6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80006b2:	f7ff ff57 	bl	8000564 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80006b6:	79fb      	ldrb	r3, [r7, #7]
}
 80006b8:	4618      	mov	r0, r3
 80006ba:	3708      	adds	r7, #8
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	40022000 	.word	0x40022000

080006c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b084      	sub	sp, #16
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80006cc:	2300      	movs	r3, #0
 80006ce:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80006d0:	4b17      	ldr	r3, [pc, #92]	@ (8000730 <HAL_InitTick+0x6c>)
 80006d2:	781b      	ldrb	r3, [r3, #0]
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d023      	beq.n	8000720 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80006d8:	4b16      	ldr	r3, [pc, #88]	@ (8000734 <HAL_InitTick+0x70>)
 80006da:	681a      	ldr	r2, [r3, #0]
 80006dc:	4b14      	ldr	r3, [pc, #80]	@ (8000730 <HAL_InitTick+0x6c>)
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	4619      	mov	r1, r3
 80006e2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80006ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80006ee:	4618      	mov	r0, r3
 80006f0:	f000 f949 	bl	8000986 <HAL_SYSTICK_Config>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d10f      	bne.n	800071a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	2b0f      	cmp	r3, #15
 80006fe:	d809      	bhi.n	8000714 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000700:	2200      	movs	r2, #0
 8000702:	6879      	ldr	r1, [r7, #4]
 8000704:	f04f 30ff 	mov.w	r0, #4294967295
 8000708:	f000 f913 	bl	8000932 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800070c:	4a0a      	ldr	r2, [pc, #40]	@ (8000738 <HAL_InitTick+0x74>)
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	6013      	str	r3, [r2, #0]
 8000712:	e007      	b.n	8000724 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000714:	2301      	movs	r3, #1
 8000716:	73fb      	strb	r3, [r7, #15]
 8000718:	e004      	b.n	8000724 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800071a:	2301      	movs	r3, #1
 800071c:	73fb      	strb	r3, [r7, #15]
 800071e:	e001      	b.n	8000724 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000720:	2301      	movs	r3, #1
 8000722:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000724:	7bfb      	ldrb	r3, [r7, #15]
}
 8000726:	4618      	mov	r0, r3
 8000728:	3710      	adds	r7, #16
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	20000008 	.word	0x20000008
 8000734:	20000000 	.word	0x20000000
 8000738:	20000004 	.word	0x20000004

0800073c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000740:	4b06      	ldr	r3, [pc, #24]	@ (800075c <HAL_IncTick+0x20>)
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	461a      	mov	r2, r3
 8000746:	4b06      	ldr	r3, [pc, #24]	@ (8000760 <HAL_IncTick+0x24>)
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	4413      	add	r3, r2
 800074c:	4a04      	ldr	r2, [pc, #16]	@ (8000760 <HAL_IncTick+0x24>)
 800074e:	6013      	str	r3, [r2, #0]
}
 8000750:	bf00      	nop
 8000752:	46bd      	mov	sp, r7
 8000754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000758:	4770      	bx	lr
 800075a:	bf00      	nop
 800075c:	20000008 	.word	0x20000008
 8000760:	20000078 	.word	0x20000078

08000764 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000764:	b480      	push	{r7}
 8000766:	af00      	add	r7, sp, #0
  return uwTick;
 8000768:	4b03      	ldr	r3, [pc, #12]	@ (8000778 <HAL_GetTick+0x14>)
 800076a:	681b      	ldr	r3, [r3, #0]
}
 800076c:	4618      	mov	r0, r3
 800076e:	46bd      	mov	sp, r7
 8000770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000774:	4770      	bx	lr
 8000776:	bf00      	nop
 8000778:	20000078 	.word	0x20000078

0800077c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800077c:	b480      	push	{r7}
 800077e:	b085      	sub	sp, #20
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	f003 0307 	and.w	r3, r3, #7
 800078a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800078c:	4b0c      	ldr	r3, [pc, #48]	@ (80007c0 <__NVIC_SetPriorityGrouping+0x44>)
 800078e:	68db      	ldr	r3, [r3, #12]
 8000790:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000792:	68ba      	ldr	r2, [r7, #8]
 8000794:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000798:	4013      	ands	r3, r2
 800079a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800079c:	68fb      	ldr	r3, [r7, #12]
 800079e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007a0:	68bb      	ldr	r3, [r7, #8]
 80007a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007a4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80007a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80007ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007ae:	4a04      	ldr	r2, [pc, #16]	@ (80007c0 <__NVIC_SetPriorityGrouping+0x44>)
 80007b0:	68bb      	ldr	r3, [r7, #8]
 80007b2:	60d3      	str	r3, [r2, #12]
}
 80007b4:	bf00      	nop
 80007b6:	3714      	adds	r7, #20
 80007b8:	46bd      	mov	sp, r7
 80007ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007be:	4770      	bx	lr
 80007c0:	e000ed00 	.word	0xe000ed00

080007c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007c8:	4b04      	ldr	r3, [pc, #16]	@ (80007dc <__NVIC_GetPriorityGrouping+0x18>)
 80007ca:	68db      	ldr	r3, [r3, #12]
 80007cc:	0a1b      	lsrs	r3, r3, #8
 80007ce:	f003 0307 	and.w	r3, r3, #7
}
 80007d2:	4618      	mov	r0, r3
 80007d4:	46bd      	mov	sp, r7
 80007d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007da:	4770      	bx	lr
 80007dc:	e000ed00 	.word	0xe000ed00

080007e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007e0:	b480      	push	{r7}
 80007e2:	b083      	sub	sp, #12
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	4603      	mov	r3, r0
 80007e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	db0b      	blt.n	800080a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007f2:	79fb      	ldrb	r3, [r7, #7]
 80007f4:	f003 021f 	and.w	r2, r3, #31
 80007f8:	4907      	ldr	r1, [pc, #28]	@ (8000818 <__NVIC_EnableIRQ+0x38>)
 80007fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007fe:	095b      	lsrs	r3, r3, #5
 8000800:	2001      	movs	r0, #1
 8000802:	fa00 f202 	lsl.w	r2, r0, r2
 8000806:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800080a:	bf00      	nop
 800080c:	370c      	adds	r7, #12
 800080e:	46bd      	mov	sp, r7
 8000810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000814:	4770      	bx	lr
 8000816:	bf00      	nop
 8000818:	e000e100 	.word	0xe000e100

0800081c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800081c:	b480      	push	{r7}
 800081e:	b083      	sub	sp, #12
 8000820:	af00      	add	r7, sp, #0
 8000822:	4603      	mov	r3, r0
 8000824:	6039      	str	r1, [r7, #0]
 8000826:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000828:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800082c:	2b00      	cmp	r3, #0
 800082e:	db0a      	blt.n	8000846 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000830:	683b      	ldr	r3, [r7, #0]
 8000832:	b2da      	uxtb	r2, r3
 8000834:	490c      	ldr	r1, [pc, #48]	@ (8000868 <__NVIC_SetPriority+0x4c>)
 8000836:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800083a:	0112      	lsls	r2, r2, #4
 800083c:	b2d2      	uxtb	r2, r2
 800083e:	440b      	add	r3, r1
 8000840:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000844:	e00a      	b.n	800085c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000846:	683b      	ldr	r3, [r7, #0]
 8000848:	b2da      	uxtb	r2, r3
 800084a:	4908      	ldr	r1, [pc, #32]	@ (800086c <__NVIC_SetPriority+0x50>)
 800084c:	79fb      	ldrb	r3, [r7, #7]
 800084e:	f003 030f 	and.w	r3, r3, #15
 8000852:	3b04      	subs	r3, #4
 8000854:	0112      	lsls	r2, r2, #4
 8000856:	b2d2      	uxtb	r2, r2
 8000858:	440b      	add	r3, r1
 800085a:	761a      	strb	r2, [r3, #24]
}
 800085c:	bf00      	nop
 800085e:	370c      	adds	r7, #12
 8000860:	46bd      	mov	sp, r7
 8000862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000866:	4770      	bx	lr
 8000868:	e000e100 	.word	0xe000e100
 800086c:	e000ed00 	.word	0xe000ed00

08000870 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000870:	b480      	push	{r7}
 8000872:	b089      	sub	sp, #36	@ 0x24
 8000874:	af00      	add	r7, sp, #0
 8000876:	60f8      	str	r0, [r7, #12]
 8000878:	60b9      	str	r1, [r7, #8]
 800087a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800087c:	68fb      	ldr	r3, [r7, #12]
 800087e:	f003 0307 	and.w	r3, r3, #7
 8000882:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000884:	69fb      	ldr	r3, [r7, #28]
 8000886:	f1c3 0307 	rsb	r3, r3, #7
 800088a:	2b04      	cmp	r3, #4
 800088c:	bf28      	it	cs
 800088e:	2304      	movcs	r3, #4
 8000890:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000892:	69fb      	ldr	r3, [r7, #28]
 8000894:	3304      	adds	r3, #4
 8000896:	2b06      	cmp	r3, #6
 8000898:	d902      	bls.n	80008a0 <NVIC_EncodePriority+0x30>
 800089a:	69fb      	ldr	r3, [r7, #28]
 800089c:	3b03      	subs	r3, #3
 800089e:	e000      	b.n	80008a2 <NVIC_EncodePriority+0x32>
 80008a0:	2300      	movs	r3, #0
 80008a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008a4:	f04f 32ff 	mov.w	r2, #4294967295
 80008a8:	69bb      	ldr	r3, [r7, #24]
 80008aa:	fa02 f303 	lsl.w	r3, r2, r3
 80008ae:	43da      	mvns	r2, r3
 80008b0:	68bb      	ldr	r3, [r7, #8]
 80008b2:	401a      	ands	r2, r3
 80008b4:	697b      	ldr	r3, [r7, #20]
 80008b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008b8:	f04f 31ff 	mov.w	r1, #4294967295
 80008bc:	697b      	ldr	r3, [r7, #20]
 80008be:	fa01 f303 	lsl.w	r3, r1, r3
 80008c2:	43d9      	mvns	r1, r3
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008c8:	4313      	orrs	r3, r2
         );
}
 80008ca:	4618      	mov	r0, r3
 80008cc:	3724      	adds	r7, #36	@ 0x24
 80008ce:	46bd      	mov	sp, r7
 80008d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d4:	4770      	bx	lr
	...

080008d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b082      	sub	sp, #8
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	3b01      	subs	r3, #1
 80008e4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80008e8:	d301      	bcc.n	80008ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008ea:	2301      	movs	r3, #1
 80008ec:	e00f      	b.n	800090e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008ee:	4a0a      	ldr	r2, [pc, #40]	@ (8000918 <SysTick_Config+0x40>)
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	3b01      	subs	r3, #1
 80008f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008f6:	210f      	movs	r1, #15
 80008f8:	f04f 30ff 	mov.w	r0, #4294967295
 80008fc:	f7ff ff8e 	bl	800081c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000900:	4b05      	ldr	r3, [pc, #20]	@ (8000918 <SysTick_Config+0x40>)
 8000902:	2200      	movs	r2, #0
 8000904:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000906:	4b04      	ldr	r3, [pc, #16]	@ (8000918 <SysTick_Config+0x40>)
 8000908:	2207      	movs	r2, #7
 800090a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800090c:	2300      	movs	r3, #0
}
 800090e:	4618      	mov	r0, r3
 8000910:	3708      	adds	r7, #8
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	e000e010 	.word	0xe000e010

0800091c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000924:	6878      	ldr	r0, [r7, #4]
 8000926:	f7ff ff29 	bl	800077c <__NVIC_SetPriorityGrouping>
}
 800092a:	bf00      	nop
 800092c:	3708      	adds	r7, #8
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}

08000932 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000932:	b580      	push	{r7, lr}
 8000934:	b086      	sub	sp, #24
 8000936:	af00      	add	r7, sp, #0
 8000938:	4603      	mov	r3, r0
 800093a:	60b9      	str	r1, [r7, #8]
 800093c:	607a      	str	r2, [r7, #4]
 800093e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000940:	2300      	movs	r3, #0
 8000942:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000944:	f7ff ff3e 	bl	80007c4 <__NVIC_GetPriorityGrouping>
 8000948:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800094a:	687a      	ldr	r2, [r7, #4]
 800094c:	68b9      	ldr	r1, [r7, #8]
 800094e:	6978      	ldr	r0, [r7, #20]
 8000950:	f7ff ff8e 	bl	8000870 <NVIC_EncodePriority>
 8000954:	4602      	mov	r2, r0
 8000956:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800095a:	4611      	mov	r1, r2
 800095c:	4618      	mov	r0, r3
 800095e:	f7ff ff5d 	bl	800081c <__NVIC_SetPriority>
}
 8000962:	bf00      	nop
 8000964:	3718      	adds	r7, #24
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}

0800096a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800096a:	b580      	push	{r7, lr}
 800096c:	b082      	sub	sp, #8
 800096e:	af00      	add	r7, sp, #0
 8000970:	4603      	mov	r3, r0
 8000972:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000974:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000978:	4618      	mov	r0, r3
 800097a:	f7ff ff31 	bl	80007e0 <__NVIC_EnableIRQ>
}
 800097e:	bf00      	nop
 8000980:	3708      	adds	r7, #8
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}

08000986 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000986:	b580      	push	{r7, lr}
 8000988:	b082      	sub	sp, #8
 800098a:	af00      	add	r7, sp, #0
 800098c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800098e:	6878      	ldr	r0, [r7, #4]
 8000990:	f7ff ffa2 	bl	80008d8 <SysTick_Config>
 8000994:	4603      	mov	r3, r0
}
 8000996:	4618      	mov	r0, r3
 8000998:	3708      	adds	r7, #8
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
	...

080009a0 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80009a0:	b480      	push	{r7}
 80009a2:	b083      	sub	sp, #12
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	2b04      	cmp	r3, #4
 80009ac:	d106      	bne.n	80009bc <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80009ae:	4b09      	ldr	r3, [pc, #36]	@ (80009d4 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	4a08      	ldr	r2, [pc, #32]	@ (80009d4 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80009b4:	f043 0304 	orr.w	r3, r3, #4
 80009b8:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 80009ba:	e005      	b.n	80009c8 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80009bc:	4b05      	ldr	r3, [pc, #20]	@ (80009d4 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	4a04      	ldr	r2, [pc, #16]	@ (80009d4 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80009c2:	f023 0304 	bic.w	r3, r3, #4
 80009c6:	6013      	str	r3, [r2, #0]
}
 80009c8:	bf00      	nop
 80009ca:	370c      	adds	r7, #12
 80009cc:	46bd      	mov	sp, r7
 80009ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d2:	4770      	bx	lr
 80009d4:	e000e010 	.word	0xe000e010

080009d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009d8:	b480      	push	{r7}
 80009da:	b087      	sub	sp, #28
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
 80009e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80009e2:	2300      	movs	r3, #0
 80009e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009e6:	e17f      	b.n	8000ce8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80009e8:	683b      	ldr	r3, [r7, #0]
 80009ea:	681a      	ldr	r2, [r3, #0]
 80009ec:	2101      	movs	r1, #1
 80009ee:	697b      	ldr	r3, [r7, #20]
 80009f0:	fa01 f303 	lsl.w	r3, r1, r3
 80009f4:	4013      	ands	r3, r2
 80009f6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80009f8:	68fb      	ldr	r3, [r7, #12]
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	f000 8171 	beq.w	8000ce2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000a00:	683b      	ldr	r3, [r7, #0]
 8000a02:	685b      	ldr	r3, [r3, #4]
 8000a04:	f003 0303 	and.w	r3, r3, #3
 8000a08:	2b01      	cmp	r3, #1
 8000a0a:	d005      	beq.n	8000a18 <HAL_GPIO_Init+0x40>
 8000a0c:	683b      	ldr	r3, [r7, #0]
 8000a0e:	685b      	ldr	r3, [r3, #4]
 8000a10:	f003 0303 	and.w	r3, r3, #3
 8000a14:	2b02      	cmp	r3, #2
 8000a16:	d130      	bne.n	8000a7a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	689b      	ldr	r3, [r3, #8]
 8000a1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000a1e:	697b      	ldr	r3, [r7, #20]
 8000a20:	005b      	lsls	r3, r3, #1
 8000a22:	2203      	movs	r2, #3
 8000a24:	fa02 f303 	lsl.w	r3, r2, r3
 8000a28:	43db      	mvns	r3, r3
 8000a2a:	693a      	ldr	r2, [r7, #16]
 8000a2c:	4013      	ands	r3, r2
 8000a2e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000a30:	683b      	ldr	r3, [r7, #0]
 8000a32:	68da      	ldr	r2, [r3, #12]
 8000a34:	697b      	ldr	r3, [r7, #20]
 8000a36:	005b      	lsls	r3, r3, #1
 8000a38:	fa02 f303 	lsl.w	r3, r2, r3
 8000a3c:	693a      	ldr	r2, [r7, #16]
 8000a3e:	4313      	orrs	r3, r2
 8000a40:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	693a      	ldr	r2, [r7, #16]
 8000a46:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	685b      	ldr	r3, [r3, #4]
 8000a4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000a4e:	2201      	movs	r2, #1
 8000a50:	697b      	ldr	r3, [r7, #20]
 8000a52:	fa02 f303 	lsl.w	r3, r2, r3
 8000a56:	43db      	mvns	r3, r3
 8000a58:	693a      	ldr	r2, [r7, #16]
 8000a5a:	4013      	ands	r3, r2
 8000a5c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000a5e:	683b      	ldr	r3, [r7, #0]
 8000a60:	685b      	ldr	r3, [r3, #4]
 8000a62:	091b      	lsrs	r3, r3, #4
 8000a64:	f003 0201 	and.w	r2, r3, #1
 8000a68:	697b      	ldr	r3, [r7, #20]
 8000a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a6e:	693a      	ldr	r2, [r7, #16]
 8000a70:	4313      	orrs	r3, r2
 8000a72:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	693a      	ldr	r2, [r7, #16]
 8000a78:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000a7a:	683b      	ldr	r3, [r7, #0]
 8000a7c:	685b      	ldr	r3, [r3, #4]
 8000a7e:	f003 0303 	and.w	r3, r3, #3
 8000a82:	2b03      	cmp	r3, #3
 8000a84:	d118      	bne.n	8000ab8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a8a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	697b      	ldr	r3, [r7, #20]
 8000a90:	fa02 f303 	lsl.w	r3, r2, r3
 8000a94:	43db      	mvns	r3, r3
 8000a96:	693a      	ldr	r2, [r7, #16]
 8000a98:	4013      	ands	r3, r2
 8000a9a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	685b      	ldr	r3, [r3, #4]
 8000aa0:	08db      	lsrs	r3, r3, #3
 8000aa2:	f003 0201 	and.w	r2, r3, #1
 8000aa6:	697b      	ldr	r3, [r7, #20]
 8000aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000aac:	693a      	ldr	r2, [r7, #16]
 8000aae:	4313      	orrs	r3, r2
 8000ab0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	693a      	ldr	r2, [r7, #16]
 8000ab6:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ab8:	683b      	ldr	r3, [r7, #0]
 8000aba:	685b      	ldr	r3, [r3, #4]
 8000abc:	f003 0303 	and.w	r3, r3, #3
 8000ac0:	2b03      	cmp	r3, #3
 8000ac2:	d017      	beq.n	8000af4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	68db      	ldr	r3, [r3, #12]
 8000ac8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000aca:	697b      	ldr	r3, [r7, #20]
 8000acc:	005b      	lsls	r3, r3, #1
 8000ace:	2203      	movs	r2, #3
 8000ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad4:	43db      	mvns	r3, r3
 8000ad6:	693a      	ldr	r2, [r7, #16]
 8000ad8:	4013      	ands	r3, r2
 8000ada:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000adc:	683b      	ldr	r3, [r7, #0]
 8000ade:	689a      	ldr	r2, [r3, #8]
 8000ae0:	697b      	ldr	r3, [r7, #20]
 8000ae2:	005b      	lsls	r3, r3, #1
 8000ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae8:	693a      	ldr	r2, [r7, #16]
 8000aea:	4313      	orrs	r3, r2
 8000aec:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	693a      	ldr	r2, [r7, #16]
 8000af2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	685b      	ldr	r3, [r3, #4]
 8000af8:	f003 0303 	and.w	r3, r3, #3
 8000afc:	2b02      	cmp	r3, #2
 8000afe:	d123      	bne.n	8000b48 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000b00:	697b      	ldr	r3, [r7, #20]
 8000b02:	08da      	lsrs	r2, r3, #3
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	3208      	adds	r2, #8
 8000b08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b0c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000b0e:	697b      	ldr	r3, [r7, #20]
 8000b10:	f003 0307 	and.w	r3, r3, #7
 8000b14:	009b      	lsls	r3, r3, #2
 8000b16:	220f      	movs	r2, #15
 8000b18:	fa02 f303 	lsl.w	r3, r2, r3
 8000b1c:	43db      	mvns	r3, r3
 8000b1e:	693a      	ldr	r2, [r7, #16]
 8000b20:	4013      	ands	r3, r2
 8000b22:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000b24:	683b      	ldr	r3, [r7, #0]
 8000b26:	691a      	ldr	r2, [r3, #16]
 8000b28:	697b      	ldr	r3, [r7, #20]
 8000b2a:	f003 0307 	and.w	r3, r3, #7
 8000b2e:	009b      	lsls	r3, r3, #2
 8000b30:	fa02 f303 	lsl.w	r3, r2, r3
 8000b34:	693a      	ldr	r2, [r7, #16]
 8000b36:	4313      	orrs	r3, r2
 8000b38:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000b3a:	697b      	ldr	r3, [r7, #20]
 8000b3c:	08da      	lsrs	r2, r3, #3
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	3208      	adds	r2, #8
 8000b42:	6939      	ldr	r1, [r7, #16]
 8000b44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000b4e:	697b      	ldr	r3, [r7, #20]
 8000b50:	005b      	lsls	r3, r3, #1
 8000b52:	2203      	movs	r2, #3
 8000b54:	fa02 f303 	lsl.w	r3, r2, r3
 8000b58:	43db      	mvns	r3, r3
 8000b5a:	693a      	ldr	r2, [r7, #16]
 8000b5c:	4013      	ands	r3, r2
 8000b5e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000b60:	683b      	ldr	r3, [r7, #0]
 8000b62:	685b      	ldr	r3, [r3, #4]
 8000b64:	f003 0203 	and.w	r2, r3, #3
 8000b68:	697b      	ldr	r3, [r7, #20]
 8000b6a:	005b      	lsls	r3, r3, #1
 8000b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b70:	693a      	ldr	r2, [r7, #16]
 8000b72:	4313      	orrs	r3, r2
 8000b74:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	693a      	ldr	r2, [r7, #16]
 8000b7a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	685b      	ldr	r3, [r3, #4]
 8000b80:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	f000 80ac 	beq.w	8000ce2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b8a:	4b5f      	ldr	r3, [pc, #380]	@ (8000d08 <HAL_GPIO_Init+0x330>)
 8000b8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b8e:	4a5e      	ldr	r2, [pc, #376]	@ (8000d08 <HAL_GPIO_Init+0x330>)
 8000b90:	f043 0301 	orr.w	r3, r3, #1
 8000b94:	6613      	str	r3, [r2, #96]	@ 0x60
 8000b96:	4b5c      	ldr	r3, [pc, #368]	@ (8000d08 <HAL_GPIO_Init+0x330>)
 8000b98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b9a:	f003 0301 	and.w	r3, r3, #1
 8000b9e:	60bb      	str	r3, [r7, #8]
 8000ba0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000ba2:	4a5a      	ldr	r2, [pc, #360]	@ (8000d0c <HAL_GPIO_Init+0x334>)
 8000ba4:	697b      	ldr	r3, [r7, #20]
 8000ba6:	089b      	lsrs	r3, r3, #2
 8000ba8:	3302      	adds	r3, #2
 8000baa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bae:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000bb0:	697b      	ldr	r3, [r7, #20]
 8000bb2:	f003 0303 	and.w	r3, r3, #3
 8000bb6:	009b      	lsls	r3, r3, #2
 8000bb8:	220f      	movs	r2, #15
 8000bba:	fa02 f303 	lsl.w	r3, r2, r3
 8000bbe:	43db      	mvns	r3, r3
 8000bc0:	693a      	ldr	r2, [r7, #16]
 8000bc2:	4013      	ands	r3, r2
 8000bc4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000bcc:	d025      	beq.n	8000c1a <HAL_GPIO_Init+0x242>
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	4a4f      	ldr	r2, [pc, #316]	@ (8000d10 <HAL_GPIO_Init+0x338>)
 8000bd2:	4293      	cmp	r3, r2
 8000bd4:	d01f      	beq.n	8000c16 <HAL_GPIO_Init+0x23e>
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	4a4e      	ldr	r2, [pc, #312]	@ (8000d14 <HAL_GPIO_Init+0x33c>)
 8000bda:	4293      	cmp	r3, r2
 8000bdc:	d019      	beq.n	8000c12 <HAL_GPIO_Init+0x23a>
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	4a4d      	ldr	r2, [pc, #308]	@ (8000d18 <HAL_GPIO_Init+0x340>)
 8000be2:	4293      	cmp	r3, r2
 8000be4:	d013      	beq.n	8000c0e <HAL_GPIO_Init+0x236>
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	4a4c      	ldr	r2, [pc, #304]	@ (8000d1c <HAL_GPIO_Init+0x344>)
 8000bea:	4293      	cmp	r3, r2
 8000bec:	d00d      	beq.n	8000c0a <HAL_GPIO_Init+0x232>
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	4a4b      	ldr	r2, [pc, #300]	@ (8000d20 <HAL_GPIO_Init+0x348>)
 8000bf2:	4293      	cmp	r3, r2
 8000bf4:	d007      	beq.n	8000c06 <HAL_GPIO_Init+0x22e>
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	4a4a      	ldr	r2, [pc, #296]	@ (8000d24 <HAL_GPIO_Init+0x34c>)
 8000bfa:	4293      	cmp	r3, r2
 8000bfc:	d101      	bne.n	8000c02 <HAL_GPIO_Init+0x22a>
 8000bfe:	2306      	movs	r3, #6
 8000c00:	e00c      	b.n	8000c1c <HAL_GPIO_Init+0x244>
 8000c02:	2307      	movs	r3, #7
 8000c04:	e00a      	b.n	8000c1c <HAL_GPIO_Init+0x244>
 8000c06:	2305      	movs	r3, #5
 8000c08:	e008      	b.n	8000c1c <HAL_GPIO_Init+0x244>
 8000c0a:	2304      	movs	r3, #4
 8000c0c:	e006      	b.n	8000c1c <HAL_GPIO_Init+0x244>
 8000c0e:	2303      	movs	r3, #3
 8000c10:	e004      	b.n	8000c1c <HAL_GPIO_Init+0x244>
 8000c12:	2302      	movs	r3, #2
 8000c14:	e002      	b.n	8000c1c <HAL_GPIO_Init+0x244>
 8000c16:	2301      	movs	r3, #1
 8000c18:	e000      	b.n	8000c1c <HAL_GPIO_Init+0x244>
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	697a      	ldr	r2, [r7, #20]
 8000c1e:	f002 0203 	and.w	r2, r2, #3
 8000c22:	0092      	lsls	r2, r2, #2
 8000c24:	4093      	lsls	r3, r2
 8000c26:	693a      	ldr	r2, [r7, #16]
 8000c28:	4313      	orrs	r3, r2
 8000c2a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000c2c:	4937      	ldr	r1, [pc, #220]	@ (8000d0c <HAL_GPIO_Init+0x334>)
 8000c2e:	697b      	ldr	r3, [r7, #20]
 8000c30:	089b      	lsrs	r3, r3, #2
 8000c32:	3302      	adds	r3, #2
 8000c34:	693a      	ldr	r2, [r7, #16]
 8000c36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000c3a:	4b3b      	ldr	r3, [pc, #236]	@ (8000d28 <HAL_GPIO_Init+0x350>)
 8000c3c:	689b      	ldr	r3, [r3, #8]
 8000c3e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	43db      	mvns	r3, r3
 8000c44:	693a      	ldr	r2, [r7, #16]
 8000c46:	4013      	ands	r3, r2
 8000c48:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	685b      	ldr	r3, [r3, #4]
 8000c4e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d003      	beq.n	8000c5e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000c56:	693a      	ldr	r2, [r7, #16]
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	4313      	orrs	r3, r2
 8000c5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000c5e:	4a32      	ldr	r2, [pc, #200]	@ (8000d28 <HAL_GPIO_Init+0x350>)
 8000c60:	693b      	ldr	r3, [r7, #16]
 8000c62:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000c64:	4b30      	ldr	r3, [pc, #192]	@ (8000d28 <HAL_GPIO_Init+0x350>)
 8000c66:	68db      	ldr	r3, [r3, #12]
 8000c68:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	43db      	mvns	r3, r3
 8000c6e:	693a      	ldr	r2, [r7, #16]
 8000c70:	4013      	ands	r3, r2
 8000c72:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	685b      	ldr	r3, [r3, #4]
 8000c78:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d003      	beq.n	8000c88 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000c80:	693a      	ldr	r2, [r7, #16]
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	4313      	orrs	r3, r2
 8000c86:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000c88:	4a27      	ldr	r2, [pc, #156]	@ (8000d28 <HAL_GPIO_Init+0x350>)
 8000c8a:	693b      	ldr	r3, [r7, #16]
 8000c8c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000c8e:	4b26      	ldr	r3, [pc, #152]	@ (8000d28 <HAL_GPIO_Init+0x350>)
 8000c90:	685b      	ldr	r3, [r3, #4]
 8000c92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	43db      	mvns	r3, r3
 8000c98:	693a      	ldr	r2, [r7, #16]
 8000c9a:	4013      	ands	r3, r2
 8000c9c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	685b      	ldr	r3, [r3, #4]
 8000ca2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d003      	beq.n	8000cb2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000caa:	693a      	ldr	r2, [r7, #16]
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	4313      	orrs	r3, r2
 8000cb0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000cb2:	4a1d      	ldr	r2, [pc, #116]	@ (8000d28 <HAL_GPIO_Init+0x350>)
 8000cb4:	693b      	ldr	r3, [r7, #16]
 8000cb6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000cb8:	4b1b      	ldr	r3, [pc, #108]	@ (8000d28 <HAL_GPIO_Init+0x350>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	43db      	mvns	r3, r3
 8000cc2:	693a      	ldr	r2, [r7, #16]
 8000cc4:	4013      	ands	r3, r2
 8000cc6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	685b      	ldr	r3, [r3, #4]
 8000ccc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d003      	beq.n	8000cdc <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000cd4:	693a      	ldr	r2, [r7, #16]
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	4313      	orrs	r3, r2
 8000cda:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000cdc:	4a12      	ldr	r2, [pc, #72]	@ (8000d28 <HAL_GPIO_Init+0x350>)
 8000cde:	693b      	ldr	r3, [r7, #16]
 8000ce0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000ce2:	697b      	ldr	r3, [r7, #20]
 8000ce4:	3301      	adds	r3, #1
 8000ce6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	681a      	ldr	r2, [r3, #0]
 8000cec:	697b      	ldr	r3, [r7, #20]
 8000cee:	fa22 f303 	lsr.w	r3, r2, r3
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	f47f ae78 	bne.w	80009e8 <HAL_GPIO_Init+0x10>
  }
}
 8000cf8:	bf00      	nop
 8000cfa:	bf00      	nop
 8000cfc:	371c      	adds	r7, #28
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop
 8000d08:	40021000 	.word	0x40021000
 8000d0c:	40010000 	.word	0x40010000
 8000d10:	48000400 	.word	0x48000400
 8000d14:	48000800 	.word	0x48000800
 8000d18:	48000c00 	.word	0x48000c00
 8000d1c:	48001000 	.word	0x48001000
 8000d20:	48001400 	.word	0x48001400
 8000d24:	48001800 	.word	0x48001800
 8000d28:	40010400 	.word	0x40010400

08000d2c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000d30:	4b04      	ldr	r3, [pc, #16]	@ (8000d44 <HAL_PWREx_GetVoltageRange+0x18>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8000d38:	4618      	mov	r0, r3
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop
 8000d44:	40007000 	.word	0x40007000

08000d48 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b085      	sub	sp, #20
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000d56:	d130      	bne.n	8000dba <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000d58:	4b23      	ldr	r3, [pc, #140]	@ (8000de8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000d60:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000d64:	d038      	beq.n	8000dd8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d66:	4b20      	ldr	r3, [pc, #128]	@ (8000de8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000d6e:	4a1e      	ldr	r2, [pc, #120]	@ (8000de8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d70:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d74:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000d76:	4b1d      	ldr	r3, [pc, #116]	@ (8000dec <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	2232      	movs	r2, #50	@ 0x32
 8000d7c:	fb02 f303 	mul.w	r3, r2, r3
 8000d80:	4a1b      	ldr	r2, [pc, #108]	@ (8000df0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000d82:	fba2 2303 	umull	r2, r3, r2, r3
 8000d86:	0c9b      	lsrs	r3, r3, #18
 8000d88:	3301      	adds	r3, #1
 8000d8a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000d8c:	e002      	b.n	8000d94 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	3b01      	subs	r3, #1
 8000d92:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000d94:	4b14      	ldr	r3, [pc, #80]	@ (8000de8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d96:	695b      	ldr	r3, [r3, #20]
 8000d98:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000d9c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000da0:	d102      	bne.n	8000da8 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d1f2      	bne.n	8000d8e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000da8:	4b0f      	ldr	r3, [pc, #60]	@ (8000de8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000daa:	695b      	ldr	r3, [r3, #20]
 8000dac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000db0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000db4:	d110      	bne.n	8000dd8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000db6:	2303      	movs	r3, #3
 8000db8:	e00f      	b.n	8000dda <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000dba:	4b0b      	ldr	r3, [pc, #44]	@ (8000de8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000dc2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000dc6:	d007      	beq.n	8000dd8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000dc8:	4b07      	ldr	r3, [pc, #28]	@ (8000de8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000dd0:	4a05      	ldr	r2, [pc, #20]	@ (8000de8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000dd2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000dd6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000dd8:	2300      	movs	r3, #0
}
 8000dda:	4618      	mov	r0, r3
 8000ddc:	3714      	adds	r7, #20
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop
 8000de8:	40007000 	.word	0x40007000
 8000dec:	20000000 	.word	0x20000000
 8000df0:	431bde83 	.word	0x431bde83

08000df4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b088      	sub	sp, #32
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d101      	bne.n	8000e06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e02:	2301      	movs	r3, #1
 8000e04:	e3ca      	b.n	800159c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000e06:	4b97      	ldr	r3, [pc, #604]	@ (8001064 <HAL_RCC_OscConfig+0x270>)
 8000e08:	689b      	ldr	r3, [r3, #8]
 8000e0a:	f003 030c 	and.w	r3, r3, #12
 8000e0e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000e10:	4b94      	ldr	r3, [pc, #592]	@ (8001064 <HAL_RCC_OscConfig+0x270>)
 8000e12:	68db      	ldr	r3, [r3, #12]
 8000e14:	f003 0303 	and.w	r3, r3, #3
 8000e18:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	f003 0310 	and.w	r3, r3, #16
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	f000 80e4 	beq.w	8000ff0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000e28:	69bb      	ldr	r3, [r7, #24]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d007      	beq.n	8000e3e <HAL_RCC_OscConfig+0x4a>
 8000e2e:	69bb      	ldr	r3, [r7, #24]
 8000e30:	2b0c      	cmp	r3, #12
 8000e32:	f040 808b 	bne.w	8000f4c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000e36:	697b      	ldr	r3, [r7, #20]
 8000e38:	2b01      	cmp	r3, #1
 8000e3a:	f040 8087 	bne.w	8000f4c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000e3e:	4b89      	ldr	r3, [pc, #548]	@ (8001064 <HAL_RCC_OscConfig+0x270>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	f003 0302 	and.w	r3, r3, #2
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d005      	beq.n	8000e56 <HAL_RCC_OscConfig+0x62>
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	699b      	ldr	r3, [r3, #24]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d101      	bne.n	8000e56 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8000e52:	2301      	movs	r3, #1
 8000e54:	e3a2      	b.n	800159c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	6a1a      	ldr	r2, [r3, #32]
 8000e5a:	4b82      	ldr	r3, [pc, #520]	@ (8001064 <HAL_RCC_OscConfig+0x270>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	f003 0308 	and.w	r3, r3, #8
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d004      	beq.n	8000e70 <HAL_RCC_OscConfig+0x7c>
 8000e66:	4b7f      	ldr	r3, [pc, #508]	@ (8001064 <HAL_RCC_OscConfig+0x270>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8000e6e:	e005      	b.n	8000e7c <HAL_RCC_OscConfig+0x88>
 8000e70:	4b7c      	ldr	r3, [pc, #496]	@ (8001064 <HAL_RCC_OscConfig+0x270>)
 8000e72:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000e76:	091b      	lsrs	r3, r3, #4
 8000e78:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8000e7c:	4293      	cmp	r3, r2
 8000e7e:	d223      	bcs.n	8000ec8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	6a1b      	ldr	r3, [r3, #32]
 8000e84:	4618      	mov	r0, r3
 8000e86:	f000 fd5d 	bl	8001944 <RCC_SetFlashLatencyFromMSIRange>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d001      	beq.n	8000e94 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8000e90:	2301      	movs	r3, #1
 8000e92:	e383      	b.n	800159c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000e94:	4b73      	ldr	r3, [pc, #460]	@ (8001064 <HAL_RCC_OscConfig+0x270>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a72      	ldr	r2, [pc, #456]	@ (8001064 <HAL_RCC_OscConfig+0x270>)
 8000e9a:	f043 0308 	orr.w	r3, r3, #8
 8000e9e:	6013      	str	r3, [r2, #0]
 8000ea0:	4b70      	ldr	r3, [pc, #448]	@ (8001064 <HAL_RCC_OscConfig+0x270>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	6a1b      	ldr	r3, [r3, #32]
 8000eac:	496d      	ldr	r1, [pc, #436]	@ (8001064 <HAL_RCC_OscConfig+0x270>)
 8000eae:	4313      	orrs	r3, r2
 8000eb0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000eb2:	4b6c      	ldr	r3, [pc, #432]	@ (8001064 <HAL_RCC_OscConfig+0x270>)
 8000eb4:	685b      	ldr	r3, [r3, #4]
 8000eb6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	69db      	ldr	r3, [r3, #28]
 8000ebe:	021b      	lsls	r3, r3, #8
 8000ec0:	4968      	ldr	r1, [pc, #416]	@ (8001064 <HAL_RCC_OscConfig+0x270>)
 8000ec2:	4313      	orrs	r3, r2
 8000ec4:	604b      	str	r3, [r1, #4]
 8000ec6:	e025      	b.n	8000f14 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000ec8:	4b66      	ldr	r3, [pc, #408]	@ (8001064 <HAL_RCC_OscConfig+0x270>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a65      	ldr	r2, [pc, #404]	@ (8001064 <HAL_RCC_OscConfig+0x270>)
 8000ece:	f043 0308 	orr.w	r3, r3, #8
 8000ed2:	6013      	str	r3, [r2, #0]
 8000ed4:	4b63      	ldr	r3, [pc, #396]	@ (8001064 <HAL_RCC_OscConfig+0x270>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	6a1b      	ldr	r3, [r3, #32]
 8000ee0:	4960      	ldr	r1, [pc, #384]	@ (8001064 <HAL_RCC_OscConfig+0x270>)
 8000ee2:	4313      	orrs	r3, r2
 8000ee4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000ee6:	4b5f      	ldr	r3, [pc, #380]	@ (8001064 <HAL_RCC_OscConfig+0x270>)
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	69db      	ldr	r3, [r3, #28]
 8000ef2:	021b      	lsls	r3, r3, #8
 8000ef4:	495b      	ldr	r1, [pc, #364]	@ (8001064 <HAL_RCC_OscConfig+0x270>)
 8000ef6:	4313      	orrs	r3, r2
 8000ef8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000efa:	69bb      	ldr	r3, [r7, #24]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d109      	bne.n	8000f14 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	6a1b      	ldr	r3, [r3, #32]
 8000f04:	4618      	mov	r0, r3
 8000f06:	f000 fd1d 	bl	8001944 <RCC_SetFlashLatencyFromMSIRange>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d001      	beq.n	8000f14 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8000f10:	2301      	movs	r3, #1
 8000f12:	e343      	b.n	800159c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000f14:	f000 fc7e 	bl	8001814 <HAL_RCC_GetSysClockFreq>
 8000f18:	4602      	mov	r2, r0
 8000f1a:	4b52      	ldr	r3, [pc, #328]	@ (8001064 <HAL_RCC_OscConfig+0x270>)
 8000f1c:	689b      	ldr	r3, [r3, #8]
 8000f1e:	091b      	lsrs	r3, r3, #4
 8000f20:	f003 030f 	and.w	r3, r3, #15
 8000f24:	4950      	ldr	r1, [pc, #320]	@ (8001068 <HAL_RCC_OscConfig+0x274>)
 8000f26:	5ccb      	ldrb	r3, [r1, r3]
 8000f28:	f003 031f 	and.w	r3, r3, #31
 8000f2c:	fa22 f303 	lsr.w	r3, r2, r3
 8000f30:	4a4e      	ldr	r2, [pc, #312]	@ (800106c <HAL_RCC_OscConfig+0x278>)
 8000f32:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000f34:	4b4e      	ldr	r3, [pc, #312]	@ (8001070 <HAL_RCC_OscConfig+0x27c>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f7ff fbc3 	bl	80006c4 <HAL_InitTick>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000f42:	7bfb      	ldrb	r3, [r7, #15]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d052      	beq.n	8000fee <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8000f48:	7bfb      	ldrb	r3, [r7, #15]
 8000f4a:	e327      	b.n	800159c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	699b      	ldr	r3, [r3, #24]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d032      	beq.n	8000fba <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000f54:	4b43      	ldr	r3, [pc, #268]	@ (8001064 <HAL_RCC_OscConfig+0x270>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a42      	ldr	r2, [pc, #264]	@ (8001064 <HAL_RCC_OscConfig+0x270>)
 8000f5a:	f043 0301 	orr.w	r3, r3, #1
 8000f5e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000f60:	f7ff fc00 	bl	8000764 <HAL_GetTick>
 8000f64:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000f66:	e008      	b.n	8000f7a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000f68:	f7ff fbfc 	bl	8000764 <HAL_GetTick>
 8000f6c:	4602      	mov	r2, r0
 8000f6e:	693b      	ldr	r3, [r7, #16]
 8000f70:	1ad3      	subs	r3, r2, r3
 8000f72:	2b02      	cmp	r3, #2
 8000f74:	d901      	bls.n	8000f7a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8000f76:	2303      	movs	r3, #3
 8000f78:	e310      	b.n	800159c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000f7a:	4b3a      	ldr	r3, [pc, #232]	@ (8001064 <HAL_RCC_OscConfig+0x270>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	f003 0302 	and.w	r3, r3, #2
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d0f0      	beq.n	8000f68 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000f86:	4b37      	ldr	r3, [pc, #220]	@ (8001064 <HAL_RCC_OscConfig+0x270>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	4a36      	ldr	r2, [pc, #216]	@ (8001064 <HAL_RCC_OscConfig+0x270>)
 8000f8c:	f043 0308 	orr.w	r3, r3, #8
 8000f90:	6013      	str	r3, [r2, #0]
 8000f92:	4b34      	ldr	r3, [pc, #208]	@ (8001064 <HAL_RCC_OscConfig+0x270>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	6a1b      	ldr	r3, [r3, #32]
 8000f9e:	4931      	ldr	r1, [pc, #196]	@ (8001064 <HAL_RCC_OscConfig+0x270>)
 8000fa0:	4313      	orrs	r3, r2
 8000fa2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000fa4:	4b2f      	ldr	r3, [pc, #188]	@ (8001064 <HAL_RCC_OscConfig+0x270>)
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	69db      	ldr	r3, [r3, #28]
 8000fb0:	021b      	lsls	r3, r3, #8
 8000fb2:	492c      	ldr	r1, [pc, #176]	@ (8001064 <HAL_RCC_OscConfig+0x270>)
 8000fb4:	4313      	orrs	r3, r2
 8000fb6:	604b      	str	r3, [r1, #4]
 8000fb8:	e01a      	b.n	8000ff0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000fba:	4b2a      	ldr	r3, [pc, #168]	@ (8001064 <HAL_RCC_OscConfig+0x270>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	4a29      	ldr	r2, [pc, #164]	@ (8001064 <HAL_RCC_OscConfig+0x270>)
 8000fc0:	f023 0301 	bic.w	r3, r3, #1
 8000fc4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000fc6:	f7ff fbcd 	bl	8000764 <HAL_GetTick>
 8000fca:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000fcc:	e008      	b.n	8000fe0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000fce:	f7ff fbc9 	bl	8000764 <HAL_GetTick>
 8000fd2:	4602      	mov	r2, r0
 8000fd4:	693b      	ldr	r3, [r7, #16]
 8000fd6:	1ad3      	subs	r3, r2, r3
 8000fd8:	2b02      	cmp	r3, #2
 8000fda:	d901      	bls.n	8000fe0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8000fdc:	2303      	movs	r3, #3
 8000fde:	e2dd      	b.n	800159c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000fe0:	4b20      	ldr	r3, [pc, #128]	@ (8001064 <HAL_RCC_OscConfig+0x270>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	f003 0302 	and.w	r3, r3, #2
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d1f0      	bne.n	8000fce <HAL_RCC_OscConfig+0x1da>
 8000fec:	e000      	b.n	8000ff0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000fee:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f003 0301 	and.w	r3, r3, #1
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d074      	beq.n	80010e6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8000ffc:	69bb      	ldr	r3, [r7, #24]
 8000ffe:	2b08      	cmp	r3, #8
 8001000:	d005      	beq.n	800100e <HAL_RCC_OscConfig+0x21a>
 8001002:	69bb      	ldr	r3, [r7, #24]
 8001004:	2b0c      	cmp	r3, #12
 8001006:	d10e      	bne.n	8001026 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	2b03      	cmp	r3, #3
 800100c:	d10b      	bne.n	8001026 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800100e:	4b15      	ldr	r3, [pc, #84]	@ (8001064 <HAL_RCC_OscConfig+0x270>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001016:	2b00      	cmp	r3, #0
 8001018:	d064      	beq.n	80010e4 <HAL_RCC_OscConfig+0x2f0>
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d160      	bne.n	80010e4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001022:	2301      	movs	r3, #1
 8001024:	e2ba      	b.n	800159c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800102e:	d106      	bne.n	800103e <HAL_RCC_OscConfig+0x24a>
 8001030:	4b0c      	ldr	r3, [pc, #48]	@ (8001064 <HAL_RCC_OscConfig+0x270>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4a0b      	ldr	r2, [pc, #44]	@ (8001064 <HAL_RCC_OscConfig+0x270>)
 8001036:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800103a:	6013      	str	r3, [r2, #0]
 800103c:	e026      	b.n	800108c <HAL_RCC_OscConfig+0x298>
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001046:	d115      	bne.n	8001074 <HAL_RCC_OscConfig+0x280>
 8001048:	4b06      	ldr	r3, [pc, #24]	@ (8001064 <HAL_RCC_OscConfig+0x270>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a05      	ldr	r2, [pc, #20]	@ (8001064 <HAL_RCC_OscConfig+0x270>)
 800104e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001052:	6013      	str	r3, [r2, #0]
 8001054:	4b03      	ldr	r3, [pc, #12]	@ (8001064 <HAL_RCC_OscConfig+0x270>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a02      	ldr	r2, [pc, #8]	@ (8001064 <HAL_RCC_OscConfig+0x270>)
 800105a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800105e:	6013      	str	r3, [r2, #0]
 8001060:	e014      	b.n	800108c <HAL_RCC_OscConfig+0x298>
 8001062:	bf00      	nop
 8001064:	40021000 	.word	0x40021000
 8001068:	08002918 	.word	0x08002918
 800106c:	20000000 	.word	0x20000000
 8001070:	20000004 	.word	0x20000004
 8001074:	4ba0      	ldr	r3, [pc, #640]	@ (80012f8 <HAL_RCC_OscConfig+0x504>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a9f      	ldr	r2, [pc, #636]	@ (80012f8 <HAL_RCC_OscConfig+0x504>)
 800107a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800107e:	6013      	str	r3, [r2, #0]
 8001080:	4b9d      	ldr	r3, [pc, #628]	@ (80012f8 <HAL_RCC_OscConfig+0x504>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a9c      	ldr	r2, [pc, #624]	@ (80012f8 <HAL_RCC_OscConfig+0x504>)
 8001086:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800108a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d013      	beq.n	80010bc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001094:	f7ff fb66 	bl	8000764 <HAL_GetTick>
 8001098:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800109a:	e008      	b.n	80010ae <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800109c:	f7ff fb62 	bl	8000764 <HAL_GetTick>
 80010a0:	4602      	mov	r2, r0
 80010a2:	693b      	ldr	r3, [r7, #16]
 80010a4:	1ad3      	subs	r3, r2, r3
 80010a6:	2b64      	cmp	r3, #100	@ 0x64
 80010a8:	d901      	bls.n	80010ae <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80010aa:	2303      	movs	r3, #3
 80010ac:	e276      	b.n	800159c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80010ae:	4b92      	ldr	r3, [pc, #584]	@ (80012f8 <HAL_RCC_OscConfig+0x504>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d0f0      	beq.n	800109c <HAL_RCC_OscConfig+0x2a8>
 80010ba:	e014      	b.n	80010e6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010bc:	f7ff fb52 	bl	8000764 <HAL_GetTick>
 80010c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80010c2:	e008      	b.n	80010d6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010c4:	f7ff fb4e 	bl	8000764 <HAL_GetTick>
 80010c8:	4602      	mov	r2, r0
 80010ca:	693b      	ldr	r3, [r7, #16]
 80010cc:	1ad3      	subs	r3, r2, r3
 80010ce:	2b64      	cmp	r3, #100	@ 0x64
 80010d0:	d901      	bls.n	80010d6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80010d2:	2303      	movs	r3, #3
 80010d4:	e262      	b.n	800159c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80010d6:	4b88      	ldr	r3, [pc, #544]	@ (80012f8 <HAL_RCC_OscConfig+0x504>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d1f0      	bne.n	80010c4 <HAL_RCC_OscConfig+0x2d0>
 80010e2:	e000      	b.n	80010e6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f003 0302 	and.w	r3, r3, #2
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d060      	beq.n	80011b4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80010f2:	69bb      	ldr	r3, [r7, #24]
 80010f4:	2b04      	cmp	r3, #4
 80010f6:	d005      	beq.n	8001104 <HAL_RCC_OscConfig+0x310>
 80010f8:	69bb      	ldr	r3, [r7, #24]
 80010fa:	2b0c      	cmp	r3, #12
 80010fc:	d119      	bne.n	8001132 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80010fe:	697b      	ldr	r3, [r7, #20]
 8001100:	2b02      	cmp	r3, #2
 8001102:	d116      	bne.n	8001132 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001104:	4b7c      	ldr	r3, [pc, #496]	@ (80012f8 <HAL_RCC_OscConfig+0x504>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800110c:	2b00      	cmp	r3, #0
 800110e:	d005      	beq.n	800111c <HAL_RCC_OscConfig+0x328>
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	68db      	ldr	r3, [r3, #12]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d101      	bne.n	800111c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001118:	2301      	movs	r3, #1
 800111a:	e23f      	b.n	800159c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800111c:	4b76      	ldr	r3, [pc, #472]	@ (80012f8 <HAL_RCC_OscConfig+0x504>)
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	691b      	ldr	r3, [r3, #16]
 8001128:	061b      	lsls	r3, r3, #24
 800112a:	4973      	ldr	r1, [pc, #460]	@ (80012f8 <HAL_RCC_OscConfig+0x504>)
 800112c:	4313      	orrs	r3, r2
 800112e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001130:	e040      	b.n	80011b4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	68db      	ldr	r3, [r3, #12]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d023      	beq.n	8001182 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800113a:	4b6f      	ldr	r3, [pc, #444]	@ (80012f8 <HAL_RCC_OscConfig+0x504>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4a6e      	ldr	r2, [pc, #440]	@ (80012f8 <HAL_RCC_OscConfig+0x504>)
 8001140:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001144:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001146:	f7ff fb0d 	bl	8000764 <HAL_GetTick>
 800114a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800114c:	e008      	b.n	8001160 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800114e:	f7ff fb09 	bl	8000764 <HAL_GetTick>
 8001152:	4602      	mov	r2, r0
 8001154:	693b      	ldr	r3, [r7, #16]
 8001156:	1ad3      	subs	r3, r2, r3
 8001158:	2b02      	cmp	r3, #2
 800115a:	d901      	bls.n	8001160 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800115c:	2303      	movs	r3, #3
 800115e:	e21d      	b.n	800159c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001160:	4b65      	ldr	r3, [pc, #404]	@ (80012f8 <HAL_RCC_OscConfig+0x504>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001168:	2b00      	cmp	r3, #0
 800116a:	d0f0      	beq.n	800114e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800116c:	4b62      	ldr	r3, [pc, #392]	@ (80012f8 <HAL_RCC_OscConfig+0x504>)
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	691b      	ldr	r3, [r3, #16]
 8001178:	061b      	lsls	r3, r3, #24
 800117a:	495f      	ldr	r1, [pc, #380]	@ (80012f8 <HAL_RCC_OscConfig+0x504>)
 800117c:	4313      	orrs	r3, r2
 800117e:	604b      	str	r3, [r1, #4]
 8001180:	e018      	b.n	80011b4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001182:	4b5d      	ldr	r3, [pc, #372]	@ (80012f8 <HAL_RCC_OscConfig+0x504>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4a5c      	ldr	r2, [pc, #368]	@ (80012f8 <HAL_RCC_OscConfig+0x504>)
 8001188:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800118c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800118e:	f7ff fae9 	bl	8000764 <HAL_GetTick>
 8001192:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001194:	e008      	b.n	80011a8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001196:	f7ff fae5 	bl	8000764 <HAL_GetTick>
 800119a:	4602      	mov	r2, r0
 800119c:	693b      	ldr	r3, [r7, #16]
 800119e:	1ad3      	subs	r3, r2, r3
 80011a0:	2b02      	cmp	r3, #2
 80011a2:	d901      	bls.n	80011a8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80011a4:	2303      	movs	r3, #3
 80011a6:	e1f9      	b.n	800159c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80011a8:	4b53      	ldr	r3, [pc, #332]	@ (80012f8 <HAL_RCC_OscConfig+0x504>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d1f0      	bne.n	8001196 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f003 0308 	and.w	r3, r3, #8
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d03c      	beq.n	800123a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	695b      	ldr	r3, [r3, #20]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d01c      	beq.n	8001202 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80011c8:	4b4b      	ldr	r3, [pc, #300]	@ (80012f8 <HAL_RCC_OscConfig+0x504>)
 80011ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80011ce:	4a4a      	ldr	r2, [pc, #296]	@ (80012f8 <HAL_RCC_OscConfig+0x504>)
 80011d0:	f043 0301 	orr.w	r3, r3, #1
 80011d4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011d8:	f7ff fac4 	bl	8000764 <HAL_GetTick>
 80011dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80011de:	e008      	b.n	80011f2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011e0:	f7ff fac0 	bl	8000764 <HAL_GetTick>
 80011e4:	4602      	mov	r2, r0
 80011e6:	693b      	ldr	r3, [r7, #16]
 80011e8:	1ad3      	subs	r3, r2, r3
 80011ea:	2b02      	cmp	r3, #2
 80011ec:	d901      	bls.n	80011f2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80011ee:	2303      	movs	r3, #3
 80011f0:	e1d4      	b.n	800159c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80011f2:	4b41      	ldr	r3, [pc, #260]	@ (80012f8 <HAL_RCC_OscConfig+0x504>)
 80011f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80011f8:	f003 0302 	and.w	r3, r3, #2
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d0ef      	beq.n	80011e0 <HAL_RCC_OscConfig+0x3ec>
 8001200:	e01b      	b.n	800123a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001202:	4b3d      	ldr	r3, [pc, #244]	@ (80012f8 <HAL_RCC_OscConfig+0x504>)
 8001204:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001208:	4a3b      	ldr	r2, [pc, #236]	@ (80012f8 <HAL_RCC_OscConfig+0x504>)
 800120a:	f023 0301 	bic.w	r3, r3, #1
 800120e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001212:	f7ff faa7 	bl	8000764 <HAL_GetTick>
 8001216:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001218:	e008      	b.n	800122c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800121a:	f7ff faa3 	bl	8000764 <HAL_GetTick>
 800121e:	4602      	mov	r2, r0
 8001220:	693b      	ldr	r3, [r7, #16]
 8001222:	1ad3      	subs	r3, r2, r3
 8001224:	2b02      	cmp	r3, #2
 8001226:	d901      	bls.n	800122c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001228:	2303      	movs	r3, #3
 800122a:	e1b7      	b.n	800159c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800122c:	4b32      	ldr	r3, [pc, #200]	@ (80012f8 <HAL_RCC_OscConfig+0x504>)
 800122e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001232:	f003 0302 	and.w	r3, r3, #2
 8001236:	2b00      	cmp	r3, #0
 8001238:	d1ef      	bne.n	800121a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f003 0304 	and.w	r3, r3, #4
 8001242:	2b00      	cmp	r3, #0
 8001244:	f000 80a6 	beq.w	8001394 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001248:	2300      	movs	r3, #0
 800124a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800124c:	4b2a      	ldr	r3, [pc, #168]	@ (80012f8 <HAL_RCC_OscConfig+0x504>)
 800124e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001250:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001254:	2b00      	cmp	r3, #0
 8001256:	d10d      	bne.n	8001274 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001258:	4b27      	ldr	r3, [pc, #156]	@ (80012f8 <HAL_RCC_OscConfig+0x504>)
 800125a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800125c:	4a26      	ldr	r2, [pc, #152]	@ (80012f8 <HAL_RCC_OscConfig+0x504>)
 800125e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001262:	6593      	str	r3, [r2, #88]	@ 0x58
 8001264:	4b24      	ldr	r3, [pc, #144]	@ (80012f8 <HAL_RCC_OscConfig+0x504>)
 8001266:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001268:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800126c:	60bb      	str	r3, [r7, #8]
 800126e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001270:	2301      	movs	r3, #1
 8001272:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001274:	4b21      	ldr	r3, [pc, #132]	@ (80012fc <HAL_RCC_OscConfig+0x508>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800127c:	2b00      	cmp	r3, #0
 800127e:	d118      	bne.n	80012b2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001280:	4b1e      	ldr	r3, [pc, #120]	@ (80012fc <HAL_RCC_OscConfig+0x508>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a1d      	ldr	r2, [pc, #116]	@ (80012fc <HAL_RCC_OscConfig+0x508>)
 8001286:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800128a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800128c:	f7ff fa6a 	bl	8000764 <HAL_GetTick>
 8001290:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001292:	e008      	b.n	80012a6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001294:	f7ff fa66 	bl	8000764 <HAL_GetTick>
 8001298:	4602      	mov	r2, r0
 800129a:	693b      	ldr	r3, [r7, #16]
 800129c:	1ad3      	subs	r3, r2, r3
 800129e:	2b02      	cmp	r3, #2
 80012a0:	d901      	bls.n	80012a6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80012a2:	2303      	movs	r3, #3
 80012a4:	e17a      	b.n	800159c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80012a6:	4b15      	ldr	r3, [pc, #84]	@ (80012fc <HAL_RCC_OscConfig+0x508>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d0f0      	beq.n	8001294 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	689b      	ldr	r3, [r3, #8]
 80012b6:	2b01      	cmp	r3, #1
 80012b8:	d108      	bne.n	80012cc <HAL_RCC_OscConfig+0x4d8>
 80012ba:	4b0f      	ldr	r3, [pc, #60]	@ (80012f8 <HAL_RCC_OscConfig+0x504>)
 80012bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80012c0:	4a0d      	ldr	r2, [pc, #52]	@ (80012f8 <HAL_RCC_OscConfig+0x504>)
 80012c2:	f043 0301 	orr.w	r3, r3, #1
 80012c6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80012ca:	e029      	b.n	8001320 <HAL_RCC_OscConfig+0x52c>
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	689b      	ldr	r3, [r3, #8]
 80012d0:	2b05      	cmp	r3, #5
 80012d2:	d115      	bne.n	8001300 <HAL_RCC_OscConfig+0x50c>
 80012d4:	4b08      	ldr	r3, [pc, #32]	@ (80012f8 <HAL_RCC_OscConfig+0x504>)
 80012d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80012da:	4a07      	ldr	r2, [pc, #28]	@ (80012f8 <HAL_RCC_OscConfig+0x504>)
 80012dc:	f043 0304 	orr.w	r3, r3, #4
 80012e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80012e4:	4b04      	ldr	r3, [pc, #16]	@ (80012f8 <HAL_RCC_OscConfig+0x504>)
 80012e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80012ea:	4a03      	ldr	r2, [pc, #12]	@ (80012f8 <HAL_RCC_OscConfig+0x504>)
 80012ec:	f043 0301 	orr.w	r3, r3, #1
 80012f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80012f4:	e014      	b.n	8001320 <HAL_RCC_OscConfig+0x52c>
 80012f6:	bf00      	nop
 80012f8:	40021000 	.word	0x40021000
 80012fc:	40007000 	.word	0x40007000
 8001300:	4b9c      	ldr	r3, [pc, #624]	@ (8001574 <HAL_RCC_OscConfig+0x780>)
 8001302:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001306:	4a9b      	ldr	r2, [pc, #620]	@ (8001574 <HAL_RCC_OscConfig+0x780>)
 8001308:	f023 0301 	bic.w	r3, r3, #1
 800130c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001310:	4b98      	ldr	r3, [pc, #608]	@ (8001574 <HAL_RCC_OscConfig+0x780>)
 8001312:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001316:	4a97      	ldr	r2, [pc, #604]	@ (8001574 <HAL_RCC_OscConfig+0x780>)
 8001318:	f023 0304 	bic.w	r3, r3, #4
 800131c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	689b      	ldr	r3, [r3, #8]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d016      	beq.n	8001356 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001328:	f7ff fa1c 	bl	8000764 <HAL_GetTick>
 800132c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800132e:	e00a      	b.n	8001346 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001330:	f7ff fa18 	bl	8000764 <HAL_GetTick>
 8001334:	4602      	mov	r2, r0
 8001336:	693b      	ldr	r3, [r7, #16]
 8001338:	1ad3      	subs	r3, r2, r3
 800133a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800133e:	4293      	cmp	r3, r2
 8001340:	d901      	bls.n	8001346 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001342:	2303      	movs	r3, #3
 8001344:	e12a      	b.n	800159c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001346:	4b8b      	ldr	r3, [pc, #556]	@ (8001574 <HAL_RCC_OscConfig+0x780>)
 8001348:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800134c:	f003 0302 	and.w	r3, r3, #2
 8001350:	2b00      	cmp	r3, #0
 8001352:	d0ed      	beq.n	8001330 <HAL_RCC_OscConfig+0x53c>
 8001354:	e015      	b.n	8001382 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001356:	f7ff fa05 	bl	8000764 <HAL_GetTick>
 800135a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800135c:	e00a      	b.n	8001374 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800135e:	f7ff fa01 	bl	8000764 <HAL_GetTick>
 8001362:	4602      	mov	r2, r0
 8001364:	693b      	ldr	r3, [r7, #16]
 8001366:	1ad3      	subs	r3, r2, r3
 8001368:	f241 3288 	movw	r2, #5000	@ 0x1388
 800136c:	4293      	cmp	r3, r2
 800136e:	d901      	bls.n	8001374 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001370:	2303      	movs	r3, #3
 8001372:	e113      	b.n	800159c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001374:	4b7f      	ldr	r3, [pc, #508]	@ (8001574 <HAL_RCC_OscConfig+0x780>)
 8001376:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800137a:	f003 0302 	and.w	r3, r3, #2
 800137e:	2b00      	cmp	r3, #0
 8001380:	d1ed      	bne.n	800135e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001382:	7ffb      	ldrb	r3, [r7, #31]
 8001384:	2b01      	cmp	r3, #1
 8001386:	d105      	bne.n	8001394 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001388:	4b7a      	ldr	r3, [pc, #488]	@ (8001574 <HAL_RCC_OscConfig+0x780>)
 800138a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800138c:	4a79      	ldr	r2, [pc, #484]	@ (8001574 <HAL_RCC_OscConfig+0x780>)
 800138e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001392:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001398:	2b00      	cmp	r3, #0
 800139a:	f000 80fe 	beq.w	800159a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013a2:	2b02      	cmp	r3, #2
 80013a4:	f040 80d0 	bne.w	8001548 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80013a8:	4b72      	ldr	r3, [pc, #456]	@ (8001574 <HAL_RCC_OscConfig+0x780>)
 80013aa:	68db      	ldr	r3, [r3, #12]
 80013ac:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	f003 0203 	and.w	r2, r3, #3
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013b8:	429a      	cmp	r2, r3
 80013ba:	d130      	bne.n	800141e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013c6:	3b01      	subs	r3, #1
 80013c8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80013ca:	429a      	cmp	r2, r3
 80013cc:	d127      	bne.n	800141e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80013ce:	697b      	ldr	r3, [r7, #20]
 80013d0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80013d8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80013da:	429a      	cmp	r2, r3
 80013dc:	d11f      	bne.n	800141e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013e4:	687a      	ldr	r2, [r7, #4]
 80013e6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80013e8:	2a07      	cmp	r2, #7
 80013ea:	bf14      	ite	ne
 80013ec:	2201      	movne	r2, #1
 80013ee:	2200      	moveq	r2, #0
 80013f0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d113      	bne.n	800141e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80013f6:	697b      	ldr	r3, [r7, #20]
 80013f8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001400:	085b      	lsrs	r3, r3, #1
 8001402:	3b01      	subs	r3, #1
 8001404:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001406:	429a      	cmp	r2, r3
 8001408:	d109      	bne.n	800141e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800140a:	697b      	ldr	r3, [r7, #20]
 800140c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001414:	085b      	lsrs	r3, r3, #1
 8001416:	3b01      	subs	r3, #1
 8001418:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800141a:	429a      	cmp	r2, r3
 800141c:	d06e      	beq.n	80014fc <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800141e:	69bb      	ldr	r3, [r7, #24]
 8001420:	2b0c      	cmp	r3, #12
 8001422:	d069      	beq.n	80014f8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001424:	4b53      	ldr	r3, [pc, #332]	@ (8001574 <HAL_RCC_OscConfig+0x780>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800142c:	2b00      	cmp	r3, #0
 800142e:	d105      	bne.n	800143c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001430:	4b50      	ldr	r3, [pc, #320]	@ (8001574 <HAL_RCC_OscConfig+0x780>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800143c:	2301      	movs	r3, #1
 800143e:	e0ad      	b.n	800159c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001440:	4b4c      	ldr	r3, [pc, #304]	@ (8001574 <HAL_RCC_OscConfig+0x780>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a4b      	ldr	r2, [pc, #300]	@ (8001574 <HAL_RCC_OscConfig+0x780>)
 8001446:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800144a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800144c:	f7ff f98a 	bl	8000764 <HAL_GetTick>
 8001450:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001452:	e008      	b.n	8001466 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001454:	f7ff f986 	bl	8000764 <HAL_GetTick>
 8001458:	4602      	mov	r2, r0
 800145a:	693b      	ldr	r3, [r7, #16]
 800145c:	1ad3      	subs	r3, r2, r3
 800145e:	2b02      	cmp	r3, #2
 8001460:	d901      	bls.n	8001466 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001462:	2303      	movs	r3, #3
 8001464:	e09a      	b.n	800159c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001466:	4b43      	ldr	r3, [pc, #268]	@ (8001574 <HAL_RCC_OscConfig+0x780>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800146e:	2b00      	cmp	r3, #0
 8001470:	d1f0      	bne.n	8001454 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001472:	4b40      	ldr	r3, [pc, #256]	@ (8001574 <HAL_RCC_OscConfig+0x780>)
 8001474:	68da      	ldr	r2, [r3, #12]
 8001476:	4b40      	ldr	r3, [pc, #256]	@ (8001578 <HAL_RCC_OscConfig+0x784>)
 8001478:	4013      	ands	r3, r2
 800147a:	687a      	ldr	r2, [r7, #4]
 800147c:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800147e:	687a      	ldr	r2, [r7, #4]
 8001480:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001482:	3a01      	subs	r2, #1
 8001484:	0112      	lsls	r2, r2, #4
 8001486:	4311      	orrs	r1, r2
 8001488:	687a      	ldr	r2, [r7, #4]
 800148a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800148c:	0212      	lsls	r2, r2, #8
 800148e:	4311      	orrs	r1, r2
 8001490:	687a      	ldr	r2, [r7, #4]
 8001492:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001494:	0852      	lsrs	r2, r2, #1
 8001496:	3a01      	subs	r2, #1
 8001498:	0552      	lsls	r2, r2, #21
 800149a:	4311      	orrs	r1, r2
 800149c:	687a      	ldr	r2, [r7, #4]
 800149e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80014a0:	0852      	lsrs	r2, r2, #1
 80014a2:	3a01      	subs	r2, #1
 80014a4:	0652      	lsls	r2, r2, #25
 80014a6:	4311      	orrs	r1, r2
 80014a8:	687a      	ldr	r2, [r7, #4]
 80014aa:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80014ac:	0912      	lsrs	r2, r2, #4
 80014ae:	0452      	lsls	r2, r2, #17
 80014b0:	430a      	orrs	r2, r1
 80014b2:	4930      	ldr	r1, [pc, #192]	@ (8001574 <HAL_RCC_OscConfig+0x780>)
 80014b4:	4313      	orrs	r3, r2
 80014b6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80014b8:	4b2e      	ldr	r3, [pc, #184]	@ (8001574 <HAL_RCC_OscConfig+0x780>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a2d      	ldr	r2, [pc, #180]	@ (8001574 <HAL_RCC_OscConfig+0x780>)
 80014be:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80014c2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80014c4:	4b2b      	ldr	r3, [pc, #172]	@ (8001574 <HAL_RCC_OscConfig+0x780>)
 80014c6:	68db      	ldr	r3, [r3, #12]
 80014c8:	4a2a      	ldr	r2, [pc, #168]	@ (8001574 <HAL_RCC_OscConfig+0x780>)
 80014ca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80014ce:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80014d0:	f7ff f948 	bl	8000764 <HAL_GetTick>
 80014d4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80014d6:	e008      	b.n	80014ea <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014d8:	f7ff f944 	bl	8000764 <HAL_GetTick>
 80014dc:	4602      	mov	r2, r0
 80014de:	693b      	ldr	r3, [r7, #16]
 80014e0:	1ad3      	subs	r3, r2, r3
 80014e2:	2b02      	cmp	r3, #2
 80014e4:	d901      	bls.n	80014ea <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80014e6:	2303      	movs	r3, #3
 80014e8:	e058      	b.n	800159c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80014ea:	4b22      	ldr	r3, [pc, #136]	@ (8001574 <HAL_RCC_OscConfig+0x780>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d0f0      	beq.n	80014d8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80014f6:	e050      	b.n	800159a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80014f8:	2301      	movs	r3, #1
 80014fa:	e04f      	b.n	800159c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80014fc:	4b1d      	ldr	r3, [pc, #116]	@ (8001574 <HAL_RCC_OscConfig+0x780>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001504:	2b00      	cmp	r3, #0
 8001506:	d148      	bne.n	800159a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001508:	4b1a      	ldr	r3, [pc, #104]	@ (8001574 <HAL_RCC_OscConfig+0x780>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a19      	ldr	r2, [pc, #100]	@ (8001574 <HAL_RCC_OscConfig+0x780>)
 800150e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001512:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001514:	4b17      	ldr	r3, [pc, #92]	@ (8001574 <HAL_RCC_OscConfig+0x780>)
 8001516:	68db      	ldr	r3, [r3, #12]
 8001518:	4a16      	ldr	r2, [pc, #88]	@ (8001574 <HAL_RCC_OscConfig+0x780>)
 800151a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800151e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001520:	f7ff f920 	bl	8000764 <HAL_GetTick>
 8001524:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001526:	e008      	b.n	800153a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001528:	f7ff f91c 	bl	8000764 <HAL_GetTick>
 800152c:	4602      	mov	r2, r0
 800152e:	693b      	ldr	r3, [r7, #16]
 8001530:	1ad3      	subs	r3, r2, r3
 8001532:	2b02      	cmp	r3, #2
 8001534:	d901      	bls.n	800153a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001536:	2303      	movs	r3, #3
 8001538:	e030      	b.n	800159c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800153a:	4b0e      	ldr	r3, [pc, #56]	@ (8001574 <HAL_RCC_OscConfig+0x780>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001542:	2b00      	cmp	r3, #0
 8001544:	d0f0      	beq.n	8001528 <HAL_RCC_OscConfig+0x734>
 8001546:	e028      	b.n	800159a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001548:	69bb      	ldr	r3, [r7, #24]
 800154a:	2b0c      	cmp	r3, #12
 800154c:	d023      	beq.n	8001596 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800154e:	4b09      	ldr	r3, [pc, #36]	@ (8001574 <HAL_RCC_OscConfig+0x780>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a08      	ldr	r2, [pc, #32]	@ (8001574 <HAL_RCC_OscConfig+0x780>)
 8001554:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001558:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800155a:	f7ff f903 	bl	8000764 <HAL_GetTick>
 800155e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001560:	e00c      	b.n	800157c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001562:	f7ff f8ff 	bl	8000764 <HAL_GetTick>
 8001566:	4602      	mov	r2, r0
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	1ad3      	subs	r3, r2, r3
 800156c:	2b02      	cmp	r3, #2
 800156e:	d905      	bls.n	800157c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001570:	2303      	movs	r3, #3
 8001572:	e013      	b.n	800159c <HAL_RCC_OscConfig+0x7a8>
 8001574:	40021000 	.word	0x40021000
 8001578:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800157c:	4b09      	ldr	r3, [pc, #36]	@ (80015a4 <HAL_RCC_OscConfig+0x7b0>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001584:	2b00      	cmp	r3, #0
 8001586:	d1ec      	bne.n	8001562 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001588:	4b06      	ldr	r3, [pc, #24]	@ (80015a4 <HAL_RCC_OscConfig+0x7b0>)
 800158a:	68da      	ldr	r2, [r3, #12]
 800158c:	4905      	ldr	r1, [pc, #20]	@ (80015a4 <HAL_RCC_OscConfig+0x7b0>)
 800158e:	4b06      	ldr	r3, [pc, #24]	@ (80015a8 <HAL_RCC_OscConfig+0x7b4>)
 8001590:	4013      	ands	r3, r2
 8001592:	60cb      	str	r3, [r1, #12]
 8001594:	e001      	b.n	800159a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001596:	2301      	movs	r3, #1
 8001598:	e000      	b.n	800159c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800159a:	2300      	movs	r3, #0
}
 800159c:	4618      	mov	r0, r3
 800159e:	3720      	adds	r7, #32
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	40021000 	.word	0x40021000
 80015a8:	feeefffc 	.word	0xfeeefffc

080015ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b084      	sub	sp, #16
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
 80015b4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d101      	bne.n	80015c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015bc:	2301      	movs	r3, #1
 80015be:	e0e7      	b.n	8001790 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80015c0:	4b75      	ldr	r3, [pc, #468]	@ (8001798 <HAL_RCC_ClockConfig+0x1ec>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f003 0307 	and.w	r3, r3, #7
 80015c8:	683a      	ldr	r2, [r7, #0]
 80015ca:	429a      	cmp	r2, r3
 80015cc:	d910      	bls.n	80015f0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015ce:	4b72      	ldr	r3, [pc, #456]	@ (8001798 <HAL_RCC_ClockConfig+0x1ec>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f023 0207 	bic.w	r2, r3, #7
 80015d6:	4970      	ldr	r1, [pc, #448]	@ (8001798 <HAL_RCC_ClockConfig+0x1ec>)
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	4313      	orrs	r3, r2
 80015dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015de:	4b6e      	ldr	r3, [pc, #440]	@ (8001798 <HAL_RCC_ClockConfig+0x1ec>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f003 0307 	and.w	r3, r3, #7
 80015e6:	683a      	ldr	r2, [r7, #0]
 80015e8:	429a      	cmp	r2, r3
 80015ea:	d001      	beq.n	80015f0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80015ec:	2301      	movs	r3, #1
 80015ee:	e0cf      	b.n	8001790 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f003 0302 	and.w	r3, r3, #2
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d010      	beq.n	800161e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	689a      	ldr	r2, [r3, #8]
 8001600:	4b66      	ldr	r3, [pc, #408]	@ (800179c <HAL_RCC_ClockConfig+0x1f0>)
 8001602:	689b      	ldr	r3, [r3, #8]
 8001604:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001608:	429a      	cmp	r2, r3
 800160a:	d908      	bls.n	800161e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800160c:	4b63      	ldr	r3, [pc, #396]	@ (800179c <HAL_RCC_ClockConfig+0x1f0>)
 800160e:	689b      	ldr	r3, [r3, #8]
 8001610:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	689b      	ldr	r3, [r3, #8]
 8001618:	4960      	ldr	r1, [pc, #384]	@ (800179c <HAL_RCC_ClockConfig+0x1f0>)
 800161a:	4313      	orrs	r3, r2
 800161c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f003 0301 	and.w	r3, r3, #1
 8001626:	2b00      	cmp	r3, #0
 8001628:	d04c      	beq.n	80016c4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	2b03      	cmp	r3, #3
 8001630:	d107      	bne.n	8001642 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001632:	4b5a      	ldr	r3, [pc, #360]	@ (800179c <HAL_RCC_ClockConfig+0x1f0>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800163a:	2b00      	cmp	r3, #0
 800163c:	d121      	bne.n	8001682 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800163e:	2301      	movs	r3, #1
 8001640:	e0a6      	b.n	8001790 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	2b02      	cmp	r3, #2
 8001648:	d107      	bne.n	800165a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800164a:	4b54      	ldr	r3, [pc, #336]	@ (800179c <HAL_RCC_ClockConfig+0x1f0>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001652:	2b00      	cmp	r3, #0
 8001654:	d115      	bne.n	8001682 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001656:	2301      	movs	r3, #1
 8001658:	e09a      	b.n	8001790 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d107      	bne.n	8001672 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001662:	4b4e      	ldr	r3, [pc, #312]	@ (800179c <HAL_RCC_ClockConfig+0x1f0>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f003 0302 	and.w	r3, r3, #2
 800166a:	2b00      	cmp	r3, #0
 800166c:	d109      	bne.n	8001682 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800166e:	2301      	movs	r3, #1
 8001670:	e08e      	b.n	8001790 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001672:	4b4a      	ldr	r3, [pc, #296]	@ (800179c <HAL_RCC_ClockConfig+0x1f0>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800167a:	2b00      	cmp	r3, #0
 800167c:	d101      	bne.n	8001682 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800167e:	2301      	movs	r3, #1
 8001680:	e086      	b.n	8001790 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001682:	4b46      	ldr	r3, [pc, #280]	@ (800179c <HAL_RCC_ClockConfig+0x1f0>)
 8001684:	689b      	ldr	r3, [r3, #8]
 8001686:	f023 0203 	bic.w	r2, r3, #3
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	4943      	ldr	r1, [pc, #268]	@ (800179c <HAL_RCC_ClockConfig+0x1f0>)
 8001690:	4313      	orrs	r3, r2
 8001692:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001694:	f7ff f866 	bl	8000764 <HAL_GetTick>
 8001698:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800169a:	e00a      	b.n	80016b2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800169c:	f7ff f862 	bl	8000764 <HAL_GetTick>
 80016a0:	4602      	mov	r2, r0
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	1ad3      	subs	r3, r2, r3
 80016a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d901      	bls.n	80016b2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80016ae:	2303      	movs	r3, #3
 80016b0:	e06e      	b.n	8001790 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016b2:	4b3a      	ldr	r3, [pc, #232]	@ (800179c <HAL_RCC_ClockConfig+0x1f0>)
 80016b4:	689b      	ldr	r3, [r3, #8]
 80016b6:	f003 020c 	and.w	r2, r3, #12
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	009b      	lsls	r3, r3, #2
 80016c0:	429a      	cmp	r2, r3
 80016c2:	d1eb      	bne.n	800169c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f003 0302 	and.w	r3, r3, #2
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d010      	beq.n	80016f2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	689a      	ldr	r2, [r3, #8]
 80016d4:	4b31      	ldr	r3, [pc, #196]	@ (800179c <HAL_RCC_ClockConfig+0x1f0>)
 80016d6:	689b      	ldr	r3, [r3, #8]
 80016d8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80016dc:	429a      	cmp	r2, r3
 80016de:	d208      	bcs.n	80016f2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016e0:	4b2e      	ldr	r3, [pc, #184]	@ (800179c <HAL_RCC_ClockConfig+0x1f0>)
 80016e2:	689b      	ldr	r3, [r3, #8]
 80016e4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	689b      	ldr	r3, [r3, #8]
 80016ec:	492b      	ldr	r1, [pc, #172]	@ (800179c <HAL_RCC_ClockConfig+0x1f0>)
 80016ee:	4313      	orrs	r3, r2
 80016f0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80016f2:	4b29      	ldr	r3, [pc, #164]	@ (8001798 <HAL_RCC_ClockConfig+0x1ec>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f003 0307 	and.w	r3, r3, #7
 80016fa:	683a      	ldr	r2, [r7, #0]
 80016fc:	429a      	cmp	r2, r3
 80016fe:	d210      	bcs.n	8001722 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001700:	4b25      	ldr	r3, [pc, #148]	@ (8001798 <HAL_RCC_ClockConfig+0x1ec>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f023 0207 	bic.w	r2, r3, #7
 8001708:	4923      	ldr	r1, [pc, #140]	@ (8001798 <HAL_RCC_ClockConfig+0x1ec>)
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	4313      	orrs	r3, r2
 800170e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001710:	4b21      	ldr	r3, [pc, #132]	@ (8001798 <HAL_RCC_ClockConfig+0x1ec>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f003 0307 	and.w	r3, r3, #7
 8001718:	683a      	ldr	r2, [r7, #0]
 800171a:	429a      	cmp	r2, r3
 800171c:	d001      	beq.n	8001722 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800171e:	2301      	movs	r3, #1
 8001720:	e036      	b.n	8001790 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f003 0304 	and.w	r3, r3, #4
 800172a:	2b00      	cmp	r3, #0
 800172c:	d008      	beq.n	8001740 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800172e:	4b1b      	ldr	r3, [pc, #108]	@ (800179c <HAL_RCC_ClockConfig+0x1f0>)
 8001730:	689b      	ldr	r3, [r3, #8]
 8001732:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	68db      	ldr	r3, [r3, #12]
 800173a:	4918      	ldr	r1, [pc, #96]	@ (800179c <HAL_RCC_ClockConfig+0x1f0>)
 800173c:	4313      	orrs	r3, r2
 800173e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f003 0308 	and.w	r3, r3, #8
 8001748:	2b00      	cmp	r3, #0
 800174a:	d009      	beq.n	8001760 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800174c:	4b13      	ldr	r3, [pc, #76]	@ (800179c <HAL_RCC_ClockConfig+0x1f0>)
 800174e:	689b      	ldr	r3, [r3, #8]
 8001750:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	691b      	ldr	r3, [r3, #16]
 8001758:	00db      	lsls	r3, r3, #3
 800175a:	4910      	ldr	r1, [pc, #64]	@ (800179c <HAL_RCC_ClockConfig+0x1f0>)
 800175c:	4313      	orrs	r3, r2
 800175e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001760:	f000 f858 	bl	8001814 <HAL_RCC_GetSysClockFreq>
 8001764:	4602      	mov	r2, r0
 8001766:	4b0d      	ldr	r3, [pc, #52]	@ (800179c <HAL_RCC_ClockConfig+0x1f0>)
 8001768:	689b      	ldr	r3, [r3, #8]
 800176a:	091b      	lsrs	r3, r3, #4
 800176c:	f003 030f 	and.w	r3, r3, #15
 8001770:	490b      	ldr	r1, [pc, #44]	@ (80017a0 <HAL_RCC_ClockConfig+0x1f4>)
 8001772:	5ccb      	ldrb	r3, [r1, r3]
 8001774:	f003 031f 	and.w	r3, r3, #31
 8001778:	fa22 f303 	lsr.w	r3, r2, r3
 800177c:	4a09      	ldr	r2, [pc, #36]	@ (80017a4 <HAL_RCC_ClockConfig+0x1f8>)
 800177e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001780:	4b09      	ldr	r3, [pc, #36]	@ (80017a8 <HAL_RCC_ClockConfig+0x1fc>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4618      	mov	r0, r3
 8001786:	f7fe ff9d 	bl	80006c4 <HAL_InitTick>
 800178a:	4603      	mov	r3, r0
 800178c:	72fb      	strb	r3, [r7, #11]

  return status;
 800178e:	7afb      	ldrb	r3, [r7, #11]
}
 8001790:	4618      	mov	r0, r3
 8001792:	3710      	adds	r7, #16
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	40022000 	.word	0x40022000
 800179c:	40021000 	.word	0x40021000
 80017a0:	08002918 	.word	0x08002918
 80017a4:	20000000 	.word	0x20000000
 80017a8:	20000004 	.word	0x20000004

080017ac <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16  division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig( uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b08a      	sub	sp, #40	@ 0x28
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	60f8      	str	r0, [r7, #12]
 80017b4:	60b9      	str	r1, [r7, #8]
 80017b6:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning if no assert_param check */
  UNUSED(RCC_MCOx);

  /* MCO Clock Enable */
  __MCO1_CLK_ENABLE();
 80017b8:	4b15      	ldr	r3, [pc, #84]	@ (8001810 <HAL_RCC_MCOConfig+0x64>)
 80017ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017bc:	4a14      	ldr	r2, [pc, #80]	@ (8001810 <HAL_RCC_MCOConfig+0x64>)
 80017be:	f043 0301 	orr.w	r3, r3, #1
 80017c2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017c4:	4b12      	ldr	r3, [pc, #72]	@ (8001810 <HAL_RCC_MCOConfig+0x64>)
 80017c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017c8:	f003 0301 	and.w	r3, r3, #1
 80017cc:	613b      	str	r3, [r7, #16]
 80017ce:	693b      	ldr	r3, [r7, #16]

  /* Configure the MCO1 pin in alternate function mode */
  GPIO_InitStruct.Pin = MCO1_PIN;
 80017d0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80017d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017d6:	2302      	movs	r3, #2
 80017d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017da:	2302      	movs	r3, #2
 80017dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017de:	2300      	movs	r3, #0
 80017e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80017e2:	2300      	movs	r3, #0
 80017e4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 80017e6:	f107 0314 	add.w	r3, r7, #20
 80017ea:	4619      	mov	r1, r3
 80017ec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80017f0:	f7ff f8f2 	bl	80009d8 <HAL_GPIO_Init>

  /* Mask MCOSEL[] and MCOPRE[] bits then set MCO1 clock source and prescaler */
  MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCOSEL | RCC_CFGR_MCOPRE), (RCC_MCOSource | RCC_MCODiv ));
 80017f4:	4b06      	ldr	r3, [pc, #24]	@ (8001810 <HAL_RCC_MCOConfig+0x64>)
 80017f6:	689b      	ldr	r3, [r3, #8]
 80017f8:	f023 42ee 	bic.w	r2, r3, #1996488704	@ 0x77000000
 80017fc:	68b9      	ldr	r1, [r7, #8]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	430b      	orrs	r3, r1
 8001802:	4903      	ldr	r1, [pc, #12]	@ (8001810 <HAL_RCC_MCOConfig+0x64>)
 8001804:	4313      	orrs	r3, r2
 8001806:	608b      	str	r3, [r1, #8]
}
 8001808:	bf00      	nop
 800180a:	3728      	adds	r7, #40	@ 0x28
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}
 8001810:	40021000 	.word	0x40021000

08001814 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001814:	b480      	push	{r7}
 8001816:	b089      	sub	sp, #36	@ 0x24
 8001818:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800181a:	2300      	movs	r3, #0
 800181c:	61fb      	str	r3, [r7, #28]
 800181e:	2300      	movs	r3, #0
 8001820:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001822:	4b3e      	ldr	r3, [pc, #248]	@ (800191c <HAL_RCC_GetSysClockFreq+0x108>)
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	f003 030c 	and.w	r3, r3, #12
 800182a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800182c:	4b3b      	ldr	r3, [pc, #236]	@ (800191c <HAL_RCC_GetSysClockFreq+0x108>)
 800182e:	68db      	ldr	r3, [r3, #12]
 8001830:	f003 0303 	and.w	r3, r3, #3
 8001834:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d005      	beq.n	8001848 <HAL_RCC_GetSysClockFreq+0x34>
 800183c:	693b      	ldr	r3, [r7, #16]
 800183e:	2b0c      	cmp	r3, #12
 8001840:	d121      	bne.n	8001886 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	2b01      	cmp	r3, #1
 8001846:	d11e      	bne.n	8001886 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001848:	4b34      	ldr	r3, [pc, #208]	@ (800191c <HAL_RCC_GetSysClockFreq+0x108>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f003 0308 	and.w	r3, r3, #8
 8001850:	2b00      	cmp	r3, #0
 8001852:	d107      	bne.n	8001864 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001854:	4b31      	ldr	r3, [pc, #196]	@ (800191c <HAL_RCC_GetSysClockFreq+0x108>)
 8001856:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800185a:	0a1b      	lsrs	r3, r3, #8
 800185c:	f003 030f 	and.w	r3, r3, #15
 8001860:	61fb      	str	r3, [r7, #28]
 8001862:	e005      	b.n	8001870 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001864:	4b2d      	ldr	r3, [pc, #180]	@ (800191c <HAL_RCC_GetSysClockFreq+0x108>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	091b      	lsrs	r3, r3, #4
 800186a:	f003 030f 	and.w	r3, r3, #15
 800186e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001870:	4a2b      	ldr	r2, [pc, #172]	@ (8001920 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001872:	69fb      	ldr	r3, [r7, #28]
 8001874:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001878:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800187a:	693b      	ldr	r3, [r7, #16]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d10d      	bne.n	800189c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001880:	69fb      	ldr	r3, [r7, #28]
 8001882:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001884:	e00a      	b.n	800189c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	2b04      	cmp	r3, #4
 800188a:	d102      	bne.n	8001892 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800188c:	4b25      	ldr	r3, [pc, #148]	@ (8001924 <HAL_RCC_GetSysClockFreq+0x110>)
 800188e:	61bb      	str	r3, [r7, #24]
 8001890:	e004      	b.n	800189c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	2b08      	cmp	r3, #8
 8001896:	d101      	bne.n	800189c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001898:	4b23      	ldr	r3, [pc, #140]	@ (8001928 <HAL_RCC_GetSysClockFreq+0x114>)
 800189a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800189c:	693b      	ldr	r3, [r7, #16]
 800189e:	2b0c      	cmp	r3, #12
 80018a0:	d134      	bne.n	800190c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80018a2:	4b1e      	ldr	r3, [pc, #120]	@ (800191c <HAL_RCC_GetSysClockFreq+0x108>)
 80018a4:	68db      	ldr	r3, [r3, #12]
 80018a6:	f003 0303 	and.w	r3, r3, #3
 80018aa:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80018ac:	68bb      	ldr	r3, [r7, #8]
 80018ae:	2b02      	cmp	r3, #2
 80018b0:	d003      	beq.n	80018ba <HAL_RCC_GetSysClockFreq+0xa6>
 80018b2:	68bb      	ldr	r3, [r7, #8]
 80018b4:	2b03      	cmp	r3, #3
 80018b6:	d003      	beq.n	80018c0 <HAL_RCC_GetSysClockFreq+0xac>
 80018b8:	e005      	b.n	80018c6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80018ba:	4b1a      	ldr	r3, [pc, #104]	@ (8001924 <HAL_RCC_GetSysClockFreq+0x110>)
 80018bc:	617b      	str	r3, [r7, #20]
      break;
 80018be:	e005      	b.n	80018cc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80018c0:	4b19      	ldr	r3, [pc, #100]	@ (8001928 <HAL_RCC_GetSysClockFreq+0x114>)
 80018c2:	617b      	str	r3, [r7, #20]
      break;
 80018c4:	e002      	b.n	80018cc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80018c6:	69fb      	ldr	r3, [r7, #28]
 80018c8:	617b      	str	r3, [r7, #20]
      break;
 80018ca:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80018cc:	4b13      	ldr	r3, [pc, #76]	@ (800191c <HAL_RCC_GetSysClockFreq+0x108>)
 80018ce:	68db      	ldr	r3, [r3, #12]
 80018d0:	091b      	lsrs	r3, r3, #4
 80018d2:	f003 0307 	and.w	r3, r3, #7
 80018d6:	3301      	adds	r3, #1
 80018d8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80018da:	4b10      	ldr	r3, [pc, #64]	@ (800191c <HAL_RCC_GetSysClockFreq+0x108>)
 80018dc:	68db      	ldr	r3, [r3, #12]
 80018de:	0a1b      	lsrs	r3, r3, #8
 80018e0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80018e4:	697a      	ldr	r2, [r7, #20]
 80018e6:	fb03 f202 	mul.w	r2, r3, r2
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80018f0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80018f2:	4b0a      	ldr	r3, [pc, #40]	@ (800191c <HAL_RCC_GetSysClockFreq+0x108>)
 80018f4:	68db      	ldr	r3, [r3, #12]
 80018f6:	0e5b      	lsrs	r3, r3, #25
 80018f8:	f003 0303 	and.w	r3, r3, #3
 80018fc:	3301      	adds	r3, #1
 80018fe:	005b      	lsls	r3, r3, #1
 8001900:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001902:	697a      	ldr	r2, [r7, #20]
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	fbb2 f3f3 	udiv	r3, r2, r3
 800190a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800190c:	69bb      	ldr	r3, [r7, #24]
}
 800190e:	4618      	mov	r0, r3
 8001910:	3724      	adds	r7, #36	@ 0x24
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr
 800191a:	bf00      	nop
 800191c:	40021000 	.word	0x40021000
 8001920:	08002928 	.word	0x08002928
 8001924:	00f42400 	.word	0x00f42400
 8001928:	007a1200 	.word	0x007a1200

0800192c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001930:	4b03      	ldr	r3, [pc, #12]	@ (8001940 <HAL_RCC_GetHCLKFreq+0x14>)
 8001932:	681b      	ldr	r3, [r3, #0]
}
 8001934:	4618      	mov	r0, r3
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr
 800193e:	bf00      	nop
 8001940:	20000000 	.word	0x20000000

08001944 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b086      	sub	sp, #24
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800194c:	2300      	movs	r3, #0
 800194e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001950:	4b2a      	ldr	r3, [pc, #168]	@ (80019fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001952:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001954:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001958:	2b00      	cmp	r3, #0
 800195a:	d003      	beq.n	8001964 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800195c:	f7ff f9e6 	bl	8000d2c <HAL_PWREx_GetVoltageRange>
 8001960:	6178      	str	r0, [r7, #20]
 8001962:	e014      	b.n	800198e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001964:	4b25      	ldr	r3, [pc, #148]	@ (80019fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001966:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001968:	4a24      	ldr	r2, [pc, #144]	@ (80019fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800196a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800196e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001970:	4b22      	ldr	r3, [pc, #136]	@ (80019fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001972:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001974:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001978:	60fb      	str	r3, [r7, #12]
 800197a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800197c:	f7ff f9d6 	bl	8000d2c <HAL_PWREx_GetVoltageRange>
 8001980:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001982:	4b1e      	ldr	r3, [pc, #120]	@ (80019fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001984:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001986:	4a1d      	ldr	r2, [pc, #116]	@ (80019fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001988:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800198c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001994:	d10b      	bne.n	80019ae <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2b80      	cmp	r3, #128	@ 0x80
 800199a:	d919      	bls.n	80019d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2ba0      	cmp	r3, #160	@ 0xa0
 80019a0:	d902      	bls.n	80019a8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80019a2:	2302      	movs	r3, #2
 80019a4:	613b      	str	r3, [r7, #16]
 80019a6:	e013      	b.n	80019d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80019a8:	2301      	movs	r3, #1
 80019aa:	613b      	str	r3, [r7, #16]
 80019ac:	e010      	b.n	80019d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2b80      	cmp	r3, #128	@ 0x80
 80019b2:	d902      	bls.n	80019ba <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80019b4:	2303      	movs	r3, #3
 80019b6:	613b      	str	r3, [r7, #16]
 80019b8:	e00a      	b.n	80019d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2b80      	cmp	r3, #128	@ 0x80
 80019be:	d102      	bne.n	80019c6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80019c0:	2302      	movs	r3, #2
 80019c2:	613b      	str	r3, [r7, #16]
 80019c4:	e004      	b.n	80019d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2b70      	cmp	r3, #112	@ 0x70
 80019ca:	d101      	bne.n	80019d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80019cc:	2301      	movs	r3, #1
 80019ce:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80019d0:	4b0b      	ldr	r3, [pc, #44]	@ (8001a00 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f023 0207 	bic.w	r2, r3, #7
 80019d8:	4909      	ldr	r1, [pc, #36]	@ (8001a00 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	4313      	orrs	r3, r2
 80019de:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80019e0:	4b07      	ldr	r3, [pc, #28]	@ (8001a00 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f003 0307 	and.w	r3, r3, #7
 80019e8:	693a      	ldr	r2, [r7, #16]
 80019ea:	429a      	cmp	r2, r3
 80019ec:	d001      	beq.n	80019f2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	e000      	b.n	80019f4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80019f2:	2300      	movs	r3, #0
}
 80019f4:	4618      	mov	r0, r3
 80019f6:	3718      	adds	r7, #24
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	40021000 	.word	0x40021000
 8001a00:	40022000 	.word	0x40022000

08001a04 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b082      	sub	sp, #8
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d101      	bne.n	8001a16 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	e049      	b.n	8001aaa <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001a1c:	b2db      	uxtb	r3, r3
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d106      	bne.n	8001a30 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2200      	movs	r2, #0
 8001a26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8001a2a:	6878      	ldr	r0, [r7, #4]
 8001a2c:	f7fe fca4 	bl	8000378 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2202      	movs	r2, #2
 8001a34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	3304      	adds	r3, #4
 8001a40:	4619      	mov	r1, r3
 8001a42:	4610      	mov	r0, r2
 8001a44:	f000 fb78 	bl	8002138 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2201      	movs	r2, #1
 8001a54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2201      	movs	r2, #1
 8001a64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2201      	movs	r2, #1
 8001a74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2201      	movs	r2, #1
 8001a84:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2201      	movs	r2, #1
 8001a94:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001aa8:	2300      	movs	r3, #0
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	3708      	adds	r7, #8
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
	...

08001ab4 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b084      	sub	sp, #16
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
 8001abc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d109      	bne.n	8001adc <HAL_TIM_OC_Start_IT+0x28>
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001ace:	b2db      	uxtb	r3, r3
 8001ad0:	2b01      	cmp	r3, #1
 8001ad2:	bf14      	ite	ne
 8001ad4:	2301      	movne	r3, #1
 8001ad6:	2300      	moveq	r3, #0
 8001ad8:	b2db      	uxtb	r3, r3
 8001ada:	e03c      	b.n	8001b56 <HAL_TIM_OC_Start_IT+0xa2>
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	2b04      	cmp	r3, #4
 8001ae0:	d109      	bne.n	8001af6 <HAL_TIM_OC_Start_IT+0x42>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8001ae8:	b2db      	uxtb	r3, r3
 8001aea:	2b01      	cmp	r3, #1
 8001aec:	bf14      	ite	ne
 8001aee:	2301      	movne	r3, #1
 8001af0:	2300      	moveq	r3, #0
 8001af2:	b2db      	uxtb	r3, r3
 8001af4:	e02f      	b.n	8001b56 <HAL_TIM_OC_Start_IT+0xa2>
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	2b08      	cmp	r3, #8
 8001afa:	d109      	bne.n	8001b10 <HAL_TIM_OC_Start_IT+0x5c>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001b02:	b2db      	uxtb	r3, r3
 8001b04:	2b01      	cmp	r3, #1
 8001b06:	bf14      	ite	ne
 8001b08:	2301      	movne	r3, #1
 8001b0a:	2300      	moveq	r3, #0
 8001b0c:	b2db      	uxtb	r3, r3
 8001b0e:	e022      	b.n	8001b56 <HAL_TIM_OC_Start_IT+0xa2>
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	2b0c      	cmp	r3, #12
 8001b14:	d109      	bne.n	8001b2a <HAL_TIM_OC_Start_IT+0x76>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001b1c:	b2db      	uxtb	r3, r3
 8001b1e:	2b01      	cmp	r3, #1
 8001b20:	bf14      	ite	ne
 8001b22:	2301      	movne	r3, #1
 8001b24:	2300      	moveq	r3, #0
 8001b26:	b2db      	uxtb	r3, r3
 8001b28:	e015      	b.n	8001b56 <HAL_TIM_OC_Start_IT+0xa2>
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	2b10      	cmp	r3, #16
 8001b2e:	d109      	bne.n	8001b44 <HAL_TIM_OC_Start_IT+0x90>
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001b36:	b2db      	uxtb	r3, r3
 8001b38:	2b01      	cmp	r3, #1
 8001b3a:	bf14      	ite	ne
 8001b3c:	2301      	movne	r3, #1
 8001b3e:	2300      	moveq	r3, #0
 8001b40:	b2db      	uxtb	r3, r3
 8001b42:	e008      	b.n	8001b56 <HAL_TIM_OC_Start_IT+0xa2>
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8001b4a:	b2db      	uxtb	r3, r3
 8001b4c:	2b01      	cmp	r3, #1
 8001b4e:	bf14      	ite	ne
 8001b50:	2301      	movne	r3, #1
 8001b52:	2300      	moveq	r3, #0
 8001b54:	b2db      	uxtb	r3, r3
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d001      	beq.n	8001b5e <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e0e7      	b.n	8001d2e <HAL_TIM_OC_Start_IT+0x27a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d104      	bne.n	8001b6e <HAL_TIM_OC_Start_IT+0xba>
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2202      	movs	r2, #2
 8001b68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001b6c:	e023      	b.n	8001bb6 <HAL_TIM_OC_Start_IT+0x102>
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	2b04      	cmp	r3, #4
 8001b72:	d104      	bne.n	8001b7e <HAL_TIM_OC_Start_IT+0xca>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2202      	movs	r2, #2
 8001b78:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001b7c:	e01b      	b.n	8001bb6 <HAL_TIM_OC_Start_IT+0x102>
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	2b08      	cmp	r3, #8
 8001b82:	d104      	bne.n	8001b8e <HAL_TIM_OC_Start_IT+0xda>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2202      	movs	r2, #2
 8001b88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001b8c:	e013      	b.n	8001bb6 <HAL_TIM_OC_Start_IT+0x102>
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	2b0c      	cmp	r3, #12
 8001b92:	d104      	bne.n	8001b9e <HAL_TIM_OC_Start_IT+0xea>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2202      	movs	r2, #2
 8001b98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8001b9c:	e00b      	b.n	8001bb6 <HAL_TIM_OC_Start_IT+0x102>
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	2b10      	cmp	r3, #16
 8001ba2:	d104      	bne.n	8001bae <HAL_TIM_OC_Start_IT+0xfa>
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2202      	movs	r2, #2
 8001ba8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001bac:	e003      	b.n	8001bb6 <HAL_TIM_OC_Start_IT+0x102>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2202      	movs	r2, #2
 8001bb2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  switch (Channel)
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	2b0c      	cmp	r3, #12
 8001bba:	d841      	bhi.n	8001c40 <HAL_TIM_OC_Start_IT+0x18c>
 8001bbc:	a201      	add	r2, pc, #4	@ (adr r2, 8001bc4 <HAL_TIM_OC_Start_IT+0x110>)
 8001bbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bc2:	bf00      	nop
 8001bc4:	08001bf9 	.word	0x08001bf9
 8001bc8:	08001c41 	.word	0x08001c41
 8001bcc:	08001c41 	.word	0x08001c41
 8001bd0:	08001c41 	.word	0x08001c41
 8001bd4:	08001c0b 	.word	0x08001c0b
 8001bd8:	08001c41 	.word	0x08001c41
 8001bdc:	08001c41 	.word	0x08001c41
 8001be0:	08001c41 	.word	0x08001c41
 8001be4:	08001c1d 	.word	0x08001c1d
 8001be8:	08001c41 	.word	0x08001c41
 8001bec:	08001c41 	.word	0x08001c41
 8001bf0:	08001c41 	.word	0x08001c41
 8001bf4:	08001c2f 	.word	0x08001c2f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	68da      	ldr	r2, [r3, #12]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f042 0202 	orr.w	r2, r2, #2
 8001c06:	60da      	str	r2, [r3, #12]
      break;
 8001c08:	e01d      	b.n	8001c46 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	68da      	ldr	r2, [r3, #12]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f042 0204 	orr.w	r2, r2, #4
 8001c18:	60da      	str	r2, [r3, #12]
      break;
 8001c1a:	e014      	b.n	8001c46 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	68da      	ldr	r2, [r3, #12]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f042 0208 	orr.w	r2, r2, #8
 8001c2a:	60da      	str	r2, [r3, #12]
      break;
 8001c2c:	e00b      	b.n	8001c46 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	68da      	ldr	r2, [r3, #12]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f042 0210 	orr.w	r2, r2, #16
 8001c3c:	60da      	str	r2, [r3, #12]
      break;
 8001c3e:	e002      	b.n	8001c46 <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8001c40:	2301      	movs	r3, #1
 8001c42:	73fb      	strb	r3, [r7, #15]
      break;
 8001c44:	bf00      	nop
  }

  if (status == HAL_OK)
 8001c46:	7bfb      	ldrb	r3, [r7, #15]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d16f      	bne.n	8001d2c <HAL_TIM_OC_Start_IT+0x278>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	2201      	movs	r2, #1
 8001c52:	6839      	ldr	r1, [r7, #0]
 8001c54:	4618      	mov	r0, r3
 8001c56:	f000 fdeb 	bl	8002830 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a36      	ldr	r2, [pc, #216]	@ (8001d38 <HAL_TIM_OC_Start_IT+0x284>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d013      	beq.n	8001c8c <HAL_TIM_OC_Start_IT+0x1d8>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a34      	ldr	r2, [pc, #208]	@ (8001d3c <HAL_TIM_OC_Start_IT+0x288>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d00e      	beq.n	8001c8c <HAL_TIM_OC_Start_IT+0x1d8>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a33      	ldr	r2, [pc, #204]	@ (8001d40 <HAL_TIM_OC_Start_IT+0x28c>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d009      	beq.n	8001c8c <HAL_TIM_OC_Start_IT+0x1d8>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a31      	ldr	r2, [pc, #196]	@ (8001d44 <HAL_TIM_OC_Start_IT+0x290>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d004      	beq.n	8001c8c <HAL_TIM_OC_Start_IT+0x1d8>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a30      	ldr	r2, [pc, #192]	@ (8001d48 <HAL_TIM_OC_Start_IT+0x294>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d101      	bne.n	8001c90 <HAL_TIM_OC_Start_IT+0x1dc>
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	e000      	b.n	8001c92 <HAL_TIM_OC_Start_IT+0x1de>
 8001c90:	2300      	movs	r3, #0
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d007      	beq.n	8001ca6 <HAL_TIM_OC_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001ca4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4a23      	ldr	r2, [pc, #140]	@ (8001d38 <HAL_TIM_OC_Start_IT+0x284>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d01d      	beq.n	8001cec <HAL_TIM_OC_Start_IT+0x238>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001cb8:	d018      	beq.n	8001cec <HAL_TIM_OC_Start_IT+0x238>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4a23      	ldr	r2, [pc, #140]	@ (8001d4c <HAL_TIM_OC_Start_IT+0x298>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d013      	beq.n	8001cec <HAL_TIM_OC_Start_IT+0x238>
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a21      	ldr	r2, [pc, #132]	@ (8001d50 <HAL_TIM_OC_Start_IT+0x29c>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d00e      	beq.n	8001cec <HAL_TIM_OC_Start_IT+0x238>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4a20      	ldr	r2, [pc, #128]	@ (8001d54 <HAL_TIM_OC_Start_IT+0x2a0>)
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d009      	beq.n	8001cec <HAL_TIM_OC_Start_IT+0x238>
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a17      	ldr	r2, [pc, #92]	@ (8001d3c <HAL_TIM_OC_Start_IT+0x288>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d004      	beq.n	8001cec <HAL_TIM_OC_Start_IT+0x238>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4a16      	ldr	r2, [pc, #88]	@ (8001d40 <HAL_TIM_OC_Start_IT+0x28c>)
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d115      	bne.n	8001d18 <HAL_TIM_OC_Start_IT+0x264>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	689a      	ldr	r2, [r3, #8]
 8001cf2:	4b19      	ldr	r3, [pc, #100]	@ (8001d58 <HAL_TIM_OC_Start_IT+0x2a4>)
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	2b06      	cmp	r3, #6
 8001cfc:	d015      	beq.n	8001d2a <HAL_TIM_OC_Start_IT+0x276>
 8001cfe:	68bb      	ldr	r3, [r7, #8]
 8001d00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d04:	d011      	beq.n	8001d2a <HAL_TIM_OC_Start_IT+0x276>
      {
        __HAL_TIM_ENABLE(htim);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f042 0201 	orr.w	r2, r2, #1
 8001d14:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d16:	e008      	b.n	8001d2a <HAL_TIM_OC_Start_IT+0x276>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f042 0201 	orr.w	r2, r2, #1
 8001d26:	601a      	str	r2, [r3, #0]
 8001d28:	e000      	b.n	8001d2c <HAL_TIM_OC_Start_IT+0x278>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d2a:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8001d2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	3710      	adds	r7, #16
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	40012c00 	.word	0x40012c00
 8001d3c:	40013400 	.word	0x40013400
 8001d40:	40014000 	.word	0x40014000
 8001d44:	40014400 	.word	0x40014400
 8001d48:	40014800 	.word	0x40014800
 8001d4c:	40000400 	.word	0x40000400
 8001d50:	40000800 	.word	0x40000800
 8001d54:	40000c00 	.word	0x40000c00
 8001d58:	00010007 	.word	0x00010007

08001d5c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b084      	sub	sp, #16
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	68db      	ldr	r3, [r3, #12]
 8001d6a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	691b      	ldr	r3, [r3, #16]
 8001d72:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	f003 0302 	and.w	r3, r3, #2
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d020      	beq.n	8001dc0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	f003 0302 	and.w	r3, r3, #2
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d01b      	beq.n	8001dc0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f06f 0202 	mvn.w	r2, #2
 8001d90:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2201      	movs	r2, #1
 8001d96:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	699b      	ldr	r3, [r3, #24]
 8001d9e:	f003 0303 	and.w	r3, r3, #3
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d003      	beq.n	8001dae <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001da6:	6878      	ldr	r0, [r7, #4]
 8001da8:	f000 f9a8 	bl	80020fc <HAL_TIM_IC_CaptureCallback>
 8001dac:	e005      	b.n	8001dba <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	f7fe fa84 	bl	80002bc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001db4:	6878      	ldr	r0, [r7, #4]
 8001db6:	f000 f9ab 	bl	8002110 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	f003 0304 	and.w	r3, r3, #4
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d020      	beq.n	8001e0c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	f003 0304 	and.w	r3, r3, #4
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d01b      	beq.n	8001e0c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f06f 0204 	mvn.w	r2, #4
 8001ddc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2202      	movs	r2, #2
 8001de2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	699b      	ldr	r3, [r3, #24]
 8001dea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d003      	beq.n	8001dfa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001df2:	6878      	ldr	r0, [r7, #4]
 8001df4:	f000 f982 	bl	80020fc <HAL_TIM_IC_CaptureCallback>
 8001df8:	e005      	b.n	8001e06 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dfa:	6878      	ldr	r0, [r7, #4]
 8001dfc:	f7fe fa5e 	bl	80002bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e00:	6878      	ldr	r0, [r7, #4]
 8001e02:	f000 f985 	bl	8002110 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2200      	movs	r2, #0
 8001e0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	f003 0308 	and.w	r3, r3, #8
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d020      	beq.n	8001e58 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	f003 0308 	and.w	r3, r3, #8
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d01b      	beq.n	8001e58 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f06f 0208 	mvn.w	r2, #8
 8001e28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2204      	movs	r2, #4
 8001e2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	69db      	ldr	r3, [r3, #28]
 8001e36:	f003 0303 	and.w	r3, r3, #3
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d003      	beq.n	8001e46 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	f000 f95c 	bl	80020fc <HAL_TIM_IC_CaptureCallback>
 8001e44:	e005      	b.n	8001e52 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e46:	6878      	ldr	r0, [r7, #4]
 8001e48:	f7fe fa38 	bl	80002bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e4c:	6878      	ldr	r0, [r7, #4]
 8001e4e:	f000 f95f 	bl	8002110 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2200      	movs	r2, #0
 8001e56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	f003 0310 	and.w	r3, r3, #16
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d020      	beq.n	8001ea4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	f003 0310 	and.w	r3, r3, #16
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d01b      	beq.n	8001ea4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f06f 0210 	mvn.w	r2, #16
 8001e74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2208      	movs	r2, #8
 8001e7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	69db      	ldr	r3, [r3, #28]
 8001e82:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d003      	beq.n	8001e92 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f000 f936 	bl	80020fc <HAL_TIM_IC_CaptureCallback>
 8001e90:	e005      	b.n	8001e9e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e92:	6878      	ldr	r0, [r7, #4]
 8001e94:	f7fe fa12 	bl	80002bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e98:	6878      	ldr	r0, [r7, #4]
 8001e9a:	f000 f939 	bl	8002110 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	f003 0301 	and.w	r3, r3, #1
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d00c      	beq.n	8001ec8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	f003 0301 	and.w	r3, r3, #1
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d007      	beq.n	8001ec8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f06f 0201 	mvn.w	r2, #1
 8001ec0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	f000 f910 	bl	80020e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d104      	bne.n	8001edc <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8001ed2:	68bb      	ldr	r3, [r7, #8]
 8001ed4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d00c      	beq.n	8001ef6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d007      	beq.n	8001ef6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8001eee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001ef0:	6878      	ldr	r0, [r7, #4]
 8001ef2:	f000 fccc 	bl	800288e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8001ef6:	68bb      	ldr	r3, [r7, #8]
 8001ef8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d00c      	beq.n	8001f1a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d007      	beq.n	8001f1a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8001f12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8001f14:	6878      	ldr	r0, [r7, #4]
 8001f16:	f000 fcc4 	bl	80028a2 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001f1a:	68bb      	ldr	r3, [r7, #8]
 8001f1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d00c      	beq.n	8001f3e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d007      	beq.n	8001f3e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001f36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001f38:	6878      	ldr	r0, [r7, #4]
 8001f3a:	f000 f8f3 	bl	8002124 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001f3e:	68bb      	ldr	r3, [r7, #8]
 8001f40:	f003 0320 	and.w	r3, r3, #32
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d00c      	beq.n	8001f62 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	f003 0320 	and.w	r3, r3, #32
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d007      	beq.n	8001f62 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f06f 0220 	mvn.w	r2, #32
 8001f5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001f5c:	6878      	ldr	r0, [r7, #4]
 8001f5e:	f000 fc8c 	bl	800287a <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001f62:	bf00      	nop
 8001f64:	3710      	adds	r7, #16
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
	...

08001f6c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b086      	sub	sp, #24
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	60f8      	str	r0, [r7, #12]
 8001f74:	60b9      	str	r1, [r7, #8]
 8001f76:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001f82:	2b01      	cmp	r3, #1
 8001f84:	d101      	bne.n	8001f8a <HAL_TIM_OC_ConfigChannel+0x1e>
 8001f86:	2302      	movs	r3, #2
 8001f88:	e066      	b.n	8002058 <HAL_TIM_OC_ConfigChannel+0xec>
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	2201      	movs	r2, #1
 8001f8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2b14      	cmp	r3, #20
 8001f96:	d857      	bhi.n	8002048 <HAL_TIM_OC_ConfigChannel+0xdc>
 8001f98:	a201      	add	r2, pc, #4	@ (adr r2, 8001fa0 <HAL_TIM_OC_ConfigChannel+0x34>)
 8001f9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f9e:	bf00      	nop
 8001fa0:	08001ff5 	.word	0x08001ff5
 8001fa4:	08002049 	.word	0x08002049
 8001fa8:	08002049 	.word	0x08002049
 8001fac:	08002049 	.word	0x08002049
 8001fb0:	08002003 	.word	0x08002003
 8001fb4:	08002049 	.word	0x08002049
 8001fb8:	08002049 	.word	0x08002049
 8001fbc:	08002049 	.word	0x08002049
 8001fc0:	08002011 	.word	0x08002011
 8001fc4:	08002049 	.word	0x08002049
 8001fc8:	08002049 	.word	0x08002049
 8001fcc:	08002049 	.word	0x08002049
 8001fd0:	0800201f 	.word	0x0800201f
 8001fd4:	08002049 	.word	0x08002049
 8001fd8:	08002049 	.word	0x08002049
 8001fdc:	08002049 	.word	0x08002049
 8001fe0:	0800202d 	.word	0x0800202d
 8001fe4:	08002049 	.word	0x08002049
 8001fe8:	08002049 	.word	0x08002049
 8001fec:	08002049 	.word	0x08002049
 8001ff0:	0800203b 	.word	0x0800203b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	68b9      	ldr	r1, [r7, #8]
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f000 f942 	bl	8002284 <TIM_OC1_SetConfig>
      break;
 8002000:	e025      	b.n	800204e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	68b9      	ldr	r1, [r7, #8]
 8002008:	4618      	mov	r0, r3
 800200a:	f000 f9cb 	bl	80023a4 <TIM_OC2_SetConfig>
      break;
 800200e:	e01e      	b.n	800204e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	68b9      	ldr	r1, [r7, #8]
 8002016:	4618      	mov	r0, r3
 8002018:	f000 fa4e 	bl	80024b8 <TIM_OC3_SetConfig>
      break;
 800201c:	e017      	b.n	800204e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	68b9      	ldr	r1, [r7, #8]
 8002024:	4618      	mov	r0, r3
 8002026:	f000 facf 	bl	80025c8 <TIM_OC4_SetConfig>
      break;
 800202a:	e010      	b.n	800204e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	68b9      	ldr	r1, [r7, #8]
 8002032:	4618      	mov	r0, r3
 8002034:	f000 fb32 	bl	800269c <TIM_OC5_SetConfig>
      break;
 8002038:	e009      	b.n	800204e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	68b9      	ldr	r1, [r7, #8]
 8002040:	4618      	mov	r0, r3
 8002042:	f000 fb8f 	bl	8002764 <TIM_OC6_SetConfig>
      break;
 8002046:	e002      	b.n	800204e <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8002048:	2301      	movs	r3, #1
 800204a:	75fb      	strb	r3, [r7, #23]
      break;
 800204c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	2200      	movs	r2, #0
 8002052:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002056:	7dfb      	ldrb	r3, [r7, #23]
}
 8002058:	4618      	mov	r0, r3
 800205a:	3718      	adds	r7, #24
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}

08002060 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002060:	b480      	push	{r7}
 8002062:	b085      	sub	sp, #20
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
 8002068:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800206a:	2300      	movs	r3, #0
 800206c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	2b0c      	cmp	r3, #12
 8002072:	d831      	bhi.n	80020d8 <HAL_TIM_ReadCapturedValue+0x78>
 8002074:	a201      	add	r2, pc, #4	@ (adr r2, 800207c <HAL_TIM_ReadCapturedValue+0x1c>)
 8002076:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800207a:	bf00      	nop
 800207c:	080020b1 	.word	0x080020b1
 8002080:	080020d9 	.word	0x080020d9
 8002084:	080020d9 	.word	0x080020d9
 8002088:	080020d9 	.word	0x080020d9
 800208c:	080020bb 	.word	0x080020bb
 8002090:	080020d9 	.word	0x080020d9
 8002094:	080020d9 	.word	0x080020d9
 8002098:	080020d9 	.word	0x080020d9
 800209c:	080020c5 	.word	0x080020c5
 80020a0:	080020d9 	.word	0x080020d9
 80020a4:	080020d9 	.word	0x080020d9
 80020a8:	080020d9 	.word	0x080020d9
 80020ac:	080020cf 	.word	0x080020cf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80020b6:	60fb      	str	r3, [r7, #12]

      break;
 80020b8:	e00f      	b.n	80020da <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020c0:	60fb      	str	r3, [r7, #12]

      break;
 80020c2:	e00a      	b.n	80020da <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020ca:	60fb      	str	r3, [r7, #12]

      break;
 80020cc:	e005      	b.n	80020da <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020d4:	60fb      	str	r3, [r7, #12]

      break;
 80020d6:	e000      	b.n	80020da <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80020d8:	bf00      	nop
  }

  return tmpreg;
 80020da:	68fb      	ldr	r3, [r7, #12]
}
 80020dc:	4618      	mov	r0, r3
 80020de:	3714      	adds	r7, #20
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr

080020e8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b083      	sub	sp, #12
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80020f0:	bf00      	nop
 80020f2:	370c      	adds	r7, #12
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr

080020fc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b083      	sub	sp, #12
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002104:	bf00      	nop
 8002106:	370c      	adds	r7, #12
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr

08002110 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002110:	b480      	push	{r7}
 8002112:	b083      	sub	sp, #12
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002118:	bf00      	nop
 800211a:	370c      	adds	r7, #12
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr

08002124 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002124:	b480      	push	{r7}
 8002126:	b083      	sub	sp, #12
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800212c:	bf00      	nop
 800212e:	370c      	adds	r7, #12
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr

08002138 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002138:	b480      	push	{r7}
 800213a:	b085      	sub	sp, #20
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
 8002140:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	4a46      	ldr	r2, [pc, #280]	@ (8002264 <TIM_Base_SetConfig+0x12c>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d013      	beq.n	8002178 <TIM_Base_SetConfig+0x40>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002156:	d00f      	beq.n	8002178 <TIM_Base_SetConfig+0x40>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	4a43      	ldr	r2, [pc, #268]	@ (8002268 <TIM_Base_SetConfig+0x130>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d00b      	beq.n	8002178 <TIM_Base_SetConfig+0x40>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	4a42      	ldr	r2, [pc, #264]	@ (800226c <TIM_Base_SetConfig+0x134>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d007      	beq.n	8002178 <TIM_Base_SetConfig+0x40>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	4a41      	ldr	r2, [pc, #260]	@ (8002270 <TIM_Base_SetConfig+0x138>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d003      	beq.n	8002178 <TIM_Base_SetConfig+0x40>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	4a40      	ldr	r2, [pc, #256]	@ (8002274 <TIM_Base_SetConfig+0x13c>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d108      	bne.n	800218a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800217e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	68fa      	ldr	r2, [r7, #12]
 8002186:	4313      	orrs	r3, r2
 8002188:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	4a35      	ldr	r2, [pc, #212]	@ (8002264 <TIM_Base_SetConfig+0x12c>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d01f      	beq.n	80021d2 <TIM_Base_SetConfig+0x9a>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002198:	d01b      	beq.n	80021d2 <TIM_Base_SetConfig+0x9a>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	4a32      	ldr	r2, [pc, #200]	@ (8002268 <TIM_Base_SetConfig+0x130>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d017      	beq.n	80021d2 <TIM_Base_SetConfig+0x9a>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	4a31      	ldr	r2, [pc, #196]	@ (800226c <TIM_Base_SetConfig+0x134>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d013      	beq.n	80021d2 <TIM_Base_SetConfig+0x9a>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4a30      	ldr	r2, [pc, #192]	@ (8002270 <TIM_Base_SetConfig+0x138>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d00f      	beq.n	80021d2 <TIM_Base_SetConfig+0x9a>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	4a2f      	ldr	r2, [pc, #188]	@ (8002274 <TIM_Base_SetConfig+0x13c>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d00b      	beq.n	80021d2 <TIM_Base_SetConfig+0x9a>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	4a2e      	ldr	r2, [pc, #184]	@ (8002278 <TIM_Base_SetConfig+0x140>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d007      	beq.n	80021d2 <TIM_Base_SetConfig+0x9a>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4a2d      	ldr	r2, [pc, #180]	@ (800227c <TIM_Base_SetConfig+0x144>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d003      	beq.n	80021d2 <TIM_Base_SetConfig+0x9a>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	4a2c      	ldr	r2, [pc, #176]	@ (8002280 <TIM_Base_SetConfig+0x148>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d108      	bne.n	80021e4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80021d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	68db      	ldr	r3, [r3, #12]
 80021de:	68fa      	ldr	r2, [r7, #12]
 80021e0:	4313      	orrs	r3, r2
 80021e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	695b      	ldr	r3, [r3, #20]
 80021ee:	4313      	orrs	r3, r2
 80021f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	68fa      	ldr	r2, [r7, #12]
 80021f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	689a      	ldr	r2, [r3, #8]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	681a      	ldr	r2, [r3, #0]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	4a16      	ldr	r2, [pc, #88]	@ (8002264 <TIM_Base_SetConfig+0x12c>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d00f      	beq.n	8002230 <TIM_Base_SetConfig+0xf8>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	4a18      	ldr	r2, [pc, #96]	@ (8002274 <TIM_Base_SetConfig+0x13c>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d00b      	beq.n	8002230 <TIM_Base_SetConfig+0xf8>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	4a17      	ldr	r2, [pc, #92]	@ (8002278 <TIM_Base_SetConfig+0x140>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d007      	beq.n	8002230 <TIM_Base_SetConfig+0xf8>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	4a16      	ldr	r2, [pc, #88]	@ (800227c <TIM_Base_SetConfig+0x144>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d003      	beq.n	8002230 <TIM_Base_SetConfig+0xf8>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	4a15      	ldr	r2, [pc, #84]	@ (8002280 <TIM_Base_SetConfig+0x148>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d103      	bne.n	8002238 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	691a      	ldr	r2, [r3, #16]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2201      	movs	r2, #1
 800223c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	691b      	ldr	r3, [r3, #16]
 8002242:	f003 0301 	and.w	r3, r3, #1
 8002246:	2b01      	cmp	r3, #1
 8002248:	d105      	bne.n	8002256 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	691b      	ldr	r3, [r3, #16]
 800224e:	f023 0201 	bic.w	r2, r3, #1
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	611a      	str	r2, [r3, #16]
  }
}
 8002256:	bf00      	nop
 8002258:	3714      	adds	r7, #20
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr
 8002262:	bf00      	nop
 8002264:	40012c00 	.word	0x40012c00
 8002268:	40000400 	.word	0x40000400
 800226c:	40000800 	.word	0x40000800
 8002270:	40000c00 	.word	0x40000c00
 8002274:	40013400 	.word	0x40013400
 8002278:	40014000 	.word	0x40014000
 800227c:	40014400 	.word	0x40014400
 8002280:	40014800 	.word	0x40014800

08002284 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002284:	b480      	push	{r7}
 8002286:	b087      	sub	sp, #28
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
 800228c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6a1b      	ldr	r3, [r3, #32]
 8002292:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6a1b      	ldr	r3, [r3, #32]
 8002298:	f023 0201 	bic.w	r2, r3, #1
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	699b      	ldr	r3, [r3, #24]
 80022aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80022b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80022b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	f023 0303 	bic.w	r3, r3, #3
 80022be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	68fa      	ldr	r2, [r7, #12]
 80022c6:	4313      	orrs	r3, r2
 80022c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	f023 0302 	bic.w	r3, r3, #2
 80022d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	697a      	ldr	r2, [r7, #20]
 80022d8:	4313      	orrs	r3, r2
 80022da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	4a2c      	ldr	r2, [pc, #176]	@ (8002390 <TIM_OC1_SetConfig+0x10c>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d00f      	beq.n	8002304 <TIM_OC1_SetConfig+0x80>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	4a2b      	ldr	r2, [pc, #172]	@ (8002394 <TIM_OC1_SetConfig+0x110>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d00b      	beq.n	8002304 <TIM_OC1_SetConfig+0x80>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	4a2a      	ldr	r2, [pc, #168]	@ (8002398 <TIM_OC1_SetConfig+0x114>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d007      	beq.n	8002304 <TIM_OC1_SetConfig+0x80>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	4a29      	ldr	r2, [pc, #164]	@ (800239c <TIM_OC1_SetConfig+0x118>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d003      	beq.n	8002304 <TIM_OC1_SetConfig+0x80>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	4a28      	ldr	r2, [pc, #160]	@ (80023a0 <TIM_OC1_SetConfig+0x11c>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d10c      	bne.n	800231e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	f023 0308 	bic.w	r3, r3, #8
 800230a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	68db      	ldr	r3, [r3, #12]
 8002310:	697a      	ldr	r2, [r7, #20]
 8002312:	4313      	orrs	r3, r2
 8002314:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	f023 0304 	bic.w	r3, r3, #4
 800231c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	4a1b      	ldr	r2, [pc, #108]	@ (8002390 <TIM_OC1_SetConfig+0x10c>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d00f      	beq.n	8002346 <TIM_OC1_SetConfig+0xc2>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	4a1a      	ldr	r2, [pc, #104]	@ (8002394 <TIM_OC1_SetConfig+0x110>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d00b      	beq.n	8002346 <TIM_OC1_SetConfig+0xc2>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	4a19      	ldr	r2, [pc, #100]	@ (8002398 <TIM_OC1_SetConfig+0x114>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d007      	beq.n	8002346 <TIM_OC1_SetConfig+0xc2>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	4a18      	ldr	r2, [pc, #96]	@ (800239c <TIM_OC1_SetConfig+0x118>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d003      	beq.n	8002346 <TIM_OC1_SetConfig+0xc2>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	4a17      	ldr	r2, [pc, #92]	@ (80023a0 <TIM_OC1_SetConfig+0x11c>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d111      	bne.n	800236a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800234c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002354:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	695b      	ldr	r3, [r3, #20]
 800235a:	693a      	ldr	r2, [r7, #16]
 800235c:	4313      	orrs	r3, r2
 800235e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	699b      	ldr	r3, [r3, #24]
 8002364:	693a      	ldr	r2, [r7, #16]
 8002366:	4313      	orrs	r3, r2
 8002368:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	693a      	ldr	r2, [r7, #16]
 800236e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	68fa      	ldr	r2, [r7, #12]
 8002374:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	685a      	ldr	r2, [r3, #4]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	697a      	ldr	r2, [r7, #20]
 8002382:	621a      	str	r2, [r3, #32]
}
 8002384:	bf00      	nop
 8002386:	371c      	adds	r7, #28
 8002388:	46bd      	mov	sp, r7
 800238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238e:	4770      	bx	lr
 8002390:	40012c00 	.word	0x40012c00
 8002394:	40013400 	.word	0x40013400
 8002398:	40014000 	.word	0x40014000
 800239c:	40014400 	.word	0x40014400
 80023a0:	40014800 	.word	0x40014800

080023a4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b087      	sub	sp, #28
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
 80023ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6a1b      	ldr	r3, [r3, #32]
 80023b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6a1b      	ldr	r3, [r3, #32]
 80023b8:	f023 0210 	bic.w	r2, r3, #16
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	699b      	ldr	r3, [r3, #24]
 80023ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80023d2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80023d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80023de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	021b      	lsls	r3, r3, #8
 80023e6:	68fa      	ldr	r2, [r7, #12]
 80023e8:	4313      	orrs	r3, r2
 80023ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	f023 0320 	bic.w	r3, r3, #32
 80023f2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	011b      	lsls	r3, r3, #4
 80023fa:	697a      	ldr	r2, [r7, #20]
 80023fc:	4313      	orrs	r3, r2
 80023fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	4a28      	ldr	r2, [pc, #160]	@ (80024a4 <TIM_OC2_SetConfig+0x100>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d003      	beq.n	8002410 <TIM_OC2_SetConfig+0x6c>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	4a27      	ldr	r2, [pc, #156]	@ (80024a8 <TIM_OC2_SetConfig+0x104>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d10d      	bne.n	800242c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002416:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	68db      	ldr	r3, [r3, #12]
 800241c:	011b      	lsls	r3, r3, #4
 800241e:	697a      	ldr	r2, [r7, #20]
 8002420:	4313      	orrs	r3, r2
 8002422:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800242a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	4a1d      	ldr	r2, [pc, #116]	@ (80024a4 <TIM_OC2_SetConfig+0x100>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d00f      	beq.n	8002454 <TIM_OC2_SetConfig+0xb0>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	4a1c      	ldr	r2, [pc, #112]	@ (80024a8 <TIM_OC2_SetConfig+0x104>)
 8002438:	4293      	cmp	r3, r2
 800243a:	d00b      	beq.n	8002454 <TIM_OC2_SetConfig+0xb0>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	4a1b      	ldr	r2, [pc, #108]	@ (80024ac <TIM_OC2_SetConfig+0x108>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d007      	beq.n	8002454 <TIM_OC2_SetConfig+0xb0>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	4a1a      	ldr	r2, [pc, #104]	@ (80024b0 <TIM_OC2_SetConfig+0x10c>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d003      	beq.n	8002454 <TIM_OC2_SetConfig+0xb0>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	4a19      	ldr	r2, [pc, #100]	@ (80024b4 <TIM_OC2_SetConfig+0x110>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d113      	bne.n	800247c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800245a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002462:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	695b      	ldr	r3, [r3, #20]
 8002468:	009b      	lsls	r3, r3, #2
 800246a:	693a      	ldr	r2, [r7, #16]
 800246c:	4313      	orrs	r3, r2
 800246e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	699b      	ldr	r3, [r3, #24]
 8002474:	009b      	lsls	r3, r3, #2
 8002476:	693a      	ldr	r2, [r7, #16]
 8002478:	4313      	orrs	r3, r2
 800247a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	693a      	ldr	r2, [r7, #16]
 8002480:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	68fa      	ldr	r2, [r7, #12]
 8002486:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	685a      	ldr	r2, [r3, #4]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	697a      	ldr	r2, [r7, #20]
 8002494:	621a      	str	r2, [r3, #32]
}
 8002496:	bf00      	nop
 8002498:	371c      	adds	r7, #28
 800249a:	46bd      	mov	sp, r7
 800249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a0:	4770      	bx	lr
 80024a2:	bf00      	nop
 80024a4:	40012c00 	.word	0x40012c00
 80024a8:	40013400 	.word	0x40013400
 80024ac:	40014000 	.word	0x40014000
 80024b0:	40014400 	.word	0x40014400
 80024b4:	40014800 	.word	0x40014800

080024b8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b087      	sub	sp, #28
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
 80024c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6a1b      	ldr	r3, [r3, #32]
 80024c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6a1b      	ldr	r3, [r3, #32]
 80024cc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	69db      	ldr	r3, [r3, #28]
 80024de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80024e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80024ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	f023 0303 	bic.w	r3, r3, #3
 80024f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	68fa      	ldr	r2, [r7, #12]
 80024fa:	4313      	orrs	r3, r2
 80024fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002504:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	021b      	lsls	r3, r3, #8
 800250c:	697a      	ldr	r2, [r7, #20]
 800250e:	4313      	orrs	r3, r2
 8002510:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	4a27      	ldr	r2, [pc, #156]	@ (80025b4 <TIM_OC3_SetConfig+0xfc>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d003      	beq.n	8002522 <TIM_OC3_SetConfig+0x6a>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	4a26      	ldr	r2, [pc, #152]	@ (80025b8 <TIM_OC3_SetConfig+0x100>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d10d      	bne.n	800253e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002528:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	68db      	ldr	r3, [r3, #12]
 800252e:	021b      	lsls	r3, r3, #8
 8002530:	697a      	ldr	r2, [r7, #20]
 8002532:	4313      	orrs	r3, r2
 8002534:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800253c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	4a1c      	ldr	r2, [pc, #112]	@ (80025b4 <TIM_OC3_SetConfig+0xfc>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d00f      	beq.n	8002566 <TIM_OC3_SetConfig+0xae>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	4a1b      	ldr	r2, [pc, #108]	@ (80025b8 <TIM_OC3_SetConfig+0x100>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d00b      	beq.n	8002566 <TIM_OC3_SetConfig+0xae>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	4a1a      	ldr	r2, [pc, #104]	@ (80025bc <TIM_OC3_SetConfig+0x104>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d007      	beq.n	8002566 <TIM_OC3_SetConfig+0xae>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	4a19      	ldr	r2, [pc, #100]	@ (80025c0 <TIM_OC3_SetConfig+0x108>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d003      	beq.n	8002566 <TIM_OC3_SetConfig+0xae>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	4a18      	ldr	r2, [pc, #96]	@ (80025c4 <TIM_OC3_SetConfig+0x10c>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d113      	bne.n	800258e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800256c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002574:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	695b      	ldr	r3, [r3, #20]
 800257a:	011b      	lsls	r3, r3, #4
 800257c:	693a      	ldr	r2, [r7, #16]
 800257e:	4313      	orrs	r3, r2
 8002580:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	699b      	ldr	r3, [r3, #24]
 8002586:	011b      	lsls	r3, r3, #4
 8002588:	693a      	ldr	r2, [r7, #16]
 800258a:	4313      	orrs	r3, r2
 800258c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	693a      	ldr	r2, [r7, #16]
 8002592:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	68fa      	ldr	r2, [r7, #12]
 8002598:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	685a      	ldr	r2, [r3, #4]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	697a      	ldr	r2, [r7, #20]
 80025a6:	621a      	str	r2, [r3, #32]
}
 80025a8:	bf00      	nop
 80025aa:	371c      	adds	r7, #28
 80025ac:	46bd      	mov	sp, r7
 80025ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b2:	4770      	bx	lr
 80025b4:	40012c00 	.word	0x40012c00
 80025b8:	40013400 	.word	0x40013400
 80025bc:	40014000 	.word	0x40014000
 80025c0:	40014400 	.word	0x40014400
 80025c4:	40014800 	.word	0x40014800

080025c8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b087      	sub	sp, #28
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
 80025d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6a1b      	ldr	r3, [r3, #32]
 80025d6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6a1b      	ldr	r3, [r3, #32]
 80025dc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	69db      	ldr	r3, [r3, #28]
 80025ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80025f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80025fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002602:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	021b      	lsls	r3, r3, #8
 800260a:	68fa      	ldr	r2, [r7, #12]
 800260c:	4313      	orrs	r3, r2
 800260e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002616:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	031b      	lsls	r3, r3, #12
 800261e:	693a      	ldr	r2, [r7, #16]
 8002620:	4313      	orrs	r3, r2
 8002622:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	4a18      	ldr	r2, [pc, #96]	@ (8002688 <TIM_OC4_SetConfig+0xc0>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d00f      	beq.n	800264c <TIM_OC4_SetConfig+0x84>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	4a17      	ldr	r2, [pc, #92]	@ (800268c <TIM_OC4_SetConfig+0xc4>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d00b      	beq.n	800264c <TIM_OC4_SetConfig+0x84>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	4a16      	ldr	r2, [pc, #88]	@ (8002690 <TIM_OC4_SetConfig+0xc8>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d007      	beq.n	800264c <TIM_OC4_SetConfig+0x84>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	4a15      	ldr	r2, [pc, #84]	@ (8002694 <TIM_OC4_SetConfig+0xcc>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d003      	beq.n	800264c <TIM_OC4_SetConfig+0x84>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	4a14      	ldr	r2, [pc, #80]	@ (8002698 <TIM_OC4_SetConfig+0xd0>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d109      	bne.n	8002660 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002652:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	695b      	ldr	r3, [r3, #20]
 8002658:	019b      	lsls	r3, r3, #6
 800265a:	697a      	ldr	r2, [r7, #20]
 800265c:	4313      	orrs	r3, r2
 800265e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	697a      	ldr	r2, [r7, #20]
 8002664:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	68fa      	ldr	r2, [r7, #12]
 800266a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	685a      	ldr	r2, [r3, #4]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	693a      	ldr	r2, [r7, #16]
 8002678:	621a      	str	r2, [r3, #32]
}
 800267a:	bf00      	nop
 800267c:	371c      	adds	r7, #28
 800267e:	46bd      	mov	sp, r7
 8002680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002684:	4770      	bx	lr
 8002686:	bf00      	nop
 8002688:	40012c00 	.word	0x40012c00
 800268c:	40013400 	.word	0x40013400
 8002690:	40014000 	.word	0x40014000
 8002694:	40014400 	.word	0x40014400
 8002698:	40014800 	.word	0x40014800

0800269c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800269c:	b480      	push	{r7}
 800269e:	b087      	sub	sp, #28
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
 80026a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6a1b      	ldr	r3, [r3, #32]
 80026aa:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6a1b      	ldr	r3, [r3, #32]
 80026b0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80026ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	68fa      	ldr	r2, [r7, #12]
 80026d6:	4313      	orrs	r3, r2
 80026d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80026e0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	041b      	lsls	r3, r3, #16
 80026e8:	693a      	ldr	r2, [r7, #16]
 80026ea:	4313      	orrs	r3, r2
 80026ec:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	4a17      	ldr	r2, [pc, #92]	@ (8002750 <TIM_OC5_SetConfig+0xb4>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d00f      	beq.n	8002716 <TIM_OC5_SetConfig+0x7a>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	4a16      	ldr	r2, [pc, #88]	@ (8002754 <TIM_OC5_SetConfig+0xb8>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d00b      	beq.n	8002716 <TIM_OC5_SetConfig+0x7a>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	4a15      	ldr	r2, [pc, #84]	@ (8002758 <TIM_OC5_SetConfig+0xbc>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d007      	beq.n	8002716 <TIM_OC5_SetConfig+0x7a>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	4a14      	ldr	r2, [pc, #80]	@ (800275c <TIM_OC5_SetConfig+0xc0>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d003      	beq.n	8002716 <TIM_OC5_SetConfig+0x7a>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	4a13      	ldr	r2, [pc, #76]	@ (8002760 <TIM_OC5_SetConfig+0xc4>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d109      	bne.n	800272a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800271c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	695b      	ldr	r3, [r3, #20]
 8002722:	021b      	lsls	r3, r3, #8
 8002724:	697a      	ldr	r2, [r7, #20]
 8002726:	4313      	orrs	r3, r2
 8002728:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	697a      	ldr	r2, [r7, #20]
 800272e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	68fa      	ldr	r2, [r7, #12]
 8002734:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	685a      	ldr	r2, [r3, #4]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	693a      	ldr	r2, [r7, #16]
 8002742:	621a      	str	r2, [r3, #32]
}
 8002744:	bf00      	nop
 8002746:	371c      	adds	r7, #28
 8002748:	46bd      	mov	sp, r7
 800274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274e:	4770      	bx	lr
 8002750:	40012c00 	.word	0x40012c00
 8002754:	40013400 	.word	0x40013400
 8002758:	40014000 	.word	0x40014000
 800275c:	40014400 	.word	0x40014400
 8002760:	40014800 	.word	0x40014800

08002764 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002764:	b480      	push	{r7}
 8002766:	b087      	sub	sp, #28
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
 800276c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6a1b      	ldr	r3, [r3, #32]
 8002772:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6a1b      	ldr	r3, [r3, #32]
 8002778:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800278a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002792:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002796:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	021b      	lsls	r3, r3, #8
 800279e:	68fa      	ldr	r2, [r7, #12]
 80027a0:	4313      	orrs	r3, r2
 80027a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80027aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	051b      	lsls	r3, r3, #20
 80027b2:	693a      	ldr	r2, [r7, #16]
 80027b4:	4313      	orrs	r3, r2
 80027b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	4a18      	ldr	r2, [pc, #96]	@ (800281c <TIM_OC6_SetConfig+0xb8>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d00f      	beq.n	80027e0 <TIM_OC6_SetConfig+0x7c>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	4a17      	ldr	r2, [pc, #92]	@ (8002820 <TIM_OC6_SetConfig+0xbc>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d00b      	beq.n	80027e0 <TIM_OC6_SetConfig+0x7c>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	4a16      	ldr	r2, [pc, #88]	@ (8002824 <TIM_OC6_SetConfig+0xc0>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d007      	beq.n	80027e0 <TIM_OC6_SetConfig+0x7c>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	4a15      	ldr	r2, [pc, #84]	@ (8002828 <TIM_OC6_SetConfig+0xc4>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d003      	beq.n	80027e0 <TIM_OC6_SetConfig+0x7c>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	4a14      	ldr	r2, [pc, #80]	@ (800282c <TIM_OC6_SetConfig+0xc8>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d109      	bne.n	80027f4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80027e6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	695b      	ldr	r3, [r3, #20]
 80027ec:	029b      	lsls	r3, r3, #10
 80027ee:	697a      	ldr	r2, [r7, #20]
 80027f0:	4313      	orrs	r3, r2
 80027f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	697a      	ldr	r2, [r7, #20]
 80027f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	68fa      	ldr	r2, [r7, #12]
 80027fe:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	685a      	ldr	r2, [r3, #4]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	693a      	ldr	r2, [r7, #16]
 800280c:	621a      	str	r2, [r3, #32]
}
 800280e:	bf00      	nop
 8002810:	371c      	adds	r7, #28
 8002812:	46bd      	mov	sp, r7
 8002814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002818:	4770      	bx	lr
 800281a:	bf00      	nop
 800281c:	40012c00 	.word	0x40012c00
 8002820:	40013400 	.word	0x40013400
 8002824:	40014000 	.word	0x40014000
 8002828:	40014400 	.word	0x40014400
 800282c:	40014800 	.word	0x40014800

08002830 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002830:	b480      	push	{r7}
 8002832:	b087      	sub	sp, #28
 8002834:	af00      	add	r7, sp, #0
 8002836:	60f8      	str	r0, [r7, #12]
 8002838:	60b9      	str	r1, [r7, #8]
 800283a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	f003 031f 	and.w	r3, r3, #31
 8002842:	2201      	movs	r2, #1
 8002844:	fa02 f303 	lsl.w	r3, r2, r3
 8002848:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	6a1a      	ldr	r2, [r3, #32]
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	43db      	mvns	r3, r3
 8002852:	401a      	ands	r2, r3
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	6a1a      	ldr	r2, [r3, #32]
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	f003 031f 	and.w	r3, r3, #31
 8002862:	6879      	ldr	r1, [r7, #4]
 8002864:	fa01 f303 	lsl.w	r3, r1, r3
 8002868:	431a      	orrs	r2, r3
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	621a      	str	r2, [r3, #32]
}
 800286e:	bf00      	nop
 8002870:	371c      	adds	r7, #28
 8002872:	46bd      	mov	sp, r7
 8002874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002878:	4770      	bx	lr

0800287a <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800287a:	b480      	push	{r7}
 800287c:	b083      	sub	sp, #12
 800287e:	af00      	add	r7, sp, #0
 8002880:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002882:	bf00      	nop
 8002884:	370c      	adds	r7, #12
 8002886:	46bd      	mov	sp, r7
 8002888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288c:	4770      	bx	lr

0800288e <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800288e:	b480      	push	{r7}
 8002890:	b083      	sub	sp, #12
 8002892:	af00      	add	r7, sp, #0
 8002894:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002896:	bf00      	nop
 8002898:	370c      	adds	r7, #12
 800289a:	46bd      	mov	sp, r7
 800289c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a0:	4770      	bx	lr

080028a2 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80028a2:	b480      	push	{r7}
 80028a4:	b083      	sub	sp, #12
 80028a6:	af00      	add	r7, sp, #0
 80028a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80028aa:	bf00      	nop
 80028ac:	370c      	adds	r7, #12
 80028ae:	46bd      	mov	sp, r7
 80028b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b4:	4770      	bx	lr
	...

080028b8 <__libc_init_array>:
 80028b8:	b570      	push	{r4, r5, r6, lr}
 80028ba:	4d0d      	ldr	r5, [pc, #52]	@ (80028f0 <__libc_init_array+0x38>)
 80028bc:	4c0d      	ldr	r4, [pc, #52]	@ (80028f4 <__libc_init_array+0x3c>)
 80028be:	1b64      	subs	r4, r4, r5
 80028c0:	10a4      	asrs	r4, r4, #2
 80028c2:	2600      	movs	r6, #0
 80028c4:	42a6      	cmp	r6, r4
 80028c6:	d109      	bne.n	80028dc <__libc_init_array+0x24>
 80028c8:	4d0b      	ldr	r5, [pc, #44]	@ (80028f8 <__libc_init_array+0x40>)
 80028ca:	4c0c      	ldr	r4, [pc, #48]	@ (80028fc <__libc_init_array+0x44>)
 80028cc:	f000 f818 	bl	8002900 <_init>
 80028d0:	1b64      	subs	r4, r4, r5
 80028d2:	10a4      	asrs	r4, r4, #2
 80028d4:	2600      	movs	r6, #0
 80028d6:	42a6      	cmp	r6, r4
 80028d8:	d105      	bne.n	80028e6 <__libc_init_array+0x2e>
 80028da:	bd70      	pop	{r4, r5, r6, pc}
 80028dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80028e0:	4798      	blx	r3
 80028e2:	3601      	adds	r6, #1
 80028e4:	e7ee      	b.n	80028c4 <__libc_init_array+0xc>
 80028e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80028ea:	4798      	blx	r3
 80028ec:	3601      	adds	r6, #1
 80028ee:	e7f2      	b.n	80028d6 <__libc_init_array+0x1e>
 80028f0:	08002958 	.word	0x08002958
 80028f4:	08002958 	.word	0x08002958
 80028f8:	08002958 	.word	0x08002958
 80028fc:	0800295c 	.word	0x0800295c

08002900 <_init>:
 8002900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002902:	bf00      	nop
 8002904:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002906:	bc08      	pop	{r3}
 8002908:	469e      	mov	lr, r3
 800290a:	4770      	bx	lr

0800290c <_fini>:
 800290c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800290e:	bf00      	nop
 8002910:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002912:	bc08      	pop	{r3}
 8002914:	469e      	mov	lr, r3
 8002916:	4770      	bx	lr
