
Timer-ex9.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a64  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000428  08005bf0  08005bf0  00006bf0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006018  08006018  0000800c  2**0
                  CONTENTS
  4 .ARM          00000008  08006018  08006018  00007018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006020  08006020  0000800c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006020  08006020  00007020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006024  08006024  00007024  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08006028  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000013c  2000000c  08006034  0000800c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000148  08006034  00008148  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000800c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e818  00000000  00000000  0000803c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e97  00000000  00000000  00016854  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d50  00000000  00000000  000186f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a60  00000000  00000000  00019440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000269be  00000000  00000000  00019ea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fe88  00000000  00000000  0004085e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f1e3d  00000000  00000000  000506e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00142523  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a50  00000000  00000000  00142568  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  00145fb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005bd4 	.word	0x08005bd4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08005bd4 	.word	0x08005bd4

080001c8 <__aeabi_dmul>:
 80001c8:	b570      	push	{r4, r5, r6, lr}
 80001ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80001ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80001d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001d6:	bf1d      	ittte	ne
 80001d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001dc:	ea94 0f0c 	teqne	r4, ip
 80001e0:	ea95 0f0c 	teqne	r5, ip
 80001e4:	f000 f8de 	bleq	80003a4 <__aeabi_dmul+0x1dc>
 80001e8:	442c      	add	r4, r5
 80001ea:	ea81 0603 	eor.w	r6, r1, r3
 80001ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80001fa:	bf18      	it	ne
 80001fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000200:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000204:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000208:	d038      	beq.n	800027c <__aeabi_dmul+0xb4>
 800020a:	fba0 ce02 	umull	ip, lr, r0, r2
 800020e:	f04f 0500 	mov.w	r5, #0
 8000212:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000216:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800021a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800021e:	f04f 0600 	mov.w	r6, #0
 8000222:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000226:	f09c 0f00 	teq	ip, #0
 800022a:	bf18      	it	ne
 800022c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000230:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000234:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000238:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800023c:	d204      	bcs.n	8000248 <__aeabi_dmul+0x80>
 800023e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000242:	416d      	adcs	r5, r5
 8000244:	eb46 0606 	adc.w	r6, r6, r6
 8000248:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800024c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000250:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000254:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000258:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800025c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000260:	bf88      	it	hi
 8000262:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000266:	d81e      	bhi.n	80002a6 <__aeabi_dmul+0xde>
 8000268:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	bd70      	pop	{r4, r5, r6, pc}
 800027c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000280:	ea46 0101 	orr.w	r1, r6, r1
 8000284:	ea40 0002 	orr.w	r0, r0, r2
 8000288:	ea81 0103 	eor.w	r1, r1, r3
 800028c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000290:	bfc2      	ittt	gt
 8000292:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000296:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800029a:	bd70      	popgt	{r4, r5, r6, pc}
 800029c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002a0:	f04f 0e00 	mov.w	lr, #0
 80002a4:	3c01      	subs	r4, #1
 80002a6:	f300 80ab 	bgt.w	8000400 <__aeabi_dmul+0x238>
 80002aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80002ae:	bfde      	ittt	le
 80002b0:	2000      	movle	r0, #0
 80002b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80002b6:	bd70      	pople	{r4, r5, r6, pc}
 80002b8:	f1c4 0400 	rsb	r4, r4, #0
 80002bc:	3c20      	subs	r4, #32
 80002be:	da35      	bge.n	800032c <__aeabi_dmul+0x164>
 80002c0:	340c      	adds	r4, #12
 80002c2:	dc1b      	bgt.n	80002fc <__aeabi_dmul+0x134>
 80002c4:	f104 0414 	add.w	r4, r4, #20
 80002c8:	f1c4 0520 	rsb	r5, r4, #32
 80002cc:	fa00 f305 	lsl.w	r3, r0, r5
 80002d0:	fa20 f004 	lsr.w	r0, r0, r4
 80002d4:	fa01 f205 	lsl.w	r2, r1, r5
 80002d8:	ea40 0002 	orr.w	r0, r0, r2
 80002dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80002e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80002e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002e8:	fa21 f604 	lsr.w	r6, r1, r4
 80002ec:	eb42 0106 	adc.w	r1, r2, r6
 80002f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f4:	bf08      	it	eq
 80002f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f1c4 040c 	rsb	r4, r4, #12
 8000300:	f1c4 0520 	rsb	r5, r4, #32
 8000304:	fa00 f304 	lsl.w	r3, r0, r4
 8000308:	fa20 f005 	lsr.w	r0, r0, r5
 800030c:	fa01 f204 	lsl.w	r2, r1, r4
 8000310:	ea40 0002 	orr.w	r0, r0, r2
 8000314:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000318:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000324:	bf08      	it	eq
 8000326:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800032a:	bd70      	pop	{r4, r5, r6, pc}
 800032c:	f1c4 0520 	rsb	r5, r4, #32
 8000330:	fa00 f205 	lsl.w	r2, r0, r5
 8000334:	ea4e 0e02 	orr.w	lr, lr, r2
 8000338:	fa20 f304 	lsr.w	r3, r0, r4
 800033c:	fa01 f205 	lsl.w	r2, r1, r5
 8000340:	ea43 0302 	orr.w	r3, r3, r2
 8000344:	fa21 f004 	lsr.w	r0, r1, r4
 8000348:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800034c:	fa21 f204 	lsr.w	r2, r1, r4
 8000350:	ea20 0002 	bic.w	r0, r0, r2
 8000354:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000358:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800035c:	bf08      	it	eq
 800035e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f094 0f00 	teq	r4, #0
 8000368:	d10f      	bne.n	800038a <__aeabi_dmul+0x1c2>
 800036a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800036e:	0040      	lsls	r0, r0, #1
 8000370:	eb41 0101 	adc.w	r1, r1, r1
 8000374:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000378:	bf08      	it	eq
 800037a:	3c01      	subeq	r4, #1
 800037c:	d0f7      	beq.n	800036e <__aeabi_dmul+0x1a6>
 800037e:	ea41 0106 	orr.w	r1, r1, r6
 8000382:	f095 0f00 	teq	r5, #0
 8000386:	bf18      	it	ne
 8000388:	4770      	bxne	lr
 800038a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800038e:	0052      	lsls	r2, r2, #1
 8000390:	eb43 0303 	adc.w	r3, r3, r3
 8000394:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000398:	bf08      	it	eq
 800039a:	3d01      	subeq	r5, #1
 800039c:	d0f7      	beq.n	800038e <__aeabi_dmul+0x1c6>
 800039e:	ea43 0306 	orr.w	r3, r3, r6
 80003a2:	4770      	bx	lr
 80003a4:	ea94 0f0c 	teq	r4, ip
 80003a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003ac:	bf18      	it	ne
 80003ae:	ea95 0f0c 	teqne	r5, ip
 80003b2:	d00c      	beq.n	80003ce <__aeabi_dmul+0x206>
 80003b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003b8:	bf18      	it	ne
 80003ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003be:	d1d1      	bne.n	8000364 <__aeabi_dmul+0x19c>
 80003c0:	ea81 0103 	eor.w	r1, r1, r3
 80003c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd70      	pop	{r4, r5, r6, pc}
 80003ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003d2:	bf06      	itte	eq
 80003d4:	4610      	moveq	r0, r2
 80003d6:	4619      	moveq	r1, r3
 80003d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003dc:	d019      	beq.n	8000412 <__aeabi_dmul+0x24a>
 80003de:	ea94 0f0c 	teq	r4, ip
 80003e2:	d102      	bne.n	80003ea <__aeabi_dmul+0x222>
 80003e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003e8:	d113      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003ea:	ea95 0f0c 	teq	r5, ip
 80003ee:	d105      	bne.n	80003fc <__aeabi_dmul+0x234>
 80003f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003f4:	bf1c      	itt	ne
 80003f6:	4610      	movne	r0, r2
 80003f8:	4619      	movne	r1, r3
 80003fa:	d10a      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003fc:	ea81 0103 	eor.w	r1, r1, r3
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000404:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000408:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800040c:	f04f 0000 	mov.w	r0, #0
 8000410:	bd70      	pop	{r4, r5, r6, pc}
 8000412:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000416:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800041a:	bd70      	pop	{r4, r5, r6, pc}

0800041c <__aeabi_drsub>:
 800041c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000420:	e002      	b.n	8000428 <__adddf3>
 8000422:	bf00      	nop

08000424 <__aeabi_dsub>:
 8000424:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000428 <__adddf3>:
 8000428:	b530      	push	{r4, r5, lr}
 800042a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800042e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000432:	ea94 0f05 	teq	r4, r5
 8000436:	bf08      	it	eq
 8000438:	ea90 0f02 	teqeq	r0, r2
 800043c:	bf1f      	itttt	ne
 800043e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000442:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000446:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800044a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800044e:	f000 80e2 	beq.w	8000616 <__adddf3+0x1ee>
 8000452:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000456:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800045a:	bfb8      	it	lt
 800045c:	426d      	neglt	r5, r5
 800045e:	dd0c      	ble.n	800047a <__adddf3+0x52>
 8000460:	442c      	add	r4, r5
 8000462:	ea80 0202 	eor.w	r2, r0, r2
 8000466:	ea81 0303 	eor.w	r3, r1, r3
 800046a:	ea82 0000 	eor.w	r0, r2, r0
 800046e:	ea83 0101 	eor.w	r1, r3, r1
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	2d36      	cmp	r5, #54	@ 0x36
 800047c:	bf88      	it	hi
 800047e:	bd30      	pophi	{r4, r5, pc}
 8000480:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000484:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000488:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 800048c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000490:	d002      	beq.n	8000498 <__adddf3+0x70>
 8000492:	4240      	negs	r0, r0
 8000494:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000498:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 800049c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004a0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004a4:	d002      	beq.n	80004ac <__adddf3+0x84>
 80004a6:	4252      	negs	r2, r2
 80004a8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004ac:	ea94 0f05 	teq	r4, r5
 80004b0:	f000 80a7 	beq.w	8000602 <__adddf3+0x1da>
 80004b4:	f1a4 0401 	sub.w	r4, r4, #1
 80004b8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004bc:	db0d      	blt.n	80004da <__adddf3+0xb2>
 80004be:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004c2:	fa22 f205 	lsr.w	r2, r2, r5
 80004c6:	1880      	adds	r0, r0, r2
 80004c8:	f141 0100 	adc.w	r1, r1, #0
 80004cc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004d0:	1880      	adds	r0, r0, r2
 80004d2:	fa43 f305 	asr.w	r3, r3, r5
 80004d6:	4159      	adcs	r1, r3
 80004d8:	e00e      	b.n	80004f8 <__adddf3+0xd0>
 80004da:	f1a5 0520 	sub.w	r5, r5, #32
 80004de:	f10e 0e20 	add.w	lr, lr, #32
 80004e2:	2a01      	cmp	r2, #1
 80004e4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004e8:	bf28      	it	cs
 80004ea:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004ee:	fa43 f305 	asr.w	r3, r3, r5
 80004f2:	18c0      	adds	r0, r0, r3
 80004f4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	d507      	bpl.n	800050e <__adddf3+0xe6>
 80004fe:	f04f 0e00 	mov.w	lr, #0
 8000502:	f1dc 0c00 	rsbs	ip, ip, #0
 8000506:	eb7e 0000 	sbcs.w	r0, lr, r0
 800050a:	eb6e 0101 	sbc.w	r1, lr, r1
 800050e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000512:	d31b      	bcc.n	800054c <__adddf3+0x124>
 8000514:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000518:	d30c      	bcc.n	8000534 <__adddf3+0x10c>
 800051a:	0849      	lsrs	r1, r1, #1
 800051c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000520:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000524:	f104 0401 	add.w	r4, r4, #1
 8000528:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800052c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000530:	f080 809a 	bcs.w	8000668 <__adddf3+0x240>
 8000534:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000538:	bf08      	it	eq
 800053a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800053e:	f150 0000 	adcs.w	r0, r0, #0
 8000542:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000546:	ea41 0105 	orr.w	r1, r1, r5
 800054a:	bd30      	pop	{r4, r5, pc}
 800054c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000550:	4140      	adcs	r0, r0
 8000552:	eb41 0101 	adc.w	r1, r1, r1
 8000556:	3c01      	subs	r4, #1
 8000558:	bf28      	it	cs
 800055a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800055e:	d2e9      	bcs.n	8000534 <__adddf3+0x10c>
 8000560:	f091 0f00 	teq	r1, #0
 8000564:	bf04      	itt	eq
 8000566:	4601      	moveq	r1, r0
 8000568:	2000      	moveq	r0, #0
 800056a:	fab1 f381 	clz	r3, r1
 800056e:	bf08      	it	eq
 8000570:	3320      	addeq	r3, #32
 8000572:	f1a3 030b 	sub.w	r3, r3, #11
 8000576:	f1b3 0220 	subs.w	r2, r3, #32
 800057a:	da0c      	bge.n	8000596 <__adddf3+0x16e>
 800057c:	320c      	adds	r2, #12
 800057e:	dd08      	ble.n	8000592 <__adddf3+0x16a>
 8000580:	f102 0c14 	add.w	ip, r2, #20
 8000584:	f1c2 020c 	rsb	r2, r2, #12
 8000588:	fa01 f00c 	lsl.w	r0, r1, ip
 800058c:	fa21 f102 	lsr.w	r1, r1, r2
 8000590:	e00c      	b.n	80005ac <__adddf3+0x184>
 8000592:	f102 0214 	add.w	r2, r2, #20
 8000596:	bfd8      	it	le
 8000598:	f1c2 0c20 	rsble	ip, r2, #32
 800059c:	fa01 f102 	lsl.w	r1, r1, r2
 80005a0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005a4:	bfdc      	itt	le
 80005a6:	ea41 010c 	orrle.w	r1, r1, ip
 80005aa:	4090      	lslle	r0, r2
 80005ac:	1ae4      	subs	r4, r4, r3
 80005ae:	bfa2      	ittt	ge
 80005b0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005b4:	4329      	orrge	r1, r5
 80005b6:	bd30      	popge	{r4, r5, pc}
 80005b8:	ea6f 0404 	mvn.w	r4, r4
 80005bc:	3c1f      	subs	r4, #31
 80005be:	da1c      	bge.n	80005fa <__adddf3+0x1d2>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc0e      	bgt.n	80005e2 <__adddf3+0x1ba>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0220 	rsb	r2, r4, #32
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f302 	lsl.w	r3, r1, r2
 80005d4:	ea40 0003 	orr.w	r0, r0, r3
 80005d8:	fa21 f304 	lsr.w	r3, r1, r4
 80005dc:	ea45 0103 	orr.w	r1, r5, r3
 80005e0:	bd30      	pop	{r4, r5, pc}
 80005e2:	f1c4 040c 	rsb	r4, r4, #12
 80005e6:	f1c4 0220 	rsb	r2, r4, #32
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 f304 	lsl.w	r3, r1, r4
 80005f2:	ea40 0003 	orr.w	r0, r0, r3
 80005f6:	4629      	mov	r1, r5
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	fa21 f004 	lsr.w	r0, r1, r4
 80005fe:	4629      	mov	r1, r5
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	f094 0f00 	teq	r4, #0
 8000606:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800060a:	bf06      	itte	eq
 800060c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000610:	3401      	addeq	r4, #1
 8000612:	3d01      	subne	r5, #1
 8000614:	e74e      	b.n	80004b4 <__adddf3+0x8c>
 8000616:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061a:	bf18      	it	ne
 800061c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000620:	d029      	beq.n	8000676 <__adddf3+0x24e>
 8000622:	ea94 0f05 	teq	r4, r5
 8000626:	bf08      	it	eq
 8000628:	ea90 0f02 	teqeq	r0, r2
 800062c:	d005      	beq.n	800063a <__adddf3+0x212>
 800062e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000632:	bf04      	itt	eq
 8000634:	4619      	moveq	r1, r3
 8000636:	4610      	moveq	r0, r2
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	ea91 0f03 	teq	r1, r3
 800063e:	bf1e      	ittt	ne
 8000640:	2100      	movne	r1, #0
 8000642:	2000      	movne	r0, #0
 8000644:	bd30      	popne	{r4, r5, pc}
 8000646:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800064a:	d105      	bne.n	8000658 <__adddf3+0x230>
 800064c:	0040      	lsls	r0, r0, #1
 800064e:	4149      	adcs	r1, r1
 8000650:	bf28      	it	cs
 8000652:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000656:	bd30      	pop	{r4, r5, pc}
 8000658:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800065c:	bf3c      	itt	cc
 800065e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000662:	bd30      	popcc	{r4, r5, pc}
 8000664:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000668:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 800066c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000670:	f04f 0000 	mov.w	r0, #0
 8000674:	bd30      	pop	{r4, r5, pc}
 8000676:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800067a:	bf1a      	itte	ne
 800067c:	4619      	movne	r1, r3
 800067e:	4610      	movne	r0, r2
 8000680:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000684:	bf1c      	itt	ne
 8000686:	460b      	movne	r3, r1
 8000688:	4602      	movne	r2, r0
 800068a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800068e:	bf06      	itte	eq
 8000690:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000694:	ea91 0f03 	teqeq	r1, r3
 8000698:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 800069c:	bd30      	pop	{r4, r5, pc}
 800069e:	bf00      	nop

080006a0 <__aeabi_ui2d>:
 80006a0:	f090 0f00 	teq	r0, #0
 80006a4:	bf04      	itt	eq
 80006a6:	2100      	moveq	r1, #0
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006b0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006b4:	f04f 0500 	mov.w	r5, #0
 80006b8:	f04f 0100 	mov.w	r1, #0
 80006bc:	e750      	b.n	8000560 <__adddf3+0x138>
 80006be:	bf00      	nop

080006c0 <__aeabi_i2d>:
 80006c0:	f090 0f00 	teq	r0, #0
 80006c4:	bf04      	itt	eq
 80006c6:	2100      	moveq	r1, #0
 80006c8:	4770      	bxeq	lr
 80006ca:	b530      	push	{r4, r5, lr}
 80006cc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006d0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006d4:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80006d8:	bf48      	it	mi
 80006da:	4240      	negmi	r0, r0
 80006dc:	f04f 0100 	mov.w	r1, #0
 80006e0:	e73e      	b.n	8000560 <__adddf3+0x138>
 80006e2:	bf00      	nop

080006e4 <__aeabi_f2d>:
 80006e4:	0042      	lsls	r2, r0, #1
 80006e6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006ea:	ea4f 0131 	mov.w	r1, r1, rrx
 80006ee:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006f2:	bf1f      	itttt	ne
 80006f4:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80006f8:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80006fc:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000700:	4770      	bxne	lr
 8000702:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000706:	bf08      	it	eq
 8000708:	4770      	bxeq	lr
 800070a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800070e:	bf04      	itt	eq
 8000710:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000714:	4770      	bxeq	lr
 8000716:	b530      	push	{r4, r5, lr}
 8000718:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	e71c      	b.n	8000560 <__adddf3+0x138>
 8000726:	bf00      	nop

08000728 <__aeabi_ul2d>:
 8000728:	ea50 0201 	orrs.w	r2, r0, r1
 800072c:	bf08      	it	eq
 800072e:	4770      	bxeq	lr
 8000730:	b530      	push	{r4, r5, lr}
 8000732:	f04f 0500 	mov.w	r5, #0
 8000736:	e00a      	b.n	800074e <__aeabi_l2d+0x16>

08000738 <__aeabi_l2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000746:	d502      	bpl.n	800074e <__aeabi_l2d+0x16>
 8000748:	4240      	negs	r0, r0
 800074a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800074e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000752:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000756:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800075a:	f43f aed8 	beq.w	800050e <__adddf3+0xe6>
 800075e:	f04f 0203 	mov.w	r2, #3
 8000762:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000766:	bf18      	it	ne
 8000768:	3203      	addne	r2, #3
 800076a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800076e:	bf18      	it	ne
 8000770:	3203      	addne	r2, #3
 8000772:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000776:	f1c2 0320 	rsb	r3, r2, #32
 800077a:	fa00 fc03 	lsl.w	ip, r0, r3
 800077e:	fa20 f002 	lsr.w	r0, r0, r2
 8000782:	fa01 fe03 	lsl.w	lr, r1, r3
 8000786:	ea40 000e 	orr.w	r0, r0, lr
 800078a:	fa21 f102 	lsr.w	r1, r1, r2
 800078e:	4414      	add	r4, r2
 8000790:	e6bd      	b.n	800050e <__adddf3+0xe6>
 8000792:	bf00      	nop

08000794 <__aeabi_d2uiz>:
 8000794:	004a      	lsls	r2, r1, #1
 8000796:	d211      	bcs.n	80007bc <__aeabi_d2uiz+0x28>
 8000798:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 800079c:	d211      	bcs.n	80007c2 <__aeabi_d2uiz+0x2e>
 800079e:	d50d      	bpl.n	80007bc <__aeabi_d2uiz+0x28>
 80007a0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80007a4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007a8:	d40e      	bmi.n	80007c8 <__aeabi_d2uiz+0x34>
 80007aa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007ae:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80007b2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80007b6:	fa23 f002 	lsr.w	r0, r3, r2
 80007ba:	4770      	bx	lr
 80007bc:	f04f 0000 	mov.w	r0, #0
 80007c0:	4770      	bx	lr
 80007c2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80007c6:	d102      	bne.n	80007ce <__aeabi_d2uiz+0x3a>
 80007c8:	f04f 30ff 	mov.w	r0, #4294967295
 80007cc:	4770      	bx	lr
 80007ce:	f04f 0000 	mov.w	r0, #0
 80007d2:	4770      	bx	lr

080007d4 <__aeabi_d2f>:
 80007d4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80007d8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80007dc:	bf24      	itt	cs
 80007de:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80007e2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80007e6:	d90d      	bls.n	8000804 <__aeabi_d2f+0x30>
 80007e8:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80007ec:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80007f0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80007f4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80007f8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80007fc:	bf08      	it	eq
 80007fe:	f020 0001 	biceq.w	r0, r0, #1
 8000802:	4770      	bx	lr
 8000804:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000808:	d121      	bne.n	800084e <__aeabi_d2f+0x7a>
 800080a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 800080e:	bfbc      	itt	lt
 8000810:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000814:	4770      	bxlt	lr
 8000816:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800081a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800081e:	f1c2 0218 	rsb	r2, r2, #24
 8000822:	f1c2 0c20 	rsb	ip, r2, #32
 8000826:	fa10 f30c 	lsls.w	r3, r0, ip
 800082a:	fa20 f002 	lsr.w	r0, r0, r2
 800082e:	bf18      	it	ne
 8000830:	f040 0001 	orrne.w	r0, r0, #1
 8000834:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000838:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800083c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000840:	ea40 000c 	orr.w	r0, r0, ip
 8000844:	fa23 f302 	lsr.w	r3, r3, r2
 8000848:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800084c:	e7cc      	b.n	80007e8 <__aeabi_d2f+0x14>
 800084e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000852:	d107      	bne.n	8000864 <__aeabi_d2f+0x90>
 8000854:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000858:	bf1e      	ittt	ne
 800085a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 800085e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000862:	4770      	bxne	lr
 8000864:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000868:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 800086c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000870:	4770      	bx	lr
 8000872:	bf00      	nop

08000874 <__aeabi_uldivmod>:
 8000874:	b953      	cbnz	r3, 800088c <__aeabi_uldivmod+0x18>
 8000876:	b94a      	cbnz	r2, 800088c <__aeabi_uldivmod+0x18>
 8000878:	2900      	cmp	r1, #0
 800087a:	bf08      	it	eq
 800087c:	2800      	cmpeq	r0, #0
 800087e:	bf1c      	itt	ne
 8000880:	f04f 31ff 	movne.w	r1, #4294967295
 8000884:	f04f 30ff 	movne.w	r0, #4294967295
 8000888:	f000 b96a 	b.w	8000b60 <__aeabi_idiv0>
 800088c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000890:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000894:	f000 f806 	bl	80008a4 <__udivmoddi4>
 8000898:	f8dd e004 	ldr.w	lr, [sp, #4]
 800089c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008a0:	b004      	add	sp, #16
 80008a2:	4770      	bx	lr

080008a4 <__udivmoddi4>:
 80008a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008a8:	9d08      	ldr	r5, [sp, #32]
 80008aa:	460c      	mov	r4, r1
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d14e      	bne.n	800094e <__udivmoddi4+0xaa>
 80008b0:	4694      	mov	ip, r2
 80008b2:	458c      	cmp	ip, r1
 80008b4:	4686      	mov	lr, r0
 80008b6:	fab2 f282 	clz	r2, r2
 80008ba:	d962      	bls.n	8000982 <__udivmoddi4+0xde>
 80008bc:	b14a      	cbz	r2, 80008d2 <__udivmoddi4+0x2e>
 80008be:	f1c2 0320 	rsb	r3, r2, #32
 80008c2:	4091      	lsls	r1, r2
 80008c4:	fa20 f303 	lsr.w	r3, r0, r3
 80008c8:	fa0c fc02 	lsl.w	ip, ip, r2
 80008cc:	4319      	orrs	r1, r3
 80008ce:	fa00 fe02 	lsl.w	lr, r0, r2
 80008d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008d6:	fa1f f68c 	uxth.w	r6, ip
 80008da:	fbb1 f4f7 	udiv	r4, r1, r7
 80008de:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008e2:	fb07 1114 	mls	r1, r7, r4, r1
 80008e6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008ea:	fb04 f106 	mul.w	r1, r4, r6
 80008ee:	4299      	cmp	r1, r3
 80008f0:	d90a      	bls.n	8000908 <__udivmoddi4+0x64>
 80008f2:	eb1c 0303 	adds.w	r3, ip, r3
 80008f6:	f104 30ff 	add.w	r0, r4, #4294967295
 80008fa:	f080 8112 	bcs.w	8000b22 <__udivmoddi4+0x27e>
 80008fe:	4299      	cmp	r1, r3
 8000900:	f240 810f 	bls.w	8000b22 <__udivmoddi4+0x27e>
 8000904:	3c02      	subs	r4, #2
 8000906:	4463      	add	r3, ip
 8000908:	1a59      	subs	r1, r3, r1
 800090a:	fa1f f38e 	uxth.w	r3, lr
 800090e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000912:	fb07 1110 	mls	r1, r7, r0, r1
 8000916:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800091a:	fb00 f606 	mul.w	r6, r0, r6
 800091e:	429e      	cmp	r6, r3
 8000920:	d90a      	bls.n	8000938 <__udivmoddi4+0x94>
 8000922:	eb1c 0303 	adds.w	r3, ip, r3
 8000926:	f100 31ff 	add.w	r1, r0, #4294967295
 800092a:	f080 80fc 	bcs.w	8000b26 <__udivmoddi4+0x282>
 800092e:	429e      	cmp	r6, r3
 8000930:	f240 80f9 	bls.w	8000b26 <__udivmoddi4+0x282>
 8000934:	4463      	add	r3, ip
 8000936:	3802      	subs	r0, #2
 8000938:	1b9b      	subs	r3, r3, r6
 800093a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800093e:	2100      	movs	r1, #0
 8000940:	b11d      	cbz	r5, 800094a <__udivmoddi4+0xa6>
 8000942:	40d3      	lsrs	r3, r2
 8000944:	2200      	movs	r2, #0
 8000946:	e9c5 3200 	strd	r3, r2, [r5]
 800094a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800094e:	428b      	cmp	r3, r1
 8000950:	d905      	bls.n	800095e <__udivmoddi4+0xba>
 8000952:	b10d      	cbz	r5, 8000958 <__udivmoddi4+0xb4>
 8000954:	e9c5 0100 	strd	r0, r1, [r5]
 8000958:	2100      	movs	r1, #0
 800095a:	4608      	mov	r0, r1
 800095c:	e7f5      	b.n	800094a <__udivmoddi4+0xa6>
 800095e:	fab3 f183 	clz	r1, r3
 8000962:	2900      	cmp	r1, #0
 8000964:	d146      	bne.n	80009f4 <__udivmoddi4+0x150>
 8000966:	42a3      	cmp	r3, r4
 8000968:	d302      	bcc.n	8000970 <__udivmoddi4+0xcc>
 800096a:	4290      	cmp	r0, r2
 800096c:	f0c0 80f0 	bcc.w	8000b50 <__udivmoddi4+0x2ac>
 8000970:	1a86      	subs	r6, r0, r2
 8000972:	eb64 0303 	sbc.w	r3, r4, r3
 8000976:	2001      	movs	r0, #1
 8000978:	2d00      	cmp	r5, #0
 800097a:	d0e6      	beq.n	800094a <__udivmoddi4+0xa6>
 800097c:	e9c5 6300 	strd	r6, r3, [r5]
 8000980:	e7e3      	b.n	800094a <__udivmoddi4+0xa6>
 8000982:	2a00      	cmp	r2, #0
 8000984:	f040 8090 	bne.w	8000aa8 <__udivmoddi4+0x204>
 8000988:	eba1 040c 	sub.w	r4, r1, ip
 800098c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000990:	fa1f f78c 	uxth.w	r7, ip
 8000994:	2101      	movs	r1, #1
 8000996:	fbb4 f6f8 	udiv	r6, r4, r8
 800099a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800099e:	fb08 4416 	mls	r4, r8, r6, r4
 80009a2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80009a6:	fb07 f006 	mul.w	r0, r7, r6
 80009aa:	4298      	cmp	r0, r3
 80009ac:	d908      	bls.n	80009c0 <__udivmoddi4+0x11c>
 80009ae:	eb1c 0303 	adds.w	r3, ip, r3
 80009b2:	f106 34ff 	add.w	r4, r6, #4294967295
 80009b6:	d202      	bcs.n	80009be <__udivmoddi4+0x11a>
 80009b8:	4298      	cmp	r0, r3
 80009ba:	f200 80cd 	bhi.w	8000b58 <__udivmoddi4+0x2b4>
 80009be:	4626      	mov	r6, r4
 80009c0:	1a1c      	subs	r4, r3, r0
 80009c2:	fa1f f38e 	uxth.w	r3, lr
 80009c6:	fbb4 f0f8 	udiv	r0, r4, r8
 80009ca:	fb08 4410 	mls	r4, r8, r0, r4
 80009ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80009d2:	fb00 f707 	mul.w	r7, r0, r7
 80009d6:	429f      	cmp	r7, r3
 80009d8:	d908      	bls.n	80009ec <__udivmoddi4+0x148>
 80009da:	eb1c 0303 	adds.w	r3, ip, r3
 80009de:	f100 34ff 	add.w	r4, r0, #4294967295
 80009e2:	d202      	bcs.n	80009ea <__udivmoddi4+0x146>
 80009e4:	429f      	cmp	r7, r3
 80009e6:	f200 80b0 	bhi.w	8000b4a <__udivmoddi4+0x2a6>
 80009ea:	4620      	mov	r0, r4
 80009ec:	1bdb      	subs	r3, r3, r7
 80009ee:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80009f2:	e7a5      	b.n	8000940 <__udivmoddi4+0x9c>
 80009f4:	f1c1 0620 	rsb	r6, r1, #32
 80009f8:	408b      	lsls	r3, r1
 80009fa:	fa22 f706 	lsr.w	r7, r2, r6
 80009fe:	431f      	orrs	r7, r3
 8000a00:	fa20 fc06 	lsr.w	ip, r0, r6
 8000a04:	fa04 f301 	lsl.w	r3, r4, r1
 8000a08:	ea43 030c 	orr.w	r3, r3, ip
 8000a0c:	40f4      	lsrs	r4, r6
 8000a0e:	fa00 f801 	lsl.w	r8, r0, r1
 8000a12:	0c38      	lsrs	r0, r7, #16
 8000a14:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000a18:	fbb4 fef0 	udiv	lr, r4, r0
 8000a1c:	fa1f fc87 	uxth.w	ip, r7
 8000a20:	fb00 441e 	mls	r4, r0, lr, r4
 8000a24:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000a28:	fb0e f90c 	mul.w	r9, lr, ip
 8000a2c:	45a1      	cmp	r9, r4
 8000a2e:	fa02 f201 	lsl.w	r2, r2, r1
 8000a32:	d90a      	bls.n	8000a4a <__udivmoddi4+0x1a6>
 8000a34:	193c      	adds	r4, r7, r4
 8000a36:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000a3a:	f080 8084 	bcs.w	8000b46 <__udivmoddi4+0x2a2>
 8000a3e:	45a1      	cmp	r9, r4
 8000a40:	f240 8081 	bls.w	8000b46 <__udivmoddi4+0x2a2>
 8000a44:	f1ae 0e02 	sub.w	lr, lr, #2
 8000a48:	443c      	add	r4, r7
 8000a4a:	eba4 0409 	sub.w	r4, r4, r9
 8000a4e:	fa1f f983 	uxth.w	r9, r3
 8000a52:	fbb4 f3f0 	udiv	r3, r4, r0
 8000a56:	fb00 4413 	mls	r4, r0, r3, r4
 8000a5a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000a5e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000a62:	45a4      	cmp	ip, r4
 8000a64:	d907      	bls.n	8000a76 <__udivmoddi4+0x1d2>
 8000a66:	193c      	adds	r4, r7, r4
 8000a68:	f103 30ff 	add.w	r0, r3, #4294967295
 8000a6c:	d267      	bcs.n	8000b3e <__udivmoddi4+0x29a>
 8000a6e:	45a4      	cmp	ip, r4
 8000a70:	d965      	bls.n	8000b3e <__udivmoddi4+0x29a>
 8000a72:	3b02      	subs	r3, #2
 8000a74:	443c      	add	r4, r7
 8000a76:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000a7a:	fba0 9302 	umull	r9, r3, r0, r2
 8000a7e:	eba4 040c 	sub.w	r4, r4, ip
 8000a82:	429c      	cmp	r4, r3
 8000a84:	46ce      	mov	lr, r9
 8000a86:	469c      	mov	ip, r3
 8000a88:	d351      	bcc.n	8000b2e <__udivmoddi4+0x28a>
 8000a8a:	d04e      	beq.n	8000b2a <__udivmoddi4+0x286>
 8000a8c:	b155      	cbz	r5, 8000aa4 <__udivmoddi4+0x200>
 8000a8e:	ebb8 030e 	subs.w	r3, r8, lr
 8000a92:	eb64 040c 	sbc.w	r4, r4, ip
 8000a96:	fa04 f606 	lsl.w	r6, r4, r6
 8000a9a:	40cb      	lsrs	r3, r1
 8000a9c:	431e      	orrs	r6, r3
 8000a9e:	40cc      	lsrs	r4, r1
 8000aa0:	e9c5 6400 	strd	r6, r4, [r5]
 8000aa4:	2100      	movs	r1, #0
 8000aa6:	e750      	b.n	800094a <__udivmoddi4+0xa6>
 8000aa8:	f1c2 0320 	rsb	r3, r2, #32
 8000aac:	fa20 f103 	lsr.w	r1, r0, r3
 8000ab0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ab4:	fa24 f303 	lsr.w	r3, r4, r3
 8000ab8:	4094      	lsls	r4, r2
 8000aba:	430c      	orrs	r4, r1
 8000abc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ac0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ac4:	fa1f f78c 	uxth.w	r7, ip
 8000ac8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000acc:	fb08 3110 	mls	r1, r8, r0, r3
 8000ad0:	0c23      	lsrs	r3, r4, #16
 8000ad2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ad6:	fb00 f107 	mul.w	r1, r0, r7
 8000ada:	4299      	cmp	r1, r3
 8000adc:	d908      	bls.n	8000af0 <__udivmoddi4+0x24c>
 8000ade:	eb1c 0303 	adds.w	r3, ip, r3
 8000ae2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000ae6:	d22c      	bcs.n	8000b42 <__udivmoddi4+0x29e>
 8000ae8:	4299      	cmp	r1, r3
 8000aea:	d92a      	bls.n	8000b42 <__udivmoddi4+0x29e>
 8000aec:	3802      	subs	r0, #2
 8000aee:	4463      	add	r3, ip
 8000af0:	1a5b      	subs	r3, r3, r1
 8000af2:	b2a4      	uxth	r4, r4
 8000af4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000af8:	fb08 3311 	mls	r3, r8, r1, r3
 8000afc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b00:	fb01 f307 	mul.w	r3, r1, r7
 8000b04:	42a3      	cmp	r3, r4
 8000b06:	d908      	bls.n	8000b1a <__udivmoddi4+0x276>
 8000b08:	eb1c 0404 	adds.w	r4, ip, r4
 8000b0c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000b10:	d213      	bcs.n	8000b3a <__udivmoddi4+0x296>
 8000b12:	42a3      	cmp	r3, r4
 8000b14:	d911      	bls.n	8000b3a <__udivmoddi4+0x296>
 8000b16:	3902      	subs	r1, #2
 8000b18:	4464      	add	r4, ip
 8000b1a:	1ae4      	subs	r4, r4, r3
 8000b1c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000b20:	e739      	b.n	8000996 <__udivmoddi4+0xf2>
 8000b22:	4604      	mov	r4, r0
 8000b24:	e6f0      	b.n	8000908 <__udivmoddi4+0x64>
 8000b26:	4608      	mov	r0, r1
 8000b28:	e706      	b.n	8000938 <__udivmoddi4+0x94>
 8000b2a:	45c8      	cmp	r8, r9
 8000b2c:	d2ae      	bcs.n	8000a8c <__udivmoddi4+0x1e8>
 8000b2e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000b32:	eb63 0c07 	sbc.w	ip, r3, r7
 8000b36:	3801      	subs	r0, #1
 8000b38:	e7a8      	b.n	8000a8c <__udivmoddi4+0x1e8>
 8000b3a:	4631      	mov	r1, r6
 8000b3c:	e7ed      	b.n	8000b1a <__udivmoddi4+0x276>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	e799      	b.n	8000a76 <__udivmoddi4+0x1d2>
 8000b42:	4630      	mov	r0, r6
 8000b44:	e7d4      	b.n	8000af0 <__udivmoddi4+0x24c>
 8000b46:	46d6      	mov	lr, sl
 8000b48:	e77f      	b.n	8000a4a <__udivmoddi4+0x1a6>
 8000b4a:	4463      	add	r3, ip
 8000b4c:	3802      	subs	r0, #2
 8000b4e:	e74d      	b.n	80009ec <__udivmoddi4+0x148>
 8000b50:	4606      	mov	r6, r0
 8000b52:	4623      	mov	r3, r4
 8000b54:	4608      	mov	r0, r1
 8000b56:	e70f      	b.n	8000978 <__udivmoddi4+0xd4>
 8000b58:	3e02      	subs	r6, #2
 8000b5a:	4463      	add	r3, ip
 8000b5c:	e730      	b.n	80009c0 <__udivmoddi4+0x11c>
 8000b5e:	bf00      	nop

08000b60 <__aeabi_idiv0>:
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop
 8000b64:	0000      	movs	r0, r0
	...

08000b68 <main>:
DMA_HandleTypeDef hdma_tim2_ch1;

#define PI    3.14159
#define ASR   1.8 //360 / 200 = 1.8

int main(void) {
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	f5ad 7d4a 	sub.w	sp, sp, #808	@ 0x328
 8000b6e:	af00      	add	r7, sp, #0
  uint32_t IV[200];
  float angle;

  HAL_Init();
 8000b70:	f000 fafc 	bl	800116c <HAL_Init>

  Nucleo_BSP_Init();
 8000b74:	f000 f900 	bl	8000d78 <Nucleo_BSP_Init>
  MX_TIM2_Init();
 8000b78:	f000 f874 	bl	8000c64 <MX_TIM2_Init>

  for (uint8_t i = 0; i < 200; i++) {
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	f887 3327 	strb.w	r3, [r7, #807]	@ 0x327
 8000b82:	e055      	b.n	8000c30 <main+0xc8>
    angle = ASR*(float)i;
 8000b84:	f897 3327 	ldrb.w	r3, [r7, #807]	@ 0x327
 8000b88:	ee07 3a90 	vmov	s15, r3
 8000b8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000b90:	ee17 0a90 	vmov	r0, s15
 8000b94:	f7ff fda6 	bl	80006e4 <__aeabi_f2d>
 8000b98:	a32e      	add	r3, pc, #184	@ (adr r3, 8000c54 <main+0xec>)
 8000b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b9e:	f7ff fb13 	bl	80001c8 <__aeabi_dmul>
 8000ba2:	4602      	mov	r2, r0
 8000ba4:	460b      	mov	r3, r1
 8000ba6:	4610      	mov	r0, r2
 8000ba8:	4619      	mov	r1, r3
 8000baa:	f7ff fe13 	bl	80007d4 <__aeabi_d2f>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	f8c7 3320 	str.w	r3, [r7, #800]	@ 0x320
    IV[i] = (uint16_t) rint(100 + 99*sinf(angle*(PI/180)));
 8000bb4:	f8d7 0320 	ldr.w	r0, [r7, #800]	@ 0x320
 8000bb8:	f7ff fd94 	bl	80006e4 <__aeabi_f2d>
 8000bbc:	a327      	add	r3, pc, #156	@ (adr r3, 8000c5c <main+0xf4>)
 8000bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bc2:	f7ff fb01 	bl	80001c8 <__aeabi_dmul>
 8000bc6:	4602      	mov	r2, r0
 8000bc8:	460b      	mov	r3, r1
 8000bca:	4610      	mov	r0, r2
 8000bcc:	4619      	mov	r1, r3
 8000bce:	f7ff fe01 	bl	80007d4 <__aeabi_d2f>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	ee00 3a10 	vmov	s0, r3
 8000bd8:	f004 fa36 	bl	8005048 <sinf>
 8000bdc:	eef0 7a40 	vmov.f32	s15, s0
 8000be0:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8000c48 <main+0xe0>
 8000be4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000be8:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8000c4c <main+0xe4>
 8000bec:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000bf0:	ee17 0a90 	vmov	r0, s15
 8000bf4:	f7ff fd76 	bl	80006e4 <__aeabi_f2d>
 8000bf8:	4602      	mov	r2, r0
 8000bfa:	460b      	mov	r3, r1
 8000bfc:	ec43 2b10 	vmov	d0, r2, r3
 8000c00:	f004 fa68 	bl	80050d4 <rint>
 8000c04:	ec53 2b10 	vmov	r2, r3, d0
 8000c08:	4610      	mov	r0, r2
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	f7ff fdc2 	bl	8000794 <__aeabi_d2uiz>
 8000c10:	4603      	mov	r3, r0
 8000c12:	b29b      	uxth	r3, r3
 8000c14:	f897 2327 	ldrb.w	r2, [r7, #807]	@ 0x327
 8000c18:	4619      	mov	r1, r3
 8000c1a:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 8000c1e:	f5a3 734a 	sub.w	r3, r3, #808	@ 0x328
 8000c22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (uint8_t i = 0; i < 200; i++) {
 8000c26:	f897 3327 	ldrb.w	r3, [r7, #807]	@ 0x327
 8000c2a:	3301      	adds	r3, #1
 8000c2c:	f887 3327 	strb.w	r3, [r7, #807]	@ 0x327
 8000c30:	f897 3327 	ldrb.w	r3, [r7, #807]	@ 0x327
 8000c34:	2bc7      	cmp	r3, #199	@ 0xc7
 8000c36:	d9a5      	bls.n	8000b84 <main+0x1c>
  }

  HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_1, (uint32_t *)IV, 200);
 8000c38:	463a      	mov	r2, r7
 8000c3a:	23c8      	movs	r3, #200	@ 0xc8
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	4804      	ldr	r0, [pc, #16]	@ (8000c50 <main+0xe8>)
 8000c40:	f002 fb8c 	bl	800335c <HAL_TIM_PWM_Start_DMA>

  while (1);
 8000c44:	bf00      	nop
 8000c46:	e7fd      	b.n	8000c44 <main+0xdc>
 8000c48:	42c60000 	.word	0x42c60000
 8000c4c:	42c80000 	.word	0x42c80000
 8000c50:	20000028 	.word	0x20000028
 8000c54:	cccccccd 	.word	0xcccccccd
 8000c58:	3ffccccc 	.word	0x3ffccccc
 8000c5c:	a50de270 	.word	0xa50de270
 8000c60:	3f91df45 	.word	0x3f91df45

08000c64 <MX_TIM2_Init>:
}

/* TIM2 init function */
void MX_TIM2_Init(void) {
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b08c      	sub	sp, #48	@ 0x30
 8000c68:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC;
  TIM_ClockConfigTypeDef sClockSourceConfig;

  htim2.Instance = TIM2;
 8000c6a:	4b2a      	ldr	r3, [pc, #168]	@ (8000d14 <MX_TIM2_Init+0xb0>)
 8000c6c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000c70:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 39;
 8000c72:	4b28      	ldr	r3, [pc, #160]	@ (8000d14 <MX_TIM2_Init+0xb0>)
 8000c74:	2227      	movs	r2, #39	@ 0x27
 8000c76:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c78:	4b26      	ldr	r3, [pc, #152]	@ (8000d14 <MX_TIM2_Init+0xb0>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 199;
 8000c7e:	4b25      	ldr	r3, [pc, #148]	@ (8000d14 <MX_TIM2_Init+0xb0>)
 8000c80:	22c7      	movs	r2, #199	@ 0xc7
 8000c82:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c84:	4b23      	ldr	r3, [pc, #140]	@ (8000d14 <MX_TIM2_Init+0xb0>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	611a      	str	r2, [r3, #16]
  HAL_TIM_PWM_Init(&htim2);
 8000c8a:	4822      	ldr	r0, [pc, #136]	@ (8000d14 <MX_TIM2_Init+0xb0>)
 8000c8c:	f002 fb0e 	bl	80032ac <HAL_TIM_PWM_Init>

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c90:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c94:	607b      	str	r3, [r7, #4]
  HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig);
 8000c96:	1d3b      	adds	r3, r7, #4
 8000c98:	4619      	mov	r1, r3
 8000c9a:	481e      	ldr	r0, [pc, #120]	@ (8000d14 <MX_TIM2_Init+0xb0>)
 8000c9c:	f002 fe92 	bl	80039c4 <HAL_TIM_ConfigClockSource>

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ca0:	2360      	movs	r3, #96	@ 0x60
 8000ca2:	617b      	str	r3, [r7, #20]
  sConfigOC.Pulse = 0;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	61bb      	str	r3, [r7, #24]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	61fb      	str	r3, [r7, #28]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cac:	2300      	movs	r3, #0
 8000cae:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1);
 8000cb0:	f107 0314 	add.w	r3, r7, #20
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	4816      	ldr	r0, [pc, #88]	@ (8000d14 <MX_TIM2_Init+0xb0>)
 8000cba:	f002 fd6f 	bl	800379c <HAL_TIM_PWM_ConfigChannel>

  hdma_tim2_ch1.Instance = DMA1_Channel5;
 8000cbe:	4b16      	ldr	r3, [pc, #88]	@ (8000d18 <MX_TIM2_Init+0xb4>)
 8000cc0:	4a16      	ldr	r2, [pc, #88]	@ (8000d1c <MX_TIM2_Init+0xb8>)
 8000cc2:	601a      	str	r2, [r3, #0]
  hdma_tim2_ch1.Init.Request = DMA_REQUEST_4;
 8000cc4:	4b14      	ldr	r3, [pc, #80]	@ (8000d18 <MX_TIM2_Init+0xb4>)
 8000cc6:	2204      	movs	r2, #4
 8000cc8:	605a      	str	r2, [r3, #4]
  hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000cca:	4b13      	ldr	r3, [pc, #76]	@ (8000d18 <MX_TIM2_Init+0xb4>)
 8000ccc:	2210      	movs	r2, #16
 8000cce:	609a      	str	r2, [r3, #8]
  hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000cd0:	4b11      	ldr	r3, [pc, #68]	@ (8000d18 <MX_TIM2_Init+0xb4>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	60da      	str	r2, [r3, #12]
  hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000cd6:	4b10      	ldr	r3, [pc, #64]	@ (8000d18 <MX_TIM2_Init+0xb4>)
 8000cd8:	2280      	movs	r2, #128	@ 0x80
 8000cda:	611a      	str	r2, [r3, #16]
  hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000cdc:	4b0e      	ldr	r3, [pc, #56]	@ (8000d18 <MX_TIM2_Init+0xb4>)
 8000cde:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000ce2:	615a      	str	r2, [r3, #20]
  hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000ce4:	4b0c      	ldr	r3, [pc, #48]	@ (8000d18 <MX_TIM2_Init+0xb4>)
 8000ce6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000cea:	619a      	str	r2, [r3, #24]
  hdma_tim2_ch1.Init.Mode = DMA_CIRCULAR;
 8000cec:	4b0a      	ldr	r3, [pc, #40]	@ (8000d18 <MX_TIM2_Init+0xb4>)
 8000cee:	2220      	movs	r2, #32
 8000cf0:	61da      	str	r2, [r3, #28]
  hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000cf2:	4b09      	ldr	r3, [pc, #36]	@ (8000d18 <MX_TIM2_Init+0xb4>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	621a      	str	r2, [r3, #32]
  HAL_DMA_Init(&hdma_tim2_ch1);
 8000cf8:	4807      	ldr	r0, [pc, #28]	@ (8000d18 <MX_TIM2_Init+0xb4>)
 8000cfa:	f000 fbe1 	bl	80014c0 <HAL_DMA_Init>

  /* Several peripheral DMA handle pointers point to the same DMA handle.
   Be aware that there is only one channel to perform all the requested DMAs. */
  __HAL_LINKDMA(&htim2, hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8000cfe:	4b05      	ldr	r3, [pc, #20]	@ (8000d14 <MX_TIM2_Init+0xb0>)
 8000d00:	4a05      	ldr	r2, [pc, #20]	@ (8000d18 <MX_TIM2_Init+0xb4>)
 8000d02:	625a      	str	r2, [r3, #36]	@ 0x24
 8000d04:	4b04      	ldr	r3, [pc, #16]	@ (8000d18 <MX_TIM2_Init+0xb4>)
 8000d06:	4a03      	ldr	r2, [pc, #12]	@ (8000d14 <MX_TIM2_Init+0xb0>)
 8000d08:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000d0a:	bf00      	nop
 8000d0c:	3730      	adds	r7, #48	@ 0x30
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	20000028 	.word	0x20000028
 8000d18:	20000074 	.word	0x20000074
 8000d1c:	40020058 	.word	0x40020058

08000d20 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_base) {
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b088      	sub	sp, #32
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  if (htim_base->Instance == TIM2) {
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000d30:	d11c      	bne.n	8000d6c <HAL_TIM_PWM_MspInit+0x4c>
    __TIM2_CLK_ENABLE();
 8000d32:	4b10      	ldr	r3, [pc, #64]	@ (8000d74 <HAL_TIM_PWM_MspInit+0x54>)
 8000d34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d36:	4a0f      	ldr	r2, [pc, #60]	@ (8000d74 <HAL_TIM_PWM_MspInit+0x54>)
 8000d38:	f043 0301 	orr.w	r3, r3, #1
 8000d3c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d3e:	4b0d      	ldr	r3, [pc, #52]	@ (8000d74 <HAL_TIM_PWM_MspInit+0x54>)
 8000d40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d42:	f003 0301 	and.w	r3, r3, #1
 8000d46:	60bb      	str	r3, [r7, #8]
 8000d48:	68bb      	ldr	r3, [r7, #8]

    /**TIM2 GPIO Configuration
     PA6     ------> TIM3_CH1
     */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000d4a:	2320      	movs	r3, #32
 8000d4c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d4e:	2302      	movs	r3, #2
 8000d50:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d52:	2300      	movs	r3, #0
 8000d54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8000d56:	2303      	movs	r3, #3
 8000d58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d5e:	f107 030c 	add.w	r3, r7, #12
 8000d62:	4619      	mov	r1, r3
 8000d64:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d68:	f000 fda2 	bl	80018b0 <HAL_GPIO_Init>
  }
}
 8000d6c:	bf00      	nop
 8000d6e:	3720      	adds	r7, #32
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	40021000 	.word	0x40021000

08000d78 <Nucleo_BSP_Init>:
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_DMA_Init(void);
static void MX_USART2_UART_Init(void);

void Nucleo_BSP_Init() {
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
  /* Configure the system clock */
  SystemClock_Config();
 8000d7c:	f000 f808 	bl	8000d90 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d80:	f000 f8a8 	bl	8000ed4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000d84:	f000 f888 	bl	8000e98 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000d88:	f000 f862 	bl	8000e50 <MX_USART2_UART_Init>
}
 8000d8c:	bf00      	nop
 8000d8e:	bd80      	pop	{r7, pc}

08000d90 <SystemClock_Config>:

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b098      	sub	sp, #96	@ 0x60
 8000d94:	af00      	add	r7, sp, #0

  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8000d96:	2306      	movs	r3, #6
 8000d98:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d9e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000da2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8000da4:	2310      	movs	r3, #16
 8000da6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000da8:	2302      	movs	r3, #2
 8000daa:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000dac:	2302      	movs	r3, #2
 8000dae:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000db0:	2301      	movs	r3, #1
 8000db2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000db4:	230a      	movs	r3, #10
 8000db6:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000db8:	2307      	movs	r3, #7
 8000dba:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000dbc:	2302      	movs	r3, #2
 8000dbe:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000dc0:	2302      	movs	r3, #2
 8000dc2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8000dc4:	f107 031c 	add.w	r3, r7, #28
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f000 ff7f 	bl	8001ccc <HAL_RCC_OscConfig>

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dce:	230f      	movs	r3, #15
 8000dd0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dd2:	2303      	movs	r3, #3
 8000dd4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000dde:	2300      	movs	r3, #0
 8000de0:	61bb      	str	r3, [r7, #24]
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);
 8000de2:	f107 0308 	add.w	r3, r7, #8
 8000de6:	2104      	movs	r1, #4
 8000de8:	4618      	mov	r0, r3
 8000dea:	f001 fb4b 	bl	8002484 <HAL_RCC_ClockConfig>

  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8000dee:	2200      	movs	r2, #0
 8000df0:	f04f 7140 	mov.w	r1, #50331648	@ 0x3000000
 8000df4:	2000      	movs	r0, #0
 8000df6:	f001 fc45 	bl	8002684 <HAL_RCC_MCOConfig>

  __PWR_CLK_ENABLE();
 8000dfa:	4b13      	ldr	r3, [pc, #76]	@ (8000e48 <SystemClock_Config+0xb8>)
 8000dfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000dfe:	4a12      	ldr	r2, [pc, #72]	@ (8000e48 <SystemClock_Config+0xb8>)
 8000e00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e04:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e06:	4b10      	ldr	r3, [pc, #64]	@ (8000e48 <SystemClock_Config+0xb8>)
 8000e08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e0e:	607b      	str	r3, [r7, #4]
 8000e10:	687b      	ldr	r3, [r7, #4]

  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e12:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000e16:	f000 ff03 	bl	8001c20 <HAL_PWREx_ControlVoltageScaling>

  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8000e1a:	f001 fcf3 	bl	8002804 <HAL_RCC_GetHCLKFreq>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	4a0a      	ldr	r2, [pc, #40]	@ (8000e4c <SystemClock_Config+0xbc>)
 8000e22:	fba2 2303 	umull	r2, r3, r2, r3
 8000e26:	099b      	lsrs	r3, r3, #6
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f000 fb20 	bl	800146e <HAL_SYSTICK_Config>

  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000e2e:	2004      	movs	r0, #4
 8000e30:	f000 fb2a 	bl	8001488 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000e34:	2200      	movs	r2, #0
 8000e36:	2100      	movs	r1, #0
 8000e38:	f04f 30ff 	mov.w	r0, #4294967295
 8000e3c:	f000 faed 	bl	800141a <HAL_NVIC_SetPriority>
}
 8000e40:	bf00      	nop
 8000e42:	3760      	adds	r7, #96	@ 0x60
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	40021000 	.word	0x40021000
 8000e4c:	10624dd3 	.word	0x10624dd3

08000e50 <MX_USART2_UART_Init>:

/* USART2 init function */
void MX_USART2_UART_Init(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8000e54:	4b0e      	ldr	r3, [pc, #56]	@ (8000e90 <MX_USART2_UART_Init+0x40>)
 8000e56:	4a0f      	ldr	r2, [pc, #60]	@ (8000e94 <MX_USART2_UART_Init+0x44>)
 8000e58:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e5a:	4b0d      	ldr	r3, [pc, #52]	@ (8000e90 <MX_USART2_UART_Init+0x40>)
 8000e5c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000e60:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e62:	4b0b      	ldr	r3, [pc, #44]	@ (8000e90 <MX_USART2_UART_Init+0x40>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e68:	4b09      	ldr	r3, [pc, #36]	@ (8000e90 <MX_USART2_UART_Init+0x40>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e6e:	4b08      	ldr	r3, [pc, #32]	@ (8000e90 <MX_USART2_UART_Init+0x40>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e74:	4b06      	ldr	r3, [pc, #24]	@ (8000e90 <MX_USART2_UART_Init+0x40>)
 8000e76:	220c      	movs	r2, #12
 8000e78:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e7a:	4b05      	ldr	r3, [pc, #20]	@ (8000e90 <MX_USART2_UART_Init+0x40>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e80:	4b03      	ldr	r3, [pc, #12]	@ (8000e90 <MX_USART2_UART_Init+0x40>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	61da      	str	r2, [r3, #28]
  HAL_UART_Init(&huart2);
 8000e86:	4802      	ldr	r0, [pc, #8]	@ (8000e90 <MX_USART2_UART_Init+0x40>)
 8000e88:	f003 fb8f 	bl	80045aa <HAL_UART_Init>

}
 8000e8c:	bf00      	nop
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	200000bc 	.word	0x200000bc
 8000e94:	40004400 	.word	0x40004400

08000e98 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __DMA1_CLK_ENABLE();
 8000e9e:	4b0c      	ldr	r3, [pc, #48]	@ (8000ed0 <MX_DMA_Init+0x38>)
 8000ea0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000ea2:	4a0b      	ldr	r2, [pc, #44]	@ (8000ed0 <MX_DMA_Init+0x38>)
 8000ea4:	f043 0301 	orr.w	r3, r3, #1
 8000ea8:	6493      	str	r3, [r2, #72]	@ 0x48
 8000eaa:	4b09      	ldr	r3, [pc, #36]	@ (8000ed0 <MX_DMA_Init+0x38>)
 8000eac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000eae:	f003 0301 	and.w	r3, r3, #1
 8000eb2:	607b      	str	r3, [r7, #4]
 8000eb4:	687b      	ldr	r3, [r7, #4]

//  /* DMA interrupt init */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	2100      	movs	r1, #0
 8000eba:	200e      	movs	r0, #14
 8000ebc:	f000 faad 	bl	800141a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000ec0:	200e      	movs	r0, #14
 8000ec2:	f000 fac6 	bl	8001452 <HAL_NVIC_EnableIRQ>

}
 8000ec6:	bf00      	nop
 8000ec8:	3708      	adds	r7, #8
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	40021000 	.word	0x40021000

08000ed4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b088      	sub	sp, #32
 8000ed8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __GPIOC_CLK_ENABLE();
 8000eda:	4b24      	ldr	r3, [pc, #144]	@ (8000f6c <MX_GPIO_Init+0x98>)
 8000edc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ede:	4a23      	ldr	r2, [pc, #140]	@ (8000f6c <MX_GPIO_Init+0x98>)
 8000ee0:	f043 0304 	orr.w	r3, r3, #4
 8000ee4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ee6:	4b21      	ldr	r3, [pc, #132]	@ (8000f6c <MX_GPIO_Init+0x98>)
 8000ee8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eea:	f003 0304 	and.w	r3, r3, #4
 8000eee:	60bb      	str	r3, [r7, #8]
 8000ef0:	68bb      	ldr	r3, [r7, #8]
  __GPIOA_CLK_ENABLE();
 8000ef2:	4b1e      	ldr	r3, [pc, #120]	@ (8000f6c <MX_GPIO_Init+0x98>)
 8000ef4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ef6:	4a1d      	ldr	r2, [pc, #116]	@ (8000f6c <MX_GPIO_Init+0x98>)
 8000ef8:	f043 0301 	orr.w	r3, r3, #1
 8000efc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000efe:	4b1b      	ldr	r3, [pc, #108]	@ (8000f6c <MX_GPIO_Init+0x98>)
 8000f00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f02:	f003 0301 	and.w	r3, r3, #1
 8000f06:	607b      	str	r3, [r7, #4]
 8000f08:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000f0a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f0e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000f10:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000f14:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f16:	2300      	movs	r3, #0
 8000f18:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f1a:	f107 030c 	add.w	r3, r7, #12
 8000f1e:	4619      	mov	r1, r3
 8000f20:	4813      	ldr	r0, [pc, #76]	@ (8000f70 <MX_GPIO_Init+0x9c>)
 8000f22:	f000 fcc5 	bl	80018b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000f26:	2320      	movs	r3, #32
 8000f28:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8000f32:	2303      	movs	r3, #3
 8000f34:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000f36:	f107 030c 	add.w	r3, r7, #12
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f40:	f000 fcb6 	bl	80018b0 <HAL_GPIO_Init>

  /*Configure GPIOC pin8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000f44:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f48:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8000f52:	2303      	movs	r3, #3
 8000f54:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f56:	f107 030c 	add.w	r3, r7, #12
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	4804      	ldr	r0, [pc, #16]	@ (8000f70 <MX_GPIO_Init+0x9c>)
 8000f5e:	f000 fca7 	bl	80018b0 <HAL_GPIO_Init>

}
 8000f62:	bf00      	nop
 8000f64:	3720      	adds	r7, #32
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	40021000 	.word	0x40021000
 8000f70:	48000800 	.word	0x48000800

08000f74 <HAL_MspInit>:

/* Includes ------------------------------------------------------------------*/
#include "main.h"

void HAL_MspInit(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b083      	sub	sp, #12
 8000f78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f7a:	4b0f      	ldr	r3, [pc, #60]	@ (8000fb8 <HAL_MspInit+0x44>)
 8000f7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f7e:	4a0e      	ldr	r2, [pc, #56]	@ (8000fb8 <HAL_MspInit+0x44>)
 8000f80:	f043 0301 	orr.w	r3, r3, #1
 8000f84:	6613      	str	r3, [r2, #96]	@ 0x60
 8000f86:	4b0c      	ldr	r3, [pc, #48]	@ (8000fb8 <HAL_MspInit+0x44>)
 8000f88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f8a:	f003 0301 	and.w	r3, r3, #1
 8000f8e:	607b      	str	r3, [r7, #4]
 8000f90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f92:	4b09      	ldr	r3, [pc, #36]	@ (8000fb8 <HAL_MspInit+0x44>)
 8000f94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f96:	4a08      	ldr	r2, [pc, #32]	@ (8000fb8 <HAL_MspInit+0x44>)
 8000f98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f9c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f9e:	4b06      	ldr	r3, [pc, #24]	@ (8000fb8 <HAL_MspInit+0x44>)
 8000fa0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fa2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fa6:	603b      	str	r3, [r7, #0]
 8000fa8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000faa:	bf00      	nop
 8000fac:	370c      	adds	r7, #12
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	40021000 	.word	0x40021000

08000fbc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b0ac      	sub	sp, #176	@ 0xb0
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000fc8:	2200      	movs	r2, #0
 8000fca:	601a      	str	r2, [r3, #0]
 8000fcc:	605a      	str	r2, [r3, #4]
 8000fce:	609a      	str	r2, [r3, #8]
 8000fd0:	60da      	str	r2, [r3, #12]
 8000fd2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fd4:	f107 0314 	add.w	r3, r7, #20
 8000fd8:	2288      	movs	r2, #136	@ 0x88
 8000fda:	2100      	movs	r1, #0
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f004 f806 	bl	8004fee <memset>
  if(huart->Instance==USART2)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	4a21      	ldr	r2, [pc, #132]	@ (800106c <HAL_UART_MspInit+0xb0>)
 8000fe8:	4293      	cmp	r3, r2
 8000fea:	d13b      	bne.n	8001064 <HAL_UART_MspInit+0xa8>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000fec:	2302      	movs	r3, #2
 8000fee:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ff4:	f107 0314 	add.w	r3, r7, #20
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f001 fc9b 	bl	8002934 <HAL_RCCEx_PeriphCLKConfig>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d001      	beq.n	8001008 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001004:	f000 f836 	bl	8001074 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001008:	4b19      	ldr	r3, [pc, #100]	@ (8001070 <HAL_UART_MspInit+0xb4>)
 800100a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800100c:	4a18      	ldr	r2, [pc, #96]	@ (8001070 <HAL_UART_MspInit+0xb4>)
 800100e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001012:	6593      	str	r3, [r2, #88]	@ 0x58
 8001014:	4b16      	ldr	r3, [pc, #88]	@ (8001070 <HAL_UART_MspInit+0xb4>)
 8001016:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001018:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800101c:	613b      	str	r3, [r7, #16]
 800101e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001020:	4b13      	ldr	r3, [pc, #76]	@ (8001070 <HAL_UART_MspInit+0xb4>)
 8001022:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001024:	4a12      	ldr	r2, [pc, #72]	@ (8001070 <HAL_UART_MspInit+0xb4>)
 8001026:	f043 0301 	orr.w	r3, r3, #1
 800102a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800102c:	4b10      	ldr	r3, [pc, #64]	@ (8001070 <HAL_UART_MspInit+0xb4>)
 800102e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001030:	f003 0301 	and.w	r3, r3, #1
 8001034:	60fb      	str	r3, [r7, #12]
 8001036:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001038:	230c      	movs	r3, #12
 800103a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800103e:	2302      	movs	r3, #2
 8001040:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001044:	2300      	movs	r3, #0
 8001046:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800104a:	2303      	movs	r3, #3
 800104c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001050:	2307      	movs	r3, #7
 8001052:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001056:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800105a:	4619      	mov	r1, r3
 800105c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001060:	f000 fc26 	bl	80018b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001064:	bf00      	nop
 8001066:	37b0      	adds	r7, #176	@ 0xb0
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	40004400 	.word	0x40004400
 8001070:	40021000 	.word	0x40021000

08001074 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001078:	b672      	cpsid	i
}
 800107a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800107c:	bf00      	nop
 800107e:	e7fd      	b.n	800107c <Error_Handler+0x8>

08001080 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001084:	bf00      	nop
 8001086:	e7fd      	b.n	8001084 <NMI_Handler+0x4>

08001088 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800108c:	bf00      	nop
 800108e:	e7fd      	b.n	800108c <HardFault_Handler+0x4>

08001090 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001094:	bf00      	nop
 8001096:	e7fd      	b.n	8001094 <MemManage_Handler+0x4>

08001098 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800109c:	bf00      	nop
 800109e:	e7fd      	b.n	800109c <BusFault_Handler+0x4>

080010a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010a4:	bf00      	nop
 80010a6:	e7fd      	b.n	80010a4 <UsageFault_Handler+0x4>

080010a8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010ac:	bf00      	nop
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr

080010b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010b6:	b480      	push	{r7}
 80010b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010ba:	bf00      	nop
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr

080010c4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010c8:	bf00      	nop
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr

080010d2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010d2:	b580      	push	{r7, lr}
 80010d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010d6:	f000 f8a5 	bl	8001224 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010da:	bf00      	nop
 80010dc:	bd80      	pop	{r7, pc}
	...

080010e0 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 80010e4:	4802      	ldr	r0, [pc, #8]	@ (80010f0 <DMA1_Channel5_IRQHandler+0x10>)
 80010e6:	f000 fb03 	bl	80016f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80010ea:	bf00      	nop
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	20000074 	.word	0x20000074

080010f4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80010f8:	4b06      	ldr	r3, [pc, #24]	@ (8001114 <SystemInit+0x20>)
 80010fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80010fe:	4a05      	ldr	r2, [pc, #20]	@ (8001114 <SystemInit+0x20>)
 8001100:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001104:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001108:	bf00      	nop
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	e000ed00 	.word	0xe000ed00

08001118 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001118:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001150 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800111c:	f7ff ffea 	bl	80010f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001120:	480c      	ldr	r0, [pc, #48]	@ (8001154 <LoopForever+0x6>)
  ldr r1, =_edata
 8001122:	490d      	ldr	r1, [pc, #52]	@ (8001158 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001124:	4a0d      	ldr	r2, [pc, #52]	@ (800115c <LoopForever+0xe>)
  movs r3, #0
 8001126:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001128:	e002      	b.n	8001130 <LoopCopyDataInit>

0800112a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800112a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800112c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800112e:	3304      	adds	r3, #4

08001130 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001130:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001132:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001134:	d3f9      	bcc.n	800112a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001136:	4a0a      	ldr	r2, [pc, #40]	@ (8001160 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001138:	4c0a      	ldr	r4, [pc, #40]	@ (8001164 <LoopForever+0x16>)
  movs r3, #0
 800113a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800113c:	e001      	b.n	8001142 <LoopFillZerobss>

0800113e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800113e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001140:	3204      	adds	r2, #4

08001142 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001142:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001144:	d3fb      	bcc.n	800113e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001146:	f003 ff5b 	bl	8005000 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800114a:	f7ff fd0d 	bl	8000b68 <main>

0800114e <LoopForever>:

LoopForever:
    b LoopForever
 800114e:	e7fe      	b.n	800114e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001150:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001154:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001158:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800115c:	08006028 	.word	0x08006028
  ldr r2, =_sbss
 8001160:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001164:	20000148 	.word	0x20000148

08001168 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001168:	e7fe      	b.n	8001168 <ADC1_2_IRQHandler>
	...

0800116c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001172:	2300      	movs	r3, #0
 8001174:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001176:	4b0c      	ldr	r3, [pc, #48]	@ (80011a8 <HAL_Init+0x3c>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4a0b      	ldr	r2, [pc, #44]	@ (80011a8 <HAL_Init+0x3c>)
 800117c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001180:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001182:	2003      	movs	r0, #3
 8001184:	f000 f93e 	bl	8001404 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001188:	2000      	movs	r0, #0
 800118a:	f000 f80f 	bl	80011ac <HAL_InitTick>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d002      	beq.n	800119a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001194:	2301      	movs	r3, #1
 8001196:	71fb      	strb	r3, [r7, #7]
 8001198:	e001      	b.n	800119e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800119a:	f7ff feeb 	bl	8000f74 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800119e:	79fb      	ldrb	r3, [r7, #7]
}
 80011a0:	4618      	mov	r0, r3
 80011a2:	3708      	adds	r7, #8
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	40022000 	.word	0x40022000

080011ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b084      	sub	sp, #16
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80011b4:	2300      	movs	r3, #0
 80011b6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80011b8:	4b17      	ldr	r3, [pc, #92]	@ (8001218 <HAL_InitTick+0x6c>)
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d023      	beq.n	8001208 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80011c0:	4b16      	ldr	r3, [pc, #88]	@ (800121c <HAL_InitTick+0x70>)
 80011c2:	681a      	ldr	r2, [r3, #0]
 80011c4:	4b14      	ldr	r3, [pc, #80]	@ (8001218 <HAL_InitTick+0x6c>)
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	4619      	mov	r1, r3
 80011ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80011d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80011d6:	4618      	mov	r0, r3
 80011d8:	f000 f949 	bl	800146e <HAL_SYSTICK_Config>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d10f      	bne.n	8001202 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	2b0f      	cmp	r3, #15
 80011e6:	d809      	bhi.n	80011fc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011e8:	2200      	movs	r2, #0
 80011ea:	6879      	ldr	r1, [r7, #4]
 80011ec:	f04f 30ff 	mov.w	r0, #4294967295
 80011f0:	f000 f913 	bl	800141a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80011f4:	4a0a      	ldr	r2, [pc, #40]	@ (8001220 <HAL_InitTick+0x74>)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	6013      	str	r3, [r2, #0]
 80011fa:	e007      	b.n	800120c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80011fc:	2301      	movs	r3, #1
 80011fe:	73fb      	strb	r3, [r7, #15]
 8001200:	e004      	b.n	800120c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001202:	2301      	movs	r3, #1
 8001204:	73fb      	strb	r3, [r7, #15]
 8001206:	e001      	b.n	800120c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001208:	2301      	movs	r3, #1
 800120a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800120c:	7bfb      	ldrb	r3, [r7, #15]
}
 800120e:	4618      	mov	r0, r3
 8001210:	3710      	adds	r7, #16
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	20000008 	.word	0x20000008
 800121c:	20000000 	.word	0x20000000
 8001220:	20000004 	.word	0x20000004

08001224 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001228:	4b06      	ldr	r3, [pc, #24]	@ (8001244 <HAL_IncTick+0x20>)
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	461a      	mov	r2, r3
 800122e:	4b06      	ldr	r3, [pc, #24]	@ (8001248 <HAL_IncTick+0x24>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4413      	add	r3, r2
 8001234:	4a04      	ldr	r2, [pc, #16]	@ (8001248 <HAL_IncTick+0x24>)
 8001236:	6013      	str	r3, [r2, #0]
}
 8001238:	bf00      	nop
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop
 8001244:	20000008 	.word	0x20000008
 8001248:	20000144 	.word	0x20000144

0800124c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  return uwTick;
 8001250:	4b03      	ldr	r3, [pc, #12]	@ (8001260 <HAL_GetTick+0x14>)
 8001252:	681b      	ldr	r3, [r3, #0]
}
 8001254:	4618      	mov	r0, r3
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr
 800125e:	bf00      	nop
 8001260:	20000144 	.word	0x20000144

08001264 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001264:	b480      	push	{r7}
 8001266:	b085      	sub	sp, #20
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	f003 0307 	and.w	r3, r3, #7
 8001272:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001274:	4b0c      	ldr	r3, [pc, #48]	@ (80012a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001276:	68db      	ldr	r3, [r3, #12]
 8001278:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800127a:	68ba      	ldr	r2, [r7, #8]
 800127c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001280:	4013      	ands	r3, r2
 8001282:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001288:	68bb      	ldr	r3, [r7, #8]
 800128a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800128c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001290:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001294:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001296:	4a04      	ldr	r2, [pc, #16]	@ (80012a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001298:	68bb      	ldr	r3, [r7, #8]
 800129a:	60d3      	str	r3, [r2, #12]
}
 800129c:	bf00      	nop
 800129e:	3714      	adds	r7, #20
 80012a0:	46bd      	mov	sp, r7
 80012a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a6:	4770      	bx	lr
 80012a8:	e000ed00 	.word	0xe000ed00

080012ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012b0:	4b04      	ldr	r3, [pc, #16]	@ (80012c4 <__NVIC_GetPriorityGrouping+0x18>)
 80012b2:	68db      	ldr	r3, [r3, #12]
 80012b4:	0a1b      	lsrs	r3, r3, #8
 80012b6:	f003 0307 	and.w	r3, r3, #7
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	46bd      	mov	sp, r7
 80012be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c2:	4770      	bx	lr
 80012c4:	e000ed00 	.word	0xe000ed00

080012c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b083      	sub	sp, #12
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	4603      	mov	r3, r0
 80012d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	db0b      	blt.n	80012f2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012da:	79fb      	ldrb	r3, [r7, #7]
 80012dc:	f003 021f 	and.w	r2, r3, #31
 80012e0:	4907      	ldr	r1, [pc, #28]	@ (8001300 <__NVIC_EnableIRQ+0x38>)
 80012e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e6:	095b      	lsrs	r3, r3, #5
 80012e8:	2001      	movs	r0, #1
 80012ea:	fa00 f202 	lsl.w	r2, r0, r2
 80012ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80012f2:	bf00      	nop
 80012f4:	370c      	adds	r7, #12
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr
 80012fe:	bf00      	nop
 8001300:	e000e100 	.word	0xe000e100

08001304 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001304:	b480      	push	{r7}
 8001306:	b083      	sub	sp, #12
 8001308:	af00      	add	r7, sp, #0
 800130a:	4603      	mov	r3, r0
 800130c:	6039      	str	r1, [r7, #0]
 800130e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001310:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001314:	2b00      	cmp	r3, #0
 8001316:	db0a      	blt.n	800132e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	b2da      	uxtb	r2, r3
 800131c:	490c      	ldr	r1, [pc, #48]	@ (8001350 <__NVIC_SetPriority+0x4c>)
 800131e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001322:	0112      	lsls	r2, r2, #4
 8001324:	b2d2      	uxtb	r2, r2
 8001326:	440b      	add	r3, r1
 8001328:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800132c:	e00a      	b.n	8001344 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	b2da      	uxtb	r2, r3
 8001332:	4908      	ldr	r1, [pc, #32]	@ (8001354 <__NVIC_SetPriority+0x50>)
 8001334:	79fb      	ldrb	r3, [r7, #7]
 8001336:	f003 030f 	and.w	r3, r3, #15
 800133a:	3b04      	subs	r3, #4
 800133c:	0112      	lsls	r2, r2, #4
 800133e:	b2d2      	uxtb	r2, r2
 8001340:	440b      	add	r3, r1
 8001342:	761a      	strb	r2, [r3, #24]
}
 8001344:	bf00      	nop
 8001346:	370c      	adds	r7, #12
 8001348:	46bd      	mov	sp, r7
 800134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134e:	4770      	bx	lr
 8001350:	e000e100 	.word	0xe000e100
 8001354:	e000ed00 	.word	0xe000ed00

08001358 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001358:	b480      	push	{r7}
 800135a:	b089      	sub	sp, #36	@ 0x24
 800135c:	af00      	add	r7, sp, #0
 800135e:	60f8      	str	r0, [r7, #12]
 8001360:	60b9      	str	r1, [r7, #8]
 8001362:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	f003 0307 	and.w	r3, r3, #7
 800136a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800136c:	69fb      	ldr	r3, [r7, #28]
 800136e:	f1c3 0307 	rsb	r3, r3, #7
 8001372:	2b04      	cmp	r3, #4
 8001374:	bf28      	it	cs
 8001376:	2304      	movcs	r3, #4
 8001378:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800137a:	69fb      	ldr	r3, [r7, #28]
 800137c:	3304      	adds	r3, #4
 800137e:	2b06      	cmp	r3, #6
 8001380:	d902      	bls.n	8001388 <NVIC_EncodePriority+0x30>
 8001382:	69fb      	ldr	r3, [r7, #28]
 8001384:	3b03      	subs	r3, #3
 8001386:	e000      	b.n	800138a <NVIC_EncodePriority+0x32>
 8001388:	2300      	movs	r3, #0
 800138a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800138c:	f04f 32ff 	mov.w	r2, #4294967295
 8001390:	69bb      	ldr	r3, [r7, #24]
 8001392:	fa02 f303 	lsl.w	r3, r2, r3
 8001396:	43da      	mvns	r2, r3
 8001398:	68bb      	ldr	r3, [r7, #8]
 800139a:	401a      	ands	r2, r3
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013a0:	f04f 31ff 	mov.w	r1, #4294967295
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	fa01 f303 	lsl.w	r3, r1, r3
 80013aa:	43d9      	mvns	r1, r3
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013b0:	4313      	orrs	r3, r2
         );
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	3724      	adds	r7, #36	@ 0x24
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr
	...

080013c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	3b01      	subs	r3, #1
 80013cc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80013d0:	d301      	bcc.n	80013d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013d2:	2301      	movs	r3, #1
 80013d4:	e00f      	b.n	80013f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013d6:	4a0a      	ldr	r2, [pc, #40]	@ (8001400 <SysTick_Config+0x40>)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	3b01      	subs	r3, #1
 80013dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013de:	210f      	movs	r1, #15
 80013e0:	f04f 30ff 	mov.w	r0, #4294967295
 80013e4:	f7ff ff8e 	bl	8001304 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013e8:	4b05      	ldr	r3, [pc, #20]	@ (8001400 <SysTick_Config+0x40>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013ee:	4b04      	ldr	r3, [pc, #16]	@ (8001400 <SysTick_Config+0x40>)
 80013f0:	2207      	movs	r2, #7
 80013f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013f4:	2300      	movs	r3, #0
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	3708      	adds	r7, #8
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	e000e010 	.word	0xe000e010

08001404 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800140c:	6878      	ldr	r0, [r7, #4]
 800140e:	f7ff ff29 	bl	8001264 <__NVIC_SetPriorityGrouping>
}
 8001412:	bf00      	nop
 8001414:	3708      	adds	r7, #8
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}

0800141a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800141a:	b580      	push	{r7, lr}
 800141c:	b086      	sub	sp, #24
 800141e:	af00      	add	r7, sp, #0
 8001420:	4603      	mov	r3, r0
 8001422:	60b9      	str	r1, [r7, #8]
 8001424:	607a      	str	r2, [r7, #4]
 8001426:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001428:	2300      	movs	r3, #0
 800142a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800142c:	f7ff ff3e 	bl	80012ac <__NVIC_GetPriorityGrouping>
 8001430:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001432:	687a      	ldr	r2, [r7, #4]
 8001434:	68b9      	ldr	r1, [r7, #8]
 8001436:	6978      	ldr	r0, [r7, #20]
 8001438:	f7ff ff8e 	bl	8001358 <NVIC_EncodePriority>
 800143c:	4602      	mov	r2, r0
 800143e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001442:	4611      	mov	r1, r2
 8001444:	4618      	mov	r0, r3
 8001446:	f7ff ff5d 	bl	8001304 <__NVIC_SetPriority>
}
 800144a:	bf00      	nop
 800144c:	3718      	adds	r7, #24
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}

08001452 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001452:	b580      	push	{r7, lr}
 8001454:	b082      	sub	sp, #8
 8001456:	af00      	add	r7, sp, #0
 8001458:	4603      	mov	r3, r0
 800145a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800145c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001460:	4618      	mov	r0, r3
 8001462:	f7ff ff31 	bl	80012c8 <__NVIC_EnableIRQ>
}
 8001466:	bf00      	nop
 8001468:	3708      	adds	r7, #8
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}

0800146e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800146e:	b580      	push	{r7, lr}
 8001470:	b082      	sub	sp, #8
 8001472:	af00      	add	r7, sp, #0
 8001474:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001476:	6878      	ldr	r0, [r7, #4]
 8001478:	f7ff ffa2 	bl	80013c0 <SysTick_Config>
 800147c:	4603      	mov	r3, r0
}
 800147e:	4618      	mov	r0, r3
 8001480:	3708      	adds	r7, #8
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
	...

08001488 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001488:	b480      	push	{r7}
 800148a:	b083      	sub	sp, #12
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2b04      	cmp	r3, #4
 8001494:	d106      	bne.n	80014a4 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001496:	4b09      	ldr	r3, [pc, #36]	@ (80014bc <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4a08      	ldr	r2, [pc, #32]	@ (80014bc <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800149c:	f043 0304 	orr.w	r3, r3, #4
 80014a0:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 80014a2:	e005      	b.n	80014b0 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80014a4:	4b05      	ldr	r3, [pc, #20]	@ (80014bc <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a04      	ldr	r2, [pc, #16]	@ (80014bc <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80014aa:	f023 0304 	bic.w	r3, r3, #4
 80014ae:	6013      	str	r3, [r2, #0]
}
 80014b0:	bf00      	nop
 80014b2:	370c      	adds	r7, #12
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr
 80014bc:	e000e010 	.word	0xe000e010

080014c0 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b085      	sub	sp, #20
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d101      	bne.n	80014d2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80014ce:	2301      	movs	r3, #1
 80014d0:	e098      	b.n	8001604 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	461a      	mov	r2, r3
 80014d8:	4b4d      	ldr	r3, [pc, #308]	@ (8001610 <HAL_DMA_Init+0x150>)
 80014da:	429a      	cmp	r2, r3
 80014dc:	d80f      	bhi.n	80014fe <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	461a      	mov	r2, r3
 80014e4:	4b4b      	ldr	r3, [pc, #300]	@ (8001614 <HAL_DMA_Init+0x154>)
 80014e6:	4413      	add	r3, r2
 80014e8:	4a4b      	ldr	r2, [pc, #300]	@ (8001618 <HAL_DMA_Init+0x158>)
 80014ea:	fba2 2303 	umull	r2, r3, r2, r3
 80014ee:	091b      	lsrs	r3, r3, #4
 80014f0:	009a      	lsls	r2, r3, #2
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	4a48      	ldr	r2, [pc, #288]	@ (800161c <HAL_DMA_Init+0x15c>)
 80014fa:	641a      	str	r2, [r3, #64]	@ 0x40
 80014fc:	e00e      	b.n	800151c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	461a      	mov	r2, r3
 8001504:	4b46      	ldr	r3, [pc, #280]	@ (8001620 <HAL_DMA_Init+0x160>)
 8001506:	4413      	add	r3, r2
 8001508:	4a43      	ldr	r2, [pc, #268]	@ (8001618 <HAL_DMA_Init+0x158>)
 800150a:	fba2 2303 	umull	r2, r3, r2, r3
 800150e:	091b      	lsrs	r3, r3, #4
 8001510:	009a      	lsls	r2, r3, #2
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	4a42      	ldr	r2, [pc, #264]	@ (8001624 <HAL_DMA_Init+0x164>)
 800151a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2202      	movs	r2, #2
 8001520:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8001532:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001536:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001540:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	691b      	ldr	r3, [r3, #16]
 8001546:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800154c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	699b      	ldr	r3, [r3, #24]
 8001552:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001558:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6a1b      	ldr	r3, [r3, #32]
 800155e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001560:	68fa      	ldr	r2, [r7, #12]
 8001562:	4313      	orrs	r3, r2
 8001564:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	68fa      	ldr	r2, [r7, #12]
 800156c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	689b      	ldr	r3, [r3, #8]
 8001572:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001576:	d039      	beq.n	80015ec <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800157c:	4a27      	ldr	r2, [pc, #156]	@ (800161c <HAL_DMA_Init+0x15c>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d11a      	bne.n	80015b8 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001582:	4b29      	ldr	r3, [pc, #164]	@ (8001628 <HAL_DMA_Init+0x168>)
 8001584:	681a      	ldr	r2, [r3, #0]
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800158a:	f003 031c 	and.w	r3, r3, #28
 800158e:	210f      	movs	r1, #15
 8001590:	fa01 f303 	lsl.w	r3, r1, r3
 8001594:	43db      	mvns	r3, r3
 8001596:	4924      	ldr	r1, [pc, #144]	@ (8001628 <HAL_DMA_Init+0x168>)
 8001598:	4013      	ands	r3, r2
 800159a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800159c:	4b22      	ldr	r3, [pc, #136]	@ (8001628 <HAL_DMA_Init+0x168>)
 800159e:	681a      	ldr	r2, [r3, #0]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6859      	ldr	r1, [r3, #4]
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015a8:	f003 031c 	and.w	r3, r3, #28
 80015ac:	fa01 f303 	lsl.w	r3, r1, r3
 80015b0:	491d      	ldr	r1, [pc, #116]	@ (8001628 <HAL_DMA_Init+0x168>)
 80015b2:	4313      	orrs	r3, r2
 80015b4:	600b      	str	r3, [r1, #0]
 80015b6:	e019      	b.n	80015ec <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80015b8:	4b1c      	ldr	r3, [pc, #112]	@ (800162c <HAL_DMA_Init+0x16c>)
 80015ba:	681a      	ldr	r2, [r3, #0]
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015c0:	f003 031c 	and.w	r3, r3, #28
 80015c4:	210f      	movs	r1, #15
 80015c6:	fa01 f303 	lsl.w	r3, r1, r3
 80015ca:	43db      	mvns	r3, r3
 80015cc:	4917      	ldr	r1, [pc, #92]	@ (800162c <HAL_DMA_Init+0x16c>)
 80015ce:	4013      	ands	r3, r2
 80015d0:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80015d2:	4b16      	ldr	r3, [pc, #88]	@ (800162c <HAL_DMA_Init+0x16c>)
 80015d4:	681a      	ldr	r2, [r3, #0]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6859      	ldr	r1, [r3, #4]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015de:	f003 031c 	and.w	r3, r3, #28
 80015e2:	fa01 f303 	lsl.w	r3, r1, r3
 80015e6:	4911      	ldr	r1, [pc, #68]	@ (800162c <HAL_DMA_Init+0x16c>)
 80015e8:	4313      	orrs	r3, r2
 80015ea:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2200      	movs	r2, #0
 80015f0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2201      	movs	r2, #1
 80015f6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2200      	movs	r2, #0
 80015fe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8001602:	2300      	movs	r3, #0
}
 8001604:	4618      	mov	r0, r3
 8001606:	3714      	adds	r7, #20
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr
 8001610:	40020407 	.word	0x40020407
 8001614:	bffdfff8 	.word	0xbffdfff8
 8001618:	cccccccd 	.word	0xcccccccd
 800161c:	40020000 	.word	0x40020000
 8001620:	bffdfbf8 	.word	0xbffdfbf8
 8001624:	40020400 	.word	0x40020400
 8001628:	400200a8 	.word	0x400200a8
 800162c:	400204a8 	.word	0x400204a8

08001630 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b086      	sub	sp, #24
 8001634:	af00      	add	r7, sp, #0
 8001636:	60f8      	str	r0, [r7, #12]
 8001638:	60b9      	str	r1, [r7, #8]
 800163a:	607a      	str	r2, [r7, #4]
 800163c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800163e:	2300      	movs	r3, #0
 8001640:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001648:	2b01      	cmp	r3, #1
 800164a:	d101      	bne.n	8001650 <HAL_DMA_Start_IT+0x20>
 800164c:	2302      	movs	r3, #2
 800164e:	e04b      	b.n	80016e8 <HAL_DMA_Start_IT+0xb8>
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	2201      	movs	r2, #1
 8001654:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800165e:	b2db      	uxtb	r3, r3
 8001660:	2b01      	cmp	r3, #1
 8001662:	d13a      	bne.n	80016da <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	2202      	movs	r2, #2
 8001668:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	2200      	movs	r2, #0
 8001670:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	681a      	ldr	r2, [r3, #0]
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f022 0201 	bic.w	r2, r2, #1
 8001680:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	687a      	ldr	r2, [r7, #4]
 8001686:	68b9      	ldr	r1, [r7, #8]
 8001688:	68f8      	ldr	r0, [r7, #12]
 800168a:	f000 f8e0 	bl	800184e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001692:	2b00      	cmp	r3, #0
 8001694:	d008      	beq.n	80016a8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	681a      	ldr	r2, [r3, #0]
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f042 020e 	orr.w	r2, r2, #14
 80016a4:	601a      	str	r2, [r3, #0]
 80016a6:	e00f      	b.n	80016c8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	681a      	ldr	r2, [r3, #0]
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f022 0204 	bic.w	r2, r2, #4
 80016b6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	681a      	ldr	r2, [r3, #0]
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f042 020a 	orr.w	r2, r2, #10
 80016c6:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	681a      	ldr	r2, [r3, #0]
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f042 0201 	orr.w	r2, r2, #1
 80016d6:	601a      	str	r2, [r3, #0]
 80016d8:	e005      	b.n	80016e6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	2200      	movs	r2, #0
 80016de:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80016e2:	2302      	movs	r3, #2
 80016e4:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80016e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	3718      	adds	r7, #24
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}

080016f0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b084      	sub	sp, #16
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800170c:	f003 031c 	and.w	r3, r3, #28
 8001710:	2204      	movs	r2, #4
 8001712:	409a      	lsls	r2, r3
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	4013      	ands	r3, r2
 8001718:	2b00      	cmp	r3, #0
 800171a:	d026      	beq.n	800176a <HAL_DMA_IRQHandler+0x7a>
 800171c:	68bb      	ldr	r3, [r7, #8]
 800171e:	f003 0304 	and.w	r3, r3, #4
 8001722:	2b00      	cmp	r3, #0
 8001724:	d021      	beq.n	800176a <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f003 0320 	and.w	r3, r3, #32
 8001730:	2b00      	cmp	r3, #0
 8001732:	d107      	bne.n	8001744 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f022 0204 	bic.w	r2, r2, #4
 8001742:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001748:	f003 021c 	and.w	r2, r3, #28
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001750:	2104      	movs	r1, #4
 8001752:	fa01 f202 	lsl.w	r2, r1, r2
 8001756:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800175c:	2b00      	cmp	r3, #0
 800175e:	d071      	beq.n	8001844 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001764:	6878      	ldr	r0, [r7, #4]
 8001766:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001768:	e06c      	b.n	8001844 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800176e:	f003 031c 	and.w	r3, r3, #28
 8001772:	2202      	movs	r2, #2
 8001774:	409a      	lsls	r2, r3
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	4013      	ands	r3, r2
 800177a:	2b00      	cmp	r3, #0
 800177c:	d02e      	beq.n	80017dc <HAL_DMA_IRQHandler+0xec>
 800177e:	68bb      	ldr	r3, [r7, #8]
 8001780:	f003 0302 	and.w	r3, r3, #2
 8001784:	2b00      	cmp	r3, #0
 8001786:	d029      	beq.n	80017dc <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f003 0320 	and.w	r3, r3, #32
 8001792:	2b00      	cmp	r3, #0
 8001794:	d10b      	bne.n	80017ae <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f022 020a 	bic.w	r2, r2, #10
 80017a4:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2201      	movs	r2, #1
 80017aa:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017b2:	f003 021c 	and.w	r2, r3, #28
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ba:	2102      	movs	r1, #2
 80017bc:	fa01 f202 	lsl.w	r2, r1, r2
 80017c0:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2200      	movs	r2, #0
 80017c6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d038      	beq.n	8001844 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017d6:	6878      	ldr	r0, [r7, #4]
 80017d8:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80017da:	e033      	b.n	8001844 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017e0:	f003 031c 	and.w	r3, r3, #28
 80017e4:	2208      	movs	r2, #8
 80017e6:	409a      	lsls	r2, r3
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	4013      	ands	r3, r2
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d02a      	beq.n	8001846 <HAL_DMA_IRQHandler+0x156>
 80017f0:	68bb      	ldr	r3, [r7, #8]
 80017f2:	f003 0308 	and.w	r3, r3, #8
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d025      	beq.n	8001846 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	681a      	ldr	r2, [r3, #0]
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f022 020e 	bic.w	r2, r2, #14
 8001808:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800180e:	f003 021c 	and.w	r2, r3, #28
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001816:	2101      	movs	r1, #1
 8001818:	fa01 f202 	lsl.w	r2, r1, r2
 800181c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2201      	movs	r2, #1
 8001822:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2201      	movs	r2, #1
 8001828:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2200      	movs	r2, #0
 8001830:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001838:	2b00      	cmp	r3, #0
 800183a:	d004      	beq.n	8001846 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001840:	6878      	ldr	r0, [r7, #4]
 8001842:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001844:	bf00      	nop
 8001846:	bf00      	nop
}
 8001848:	3710      	adds	r7, #16
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}

0800184e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800184e:	b480      	push	{r7}
 8001850:	b085      	sub	sp, #20
 8001852:	af00      	add	r7, sp, #0
 8001854:	60f8      	str	r0, [r7, #12]
 8001856:	60b9      	str	r1, [r7, #8]
 8001858:	607a      	str	r2, [r7, #4]
 800185a:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001860:	f003 021c 	and.w	r2, r3, #28
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001868:	2101      	movs	r1, #1
 800186a:	fa01 f202 	lsl.w	r2, r1, r2
 800186e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	683a      	ldr	r2, [r7, #0]
 8001876:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	689b      	ldr	r3, [r3, #8]
 800187c:	2b10      	cmp	r3, #16
 800187e:	d108      	bne.n	8001892 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	687a      	ldr	r2, [r7, #4]
 8001886:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	68ba      	ldr	r2, [r7, #8]
 800188e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001890:	e007      	b.n	80018a2 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	68ba      	ldr	r2, [r7, #8]
 8001898:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	687a      	ldr	r2, [r7, #4]
 80018a0:	60da      	str	r2, [r3, #12]
}
 80018a2:	bf00      	nop
 80018a4:	3714      	adds	r7, #20
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr
	...

080018b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b087      	sub	sp, #28
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
 80018b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80018ba:	2300      	movs	r3, #0
 80018bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018be:	e17f      	b.n	8001bc0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	681a      	ldr	r2, [r3, #0]
 80018c4:	2101      	movs	r1, #1
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	fa01 f303 	lsl.w	r3, r1, r3
 80018cc:	4013      	ands	r3, r2
 80018ce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	f000 8171 	beq.w	8001bba <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	f003 0303 	and.w	r3, r3, #3
 80018e0:	2b01      	cmp	r3, #1
 80018e2:	d005      	beq.n	80018f0 <HAL_GPIO_Init+0x40>
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	f003 0303 	and.w	r3, r3, #3
 80018ec:	2b02      	cmp	r3, #2
 80018ee:	d130      	bne.n	8001952 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	689b      	ldr	r3, [r3, #8]
 80018f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	005b      	lsls	r3, r3, #1
 80018fa:	2203      	movs	r2, #3
 80018fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001900:	43db      	mvns	r3, r3
 8001902:	693a      	ldr	r2, [r7, #16]
 8001904:	4013      	ands	r3, r2
 8001906:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	68da      	ldr	r2, [r3, #12]
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	005b      	lsls	r3, r3, #1
 8001910:	fa02 f303 	lsl.w	r3, r2, r3
 8001914:	693a      	ldr	r2, [r7, #16]
 8001916:	4313      	orrs	r3, r2
 8001918:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	693a      	ldr	r2, [r7, #16]
 800191e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001926:	2201      	movs	r2, #1
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	fa02 f303 	lsl.w	r3, r2, r3
 800192e:	43db      	mvns	r3, r3
 8001930:	693a      	ldr	r2, [r7, #16]
 8001932:	4013      	ands	r3, r2
 8001934:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	091b      	lsrs	r3, r3, #4
 800193c:	f003 0201 	and.w	r2, r3, #1
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	fa02 f303 	lsl.w	r3, r2, r3
 8001946:	693a      	ldr	r2, [r7, #16]
 8001948:	4313      	orrs	r3, r2
 800194a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	693a      	ldr	r2, [r7, #16]
 8001950:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	f003 0303 	and.w	r3, r3, #3
 800195a:	2b03      	cmp	r3, #3
 800195c:	d118      	bne.n	8001990 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001962:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001964:	2201      	movs	r2, #1
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	fa02 f303 	lsl.w	r3, r2, r3
 800196c:	43db      	mvns	r3, r3
 800196e:	693a      	ldr	r2, [r7, #16]
 8001970:	4013      	ands	r3, r2
 8001972:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	08db      	lsrs	r3, r3, #3
 800197a:	f003 0201 	and.w	r2, r3, #1
 800197e:	697b      	ldr	r3, [r7, #20]
 8001980:	fa02 f303 	lsl.w	r3, r2, r3
 8001984:	693a      	ldr	r2, [r7, #16]
 8001986:	4313      	orrs	r3, r2
 8001988:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	693a      	ldr	r2, [r7, #16]
 800198e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	f003 0303 	and.w	r3, r3, #3
 8001998:	2b03      	cmp	r3, #3
 800199a:	d017      	beq.n	80019cc <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	68db      	ldr	r3, [r3, #12]
 80019a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	005b      	lsls	r3, r3, #1
 80019a6:	2203      	movs	r2, #3
 80019a8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ac:	43db      	mvns	r3, r3
 80019ae:	693a      	ldr	r2, [r7, #16]
 80019b0:	4013      	ands	r3, r2
 80019b2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	689a      	ldr	r2, [r3, #8]
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	005b      	lsls	r3, r3, #1
 80019bc:	fa02 f303 	lsl.w	r3, r2, r3
 80019c0:	693a      	ldr	r2, [r7, #16]
 80019c2:	4313      	orrs	r3, r2
 80019c4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	693a      	ldr	r2, [r7, #16]
 80019ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	f003 0303 	and.w	r3, r3, #3
 80019d4:	2b02      	cmp	r3, #2
 80019d6:	d123      	bne.n	8001a20 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	08da      	lsrs	r2, r3, #3
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	3208      	adds	r2, #8
 80019e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019e4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	f003 0307 	and.w	r3, r3, #7
 80019ec:	009b      	lsls	r3, r3, #2
 80019ee:	220f      	movs	r2, #15
 80019f0:	fa02 f303 	lsl.w	r3, r2, r3
 80019f4:	43db      	mvns	r3, r3
 80019f6:	693a      	ldr	r2, [r7, #16]
 80019f8:	4013      	ands	r3, r2
 80019fa:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	691a      	ldr	r2, [r3, #16]
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	f003 0307 	and.w	r3, r3, #7
 8001a06:	009b      	lsls	r3, r3, #2
 8001a08:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0c:	693a      	ldr	r2, [r7, #16]
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	08da      	lsrs	r2, r3, #3
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	3208      	adds	r2, #8
 8001a1a:	6939      	ldr	r1, [r7, #16]
 8001a1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	005b      	lsls	r3, r3, #1
 8001a2a:	2203      	movs	r2, #3
 8001a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a30:	43db      	mvns	r3, r3
 8001a32:	693a      	ldr	r2, [r7, #16]
 8001a34:	4013      	ands	r3, r2
 8001a36:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	f003 0203 	and.w	r2, r3, #3
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	005b      	lsls	r3, r3, #1
 8001a44:	fa02 f303 	lsl.w	r3, r2, r3
 8001a48:	693a      	ldr	r2, [r7, #16]
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	693a      	ldr	r2, [r7, #16]
 8001a52:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	f000 80ac 	beq.w	8001bba <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a62:	4b5f      	ldr	r3, [pc, #380]	@ (8001be0 <HAL_GPIO_Init+0x330>)
 8001a64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a66:	4a5e      	ldr	r2, [pc, #376]	@ (8001be0 <HAL_GPIO_Init+0x330>)
 8001a68:	f043 0301 	orr.w	r3, r3, #1
 8001a6c:	6613      	str	r3, [r2, #96]	@ 0x60
 8001a6e:	4b5c      	ldr	r3, [pc, #368]	@ (8001be0 <HAL_GPIO_Init+0x330>)
 8001a70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a72:	f003 0301 	and.w	r3, r3, #1
 8001a76:	60bb      	str	r3, [r7, #8]
 8001a78:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001a7a:	4a5a      	ldr	r2, [pc, #360]	@ (8001be4 <HAL_GPIO_Init+0x334>)
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	089b      	lsrs	r3, r3, #2
 8001a80:	3302      	adds	r3, #2
 8001a82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a86:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	f003 0303 	and.w	r3, r3, #3
 8001a8e:	009b      	lsls	r3, r3, #2
 8001a90:	220f      	movs	r2, #15
 8001a92:	fa02 f303 	lsl.w	r3, r2, r3
 8001a96:	43db      	mvns	r3, r3
 8001a98:	693a      	ldr	r2, [r7, #16]
 8001a9a:	4013      	ands	r3, r2
 8001a9c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001aa4:	d025      	beq.n	8001af2 <HAL_GPIO_Init+0x242>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	4a4f      	ldr	r2, [pc, #316]	@ (8001be8 <HAL_GPIO_Init+0x338>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d01f      	beq.n	8001aee <HAL_GPIO_Init+0x23e>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	4a4e      	ldr	r2, [pc, #312]	@ (8001bec <HAL_GPIO_Init+0x33c>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d019      	beq.n	8001aea <HAL_GPIO_Init+0x23a>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	4a4d      	ldr	r2, [pc, #308]	@ (8001bf0 <HAL_GPIO_Init+0x340>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d013      	beq.n	8001ae6 <HAL_GPIO_Init+0x236>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	4a4c      	ldr	r2, [pc, #304]	@ (8001bf4 <HAL_GPIO_Init+0x344>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d00d      	beq.n	8001ae2 <HAL_GPIO_Init+0x232>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	4a4b      	ldr	r2, [pc, #300]	@ (8001bf8 <HAL_GPIO_Init+0x348>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d007      	beq.n	8001ade <HAL_GPIO_Init+0x22e>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	4a4a      	ldr	r2, [pc, #296]	@ (8001bfc <HAL_GPIO_Init+0x34c>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d101      	bne.n	8001ada <HAL_GPIO_Init+0x22a>
 8001ad6:	2306      	movs	r3, #6
 8001ad8:	e00c      	b.n	8001af4 <HAL_GPIO_Init+0x244>
 8001ada:	2307      	movs	r3, #7
 8001adc:	e00a      	b.n	8001af4 <HAL_GPIO_Init+0x244>
 8001ade:	2305      	movs	r3, #5
 8001ae0:	e008      	b.n	8001af4 <HAL_GPIO_Init+0x244>
 8001ae2:	2304      	movs	r3, #4
 8001ae4:	e006      	b.n	8001af4 <HAL_GPIO_Init+0x244>
 8001ae6:	2303      	movs	r3, #3
 8001ae8:	e004      	b.n	8001af4 <HAL_GPIO_Init+0x244>
 8001aea:	2302      	movs	r3, #2
 8001aec:	e002      	b.n	8001af4 <HAL_GPIO_Init+0x244>
 8001aee:	2301      	movs	r3, #1
 8001af0:	e000      	b.n	8001af4 <HAL_GPIO_Init+0x244>
 8001af2:	2300      	movs	r3, #0
 8001af4:	697a      	ldr	r2, [r7, #20]
 8001af6:	f002 0203 	and.w	r2, r2, #3
 8001afa:	0092      	lsls	r2, r2, #2
 8001afc:	4093      	lsls	r3, r2
 8001afe:	693a      	ldr	r2, [r7, #16]
 8001b00:	4313      	orrs	r3, r2
 8001b02:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001b04:	4937      	ldr	r1, [pc, #220]	@ (8001be4 <HAL_GPIO_Init+0x334>)
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	089b      	lsrs	r3, r3, #2
 8001b0a:	3302      	adds	r3, #2
 8001b0c:	693a      	ldr	r2, [r7, #16]
 8001b0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001b12:	4b3b      	ldr	r3, [pc, #236]	@ (8001c00 <HAL_GPIO_Init+0x350>)
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	43db      	mvns	r3, r3
 8001b1c:	693a      	ldr	r2, [r7, #16]
 8001b1e:	4013      	ands	r3, r2
 8001b20:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d003      	beq.n	8001b36 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001b2e:	693a      	ldr	r2, [r7, #16]
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	4313      	orrs	r3, r2
 8001b34:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001b36:	4a32      	ldr	r2, [pc, #200]	@ (8001c00 <HAL_GPIO_Init+0x350>)
 8001b38:	693b      	ldr	r3, [r7, #16]
 8001b3a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001b3c:	4b30      	ldr	r3, [pc, #192]	@ (8001c00 <HAL_GPIO_Init+0x350>)
 8001b3e:	68db      	ldr	r3, [r3, #12]
 8001b40:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	43db      	mvns	r3, r3
 8001b46:	693a      	ldr	r2, [r7, #16]
 8001b48:	4013      	ands	r3, r2
 8001b4a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d003      	beq.n	8001b60 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001b58:	693a      	ldr	r2, [r7, #16]
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001b60:	4a27      	ldr	r2, [pc, #156]	@ (8001c00 <HAL_GPIO_Init+0x350>)
 8001b62:	693b      	ldr	r3, [r7, #16]
 8001b64:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001b66:	4b26      	ldr	r3, [pc, #152]	@ (8001c00 <HAL_GPIO_Init+0x350>)
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	43db      	mvns	r3, r3
 8001b70:	693a      	ldr	r2, [r7, #16]
 8001b72:	4013      	ands	r3, r2
 8001b74:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d003      	beq.n	8001b8a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001b82:	693a      	ldr	r2, [r7, #16]
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	4313      	orrs	r3, r2
 8001b88:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001b8a:	4a1d      	ldr	r2, [pc, #116]	@ (8001c00 <HAL_GPIO_Init+0x350>)
 8001b8c:	693b      	ldr	r3, [r7, #16]
 8001b8e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001b90:	4b1b      	ldr	r3, [pc, #108]	@ (8001c00 <HAL_GPIO_Init+0x350>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	43db      	mvns	r3, r3
 8001b9a:	693a      	ldr	r2, [r7, #16]
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d003      	beq.n	8001bb4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001bac:	693a      	ldr	r2, [r7, #16]
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001bb4:	4a12      	ldr	r2, [pc, #72]	@ (8001c00 <HAL_GPIO_Init+0x350>)
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	3301      	adds	r3, #1
 8001bbe:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	fa22 f303 	lsr.w	r3, r2, r3
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	f47f ae78 	bne.w	80018c0 <HAL_GPIO_Init+0x10>
  }
}
 8001bd0:	bf00      	nop
 8001bd2:	bf00      	nop
 8001bd4:	371c      	adds	r7, #28
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr
 8001bde:	bf00      	nop
 8001be0:	40021000 	.word	0x40021000
 8001be4:	40010000 	.word	0x40010000
 8001be8:	48000400 	.word	0x48000400
 8001bec:	48000800 	.word	0x48000800
 8001bf0:	48000c00 	.word	0x48000c00
 8001bf4:	48001000 	.word	0x48001000
 8001bf8:	48001400 	.word	0x48001400
 8001bfc:	48001800 	.word	0x48001800
 8001c00:	40010400 	.word	0x40010400

08001c04 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001c08:	4b04      	ldr	r3, [pc, #16]	@ (8001c1c <HAL_PWREx_GetVoltageRange+0x18>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr
 8001c1a:	bf00      	nop
 8001c1c:	40007000 	.word	0x40007000

08001c20 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b085      	sub	sp, #20
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001c2e:	d130      	bne.n	8001c92 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c30:	4b23      	ldr	r3, [pc, #140]	@ (8001cc0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001c38:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001c3c:	d038      	beq.n	8001cb0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c3e:	4b20      	ldr	r3, [pc, #128]	@ (8001cc0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001c46:	4a1e      	ldr	r2, [pc, #120]	@ (8001cc0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c48:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001c4c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001c4e:	4b1d      	ldr	r3, [pc, #116]	@ (8001cc4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	2232      	movs	r2, #50	@ 0x32
 8001c54:	fb02 f303 	mul.w	r3, r2, r3
 8001c58:	4a1b      	ldr	r2, [pc, #108]	@ (8001cc8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001c5a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c5e:	0c9b      	lsrs	r3, r3, #18
 8001c60:	3301      	adds	r3, #1
 8001c62:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c64:	e002      	b.n	8001c6c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	3b01      	subs	r3, #1
 8001c6a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c6c:	4b14      	ldr	r3, [pc, #80]	@ (8001cc0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c6e:	695b      	ldr	r3, [r3, #20]
 8001c70:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c74:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c78:	d102      	bne.n	8001c80 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d1f2      	bne.n	8001c66 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001c80:	4b0f      	ldr	r3, [pc, #60]	@ (8001cc0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c82:	695b      	ldr	r3, [r3, #20]
 8001c84:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c88:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c8c:	d110      	bne.n	8001cb0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001c8e:	2303      	movs	r3, #3
 8001c90:	e00f      	b.n	8001cb2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001c92:	4b0b      	ldr	r3, [pc, #44]	@ (8001cc0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001c9a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c9e:	d007      	beq.n	8001cb0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001ca0:	4b07      	ldr	r3, [pc, #28]	@ (8001cc0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001ca8:	4a05      	ldr	r2, [pc, #20]	@ (8001cc0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001caa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001cae:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001cb0:	2300      	movs	r3, #0
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	3714      	adds	r7, #20
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr
 8001cbe:	bf00      	nop
 8001cc0:	40007000 	.word	0x40007000
 8001cc4:	20000000 	.word	0x20000000
 8001cc8:	431bde83 	.word	0x431bde83

08001ccc <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b088      	sub	sp, #32
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d101      	bne.n	8001cde <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e3ca      	b.n	8002474 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cde:	4b97      	ldr	r3, [pc, #604]	@ (8001f3c <HAL_RCC_OscConfig+0x270>)
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	f003 030c 	and.w	r3, r3, #12
 8001ce6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ce8:	4b94      	ldr	r3, [pc, #592]	@ (8001f3c <HAL_RCC_OscConfig+0x270>)
 8001cea:	68db      	ldr	r3, [r3, #12]
 8001cec:	f003 0303 	and.w	r3, r3, #3
 8001cf0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 0310 	and.w	r3, r3, #16
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	f000 80e4 	beq.w	8001ec8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001d00:	69bb      	ldr	r3, [r7, #24]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d007      	beq.n	8001d16 <HAL_RCC_OscConfig+0x4a>
 8001d06:	69bb      	ldr	r3, [r7, #24]
 8001d08:	2b0c      	cmp	r3, #12
 8001d0a:	f040 808b 	bne.w	8001e24 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001d0e:	697b      	ldr	r3, [r7, #20]
 8001d10:	2b01      	cmp	r3, #1
 8001d12:	f040 8087 	bne.w	8001e24 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001d16:	4b89      	ldr	r3, [pc, #548]	@ (8001f3c <HAL_RCC_OscConfig+0x270>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 0302 	and.w	r3, r3, #2
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d005      	beq.n	8001d2e <HAL_RCC_OscConfig+0x62>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	699b      	ldr	r3, [r3, #24]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d101      	bne.n	8001d2e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e3a2      	b.n	8002474 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6a1a      	ldr	r2, [r3, #32]
 8001d32:	4b82      	ldr	r3, [pc, #520]	@ (8001f3c <HAL_RCC_OscConfig+0x270>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f003 0308 	and.w	r3, r3, #8
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d004      	beq.n	8001d48 <HAL_RCC_OscConfig+0x7c>
 8001d3e:	4b7f      	ldr	r3, [pc, #508]	@ (8001f3c <HAL_RCC_OscConfig+0x270>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001d46:	e005      	b.n	8001d54 <HAL_RCC_OscConfig+0x88>
 8001d48:	4b7c      	ldr	r3, [pc, #496]	@ (8001f3c <HAL_RCC_OscConfig+0x270>)
 8001d4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d4e:	091b      	lsrs	r3, r3, #4
 8001d50:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d223      	bcs.n	8001da0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6a1b      	ldr	r3, [r3, #32]
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f000 fd89 	bl	8002874 <RCC_SetFlashLatencyFromMSIRange>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d001      	beq.n	8001d6c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	e383      	b.n	8002474 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d6c:	4b73      	ldr	r3, [pc, #460]	@ (8001f3c <HAL_RCC_OscConfig+0x270>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a72      	ldr	r2, [pc, #456]	@ (8001f3c <HAL_RCC_OscConfig+0x270>)
 8001d72:	f043 0308 	orr.w	r3, r3, #8
 8001d76:	6013      	str	r3, [r2, #0]
 8001d78:	4b70      	ldr	r3, [pc, #448]	@ (8001f3c <HAL_RCC_OscConfig+0x270>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6a1b      	ldr	r3, [r3, #32]
 8001d84:	496d      	ldr	r1, [pc, #436]	@ (8001f3c <HAL_RCC_OscConfig+0x270>)
 8001d86:	4313      	orrs	r3, r2
 8001d88:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d8a:	4b6c      	ldr	r3, [pc, #432]	@ (8001f3c <HAL_RCC_OscConfig+0x270>)
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	69db      	ldr	r3, [r3, #28]
 8001d96:	021b      	lsls	r3, r3, #8
 8001d98:	4968      	ldr	r1, [pc, #416]	@ (8001f3c <HAL_RCC_OscConfig+0x270>)
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	604b      	str	r3, [r1, #4]
 8001d9e:	e025      	b.n	8001dec <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001da0:	4b66      	ldr	r3, [pc, #408]	@ (8001f3c <HAL_RCC_OscConfig+0x270>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a65      	ldr	r2, [pc, #404]	@ (8001f3c <HAL_RCC_OscConfig+0x270>)
 8001da6:	f043 0308 	orr.w	r3, r3, #8
 8001daa:	6013      	str	r3, [r2, #0]
 8001dac:	4b63      	ldr	r3, [pc, #396]	@ (8001f3c <HAL_RCC_OscConfig+0x270>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6a1b      	ldr	r3, [r3, #32]
 8001db8:	4960      	ldr	r1, [pc, #384]	@ (8001f3c <HAL_RCC_OscConfig+0x270>)
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001dbe:	4b5f      	ldr	r3, [pc, #380]	@ (8001f3c <HAL_RCC_OscConfig+0x270>)
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	69db      	ldr	r3, [r3, #28]
 8001dca:	021b      	lsls	r3, r3, #8
 8001dcc:	495b      	ldr	r1, [pc, #364]	@ (8001f3c <HAL_RCC_OscConfig+0x270>)
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001dd2:	69bb      	ldr	r3, [r7, #24]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d109      	bne.n	8001dec <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6a1b      	ldr	r3, [r3, #32]
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f000 fd49 	bl	8002874 <RCC_SetFlashLatencyFromMSIRange>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d001      	beq.n	8001dec <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001de8:	2301      	movs	r3, #1
 8001dea:	e343      	b.n	8002474 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001dec:	f000 fc7e 	bl	80026ec <HAL_RCC_GetSysClockFreq>
 8001df0:	4602      	mov	r2, r0
 8001df2:	4b52      	ldr	r3, [pc, #328]	@ (8001f3c <HAL_RCC_OscConfig+0x270>)
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	091b      	lsrs	r3, r3, #4
 8001df8:	f003 030f 	and.w	r3, r3, #15
 8001dfc:	4950      	ldr	r1, [pc, #320]	@ (8001f40 <HAL_RCC_OscConfig+0x274>)
 8001dfe:	5ccb      	ldrb	r3, [r1, r3]
 8001e00:	f003 031f 	and.w	r3, r3, #31
 8001e04:	fa22 f303 	lsr.w	r3, r2, r3
 8001e08:	4a4e      	ldr	r2, [pc, #312]	@ (8001f44 <HAL_RCC_OscConfig+0x278>)
 8001e0a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001e0c:	4b4e      	ldr	r3, [pc, #312]	@ (8001f48 <HAL_RCC_OscConfig+0x27c>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4618      	mov	r0, r3
 8001e12:	f7ff f9cb 	bl	80011ac <HAL_InitTick>
 8001e16:	4603      	mov	r3, r0
 8001e18:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001e1a:	7bfb      	ldrb	r3, [r7, #15]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d052      	beq.n	8001ec6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001e20:	7bfb      	ldrb	r3, [r7, #15]
 8001e22:	e327      	b.n	8002474 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	699b      	ldr	r3, [r3, #24]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d032      	beq.n	8001e92 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001e2c:	4b43      	ldr	r3, [pc, #268]	@ (8001f3c <HAL_RCC_OscConfig+0x270>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a42      	ldr	r2, [pc, #264]	@ (8001f3c <HAL_RCC_OscConfig+0x270>)
 8001e32:	f043 0301 	orr.w	r3, r3, #1
 8001e36:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001e38:	f7ff fa08 	bl	800124c <HAL_GetTick>
 8001e3c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001e3e:	e008      	b.n	8001e52 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001e40:	f7ff fa04 	bl	800124c <HAL_GetTick>
 8001e44:	4602      	mov	r2, r0
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	1ad3      	subs	r3, r2, r3
 8001e4a:	2b02      	cmp	r3, #2
 8001e4c:	d901      	bls.n	8001e52 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001e4e:	2303      	movs	r3, #3
 8001e50:	e310      	b.n	8002474 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001e52:	4b3a      	ldr	r3, [pc, #232]	@ (8001f3c <HAL_RCC_OscConfig+0x270>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f003 0302 	and.w	r3, r3, #2
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d0f0      	beq.n	8001e40 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e5e:	4b37      	ldr	r3, [pc, #220]	@ (8001f3c <HAL_RCC_OscConfig+0x270>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a36      	ldr	r2, [pc, #216]	@ (8001f3c <HAL_RCC_OscConfig+0x270>)
 8001e64:	f043 0308 	orr.w	r3, r3, #8
 8001e68:	6013      	str	r3, [r2, #0]
 8001e6a:	4b34      	ldr	r3, [pc, #208]	@ (8001f3c <HAL_RCC_OscConfig+0x270>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6a1b      	ldr	r3, [r3, #32]
 8001e76:	4931      	ldr	r1, [pc, #196]	@ (8001f3c <HAL_RCC_OscConfig+0x270>)
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e7c:	4b2f      	ldr	r3, [pc, #188]	@ (8001f3c <HAL_RCC_OscConfig+0x270>)
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	69db      	ldr	r3, [r3, #28]
 8001e88:	021b      	lsls	r3, r3, #8
 8001e8a:	492c      	ldr	r1, [pc, #176]	@ (8001f3c <HAL_RCC_OscConfig+0x270>)
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	604b      	str	r3, [r1, #4]
 8001e90:	e01a      	b.n	8001ec8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001e92:	4b2a      	ldr	r3, [pc, #168]	@ (8001f3c <HAL_RCC_OscConfig+0x270>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a29      	ldr	r2, [pc, #164]	@ (8001f3c <HAL_RCC_OscConfig+0x270>)
 8001e98:	f023 0301 	bic.w	r3, r3, #1
 8001e9c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001e9e:	f7ff f9d5 	bl	800124c <HAL_GetTick>
 8001ea2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001ea4:	e008      	b.n	8001eb8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001ea6:	f7ff f9d1 	bl	800124c <HAL_GetTick>
 8001eaa:	4602      	mov	r2, r0
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	1ad3      	subs	r3, r2, r3
 8001eb0:	2b02      	cmp	r3, #2
 8001eb2:	d901      	bls.n	8001eb8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001eb4:	2303      	movs	r3, #3
 8001eb6:	e2dd      	b.n	8002474 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001eb8:	4b20      	ldr	r3, [pc, #128]	@ (8001f3c <HAL_RCC_OscConfig+0x270>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 0302 	and.w	r3, r3, #2
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d1f0      	bne.n	8001ea6 <HAL_RCC_OscConfig+0x1da>
 8001ec4:	e000      	b.n	8001ec8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001ec6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f003 0301 	and.w	r3, r3, #1
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d074      	beq.n	8001fbe <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001ed4:	69bb      	ldr	r3, [r7, #24]
 8001ed6:	2b08      	cmp	r3, #8
 8001ed8:	d005      	beq.n	8001ee6 <HAL_RCC_OscConfig+0x21a>
 8001eda:	69bb      	ldr	r3, [r7, #24]
 8001edc:	2b0c      	cmp	r3, #12
 8001ede:	d10e      	bne.n	8001efe <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	2b03      	cmp	r3, #3
 8001ee4:	d10b      	bne.n	8001efe <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ee6:	4b15      	ldr	r3, [pc, #84]	@ (8001f3c <HAL_RCC_OscConfig+0x270>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d064      	beq.n	8001fbc <HAL_RCC_OscConfig+0x2f0>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d160      	bne.n	8001fbc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	e2ba      	b.n	8002474 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f06:	d106      	bne.n	8001f16 <HAL_RCC_OscConfig+0x24a>
 8001f08:	4b0c      	ldr	r3, [pc, #48]	@ (8001f3c <HAL_RCC_OscConfig+0x270>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a0b      	ldr	r2, [pc, #44]	@ (8001f3c <HAL_RCC_OscConfig+0x270>)
 8001f0e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f12:	6013      	str	r3, [r2, #0]
 8001f14:	e026      	b.n	8001f64 <HAL_RCC_OscConfig+0x298>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001f1e:	d115      	bne.n	8001f4c <HAL_RCC_OscConfig+0x280>
 8001f20:	4b06      	ldr	r3, [pc, #24]	@ (8001f3c <HAL_RCC_OscConfig+0x270>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a05      	ldr	r2, [pc, #20]	@ (8001f3c <HAL_RCC_OscConfig+0x270>)
 8001f26:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f2a:	6013      	str	r3, [r2, #0]
 8001f2c:	4b03      	ldr	r3, [pc, #12]	@ (8001f3c <HAL_RCC_OscConfig+0x270>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a02      	ldr	r2, [pc, #8]	@ (8001f3c <HAL_RCC_OscConfig+0x270>)
 8001f32:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f36:	6013      	str	r3, [r2, #0]
 8001f38:	e014      	b.n	8001f64 <HAL_RCC_OscConfig+0x298>
 8001f3a:	bf00      	nop
 8001f3c:	40021000 	.word	0x40021000
 8001f40:	08005bf0 	.word	0x08005bf0
 8001f44:	20000000 	.word	0x20000000
 8001f48:	20000004 	.word	0x20000004
 8001f4c:	4ba0      	ldr	r3, [pc, #640]	@ (80021d0 <HAL_RCC_OscConfig+0x504>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a9f      	ldr	r2, [pc, #636]	@ (80021d0 <HAL_RCC_OscConfig+0x504>)
 8001f52:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f56:	6013      	str	r3, [r2, #0]
 8001f58:	4b9d      	ldr	r3, [pc, #628]	@ (80021d0 <HAL_RCC_OscConfig+0x504>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a9c      	ldr	r2, [pc, #624]	@ (80021d0 <HAL_RCC_OscConfig+0x504>)
 8001f5e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d013      	beq.n	8001f94 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f6c:	f7ff f96e 	bl	800124c <HAL_GetTick>
 8001f70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f72:	e008      	b.n	8001f86 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f74:	f7ff f96a 	bl	800124c <HAL_GetTick>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	1ad3      	subs	r3, r2, r3
 8001f7e:	2b64      	cmp	r3, #100	@ 0x64
 8001f80:	d901      	bls.n	8001f86 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001f82:	2303      	movs	r3, #3
 8001f84:	e276      	b.n	8002474 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f86:	4b92      	ldr	r3, [pc, #584]	@ (80021d0 <HAL_RCC_OscConfig+0x504>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d0f0      	beq.n	8001f74 <HAL_RCC_OscConfig+0x2a8>
 8001f92:	e014      	b.n	8001fbe <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f94:	f7ff f95a 	bl	800124c <HAL_GetTick>
 8001f98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f9a:	e008      	b.n	8001fae <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f9c:	f7ff f956 	bl	800124c <HAL_GetTick>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	1ad3      	subs	r3, r2, r3
 8001fa6:	2b64      	cmp	r3, #100	@ 0x64
 8001fa8:	d901      	bls.n	8001fae <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001faa:	2303      	movs	r3, #3
 8001fac:	e262      	b.n	8002474 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001fae:	4b88      	ldr	r3, [pc, #544]	@ (80021d0 <HAL_RCC_OscConfig+0x504>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d1f0      	bne.n	8001f9c <HAL_RCC_OscConfig+0x2d0>
 8001fba:	e000      	b.n	8001fbe <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fbc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f003 0302 	and.w	r3, r3, #2
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d060      	beq.n	800208c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001fca:	69bb      	ldr	r3, [r7, #24]
 8001fcc:	2b04      	cmp	r3, #4
 8001fce:	d005      	beq.n	8001fdc <HAL_RCC_OscConfig+0x310>
 8001fd0:	69bb      	ldr	r3, [r7, #24]
 8001fd2:	2b0c      	cmp	r3, #12
 8001fd4:	d119      	bne.n	800200a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	2b02      	cmp	r3, #2
 8001fda:	d116      	bne.n	800200a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001fdc:	4b7c      	ldr	r3, [pc, #496]	@ (80021d0 <HAL_RCC_OscConfig+0x504>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d005      	beq.n	8001ff4 <HAL_RCC_OscConfig+0x328>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	68db      	ldr	r3, [r3, #12]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d101      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	e23f      	b.n	8002474 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ff4:	4b76      	ldr	r3, [pc, #472]	@ (80021d0 <HAL_RCC_OscConfig+0x504>)
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	691b      	ldr	r3, [r3, #16]
 8002000:	061b      	lsls	r3, r3, #24
 8002002:	4973      	ldr	r1, [pc, #460]	@ (80021d0 <HAL_RCC_OscConfig+0x504>)
 8002004:	4313      	orrs	r3, r2
 8002006:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002008:	e040      	b.n	800208c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	68db      	ldr	r3, [r3, #12]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d023      	beq.n	800205a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002012:	4b6f      	ldr	r3, [pc, #444]	@ (80021d0 <HAL_RCC_OscConfig+0x504>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a6e      	ldr	r2, [pc, #440]	@ (80021d0 <HAL_RCC_OscConfig+0x504>)
 8002018:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800201c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800201e:	f7ff f915 	bl	800124c <HAL_GetTick>
 8002022:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002024:	e008      	b.n	8002038 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002026:	f7ff f911 	bl	800124c <HAL_GetTick>
 800202a:	4602      	mov	r2, r0
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	1ad3      	subs	r3, r2, r3
 8002030:	2b02      	cmp	r3, #2
 8002032:	d901      	bls.n	8002038 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002034:	2303      	movs	r3, #3
 8002036:	e21d      	b.n	8002474 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002038:	4b65      	ldr	r3, [pc, #404]	@ (80021d0 <HAL_RCC_OscConfig+0x504>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002040:	2b00      	cmp	r3, #0
 8002042:	d0f0      	beq.n	8002026 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002044:	4b62      	ldr	r3, [pc, #392]	@ (80021d0 <HAL_RCC_OscConfig+0x504>)
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	691b      	ldr	r3, [r3, #16]
 8002050:	061b      	lsls	r3, r3, #24
 8002052:	495f      	ldr	r1, [pc, #380]	@ (80021d0 <HAL_RCC_OscConfig+0x504>)
 8002054:	4313      	orrs	r3, r2
 8002056:	604b      	str	r3, [r1, #4]
 8002058:	e018      	b.n	800208c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800205a:	4b5d      	ldr	r3, [pc, #372]	@ (80021d0 <HAL_RCC_OscConfig+0x504>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a5c      	ldr	r2, [pc, #368]	@ (80021d0 <HAL_RCC_OscConfig+0x504>)
 8002060:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002064:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002066:	f7ff f8f1 	bl	800124c <HAL_GetTick>
 800206a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800206c:	e008      	b.n	8002080 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800206e:	f7ff f8ed 	bl	800124c <HAL_GetTick>
 8002072:	4602      	mov	r2, r0
 8002074:	693b      	ldr	r3, [r7, #16]
 8002076:	1ad3      	subs	r3, r2, r3
 8002078:	2b02      	cmp	r3, #2
 800207a:	d901      	bls.n	8002080 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800207c:	2303      	movs	r3, #3
 800207e:	e1f9      	b.n	8002474 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002080:	4b53      	ldr	r3, [pc, #332]	@ (80021d0 <HAL_RCC_OscConfig+0x504>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002088:	2b00      	cmp	r3, #0
 800208a:	d1f0      	bne.n	800206e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f003 0308 	and.w	r3, r3, #8
 8002094:	2b00      	cmp	r3, #0
 8002096:	d03c      	beq.n	8002112 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	695b      	ldr	r3, [r3, #20]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d01c      	beq.n	80020da <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020a0:	4b4b      	ldr	r3, [pc, #300]	@ (80021d0 <HAL_RCC_OscConfig+0x504>)
 80020a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80020a6:	4a4a      	ldr	r2, [pc, #296]	@ (80021d0 <HAL_RCC_OscConfig+0x504>)
 80020a8:	f043 0301 	orr.w	r3, r3, #1
 80020ac:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020b0:	f7ff f8cc 	bl	800124c <HAL_GetTick>
 80020b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80020b6:	e008      	b.n	80020ca <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020b8:	f7ff f8c8 	bl	800124c <HAL_GetTick>
 80020bc:	4602      	mov	r2, r0
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	1ad3      	subs	r3, r2, r3
 80020c2:	2b02      	cmp	r3, #2
 80020c4:	d901      	bls.n	80020ca <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80020c6:	2303      	movs	r3, #3
 80020c8:	e1d4      	b.n	8002474 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80020ca:	4b41      	ldr	r3, [pc, #260]	@ (80021d0 <HAL_RCC_OscConfig+0x504>)
 80020cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80020d0:	f003 0302 	and.w	r3, r3, #2
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d0ef      	beq.n	80020b8 <HAL_RCC_OscConfig+0x3ec>
 80020d8:	e01b      	b.n	8002112 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020da:	4b3d      	ldr	r3, [pc, #244]	@ (80021d0 <HAL_RCC_OscConfig+0x504>)
 80020dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80020e0:	4a3b      	ldr	r2, [pc, #236]	@ (80021d0 <HAL_RCC_OscConfig+0x504>)
 80020e2:	f023 0301 	bic.w	r3, r3, #1
 80020e6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020ea:	f7ff f8af 	bl	800124c <HAL_GetTick>
 80020ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80020f0:	e008      	b.n	8002104 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020f2:	f7ff f8ab 	bl	800124c <HAL_GetTick>
 80020f6:	4602      	mov	r2, r0
 80020f8:	693b      	ldr	r3, [r7, #16]
 80020fa:	1ad3      	subs	r3, r2, r3
 80020fc:	2b02      	cmp	r3, #2
 80020fe:	d901      	bls.n	8002104 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002100:	2303      	movs	r3, #3
 8002102:	e1b7      	b.n	8002474 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002104:	4b32      	ldr	r3, [pc, #200]	@ (80021d0 <HAL_RCC_OscConfig+0x504>)
 8002106:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800210a:	f003 0302 	and.w	r3, r3, #2
 800210e:	2b00      	cmp	r3, #0
 8002110:	d1ef      	bne.n	80020f2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f003 0304 	and.w	r3, r3, #4
 800211a:	2b00      	cmp	r3, #0
 800211c:	f000 80a6 	beq.w	800226c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002120:	2300      	movs	r3, #0
 8002122:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002124:	4b2a      	ldr	r3, [pc, #168]	@ (80021d0 <HAL_RCC_OscConfig+0x504>)
 8002126:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002128:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800212c:	2b00      	cmp	r3, #0
 800212e:	d10d      	bne.n	800214c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002130:	4b27      	ldr	r3, [pc, #156]	@ (80021d0 <HAL_RCC_OscConfig+0x504>)
 8002132:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002134:	4a26      	ldr	r2, [pc, #152]	@ (80021d0 <HAL_RCC_OscConfig+0x504>)
 8002136:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800213a:	6593      	str	r3, [r2, #88]	@ 0x58
 800213c:	4b24      	ldr	r3, [pc, #144]	@ (80021d0 <HAL_RCC_OscConfig+0x504>)
 800213e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002140:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002144:	60bb      	str	r3, [r7, #8]
 8002146:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002148:	2301      	movs	r3, #1
 800214a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800214c:	4b21      	ldr	r3, [pc, #132]	@ (80021d4 <HAL_RCC_OscConfig+0x508>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002154:	2b00      	cmp	r3, #0
 8002156:	d118      	bne.n	800218a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002158:	4b1e      	ldr	r3, [pc, #120]	@ (80021d4 <HAL_RCC_OscConfig+0x508>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a1d      	ldr	r2, [pc, #116]	@ (80021d4 <HAL_RCC_OscConfig+0x508>)
 800215e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002162:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002164:	f7ff f872 	bl	800124c <HAL_GetTick>
 8002168:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800216a:	e008      	b.n	800217e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800216c:	f7ff f86e 	bl	800124c <HAL_GetTick>
 8002170:	4602      	mov	r2, r0
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	1ad3      	subs	r3, r2, r3
 8002176:	2b02      	cmp	r3, #2
 8002178:	d901      	bls.n	800217e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800217a:	2303      	movs	r3, #3
 800217c:	e17a      	b.n	8002474 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800217e:	4b15      	ldr	r3, [pc, #84]	@ (80021d4 <HAL_RCC_OscConfig+0x508>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002186:	2b00      	cmp	r3, #0
 8002188:	d0f0      	beq.n	800216c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	689b      	ldr	r3, [r3, #8]
 800218e:	2b01      	cmp	r3, #1
 8002190:	d108      	bne.n	80021a4 <HAL_RCC_OscConfig+0x4d8>
 8002192:	4b0f      	ldr	r3, [pc, #60]	@ (80021d0 <HAL_RCC_OscConfig+0x504>)
 8002194:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002198:	4a0d      	ldr	r2, [pc, #52]	@ (80021d0 <HAL_RCC_OscConfig+0x504>)
 800219a:	f043 0301 	orr.w	r3, r3, #1
 800219e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80021a2:	e029      	b.n	80021f8 <HAL_RCC_OscConfig+0x52c>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	2b05      	cmp	r3, #5
 80021aa:	d115      	bne.n	80021d8 <HAL_RCC_OscConfig+0x50c>
 80021ac:	4b08      	ldr	r3, [pc, #32]	@ (80021d0 <HAL_RCC_OscConfig+0x504>)
 80021ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021b2:	4a07      	ldr	r2, [pc, #28]	@ (80021d0 <HAL_RCC_OscConfig+0x504>)
 80021b4:	f043 0304 	orr.w	r3, r3, #4
 80021b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80021bc:	4b04      	ldr	r3, [pc, #16]	@ (80021d0 <HAL_RCC_OscConfig+0x504>)
 80021be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021c2:	4a03      	ldr	r2, [pc, #12]	@ (80021d0 <HAL_RCC_OscConfig+0x504>)
 80021c4:	f043 0301 	orr.w	r3, r3, #1
 80021c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80021cc:	e014      	b.n	80021f8 <HAL_RCC_OscConfig+0x52c>
 80021ce:	bf00      	nop
 80021d0:	40021000 	.word	0x40021000
 80021d4:	40007000 	.word	0x40007000
 80021d8:	4b9c      	ldr	r3, [pc, #624]	@ (800244c <HAL_RCC_OscConfig+0x780>)
 80021da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021de:	4a9b      	ldr	r2, [pc, #620]	@ (800244c <HAL_RCC_OscConfig+0x780>)
 80021e0:	f023 0301 	bic.w	r3, r3, #1
 80021e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80021e8:	4b98      	ldr	r3, [pc, #608]	@ (800244c <HAL_RCC_OscConfig+0x780>)
 80021ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021ee:	4a97      	ldr	r2, [pc, #604]	@ (800244c <HAL_RCC_OscConfig+0x780>)
 80021f0:	f023 0304 	bic.w	r3, r3, #4
 80021f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d016      	beq.n	800222e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002200:	f7ff f824 	bl	800124c <HAL_GetTick>
 8002204:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002206:	e00a      	b.n	800221e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002208:	f7ff f820 	bl	800124c <HAL_GetTick>
 800220c:	4602      	mov	r2, r0
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	1ad3      	subs	r3, r2, r3
 8002212:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002216:	4293      	cmp	r3, r2
 8002218:	d901      	bls.n	800221e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800221a:	2303      	movs	r3, #3
 800221c:	e12a      	b.n	8002474 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800221e:	4b8b      	ldr	r3, [pc, #556]	@ (800244c <HAL_RCC_OscConfig+0x780>)
 8002220:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002224:	f003 0302 	and.w	r3, r3, #2
 8002228:	2b00      	cmp	r3, #0
 800222a:	d0ed      	beq.n	8002208 <HAL_RCC_OscConfig+0x53c>
 800222c:	e015      	b.n	800225a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800222e:	f7ff f80d 	bl	800124c <HAL_GetTick>
 8002232:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002234:	e00a      	b.n	800224c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002236:	f7ff f809 	bl	800124c <HAL_GetTick>
 800223a:	4602      	mov	r2, r0
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	1ad3      	subs	r3, r2, r3
 8002240:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002244:	4293      	cmp	r3, r2
 8002246:	d901      	bls.n	800224c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002248:	2303      	movs	r3, #3
 800224a:	e113      	b.n	8002474 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800224c:	4b7f      	ldr	r3, [pc, #508]	@ (800244c <HAL_RCC_OscConfig+0x780>)
 800224e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002252:	f003 0302 	and.w	r3, r3, #2
 8002256:	2b00      	cmp	r3, #0
 8002258:	d1ed      	bne.n	8002236 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800225a:	7ffb      	ldrb	r3, [r7, #31]
 800225c:	2b01      	cmp	r3, #1
 800225e:	d105      	bne.n	800226c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002260:	4b7a      	ldr	r3, [pc, #488]	@ (800244c <HAL_RCC_OscConfig+0x780>)
 8002262:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002264:	4a79      	ldr	r2, [pc, #484]	@ (800244c <HAL_RCC_OscConfig+0x780>)
 8002266:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800226a:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002270:	2b00      	cmp	r3, #0
 8002272:	f000 80fe 	beq.w	8002472 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800227a:	2b02      	cmp	r3, #2
 800227c:	f040 80d0 	bne.w	8002420 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002280:	4b72      	ldr	r3, [pc, #456]	@ (800244c <HAL_RCC_OscConfig+0x780>)
 8002282:	68db      	ldr	r3, [r3, #12]
 8002284:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	f003 0203 	and.w	r2, r3, #3
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002290:	429a      	cmp	r2, r3
 8002292:	d130      	bne.n	80022f6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800229e:	3b01      	subs	r3, #1
 80022a0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80022a2:	429a      	cmp	r2, r3
 80022a4:	d127      	bne.n	80022f6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022b0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80022b2:	429a      	cmp	r2, r3
 80022b4:	d11f      	bne.n	80022f6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022bc:	687a      	ldr	r2, [r7, #4]
 80022be:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80022c0:	2a07      	cmp	r2, #7
 80022c2:	bf14      	ite	ne
 80022c4:	2201      	movne	r2, #1
 80022c6:	2200      	moveq	r2, #0
 80022c8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d113      	bne.n	80022f6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022d8:	085b      	lsrs	r3, r3, #1
 80022da:	3b01      	subs	r3, #1
 80022dc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80022de:	429a      	cmp	r2, r3
 80022e0:	d109      	bne.n	80022f6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ec:	085b      	lsrs	r3, r3, #1
 80022ee:	3b01      	subs	r3, #1
 80022f0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80022f2:	429a      	cmp	r2, r3
 80022f4:	d06e      	beq.n	80023d4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80022f6:	69bb      	ldr	r3, [r7, #24]
 80022f8:	2b0c      	cmp	r3, #12
 80022fa:	d069      	beq.n	80023d0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80022fc:	4b53      	ldr	r3, [pc, #332]	@ (800244c <HAL_RCC_OscConfig+0x780>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002304:	2b00      	cmp	r3, #0
 8002306:	d105      	bne.n	8002314 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002308:	4b50      	ldr	r3, [pc, #320]	@ (800244c <HAL_RCC_OscConfig+0x780>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002310:	2b00      	cmp	r3, #0
 8002312:	d001      	beq.n	8002318 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002314:	2301      	movs	r3, #1
 8002316:	e0ad      	b.n	8002474 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002318:	4b4c      	ldr	r3, [pc, #304]	@ (800244c <HAL_RCC_OscConfig+0x780>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a4b      	ldr	r2, [pc, #300]	@ (800244c <HAL_RCC_OscConfig+0x780>)
 800231e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002322:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002324:	f7fe ff92 	bl	800124c <HAL_GetTick>
 8002328:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800232a:	e008      	b.n	800233e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800232c:	f7fe ff8e 	bl	800124c <HAL_GetTick>
 8002330:	4602      	mov	r2, r0
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	1ad3      	subs	r3, r2, r3
 8002336:	2b02      	cmp	r3, #2
 8002338:	d901      	bls.n	800233e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800233a:	2303      	movs	r3, #3
 800233c:	e09a      	b.n	8002474 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800233e:	4b43      	ldr	r3, [pc, #268]	@ (800244c <HAL_RCC_OscConfig+0x780>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002346:	2b00      	cmp	r3, #0
 8002348:	d1f0      	bne.n	800232c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800234a:	4b40      	ldr	r3, [pc, #256]	@ (800244c <HAL_RCC_OscConfig+0x780>)
 800234c:	68da      	ldr	r2, [r3, #12]
 800234e:	4b40      	ldr	r3, [pc, #256]	@ (8002450 <HAL_RCC_OscConfig+0x784>)
 8002350:	4013      	ands	r3, r2
 8002352:	687a      	ldr	r2, [r7, #4]
 8002354:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002356:	687a      	ldr	r2, [r7, #4]
 8002358:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800235a:	3a01      	subs	r2, #1
 800235c:	0112      	lsls	r2, r2, #4
 800235e:	4311      	orrs	r1, r2
 8002360:	687a      	ldr	r2, [r7, #4]
 8002362:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002364:	0212      	lsls	r2, r2, #8
 8002366:	4311      	orrs	r1, r2
 8002368:	687a      	ldr	r2, [r7, #4]
 800236a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800236c:	0852      	lsrs	r2, r2, #1
 800236e:	3a01      	subs	r2, #1
 8002370:	0552      	lsls	r2, r2, #21
 8002372:	4311      	orrs	r1, r2
 8002374:	687a      	ldr	r2, [r7, #4]
 8002376:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002378:	0852      	lsrs	r2, r2, #1
 800237a:	3a01      	subs	r2, #1
 800237c:	0652      	lsls	r2, r2, #25
 800237e:	4311      	orrs	r1, r2
 8002380:	687a      	ldr	r2, [r7, #4]
 8002382:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002384:	0912      	lsrs	r2, r2, #4
 8002386:	0452      	lsls	r2, r2, #17
 8002388:	430a      	orrs	r2, r1
 800238a:	4930      	ldr	r1, [pc, #192]	@ (800244c <HAL_RCC_OscConfig+0x780>)
 800238c:	4313      	orrs	r3, r2
 800238e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002390:	4b2e      	ldr	r3, [pc, #184]	@ (800244c <HAL_RCC_OscConfig+0x780>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a2d      	ldr	r2, [pc, #180]	@ (800244c <HAL_RCC_OscConfig+0x780>)
 8002396:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800239a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800239c:	4b2b      	ldr	r3, [pc, #172]	@ (800244c <HAL_RCC_OscConfig+0x780>)
 800239e:	68db      	ldr	r3, [r3, #12]
 80023a0:	4a2a      	ldr	r2, [pc, #168]	@ (800244c <HAL_RCC_OscConfig+0x780>)
 80023a2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80023a6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80023a8:	f7fe ff50 	bl	800124c <HAL_GetTick>
 80023ac:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023ae:	e008      	b.n	80023c2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023b0:	f7fe ff4c 	bl	800124c <HAL_GetTick>
 80023b4:	4602      	mov	r2, r0
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	1ad3      	subs	r3, r2, r3
 80023ba:	2b02      	cmp	r3, #2
 80023bc:	d901      	bls.n	80023c2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80023be:	2303      	movs	r3, #3
 80023c0:	e058      	b.n	8002474 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023c2:	4b22      	ldr	r3, [pc, #136]	@ (800244c <HAL_RCC_OscConfig+0x780>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d0f0      	beq.n	80023b0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80023ce:	e050      	b.n	8002472 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80023d0:	2301      	movs	r3, #1
 80023d2:	e04f      	b.n	8002474 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023d4:	4b1d      	ldr	r3, [pc, #116]	@ (800244c <HAL_RCC_OscConfig+0x780>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d148      	bne.n	8002472 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80023e0:	4b1a      	ldr	r3, [pc, #104]	@ (800244c <HAL_RCC_OscConfig+0x780>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a19      	ldr	r2, [pc, #100]	@ (800244c <HAL_RCC_OscConfig+0x780>)
 80023e6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80023ea:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80023ec:	4b17      	ldr	r3, [pc, #92]	@ (800244c <HAL_RCC_OscConfig+0x780>)
 80023ee:	68db      	ldr	r3, [r3, #12]
 80023f0:	4a16      	ldr	r2, [pc, #88]	@ (800244c <HAL_RCC_OscConfig+0x780>)
 80023f2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80023f6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80023f8:	f7fe ff28 	bl	800124c <HAL_GetTick>
 80023fc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023fe:	e008      	b.n	8002412 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002400:	f7fe ff24 	bl	800124c <HAL_GetTick>
 8002404:	4602      	mov	r2, r0
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	1ad3      	subs	r3, r2, r3
 800240a:	2b02      	cmp	r3, #2
 800240c:	d901      	bls.n	8002412 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800240e:	2303      	movs	r3, #3
 8002410:	e030      	b.n	8002474 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002412:	4b0e      	ldr	r3, [pc, #56]	@ (800244c <HAL_RCC_OscConfig+0x780>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800241a:	2b00      	cmp	r3, #0
 800241c:	d0f0      	beq.n	8002400 <HAL_RCC_OscConfig+0x734>
 800241e:	e028      	b.n	8002472 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002420:	69bb      	ldr	r3, [r7, #24]
 8002422:	2b0c      	cmp	r3, #12
 8002424:	d023      	beq.n	800246e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002426:	4b09      	ldr	r3, [pc, #36]	@ (800244c <HAL_RCC_OscConfig+0x780>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a08      	ldr	r2, [pc, #32]	@ (800244c <HAL_RCC_OscConfig+0x780>)
 800242c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002430:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002432:	f7fe ff0b 	bl	800124c <HAL_GetTick>
 8002436:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002438:	e00c      	b.n	8002454 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800243a:	f7fe ff07 	bl	800124c <HAL_GetTick>
 800243e:	4602      	mov	r2, r0
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	1ad3      	subs	r3, r2, r3
 8002444:	2b02      	cmp	r3, #2
 8002446:	d905      	bls.n	8002454 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002448:	2303      	movs	r3, #3
 800244a:	e013      	b.n	8002474 <HAL_RCC_OscConfig+0x7a8>
 800244c:	40021000 	.word	0x40021000
 8002450:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002454:	4b09      	ldr	r3, [pc, #36]	@ (800247c <HAL_RCC_OscConfig+0x7b0>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800245c:	2b00      	cmp	r3, #0
 800245e:	d1ec      	bne.n	800243a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002460:	4b06      	ldr	r3, [pc, #24]	@ (800247c <HAL_RCC_OscConfig+0x7b0>)
 8002462:	68da      	ldr	r2, [r3, #12]
 8002464:	4905      	ldr	r1, [pc, #20]	@ (800247c <HAL_RCC_OscConfig+0x7b0>)
 8002466:	4b06      	ldr	r3, [pc, #24]	@ (8002480 <HAL_RCC_OscConfig+0x7b4>)
 8002468:	4013      	ands	r3, r2
 800246a:	60cb      	str	r3, [r1, #12]
 800246c:	e001      	b.n	8002472 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	e000      	b.n	8002474 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002472:	2300      	movs	r3, #0
}
 8002474:	4618      	mov	r0, r3
 8002476:	3720      	adds	r7, #32
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}
 800247c:	40021000 	.word	0x40021000
 8002480:	feeefffc 	.word	0xfeeefffc

08002484 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b084      	sub	sp, #16
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
 800248c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d101      	bne.n	8002498 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002494:	2301      	movs	r3, #1
 8002496:	e0e7      	b.n	8002668 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002498:	4b75      	ldr	r3, [pc, #468]	@ (8002670 <HAL_RCC_ClockConfig+0x1ec>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f003 0307 	and.w	r3, r3, #7
 80024a0:	683a      	ldr	r2, [r7, #0]
 80024a2:	429a      	cmp	r2, r3
 80024a4:	d910      	bls.n	80024c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024a6:	4b72      	ldr	r3, [pc, #456]	@ (8002670 <HAL_RCC_ClockConfig+0x1ec>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f023 0207 	bic.w	r2, r3, #7
 80024ae:	4970      	ldr	r1, [pc, #448]	@ (8002670 <HAL_RCC_ClockConfig+0x1ec>)
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	4313      	orrs	r3, r2
 80024b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024b6:	4b6e      	ldr	r3, [pc, #440]	@ (8002670 <HAL_RCC_ClockConfig+0x1ec>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 0307 	and.w	r3, r3, #7
 80024be:	683a      	ldr	r2, [r7, #0]
 80024c0:	429a      	cmp	r2, r3
 80024c2:	d001      	beq.n	80024c8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80024c4:	2301      	movs	r3, #1
 80024c6:	e0cf      	b.n	8002668 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 0302 	and.w	r3, r3, #2
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d010      	beq.n	80024f6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	689a      	ldr	r2, [r3, #8]
 80024d8:	4b66      	ldr	r3, [pc, #408]	@ (8002674 <HAL_RCC_ClockConfig+0x1f0>)
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80024e0:	429a      	cmp	r2, r3
 80024e2:	d908      	bls.n	80024f6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024e4:	4b63      	ldr	r3, [pc, #396]	@ (8002674 <HAL_RCC_ClockConfig+0x1f0>)
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	4960      	ldr	r1, [pc, #384]	@ (8002674 <HAL_RCC_ClockConfig+0x1f0>)
 80024f2:	4313      	orrs	r3, r2
 80024f4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f003 0301 	and.w	r3, r3, #1
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d04c      	beq.n	800259c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	2b03      	cmp	r3, #3
 8002508:	d107      	bne.n	800251a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800250a:	4b5a      	ldr	r3, [pc, #360]	@ (8002674 <HAL_RCC_ClockConfig+0x1f0>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002512:	2b00      	cmp	r3, #0
 8002514:	d121      	bne.n	800255a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	e0a6      	b.n	8002668 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	2b02      	cmp	r3, #2
 8002520:	d107      	bne.n	8002532 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002522:	4b54      	ldr	r3, [pc, #336]	@ (8002674 <HAL_RCC_ClockConfig+0x1f0>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800252a:	2b00      	cmp	r3, #0
 800252c:	d115      	bne.n	800255a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e09a      	b.n	8002668 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d107      	bne.n	800254a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800253a:	4b4e      	ldr	r3, [pc, #312]	@ (8002674 <HAL_RCC_ClockConfig+0x1f0>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 0302 	and.w	r3, r3, #2
 8002542:	2b00      	cmp	r3, #0
 8002544:	d109      	bne.n	800255a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e08e      	b.n	8002668 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800254a:	4b4a      	ldr	r3, [pc, #296]	@ (8002674 <HAL_RCC_ClockConfig+0x1f0>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002552:	2b00      	cmp	r3, #0
 8002554:	d101      	bne.n	800255a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	e086      	b.n	8002668 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800255a:	4b46      	ldr	r3, [pc, #280]	@ (8002674 <HAL_RCC_ClockConfig+0x1f0>)
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	f023 0203 	bic.w	r2, r3, #3
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	4943      	ldr	r1, [pc, #268]	@ (8002674 <HAL_RCC_ClockConfig+0x1f0>)
 8002568:	4313      	orrs	r3, r2
 800256a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800256c:	f7fe fe6e 	bl	800124c <HAL_GetTick>
 8002570:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002572:	e00a      	b.n	800258a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002574:	f7fe fe6a 	bl	800124c <HAL_GetTick>
 8002578:	4602      	mov	r2, r0
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	1ad3      	subs	r3, r2, r3
 800257e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002582:	4293      	cmp	r3, r2
 8002584:	d901      	bls.n	800258a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002586:	2303      	movs	r3, #3
 8002588:	e06e      	b.n	8002668 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800258a:	4b3a      	ldr	r3, [pc, #232]	@ (8002674 <HAL_RCC_ClockConfig+0x1f0>)
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	f003 020c 	and.w	r2, r3, #12
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	009b      	lsls	r3, r3, #2
 8002598:	429a      	cmp	r2, r3
 800259a:	d1eb      	bne.n	8002574 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f003 0302 	and.w	r3, r3, #2
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d010      	beq.n	80025ca <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	689a      	ldr	r2, [r3, #8]
 80025ac:	4b31      	ldr	r3, [pc, #196]	@ (8002674 <HAL_RCC_ClockConfig+0x1f0>)
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80025b4:	429a      	cmp	r2, r3
 80025b6:	d208      	bcs.n	80025ca <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025b8:	4b2e      	ldr	r3, [pc, #184]	@ (8002674 <HAL_RCC_ClockConfig+0x1f0>)
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	492b      	ldr	r1, [pc, #172]	@ (8002674 <HAL_RCC_ClockConfig+0x1f0>)
 80025c6:	4313      	orrs	r3, r2
 80025c8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80025ca:	4b29      	ldr	r3, [pc, #164]	@ (8002670 <HAL_RCC_ClockConfig+0x1ec>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 0307 	and.w	r3, r3, #7
 80025d2:	683a      	ldr	r2, [r7, #0]
 80025d4:	429a      	cmp	r2, r3
 80025d6:	d210      	bcs.n	80025fa <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025d8:	4b25      	ldr	r3, [pc, #148]	@ (8002670 <HAL_RCC_ClockConfig+0x1ec>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f023 0207 	bic.w	r2, r3, #7
 80025e0:	4923      	ldr	r1, [pc, #140]	@ (8002670 <HAL_RCC_ClockConfig+0x1ec>)
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	4313      	orrs	r3, r2
 80025e6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025e8:	4b21      	ldr	r3, [pc, #132]	@ (8002670 <HAL_RCC_ClockConfig+0x1ec>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f003 0307 	and.w	r3, r3, #7
 80025f0:	683a      	ldr	r2, [r7, #0]
 80025f2:	429a      	cmp	r2, r3
 80025f4:	d001      	beq.n	80025fa <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	e036      	b.n	8002668 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f003 0304 	and.w	r3, r3, #4
 8002602:	2b00      	cmp	r3, #0
 8002604:	d008      	beq.n	8002618 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002606:	4b1b      	ldr	r3, [pc, #108]	@ (8002674 <HAL_RCC_ClockConfig+0x1f0>)
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	68db      	ldr	r3, [r3, #12]
 8002612:	4918      	ldr	r1, [pc, #96]	@ (8002674 <HAL_RCC_ClockConfig+0x1f0>)
 8002614:	4313      	orrs	r3, r2
 8002616:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f003 0308 	and.w	r3, r3, #8
 8002620:	2b00      	cmp	r3, #0
 8002622:	d009      	beq.n	8002638 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002624:	4b13      	ldr	r3, [pc, #76]	@ (8002674 <HAL_RCC_ClockConfig+0x1f0>)
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	691b      	ldr	r3, [r3, #16]
 8002630:	00db      	lsls	r3, r3, #3
 8002632:	4910      	ldr	r1, [pc, #64]	@ (8002674 <HAL_RCC_ClockConfig+0x1f0>)
 8002634:	4313      	orrs	r3, r2
 8002636:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002638:	f000 f858 	bl	80026ec <HAL_RCC_GetSysClockFreq>
 800263c:	4602      	mov	r2, r0
 800263e:	4b0d      	ldr	r3, [pc, #52]	@ (8002674 <HAL_RCC_ClockConfig+0x1f0>)
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	091b      	lsrs	r3, r3, #4
 8002644:	f003 030f 	and.w	r3, r3, #15
 8002648:	490b      	ldr	r1, [pc, #44]	@ (8002678 <HAL_RCC_ClockConfig+0x1f4>)
 800264a:	5ccb      	ldrb	r3, [r1, r3]
 800264c:	f003 031f 	and.w	r3, r3, #31
 8002650:	fa22 f303 	lsr.w	r3, r2, r3
 8002654:	4a09      	ldr	r2, [pc, #36]	@ (800267c <HAL_RCC_ClockConfig+0x1f8>)
 8002656:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002658:	4b09      	ldr	r3, [pc, #36]	@ (8002680 <HAL_RCC_ClockConfig+0x1fc>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4618      	mov	r0, r3
 800265e:	f7fe fda5 	bl	80011ac <HAL_InitTick>
 8002662:	4603      	mov	r3, r0
 8002664:	72fb      	strb	r3, [r7, #11]

  return status;
 8002666:	7afb      	ldrb	r3, [r7, #11]
}
 8002668:	4618      	mov	r0, r3
 800266a:	3710      	adds	r7, #16
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}
 8002670:	40022000 	.word	0x40022000
 8002674:	40021000 	.word	0x40021000
 8002678:	08005bf0 	.word	0x08005bf0
 800267c:	20000000 	.word	0x20000000
 8002680:	20000004 	.word	0x20000004

08002684 <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16  division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig( uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b08a      	sub	sp, #40	@ 0x28
 8002688:	af00      	add	r7, sp, #0
 800268a:	60f8      	str	r0, [r7, #12]
 800268c:	60b9      	str	r1, [r7, #8]
 800268e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning if no assert_param check */
  UNUSED(RCC_MCOx);

  /* MCO Clock Enable */
  __MCO1_CLK_ENABLE();
 8002690:	4b15      	ldr	r3, [pc, #84]	@ (80026e8 <HAL_RCC_MCOConfig+0x64>)
 8002692:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002694:	4a14      	ldr	r2, [pc, #80]	@ (80026e8 <HAL_RCC_MCOConfig+0x64>)
 8002696:	f043 0301 	orr.w	r3, r3, #1
 800269a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800269c:	4b12      	ldr	r3, [pc, #72]	@ (80026e8 <HAL_RCC_MCOConfig+0x64>)
 800269e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026a0:	f003 0301 	and.w	r3, r3, #1
 80026a4:	613b      	str	r3, [r7, #16]
 80026a6:	693b      	ldr	r3, [r7, #16]

  /* Configure the MCO1 pin in alternate function mode */
  GPIO_InitStruct.Pin = MCO1_PIN;
 80026a8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80026ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026ae:	2302      	movs	r3, #2
 80026b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80026b2:	2302      	movs	r3, #2
 80026b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026b6:	2300      	movs	r3, #0
 80026b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80026ba:	2300      	movs	r3, #0
 80026bc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 80026be:	f107 0314 	add.w	r3, r7, #20
 80026c2:	4619      	mov	r1, r3
 80026c4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80026c8:	f7ff f8f2 	bl	80018b0 <HAL_GPIO_Init>

  /* Mask MCOSEL[] and MCOPRE[] bits then set MCO1 clock source and prescaler */
  MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCOSEL | RCC_CFGR_MCOPRE), (RCC_MCOSource | RCC_MCODiv ));
 80026cc:	4b06      	ldr	r3, [pc, #24]	@ (80026e8 <HAL_RCC_MCOConfig+0x64>)
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	f023 42ee 	bic.w	r2, r3, #1996488704	@ 0x77000000
 80026d4:	68b9      	ldr	r1, [r7, #8]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	430b      	orrs	r3, r1
 80026da:	4903      	ldr	r1, [pc, #12]	@ (80026e8 <HAL_RCC_MCOConfig+0x64>)
 80026dc:	4313      	orrs	r3, r2
 80026de:	608b      	str	r3, [r1, #8]
}
 80026e0:	bf00      	nop
 80026e2:	3728      	adds	r7, #40	@ 0x28
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}
 80026e8:	40021000 	.word	0x40021000

080026ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b089      	sub	sp, #36	@ 0x24
 80026f0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80026f2:	2300      	movs	r3, #0
 80026f4:	61fb      	str	r3, [r7, #28]
 80026f6:	2300      	movs	r3, #0
 80026f8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026fa:	4b3e      	ldr	r3, [pc, #248]	@ (80027f4 <HAL_RCC_GetSysClockFreq+0x108>)
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	f003 030c 	and.w	r3, r3, #12
 8002702:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002704:	4b3b      	ldr	r3, [pc, #236]	@ (80027f4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	f003 0303 	and.w	r3, r3, #3
 800270c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d005      	beq.n	8002720 <HAL_RCC_GetSysClockFreq+0x34>
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	2b0c      	cmp	r3, #12
 8002718:	d121      	bne.n	800275e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	2b01      	cmp	r3, #1
 800271e:	d11e      	bne.n	800275e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002720:	4b34      	ldr	r3, [pc, #208]	@ (80027f4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f003 0308 	and.w	r3, r3, #8
 8002728:	2b00      	cmp	r3, #0
 800272a:	d107      	bne.n	800273c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800272c:	4b31      	ldr	r3, [pc, #196]	@ (80027f4 <HAL_RCC_GetSysClockFreq+0x108>)
 800272e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002732:	0a1b      	lsrs	r3, r3, #8
 8002734:	f003 030f 	and.w	r3, r3, #15
 8002738:	61fb      	str	r3, [r7, #28]
 800273a:	e005      	b.n	8002748 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800273c:	4b2d      	ldr	r3, [pc, #180]	@ (80027f4 <HAL_RCC_GetSysClockFreq+0x108>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	091b      	lsrs	r3, r3, #4
 8002742:	f003 030f 	and.w	r3, r3, #15
 8002746:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002748:	4a2b      	ldr	r2, [pc, #172]	@ (80027f8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800274a:	69fb      	ldr	r3, [r7, #28]
 800274c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002750:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d10d      	bne.n	8002774 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002758:	69fb      	ldr	r3, [r7, #28]
 800275a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800275c:	e00a      	b.n	8002774 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	2b04      	cmp	r3, #4
 8002762:	d102      	bne.n	800276a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002764:	4b25      	ldr	r3, [pc, #148]	@ (80027fc <HAL_RCC_GetSysClockFreq+0x110>)
 8002766:	61bb      	str	r3, [r7, #24]
 8002768:	e004      	b.n	8002774 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	2b08      	cmp	r3, #8
 800276e:	d101      	bne.n	8002774 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002770:	4b23      	ldr	r3, [pc, #140]	@ (8002800 <HAL_RCC_GetSysClockFreq+0x114>)
 8002772:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	2b0c      	cmp	r3, #12
 8002778:	d134      	bne.n	80027e4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800277a:	4b1e      	ldr	r3, [pc, #120]	@ (80027f4 <HAL_RCC_GetSysClockFreq+0x108>)
 800277c:	68db      	ldr	r3, [r3, #12]
 800277e:	f003 0303 	and.w	r3, r3, #3
 8002782:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	2b02      	cmp	r3, #2
 8002788:	d003      	beq.n	8002792 <HAL_RCC_GetSysClockFreq+0xa6>
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	2b03      	cmp	r3, #3
 800278e:	d003      	beq.n	8002798 <HAL_RCC_GetSysClockFreq+0xac>
 8002790:	e005      	b.n	800279e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002792:	4b1a      	ldr	r3, [pc, #104]	@ (80027fc <HAL_RCC_GetSysClockFreq+0x110>)
 8002794:	617b      	str	r3, [r7, #20]
      break;
 8002796:	e005      	b.n	80027a4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002798:	4b19      	ldr	r3, [pc, #100]	@ (8002800 <HAL_RCC_GetSysClockFreq+0x114>)
 800279a:	617b      	str	r3, [r7, #20]
      break;
 800279c:	e002      	b.n	80027a4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800279e:	69fb      	ldr	r3, [r7, #28]
 80027a0:	617b      	str	r3, [r7, #20]
      break;
 80027a2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80027a4:	4b13      	ldr	r3, [pc, #76]	@ (80027f4 <HAL_RCC_GetSysClockFreq+0x108>)
 80027a6:	68db      	ldr	r3, [r3, #12]
 80027a8:	091b      	lsrs	r3, r3, #4
 80027aa:	f003 0307 	and.w	r3, r3, #7
 80027ae:	3301      	adds	r3, #1
 80027b0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80027b2:	4b10      	ldr	r3, [pc, #64]	@ (80027f4 <HAL_RCC_GetSysClockFreq+0x108>)
 80027b4:	68db      	ldr	r3, [r3, #12]
 80027b6:	0a1b      	lsrs	r3, r3, #8
 80027b8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80027bc:	697a      	ldr	r2, [r7, #20]
 80027be:	fb03 f202 	mul.w	r2, r3, r2
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80027c8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80027ca:	4b0a      	ldr	r3, [pc, #40]	@ (80027f4 <HAL_RCC_GetSysClockFreq+0x108>)
 80027cc:	68db      	ldr	r3, [r3, #12]
 80027ce:	0e5b      	lsrs	r3, r3, #25
 80027d0:	f003 0303 	and.w	r3, r3, #3
 80027d4:	3301      	adds	r3, #1
 80027d6:	005b      	lsls	r3, r3, #1
 80027d8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80027da:	697a      	ldr	r2, [r7, #20]
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	fbb2 f3f3 	udiv	r3, r2, r3
 80027e2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80027e4:	69bb      	ldr	r3, [r7, #24]
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	3724      	adds	r7, #36	@ 0x24
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr
 80027f2:	bf00      	nop
 80027f4:	40021000 	.word	0x40021000
 80027f8:	08005c08 	.word	0x08005c08
 80027fc:	00f42400 	.word	0x00f42400
 8002800:	007a1200 	.word	0x007a1200

08002804 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002804:	b480      	push	{r7}
 8002806:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002808:	4b03      	ldr	r3, [pc, #12]	@ (8002818 <HAL_RCC_GetHCLKFreq+0x14>)
 800280a:	681b      	ldr	r3, [r3, #0]
}
 800280c:	4618      	mov	r0, r3
 800280e:	46bd      	mov	sp, r7
 8002810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002814:	4770      	bx	lr
 8002816:	bf00      	nop
 8002818:	20000000 	.word	0x20000000

0800281c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002820:	f7ff fff0 	bl	8002804 <HAL_RCC_GetHCLKFreq>
 8002824:	4602      	mov	r2, r0
 8002826:	4b06      	ldr	r3, [pc, #24]	@ (8002840 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	0a1b      	lsrs	r3, r3, #8
 800282c:	f003 0307 	and.w	r3, r3, #7
 8002830:	4904      	ldr	r1, [pc, #16]	@ (8002844 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002832:	5ccb      	ldrb	r3, [r1, r3]
 8002834:	f003 031f 	and.w	r3, r3, #31
 8002838:	fa22 f303 	lsr.w	r3, r2, r3
}
 800283c:	4618      	mov	r0, r3
 800283e:	bd80      	pop	{r7, pc}
 8002840:	40021000 	.word	0x40021000
 8002844:	08005c00 	.word	0x08005c00

08002848 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800284c:	f7ff ffda 	bl	8002804 <HAL_RCC_GetHCLKFreq>
 8002850:	4602      	mov	r2, r0
 8002852:	4b06      	ldr	r3, [pc, #24]	@ (800286c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	0adb      	lsrs	r3, r3, #11
 8002858:	f003 0307 	and.w	r3, r3, #7
 800285c:	4904      	ldr	r1, [pc, #16]	@ (8002870 <HAL_RCC_GetPCLK2Freq+0x28>)
 800285e:	5ccb      	ldrb	r3, [r1, r3]
 8002860:	f003 031f 	and.w	r3, r3, #31
 8002864:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002868:	4618      	mov	r0, r3
 800286a:	bd80      	pop	{r7, pc}
 800286c:	40021000 	.word	0x40021000
 8002870:	08005c00 	.word	0x08005c00

08002874 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b086      	sub	sp, #24
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800287c:	2300      	movs	r3, #0
 800287e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002880:	4b2a      	ldr	r3, [pc, #168]	@ (800292c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002882:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002884:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002888:	2b00      	cmp	r3, #0
 800288a:	d003      	beq.n	8002894 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800288c:	f7ff f9ba 	bl	8001c04 <HAL_PWREx_GetVoltageRange>
 8002890:	6178      	str	r0, [r7, #20]
 8002892:	e014      	b.n	80028be <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002894:	4b25      	ldr	r3, [pc, #148]	@ (800292c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002896:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002898:	4a24      	ldr	r2, [pc, #144]	@ (800292c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800289a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800289e:	6593      	str	r3, [r2, #88]	@ 0x58
 80028a0:	4b22      	ldr	r3, [pc, #136]	@ (800292c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028a8:	60fb      	str	r3, [r7, #12]
 80028aa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80028ac:	f7ff f9aa 	bl	8001c04 <HAL_PWREx_GetVoltageRange>
 80028b0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80028b2:	4b1e      	ldr	r3, [pc, #120]	@ (800292c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028b6:	4a1d      	ldr	r2, [pc, #116]	@ (800292c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028b8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80028bc:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80028c4:	d10b      	bne.n	80028de <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2b80      	cmp	r3, #128	@ 0x80
 80028ca:	d919      	bls.n	8002900 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2ba0      	cmp	r3, #160	@ 0xa0
 80028d0:	d902      	bls.n	80028d8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80028d2:	2302      	movs	r3, #2
 80028d4:	613b      	str	r3, [r7, #16]
 80028d6:	e013      	b.n	8002900 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80028d8:	2301      	movs	r3, #1
 80028da:	613b      	str	r3, [r7, #16]
 80028dc:	e010      	b.n	8002900 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2b80      	cmp	r3, #128	@ 0x80
 80028e2:	d902      	bls.n	80028ea <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80028e4:	2303      	movs	r3, #3
 80028e6:	613b      	str	r3, [r7, #16]
 80028e8:	e00a      	b.n	8002900 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2b80      	cmp	r3, #128	@ 0x80
 80028ee:	d102      	bne.n	80028f6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80028f0:	2302      	movs	r3, #2
 80028f2:	613b      	str	r3, [r7, #16]
 80028f4:	e004      	b.n	8002900 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2b70      	cmp	r3, #112	@ 0x70
 80028fa:	d101      	bne.n	8002900 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80028fc:	2301      	movs	r3, #1
 80028fe:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002900:	4b0b      	ldr	r3, [pc, #44]	@ (8002930 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f023 0207 	bic.w	r2, r3, #7
 8002908:	4909      	ldr	r1, [pc, #36]	@ (8002930 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	4313      	orrs	r3, r2
 800290e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002910:	4b07      	ldr	r3, [pc, #28]	@ (8002930 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f003 0307 	and.w	r3, r3, #7
 8002918:	693a      	ldr	r2, [r7, #16]
 800291a:	429a      	cmp	r2, r3
 800291c:	d001      	beq.n	8002922 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	e000      	b.n	8002924 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002922:	2300      	movs	r3, #0
}
 8002924:	4618      	mov	r0, r3
 8002926:	3718      	adds	r7, #24
 8002928:	46bd      	mov	sp, r7
 800292a:	bd80      	pop	{r7, pc}
 800292c:	40021000 	.word	0x40021000
 8002930:	40022000 	.word	0x40022000

08002934 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b086      	sub	sp, #24
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800293c:	2300      	movs	r3, #0
 800293e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002940:	2300      	movs	r3, #0
 8002942:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800294c:	2b00      	cmp	r3, #0
 800294e:	d041      	beq.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002954:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002958:	d02a      	beq.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800295a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800295e:	d824      	bhi.n	80029aa <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002960:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002964:	d008      	beq.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002966:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800296a:	d81e      	bhi.n	80029aa <HAL_RCCEx_PeriphCLKConfig+0x76>
 800296c:	2b00      	cmp	r3, #0
 800296e:	d00a      	beq.n	8002986 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002970:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002974:	d010      	beq.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002976:	e018      	b.n	80029aa <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002978:	4b86      	ldr	r3, [pc, #536]	@ (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800297a:	68db      	ldr	r3, [r3, #12]
 800297c:	4a85      	ldr	r2, [pc, #532]	@ (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800297e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002982:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002984:	e015      	b.n	80029b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	3304      	adds	r3, #4
 800298a:	2100      	movs	r1, #0
 800298c:	4618      	mov	r0, r3
 800298e:	f000 fabb 	bl	8002f08 <RCCEx_PLLSAI1_Config>
 8002992:	4603      	mov	r3, r0
 8002994:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002996:	e00c      	b.n	80029b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	3320      	adds	r3, #32
 800299c:	2100      	movs	r1, #0
 800299e:	4618      	mov	r0, r3
 80029a0:	f000 fba6 	bl	80030f0 <RCCEx_PLLSAI2_Config>
 80029a4:	4603      	mov	r3, r0
 80029a6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80029a8:	e003      	b.n	80029b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	74fb      	strb	r3, [r7, #19]
      break;
 80029ae:	e000      	b.n	80029b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80029b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80029b2:	7cfb      	ldrb	r3, [r7, #19]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d10b      	bne.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80029b8:	4b76      	ldr	r3, [pc, #472]	@ (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029be:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80029c6:	4973      	ldr	r1, [pc, #460]	@ (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029c8:	4313      	orrs	r3, r2
 80029ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80029ce:	e001      	b.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029d0:	7cfb      	ldrb	r3, [r7, #19]
 80029d2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d041      	beq.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80029e4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80029e8:	d02a      	beq.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80029ea:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80029ee:	d824      	bhi.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x106>
 80029f0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80029f4:	d008      	beq.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80029f6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80029fa:	d81e      	bhi.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x106>
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d00a      	beq.n	8002a16 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002a00:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002a04:	d010      	beq.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002a06:	e018      	b.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002a08:	4b62      	ldr	r3, [pc, #392]	@ (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a0a:	68db      	ldr	r3, [r3, #12]
 8002a0c:	4a61      	ldr	r2, [pc, #388]	@ (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a0e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a12:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002a14:	e015      	b.n	8002a42 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	3304      	adds	r3, #4
 8002a1a:	2100      	movs	r1, #0
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f000 fa73 	bl	8002f08 <RCCEx_PLLSAI1_Config>
 8002a22:	4603      	mov	r3, r0
 8002a24:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002a26:	e00c      	b.n	8002a42 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	3320      	adds	r3, #32
 8002a2c:	2100      	movs	r1, #0
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f000 fb5e 	bl	80030f0 <RCCEx_PLLSAI2_Config>
 8002a34:	4603      	mov	r3, r0
 8002a36:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002a38:	e003      	b.n	8002a42 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	74fb      	strb	r3, [r7, #19]
      break;
 8002a3e:	e000      	b.n	8002a42 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002a40:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a42:	7cfb      	ldrb	r3, [r7, #19]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d10b      	bne.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002a48:	4b52      	ldr	r3, [pc, #328]	@ (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a4e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002a56:	494f      	ldr	r1, [pc, #316]	@ (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002a5e:	e001      	b.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a60:	7cfb      	ldrb	r3, [r7, #19]
 8002a62:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	f000 80a0 	beq.w	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a72:	2300      	movs	r3, #0
 8002a74:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002a76:	4b47      	ldr	r3, [pc, #284]	@ (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d101      	bne.n	8002a86 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002a82:	2301      	movs	r3, #1
 8002a84:	e000      	b.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002a86:	2300      	movs	r3, #0
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d00d      	beq.n	8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a8c:	4b41      	ldr	r3, [pc, #260]	@ (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a90:	4a40      	ldr	r2, [pc, #256]	@ (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a92:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a96:	6593      	str	r3, [r2, #88]	@ 0x58
 8002a98:	4b3e      	ldr	r3, [pc, #248]	@ (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a9c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002aa0:	60bb      	str	r3, [r7, #8]
 8002aa2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002aa8:	4b3b      	ldr	r3, [pc, #236]	@ (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a3a      	ldr	r2, [pc, #232]	@ (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002aae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ab2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002ab4:	f7fe fbca 	bl	800124c <HAL_GetTick>
 8002ab8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002aba:	e009      	b.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002abc:	f7fe fbc6 	bl	800124c <HAL_GetTick>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	1ad3      	subs	r3, r2, r3
 8002ac6:	2b02      	cmp	r3, #2
 8002ac8:	d902      	bls.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002aca:	2303      	movs	r3, #3
 8002acc:	74fb      	strb	r3, [r7, #19]
        break;
 8002ace:	e005      	b.n	8002adc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002ad0:	4b31      	ldr	r3, [pc, #196]	@ (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d0ef      	beq.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002adc:	7cfb      	ldrb	r3, [r7, #19]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d15c      	bne.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002ae2:	4b2c      	ldr	r3, [pc, #176]	@ (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ae4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ae8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002aec:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d01f      	beq.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002afa:	697a      	ldr	r2, [r7, #20]
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d019      	beq.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002b00:	4b24      	ldr	r3, [pc, #144]	@ (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b06:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002b0a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002b0c:	4b21      	ldr	r3, [pc, #132]	@ (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b12:	4a20      	ldr	r2, [pc, #128]	@ (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b18:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002b1c:	4b1d      	ldr	r3, [pc, #116]	@ (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b22:	4a1c      	ldr	r2, [pc, #112]	@ (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b24:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b28:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002b2c:	4a19      	ldr	r2, [pc, #100]	@ (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	f003 0301 	and.w	r3, r3, #1
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d016      	beq.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b3e:	f7fe fb85 	bl	800124c <HAL_GetTick>
 8002b42:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b44:	e00b      	b.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b46:	f7fe fb81 	bl	800124c <HAL_GetTick>
 8002b4a:	4602      	mov	r2, r0
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	1ad3      	subs	r3, r2, r3
 8002b50:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d902      	bls.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002b58:	2303      	movs	r3, #3
 8002b5a:	74fb      	strb	r3, [r7, #19]
            break;
 8002b5c:	e006      	b.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b5e:	4b0d      	ldr	r3, [pc, #52]	@ (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b64:	f003 0302 	and.w	r3, r3, #2
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d0ec      	beq.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002b6c:	7cfb      	ldrb	r3, [r7, #19]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d10c      	bne.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b72:	4b08      	ldr	r3, [pc, #32]	@ (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b78:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002b82:	4904      	ldr	r1, [pc, #16]	@ (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b84:	4313      	orrs	r3, r2
 8002b86:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002b8a:	e009      	b.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002b8c:	7cfb      	ldrb	r3, [r7, #19]
 8002b8e:	74bb      	strb	r3, [r7, #18]
 8002b90:	e006      	b.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002b92:	bf00      	nop
 8002b94:	40021000 	.word	0x40021000
 8002b98:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b9c:	7cfb      	ldrb	r3, [r7, #19]
 8002b9e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ba0:	7c7b      	ldrb	r3, [r7, #17]
 8002ba2:	2b01      	cmp	r3, #1
 8002ba4:	d105      	bne.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ba6:	4b9e      	ldr	r3, [pc, #632]	@ (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ba8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002baa:	4a9d      	ldr	r2, [pc, #628]	@ (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002bb0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f003 0301 	and.w	r3, r3, #1
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d00a      	beq.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002bbe:	4b98      	ldr	r3, [pc, #608]	@ (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bc4:	f023 0203 	bic.w	r2, r3, #3
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bcc:	4994      	ldr	r1, [pc, #592]	@ (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f003 0302 	and.w	r3, r3, #2
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d00a      	beq.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002be0:	4b8f      	ldr	r3, [pc, #572]	@ (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002be6:	f023 020c 	bic.w	r2, r3, #12
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bee:	498c      	ldr	r1, [pc, #560]	@ (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 0304 	and.w	r3, r3, #4
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d00a      	beq.n	8002c18 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002c02:	4b87      	ldr	r3, [pc, #540]	@ (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c08:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c10:	4983      	ldr	r1, [pc, #524]	@ (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c12:	4313      	orrs	r3, r2
 8002c14:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f003 0308 	and.w	r3, r3, #8
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d00a      	beq.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002c24:	4b7e      	ldr	r3, [pc, #504]	@ (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c2a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c32:	497b      	ldr	r1, [pc, #492]	@ (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c34:	4313      	orrs	r3, r2
 8002c36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 0310 	and.w	r3, r3, #16
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d00a      	beq.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002c46:	4b76      	ldr	r3, [pc, #472]	@ (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c4c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c54:	4972      	ldr	r1, [pc, #456]	@ (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c56:	4313      	orrs	r3, r2
 8002c58:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f003 0320 	and.w	r3, r3, #32
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d00a      	beq.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002c68:	4b6d      	ldr	r3, [pc, #436]	@ (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c6e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c76:	496a      	ldr	r1, [pc, #424]	@ (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d00a      	beq.n	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002c8a:	4b65      	ldr	r3, [pc, #404]	@ (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c90:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c98:	4961      	ldr	r1, [pc, #388]	@ (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d00a      	beq.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002cac:	4b5c      	ldr	r3, [pc, #368]	@ (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cb2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002cba:	4959      	ldr	r1, [pc, #356]	@ (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d00a      	beq.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002cce:	4b54      	ldr	r3, [pc, #336]	@ (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cd4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002cdc:	4950      	ldr	r1, [pc, #320]	@ (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d00a      	beq.n	8002d06 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002cf0:	4b4b      	ldr	r3, [pc, #300]	@ (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cf6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cfe:	4948      	ldr	r1, [pc, #288]	@ (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d00:	4313      	orrs	r3, r2
 8002d02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d00a      	beq.n	8002d28 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002d12:	4b43      	ldr	r3, [pc, #268]	@ (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d18:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d20:	493f      	ldr	r1, [pc, #252]	@ (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d22:	4313      	orrs	r3, r2
 8002d24:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d028      	beq.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002d34:	4b3a      	ldr	r3, [pc, #232]	@ (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d3a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002d42:	4937      	ldr	r1, [pc, #220]	@ (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d44:	4313      	orrs	r3, r2
 8002d46:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002d4e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002d52:	d106      	bne.n	8002d62 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d54:	4b32      	ldr	r3, [pc, #200]	@ (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d56:	68db      	ldr	r3, [r3, #12]
 8002d58:	4a31      	ldr	r2, [pc, #196]	@ (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d5a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002d5e:	60d3      	str	r3, [r2, #12]
 8002d60:	e011      	b.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002d66:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002d6a:	d10c      	bne.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	3304      	adds	r3, #4
 8002d70:	2101      	movs	r1, #1
 8002d72:	4618      	mov	r0, r3
 8002d74:	f000 f8c8 	bl	8002f08 <RCCEx_PLLSAI1_Config>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002d7c:	7cfb      	ldrb	r3, [r7, #19]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d001      	beq.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002d82:	7cfb      	ldrb	r3, [r7, #19]
 8002d84:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d028      	beq.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002d92:	4b23      	ldr	r3, [pc, #140]	@ (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d98:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002da0:	491f      	ldr	r1, [pc, #124]	@ (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002da2:	4313      	orrs	r3, r2
 8002da4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dac:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002db0:	d106      	bne.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002db2:	4b1b      	ldr	r3, [pc, #108]	@ (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002db4:	68db      	ldr	r3, [r3, #12]
 8002db6:	4a1a      	ldr	r2, [pc, #104]	@ (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002db8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002dbc:	60d3      	str	r3, [r2, #12]
 8002dbe:	e011      	b.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dc4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002dc8:	d10c      	bne.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	3304      	adds	r3, #4
 8002dce:	2101      	movs	r1, #1
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f000 f899 	bl	8002f08 <RCCEx_PLLSAI1_Config>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002dda:	7cfb      	ldrb	r3, [r7, #19]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d001      	beq.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002de0:	7cfb      	ldrb	r3, [r7, #19]
 8002de2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d02b      	beq.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002df0:	4b0b      	ldr	r3, [pc, #44]	@ (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002df2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002df6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002dfe:	4908      	ldr	r1, [pc, #32]	@ (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e00:	4313      	orrs	r3, r2
 8002e02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e0a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002e0e:	d109      	bne.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e10:	4b03      	ldr	r3, [pc, #12]	@ (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e12:	68db      	ldr	r3, [r3, #12]
 8002e14:	4a02      	ldr	r2, [pc, #8]	@ (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e16:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002e1a:	60d3      	str	r3, [r2, #12]
 8002e1c:	e014      	b.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002e1e:	bf00      	nop
 8002e20:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e28:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002e2c:	d10c      	bne.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	3304      	adds	r3, #4
 8002e32:	2101      	movs	r1, #1
 8002e34:	4618      	mov	r0, r3
 8002e36:	f000 f867 	bl	8002f08 <RCCEx_PLLSAI1_Config>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002e3e:	7cfb      	ldrb	r3, [r7, #19]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d001      	beq.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002e44:	7cfb      	ldrb	r3, [r7, #19]
 8002e46:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d02f      	beq.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002e54:	4b2b      	ldr	r3, [pc, #172]	@ (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002e56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e5a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002e62:	4928      	ldr	r1, [pc, #160]	@ (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002e64:	4313      	orrs	r3, r2
 8002e66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002e6e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002e72:	d10d      	bne.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	3304      	adds	r3, #4
 8002e78:	2102      	movs	r1, #2
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f000 f844 	bl	8002f08 <RCCEx_PLLSAI1_Config>
 8002e80:	4603      	mov	r3, r0
 8002e82:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002e84:	7cfb      	ldrb	r3, [r7, #19]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d014      	beq.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002e8a:	7cfb      	ldrb	r3, [r7, #19]
 8002e8c:	74bb      	strb	r3, [r7, #18]
 8002e8e:	e011      	b.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002e94:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002e98:	d10c      	bne.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	3320      	adds	r3, #32
 8002e9e:	2102      	movs	r1, #2
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f000 f925 	bl	80030f0 <RCCEx_PLLSAI2_Config>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002eaa:	7cfb      	ldrb	r3, [r7, #19]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d001      	beq.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002eb0:	7cfb      	ldrb	r3, [r7, #19]
 8002eb2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d00a      	beq.n	8002ed6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002ec0:	4b10      	ldr	r3, [pc, #64]	@ (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002ec2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ec6:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002ece:	490d      	ldr	r1, [pc, #52]	@ (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d00b      	beq.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002ee2:	4b08      	ldr	r3, [pc, #32]	@ (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002ee4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ee8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002ef2:	4904      	ldr	r1, [pc, #16]	@ (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002efa:	7cbb      	ldrb	r3, [r7, #18]
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	3718      	adds	r7, #24
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}
 8002f04:	40021000 	.word	0x40021000

08002f08 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b084      	sub	sp, #16
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
 8002f10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002f12:	2300      	movs	r3, #0
 8002f14:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002f16:	4b75      	ldr	r3, [pc, #468]	@ (80030ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f18:	68db      	ldr	r3, [r3, #12]
 8002f1a:	f003 0303 	and.w	r3, r3, #3
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d018      	beq.n	8002f54 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002f22:	4b72      	ldr	r3, [pc, #456]	@ (80030ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f24:	68db      	ldr	r3, [r3, #12]
 8002f26:	f003 0203 	and.w	r2, r3, #3
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	429a      	cmp	r2, r3
 8002f30:	d10d      	bne.n	8002f4e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
       ||
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d009      	beq.n	8002f4e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002f3a:	4b6c      	ldr	r3, [pc, #432]	@ (80030ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f3c:	68db      	ldr	r3, [r3, #12]
 8002f3e:	091b      	lsrs	r3, r3, #4
 8002f40:	f003 0307 	and.w	r3, r3, #7
 8002f44:	1c5a      	adds	r2, r3, #1
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	685b      	ldr	r3, [r3, #4]
       ||
 8002f4a:	429a      	cmp	r2, r3
 8002f4c:	d047      	beq.n	8002fde <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	73fb      	strb	r3, [r7, #15]
 8002f52:	e044      	b.n	8002fde <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	2b03      	cmp	r3, #3
 8002f5a:	d018      	beq.n	8002f8e <RCCEx_PLLSAI1_Config+0x86>
 8002f5c:	2b03      	cmp	r3, #3
 8002f5e:	d825      	bhi.n	8002fac <RCCEx_PLLSAI1_Config+0xa4>
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	d002      	beq.n	8002f6a <RCCEx_PLLSAI1_Config+0x62>
 8002f64:	2b02      	cmp	r3, #2
 8002f66:	d009      	beq.n	8002f7c <RCCEx_PLLSAI1_Config+0x74>
 8002f68:	e020      	b.n	8002fac <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002f6a:	4b60      	ldr	r3, [pc, #384]	@ (80030ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 0302 	and.w	r3, r3, #2
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d11d      	bne.n	8002fb2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f7a:	e01a      	b.n	8002fb2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002f7c:	4b5b      	ldr	r3, [pc, #364]	@ (80030ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d116      	bne.n	8002fb6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f8c:	e013      	b.n	8002fb6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002f8e:	4b57      	ldr	r3, [pc, #348]	@ (80030ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d10f      	bne.n	8002fba <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002f9a:	4b54      	ldr	r3, [pc, #336]	@ (80030ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d109      	bne.n	8002fba <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002faa:	e006      	b.n	8002fba <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002fac:	2301      	movs	r3, #1
 8002fae:	73fb      	strb	r3, [r7, #15]
      break;
 8002fb0:	e004      	b.n	8002fbc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002fb2:	bf00      	nop
 8002fb4:	e002      	b.n	8002fbc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002fb6:	bf00      	nop
 8002fb8:	e000      	b.n	8002fbc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002fba:	bf00      	nop
    }

    if(status == HAL_OK)
 8002fbc:	7bfb      	ldrb	r3, [r7, #15]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d10d      	bne.n	8002fde <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002fc2:	4b4a      	ldr	r3, [pc, #296]	@ (80030ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fc4:	68db      	ldr	r3, [r3, #12]
 8002fc6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6819      	ldr	r1, [r3, #0]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	3b01      	subs	r3, #1
 8002fd4:	011b      	lsls	r3, r3, #4
 8002fd6:	430b      	orrs	r3, r1
 8002fd8:	4944      	ldr	r1, [pc, #272]	@ (80030ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002fde:	7bfb      	ldrb	r3, [r7, #15]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d17d      	bne.n	80030e0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002fe4:	4b41      	ldr	r3, [pc, #260]	@ (80030ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a40      	ldr	r2, [pc, #256]	@ (80030ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fea:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002fee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ff0:	f7fe f92c 	bl	800124c <HAL_GetTick>
 8002ff4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002ff6:	e009      	b.n	800300c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002ff8:	f7fe f928 	bl	800124c <HAL_GetTick>
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	1ad3      	subs	r3, r2, r3
 8003002:	2b02      	cmp	r3, #2
 8003004:	d902      	bls.n	800300c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003006:	2303      	movs	r3, #3
 8003008:	73fb      	strb	r3, [r7, #15]
        break;
 800300a:	e005      	b.n	8003018 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800300c:	4b37      	ldr	r3, [pc, #220]	@ (80030ec <RCCEx_PLLSAI1_Config+0x1e4>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003014:	2b00      	cmp	r3, #0
 8003016:	d1ef      	bne.n	8002ff8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003018:	7bfb      	ldrb	r3, [r7, #15]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d160      	bne.n	80030e0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d111      	bne.n	8003048 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003024:	4b31      	ldr	r3, [pc, #196]	@ (80030ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003026:	691b      	ldr	r3, [r3, #16]
 8003028:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800302c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003030:	687a      	ldr	r2, [r7, #4]
 8003032:	6892      	ldr	r2, [r2, #8]
 8003034:	0211      	lsls	r1, r2, #8
 8003036:	687a      	ldr	r2, [r7, #4]
 8003038:	68d2      	ldr	r2, [r2, #12]
 800303a:	0912      	lsrs	r2, r2, #4
 800303c:	0452      	lsls	r2, r2, #17
 800303e:	430a      	orrs	r2, r1
 8003040:	492a      	ldr	r1, [pc, #168]	@ (80030ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003042:	4313      	orrs	r3, r2
 8003044:	610b      	str	r3, [r1, #16]
 8003046:	e027      	b.n	8003098 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	2b01      	cmp	r3, #1
 800304c:	d112      	bne.n	8003074 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800304e:	4b27      	ldr	r3, [pc, #156]	@ (80030ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003050:	691b      	ldr	r3, [r3, #16]
 8003052:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8003056:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800305a:	687a      	ldr	r2, [r7, #4]
 800305c:	6892      	ldr	r2, [r2, #8]
 800305e:	0211      	lsls	r1, r2, #8
 8003060:	687a      	ldr	r2, [r7, #4]
 8003062:	6912      	ldr	r2, [r2, #16]
 8003064:	0852      	lsrs	r2, r2, #1
 8003066:	3a01      	subs	r2, #1
 8003068:	0552      	lsls	r2, r2, #21
 800306a:	430a      	orrs	r2, r1
 800306c:	491f      	ldr	r1, [pc, #124]	@ (80030ec <RCCEx_PLLSAI1_Config+0x1e4>)
 800306e:	4313      	orrs	r3, r2
 8003070:	610b      	str	r3, [r1, #16]
 8003072:	e011      	b.n	8003098 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003074:	4b1d      	ldr	r3, [pc, #116]	@ (80030ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003076:	691b      	ldr	r3, [r3, #16]
 8003078:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800307c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003080:	687a      	ldr	r2, [r7, #4]
 8003082:	6892      	ldr	r2, [r2, #8]
 8003084:	0211      	lsls	r1, r2, #8
 8003086:	687a      	ldr	r2, [r7, #4]
 8003088:	6952      	ldr	r2, [r2, #20]
 800308a:	0852      	lsrs	r2, r2, #1
 800308c:	3a01      	subs	r2, #1
 800308e:	0652      	lsls	r2, r2, #25
 8003090:	430a      	orrs	r2, r1
 8003092:	4916      	ldr	r1, [pc, #88]	@ (80030ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003094:	4313      	orrs	r3, r2
 8003096:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003098:	4b14      	ldr	r3, [pc, #80]	@ (80030ec <RCCEx_PLLSAI1_Config+0x1e4>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a13      	ldr	r2, [pc, #76]	@ (80030ec <RCCEx_PLLSAI1_Config+0x1e4>)
 800309e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80030a2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030a4:	f7fe f8d2 	bl	800124c <HAL_GetTick>
 80030a8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80030aa:	e009      	b.n	80030c0 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80030ac:	f7fe f8ce 	bl	800124c <HAL_GetTick>
 80030b0:	4602      	mov	r2, r0
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	1ad3      	subs	r3, r2, r3
 80030b6:	2b02      	cmp	r3, #2
 80030b8:	d902      	bls.n	80030c0 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80030ba:	2303      	movs	r3, #3
 80030bc:	73fb      	strb	r3, [r7, #15]
          break;
 80030be:	e005      	b.n	80030cc <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80030c0:	4b0a      	ldr	r3, [pc, #40]	@ (80030ec <RCCEx_PLLSAI1_Config+0x1e4>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d0ef      	beq.n	80030ac <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80030cc:	7bfb      	ldrb	r3, [r7, #15]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d106      	bne.n	80030e0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80030d2:	4b06      	ldr	r3, [pc, #24]	@ (80030ec <RCCEx_PLLSAI1_Config+0x1e4>)
 80030d4:	691a      	ldr	r2, [r3, #16]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	699b      	ldr	r3, [r3, #24]
 80030da:	4904      	ldr	r1, [pc, #16]	@ (80030ec <RCCEx_PLLSAI1_Config+0x1e4>)
 80030dc:	4313      	orrs	r3, r2
 80030de:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80030e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	3710      	adds	r7, #16
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}
 80030ea:	bf00      	nop
 80030ec:	40021000 	.word	0x40021000

080030f0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b084      	sub	sp, #16
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
 80030f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80030fa:	2300      	movs	r3, #0
 80030fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80030fe:	4b6a      	ldr	r3, [pc, #424]	@ (80032a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003100:	68db      	ldr	r3, [r3, #12]
 8003102:	f003 0303 	and.w	r3, r3, #3
 8003106:	2b00      	cmp	r3, #0
 8003108:	d018      	beq.n	800313c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800310a:	4b67      	ldr	r3, [pc, #412]	@ (80032a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800310c:	68db      	ldr	r3, [r3, #12]
 800310e:	f003 0203 	and.w	r2, r3, #3
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	429a      	cmp	r2, r3
 8003118:	d10d      	bne.n	8003136 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
       ||
 800311e:	2b00      	cmp	r3, #0
 8003120:	d009      	beq.n	8003136 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003122:	4b61      	ldr	r3, [pc, #388]	@ (80032a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003124:	68db      	ldr	r3, [r3, #12]
 8003126:	091b      	lsrs	r3, r3, #4
 8003128:	f003 0307 	and.w	r3, r3, #7
 800312c:	1c5a      	adds	r2, r3, #1
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	685b      	ldr	r3, [r3, #4]
       ||
 8003132:	429a      	cmp	r2, r3
 8003134:	d047      	beq.n	80031c6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	73fb      	strb	r3, [r7, #15]
 800313a:	e044      	b.n	80031c6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	2b03      	cmp	r3, #3
 8003142:	d018      	beq.n	8003176 <RCCEx_PLLSAI2_Config+0x86>
 8003144:	2b03      	cmp	r3, #3
 8003146:	d825      	bhi.n	8003194 <RCCEx_PLLSAI2_Config+0xa4>
 8003148:	2b01      	cmp	r3, #1
 800314a:	d002      	beq.n	8003152 <RCCEx_PLLSAI2_Config+0x62>
 800314c:	2b02      	cmp	r3, #2
 800314e:	d009      	beq.n	8003164 <RCCEx_PLLSAI2_Config+0x74>
 8003150:	e020      	b.n	8003194 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003152:	4b55      	ldr	r3, [pc, #340]	@ (80032a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f003 0302 	and.w	r3, r3, #2
 800315a:	2b00      	cmp	r3, #0
 800315c:	d11d      	bne.n	800319a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003162:	e01a      	b.n	800319a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003164:	4b50      	ldr	r3, [pc, #320]	@ (80032a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800316c:	2b00      	cmp	r3, #0
 800316e:	d116      	bne.n	800319e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003170:	2301      	movs	r3, #1
 8003172:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003174:	e013      	b.n	800319e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003176:	4b4c      	ldr	r3, [pc, #304]	@ (80032a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800317e:	2b00      	cmp	r3, #0
 8003180:	d10f      	bne.n	80031a2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003182:	4b49      	ldr	r3, [pc, #292]	@ (80032a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800318a:	2b00      	cmp	r3, #0
 800318c:	d109      	bne.n	80031a2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003192:	e006      	b.n	80031a2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003194:	2301      	movs	r3, #1
 8003196:	73fb      	strb	r3, [r7, #15]
      break;
 8003198:	e004      	b.n	80031a4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800319a:	bf00      	nop
 800319c:	e002      	b.n	80031a4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800319e:	bf00      	nop
 80031a0:	e000      	b.n	80031a4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80031a2:	bf00      	nop
    }

    if(status == HAL_OK)
 80031a4:	7bfb      	ldrb	r3, [r7, #15]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d10d      	bne.n	80031c6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80031aa:	4b3f      	ldr	r3, [pc, #252]	@ (80032a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031ac:	68db      	ldr	r3, [r3, #12]
 80031ae:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6819      	ldr	r1, [r3, #0]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	3b01      	subs	r3, #1
 80031bc:	011b      	lsls	r3, r3, #4
 80031be:	430b      	orrs	r3, r1
 80031c0:	4939      	ldr	r1, [pc, #228]	@ (80032a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031c2:	4313      	orrs	r3, r2
 80031c4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80031c6:	7bfb      	ldrb	r3, [r7, #15]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d167      	bne.n	800329c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80031cc:	4b36      	ldr	r3, [pc, #216]	@ (80032a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a35      	ldr	r2, [pc, #212]	@ (80032a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031d2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80031d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031d8:	f7fe f838 	bl	800124c <HAL_GetTick>
 80031dc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80031de:	e009      	b.n	80031f4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80031e0:	f7fe f834 	bl	800124c <HAL_GetTick>
 80031e4:	4602      	mov	r2, r0
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	1ad3      	subs	r3, r2, r3
 80031ea:	2b02      	cmp	r3, #2
 80031ec:	d902      	bls.n	80031f4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80031ee:	2303      	movs	r3, #3
 80031f0:	73fb      	strb	r3, [r7, #15]
        break;
 80031f2:	e005      	b.n	8003200 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80031f4:	4b2c      	ldr	r3, [pc, #176]	@ (80032a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d1ef      	bne.n	80031e0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003200:	7bfb      	ldrb	r3, [r7, #15]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d14a      	bne.n	800329c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d111      	bne.n	8003230 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800320c:	4b26      	ldr	r3, [pc, #152]	@ (80032a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800320e:	695b      	ldr	r3, [r3, #20]
 8003210:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003214:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003218:	687a      	ldr	r2, [r7, #4]
 800321a:	6892      	ldr	r2, [r2, #8]
 800321c:	0211      	lsls	r1, r2, #8
 800321e:	687a      	ldr	r2, [r7, #4]
 8003220:	68d2      	ldr	r2, [r2, #12]
 8003222:	0912      	lsrs	r2, r2, #4
 8003224:	0452      	lsls	r2, r2, #17
 8003226:	430a      	orrs	r2, r1
 8003228:	491f      	ldr	r1, [pc, #124]	@ (80032a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800322a:	4313      	orrs	r3, r2
 800322c:	614b      	str	r3, [r1, #20]
 800322e:	e011      	b.n	8003254 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003230:	4b1d      	ldr	r3, [pc, #116]	@ (80032a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003232:	695b      	ldr	r3, [r3, #20]
 8003234:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003238:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800323c:	687a      	ldr	r2, [r7, #4]
 800323e:	6892      	ldr	r2, [r2, #8]
 8003240:	0211      	lsls	r1, r2, #8
 8003242:	687a      	ldr	r2, [r7, #4]
 8003244:	6912      	ldr	r2, [r2, #16]
 8003246:	0852      	lsrs	r2, r2, #1
 8003248:	3a01      	subs	r2, #1
 800324a:	0652      	lsls	r2, r2, #25
 800324c:	430a      	orrs	r2, r1
 800324e:	4916      	ldr	r1, [pc, #88]	@ (80032a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003250:	4313      	orrs	r3, r2
 8003252:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003254:	4b14      	ldr	r3, [pc, #80]	@ (80032a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a13      	ldr	r2, [pc, #76]	@ (80032a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800325a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800325e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003260:	f7fd fff4 	bl	800124c <HAL_GetTick>
 8003264:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003266:	e009      	b.n	800327c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003268:	f7fd fff0 	bl	800124c <HAL_GetTick>
 800326c:	4602      	mov	r2, r0
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	1ad3      	subs	r3, r2, r3
 8003272:	2b02      	cmp	r3, #2
 8003274:	d902      	bls.n	800327c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003276:	2303      	movs	r3, #3
 8003278:	73fb      	strb	r3, [r7, #15]
          break;
 800327a:	e005      	b.n	8003288 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800327c:	4b0a      	ldr	r3, [pc, #40]	@ (80032a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003284:	2b00      	cmp	r3, #0
 8003286:	d0ef      	beq.n	8003268 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003288:	7bfb      	ldrb	r3, [r7, #15]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d106      	bne.n	800329c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800328e:	4b06      	ldr	r3, [pc, #24]	@ (80032a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003290:	695a      	ldr	r2, [r3, #20]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	695b      	ldr	r3, [r3, #20]
 8003296:	4904      	ldr	r1, [pc, #16]	@ (80032a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003298:	4313      	orrs	r3, r2
 800329a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800329c:	7bfb      	ldrb	r3, [r7, #15]
}
 800329e:	4618      	mov	r0, r3
 80032a0:	3710      	adds	r7, #16
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}
 80032a6:	bf00      	nop
 80032a8:	40021000 	.word	0x40021000

080032ac <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b082      	sub	sp, #8
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d101      	bne.n	80032be <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e049      	b.n	8003352 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80032c4:	b2db      	uxtb	r3, r3
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d106      	bne.n	80032d8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2200      	movs	r2, #0
 80032ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	f7fd fd24 	bl	8000d20 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2202      	movs	r2, #2
 80032dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681a      	ldr	r2, [r3, #0]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	3304      	adds	r3, #4
 80032e8:	4619      	mov	r1, r3
 80032ea:	4610      	mov	r0, r2
 80032ec:	f000 fd22 	bl	8003d34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2201      	movs	r2, #1
 80032f4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2201      	movs	r2, #1
 80032fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2201      	movs	r2, #1
 8003304:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2201      	movs	r2, #1
 800330c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2201      	movs	r2, #1
 8003314:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2201      	movs	r2, #1
 800331c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2201      	movs	r2, #1
 8003324:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2201      	movs	r2, #1
 800332c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2201      	movs	r2, #1
 8003334:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2201      	movs	r2, #1
 800333c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2201      	movs	r2, #1
 8003344:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2201      	movs	r2, #1
 800334c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003350:	2300      	movs	r3, #0
}
 8003352:	4618      	mov	r0, r3
 8003354:	3708      	adds	r7, #8
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}
	...

0800335c <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b086      	sub	sp, #24
 8003360:	af00      	add	r7, sp, #0
 8003362:	60f8      	str	r0, [r7, #12]
 8003364:	60b9      	str	r1, [r7, #8]
 8003366:	607a      	str	r2, [r7, #4]
 8003368:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800336a:	2300      	movs	r3, #0
 800336c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d109      	bne.n	8003388 <HAL_TIM_PWM_Start_DMA+0x2c>
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800337a:	b2db      	uxtb	r3, r3
 800337c:	2b02      	cmp	r3, #2
 800337e:	bf0c      	ite	eq
 8003380:	2301      	moveq	r3, #1
 8003382:	2300      	movne	r3, #0
 8003384:	b2db      	uxtb	r3, r3
 8003386:	e03c      	b.n	8003402 <HAL_TIM_PWM_Start_DMA+0xa6>
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	2b04      	cmp	r3, #4
 800338c:	d109      	bne.n	80033a2 <HAL_TIM_PWM_Start_DMA+0x46>
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003394:	b2db      	uxtb	r3, r3
 8003396:	2b02      	cmp	r3, #2
 8003398:	bf0c      	ite	eq
 800339a:	2301      	moveq	r3, #1
 800339c:	2300      	movne	r3, #0
 800339e:	b2db      	uxtb	r3, r3
 80033a0:	e02f      	b.n	8003402 <HAL_TIM_PWM_Start_DMA+0xa6>
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	2b08      	cmp	r3, #8
 80033a6:	d109      	bne.n	80033bc <HAL_TIM_PWM_Start_DMA+0x60>
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80033ae:	b2db      	uxtb	r3, r3
 80033b0:	2b02      	cmp	r3, #2
 80033b2:	bf0c      	ite	eq
 80033b4:	2301      	moveq	r3, #1
 80033b6:	2300      	movne	r3, #0
 80033b8:	b2db      	uxtb	r3, r3
 80033ba:	e022      	b.n	8003402 <HAL_TIM_PWM_Start_DMA+0xa6>
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	2b0c      	cmp	r3, #12
 80033c0:	d109      	bne.n	80033d6 <HAL_TIM_PWM_Start_DMA+0x7a>
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80033c8:	b2db      	uxtb	r3, r3
 80033ca:	2b02      	cmp	r3, #2
 80033cc:	bf0c      	ite	eq
 80033ce:	2301      	moveq	r3, #1
 80033d0:	2300      	movne	r3, #0
 80033d2:	b2db      	uxtb	r3, r3
 80033d4:	e015      	b.n	8003402 <HAL_TIM_PWM_Start_DMA+0xa6>
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	2b10      	cmp	r3, #16
 80033da:	d109      	bne.n	80033f0 <HAL_TIM_PWM_Start_DMA+0x94>
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80033e2:	b2db      	uxtb	r3, r3
 80033e4:	2b02      	cmp	r3, #2
 80033e6:	bf0c      	ite	eq
 80033e8:	2301      	moveq	r3, #1
 80033ea:	2300      	movne	r3, #0
 80033ec:	b2db      	uxtb	r3, r3
 80033ee:	e008      	b.n	8003402 <HAL_TIM_PWM_Start_DMA+0xa6>
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80033f6:	b2db      	uxtb	r3, r3
 80033f8:	2b02      	cmp	r3, #2
 80033fa:	bf0c      	ite	eq
 80033fc:	2301      	moveq	r3, #1
 80033fe:	2300      	movne	r3, #0
 8003400:	b2db      	uxtb	r3, r3
 8003402:	2b00      	cmp	r3, #0
 8003404:	d001      	beq.n	800340a <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 8003406:	2302      	movs	r3, #2
 8003408:	e1ab      	b.n	8003762 <HAL_TIM_PWM_Start_DMA+0x406>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d109      	bne.n	8003424 <HAL_TIM_PWM_Start_DMA+0xc8>
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003416:	b2db      	uxtb	r3, r3
 8003418:	2b01      	cmp	r3, #1
 800341a:	bf0c      	ite	eq
 800341c:	2301      	moveq	r3, #1
 800341e:	2300      	movne	r3, #0
 8003420:	b2db      	uxtb	r3, r3
 8003422:	e03c      	b.n	800349e <HAL_TIM_PWM_Start_DMA+0x142>
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	2b04      	cmp	r3, #4
 8003428:	d109      	bne.n	800343e <HAL_TIM_PWM_Start_DMA+0xe2>
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003430:	b2db      	uxtb	r3, r3
 8003432:	2b01      	cmp	r3, #1
 8003434:	bf0c      	ite	eq
 8003436:	2301      	moveq	r3, #1
 8003438:	2300      	movne	r3, #0
 800343a:	b2db      	uxtb	r3, r3
 800343c:	e02f      	b.n	800349e <HAL_TIM_PWM_Start_DMA+0x142>
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	2b08      	cmp	r3, #8
 8003442:	d109      	bne.n	8003458 <HAL_TIM_PWM_Start_DMA+0xfc>
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800344a:	b2db      	uxtb	r3, r3
 800344c:	2b01      	cmp	r3, #1
 800344e:	bf0c      	ite	eq
 8003450:	2301      	moveq	r3, #1
 8003452:	2300      	movne	r3, #0
 8003454:	b2db      	uxtb	r3, r3
 8003456:	e022      	b.n	800349e <HAL_TIM_PWM_Start_DMA+0x142>
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	2b0c      	cmp	r3, #12
 800345c:	d109      	bne.n	8003472 <HAL_TIM_PWM_Start_DMA+0x116>
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003464:	b2db      	uxtb	r3, r3
 8003466:	2b01      	cmp	r3, #1
 8003468:	bf0c      	ite	eq
 800346a:	2301      	moveq	r3, #1
 800346c:	2300      	movne	r3, #0
 800346e:	b2db      	uxtb	r3, r3
 8003470:	e015      	b.n	800349e <HAL_TIM_PWM_Start_DMA+0x142>
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	2b10      	cmp	r3, #16
 8003476:	d109      	bne.n	800348c <HAL_TIM_PWM_Start_DMA+0x130>
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800347e:	b2db      	uxtb	r3, r3
 8003480:	2b01      	cmp	r3, #1
 8003482:	bf0c      	ite	eq
 8003484:	2301      	moveq	r3, #1
 8003486:	2300      	movne	r3, #0
 8003488:	b2db      	uxtb	r3, r3
 800348a:	e008      	b.n	800349e <HAL_TIM_PWM_Start_DMA+0x142>
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003492:	b2db      	uxtb	r3, r3
 8003494:	2b01      	cmp	r3, #1
 8003496:	bf0c      	ite	eq
 8003498:	2301      	moveq	r3, #1
 800349a:	2300      	movne	r3, #0
 800349c:	b2db      	uxtb	r3, r3
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d034      	beq.n	800350c <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d002      	beq.n	80034ae <HAL_TIM_PWM_Start_DMA+0x152>
 80034a8:	887b      	ldrh	r3, [r7, #2]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d101      	bne.n	80034b2 <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 80034ae:	2301      	movs	r3, #1
 80034b0:	e157      	b.n	8003762 <HAL_TIM_PWM_Start_DMA+0x406>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d104      	bne.n	80034c2 <HAL_TIM_PWM_Start_DMA+0x166>
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2202      	movs	r2, #2
 80034bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80034c0:	e026      	b.n	8003510 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80034c2:	68bb      	ldr	r3, [r7, #8]
 80034c4:	2b04      	cmp	r3, #4
 80034c6:	d104      	bne.n	80034d2 <HAL_TIM_PWM_Start_DMA+0x176>
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2202      	movs	r2, #2
 80034cc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80034d0:	e01e      	b.n	8003510 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	2b08      	cmp	r3, #8
 80034d6:	d104      	bne.n	80034e2 <HAL_TIM_PWM_Start_DMA+0x186>
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	2202      	movs	r2, #2
 80034dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80034e0:	e016      	b.n	8003510 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	2b0c      	cmp	r3, #12
 80034e6:	d104      	bne.n	80034f2 <HAL_TIM_PWM_Start_DMA+0x196>
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2202      	movs	r2, #2
 80034ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80034f0:	e00e      	b.n	8003510 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	2b10      	cmp	r3, #16
 80034f6:	d104      	bne.n	8003502 <HAL_TIM_PWM_Start_DMA+0x1a6>
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	2202      	movs	r2, #2
 80034fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003500:	e006      	b.n	8003510 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	2202      	movs	r2, #2
 8003506:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800350a:	e001      	b.n	8003510 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	e128      	b.n	8003762 <HAL_TIM_PWM_Start_DMA+0x406>
  }

  switch (Channel)
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	2b0c      	cmp	r3, #12
 8003514:	f200 80ae 	bhi.w	8003674 <HAL_TIM_PWM_Start_DMA+0x318>
 8003518:	a201      	add	r2, pc, #4	@ (adr r2, 8003520 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 800351a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800351e:	bf00      	nop
 8003520:	08003555 	.word	0x08003555
 8003524:	08003675 	.word	0x08003675
 8003528:	08003675 	.word	0x08003675
 800352c:	08003675 	.word	0x08003675
 8003530:	0800359d 	.word	0x0800359d
 8003534:	08003675 	.word	0x08003675
 8003538:	08003675 	.word	0x08003675
 800353c:	08003675 	.word	0x08003675
 8003540:	080035e5 	.word	0x080035e5
 8003544:	08003675 	.word	0x08003675
 8003548:	08003675 	.word	0x08003675
 800354c:	08003675 	.word	0x08003675
 8003550:	0800362d 	.word	0x0800362d
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003558:	4a84      	ldr	r2, [pc, #528]	@ (800376c <HAL_TIM_PWM_Start_DMA+0x410>)
 800355a:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003560:	4a83      	ldr	r2, [pc, #524]	@ (8003770 <HAL_TIM_PWM_Start_DMA+0x414>)
 8003562:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003568:	4a82      	ldr	r2, [pc, #520]	@ (8003774 <HAL_TIM_PWM_Start_DMA+0x418>)
 800356a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8003570:	6879      	ldr	r1, [r7, #4]
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	3334      	adds	r3, #52	@ 0x34
 8003578:	461a      	mov	r2, r3
 800357a:	887b      	ldrh	r3, [r7, #2]
 800357c:	f7fe f858 	bl	8001630 <HAL_DMA_Start_IT>
 8003580:	4603      	mov	r3, r0
 8003582:	2b00      	cmp	r3, #0
 8003584:	d001      	beq.n	800358a <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	e0eb      	b.n	8003762 <HAL_TIM_PWM_Start_DMA+0x406>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	68da      	ldr	r2, [r3, #12]
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003598:	60da      	str	r2, [r3, #12]
      break;
 800359a:	e06e      	b.n	800367a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035a0:	4a72      	ldr	r2, [pc, #456]	@ (800376c <HAL_TIM_PWM_Start_DMA+0x410>)
 80035a2:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035a8:	4a71      	ldr	r2, [pc, #452]	@ (8003770 <HAL_TIM_PWM_Start_DMA+0x414>)
 80035aa:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035b0:	4a70      	ldr	r2, [pc, #448]	@ (8003774 <HAL_TIM_PWM_Start_DMA+0x418>)
 80035b2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80035b8:	6879      	ldr	r1, [r7, #4]
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	3338      	adds	r3, #56	@ 0x38
 80035c0:	461a      	mov	r2, r3
 80035c2:	887b      	ldrh	r3, [r7, #2]
 80035c4:	f7fe f834 	bl	8001630 <HAL_DMA_Start_IT>
 80035c8:	4603      	mov	r3, r0
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d001      	beq.n	80035d2 <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	e0c7      	b.n	8003762 <HAL_TIM_PWM_Start_DMA+0x406>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	68da      	ldr	r2, [r3, #12]
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80035e0:	60da      	str	r2, [r3, #12]
      break;
 80035e2:	e04a      	b.n	800367a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035e8:	4a60      	ldr	r2, [pc, #384]	@ (800376c <HAL_TIM_PWM_Start_DMA+0x410>)
 80035ea:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035f0:	4a5f      	ldr	r2, [pc, #380]	@ (8003770 <HAL_TIM_PWM_Start_DMA+0x414>)
 80035f2:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035f8:	4a5e      	ldr	r2, [pc, #376]	@ (8003774 <HAL_TIM_PWM_Start_DMA+0x418>)
 80035fa:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8003600:	6879      	ldr	r1, [r7, #4]
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	333c      	adds	r3, #60	@ 0x3c
 8003608:	461a      	mov	r2, r3
 800360a:	887b      	ldrh	r3, [r7, #2]
 800360c:	f7fe f810 	bl	8001630 <HAL_DMA_Start_IT>
 8003610:	4603      	mov	r3, r0
 8003612:	2b00      	cmp	r3, #0
 8003614:	d001      	beq.n	800361a <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	e0a3      	b.n	8003762 <HAL_TIM_PWM_Start_DMA+0x406>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	68da      	ldr	r2, [r3, #12]
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003628:	60da      	str	r2, [r3, #12]
      break;
 800362a:	e026      	b.n	800367a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003630:	4a4e      	ldr	r2, [pc, #312]	@ (800376c <HAL_TIM_PWM_Start_DMA+0x410>)
 8003632:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003638:	4a4d      	ldr	r2, [pc, #308]	@ (8003770 <HAL_TIM_PWM_Start_DMA+0x414>)
 800363a:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003640:	4a4c      	ldr	r2, [pc, #304]	@ (8003774 <HAL_TIM_PWM_Start_DMA+0x418>)
 8003642:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003648:	6879      	ldr	r1, [r7, #4]
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	3340      	adds	r3, #64	@ 0x40
 8003650:	461a      	mov	r2, r3
 8003652:	887b      	ldrh	r3, [r7, #2]
 8003654:	f7fd ffec 	bl	8001630 <HAL_DMA_Start_IT>
 8003658:	4603      	mov	r3, r0
 800365a:	2b00      	cmp	r3, #0
 800365c:	d001      	beq.n	8003662 <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	e07f      	b.n	8003762 <HAL_TIM_PWM_Start_DMA+0x406>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	68da      	ldr	r2, [r3, #12]
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003670:	60da      	str	r2, [r3, #12]
      break;
 8003672:	e002      	b.n	800367a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 8003674:	2301      	movs	r3, #1
 8003676:	75fb      	strb	r3, [r7, #23]
      break;
 8003678:	bf00      	nop
  }

  if (status == HAL_OK)
 800367a:	7dfb      	ldrb	r3, [r7, #23]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d16f      	bne.n	8003760 <HAL_TIM_PWM_Start_DMA+0x404>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	2201      	movs	r2, #1
 8003686:	68b9      	ldr	r1, [r7, #8]
 8003688:	4618      	mov	r0, r3
 800368a:	f000 ff69 	bl	8004560 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a39      	ldr	r2, [pc, #228]	@ (8003778 <HAL_TIM_PWM_Start_DMA+0x41c>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d013      	beq.n	80036c0 <HAL_TIM_PWM_Start_DMA+0x364>
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a37      	ldr	r2, [pc, #220]	@ (800377c <HAL_TIM_PWM_Start_DMA+0x420>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d00e      	beq.n	80036c0 <HAL_TIM_PWM_Start_DMA+0x364>
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a36      	ldr	r2, [pc, #216]	@ (8003780 <HAL_TIM_PWM_Start_DMA+0x424>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d009      	beq.n	80036c0 <HAL_TIM_PWM_Start_DMA+0x364>
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a34      	ldr	r2, [pc, #208]	@ (8003784 <HAL_TIM_PWM_Start_DMA+0x428>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d004      	beq.n	80036c0 <HAL_TIM_PWM_Start_DMA+0x364>
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a33      	ldr	r2, [pc, #204]	@ (8003788 <HAL_TIM_PWM_Start_DMA+0x42c>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d101      	bne.n	80036c4 <HAL_TIM_PWM_Start_DMA+0x368>
 80036c0:	2301      	movs	r3, #1
 80036c2:	e000      	b.n	80036c6 <HAL_TIM_PWM_Start_DMA+0x36a>
 80036c4:	2300      	movs	r3, #0
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d007      	beq.n	80036da <HAL_TIM_PWM_Start_DMA+0x37e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80036d8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a26      	ldr	r2, [pc, #152]	@ (8003778 <HAL_TIM_PWM_Start_DMA+0x41c>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d01d      	beq.n	8003720 <HAL_TIM_PWM_Start_DMA+0x3c4>
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036ec:	d018      	beq.n	8003720 <HAL_TIM_PWM_Start_DMA+0x3c4>
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a26      	ldr	r2, [pc, #152]	@ (800378c <HAL_TIM_PWM_Start_DMA+0x430>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d013      	beq.n	8003720 <HAL_TIM_PWM_Start_DMA+0x3c4>
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a24      	ldr	r2, [pc, #144]	@ (8003790 <HAL_TIM_PWM_Start_DMA+0x434>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d00e      	beq.n	8003720 <HAL_TIM_PWM_Start_DMA+0x3c4>
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a23      	ldr	r2, [pc, #140]	@ (8003794 <HAL_TIM_PWM_Start_DMA+0x438>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d009      	beq.n	8003720 <HAL_TIM_PWM_Start_DMA+0x3c4>
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a1a      	ldr	r2, [pc, #104]	@ (800377c <HAL_TIM_PWM_Start_DMA+0x420>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d004      	beq.n	8003720 <HAL_TIM_PWM_Start_DMA+0x3c4>
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a19      	ldr	r2, [pc, #100]	@ (8003780 <HAL_TIM_PWM_Start_DMA+0x424>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d115      	bne.n	800374c <HAL_TIM_PWM_Start_DMA+0x3f0>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	689a      	ldr	r2, [r3, #8]
 8003726:	4b1c      	ldr	r3, [pc, #112]	@ (8003798 <HAL_TIM_PWM_Start_DMA+0x43c>)
 8003728:	4013      	ands	r3, r2
 800372a:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800372c:	693b      	ldr	r3, [r7, #16]
 800372e:	2b06      	cmp	r3, #6
 8003730:	d015      	beq.n	800375e <HAL_TIM_PWM_Start_DMA+0x402>
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003738:	d011      	beq.n	800375e <HAL_TIM_PWM_Start_DMA+0x402>
      {
        __HAL_TIM_ENABLE(htim);
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	681a      	ldr	r2, [r3, #0]
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f042 0201 	orr.w	r2, r2, #1
 8003748:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800374a:	e008      	b.n	800375e <HAL_TIM_PWM_Start_DMA+0x402>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	681a      	ldr	r2, [r3, #0]
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f042 0201 	orr.w	r2, r2, #1
 800375a:	601a      	str	r2, [r3, #0]
 800375c:	e000      	b.n	8003760 <HAL_TIM_PWM_Start_DMA+0x404>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800375e:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8003760:	7dfb      	ldrb	r3, [r7, #23]
}
 8003762:	4618      	mov	r0, r3
 8003764:	3718      	adds	r7, #24
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}
 800376a:	bf00      	nop
 800376c:	08003c25 	.word	0x08003c25
 8003770:	08003ccd 	.word	0x08003ccd
 8003774:	08003b93 	.word	0x08003b93
 8003778:	40012c00 	.word	0x40012c00
 800377c:	40013400 	.word	0x40013400
 8003780:	40014000 	.word	0x40014000
 8003784:	40014400 	.word	0x40014400
 8003788:	40014800 	.word	0x40014800
 800378c:	40000400 	.word	0x40000400
 8003790:	40000800 	.word	0x40000800
 8003794:	40000c00 	.word	0x40000c00
 8003798:	00010007 	.word	0x00010007

0800379c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b086      	sub	sp, #24
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	60f8      	str	r0, [r7, #12]
 80037a4:	60b9      	str	r1, [r7, #8]
 80037a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037a8:	2300      	movs	r3, #0
 80037aa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80037b2:	2b01      	cmp	r3, #1
 80037b4:	d101      	bne.n	80037ba <HAL_TIM_PWM_ConfigChannel+0x1e>
 80037b6:	2302      	movs	r3, #2
 80037b8:	e0ff      	b.n	80039ba <HAL_TIM_PWM_ConfigChannel+0x21e>
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2201      	movs	r2, #1
 80037be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2b14      	cmp	r3, #20
 80037c6:	f200 80f0 	bhi.w	80039aa <HAL_TIM_PWM_ConfigChannel+0x20e>
 80037ca:	a201      	add	r2, pc, #4	@ (adr r2, 80037d0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80037cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037d0:	08003825 	.word	0x08003825
 80037d4:	080039ab 	.word	0x080039ab
 80037d8:	080039ab 	.word	0x080039ab
 80037dc:	080039ab 	.word	0x080039ab
 80037e0:	08003865 	.word	0x08003865
 80037e4:	080039ab 	.word	0x080039ab
 80037e8:	080039ab 	.word	0x080039ab
 80037ec:	080039ab 	.word	0x080039ab
 80037f0:	080038a7 	.word	0x080038a7
 80037f4:	080039ab 	.word	0x080039ab
 80037f8:	080039ab 	.word	0x080039ab
 80037fc:	080039ab 	.word	0x080039ab
 8003800:	080038e7 	.word	0x080038e7
 8003804:	080039ab 	.word	0x080039ab
 8003808:	080039ab 	.word	0x080039ab
 800380c:	080039ab 	.word	0x080039ab
 8003810:	08003929 	.word	0x08003929
 8003814:	080039ab 	.word	0x080039ab
 8003818:	080039ab 	.word	0x080039ab
 800381c:	080039ab 	.word	0x080039ab
 8003820:	08003969 	.word	0x08003969
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	68b9      	ldr	r1, [r7, #8]
 800382a:	4618      	mov	r0, r3
 800382c:	f000 fb28 	bl	8003e80 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	699a      	ldr	r2, [r3, #24]
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f042 0208 	orr.w	r2, r2, #8
 800383e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	699a      	ldr	r2, [r3, #24]
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f022 0204 	bic.w	r2, r2, #4
 800384e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	6999      	ldr	r1, [r3, #24]
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	691a      	ldr	r2, [r3, #16]
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	430a      	orrs	r2, r1
 8003860:	619a      	str	r2, [r3, #24]
      break;
 8003862:	e0a5      	b.n	80039b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	68b9      	ldr	r1, [r7, #8]
 800386a:	4618      	mov	r0, r3
 800386c:	f000 fb98 	bl	8003fa0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	699a      	ldr	r2, [r3, #24]
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800387e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	699a      	ldr	r2, [r3, #24]
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800388e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	6999      	ldr	r1, [r3, #24]
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	691b      	ldr	r3, [r3, #16]
 800389a:	021a      	lsls	r2, r3, #8
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	430a      	orrs	r2, r1
 80038a2:	619a      	str	r2, [r3, #24]
      break;
 80038a4:	e084      	b.n	80039b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	68b9      	ldr	r1, [r7, #8]
 80038ac:	4618      	mov	r0, r3
 80038ae:	f000 fc01 	bl	80040b4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	69da      	ldr	r2, [r3, #28]
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f042 0208 	orr.w	r2, r2, #8
 80038c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	69da      	ldr	r2, [r3, #28]
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f022 0204 	bic.w	r2, r2, #4
 80038d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	69d9      	ldr	r1, [r3, #28]
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	691a      	ldr	r2, [r3, #16]
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	430a      	orrs	r2, r1
 80038e2:	61da      	str	r2, [r3, #28]
      break;
 80038e4:	e064      	b.n	80039b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	68b9      	ldr	r1, [r7, #8]
 80038ec:	4618      	mov	r0, r3
 80038ee:	f000 fc69 	bl	80041c4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	69da      	ldr	r2, [r3, #28]
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003900:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	69da      	ldr	r2, [r3, #28]
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003910:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	69d9      	ldr	r1, [r3, #28]
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	691b      	ldr	r3, [r3, #16]
 800391c:	021a      	lsls	r2, r3, #8
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	430a      	orrs	r2, r1
 8003924:	61da      	str	r2, [r3, #28]
      break;
 8003926:	e043      	b.n	80039b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	68b9      	ldr	r1, [r7, #8]
 800392e:	4618      	mov	r0, r3
 8003930:	f000 fcb2 	bl	8004298 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f042 0208 	orr.w	r2, r2, #8
 8003942:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f022 0204 	bic.w	r2, r2, #4
 8003952:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	691a      	ldr	r2, [r3, #16]
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	430a      	orrs	r2, r1
 8003964:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003966:	e023      	b.n	80039b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	68b9      	ldr	r1, [r7, #8]
 800396e:	4618      	mov	r0, r3
 8003970:	f000 fcf6 	bl	8004360 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003982:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003992:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	691b      	ldr	r3, [r3, #16]
 800399e:	021a      	lsls	r2, r3, #8
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	430a      	orrs	r2, r1
 80039a6:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80039a8:	e002      	b.n	80039b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
 80039ac:	75fb      	strb	r3, [r7, #23]
      break;
 80039ae:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	2200      	movs	r2, #0
 80039b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80039b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	3718      	adds	r7, #24
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}
 80039c2:	bf00      	nop

080039c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b084      	sub	sp, #16
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
 80039cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80039ce:	2300      	movs	r3, #0
 80039d0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80039d8:	2b01      	cmp	r3, #1
 80039da:	d101      	bne.n	80039e0 <HAL_TIM_ConfigClockSource+0x1c>
 80039dc:	2302      	movs	r3, #2
 80039de:	e0b6      	b.n	8003b4e <HAL_TIM_ConfigClockSource+0x18a>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2201      	movs	r2, #1
 80039e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2202      	movs	r2, #2
 80039ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	689b      	ldr	r3, [r3, #8]
 80039f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80039fe:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003a02:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003a0a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	68ba      	ldr	r2, [r7, #8]
 8003a12:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a1c:	d03e      	beq.n	8003a9c <HAL_TIM_ConfigClockSource+0xd8>
 8003a1e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a22:	f200 8087 	bhi.w	8003b34 <HAL_TIM_ConfigClockSource+0x170>
 8003a26:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a2a:	f000 8086 	beq.w	8003b3a <HAL_TIM_ConfigClockSource+0x176>
 8003a2e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a32:	d87f      	bhi.n	8003b34 <HAL_TIM_ConfigClockSource+0x170>
 8003a34:	2b70      	cmp	r3, #112	@ 0x70
 8003a36:	d01a      	beq.n	8003a6e <HAL_TIM_ConfigClockSource+0xaa>
 8003a38:	2b70      	cmp	r3, #112	@ 0x70
 8003a3a:	d87b      	bhi.n	8003b34 <HAL_TIM_ConfigClockSource+0x170>
 8003a3c:	2b60      	cmp	r3, #96	@ 0x60
 8003a3e:	d050      	beq.n	8003ae2 <HAL_TIM_ConfigClockSource+0x11e>
 8003a40:	2b60      	cmp	r3, #96	@ 0x60
 8003a42:	d877      	bhi.n	8003b34 <HAL_TIM_ConfigClockSource+0x170>
 8003a44:	2b50      	cmp	r3, #80	@ 0x50
 8003a46:	d03c      	beq.n	8003ac2 <HAL_TIM_ConfigClockSource+0xfe>
 8003a48:	2b50      	cmp	r3, #80	@ 0x50
 8003a4a:	d873      	bhi.n	8003b34 <HAL_TIM_ConfigClockSource+0x170>
 8003a4c:	2b40      	cmp	r3, #64	@ 0x40
 8003a4e:	d058      	beq.n	8003b02 <HAL_TIM_ConfigClockSource+0x13e>
 8003a50:	2b40      	cmp	r3, #64	@ 0x40
 8003a52:	d86f      	bhi.n	8003b34 <HAL_TIM_ConfigClockSource+0x170>
 8003a54:	2b30      	cmp	r3, #48	@ 0x30
 8003a56:	d064      	beq.n	8003b22 <HAL_TIM_ConfigClockSource+0x15e>
 8003a58:	2b30      	cmp	r3, #48	@ 0x30
 8003a5a:	d86b      	bhi.n	8003b34 <HAL_TIM_ConfigClockSource+0x170>
 8003a5c:	2b20      	cmp	r3, #32
 8003a5e:	d060      	beq.n	8003b22 <HAL_TIM_ConfigClockSource+0x15e>
 8003a60:	2b20      	cmp	r3, #32
 8003a62:	d867      	bhi.n	8003b34 <HAL_TIM_ConfigClockSource+0x170>
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d05c      	beq.n	8003b22 <HAL_TIM_ConfigClockSource+0x15e>
 8003a68:	2b10      	cmp	r3, #16
 8003a6a:	d05a      	beq.n	8003b22 <HAL_TIM_ConfigClockSource+0x15e>
 8003a6c:	e062      	b.n	8003b34 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003a7e:	f000 fd4f 	bl	8004520 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	689b      	ldr	r3, [r3, #8]
 8003a88:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003a8a:	68bb      	ldr	r3, [r7, #8]
 8003a8c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003a90:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	68ba      	ldr	r2, [r7, #8]
 8003a98:	609a      	str	r2, [r3, #8]
      break;
 8003a9a:	e04f      	b.n	8003b3c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003aac:	f000 fd38 	bl	8004520 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	689a      	ldr	r2, [r3, #8]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003abe:	609a      	str	r2, [r3, #8]
      break;
 8003ac0:	e03c      	b.n	8003b3c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ace:	461a      	mov	r2, r3
 8003ad0:	f000 fcac 	bl	800442c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	2150      	movs	r1, #80	@ 0x50
 8003ada:	4618      	mov	r0, r3
 8003adc:	f000 fd05 	bl	80044ea <TIM_ITRx_SetConfig>
      break;
 8003ae0:	e02c      	b.n	8003b3c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003aee:	461a      	mov	r2, r3
 8003af0:	f000 fccb 	bl	800448a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	2160      	movs	r1, #96	@ 0x60
 8003afa:	4618      	mov	r0, r3
 8003afc:	f000 fcf5 	bl	80044ea <TIM_ITRx_SetConfig>
      break;
 8003b00:	e01c      	b.n	8003b3c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b0e:	461a      	mov	r2, r3
 8003b10:	f000 fc8c 	bl	800442c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	2140      	movs	r1, #64	@ 0x40
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f000 fce5 	bl	80044ea <TIM_ITRx_SetConfig>
      break;
 8003b20:	e00c      	b.n	8003b3c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681a      	ldr	r2, [r3, #0]
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4619      	mov	r1, r3
 8003b2c:	4610      	mov	r0, r2
 8003b2e:	f000 fcdc 	bl	80044ea <TIM_ITRx_SetConfig>
      break;
 8003b32:	e003      	b.n	8003b3c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003b34:	2301      	movs	r3, #1
 8003b36:	73fb      	strb	r3, [r7, #15]
      break;
 8003b38:	e000      	b.n	8003b3c <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003b3a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2201      	movs	r2, #1
 8003b40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2200      	movs	r2, #0
 8003b48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003b4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	3710      	adds	r7, #16
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}

08003b56 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003b56:	b480      	push	{r7}
 8003b58:	b083      	sub	sp, #12
 8003b5a:	af00      	add	r7, sp, #0
 8003b5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003b5e:	bf00      	nop
 8003b60:	370c      	adds	r7, #12
 8003b62:	46bd      	mov	sp, r7
 8003b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b68:	4770      	bx	lr

08003b6a <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003b6a:	b480      	push	{r7}
 8003b6c:	b083      	sub	sp, #12
 8003b6e:	af00      	add	r7, sp, #0
 8003b70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8003b72:	bf00      	nop
 8003b74:	370c      	adds	r7, #12
 8003b76:	46bd      	mov	sp, r7
 8003b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7c:	4770      	bx	lr

08003b7e <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8003b7e:	b480      	push	{r7}
 8003b80:	b083      	sub	sp, #12
 8003b82:	af00      	add	r7, sp, #0
 8003b84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8003b86:	bf00      	nop
 8003b88:	370c      	adds	r7, #12
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b90:	4770      	bx	lr

08003b92 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8003b92:	b580      	push	{r7, lr}
 8003b94:	b084      	sub	sp, #16
 8003b96:	af00      	add	r7, sp, #0
 8003b98:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b9e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ba4:	687a      	ldr	r2, [r7, #4]
 8003ba6:	429a      	cmp	r2, r3
 8003ba8:	d107      	bne.n	8003bba <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	2201      	movs	r2, #1
 8003bae:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003bb8:	e02a      	b.n	8003c10 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bbe:	687a      	ldr	r2, [r7, #4]
 8003bc0:	429a      	cmp	r2, r3
 8003bc2:	d107      	bne.n	8003bd4 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	2202      	movs	r2, #2
 8003bc8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	2201      	movs	r2, #1
 8003bce:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003bd2:	e01d      	b.n	8003c10 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bd8:	687a      	ldr	r2, [r7, #4]
 8003bda:	429a      	cmp	r2, r3
 8003bdc:	d107      	bne.n	8003bee <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	2204      	movs	r2, #4
 8003be2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	2201      	movs	r2, #1
 8003be8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003bec:	e010      	b.n	8003c10 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bf2:	687a      	ldr	r2, [r7, #4]
 8003bf4:	429a      	cmp	r2, r3
 8003bf6:	d107      	bne.n	8003c08 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	2208      	movs	r2, #8
 8003bfc:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	2201      	movs	r2, #1
 8003c02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003c06:	e003      	b.n	8003c10 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8003c10:	68f8      	ldr	r0, [r7, #12]
 8003c12:	f7ff ffb4 	bl	8003b7e <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	771a      	strb	r2, [r3, #28]
}
 8003c1c:	bf00      	nop
 8003c1e:	3710      	adds	r7, #16
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bd80      	pop	{r7, pc}

08003c24 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b084      	sub	sp, #16
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c30:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c36:	687a      	ldr	r2, [r7, #4]
 8003c38:	429a      	cmp	r2, r3
 8003c3a:	d10b      	bne.n	8003c54 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	2201      	movs	r2, #1
 8003c40:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	69db      	ldr	r3, [r3, #28]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d136      	bne.n	8003cb8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	2201      	movs	r2, #1
 8003c4e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003c52:	e031      	b.n	8003cb8 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c58:	687a      	ldr	r2, [r7, #4]
 8003c5a:	429a      	cmp	r2, r3
 8003c5c:	d10b      	bne.n	8003c76 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	2202      	movs	r2, #2
 8003c62:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	69db      	ldr	r3, [r3, #28]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d125      	bne.n	8003cb8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	2201      	movs	r2, #1
 8003c70:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003c74:	e020      	b.n	8003cb8 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c7a:	687a      	ldr	r2, [r7, #4]
 8003c7c:	429a      	cmp	r2, r3
 8003c7e:	d10b      	bne.n	8003c98 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	2204      	movs	r2, #4
 8003c84:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	69db      	ldr	r3, [r3, #28]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d114      	bne.n	8003cb8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	2201      	movs	r2, #1
 8003c92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003c96:	e00f      	b.n	8003cb8 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c9c:	687a      	ldr	r2, [r7, #4]
 8003c9e:	429a      	cmp	r2, r3
 8003ca0:	d10a      	bne.n	8003cb8 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	2208      	movs	r2, #8
 8003ca6:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	69db      	ldr	r3, [r3, #28]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d103      	bne.n	8003cb8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cb8:	68f8      	ldr	r0, [r7, #12]
 8003cba:	f7ff ff4c 	bl	8003b56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	771a      	strb	r2, [r3, #28]
}
 8003cc4:	bf00      	nop
 8003cc6:	3710      	adds	r7, #16
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bd80      	pop	{r7, pc}

08003ccc <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b084      	sub	sp, #16
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cd8:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cde:	687a      	ldr	r2, [r7, #4]
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	d103      	bne.n	8003cec <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	771a      	strb	r2, [r3, #28]
 8003cea:	e019      	b.n	8003d20 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cf0:	687a      	ldr	r2, [r7, #4]
 8003cf2:	429a      	cmp	r2, r3
 8003cf4:	d103      	bne.n	8003cfe <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	2202      	movs	r2, #2
 8003cfa:	771a      	strb	r2, [r3, #28]
 8003cfc:	e010      	b.n	8003d20 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d02:	687a      	ldr	r2, [r7, #4]
 8003d04:	429a      	cmp	r2, r3
 8003d06:	d103      	bne.n	8003d10 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	2204      	movs	r2, #4
 8003d0c:	771a      	strb	r2, [r3, #28]
 8003d0e:	e007      	b.n	8003d20 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d14:	687a      	ldr	r2, [r7, #4]
 8003d16:	429a      	cmp	r2, r3
 8003d18:	d102      	bne.n	8003d20 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	2208      	movs	r2, #8
 8003d1e:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8003d20:	68f8      	ldr	r0, [r7, #12]
 8003d22:	f7ff ff22 	bl	8003b6a <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	771a      	strb	r2, [r3, #28]
}
 8003d2c:	bf00      	nop
 8003d2e:	3710      	adds	r7, #16
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}

08003d34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003d34:	b480      	push	{r7}
 8003d36:	b085      	sub	sp, #20
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
 8003d3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	4a46      	ldr	r2, [pc, #280]	@ (8003e60 <TIM_Base_SetConfig+0x12c>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d013      	beq.n	8003d74 <TIM_Base_SetConfig+0x40>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d52:	d00f      	beq.n	8003d74 <TIM_Base_SetConfig+0x40>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	4a43      	ldr	r2, [pc, #268]	@ (8003e64 <TIM_Base_SetConfig+0x130>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d00b      	beq.n	8003d74 <TIM_Base_SetConfig+0x40>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	4a42      	ldr	r2, [pc, #264]	@ (8003e68 <TIM_Base_SetConfig+0x134>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d007      	beq.n	8003d74 <TIM_Base_SetConfig+0x40>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	4a41      	ldr	r2, [pc, #260]	@ (8003e6c <TIM_Base_SetConfig+0x138>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d003      	beq.n	8003d74 <TIM_Base_SetConfig+0x40>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	4a40      	ldr	r2, [pc, #256]	@ (8003e70 <TIM_Base_SetConfig+0x13c>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d108      	bne.n	8003d86 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d7a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	68fa      	ldr	r2, [r7, #12]
 8003d82:	4313      	orrs	r3, r2
 8003d84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	4a35      	ldr	r2, [pc, #212]	@ (8003e60 <TIM_Base_SetConfig+0x12c>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d01f      	beq.n	8003dce <TIM_Base_SetConfig+0x9a>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d94:	d01b      	beq.n	8003dce <TIM_Base_SetConfig+0x9a>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	4a32      	ldr	r2, [pc, #200]	@ (8003e64 <TIM_Base_SetConfig+0x130>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d017      	beq.n	8003dce <TIM_Base_SetConfig+0x9a>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	4a31      	ldr	r2, [pc, #196]	@ (8003e68 <TIM_Base_SetConfig+0x134>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d013      	beq.n	8003dce <TIM_Base_SetConfig+0x9a>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	4a30      	ldr	r2, [pc, #192]	@ (8003e6c <TIM_Base_SetConfig+0x138>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d00f      	beq.n	8003dce <TIM_Base_SetConfig+0x9a>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	4a2f      	ldr	r2, [pc, #188]	@ (8003e70 <TIM_Base_SetConfig+0x13c>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d00b      	beq.n	8003dce <TIM_Base_SetConfig+0x9a>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	4a2e      	ldr	r2, [pc, #184]	@ (8003e74 <TIM_Base_SetConfig+0x140>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d007      	beq.n	8003dce <TIM_Base_SetConfig+0x9a>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	4a2d      	ldr	r2, [pc, #180]	@ (8003e78 <TIM_Base_SetConfig+0x144>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d003      	beq.n	8003dce <TIM_Base_SetConfig+0x9a>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	4a2c      	ldr	r2, [pc, #176]	@ (8003e7c <TIM_Base_SetConfig+0x148>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d108      	bne.n	8003de0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003dd4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	68db      	ldr	r3, [r3, #12]
 8003dda:	68fa      	ldr	r2, [r7, #12]
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	695b      	ldr	r3, [r3, #20]
 8003dea:	4313      	orrs	r3, r2
 8003dec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	68fa      	ldr	r2, [r7, #12]
 8003df2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	689a      	ldr	r2, [r3, #8]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	681a      	ldr	r2, [r3, #0]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	4a16      	ldr	r2, [pc, #88]	@ (8003e60 <TIM_Base_SetConfig+0x12c>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d00f      	beq.n	8003e2c <TIM_Base_SetConfig+0xf8>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	4a18      	ldr	r2, [pc, #96]	@ (8003e70 <TIM_Base_SetConfig+0x13c>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d00b      	beq.n	8003e2c <TIM_Base_SetConfig+0xf8>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	4a17      	ldr	r2, [pc, #92]	@ (8003e74 <TIM_Base_SetConfig+0x140>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d007      	beq.n	8003e2c <TIM_Base_SetConfig+0xf8>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	4a16      	ldr	r2, [pc, #88]	@ (8003e78 <TIM_Base_SetConfig+0x144>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d003      	beq.n	8003e2c <TIM_Base_SetConfig+0xf8>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	4a15      	ldr	r2, [pc, #84]	@ (8003e7c <TIM_Base_SetConfig+0x148>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d103      	bne.n	8003e34 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	691a      	ldr	r2, [r3, #16]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2201      	movs	r2, #1
 8003e38:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	691b      	ldr	r3, [r3, #16]
 8003e3e:	f003 0301 	and.w	r3, r3, #1
 8003e42:	2b01      	cmp	r3, #1
 8003e44:	d105      	bne.n	8003e52 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	691b      	ldr	r3, [r3, #16]
 8003e4a:	f023 0201 	bic.w	r2, r3, #1
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	611a      	str	r2, [r3, #16]
  }
}
 8003e52:	bf00      	nop
 8003e54:	3714      	adds	r7, #20
 8003e56:	46bd      	mov	sp, r7
 8003e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5c:	4770      	bx	lr
 8003e5e:	bf00      	nop
 8003e60:	40012c00 	.word	0x40012c00
 8003e64:	40000400 	.word	0x40000400
 8003e68:	40000800 	.word	0x40000800
 8003e6c:	40000c00 	.word	0x40000c00
 8003e70:	40013400 	.word	0x40013400
 8003e74:	40014000 	.word	0x40014000
 8003e78:	40014400 	.word	0x40014400
 8003e7c:	40014800 	.word	0x40014800

08003e80 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b087      	sub	sp, #28
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
 8003e88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6a1b      	ldr	r3, [r3, #32]
 8003e8e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6a1b      	ldr	r3, [r3, #32]
 8003e94:	f023 0201 	bic.w	r2, r3, #1
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	699b      	ldr	r3, [r3, #24]
 8003ea6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003eae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003eb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	f023 0303 	bic.w	r3, r3, #3
 8003eba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	68fa      	ldr	r2, [r7, #12]
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	f023 0302 	bic.w	r3, r3, #2
 8003ecc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	689b      	ldr	r3, [r3, #8]
 8003ed2:	697a      	ldr	r2, [r7, #20]
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	4a2c      	ldr	r2, [pc, #176]	@ (8003f8c <TIM_OC1_SetConfig+0x10c>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d00f      	beq.n	8003f00 <TIM_OC1_SetConfig+0x80>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	4a2b      	ldr	r2, [pc, #172]	@ (8003f90 <TIM_OC1_SetConfig+0x110>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d00b      	beq.n	8003f00 <TIM_OC1_SetConfig+0x80>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	4a2a      	ldr	r2, [pc, #168]	@ (8003f94 <TIM_OC1_SetConfig+0x114>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d007      	beq.n	8003f00 <TIM_OC1_SetConfig+0x80>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	4a29      	ldr	r2, [pc, #164]	@ (8003f98 <TIM_OC1_SetConfig+0x118>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d003      	beq.n	8003f00 <TIM_OC1_SetConfig+0x80>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	4a28      	ldr	r2, [pc, #160]	@ (8003f9c <TIM_OC1_SetConfig+0x11c>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d10c      	bne.n	8003f1a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	f023 0308 	bic.w	r3, r3, #8
 8003f06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	68db      	ldr	r3, [r3, #12]
 8003f0c:	697a      	ldr	r2, [r7, #20]
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	f023 0304 	bic.w	r3, r3, #4
 8003f18:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	4a1b      	ldr	r2, [pc, #108]	@ (8003f8c <TIM_OC1_SetConfig+0x10c>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d00f      	beq.n	8003f42 <TIM_OC1_SetConfig+0xc2>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	4a1a      	ldr	r2, [pc, #104]	@ (8003f90 <TIM_OC1_SetConfig+0x110>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d00b      	beq.n	8003f42 <TIM_OC1_SetConfig+0xc2>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	4a19      	ldr	r2, [pc, #100]	@ (8003f94 <TIM_OC1_SetConfig+0x114>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d007      	beq.n	8003f42 <TIM_OC1_SetConfig+0xc2>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	4a18      	ldr	r2, [pc, #96]	@ (8003f98 <TIM_OC1_SetConfig+0x118>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d003      	beq.n	8003f42 <TIM_OC1_SetConfig+0xc2>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	4a17      	ldr	r2, [pc, #92]	@ (8003f9c <TIM_OC1_SetConfig+0x11c>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d111      	bne.n	8003f66 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003f48:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003f50:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	695b      	ldr	r3, [r3, #20]
 8003f56:	693a      	ldr	r2, [r7, #16]
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	699b      	ldr	r3, [r3, #24]
 8003f60:	693a      	ldr	r2, [r7, #16]
 8003f62:	4313      	orrs	r3, r2
 8003f64:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	693a      	ldr	r2, [r7, #16]
 8003f6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	68fa      	ldr	r2, [r7, #12]
 8003f70:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	685a      	ldr	r2, [r3, #4]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	697a      	ldr	r2, [r7, #20]
 8003f7e:	621a      	str	r2, [r3, #32]
}
 8003f80:	bf00      	nop
 8003f82:	371c      	adds	r7, #28
 8003f84:	46bd      	mov	sp, r7
 8003f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8a:	4770      	bx	lr
 8003f8c:	40012c00 	.word	0x40012c00
 8003f90:	40013400 	.word	0x40013400
 8003f94:	40014000 	.word	0x40014000
 8003f98:	40014400 	.word	0x40014400
 8003f9c:	40014800 	.word	0x40014800

08003fa0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b087      	sub	sp, #28
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
 8003fa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6a1b      	ldr	r3, [r3, #32]
 8003fae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6a1b      	ldr	r3, [r3, #32]
 8003fb4:	f023 0210 	bic.w	r2, r3, #16
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	699b      	ldr	r3, [r3, #24]
 8003fc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003fce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003fd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003fda:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	021b      	lsls	r3, r3, #8
 8003fe2:	68fa      	ldr	r2, [r7, #12]
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	f023 0320 	bic.w	r3, r3, #32
 8003fee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	011b      	lsls	r3, r3, #4
 8003ff6:	697a      	ldr	r2, [r7, #20]
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	4a28      	ldr	r2, [pc, #160]	@ (80040a0 <TIM_OC2_SetConfig+0x100>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d003      	beq.n	800400c <TIM_OC2_SetConfig+0x6c>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	4a27      	ldr	r2, [pc, #156]	@ (80040a4 <TIM_OC2_SetConfig+0x104>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d10d      	bne.n	8004028 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004012:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	68db      	ldr	r3, [r3, #12]
 8004018:	011b      	lsls	r3, r3, #4
 800401a:	697a      	ldr	r2, [r7, #20]
 800401c:	4313      	orrs	r3, r2
 800401e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004020:	697b      	ldr	r3, [r7, #20]
 8004022:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004026:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	4a1d      	ldr	r2, [pc, #116]	@ (80040a0 <TIM_OC2_SetConfig+0x100>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d00f      	beq.n	8004050 <TIM_OC2_SetConfig+0xb0>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	4a1c      	ldr	r2, [pc, #112]	@ (80040a4 <TIM_OC2_SetConfig+0x104>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d00b      	beq.n	8004050 <TIM_OC2_SetConfig+0xb0>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	4a1b      	ldr	r2, [pc, #108]	@ (80040a8 <TIM_OC2_SetConfig+0x108>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d007      	beq.n	8004050 <TIM_OC2_SetConfig+0xb0>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	4a1a      	ldr	r2, [pc, #104]	@ (80040ac <TIM_OC2_SetConfig+0x10c>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d003      	beq.n	8004050 <TIM_OC2_SetConfig+0xb0>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	4a19      	ldr	r2, [pc, #100]	@ (80040b0 <TIM_OC2_SetConfig+0x110>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d113      	bne.n	8004078 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004050:	693b      	ldr	r3, [r7, #16]
 8004052:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004056:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004058:	693b      	ldr	r3, [r7, #16]
 800405a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800405e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	695b      	ldr	r3, [r3, #20]
 8004064:	009b      	lsls	r3, r3, #2
 8004066:	693a      	ldr	r2, [r7, #16]
 8004068:	4313      	orrs	r3, r2
 800406a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	699b      	ldr	r3, [r3, #24]
 8004070:	009b      	lsls	r3, r3, #2
 8004072:	693a      	ldr	r2, [r7, #16]
 8004074:	4313      	orrs	r3, r2
 8004076:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	693a      	ldr	r2, [r7, #16]
 800407c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	68fa      	ldr	r2, [r7, #12]
 8004082:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	685a      	ldr	r2, [r3, #4]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	697a      	ldr	r2, [r7, #20]
 8004090:	621a      	str	r2, [r3, #32]
}
 8004092:	bf00      	nop
 8004094:	371c      	adds	r7, #28
 8004096:	46bd      	mov	sp, r7
 8004098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409c:	4770      	bx	lr
 800409e:	bf00      	nop
 80040a0:	40012c00 	.word	0x40012c00
 80040a4:	40013400 	.word	0x40013400
 80040a8:	40014000 	.word	0x40014000
 80040ac:	40014400 	.word	0x40014400
 80040b0:	40014800 	.word	0x40014800

080040b4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b087      	sub	sp, #28
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
 80040bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6a1b      	ldr	r3, [r3, #32]
 80040c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6a1b      	ldr	r3, [r3, #32]
 80040c8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	69db      	ldr	r3, [r3, #28]
 80040da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80040e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80040e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	f023 0303 	bic.w	r3, r3, #3
 80040ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	68fa      	ldr	r2, [r7, #12]
 80040f6:	4313      	orrs	r3, r2
 80040f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004100:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	689b      	ldr	r3, [r3, #8]
 8004106:	021b      	lsls	r3, r3, #8
 8004108:	697a      	ldr	r2, [r7, #20]
 800410a:	4313      	orrs	r3, r2
 800410c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	4a27      	ldr	r2, [pc, #156]	@ (80041b0 <TIM_OC3_SetConfig+0xfc>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d003      	beq.n	800411e <TIM_OC3_SetConfig+0x6a>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	4a26      	ldr	r2, [pc, #152]	@ (80041b4 <TIM_OC3_SetConfig+0x100>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d10d      	bne.n	800413a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800411e:	697b      	ldr	r3, [r7, #20]
 8004120:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004124:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	68db      	ldr	r3, [r3, #12]
 800412a:	021b      	lsls	r3, r3, #8
 800412c:	697a      	ldr	r2, [r7, #20]
 800412e:	4313      	orrs	r3, r2
 8004130:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004132:	697b      	ldr	r3, [r7, #20]
 8004134:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004138:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	4a1c      	ldr	r2, [pc, #112]	@ (80041b0 <TIM_OC3_SetConfig+0xfc>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d00f      	beq.n	8004162 <TIM_OC3_SetConfig+0xae>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	4a1b      	ldr	r2, [pc, #108]	@ (80041b4 <TIM_OC3_SetConfig+0x100>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d00b      	beq.n	8004162 <TIM_OC3_SetConfig+0xae>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	4a1a      	ldr	r2, [pc, #104]	@ (80041b8 <TIM_OC3_SetConfig+0x104>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d007      	beq.n	8004162 <TIM_OC3_SetConfig+0xae>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	4a19      	ldr	r2, [pc, #100]	@ (80041bc <TIM_OC3_SetConfig+0x108>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d003      	beq.n	8004162 <TIM_OC3_SetConfig+0xae>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	4a18      	ldr	r2, [pc, #96]	@ (80041c0 <TIM_OC3_SetConfig+0x10c>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d113      	bne.n	800418a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004168:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800416a:	693b      	ldr	r3, [r7, #16]
 800416c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004170:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	695b      	ldr	r3, [r3, #20]
 8004176:	011b      	lsls	r3, r3, #4
 8004178:	693a      	ldr	r2, [r7, #16]
 800417a:	4313      	orrs	r3, r2
 800417c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	699b      	ldr	r3, [r3, #24]
 8004182:	011b      	lsls	r3, r3, #4
 8004184:	693a      	ldr	r2, [r7, #16]
 8004186:	4313      	orrs	r3, r2
 8004188:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	693a      	ldr	r2, [r7, #16]
 800418e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	68fa      	ldr	r2, [r7, #12]
 8004194:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	685a      	ldr	r2, [r3, #4]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	697a      	ldr	r2, [r7, #20]
 80041a2:	621a      	str	r2, [r3, #32]
}
 80041a4:	bf00      	nop
 80041a6:	371c      	adds	r7, #28
 80041a8:	46bd      	mov	sp, r7
 80041aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ae:	4770      	bx	lr
 80041b0:	40012c00 	.word	0x40012c00
 80041b4:	40013400 	.word	0x40013400
 80041b8:	40014000 	.word	0x40014000
 80041bc:	40014400 	.word	0x40014400
 80041c0:	40014800 	.word	0x40014800

080041c4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80041c4:	b480      	push	{r7}
 80041c6:	b087      	sub	sp, #28
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
 80041cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6a1b      	ldr	r3, [r3, #32]
 80041d2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6a1b      	ldr	r3, [r3, #32]
 80041d8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	69db      	ldr	r3, [r3, #28]
 80041ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80041f2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80041f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80041fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	021b      	lsls	r3, r3, #8
 8004206:	68fa      	ldr	r2, [r7, #12]
 8004208:	4313      	orrs	r3, r2
 800420a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004212:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	689b      	ldr	r3, [r3, #8]
 8004218:	031b      	lsls	r3, r3, #12
 800421a:	693a      	ldr	r2, [r7, #16]
 800421c:	4313      	orrs	r3, r2
 800421e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	4a18      	ldr	r2, [pc, #96]	@ (8004284 <TIM_OC4_SetConfig+0xc0>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d00f      	beq.n	8004248 <TIM_OC4_SetConfig+0x84>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	4a17      	ldr	r2, [pc, #92]	@ (8004288 <TIM_OC4_SetConfig+0xc4>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d00b      	beq.n	8004248 <TIM_OC4_SetConfig+0x84>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	4a16      	ldr	r2, [pc, #88]	@ (800428c <TIM_OC4_SetConfig+0xc8>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d007      	beq.n	8004248 <TIM_OC4_SetConfig+0x84>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	4a15      	ldr	r2, [pc, #84]	@ (8004290 <TIM_OC4_SetConfig+0xcc>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d003      	beq.n	8004248 <TIM_OC4_SetConfig+0x84>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	4a14      	ldr	r2, [pc, #80]	@ (8004294 <TIM_OC4_SetConfig+0xd0>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d109      	bne.n	800425c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800424e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	695b      	ldr	r3, [r3, #20]
 8004254:	019b      	lsls	r3, r3, #6
 8004256:	697a      	ldr	r2, [r7, #20]
 8004258:	4313      	orrs	r3, r2
 800425a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	697a      	ldr	r2, [r7, #20]
 8004260:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	68fa      	ldr	r2, [r7, #12]
 8004266:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	685a      	ldr	r2, [r3, #4]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	693a      	ldr	r2, [r7, #16]
 8004274:	621a      	str	r2, [r3, #32]
}
 8004276:	bf00      	nop
 8004278:	371c      	adds	r7, #28
 800427a:	46bd      	mov	sp, r7
 800427c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004280:	4770      	bx	lr
 8004282:	bf00      	nop
 8004284:	40012c00 	.word	0x40012c00
 8004288:	40013400 	.word	0x40013400
 800428c:	40014000 	.word	0x40014000
 8004290:	40014400 	.word	0x40014400
 8004294:	40014800 	.word	0x40014800

08004298 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004298:	b480      	push	{r7}
 800429a:	b087      	sub	sp, #28
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
 80042a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6a1b      	ldr	r3, [r3, #32]
 80042a6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6a1b      	ldr	r3, [r3, #32]
 80042ac:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80042c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80042ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	68fa      	ldr	r2, [r7, #12]
 80042d2:	4313      	orrs	r3, r2
 80042d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80042d6:	693b      	ldr	r3, [r7, #16]
 80042d8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80042dc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	689b      	ldr	r3, [r3, #8]
 80042e2:	041b      	lsls	r3, r3, #16
 80042e4:	693a      	ldr	r2, [r7, #16]
 80042e6:	4313      	orrs	r3, r2
 80042e8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	4a17      	ldr	r2, [pc, #92]	@ (800434c <TIM_OC5_SetConfig+0xb4>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d00f      	beq.n	8004312 <TIM_OC5_SetConfig+0x7a>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	4a16      	ldr	r2, [pc, #88]	@ (8004350 <TIM_OC5_SetConfig+0xb8>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d00b      	beq.n	8004312 <TIM_OC5_SetConfig+0x7a>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	4a15      	ldr	r2, [pc, #84]	@ (8004354 <TIM_OC5_SetConfig+0xbc>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d007      	beq.n	8004312 <TIM_OC5_SetConfig+0x7a>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	4a14      	ldr	r2, [pc, #80]	@ (8004358 <TIM_OC5_SetConfig+0xc0>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d003      	beq.n	8004312 <TIM_OC5_SetConfig+0x7a>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	4a13      	ldr	r2, [pc, #76]	@ (800435c <TIM_OC5_SetConfig+0xc4>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d109      	bne.n	8004326 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004312:	697b      	ldr	r3, [r7, #20]
 8004314:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004318:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	695b      	ldr	r3, [r3, #20]
 800431e:	021b      	lsls	r3, r3, #8
 8004320:	697a      	ldr	r2, [r7, #20]
 8004322:	4313      	orrs	r3, r2
 8004324:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	697a      	ldr	r2, [r7, #20]
 800432a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	68fa      	ldr	r2, [r7, #12]
 8004330:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	685a      	ldr	r2, [r3, #4]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	693a      	ldr	r2, [r7, #16]
 800433e:	621a      	str	r2, [r3, #32]
}
 8004340:	bf00      	nop
 8004342:	371c      	adds	r7, #28
 8004344:	46bd      	mov	sp, r7
 8004346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434a:	4770      	bx	lr
 800434c:	40012c00 	.word	0x40012c00
 8004350:	40013400 	.word	0x40013400
 8004354:	40014000 	.word	0x40014000
 8004358:	40014400 	.word	0x40014400
 800435c:	40014800 	.word	0x40014800

08004360 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004360:	b480      	push	{r7}
 8004362:	b087      	sub	sp, #28
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
 8004368:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6a1b      	ldr	r3, [r3, #32]
 800436e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6a1b      	ldr	r3, [r3, #32]
 8004374:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004386:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800438e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004392:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	021b      	lsls	r3, r3, #8
 800439a:	68fa      	ldr	r2, [r7, #12]
 800439c:	4313      	orrs	r3, r2
 800439e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80043a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	689b      	ldr	r3, [r3, #8]
 80043ac:	051b      	lsls	r3, r3, #20
 80043ae:	693a      	ldr	r2, [r7, #16]
 80043b0:	4313      	orrs	r3, r2
 80043b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	4a18      	ldr	r2, [pc, #96]	@ (8004418 <TIM_OC6_SetConfig+0xb8>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d00f      	beq.n	80043dc <TIM_OC6_SetConfig+0x7c>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	4a17      	ldr	r2, [pc, #92]	@ (800441c <TIM_OC6_SetConfig+0xbc>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d00b      	beq.n	80043dc <TIM_OC6_SetConfig+0x7c>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	4a16      	ldr	r2, [pc, #88]	@ (8004420 <TIM_OC6_SetConfig+0xc0>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d007      	beq.n	80043dc <TIM_OC6_SetConfig+0x7c>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	4a15      	ldr	r2, [pc, #84]	@ (8004424 <TIM_OC6_SetConfig+0xc4>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d003      	beq.n	80043dc <TIM_OC6_SetConfig+0x7c>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	4a14      	ldr	r2, [pc, #80]	@ (8004428 <TIM_OC6_SetConfig+0xc8>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d109      	bne.n	80043f0 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80043dc:	697b      	ldr	r3, [r7, #20]
 80043de:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80043e2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	695b      	ldr	r3, [r3, #20]
 80043e8:	029b      	lsls	r3, r3, #10
 80043ea:	697a      	ldr	r2, [r7, #20]
 80043ec:	4313      	orrs	r3, r2
 80043ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	697a      	ldr	r2, [r7, #20]
 80043f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	68fa      	ldr	r2, [r7, #12]
 80043fa:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	685a      	ldr	r2, [r3, #4]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	693a      	ldr	r2, [r7, #16]
 8004408:	621a      	str	r2, [r3, #32]
}
 800440a:	bf00      	nop
 800440c:	371c      	adds	r7, #28
 800440e:	46bd      	mov	sp, r7
 8004410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004414:	4770      	bx	lr
 8004416:	bf00      	nop
 8004418:	40012c00 	.word	0x40012c00
 800441c:	40013400 	.word	0x40013400
 8004420:	40014000 	.word	0x40014000
 8004424:	40014400 	.word	0x40014400
 8004428:	40014800 	.word	0x40014800

0800442c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800442c:	b480      	push	{r7}
 800442e:	b087      	sub	sp, #28
 8004430:	af00      	add	r7, sp, #0
 8004432:	60f8      	str	r0, [r7, #12]
 8004434:	60b9      	str	r1, [r7, #8]
 8004436:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	6a1b      	ldr	r3, [r3, #32]
 800443c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	6a1b      	ldr	r3, [r3, #32]
 8004442:	f023 0201 	bic.w	r2, r3, #1
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	699b      	ldr	r3, [r3, #24]
 800444e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004450:	693b      	ldr	r3, [r7, #16]
 8004452:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004456:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	011b      	lsls	r3, r3, #4
 800445c:	693a      	ldr	r2, [r7, #16]
 800445e:	4313      	orrs	r3, r2
 8004460:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004462:	697b      	ldr	r3, [r7, #20]
 8004464:	f023 030a 	bic.w	r3, r3, #10
 8004468:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800446a:	697a      	ldr	r2, [r7, #20]
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	4313      	orrs	r3, r2
 8004470:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	693a      	ldr	r2, [r7, #16]
 8004476:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	697a      	ldr	r2, [r7, #20]
 800447c:	621a      	str	r2, [r3, #32]
}
 800447e:	bf00      	nop
 8004480:	371c      	adds	r7, #28
 8004482:	46bd      	mov	sp, r7
 8004484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004488:	4770      	bx	lr

0800448a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800448a:	b480      	push	{r7}
 800448c:	b087      	sub	sp, #28
 800448e:	af00      	add	r7, sp, #0
 8004490:	60f8      	str	r0, [r7, #12]
 8004492:	60b9      	str	r1, [r7, #8]
 8004494:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	6a1b      	ldr	r3, [r3, #32]
 800449a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	6a1b      	ldr	r3, [r3, #32]
 80044a0:	f023 0210 	bic.w	r2, r3, #16
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	699b      	ldr	r3, [r3, #24]
 80044ac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80044b4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	031b      	lsls	r3, r3, #12
 80044ba:	693a      	ldr	r2, [r7, #16]
 80044bc:	4313      	orrs	r3, r2
 80044be:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80044c6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	011b      	lsls	r3, r3, #4
 80044cc:	697a      	ldr	r2, [r7, #20]
 80044ce:	4313      	orrs	r3, r2
 80044d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	693a      	ldr	r2, [r7, #16]
 80044d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	697a      	ldr	r2, [r7, #20]
 80044dc:	621a      	str	r2, [r3, #32]
}
 80044de:	bf00      	nop
 80044e0:	371c      	adds	r7, #28
 80044e2:	46bd      	mov	sp, r7
 80044e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e8:	4770      	bx	lr

080044ea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80044ea:	b480      	push	{r7}
 80044ec:	b085      	sub	sp, #20
 80044ee:	af00      	add	r7, sp, #0
 80044f0:	6078      	str	r0, [r7, #4]
 80044f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	689b      	ldr	r3, [r3, #8]
 80044f8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004500:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004502:	683a      	ldr	r2, [r7, #0]
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	4313      	orrs	r3, r2
 8004508:	f043 0307 	orr.w	r3, r3, #7
 800450c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	68fa      	ldr	r2, [r7, #12]
 8004512:	609a      	str	r2, [r3, #8]
}
 8004514:	bf00      	nop
 8004516:	3714      	adds	r7, #20
 8004518:	46bd      	mov	sp, r7
 800451a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451e:	4770      	bx	lr

08004520 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004520:	b480      	push	{r7}
 8004522:	b087      	sub	sp, #28
 8004524:	af00      	add	r7, sp, #0
 8004526:	60f8      	str	r0, [r7, #12]
 8004528:	60b9      	str	r1, [r7, #8]
 800452a:	607a      	str	r2, [r7, #4]
 800452c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	689b      	ldr	r3, [r3, #8]
 8004532:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004534:	697b      	ldr	r3, [r7, #20]
 8004536:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800453a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	021a      	lsls	r2, r3, #8
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	431a      	orrs	r2, r3
 8004544:	68bb      	ldr	r3, [r7, #8]
 8004546:	4313      	orrs	r3, r2
 8004548:	697a      	ldr	r2, [r7, #20]
 800454a:	4313      	orrs	r3, r2
 800454c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	697a      	ldr	r2, [r7, #20]
 8004552:	609a      	str	r2, [r3, #8]
}
 8004554:	bf00      	nop
 8004556:	371c      	adds	r7, #28
 8004558:	46bd      	mov	sp, r7
 800455a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455e:	4770      	bx	lr

08004560 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004560:	b480      	push	{r7}
 8004562:	b087      	sub	sp, #28
 8004564:	af00      	add	r7, sp, #0
 8004566:	60f8      	str	r0, [r7, #12]
 8004568:	60b9      	str	r1, [r7, #8]
 800456a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	f003 031f 	and.w	r3, r3, #31
 8004572:	2201      	movs	r2, #1
 8004574:	fa02 f303 	lsl.w	r3, r2, r3
 8004578:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	6a1a      	ldr	r2, [r3, #32]
 800457e:	697b      	ldr	r3, [r7, #20]
 8004580:	43db      	mvns	r3, r3
 8004582:	401a      	ands	r2, r3
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	6a1a      	ldr	r2, [r3, #32]
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	f003 031f 	and.w	r3, r3, #31
 8004592:	6879      	ldr	r1, [r7, #4]
 8004594:	fa01 f303 	lsl.w	r3, r1, r3
 8004598:	431a      	orrs	r2, r3
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	621a      	str	r2, [r3, #32]
}
 800459e:	bf00      	nop
 80045a0:	371c      	adds	r7, #28
 80045a2:	46bd      	mov	sp, r7
 80045a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a8:	4770      	bx	lr

080045aa <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80045aa:	b580      	push	{r7, lr}
 80045ac:	b082      	sub	sp, #8
 80045ae:	af00      	add	r7, sp, #0
 80045b0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d101      	bne.n	80045bc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80045b8:	2301      	movs	r3, #1
 80045ba:	e040      	b.n	800463e <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d106      	bne.n	80045d2 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2200      	movs	r2, #0
 80045c8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80045cc:	6878      	ldr	r0, [r7, #4]
 80045ce:	f7fc fcf5 	bl	8000fbc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2224      	movs	r2, #36	@ 0x24
 80045d6:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	681a      	ldr	r2, [r3, #0]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f022 0201 	bic.w	r2, r2, #1
 80045e6:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d002      	beq.n	80045f6 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80045f0:	6878      	ldr	r0, [r7, #4]
 80045f2:	f000 fae1 	bl	8004bb8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80045f6:	6878      	ldr	r0, [r7, #4]
 80045f8:	f000 f826 	bl	8004648 <UART_SetConfig>
 80045fc:	4603      	mov	r3, r0
 80045fe:	2b01      	cmp	r3, #1
 8004600:	d101      	bne.n	8004606 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004602:	2301      	movs	r3, #1
 8004604:	e01b      	b.n	800463e <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	685a      	ldr	r2, [r3, #4]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004614:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	689a      	ldr	r2, [r3, #8]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004624:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	681a      	ldr	r2, [r3, #0]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f042 0201 	orr.w	r2, r2, #1
 8004634:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004636:	6878      	ldr	r0, [r7, #4]
 8004638:	f000 fb60 	bl	8004cfc <UART_CheckIdleState>
 800463c:	4603      	mov	r3, r0
}
 800463e:	4618      	mov	r0, r3
 8004640:	3708      	adds	r7, #8
 8004642:	46bd      	mov	sp, r7
 8004644:	bd80      	pop	{r7, pc}
	...

08004648 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004648:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800464c:	b08a      	sub	sp, #40	@ 0x28
 800464e:	af00      	add	r7, sp, #0
 8004650:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004652:	2300      	movs	r3, #0
 8004654:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	689a      	ldr	r2, [r3, #8]
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	691b      	ldr	r3, [r3, #16]
 8004660:	431a      	orrs	r2, r3
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	695b      	ldr	r3, [r3, #20]
 8004666:	431a      	orrs	r2, r3
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	69db      	ldr	r3, [r3, #28]
 800466c:	4313      	orrs	r3, r2
 800466e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	681a      	ldr	r2, [r3, #0]
 8004676:	4ba4      	ldr	r3, [pc, #656]	@ (8004908 <UART_SetConfig+0x2c0>)
 8004678:	4013      	ands	r3, r2
 800467a:	68fa      	ldr	r2, [r7, #12]
 800467c:	6812      	ldr	r2, [r2, #0]
 800467e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004680:	430b      	orrs	r3, r1
 8004682:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	68da      	ldr	r2, [r3, #12]
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	430a      	orrs	r2, r1
 8004698:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	699b      	ldr	r3, [r3, #24]
 800469e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a99      	ldr	r2, [pc, #612]	@ (800490c <UART_SetConfig+0x2c4>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d004      	beq.n	80046b4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	6a1b      	ldr	r3, [r3, #32]
 80046ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046b0:	4313      	orrs	r3, r2
 80046b2:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	689b      	ldr	r3, [r3, #8]
 80046ba:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046c4:	430a      	orrs	r2, r1
 80046c6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a90      	ldr	r2, [pc, #576]	@ (8004910 <UART_SetConfig+0x2c8>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d126      	bne.n	8004720 <UART_SetConfig+0xd8>
 80046d2:	4b90      	ldr	r3, [pc, #576]	@ (8004914 <UART_SetConfig+0x2cc>)
 80046d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046d8:	f003 0303 	and.w	r3, r3, #3
 80046dc:	2b03      	cmp	r3, #3
 80046de:	d81b      	bhi.n	8004718 <UART_SetConfig+0xd0>
 80046e0:	a201      	add	r2, pc, #4	@ (adr r2, 80046e8 <UART_SetConfig+0xa0>)
 80046e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046e6:	bf00      	nop
 80046e8:	080046f9 	.word	0x080046f9
 80046ec:	08004709 	.word	0x08004709
 80046f0:	08004701 	.word	0x08004701
 80046f4:	08004711 	.word	0x08004711
 80046f8:	2301      	movs	r3, #1
 80046fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046fe:	e116      	b.n	800492e <UART_SetConfig+0x2e6>
 8004700:	2302      	movs	r3, #2
 8004702:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004706:	e112      	b.n	800492e <UART_SetConfig+0x2e6>
 8004708:	2304      	movs	r3, #4
 800470a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800470e:	e10e      	b.n	800492e <UART_SetConfig+0x2e6>
 8004710:	2308      	movs	r3, #8
 8004712:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004716:	e10a      	b.n	800492e <UART_SetConfig+0x2e6>
 8004718:	2310      	movs	r3, #16
 800471a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800471e:	e106      	b.n	800492e <UART_SetConfig+0x2e6>
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a7c      	ldr	r2, [pc, #496]	@ (8004918 <UART_SetConfig+0x2d0>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d138      	bne.n	800479c <UART_SetConfig+0x154>
 800472a:	4b7a      	ldr	r3, [pc, #488]	@ (8004914 <UART_SetConfig+0x2cc>)
 800472c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004730:	f003 030c 	and.w	r3, r3, #12
 8004734:	2b0c      	cmp	r3, #12
 8004736:	d82d      	bhi.n	8004794 <UART_SetConfig+0x14c>
 8004738:	a201      	add	r2, pc, #4	@ (adr r2, 8004740 <UART_SetConfig+0xf8>)
 800473a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800473e:	bf00      	nop
 8004740:	08004775 	.word	0x08004775
 8004744:	08004795 	.word	0x08004795
 8004748:	08004795 	.word	0x08004795
 800474c:	08004795 	.word	0x08004795
 8004750:	08004785 	.word	0x08004785
 8004754:	08004795 	.word	0x08004795
 8004758:	08004795 	.word	0x08004795
 800475c:	08004795 	.word	0x08004795
 8004760:	0800477d 	.word	0x0800477d
 8004764:	08004795 	.word	0x08004795
 8004768:	08004795 	.word	0x08004795
 800476c:	08004795 	.word	0x08004795
 8004770:	0800478d 	.word	0x0800478d
 8004774:	2300      	movs	r3, #0
 8004776:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800477a:	e0d8      	b.n	800492e <UART_SetConfig+0x2e6>
 800477c:	2302      	movs	r3, #2
 800477e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004782:	e0d4      	b.n	800492e <UART_SetConfig+0x2e6>
 8004784:	2304      	movs	r3, #4
 8004786:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800478a:	e0d0      	b.n	800492e <UART_SetConfig+0x2e6>
 800478c:	2308      	movs	r3, #8
 800478e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004792:	e0cc      	b.n	800492e <UART_SetConfig+0x2e6>
 8004794:	2310      	movs	r3, #16
 8004796:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800479a:	e0c8      	b.n	800492e <UART_SetConfig+0x2e6>
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a5e      	ldr	r2, [pc, #376]	@ (800491c <UART_SetConfig+0x2d4>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d125      	bne.n	80047f2 <UART_SetConfig+0x1aa>
 80047a6:	4b5b      	ldr	r3, [pc, #364]	@ (8004914 <UART_SetConfig+0x2cc>)
 80047a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047ac:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80047b0:	2b30      	cmp	r3, #48	@ 0x30
 80047b2:	d016      	beq.n	80047e2 <UART_SetConfig+0x19a>
 80047b4:	2b30      	cmp	r3, #48	@ 0x30
 80047b6:	d818      	bhi.n	80047ea <UART_SetConfig+0x1a2>
 80047b8:	2b20      	cmp	r3, #32
 80047ba:	d00a      	beq.n	80047d2 <UART_SetConfig+0x18a>
 80047bc:	2b20      	cmp	r3, #32
 80047be:	d814      	bhi.n	80047ea <UART_SetConfig+0x1a2>
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d002      	beq.n	80047ca <UART_SetConfig+0x182>
 80047c4:	2b10      	cmp	r3, #16
 80047c6:	d008      	beq.n	80047da <UART_SetConfig+0x192>
 80047c8:	e00f      	b.n	80047ea <UART_SetConfig+0x1a2>
 80047ca:	2300      	movs	r3, #0
 80047cc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80047d0:	e0ad      	b.n	800492e <UART_SetConfig+0x2e6>
 80047d2:	2302      	movs	r3, #2
 80047d4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80047d8:	e0a9      	b.n	800492e <UART_SetConfig+0x2e6>
 80047da:	2304      	movs	r3, #4
 80047dc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80047e0:	e0a5      	b.n	800492e <UART_SetConfig+0x2e6>
 80047e2:	2308      	movs	r3, #8
 80047e4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80047e8:	e0a1      	b.n	800492e <UART_SetConfig+0x2e6>
 80047ea:	2310      	movs	r3, #16
 80047ec:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80047f0:	e09d      	b.n	800492e <UART_SetConfig+0x2e6>
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a4a      	ldr	r2, [pc, #296]	@ (8004920 <UART_SetConfig+0x2d8>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d125      	bne.n	8004848 <UART_SetConfig+0x200>
 80047fc:	4b45      	ldr	r3, [pc, #276]	@ (8004914 <UART_SetConfig+0x2cc>)
 80047fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004802:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004806:	2bc0      	cmp	r3, #192	@ 0xc0
 8004808:	d016      	beq.n	8004838 <UART_SetConfig+0x1f0>
 800480a:	2bc0      	cmp	r3, #192	@ 0xc0
 800480c:	d818      	bhi.n	8004840 <UART_SetConfig+0x1f8>
 800480e:	2b80      	cmp	r3, #128	@ 0x80
 8004810:	d00a      	beq.n	8004828 <UART_SetConfig+0x1e0>
 8004812:	2b80      	cmp	r3, #128	@ 0x80
 8004814:	d814      	bhi.n	8004840 <UART_SetConfig+0x1f8>
 8004816:	2b00      	cmp	r3, #0
 8004818:	d002      	beq.n	8004820 <UART_SetConfig+0x1d8>
 800481a:	2b40      	cmp	r3, #64	@ 0x40
 800481c:	d008      	beq.n	8004830 <UART_SetConfig+0x1e8>
 800481e:	e00f      	b.n	8004840 <UART_SetConfig+0x1f8>
 8004820:	2300      	movs	r3, #0
 8004822:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004826:	e082      	b.n	800492e <UART_SetConfig+0x2e6>
 8004828:	2302      	movs	r3, #2
 800482a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800482e:	e07e      	b.n	800492e <UART_SetConfig+0x2e6>
 8004830:	2304      	movs	r3, #4
 8004832:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004836:	e07a      	b.n	800492e <UART_SetConfig+0x2e6>
 8004838:	2308      	movs	r3, #8
 800483a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800483e:	e076      	b.n	800492e <UART_SetConfig+0x2e6>
 8004840:	2310      	movs	r3, #16
 8004842:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004846:	e072      	b.n	800492e <UART_SetConfig+0x2e6>
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a35      	ldr	r2, [pc, #212]	@ (8004924 <UART_SetConfig+0x2dc>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d12a      	bne.n	80048a8 <UART_SetConfig+0x260>
 8004852:	4b30      	ldr	r3, [pc, #192]	@ (8004914 <UART_SetConfig+0x2cc>)
 8004854:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004858:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800485c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004860:	d01a      	beq.n	8004898 <UART_SetConfig+0x250>
 8004862:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004866:	d81b      	bhi.n	80048a0 <UART_SetConfig+0x258>
 8004868:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800486c:	d00c      	beq.n	8004888 <UART_SetConfig+0x240>
 800486e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004872:	d815      	bhi.n	80048a0 <UART_SetConfig+0x258>
 8004874:	2b00      	cmp	r3, #0
 8004876:	d003      	beq.n	8004880 <UART_SetConfig+0x238>
 8004878:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800487c:	d008      	beq.n	8004890 <UART_SetConfig+0x248>
 800487e:	e00f      	b.n	80048a0 <UART_SetConfig+0x258>
 8004880:	2300      	movs	r3, #0
 8004882:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004886:	e052      	b.n	800492e <UART_SetConfig+0x2e6>
 8004888:	2302      	movs	r3, #2
 800488a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800488e:	e04e      	b.n	800492e <UART_SetConfig+0x2e6>
 8004890:	2304      	movs	r3, #4
 8004892:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004896:	e04a      	b.n	800492e <UART_SetConfig+0x2e6>
 8004898:	2308      	movs	r3, #8
 800489a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800489e:	e046      	b.n	800492e <UART_SetConfig+0x2e6>
 80048a0:	2310      	movs	r3, #16
 80048a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80048a6:	e042      	b.n	800492e <UART_SetConfig+0x2e6>
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a17      	ldr	r2, [pc, #92]	@ (800490c <UART_SetConfig+0x2c4>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d13a      	bne.n	8004928 <UART_SetConfig+0x2e0>
 80048b2:	4b18      	ldr	r3, [pc, #96]	@ (8004914 <UART_SetConfig+0x2cc>)
 80048b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048b8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80048bc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80048c0:	d01a      	beq.n	80048f8 <UART_SetConfig+0x2b0>
 80048c2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80048c6:	d81b      	bhi.n	8004900 <UART_SetConfig+0x2b8>
 80048c8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80048cc:	d00c      	beq.n	80048e8 <UART_SetConfig+0x2a0>
 80048ce:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80048d2:	d815      	bhi.n	8004900 <UART_SetConfig+0x2b8>
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d003      	beq.n	80048e0 <UART_SetConfig+0x298>
 80048d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80048dc:	d008      	beq.n	80048f0 <UART_SetConfig+0x2a8>
 80048de:	e00f      	b.n	8004900 <UART_SetConfig+0x2b8>
 80048e0:	2300      	movs	r3, #0
 80048e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80048e6:	e022      	b.n	800492e <UART_SetConfig+0x2e6>
 80048e8:	2302      	movs	r3, #2
 80048ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80048ee:	e01e      	b.n	800492e <UART_SetConfig+0x2e6>
 80048f0:	2304      	movs	r3, #4
 80048f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80048f6:	e01a      	b.n	800492e <UART_SetConfig+0x2e6>
 80048f8:	2308      	movs	r3, #8
 80048fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80048fe:	e016      	b.n	800492e <UART_SetConfig+0x2e6>
 8004900:	2310      	movs	r3, #16
 8004902:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004906:	e012      	b.n	800492e <UART_SetConfig+0x2e6>
 8004908:	efff69f3 	.word	0xefff69f3
 800490c:	40008000 	.word	0x40008000
 8004910:	40013800 	.word	0x40013800
 8004914:	40021000 	.word	0x40021000
 8004918:	40004400 	.word	0x40004400
 800491c:	40004800 	.word	0x40004800
 8004920:	40004c00 	.word	0x40004c00
 8004924:	40005000 	.word	0x40005000
 8004928:	2310      	movs	r3, #16
 800492a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4a9f      	ldr	r2, [pc, #636]	@ (8004bb0 <UART_SetConfig+0x568>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d17a      	bne.n	8004a2e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004938:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800493c:	2b08      	cmp	r3, #8
 800493e:	d824      	bhi.n	800498a <UART_SetConfig+0x342>
 8004940:	a201      	add	r2, pc, #4	@ (adr r2, 8004948 <UART_SetConfig+0x300>)
 8004942:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004946:	bf00      	nop
 8004948:	0800496d 	.word	0x0800496d
 800494c:	0800498b 	.word	0x0800498b
 8004950:	08004975 	.word	0x08004975
 8004954:	0800498b 	.word	0x0800498b
 8004958:	0800497b 	.word	0x0800497b
 800495c:	0800498b 	.word	0x0800498b
 8004960:	0800498b 	.word	0x0800498b
 8004964:	0800498b 	.word	0x0800498b
 8004968:	08004983 	.word	0x08004983
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800496c:	f7fd ff56 	bl	800281c <HAL_RCC_GetPCLK1Freq>
 8004970:	61f8      	str	r0, [r7, #28]
        break;
 8004972:	e010      	b.n	8004996 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004974:	4b8f      	ldr	r3, [pc, #572]	@ (8004bb4 <UART_SetConfig+0x56c>)
 8004976:	61fb      	str	r3, [r7, #28]
        break;
 8004978:	e00d      	b.n	8004996 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800497a:	f7fd feb7 	bl	80026ec <HAL_RCC_GetSysClockFreq>
 800497e:	61f8      	str	r0, [r7, #28]
        break;
 8004980:	e009      	b.n	8004996 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004982:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004986:	61fb      	str	r3, [r7, #28]
        break;
 8004988:	e005      	b.n	8004996 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800498a:	2300      	movs	r3, #0
 800498c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800498e:	2301      	movs	r3, #1
 8004990:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004994:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004996:	69fb      	ldr	r3, [r7, #28]
 8004998:	2b00      	cmp	r3, #0
 800499a:	f000 80fb 	beq.w	8004b94 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	685a      	ldr	r2, [r3, #4]
 80049a2:	4613      	mov	r3, r2
 80049a4:	005b      	lsls	r3, r3, #1
 80049a6:	4413      	add	r3, r2
 80049a8:	69fa      	ldr	r2, [r7, #28]
 80049aa:	429a      	cmp	r2, r3
 80049ac:	d305      	bcc.n	80049ba <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80049b4:	69fa      	ldr	r2, [r7, #28]
 80049b6:	429a      	cmp	r2, r3
 80049b8:	d903      	bls.n	80049c2 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80049ba:	2301      	movs	r3, #1
 80049bc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80049c0:	e0e8      	b.n	8004b94 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80049c2:	69fb      	ldr	r3, [r7, #28]
 80049c4:	2200      	movs	r2, #0
 80049c6:	461c      	mov	r4, r3
 80049c8:	4615      	mov	r5, r2
 80049ca:	f04f 0200 	mov.w	r2, #0
 80049ce:	f04f 0300 	mov.w	r3, #0
 80049d2:	022b      	lsls	r3, r5, #8
 80049d4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80049d8:	0222      	lsls	r2, r4, #8
 80049da:	68f9      	ldr	r1, [r7, #12]
 80049dc:	6849      	ldr	r1, [r1, #4]
 80049de:	0849      	lsrs	r1, r1, #1
 80049e0:	2000      	movs	r0, #0
 80049e2:	4688      	mov	r8, r1
 80049e4:	4681      	mov	r9, r0
 80049e6:	eb12 0a08 	adds.w	sl, r2, r8
 80049ea:	eb43 0b09 	adc.w	fp, r3, r9
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	2200      	movs	r2, #0
 80049f4:	603b      	str	r3, [r7, #0]
 80049f6:	607a      	str	r2, [r7, #4]
 80049f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80049fc:	4650      	mov	r0, sl
 80049fe:	4659      	mov	r1, fp
 8004a00:	f7fb ff38 	bl	8000874 <__aeabi_uldivmod>
 8004a04:	4602      	mov	r2, r0
 8004a06:	460b      	mov	r3, r1
 8004a08:	4613      	mov	r3, r2
 8004a0a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004a0c:	69bb      	ldr	r3, [r7, #24]
 8004a0e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004a12:	d308      	bcc.n	8004a26 <UART_SetConfig+0x3de>
 8004a14:	69bb      	ldr	r3, [r7, #24]
 8004a16:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004a1a:	d204      	bcs.n	8004a26 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	69ba      	ldr	r2, [r7, #24]
 8004a22:	60da      	str	r2, [r3, #12]
 8004a24:	e0b6      	b.n	8004b94 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004a26:	2301      	movs	r3, #1
 8004a28:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004a2c:	e0b2      	b.n	8004b94 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	69db      	ldr	r3, [r3, #28]
 8004a32:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a36:	d15e      	bne.n	8004af6 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004a38:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004a3c:	2b08      	cmp	r3, #8
 8004a3e:	d828      	bhi.n	8004a92 <UART_SetConfig+0x44a>
 8004a40:	a201      	add	r2, pc, #4	@ (adr r2, 8004a48 <UART_SetConfig+0x400>)
 8004a42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a46:	bf00      	nop
 8004a48:	08004a6d 	.word	0x08004a6d
 8004a4c:	08004a75 	.word	0x08004a75
 8004a50:	08004a7d 	.word	0x08004a7d
 8004a54:	08004a93 	.word	0x08004a93
 8004a58:	08004a83 	.word	0x08004a83
 8004a5c:	08004a93 	.word	0x08004a93
 8004a60:	08004a93 	.word	0x08004a93
 8004a64:	08004a93 	.word	0x08004a93
 8004a68:	08004a8b 	.word	0x08004a8b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a6c:	f7fd fed6 	bl	800281c <HAL_RCC_GetPCLK1Freq>
 8004a70:	61f8      	str	r0, [r7, #28]
        break;
 8004a72:	e014      	b.n	8004a9e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a74:	f7fd fee8 	bl	8002848 <HAL_RCC_GetPCLK2Freq>
 8004a78:	61f8      	str	r0, [r7, #28]
        break;
 8004a7a:	e010      	b.n	8004a9e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a7c:	4b4d      	ldr	r3, [pc, #308]	@ (8004bb4 <UART_SetConfig+0x56c>)
 8004a7e:	61fb      	str	r3, [r7, #28]
        break;
 8004a80:	e00d      	b.n	8004a9e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a82:	f7fd fe33 	bl	80026ec <HAL_RCC_GetSysClockFreq>
 8004a86:	61f8      	str	r0, [r7, #28]
        break;
 8004a88:	e009      	b.n	8004a9e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a8a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004a8e:	61fb      	str	r3, [r7, #28]
        break;
 8004a90:	e005      	b.n	8004a9e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004a92:	2300      	movs	r3, #0
 8004a94:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004a96:	2301      	movs	r3, #1
 8004a98:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004a9c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004a9e:	69fb      	ldr	r3, [r7, #28]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d077      	beq.n	8004b94 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004aa4:	69fb      	ldr	r3, [r7, #28]
 8004aa6:	005a      	lsls	r2, r3, #1
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	085b      	lsrs	r3, r3, #1
 8004aae:	441a      	add	r2, r3
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	685b      	ldr	r3, [r3, #4]
 8004ab4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ab8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004aba:	69bb      	ldr	r3, [r7, #24]
 8004abc:	2b0f      	cmp	r3, #15
 8004abe:	d916      	bls.n	8004aee <UART_SetConfig+0x4a6>
 8004ac0:	69bb      	ldr	r3, [r7, #24]
 8004ac2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ac6:	d212      	bcs.n	8004aee <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004ac8:	69bb      	ldr	r3, [r7, #24]
 8004aca:	b29b      	uxth	r3, r3
 8004acc:	f023 030f 	bic.w	r3, r3, #15
 8004ad0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004ad2:	69bb      	ldr	r3, [r7, #24]
 8004ad4:	085b      	lsrs	r3, r3, #1
 8004ad6:	b29b      	uxth	r3, r3
 8004ad8:	f003 0307 	and.w	r3, r3, #7
 8004adc:	b29a      	uxth	r2, r3
 8004ade:	8afb      	ldrh	r3, [r7, #22]
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	8afa      	ldrh	r2, [r7, #22]
 8004aea:	60da      	str	r2, [r3, #12]
 8004aec:	e052      	b.n	8004b94 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004aee:	2301      	movs	r3, #1
 8004af0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004af4:	e04e      	b.n	8004b94 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004af6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004afa:	2b08      	cmp	r3, #8
 8004afc:	d827      	bhi.n	8004b4e <UART_SetConfig+0x506>
 8004afe:	a201      	add	r2, pc, #4	@ (adr r2, 8004b04 <UART_SetConfig+0x4bc>)
 8004b00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b04:	08004b29 	.word	0x08004b29
 8004b08:	08004b31 	.word	0x08004b31
 8004b0c:	08004b39 	.word	0x08004b39
 8004b10:	08004b4f 	.word	0x08004b4f
 8004b14:	08004b3f 	.word	0x08004b3f
 8004b18:	08004b4f 	.word	0x08004b4f
 8004b1c:	08004b4f 	.word	0x08004b4f
 8004b20:	08004b4f 	.word	0x08004b4f
 8004b24:	08004b47 	.word	0x08004b47
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b28:	f7fd fe78 	bl	800281c <HAL_RCC_GetPCLK1Freq>
 8004b2c:	61f8      	str	r0, [r7, #28]
        break;
 8004b2e:	e014      	b.n	8004b5a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b30:	f7fd fe8a 	bl	8002848 <HAL_RCC_GetPCLK2Freq>
 8004b34:	61f8      	str	r0, [r7, #28]
        break;
 8004b36:	e010      	b.n	8004b5a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b38:	4b1e      	ldr	r3, [pc, #120]	@ (8004bb4 <UART_SetConfig+0x56c>)
 8004b3a:	61fb      	str	r3, [r7, #28]
        break;
 8004b3c:	e00d      	b.n	8004b5a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b3e:	f7fd fdd5 	bl	80026ec <HAL_RCC_GetSysClockFreq>
 8004b42:	61f8      	str	r0, [r7, #28]
        break;
 8004b44:	e009      	b.n	8004b5a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b46:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004b4a:	61fb      	str	r3, [r7, #28]
        break;
 8004b4c:	e005      	b.n	8004b5a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004b4e:	2300      	movs	r3, #0
 8004b50:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004b52:	2301      	movs	r3, #1
 8004b54:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004b58:	bf00      	nop
    }

    if (pclk != 0U)
 8004b5a:	69fb      	ldr	r3, [r7, #28]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d019      	beq.n	8004b94 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	085a      	lsrs	r2, r3, #1
 8004b66:	69fb      	ldr	r3, [r7, #28]
 8004b68:	441a      	add	r2, r3
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	685b      	ldr	r3, [r3, #4]
 8004b6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b72:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b74:	69bb      	ldr	r3, [r7, #24]
 8004b76:	2b0f      	cmp	r3, #15
 8004b78:	d909      	bls.n	8004b8e <UART_SetConfig+0x546>
 8004b7a:	69bb      	ldr	r3, [r7, #24]
 8004b7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b80:	d205      	bcs.n	8004b8e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004b82:	69bb      	ldr	r3, [r7, #24]
 8004b84:	b29a      	uxth	r2, r3
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	60da      	str	r2, [r3, #12]
 8004b8c:	e002      	b.n	8004b94 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	2200      	movs	r2, #0
 8004b98:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004ba0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	3728      	adds	r7, #40	@ 0x28
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004bae:	bf00      	nop
 8004bb0:	40008000 	.word	0x40008000
 8004bb4:	00f42400 	.word	0x00f42400

08004bb8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b083      	sub	sp, #12
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bc4:	f003 0308 	and.w	r3, r3, #8
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d00a      	beq.n	8004be2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	430a      	orrs	r2, r1
 8004be0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004be6:	f003 0301 	and.w	r3, r3, #1
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d00a      	beq.n	8004c04 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	430a      	orrs	r2, r1
 8004c02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c08:	f003 0302 	and.w	r3, r3, #2
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d00a      	beq.n	8004c26 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	430a      	orrs	r2, r1
 8004c24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c2a:	f003 0304 	and.w	r3, r3, #4
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d00a      	beq.n	8004c48 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	430a      	orrs	r2, r1
 8004c46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c4c:	f003 0310 	and.w	r3, r3, #16
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d00a      	beq.n	8004c6a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	689b      	ldr	r3, [r3, #8]
 8004c5a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	430a      	orrs	r2, r1
 8004c68:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c6e:	f003 0320 	and.w	r3, r3, #32
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d00a      	beq.n	8004c8c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	689b      	ldr	r3, [r3, #8]
 8004c7c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	430a      	orrs	r2, r1
 8004c8a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d01a      	beq.n	8004cce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	685b      	ldr	r3, [r3, #4]
 8004c9e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	430a      	orrs	r2, r1
 8004cac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cb2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004cb6:	d10a      	bne.n	8004cce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	430a      	orrs	r2, r1
 8004ccc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d00a      	beq.n	8004cf0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	430a      	orrs	r2, r1
 8004cee:	605a      	str	r2, [r3, #4]
  }
}
 8004cf0:	bf00      	nop
 8004cf2:	370c      	adds	r7, #12
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfa:	4770      	bx	lr

08004cfc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b098      	sub	sp, #96	@ 0x60
 8004d00:	af02      	add	r7, sp, #8
 8004d02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2200      	movs	r2, #0
 8004d08:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004d0c:	f7fc fa9e 	bl	800124c <HAL_GetTick>
 8004d10:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f003 0308 	and.w	r3, r3, #8
 8004d1c:	2b08      	cmp	r3, #8
 8004d1e:	d12e      	bne.n	8004d7e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d20:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004d24:	9300      	str	r3, [sp, #0]
 8004d26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d28:	2200      	movs	r2, #0
 8004d2a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004d2e:	6878      	ldr	r0, [r7, #4]
 8004d30:	f000 f88c 	bl	8004e4c <UART_WaitOnFlagUntilTimeout>
 8004d34:	4603      	mov	r3, r0
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d021      	beq.n	8004d7e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d42:	e853 3f00 	ldrex	r3, [r3]
 8004d46:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004d48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d4a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004d4e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	461a      	mov	r2, r3
 8004d56:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004d58:	647b      	str	r3, [r7, #68]	@ 0x44
 8004d5a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d5c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004d5e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004d60:	e841 2300 	strex	r3, r2, [r1]
 8004d64:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004d66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d1e6      	bne.n	8004d3a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2220      	movs	r2, #32
 8004d70:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2200      	movs	r2, #0
 8004d76:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d7a:	2303      	movs	r3, #3
 8004d7c:	e062      	b.n	8004e44 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f003 0304 	and.w	r3, r3, #4
 8004d88:	2b04      	cmp	r3, #4
 8004d8a:	d149      	bne.n	8004e20 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d8c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004d90:	9300      	str	r3, [sp, #0]
 8004d92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d94:	2200      	movs	r2, #0
 8004d96:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004d9a:	6878      	ldr	r0, [r7, #4]
 8004d9c:	f000 f856 	bl	8004e4c <UART_WaitOnFlagUntilTimeout>
 8004da0:	4603      	mov	r3, r0
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d03c      	beq.n	8004e20 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dae:	e853 3f00 	ldrex	r3, [r3]
 8004db2:	623b      	str	r3, [r7, #32]
   return(result);
 8004db4:	6a3b      	ldr	r3, [r7, #32]
 8004db6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004dba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	461a      	mov	r2, r3
 8004dc2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004dc4:	633b      	str	r3, [r7, #48]	@ 0x30
 8004dc6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dc8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004dca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004dcc:	e841 2300 	strex	r3, r2, [r1]
 8004dd0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004dd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d1e6      	bne.n	8004da6 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	3308      	adds	r3, #8
 8004dde:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004de0:	693b      	ldr	r3, [r7, #16]
 8004de2:	e853 3f00 	ldrex	r3, [r3]
 8004de6:	60fb      	str	r3, [r7, #12]
   return(result);
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	f023 0301 	bic.w	r3, r3, #1
 8004dee:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	3308      	adds	r3, #8
 8004df6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004df8:	61fa      	str	r2, [r7, #28]
 8004dfa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dfc:	69b9      	ldr	r1, [r7, #24]
 8004dfe:	69fa      	ldr	r2, [r7, #28]
 8004e00:	e841 2300 	strex	r3, r2, [r1]
 8004e04:	617b      	str	r3, [r7, #20]
   return(result);
 8004e06:	697b      	ldr	r3, [r7, #20]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d1e5      	bne.n	8004dd8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2220      	movs	r2, #32
 8004e10:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2200      	movs	r2, #0
 8004e18:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e1c:	2303      	movs	r3, #3
 8004e1e:	e011      	b.n	8004e44 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2220      	movs	r2, #32
 8004e24:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2220      	movs	r2, #32
 8004e2a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2200      	movs	r2, #0
 8004e32:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2200      	movs	r2, #0
 8004e38:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004e42:	2300      	movs	r3, #0
}
 8004e44:	4618      	mov	r0, r3
 8004e46:	3758      	adds	r7, #88	@ 0x58
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	bd80      	pop	{r7, pc}

08004e4c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b084      	sub	sp, #16
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	60f8      	str	r0, [r7, #12]
 8004e54:	60b9      	str	r1, [r7, #8]
 8004e56:	603b      	str	r3, [r7, #0]
 8004e58:	4613      	mov	r3, r2
 8004e5a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e5c:	e04f      	b.n	8004efe <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e5e:	69bb      	ldr	r3, [r7, #24]
 8004e60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e64:	d04b      	beq.n	8004efe <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e66:	f7fc f9f1 	bl	800124c <HAL_GetTick>
 8004e6a:	4602      	mov	r2, r0
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	1ad3      	subs	r3, r2, r3
 8004e70:	69ba      	ldr	r2, [r7, #24]
 8004e72:	429a      	cmp	r2, r3
 8004e74:	d302      	bcc.n	8004e7c <UART_WaitOnFlagUntilTimeout+0x30>
 8004e76:	69bb      	ldr	r3, [r7, #24]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d101      	bne.n	8004e80 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004e7c:	2303      	movs	r3, #3
 8004e7e:	e04e      	b.n	8004f1e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f003 0304 	and.w	r3, r3, #4
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d037      	beq.n	8004efe <UART_WaitOnFlagUntilTimeout+0xb2>
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	2b80      	cmp	r3, #128	@ 0x80
 8004e92:	d034      	beq.n	8004efe <UART_WaitOnFlagUntilTimeout+0xb2>
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	2b40      	cmp	r3, #64	@ 0x40
 8004e98:	d031      	beq.n	8004efe <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	69db      	ldr	r3, [r3, #28]
 8004ea0:	f003 0308 	and.w	r3, r3, #8
 8004ea4:	2b08      	cmp	r3, #8
 8004ea6:	d110      	bne.n	8004eca <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	2208      	movs	r2, #8
 8004eae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004eb0:	68f8      	ldr	r0, [r7, #12]
 8004eb2:	f000 f838 	bl	8004f26 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	2208      	movs	r2, #8
 8004eba:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	e029      	b.n	8004f1e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	69db      	ldr	r3, [r3, #28]
 8004ed0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004ed4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004ed8:	d111      	bne.n	8004efe <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004ee2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004ee4:	68f8      	ldr	r0, [r7, #12]
 8004ee6:	f000 f81e 	bl	8004f26 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	2220      	movs	r2, #32
 8004eee:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004efa:	2303      	movs	r3, #3
 8004efc:	e00f      	b.n	8004f1e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	69da      	ldr	r2, [r3, #28]
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	4013      	ands	r3, r2
 8004f08:	68ba      	ldr	r2, [r7, #8]
 8004f0a:	429a      	cmp	r2, r3
 8004f0c:	bf0c      	ite	eq
 8004f0e:	2301      	moveq	r3, #1
 8004f10:	2300      	movne	r3, #0
 8004f12:	b2db      	uxtb	r3, r3
 8004f14:	461a      	mov	r2, r3
 8004f16:	79fb      	ldrb	r3, [r7, #7]
 8004f18:	429a      	cmp	r2, r3
 8004f1a:	d0a0      	beq.n	8004e5e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004f1c:	2300      	movs	r3, #0
}
 8004f1e:	4618      	mov	r0, r3
 8004f20:	3710      	adds	r7, #16
 8004f22:	46bd      	mov	sp, r7
 8004f24:	bd80      	pop	{r7, pc}

08004f26 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004f26:	b480      	push	{r7}
 8004f28:	b095      	sub	sp, #84	@ 0x54
 8004f2a:	af00      	add	r7, sp, #0
 8004f2c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f36:	e853 3f00 	ldrex	r3, [r3]
 8004f3a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004f3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f3e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004f42:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	461a      	mov	r2, r3
 8004f4a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004f4c:	643b      	str	r3, [r7, #64]	@ 0x40
 8004f4e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f50:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004f52:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004f54:	e841 2300 	strex	r3, r2, [r1]
 8004f58:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004f5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d1e6      	bne.n	8004f2e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	3308      	adds	r3, #8
 8004f66:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f68:	6a3b      	ldr	r3, [r7, #32]
 8004f6a:	e853 3f00 	ldrex	r3, [r3]
 8004f6e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004f70:	69fb      	ldr	r3, [r7, #28]
 8004f72:	f023 0301 	bic.w	r3, r3, #1
 8004f76:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	3308      	adds	r3, #8
 8004f7e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004f80:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004f82:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f84:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004f86:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004f88:	e841 2300 	strex	r3, r2, [r1]
 8004f8c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d1e5      	bne.n	8004f60 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f98:	2b01      	cmp	r3, #1
 8004f9a:	d118      	bne.n	8004fce <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	e853 3f00 	ldrex	r3, [r3]
 8004fa8:	60bb      	str	r3, [r7, #8]
   return(result);
 8004faa:	68bb      	ldr	r3, [r7, #8]
 8004fac:	f023 0310 	bic.w	r3, r3, #16
 8004fb0:	647b      	str	r3, [r7, #68]	@ 0x44
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	461a      	mov	r2, r3
 8004fb8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004fba:	61bb      	str	r3, [r7, #24]
 8004fbc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fbe:	6979      	ldr	r1, [r7, #20]
 8004fc0:	69ba      	ldr	r2, [r7, #24]
 8004fc2:	e841 2300 	strex	r3, r2, [r1]
 8004fc6:	613b      	str	r3, [r7, #16]
   return(result);
 8004fc8:	693b      	ldr	r3, [r7, #16]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d1e6      	bne.n	8004f9c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2220      	movs	r2, #32
 8004fd2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004fe2:	bf00      	nop
 8004fe4:	3754      	adds	r7, #84	@ 0x54
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fec:	4770      	bx	lr

08004fee <memset>:
 8004fee:	4402      	add	r2, r0
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d100      	bne.n	8004ff8 <memset+0xa>
 8004ff6:	4770      	bx	lr
 8004ff8:	f803 1b01 	strb.w	r1, [r3], #1
 8004ffc:	e7f9      	b.n	8004ff2 <memset+0x4>
	...

08005000 <__libc_init_array>:
 8005000:	b570      	push	{r4, r5, r6, lr}
 8005002:	4d0d      	ldr	r5, [pc, #52]	@ (8005038 <__libc_init_array+0x38>)
 8005004:	4c0d      	ldr	r4, [pc, #52]	@ (800503c <__libc_init_array+0x3c>)
 8005006:	1b64      	subs	r4, r4, r5
 8005008:	10a4      	asrs	r4, r4, #2
 800500a:	2600      	movs	r6, #0
 800500c:	42a6      	cmp	r6, r4
 800500e:	d109      	bne.n	8005024 <__libc_init_array+0x24>
 8005010:	4d0b      	ldr	r5, [pc, #44]	@ (8005040 <__libc_init_array+0x40>)
 8005012:	4c0c      	ldr	r4, [pc, #48]	@ (8005044 <__libc_init_array+0x44>)
 8005014:	f000 fdde 	bl	8005bd4 <_init>
 8005018:	1b64      	subs	r4, r4, r5
 800501a:	10a4      	asrs	r4, r4, #2
 800501c:	2600      	movs	r6, #0
 800501e:	42a6      	cmp	r6, r4
 8005020:	d105      	bne.n	800502e <__libc_init_array+0x2e>
 8005022:	bd70      	pop	{r4, r5, r6, pc}
 8005024:	f855 3b04 	ldr.w	r3, [r5], #4
 8005028:	4798      	blx	r3
 800502a:	3601      	adds	r6, #1
 800502c:	e7ee      	b.n	800500c <__libc_init_array+0xc>
 800502e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005032:	4798      	blx	r3
 8005034:	3601      	adds	r6, #1
 8005036:	e7f2      	b.n	800501e <__libc_init_array+0x1e>
 8005038:	08006020 	.word	0x08006020
 800503c:	08006020 	.word	0x08006020
 8005040:	08006020 	.word	0x08006020
 8005044:	08006024 	.word	0x08006024

08005048 <sinf>:
 8005048:	ee10 3a10 	vmov	r3, s0
 800504c:	b507      	push	{r0, r1, r2, lr}
 800504e:	4a1f      	ldr	r2, [pc, #124]	@ (80050cc <sinf+0x84>)
 8005050:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005054:	4293      	cmp	r3, r2
 8005056:	d807      	bhi.n	8005068 <sinf+0x20>
 8005058:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 80050d0 <sinf+0x88>
 800505c:	2000      	movs	r0, #0
 800505e:	b003      	add	sp, #12
 8005060:	f85d eb04 	ldr.w	lr, [sp], #4
 8005064:	f000 b91a 	b.w	800529c <__kernel_sinf>
 8005068:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800506c:	d304      	bcc.n	8005078 <sinf+0x30>
 800506e:	ee30 0a40 	vsub.f32	s0, s0, s0
 8005072:	b003      	add	sp, #12
 8005074:	f85d fb04 	ldr.w	pc, [sp], #4
 8005078:	4668      	mov	r0, sp
 800507a:	f000 f957 	bl	800532c <__ieee754_rem_pio2f>
 800507e:	f000 0003 	and.w	r0, r0, #3
 8005082:	2801      	cmp	r0, #1
 8005084:	d00a      	beq.n	800509c <sinf+0x54>
 8005086:	2802      	cmp	r0, #2
 8005088:	d00f      	beq.n	80050aa <sinf+0x62>
 800508a:	b9c0      	cbnz	r0, 80050be <sinf+0x76>
 800508c:	eddd 0a01 	vldr	s1, [sp, #4]
 8005090:	ed9d 0a00 	vldr	s0, [sp]
 8005094:	2001      	movs	r0, #1
 8005096:	f000 f901 	bl	800529c <__kernel_sinf>
 800509a:	e7ea      	b.n	8005072 <sinf+0x2a>
 800509c:	eddd 0a01 	vldr	s1, [sp, #4]
 80050a0:	ed9d 0a00 	vldr	s0, [sp]
 80050a4:	f000 f8a2 	bl	80051ec <__kernel_cosf>
 80050a8:	e7e3      	b.n	8005072 <sinf+0x2a>
 80050aa:	eddd 0a01 	vldr	s1, [sp, #4]
 80050ae:	ed9d 0a00 	vldr	s0, [sp]
 80050b2:	2001      	movs	r0, #1
 80050b4:	f000 f8f2 	bl	800529c <__kernel_sinf>
 80050b8:	eeb1 0a40 	vneg.f32	s0, s0
 80050bc:	e7d9      	b.n	8005072 <sinf+0x2a>
 80050be:	eddd 0a01 	vldr	s1, [sp, #4]
 80050c2:	ed9d 0a00 	vldr	s0, [sp]
 80050c6:	f000 f891 	bl	80051ec <__kernel_cosf>
 80050ca:	e7f5      	b.n	80050b8 <sinf+0x70>
 80050cc:	3f490fd8 	.word	0x3f490fd8
 80050d0:	00000000 	.word	0x00000000

080050d4 <rint>:
 80050d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80050d6:	ec53 2b10 	vmov	r2, r3, d0
 80050da:	f3c3 500a 	ubfx	r0, r3, #20, #11
 80050de:	f2a0 35ff 	subw	r5, r0, #1023	@ 0x3ff
 80050e2:	2d13      	cmp	r5, #19
 80050e4:	461c      	mov	r4, r3
 80050e6:	4611      	mov	r1, r2
 80050e8:	ea4f 76d3 	mov.w	r6, r3, lsr #31
 80050ec:	dc5b      	bgt.n	80051a6 <rint+0xd2>
 80050ee:	2d00      	cmp	r5, #0
 80050f0:	da2f      	bge.n	8005152 <rint+0x7e>
 80050f2:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 80050f6:	4310      	orrs	r0, r2
 80050f8:	d027      	beq.n	800514a <rint+0x76>
 80050fa:	f3c3 0513 	ubfx	r5, r3, #0, #20
 80050fe:	4315      	orrs	r5, r2
 8005100:	426b      	negs	r3, r5
 8005102:	432b      	orrs	r3, r5
 8005104:	4610      	mov	r0, r2
 8005106:	0b1b      	lsrs	r3, r3, #12
 8005108:	0c62      	lsrs	r2, r4, #17
 800510a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800510e:	0452      	lsls	r2, r2, #17
 8005110:	ea43 0102 	orr.w	r1, r3, r2
 8005114:	460b      	mov	r3, r1
 8005116:	4933      	ldr	r1, [pc, #204]	@ (80051e4 <rint+0x110>)
 8005118:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800511c:	e9d1 6700 	ldrd	r6, r7, [r1]
 8005120:	4602      	mov	r2, r0
 8005122:	4639      	mov	r1, r7
 8005124:	4630      	mov	r0, r6
 8005126:	f7fb f97f 	bl	8000428 <__adddf3>
 800512a:	e9cd 0100 	strd	r0, r1, [sp]
 800512e:	463b      	mov	r3, r7
 8005130:	4632      	mov	r2, r6
 8005132:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005136:	f7fb f975 	bl	8000424 <__aeabi_dsub>
 800513a:	f004 4400 	and.w	r4, r4, #2147483648	@ 0x80000000
 800513e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8005142:	ea44 0703 	orr.w	r7, r4, r3
 8005146:	4602      	mov	r2, r0
 8005148:	463b      	mov	r3, r7
 800514a:	ec43 2b10 	vmov	d0, r2, r3
 800514e:	b003      	add	sp, #12
 8005150:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005152:	4825      	ldr	r0, [pc, #148]	@ (80051e8 <rint+0x114>)
 8005154:	4128      	asrs	r0, r5
 8005156:	ea00 0703 	and.w	r7, r0, r3
 800515a:	4317      	orrs	r7, r2
 800515c:	d0f5      	beq.n	800514a <rint+0x76>
 800515e:	0843      	lsrs	r3, r0, #1
 8005160:	ea04 0050 	and.w	r0, r4, r0, lsr #1
 8005164:	4301      	orrs	r1, r0
 8005166:	d00a      	beq.n	800517e <rint+0xaa>
 8005168:	f1a5 0213 	sub.w	r2, r5, #19
 800516c:	ea24 0303 	bic.w	r3, r4, r3
 8005170:	4251      	negs	r1, r2
 8005172:	f44f 2480 	mov.w	r4, #262144	@ 0x40000
 8005176:	4151      	adcs	r1, r2
 8005178:	412c      	asrs	r4, r5
 800517a:	07c9      	lsls	r1, r1, #31
 800517c:	431c      	orrs	r4, r3
 800517e:	460a      	mov	r2, r1
 8005180:	4918      	ldr	r1, [pc, #96]	@ (80051e4 <rint+0x110>)
 8005182:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8005186:	4623      	mov	r3, r4
 8005188:	e9d1 4500 	ldrd	r4, r5, [r1]
 800518c:	4620      	mov	r0, r4
 800518e:	4629      	mov	r1, r5
 8005190:	f7fb f94a 	bl	8000428 <__adddf3>
 8005194:	e9cd 0100 	strd	r0, r1, [sp]
 8005198:	e9dd 0100 	ldrd	r0, r1, [sp]
 800519c:	4622      	mov	r2, r4
 800519e:	462b      	mov	r3, r5
 80051a0:	f7fb f940 	bl	8000424 <__aeabi_dsub>
 80051a4:	e008      	b.n	80051b8 <rint+0xe4>
 80051a6:	2d33      	cmp	r5, #51	@ 0x33
 80051a8:	dd09      	ble.n	80051be <rint+0xea>
 80051aa:	f5b5 6f80 	cmp.w	r5, #1024	@ 0x400
 80051ae:	d1cc      	bne.n	800514a <rint+0x76>
 80051b0:	4610      	mov	r0, r2
 80051b2:	4619      	mov	r1, r3
 80051b4:	f7fb f938 	bl	8000428 <__adddf3>
 80051b8:	4602      	mov	r2, r0
 80051ba:	460b      	mov	r3, r1
 80051bc:	e7c5      	b.n	800514a <rint+0x76>
 80051be:	f2a0 4513 	subw	r5, r0, #1043	@ 0x413
 80051c2:	f04f 30ff 	mov.w	r0, #4294967295
 80051c6:	40e8      	lsrs	r0, r5
 80051c8:	4202      	tst	r2, r0
 80051ca:	d0be      	beq.n	800514a <rint+0x76>
 80051cc:	0843      	lsrs	r3, r0, #1
 80051ce:	ea11 0050 	ands.w	r0, r1, r0, lsr #1
 80051d2:	bf1f      	itttt	ne
 80051d4:	ea21 0303 	bicne.w	r3, r1, r3
 80051d8:	f04f 4180 	movne.w	r1, #1073741824	@ 0x40000000
 80051dc:	4129      	asrne	r1, r5
 80051de:	4319      	orrne	r1, r3
 80051e0:	e7cd      	b.n	800517e <rint+0xaa>
 80051e2:	bf00      	nop
 80051e4:	08005c38 	.word	0x08005c38
 80051e8:	000fffff 	.word	0x000fffff

080051ec <__kernel_cosf>:
 80051ec:	ee10 3a10 	vmov	r3, s0
 80051f0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80051f4:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 80051f8:	eef0 6a40 	vmov.f32	s13, s0
 80051fc:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8005200:	d204      	bcs.n	800520c <__kernel_cosf+0x20>
 8005202:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 8005206:	ee17 2a90 	vmov	r2, s15
 800520a:	b342      	cbz	r2, 800525e <__kernel_cosf+0x72>
 800520c:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8005210:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 800527c <__kernel_cosf+0x90>
 8005214:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 8005280 <__kernel_cosf+0x94>
 8005218:	4a1a      	ldr	r2, [pc, #104]	@ (8005284 <__kernel_cosf+0x98>)
 800521a:	eea7 6a27 	vfma.f32	s12, s14, s15
 800521e:	4293      	cmp	r3, r2
 8005220:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8005288 <__kernel_cosf+0x9c>
 8005224:	eee6 7a07 	vfma.f32	s15, s12, s14
 8005228:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 800528c <__kernel_cosf+0xa0>
 800522c:	eea7 6a87 	vfma.f32	s12, s15, s14
 8005230:	eddf 7a17 	vldr	s15, [pc, #92]	@ 8005290 <__kernel_cosf+0xa4>
 8005234:	eee6 7a07 	vfma.f32	s15, s12, s14
 8005238:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 8005294 <__kernel_cosf+0xa8>
 800523c:	eea7 6a87 	vfma.f32	s12, s15, s14
 8005240:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 8005244:	ee26 6a07 	vmul.f32	s12, s12, s14
 8005248:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800524c:	eee7 0a06 	vfma.f32	s1, s14, s12
 8005250:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005254:	d804      	bhi.n	8005260 <__kernel_cosf+0x74>
 8005256:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800525a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800525e:	4770      	bx	lr
 8005260:	4a0d      	ldr	r2, [pc, #52]	@ (8005298 <__kernel_cosf+0xac>)
 8005262:	4293      	cmp	r3, r2
 8005264:	bf9a      	itte	ls
 8005266:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 800526a:	ee07 3a10 	vmovls	s14, r3
 800526e:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 8005272:	ee30 0a47 	vsub.f32	s0, s0, s14
 8005276:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800527a:	e7ec      	b.n	8005256 <__kernel_cosf+0x6a>
 800527c:	ad47d74e 	.word	0xad47d74e
 8005280:	310f74f6 	.word	0x310f74f6
 8005284:	3e999999 	.word	0x3e999999
 8005288:	b493f27c 	.word	0xb493f27c
 800528c:	37d00d01 	.word	0x37d00d01
 8005290:	bab60b61 	.word	0xbab60b61
 8005294:	3d2aaaab 	.word	0x3d2aaaab
 8005298:	3f480000 	.word	0x3f480000

0800529c <__kernel_sinf>:
 800529c:	ee10 3a10 	vmov	r3, s0
 80052a0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80052a4:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 80052a8:	d204      	bcs.n	80052b4 <__kernel_sinf+0x18>
 80052aa:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80052ae:	ee17 3a90 	vmov	r3, s15
 80052b2:	b35b      	cbz	r3, 800530c <__kernel_sinf+0x70>
 80052b4:	ee20 7a00 	vmul.f32	s14, s0, s0
 80052b8:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8005310 <__kernel_sinf+0x74>
 80052bc:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 8005314 <__kernel_sinf+0x78>
 80052c0:	eea7 6a27 	vfma.f32	s12, s14, s15
 80052c4:	eddf 7a14 	vldr	s15, [pc, #80]	@ 8005318 <__kernel_sinf+0x7c>
 80052c8:	eee6 7a07 	vfma.f32	s15, s12, s14
 80052cc:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 800531c <__kernel_sinf+0x80>
 80052d0:	eea7 6a87 	vfma.f32	s12, s15, s14
 80052d4:	eddf 7a12 	vldr	s15, [pc, #72]	@ 8005320 <__kernel_sinf+0x84>
 80052d8:	ee60 6a07 	vmul.f32	s13, s0, s14
 80052dc:	eee6 7a07 	vfma.f32	s15, s12, s14
 80052e0:	b930      	cbnz	r0, 80052f0 <__kernel_sinf+0x54>
 80052e2:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 8005324 <__kernel_sinf+0x88>
 80052e6:	eea7 6a27 	vfma.f32	s12, s14, s15
 80052ea:	eea6 0a26 	vfma.f32	s0, s12, s13
 80052ee:	4770      	bx	lr
 80052f0:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 80052f4:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 80052f8:	eee0 7a86 	vfma.f32	s15, s1, s12
 80052fc:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8005300:	eddf 7a09 	vldr	s15, [pc, #36]	@ 8005328 <__kernel_sinf+0x8c>
 8005304:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8005308:	ee30 0a60 	vsub.f32	s0, s0, s1
 800530c:	4770      	bx	lr
 800530e:	bf00      	nop
 8005310:	2f2ec9d3 	.word	0x2f2ec9d3
 8005314:	b2d72f34 	.word	0xb2d72f34
 8005318:	3638ef1b 	.word	0x3638ef1b
 800531c:	b9500d01 	.word	0xb9500d01
 8005320:	3c088889 	.word	0x3c088889
 8005324:	be2aaaab 	.word	0xbe2aaaab
 8005328:	3e2aaaab 	.word	0x3e2aaaab

0800532c <__ieee754_rem_pio2f>:
 800532c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800532e:	ee10 6a10 	vmov	r6, s0
 8005332:	4b88      	ldr	r3, [pc, #544]	@ (8005554 <__ieee754_rem_pio2f+0x228>)
 8005334:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 8005338:	429d      	cmp	r5, r3
 800533a:	b087      	sub	sp, #28
 800533c:	4604      	mov	r4, r0
 800533e:	d805      	bhi.n	800534c <__ieee754_rem_pio2f+0x20>
 8005340:	2300      	movs	r3, #0
 8005342:	ed80 0a00 	vstr	s0, [r0]
 8005346:	6043      	str	r3, [r0, #4]
 8005348:	2000      	movs	r0, #0
 800534a:	e022      	b.n	8005392 <__ieee754_rem_pio2f+0x66>
 800534c:	4b82      	ldr	r3, [pc, #520]	@ (8005558 <__ieee754_rem_pio2f+0x22c>)
 800534e:	429d      	cmp	r5, r3
 8005350:	d83a      	bhi.n	80053c8 <__ieee754_rem_pio2f+0x9c>
 8005352:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8005356:	2e00      	cmp	r6, #0
 8005358:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 800555c <__ieee754_rem_pio2f+0x230>
 800535c:	4a80      	ldr	r2, [pc, #512]	@ (8005560 <__ieee754_rem_pio2f+0x234>)
 800535e:	f023 030f 	bic.w	r3, r3, #15
 8005362:	dd18      	ble.n	8005396 <__ieee754_rem_pio2f+0x6a>
 8005364:	4293      	cmp	r3, r2
 8005366:	ee70 7a47 	vsub.f32	s15, s0, s14
 800536a:	bf09      	itett	eq
 800536c:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 8005564 <__ieee754_rem_pio2f+0x238>
 8005370:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 8005568 <__ieee754_rem_pio2f+0x23c>
 8005374:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 800556c <__ieee754_rem_pio2f+0x240>
 8005378:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800537c:	ee37 7ae6 	vsub.f32	s14, s15, s13
 8005380:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005384:	ed80 7a00 	vstr	s14, [r0]
 8005388:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800538c:	edc0 7a01 	vstr	s15, [r0, #4]
 8005390:	2001      	movs	r0, #1
 8005392:	b007      	add	sp, #28
 8005394:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005396:	4293      	cmp	r3, r2
 8005398:	ee70 7a07 	vadd.f32	s15, s0, s14
 800539c:	bf09      	itett	eq
 800539e:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 8005564 <__ieee754_rem_pio2f+0x238>
 80053a2:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 8005568 <__ieee754_rem_pio2f+0x23c>
 80053a6:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 800556c <__ieee754_rem_pio2f+0x240>
 80053aa:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 80053ae:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80053b2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80053b6:	ed80 7a00 	vstr	s14, [r0]
 80053ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053be:	edc0 7a01 	vstr	s15, [r0, #4]
 80053c2:	f04f 30ff 	mov.w	r0, #4294967295
 80053c6:	e7e4      	b.n	8005392 <__ieee754_rem_pio2f+0x66>
 80053c8:	4b69      	ldr	r3, [pc, #420]	@ (8005570 <__ieee754_rem_pio2f+0x244>)
 80053ca:	429d      	cmp	r5, r3
 80053cc:	d873      	bhi.n	80054b6 <__ieee754_rem_pio2f+0x18a>
 80053ce:	f000 f8dd 	bl	800558c <fabsf>
 80053d2:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 8005574 <__ieee754_rem_pio2f+0x248>
 80053d6:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80053da:	eee0 7a07 	vfma.f32	s15, s0, s14
 80053de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80053e2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80053e6:	ee17 0a90 	vmov	r0, s15
 80053ea:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800555c <__ieee754_rem_pio2f+0x230>
 80053ee:	eea7 0a67 	vfms.f32	s0, s14, s15
 80053f2:	281f      	cmp	r0, #31
 80053f4:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8005568 <__ieee754_rem_pio2f+0x23c>
 80053f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053fc:	eeb1 6a47 	vneg.f32	s12, s14
 8005400:	ee70 6a67 	vsub.f32	s13, s0, s15
 8005404:	ee16 1a90 	vmov	r1, s13
 8005408:	dc09      	bgt.n	800541e <__ieee754_rem_pio2f+0xf2>
 800540a:	4a5b      	ldr	r2, [pc, #364]	@ (8005578 <__ieee754_rem_pio2f+0x24c>)
 800540c:	1e47      	subs	r7, r0, #1
 800540e:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8005412:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 8005416:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800541a:	4293      	cmp	r3, r2
 800541c:	d107      	bne.n	800542e <__ieee754_rem_pio2f+0x102>
 800541e:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 8005422:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 8005426:	2a08      	cmp	r2, #8
 8005428:	ea4f 53e5 	mov.w	r3, r5, asr #23
 800542c:	dc14      	bgt.n	8005458 <__ieee754_rem_pio2f+0x12c>
 800542e:	6021      	str	r1, [r4, #0]
 8005430:	ed94 7a00 	vldr	s14, [r4]
 8005434:	ee30 0a47 	vsub.f32	s0, s0, s14
 8005438:	2e00      	cmp	r6, #0
 800543a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800543e:	ed84 0a01 	vstr	s0, [r4, #4]
 8005442:	daa6      	bge.n	8005392 <__ieee754_rem_pio2f+0x66>
 8005444:	eeb1 7a47 	vneg.f32	s14, s14
 8005448:	eeb1 0a40 	vneg.f32	s0, s0
 800544c:	ed84 7a00 	vstr	s14, [r4]
 8005450:	ed84 0a01 	vstr	s0, [r4, #4]
 8005454:	4240      	negs	r0, r0
 8005456:	e79c      	b.n	8005392 <__ieee754_rem_pio2f+0x66>
 8005458:	eddf 5a42 	vldr	s11, [pc, #264]	@ 8005564 <__ieee754_rem_pio2f+0x238>
 800545c:	eef0 6a40 	vmov.f32	s13, s0
 8005460:	eee6 6a25 	vfma.f32	s13, s12, s11
 8005464:	ee70 7a66 	vsub.f32	s15, s0, s13
 8005468:	eee6 7a25 	vfma.f32	s15, s12, s11
 800546c:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800556c <__ieee754_rem_pio2f+0x240>
 8005470:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8005474:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8005478:	ee15 2a90 	vmov	r2, s11
 800547c:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8005480:	1a5b      	subs	r3, r3, r1
 8005482:	2b19      	cmp	r3, #25
 8005484:	dc04      	bgt.n	8005490 <__ieee754_rem_pio2f+0x164>
 8005486:	edc4 5a00 	vstr	s11, [r4]
 800548a:	eeb0 0a66 	vmov.f32	s0, s13
 800548e:	e7cf      	b.n	8005430 <__ieee754_rem_pio2f+0x104>
 8005490:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 800557c <__ieee754_rem_pio2f+0x250>
 8005494:	eeb0 0a66 	vmov.f32	s0, s13
 8005498:	eea6 0a25 	vfma.f32	s0, s12, s11
 800549c:	ee76 7ac0 	vsub.f32	s15, s13, s0
 80054a0:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8005580 <__ieee754_rem_pio2f+0x254>
 80054a4:	eee6 7a25 	vfma.f32	s15, s12, s11
 80054a8:	eed7 7a26 	vfnms.f32	s15, s14, s13
 80054ac:	ee30 7a67 	vsub.f32	s14, s0, s15
 80054b0:	ed84 7a00 	vstr	s14, [r4]
 80054b4:	e7bc      	b.n	8005430 <__ieee754_rem_pio2f+0x104>
 80054b6:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 80054ba:	d306      	bcc.n	80054ca <__ieee754_rem_pio2f+0x19e>
 80054bc:	ee70 7a40 	vsub.f32	s15, s0, s0
 80054c0:	edc0 7a01 	vstr	s15, [r0, #4]
 80054c4:	edc0 7a00 	vstr	s15, [r0]
 80054c8:	e73e      	b.n	8005348 <__ieee754_rem_pio2f+0x1c>
 80054ca:	15ea      	asrs	r2, r5, #23
 80054cc:	3a86      	subs	r2, #134	@ 0x86
 80054ce:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 80054d2:	ee07 3a90 	vmov	s15, r3
 80054d6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80054da:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 8005584 <__ieee754_rem_pio2f+0x258>
 80054de:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80054e2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80054e6:	ed8d 7a03 	vstr	s14, [sp, #12]
 80054ea:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80054ee:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80054f2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80054f6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80054fa:	ed8d 7a04 	vstr	s14, [sp, #16]
 80054fe:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005502:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005506:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800550a:	edcd 7a05 	vstr	s15, [sp, #20]
 800550e:	d11e      	bne.n	800554e <__ieee754_rem_pio2f+0x222>
 8005510:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8005514:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005518:	bf0c      	ite	eq
 800551a:	2301      	moveq	r3, #1
 800551c:	2302      	movne	r3, #2
 800551e:	491a      	ldr	r1, [pc, #104]	@ (8005588 <__ieee754_rem_pio2f+0x25c>)
 8005520:	9101      	str	r1, [sp, #4]
 8005522:	2102      	movs	r1, #2
 8005524:	9100      	str	r1, [sp, #0]
 8005526:	a803      	add	r0, sp, #12
 8005528:	4621      	mov	r1, r4
 800552a:	f000 f837 	bl	800559c <__kernel_rem_pio2f>
 800552e:	2e00      	cmp	r6, #0
 8005530:	f6bf af2f 	bge.w	8005392 <__ieee754_rem_pio2f+0x66>
 8005534:	edd4 7a00 	vldr	s15, [r4]
 8005538:	eef1 7a67 	vneg.f32	s15, s15
 800553c:	edc4 7a00 	vstr	s15, [r4]
 8005540:	edd4 7a01 	vldr	s15, [r4, #4]
 8005544:	eef1 7a67 	vneg.f32	s15, s15
 8005548:	edc4 7a01 	vstr	s15, [r4, #4]
 800554c:	e782      	b.n	8005454 <__ieee754_rem_pio2f+0x128>
 800554e:	2303      	movs	r3, #3
 8005550:	e7e5      	b.n	800551e <__ieee754_rem_pio2f+0x1f2>
 8005552:	bf00      	nop
 8005554:	3f490fd8 	.word	0x3f490fd8
 8005558:	4016cbe3 	.word	0x4016cbe3
 800555c:	3fc90f80 	.word	0x3fc90f80
 8005560:	3fc90fd0 	.word	0x3fc90fd0
 8005564:	37354400 	.word	0x37354400
 8005568:	37354443 	.word	0x37354443
 800556c:	2e85a308 	.word	0x2e85a308
 8005570:	43490f80 	.word	0x43490f80
 8005574:	3f22f984 	.word	0x3f22f984
 8005578:	08005c48 	.word	0x08005c48
 800557c:	2e85a300 	.word	0x2e85a300
 8005580:	248d3132 	.word	0x248d3132
 8005584:	43800000 	.word	0x43800000
 8005588:	08005cc8 	.word	0x08005cc8

0800558c <fabsf>:
 800558c:	ee10 3a10 	vmov	r3, s0
 8005590:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005594:	ee00 3a10 	vmov	s0, r3
 8005598:	4770      	bx	lr
	...

0800559c <__kernel_rem_pio2f>:
 800559c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055a0:	ed2d 8b04 	vpush	{d8-d9}
 80055a4:	b0d9      	sub	sp, #356	@ 0x164
 80055a6:	4690      	mov	r8, r2
 80055a8:	9001      	str	r0, [sp, #4]
 80055aa:	4ab9      	ldr	r2, [pc, #740]	@ (8005890 <__kernel_rem_pio2f+0x2f4>)
 80055ac:	9866      	ldr	r0, [sp, #408]	@ 0x198
 80055ae:	f118 0f04 	cmn.w	r8, #4
 80055b2:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 80055b6:	460f      	mov	r7, r1
 80055b8:	f103 3bff 	add.w	fp, r3, #4294967295
 80055bc:	db27      	blt.n	800560e <__kernel_rem_pio2f+0x72>
 80055be:	f1b8 0203 	subs.w	r2, r8, #3
 80055c2:	bf48      	it	mi
 80055c4:	f108 0204 	addmi.w	r2, r8, #4
 80055c8:	10d2      	asrs	r2, r2, #3
 80055ca:	1c55      	adds	r5, r2, #1
 80055cc:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 80055ce:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 80058a0 <__kernel_rem_pio2f+0x304>
 80055d2:	00e8      	lsls	r0, r5, #3
 80055d4:	eba2 060b 	sub.w	r6, r2, fp
 80055d8:	9002      	str	r0, [sp, #8]
 80055da:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 80055de:	eb0a 0c0b 	add.w	ip, sl, fp
 80055e2:	ac1c      	add	r4, sp, #112	@ 0x70
 80055e4:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 80055e8:	2000      	movs	r0, #0
 80055ea:	4560      	cmp	r0, ip
 80055ec:	dd11      	ble.n	8005612 <__kernel_rem_pio2f+0x76>
 80055ee:	a91c      	add	r1, sp, #112	@ 0x70
 80055f0:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 80055f4:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 80055f8:	f04f 0c00 	mov.w	ip, #0
 80055fc:	45d4      	cmp	ip, sl
 80055fe:	dc27      	bgt.n	8005650 <__kernel_rem_pio2f+0xb4>
 8005600:	f8dd e004 	ldr.w	lr, [sp, #4]
 8005604:	eddf 7aa6 	vldr	s15, [pc, #664]	@ 80058a0 <__kernel_rem_pio2f+0x304>
 8005608:	4606      	mov	r6, r0
 800560a:	2400      	movs	r4, #0
 800560c:	e016      	b.n	800563c <__kernel_rem_pio2f+0xa0>
 800560e:	2200      	movs	r2, #0
 8005610:	e7db      	b.n	80055ca <__kernel_rem_pio2f+0x2e>
 8005612:	42c6      	cmn	r6, r0
 8005614:	bf5d      	ittte	pl
 8005616:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 800561a:	ee07 1a90 	vmovpl	s15, r1
 800561e:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8005622:	eef0 7a47 	vmovmi.f32	s15, s14
 8005626:	ece4 7a01 	vstmia	r4!, {s15}
 800562a:	3001      	adds	r0, #1
 800562c:	e7dd      	b.n	80055ea <__kernel_rem_pio2f+0x4e>
 800562e:	ecfe 6a01 	vldmia	lr!, {s13}
 8005632:	ed96 7a00 	vldr	s14, [r6]
 8005636:	eee6 7a87 	vfma.f32	s15, s13, s14
 800563a:	3401      	adds	r4, #1
 800563c:	455c      	cmp	r4, fp
 800563e:	f1a6 0604 	sub.w	r6, r6, #4
 8005642:	ddf4      	ble.n	800562e <__kernel_rem_pio2f+0x92>
 8005644:	ece9 7a01 	vstmia	r9!, {s15}
 8005648:	f10c 0c01 	add.w	ip, ip, #1
 800564c:	3004      	adds	r0, #4
 800564e:	e7d5      	b.n	80055fc <__kernel_rem_pio2f+0x60>
 8005650:	a908      	add	r1, sp, #32
 8005652:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005656:	9104      	str	r1, [sp, #16]
 8005658:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800565a:	eddf 8a90 	vldr	s17, [pc, #576]	@ 800589c <__kernel_rem_pio2f+0x300>
 800565e:	ed9f 9a8e 	vldr	s18, [pc, #568]	@ 8005898 <__kernel_rem_pio2f+0x2fc>
 8005662:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8005666:	9203      	str	r2, [sp, #12]
 8005668:	4654      	mov	r4, sl
 800566a:	00a2      	lsls	r2, r4, #2
 800566c:	9205      	str	r2, [sp, #20]
 800566e:	aa58      	add	r2, sp, #352	@ 0x160
 8005670:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8005674:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 8005678:	a944      	add	r1, sp, #272	@ 0x110
 800567a:	aa08      	add	r2, sp, #32
 800567c:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8005680:	4694      	mov	ip, r2
 8005682:	4626      	mov	r6, r4
 8005684:	2e00      	cmp	r6, #0
 8005686:	f1a0 0004 	sub.w	r0, r0, #4
 800568a:	dc4c      	bgt.n	8005726 <__kernel_rem_pio2f+0x18a>
 800568c:	4628      	mov	r0, r5
 800568e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005692:	f000 f9f5 	bl	8005a80 <scalbnf>
 8005696:	eeb0 8a40 	vmov.f32	s16, s0
 800569a:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 800569e:	ee28 0a00 	vmul.f32	s0, s16, s0
 80056a2:	f000 fa53 	bl	8005b4c <floorf>
 80056a6:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 80056aa:	eea0 8a67 	vfms.f32	s16, s0, s15
 80056ae:	2d00      	cmp	r5, #0
 80056b0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80056b4:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 80056b8:	ee17 9a90 	vmov	r9, s15
 80056bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80056c0:	ee38 8a67 	vsub.f32	s16, s16, s15
 80056c4:	dd41      	ble.n	800574a <__kernel_rem_pio2f+0x1ae>
 80056c6:	f104 3cff 	add.w	ip, r4, #4294967295
 80056ca:	a908      	add	r1, sp, #32
 80056cc:	f1c5 0e08 	rsb	lr, r5, #8
 80056d0:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 80056d4:	fa46 f00e 	asr.w	r0, r6, lr
 80056d8:	4481      	add	r9, r0
 80056da:	fa00 f00e 	lsl.w	r0, r0, lr
 80056de:	1a36      	subs	r6, r6, r0
 80056e0:	f1c5 0007 	rsb	r0, r5, #7
 80056e4:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 80056e8:	4106      	asrs	r6, r0
 80056ea:	2e00      	cmp	r6, #0
 80056ec:	dd3c      	ble.n	8005768 <__kernel_rem_pio2f+0x1cc>
 80056ee:	f04f 0e00 	mov.w	lr, #0
 80056f2:	f109 0901 	add.w	r9, r9, #1
 80056f6:	4670      	mov	r0, lr
 80056f8:	4574      	cmp	r4, lr
 80056fa:	dc68      	bgt.n	80057ce <__kernel_rem_pio2f+0x232>
 80056fc:	2d00      	cmp	r5, #0
 80056fe:	dd03      	ble.n	8005708 <__kernel_rem_pio2f+0x16c>
 8005700:	2d01      	cmp	r5, #1
 8005702:	d074      	beq.n	80057ee <__kernel_rem_pio2f+0x252>
 8005704:	2d02      	cmp	r5, #2
 8005706:	d07d      	beq.n	8005804 <__kernel_rem_pio2f+0x268>
 8005708:	2e02      	cmp	r6, #2
 800570a:	d12d      	bne.n	8005768 <__kernel_rem_pio2f+0x1cc>
 800570c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8005710:	ee30 8a48 	vsub.f32	s16, s0, s16
 8005714:	b340      	cbz	r0, 8005768 <__kernel_rem_pio2f+0x1cc>
 8005716:	4628      	mov	r0, r5
 8005718:	9306      	str	r3, [sp, #24]
 800571a:	f000 f9b1 	bl	8005a80 <scalbnf>
 800571e:	9b06      	ldr	r3, [sp, #24]
 8005720:	ee38 8a40 	vsub.f32	s16, s16, s0
 8005724:	e020      	b.n	8005768 <__kernel_rem_pio2f+0x1cc>
 8005726:	ee60 7a28 	vmul.f32	s15, s0, s17
 800572a:	3e01      	subs	r6, #1
 800572c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005730:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005734:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8005738:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800573c:	ecac 0a01 	vstmia	ip!, {s0}
 8005740:	ed90 0a00 	vldr	s0, [r0]
 8005744:	ee37 0a80 	vadd.f32	s0, s15, s0
 8005748:	e79c      	b.n	8005684 <__kernel_rem_pio2f+0xe8>
 800574a:	d105      	bne.n	8005758 <__kernel_rem_pio2f+0x1bc>
 800574c:	1e60      	subs	r0, r4, #1
 800574e:	a908      	add	r1, sp, #32
 8005750:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 8005754:	11f6      	asrs	r6, r6, #7
 8005756:	e7c8      	b.n	80056ea <__kernel_rem_pio2f+0x14e>
 8005758:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800575c:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8005760:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005764:	da31      	bge.n	80057ca <__kernel_rem_pio2f+0x22e>
 8005766:	2600      	movs	r6, #0
 8005768:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800576c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005770:	f040 8098 	bne.w	80058a4 <__kernel_rem_pio2f+0x308>
 8005774:	1e60      	subs	r0, r4, #1
 8005776:	2200      	movs	r2, #0
 8005778:	4550      	cmp	r0, sl
 800577a:	da4b      	bge.n	8005814 <__kernel_rem_pio2f+0x278>
 800577c:	2a00      	cmp	r2, #0
 800577e:	d065      	beq.n	800584c <__kernel_rem_pio2f+0x2b0>
 8005780:	3c01      	subs	r4, #1
 8005782:	ab08      	add	r3, sp, #32
 8005784:	3d08      	subs	r5, #8
 8005786:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d0f8      	beq.n	8005780 <__kernel_rem_pio2f+0x1e4>
 800578e:	4628      	mov	r0, r5
 8005790:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8005794:	f000 f974 	bl	8005a80 <scalbnf>
 8005798:	1c63      	adds	r3, r4, #1
 800579a:	aa44      	add	r2, sp, #272	@ 0x110
 800579c:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 800589c <__kernel_rem_pio2f+0x300>
 80057a0:	0099      	lsls	r1, r3, #2
 80057a2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80057a6:	4623      	mov	r3, r4
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	f280 80a9 	bge.w	8005900 <__kernel_rem_pio2f+0x364>
 80057ae:	4623      	mov	r3, r4
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	f2c0 80c7 	blt.w	8005944 <__kernel_rem_pio2f+0x3a8>
 80057b6:	aa44      	add	r2, sp, #272	@ 0x110
 80057b8:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 80057bc:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 8005894 <__kernel_rem_pio2f+0x2f8>
 80057c0:	eddf 7a37 	vldr	s15, [pc, #220]	@ 80058a0 <__kernel_rem_pio2f+0x304>
 80057c4:	2000      	movs	r0, #0
 80057c6:	1ae2      	subs	r2, r4, r3
 80057c8:	e0b1      	b.n	800592e <__kernel_rem_pio2f+0x392>
 80057ca:	2602      	movs	r6, #2
 80057cc:	e78f      	b.n	80056ee <__kernel_rem_pio2f+0x152>
 80057ce:	f852 1b04 	ldr.w	r1, [r2], #4
 80057d2:	b948      	cbnz	r0, 80057e8 <__kernel_rem_pio2f+0x24c>
 80057d4:	b121      	cbz	r1, 80057e0 <__kernel_rem_pio2f+0x244>
 80057d6:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 80057da:	f842 1c04 	str.w	r1, [r2, #-4]
 80057de:	2101      	movs	r1, #1
 80057e0:	f10e 0e01 	add.w	lr, lr, #1
 80057e4:	4608      	mov	r0, r1
 80057e6:	e787      	b.n	80056f8 <__kernel_rem_pio2f+0x15c>
 80057e8:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 80057ec:	e7f5      	b.n	80057da <__kernel_rem_pio2f+0x23e>
 80057ee:	f104 3cff 	add.w	ip, r4, #4294967295
 80057f2:	aa08      	add	r2, sp, #32
 80057f4:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 80057f8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80057fc:	a908      	add	r1, sp, #32
 80057fe:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 8005802:	e781      	b.n	8005708 <__kernel_rem_pio2f+0x16c>
 8005804:	f104 3cff 	add.w	ip, r4, #4294967295
 8005808:	aa08      	add	r2, sp, #32
 800580a:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800580e:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8005812:	e7f3      	b.n	80057fc <__kernel_rem_pio2f+0x260>
 8005814:	a908      	add	r1, sp, #32
 8005816:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800581a:	3801      	subs	r0, #1
 800581c:	430a      	orrs	r2, r1
 800581e:	e7ab      	b.n	8005778 <__kernel_rem_pio2f+0x1dc>
 8005820:	3201      	adds	r2, #1
 8005822:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 8005826:	2e00      	cmp	r6, #0
 8005828:	d0fa      	beq.n	8005820 <__kernel_rem_pio2f+0x284>
 800582a:	9905      	ldr	r1, [sp, #20]
 800582c:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 8005830:	eb0d 0001 	add.w	r0, sp, r1
 8005834:	18e6      	adds	r6, r4, r3
 8005836:	a91c      	add	r1, sp, #112	@ 0x70
 8005838:	f104 0c01 	add.w	ip, r4, #1
 800583c:	384c      	subs	r0, #76	@ 0x4c
 800583e:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 8005842:	4422      	add	r2, r4
 8005844:	4562      	cmp	r2, ip
 8005846:	da04      	bge.n	8005852 <__kernel_rem_pio2f+0x2b6>
 8005848:	4614      	mov	r4, r2
 800584a:	e70e      	b.n	800566a <__kernel_rem_pio2f+0xce>
 800584c:	9804      	ldr	r0, [sp, #16]
 800584e:	2201      	movs	r2, #1
 8005850:	e7e7      	b.n	8005822 <__kernel_rem_pio2f+0x286>
 8005852:	9903      	ldr	r1, [sp, #12]
 8005854:	f8dd e004 	ldr.w	lr, [sp, #4]
 8005858:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 800585c:	9105      	str	r1, [sp, #20]
 800585e:	ee07 1a90 	vmov	s15, r1
 8005862:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005866:	2400      	movs	r4, #0
 8005868:	ece6 7a01 	vstmia	r6!, {s15}
 800586c:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 80058a0 <__kernel_rem_pio2f+0x304>
 8005870:	46b1      	mov	r9, r6
 8005872:	455c      	cmp	r4, fp
 8005874:	dd04      	ble.n	8005880 <__kernel_rem_pio2f+0x2e4>
 8005876:	ece0 7a01 	vstmia	r0!, {s15}
 800587a:	f10c 0c01 	add.w	ip, ip, #1
 800587e:	e7e1      	b.n	8005844 <__kernel_rem_pio2f+0x2a8>
 8005880:	ecfe 6a01 	vldmia	lr!, {s13}
 8005884:	ed39 7a01 	vldmdb	r9!, {s14}
 8005888:	3401      	adds	r4, #1
 800588a:	eee6 7a87 	vfma.f32	s15, s13, s14
 800588e:	e7f0      	b.n	8005872 <__kernel_rem_pio2f+0x2d6>
 8005890:	0800600c 	.word	0x0800600c
 8005894:	08005fe0 	.word	0x08005fe0
 8005898:	43800000 	.word	0x43800000
 800589c:	3b800000 	.word	0x3b800000
 80058a0:	00000000 	.word	0x00000000
 80058a4:	9b02      	ldr	r3, [sp, #8]
 80058a6:	eeb0 0a48 	vmov.f32	s0, s16
 80058aa:	eba3 0008 	sub.w	r0, r3, r8
 80058ae:	f000 f8e7 	bl	8005a80 <scalbnf>
 80058b2:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 8005898 <__kernel_rem_pio2f+0x2fc>
 80058b6:	eeb4 0ac7 	vcmpe.f32	s0, s14
 80058ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058be:	db19      	blt.n	80058f4 <__kernel_rem_pio2f+0x358>
 80058c0:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 800589c <__kernel_rem_pio2f+0x300>
 80058c4:	ee60 7a27 	vmul.f32	s15, s0, s15
 80058c8:	aa08      	add	r2, sp, #32
 80058ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80058ce:	3508      	adds	r5, #8
 80058d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80058d4:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80058d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80058dc:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80058e0:	ee10 3a10 	vmov	r3, s0
 80058e4:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 80058e8:	ee17 3a90 	vmov	r3, s15
 80058ec:	3401      	adds	r4, #1
 80058ee:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 80058f2:	e74c      	b.n	800578e <__kernel_rem_pio2f+0x1f2>
 80058f4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80058f8:	aa08      	add	r2, sp, #32
 80058fa:	ee10 3a10 	vmov	r3, s0
 80058fe:	e7f6      	b.n	80058ee <__kernel_rem_pio2f+0x352>
 8005900:	a808      	add	r0, sp, #32
 8005902:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8005906:	9001      	str	r0, [sp, #4]
 8005908:	ee07 0a90 	vmov	s15, r0
 800590c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005910:	3b01      	subs	r3, #1
 8005912:	ee67 7a80 	vmul.f32	s15, s15, s0
 8005916:	ee20 0a07 	vmul.f32	s0, s0, s14
 800591a:	ed62 7a01 	vstmdb	r2!, {s15}
 800591e:	e743      	b.n	80057a8 <__kernel_rem_pio2f+0x20c>
 8005920:	ecfc 6a01 	vldmia	ip!, {s13}
 8005924:	ecb5 7a01 	vldmia	r5!, {s14}
 8005928:	eee6 7a87 	vfma.f32	s15, s13, s14
 800592c:	3001      	adds	r0, #1
 800592e:	4550      	cmp	r0, sl
 8005930:	dc01      	bgt.n	8005936 <__kernel_rem_pio2f+0x39a>
 8005932:	4282      	cmp	r2, r0
 8005934:	daf4      	bge.n	8005920 <__kernel_rem_pio2f+0x384>
 8005936:	a858      	add	r0, sp, #352	@ 0x160
 8005938:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800593c:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 8005940:	3b01      	subs	r3, #1
 8005942:	e735      	b.n	80057b0 <__kernel_rem_pio2f+0x214>
 8005944:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8005946:	2b02      	cmp	r3, #2
 8005948:	dc09      	bgt.n	800595e <__kernel_rem_pio2f+0x3c2>
 800594a:	2b00      	cmp	r3, #0
 800594c:	dc2b      	bgt.n	80059a6 <__kernel_rem_pio2f+0x40a>
 800594e:	d044      	beq.n	80059da <__kernel_rem_pio2f+0x43e>
 8005950:	f009 0007 	and.w	r0, r9, #7
 8005954:	b059      	add	sp, #356	@ 0x164
 8005956:	ecbd 8b04 	vpop	{d8-d9}
 800595a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800595e:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8005960:	2b03      	cmp	r3, #3
 8005962:	d1f5      	bne.n	8005950 <__kernel_rem_pio2f+0x3b4>
 8005964:	aa30      	add	r2, sp, #192	@ 0xc0
 8005966:	1f0b      	subs	r3, r1, #4
 8005968:	4413      	add	r3, r2
 800596a:	461a      	mov	r2, r3
 800596c:	4620      	mov	r0, r4
 800596e:	2800      	cmp	r0, #0
 8005970:	f1a2 0204 	sub.w	r2, r2, #4
 8005974:	dc52      	bgt.n	8005a1c <__kernel_rem_pio2f+0x480>
 8005976:	4622      	mov	r2, r4
 8005978:	2a01      	cmp	r2, #1
 800597a:	f1a3 0304 	sub.w	r3, r3, #4
 800597e:	dc5d      	bgt.n	8005a3c <__kernel_rem_pio2f+0x4a0>
 8005980:	ab30      	add	r3, sp, #192	@ 0xc0
 8005982:	ed5f 7a39 	vldr	s15, [pc, #-228]	@ 80058a0 <__kernel_rem_pio2f+0x304>
 8005986:	440b      	add	r3, r1
 8005988:	2c01      	cmp	r4, #1
 800598a:	dc67      	bgt.n	8005a5c <__kernel_rem_pio2f+0x4c0>
 800598c:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 8005990:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 8005994:	2e00      	cmp	r6, #0
 8005996:	d167      	bne.n	8005a68 <__kernel_rem_pio2f+0x4cc>
 8005998:	edc7 6a00 	vstr	s13, [r7]
 800599c:	ed87 7a01 	vstr	s14, [r7, #4]
 80059a0:	edc7 7a02 	vstr	s15, [r7, #8]
 80059a4:	e7d4      	b.n	8005950 <__kernel_rem_pio2f+0x3b4>
 80059a6:	ab30      	add	r3, sp, #192	@ 0xc0
 80059a8:	ed1f 7a43 	vldr	s14, [pc, #-268]	@ 80058a0 <__kernel_rem_pio2f+0x304>
 80059ac:	440b      	add	r3, r1
 80059ae:	4622      	mov	r2, r4
 80059b0:	2a00      	cmp	r2, #0
 80059b2:	da24      	bge.n	80059fe <__kernel_rem_pio2f+0x462>
 80059b4:	b34e      	cbz	r6, 8005a0a <__kernel_rem_pio2f+0x46e>
 80059b6:	eef1 7a47 	vneg.f32	s15, s14
 80059ba:	edc7 7a00 	vstr	s15, [r7]
 80059be:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 80059c2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80059c6:	aa31      	add	r2, sp, #196	@ 0xc4
 80059c8:	2301      	movs	r3, #1
 80059ca:	429c      	cmp	r4, r3
 80059cc:	da20      	bge.n	8005a10 <__kernel_rem_pio2f+0x474>
 80059ce:	b10e      	cbz	r6, 80059d4 <__kernel_rem_pio2f+0x438>
 80059d0:	eef1 7a67 	vneg.f32	s15, s15
 80059d4:	edc7 7a01 	vstr	s15, [r7, #4]
 80059d8:	e7ba      	b.n	8005950 <__kernel_rem_pio2f+0x3b4>
 80059da:	ab30      	add	r3, sp, #192	@ 0xc0
 80059dc:	ed5f 7a50 	vldr	s15, [pc, #-320]	@ 80058a0 <__kernel_rem_pio2f+0x304>
 80059e0:	440b      	add	r3, r1
 80059e2:	2c00      	cmp	r4, #0
 80059e4:	da05      	bge.n	80059f2 <__kernel_rem_pio2f+0x456>
 80059e6:	b10e      	cbz	r6, 80059ec <__kernel_rem_pio2f+0x450>
 80059e8:	eef1 7a67 	vneg.f32	s15, s15
 80059ec:	edc7 7a00 	vstr	s15, [r7]
 80059f0:	e7ae      	b.n	8005950 <__kernel_rem_pio2f+0x3b4>
 80059f2:	ed33 7a01 	vldmdb	r3!, {s14}
 80059f6:	3c01      	subs	r4, #1
 80059f8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80059fc:	e7f1      	b.n	80059e2 <__kernel_rem_pio2f+0x446>
 80059fe:	ed73 7a01 	vldmdb	r3!, {s15}
 8005a02:	3a01      	subs	r2, #1
 8005a04:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005a08:	e7d2      	b.n	80059b0 <__kernel_rem_pio2f+0x414>
 8005a0a:	eef0 7a47 	vmov.f32	s15, s14
 8005a0e:	e7d4      	b.n	80059ba <__kernel_rem_pio2f+0x41e>
 8005a10:	ecb2 7a01 	vldmia	r2!, {s14}
 8005a14:	3301      	adds	r3, #1
 8005a16:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005a1a:	e7d6      	b.n	80059ca <__kernel_rem_pio2f+0x42e>
 8005a1c:	edd2 7a00 	vldr	s15, [r2]
 8005a20:	edd2 6a01 	vldr	s13, [r2, #4]
 8005a24:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8005a28:	3801      	subs	r0, #1
 8005a2a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005a2e:	ed82 7a00 	vstr	s14, [r2]
 8005a32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a36:	edc2 7a01 	vstr	s15, [r2, #4]
 8005a3a:	e798      	b.n	800596e <__kernel_rem_pio2f+0x3d2>
 8005a3c:	edd3 7a00 	vldr	s15, [r3]
 8005a40:	edd3 6a01 	vldr	s13, [r3, #4]
 8005a44:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8005a48:	3a01      	subs	r2, #1
 8005a4a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005a4e:	ed83 7a00 	vstr	s14, [r3]
 8005a52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a56:	edc3 7a01 	vstr	s15, [r3, #4]
 8005a5a:	e78d      	b.n	8005978 <__kernel_rem_pio2f+0x3dc>
 8005a5c:	ed33 7a01 	vldmdb	r3!, {s14}
 8005a60:	3c01      	subs	r4, #1
 8005a62:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005a66:	e78f      	b.n	8005988 <__kernel_rem_pio2f+0x3ec>
 8005a68:	eef1 6a66 	vneg.f32	s13, s13
 8005a6c:	eeb1 7a47 	vneg.f32	s14, s14
 8005a70:	edc7 6a00 	vstr	s13, [r7]
 8005a74:	ed87 7a01 	vstr	s14, [r7, #4]
 8005a78:	eef1 7a67 	vneg.f32	s15, s15
 8005a7c:	e790      	b.n	80059a0 <__kernel_rem_pio2f+0x404>
 8005a7e:	bf00      	nop

08005a80 <scalbnf>:
 8005a80:	ee10 3a10 	vmov	r3, s0
 8005a84:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8005a88:	d02b      	beq.n	8005ae2 <scalbnf+0x62>
 8005a8a:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8005a8e:	d302      	bcc.n	8005a96 <scalbnf+0x16>
 8005a90:	ee30 0a00 	vadd.f32	s0, s0, s0
 8005a94:	4770      	bx	lr
 8005a96:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8005a9a:	d123      	bne.n	8005ae4 <scalbnf+0x64>
 8005a9c:	4b24      	ldr	r3, [pc, #144]	@ (8005b30 <scalbnf+0xb0>)
 8005a9e:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8005b34 <scalbnf+0xb4>
 8005aa2:	4298      	cmp	r0, r3
 8005aa4:	ee20 0a27 	vmul.f32	s0, s0, s15
 8005aa8:	db17      	blt.n	8005ada <scalbnf+0x5a>
 8005aaa:	ee10 3a10 	vmov	r3, s0
 8005aae:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8005ab2:	3a19      	subs	r2, #25
 8005ab4:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8005ab8:	4288      	cmp	r0, r1
 8005aba:	dd15      	ble.n	8005ae8 <scalbnf+0x68>
 8005abc:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8005b38 <scalbnf+0xb8>
 8005ac0:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8005b3c <scalbnf+0xbc>
 8005ac4:	ee10 3a10 	vmov	r3, s0
 8005ac8:	eeb0 7a67 	vmov.f32	s14, s15
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	bfb8      	it	lt
 8005ad0:	eef0 7a66 	vmovlt.f32	s15, s13
 8005ad4:	ee27 0a87 	vmul.f32	s0, s15, s14
 8005ad8:	4770      	bx	lr
 8005ada:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8005b40 <scalbnf+0xc0>
 8005ade:	ee27 0a80 	vmul.f32	s0, s15, s0
 8005ae2:	4770      	bx	lr
 8005ae4:	0dd2      	lsrs	r2, r2, #23
 8005ae6:	e7e5      	b.n	8005ab4 <scalbnf+0x34>
 8005ae8:	4410      	add	r0, r2
 8005aea:	28fe      	cmp	r0, #254	@ 0xfe
 8005aec:	dce6      	bgt.n	8005abc <scalbnf+0x3c>
 8005aee:	2800      	cmp	r0, #0
 8005af0:	dd06      	ble.n	8005b00 <scalbnf+0x80>
 8005af2:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8005af6:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8005afa:	ee00 3a10 	vmov	s0, r3
 8005afe:	4770      	bx	lr
 8005b00:	f110 0f16 	cmn.w	r0, #22
 8005b04:	da09      	bge.n	8005b1a <scalbnf+0x9a>
 8005b06:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8005b40 <scalbnf+0xc0>
 8005b0a:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8005b44 <scalbnf+0xc4>
 8005b0e:	ee10 3a10 	vmov	r3, s0
 8005b12:	eeb0 7a67 	vmov.f32	s14, s15
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	e7d9      	b.n	8005ace <scalbnf+0x4e>
 8005b1a:	3019      	adds	r0, #25
 8005b1c:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8005b20:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8005b24:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8005b48 <scalbnf+0xc8>
 8005b28:	ee07 3a90 	vmov	s15, r3
 8005b2c:	e7d7      	b.n	8005ade <scalbnf+0x5e>
 8005b2e:	bf00      	nop
 8005b30:	ffff3cb0 	.word	0xffff3cb0
 8005b34:	4c000000 	.word	0x4c000000
 8005b38:	7149f2ca 	.word	0x7149f2ca
 8005b3c:	f149f2ca 	.word	0xf149f2ca
 8005b40:	0da24260 	.word	0x0da24260
 8005b44:	8da24260 	.word	0x8da24260
 8005b48:	33000000 	.word	0x33000000

08005b4c <floorf>:
 8005b4c:	ee10 3a10 	vmov	r3, s0
 8005b50:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8005b54:	3a7f      	subs	r2, #127	@ 0x7f
 8005b56:	2a16      	cmp	r2, #22
 8005b58:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005b5c:	dc2b      	bgt.n	8005bb6 <floorf+0x6a>
 8005b5e:	2a00      	cmp	r2, #0
 8005b60:	da12      	bge.n	8005b88 <floorf+0x3c>
 8005b62:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8005bc8 <floorf+0x7c>
 8005b66:	ee30 0a27 	vadd.f32	s0, s0, s15
 8005b6a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8005b6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b72:	dd06      	ble.n	8005b82 <floorf+0x36>
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	da24      	bge.n	8005bc2 <floorf+0x76>
 8005b78:	2900      	cmp	r1, #0
 8005b7a:	4b14      	ldr	r3, [pc, #80]	@ (8005bcc <floorf+0x80>)
 8005b7c:	bf08      	it	eq
 8005b7e:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 8005b82:	ee00 3a10 	vmov	s0, r3
 8005b86:	4770      	bx	lr
 8005b88:	4911      	ldr	r1, [pc, #68]	@ (8005bd0 <floorf+0x84>)
 8005b8a:	4111      	asrs	r1, r2
 8005b8c:	420b      	tst	r3, r1
 8005b8e:	d0fa      	beq.n	8005b86 <floorf+0x3a>
 8005b90:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 8005bc8 <floorf+0x7c>
 8005b94:	ee30 0a27 	vadd.f32	s0, s0, s15
 8005b98:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8005b9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ba0:	ddef      	ble.n	8005b82 <floorf+0x36>
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	bfbe      	ittt	lt
 8005ba6:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 8005baa:	fa40 f202 	asrlt.w	r2, r0, r2
 8005bae:	189b      	addlt	r3, r3, r2
 8005bb0:	ea23 0301 	bic.w	r3, r3, r1
 8005bb4:	e7e5      	b.n	8005b82 <floorf+0x36>
 8005bb6:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8005bba:	d3e4      	bcc.n	8005b86 <floorf+0x3a>
 8005bbc:	ee30 0a00 	vadd.f32	s0, s0, s0
 8005bc0:	4770      	bx	lr
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	e7dd      	b.n	8005b82 <floorf+0x36>
 8005bc6:	bf00      	nop
 8005bc8:	7149f2ca 	.word	0x7149f2ca
 8005bcc:	bf800000 	.word	0xbf800000
 8005bd0:	007fffff 	.word	0x007fffff

08005bd4 <_init>:
 8005bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bd6:	bf00      	nop
 8005bd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bda:	bc08      	pop	{r3}
 8005bdc:	469e      	mov	lr, r3
 8005bde:	4770      	bx	lr

08005be0 <_fini>:
 8005be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005be2:	bf00      	nop
 8005be4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005be6:	bc08      	pop	{r3}
 8005be8:	469e      	mov	lr, r3
 8005bea:	4770      	bx	lr
