
ADC1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009b7c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004a0  08009d10  08009d10  0000ad10  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a1b0  0800a1b0  0000c1d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800a1b0  0800a1b0  0000b1b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a1b8  0800a1b8  0000c1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a1b8  0800a1b8  0000b1b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a1bc  0800a1bc  0000b1bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800a1c0  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000280  200001d4  0800a394  0000c1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000454  0800a394  0000c454  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ed7c  00000000  00000000  0000c204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f9b  00000000  00000000  0001af80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d50  00000000  00000000  0001cf20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a3b  00000000  00000000  0001dc70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000284e7  00000000  00000000  0001e6ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f3dd  00000000  00000000  00046b92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fc81f  00000000  00000000  00055f6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015278e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004cac  00000000  00000000  001527d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004d  00000000  00000000  00157480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009cf4 	.word	0x08009cf4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	08009cf4 	.word	0x08009cf4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a0 	b.w	8000fe0 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	460c      	mov	r4, r1
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d14e      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d30:	4694      	mov	ip, r2
 8000d32:	458c      	cmp	ip, r1
 8000d34:	4686      	mov	lr, r0
 8000d36:	fab2 f282 	clz	r2, r2
 8000d3a:	d962      	bls.n	8000e02 <__udivmoddi4+0xde>
 8000d3c:	b14a      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d3e:	f1c2 0320 	rsb	r3, r2, #32
 8000d42:	4091      	lsls	r1, r2
 8000d44:	fa20 f303 	lsr.w	r3, r0, r3
 8000d48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4c:	4319      	orrs	r1, r3
 8000d4e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d52:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d56:	fa1f f68c 	uxth.w	r6, ip
 8000d5a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d5e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d62:	fb07 1114 	mls	r1, r7, r4, r1
 8000d66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6a:	fb04 f106 	mul.w	r1, r4, r6
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d7a:	f080 8112 	bcs.w	8000fa2 <__udivmoddi4+0x27e>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 810f 	bls.w	8000fa2 <__udivmoddi4+0x27e>
 8000d84:	3c02      	subs	r4, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a59      	subs	r1, r3, r1
 8000d8a:	fa1f f38e 	uxth.w	r3, lr
 8000d8e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d92:	fb07 1110 	mls	r1, r7, r0, r1
 8000d96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9a:	fb00 f606 	mul.w	r6, r0, r6
 8000d9e:	429e      	cmp	r6, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x94>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000daa:	f080 80fc 	bcs.w	8000fa6 <__udivmoddi4+0x282>
 8000dae:	429e      	cmp	r6, r3
 8000db0:	f240 80f9 	bls.w	8000fa6 <__udivmoddi4+0x282>
 8000db4:	4463      	add	r3, ip
 8000db6:	3802      	subs	r0, #2
 8000db8:	1b9b      	subs	r3, r3, r6
 8000dba:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	b11d      	cbz	r5, 8000dca <__udivmoddi4+0xa6>
 8000dc2:	40d3      	lsrs	r3, r2
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d905      	bls.n	8000dde <__udivmoddi4+0xba>
 8000dd2:	b10d      	cbz	r5, 8000dd8 <__udivmoddi4+0xb4>
 8000dd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e7f5      	b.n	8000dca <__udivmoddi4+0xa6>
 8000dde:	fab3 f183 	clz	r1, r3
 8000de2:	2900      	cmp	r1, #0
 8000de4:	d146      	bne.n	8000e74 <__udivmoddi4+0x150>
 8000de6:	42a3      	cmp	r3, r4
 8000de8:	d302      	bcc.n	8000df0 <__udivmoddi4+0xcc>
 8000dea:	4290      	cmp	r0, r2
 8000dec:	f0c0 80f0 	bcc.w	8000fd0 <__udivmoddi4+0x2ac>
 8000df0:	1a86      	subs	r6, r0, r2
 8000df2:	eb64 0303 	sbc.w	r3, r4, r3
 8000df6:	2001      	movs	r0, #1
 8000df8:	2d00      	cmp	r5, #0
 8000dfa:	d0e6      	beq.n	8000dca <__udivmoddi4+0xa6>
 8000dfc:	e9c5 6300 	strd	r6, r3, [r5]
 8000e00:	e7e3      	b.n	8000dca <__udivmoddi4+0xa6>
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	f040 8090 	bne.w	8000f28 <__udivmoddi4+0x204>
 8000e08:	eba1 040c 	sub.w	r4, r1, ip
 8000e0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e10:	fa1f f78c 	uxth.w	r7, ip
 8000e14:	2101      	movs	r1, #1
 8000e16:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e1a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e1e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e26:	fb07 f006 	mul.w	r0, r7, r6
 8000e2a:	4298      	cmp	r0, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x11c>
 8000e2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e32:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x11a>
 8000e38:	4298      	cmp	r0, r3
 8000e3a:	f200 80cd 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e3e:	4626      	mov	r6, r4
 8000e40:	1a1c      	subs	r4, r3, r0
 8000e42:	fa1f f38e 	uxth.w	r3, lr
 8000e46:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e4a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e4e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e52:	fb00 f707 	mul.w	r7, r0, r7
 8000e56:	429f      	cmp	r7, r3
 8000e58:	d908      	bls.n	8000e6c <__udivmoddi4+0x148>
 8000e5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e62:	d202      	bcs.n	8000e6a <__udivmoddi4+0x146>
 8000e64:	429f      	cmp	r7, r3
 8000e66:	f200 80b0 	bhi.w	8000fca <__udivmoddi4+0x2a6>
 8000e6a:	4620      	mov	r0, r4
 8000e6c:	1bdb      	subs	r3, r3, r7
 8000e6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e72:	e7a5      	b.n	8000dc0 <__udivmoddi4+0x9c>
 8000e74:	f1c1 0620 	rsb	r6, r1, #32
 8000e78:	408b      	lsls	r3, r1
 8000e7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7e:	431f      	orrs	r7, r3
 8000e80:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e84:	fa04 f301 	lsl.w	r3, r4, r1
 8000e88:	ea43 030c 	orr.w	r3, r3, ip
 8000e8c:	40f4      	lsrs	r4, r6
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	0c38      	lsrs	r0, r7, #16
 8000e94:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e98:	fbb4 fef0 	udiv	lr, r4, r0
 8000e9c:	fa1f fc87 	uxth.w	ip, r7
 8000ea0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ea4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ea8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eac:	45a1      	cmp	r9, r4
 8000eae:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb2:	d90a      	bls.n	8000eca <__udivmoddi4+0x1a6>
 8000eb4:	193c      	adds	r4, r7, r4
 8000eb6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eba:	f080 8084 	bcs.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ebe:	45a1      	cmp	r9, r4
 8000ec0:	f240 8081 	bls.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ec4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ec8:	443c      	add	r4, r7
 8000eca:	eba4 0409 	sub.w	r4, r4, r9
 8000ece:	fa1f f983 	uxth.w	r9, r3
 8000ed2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ed6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eda:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ede:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ee2:	45a4      	cmp	ip, r4
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x1d2>
 8000ee6:	193c      	adds	r4, r7, r4
 8000ee8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000eec:	d267      	bcs.n	8000fbe <__udivmoddi4+0x29a>
 8000eee:	45a4      	cmp	ip, r4
 8000ef0:	d965      	bls.n	8000fbe <__udivmoddi4+0x29a>
 8000ef2:	3b02      	subs	r3, #2
 8000ef4:	443c      	add	r4, r7
 8000ef6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000efa:	fba0 9302 	umull	r9, r3, r0, r2
 8000efe:	eba4 040c 	sub.w	r4, r4, ip
 8000f02:	429c      	cmp	r4, r3
 8000f04:	46ce      	mov	lr, r9
 8000f06:	469c      	mov	ip, r3
 8000f08:	d351      	bcc.n	8000fae <__udivmoddi4+0x28a>
 8000f0a:	d04e      	beq.n	8000faa <__udivmoddi4+0x286>
 8000f0c:	b155      	cbz	r5, 8000f24 <__udivmoddi4+0x200>
 8000f0e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f12:	eb64 040c 	sbc.w	r4, r4, ip
 8000f16:	fa04 f606 	lsl.w	r6, r4, r6
 8000f1a:	40cb      	lsrs	r3, r1
 8000f1c:	431e      	orrs	r6, r3
 8000f1e:	40cc      	lsrs	r4, r1
 8000f20:	e9c5 6400 	strd	r6, r4, [r5]
 8000f24:	2100      	movs	r1, #0
 8000f26:	e750      	b.n	8000dca <__udivmoddi4+0xa6>
 8000f28:	f1c2 0320 	rsb	r3, r2, #32
 8000f2c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f30:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f34:	fa24 f303 	lsr.w	r3, r4, r3
 8000f38:	4094      	lsls	r4, r2
 8000f3a:	430c      	orrs	r4, r1
 8000f3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f40:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f44:	fa1f f78c 	uxth.w	r7, ip
 8000f48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f4c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f50:	0c23      	lsrs	r3, r4, #16
 8000f52:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f56:	fb00 f107 	mul.w	r1, r0, r7
 8000f5a:	4299      	cmp	r1, r3
 8000f5c:	d908      	bls.n	8000f70 <__udivmoddi4+0x24c>
 8000f5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f62:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f66:	d22c      	bcs.n	8000fc2 <__udivmoddi4+0x29e>
 8000f68:	4299      	cmp	r1, r3
 8000f6a:	d92a      	bls.n	8000fc2 <__udivmoddi4+0x29e>
 8000f6c:	3802      	subs	r0, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	1a5b      	subs	r3, r3, r1
 8000f72:	b2a4      	uxth	r4, r4
 8000f74:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f78:	fb08 3311 	mls	r3, r8, r1, r3
 8000f7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f80:	fb01 f307 	mul.w	r3, r1, r7
 8000f84:	42a3      	cmp	r3, r4
 8000f86:	d908      	bls.n	8000f9a <__udivmoddi4+0x276>
 8000f88:	eb1c 0404 	adds.w	r4, ip, r4
 8000f8c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f90:	d213      	bcs.n	8000fba <__udivmoddi4+0x296>
 8000f92:	42a3      	cmp	r3, r4
 8000f94:	d911      	bls.n	8000fba <__udivmoddi4+0x296>
 8000f96:	3902      	subs	r1, #2
 8000f98:	4464      	add	r4, ip
 8000f9a:	1ae4      	subs	r4, r4, r3
 8000f9c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fa0:	e739      	b.n	8000e16 <__udivmoddi4+0xf2>
 8000fa2:	4604      	mov	r4, r0
 8000fa4:	e6f0      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fa6:	4608      	mov	r0, r1
 8000fa8:	e706      	b.n	8000db8 <__udivmoddi4+0x94>
 8000faa:	45c8      	cmp	r8, r9
 8000fac:	d2ae      	bcs.n	8000f0c <__udivmoddi4+0x1e8>
 8000fae:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fb2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fb6:	3801      	subs	r0, #1
 8000fb8:	e7a8      	b.n	8000f0c <__udivmoddi4+0x1e8>
 8000fba:	4631      	mov	r1, r6
 8000fbc:	e7ed      	b.n	8000f9a <__udivmoddi4+0x276>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	e799      	b.n	8000ef6 <__udivmoddi4+0x1d2>
 8000fc2:	4630      	mov	r0, r6
 8000fc4:	e7d4      	b.n	8000f70 <__udivmoddi4+0x24c>
 8000fc6:	46d6      	mov	lr, sl
 8000fc8:	e77f      	b.n	8000eca <__udivmoddi4+0x1a6>
 8000fca:	4463      	add	r3, ip
 8000fcc:	3802      	subs	r0, #2
 8000fce:	e74d      	b.n	8000e6c <__udivmoddi4+0x148>
 8000fd0:	4606      	mov	r6, r0
 8000fd2:	4623      	mov	r3, r4
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e70f      	b.n	8000df8 <__udivmoddi4+0xd4>
 8000fd8:	3e02      	subs	r6, #2
 8000fda:	4463      	add	r3, ip
 8000fdc:	e730      	b.n	8000e40 <__udivmoddi4+0x11c>
 8000fde:	bf00      	nop

08000fe0 <__aeabi_idiv0>:
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop

08000fe4 <main>:
UART_HandleTypeDef huart2;
char msg[30];
uint16_t rawValue;
float temp;

int main(void) {
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fe8:	f000 fbfc 	bl	80017e4 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8000fec:	f000 f8f6 	bl	80011dc <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ff0:	f000 f970 	bl	80012d4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000ff4:	f000 f944 	bl	8001280 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000ff8:	f000 f88c 	bl	8001114 <MX_ADC1_Init>

  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8000ffc:	217f      	movs	r1, #127	@ 0x7f
 8000ffe:	4839      	ldr	r0, [pc, #228]	@ (80010e4 <main+0x100>)
 8001000:	f001 fe90 	bl	8002d24 <HAL_ADCEx_Calibration_Start>

  /* Starts the ADC */
  HAL_ADC_Start(&hadc1);
 8001004:	4837      	ldr	r0, [pc, #220]	@ (80010e4 <main+0x100>)
 8001006:	f000 ffc3 	bl	8001f90 <HAL_ADC_Start>

  while (1) {
    HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 800100a:	f04f 31ff 	mov.w	r1, #4294967295
 800100e:	4835      	ldr	r0, [pc, #212]	@ (80010e4 <main+0x100>)
 8001010:	f001 f878 	bl	8002104 <HAL_ADC_PollForConversion>

    rawValue = HAL_ADC_GetValue(&hadc1);
 8001014:	4833      	ldr	r0, [pc, #204]	@ (80010e4 <main+0x100>)
 8001016:	f001 f94d 	bl	80022b4 <HAL_ADC_GetValue>
 800101a:	4603      	mov	r3, r0
 800101c:	b29a      	uxth	r2, r3
 800101e:	4b32      	ldr	r3, [pc, #200]	@ (80010e8 <main+0x104>)
 8001020:	801a      	strh	r2, [r3, #0]
    temp = ((float)rawValue) / 4095 * 3300;
 8001022:	4b31      	ldr	r3, [pc, #196]	@ (80010e8 <main+0x104>)
 8001024:	881b      	ldrh	r3, [r3, #0]
 8001026:	ee07 3a90 	vmov	s15, r3
 800102a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800102e:	eddf 6a2f 	vldr	s13, [pc, #188]	@ 80010ec <main+0x108>
 8001032:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001036:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 80010f0 <main+0x10c>
 800103a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800103e:	4b2d      	ldr	r3, [pc, #180]	@ (80010f4 <main+0x110>)
 8001040:	edc3 7a00 	vstr	s15, [r3]
    temp = ((temp - 760.0) / 2.5) + 25;
 8001044:	4b2b      	ldr	r3, [pc, #172]	@ (80010f4 <main+0x110>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4618      	mov	r0, r3
 800104a:	f7ff fa7d 	bl	8000548 <__aeabi_f2d>
 800104e:	f04f 0200 	mov.w	r2, #0
 8001052:	4b29      	ldr	r3, [pc, #164]	@ (80010f8 <main+0x114>)
 8001054:	f7ff f918 	bl	8000288 <__aeabi_dsub>
 8001058:	4602      	mov	r2, r0
 800105a:	460b      	mov	r3, r1
 800105c:	4610      	mov	r0, r2
 800105e:	4619      	mov	r1, r3
 8001060:	f04f 0200 	mov.w	r2, #0
 8001064:	4b25      	ldr	r3, [pc, #148]	@ (80010fc <main+0x118>)
 8001066:	f7ff fbf1 	bl	800084c <__aeabi_ddiv>
 800106a:	4602      	mov	r2, r0
 800106c:	460b      	mov	r3, r1
 800106e:	4610      	mov	r0, r2
 8001070:	4619      	mov	r1, r3
 8001072:	f04f 0200 	mov.w	r2, #0
 8001076:	4b22      	ldr	r3, [pc, #136]	@ (8001100 <main+0x11c>)
 8001078:	f7ff f908 	bl	800028c <__adddf3>
 800107c:	4602      	mov	r2, r0
 800107e:	460b      	mov	r3, r1
 8001080:	4610      	mov	r0, r2
 8001082:	4619      	mov	r1, r3
 8001084:	f7ff fdb0 	bl	8000be8 <__aeabi_d2f>
 8001088:	4603      	mov	r3, r0
 800108a:	4a1a      	ldr	r2, [pc, #104]	@ (80010f4 <main+0x110>)
 800108c:	6013      	str	r3, [r2, #0]

    sprintf(msg, "ADC rawValue: %hu\r\n", rawValue);
 800108e:	4b16      	ldr	r3, [pc, #88]	@ (80010e8 <main+0x104>)
 8001090:	881b      	ldrh	r3, [r3, #0]
 8001092:	461a      	mov	r2, r3
 8001094:	491b      	ldr	r1, [pc, #108]	@ (8001104 <main+0x120>)
 8001096:	481c      	ldr	r0, [pc, #112]	@ (8001108 <main+0x124>)
 8001098:	f005 f9f4 	bl	8006484 <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 800109c:	481a      	ldr	r0, [pc, #104]	@ (8001108 <main+0x124>)
 800109e:	f7ff f8e7 	bl	8000270 <strlen>
 80010a2:	4603      	mov	r3, r0
 80010a4:	b29a      	uxth	r2, r3
 80010a6:	f04f 33ff 	mov.w	r3, #4294967295
 80010aa:	4917      	ldr	r1, [pc, #92]	@ (8001108 <main+0x124>)
 80010ac:	4817      	ldr	r0, [pc, #92]	@ (800110c <main+0x128>)
 80010ae:	f003 fd5f 	bl	8004b70 <HAL_UART_Transmit>

    sprintf(msg, "Temperature: %f\r\n", temp);
 80010b2:	4b10      	ldr	r3, [pc, #64]	@ (80010f4 <main+0x110>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	4618      	mov	r0, r3
 80010b8:	f7ff fa46 	bl	8000548 <__aeabi_f2d>
 80010bc:	4602      	mov	r2, r0
 80010be:	460b      	mov	r3, r1
 80010c0:	4913      	ldr	r1, [pc, #76]	@ (8001110 <main+0x12c>)
 80010c2:	4811      	ldr	r0, [pc, #68]	@ (8001108 <main+0x124>)
 80010c4:	f005 f9de 	bl	8006484 <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 80010c8:	480f      	ldr	r0, [pc, #60]	@ (8001108 <main+0x124>)
 80010ca:	f7ff f8d1 	bl	8000270 <strlen>
 80010ce:	4603      	mov	r3, r0
 80010d0:	b29a      	uxth	r2, r3
 80010d2:	f04f 33ff 	mov.w	r3, #4294967295
 80010d6:	490c      	ldr	r1, [pc, #48]	@ (8001108 <main+0x124>)
 80010d8:	480c      	ldr	r0, [pc, #48]	@ (800110c <main+0x128>)
 80010da:	f003 fd49 	bl	8004b70 <HAL_UART_Transmit>
    HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80010de:	bf00      	nop
 80010e0:	e793      	b.n	800100a <main+0x26>
 80010e2:	bf00      	nop
 80010e4:	200001f0 	.word	0x200001f0
 80010e8:	200002fa 	.word	0x200002fa
 80010ec:	457ff000 	.word	0x457ff000
 80010f0:	454e4000 	.word	0x454e4000
 80010f4:	200002fc 	.word	0x200002fc
 80010f8:	4087c000 	.word	0x4087c000
 80010fc:	40040000 	.word	0x40040000
 8001100:	40390000 	.word	0x40390000
 8001104:	08009d10 	.word	0x08009d10
 8001108:	200002dc 	.word	0x200002dc
 800110c:	20000254 	.word	0x20000254
 8001110:	08009d24 	.word	0x08009d24

08001114 <MX_ADC1_Init>:
  }
}

static void MX_ADC1_Init(void) {
 8001114:	b580      	push	{r7, lr}
 8001116:	b08a      	sub	sp, #40	@ 0x28
 8001118:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800111a:	f107 0310 	add.w	r3, r7, #16
 800111e:	2200      	movs	r2, #0
 8001120:	601a      	str	r2, [r3, #0]
 8001122:	605a      	str	r2, [r3, #4]
 8001124:	609a      	str	r2, [r3, #8]
 8001126:	60da      	str	r2, [r3, #12]
 8001128:	611a      	str	r2, [r3, #16]
 800112a:	615a      	str	r2, [r3, #20]
  ADC_MultiModeTypeDef multimode = {0};
 800112c:	1d3b      	adds	r3, r7, #4
 800112e:	2200      	movs	r2, #0
 8001130:	601a      	str	r2, [r3, #0]
 8001132:	605a      	str	r2, [r3, #4]
 8001134:	609a      	str	r2, [r3, #8]

  /** Configure the global features of the ADC (Clock, Resolution,
   *  Data Alignment and number of conversion) */
  hadc1.Instance = ADC1;
 8001136:	4b26      	ldr	r3, [pc, #152]	@ (80011d0 <MX_ADC1_Init+0xbc>)
 8001138:	4a26      	ldr	r2, [pc, #152]	@ (80011d4 <MX_ADC1_Init+0xc0>)
 800113a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800113c:	4b24      	ldr	r3, [pc, #144]	@ (80011d0 <MX_ADC1_Init+0xbc>)
 800113e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001142:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001144:	4b22      	ldr	r3, [pc, #136]	@ (80011d0 <MX_ADC1_Init+0xbc>)
 8001146:	2200      	movs	r2, #0
 8001148:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800114a:	4b21      	ldr	r3, [pc, #132]	@ (80011d0 <MX_ADC1_Init+0xbc>)
 800114c:	2200      	movs	r2, #0
 800114e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001150:	4b1f      	ldr	r3, [pc, #124]	@ (80011d0 <MX_ADC1_Init+0xbc>)
 8001152:	2201      	movs	r2, #1
 8001154:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001156:	4b1e      	ldr	r3, [pc, #120]	@ (80011d0 <MX_ADC1_Init+0xbc>)
 8001158:	2200      	movs	r2, #0
 800115a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800115e:	4b1c      	ldr	r3, [pc, #112]	@ (80011d0 <MX_ADC1_Init+0xbc>)
 8001160:	2200      	movs	r2, #0
 8001162:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001164:	4b1a      	ldr	r3, [pc, #104]	@ (80011d0 <MX_ADC1_Init+0xbc>)
 8001166:	2200      	movs	r2, #0
 8001168:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800116a:	4b19      	ldr	r3, [pc, #100]	@ (80011d0 <MX_ADC1_Init+0xbc>)
 800116c:	2200      	movs	r2, #0
 800116e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001170:	4b17      	ldr	r3, [pc, #92]	@ (80011d0 <MX_ADC1_Init+0xbc>)
 8001172:	2201      	movs	r2, #1
 8001174:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001176:	4b16      	ldr	r3, [pc, #88]	@ (80011d0 <MX_ADC1_Init+0xbc>)
 8001178:	2200      	movs	r2, #0
 800117a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800117e:	4b14      	ldr	r3, [pc, #80]	@ (80011d0 <MX_ADC1_Init+0xbc>)
 8001180:	2208      	movs	r2, #8
 8001182:	615a      	str	r2, [r3, #20]
  HAL_ADC_Init(&hadc1);
 8001184:	4812      	ldr	r0, [pc, #72]	@ (80011d0 <MX_ADC1_Init+0xbc>)
 8001186:	f000 fdb3 	bl	8001cf0 <HAL_ADC_Init>

  /** Configure the ADC multi-mode
   */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800118a:	2300      	movs	r3, #0
 800118c:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800118e:	1d3b      	adds	r3, r7, #4
 8001190:	4619      	mov	r1, r3
 8001192:	480f      	ldr	r0, [pc, #60]	@ (80011d0 <MX_ADC1_Init+0xbc>)
 8001194:	f001 fe26 	bl	8002de4 <HAL_ADCEx_MultiModeConfigChannel>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800119e:	f000 f8ff 	bl	80013a0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding
   *  rank in the sequencer and its sample time. */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80011a2:	4b0d      	ldr	r3, [pc, #52]	@ (80011d8 <MX_ADC1_Init+0xc4>)
 80011a4:	613b      	str	r3, [r7, #16]
  sConfig.Rank = 1;
 80011a6:	2301      	movs	r3, #1
 80011a8:	617b      	str	r3, [r7, #20]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 80011aa:	2307      	movs	r3, #7
 80011ac:	61bb      	str	r3, [r7, #24]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80011ae:	237f      	movs	r3, #127	@ 0x7f
 80011b0:	61fb      	str	r3, [r7, #28]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80011b2:	2304      	movs	r3, #4
 80011b4:	623b      	str	r3, [r7, #32]
  sConfig.Offset = 0;
 80011b6:	2300      	movs	r3, #0
 80011b8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 80011ba:	f107 0310 	add.w	r3, r7, #16
 80011be:	4619      	mov	r1, r3
 80011c0:	4803      	ldr	r0, [pc, #12]	@ (80011d0 <MX_ADC1_Init+0xbc>)
 80011c2:	f001 f885 	bl	80022d0 <HAL_ADC_ConfigChannel>
}
 80011c6:	bf00      	nop
 80011c8:	3728      	adds	r7, #40	@ 0x28
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	200001f0 	.word	0x200001f0
 80011d4:	50040000 	.word	0x50040000
 80011d8:	c7520000 	.word	0xc7520000

080011dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b096      	sub	sp, #88	@ 0x58
 80011e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011e2:	f107 0314 	add.w	r3, r7, #20
 80011e6:	2244      	movs	r2, #68	@ 0x44
 80011e8:	2100      	movs	r1, #0
 80011ea:	4618      	mov	r0, r3
 80011ec:	f005 f9ad 	bl	800654a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011f0:	463b      	mov	r3, r7
 80011f2:	2200      	movs	r2, #0
 80011f4:	601a      	str	r2, [r3, #0]
 80011f6:	605a      	str	r2, [r3, #4]
 80011f8:	609a      	str	r2, [r3, #8]
 80011fa:	60da      	str	r2, [r3, #12]
 80011fc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80011fe:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001202:	f002 f955 	bl	80034b0 <HAL_PWREx_ControlVoltageScaling>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d001      	beq.n	8001210 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800120c:	f000 f8c8 	bl	80013a0 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001210:	2302      	movs	r3, #2
 8001212:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001214:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001218:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800121a:	2310      	movs	r3, #16
 800121c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800121e:	2302      	movs	r3, #2
 8001220:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001222:	2302      	movs	r3, #2
 8001224:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001226:	2301      	movs	r3, #1
 8001228:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800122a:	230a      	movs	r3, #10
 800122c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800122e:	2307      	movs	r3, #7
 8001230:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001232:	2302      	movs	r3, #2
 8001234:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001236:	2302      	movs	r3, #2
 8001238:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800123a:	f107 0314 	add.w	r3, r7, #20
 800123e:	4618      	mov	r0, r3
 8001240:	f002 f98c 	bl	800355c <HAL_RCC_OscConfig>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800124a:	f000 f8a9 	bl	80013a0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800124e:	230f      	movs	r3, #15
 8001250:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001252:	2303      	movs	r3, #3
 8001254:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001256:	2300      	movs	r3, #0
 8001258:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800125a:	2300      	movs	r3, #0
 800125c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800125e:	2300      	movs	r3, #0
 8001260:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001262:	463b      	mov	r3, r7
 8001264:	2104      	movs	r1, #4
 8001266:	4618      	mov	r0, r3
 8001268:	f002 fd54 	bl	8003d14 <HAL_RCC_ClockConfig>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001272:	f000 f895 	bl	80013a0 <Error_Handler>
  }
}
 8001276:	bf00      	nop
 8001278:	3758      	adds	r7, #88	@ 0x58
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
	...

08001280 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001284:	4b11      	ldr	r3, [pc, #68]	@ (80012cc <MX_USART2_UART_Init+0x4c>)
 8001286:	4a12      	ldr	r2, [pc, #72]	@ (80012d0 <MX_USART2_UART_Init+0x50>)
 8001288:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800128a:	4b10      	ldr	r3, [pc, #64]	@ (80012cc <MX_USART2_UART_Init+0x4c>)
 800128c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001290:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001292:	4b0e      	ldr	r3, [pc, #56]	@ (80012cc <MX_USART2_UART_Init+0x4c>)
 8001294:	2200      	movs	r2, #0
 8001296:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001298:	4b0c      	ldr	r3, [pc, #48]	@ (80012cc <MX_USART2_UART_Init+0x4c>)
 800129a:	2200      	movs	r2, #0
 800129c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800129e:	4b0b      	ldr	r3, [pc, #44]	@ (80012cc <MX_USART2_UART_Init+0x4c>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80012a4:	4b09      	ldr	r3, [pc, #36]	@ (80012cc <MX_USART2_UART_Init+0x4c>)
 80012a6:	220c      	movs	r2, #12
 80012a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012aa:	4b08      	ldr	r3, [pc, #32]	@ (80012cc <MX_USART2_UART_Init+0x4c>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80012b0:	4b06      	ldr	r3, [pc, #24]	@ (80012cc <MX_USART2_UART_Init+0x4c>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80012b6:	4805      	ldr	r0, [pc, #20]	@ (80012cc <MX_USART2_UART_Init+0x4c>)
 80012b8:	f003 fc0c 	bl	8004ad4 <HAL_UART_Init>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80012c2:	f000 f86d 	bl	80013a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80012c6:	bf00      	nop
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	20000254 	.word	0x20000254
 80012d0:	40004400 	.word	0x40004400

080012d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b08a      	sub	sp, #40	@ 0x28
 80012d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012da:	f107 0314 	add.w	r3, r7, #20
 80012de:	2200      	movs	r2, #0
 80012e0:	601a      	str	r2, [r3, #0]
 80012e2:	605a      	str	r2, [r3, #4]
 80012e4:	609a      	str	r2, [r3, #8]
 80012e6:	60da      	str	r2, [r3, #12]
 80012e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012ea:	4b2b      	ldr	r3, [pc, #172]	@ (8001398 <MX_GPIO_Init+0xc4>)
 80012ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012ee:	4a2a      	ldr	r2, [pc, #168]	@ (8001398 <MX_GPIO_Init+0xc4>)
 80012f0:	f043 0304 	orr.w	r3, r3, #4
 80012f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012f6:	4b28      	ldr	r3, [pc, #160]	@ (8001398 <MX_GPIO_Init+0xc4>)
 80012f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012fa:	f003 0304 	and.w	r3, r3, #4
 80012fe:	613b      	str	r3, [r7, #16]
 8001300:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001302:	4b25      	ldr	r3, [pc, #148]	@ (8001398 <MX_GPIO_Init+0xc4>)
 8001304:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001306:	4a24      	ldr	r2, [pc, #144]	@ (8001398 <MX_GPIO_Init+0xc4>)
 8001308:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800130c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800130e:	4b22      	ldr	r3, [pc, #136]	@ (8001398 <MX_GPIO_Init+0xc4>)
 8001310:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001312:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001316:	60fb      	str	r3, [r7, #12]
 8001318:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800131a:	4b1f      	ldr	r3, [pc, #124]	@ (8001398 <MX_GPIO_Init+0xc4>)
 800131c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800131e:	4a1e      	ldr	r2, [pc, #120]	@ (8001398 <MX_GPIO_Init+0xc4>)
 8001320:	f043 0301 	orr.w	r3, r3, #1
 8001324:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001326:	4b1c      	ldr	r3, [pc, #112]	@ (8001398 <MX_GPIO_Init+0xc4>)
 8001328:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800132a:	f003 0301 	and.w	r3, r3, #1
 800132e:	60bb      	str	r3, [r7, #8]
 8001330:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001332:	4b19      	ldr	r3, [pc, #100]	@ (8001398 <MX_GPIO_Init+0xc4>)
 8001334:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001336:	4a18      	ldr	r2, [pc, #96]	@ (8001398 <MX_GPIO_Init+0xc4>)
 8001338:	f043 0302 	orr.w	r3, r3, #2
 800133c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800133e:	4b16      	ldr	r3, [pc, #88]	@ (8001398 <MX_GPIO_Init+0xc4>)
 8001340:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001342:	f003 0302 	and.w	r3, r3, #2
 8001346:	607b      	str	r3, [r7, #4]
 8001348:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800134a:	2200      	movs	r2, #0
 800134c:	2120      	movs	r1, #32
 800134e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001352:	f002 f887 	bl	8003464 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001356:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800135a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800135c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001360:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001362:	2300      	movs	r3, #0
 8001364:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001366:	f107 0314 	add.w	r3, r7, #20
 800136a:	4619      	mov	r1, r3
 800136c:	480b      	ldr	r0, [pc, #44]	@ (800139c <MX_GPIO_Init+0xc8>)
 800136e:	f001 fecf 	bl	8003110 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001372:	2320      	movs	r3, #32
 8001374:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001376:	2301      	movs	r3, #1
 8001378:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137a:	2300      	movs	r3, #0
 800137c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800137e:	2300      	movs	r3, #0
 8001380:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001382:	f107 0314 	add.w	r3, r7, #20
 8001386:	4619      	mov	r1, r3
 8001388:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800138c:	f001 fec0 	bl	8003110 <HAL_GPIO_Init>

}
 8001390:	bf00      	nop
 8001392:	3728      	adds	r7, #40	@ 0x28
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	40021000 	.word	0x40021000
 800139c:	48000800 	.word	0x48000800

080013a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013a4:	b672      	cpsid	i
}
 80013a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013a8:	bf00      	nop
 80013aa:	e7fd      	b.n	80013a8 <Error_Handler+0x8>

080013ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b083      	sub	sp, #12
 80013b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013b2:	4b0f      	ldr	r3, [pc, #60]	@ (80013f0 <HAL_MspInit+0x44>)
 80013b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013b6:	4a0e      	ldr	r2, [pc, #56]	@ (80013f0 <HAL_MspInit+0x44>)
 80013b8:	f043 0301 	orr.w	r3, r3, #1
 80013bc:	6613      	str	r3, [r2, #96]	@ 0x60
 80013be:	4b0c      	ldr	r3, [pc, #48]	@ (80013f0 <HAL_MspInit+0x44>)
 80013c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013c2:	f003 0301 	and.w	r3, r3, #1
 80013c6:	607b      	str	r3, [r7, #4]
 80013c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013ca:	4b09      	ldr	r3, [pc, #36]	@ (80013f0 <HAL_MspInit+0x44>)
 80013cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013ce:	4a08      	ldr	r2, [pc, #32]	@ (80013f0 <HAL_MspInit+0x44>)
 80013d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013d4:	6593      	str	r3, [r2, #88]	@ 0x58
 80013d6:	4b06      	ldr	r3, [pc, #24]	@ (80013f0 <HAL_MspInit+0x44>)
 80013d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013de:	603b      	str	r3, [r7, #0]
 80013e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013e2:	bf00      	nop
 80013e4:	370c      	adds	r7, #12
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr
 80013ee:	bf00      	nop
 80013f0:	40021000 	.word	0x40021000

080013f4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b0ac      	sub	sp, #176	@ 0xb0
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013fc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001400:	2200      	movs	r2, #0
 8001402:	601a      	str	r2, [r3, #0]
 8001404:	605a      	str	r2, [r3, #4]
 8001406:	609a      	str	r2, [r3, #8]
 8001408:	60da      	str	r2, [r3, #12]
 800140a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800140c:	f107 0314 	add.w	r3, r7, #20
 8001410:	2288      	movs	r2, #136	@ 0x88
 8001412:	2100      	movs	r1, #0
 8001414:	4618      	mov	r0, r3
 8001416:	f005 f898 	bl	800654a <memset>
  if(hadc->Instance==ADC1)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4a27      	ldr	r2, [pc, #156]	@ (80014bc <HAL_ADC_MspInit+0xc8>)
 8001420:	4293      	cmp	r3, r2
 8001422:	d146      	bne.n	80014b2 <HAL_ADC_MspInit+0xbe>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001424:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001428:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800142a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800142e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8001432:	2302      	movs	r3, #2
 8001434:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001436:	2301      	movs	r3, #1
 8001438:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 800143a:	2308      	movs	r3, #8
 800143c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800143e:	2307      	movs	r3, #7
 8001440:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001442:	2302      	movs	r3, #2
 8001444:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001446:	2302      	movs	r3, #2
 8001448:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800144a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800144e:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001450:	f107 0314 	add.w	r3, r7, #20
 8001454:	4618      	mov	r0, r3
 8001456:	f002 fe81 	bl	800415c <HAL_RCCEx_PeriphCLKConfig>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8001460:	f7ff ff9e 	bl	80013a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001464:	4b16      	ldr	r3, [pc, #88]	@ (80014c0 <HAL_ADC_MspInit+0xcc>)
 8001466:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001468:	4a15      	ldr	r2, [pc, #84]	@ (80014c0 <HAL_ADC_MspInit+0xcc>)
 800146a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800146e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001470:	4b13      	ldr	r3, [pc, #76]	@ (80014c0 <HAL_ADC_MspInit+0xcc>)
 8001472:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001474:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001478:	613b      	str	r3, [r7, #16]
 800147a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800147c:	4b10      	ldr	r3, [pc, #64]	@ (80014c0 <HAL_ADC_MspInit+0xcc>)
 800147e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001480:	4a0f      	ldr	r2, [pc, #60]	@ (80014c0 <HAL_ADC_MspInit+0xcc>)
 8001482:	f043 0304 	orr.w	r3, r3, #4
 8001486:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001488:	4b0d      	ldr	r3, [pc, #52]	@ (80014c0 <HAL_ADC_MspInit+0xcc>)
 800148a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800148c:	f003 0304 	and.w	r3, r3, #4
 8001490:	60fb      	str	r3, [r7, #12]
 8001492:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001494:	2301      	movs	r3, #1
 8001496:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800149a:	230b      	movs	r3, #11
 800149c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a0:	2300      	movs	r3, #0
 80014a2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014a6:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80014aa:	4619      	mov	r1, r3
 80014ac:	4805      	ldr	r0, [pc, #20]	@ (80014c4 <HAL_ADC_MspInit+0xd0>)
 80014ae:	f001 fe2f 	bl	8003110 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80014b2:	bf00      	nop
 80014b4:	37b0      	adds	r7, #176	@ 0xb0
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	50040000 	.word	0x50040000
 80014c0:	40021000 	.word	0x40021000
 80014c4:	48000800 	.word	0x48000800

080014c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b0ac      	sub	sp, #176	@ 0xb0
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80014d4:	2200      	movs	r2, #0
 80014d6:	601a      	str	r2, [r3, #0]
 80014d8:	605a      	str	r2, [r3, #4]
 80014da:	609a      	str	r2, [r3, #8]
 80014dc:	60da      	str	r2, [r3, #12]
 80014de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014e0:	f107 0314 	add.w	r3, r7, #20
 80014e4:	2288      	movs	r2, #136	@ 0x88
 80014e6:	2100      	movs	r1, #0
 80014e8:	4618      	mov	r0, r3
 80014ea:	f005 f82e 	bl	800654a <memset>
  if(huart->Instance==USART2)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4a21      	ldr	r2, [pc, #132]	@ (8001578 <HAL_UART_MspInit+0xb0>)
 80014f4:	4293      	cmp	r3, r2
 80014f6:	d13b      	bne.n	8001570 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80014f8:	2302      	movs	r3, #2
 80014fa:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80014fc:	2300      	movs	r3, #0
 80014fe:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001500:	f107 0314 	add.w	r3, r7, #20
 8001504:	4618      	mov	r0, r3
 8001506:	f002 fe29 	bl	800415c <HAL_RCCEx_PeriphCLKConfig>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d001      	beq.n	8001514 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001510:	f7ff ff46 	bl	80013a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001514:	4b19      	ldr	r3, [pc, #100]	@ (800157c <HAL_UART_MspInit+0xb4>)
 8001516:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001518:	4a18      	ldr	r2, [pc, #96]	@ (800157c <HAL_UART_MspInit+0xb4>)
 800151a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800151e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001520:	4b16      	ldr	r3, [pc, #88]	@ (800157c <HAL_UART_MspInit+0xb4>)
 8001522:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001524:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001528:	613b      	str	r3, [r7, #16]
 800152a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800152c:	4b13      	ldr	r3, [pc, #76]	@ (800157c <HAL_UART_MspInit+0xb4>)
 800152e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001530:	4a12      	ldr	r2, [pc, #72]	@ (800157c <HAL_UART_MspInit+0xb4>)
 8001532:	f043 0301 	orr.w	r3, r3, #1
 8001536:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001538:	4b10      	ldr	r3, [pc, #64]	@ (800157c <HAL_UART_MspInit+0xb4>)
 800153a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800153c:	f003 0301 	and.w	r3, r3, #1
 8001540:	60fb      	str	r3, [r7, #12]
 8001542:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001544:	230c      	movs	r3, #12
 8001546:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800154a:	2302      	movs	r3, #2
 800154c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001550:	2300      	movs	r3, #0
 8001552:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001556:	2303      	movs	r3, #3
 8001558:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800155c:	2307      	movs	r3, #7
 800155e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001562:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001566:	4619      	mov	r1, r3
 8001568:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800156c:	f001 fdd0 	bl	8003110 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001570:	bf00      	nop
 8001572:	37b0      	adds	r7, #176	@ 0xb0
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	40004400 	.word	0x40004400
 800157c:	40021000 	.word	0x40021000

08001580 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001584:	bf00      	nop
 8001586:	e7fd      	b.n	8001584 <NMI_Handler+0x4>

08001588 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800158c:	bf00      	nop
 800158e:	e7fd      	b.n	800158c <HardFault_Handler+0x4>

08001590 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001594:	bf00      	nop
 8001596:	e7fd      	b.n	8001594 <MemManage_Handler+0x4>

08001598 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800159c:	bf00      	nop
 800159e:	e7fd      	b.n	800159c <BusFault_Handler+0x4>

080015a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015a4:	bf00      	nop
 80015a6:	e7fd      	b.n	80015a4 <UsageFault_Handler+0x4>

080015a8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015ac:	bf00      	nop
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr

080015b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015b6:	b480      	push	{r7}
 80015b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015ba:	bf00      	nop
 80015bc:	46bd      	mov	sp, r7
 80015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c2:	4770      	bx	lr

080015c4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015c8:	bf00      	nop
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr

080015d2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015d2:	b580      	push	{r7, lr}
 80015d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015d6:	f000 f961 	bl	800189c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015da:	bf00      	nop
 80015dc:	bd80      	pop	{r7, pc}

080015de <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80015de:	b480      	push	{r7}
 80015e0:	af00      	add	r7, sp, #0
  return 1;
 80015e2:	2301      	movs	r3, #1
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr

080015ee <_kill>:

int _kill(int pid, int sig)
{
 80015ee:	b580      	push	{r7, lr}
 80015f0:	b082      	sub	sp, #8
 80015f2:	af00      	add	r7, sp, #0
 80015f4:	6078      	str	r0, [r7, #4]
 80015f6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80015f8:	f004 fffa 	bl	80065f0 <__errno>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2216      	movs	r2, #22
 8001600:	601a      	str	r2, [r3, #0]
  return -1;
 8001602:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001606:	4618      	mov	r0, r3
 8001608:	3708      	adds	r7, #8
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}

0800160e <_exit>:

void _exit (int status)
{
 800160e:	b580      	push	{r7, lr}
 8001610:	b082      	sub	sp, #8
 8001612:	af00      	add	r7, sp, #0
 8001614:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001616:	f04f 31ff 	mov.w	r1, #4294967295
 800161a:	6878      	ldr	r0, [r7, #4]
 800161c:	f7ff ffe7 	bl	80015ee <_kill>
  while (1) {}    /* Make sure we hang here */
 8001620:	bf00      	nop
 8001622:	e7fd      	b.n	8001620 <_exit+0x12>

08001624 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b086      	sub	sp, #24
 8001628:	af00      	add	r7, sp, #0
 800162a:	60f8      	str	r0, [r7, #12]
 800162c:	60b9      	str	r1, [r7, #8]
 800162e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001630:	2300      	movs	r3, #0
 8001632:	617b      	str	r3, [r7, #20]
 8001634:	e00a      	b.n	800164c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001636:	f3af 8000 	nop.w
 800163a:	4601      	mov	r1, r0
 800163c:	68bb      	ldr	r3, [r7, #8]
 800163e:	1c5a      	adds	r2, r3, #1
 8001640:	60ba      	str	r2, [r7, #8]
 8001642:	b2ca      	uxtb	r2, r1
 8001644:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	3301      	adds	r3, #1
 800164a:	617b      	str	r3, [r7, #20]
 800164c:	697a      	ldr	r2, [r7, #20]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	429a      	cmp	r2, r3
 8001652:	dbf0      	blt.n	8001636 <_read+0x12>
  }

  return len;
 8001654:	687b      	ldr	r3, [r7, #4]
}
 8001656:	4618      	mov	r0, r3
 8001658:	3718      	adds	r7, #24
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}

0800165e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800165e:	b580      	push	{r7, lr}
 8001660:	b086      	sub	sp, #24
 8001662:	af00      	add	r7, sp, #0
 8001664:	60f8      	str	r0, [r7, #12]
 8001666:	60b9      	str	r1, [r7, #8]
 8001668:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800166a:	2300      	movs	r3, #0
 800166c:	617b      	str	r3, [r7, #20]
 800166e:	e009      	b.n	8001684 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001670:	68bb      	ldr	r3, [r7, #8]
 8001672:	1c5a      	adds	r2, r3, #1
 8001674:	60ba      	str	r2, [r7, #8]
 8001676:	781b      	ldrb	r3, [r3, #0]
 8001678:	4618      	mov	r0, r3
 800167a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	3301      	adds	r3, #1
 8001682:	617b      	str	r3, [r7, #20]
 8001684:	697a      	ldr	r2, [r7, #20]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	429a      	cmp	r2, r3
 800168a:	dbf1      	blt.n	8001670 <_write+0x12>
  }
  return len;
 800168c:	687b      	ldr	r3, [r7, #4]
}
 800168e:	4618      	mov	r0, r3
 8001690:	3718      	adds	r7, #24
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}

08001696 <_close>:

int _close(int file)
{
 8001696:	b480      	push	{r7}
 8001698:	b083      	sub	sp, #12
 800169a:	af00      	add	r7, sp, #0
 800169c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800169e:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	370c      	adds	r7, #12
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr

080016ae <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016ae:	b480      	push	{r7}
 80016b0:	b083      	sub	sp, #12
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	6078      	str	r0, [r7, #4]
 80016b6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80016be:	605a      	str	r2, [r3, #4]
  return 0;
 80016c0:	2300      	movs	r3, #0
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	370c      	adds	r7, #12
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr

080016ce <_isatty>:

int _isatty(int file)
{
 80016ce:	b480      	push	{r7}
 80016d0:	b083      	sub	sp, #12
 80016d2:	af00      	add	r7, sp, #0
 80016d4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80016d6:	2301      	movs	r3, #1
}
 80016d8:	4618      	mov	r0, r3
 80016da:	370c      	adds	r7, #12
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr

080016e4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b085      	sub	sp, #20
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	60f8      	str	r0, [r7, #12]
 80016ec:	60b9      	str	r1, [r7, #8]
 80016ee:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80016f0:	2300      	movs	r3, #0
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	3714      	adds	r7, #20
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr
	...

08001700 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b086      	sub	sp, #24
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001708:	4a14      	ldr	r2, [pc, #80]	@ (800175c <_sbrk+0x5c>)
 800170a:	4b15      	ldr	r3, [pc, #84]	@ (8001760 <_sbrk+0x60>)
 800170c:	1ad3      	subs	r3, r2, r3
 800170e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001714:	4b13      	ldr	r3, [pc, #76]	@ (8001764 <_sbrk+0x64>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d102      	bne.n	8001722 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800171c:	4b11      	ldr	r3, [pc, #68]	@ (8001764 <_sbrk+0x64>)
 800171e:	4a12      	ldr	r2, [pc, #72]	@ (8001768 <_sbrk+0x68>)
 8001720:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001722:	4b10      	ldr	r3, [pc, #64]	@ (8001764 <_sbrk+0x64>)
 8001724:	681a      	ldr	r2, [r3, #0]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	4413      	add	r3, r2
 800172a:	693a      	ldr	r2, [r7, #16]
 800172c:	429a      	cmp	r2, r3
 800172e:	d207      	bcs.n	8001740 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001730:	f004 ff5e 	bl	80065f0 <__errno>
 8001734:	4603      	mov	r3, r0
 8001736:	220c      	movs	r2, #12
 8001738:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800173a:	f04f 33ff 	mov.w	r3, #4294967295
 800173e:	e009      	b.n	8001754 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001740:	4b08      	ldr	r3, [pc, #32]	@ (8001764 <_sbrk+0x64>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001746:	4b07      	ldr	r3, [pc, #28]	@ (8001764 <_sbrk+0x64>)
 8001748:	681a      	ldr	r2, [r3, #0]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	4413      	add	r3, r2
 800174e:	4a05      	ldr	r2, [pc, #20]	@ (8001764 <_sbrk+0x64>)
 8001750:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001752:	68fb      	ldr	r3, [r7, #12]
}
 8001754:	4618      	mov	r0, r3
 8001756:	3718      	adds	r7, #24
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}
 800175c:	20018000 	.word	0x20018000
 8001760:	00000400 	.word	0x00000400
 8001764:	20000300 	.word	0x20000300
 8001768:	20000458 	.word	0x20000458

0800176c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001770:	4b06      	ldr	r3, [pc, #24]	@ (800178c <SystemInit+0x20>)
 8001772:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001776:	4a05      	ldr	r2, [pc, #20]	@ (800178c <SystemInit+0x20>)
 8001778:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800177c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001780:	bf00      	nop
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr
 800178a:	bf00      	nop
 800178c:	e000ed00 	.word	0xe000ed00

08001790 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001790:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80017c8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001794:	f7ff ffea 	bl	800176c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001798:	480c      	ldr	r0, [pc, #48]	@ (80017cc <LoopForever+0x6>)
  ldr r1, =_edata
 800179a:	490d      	ldr	r1, [pc, #52]	@ (80017d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800179c:	4a0d      	ldr	r2, [pc, #52]	@ (80017d4 <LoopForever+0xe>)
  movs r3, #0
 800179e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017a0:	e002      	b.n	80017a8 <LoopCopyDataInit>

080017a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017a6:	3304      	adds	r3, #4

080017a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017ac:	d3f9      	bcc.n	80017a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017ae:	4a0a      	ldr	r2, [pc, #40]	@ (80017d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80017b0:	4c0a      	ldr	r4, [pc, #40]	@ (80017dc <LoopForever+0x16>)
  movs r3, #0
 80017b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017b4:	e001      	b.n	80017ba <LoopFillZerobss>

080017b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017b8:	3204      	adds	r2, #4

080017ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017bc:	d3fb      	bcc.n	80017b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017be:	f004 ff1d 	bl	80065fc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80017c2:	f7ff fc0f 	bl	8000fe4 <main>

080017c6 <LoopForever>:

LoopForever:
    b LoopForever
 80017c6:	e7fe      	b.n	80017c6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80017c8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80017cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017d0:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80017d4:	0800a1c0 	.word	0x0800a1c0
  ldr r2, =_sbss
 80017d8:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80017dc:	20000454 	.word	0x20000454

080017e0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80017e0:	e7fe      	b.n	80017e0 <ADC1_2_IRQHandler>
	...

080017e4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b082      	sub	sp, #8
 80017e8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80017ea:	2300      	movs	r3, #0
 80017ec:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017ee:	4b0c      	ldr	r3, [pc, #48]	@ (8001820 <HAL_Init+0x3c>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a0b      	ldr	r2, [pc, #44]	@ (8001820 <HAL_Init+0x3c>)
 80017f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017f8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017fa:	2003      	movs	r0, #3
 80017fc:	f001 fc54 	bl	80030a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001800:	2000      	movs	r0, #0
 8001802:	f000 f80f 	bl	8001824 <HAL_InitTick>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d002      	beq.n	8001812 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800180c:	2301      	movs	r3, #1
 800180e:	71fb      	strb	r3, [r7, #7]
 8001810:	e001      	b.n	8001816 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001812:	f7ff fdcb 	bl	80013ac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001816:	79fb      	ldrb	r3, [r7, #7]
}
 8001818:	4618      	mov	r0, r3
 800181a:	3708      	adds	r7, #8
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}
 8001820:	40022000 	.word	0x40022000

08001824 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b084      	sub	sp, #16
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800182c:	2300      	movs	r3, #0
 800182e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001830:	4b17      	ldr	r3, [pc, #92]	@ (8001890 <HAL_InitTick+0x6c>)
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d023      	beq.n	8001880 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001838:	4b16      	ldr	r3, [pc, #88]	@ (8001894 <HAL_InitTick+0x70>)
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	4b14      	ldr	r3, [pc, #80]	@ (8001890 <HAL_InitTick+0x6c>)
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	4619      	mov	r1, r3
 8001842:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001846:	fbb3 f3f1 	udiv	r3, r3, r1
 800184a:	fbb2 f3f3 	udiv	r3, r2, r3
 800184e:	4618      	mov	r0, r3
 8001850:	f001 fc51 	bl	80030f6 <HAL_SYSTICK_Config>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d10f      	bne.n	800187a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2b0f      	cmp	r3, #15
 800185e:	d809      	bhi.n	8001874 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001860:	2200      	movs	r2, #0
 8001862:	6879      	ldr	r1, [r7, #4]
 8001864:	f04f 30ff 	mov.w	r0, #4294967295
 8001868:	f001 fc29 	bl	80030be <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800186c:	4a0a      	ldr	r2, [pc, #40]	@ (8001898 <HAL_InitTick+0x74>)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6013      	str	r3, [r2, #0]
 8001872:	e007      	b.n	8001884 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001874:	2301      	movs	r3, #1
 8001876:	73fb      	strb	r3, [r7, #15]
 8001878:	e004      	b.n	8001884 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800187a:	2301      	movs	r3, #1
 800187c:	73fb      	strb	r3, [r7, #15]
 800187e:	e001      	b.n	8001884 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001880:	2301      	movs	r3, #1
 8001882:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001884:	7bfb      	ldrb	r3, [r7, #15]
}
 8001886:	4618      	mov	r0, r3
 8001888:	3710      	adds	r7, #16
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	20000008 	.word	0x20000008
 8001894:	20000000 	.word	0x20000000
 8001898:	20000004 	.word	0x20000004

0800189c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80018a0:	4b06      	ldr	r3, [pc, #24]	@ (80018bc <HAL_IncTick+0x20>)
 80018a2:	781b      	ldrb	r3, [r3, #0]
 80018a4:	461a      	mov	r2, r3
 80018a6:	4b06      	ldr	r3, [pc, #24]	@ (80018c0 <HAL_IncTick+0x24>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4413      	add	r3, r2
 80018ac:	4a04      	ldr	r2, [pc, #16]	@ (80018c0 <HAL_IncTick+0x24>)
 80018ae:	6013      	str	r3, [r2, #0]
}
 80018b0:	bf00      	nop
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr
 80018ba:	bf00      	nop
 80018bc:	20000008 	.word	0x20000008
 80018c0:	20000304 	.word	0x20000304

080018c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0
  return uwTick;
 80018c8:	4b03      	ldr	r3, [pc, #12]	@ (80018d8 <HAL_GetTick+0x14>)
 80018ca:	681b      	ldr	r3, [r3, #0]
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr
 80018d6:	bf00      	nop
 80018d8:	20000304 	.word	0x20000304

080018dc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80018dc:	b480      	push	{r7}
 80018de:	b083      	sub	sp, #12
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
 80018e4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	689b      	ldr	r3, [r3, #8]
 80018ea:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	431a      	orrs	r2, r3
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	609a      	str	r2, [r3, #8]
}
 80018f6:	bf00      	nop
 80018f8:	370c      	adds	r7, #12
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr

08001902 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001902:	b480      	push	{r7}
 8001904:	b083      	sub	sp, #12
 8001906:	af00      	add	r7, sp, #0
 8001908:	6078      	str	r0, [r7, #4]
 800190a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	689b      	ldr	r3, [r3, #8]
 8001910:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	431a      	orrs	r2, r3
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	609a      	str	r2, [r3, #8]
}
 800191c:	bf00      	nop
 800191e:	370c      	adds	r7, #12
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr

08001928 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001928:	b480      	push	{r7}
 800192a:	b083      	sub	sp, #12
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001938:	4618      	mov	r0, r3
 800193a:	370c      	adds	r7, #12
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr

08001944 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001944:	b480      	push	{r7}
 8001946:	b087      	sub	sp, #28
 8001948:	af00      	add	r7, sp, #0
 800194a:	60f8      	str	r0, [r7, #12]
 800194c:	60b9      	str	r1, [r7, #8]
 800194e:	607a      	str	r2, [r7, #4]
 8001950:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	3360      	adds	r3, #96	@ 0x60
 8001956:	461a      	mov	r2, r3
 8001958:	68bb      	ldr	r3, [r7, #8]
 800195a:	009b      	lsls	r3, r3, #2
 800195c:	4413      	add	r3, r2
 800195e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	681a      	ldr	r2, [r3, #0]
 8001964:	4b08      	ldr	r3, [pc, #32]	@ (8001988 <LL_ADC_SetOffset+0x44>)
 8001966:	4013      	ands	r3, r2
 8001968:	687a      	ldr	r2, [r7, #4]
 800196a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800196e:	683a      	ldr	r2, [r7, #0]
 8001970:	430a      	orrs	r2, r1
 8001972:	4313      	orrs	r3, r2
 8001974:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800197c:	bf00      	nop
 800197e:	371c      	adds	r7, #28
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr
 8001988:	03fff000 	.word	0x03fff000

0800198c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800198c:	b480      	push	{r7}
 800198e:	b085      	sub	sp, #20
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
 8001994:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	3360      	adds	r3, #96	@ 0x60
 800199a:	461a      	mov	r2, r3
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	009b      	lsls	r3, r3, #2
 80019a0:	4413      	add	r3, r2
 80019a2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	3714      	adds	r7, #20
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr

080019b8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b087      	sub	sp, #28
 80019bc:	af00      	add	r7, sp, #0
 80019be:	60f8      	str	r0, [r7, #12]
 80019c0:	60b9      	str	r1, [r7, #8]
 80019c2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	3360      	adds	r3, #96	@ 0x60
 80019c8:	461a      	mov	r2, r3
 80019ca:	68bb      	ldr	r3, [r7, #8]
 80019cc:	009b      	lsls	r3, r3, #2
 80019ce:	4413      	add	r3, r2
 80019d0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80019d2:	697b      	ldr	r3, [r7, #20]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	431a      	orrs	r2, r3
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80019e2:	bf00      	nop
 80019e4:	371c      	adds	r7, #28
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr

080019ee <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80019ee:	b480      	push	{r7}
 80019f0:	b083      	sub	sp, #12
 80019f2:	af00      	add	r7, sp, #0
 80019f4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	68db      	ldr	r3, [r3, #12]
 80019fa:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d101      	bne.n	8001a06 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001a02:	2301      	movs	r3, #1
 8001a04:	e000      	b.n	8001a08 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001a06:	2300      	movs	r3, #0
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	370c      	adds	r7, #12
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr

08001a14 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b087      	sub	sp, #28
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	60f8      	str	r0, [r7, #12]
 8001a1c:	60b9      	str	r1, [r7, #8]
 8001a1e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	3330      	adds	r3, #48	@ 0x30
 8001a24:	461a      	mov	r2, r3
 8001a26:	68bb      	ldr	r3, [r7, #8]
 8001a28:	0a1b      	lsrs	r3, r3, #8
 8001a2a:	009b      	lsls	r3, r3, #2
 8001a2c:	f003 030c 	and.w	r3, r3, #12
 8001a30:	4413      	add	r3, r2
 8001a32:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	681a      	ldr	r2, [r3, #0]
 8001a38:	68bb      	ldr	r3, [r7, #8]
 8001a3a:	f003 031f 	and.w	r3, r3, #31
 8001a3e:	211f      	movs	r1, #31
 8001a40:	fa01 f303 	lsl.w	r3, r1, r3
 8001a44:	43db      	mvns	r3, r3
 8001a46:	401a      	ands	r2, r3
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	0e9b      	lsrs	r3, r3, #26
 8001a4c:	f003 011f 	and.w	r1, r3, #31
 8001a50:	68bb      	ldr	r3, [r7, #8]
 8001a52:	f003 031f 	and.w	r3, r3, #31
 8001a56:	fa01 f303 	lsl.w	r3, r1, r3
 8001a5a:	431a      	orrs	r2, r3
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001a60:	bf00      	nop
 8001a62:	371c      	adds	r7, #28
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr

08001a6c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b087      	sub	sp, #28
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	60f8      	str	r0, [r7, #12]
 8001a74:	60b9      	str	r1, [r7, #8]
 8001a76:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	3314      	adds	r3, #20
 8001a7c:	461a      	mov	r2, r3
 8001a7e:	68bb      	ldr	r3, [r7, #8]
 8001a80:	0e5b      	lsrs	r3, r3, #25
 8001a82:	009b      	lsls	r3, r3, #2
 8001a84:	f003 0304 	and.w	r3, r3, #4
 8001a88:	4413      	add	r3, r2
 8001a8a:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	681a      	ldr	r2, [r3, #0]
 8001a90:	68bb      	ldr	r3, [r7, #8]
 8001a92:	0d1b      	lsrs	r3, r3, #20
 8001a94:	f003 031f 	and.w	r3, r3, #31
 8001a98:	2107      	movs	r1, #7
 8001a9a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a9e:	43db      	mvns	r3, r3
 8001aa0:	401a      	ands	r2, r3
 8001aa2:	68bb      	ldr	r3, [r7, #8]
 8001aa4:	0d1b      	lsrs	r3, r3, #20
 8001aa6:	f003 031f 	and.w	r3, r3, #31
 8001aaa:	6879      	ldr	r1, [r7, #4]
 8001aac:	fa01 f303 	lsl.w	r3, r1, r3
 8001ab0:	431a      	orrs	r2, r3
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001ab6:	bf00      	nop
 8001ab8:	371c      	adds	r7, #28
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr
	...

08001ac4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b085      	sub	sp, #20
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	60f8      	str	r0, [r7, #12]
 8001acc:	60b9      	str	r1, [r7, #8]
 8001ace:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001ad6:	68bb      	ldr	r3, [r7, #8]
 8001ad8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001adc:	43db      	mvns	r3, r3
 8001ade:	401a      	ands	r2, r3
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	f003 0318 	and.w	r3, r3, #24
 8001ae6:	4908      	ldr	r1, [pc, #32]	@ (8001b08 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001ae8:	40d9      	lsrs	r1, r3
 8001aea:	68bb      	ldr	r3, [r7, #8]
 8001aec:	400b      	ands	r3, r1
 8001aee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001af2:	431a      	orrs	r2, r3
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001afa:	bf00      	nop
 8001afc:	3714      	adds	r7, #20
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr
 8001b06:	bf00      	nop
 8001b08:	0007ffff 	.word	0x0007ffff

08001b0c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b083      	sub	sp, #12
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	f003 031f 	and.w	r3, r3, #31
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	370c      	adds	r7, #12
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr

08001b28 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b083      	sub	sp, #12
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	370c      	adds	r7, #12
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr

08001b44 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b083      	sub	sp, #12
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001b54:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001b58:	687a      	ldr	r2, [r7, #4]
 8001b5a:	6093      	str	r3, [r2, #8]
}
 8001b5c:	bf00      	nop
 8001b5e:	370c      	adds	r7, #12
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr

08001b68 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001b78:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001b7c:	d101      	bne.n	8001b82 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e000      	b.n	8001b84 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001b82:	2300      	movs	r3, #0
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	370c      	adds	r7, #12
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr

08001b90 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001ba0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001ba4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001bac:	bf00      	nop
 8001bae:	370c      	adds	r7, #12
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb6:	4770      	bx	lr

08001bb8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b083      	sub	sp, #12
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	689b      	ldr	r3, [r3, #8]
 8001bc4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bc8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001bcc:	d101      	bne.n	8001bd2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e000      	b.n	8001bd4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001bd2:	2300      	movs	r3, #0
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	370c      	adds	r7, #12
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bde:	4770      	bx	lr

08001be0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001bf0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001bf4:	f043 0201 	orr.w	r2, r3, #1
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001bfc:	bf00      	nop
 8001bfe:	370c      	adds	r7, #12
 8001c00:	46bd      	mov	sp, r7
 8001c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c06:	4770      	bx	lr

08001c08 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b083      	sub	sp, #12
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001c18:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001c1c:	f043 0202 	orr.w	r2, r3, #2
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001c24:	bf00      	nop
 8001c26:	370c      	adds	r7, #12
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr

08001c30 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b083      	sub	sp, #12
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	f003 0301 	and.w	r3, r3, #1
 8001c40:	2b01      	cmp	r3, #1
 8001c42:	d101      	bne.n	8001c48 <LL_ADC_IsEnabled+0x18>
 8001c44:	2301      	movs	r3, #1
 8001c46:	e000      	b.n	8001c4a <LL_ADC_IsEnabled+0x1a>
 8001c48:	2300      	movs	r3, #0
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	370c      	adds	r7, #12
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr

08001c56 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8001c56:	b480      	push	{r7}
 8001c58:	b083      	sub	sp, #12
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	f003 0302 	and.w	r3, r3, #2
 8001c66:	2b02      	cmp	r3, #2
 8001c68:	d101      	bne.n	8001c6e <LL_ADC_IsDisableOngoing+0x18>
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e000      	b.n	8001c70 <LL_ADC_IsDisableOngoing+0x1a>
 8001c6e:	2300      	movs	r3, #0
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	370c      	adds	r7, #12
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr

08001c7c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001c8c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001c90:	f043 0204 	orr.w	r2, r3, #4
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001c98:	bf00      	nop
 8001c9a:	370c      	adds	r7, #12
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr

08001ca4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b083      	sub	sp, #12
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	f003 0304 	and.w	r3, r3, #4
 8001cb4:	2b04      	cmp	r3, #4
 8001cb6:	d101      	bne.n	8001cbc <LL_ADC_REG_IsConversionOngoing+0x18>
 8001cb8:	2301      	movs	r3, #1
 8001cba:	e000      	b.n	8001cbe <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001cbc:	2300      	movs	r3, #0
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	370c      	adds	r7, #12
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr

08001cca <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001cca:	b480      	push	{r7}
 8001ccc:	b083      	sub	sp, #12
 8001cce:	af00      	add	r7, sp, #0
 8001cd0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	689b      	ldr	r3, [r3, #8]
 8001cd6:	f003 0308 	and.w	r3, r3, #8
 8001cda:	2b08      	cmp	r3, #8
 8001cdc:	d101      	bne.n	8001ce2 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e000      	b.n	8001ce4 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001ce2:	2300      	movs	r3, #0
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	370c      	adds	r7, #12
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cee:	4770      	bx	lr

08001cf0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001cf0:	b590      	push	{r4, r7, lr}
 8001cf2:	b089      	sub	sp, #36	@ 0x24
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d101      	bne.n	8001d0a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
 8001d08:	e130      	b.n	8001f6c <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	691b      	ldr	r3, [r3, #16]
 8001d0e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d109      	bne.n	8001d2c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d18:	6878      	ldr	r0, [r7, #4]
 8001d1a:	f7ff fb6b 	bl	80013f4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2200      	movs	r2, #0
 8001d22:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2200      	movs	r2, #0
 8001d28:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4618      	mov	r0, r3
 8001d32:	f7ff ff19 	bl	8001b68 <LL_ADC_IsDeepPowerDownEnabled>
 8001d36:	4603      	mov	r3, r0
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d004      	beq.n	8001d46 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4618      	mov	r0, r3
 8001d42:	f7ff feff 	bl	8001b44 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f7ff ff34 	bl	8001bb8 <LL_ADC_IsInternalRegulatorEnabled>
 8001d50:	4603      	mov	r3, r0
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d115      	bne.n	8001d82 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f7ff ff18 	bl	8001b90 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001d60:	4b84      	ldr	r3, [pc, #528]	@ (8001f74 <HAL_ADC_Init+0x284>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	099b      	lsrs	r3, r3, #6
 8001d66:	4a84      	ldr	r2, [pc, #528]	@ (8001f78 <HAL_ADC_Init+0x288>)
 8001d68:	fba2 2303 	umull	r2, r3, r2, r3
 8001d6c:	099b      	lsrs	r3, r3, #6
 8001d6e:	3301      	adds	r3, #1
 8001d70:	005b      	lsls	r3, r3, #1
 8001d72:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001d74:	e002      	b.n	8001d7c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	3b01      	subs	r3, #1
 8001d7a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d1f9      	bne.n	8001d76 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4618      	mov	r0, r3
 8001d88:	f7ff ff16 	bl	8001bb8 <LL_ADC_IsInternalRegulatorEnabled>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d10d      	bne.n	8001dae <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d96:	f043 0210 	orr.w	r2, r3, #16
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001da2:	f043 0201 	orr.w	r2, r3, #1
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4618      	mov	r0, r3
 8001db4:	f7ff ff76 	bl	8001ca4 <LL_ADC_REG_IsConversionOngoing>
 8001db8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dbe:	f003 0310 	and.w	r3, r3, #16
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	f040 80c9 	bne.w	8001f5a <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	f040 80c5 	bne.w	8001f5a <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dd4:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001dd8:	f043 0202 	orr.w	r2, r3, #2
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4618      	mov	r0, r3
 8001de6:	f7ff ff23 	bl	8001c30 <LL_ADC_IsEnabled>
 8001dea:	4603      	mov	r3, r0
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d115      	bne.n	8001e1c <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001df0:	4862      	ldr	r0, [pc, #392]	@ (8001f7c <HAL_ADC_Init+0x28c>)
 8001df2:	f7ff ff1d 	bl	8001c30 <LL_ADC_IsEnabled>
 8001df6:	4604      	mov	r4, r0
 8001df8:	4861      	ldr	r0, [pc, #388]	@ (8001f80 <HAL_ADC_Init+0x290>)
 8001dfa:	f7ff ff19 	bl	8001c30 <LL_ADC_IsEnabled>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	431c      	orrs	r4, r3
 8001e02:	4860      	ldr	r0, [pc, #384]	@ (8001f84 <HAL_ADC_Init+0x294>)
 8001e04:	f7ff ff14 	bl	8001c30 <LL_ADC_IsEnabled>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	4323      	orrs	r3, r4
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d105      	bne.n	8001e1c <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	4619      	mov	r1, r3
 8001e16:	485c      	ldr	r0, [pc, #368]	@ (8001f88 <HAL_ADC_Init+0x298>)
 8001e18:	f7ff fd60 	bl	80018dc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	7e5b      	ldrb	r3, [r3, #25]
 8001e20:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001e26:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001e2c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001e32:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e3a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e46:	2b01      	cmp	r3, #1
 8001e48:	d106      	bne.n	8001e58 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e4e:	3b01      	subs	r3, #1
 8001e50:	045b      	lsls	r3, r3, #17
 8001e52:	69ba      	ldr	r2, [r7, #24]
 8001e54:	4313      	orrs	r3, r2
 8001e56:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d009      	beq.n	8001e74 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e64:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e6c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001e6e:	69ba      	ldr	r2, [r7, #24]
 8001e70:	4313      	orrs	r3, r2
 8001e72:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	68da      	ldr	r2, [r3, #12]
 8001e7a:	4b44      	ldr	r3, [pc, #272]	@ (8001f8c <HAL_ADC_Init+0x29c>)
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	687a      	ldr	r2, [r7, #4]
 8001e80:	6812      	ldr	r2, [r2, #0]
 8001e82:	69b9      	ldr	r1, [r7, #24]
 8001e84:	430b      	orrs	r3, r1
 8001e86:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f7ff ff1c 	bl	8001cca <LL_ADC_INJ_IsConversionOngoing>
 8001e92:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d13d      	bne.n	8001f16 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d13a      	bne.n	8001f16 <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001ea4:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001eac:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	68db      	ldr	r3, [r3, #12]
 8001eb8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001ebc:	f023 0302 	bic.w	r3, r3, #2
 8001ec0:	687a      	ldr	r2, [r7, #4]
 8001ec2:	6812      	ldr	r2, [r2, #0]
 8001ec4:	69b9      	ldr	r1, [r7, #24]
 8001ec6:	430b      	orrs	r3, r1
 8001ec8:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	d118      	bne.n	8001f06 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	691b      	ldr	r3, [r3, #16]
 8001eda:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001ede:	f023 0304 	bic.w	r3, r3, #4
 8001ee2:	687a      	ldr	r2, [r7, #4]
 8001ee4:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8001ee6:	687a      	ldr	r2, [r7, #4]
 8001ee8:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001eea:	4311      	orrs	r1, r2
 8001eec:	687a      	ldr	r2, [r7, #4]
 8001eee:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001ef0:	4311      	orrs	r1, r2
 8001ef2:	687a      	ldr	r2, [r7, #4]
 8001ef4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001ef6:	430a      	orrs	r2, r1
 8001ef8:	431a      	orrs	r2, r3
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f042 0201 	orr.w	r2, r2, #1
 8001f02:	611a      	str	r2, [r3, #16]
 8001f04:	e007      	b.n	8001f16 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	691a      	ldr	r2, [r3, #16]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f022 0201 	bic.w	r2, r2, #1
 8001f14:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	691b      	ldr	r3, [r3, #16]
 8001f1a:	2b01      	cmp	r3, #1
 8001f1c:	d10c      	bne.n	8001f38 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f24:	f023 010f 	bic.w	r1, r3, #15
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	69db      	ldr	r3, [r3, #28]
 8001f2c:	1e5a      	subs	r2, r3, #1
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	430a      	orrs	r2, r1
 8001f34:	631a      	str	r2, [r3, #48]	@ 0x30
 8001f36:	e007      	b.n	8001f48 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f022 020f 	bic.w	r2, r2, #15
 8001f46:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f4c:	f023 0303 	bic.w	r3, r3, #3
 8001f50:	f043 0201 	orr.w	r2, r3, #1
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	655a      	str	r2, [r3, #84]	@ 0x54
 8001f58:	e007      	b.n	8001f6a <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f5e:	f043 0210 	orr.w	r2, r3, #16
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
 8001f68:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001f6a:	7ffb      	ldrb	r3, [r7, #31]
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	3724      	adds	r7, #36	@ 0x24
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd90      	pop	{r4, r7, pc}
 8001f74:	20000000 	.word	0x20000000
 8001f78:	053e2d63 	.word	0x053e2d63
 8001f7c:	50040000 	.word	0x50040000
 8001f80:	50040100 	.word	0x50040100
 8001f84:	50040200 	.word	0x50040200
 8001f88:	50040300 	.word	0x50040300
 8001f8c:	fff0c007 	.word	0xfff0c007

08001f90 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b086      	sub	sp, #24
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001f98:	4857      	ldr	r0, [pc, #348]	@ (80020f8 <HAL_ADC_Start+0x168>)
 8001f9a:	f7ff fdb7 	bl	8001b0c <LL_ADC_GetMultimode>
 8001f9e:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f7ff fe7d 	bl	8001ca4 <LL_ADC_REG_IsConversionOngoing>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	f040 809c 	bne.w	80020ea <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001fb8:	2b01      	cmp	r3, #1
 8001fba:	d101      	bne.n	8001fc0 <HAL_ADC_Start+0x30>
 8001fbc:	2302      	movs	r3, #2
 8001fbe:	e097      	b.n	80020f0 <HAL_ADC_Start+0x160>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001fc8:	6878      	ldr	r0, [r7, #4]
 8001fca:	f000 fd73 	bl	8002ab4 <ADC_Enable>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001fd2:	7dfb      	ldrb	r3, [r7, #23]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	f040 8083 	bne.w	80020e0 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fde:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001fe2:	f023 0301 	bic.w	r3, r3, #1
 8001fe6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a42      	ldr	r2, [pc, #264]	@ (80020fc <HAL_ADC_Start+0x16c>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d002      	beq.n	8001ffe <HAL_ADC_Start+0x6e>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	e000      	b.n	8002000 <HAL_ADC_Start+0x70>
 8001ffe:	4b40      	ldr	r3, [pc, #256]	@ (8002100 <HAL_ADC_Start+0x170>)
 8002000:	687a      	ldr	r2, [r7, #4]
 8002002:	6812      	ldr	r2, [r2, #0]
 8002004:	4293      	cmp	r3, r2
 8002006:	d002      	beq.n	800200e <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d105      	bne.n	800201a <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002012:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	655a      	str	r2, [r3, #84]	@ 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800201e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002022:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002026:	d106      	bne.n	8002036 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800202c:	f023 0206 	bic.w	r2, r3, #6
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	659a      	str	r2, [r3, #88]	@ 0x58
 8002034:	e002      	b.n	800203c <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2200      	movs	r2, #0
 800203a:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	221c      	movs	r2, #28
 8002042:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2200      	movs	r2, #0
 8002048:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a2a      	ldr	r2, [pc, #168]	@ (80020fc <HAL_ADC_Start+0x16c>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d002      	beq.n	800205c <HAL_ADC_Start+0xcc>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	e000      	b.n	800205e <HAL_ADC_Start+0xce>
 800205c:	4b28      	ldr	r3, [pc, #160]	@ (8002100 <HAL_ADC_Start+0x170>)
 800205e:	687a      	ldr	r2, [r7, #4]
 8002060:	6812      	ldr	r2, [r2, #0]
 8002062:	4293      	cmp	r3, r2
 8002064:	d008      	beq.n	8002078 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d005      	beq.n	8002078 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	2b05      	cmp	r3, #5
 8002070:	d002      	beq.n	8002078 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	2b09      	cmp	r3, #9
 8002076:	d114      	bne.n	80020a2 <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	68db      	ldr	r3, [r3, #12]
 800207e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002082:	2b00      	cmp	r3, #0
 8002084:	d007      	beq.n	8002096 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800208a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800208e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4618      	mov	r0, r3
 800209c:	f7ff fdee 	bl	8001c7c <LL_ADC_REG_StartConversion>
 80020a0:	e025      	b.n	80020ee <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020a6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a12      	ldr	r2, [pc, #72]	@ (80020fc <HAL_ADC_Start+0x16c>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d002      	beq.n	80020be <HAL_ADC_Start+0x12e>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	e000      	b.n	80020c0 <HAL_ADC_Start+0x130>
 80020be:	4b10      	ldr	r3, [pc, #64]	@ (8002100 <HAL_ADC_Start+0x170>)
 80020c0:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	68db      	ldr	r3, [r3, #12]
 80020c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d00f      	beq.n	80020ee <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020d2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80020d6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	655a      	str	r2, [r3, #84]	@ 0x54
 80020de:	e006      	b.n	80020ee <HAL_ADC_Start+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2200      	movs	r2, #0
 80020e4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80020e8:	e001      	b.n	80020ee <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80020ea:	2302      	movs	r3, #2
 80020ec:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80020ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	3718      	adds	r7, #24
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	50040300 	.word	0x50040300
 80020fc:	50040100 	.word	0x50040100
 8002100:	50040000 	.word	0x50040000

08002104 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b088      	sub	sp, #32
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
 800210c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800210e:	4866      	ldr	r0, [pc, #408]	@ (80022a8 <HAL_ADC_PollForConversion+0x1a4>)
 8002110:	f7ff fcfc 	bl	8001b0c <LL_ADC_GetMultimode>
 8002114:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	695b      	ldr	r3, [r3, #20]
 800211a:	2b08      	cmp	r3, #8
 800211c:	d102      	bne.n	8002124 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 800211e:	2308      	movs	r3, #8
 8002120:	61fb      	str	r3, [r7, #28]
 8002122:	e02a      	b.n	800217a <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d005      	beq.n	8002136 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	2b05      	cmp	r3, #5
 800212e:	d002      	beq.n	8002136 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	2b09      	cmp	r3, #9
 8002134:	d111      	bne.n	800215a <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	68db      	ldr	r3, [r3, #12]
 800213c:	f003 0301 	and.w	r3, r3, #1
 8002140:	2b00      	cmp	r3, #0
 8002142:	d007      	beq.n	8002154 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002148:	f043 0220 	orr.w	r2, r3, #32
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 8002150:	2301      	movs	r3, #1
 8002152:	e0a4      	b.n	800229e <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002154:	2304      	movs	r3, #4
 8002156:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002158:	e00f      	b.n	800217a <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800215a:	4853      	ldr	r0, [pc, #332]	@ (80022a8 <HAL_ADC_PollForConversion+0x1a4>)
 800215c:	f7ff fce4 	bl	8001b28 <LL_ADC_GetMultiDMATransfer>
 8002160:	4603      	mov	r3, r0
 8002162:	2b00      	cmp	r3, #0
 8002164:	d007      	beq.n	8002176 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800216a:	f043 0220 	orr.w	r2, r3, #32
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e093      	b.n	800229e <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002176:	2304      	movs	r3, #4
 8002178:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800217a:	f7ff fba3 	bl	80018c4 <HAL_GetTick>
 800217e:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002180:	e021      	b.n	80021c6 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002188:	d01d      	beq.n	80021c6 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800218a:	f7ff fb9b 	bl	80018c4 <HAL_GetTick>
 800218e:	4602      	mov	r2, r0
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	1ad3      	subs	r3, r2, r3
 8002194:	683a      	ldr	r2, [r7, #0]
 8002196:	429a      	cmp	r2, r3
 8002198:	d302      	bcc.n	80021a0 <HAL_ADC_PollForConversion+0x9c>
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d112      	bne.n	80021c6 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	69fb      	ldr	r3, [r7, #28]
 80021a8:	4013      	ands	r3, r2
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d10b      	bne.n	80021c6 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021b2:	f043 0204 	orr.w	r2, r3, #4
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2200      	movs	r2, #0
 80021be:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 80021c2:	2303      	movs	r3, #3
 80021c4:	e06b      	b.n	800229e <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	681a      	ldr	r2, [r3, #0]
 80021cc:	69fb      	ldr	r3, [r7, #28]
 80021ce:	4013      	ands	r3, r2
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d0d6      	beq.n	8002182 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021d8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4618      	mov	r0, r3
 80021e6:	f7ff fc02 	bl	80019ee <LL_ADC_REG_IsTriggerSourceSWStart>
 80021ea:	4603      	mov	r3, r0
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d01c      	beq.n	800222a <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	7e5b      	ldrb	r3, [r3, #25]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d118      	bne.n	800222a <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f003 0308 	and.w	r3, r3, #8
 8002202:	2b08      	cmp	r3, #8
 8002204:	d111      	bne.n	800222a <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800220a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002216:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800221a:	2b00      	cmp	r3, #0
 800221c:	d105      	bne.n	800222a <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002222:	f043 0201 	orr.w	r2, r3, #1
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a1f      	ldr	r2, [pc, #124]	@ (80022ac <HAL_ADC_PollForConversion+0x1a8>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d002      	beq.n	800223a <HAL_ADC_PollForConversion+0x136>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	e000      	b.n	800223c <HAL_ADC_PollForConversion+0x138>
 800223a:	4b1d      	ldr	r3, [pc, #116]	@ (80022b0 <HAL_ADC_PollForConversion+0x1ac>)
 800223c:	687a      	ldr	r2, [r7, #4]
 800223e:	6812      	ldr	r2, [r2, #0]
 8002240:	4293      	cmp	r3, r2
 8002242:	d008      	beq.n	8002256 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d005      	beq.n	8002256 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	2b05      	cmp	r3, #5
 800224e:	d002      	beq.n	8002256 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	2b09      	cmp	r3, #9
 8002254:	d104      	bne.n	8002260 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	68db      	ldr	r3, [r3, #12]
 800225c:	61bb      	str	r3, [r7, #24]
 800225e:	e00c      	b.n	800227a <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a11      	ldr	r2, [pc, #68]	@ (80022ac <HAL_ADC_PollForConversion+0x1a8>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d002      	beq.n	8002270 <HAL_ADC_PollForConversion+0x16c>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	e000      	b.n	8002272 <HAL_ADC_PollForConversion+0x16e>
 8002270:	4b0f      	ldr	r3, [pc, #60]	@ (80022b0 <HAL_ADC_PollForConversion+0x1ac>)
 8002272:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	68db      	ldr	r3, [r3, #12]
 8002278:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800227a:	69fb      	ldr	r3, [r7, #28]
 800227c:	2b08      	cmp	r3, #8
 800227e:	d104      	bne.n	800228a <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	2208      	movs	r2, #8
 8002286:	601a      	str	r2, [r3, #0]
 8002288:	e008      	b.n	800229c <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800228a:	69bb      	ldr	r3, [r7, #24]
 800228c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002290:	2b00      	cmp	r3, #0
 8002292:	d103      	bne.n	800229c <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	220c      	movs	r2, #12
 800229a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 800229c:	2300      	movs	r3, #0
}
 800229e:	4618      	mov	r0, r3
 80022a0:	3720      	adds	r7, #32
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	50040300 	.word	0x50040300
 80022ac:	50040100 	.word	0x50040100
 80022b0:	50040000 	.word	0x50040000

080022b4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b083      	sub	sp, #12
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	370c      	adds	r7, #12
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr
	...

080022d0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b0b6      	sub	sp, #216	@ 0xd8
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
 80022d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022da:	2300      	movs	r3, #0
 80022dc:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80022e0:	2300      	movs	r3, #0
 80022e2:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80022ea:	2b01      	cmp	r3, #1
 80022ec:	d101      	bne.n	80022f2 <HAL_ADC_ConfigChannel+0x22>
 80022ee:	2302      	movs	r3, #2
 80022f0:	e3c9      	b.n	8002a86 <HAL_ADC_ConfigChannel+0x7b6>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2201      	movs	r2, #1
 80022f6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4618      	mov	r0, r3
 8002300:	f7ff fcd0 	bl	8001ca4 <LL_ADC_REG_IsConversionOngoing>
 8002304:	4603      	mov	r3, r0
 8002306:	2b00      	cmp	r3, #0
 8002308:	f040 83aa 	bne.w	8002a60 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	2b05      	cmp	r3, #5
 800231a:	d824      	bhi.n	8002366 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	3b02      	subs	r3, #2
 8002322:	2b03      	cmp	r3, #3
 8002324:	d81b      	bhi.n	800235e <HAL_ADC_ConfigChannel+0x8e>
 8002326:	a201      	add	r2, pc, #4	@ (adr r2, 800232c <HAL_ADC_ConfigChannel+0x5c>)
 8002328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800232c:	0800233d 	.word	0x0800233d
 8002330:	08002345 	.word	0x08002345
 8002334:	0800234d 	.word	0x0800234d
 8002338:	08002355 	.word	0x08002355
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 800233c:	230c      	movs	r3, #12
 800233e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002342:	e010      	b.n	8002366 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002344:	2312      	movs	r3, #18
 8002346:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800234a:	e00c      	b.n	8002366 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 800234c:	2318      	movs	r3, #24
 800234e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002352:	e008      	b.n	8002366 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002354:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002358:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800235c:	e003      	b.n	8002366 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 800235e:	2306      	movs	r3, #6
 8002360:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002364:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6818      	ldr	r0, [r3, #0]
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	461a      	mov	r2, r3
 8002370:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8002374:	f7ff fb4e 	bl	8001a14 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4618      	mov	r0, r3
 800237e:	f7ff fc91 	bl	8001ca4 <LL_ADC_REG_IsConversionOngoing>
 8002382:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4618      	mov	r0, r3
 800238c:	f7ff fc9d 	bl	8001cca <LL_ADC_INJ_IsConversionOngoing>
 8002390:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002394:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002398:	2b00      	cmp	r3, #0
 800239a:	f040 81a4 	bne.w	80026e6 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800239e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	f040 819f 	bne.w	80026e6 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6818      	ldr	r0, [r3, #0]
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	6819      	ldr	r1, [r3, #0]
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	461a      	mov	r2, r3
 80023b6:	f7ff fb59 	bl	8001a6c <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	695a      	ldr	r2, [r3, #20]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	68db      	ldr	r3, [r3, #12]
 80023c4:	08db      	lsrs	r3, r3, #3
 80023c6:	f003 0303 	and.w	r3, r3, #3
 80023ca:	005b      	lsls	r3, r3, #1
 80023cc:	fa02 f303 	lsl.w	r3, r2, r3
 80023d0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	691b      	ldr	r3, [r3, #16]
 80023d8:	2b04      	cmp	r3, #4
 80023da:	d00a      	beq.n	80023f2 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6818      	ldr	r0, [r3, #0]
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	6919      	ldr	r1, [r3, #16]
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80023ec:	f7ff faaa 	bl	8001944 <LL_ADC_SetOffset>
 80023f0:	e179      	b.n	80026e6 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	2100      	movs	r1, #0
 80023f8:	4618      	mov	r0, r3
 80023fa:	f7ff fac7 	bl	800198c <LL_ADC_GetOffsetChannel>
 80023fe:	4603      	mov	r3, r0
 8002400:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002404:	2b00      	cmp	r3, #0
 8002406:	d10a      	bne.n	800241e <HAL_ADC_ConfigChannel+0x14e>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	2100      	movs	r1, #0
 800240e:	4618      	mov	r0, r3
 8002410:	f7ff fabc 	bl	800198c <LL_ADC_GetOffsetChannel>
 8002414:	4603      	mov	r3, r0
 8002416:	0e9b      	lsrs	r3, r3, #26
 8002418:	f003 021f 	and.w	r2, r3, #31
 800241c:	e01e      	b.n	800245c <HAL_ADC_ConfigChannel+0x18c>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	2100      	movs	r1, #0
 8002424:	4618      	mov	r0, r3
 8002426:	f7ff fab1 	bl	800198c <LL_ADC_GetOffsetChannel>
 800242a:	4603      	mov	r3, r0
 800242c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002430:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002434:	fa93 f3a3 	rbit	r3, r3
 8002438:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800243c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002440:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002444:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002448:	2b00      	cmp	r3, #0
 800244a:	d101      	bne.n	8002450 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 800244c:	2320      	movs	r3, #32
 800244e:	e004      	b.n	800245a <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8002450:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002454:	fab3 f383 	clz	r3, r3
 8002458:	b2db      	uxtb	r3, r3
 800245a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002464:	2b00      	cmp	r3, #0
 8002466:	d105      	bne.n	8002474 <HAL_ADC_ConfigChannel+0x1a4>
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	0e9b      	lsrs	r3, r3, #26
 800246e:	f003 031f 	and.w	r3, r3, #31
 8002472:	e018      	b.n	80024a6 <HAL_ADC_ConfigChannel+0x1d6>
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800247c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002480:	fa93 f3a3 	rbit	r3, r3
 8002484:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8002488:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800248c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8002490:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002494:	2b00      	cmp	r3, #0
 8002496:	d101      	bne.n	800249c <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8002498:	2320      	movs	r3, #32
 800249a:	e004      	b.n	80024a6 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 800249c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80024a0:	fab3 f383 	clz	r3, r3
 80024a4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80024a6:	429a      	cmp	r2, r3
 80024a8:	d106      	bne.n	80024b8 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	2200      	movs	r2, #0
 80024b0:	2100      	movs	r1, #0
 80024b2:	4618      	mov	r0, r3
 80024b4:	f7ff fa80 	bl	80019b8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	2101      	movs	r1, #1
 80024be:	4618      	mov	r0, r3
 80024c0:	f7ff fa64 	bl	800198c <LL_ADC_GetOffsetChannel>
 80024c4:	4603      	mov	r3, r0
 80024c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d10a      	bne.n	80024e4 <HAL_ADC_ConfigChannel+0x214>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	2101      	movs	r1, #1
 80024d4:	4618      	mov	r0, r3
 80024d6:	f7ff fa59 	bl	800198c <LL_ADC_GetOffsetChannel>
 80024da:	4603      	mov	r3, r0
 80024dc:	0e9b      	lsrs	r3, r3, #26
 80024de:	f003 021f 	and.w	r2, r3, #31
 80024e2:	e01e      	b.n	8002522 <HAL_ADC_ConfigChannel+0x252>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	2101      	movs	r1, #1
 80024ea:	4618      	mov	r0, r3
 80024ec:	f7ff fa4e 	bl	800198c <LL_ADC_GetOffsetChannel>
 80024f0:	4603      	mov	r3, r0
 80024f2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80024fa:	fa93 f3a3 	rbit	r3, r3
 80024fe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8002502:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002506:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 800250a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800250e:	2b00      	cmp	r3, #0
 8002510:	d101      	bne.n	8002516 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8002512:	2320      	movs	r3, #32
 8002514:	e004      	b.n	8002520 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8002516:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800251a:	fab3 f383 	clz	r3, r3
 800251e:	b2db      	uxtb	r3, r3
 8002520:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800252a:	2b00      	cmp	r3, #0
 800252c:	d105      	bne.n	800253a <HAL_ADC_ConfigChannel+0x26a>
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	0e9b      	lsrs	r3, r3, #26
 8002534:	f003 031f 	and.w	r3, r3, #31
 8002538:	e018      	b.n	800256c <HAL_ADC_ConfigChannel+0x29c>
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002542:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002546:	fa93 f3a3 	rbit	r3, r3
 800254a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 800254e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002552:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8002556:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800255a:	2b00      	cmp	r3, #0
 800255c:	d101      	bne.n	8002562 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 800255e:	2320      	movs	r3, #32
 8002560:	e004      	b.n	800256c <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8002562:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002566:	fab3 f383 	clz	r3, r3
 800256a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800256c:	429a      	cmp	r2, r3
 800256e:	d106      	bne.n	800257e <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	2200      	movs	r2, #0
 8002576:	2101      	movs	r1, #1
 8002578:	4618      	mov	r0, r3
 800257a:	f7ff fa1d 	bl	80019b8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	2102      	movs	r1, #2
 8002584:	4618      	mov	r0, r3
 8002586:	f7ff fa01 	bl	800198c <LL_ADC_GetOffsetChannel>
 800258a:	4603      	mov	r3, r0
 800258c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002590:	2b00      	cmp	r3, #0
 8002592:	d10a      	bne.n	80025aa <HAL_ADC_ConfigChannel+0x2da>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	2102      	movs	r1, #2
 800259a:	4618      	mov	r0, r3
 800259c:	f7ff f9f6 	bl	800198c <LL_ADC_GetOffsetChannel>
 80025a0:	4603      	mov	r3, r0
 80025a2:	0e9b      	lsrs	r3, r3, #26
 80025a4:	f003 021f 	and.w	r2, r3, #31
 80025a8:	e01e      	b.n	80025e8 <HAL_ADC_ConfigChannel+0x318>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	2102      	movs	r1, #2
 80025b0:	4618      	mov	r0, r3
 80025b2:	f7ff f9eb 	bl	800198c <LL_ADC_GetOffsetChannel>
 80025b6:	4603      	mov	r3, r0
 80025b8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80025c0:	fa93 f3a3 	rbit	r3, r3
 80025c4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 80025c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80025cc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 80025d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d101      	bne.n	80025dc <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 80025d8:	2320      	movs	r3, #32
 80025da:	e004      	b.n	80025e6 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 80025dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80025e0:	fab3 f383 	clz	r3, r3
 80025e4:	b2db      	uxtb	r3, r3
 80025e6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d105      	bne.n	8002600 <HAL_ADC_ConfigChannel+0x330>
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	0e9b      	lsrs	r3, r3, #26
 80025fa:	f003 031f 	and.w	r3, r3, #31
 80025fe:	e014      	b.n	800262a <HAL_ADC_ConfigChannel+0x35a>
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002606:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002608:	fa93 f3a3 	rbit	r3, r3
 800260c:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 800260e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002610:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8002614:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002618:	2b00      	cmp	r3, #0
 800261a:	d101      	bne.n	8002620 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 800261c:	2320      	movs	r3, #32
 800261e:	e004      	b.n	800262a <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8002620:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002624:	fab3 f383 	clz	r3, r3
 8002628:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800262a:	429a      	cmp	r2, r3
 800262c:	d106      	bne.n	800263c <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	2200      	movs	r2, #0
 8002634:	2102      	movs	r1, #2
 8002636:	4618      	mov	r0, r3
 8002638:	f7ff f9be 	bl	80019b8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	2103      	movs	r1, #3
 8002642:	4618      	mov	r0, r3
 8002644:	f7ff f9a2 	bl	800198c <LL_ADC_GetOffsetChannel>
 8002648:	4603      	mov	r3, r0
 800264a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800264e:	2b00      	cmp	r3, #0
 8002650:	d10a      	bne.n	8002668 <HAL_ADC_ConfigChannel+0x398>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	2103      	movs	r1, #3
 8002658:	4618      	mov	r0, r3
 800265a:	f7ff f997 	bl	800198c <LL_ADC_GetOffsetChannel>
 800265e:	4603      	mov	r3, r0
 8002660:	0e9b      	lsrs	r3, r3, #26
 8002662:	f003 021f 	and.w	r2, r3, #31
 8002666:	e017      	b.n	8002698 <HAL_ADC_ConfigChannel+0x3c8>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	2103      	movs	r1, #3
 800266e:	4618      	mov	r0, r3
 8002670:	f7ff f98c 	bl	800198c <LL_ADC_GetOffsetChannel>
 8002674:	4603      	mov	r3, r0
 8002676:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002678:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800267a:	fa93 f3a3 	rbit	r3, r3
 800267e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002680:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002682:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8002684:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002686:	2b00      	cmp	r3, #0
 8002688:	d101      	bne.n	800268e <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 800268a:	2320      	movs	r3, #32
 800268c:	e003      	b.n	8002696 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 800268e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002690:	fab3 f383 	clz	r3, r3
 8002694:	b2db      	uxtb	r3, r3
 8002696:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d105      	bne.n	80026b0 <HAL_ADC_ConfigChannel+0x3e0>
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	0e9b      	lsrs	r3, r3, #26
 80026aa:	f003 031f 	and.w	r3, r3, #31
 80026ae:	e011      	b.n	80026d4 <HAL_ADC_ConfigChannel+0x404>
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026b6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80026b8:	fa93 f3a3 	rbit	r3, r3
 80026bc:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 80026be:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80026c0:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 80026c2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d101      	bne.n	80026cc <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80026c8:	2320      	movs	r3, #32
 80026ca:	e003      	b.n	80026d4 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80026cc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80026ce:	fab3 f383 	clz	r3, r3
 80026d2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80026d4:	429a      	cmp	r2, r3
 80026d6:	d106      	bne.n	80026e6 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	2200      	movs	r2, #0
 80026de:	2103      	movs	r1, #3
 80026e0:	4618      	mov	r0, r3
 80026e2:	f7ff f969 	bl	80019b8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4618      	mov	r0, r3
 80026ec:	f7ff faa0 	bl	8001c30 <LL_ADC_IsEnabled>
 80026f0:	4603      	mov	r3, r0
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	f040 8140 	bne.w	8002978 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6818      	ldr	r0, [r3, #0]
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	6819      	ldr	r1, [r3, #0]
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	68db      	ldr	r3, [r3, #12]
 8002704:	461a      	mov	r2, r3
 8002706:	f7ff f9dd 	bl	8001ac4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	68db      	ldr	r3, [r3, #12]
 800270e:	4a8f      	ldr	r2, [pc, #572]	@ (800294c <HAL_ADC_ConfigChannel+0x67c>)
 8002710:	4293      	cmp	r3, r2
 8002712:	f040 8131 	bne.w	8002978 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002722:	2b00      	cmp	r3, #0
 8002724:	d10b      	bne.n	800273e <HAL_ADC_ConfigChannel+0x46e>
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	0e9b      	lsrs	r3, r3, #26
 800272c:	3301      	adds	r3, #1
 800272e:	f003 031f 	and.w	r3, r3, #31
 8002732:	2b09      	cmp	r3, #9
 8002734:	bf94      	ite	ls
 8002736:	2301      	movls	r3, #1
 8002738:	2300      	movhi	r3, #0
 800273a:	b2db      	uxtb	r3, r3
 800273c:	e019      	b.n	8002772 <HAL_ADC_ConfigChannel+0x4a2>
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002744:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002746:	fa93 f3a3 	rbit	r3, r3
 800274a:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 800274c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800274e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8002750:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002752:	2b00      	cmp	r3, #0
 8002754:	d101      	bne.n	800275a <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8002756:	2320      	movs	r3, #32
 8002758:	e003      	b.n	8002762 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 800275a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800275c:	fab3 f383 	clz	r3, r3
 8002760:	b2db      	uxtb	r3, r3
 8002762:	3301      	adds	r3, #1
 8002764:	f003 031f 	and.w	r3, r3, #31
 8002768:	2b09      	cmp	r3, #9
 800276a:	bf94      	ite	ls
 800276c:	2301      	movls	r3, #1
 800276e:	2300      	movhi	r3, #0
 8002770:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002772:	2b00      	cmp	r3, #0
 8002774:	d079      	beq.n	800286a <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800277e:	2b00      	cmp	r3, #0
 8002780:	d107      	bne.n	8002792 <HAL_ADC_ConfigChannel+0x4c2>
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	0e9b      	lsrs	r3, r3, #26
 8002788:	3301      	adds	r3, #1
 800278a:	069b      	lsls	r3, r3, #26
 800278c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002790:	e015      	b.n	80027be <HAL_ADC_ConfigChannel+0x4ee>
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002798:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800279a:	fa93 f3a3 	rbit	r3, r3
 800279e:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80027a0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80027a2:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80027a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d101      	bne.n	80027ae <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 80027aa:	2320      	movs	r3, #32
 80027ac:	e003      	b.n	80027b6 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 80027ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80027b0:	fab3 f383 	clz	r3, r3
 80027b4:	b2db      	uxtb	r3, r3
 80027b6:	3301      	adds	r3, #1
 80027b8:	069b      	lsls	r3, r3, #26
 80027ba:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d109      	bne.n	80027de <HAL_ADC_ConfigChannel+0x50e>
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	0e9b      	lsrs	r3, r3, #26
 80027d0:	3301      	adds	r3, #1
 80027d2:	f003 031f 	and.w	r3, r3, #31
 80027d6:	2101      	movs	r1, #1
 80027d8:	fa01 f303 	lsl.w	r3, r1, r3
 80027dc:	e017      	b.n	800280e <HAL_ADC_ConfigChannel+0x53e>
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80027e6:	fa93 f3a3 	rbit	r3, r3
 80027ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80027ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80027ee:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80027f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d101      	bne.n	80027fa <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 80027f6:	2320      	movs	r3, #32
 80027f8:	e003      	b.n	8002802 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 80027fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80027fc:	fab3 f383 	clz	r3, r3
 8002800:	b2db      	uxtb	r3, r3
 8002802:	3301      	adds	r3, #1
 8002804:	f003 031f 	and.w	r3, r3, #31
 8002808:	2101      	movs	r1, #1
 800280a:	fa01 f303 	lsl.w	r3, r1, r3
 800280e:	ea42 0103 	orr.w	r1, r2, r3
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800281a:	2b00      	cmp	r3, #0
 800281c:	d10a      	bne.n	8002834 <HAL_ADC_ConfigChannel+0x564>
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	0e9b      	lsrs	r3, r3, #26
 8002824:	3301      	adds	r3, #1
 8002826:	f003 021f 	and.w	r2, r3, #31
 800282a:	4613      	mov	r3, r2
 800282c:	005b      	lsls	r3, r3, #1
 800282e:	4413      	add	r3, r2
 8002830:	051b      	lsls	r3, r3, #20
 8002832:	e018      	b.n	8002866 <HAL_ADC_ConfigChannel+0x596>
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800283a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800283c:	fa93 f3a3 	rbit	r3, r3
 8002840:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8002842:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002844:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002846:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002848:	2b00      	cmp	r3, #0
 800284a:	d101      	bne.n	8002850 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 800284c:	2320      	movs	r3, #32
 800284e:	e003      	b.n	8002858 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8002850:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002852:	fab3 f383 	clz	r3, r3
 8002856:	b2db      	uxtb	r3, r3
 8002858:	3301      	adds	r3, #1
 800285a:	f003 021f 	and.w	r2, r3, #31
 800285e:	4613      	mov	r3, r2
 8002860:	005b      	lsls	r3, r3, #1
 8002862:	4413      	add	r3, r2
 8002864:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002866:	430b      	orrs	r3, r1
 8002868:	e081      	b.n	800296e <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002872:	2b00      	cmp	r3, #0
 8002874:	d107      	bne.n	8002886 <HAL_ADC_ConfigChannel+0x5b6>
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	0e9b      	lsrs	r3, r3, #26
 800287c:	3301      	adds	r3, #1
 800287e:	069b      	lsls	r3, r3, #26
 8002880:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002884:	e015      	b.n	80028b2 <HAL_ADC_ConfigChannel+0x5e2>
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800288c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800288e:	fa93 f3a3 	rbit	r3, r3
 8002892:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002896:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002898:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800289a:	2b00      	cmp	r3, #0
 800289c:	d101      	bne.n	80028a2 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 800289e:	2320      	movs	r3, #32
 80028a0:	e003      	b.n	80028aa <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 80028a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028a4:	fab3 f383 	clz	r3, r3
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	3301      	adds	r3, #1
 80028ac:	069b      	lsls	r3, r3, #26
 80028ae:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d109      	bne.n	80028d2 <HAL_ADC_ConfigChannel+0x602>
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	0e9b      	lsrs	r3, r3, #26
 80028c4:	3301      	adds	r3, #1
 80028c6:	f003 031f 	and.w	r3, r3, #31
 80028ca:	2101      	movs	r1, #1
 80028cc:	fa01 f303 	lsl.w	r3, r1, r3
 80028d0:	e017      	b.n	8002902 <HAL_ADC_ConfigChannel+0x632>
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028d8:	69fb      	ldr	r3, [r7, #28]
 80028da:	fa93 f3a3 	rbit	r3, r3
 80028de:	61bb      	str	r3, [r7, #24]
  return result;
 80028e0:	69bb      	ldr	r3, [r7, #24]
 80028e2:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80028e4:	6a3b      	ldr	r3, [r7, #32]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d101      	bne.n	80028ee <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 80028ea:	2320      	movs	r3, #32
 80028ec:	e003      	b.n	80028f6 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 80028ee:	6a3b      	ldr	r3, [r7, #32]
 80028f0:	fab3 f383 	clz	r3, r3
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	3301      	adds	r3, #1
 80028f8:	f003 031f 	and.w	r3, r3, #31
 80028fc:	2101      	movs	r1, #1
 80028fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002902:	ea42 0103 	orr.w	r1, r2, r3
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800290e:	2b00      	cmp	r3, #0
 8002910:	d10d      	bne.n	800292e <HAL_ADC_ConfigChannel+0x65e>
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	0e9b      	lsrs	r3, r3, #26
 8002918:	3301      	adds	r3, #1
 800291a:	f003 021f 	and.w	r2, r3, #31
 800291e:	4613      	mov	r3, r2
 8002920:	005b      	lsls	r3, r3, #1
 8002922:	4413      	add	r3, r2
 8002924:	3b1e      	subs	r3, #30
 8002926:	051b      	lsls	r3, r3, #20
 8002928:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800292c:	e01e      	b.n	800296c <HAL_ADC_ConfigChannel+0x69c>
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002934:	693b      	ldr	r3, [r7, #16]
 8002936:	fa93 f3a3 	rbit	r3, r3
 800293a:	60fb      	str	r3, [r7, #12]
  return result;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d104      	bne.n	8002950 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8002946:	2320      	movs	r3, #32
 8002948:	e006      	b.n	8002958 <HAL_ADC_ConfigChannel+0x688>
 800294a:	bf00      	nop
 800294c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	fab3 f383 	clz	r3, r3
 8002956:	b2db      	uxtb	r3, r3
 8002958:	3301      	adds	r3, #1
 800295a:	f003 021f 	and.w	r2, r3, #31
 800295e:	4613      	mov	r3, r2
 8002960:	005b      	lsls	r3, r3, #1
 8002962:	4413      	add	r3, r2
 8002964:	3b1e      	subs	r3, #30
 8002966:	051b      	lsls	r3, r3, #20
 8002968:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800296c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800296e:	683a      	ldr	r2, [r7, #0]
 8002970:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002972:	4619      	mov	r1, r3
 8002974:	f7ff f87a 	bl	8001a6c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	681a      	ldr	r2, [r3, #0]
 800297c:	4b44      	ldr	r3, [pc, #272]	@ (8002a90 <HAL_ADC_ConfigChannel+0x7c0>)
 800297e:	4013      	ands	r3, r2
 8002980:	2b00      	cmp	r3, #0
 8002982:	d07a      	beq.n	8002a7a <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002984:	4843      	ldr	r0, [pc, #268]	@ (8002a94 <HAL_ADC_ConfigChannel+0x7c4>)
 8002986:	f7fe ffcf 	bl	8001928 <LL_ADC_GetCommonPathInternalCh>
 800298a:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a41      	ldr	r2, [pc, #260]	@ (8002a98 <HAL_ADC_ConfigChannel+0x7c8>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d12c      	bne.n	80029f2 <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002998:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800299c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d126      	bne.n	80029f2 <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a3c      	ldr	r2, [pc, #240]	@ (8002a9c <HAL_ADC_ConfigChannel+0x7cc>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d004      	beq.n	80029b8 <HAL_ADC_ConfigChannel+0x6e8>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a3b      	ldr	r2, [pc, #236]	@ (8002aa0 <HAL_ADC_ConfigChannel+0x7d0>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d15d      	bne.n	8002a74 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80029b8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80029bc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80029c0:	4619      	mov	r1, r3
 80029c2:	4834      	ldr	r0, [pc, #208]	@ (8002a94 <HAL_ADC_ConfigChannel+0x7c4>)
 80029c4:	f7fe ff9d 	bl	8001902 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80029c8:	4b36      	ldr	r3, [pc, #216]	@ (8002aa4 <HAL_ADC_ConfigChannel+0x7d4>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	099b      	lsrs	r3, r3, #6
 80029ce:	4a36      	ldr	r2, [pc, #216]	@ (8002aa8 <HAL_ADC_ConfigChannel+0x7d8>)
 80029d0:	fba2 2303 	umull	r2, r3, r2, r3
 80029d4:	099b      	lsrs	r3, r3, #6
 80029d6:	1c5a      	adds	r2, r3, #1
 80029d8:	4613      	mov	r3, r2
 80029da:	005b      	lsls	r3, r3, #1
 80029dc:	4413      	add	r3, r2
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80029e2:	e002      	b.n	80029ea <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	3b01      	subs	r3, #1
 80029e8:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d1f9      	bne.n	80029e4 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80029f0:	e040      	b.n	8002a74 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a2d      	ldr	r2, [pc, #180]	@ (8002aac <HAL_ADC_ConfigChannel+0x7dc>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d118      	bne.n	8002a2e <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80029fc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002a00:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d112      	bne.n	8002a2e <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a23      	ldr	r2, [pc, #140]	@ (8002a9c <HAL_ADC_ConfigChannel+0x7cc>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d004      	beq.n	8002a1c <HAL_ADC_ConfigChannel+0x74c>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a22      	ldr	r2, [pc, #136]	@ (8002aa0 <HAL_ADC_ConfigChannel+0x7d0>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d12d      	bne.n	8002a78 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a1c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002a20:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002a24:	4619      	mov	r1, r3
 8002a26:	481b      	ldr	r0, [pc, #108]	@ (8002a94 <HAL_ADC_ConfigChannel+0x7c4>)
 8002a28:	f7fe ff6b 	bl	8001902 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002a2c:	e024      	b.n	8002a78 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a1f      	ldr	r2, [pc, #124]	@ (8002ab0 <HAL_ADC_ConfigChannel+0x7e0>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d120      	bne.n	8002a7a <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002a38:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002a3c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d11a      	bne.n	8002a7a <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a14      	ldr	r2, [pc, #80]	@ (8002a9c <HAL_ADC_ConfigChannel+0x7cc>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d115      	bne.n	8002a7a <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a4e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002a52:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002a56:	4619      	mov	r1, r3
 8002a58:	480e      	ldr	r0, [pc, #56]	@ (8002a94 <HAL_ADC_ConfigChannel+0x7c4>)
 8002a5a:	f7fe ff52 	bl	8001902 <LL_ADC_SetCommonPathInternalCh>
 8002a5e:	e00c      	b.n	8002a7a <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a64:	f043 0220 	orr.w	r2, r3, #32
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8002a72:	e002      	b.n	8002a7a <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002a74:	bf00      	nop
 8002a76:	e000      	b.n	8002a7a <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002a78:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002a82:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	37d8      	adds	r7, #216	@ 0xd8
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	80080000 	.word	0x80080000
 8002a94:	50040300 	.word	0x50040300
 8002a98:	c7520000 	.word	0xc7520000
 8002a9c:	50040000 	.word	0x50040000
 8002aa0:	50040200 	.word	0x50040200
 8002aa4:	20000000 	.word	0x20000000
 8002aa8:	053e2d63 	.word	0x053e2d63
 8002aac:	cb840000 	.word	0xcb840000
 8002ab0:	80000001 	.word	0x80000001

08002ab4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b084      	sub	sp, #16
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002abc:	2300      	movs	r3, #0
 8002abe:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f7ff f8b3 	bl	8001c30 <LL_ADC_IsEnabled>
 8002aca:	4603      	mov	r3, r0
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d169      	bne.n	8002ba4 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	689a      	ldr	r2, [r3, #8]
 8002ad6:	4b36      	ldr	r3, [pc, #216]	@ (8002bb0 <ADC_Enable+0xfc>)
 8002ad8:	4013      	ands	r3, r2
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d00d      	beq.n	8002afa <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ae2:	f043 0210 	orr.w	r2, r3, #16
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002aee:	f043 0201 	orr.w	r2, r3, #1
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	e055      	b.n	8002ba6 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4618      	mov	r0, r3
 8002b00:	f7ff f86e 	bl	8001be0 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002b04:	482b      	ldr	r0, [pc, #172]	@ (8002bb4 <ADC_Enable+0x100>)
 8002b06:	f7fe ff0f 	bl	8001928 <LL_ADC_GetCommonPathInternalCh>
 8002b0a:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002b0c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d013      	beq.n	8002b3c <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002b14:	4b28      	ldr	r3, [pc, #160]	@ (8002bb8 <ADC_Enable+0x104>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	099b      	lsrs	r3, r3, #6
 8002b1a:	4a28      	ldr	r2, [pc, #160]	@ (8002bbc <ADC_Enable+0x108>)
 8002b1c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b20:	099b      	lsrs	r3, r3, #6
 8002b22:	1c5a      	adds	r2, r3, #1
 8002b24:	4613      	mov	r3, r2
 8002b26:	005b      	lsls	r3, r3, #1
 8002b28:	4413      	add	r3, r2
 8002b2a:	009b      	lsls	r3, r3, #2
 8002b2c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002b2e:	e002      	b.n	8002b36 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	3b01      	subs	r3, #1
 8002b34:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d1f9      	bne.n	8002b30 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002b3c:	f7fe fec2 	bl	80018c4 <HAL_GetTick>
 8002b40:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002b42:	e028      	b.n	8002b96 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f7ff f871 	bl	8001c30 <LL_ADC_IsEnabled>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d104      	bne.n	8002b5e <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f7ff f841 	bl	8001be0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002b5e:	f7fe feb1 	bl	80018c4 <HAL_GetTick>
 8002b62:	4602      	mov	r2, r0
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	1ad3      	subs	r3, r2, r3
 8002b68:	2b02      	cmp	r3, #2
 8002b6a:	d914      	bls.n	8002b96 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 0301 	and.w	r3, r3, #1
 8002b76:	2b01      	cmp	r3, #1
 8002b78:	d00d      	beq.n	8002b96 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b7e:	f043 0210 	orr.w	r2, r3, #16
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b8a:	f043 0201 	orr.w	r2, r3, #1
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e007      	b.n	8002ba6 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 0301 	and.w	r3, r3, #1
 8002ba0:	2b01      	cmp	r3, #1
 8002ba2:	d1cf      	bne.n	8002b44 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002ba4:	2300      	movs	r3, #0
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	3710      	adds	r7, #16
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}
 8002bae:	bf00      	nop
 8002bb0:	8000003f 	.word	0x8000003f
 8002bb4:	50040300 	.word	0x50040300
 8002bb8:	20000000 	.word	0x20000000
 8002bbc:	053e2d63 	.word	0x053e2d63

08002bc0 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b084      	sub	sp, #16
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f7ff f842 	bl	8001c56 <LL_ADC_IsDisableOngoing>
 8002bd2:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f7ff f829 	bl	8001c30 <LL_ADC_IsEnabled>
 8002bde:	4603      	mov	r3, r0
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d047      	beq.n	8002c74 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d144      	bne.n	8002c74 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	f003 030d 	and.w	r3, r3, #13
 8002bf4:	2b01      	cmp	r3, #1
 8002bf6:	d10c      	bne.n	8002c12 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f7ff f803 	bl	8001c08 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	2203      	movs	r2, #3
 8002c08:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002c0a:	f7fe fe5b 	bl	80018c4 <HAL_GetTick>
 8002c0e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002c10:	e029      	b.n	8002c66 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c16:	f043 0210 	orr.w	r2, r3, #16
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c22:	f043 0201 	orr.w	r2, r3, #1
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e023      	b.n	8002c76 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002c2e:	f7fe fe49 	bl	80018c4 <HAL_GetTick>
 8002c32:	4602      	mov	r2, r0
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	1ad3      	subs	r3, r2, r3
 8002c38:	2b02      	cmp	r3, #2
 8002c3a:	d914      	bls.n	8002c66 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	f003 0301 	and.w	r3, r3, #1
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d00d      	beq.n	8002c66 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c4e:	f043 0210 	orr.w	r2, r3, #16
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c5a:	f043 0201 	orr.w	r2, r3, #1
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	e007      	b.n	8002c76 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	f003 0301 	and.w	r3, r3, #1
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d1dc      	bne.n	8002c2e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002c74:	2300      	movs	r3, #0
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	3710      	adds	r7, #16
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}

08002c7e <LL_ADC_IsEnabled>:
{
 8002c7e:	b480      	push	{r7}
 8002c80:	b083      	sub	sp, #12
 8002c82:	af00      	add	r7, sp, #0
 8002c84:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	f003 0301 	and.w	r3, r3, #1
 8002c8e:	2b01      	cmp	r3, #1
 8002c90:	d101      	bne.n	8002c96 <LL_ADC_IsEnabled+0x18>
 8002c92:	2301      	movs	r3, #1
 8002c94:	e000      	b.n	8002c98 <LL_ADC_IsEnabled+0x1a>
 8002c96:	2300      	movs	r3, #0
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	370c      	adds	r7, #12
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca2:	4770      	bx	lr

08002ca4 <LL_ADC_StartCalibration>:
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b083      	sub	sp, #12
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
 8002cac:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8002cb6:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002cba:	683a      	ldr	r2, [r7, #0]
 8002cbc:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	609a      	str	r2, [r3, #8]
}
 8002cca:	bf00      	nop
 8002ccc:	370c      	adds	r7, #12
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr

08002cd6 <LL_ADC_IsCalibrationOnGoing>:
{
 8002cd6:	b480      	push	{r7}
 8002cd8:	b083      	sub	sp, #12
 8002cda:	af00      	add	r7, sp, #0
 8002cdc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002ce6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002cea:	d101      	bne.n	8002cf0 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8002cec:	2301      	movs	r3, #1
 8002cee:	e000      	b.n	8002cf2 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8002cf0:	2300      	movs	r3, #0
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	370c      	adds	r7, #12
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfc:	4770      	bx	lr

08002cfe <LL_ADC_REG_IsConversionOngoing>:
{
 8002cfe:	b480      	push	{r7}
 8002d00:	b083      	sub	sp, #12
 8002d02:	af00      	add	r7, sp, #0
 8002d04:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	689b      	ldr	r3, [r3, #8]
 8002d0a:	f003 0304 	and.w	r3, r3, #4
 8002d0e:	2b04      	cmp	r3, #4
 8002d10:	d101      	bne.n	8002d16 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002d12:	2301      	movs	r3, #1
 8002d14:	e000      	b.n	8002d18 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002d16:	2300      	movs	r3, #0
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	370c      	adds	r7, #12
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d22:	4770      	bx	lr

08002d24 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b084      	sub	sp, #16
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
 8002d2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002d38:	2b01      	cmp	r3, #1
 8002d3a:	d101      	bne.n	8002d40 <HAL_ADCEx_Calibration_Start+0x1c>
 8002d3c:	2302      	movs	r3, #2
 8002d3e:	e04d      	b.n	8002ddc <HAL_ADCEx_Calibration_Start+0xb8>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2201      	movs	r2, #1
 8002d44:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002d48:	6878      	ldr	r0, [r7, #4]
 8002d4a:	f7ff ff39 	bl	8002bc0 <ADC_Disable>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002d52:	7bfb      	ldrb	r3, [r7, #15]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d136      	bne.n	8002dc6 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d5c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002d60:	f023 0302 	bic.w	r3, r3, #2
 8002d64:	f043 0202 	orr.w	r2, r3, #2
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	655a      	str	r2, [r3, #84]	@ 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	6839      	ldr	r1, [r7, #0]
 8002d72:	4618      	mov	r0, r3
 8002d74:	f7ff ff96 	bl	8002ca4 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002d78:	e014      	b.n	8002da4 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	3301      	adds	r3, #1
 8002d7e:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	f5b3 2f91 	cmp.w	r3, #296960	@ 0x48800
 8002d86:	d30d      	bcc.n	8002da4 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d8c:	f023 0312 	bic.w	r3, r3, #18
 8002d90:	f043 0210 	orr.w	r2, r3, #16
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_ERROR;
 8002da0:	2301      	movs	r3, #1
 8002da2:	e01b      	b.n	8002ddc <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4618      	mov	r0, r3
 8002daa:	f7ff ff94 	bl	8002cd6 <LL_ADC_IsCalibrationOnGoing>
 8002dae:	4603      	mov	r3, r0
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d1e2      	bne.n	8002d7a <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002db8:	f023 0303 	bic.w	r3, r3, #3
 8002dbc:	f043 0201 	orr.w	r2, r3, #1
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	655a      	str	r2, [r3, #84]	@ 0x54
 8002dc4:	e005      	b.n	8002dd2 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dca:	f043 0210 	orr.w	r2, r3, #16
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002dda:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	3710      	adds	r7, #16
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd80      	pop	{r7, pc}

08002de4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002de4:	b590      	push	{r4, r7, lr}
 8002de6:	b09f      	sub	sp, #124	@ 0x7c
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
 8002dec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002dee:	2300      	movs	r3, #0
 8002df0:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002dfa:	2b01      	cmp	r3, #1
 8002dfc:	d101      	bne.n	8002e02 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002dfe:	2302      	movs	r3, #2
 8002e00:	e093      	b.n	8002f2a <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2201      	movs	r2, #1
 8002e06:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002e0e:	2300      	movs	r3, #0
 8002e10:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a47      	ldr	r2, [pc, #284]	@ (8002f34 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d102      	bne.n	8002e22 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002e1c:	4b46      	ldr	r3, [pc, #280]	@ (8002f38 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002e1e:	60bb      	str	r3, [r7, #8]
 8002e20:	e001      	b.n	8002e26 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002e22:	2300      	movs	r3, #0
 8002e24:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d10b      	bne.n	8002e44 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e30:	f043 0220 	orr.w	r2, r3, #32
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8002e40:	2301      	movs	r3, #1
 8002e42:	e072      	b.n	8002f2a <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	4618      	mov	r0, r3
 8002e48:	f7ff ff59 	bl	8002cfe <LL_ADC_REG_IsConversionOngoing>
 8002e4c:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4618      	mov	r0, r3
 8002e54:	f7ff ff53 	bl	8002cfe <LL_ADC_REG_IsConversionOngoing>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d154      	bne.n	8002f08 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002e5e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d151      	bne.n	8002f08 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002e64:	4b35      	ldr	r3, [pc, #212]	@ (8002f3c <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8002e66:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d02c      	beq.n	8002eca <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002e70:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	6859      	ldr	r1, [r3, #4]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002e82:	035b      	lsls	r3, r3, #13
 8002e84:	430b      	orrs	r3, r1
 8002e86:	431a      	orrs	r2, r3
 8002e88:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002e8a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002e8c:	4829      	ldr	r0, [pc, #164]	@ (8002f34 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002e8e:	f7ff fef6 	bl	8002c7e <LL_ADC_IsEnabled>
 8002e92:	4604      	mov	r4, r0
 8002e94:	4828      	ldr	r0, [pc, #160]	@ (8002f38 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002e96:	f7ff fef2 	bl	8002c7e <LL_ADC_IsEnabled>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	431c      	orrs	r4, r3
 8002e9e:	4828      	ldr	r0, [pc, #160]	@ (8002f40 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002ea0:	f7ff feed 	bl	8002c7e <LL_ADC_IsEnabled>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	4323      	orrs	r3, r4
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d137      	bne.n	8002f1c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002eac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002eb4:	f023 030f 	bic.w	r3, r3, #15
 8002eb8:	683a      	ldr	r2, [r7, #0]
 8002eba:	6811      	ldr	r1, [r2, #0]
 8002ebc:	683a      	ldr	r2, [r7, #0]
 8002ebe:	6892      	ldr	r2, [r2, #8]
 8002ec0:	430a      	orrs	r2, r1
 8002ec2:	431a      	orrs	r2, r3
 8002ec4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002ec6:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002ec8:	e028      	b.n	8002f1c <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002eca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002ed2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002ed4:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002ed6:	4817      	ldr	r0, [pc, #92]	@ (8002f34 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002ed8:	f7ff fed1 	bl	8002c7e <LL_ADC_IsEnabled>
 8002edc:	4604      	mov	r4, r0
 8002ede:	4816      	ldr	r0, [pc, #88]	@ (8002f38 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002ee0:	f7ff fecd 	bl	8002c7e <LL_ADC_IsEnabled>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	431c      	orrs	r4, r3
 8002ee8:	4815      	ldr	r0, [pc, #84]	@ (8002f40 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002eea:	f7ff fec8 	bl	8002c7e <LL_ADC_IsEnabled>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	4323      	orrs	r3, r4
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d112      	bne.n	8002f1c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002ef6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002efe:	f023 030f 	bic.w	r3, r3, #15
 8002f02:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002f04:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002f06:	e009      	b.n	8002f1c <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f0c:	f043 0220 	orr.w	r2, r3, #32
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
 8002f16:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8002f1a:	e000      	b.n	8002f1e <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002f1c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2200      	movs	r2, #0
 8002f22:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002f26:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	377c      	adds	r7, #124	@ 0x7c
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd90      	pop	{r4, r7, pc}
 8002f32:	bf00      	nop
 8002f34:	50040000 	.word	0x50040000
 8002f38:	50040100 	.word	0x50040100
 8002f3c:	50040300 	.word	0x50040300
 8002f40:	50040200 	.word	0x50040200

08002f44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b085      	sub	sp, #20
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	f003 0307 	and.w	r3, r3, #7
 8002f52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f54:	4b0c      	ldr	r3, [pc, #48]	@ (8002f88 <__NVIC_SetPriorityGrouping+0x44>)
 8002f56:	68db      	ldr	r3, [r3, #12]
 8002f58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f5a:	68ba      	ldr	r2, [r7, #8]
 8002f5c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002f60:	4013      	ands	r3, r2
 8002f62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f6c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002f70:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f76:	4a04      	ldr	r2, [pc, #16]	@ (8002f88 <__NVIC_SetPriorityGrouping+0x44>)
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	60d3      	str	r3, [r2, #12]
}
 8002f7c:	bf00      	nop
 8002f7e:	3714      	adds	r7, #20
 8002f80:	46bd      	mov	sp, r7
 8002f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f86:	4770      	bx	lr
 8002f88:	e000ed00 	.word	0xe000ed00

08002f8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f90:	4b04      	ldr	r3, [pc, #16]	@ (8002fa4 <__NVIC_GetPriorityGrouping+0x18>)
 8002f92:	68db      	ldr	r3, [r3, #12]
 8002f94:	0a1b      	lsrs	r3, r3, #8
 8002f96:	f003 0307 	and.w	r3, r3, #7
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa2:	4770      	bx	lr
 8002fa4:	e000ed00 	.word	0xe000ed00

08002fa8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b083      	sub	sp, #12
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	4603      	mov	r3, r0
 8002fb0:	6039      	str	r1, [r7, #0]
 8002fb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	db0a      	blt.n	8002fd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	b2da      	uxtb	r2, r3
 8002fc0:	490c      	ldr	r1, [pc, #48]	@ (8002ff4 <__NVIC_SetPriority+0x4c>)
 8002fc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fc6:	0112      	lsls	r2, r2, #4
 8002fc8:	b2d2      	uxtb	r2, r2
 8002fca:	440b      	add	r3, r1
 8002fcc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002fd0:	e00a      	b.n	8002fe8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	b2da      	uxtb	r2, r3
 8002fd6:	4908      	ldr	r1, [pc, #32]	@ (8002ff8 <__NVIC_SetPriority+0x50>)
 8002fd8:	79fb      	ldrb	r3, [r7, #7]
 8002fda:	f003 030f 	and.w	r3, r3, #15
 8002fde:	3b04      	subs	r3, #4
 8002fe0:	0112      	lsls	r2, r2, #4
 8002fe2:	b2d2      	uxtb	r2, r2
 8002fe4:	440b      	add	r3, r1
 8002fe6:	761a      	strb	r2, [r3, #24]
}
 8002fe8:	bf00      	nop
 8002fea:	370c      	adds	r7, #12
 8002fec:	46bd      	mov	sp, r7
 8002fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff2:	4770      	bx	lr
 8002ff4:	e000e100 	.word	0xe000e100
 8002ff8:	e000ed00 	.word	0xe000ed00

08002ffc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b089      	sub	sp, #36	@ 0x24
 8003000:	af00      	add	r7, sp, #0
 8003002:	60f8      	str	r0, [r7, #12]
 8003004:	60b9      	str	r1, [r7, #8]
 8003006:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	f003 0307 	and.w	r3, r3, #7
 800300e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003010:	69fb      	ldr	r3, [r7, #28]
 8003012:	f1c3 0307 	rsb	r3, r3, #7
 8003016:	2b04      	cmp	r3, #4
 8003018:	bf28      	it	cs
 800301a:	2304      	movcs	r3, #4
 800301c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800301e:	69fb      	ldr	r3, [r7, #28]
 8003020:	3304      	adds	r3, #4
 8003022:	2b06      	cmp	r3, #6
 8003024:	d902      	bls.n	800302c <NVIC_EncodePriority+0x30>
 8003026:	69fb      	ldr	r3, [r7, #28]
 8003028:	3b03      	subs	r3, #3
 800302a:	e000      	b.n	800302e <NVIC_EncodePriority+0x32>
 800302c:	2300      	movs	r3, #0
 800302e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003030:	f04f 32ff 	mov.w	r2, #4294967295
 8003034:	69bb      	ldr	r3, [r7, #24]
 8003036:	fa02 f303 	lsl.w	r3, r2, r3
 800303a:	43da      	mvns	r2, r3
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	401a      	ands	r2, r3
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003044:	f04f 31ff 	mov.w	r1, #4294967295
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	fa01 f303 	lsl.w	r3, r1, r3
 800304e:	43d9      	mvns	r1, r3
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003054:	4313      	orrs	r3, r2
         );
}
 8003056:	4618      	mov	r0, r3
 8003058:	3724      	adds	r7, #36	@ 0x24
 800305a:	46bd      	mov	sp, r7
 800305c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003060:	4770      	bx	lr
	...

08003064 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b082      	sub	sp, #8
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	3b01      	subs	r3, #1
 8003070:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003074:	d301      	bcc.n	800307a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003076:	2301      	movs	r3, #1
 8003078:	e00f      	b.n	800309a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800307a:	4a0a      	ldr	r2, [pc, #40]	@ (80030a4 <SysTick_Config+0x40>)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	3b01      	subs	r3, #1
 8003080:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003082:	210f      	movs	r1, #15
 8003084:	f04f 30ff 	mov.w	r0, #4294967295
 8003088:	f7ff ff8e 	bl	8002fa8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800308c:	4b05      	ldr	r3, [pc, #20]	@ (80030a4 <SysTick_Config+0x40>)
 800308e:	2200      	movs	r2, #0
 8003090:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003092:	4b04      	ldr	r3, [pc, #16]	@ (80030a4 <SysTick_Config+0x40>)
 8003094:	2207      	movs	r2, #7
 8003096:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003098:	2300      	movs	r3, #0
}
 800309a:	4618      	mov	r0, r3
 800309c:	3708      	adds	r7, #8
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}
 80030a2:	bf00      	nop
 80030a4:	e000e010 	.word	0xe000e010

080030a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b082      	sub	sp, #8
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80030b0:	6878      	ldr	r0, [r7, #4]
 80030b2:	f7ff ff47 	bl	8002f44 <__NVIC_SetPriorityGrouping>
}
 80030b6:	bf00      	nop
 80030b8:	3708      	adds	r7, #8
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}

080030be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030be:	b580      	push	{r7, lr}
 80030c0:	b086      	sub	sp, #24
 80030c2:	af00      	add	r7, sp, #0
 80030c4:	4603      	mov	r3, r0
 80030c6:	60b9      	str	r1, [r7, #8]
 80030c8:	607a      	str	r2, [r7, #4]
 80030ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80030cc:	2300      	movs	r3, #0
 80030ce:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80030d0:	f7ff ff5c 	bl	8002f8c <__NVIC_GetPriorityGrouping>
 80030d4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80030d6:	687a      	ldr	r2, [r7, #4]
 80030d8:	68b9      	ldr	r1, [r7, #8]
 80030da:	6978      	ldr	r0, [r7, #20]
 80030dc:	f7ff ff8e 	bl	8002ffc <NVIC_EncodePriority>
 80030e0:	4602      	mov	r2, r0
 80030e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030e6:	4611      	mov	r1, r2
 80030e8:	4618      	mov	r0, r3
 80030ea:	f7ff ff5d 	bl	8002fa8 <__NVIC_SetPriority>
}
 80030ee:	bf00      	nop
 80030f0:	3718      	adds	r7, #24
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}

080030f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80030f6:	b580      	push	{r7, lr}
 80030f8:	b082      	sub	sp, #8
 80030fa:	af00      	add	r7, sp, #0
 80030fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	f7ff ffb0 	bl	8003064 <SysTick_Config>
 8003104:	4603      	mov	r3, r0
}
 8003106:	4618      	mov	r0, r3
 8003108:	3708      	adds	r7, #8
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}
	...

08003110 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003110:	b480      	push	{r7}
 8003112:	b087      	sub	sp, #28
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
 8003118:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800311a:	2300      	movs	r3, #0
 800311c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800311e:	e17f      	b.n	8003420 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	681a      	ldr	r2, [r3, #0]
 8003124:	2101      	movs	r1, #1
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	fa01 f303 	lsl.w	r3, r1, r3
 800312c:	4013      	ands	r3, r2
 800312e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	2b00      	cmp	r3, #0
 8003134:	f000 8171 	beq.w	800341a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	f003 0303 	and.w	r3, r3, #3
 8003140:	2b01      	cmp	r3, #1
 8003142:	d005      	beq.n	8003150 <HAL_GPIO_Init+0x40>
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	f003 0303 	and.w	r3, r3, #3
 800314c:	2b02      	cmp	r3, #2
 800314e:	d130      	bne.n	80031b2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	005b      	lsls	r3, r3, #1
 800315a:	2203      	movs	r2, #3
 800315c:	fa02 f303 	lsl.w	r3, r2, r3
 8003160:	43db      	mvns	r3, r3
 8003162:	693a      	ldr	r2, [r7, #16]
 8003164:	4013      	ands	r3, r2
 8003166:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	68da      	ldr	r2, [r3, #12]
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	005b      	lsls	r3, r3, #1
 8003170:	fa02 f303 	lsl.w	r3, r2, r3
 8003174:	693a      	ldr	r2, [r7, #16]
 8003176:	4313      	orrs	r3, r2
 8003178:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	693a      	ldr	r2, [r7, #16]
 800317e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003186:	2201      	movs	r2, #1
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	fa02 f303 	lsl.w	r3, r2, r3
 800318e:	43db      	mvns	r3, r3
 8003190:	693a      	ldr	r2, [r7, #16]
 8003192:	4013      	ands	r3, r2
 8003194:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	091b      	lsrs	r3, r3, #4
 800319c:	f003 0201 	and.w	r2, r3, #1
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	fa02 f303 	lsl.w	r3, r2, r3
 80031a6:	693a      	ldr	r2, [r7, #16]
 80031a8:	4313      	orrs	r3, r2
 80031aa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	693a      	ldr	r2, [r7, #16]
 80031b0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	f003 0303 	and.w	r3, r3, #3
 80031ba:	2b03      	cmp	r3, #3
 80031bc:	d118      	bne.n	80031f0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031c2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80031c4:	2201      	movs	r2, #1
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	fa02 f303 	lsl.w	r3, r2, r3
 80031cc:	43db      	mvns	r3, r3
 80031ce:	693a      	ldr	r2, [r7, #16]
 80031d0:	4013      	ands	r3, r2
 80031d2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	08db      	lsrs	r3, r3, #3
 80031da:	f003 0201 	and.w	r2, r3, #1
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	fa02 f303 	lsl.w	r3, r2, r3
 80031e4:	693a      	ldr	r2, [r7, #16]
 80031e6:	4313      	orrs	r3, r2
 80031e8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	693a      	ldr	r2, [r7, #16]
 80031ee:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	f003 0303 	and.w	r3, r3, #3
 80031f8:	2b03      	cmp	r3, #3
 80031fa:	d017      	beq.n	800322c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	68db      	ldr	r3, [r3, #12]
 8003200:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	005b      	lsls	r3, r3, #1
 8003206:	2203      	movs	r2, #3
 8003208:	fa02 f303 	lsl.w	r3, r2, r3
 800320c:	43db      	mvns	r3, r3
 800320e:	693a      	ldr	r2, [r7, #16]
 8003210:	4013      	ands	r3, r2
 8003212:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	689a      	ldr	r2, [r3, #8]
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	005b      	lsls	r3, r3, #1
 800321c:	fa02 f303 	lsl.w	r3, r2, r3
 8003220:	693a      	ldr	r2, [r7, #16]
 8003222:	4313      	orrs	r3, r2
 8003224:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	693a      	ldr	r2, [r7, #16]
 800322a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	f003 0303 	and.w	r3, r3, #3
 8003234:	2b02      	cmp	r3, #2
 8003236:	d123      	bne.n	8003280 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	08da      	lsrs	r2, r3, #3
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	3208      	adds	r2, #8
 8003240:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003244:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	f003 0307 	and.w	r3, r3, #7
 800324c:	009b      	lsls	r3, r3, #2
 800324e:	220f      	movs	r2, #15
 8003250:	fa02 f303 	lsl.w	r3, r2, r3
 8003254:	43db      	mvns	r3, r3
 8003256:	693a      	ldr	r2, [r7, #16]
 8003258:	4013      	ands	r3, r2
 800325a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	691a      	ldr	r2, [r3, #16]
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	f003 0307 	and.w	r3, r3, #7
 8003266:	009b      	lsls	r3, r3, #2
 8003268:	fa02 f303 	lsl.w	r3, r2, r3
 800326c:	693a      	ldr	r2, [r7, #16]
 800326e:	4313      	orrs	r3, r2
 8003270:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	08da      	lsrs	r2, r3, #3
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	3208      	adds	r2, #8
 800327a:	6939      	ldr	r1, [r7, #16]
 800327c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	005b      	lsls	r3, r3, #1
 800328a:	2203      	movs	r2, #3
 800328c:	fa02 f303 	lsl.w	r3, r2, r3
 8003290:	43db      	mvns	r3, r3
 8003292:	693a      	ldr	r2, [r7, #16]
 8003294:	4013      	ands	r3, r2
 8003296:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	f003 0203 	and.w	r2, r3, #3
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	005b      	lsls	r3, r3, #1
 80032a4:	fa02 f303 	lsl.w	r3, r2, r3
 80032a8:	693a      	ldr	r2, [r7, #16]
 80032aa:	4313      	orrs	r3, r2
 80032ac:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	693a      	ldr	r2, [r7, #16]
 80032b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80032bc:	2b00      	cmp	r3, #0
 80032be:	f000 80ac 	beq.w	800341a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032c2:	4b5f      	ldr	r3, [pc, #380]	@ (8003440 <HAL_GPIO_Init+0x330>)
 80032c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032c6:	4a5e      	ldr	r2, [pc, #376]	@ (8003440 <HAL_GPIO_Init+0x330>)
 80032c8:	f043 0301 	orr.w	r3, r3, #1
 80032cc:	6613      	str	r3, [r2, #96]	@ 0x60
 80032ce:	4b5c      	ldr	r3, [pc, #368]	@ (8003440 <HAL_GPIO_Init+0x330>)
 80032d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032d2:	f003 0301 	and.w	r3, r3, #1
 80032d6:	60bb      	str	r3, [r7, #8]
 80032d8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80032da:	4a5a      	ldr	r2, [pc, #360]	@ (8003444 <HAL_GPIO_Init+0x334>)
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	089b      	lsrs	r3, r3, #2
 80032e0:	3302      	adds	r3, #2
 80032e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032e6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	f003 0303 	and.w	r3, r3, #3
 80032ee:	009b      	lsls	r3, r3, #2
 80032f0:	220f      	movs	r2, #15
 80032f2:	fa02 f303 	lsl.w	r3, r2, r3
 80032f6:	43db      	mvns	r3, r3
 80032f8:	693a      	ldr	r2, [r7, #16]
 80032fa:	4013      	ands	r3, r2
 80032fc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003304:	d025      	beq.n	8003352 <HAL_GPIO_Init+0x242>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	4a4f      	ldr	r2, [pc, #316]	@ (8003448 <HAL_GPIO_Init+0x338>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d01f      	beq.n	800334e <HAL_GPIO_Init+0x23e>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	4a4e      	ldr	r2, [pc, #312]	@ (800344c <HAL_GPIO_Init+0x33c>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d019      	beq.n	800334a <HAL_GPIO_Init+0x23a>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	4a4d      	ldr	r2, [pc, #308]	@ (8003450 <HAL_GPIO_Init+0x340>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d013      	beq.n	8003346 <HAL_GPIO_Init+0x236>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	4a4c      	ldr	r2, [pc, #304]	@ (8003454 <HAL_GPIO_Init+0x344>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d00d      	beq.n	8003342 <HAL_GPIO_Init+0x232>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	4a4b      	ldr	r2, [pc, #300]	@ (8003458 <HAL_GPIO_Init+0x348>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d007      	beq.n	800333e <HAL_GPIO_Init+0x22e>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	4a4a      	ldr	r2, [pc, #296]	@ (800345c <HAL_GPIO_Init+0x34c>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d101      	bne.n	800333a <HAL_GPIO_Init+0x22a>
 8003336:	2306      	movs	r3, #6
 8003338:	e00c      	b.n	8003354 <HAL_GPIO_Init+0x244>
 800333a:	2307      	movs	r3, #7
 800333c:	e00a      	b.n	8003354 <HAL_GPIO_Init+0x244>
 800333e:	2305      	movs	r3, #5
 8003340:	e008      	b.n	8003354 <HAL_GPIO_Init+0x244>
 8003342:	2304      	movs	r3, #4
 8003344:	e006      	b.n	8003354 <HAL_GPIO_Init+0x244>
 8003346:	2303      	movs	r3, #3
 8003348:	e004      	b.n	8003354 <HAL_GPIO_Init+0x244>
 800334a:	2302      	movs	r3, #2
 800334c:	e002      	b.n	8003354 <HAL_GPIO_Init+0x244>
 800334e:	2301      	movs	r3, #1
 8003350:	e000      	b.n	8003354 <HAL_GPIO_Init+0x244>
 8003352:	2300      	movs	r3, #0
 8003354:	697a      	ldr	r2, [r7, #20]
 8003356:	f002 0203 	and.w	r2, r2, #3
 800335a:	0092      	lsls	r2, r2, #2
 800335c:	4093      	lsls	r3, r2
 800335e:	693a      	ldr	r2, [r7, #16]
 8003360:	4313      	orrs	r3, r2
 8003362:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003364:	4937      	ldr	r1, [pc, #220]	@ (8003444 <HAL_GPIO_Init+0x334>)
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	089b      	lsrs	r3, r3, #2
 800336a:	3302      	adds	r3, #2
 800336c:	693a      	ldr	r2, [r7, #16]
 800336e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003372:	4b3b      	ldr	r3, [pc, #236]	@ (8003460 <HAL_GPIO_Init+0x350>)
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	43db      	mvns	r3, r3
 800337c:	693a      	ldr	r2, [r7, #16]
 800337e:	4013      	ands	r3, r2
 8003380:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800338a:	2b00      	cmp	r3, #0
 800338c:	d003      	beq.n	8003396 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800338e:	693a      	ldr	r2, [r7, #16]
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	4313      	orrs	r3, r2
 8003394:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003396:	4a32      	ldr	r2, [pc, #200]	@ (8003460 <HAL_GPIO_Init+0x350>)
 8003398:	693b      	ldr	r3, [r7, #16]
 800339a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800339c:	4b30      	ldr	r3, [pc, #192]	@ (8003460 <HAL_GPIO_Init+0x350>)
 800339e:	68db      	ldr	r3, [r3, #12]
 80033a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	43db      	mvns	r3, r3
 80033a6:	693a      	ldr	r2, [r7, #16]
 80033a8:	4013      	ands	r3, r2
 80033aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d003      	beq.n	80033c0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80033b8:	693a      	ldr	r2, [r7, #16]
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	4313      	orrs	r3, r2
 80033be:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80033c0:	4a27      	ldr	r2, [pc, #156]	@ (8003460 <HAL_GPIO_Init+0x350>)
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80033c6:	4b26      	ldr	r3, [pc, #152]	@ (8003460 <HAL_GPIO_Init+0x350>)
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	43db      	mvns	r3, r3
 80033d0:	693a      	ldr	r2, [r7, #16]
 80033d2:	4013      	ands	r3, r2
 80033d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d003      	beq.n	80033ea <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80033e2:	693a      	ldr	r2, [r7, #16]
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	4313      	orrs	r3, r2
 80033e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80033ea:	4a1d      	ldr	r2, [pc, #116]	@ (8003460 <HAL_GPIO_Init+0x350>)
 80033ec:	693b      	ldr	r3, [r7, #16]
 80033ee:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80033f0:	4b1b      	ldr	r3, [pc, #108]	@ (8003460 <HAL_GPIO_Init+0x350>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	43db      	mvns	r3, r3
 80033fa:	693a      	ldr	r2, [r7, #16]
 80033fc:	4013      	ands	r3, r2
 80033fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003408:	2b00      	cmp	r3, #0
 800340a:	d003      	beq.n	8003414 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800340c:	693a      	ldr	r2, [r7, #16]
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	4313      	orrs	r3, r2
 8003412:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003414:	4a12      	ldr	r2, [pc, #72]	@ (8003460 <HAL_GPIO_Init+0x350>)
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	3301      	adds	r3, #1
 800341e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	681a      	ldr	r2, [r3, #0]
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	fa22 f303 	lsr.w	r3, r2, r3
 800342a:	2b00      	cmp	r3, #0
 800342c:	f47f ae78 	bne.w	8003120 <HAL_GPIO_Init+0x10>
  }
}
 8003430:	bf00      	nop
 8003432:	bf00      	nop
 8003434:	371c      	adds	r7, #28
 8003436:	46bd      	mov	sp, r7
 8003438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343c:	4770      	bx	lr
 800343e:	bf00      	nop
 8003440:	40021000 	.word	0x40021000
 8003444:	40010000 	.word	0x40010000
 8003448:	48000400 	.word	0x48000400
 800344c:	48000800 	.word	0x48000800
 8003450:	48000c00 	.word	0x48000c00
 8003454:	48001000 	.word	0x48001000
 8003458:	48001400 	.word	0x48001400
 800345c:	48001800 	.word	0x48001800
 8003460:	40010400 	.word	0x40010400

08003464 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003464:	b480      	push	{r7}
 8003466:	b083      	sub	sp, #12
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
 800346c:	460b      	mov	r3, r1
 800346e:	807b      	strh	r3, [r7, #2]
 8003470:	4613      	mov	r3, r2
 8003472:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003474:	787b      	ldrb	r3, [r7, #1]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d003      	beq.n	8003482 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800347a:	887a      	ldrh	r2, [r7, #2]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003480:	e002      	b.n	8003488 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003482:	887a      	ldrh	r2, [r7, #2]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003488:	bf00      	nop
 800348a:	370c      	adds	r7, #12
 800348c:	46bd      	mov	sp, r7
 800348e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003492:	4770      	bx	lr

08003494 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003494:	b480      	push	{r7}
 8003496:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003498:	4b04      	ldr	r3, [pc, #16]	@ (80034ac <HAL_PWREx_GetVoltageRange+0x18>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80034a0:	4618      	mov	r0, r3
 80034a2:	46bd      	mov	sp, r7
 80034a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a8:	4770      	bx	lr
 80034aa:	bf00      	nop
 80034ac:	40007000 	.word	0x40007000

080034b0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b085      	sub	sp, #20
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80034be:	d130      	bne.n	8003522 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80034c0:	4b23      	ldr	r3, [pc, #140]	@ (8003550 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80034c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80034cc:	d038      	beq.n	8003540 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80034ce:	4b20      	ldr	r3, [pc, #128]	@ (8003550 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80034d6:	4a1e      	ldr	r2, [pc, #120]	@ (8003550 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034d8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80034dc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80034de:	4b1d      	ldr	r3, [pc, #116]	@ (8003554 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	2232      	movs	r2, #50	@ 0x32
 80034e4:	fb02 f303 	mul.w	r3, r2, r3
 80034e8:	4a1b      	ldr	r2, [pc, #108]	@ (8003558 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80034ea:	fba2 2303 	umull	r2, r3, r2, r3
 80034ee:	0c9b      	lsrs	r3, r3, #18
 80034f0:	3301      	adds	r3, #1
 80034f2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80034f4:	e002      	b.n	80034fc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	3b01      	subs	r3, #1
 80034fa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80034fc:	4b14      	ldr	r3, [pc, #80]	@ (8003550 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034fe:	695b      	ldr	r3, [r3, #20]
 8003500:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003504:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003508:	d102      	bne.n	8003510 <HAL_PWREx_ControlVoltageScaling+0x60>
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d1f2      	bne.n	80034f6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003510:	4b0f      	ldr	r3, [pc, #60]	@ (8003550 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003512:	695b      	ldr	r3, [r3, #20]
 8003514:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003518:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800351c:	d110      	bne.n	8003540 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800351e:	2303      	movs	r3, #3
 8003520:	e00f      	b.n	8003542 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003522:	4b0b      	ldr	r3, [pc, #44]	@ (8003550 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800352a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800352e:	d007      	beq.n	8003540 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003530:	4b07      	ldr	r3, [pc, #28]	@ (8003550 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003538:	4a05      	ldr	r2, [pc, #20]	@ (8003550 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800353a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800353e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003540:	2300      	movs	r3, #0
}
 8003542:	4618      	mov	r0, r3
 8003544:	3714      	adds	r7, #20
 8003546:	46bd      	mov	sp, r7
 8003548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354c:	4770      	bx	lr
 800354e:	bf00      	nop
 8003550:	40007000 	.word	0x40007000
 8003554:	20000000 	.word	0x20000000
 8003558:	431bde83 	.word	0x431bde83

0800355c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b088      	sub	sp, #32
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d101      	bne.n	800356e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	e3ca      	b.n	8003d04 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800356e:	4b97      	ldr	r3, [pc, #604]	@ (80037cc <HAL_RCC_OscConfig+0x270>)
 8003570:	689b      	ldr	r3, [r3, #8]
 8003572:	f003 030c 	and.w	r3, r3, #12
 8003576:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003578:	4b94      	ldr	r3, [pc, #592]	@ (80037cc <HAL_RCC_OscConfig+0x270>)
 800357a:	68db      	ldr	r3, [r3, #12]
 800357c:	f003 0303 	and.w	r3, r3, #3
 8003580:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f003 0310 	and.w	r3, r3, #16
 800358a:	2b00      	cmp	r3, #0
 800358c:	f000 80e4 	beq.w	8003758 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003590:	69bb      	ldr	r3, [r7, #24]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d007      	beq.n	80035a6 <HAL_RCC_OscConfig+0x4a>
 8003596:	69bb      	ldr	r3, [r7, #24]
 8003598:	2b0c      	cmp	r3, #12
 800359a:	f040 808b 	bne.w	80036b4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	2b01      	cmp	r3, #1
 80035a2:	f040 8087 	bne.w	80036b4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80035a6:	4b89      	ldr	r3, [pc, #548]	@ (80037cc <HAL_RCC_OscConfig+0x270>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f003 0302 	and.w	r3, r3, #2
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d005      	beq.n	80035be <HAL_RCC_OscConfig+0x62>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	699b      	ldr	r3, [r3, #24]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d101      	bne.n	80035be <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	e3a2      	b.n	8003d04 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6a1a      	ldr	r2, [r3, #32]
 80035c2:	4b82      	ldr	r3, [pc, #520]	@ (80037cc <HAL_RCC_OscConfig+0x270>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f003 0308 	and.w	r3, r3, #8
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d004      	beq.n	80035d8 <HAL_RCC_OscConfig+0x7c>
 80035ce:	4b7f      	ldr	r3, [pc, #508]	@ (80037cc <HAL_RCC_OscConfig+0x270>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80035d6:	e005      	b.n	80035e4 <HAL_RCC_OscConfig+0x88>
 80035d8:	4b7c      	ldr	r3, [pc, #496]	@ (80037cc <HAL_RCC_OscConfig+0x270>)
 80035da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80035de:	091b      	lsrs	r3, r3, #4
 80035e0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d223      	bcs.n	8003630 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6a1b      	ldr	r3, [r3, #32]
 80035ec:	4618      	mov	r0, r3
 80035ee:	f000 fd55 	bl	800409c <RCC_SetFlashLatencyFromMSIRange>
 80035f2:	4603      	mov	r3, r0
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d001      	beq.n	80035fc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80035f8:	2301      	movs	r3, #1
 80035fa:	e383      	b.n	8003d04 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80035fc:	4b73      	ldr	r3, [pc, #460]	@ (80037cc <HAL_RCC_OscConfig+0x270>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a72      	ldr	r2, [pc, #456]	@ (80037cc <HAL_RCC_OscConfig+0x270>)
 8003602:	f043 0308 	orr.w	r3, r3, #8
 8003606:	6013      	str	r3, [r2, #0]
 8003608:	4b70      	ldr	r3, [pc, #448]	@ (80037cc <HAL_RCC_OscConfig+0x270>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6a1b      	ldr	r3, [r3, #32]
 8003614:	496d      	ldr	r1, [pc, #436]	@ (80037cc <HAL_RCC_OscConfig+0x270>)
 8003616:	4313      	orrs	r3, r2
 8003618:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800361a:	4b6c      	ldr	r3, [pc, #432]	@ (80037cc <HAL_RCC_OscConfig+0x270>)
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	69db      	ldr	r3, [r3, #28]
 8003626:	021b      	lsls	r3, r3, #8
 8003628:	4968      	ldr	r1, [pc, #416]	@ (80037cc <HAL_RCC_OscConfig+0x270>)
 800362a:	4313      	orrs	r3, r2
 800362c:	604b      	str	r3, [r1, #4]
 800362e:	e025      	b.n	800367c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003630:	4b66      	ldr	r3, [pc, #408]	@ (80037cc <HAL_RCC_OscConfig+0x270>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a65      	ldr	r2, [pc, #404]	@ (80037cc <HAL_RCC_OscConfig+0x270>)
 8003636:	f043 0308 	orr.w	r3, r3, #8
 800363a:	6013      	str	r3, [r2, #0]
 800363c:	4b63      	ldr	r3, [pc, #396]	@ (80037cc <HAL_RCC_OscConfig+0x270>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6a1b      	ldr	r3, [r3, #32]
 8003648:	4960      	ldr	r1, [pc, #384]	@ (80037cc <HAL_RCC_OscConfig+0x270>)
 800364a:	4313      	orrs	r3, r2
 800364c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800364e:	4b5f      	ldr	r3, [pc, #380]	@ (80037cc <HAL_RCC_OscConfig+0x270>)
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	69db      	ldr	r3, [r3, #28]
 800365a:	021b      	lsls	r3, r3, #8
 800365c:	495b      	ldr	r1, [pc, #364]	@ (80037cc <HAL_RCC_OscConfig+0x270>)
 800365e:	4313      	orrs	r3, r2
 8003660:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003662:	69bb      	ldr	r3, [r7, #24]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d109      	bne.n	800367c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6a1b      	ldr	r3, [r3, #32]
 800366c:	4618      	mov	r0, r3
 800366e:	f000 fd15 	bl	800409c <RCC_SetFlashLatencyFromMSIRange>
 8003672:	4603      	mov	r3, r0
 8003674:	2b00      	cmp	r3, #0
 8003676:	d001      	beq.n	800367c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003678:	2301      	movs	r3, #1
 800367a:	e343      	b.n	8003d04 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800367c:	f000 fc4a 	bl	8003f14 <HAL_RCC_GetSysClockFreq>
 8003680:	4602      	mov	r2, r0
 8003682:	4b52      	ldr	r3, [pc, #328]	@ (80037cc <HAL_RCC_OscConfig+0x270>)
 8003684:	689b      	ldr	r3, [r3, #8]
 8003686:	091b      	lsrs	r3, r3, #4
 8003688:	f003 030f 	and.w	r3, r3, #15
 800368c:	4950      	ldr	r1, [pc, #320]	@ (80037d0 <HAL_RCC_OscConfig+0x274>)
 800368e:	5ccb      	ldrb	r3, [r1, r3]
 8003690:	f003 031f 	and.w	r3, r3, #31
 8003694:	fa22 f303 	lsr.w	r3, r2, r3
 8003698:	4a4e      	ldr	r2, [pc, #312]	@ (80037d4 <HAL_RCC_OscConfig+0x278>)
 800369a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800369c:	4b4e      	ldr	r3, [pc, #312]	@ (80037d8 <HAL_RCC_OscConfig+0x27c>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4618      	mov	r0, r3
 80036a2:	f7fe f8bf 	bl	8001824 <HAL_InitTick>
 80036a6:	4603      	mov	r3, r0
 80036a8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80036aa:	7bfb      	ldrb	r3, [r7, #15]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d052      	beq.n	8003756 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80036b0:	7bfb      	ldrb	r3, [r7, #15]
 80036b2:	e327      	b.n	8003d04 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	699b      	ldr	r3, [r3, #24]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d032      	beq.n	8003722 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80036bc:	4b43      	ldr	r3, [pc, #268]	@ (80037cc <HAL_RCC_OscConfig+0x270>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a42      	ldr	r2, [pc, #264]	@ (80037cc <HAL_RCC_OscConfig+0x270>)
 80036c2:	f043 0301 	orr.w	r3, r3, #1
 80036c6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80036c8:	f7fe f8fc 	bl	80018c4 <HAL_GetTick>
 80036cc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80036ce:	e008      	b.n	80036e2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80036d0:	f7fe f8f8 	bl	80018c4 <HAL_GetTick>
 80036d4:	4602      	mov	r2, r0
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	1ad3      	subs	r3, r2, r3
 80036da:	2b02      	cmp	r3, #2
 80036dc:	d901      	bls.n	80036e2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80036de:	2303      	movs	r3, #3
 80036e0:	e310      	b.n	8003d04 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80036e2:	4b3a      	ldr	r3, [pc, #232]	@ (80037cc <HAL_RCC_OscConfig+0x270>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f003 0302 	and.w	r3, r3, #2
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d0f0      	beq.n	80036d0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80036ee:	4b37      	ldr	r3, [pc, #220]	@ (80037cc <HAL_RCC_OscConfig+0x270>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a36      	ldr	r2, [pc, #216]	@ (80037cc <HAL_RCC_OscConfig+0x270>)
 80036f4:	f043 0308 	orr.w	r3, r3, #8
 80036f8:	6013      	str	r3, [r2, #0]
 80036fa:	4b34      	ldr	r3, [pc, #208]	@ (80037cc <HAL_RCC_OscConfig+0x270>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6a1b      	ldr	r3, [r3, #32]
 8003706:	4931      	ldr	r1, [pc, #196]	@ (80037cc <HAL_RCC_OscConfig+0x270>)
 8003708:	4313      	orrs	r3, r2
 800370a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800370c:	4b2f      	ldr	r3, [pc, #188]	@ (80037cc <HAL_RCC_OscConfig+0x270>)
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	69db      	ldr	r3, [r3, #28]
 8003718:	021b      	lsls	r3, r3, #8
 800371a:	492c      	ldr	r1, [pc, #176]	@ (80037cc <HAL_RCC_OscConfig+0x270>)
 800371c:	4313      	orrs	r3, r2
 800371e:	604b      	str	r3, [r1, #4]
 8003720:	e01a      	b.n	8003758 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003722:	4b2a      	ldr	r3, [pc, #168]	@ (80037cc <HAL_RCC_OscConfig+0x270>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a29      	ldr	r2, [pc, #164]	@ (80037cc <HAL_RCC_OscConfig+0x270>)
 8003728:	f023 0301 	bic.w	r3, r3, #1
 800372c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800372e:	f7fe f8c9 	bl	80018c4 <HAL_GetTick>
 8003732:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003734:	e008      	b.n	8003748 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003736:	f7fe f8c5 	bl	80018c4 <HAL_GetTick>
 800373a:	4602      	mov	r2, r0
 800373c:	693b      	ldr	r3, [r7, #16]
 800373e:	1ad3      	subs	r3, r2, r3
 8003740:	2b02      	cmp	r3, #2
 8003742:	d901      	bls.n	8003748 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003744:	2303      	movs	r3, #3
 8003746:	e2dd      	b.n	8003d04 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003748:	4b20      	ldr	r3, [pc, #128]	@ (80037cc <HAL_RCC_OscConfig+0x270>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f003 0302 	and.w	r3, r3, #2
 8003750:	2b00      	cmp	r3, #0
 8003752:	d1f0      	bne.n	8003736 <HAL_RCC_OscConfig+0x1da>
 8003754:	e000      	b.n	8003758 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003756:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f003 0301 	and.w	r3, r3, #1
 8003760:	2b00      	cmp	r3, #0
 8003762:	d074      	beq.n	800384e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003764:	69bb      	ldr	r3, [r7, #24]
 8003766:	2b08      	cmp	r3, #8
 8003768:	d005      	beq.n	8003776 <HAL_RCC_OscConfig+0x21a>
 800376a:	69bb      	ldr	r3, [r7, #24]
 800376c:	2b0c      	cmp	r3, #12
 800376e:	d10e      	bne.n	800378e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	2b03      	cmp	r3, #3
 8003774:	d10b      	bne.n	800378e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003776:	4b15      	ldr	r3, [pc, #84]	@ (80037cc <HAL_RCC_OscConfig+0x270>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800377e:	2b00      	cmp	r3, #0
 8003780:	d064      	beq.n	800384c <HAL_RCC_OscConfig+0x2f0>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d160      	bne.n	800384c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	e2ba      	b.n	8003d04 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003796:	d106      	bne.n	80037a6 <HAL_RCC_OscConfig+0x24a>
 8003798:	4b0c      	ldr	r3, [pc, #48]	@ (80037cc <HAL_RCC_OscConfig+0x270>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a0b      	ldr	r2, [pc, #44]	@ (80037cc <HAL_RCC_OscConfig+0x270>)
 800379e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037a2:	6013      	str	r3, [r2, #0]
 80037a4:	e026      	b.n	80037f4 <HAL_RCC_OscConfig+0x298>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80037ae:	d115      	bne.n	80037dc <HAL_RCC_OscConfig+0x280>
 80037b0:	4b06      	ldr	r3, [pc, #24]	@ (80037cc <HAL_RCC_OscConfig+0x270>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a05      	ldr	r2, [pc, #20]	@ (80037cc <HAL_RCC_OscConfig+0x270>)
 80037b6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80037ba:	6013      	str	r3, [r2, #0]
 80037bc:	4b03      	ldr	r3, [pc, #12]	@ (80037cc <HAL_RCC_OscConfig+0x270>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a02      	ldr	r2, [pc, #8]	@ (80037cc <HAL_RCC_OscConfig+0x270>)
 80037c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037c6:	6013      	str	r3, [r2, #0]
 80037c8:	e014      	b.n	80037f4 <HAL_RCC_OscConfig+0x298>
 80037ca:	bf00      	nop
 80037cc:	40021000 	.word	0x40021000
 80037d0:	08009d38 	.word	0x08009d38
 80037d4:	20000000 	.word	0x20000000
 80037d8:	20000004 	.word	0x20000004
 80037dc:	4ba0      	ldr	r3, [pc, #640]	@ (8003a60 <HAL_RCC_OscConfig+0x504>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a9f      	ldr	r2, [pc, #636]	@ (8003a60 <HAL_RCC_OscConfig+0x504>)
 80037e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80037e6:	6013      	str	r3, [r2, #0]
 80037e8:	4b9d      	ldr	r3, [pc, #628]	@ (8003a60 <HAL_RCC_OscConfig+0x504>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a9c      	ldr	r2, [pc, #624]	@ (8003a60 <HAL_RCC_OscConfig+0x504>)
 80037ee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80037f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d013      	beq.n	8003824 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037fc:	f7fe f862 	bl	80018c4 <HAL_GetTick>
 8003800:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003802:	e008      	b.n	8003816 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003804:	f7fe f85e 	bl	80018c4 <HAL_GetTick>
 8003808:	4602      	mov	r2, r0
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	1ad3      	subs	r3, r2, r3
 800380e:	2b64      	cmp	r3, #100	@ 0x64
 8003810:	d901      	bls.n	8003816 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003812:	2303      	movs	r3, #3
 8003814:	e276      	b.n	8003d04 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003816:	4b92      	ldr	r3, [pc, #584]	@ (8003a60 <HAL_RCC_OscConfig+0x504>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800381e:	2b00      	cmp	r3, #0
 8003820:	d0f0      	beq.n	8003804 <HAL_RCC_OscConfig+0x2a8>
 8003822:	e014      	b.n	800384e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003824:	f7fe f84e 	bl	80018c4 <HAL_GetTick>
 8003828:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800382a:	e008      	b.n	800383e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800382c:	f7fe f84a 	bl	80018c4 <HAL_GetTick>
 8003830:	4602      	mov	r2, r0
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	1ad3      	subs	r3, r2, r3
 8003836:	2b64      	cmp	r3, #100	@ 0x64
 8003838:	d901      	bls.n	800383e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800383a:	2303      	movs	r3, #3
 800383c:	e262      	b.n	8003d04 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800383e:	4b88      	ldr	r3, [pc, #544]	@ (8003a60 <HAL_RCC_OscConfig+0x504>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003846:	2b00      	cmp	r3, #0
 8003848:	d1f0      	bne.n	800382c <HAL_RCC_OscConfig+0x2d0>
 800384a:	e000      	b.n	800384e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800384c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f003 0302 	and.w	r3, r3, #2
 8003856:	2b00      	cmp	r3, #0
 8003858:	d060      	beq.n	800391c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800385a:	69bb      	ldr	r3, [r7, #24]
 800385c:	2b04      	cmp	r3, #4
 800385e:	d005      	beq.n	800386c <HAL_RCC_OscConfig+0x310>
 8003860:	69bb      	ldr	r3, [r7, #24]
 8003862:	2b0c      	cmp	r3, #12
 8003864:	d119      	bne.n	800389a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003866:	697b      	ldr	r3, [r7, #20]
 8003868:	2b02      	cmp	r3, #2
 800386a:	d116      	bne.n	800389a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800386c:	4b7c      	ldr	r3, [pc, #496]	@ (8003a60 <HAL_RCC_OscConfig+0x504>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003874:	2b00      	cmp	r3, #0
 8003876:	d005      	beq.n	8003884 <HAL_RCC_OscConfig+0x328>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	68db      	ldr	r3, [r3, #12]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d101      	bne.n	8003884 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003880:	2301      	movs	r3, #1
 8003882:	e23f      	b.n	8003d04 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003884:	4b76      	ldr	r3, [pc, #472]	@ (8003a60 <HAL_RCC_OscConfig+0x504>)
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	691b      	ldr	r3, [r3, #16]
 8003890:	061b      	lsls	r3, r3, #24
 8003892:	4973      	ldr	r1, [pc, #460]	@ (8003a60 <HAL_RCC_OscConfig+0x504>)
 8003894:	4313      	orrs	r3, r2
 8003896:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003898:	e040      	b.n	800391c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	68db      	ldr	r3, [r3, #12]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d023      	beq.n	80038ea <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038a2:	4b6f      	ldr	r3, [pc, #444]	@ (8003a60 <HAL_RCC_OscConfig+0x504>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a6e      	ldr	r2, [pc, #440]	@ (8003a60 <HAL_RCC_OscConfig+0x504>)
 80038a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80038ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038ae:	f7fe f809 	bl	80018c4 <HAL_GetTick>
 80038b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80038b4:	e008      	b.n	80038c8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038b6:	f7fe f805 	bl	80018c4 <HAL_GetTick>
 80038ba:	4602      	mov	r2, r0
 80038bc:	693b      	ldr	r3, [r7, #16]
 80038be:	1ad3      	subs	r3, r2, r3
 80038c0:	2b02      	cmp	r3, #2
 80038c2:	d901      	bls.n	80038c8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80038c4:	2303      	movs	r3, #3
 80038c6:	e21d      	b.n	8003d04 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80038c8:	4b65      	ldr	r3, [pc, #404]	@ (8003a60 <HAL_RCC_OscConfig+0x504>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d0f0      	beq.n	80038b6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038d4:	4b62      	ldr	r3, [pc, #392]	@ (8003a60 <HAL_RCC_OscConfig+0x504>)
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	691b      	ldr	r3, [r3, #16]
 80038e0:	061b      	lsls	r3, r3, #24
 80038e2:	495f      	ldr	r1, [pc, #380]	@ (8003a60 <HAL_RCC_OscConfig+0x504>)
 80038e4:	4313      	orrs	r3, r2
 80038e6:	604b      	str	r3, [r1, #4]
 80038e8:	e018      	b.n	800391c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038ea:	4b5d      	ldr	r3, [pc, #372]	@ (8003a60 <HAL_RCC_OscConfig+0x504>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a5c      	ldr	r2, [pc, #368]	@ (8003a60 <HAL_RCC_OscConfig+0x504>)
 80038f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80038f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038f6:	f7fd ffe5 	bl	80018c4 <HAL_GetTick>
 80038fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80038fc:	e008      	b.n	8003910 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038fe:	f7fd ffe1 	bl	80018c4 <HAL_GetTick>
 8003902:	4602      	mov	r2, r0
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	1ad3      	subs	r3, r2, r3
 8003908:	2b02      	cmp	r3, #2
 800390a:	d901      	bls.n	8003910 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800390c:	2303      	movs	r3, #3
 800390e:	e1f9      	b.n	8003d04 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003910:	4b53      	ldr	r3, [pc, #332]	@ (8003a60 <HAL_RCC_OscConfig+0x504>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003918:	2b00      	cmp	r3, #0
 800391a:	d1f0      	bne.n	80038fe <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f003 0308 	and.w	r3, r3, #8
 8003924:	2b00      	cmp	r3, #0
 8003926:	d03c      	beq.n	80039a2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	695b      	ldr	r3, [r3, #20]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d01c      	beq.n	800396a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003930:	4b4b      	ldr	r3, [pc, #300]	@ (8003a60 <HAL_RCC_OscConfig+0x504>)
 8003932:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003936:	4a4a      	ldr	r2, [pc, #296]	@ (8003a60 <HAL_RCC_OscConfig+0x504>)
 8003938:	f043 0301 	orr.w	r3, r3, #1
 800393c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003940:	f7fd ffc0 	bl	80018c4 <HAL_GetTick>
 8003944:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003946:	e008      	b.n	800395a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003948:	f7fd ffbc 	bl	80018c4 <HAL_GetTick>
 800394c:	4602      	mov	r2, r0
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	1ad3      	subs	r3, r2, r3
 8003952:	2b02      	cmp	r3, #2
 8003954:	d901      	bls.n	800395a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003956:	2303      	movs	r3, #3
 8003958:	e1d4      	b.n	8003d04 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800395a:	4b41      	ldr	r3, [pc, #260]	@ (8003a60 <HAL_RCC_OscConfig+0x504>)
 800395c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003960:	f003 0302 	and.w	r3, r3, #2
 8003964:	2b00      	cmp	r3, #0
 8003966:	d0ef      	beq.n	8003948 <HAL_RCC_OscConfig+0x3ec>
 8003968:	e01b      	b.n	80039a2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800396a:	4b3d      	ldr	r3, [pc, #244]	@ (8003a60 <HAL_RCC_OscConfig+0x504>)
 800396c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003970:	4a3b      	ldr	r2, [pc, #236]	@ (8003a60 <HAL_RCC_OscConfig+0x504>)
 8003972:	f023 0301 	bic.w	r3, r3, #1
 8003976:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800397a:	f7fd ffa3 	bl	80018c4 <HAL_GetTick>
 800397e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003980:	e008      	b.n	8003994 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003982:	f7fd ff9f 	bl	80018c4 <HAL_GetTick>
 8003986:	4602      	mov	r2, r0
 8003988:	693b      	ldr	r3, [r7, #16]
 800398a:	1ad3      	subs	r3, r2, r3
 800398c:	2b02      	cmp	r3, #2
 800398e:	d901      	bls.n	8003994 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003990:	2303      	movs	r3, #3
 8003992:	e1b7      	b.n	8003d04 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003994:	4b32      	ldr	r3, [pc, #200]	@ (8003a60 <HAL_RCC_OscConfig+0x504>)
 8003996:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800399a:	f003 0302 	and.w	r3, r3, #2
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d1ef      	bne.n	8003982 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f003 0304 	and.w	r3, r3, #4
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	f000 80a6 	beq.w	8003afc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039b0:	2300      	movs	r3, #0
 80039b2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80039b4:	4b2a      	ldr	r3, [pc, #168]	@ (8003a60 <HAL_RCC_OscConfig+0x504>)
 80039b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d10d      	bne.n	80039dc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039c0:	4b27      	ldr	r3, [pc, #156]	@ (8003a60 <HAL_RCC_OscConfig+0x504>)
 80039c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039c4:	4a26      	ldr	r2, [pc, #152]	@ (8003a60 <HAL_RCC_OscConfig+0x504>)
 80039c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80039ca:	6593      	str	r3, [r2, #88]	@ 0x58
 80039cc:	4b24      	ldr	r3, [pc, #144]	@ (8003a60 <HAL_RCC_OscConfig+0x504>)
 80039ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039d4:	60bb      	str	r3, [r7, #8]
 80039d6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039d8:	2301      	movs	r3, #1
 80039da:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039dc:	4b21      	ldr	r3, [pc, #132]	@ (8003a64 <HAL_RCC_OscConfig+0x508>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d118      	bne.n	8003a1a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80039e8:	4b1e      	ldr	r3, [pc, #120]	@ (8003a64 <HAL_RCC_OscConfig+0x508>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a1d      	ldr	r2, [pc, #116]	@ (8003a64 <HAL_RCC_OscConfig+0x508>)
 80039ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80039f2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039f4:	f7fd ff66 	bl	80018c4 <HAL_GetTick>
 80039f8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039fa:	e008      	b.n	8003a0e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039fc:	f7fd ff62 	bl	80018c4 <HAL_GetTick>
 8003a00:	4602      	mov	r2, r0
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	1ad3      	subs	r3, r2, r3
 8003a06:	2b02      	cmp	r3, #2
 8003a08:	d901      	bls.n	8003a0e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003a0a:	2303      	movs	r3, #3
 8003a0c:	e17a      	b.n	8003d04 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a0e:	4b15      	ldr	r3, [pc, #84]	@ (8003a64 <HAL_RCC_OscConfig+0x508>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d0f0      	beq.n	80039fc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	2b01      	cmp	r3, #1
 8003a20:	d108      	bne.n	8003a34 <HAL_RCC_OscConfig+0x4d8>
 8003a22:	4b0f      	ldr	r3, [pc, #60]	@ (8003a60 <HAL_RCC_OscConfig+0x504>)
 8003a24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a28:	4a0d      	ldr	r2, [pc, #52]	@ (8003a60 <HAL_RCC_OscConfig+0x504>)
 8003a2a:	f043 0301 	orr.w	r3, r3, #1
 8003a2e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003a32:	e029      	b.n	8003a88 <HAL_RCC_OscConfig+0x52c>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	2b05      	cmp	r3, #5
 8003a3a:	d115      	bne.n	8003a68 <HAL_RCC_OscConfig+0x50c>
 8003a3c:	4b08      	ldr	r3, [pc, #32]	@ (8003a60 <HAL_RCC_OscConfig+0x504>)
 8003a3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a42:	4a07      	ldr	r2, [pc, #28]	@ (8003a60 <HAL_RCC_OscConfig+0x504>)
 8003a44:	f043 0304 	orr.w	r3, r3, #4
 8003a48:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003a4c:	4b04      	ldr	r3, [pc, #16]	@ (8003a60 <HAL_RCC_OscConfig+0x504>)
 8003a4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a52:	4a03      	ldr	r2, [pc, #12]	@ (8003a60 <HAL_RCC_OscConfig+0x504>)
 8003a54:	f043 0301 	orr.w	r3, r3, #1
 8003a58:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003a5c:	e014      	b.n	8003a88 <HAL_RCC_OscConfig+0x52c>
 8003a5e:	bf00      	nop
 8003a60:	40021000 	.word	0x40021000
 8003a64:	40007000 	.word	0x40007000
 8003a68:	4b9c      	ldr	r3, [pc, #624]	@ (8003cdc <HAL_RCC_OscConfig+0x780>)
 8003a6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a6e:	4a9b      	ldr	r2, [pc, #620]	@ (8003cdc <HAL_RCC_OscConfig+0x780>)
 8003a70:	f023 0301 	bic.w	r3, r3, #1
 8003a74:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003a78:	4b98      	ldr	r3, [pc, #608]	@ (8003cdc <HAL_RCC_OscConfig+0x780>)
 8003a7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a7e:	4a97      	ldr	r2, [pc, #604]	@ (8003cdc <HAL_RCC_OscConfig+0x780>)
 8003a80:	f023 0304 	bic.w	r3, r3, #4
 8003a84:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d016      	beq.n	8003abe <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a90:	f7fd ff18 	bl	80018c4 <HAL_GetTick>
 8003a94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a96:	e00a      	b.n	8003aae <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a98:	f7fd ff14 	bl	80018c4 <HAL_GetTick>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	1ad3      	subs	r3, r2, r3
 8003aa2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d901      	bls.n	8003aae <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003aaa:	2303      	movs	r3, #3
 8003aac:	e12a      	b.n	8003d04 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003aae:	4b8b      	ldr	r3, [pc, #556]	@ (8003cdc <HAL_RCC_OscConfig+0x780>)
 8003ab0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ab4:	f003 0302 	and.w	r3, r3, #2
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d0ed      	beq.n	8003a98 <HAL_RCC_OscConfig+0x53c>
 8003abc:	e015      	b.n	8003aea <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003abe:	f7fd ff01 	bl	80018c4 <HAL_GetTick>
 8003ac2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003ac4:	e00a      	b.n	8003adc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ac6:	f7fd fefd 	bl	80018c4 <HAL_GetTick>
 8003aca:	4602      	mov	r2, r0
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	1ad3      	subs	r3, r2, r3
 8003ad0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d901      	bls.n	8003adc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003ad8:	2303      	movs	r3, #3
 8003ada:	e113      	b.n	8003d04 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003adc:	4b7f      	ldr	r3, [pc, #508]	@ (8003cdc <HAL_RCC_OscConfig+0x780>)
 8003ade:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ae2:	f003 0302 	and.w	r3, r3, #2
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d1ed      	bne.n	8003ac6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003aea:	7ffb      	ldrb	r3, [r7, #31]
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	d105      	bne.n	8003afc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003af0:	4b7a      	ldr	r3, [pc, #488]	@ (8003cdc <HAL_RCC_OscConfig+0x780>)
 8003af2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003af4:	4a79      	ldr	r2, [pc, #484]	@ (8003cdc <HAL_RCC_OscConfig+0x780>)
 8003af6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003afa:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	f000 80fe 	beq.w	8003d02 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b0a:	2b02      	cmp	r3, #2
 8003b0c:	f040 80d0 	bne.w	8003cb0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003b10:	4b72      	ldr	r3, [pc, #456]	@ (8003cdc <HAL_RCC_OscConfig+0x780>)
 8003b12:	68db      	ldr	r3, [r3, #12]
 8003b14:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	f003 0203 	and.w	r2, r3, #3
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b20:	429a      	cmp	r2, r3
 8003b22:	d130      	bne.n	8003b86 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003b24:	697b      	ldr	r3, [r7, #20]
 8003b26:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b2e:	3b01      	subs	r3, #1
 8003b30:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b32:	429a      	cmp	r2, r3
 8003b34:	d127      	bne.n	8003b86 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b40:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003b42:	429a      	cmp	r2, r3
 8003b44:	d11f      	bne.n	8003b86 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b4c:	687a      	ldr	r2, [r7, #4]
 8003b4e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003b50:	2a07      	cmp	r2, #7
 8003b52:	bf14      	ite	ne
 8003b54:	2201      	movne	r2, #1
 8003b56:	2200      	moveq	r2, #0
 8003b58:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d113      	bne.n	8003b86 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b68:	085b      	lsrs	r3, r3, #1
 8003b6a:	3b01      	subs	r3, #1
 8003b6c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003b6e:	429a      	cmp	r2, r3
 8003b70:	d109      	bne.n	8003b86 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b7c:	085b      	lsrs	r3, r3, #1
 8003b7e:	3b01      	subs	r3, #1
 8003b80:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b82:	429a      	cmp	r2, r3
 8003b84:	d06e      	beq.n	8003c64 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003b86:	69bb      	ldr	r3, [r7, #24]
 8003b88:	2b0c      	cmp	r3, #12
 8003b8a:	d069      	beq.n	8003c60 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003b8c:	4b53      	ldr	r3, [pc, #332]	@ (8003cdc <HAL_RCC_OscConfig+0x780>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d105      	bne.n	8003ba4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003b98:	4b50      	ldr	r3, [pc, #320]	@ (8003cdc <HAL_RCC_OscConfig+0x780>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d001      	beq.n	8003ba8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	e0ad      	b.n	8003d04 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003ba8:	4b4c      	ldr	r3, [pc, #304]	@ (8003cdc <HAL_RCC_OscConfig+0x780>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a4b      	ldr	r2, [pc, #300]	@ (8003cdc <HAL_RCC_OscConfig+0x780>)
 8003bae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003bb2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003bb4:	f7fd fe86 	bl	80018c4 <HAL_GetTick>
 8003bb8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003bba:	e008      	b.n	8003bce <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bbc:	f7fd fe82 	bl	80018c4 <HAL_GetTick>
 8003bc0:	4602      	mov	r2, r0
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	1ad3      	subs	r3, r2, r3
 8003bc6:	2b02      	cmp	r3, #2
 8003bc8:	d901      	bls.n	8003bce <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003bca:	2303      	movs	r3, #3
 8003bcc:	e09a      	b.n	8003d04 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003bce:	4b43      	ldr	r3, [pc, #268]	@ (8003cdc <HAL_RCC_OscConfig+0x780>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d1f0      	bne.n	8003bbc <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003bda:	4b40      	ldr	r3, [pc, #256]	@ (8003cdc <HAL_RCC_OscConfig+0x780>)
 8003bdc:	68da      	ldr	r2, [r3, #12]
 8003bde:	4b40      	ldr	r3, [pc, #256]	@ (8003ce0 <HAL_RCC_OscConfig+0x784>)
 8003be0:	4013      	ands	r3, r2
 8003be2:	687a      	ldr	r2, [r7, #4]
 8003be4:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003be6:	687a      	ldr	r2, [r7, #4]
 8003be8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003bea:	3a01      	subs	r2, #1
 8003bec:	0112      	lsls	r2, r2, #4
 8003bee:	4311      	orrs	r1, r2
 8003bf0:	687a      	ldr	r2, [r7, #4]
 8003bf2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003bf4:	0212      	lsls	r2, r2, #8
 8003bf6:	4311      	orrs	r1, r2
 8003bf8:	687a      	ldr	r2, [r7, #4]
 8003bfa:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003bfc:	0852      	lsrs	r2, r2, #1
 8003bfe:	3a01      	subs	r2, #1
 8003c00:	0552      	lsls	r2, r2, #21
 8003c02:	4311      	orrs	r1, r2
 8003c04:	687a      	ldr	r2, [r7, #4]
 8003c06:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003c08:	0852      	lsrs	r2, r2, #1
 8003c0a:	3a01      	subs	r2, #1
 8003c0c:	0652      	lsls	r2, r2, #25
 8003c0e:	4311      	orrs	r1, r2
 8003c10:	687a      	ldr	r2, [r7, #4]
 8003c12:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003c14:	0912      	lsrs	r2, r2, #4
 8003c16:	0452      	lsls	r2, r2, #17
 8003c18:	430a      	orrs	r2, r1
 8003c1a:	4930      	ldr	r1, [pc, #192]	@ (8003cdc <HAL_RCC_OscConfig+0x780>)
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003c20:	4b2e      	ldr	r3, [pc, #184]	@ (8003cdc <HAL_RCC_OscConfig+0x780>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a2d      	ldr	r2, [pc, #180]	@ (8003cdc <HAL_RCC_OscConfig+0x780>)
 8003c26:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003c2a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003c2c:	4b2b      	ldr	r3, [pc, #172]	@ (8003cdc <HAL_RCC_OscConfig+0x780>)
 8003c2e:	68db      	ldr	r3, [r3, #12]
 8003c30:	4a2a      	ldr	r2, [pc, #168]	@ (8003cdc <HAL_RCC_OscConfig+0x780>)
 8003c32:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003c36:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003c38:	f7fd fe44 	bl	80018c4 <HAL_GetTick>
 8003c3c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c3e:	e008      	b.n	8003c52 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c40:	f7fd fe40 	bl	80018c4 <HAL_GetTick>
 8003c44:	4602      	mov	r2, r0
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	1ad3      	subs	r3, r2, r3
 8003c4a:	2b02      	cmp	r3, #2
 8003c4c:	d901      	bls.n	8003c52 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003c4e:	2303      	movs	r3, #3
 8003c50:	e058      	b.n	8003d04 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c52:	4b22      	ldr	r3, [pc, #136]	@ (8003cdc <HAL_RCC_OscConfig+0x780>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d0f0      	beq.n	8003c40 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003c5e:	e050      	b.n	8003d02 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003c60:	2301      	movs	r3, #1
 8003c62:	e04f      	b.n	8003d04 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c64:	4b1d      	ldr	r3, [pc, #116]	@ (8003cdc <HAL_RCC_OscConfig+0x780>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d148      	bne.n	8003d02 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003c70:	4b1a      	ldr	r3, [pc, #104]	@ (8003cdc <HAL_RCC_OscConfig+0x780>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a19      	ldr	r2, [pc, #100]	@ (8003cdc <HAL_RCC_OscConfig+0x780>)
 8003c76:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003c7a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003c7c:	4b17      	ldr	r3, [pc, #92]	@ (8003cdc <HAL_RCC_OscConfig+0x780>)
 8003c7e:	68db      	ldr	r3, [r3, #12]
 8003c80:	4a16      	ldr	r2, [pc, #88]	@ (8003cdc <HAL_RCC_OscConfig+0x780>)
 8003c82:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003c86:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003c88:	f7fd fe1c 	bl	80018c4 <HAL_GetTick>
 8003c8c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c8e:	e008      	b.n	8003ca2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c90:	f7fd fe18 	bl	80018c4 <HAL_GetTick>
 8003c94:	4602      	mov	r2, r0
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	1ad3      	subs	r3, r2, r3
 8003c9a:	2b02      	cmp	r3, #2
 8003c9c:	d901      	bls.n	8003ca2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003c9e:	2303      	movs	r3, #3
 8003ca0:	e030      	b.n	8003d04 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ca2:	4b0e      	ldr	r3, [pc, #56]	@ (8003cdc <HAL_RCC_OscConfig+0x780>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d0f0      	beq.n	8003c90 <HAL_RCC_OscConfig+0x734>
 8003cae:	e028      	b.n	8003d02 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003cb0:	69bb      	ldr	r3, [r7, #24]
 8003cb2:	2b0c      	cmp	r3, #12
 8003cb4:	d023      	beq.n	8003cfe <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cb6:	4b09      	ldr	r3, [pc, #36]	@ (8003cdc <HAL_RCC_OscConfig+0x780>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a08      	ldr	r2, [pc, #32]	@ (8003cdc <HAL_RCC_OscConfig+0x780>)
 8003cbc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003cc0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cc2:	f7fd fdff 	bl	80018c4 <HAL_GetTick>
 8003cc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003cc8:	e00c      	b.n	8003ce4 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cca:	f7fd fdfb 	bl	80018c4 <HAL_GetTick>
 8003cce:	4602      	mov	r2, r0
 8003cd0:	693b      	ldr	r3, [r7, #16]
 8003cd2:	1ad3      	subs	r3, r2, r3
 8003cd4:	2b02      	cmp	r3, #2
 8003cd6:	d905      	bls.n	8003ce4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003cd8:	2303      	movs	r3, #3
 8003cda:	e013      	b.n	8003d04 <HAL_RCC_OscConfig+0x7a8>
 8003cdc:	40021000 	.word	0x40021000
 8003ce0:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ce4:	4b09      	ldr	r3, [pc, #36]	@ (8003d0c <HAL_RCC_OscConfig+0x7b0>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d1ec      	bne.n	8003cca <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003cf0:	4b06      	ldr	r3, [pc, #24]	@ (8003d0c <HAL_RCC_OscConfig+0x7b0>)
 8003cf2:	68da      	ldr	r2, [r3, #12]
 8003cf4:	4905      	ldr	r1, [pc, #20]	@ (8003d0c <HAL_RCC_OscConfig+0x7b0>)
 8003cf6:	4b06      	ldr	r3, [pc, #24]	@ (8003d10 <HAL_RCC_OscConfig+0x7b4>)
 8003cf8:	4013      	ands	r3, r2
 8003cfa:	60cb      	str	r3, [r1, #12]
 8003cfc:	e001      	b.n	8003d02 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	e000      	b.n	8003d04 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003d02:	2300      	movs	r3, #0
}
 8003d04:	4618      	mov	r0, r3
 8003d06:	3720      	adds	r7, #32
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bd80      	pop	{r7, pc}
 8003d0c:	40021000 	.word	0x40021000
 8003d10:	feeefffc 	.word	0xfeeefffc

08003d14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b084      	sub	sp, #16
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
 8003d1c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d101      	bne.n	8003d28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d24:	2301      	movs	r3, #1
 8003d26:	e0e7      	b.n	8003ef8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d28:	4b75      	ldr	r3, [pc, #468]	@ (8003f00 <HAL_RCC_ClockConfig+0x1ec>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f003 0307 	and.w	r3, r3, #7
 8003d30:	683a      	ldr	r2, [r7, #0]
 8003d32:	429a      	cmp	r2, r3
 8003d34:	d910      	bls.n	8003d58 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d36:	4b72      	ldr	r3, [pc, #456]	@ (8003f00 <HAL_RCC_ClockConfig+0x1ec>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f023 0207 	bic.w	r2, r3, #7
 8003d3e:	4970      	ldr	r1, [pc, #448]	@ (8003f00 <HAL_RCC_ClockConfig+0x1ec>)
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	4313      	orrs	r3, r2
 8003d44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d46:	4b6e      	ldr	r3, [pc, #440]	@ (8003f00 <HAL_RCC_ClockConfig+0x1ec>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f003 0307 	and.w	r3, r3, #7
 8003d4e:	683a      	ldr	r2, [r7, #0]
 8003d50:	429a      	cmp	r2, r3
 8003d52:	d001      	beq.n	8003d58 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003d54:	2301      	movs	r3, #1
 8003d56:	e0cf      	b.n	8003ef8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f003 0302 	and.w	r3, r3, #2
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d010      	beq.n	8003d86 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	689a      	ldr	r2, [r3, #8]
 8003d68:	4b66      	ldr	r3, [pc, #408]	@ (8003f04 <HAL_RCC_ClockConfig+0x1f0>)
 8003d6a:	689b      	ldr	r3, [r3, #8]
 8003d6c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003d70:	429a      	cmp	r2, r3
 8003d72:	d908      	bls.n	8003d86 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d74:	4b63      	ldr	r3, [pc, #396]	@ (8003f04 <HAL_RCC_ClockConfig+0x1f0>)
 8003d76:	689b      	ldr	r3, [r3, #8]
 8003d78:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	689b      	ldr	r3, [r3, #8]
 8003d80:	4960      	ldr	r1, [pc, #384]	@ (8003f04 <HAL_RCC_ClockConfig+0x1f0>)
 8003d82:	4313      	orrs	r3, r2
 8003d84:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f003 0301 	and.w	r3, r3, #1
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d04c      	beq.n	8003e2c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	2b03      	cmp	r3, #3
 8003d98:	d107      	bne.n	8003daa <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d9a:	4b5a      	ldr	r3, [pc, #360]	@ (8003f04 <HAL_RCC_ClockConfig+0x1f0>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d121      	bne.n	8003dea <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	e0a6      	b.n	8003ef8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	2b02      	cmp	r3, #2
 8003db0:	d107      	bne.n	8003dc2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003db2:	4b54      	ldr	r3, [pc, #336]	@ (8003f04 <HAL_RCC_ClockConfig+0x1f0>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d115      	bne.n	8003dea <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e09a      	b.n	8003ef8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d107      	bne.n	8003dda <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003dca:	4b4e      	ldr	r3, [pc, #312]	@ (8003f04 <HAL_RCC_ClockConfig+0x1f0>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f003 0302 	and.w	r3, r3, #2
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d109      	bne.n	8003dea <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	e08e      	b.n	8003ef8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003dda:	4b4a      	ldr	r3, [pc, #296]	@ (8003f04 <HAL_RCC_ClockConfig+0x1f0>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d101      	bne.n	8003dea <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003de6:	2301      	movs	r3, #1
 8003de8:	e086      	b.n	8003ef8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003dea:	4b46      	ldr	r3, [pc, #280]	@ (8003f04 <HAL_RCC_ClockConfig+0x1f0>)
 8003dec:	689b      	ldr	r3, [r3, #8]
 8003dee:	f023 0203 	bic.w	r2, r3, #3
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	4943      	ldr	r1, [pc, #268]	@ (8003f04 <HAL_RCC_ClockConfig+0x1f0>)
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003dfc:	f7fd fd62 	bl	80018c4 <HAL_GetTick>
 8003e00:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e02:	e00a      	b.n	8003e1a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e04:	f7fd fd5e 	bl	80018c4 <HAL_GetTick>
 8003e08:	4602      	mov	r2, r0
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	1ad3      	subs	r3, r2, r3
 8003e0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d901      	bls.n	8003e1a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003e16:	2303      	movs	r3, #3
 8003e18:	e06e      	b.n	8003ef8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e1a:	4b3a      	ldr	r3, [pc, #232]	@ (8003f04 <HAL_RCC_ClockConfig+0x1f0>)
 8003e1c:	689b      	ldr	r3, [r3, #8]
 8003e1e:	f003 020c 	and.w	r2, r3, #12
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	009b      	lsls	r3, r3, #2
 8003e28:	429a      	cmp	r2, r3
 8003e2a:	d1eb      	bne.n	8003e04 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f003 0302 	and.w	r3, r3, #2
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d010      	beq.n	8003e5a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	689a      	ldr	r2, [r3, #8]
 8003e3c:	4b31      	ldr	r3, [pc, #196]	@ (8003f04 <HAL_RCC_ClockConfig+0x1f0>)
 8003e3e:	689b      	ldr	r3, [r3, #8]
 8003e40:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003e44:	429a      	cmp	r2, r3
 8003e46:	d208      	bcs.n	8003e5a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e48:	4b2e      	ldr	r3, [pc, #184]	@ (8003f04 <HAL_RCC_ClockConfig+0x1f0>)
 8003e4a:	689b      	ldr	r3, [r3, #8]
 8003e4c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	492b      	ldr	r1, [pc, #172]	@ (8003f04 <HAL_RCC_ClockConfig+0x1f0>)
 8003e56:	4313      	orrs	r3, r2
 8003e58:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e5a:	4b29      	ldr	r3, [pc, #164]	@ (8003f00 <HAL_RCC_ClockConfig+0x1ec>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f003 0307 	and.w	r3, r3, #7
 8003e62:	683a      	ldr	r2, [r7, #0]
 8003e64:	429a      	cmp	r2, r3
 8003e66:	d210      	bcs.n	8003e8a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e68:	4b25      	ldr	r3, [pc, #148]	@ (8003f00 <HAL_RCC_ClockConfig+0x1ec>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f023 0207 	bic.w	r2, r3, #7
 8003e70:	4923      	ldr	r1, [pc, #140]	@ (8003f00 <HAL_RCC_ClockConfig+0x1ec>)
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	4313      	orrs	r3, r2
 8003e76:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e78:	4b21      	ldr	r3, [pc, #132]	@ (8003f00 <HAL_RCC_ClockConfig+0x1ec>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f003 0307 	and.w	r3, r3, #7
 8003e80:	683a      	ldr	r2, [r7, #0]
 8003e82:	429a      	cmp	r2, r3
 8003e84:	d001      	beq.n	8003e8a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	e036      	b.n	8003ef8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f003 0304 	and.w	r3, r3, #4
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d008      	beq.n	8003ea8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e96:	4b1b      	ldr	r3, [pc, #108]	@ (8003f04 <HAL_RCC_ClockConfig+0x1f0>)
 8003e98:	689b      	ldr	r3, [r3, #8]
 8003e9a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	68db      	ldr	r3, [r3, #12]
 8003ea2:	4918      	ldr	r1, [pc, #96]	@ (8003f04 <HAL_RCC_ClockConfig+0x1f0>)
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f003 0308 	and.w	r3, r3, #8
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d009      	beq.n	8003ec8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003eb4:	4b13      	ldr	r3, [pc, #76]	@ (8003f04 <HAL_RCC_ClockConfig+0x1f0>)
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	691b      	ldr	r3, [r3, #16]
 8003ec0:	00db      	lsls	r3, r3, #3
 8003ec2:	4910      	ldr	r1, [pc, #64]	@ (8003f04 <HAL_RCC_ClockConfig+0x1f0>)
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003ec8:	f000 f824 	bl	8003f14 <HAL_RCC_GetSysClockFreq>
 8003ecc:	4602      	mov	r2, r0
 8003ece:	4b0d      	ldr	r3, [pc, #52]	@ (8003f04 <HAL_RCC_ClockConfig+0x1f0>)
 8003ed0:	689b      	ldr	r3, [r3, #8]
 8003ed2:	091b      	lsrs	r3, r3, #4
 8003ed4:	f003 030f 	and.w	r3, r3, #15
 8003ed8:	490b      	ldr	r1, [pc, #44]	@ (8003f08 <HAL_RCC_ClockConfig+0x1f4>)
 8003eda:	5ccb      	ldrb	r3, [r1, r3]
 8003edc:	f003 031f 	and.w	r3, r3, #31
 8003ee0:	fa22 f303 	lsr.w	r3, r2, r3
 8003ee4:	4a09      	ldr	r2, [pc, #36]	@ (8003f0c <HAL_RCC_ClockConfig+0x1f8>)
 8003ee6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003ee8:	4b09      	ldr	r3, [pc, #36]	@ (8003f10 <HAL_RCC_ClockConfig+0x1fc>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4618      	mov	r0, r3
 8003eee:	f7fd fc99 	bl	8001824 <HAL_InitTick>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	72fb      	strb	r3, [r7, #11]

  return status;
 8003ef6:	7afb      	ldrb	r3, [r7, #11]
}
 8003ef8:	4618      	mov	r0, r3
 8003efa:	3710      	adds	r7, #16
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bd80      	pop	{r7, pc}
 8003f00:	40022000 	.word	0x40022000
 8003f04:	40021000 	.word	0x40021000
 8003f08:	08009d38 	.word	0x08009d38
 8003f0c:	20000000 	.word	0x20000000
 8003f10:	20000004 	.word	0x20000004

08003f14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b089      	sub	sp, #36	@ 0x24
 8003f18:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	61fb      	str	r3, [r7, #28]
 8003f1e:	2300      	movs	r3, #0
 8003f20:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f22:	4b3e      	ldr	r3, [pc, #248]	@ (800401c <HAL_RCC_GetSysClockFreq+0x108>)
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	f003 030c 	and.w	r3, r3, #12
 8003f2a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f2c:	4b3b      	ldr	r3, [pc, #236]	@ (800401c <HAL_RCC_GetSysClockFreq+0x108>)
 8003f2e:	68db      	ldr	r3, [r3, #12]
 8003f30:	f003 0303 	and.w	r3, r3, #3
 8003f34:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d005      	beq.n	8003f48 <HAL_RCC_GetSysClockFreq+0x34>
 8003f3c:	693b      	ldr	r3, [r7, #16]
 8003f3e:	2b0c      	cmp	r3, #12
 8003f40:	d121      	bne.n	8003f86 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	2b01      	cmp	r3, #1
 8003f46:	d11e      	bne.n	8003f86 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003f48:	4b34      	ldr	r3, [pc, #208]	@ (800401c <HAL_RCC_GetSysClockFreq+0x108>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f003 0308 	and.w	r3, r3, #8
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d107      	bne.n	8003f64 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003f54:	4b31      	ldr	r3, [pc, #196]	@ (800401c <HAL_RCC_GetSysClockFreq+0x108>)
 8003f56:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f5a:	0a1b      	lsrs	r3, r3, #8
 8003f5c:	f003 030f 	and.w	r3, r3, #15
 8003f60:	61fb      	str	r3, [r7, #28]
 8003f62:	e005      	b.n	8003f70 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003f64:	4b2d      	ldr	r3, [pc, #180]	@ (800401c <HAL_RCC_GetSysClockFreq+0x108>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	091b      	lsrs	r3, r3, #4
 8003f6a:	f003 030f 	and.w	r3, r3, #15
 8003f6e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003f70:	4a2b      	ldr	r2, [pc, #172]	@ (8004020 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003f72:	69fb      	ldr	r3, [r7, #28]
 8003f74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f78:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003f7a:	693b      	ldr	r3, [r7, #16]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d10d      	bne.n	8003f9c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003f80:	69fb      	ldr	r3, [r7, #28]
 8003f82:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003f84:	e00a      	b.n	8003f9c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003f86:	693b      	ldr	r3, [r7, #16]
 8003f88:	2b04      	cmp	r3, #4
 8003f8a:	d102      	bne.n	8003f92 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003f8c:	4b25      	ldr	r3, [pc, #148]	@ (8004024 <HAL_RCC_GetSysClockFreq+0x110>)
 8003f8e:	61bb      	str	r3, [r7, #24]
 8003f90:	e004      	b.n	8003f9c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003f92:	693b      	ldr	r3, [r7, #16]
 8003f94:	2b08      	cmp	r3, #8
 8003f96:	d101      	bne.n	8003f9c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003f98:	4b23      	ldr	r3, [pc, #140]	@ (8004028 <HAL_RCC_GetSysClockFreq+0x114>)
 8003f9a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	2b0c      	cmp	r3, #12
 8003fa0:	d134      	bne.n	800400c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003fa2:	4b1e      	ldr	r3, [pc, #120]	@ (800401c <HAL_RCC_GetSysClockFreq+0x108>)
 8003fa4:	68db      	ldr	r3, [r3, #12]
 8003fa6:	f003 0303 	and.w	r3, r3, #3
 8003faa:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	2b02      	cmp	r3, #2
 8003fb0:	d003      	beq.n	8003fba <HAL_RCC_GetSysClockFreq+0xa6>
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	2b03      	cmp	r3, #3
 8003fb6:	d003      	beq.n	8003fc0 <HAL_RCC_GetSysClockFreq+0xac>
 8003fb8:	e005      	b.n	8003fc6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003fba:	4b1a      	ldr	r3, [pc, #104]	@ (8004024 <HAL_RCC_GetSysClockFreq+0x110>)
 8003fbc:	617b      	str	r3, [r7, #20]
      break;
 8003fbe:	e005      	b.n	8003fcc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003fc0:	4b19      	ldr	r3, [pc, #100]	@ (8004028 <HAL_RCC_GetSysClockFreq+0x114>)
 8003fc2:	617b      	str	r3, [r7, #20]
      break;
 8003fc4:	e002      	b.n	8003fcc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003fc6:	69fb      	ldr	r3, [r7, #28]
 8003fc8:	617b      	str	r3, [r7, #20]
      break;
 8003fca:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003fcc:	4b13      	ldr	r3, [pc, #76]	@ (800401c <HAL_RCC_GetSysClockFreq+0x108>)
 8003fce:	68db      	ldr	r3, [r3, #12]
 8003fd0:	091b      	lsrs	r3, r3, #4
 8003fd2:	f003 0307 	and.w	r3, r3, #7
 8003fd6:	3301      	adds	r3, #1
 8003fd8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003fda:	4b10      	ldr	r3, [pc, #64]	@ (800401c <HAL_RCC_GetSysClockFreq+0x108>)
 8003fdc:	68db      	ldr	r3, [r3, #12]
 8003fde:	0a1b      	lsrs	r3, r3, #8
 8003fe0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003fe4:	697a      	ldr	r2, [r7, #20]
 8003fe6:	fb03 f202 	mul.w	r2, r3, r2
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ff0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003ff2:	4b0a      	ldr	r3, [pc, #40]	@ (800401c <HAL_RCC_GetSysClockFreq+0x108>)
 8003ff4:	68db      	ldr	r3, [r3, #12]
 8003ff6:	0e5b      	lsrs	r3, r3, #25
 8003ff8:	f003 0303 	and.w	r3, r3, #3
 8003ffc:	3301      	adds	r3, #1
 8003ffe:	005b      	lsls	r3, r3, #1
 8004000:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004002:	697a      	ldr	r2, [r7, #20]
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	fbb2 f3f3 	udiv	r3, r2, r3
 800400a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800400c:	69bb      	ldr	r3, [r7, #24]
}
 800400e:	4618      	mov	r0, r3
 8004010:	3724      	adds	r7, #36	@ 0x24
 8004012:	46bd      	mov	sp, r7
 8004014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004018:	4770      	bx	lr
 800401a:	bf00      	nop
 800401c:	40021000 	.word	0x40021000
 8004020:	08009d50 	.word	0x08009d50
 8004024:	00f42400 	.word	0x00f42400
 8004028:	007a1200 	.word	0x007a1200

0800402c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800402c:	b480      	push	{r7}
 800402e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004030:	4b03      	ldr	r3, [pc, #12]	@ (8004040 <HAL_RCC_GetHCLKFreq+0x14>)
 8004032:	681b      	ldr	r3, [r3, #0]
}
 8004034:	4618      	mov	r0, r3
 8004036:	46bd      	mov	sp, r7
 8004038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403c:	4770      	bx	lr
 800403e:	bf00      	nop
 8004040:	20000000 	.word	0x20000000

08004044 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004048:	f7ff fff0 	bl	800402c <HAL_RCC_GetHCLKFreq>
 800404c:	4602      	mov	r2, r0
 800404e:	4b06      	ldr	r3, [pc, #24]	@ (8004068 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	0a1b      	lsrs	r3, r3, #8
 8004054:	f003 0307 	and.w	r3, r3, #7
 8004058:	4904      	ldr	r1, [pc, #16]	@ (800406c <HAL_RCC_GetPCLK1Freq+0x28>)
 800405a:	5ccb      	ldrb	r3, [r1, r3]
 800405c:	f003 031f 	and.w	r3, r3, #31
 8004060:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004064:	4618      	mov	r0, r3
 8004066:	bd80      	pop	{r7, pc}
 8004068:	40021000 	.word	0x40021000
 800406c:	08009d48 	.word	0x08009d48

08004070 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004074:	f7ff ffda 	bl	800402c <HAL_RCC_GetHCLKFreq>
 8004078:	4602      	mov	r2, r0
 800407a:	4b06      	ldr	r3, [pc, #24]	@ (8004094 <HAL_RCC_GetPCLK2Freq+0x24>)
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	0adb      	lsrs	r3, r3, #11
 8004080:	f003 0307 	and.w	r3, r3, #7
 8004084:	4904      	ldr	r1, [pc, #16]	@ (8004098 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004086:	5ccb      	ldrb	r3, [r1, r3]
 8004088:	f003 031f 	and.w	r3, r3, #31
 800408c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004090:	4618      	mov	r0, r3
 8004092:	bd80      	pop	{r7, pc}
 8004094:	40021000 	.word	0x40021000
 8004098:	08009d48 	.word	0x08009d48

0800409c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b086      	sub	sp, #24
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80040a4:	2300      	movs	r3, #0
 80040a6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80040a8:	4b2a      	ldr	r3, [pc, #168]	@ (8004154 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80040aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d003      	beq.n	80040bc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80040b4:	f7ff f9ee 	bl	8003494 <HAL_PWREx_GetVoltageRange>
 80040b8:	6178      	str	r0, [r7, #20]
 80040ba:	e014      	b.n	80040e6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80040bc:	4b25      	ldr	r3, [pc, #148]	@ (8004154 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80040be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040c0:	4a24      	ldr	r2, [pc, #144]	@ (8004154 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80040c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80040c6:	6593      	str	r3, [r2, #88]	@ 0x58
 80040c8:	4b22      	ldr	r3, [pc, #136]	@ (8004154 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80040ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040d0:	60fb      	str	r3, [r7, #12]
 80040d2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80040d4:	f7ff f9de 	bl	8003494 <HAL_PWREx_GetVoltageRange>
 80040d8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80040da:	4b1e      	ldr	r3, [pc, #120]	@ (8004154 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80040dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040de:	4a1d      	ldr	r2, [pc, #116]	@ (8004154 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80040e0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80040e4:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80040ec:	d10b      	bne.n	8004106 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2b80      	cmp	r3, #128	@ 0x80
 80040f2:	d919      	bls.n	8004128 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2ba0      	cmp	r3, #160	@ 0xa0
 80040f8:	d902      	bls.n	8004100 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80040fa:	2302      	movs	r3, #2
 80040fc:	613b      	str	r3, [r7, #16]
 80040fe:	e013      	b.n	8004128 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004100:	2301      	movs	r3, #1
 8004102:	613b      	str	r3, [r7, #16]
 8004104:	e010      	b.n	8004128 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2b80      	cmp	r3, #128	@ 0x80
 800410a:	d902      	bls.n	8004112 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800410c:	2303      	movs	r3, #3
 800410e:	613b      	str	r3, [r7, #16]
 8004110:	e00a      	b.n	8004128 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2b80      	cmp	r3, #128	@ 0x80
 8004116:	d102      	bne.n	800411e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004118:	2302      	movs	r3, #2
 800411a:	613b      	str	r3, [r7, #16]
 800411c:	e004      	b.n	8004128 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2b70      	cmp	r3, #112	@ 0x70
 8004122:	d101      	bne.n	8004128 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004124:	2301      	movs	r3, #1
 8004126:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004128:	4b0b      	ldr	r3, [pc, #44]	@ (8004158 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f023 0207 	bic.w	r2, r3, #7
 8004130:	4909      	ldr	r1, [pc, #36]	@ (8004158 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	4313      	orrs	r3, r2
 8004136:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004138:	4b07      	ldr	r3, [pc, #28]	@ (8004158 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f003 0307 	and.w	r3, r3, #7
 8004140:	693a      	ldr	r2, [r7, #16]
 8004142:	429a      	cmp	r2, r3
 8004144:	d001      	beq.n	800414a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004146:	2301      	movs	r3, #1
 8004148:	e000      	b.n	800414c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800414a:	2300      	movs	r3, #0
}
 800414c:	4618      	mov	r0, r3
 800414e:	3718      	adds	r7, #24
 8004150:	46bd      	mov	sp, r7
 8004152:	bd80      	pop	{r7, pc}
 8004154:	40021000 	.word	0x40021000
 8004158:	40022000 	.word	0x40022000

0800415c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b086      	sub	sp, #24
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004164:	2300      	movs	r3, #0
 8004166:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004168:	2300      	movs	r3, #0
 800416a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004174:	2b00      	cmp	r3, #0
 8004176:	d041      	beq.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800417c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004180:	d02a      	beq.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004182:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004186:	d824      	bhi.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004188:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800418c:	d008      	beq.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800418e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004192:	d81e      	bhi.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004194:	2b00      	cmp	r3, #0
 8004196:	d00a      	beq.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004198:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800419c:	d010      	beq.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800419e:	e018      	b.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80041a0:	4b86      	ldr	r3, [pc, #536]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041a2:	68db      	ldr	r3, [r3, #12]
 80041a4:	4a85      	ldr	r2, [pc, #532]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80041aa:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80041ac:	e015      	b.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	3304      	adds	r3, #4
 80041b2:	2100      	movs	r1, #0
 80041b4:	4618      	mov	r0, r3
 80041b6:	f000 fabb 	bl	8004730 <RCCEx_PLLSAI1_Config>
 80041ba:	4603      	mov	r3, r0
 80041bc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80041be:	e00c      	b.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	3320      	adds	r3, #32
 80041c4:	2100      	movs	r1, #0
 80041c6:	4618      	mov	r0, r3
 80041c8:	f000 fba6 	bl	8004918 <RCCEx_PLLSAI2_Config>
 80041cc:	4603      	mov	r3, r0
 80041ce:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80041d0:	e003      	b.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	74fb      	strb	r3, [r7, #19]
      break;
 80041d6:	e000      	b.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80041d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041da:	7cfb      	ldrb	r3, [r7, #19]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d10b      	bne.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80041e0:	4b76      	ldr	r3, [pc, #472]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041e6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80041ee:	4973      	ldr	r1, [pc, #460]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041f0:	4313      	orrs	r3, r2
 80041f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80041f6:	e001      	b.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041f8:	7cfb      	ldrb	r3, [r7, #19]
 80041fa:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004204:	2b00      	cmp	r3, #0
 8004206:	d041      	beq.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800420c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004210:	d02a      	beq.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004212:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004216:	d824      	bhi.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004218:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800421c:	d008      	beq.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800421e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004222:	d81e      	bhi.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004224:	2b00      	cmp	r3, #0
 8004226:	d00a      	beq.n	800423e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004228:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800422c:	d010      	beq.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800422e:	e018      	b.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004230:	4b62      	ldr	r3, [pc, #392]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004232:	68db      	ldr	r3, [r3, #12]
 8004234:	4a61      	ldr	r2, [pc, #388]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004236:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800423a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800423c:	e015      	b.n	800426a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	3304      	adds	r3, #4
 8004242:	2100      	movs	r1, #0
 8004244:	4618      	mov	r0, r3
 8004246:	f000 fa73 	bl	8004730 <RCCEx_PLLSAI1_Config>
 800424a:	4603      	mov	r3, r0
 800424c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800424e:	e00c      	b.n	800426a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	3320      	adds	r3, #32
 8004254:	2100      	movs	r1, #0
 8004256:	4618      	mov	r0, r3
 8004258:	f000 fb5e 	bl	8004918 <RCCEx_PLLSAI2_Config>
 800425c:	4603      	mov	r3, r0
 800425e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004260:	e003      	b.n	800426a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	74fb      	strb	r3, [r7, #19]
      break;
 8004266:	e000      	b.n	800426a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004268:	bf00      	nop
    }

    if(ret == HAL_OK)
 800426a:	7cfb      	ldrb	r3, [r7, #19]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d10b      	bne.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004270:	4b52      	ldr	r3, [pc, #328]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004272:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004276:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800427e:	494f      	ldr	r1, [pc, #316]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004280:	4313      	orrs	r3, r2
 8004282:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004286:	e001      	b.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004288:	7cfb      	ldrb	r3, [r7, #19]
 800428a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004294:	2b00      	cmp	r3, #0
 8004296:	f000 80a0 	beq.w	80043da <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800429a:	2300      	movs	r3, #0
 800429c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800429e:	4b47      	ldr	r3, [pc, #284]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d101      	bne.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0x152>
 80042aa:	2301      	movs	r3, #1
 80042ac:	e000      	b.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80042ae:	2300      	movs	r3, #0
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d00d      	beq.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042b4:	4b41      	ldr	r3, [pc, #260]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042b8:	4a40      	ldr	r2, [pc, #256]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80042be:	6593      	str	r3, [r2, #88]	@ 0x58
 80042c0:	4b3e      	ldr	r3, [pc, #248]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042c8:	60bb      	str	r3, [r7, #8]
 80042ca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042cc:	2301      	movs	r3, #1
 80042ce:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80042d0:	4b3b      	ldr	r3, [pc, #236]	@ (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a3a      	ldr	r2, [pc, #232]	@ (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80042d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80042da:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80042dc:	f7fd faf2 	bl	80018c4 <HAL_GetTick>
 80042e0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80042e2:	e009      	b.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042e4:	f7fd faee 	bl	80018c4 <HAL_GetTick>
 80042e8:	4602      	mov	r2, r0
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	1ad3      	subs	r3, r2, r3
 80042ee:	2b02      	cmp	r3, #2
 80042f0:	d902      	bls.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80042f2:	2303      	movs	r3, #3
 80042f4:	74fb      	strb	r3, [r7, #19]
        break;
 80042f6:	e005      	b.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80042f8:	4b31      	ldr	r3, [pc, #196]	@ (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004300:	2b00      	cmp	r3, #0
 8004302:	d0ef      	beq.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004304:	7cfb      	ldrb	r3, [r7, #19]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d15c      	bne.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800430a:	4b2c      	ldr	r3, [pc, #176]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800430c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004310:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004314:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d01f      	beq.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x200>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004322:	697a      	ldr	r2, [r7, #20]
 8004324:	429a      	cmp	r2, r3
 8004326:	d019      	beq.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004328:	4b24      	ldr	r3, [pc, #144]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800432a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800432e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004332:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004334:	4b21      	ldr	r3, [pc, #132]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004336:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800433a:	4a20      	ldr	r2, [pc, #128]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800433c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004340:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004344:	4b1d      	ldr	r3, [pc, #116]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004346:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800434a:	4a1c      	ldr	r2, [pc, #112]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800434c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004350:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004354:	4a19      	ldr	r2, [pc, #100]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	f003 0301 	and.w	r3, r3, #1
 8004362:	2b00      	cmp	r3, #0
 8004364:	d016      	beq.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004366:	f7fd faad 	bl	80018c4 <HAL_GetTick>
 800436a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800436c:	e00b      	b.n	8004386 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800436e:	f7fd faa9 	bl	80018c4 <HAL_GetTick>
 8004372:	4602      	mov	r2, r0
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	1ad3      	subs	r3, r2, r3
 8004378:	f241 3288 	movw	r2, #5000	@ 0x1388
 800437c:	4293      	cmp	r3, r2
 800437e:	d902      	bls.n	8004386 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004380:	2303      	movs	r3, #3
 8004382:	74fb      	strb	r3, [r7, #19]
            break;
 8004384:	e006      	b.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004386:	4b0d      	ldr	r3, [pc, #52]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004388:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800438c:	f003 0302 	and.w	r3, r3, #2
 8004390:	2b00      	cmp	r3, #0
 8004392:	d0ec      	beq.n	800436e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004394:	7cfb      	ldrb	r3, [r7, #19]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d10c      	bne.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800439a:	4b08      	ldr	r3, [pc, #32]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800439c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043a0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80043aa:	4904      	ldr	r1, [pc, #16]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043ac:	4313      	orrs	r3, r2
 80043ae:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80043b2:	e009      	b.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80043b4:	7cfb      	ldrb	r3, [r7, #19]
 80043b6:	74bb      	strb	r3, [r7, #18]
 80043b8:	e006      	b.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80043ba:	bf00      	nop
 80043bc:	40021000 	.word	0x40021000
 80043c0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043c4:	7cfb      	ldrb	r3, [r7, #19]
 80043c6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80043c8:	7c7b      	ldrb	r3, [r7, #17]
 80043ca:	2b01      	cmp	r3, #1
 80043cc:	d105      	bne.n	80043da <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043ce:	4b9e      	ldr	r3, [pc, #632]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043d2:	4a9d      	ldr	r2, [pc, #628]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043d4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80043d8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f003 0301 	and.w	r3, r3, #1
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d00a      	beq.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80043e6:	4b98      	ldr	r3, [pc, #608]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043ec:	f023 0203 	bic.w	r2, r3, #3
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043f4:	4994      	ldr	r1, [pc, #592]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043f6:	4313      	orrs	r3, r2
 80043f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f003 0302 	and.w	r3, r3, #2
 8004404:	2b00      	cmp	r3, #0
 8004406:	d00a      	beq.n	800441e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004408:	4b8f      	ldr	r3, [pc, #572]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800440a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800440e:	f023 020c 	bic.w	r2, r3, #12
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004416:	498c      	ldr	r1, [pc, #560]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004418:	4313      	orrs	r3, r2
 800441a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f003 0304 	and.w	r3, r3, #4
 8004426:	2b00      	cmp	r3, #0
 8004428:	d00a      	beq.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800442a:	4b87      	ldr	r3, [pc, #540]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800442c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004430:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004438:	4983      	ldr	r1, [pc, #524]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800443a:	4313      	orrs	r3, r2
 800443c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f003 0308 	and.w	r3, r3, #8
 8004448:	2b00      	cmp	r3, #0
 800444a:	d00a      	beq.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800444c:	4b7e      	ldr	r3, [pc, #504]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800444e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004452:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800445a:	497b      	ldr	r1, [pc, #492]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800445c:	4313      	orrs	r3, r2
 800445e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f003 0310 	and.w	r3, r3, #16
 800446a:	2b00      	cmp	r3, #0
 800446c:	d00a      	beq.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800446e:	4b76      	ldr	r3, [pc, #472]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004470:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004474:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800447c:	4972      	ldr	r1, [pc, #456]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800447e:	4313      	orrs	r3, r2
 8004480:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f003 0320 	and.w	r3, r3, #32
 800448c:	2b00      	cmp	r3, #0
 800448e:	d00a      	beq.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004490:	4b6d      	ldr	r3, [pc, #436]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004492:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004496:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800449e:	496a      	ldr	r1, [pc, #424]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044a0:	4313      	orrs	r3, r2
 80044a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d00a      	beq.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80044b2:	4b65      	ldr	r3, [pc, #404]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044b8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044c0:	4961      	ldr	r1, [pc, #388]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044c2:	4313      	orrs	r3, r2
 80044c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d00a      	beq.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80044d4:	4b5c      	ldr	r3, [pc, #368]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044da:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044e2:	4959      	ldr	r1, [pc, #356]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044e4:	4313      	orrs	r3, r2
 80044e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d00a      	beq.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80044f6:	4b54      	ldr	r3, [pc, #336]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044fc:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004504:	4950      	ldr	r1, [pc, #320]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004506:	4313      	orrs	r3, r2
 8004508:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004514:	2b00      	cmp	r3, #0
 8004516:	d00a      	beq.n	800452e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004518:	4b4b      	ldr	r3, [pc, #300]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800451a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800451e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004526:	4948      	ldr	r1, [pc, #288]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004528:	4313      	orrs	r3, r2
 800452a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004536:	2b00      	cmp	r3, #0
 8004538:	d00a      	beq.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800453a:	4b43      	ldr	r3, [pc, #268]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800453c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004540:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004548:	493f      	ldr	r1, [pc, #252]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800454a:	4313      	orrs	r3, r2
 800454c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004558:	2b00      	cmp	r3, #0
 800455a:	d028      	beq.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800455c:	4b3a      	ldr	r3, [pc, #232]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800455e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004562:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800456a:	4937      	ldr	r1, [pc, #220]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800456c:	4313      	orrs	r3, r2
 800456e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004576:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800457a:	d106      	bne.n	800458a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800457c:	4b32      	ldr	r3, [pc, #200]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800457e:	68db      	ldr	r3, [r3, #12]
 8004580:	4a31      	ldr	r2, [pc, #196]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004582:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004586:	60d3      	str	r3, [r2, #12]
 8004588:	e011      	b.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800458e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004592:	d10c      	bne.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	3304      	adds	r3, #4
 8004598:	2101      	movs	r1, #1
 800459a:	4618      	mov	r0, r3
 800459c:	f000 f8c8 	bl	8004730 <RCCEx_PLLSAI1_Config>
 80045a0:	4603      	mov	r3, r0
 80045a2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80045a4:	7cfb      	ldrb	r3, [r7, #19]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d001      	beq.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80045aa:	7cfb      	ldrb	r3, [r7, #19]
 80045ac:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d028      	beq.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80045ba:	4b23      	ldr	r3, [pc, #140]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045c0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045c8:	491f      	ldr	r1, [pc, #124]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045ca:	4313      	orrs	r3, r2
 80045cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045d4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80045d8:	d106      	bne.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80045da:	4b1b      	ldr	r3, [pc, #108]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045dc:	68db      	ldr	r3, [r3, #12]
 80045de:	4a1a      	ldr	r2, [pc, #104]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045e0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80045e4:	60d3      	str	r3, [r2, #12]
 80045e6:	e011      	b.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045ec:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80045f0:	d10c      	bne.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	3304      	adds	r3, #4
 80045f6:	2101      	movs	r1, #1
 80045f8:	4618      	mov	r0, r3
 80045fa:	f000 f899 	bl	8004730 <RCCEx_PLLSAI1_Config>
 80045fe:	4603      	mov	r3, r0
 8004600:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004602:	7cfb      	ldrb	r3, [r7, #19]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d001      	beq.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004608:	7cfb      	ldrb	r3, [r7, #19]
 800460a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004614:	2b00      	cmp	r3, #0
 8004616:	d02b      	beq.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004618:	4b0b      	ldr	r3, [pc, #44]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800461a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800461e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004626:	4908      	ldr	r1, [pc, #32]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004628:	4313      	orrs	r3, r2
 800462a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004632:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004636:	d109      	bne.n	800464c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004638:	4b03      	ldr	r3, [pc, #12]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800463a:	68db      	ldr	r3, [r3, #12]
 800463c:	4a02      	ldr	r2, [pc, #8]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800463e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004642:	60d3      	str	r3, [r2, #12]
 8004644:	e014      	b.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004646:	bf00      	nop
 8004648:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004650:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004654:	d10c      	bne.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	3304      	adds	r3, #4
 800465a:	2101      	movs	r1, #1
 800465c:	4618      	mov	r0, r3
 800465e:	f000 f867 	bl	8004730 <RCCEx_PLLSAI1_Config>
 8004662:	4603      	mov	r3, r0
 8004664:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004666:	7cfb      	ldrb	r3, [r7, #19]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d001      	beq.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800466c:	7cfb      	ldrb	r3, [r7, #19]
 800466e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004678:	2b00      	cmp	r3, #0
 800467a:	d02f      	beq.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800467c:	4b2b      	ldr	r3, [pc, #172]	@ (800472c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800467e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004682:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800468a:	4928      	ldr	r1, [pc, #160]	@ (800472c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800468c:	4313      	orrs	r3, r2
 800468e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004696:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800469a:	d10d      	bne.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	3304      	adds	r3, #4
 80046a0:	2102      	movs	r1, #2
 80046a2:	4618      	mov	r0, r3
 80046a4:	f000 f844 	bl	8004730 <RCCEx_PLLSAI1_Config>
 80046a8:	4603      	mov	r3, r0
 80046aa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80046ac:	7cfb      	ldrb	r3, [r7, #19]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d014      	beq.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80046b2:	7cfb      	ldrb	r3, [r7, #19]
 80046b4:	74bb      	strb	r3, [r7, #18]
 80046b6:	e011      	b.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80046bc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80046c0:	d10c      	bne.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	3320      	adds	r3, #32
 80046c6:	2102      	movs	r1, #2
 80046c8:	4618      	mov	r0, r3
 80046ca:	f000 f925 	bl	8004918 <RCCEx_PLLSAI2_Config>
 80046ce:	4603      	mov	r3, r0
 80046d0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80046d2:	7cfb      	ldrb	r3, [r7, #19]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d001      	beq.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80046d8:	7cfb      	ldrb	r3, [r7, #19]
 80046da:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d00a      	beq.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80046e8:	4b10      	ldr	r3, [pc, #64]	@ (800472c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80046ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046ee:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80046f6:	490d      	ldr	r1, [pc, #52]	@ (800472c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80046f8:	4313      	orrs	r3, r2
 80046fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004706:	2b00      	cmp	r3, #0
 8004708:	d00b      	beq.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800470a:	4b08      	ldr	r3, [pc, #32]	@ (800472c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800470c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004710:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800471a:	4904      	ldr	r1, [pc, #16]	@ (800472c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800471c:	4313      	orrs	r3, r2
 800471e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004722:	7cbb      	ldrb	r3, [r7, #18]
}
 8004724:	4618      	mov	r0, r3
 8004726:	3718      	adds	r7, #24
 8004728:	46bd      	mov	sp, r7
 800472a:	bd80      	pop	{r7, pc}
 800472c:	40021000 	.word	0x40021000

08004730 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b084      	sub	sp, #16
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
 8004738:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800473a:	2300      	movs	r3, #0
 800473c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800473e:	4b75      	ldr	r3, [pc, #468]	@ (8004914 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004740:	68db      	ldr	r3, [r3, #12]
 8004742:	f003 0303 	and.w	r3, r3, #3
 8004746:	2b00      	cmp	r3, #0
 8004748:	d018      	beq.n	800477c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800474a:	4b72      	ldr	r3, [pc, #456]	@ (8004914 <RCCEx_PLLSAI1_Config+0x1e4>)
 800474c:	68db      	ldr	r3, [r3, #12]
 800474e:	f003 0203 	and.w	r2, r3, #3
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	429a      	cmp	r2, r3
 8004758:	d10d      	bne.n	8004776 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
       ||
 800475e:	2b00      	cmp	r3, #0
 8004760:	d009      	beq.n	8004776 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004762:	4b6c      	ldr	r3, [pc, #432]	@ (8004914 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004764:	68db      	ldr	r3, [r3, #12]
 8004766:	091b      	lsrs	r3, r3, #4
 8004768:	f003 0307 	and.w	r3, r3, #7
 800476c:	1c5a      	adds	r2, r3, #1
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	685b      	ldr	r3, [r3, #4]
       ||
 8004772:	429a      	cmp	r2, r3
 8004774:	d047      	beq.n	8004806 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004776:	2301      	movs	r3, #1
 8004778:	73fb      	strb	r3, [r7, #15]
 800477a:	e044      	b.n	8004806 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	2b03      	cmp	r3, #3
 8004782:	d018      	beq.n	80047b6 <RCCEx_PLLSAI1_Config+0x86>
 8004784:	2b03      	cmp	r3, #3
 8004786:	d825      	bhi.n	80047d4 <RCCEx_PLLSAI1_Config+0xa4>
 8004788:	2b01      	cmp	r3, #1
 800478a:	d002      	beq.n	8004792 <RCCEx_PLLSAI1_Config+0x62>
 800478c:	2b02      	cmp	r3, #2
 800478e:	d009      	beq.n	80047a4 <RCCEx_PLLSAI1_Config+0x74>
 8004790:	e020      	b.n	80047d4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004792:	4b60      	ldr	r3, [pc, #384]	@ (8004914 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f003 0302 	and.w	r3, r3, #2
 800479a:	2b00      	cmp	r3, #0
 800479c:	d11d      	bne.n	80047da <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800479e:	2301      	movs	r3, #1
 80047a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80047a2:	e01a      	b.n	80047da <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80047a4:	4b5b      	ldr	r3, [pc, #364]	@ (8004914 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d116      	bne.n	80047de <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80047b0:	2301      	movs	r3, #1
 80047b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80047b4:	e013      	b.n	80047de <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80047b6:	4b57      	ldr	r3, [pc, #348]	@ (8004914 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d10f      	bne.n	80047e2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80047c2:	4b54      	ldr	r3, [pc, #336]	@ (8004914 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d109      	bne.n	80047e2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80047ce:	2301      	movs	r3, #1
 80047d0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80047d2:	e006      	b.n	80047e2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80047d4:	2301      	movs	r3, #1
 80047d6:	73fb      	strb	r3, [r7, #15]
      break;
 80047d8:	e004      	b.n	80047e4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80047da:	bf00      	nop
 80047dc:	e002      	b.n	80047e4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80047de:	bf00      	nop
 80047e0:	e000      	b.n	80047e4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80047e2:	bf00      	nop
    }

    if(status == HAL_OK)
 80047e4:	7bfb      	ldrb	r3, [r7, #15]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d10d      	bne.n	8004806 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80047ea:	4b4a      	ldr	r3, [pc, #296]	@ (8004914 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047ec:	68db      	ldr	r3, [r3, #12]
 80047ee:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6819      	ldr	r1, [r3, #0]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	3b01      	subs	r3, #1
 80047fc:	011b      	lsls	r3, r3, #4
 80047fe:	430b      	orrs	r3, r1
 8004800:	4944      	ldr	r1, [pc, #272]	@ (8004914 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004802:	4313      	orrs	r3, r2
 8004804:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004806:	7bfb      	ldrb	r3, [r7, #15]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d17d      	bne.n	8004908 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800480c:	4b41      	ldr	r3, [pc, #260]	@ (8004914 <RCCEx_PLLSAI1_Config+0x1e4>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a40      	ldr	r2, [pc, #256]	@ (8004914 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004812:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004816:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004818:	f7fd f854 	bl	80018c4 <HAL_GetTick>
 800481c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800481e:	e009      	b.n	8004834 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004820:	f7fd f850 	bl	80018c4 <HAL_GetTick>
 8004824:	4602      	mov	r2, r0
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	1ad3      	subs	r3, r2, r3
 800482a:	2b02      	cmp	r3, #2
 800482c:	d902      	bls.n	8004834 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800482e:	2303      	movs	r3, #3
 8004830:	73fb      	strb	r3, [r7, #15]
        break;
 8004832:	e005      	b.n	8004840 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004834:	4b37      	ldr	r3, [pc, #220]	@ (8004914 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800483c:	2b00      	cmp	r3, #0
 800483e:	d1ef      	bne.n	8004820 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004840:	7bfb      	ldrb	r3, [r7, #15]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d160      	bne.n	8004908 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d111      	bne.n	8004870 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800484c:	4b31      	ldr	r3, [pc, #196]	@ (8004914 <RCCEx_PLLSAI1_Config+0x1e4>)
 800484e:	691b      	ldr	r3, [r3, #16]
 8004850:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004854:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004858:	687a      	ldr	r2, [r7, #4]
 800485a:	6892      	ldr	r2, [r2, #8]
 800485c:	0211      	lsls	r1, r2, #8
 800485e:	687a      	ldr	r2, [r7, #4]
 8004860:	68d2      	ldr	r2, [r2, #12]
 8004862:	0912      	lsrs	r2, r2, #4
 8004864:	0452      	lsls	r2, r2, #17
 8004866:	430a      	orrs	r2, r1
 8004868:	492a      	ldr	r1, [pc, #168]	@ (8004914 <RCCEx_PLLSAI1_Config+0x1e4>)
 800486a:	4313      	orrs	r3, r2
 800486c:	610b      	str	r3, [r1, #16]
 800486e:	e027      	b.n	80048c0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	2b01      	cmp	r3, #1
 8004874:	d112      	bne.n	800489c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004876:	4b27      	ldr	r3, [pc, #156]	@ (8004914 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004878:	691b      	ldr	r3, [r3, #16]
 800487a:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800487e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004882:	687a      	ldr	r2, [r7, #4]
 8004884:	6892      	ldr	r2, [r2, #8]
 8004886:	0211      	lsls	r1, r2, #8
 8004888:	687a      	ldr	r2, [r7, #4]
 800488a:	6912      	ldr	r2, [r2, #16]
 800488c:	0852      	lsrs	r2, r2, #1
 800488e:	3a01      	subs	r2, #1
 8004890:	0552      	lsls	r2, r2, #21
 8004892:	430a      	orrs	r2, r1
 8004894:	491f      	ldr	r1, [pc, #124]	@ (8004914 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004896:	4313      	orrs	r3, r2
 8004898:	610b      	str	r3, [r1, #16]
 800489a:	e011      	b.n	80048c0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800489c:	4b1d      	ldr	r3, [pc, #116]	@ (8004914 <RCCEx_PLLSAI1_Config+0x1e4>)
 800489e:	691b      	ldr	r3, [r3, #16]
 80048a0:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80048a4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80048a8:	687a      	ldr	r2, [r7, #4]
 80048aa:	6892      	ldr	r2, [r2, #8]
 80048ac:	0211      	lsls	r1, r2, #8
 80048ae:	687a      	ldr	r2, [r7, #4]
 80048b0:	6952      	ldr	r2, [r2, #20]
 80048b2:	0852      	lsrs	r2, r2, #1
 80048b4:	3a01      	subs	r2, #1
 80048b6:	0652      	lsls	r2, r2, #25
 80048b8:	430a      	orrs	r2, r1
 80048ba:	4916      	ldr	r1, [pc, #88]	@ (8004914 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048bc:	4313      	orrs	r3, r2
 80048be:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80048c0:	4b14      	ldr	r3, [pc, #80]	@ (8004914 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a13      	ldr	r2, [pc, #76]	@ (8004914 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048c6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80048ca:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048cc:	f7fc fffa 	bl	80018c4 <HAL_GetTick>
 80048d0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80048d2:	e009      	b.n	80048e8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80048d4:	f7fc fff6 	bl	80018c4 <HAL_GetTick>
 80048d8:	4602      	mov	r2, r0
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	1ad3      	subs	r3, r2, r3
 80048de:	2b02      	cmp	r3, #2
 80048e0:	d902      	bls.n	80048e8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80048e2:	2303      	movs	r3, #3
 80048e4:	73fb      	strb	r3, [r7, #15]
          break;
 80048e6:	e005      	b.n	80048f4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80048e8:	4b0a      	ldr	r3, [pc, #40]	@ (8004914 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d0ef      	beq.n	80048d4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80048f4:	7bfb      	ldrb	r3, [r7, #15]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d106      	bne.n	8004908 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80048fa:	4b06      	ldr	r3, [pc, #24]	@ (8004914 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048fc:	691a      	ldr	r2, [r3, #16]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	699b      	ldr	r3, [r3, #24]
 8004902:	4904      	ldr	r1, [pc, #16]	@ (8004914 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004904:	4313      	orrs	r3, r2
 8004906:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004908:	7bfb      	ldrb	r3, [r7, #15]
}
 800490a:	4618      	mov	r0, r3
 800490c:	3710      	adds	r7, #16
 800490e:	46bd      	mov	sp, r7
 8004910:	bd80      	pop	{r7, pc}
 8004912:	bf00      	nop
 8004914:	40021000 	.word	0x40021000

08004918 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b084      	sub	sp, #16
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
 8004920:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004922:	2300      	movs	r3, #0
 8004924:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004926:	4b6a      	ldr	r3, [pc, #424]	@ (8004ad0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004928:	68db      	ldr	r3, [r3, #12]
 800492a:	f003 0303 	and.w	r3, r3, #3
 800492e:	2b00      	cmp	r3, #0
 8004930:	d018      	beq.n	8004964 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004932:	4b67      	ldr	r3, [pc, #412]	@ (8004ad0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004934:	68db      	ldr	r3, [r3, #12]
 8004936:	f003 0203 	and.w	r2, r3, #3
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	429a      	cmp	r2, r3
 8004940:	d10d      	bne.n	800495e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
       ||
 8004946:	2b00      	cmp	r3, #0
 8004948:	d009      	beq.n	800495e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800494a:	4b61      	ldr	r3, [pc, #388]	@ (8004ad0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800494c:	68db      	ldr	r3, [r3, #12]
 800494e:	091b      	lsrs	r3, r3, #4
 8004950:	f003 0307 	and.w	r3, r3, #7
 8004954:	1c5a      	adds	r2, r3, #1
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	685b      	ldr	r3, [r3, #4]
       ||
 800495a:	429a      	cmp	r2, r3
 800495c:	d047      	beq.n	80049ee <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800495e:	2301      	movs	r3, #1
 8004960:	73fb      	strb	r3, [r7, #15]
 8004962:	e044      	b.n	80049ee <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	2b03      	cmp	r3, #3
 800496a:	d018      	beq.n	800499e <RCCEx_PLLSAI2_Config+0x86>
 800496c:	2b03      	cmp	r3, #3
 800496e:	d825      	bhi.n	80049bc <RCCEx_PLLSAI2_Config+0xa4>
 8004970:	2b01      	cmp	r3, #1
 8004972:	d002      	beq.n	800497a <RCCEx_PLLSAI2_Config+0x62>
 8004974:	2b02      	cmp	r3, #2
 8004976:	d009      	beq.n	800498c <RCCEx_PLLSAI2_Config+0x74>
 8004978:	e020      	b.n	80049bc <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800497a:	4b55      	ldr	r3, [pc, #340]	@ (8004ad0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f003 0302 	and.w	r3, r3, #2
 8004982:	2b00      	cmp	r3, #0
 8004984:	d11d      	bne.n	80049c2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004986:	2301      	movs	r3, #1
 8004988:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800498a:	e01a      	b.n	80049c2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800498c:	4b50      	ldr	r3, [pc, #320]	@ (8004ad0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004994:	2b00      	cmp	r3, #0
 8004996:	d116      	bne.n	80049c6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004998:	2301      	movs	r3, #1
 800499a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800499c:	e013      	b.n	80049c6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800499e:	4b4c      	ldr	r3, [pc, #304]	@ (8004ad0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d10f      	bne.n	80049ca <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80049aa:	4b49      	ldr	r3, [pc, #292]	@ (8004ad0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d109      	bne.n	80049ca <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80049b6:	2301      	movs	r3, #1
 80049b8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80049ba:	e006      	b.n	80049ca <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80049bc:	2301      	movs	r3, #1
 80049be:	73fb      	strb	r3, [r7, #15]
      break;
 80049c0:	e004      	b.n	80049cc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80049c2:	bf00      	nop
 80049c4:	e002      	b.n	80049cc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80049c6:	bf00      	nop
 80049c8:	e000      	b.n	80049cc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80049ca:	bf00      	nop
    }

    if(status == HAL_OK)
 80049cc:	7bfb      	ldrb	r3, [r7, #15]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d10d      	bne.n	80049ee <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80049d2:	4b3f      	ldr	r3, [pc, #252]	@ (8004ad0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80049d4:	68db      	ldr	r3, [r3, #12]
 80049d6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6819      	ldr	r1, [r3, #0]
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	3b01      	subs	r3, #1
 80049e4:	011b      	lsls	r3, r3, #4
 80049e6:	430b      	orrs	r3, r1
 80049e8:	4939      	ldr	r1, [pc, #228]	@ (8004ad0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80049ea:	4313      	orrs	r3, r2
 80049ec:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80049ee:	7bfb      	ldrb	r3, [r7, #15]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d167      	bne.n	8004ac4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80049f4:	4b36      	ldr	r3, [pc, #216]	@ (8004ad0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a35      	ldr	r2, [pc, #212]	@ (8004ad0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80049fa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80049fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a00:	f7fc ff60 	bl	80018c4 <HAL_GetTick>
 8004a04:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004a06:	e009      	b.n	8004a1c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004a08:	f7fc ff5c 	bl	80018c4 <HAL_GetTick>
 8004a0c:	4602      	mov	r2, r0
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	1ad3      	subs	r3, r2, r3
 8004a12:	2b02      	cmp	r3, #2
 8004a14:	d902      	bls.n	8004a1c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004a16:	2303      	movs	r3, #3
 8004a18:	73fb      	strb	r3, [r7, #15]
        break;
 8004a1a:	e005      	b.n	8004a28 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004a1c:	4b2c      	ldr	r3, [pc, #176]	@ (8004ad0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d1ef      	bne.n	8004a08 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004a28:	7bfb      	ldrb	r3, [r7, #15]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d14a      	bne.n	8004ac4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d111      	bne.n	8004a58 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004a34:	4b26      	ldr	r3, [pc, #152]	@ (8004ad0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a36:	695b      	ldr	r3, [r3, #20]
 8004a38:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004a3c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a40:	687a      	ldr	r2, [r7, #4]
 8004a42:	6892      	ldr	r2, [r2, #8]
 8004a44:	0211      	lsls	r1, r2, #8
 8004a46:	687a      	ldr	r2, [r7, #4]
 8004a48:	68d2      	ldr	r2, [r2, #12]
 8004a4a:	0912      	lsrs	r2, r2, #4
 8004a4c:	0452      	lsls	r2, r2, #17
 8004a4e:	430a      	orrs	r2, r1
 8004a50:	491f      	ldr	r1, [pc, #124]	@ (8004ad0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a52:	4313      	orrs	r3, r2
 8004a54:	614b      	str	r3, [r1, #20]
 8004a56:	e011      	b.n	8004a7c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004a58:	4b1d      	ldr	r3, [pc, #116]	@ (8004ad0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a5a:	695b      	ldr	r3, [r3, #20]
 8004a5c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004a60:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004a64:	687a      	ldr	r2, [r7, #4]
 8004a66:	6892      	ldr	r2, [r2, #8]
 8004a68:	0211      	lsls	r1, r2, #8
 8004a6a:	687a      	ldr	r2, [r7, #4]
 8004a6c:	6912      	ldr	r2, [r2, #16]
 8004a6e:	0852      	lsrs	r2, r2, #1
 8004a70:	3a01      	subs	r2, #1
 8004a72:	0652      	lsls	r2, r2, #25
 8004a74:	430a      	orrs	r2, r1
 8004a76:	4916      	ldr	r1, [pc, #88]	@ (8004ad0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004a7c:	4b14      	ldr	r3, [pc, #80]	@ (8004ad0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a13      	ldr	r2, [pc, #76]	@ (8004ad0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a82:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004a86:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a88:	f7fc ff1c 	bl	80018c4 <HAL_GetTick>
 8004a8c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004a8e:	e009      	b.n	8004aa4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004a90:	f7fc ff18 	bl	80018c4 <HAL_GetTick>
 8004a94:	4602      	mov	r2, r0
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	1ad3      	subs	r3, r2, r3
 8004a9a:	2b02      	cmp	r3, #2
 8004a9c:	d902      	bls.n	8004aa4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004a9e:	2303      	movs	r3, #3
 8004aa0:	73fb      	strb	r3, [r7, #15]
          break;
 8004aa2:	e005      	b.n	8004ab0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004aa4:	4b0a      	ldr	r3, [pc, #40]	@ (8004ad0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d0ef      	beq.n	8004a90 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004ab0:	7bfb      	ldrb	r3, [r7, #15]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d106      	bne.n	8004ac4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004ab6:	4b06      	ldr	r3, [pc, #24]	@ (8004ad0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ab8:	695a      	ldr	r2, [r3, #20]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	695b      	ldr	r3, [r3, #20]
 8004abe:	4904      	ldr	r1, [pc, #16]	@ (8004ad0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ac0:	4313      	orrs	r3, r2
 8004ac2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004ac4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	3710      	adds	r7, #16
 8004aca:	46bd      	mov	sp, r7
 8004acc:	bd80      	pop	{r7, pc}
 8004ace:	bf00      	nop
 8004ad0:	40021000 	.word	0x40021000

08004ad4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b082      	sub	sp, #8
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d101      	bne.n	8004ae6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	e040      	b.n	8004b68 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d106      	bne.n	8004afc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2200      	movs	r2, #0
 8004af2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004af6:	6878      	ldr	r0, [r7, #4]
 8004af8:	f7fc fce6 	bl	80014c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2224      	movs	r2, #36	@ 0x24
 8004b00:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	681a      	ldr	r2, [r3, #0]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f022 0201 	bic.w	r2, r2, #1
 8004b10:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d002      	beq.n	8004b20 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004b1a:	6878      	ldr	r0, [r7, #4]
 8004b1c:	f000 fb6a 	bl	80051f4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004b20:	6878      	ldr	r0, [r7, #4]
 8004b22:	f000 f8af 	bl	8004c84 <UART_SetConfig>
 8004b26:	4603      	mov	r3, r0
 8004b28:	2b01      	cmp	r3, #1
 8004b2a:	d101      	bne.n	8004b30 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	e01b      	b.n	8004b68 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	685a      	ldr	r2, [r3, #4]
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004b3e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	689a      	ldr	r2, [r3, #8]
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004b4e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	681a      	ldr	r2, [r3, #0]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f042 0201 	orr.w	r2, r2, #1
 8004b5e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004b60:	6878      	ldr	r0, [r7, #4]
 8004b62:	f000 fbe9 	bl	8005338 <UART_CheckIdleState>
 8004b66:	4603      	mov	r3, r0
}
 8004b68:	4618      	mov	r0, r3
 8004b6a:	3708      	adds	r7, #8
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bd80      	pop	{r7, pc}

08004b70 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b08a      	sub	sp, #40	@ 0x28
 8004b74:	af02      	add	r7, sp, #8
 8004b76:	60f8      	str	r0, [r7, #12]
 8004b78:	60b9      	str	r1, [r7, #8]
 8004b7a:	603b      	str	r3, [r7, #0]
 8004b7c:	4613      	mov	r3, r2
 8004b7e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004b84:	2b20      	cmp	r3, #32
 8004b86:	d177      	bne.n	8004c78 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d002      	beq.n	8004b94 <HAL_UART_Transmit+0x24>
 8004b8e:	88fb      	ldrh	r3, [r7, #6]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d101      	bne.n	8004b98 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004b94:	2301      	movs	r3, #1
 8004b96:	e070      	b.n	8004c7a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	2221      	movs	r2, #33	@ 0x21
 8004ba4:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004ba6:	f7fc fe8d 	bl	80018c4 <HAL_GetTick>
 8004baa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	88fa      	ldrh	r2, [r7, #6]
 8004bb0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	88fa      	ldrh	r2, [r7, #6]
 8004bb8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	689b      	ldr	r3, [r3, #8]
 8004bc0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004bc4:	d108      	bne.n	8004bd8 <HAL_UART_Transmit+0x68>
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	691b      	ldr	r3, [r3, #16]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d104      	bne.n	8004bd8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004bce:	2300      	movs	r3, #0
 8004bd0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004bd2:	68bb      	ldr	r3, [r7, #8]
 8004bd4:	61bb      	str	r3, [r7, #24]
 8004bd6:	e003      	b.n	8004be0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004bdc:	2300      	movs	r3, #0
 8004bde:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004be0:	e02f      	b.n	8004c42 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	9300      	str	r3, [sp, #0]
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	2200      	movs	r2, #0
 8004bea:	2180      	movs	r1, #128	@ 0x80
 8004bec:	68f8      	ldr	r0, [r7, #12]
 8004bee:	f000 fc4b 	bl	8005488 <UART_WaitOnFlagUntilTimeout>
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d004      	beq.n	8004c02 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	2220      	movs	r2, #32
 8004bfc:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8004bfe:	2303      	movs	r3, #3
 8004c00:	e03b      	b.n	8004c7a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8004c02:	69fb      	ldr	r3, [r7, #28]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d10b      	bne.n	8004c20 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004c08:	69bb      	ldr	r3, [r7, #24]
 8004c0a:	881a      	ldrh	r2, [r3, #0]
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c14:	b292      	uxth	r2, r2
 8004c16:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004c18:	69bb      	ldr	r3, [r7, #24]
 8004c1a:	3302      	adds	r3, #2
 8004c1c:	61bb      	str	r3, [r7, #24]
 8004c1e:	e007      	b.n	8004c30 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004c20:	69fb      	ldr	r3, [r7, #28]
 8004c22:	781a      	ldrb	r2, [r3, #0]
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004c2a:	69fb      	ldr	r3, [r7, #28]
 8004c2c:	3301      	adds	r3, #1
 8004c2e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004c36:	b29b      	uxth	r3, r3
 8004c38:	3b01      	subs	r3, #1
 8004c3a:	b29a      	uxth	r2, r3
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004c48:	b29b      	uxth	r3, r3
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d1c9      	bne.n	8004be2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	9300      	str	r3, [sp, #0]
 8004c52:	697b      	ldr	r3, [r7, #20]
 8004c54:	2200      	movs	r2, #0
 8004c56:	2140      	movs	r1, #64	@ 0x40
 8004c58:	68f8      	ldr	r0, [r7, #12]
 8004c5a:	f000 fc15 	bl	8005488 <UART_WaitOnFlagUntilTimeout>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d004      	beq.n	8004c6e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	2220      	movs	r2, #32
 8004c68:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8004c6a:	2303      	movs	r3, #3
 8004c6c:	e005      	b.n	8004c7a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	2220      	movs	r2, #32
 8004c72:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004c74:	2300      	movs	r3, #0
 8004c76:	e000      	b.n	8004c7a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004c78:	2302      	movs	r3, #2
  }
}
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	3720      	adds	r7, #32
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bd80      	pop	{r7, pc}
	...

08004c84 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c88:	b08a      	sub	sp, #40	@ 0x28
 8004c8a:	af00      	add	r7, sp, #0
 8004c8c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004c8e:	2300      	movs	r3, #0
 8004c90:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	689a      	ldr	r2, [r3, #8]
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	691b      	ldr	r3, [r3, #16]
 8004c9c:	431a      	orrs	r2, r3
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	695b      	ldr	r3, [r3, #20]
 8004ca2:	431a      	orrs	r2, r3
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	69db      	ldr	r3, [r3, #28]
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	681a      	ldr	r2, [r3, #0]
 8004cb2:	4ba4      	ldr	r3, [pc, #656]	@ (8004f44 <UART_SetConfig+0x2c0>)
 8004cb4:	4013      	ands	r3, r2
 8004cb6:	68fa      	ldr	r2, [r7, #12]
 8004cb8:	6812      	ldr	r2, [r2, #0]
 8004cba:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004cbc:	430b      	orrs	r3, r1
 8004cbe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	68da      	ldr	r2, [r3, #12]
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	430a      	orrs	r2, r1
 8004cd4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	699b      	ldr	r3, [r3, #24]
 8004cda:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a99      	ldr	r2, [pc, #612]	@ (8004f48 <UART_SetConfig+0x2c4>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d004      	beq.n	8004cf0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	6a1b      	ldr	r3, [r3, #32]
 8004cea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004cec:	4313      	orrs	r3, r2
 8004cee:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	689b      	ldr	r3, [r3, #8]
 8004cf6:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d00:	430a      	orrs	r2, r1
 8004d02:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a90      	ldr	r2, [pc, #576]	@ (8004f4c <UART_SetConfig+0x2c8>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d126      	bne.n	8004d5c <UART_SetConfig+0xd8>
 8004d0e:	4b90      	ldr	r3, [pc, #576]	@ (8004f50 <UART_SetConfig+0x2cc>)
 8004d10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d14:	f003 0303 	and.w	r3, r3, #3
 8004d18:	2b03      	cmp	r3, #3
 8004d1a:	d81b      	bhi.n	8004d54 <UART_SetConfig+0xd0>
 8004d1c:	a201      	add	r2, pc, #4	@ (adr r2, 8004d24 <UART_SetConfig+0xa0>)
 8004d1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d22:	bf00      	nop
 8004d24:	08004d35 	.word	0x08004d35
 8004d28:	08004d45 	.word	0x08004d45
 8004d2c:	08004d3d 	.word	0x08004d3d
 8004d30:	08004d4d 	.word	0x08004d4d
 8004d34:	2301      	movs	r3, #1
 8004d36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d3a:	e116      	b.n	8004f6a <UART_SetConfig+0x2e6>
 8004d3c:	2302      	movs	r3, #2
 8004d3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d42:	e112      	b.n	8004f6a <UART_SetConfig+0x2e6>
 8004d44:	2304      	movs	r3, #4
 8004d46:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d4a:	e10e      	b.n	8004f6a <UART_SetConfig+0x2e6>
 8004d4c:	2308      	movs	r3, #8
 8004d4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d52:	e10a      	b.n	8004f6a <UART_SetConfig+0x2e6>
 8004d54:	2310      	movs	r3, #16
 8004d56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d5a:	e106      	b.n	8004f6a <UART_SetConfig+0x2e6>
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4a7c      	ldr	r2, [pc, #496]	@ (8004f54 <UART_SetConfig+0x2d0>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d138      	bne.n	8004dd8 <UART_SetConfig+0x154>
 8004d66:	4b7a      	ldr	r3, [pc, #488]	@ (8004f50 <UART_SetConfig+0x2cc>)
 8004d68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d6c:	f003 030c 	and.w	r3, r3, #12
 8004d70:	2b0c      	cmp	r3, #12
 8004d72:	d82d      	bhi.n	8004dd0 <UART_SetConfig+0x14c>
 8004d74:	a201      	add	r2, pc, #4	@ (adr r2, 8004d7c <UART_SetConfig+0xf8>)
 8004d76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d7a:	bf00      	nop
 8004d7c:	08004db1 	.word	0x08004db1
 8004d80:	08004dd1 	.word	0x08004dd1
 8004d84:	08004dd1 	.word	0x08004dd1
 8004d88:	08004dd1 	.word	0x08004dd1
 8004d8c:	08004dc1 	.word	0x08004dc1
 8004d90:	08004dd1 	.word	0x08004dd1
 8004d94:	08004dd1 	.word	0x08004dd1
 8004d98:	08004dd1 	.word	0x08004dd1
 8004d9c:	08004db9 	.word	0x08004db9
 8004da0:	08004dd1 	.word	0x08004dd1
 8004da4:	08004dd1 	.word	0x08004dd1
 8004da8:	08004dd1 	.word	0x08004dd1
 8004dac:	08004dc9 	.word	0x08004dc9
 8004db0:	2300      	movs	r3, #0
 8004db2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004db6:	e0d8      	b.n	8004f6a <UART_SetConfig+0x2e6>
 8004db8:	2302      	movs	r3, #2
 8004dba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004dbe:	e0d4      	b.n	8004f6a <UART_SetConfig+0x2e6>
 8004dc0:	2304      	movs	r3, #4
 8004dc2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004dc6:	e0d0      	b.n	8004f6a <UART_SetConfig+0x2e6>
 8004dc8:	2308      	movs	r3, #8
 8004dca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004dce:	e0cc      	b.n	8004f6a <UART_SetConfig+0x2e6>
 8004dd0:	2310      	movs	r3, #16
 8004dd2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004dd6:	e0c8      	b.n	8004f6a <UART_SetConfig+0x2e6>
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4a5e      	ldr	r2, [pc, #376]	@ (8004f58 <UART_SetConfig+0x2d4>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d125      	bne.n	8004e2e <UART_SetConfig+0x1aa>
 8004de2:	4b5b      	ldr	r3, [pc, #364]	@ (8004f50 <UART_SetConfig+0x2cc>)
 8004de4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004de8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004dec:	2b30      	cmp	r3, #48	@ 0x30
 8004dee:	d016      	beq.n	8004e1e <UART_SetConfig+0x19a>
 8004df0:	2b30      	cmp	r3, #48	@ 0x30
 8004df2:	d818      	bhi.n	8004e26 <UART_SetConfig+0x1a2>
 8004df4:	2b20      	cmp	r3, #32
 8004df6:	d00a      	beq.n	8004e0e <UART_SetConfig+0x18a>
 8004df8:	2b20      	cmp	r3, #32
 8004dfa:	d814      	bhi.n	8004e26 <UART_SetConfig+0x1a2>
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d002      	beq.n	8004e06 <UART_SetConfig+0x182>
 8004e00:	2b10      	cmp	r3, #16
 8004e02:	d008      	beq.n	8004e16 <UART_SetConfig+0x192>
 8004e04:	e00f      	b.n	8004e26 <UART_SetConfig+0x1a2>
 8004e06:	2300      	movs	r3, #0
 8004e08:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e0c:	e0ad      	b.n	8004f6a <UART_SetConfig+0x2e6>
 8004e0e:	2302      	movs	r3, #2
 8004e10:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e14:	e0a9      	b.n	8004f6a <UART_SetConfig+0x2e6>
 8004e16:	2304      	movs	r3, #4
 8004e18:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e1c:	e0a5      	b.n	8004f6a <UART_SetConfig+0x2e6>
 8004e1e:	2308      	movs	r3, #8
 8004e20:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e24:	e0a1      	b.n	8004f6a <UART_SetConfig+0x2e6>
 8004e26:	2310      	movs	r3, #16
 8004e28:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e2c:	e09d      	b.n	8004f6a <UART_SetConfig+0x2e6>
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4a4a      	ldr	r2, [pc, #296]	@ (8004f5c <UART_SetConfig+0x2d8>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d125      	bne.n	8004e84 <UART_SetConfig+0x200>
 8004e38:	4b45      	ldr	r3, [pc, #276]	@ (8004f50 <UART_SetConfig+0x2cc>)
 8004e3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e3e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004e42:	2bc0      	cmp	r3, #192	@ 0xc0
 8004e44:	d016      	beq.n	8004e74 <UART_SetConfig+0x1f0>
 8004e46:	2bc0      	cmp	r3, #192	@ 0xc0
 8004e48:	d818      	bhi.n	8004e7c <UART_SetConfig+0x1f8>
 8004e4a:	2b80      	cmp	r3, #128	@ 0x80
 8004e4c:	d00a      	beq.n	8004e64 <UART_SetConfig+0x1e0>
 8004e4e:	2b80      	cmp	r3, #128	@ 0x80
 8004e50:	d814      	bhi.n	8004e7c <UART_SetConfig+0x1f8>
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d002      	beq.n	8004e5c <UART_SetConfig+0x1d8>
 8004e56:	2b40      	cmp	r3, #64	@ 0x40
 8004e58:	d008      	beq.n	8004e6c <UART_SetConfig+0x1e8>
 8004e5a:	e00f      	b.n	8004e7c <UART_SetConfig+0x1f8>
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e62:	e082      	b.n	8004f6a <UART_SetConfig+0x2e6>
 8004e64:	2302      	movs	r3, #2
 8004e66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e6a:	e07e      	b.n	8004f6a <UART_SetConfig+0x2e6>
 8004e6c:	2304      	movs	r3, #4
 8004e6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e72:	e07a      	b.n	8004f6a <UART_SetConfig+0x2e6>
 8004e74:	2308      	movs	r3, #8
 8004e76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e7a:	e076      	b.n	8004f6a <UART_SetConfig+0x2e6>
 8004e7c:	2310      	movs	r3, #16
 8004e7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e82:	e072      	b.n	8004f6a <UART_SetConfig+0x2e6>
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4a35      	ldr	r2, [pc, #212]	@ (8004f60 <UART_SetConfig+0x2dc>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d12a      	bne.n	8004ee4 <UART_SetConfig+0x260>
 8004e8e:	4b30      	ldr	r3, [pc, #192]	@ (8004f50 <UART_SetConfig+0x2cc>)
 8004e90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e94:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e98:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004e9c:	d01a      	beq.n	8004ed4 <UART_SetConfig+0x250>
 8004e9e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004ea2:	d81b      	bhi.n	8004edc <UART_SetConfig+0x258>
 8004ea4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ea8:	d00c      	beq.n	8004ec4 <UART_SetConfig+0x240>
 8004eaa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004eae:	d815      	bhi.n	8004edc <UART_SetConfig+0x258>
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d003      	beq.n	8004ebc <UART_SetConfig+0x238>
 8004eb4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004eb8:	d008      	beq.n	8004ecc <UART_SetConfig+0x248>
 8004eba:	e00f      	b.n	8004edc <UART_SetConfig+0x258>
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ec2:	e052      	b.n	8004f6a <UART_SetConfig+0x2e6>
 8004ec4:	2302      	movs	r3, #2
 8004ec6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004eca:	e04e      	b.n	8004f6a <UART_SetConfig+0x2e6>
 8004ecc:	2304      	movs	r3, #4
 8004ece:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ed2:	e04a      	b.n	8004f6a <UART_SetConfig+0x2e6>
 8004ed4:	2308      	movs	r3, #8
 8004ed6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004eda:	e046      	b.n	8004f6a <UART_SetConfig+0x2e6>
 8004edc:	2310      	movs	r3, #16
 8004ede:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ee2:	e042      	b.n	8004f6a <UART_SetConfig+0x2e6>
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4a17      	ldr	r2, [pc, #92]	@ (8004f48 <UART_SetConfig+0x2c4>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d13a      	bne.n	8004f64 <UART_SetConfig+0x2e0>
 8004eee:	4b18      	ldr	r3, [pc, #96]	@ (8004f50 <UART_SetConfig+0x2cc>)
 8004ef0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ef4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004ef8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004efc:	d01a      	beq.n	8004f34 <UART_SetConfig+0x2b0>
 8004efe:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004f02:	d81b      	bhi.n	8004f3c <UART_SetConfig+0x2b8>
 8004f04:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004f08:	d00c      	beq.n	8004f24 <UART_SetConfig+0x2a0>
 8004f0a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004f0e:	d815      	bhi.n	8004f3c <UART_SetConfig+0x2b8>
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d003      	beq.n	8004f1c <UART_SetConfig+0x298>
 8004f14:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f18:	d008      	beq.n	8004f2c <UART_SetConfig+0x2a8>
 8004f1a:	e00f      	b.n	8004f3c <UART_SetConfig+0x2b8>
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f22:	e022      	b.n	8004f6a <UART_SetConfig+0x2e6>
 8004f24:	2302      	movs	r3, #2
 8004f26:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f2a:	e01e      	b.n	8004f6a <UART_SetConfig+0x2e6>
 8004f2c:	2304      	movs	r3, #4
 8004f2e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f32:	e01a      	b.n	8004f6a <UART_SetConfig+0x2e6>
 8004f34:	2308      	movs	r3, #8
 8004f36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f3a:	e016      	b.n	8004f6a <UART_SetConfig+0x2e6>
 8004f3c:	2310      	movs	r3, #16
 8004f3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f42:	e012      	b.n	8004f6a <UART_SetConfig+0x2e6>
 8004f44:	efff69f3 	.word	0xefff69f3
 8004f48:	40008000 	.word	0x40008000
 8004f4c:	40013800 	.word	0x40013800
 8004f50:	40021000 	.word	0x40021000
 8004f54:	40004400 	.word	0x40004400
 8004f58:	40004800 	.word	0x40004800
 8004f5c:	40004c00 	.word	0x40004c00
 8004f60:	40005000 	.word	0x40005000
 8004f64:	2310      	movs	r3, #16
 8004f66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4a9f      	ldr	r2, [pc, #636]	@ (80051ec <UART_SetConfig+0x568>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d17a      	bne.n	800506a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004f74:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004f78:	2b08      	cmp	r3, #8
 8004f7a:	d824      	bhi.n	8004fc6 <UART_SetConfig+0x342>
 8004f7c:	a201      	add	r2, pc, #4	@ (adr r2, 8004f84 <UART_SetConfig+0x300>)
 8004f7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f82:	bf00      	nop
 8004f84:	08004fa9 	.word	0x08004fa9
 8004f88:	08004fc7 	.word	0x08004fc7
 8004f8c:	08004fb1 	.word	0x08004fb1
 8004f90:	08004fc7 	.word	0x08004fc7
 8004f94:	08004fb7 	.word	0x08004fb7
 8004f98:	08004fc7 	.word	0x08004fc7
 8004f9c:	08004fc7 	.word	0x08004fc7
 8004fa0:	08004fc7 	.word	0x08004fc7
 8004fa4:	08004fbf 	.word	0x08004fbf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004fa8:	f7ff f84c 	bl	8004044 <HAL_RCC_GetPCLK1Freq>
 8004fac:	61f8      	str	r0, [r7, #28]
        break;
 8004fae:	e010      	b.n	8004fd2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004fb0:	4b8f      	ldr	r3, [pc, #572]	@ (80051f0 <UART_SetConfig+0x56c>)
 8004fb2:	61fb      	str	r3, [r7, #28]
        break;
 8004fb4:	e00d      	b.n	8004fd2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004fb6:	f7fe ffad 	bl	8003f14 <HAL_RCC_GetSysClockFreq>
 8004fba:	61f8      	str	r0, [r7, #28]
        break;
 8004fbc:	e009      	b.n	8004fd2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004fbe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004fc2:	61fb      	str	r3, [r7, #28]
        break;
 8004fc4:	e005      	b.n	8004fd2 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004fca:	2301      	movs	r3, #1
 8004fcc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004fd0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004fd2:	69fb      	ldr	r3, [r7, #28]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	f000 80fb 	beq.w	80051d0 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	685a      	ldr	r2, [r3, #4]
 8004fde:	4613      	mov	r3, r2
 8004fe0:	005b      	lsls	r3, r3, #1
 8004fe2:	4413      	add	r3, r2
 8004fe4:	69fa      	ldr	r2, [r7, #28]
 8004fe6:	429a      	cmp	r2, r3
 8004fe8:	d305      	bcc.n	8004ff6 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004ff0:	69fa      	ldr	r2, [r7, #28]
 8004ff2:	429a      	cmp	r2, r3
 8004ff4:	d903      	bls.n	8004ffe <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004ffc:	e0e8      	b.n	80051d0 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004ffe:	69fb      	ldr	r3, [r7, #28]
 8005000:	2200      	movs	r2, #0
 8005002:	461c      	mov	r4, r3
 8005004:	4615      	mov	r5, r2
 8005006:	f04f 0200 	mov.w	r2, #0
 800500a:	f04f 0300 	mov.w	r3, #0
 800500e:	022b      	lsls	r3, r5, #8
 8005010:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005014:	0222      	lsls	r2, r4, #8
 8005016:	68f9      	ldr	r1, [r7, #12]
 8005018:	6849      	ldr	r1, [r1, #4]
 800501a:	0849      	lsrs	r1, r1, #1
 800501c:	2000      	movs	r0, #0
 800501e:	4688      	mov	r8, r1
 8005020:	4681      	mov	r9, r0
 8005022:	eb12 0a08 	adds.w	sl, r2, r8
 8005026:	eb43 0b09 	adc.w	fp, r3, r9
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	685b      	ldr	r3, [r3, #4]
 800502e:	2200      	movs	r2, #0
 8005030:	603b      	str	r3, [r7, #0]
 8005032:	607a      	str	r2, [r7, #4]
 8005034:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005038:	4650      	mov	r0, sl
 800503a:	4659      	mov	r1, fp
 800503c:	f7fb fe24 	bl	8000c88 <__aeabi_uldivmod>
 8005040:	4602      	mov	r2, r0
 8005042:	460b      	mov	r3, r1
 8005044:	4613      	mov	r3, r2
 8005046:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005048:	69bb      	ldr	r3, [r7, #24]
 800504a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800504e:	d308      	bcc.n	8005062 <UART_SetConfig+0x3de>
 8005050:	69bb      	ldr	r3, [r7, #24]
 8005052:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005056:	d204      	bcs.n	8005062 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	69ba      	ldr	r2, [r7, #24]
 800505e:	60da      	str	r2, [r3, #12]
 8005060:	e0b6      	b.n	80051d0 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8005062:	2301      	movs	r3, #1
 8005064:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005068:	e0b2      	b.n	80051d0 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	69db      	ldr	r3, [r3, #28]
 800506e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005072:	d15e      	bne.n	8005132 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005074:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005078:	2b08      	cmp	r3, #8
 800507a:	d828      	bhi.n	80050ce <UART_SetConfig+0x44a>
 800507c:	a201      	add	r2, pc, #4	@ (adr r2, 8005084 <UART_SetConfig+0x400>)
 800507e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005082:	bf00      	nop
 8005084:	080050a9 	.word	0x080050a9
 8005088:	080050b1 	.word	0x080050b1
 800508c:	080050b9 	.word	0x080050b9
 8005090:	080050cf 	.word	0x080050cf
 8005094:	080050bf 	.word	0x080050bf
 8005098:	080050cf 	.word	0x080050cf
 800509c:	080050cf 	.word	0x080050cf
 80050a0:	080050cf 	.word	0x080050cf
 80050a4:	080050c7 	.word	0x080050c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80050a8:	f7fe ffcc 	bl	8004044 <HAL_RCC_GetPCLK1Freq>
 80050ac:	61f8      	str	r0, [r7, #28]
        break;
 80050ae:	e014      	b.n	80050da <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80050b0:	f7fe ffde 	bl	8004070 <HAL_RCC_GetPCLK2Freq>
 80050b4:	61f8      	str	r0, [r7, #28]
        break;
 80050b6:	e010      	b.n	80050da <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80050b8:	4b4d      	ldr	r3, [pc, #308]	@ (80051f0 <UART_SetConfig+0x56c>)
 80050ba:	61fb      	str	r3, [r7, #28]
        break;
 80050bc:	e00d      	b.n	80050da <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80050be:	f7fe ff29 	bl	8003f14 <HAL_RCC_GetSysClockFreq>
 80050c2:	61f8      	str	r0, [r7, #28]
        break;
 80050c4:	e009      	b.n	80050da <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80050c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80050ca:	61fb      	str	r3, [r7, #28]
        break;
 80050cc:	e005      	b.n	80050da <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80050ce:	2300      	movs	r3, #0
 80050d0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80050d2:	2301      	movs	r3, #1
 80050d4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80050d8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80050da:	69fb      	ldr	r3, [r7, #28]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d077      	beq.n	80051d0 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80050e0:	69fb      	ldr	r3, [r7, #28]
 80050e2:	005a      	lsls	r2, r3, #1
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	085b      	lsrs	r3, r3, #1
 80050ea:	441a      	add	r2, r3
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80050f4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80050f6:	69bb      	ldr	r3, [r7, #24]
 80050f8:	2b0f      	cmp	r3, #15
 80050fa:	d916      	bls.n	800512a <UART_SetConfig+0x4a6>
 80050fc:	69bb      	ldr	r3, [r7, #24]
 80050fe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005102:	d212      	bcs.n	800512a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005104:	69bb      	ldr	r3, [r7, #24]
 8005106:	b29b      	uxth	r3, r3
 8005108:	f023 030f 	bic.w	r3, r3, #15
 800510c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800510e:	69bb      	ldr	r3, [r7, #24]
 8005110:	085b      	lsrs	r3, r3, #1
 8005112:	b29b      	uxth	r3, r3
 8005114:	f003 0307 	and.w	r3, r3, #7
 8005118:	b29a      	uxth	r2, r3
 800511a:	8afb      	ldrh	r3, [r7, #22]
 800511c:	4313      	orrs	r3, r2
 800511e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	8afa      	ldrh	r2, [r7, #22]
 8005126:	60da      	str	r2, [r3, #12]
 8005128:	e052      	b.n	80051d0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800512a:	2301      	movs	r3, #1
 800512c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005130:	e04e      	b.n	80051d0 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005132:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005136:	2b08      	cmp	r3, #8
 8005138:	d827      	bhi.n	800518a <UART_SetConfig+0x506>
 800513a:	a201      	add	r2, pc, #4	@ (adr r2, 8005140 <UART_SetConfig+0x4bc>)
 800513c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005140:	08005165 	.word	0x08005165
 8005144:	0800516d 	.word	0x0800516d
 8005148:	08005175 	.word	0x08005175
 800514c:	0800518b 	.word	0x0800518b
 8005150:	0800517b 	.word	0x0800517b
 8005154:	0800518b 	.word	0x0800518b
 8005158:	0800518b 	.word	0x0800518b
 800515c:	0800518b 	.word	0x0800518b
 8005160:	08005183 	.word	0x08005183
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005164:	f7fe ff6e 	bl	8004044 <HAL_RCC_GetPCLK1Freq>
 8005168:	61f8      	str	r0, [r7, #28]
        break;
 800516a:	e014      	b.n	8005196 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800516c:	f7fe ff80 	bl	8004070 <HAL_RCC_GetPCLK2Freq>
 8005170:	61f8      	str	r0, [r7, #28]
        break;
 8005172:	e010      	b.n	8005196 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005174:	4b1e      	ldr	r3, [pc, #120]	@ (80051f0 <UART_SetConfig+0x56c>)
 8005176:	61fb      	str	r3, [r7, #28]
        break;
 8005178:	e00d      	b.n	8005196 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800517a:	f7fe fecb 	bl	8003f14 <HAL_RCC_GetSysClockFreq>
 800517e:	61f8      	str	r0, [r7, #28]
        break;
 8005180:	e009      	b.n	8005196 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005182:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005186:	61fb      	str	r3, [r7, #28]
        break;
 8005188:	e005      	b.n	8005196 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800518a:	2300      	movs	r3, #0
 800518c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800518e:	2301      	movs	r3, #1
 8005190:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005194:	bf00      	nop
    }

    if (pclk != 0U)
 8005196:	69fb      	ldr	r3, [r7, #28]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d019      	beq.n	80051d0 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	685b      	ldr	r3, [r3, #4]
 80051a0:	085a      	lsrs	r2, r3, #1
 80051a2:	69fb      	ldr	r3, [r7, #28]
 80051a4:	441a      	add	r2, r3
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	685b      	ldr	r3, [r3, #4]
 80051aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80051ae:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80051b0:	69bb      	ldr	r3, [r7, #24]
 80051b2:	2b0f      	cmp	r3, #15
 80051b4:	d909      	bls.n	80051ca <UART_SetConfig+0x546>
 80051b6:	69bb      	ldr	r3, [r7, #24]
 80051b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80051bc:	d205      	bcs.n	80051ca <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80051be:	69bb      	ldr	r3, [r7, #24]
 80051c0:	b29a      	uxth	r2, r3
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	60da      	str	r2, [r3, #12]
 80051c8:	e002      	b.n	80051d0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80051ca:	2301      	movs	r3, #1
 80051cc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	2200      	movs	r2, #0
 80051d4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	2200      	movs	r2, #0
 80051da:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80051dc:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80051e0:	4618      	mov	r0, r3
 80051e2:	3728      	adds	r7, #40	@ 0x28
 80051e4:	46bd      	mov	sp, r7
 80051e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80051ea:	bf00      	nop
 80051ec:	40008000 	.word	0x40008000
 80051f0:	00f42400 	.word	0x00f42400

080051f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80051f4:	b480      	push	{r7}
 80051f6:	b083      	sub	sp, #12
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005200:	f003 0308 	and.w	r3, r3, #8
 8005204:	2b00      	cmp	r3, #0
 8005206:	d00a      	beq.n	800521e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	685b      	ldr	r3, [r3, #4]
 800520e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	430a      	orrs	r2, r1
 800521c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005222:	f003 0301 	and.w	r3, r3, #1
 8005226:	2b00      	cmp	r3, #0
 8005228:	d00a      	beq.n	8005240 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	685b      	ldr	r3, [r3, #4]
 8005230:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	430a      	orrs	r2, r1
 800523e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005244:	f003 0302 	and.w	r3, r3, #2
 8005248:	2b00      	cmp	r3, #0
 800524a:	d00a      	beq.n	8005262 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	685b      	ldr	r3, [r3, #4]
 8005252:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	430a      	orrs	r2, r1
 8005260:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005266:	f003 0304 	and.w	r3, r3, #4
 800526a:	2b00      	cmp	r3, #0
 800526c:	d00a      	beq.n	8005284 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	685b      	ldr	r3, [r3, #4]
 8005274:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	430a      	orrs	r2, r1
 8005282:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005288:	f003 0310 	and.w	r3, r3, #16
 800528c:	2b00      	cmp	r3, #0
 800528e:	d00a      	beq.n	80052a6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	689b      	ldr	r3, [r3, #8]
 8005296:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	430a      	orrs	r2, r1
 80052a4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052aa:	f003 0320 	and.w	r3, r3, #32
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d00a      	beq.n	80052c8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	689b      	ldr	r3, [r3, #8]
 80052b8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	430a      	orrs	r2, r1
 80052c6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d01a      	beq.n	800530a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	685b      	ldr	r3, [r3, #4]
 80052da:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	430a      	orrs	r2, r1
 80052e8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052ee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80052f2:	d10a      	bne.n	800530a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	430a      	orrs	r2, r1
 8005308:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800530e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005312:	2b00      	cmp	r3, #0
 8005314:	d00a      	beq.n	800532c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	430a      	orrs	r2, r1
 800532a:	605a      	str	r2, [r3, #4]
  }
}
 800532c:	bf00      	nop
 800532e:	370c      	adds	r7, #12
 8005330:	46bd      	mov	sp, r7
 8005332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005336:	4770      	bx	lr

08005338 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b098      	sub	sp, #96	@ 0x60
 800533c:	af02      	add	r7, sp, #8
 800533e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2200      	movs	r2, #0
 8005344:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005348:	f7fc fabc 	bl	80018c4 <HAL_GetTick>
 800534c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f003 0308 	and.w	r3, r3, #8
 8005358:	2b08      	cmp	r3, #8
 800535a:	d12e      	bne.n	80053ba <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800535c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005360:	9300      	str	r3, [sp, #0]
 8005362:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005364:	2200      	movs	r2, #0
 8005366:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800536a:	6878      	ldr	r0, [r7, #4]
 800536c:	f000 f88c 	bl	8005488 <UART_WaitOnFlagUntilTimeout>
 8005370:	4603      	mov	r3, r0
 8005372:	2b00      	cmp	r3, #0
 8005374:	d021      	beq.n	80053ba <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800537c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800537e:	e853 3f00 	ldrex	r3, [r3]
 8005382:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005384:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005386:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800538a:	653b      	str	r3, [r7, #80]	@ 0x50
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	461a      	mov	r2, r3
 8005392:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005394:	647b      	str	r3, [r7, #68]	@ 0x44
 8005396:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005398:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800539a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800539c:	e841 2300 	strex	r3, r2, [r1]
 80053a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80053a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d1e6      	bne.n	8005376 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2220      	movs	r2, #32
 80053ac:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2200      	movs	r2, #0
 80053b2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80053b6:	2303      	movs	r3, #3
 80053b8:	e062      	b.n	8005480 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f003 0304 	and.w	r3, r3, #4
 80053c4:	2b04      	cmp	r3, #4
 80053c6:	d149      	bne.n	800545c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80053c8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80053cc:	9300      	str	r3, [sp, #0]
 80053ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80053d0:	2200      	movs	r2, #0
 80053d2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80053d6:	6878      	ldr	r0, [r7, #4]
 80053d8:	f000 f856 	bl	8005488 <UART_WaitOnFlagUntilTimeout>
 80053dc:	4603      	mov	r3, r0
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d03c      	beq.n	800545c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053ea:	e853 3f00 	ldrex	r3, [r3]
 80053ee:	623b      	str	r3, [r7, #32]
   return(result);
 80053f0:	6a3b      	ldr	r3, [r7, #32]
 80053f2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80053f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	461a      	mov	r2, r3
 80053fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005400:	633b      	str	r3, [r7, #48]	@ 0x30
 8005402:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005404:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005406:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005408:	e841 2300 	strex	r3, r2, [r1]
 800540c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800540e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005410:	2b00      	cmp	r3, #0
 8005412:	d1e6      	bne.n	80053e2 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	3308      	adds	r3, #8
 800541a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800541c:	693b      	ldr	r3, [r7, #16]
 800541e:	e853 3f00 	ldrex	r3, [r3]
 8005422:	60fb      	str	r3, [r7, #12]
   return(result);
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	f023 0301 	bic.w	r3, r3, #1
 800542a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	3308      	adds	r3, #8
 8005432:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005434:	61fa      	str	r2, [r7, #28]
 8005436:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005438:	69b9      	ldr	r1, [r7, #24]
 800543a:	69fa      	ldr	r2, [r7, #28]
 800543c:	e841 2300 	strex	r3, r2, [r1]
 8005440:	617b      	str	r3, [r7, #20]
   return(result);
 8005442:	697b      	ldr	r3, [r7, #20]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d1e5      	bne.n	8005414 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2220      	movs	r2, #32
 800544c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2200      	movs	r2, #0
 8005454:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005458:	2303      	movs	r3, #3
 800545a:	e011      	b.n	8005480 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2220      	movs	r2, #32
 8005460:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2220      	movs	r2, #32
 8005466:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2200      	movs	r2, #0
 800546e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2200      	movs	r2, #0
 8005474:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2200      	movs	r2, #0
 800547a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800547e:	2300      	movs	r3, #0
}
 8005480:	4618      	mov	r0, r3
 8005482:	3758      	adds	r7, #88	@ 0x58
 8005484:	46bd      	mov	sp, r7
 8005486:	bd80      	pop	{r7, pc}

08005488 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b084      	sub	sp, #16
 800548c:	af00      	add	r7, sp, #0
 800548e:	60f8      	str	r0, [r7, #12]
 8005490:	60b9      	str	r1, [r7, #8]
 8005492:	603b      	str	r3, [r7, #0]
 8005494:	4613      	mov	r3, r2
 8005496:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005498:	e04f      	b.n	800553a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800549a:	69bb      	ldr	r3, [r7, #24]
 800549c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054a0:	d04b      	beq.n	800553a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054a2:	f7fc fa0f 	bl	80018c4 <HAL_GetTick>
 80054a6:	4602      	mov	r2, r0
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	1ad3      	subs	r3, r2, r3
 80054ac:	69ba      	ldr	r2, [r7, #24]
 80054ae:	429a      	cmp	r2, r3
 80054b0:	d302      	bcc.n	80054b8 <UART_WaitOnFlagUntilTimeout+0x30>
 80054b2:	69bb      	ldr	r3, [r7, #24]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d101      	bne.n	80054bc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80054b8:	2303      	movs	r3, #3
 80054ba:	e04e      	b.n	800555a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f003 0304 	and.w	r3, r3, #4
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d037      	beq.n	800553a <UART_WaitOnFlagUntilTimeout+0xb2>
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	2b80      	cmp	r3, #128	@ 0x80
 80054ce:	d034      	beq.n	800553a <UART_WaitOnFlagUntilTimeout+0xb2>
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	2b40      	cmp	r3, #64	@ 0x40
 80054d4:	d031      	beq.n	800553a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	69db      	ldr	r3, [r3, #28]
 80054dc:	f003 0308 	and.w	r3, r3, #8
 80054e0:	2b08      	cmp	r3, #8
 80054e2:	d110      	bne.n	8005506 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	2208      	movs	r2, #8
 80054ea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80054ec:	68f8      	ldr	r0, [r7, #12]
 80054ee:	f000 f838 	bl	8005562 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	2208      	movs	r2, #8
 80054f6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	2200      	movs	r2, #0
 80054fe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005502:	2301      	movs	r3, #1
 8005504:	e029      	b.n	800555a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	69db      	ldr	r3, [r3, #28]
 800550c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005510:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005514:	d111      	bne.n	800553a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800551e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005520:	68f8      	ldr	r0, [r7, #12]
 8005522:	f000 f81e 	bl	8005562 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	2220      	movs	r2, #32
 800552a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	2200      	movs	r2, #0
 8005532:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005536:	2303      	movs	r3, #3
 8005538:	e00f      	b.n	800555a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	69da      	ldr	r2, [r3, #28]
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	4013      	ands	r3, r2
 8005544:	68ba      	ldr	r2, [r7, #8]
 8005546:	429a      	cmp	r2, r3
 8005548:	bf0c      	ite	eq
 800554a:	2301      	moveq	r3, #1
 800554c:	2300      	movne	r3, #0
 800554e:	b2db      	uxtb	r3, r3
 8005550:	461a      	mov	r2, r3
 8005552:	79fb      	ldrb	r3, [r7, #7]
 8005554:	429a      	cmp	r2, r3
 8005556:	d0a0      	beq.n	800549a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005558:	2300      	movs	r3, #0
}
 800555a:	4618      	mov	r0, r3
 800555c:	3710      	adds	r7, #16
 800555e:	46bd      	mov	sp, r7
 8005560:	bd80      	pop	{r7, pc}

08005562 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005562:	b480      	push	{r7}
 8005564:	b095      	sub	sp, #84	@ 0x54
 8005566:	af00      	add	r7, sp, #0
 8005568:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005570:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005572:	e853 3f00 	ldrex	r3, [r3]
 8005576:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005578:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800557a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800557e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	461a      	mov	r2, r3
 8005586:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005588:	643b      	str	r3, [r7, #64]	@ 0x40
 800558a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800558c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800558e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005590:	e841 2300 	strex	r3, r2, [r1]
 8005594:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005596:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005598:	2b00      	cmp	r3, #0
 800559a:	d1e6      	bne.n	800556a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	3308      	adds	r3, #8
 80055a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055a4:	6a3b      	ldr	r3, [r7, #32]
 80055a6:	e853 3f00 	ldrex	r3, [r3]
 80055aa:	61fb      	str	r3, [r7, #28]
   return(result);
 80055ac:	69fb      	ldr	r3, [r7, #28]
 80055ae:	f023 0301 	bic.w	r3, r3, #1
 80055b2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	3308      	adds	r3, #8
 80055ba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80055bc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80055be:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055c0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80055c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80055c4:	e841 2300 	strex	r3, r2, [r1]
 80055c8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80055ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d1e5      	bne.n	800559c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80055d4:	2b01      	cmp	r3, #1
 80055d6:	d118      	bne.n	800560a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	e853 3f00 	ldrex	r3, [r3]
 80055e4:	60bb      	str	r3, [r7, #8]
   return(result);
 80055e6:	68bb      	ldr	r3, [r7, #8]
 80055e8:	f023 0310 	bic.w	r3, r3, #16
 80055ec:	647b      	str	r3, [r7, #68]	@ 0x44
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	461a      	mov	r2, r3
 80055f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80055f6:	61bb      	str	r3, [r7, #24]
 80055f8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055fa:	6979      	ldr	r1, [r7, #20]
 80055fc:	69ba      	ldr	r2, [r7, #24]
 80055fe:	e841 2300 	strex	r3, r2, [r1]
 8005602:	613b      	str	r3, [r7, #16]
   return(result);
 8005604:	693b      	ldr	r3, [r7, #16]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d1e6      	bne.n	80055d8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2220      	movs	r2, #32
 800560e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2200      	movs	r2, #0
 8005616:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2200      	movs	r2, #0
 800561c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800561e:	bf00      	nop
 8005620:	3754      	adds	r7, #84	@ 0x54
 8005622:	46bd      	mov	sp, r7
 8005624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005628:	4770      	bx	lr

0800562a <__cvt>:
 800562a:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800562e:	ec57 6b10 	vmov	r6, r7, d0
 8005632:	2f00      	cmp	r7, #0
 8005634:	460c      	mov	r4, r1
 8005636:	4619      	mov	r1, r3
 8005638:	463b      	mov	r3, r7
 800563a:	bfbb      	ittet	lt
 800563c:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8005640:	461f      	movlt	r7, r3
 8005642:	2300      	movge	r3, #0
 8005644:	232d      	movlt	r3, #45	@ 0x2d
 8005646:	700b      	strb	r3, [r1, #0]
 8005648:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800564a:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800564e:	4691      	mov	r9, r2
 8005650:	f023 0820 	bic.w	r8, r3, #32
 8005654:	bfbc      	itt	lt
 8005656:	4632      	movlt	r2, r6
 8005658:	4616      	movlt	r6, r2
 800565a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800565e:	d005      	beq.n	800566c <__cvt+0x42>
 8005660:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005664:	d100      	bne.n	8005668 <__cvt+0x3e>
 8005666:	3401      	adds	r4, #1
 8005668:	2102      	movs	r1, #2
 800566a:	e000      	b.n	800566e <__cvt+0x44>
 800566c:	2103      	movs	r1, #3
 800566e:	ab03      	add	r3, sp, #12
 8005670:	9301      	str	r3, [sp, #4]
 8005672:	ab02      	add	r3, sp, #8
 8005674:	9300      	str	r3, [sp, #0]
 8005676:	ec47 6b10 	vmov	d0, r6, r7
 800567a:	4653      	mov	r3, sl
 800567c:	4622      	mov	r2, r4
 800567e:	f001 f873 	bl	8006768 <_dtoa_r>
 8005682:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005686:	4605      	mov	r5, r0
 8005688:	d119      	bne.n	80056be <__cvt+0x94>
 800568a:	f019 0f01 	tst.w	r9, #1
 800568e:	d00e      	beq.n	80056ae <__cvt+0x84>
 8005690:	eb00 0904 	add.w	r9, r0, r4
 8005694:	2200      	movs	r2, #0
 8005696:	2300      	movs	r3, #0
 8005698:	4630      	mov	r0, r6
 800569a:	4639      	mov	r1, r7
 800569c:	f7fb fa14 	bl	8000ac8 <__aeabi_dcmpeq>
 80056a0:	b108      	cbz	r0, 80056a6 <__cvt+0x7c>
 80056a2:	f8cd 900c 	str.w	r9, [sp, #12]
 80056a6:	2230      	movs	r2, #48	@ 0x30
 80056a8:	9b03      	ldr	r3, [sp, #12]
 80056aa:	454b      	cmp	r3, r9
 80056ac:	d31e      	bcc.n	80056ec <__cvt+0xc2>
 80056ae:	9b03      	ldr	r3, [sp, #12]
 80056b0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80056b2:	1b5b      	subs	r3, r3, r5
 80056b4:	4628      	mov	r0, r5
 80056b6:	6013      	str	r3, [r2, #0]
 80056b8:	b004      	add	sp, #16
 80056ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056be:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80056c2:	eb00 0904 	add.w	r9, r0, r4
 80056c6:	d1e5      	bne.n	8005694 <__cvt+0x6a>
 80056c8:	7803      	ldrb	r3, [r0, #0]
 80056ca:	2b30      	cmp	r3, #48	@ 0x30
 80056cc:	d10a      	bne.n	80056e4 <__cvt+0xba>
 80056ce:	2200      	movs	r2, #0
 80056d0:	2300      	movs	r3, #0
 80056d2:	4630      	mov	r0, r6
 80056d4:	4639      	mov	r1, r7
 80056d6:	f7fb f9f7 	bl	8000ac8 <__aeabi_dcmpeq>
 80056da:	b918      	cbnz	r0, 80056e4 <__cvt+0xba>
 80056dc:	f1c4 0401 	rsb	r4, r4, #1
 80056e0:	f8ca 4000 	str.w	r4, [sl]
 80056e4:	f8da 3000 	ldr.w	r3, [sl]
 80056e8:	4499      	add	r9, r3
 80056ea:	e7d3      	b.n	8005694 <__cvt+0x6a>
 80056ec:	1c59      	adds	r1, r3, #1
 80056ee:	9103      	str	r1, [sp, #12]
 80056f0:	701a      	strb	r2, [r3, #0]
 80056f2:	e7d9      	b.n	80056a8 <__cvt+0x7e>

080056f4 <__exponent>:
 80056f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80056f6:	2900      	cmp	r1, #0
 80056f8:	bfba      	itte	lt
 80056fa:	4249      	neglt	r1, r1
 80056fc:	232d      	movlt	r3, #45	@ 0x2d
 80056fe:	232b      	movge	r3, #43	@ 0x2b
 8005700:	2909      	cmp	r1, #9
 8005702:	7002      	strb	r2, [r0, #0]
 8005704:	7043      	strb	r3, [r0, #1]
 8005706:	dd29      	ble.n	800575c <__exponent+0x68>
 8005708:	f10d 0307 	add.w	r3, sp, #7
 800570c:	461d      	mov	r5, r3
 800570e:	270a      	movs	r7, #10
 8005710:	461a      	mov	r2, r3
 8005712:	fbb1 f6f7 	udiv	r6, r1, r7
 8005716:	fb07 1416 	mls	r4, r7, r6, r1
 800571a:	3430      	adds	r4, #48	@ 0x30
 800571c:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005720:	460c      	mov	r4, r1
 8005722:	2c63      	cmp	r4, #99	@ 0x63
 8005724:	f103 33ff 	add.w	r3, r3, #4294967295
 8005728:	4631      	mov	r1, r6
 800572a:	dcf1      	bgt.n	8005710 <__exponent+0x1c>
 800572c:	3130      	adds	r1, #48	@ 0x30
 800572e:	1e94      	subs	r4, r2, #2
 8005730:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005734:	1c41      	adds	r1, r0, #1
 8005736:	4623      	mov	r3, r4
 8005738:	42ab      	cmp	r3, r5
 800573a:	d30a      	bcc.n	8005752 <__exponent+0x5e>
 800573c:	f10d 0309 	add.w	r3, sp, #9
 8005740:	1a9b      	subs	r3, r3, r2
 8005742:	42ac      	cmp	r4, r5
 8005744:	bf88      	it	hi
 8005746:	2300      	movhi	r3, #0
 8005748:	3302      	adds	r3, #2
 800574a:	4403      	add	r3, r0
 800574c:	1a18      	subs	r0, r3, r0
 800574e:	b003      	add	sp, #12
 8005750:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005752:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005756:	f801 6f01 	strb.w	r6, [r1, #1]!
 800575a:	e7ed      	b.n	8005738 <__exponent+0x44>
 800575c:	2330      	movs	r3, #48	@ 0x30
 800575e:	3130      	adds	r1, #48	@ 0x30
 8005760:	7083      	strb	r3, [r0, #2]
 8005762:	70c1      	strb	r1, [r0, #3]
 8005764:	1d03      	adds	r3, r0, #4
 8005766:	e7f1      	b.n	800574c <__exponent+0x58>

08005768 <_printf_float>:
 8005768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800576c:	b08d      	sub	sp, #52	@ 0x34
 800576e:	460c      	mov	r4, r1
 8005770:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8005774:	4616      	mov	r6, r2
 8005776:	461f      	mov	r7, r3
 8005778:	4605      	mov	r5, r0
 800577a:	f000 feef 	bl	800655c <_localeconv_r>
 800577e:	6803      	ldr	r3, [r0, #0]
 8005780:	9304      	str	r3, [sp, #16]
 8005782:	4618      	mov	r0, r3
 8005784:	f7fa fd74 	bl	8000270 <strlen>
 8005788:	2300      	movs	r3, #0
 800578a:	930a      	str	r3, [sp, #40]	@ 0x28
 800578c:	f8d8 3000 	ldr.w	r3, [r8]
 8005790:	9005      	str	r0, [sp, #20]
 8005792:	3307      	adds	r3, #7
 8005794:	f023 0307 	bic.w	r3, r3, #7
 8005798:	f103 0208 	add.w	r2, r3, #8
 800579c:	f894 a018 	ldrb.w	sl, [r4, #24]
 80057a0:	f8d4 b000 	ldr.w	fp, [r4]
 80057a4:	f8c8 2000 	str.w	r2, [r8]
 80057a8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80057ac:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80057b0:	9307      	str	r3, [sp, #28]
 80057b2:	f8cd 8018 	str.w	r8, [sp, #24]
 80057b6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80057ba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80057be:	4b9c      	ldr	r3, [pc, #624]	@ (8005a30 <_printf_float+0x2c8>)
 80057c0:	f04f 32ff 	mov.w	r2, #4294967295
 80057c4:	f7fb f9b2 	bl	8000b2c <__aeabi_dcmpun>
 80057c8:	bb70      	cbnz	r0, 8005828 <_printf_float+0xc0>
 80057ca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80057ce:	4b98      	ldr	r3, [pc, #608]	@ (8005a30 <_printf_float+0x2c8>)
 80057d0:	f04f 32ff 	mov.w	r2, #4294967295
 80057d4:	f7fb f98c 	bl	8000af0 <__aeabi_dcmple>
 80057d8:	bb30      	cbnz	r0, 8005828 <_printf_float+0xc0>
 80057da:	2200      	movs	r2, #0
 80057dc:	2300      	movs	r3, #0
 80057de:	4640      	mov	r0, r8
 80057e0:	4649      	mov	r1, r9
 80057e2:	f7fb f97b 	bl	8000adc <__aeabi_dcmplt>
 80057e6:	b110      	cbz	r0, 80057ee <_printf_float+0x86>
 80057e8:	232d      	movs	r3, #45	@ 0x2d
 80057ea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80057ee:	4a91      	ldr	r2, [pc, #580]	@ (8005a34 <_printf_float+0x2cc>)
 80057f0:	4b91      	ldr	r3, [pc, #580]	@ (8005a38 <_printf_float+0x2d0>)
 80057f2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80057f6:	bf94      	ite	ls
 80057f8:	4690      	movls	r8, r2
 80057fa:	4698      	movhi	r8, r3
 80057fc:	2303      	movs	r3, #3
 80057fe:	6123      	str	r3, [r4, #16]
 8005800:	f02b 0304 	bic.w	r3, fp, #4
 8005804:	6023      	str	r3, [r4, #0]
 8005806:	f04f 0900 	mov.w	r9, #0
 800580a:	9700      	str	r7, [sp, #0]
 800580c:	4633      	mov	r3, r6
 800580e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8005810:	4621      	mov	r1, r4
 8005812:	4628      	mov	r0, r5
 8005814:	f000 f9d2 	bl	8005bbc <_printf_common>
 8005818:	3001      	adds	r0, #1
 800581a:	f040 808d 	bne.w	8005938 <_printf_float+0x1d0>
 800581e:	f04f 30ff 	mov.w	r0, #4294967295
 8005822:	b00d      	add	sp, #52	@ 0x34
 8005824:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005828:	4642      	mov	r2, r8
 800582a:	464b      	mov	r3, r9
 800582c:	4640      	mov	r0, r8
 800582e:	4649      	mov	r1, r9
 8005830:	f7fb f97c 	bl	8000b2c <__aeabi_dcmpun>
 8005834:	b140      	cbz	r0, 8005848 <_printf_float+0xe0>
 8005836:	464b      	mov	r3, r9
 8005838:	2b00      	cmp	r3, #0
 800583a:	bfbc      	itt	lt
 800583c:	232d      	movlt	r3, #45	@ 0x2d
 800583e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005842:	4a7e      	ldr	r2, [pc, #504]	@ (8005a3c <_printf_float+0x2d4>)
 8005844:	4b7e      	ldr	r3, [pc, #504]	@ (8005a40 <_printf_float+0x2d8>)
 8005846:	e7d4      	b.n	80057f2 <_printf_float+0x8a>
 8005848:	6863      	ldr	r3, [r4, #4]
 800584a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800584e:	9206      	str	r2, [sp, #24]
 8005850:	1c5a      	adds	r2, r3, #1
 8005852:	d13b      	bne.n	80058cc <_printf_float+0x164>
 8005854:	2306      	movs	r3, #6
 8005856:	6063      	str	r3, [r4, #4]
 8005858:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800585c:	2300      	movs	r3, #0
 800585e:	6022      	str	r2, [r4, #0]
 8005860:	9303      	str	r3, [sp, #12]
 8005862:	ab0a      	add	r3, sp, #40	@ 0x28
 8005864:	e9cd a301 	strd	sl, r3, [sp, #4]
 8005868:	ab09      	add	r3, sp, #36	@ 0x24
 800586a:	9300      	str	r3, [sp, #0]
 800586c:	6861      	ldr	r1, [r4, #4]
 800586e:	ec49 8b10 	vmov	d0, r8, r9
 8005872:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8005876:	4628      	mov	r0, r5
 8005878:	f7ff fed7 	bl	800562a <__cvt>
 800587c:	9b06      	ldr	r3, [sp, #24]
 800587e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005880:	2b47      	cmp	r3, #71	@ 0x47
 8005882:	4680      	mov	r8, r0
 8005884:	d129      	bne.n	80058da <_printf_float+0x172>
 8005886:	1cc8      	adds	r0, r1, #3
 8005888:	db02      	blt.n	8005890 <_printf_float+0x128>
 800588a:	6863      	ldr	r3, [r4, #4]
 800588c:	4299      	cmp	r1, r3
 800588e:	dd41      	ble.n	8005914 <_printf_float+0x1ac>
 8005890:	f1aa 0a02 	sub.w	sl, sl, #2
 8005894:	fa5f fa8a 	uxtb.w	sl, sl
 8005898:	3901      	subs	r1, #1
 800589a:	4652      	mov	r2, sl
 800589c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80058a0:	9109      	str	r1, [sp, #36]	@ 0x24
 80058a2:	f7ff ff27 	bl	80056f4 <__exponent>
 80058a6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80058a8:	1813      	adds	r3, r2, r0
 80058aa:	2a01      	cmp	r2, #1
 80058ac:	4681      	mov	r9, r0
 80058ae:	6123      	str	r3, [r4, #16]
 80058b0:	dc02      	bgt.n	80058b8 <_printf_float+0x150>
 80058b2:	6822      	ldr	r2, [r4, #0]
 80058b4:	07d2      	lsls	r2, r2, #31
 80058b6:	d501      	bpl.n	80058bc <_printf_float+0x154>
 80058b8:	3301      	adds	r3, #1
 80058ba:	6123      	str	r3, [r4, #16]
 80058bc:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d0a2      	beq.n	800580a <_printf_float+0xa2>
 80058c4:	232d      	movs	r3, #45	@ 0x2d
 80058c6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80058ca:	e79e      	b.n	800580a <_printf_float+0xa2>
 80058cc:	9a06      	ldr	r2, [sp, #24]
 80058ce:	2a47      	cmp	r2, #71	@ 0x47
 80058d0:	d1c2      	bne.n	8005858 <_printf_float+0xf0>
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d1c0      	bne.n	8005858 <_printf_float+0xf0>
 80058d6:	2301      	movs	r3, #1
 80058d8:	e7bd      	b.n	8005856 <_printf_float+0xee>
 80058da:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80058de:	d9db      	bls.n	8005898 <_printf_float+0x130>
 80058e0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80058e4:	d118      	bne.n	8005918 <_printf_float+0x1b0>
 80058e6:	2900      	cmp	r1, #0
 80058e8:	6863      	ldr	r3, [r4, #4]
 80058ea:	dd0b      	ble.n	8005904 <_printf_float+0x19c>
 80058ec:	6121      	str	r1, [r4, #16]
 80058ee:	b913      	cbnz	r3, 80058f6 <_printf_float+0x18e>
 80058f0:	6822      	ldr	r2, [r4, #0]
 80058f2:	07d0      	lsls	r0, r2, #31
 80058f4:	d502      	bpl.n	80058fc <_printf_float+0x194>
 80058f6:	3301      	adds	r3, #1
 80058f8:	440b      	add	r3, r1
 80058fa:	6123      	str	r3, [r4, #16]
 80058fc:	65a1      	str	r1, [r4, #88]	@ 0x58
 80058fe:	f04f 0900 	mov.w	r9, #0
 8005902:	e7db      	b.n	80058bc <_printf_float+0x154>
 8005904:	b913      	cbnz	r3, 800590c <_printf_float+0x1a4>
 8005906:	6822      	ldr	r2, [r4, #0]
 8005908:	07d2      	lsls	r2, r2, #31
 800590a:	d501      	bpl.n	8005910 <_printf_float+0x1a8>
 800590c:	3302      	adds	r3, #2
 800590e:	e7f4      	b.n	80058fa <_printf_float+0x192>
 8005910:	2301      	movs	r3, #1
 8005912:	e7f2      	b.n	80058fa <_printf_float+0x192>
 8005914:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005918:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800591a:	4299      	cmp	r1, r3
 800591c:	db05      	blt.n	800592a <_printf_float+0x1c2>
 800591e:	6823      	ldr	r3, [r4, #0]
 8005920:	6121      	str	r1, [r4, #16]
 8005922:	07d8      	lsls	r0, r3, #31
 8005924:	d5ea      	bpl.n	80058fc <_printf_float+0x194>
 8005926:	1c4b      	adds	r3, r1, #1
 8005928:	e7e7      	b.n	80058fa <_printf_float+0x192>
 800592a:	2900      	cmp	r1, #0
 800592c:	bfd4      	ite	le
 800592e:	f1c1 0202 	rsble	r2, r1, #2
 8005932:	2201      	movgt	r2, #1
 8005934:	4413      	add	r3, r2
 8005936:	e7e0      	b.n	80058fa <_printf_float+0x192>
 8005938:	6823      	ldr	r3, [r4, #0]
 800593a:	055a      	lsls	r2, r3, #21
 800593c:	d407      	bmi.n	800594e <_printf_float+0x1e6>
 800593e:	6923      	ldr	r3, [r4, #16]
 8005940:	4642      	mov	r2, r8
 8005942:	4631      	mov	r1, r6
 8005944:	4628      	mov	r0, r5
 8005946:	47b8      	blx	r7
 8005948:	3001      	adds	r0, #1
 800594a:	d12b      	bne.n	80059a4 <_printf_float+0x23c>
 800594c:	e767      	b.n	800581e <_printf_float+0xb6>
 800594e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005952:	f240 80dd 	bls.w	8005b10 <_printf_float+0x3a8>
 8005956:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800595a:	2200      	movs	r2, #0
 800595c:	2300      	movs	r3, #0
 800595e:	f7fb f8b3 	bl	8000ac8 <__aeabi_dcmpeq>
 8005962:	2800      	cmp	r0, #0
 8005964:	d033      	beq.n	80059ce <_printf_float+0x266>
 8005966:	4a37      	ldr	r2, [pc, #220]	@ (8005a44 <_printf_float+0x2dc>)
 8005968:	2301      	movs	r3, #1
 800596a:	4631      	mov	r1, r6
 800596c:	4628      	mov	r0, r5
 800596e:	47b8      	blx	r7
 8005970:	3001      	adds	r0, #1
 8005972:	f43f af54 	beq.w	800581e <_printf_float+0xb6>
 8005976:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800597a:	4543      	cmp	r3, r8
 800597c:	db02      	blt.n	8005984 <_printf_float+0x21c>
 800597e:	6823      	ldr	r3, [r4, #0]
 8005980:	07d8      	lsls	r0, r3, #31
 8005982:	d50f      	bpl.n	80059a4 <_printf_float+0x23c>
 8005984:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005988:	4631      	mov	r1, r6
 800598a:	4628      	mov	r0, r5
 800598c:	47b8      	blx	r7
 800598e:	3001      	adds	r0, #1
 8005990:	f43f af45 	beq.w	800581e <_printf_float+0xb6>
 8005994:	f04f 0900 	mov.w	r9, #0
 8005998:	f108 38ff 	add.w	r8, r8, #4294967295
 800599c:	f104 0a1a 	add.w	sl, r4, #26
 80059a0:	45c8      	cmp	r8, r9
 80059a2:	dc09      	bgt.n	80059b8 <_printf_float+0x250>
 80059a4:	6823      	ldr	r3, [r4, #0]
 80059a6:	079b      	lsls	r3, r3, #30
 80059a8:	f100 8103 	bmi.w	8005bb2 <_printf_float+0x44a>
 80059ac:	68e0      	ldr	r0, [r4, #12]
 80059ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80059b0:	4298      	cmp	r0, r3
 80059b2:	bfb8      	it	lt
 80059b4:	4618      	movlt	r0, r3
 80059b6:	e734      	b.n	8005822 <_printf_float+0xba>
 80059b8:	2301      	movs	r3, #1
 80059ba:	4652      	mov	r2, sl
 80059bc:	4631      	mov	r1, r6
 80059be:	4628      	mov	r0, r5
 80059c0:	47b8      	blx	r7
 80059c2:	3001      	adds	r0, #1
 80059c4:	f43f af2b 	beq.w	800581e <_printf_float+0xb6>
 80059c8:	f109 0901 	add.w	r9, r9, #1
 80059cc:	e7e8      	b.n	80059a0 <_printf_float+0x238>
 80059ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	dc39      	bgt.n	8005a48 <_printf_float+0x2e0>
 80059d4:	4a1b      	ldr	r2, [pc, #108]	@ (8005a44 <_printf_float+0x2dc>)
 80059d6:	2301      	movs	r3, #1
 80059d8:	4631      	mov	r1, r6
 80059da:	4628      	mov	r0, r5
 80059dc:	47b8      	blx	r7
 80059de:	3001      	adds	r0, #1
 80059e0:	f43f af1d 	beq.w	800581e <_printf_float+0xb6>
 80059e4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80059e8:	ea59 0303 	orrs.w	r3, r9, r3
 80059ec:	d102      	bne.n	80059f4 <_printf_float+0x28c>
 80059ee:	6823      	ldr	r3, [r4, #0]
 80059f0:	07d9      	lsls	r1, r3, #31
 80059f2:	d5d7      	bpl.n	80059a4 <_printf_float+0x23c>
 80059f4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80059f8:	4631      	mov	r1, r6
 80059fa:	4628      	mov	r0, r5
 80059fc:	47b8      	blx	r7
 80059fe:	3001      	adds	r0, #1
 8005a00:	f43f af0d 	beq.w	800581e <_printf_float+0xb6>
 8005a04:	f04f 0a00 	mov.w	sl, #0
 8005a08:	f104 0b1a 	add.w	fp, r4, #26
 8005a0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005a0e:	425b      	negs	r3, r3
 8005a10:	4553      	cmp	r3, sl
 8005a12:	dc01      	bgt.n	8005a18 <_printf_float+0x2b0>
 8005a14:	464b      	mov	r3, r9
 8005a16:	e793      	b.n	8005940 <_printf_float+0x1d8>
 8005a18:	2301      	movs	r3, #1
 8005a1a:	465a      	mov	r2, fp
 8005a1c:	4631      	mov	r1, r6
 8005a1e:	4628      	mov	r0, r5
 8005a20:	47b8      	blx	r7
 8005a22:	3001      	adds	r0, #1
 8005a24:	f43f aefb 	beq.w	800581e <_printf_float+0xb6>
 8005a28:	f10a 0a01 	add.w	sl, sl, #1
 8005a2c:	e7ee      	b.n	8005a0c <_printf_float+0x2a4>
 8005a2e:	bf00      	nop
 8005a30:	7fefffff 	.word	0x7fefffff
 8005a34:	08009d80 	.word	0x08009d80
 8005a38:	08009d84 	.word	0x08009d84
 8005a3c:	08009d88 	.word	0x08009d88
 8005a40:	08009d8c 	.word	0x08009d8c
 8005a44:	08009d90 	.word	0x08009d90
 8005a48:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005a4a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005a4e:	4553      	cmp	r3, sl
 8005a50:	bfa8      	it	ge
 8005a52:	4653      	movge	r3, sl
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	4699      	mov	r9, r3
 8005a58:	dc36      	bgt.n	8005ac8 <_printf_float+0x360>
 8005a5a:	f04f 0b00 	mov.w	fp, #0
 8005a5e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005a62:	f104 021a 	add.w	r2, r4, #26
 8005a66:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005a68:	9306      	str	r3, [sp, #24]
 8005a6a:	eba3 0309 	sub.w	r3, r3, r9
 8005a6e:	455b      	cmp	r3, fp
 8005a70:	dc31      	bgt.n	8005ad6 <_printf_float+0x36e>
 8005a72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005a74:	459a      	cmp	sl, r3
 8005a76:	dc3a      	bgt.n	8005aee <_printf_float+0x386>
 8005a78:	6823      	ldr	r3, [r4, #0]
 8005a7a:	07da      	lsls	r2, r3, #31
 8005a7c:	d437      	bmi.n	8005aee <_printf_float+0x386>
 8005a7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005a80:	ebaa 0903 	sub.w	r9, sl, r3
 8005a84:	9b06      	ldr	r3, [sp, #24]
 8005a86:	ebaa 0303 	sub.w	r3, sl, r3
 8005a8a:	4599      	cmp	r9, r3
 8005a8c:	bfa8      	it	ge
 8005a8e:	4699      	movge	r9, r3
 8005a90:	f1b9 0f00 	cmp.w	r9, #0
 8005a94:	dc33      	bgt.n	8005afe <_printf_float+0x396>
 8005a96:	f04f 0800 	mov.w	r8, #0
 8005a9a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005a9e:	f104 0b1a 	add.w	fp, r4, #26
 8005aa2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005aa4:	ebaa 0303 	sub.w	r3, sl, r3
 8005aa8:	eba3 0309 	sub.w	r3, r3, r9
 8005aac:	4543      	cmp	r3, r8
 8005aae:	f77f af79 	ble.w	80059a4 <_printf_float+0x23c>
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	465a      	mov	r2, fp
 8005ab6:	4631      	mov	r1, r6
 8005ab8:	4628      	mov	r0, r5
 8005aba:	47b8      	blx	r7
 8005abc:	3001      	adds	r0, #1
 8005abe:	f43f aeae 	beq.w	800581e <_printf_float+0xb6>
 8005ac2:	f108 0801 	add.w	r8, r8, #1
 8005ac6:	e7ec      	b.n	8005aa2 <_printf_float+0x33a>
 8005ac8:	4642      	mov	r2, r8
 8005aca:	4631      	mov	r1, r6
 8005acc:	4628      	mov	r0, r5
 8005ace:	47b8      	blx	r7
 8005ad0:	3001      	adds	r0, #1
 8005ad2:	d1c2      	bne.n	8005a5a <_printf_float+0x2f2>
 8005ad4:	e6a3      	b.n	800581e <_printf_float+0xb6>
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	4631      	mov	r1, r6
 8005ada:	4628      	mov	r0, r5
 8005adc:	9206      	str	r2, [sp, #24]
 8005ade:	47b8      	blx	r7
 8005ae0:	3001      	adds	r0, #1
 8005ae2:	f43f ae9c 	beq.w	800581e <_printf_float+0xb6>
 8005ae6:	9a06      	ldr	r2, [sp, #24]
 8005ae8:	f10b 0b01 	add.w	fp, fp, #1
 8005aec:	e7bb      	b.n	8005a66 <_printf_float+0x2fe>
 8005aee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005af2:	4631      	mov	r1, r6
 8005af4:	4628      	mov	r0, r5
 8005af6:	47b8      	blx	r7
 8005af8:	3001      	adds	r0, #1
 8005afa:	d1c0      	bne.n	8005a7e <_printf_float+0x316>
 8005afc:	e68f      	b.n	800581e <_printf_float+0xb6>
 8005afe:	9a06      	ldr	r2, [sp, #24]
 8005b00:	464b      	mov	r3, r9
 8005b02:	4442      	add	r2, r8
 8005b04:	4631      	mov	r1, r6
 8005b06:	4628      	mov	r0, r5
 8005b08:	47b8      	blx	r7
 8005b0a:	3001      	adds	r0, #1
 8005b0c:	d1c3      	bne.n	8005a96 <_printf_float+0x32e>
 8005b0e:	e686      	b.n	800581e <_printf_float+0xb6>
 8005b10:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005b14:	f1ba 0f01 	cmp.w	sl, #1
 8005b18:	dc01      	bgt.n	8005b1e <_printf_float+0x3b6>
 8005b1a:	07db      	lsls	r3, r3, #31
 8005b1c:	d536      	bpl.n	8005b8c <_printf_float+0x424>
 8005b1e:	2301      	movs	r3, #1
 8005b20:	4642      	mov	r2, r8
 8005b22:	4631      	mov	r1, r6
 8005b24:	4628      	mov	r0, r5
 8005b26:	47b8      	blx	r7
 8005b28:	3001      	adds	r0, #1
 8005b2a:	f43f ae78 	beq.w	800581e <_printf_float+0xb6>
 8005b2e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005b32:	4631      	mov	r1, r6
 8005b34:	4628      	mov	r0, r5
 8005b36:	47b8      	blx	r7
 8005b38:	3001      	adds	r0, #1
 8005b3a:	f43f ae70 	beq.w	800581e <_printf_float+0xb6>
 8005b3e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005b42:	2200      	movs	r2, #0
 8005b44:	2300      	movs	r3, #0
 8005b46:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005b4a:	f7fa ffbd 	bl	8000ac8 <__aeabi_dcmpeq>
 8005b4e:	b9c0      	cbnz	r0, 8005b82 <_printf_float+0x41a>
 8005b50:	4653      	mov	r3, sl
 8005b52:	f108 0201 	add.w	r2, r8, #1
 8005b56:	4631      	mov	r1, r6
 8005b58:	4628      	mov	r0, r5
 8005b5a:	47b8      	blx	r7
 8005b5c:	3001      	adds	r0, #1
 8005b5e:	d10c      	bne.n	8005b7a <_printf_float+0x412>
 8005b60:	e65d      	b.n	800581e <_printf_float+0xb6>
 8005b62:	2301      	movs	r3, #1
 8005b64:	465a      	mov	r2, fp
 8005b66:	4631      	mov	r1, r6
 8005b68:	4628      	mov	r0, r5
 8005b6a:	47b8      	blx	r7
 8005b6c:	3001      	adds	r0, #1
 8005b6e:	f43f ae56 	beq.w	800581e <_printf_float+0xb6>
 8005b72:	f108 0801 	add.w	r8, r8, #1
 8005b76:	45d0      	cmp	r8, sl
 8005b78:	dbf3      	blt.n	8005b62 <_printf_float+0x3fa>
 8005b7a:	464b      	mov	r3, r9
 8005b7c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005b80:	e6df      	b.n	8005942 <_printf_float+0x1da>
 8005b82:	f04f 0800 	mov.w	r8, #0
 8005b86:	f104 0b1a 	add.w	fp, r4, #26
 8005b8a:	e7f4      	b.n	8005b76 <_printf_float+0x40e>
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	4642      	mov	r2, r8
 8005b90:	e7e1      	b.n	8005b56 <_printf_float+0x3ee>
 8005b92:	2301      	movs	r3, #1
 8005b94:	464a      	mov	r2, r9
 8005b96:	4631      	mov	r1, r6
 8005b98:	4628      	mov	r0, r5
 8005b9a:	47b8      	blx	r7
 8005b9c:	3001      	adds	r0, #1
 8005b9e:	f43f ae3e 	beq.w	800581e <_printf_float+0xb6>
 8005ba2:	f108 0801 	add.w	r8, r8, #1
 8005ba6:	68e3      	ldr	r3, [r4, #12]
 8005ba8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005baa:	1a5b      	subs	r3, r3, r1
 8005bac:	4543      	cmp	r3, r8
 8005bae:	dcf0      	bgt.n	8005b92 <_printf_float+0x42a>
 8005bb0:	e6fc      	b.n	80059ac <_printf_float+0x244>
 8005bb2:	f04f 0800 	mov.w	r8, #0
 8005bb6:	f104 0919 	add.w	r9, r4, #25
 8005bba:	e7f4      	b.n	8005ba6 <_printf_float+0x43e>

08005bbc <_printf_common>:
 8005bbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005bc0:	4616      	mov	r6, r2
 8005bc2:	4698      	mov	r8, r3
 8005bc4:	688a      	ldr	r2, [r1, #8]
 8005bc6:	690b      	ldr	r3, [r1, #16]
 8005bc8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	bfb8      	it	lt
 8005bd0:	4613      	movlt	r3, r2
 8005bd2:	6033      	str	r3, [r6, #0]
 8005bd4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005bd8:	4607      	mov	r7, r0
 8005bda:	460c      	mov	r4, r1
 8005bdc:	b10a      	cbz	r2, 8005be2 <_printf_common+0x26>
 8005bde:	3301      	adds	r3, #1
 8005be0:	6033      	str	r3, [r6, #0]
 8005be2:	6823      	ldr	r3, [r4, #0]
 8005be4:	0699      	lsls	r1, r3, #26
 8005be6:	bf42      	ittt	mi
 8005be8:	6833      	ldrmi	r3, [r6, #0]
 8005bea:	3302      	addmi	r3, #2
 8005bec:	6033      	strmi	r3, [r6, #0]
 8005bee:	6825      	ldr	r5, [r4, #0]
 8005bf0:	f015 0506 	ands.w	r5, r5, #6
 8005bf4:	d106      	bne.n	8005c04 <_printf_common+0x48>
 8005bf6:	f104 0a19 	add.w	sl, r4, #25
 8005bfa:	68e3      	ldr	r3, [r4, #12]
 8005bfc:	6832      	ldr	r2, [r6, #0]
 8005bfe:	1a9b      	subs	r3, r3, r2
 8005c00:	42ab      	cmp	r3, r5
 8005c02:	dc26      	bgt.n	8005c52 <_printf_common+0x96>
 8005c04:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005c08:	6822      	ldr	r2, [r4, #0]
 8005c0a:	3b00      	subs	r3, #0
 8005c0c:	bf18      	it	ne
 8005c0e:	2301      	movne	r3, #1
 8005c10:	0692      	lsls	r2, r2, #26
 8005c12:	d42b      	bmi.n	8005c6c <_printf_common+0xb0>
 8005c14:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005c18:	4641      	mov	r1, r8
 8005c1a:	4638      	mov	r0, r7
 8005c1c:	47c8      	blx	r9
 8005c1e:	3001      	adds	r0, #1
 8005c20:	d01e      	beq.n	8005c60 <_printf_common+0xa4>
 8005c22:	6823      	ldr	r3, [r4, #0]
 8005c24:	6922      	ldr	r2, [r4, #16]
 8005c26:	f003 0306 	and.w	r3, r3, #6
 8005c2a:	2b04      	cmp	r3, #4
 8005c2c:	bf02      	ittt	eq
 8005c2e:	68e5      	ldreq	r5, [r4, #12]
 8005c30:	6833      	ldreq	r3, [r6, #0]
 8005c32:	1aed      	subeq	r5, r5, r3
 8005c34:	68a3      	ldr	r3, [r4, #8]
 8005c36:	bf0c      	ite	eq
 8005c38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005c3c:	2500      	movne	r5, #0
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	bfc4      	itt	gt
 8005c42:	1a9b      	subgt	r3, r3, r2
 8005c44:	18ed      	addgt	r5, r5, r3
 8005c46:	2600      	movs	r6, #0
 8005c48:	341a      	adds	r4, #26
 8005c4a:	42b5      	cmp	r5, r6
 8005c4c:	d11a      	bne.n	8005c84 <_printf_common+0xc8>
 8005c4e:	2000      	movs	r0, #0
 8005c50:	e008      	b.n	8005c64 <_printf_common+0xa8>
 8005c52:	2301      	movs	r3, #1
 8005c54:	4652      	mov	r2, sl
 8005c56:	4641      	mov	r1, r8
 8005c58:	4638      	mov	r0, r7
 8005c5a:	47c8      	blx	r9
 8005c5c:	3001      	adds	r0, #1
 8005c5e:	d103      	bne.n	8005c68 <_printf_common+0xac>
 8005c60:	f04f 30ff 	mov.w	r0, #4294967295
 8005c64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c68:	3501      	adds	r5, #1
 8005c6a:	e7c6      	b.n	8005bfa <_printf_common+0x3e>
 8005c6c:	18e1      	adds	r1, r4, r3
 8005c6e:	1c5a      	adds	r2, r3, #1
 8005c70:	2030      	movs	r0, #48	@ 0x30
 8005c72:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005c76:	4422      	add	r2, r4
 8005c78:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005c7c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005c80:	3302      	adds	r3, #2
 8005c82:	e7c7      	b.n	8005c14 <_printf_common+0x58>
 8005c84:	2301      	movs	r3, #1
 8005c86:	4622      	mov	r2, r4
 8005c88:	4641      	mov	r1, r8
 8005c8a:	4638      	mov	r0, r7
 8005c8c:	47c8      	blx	r9
 8005c8e:	3001      	adds	r0, #1
 8005c90:	d0e6      	beq.n	8005c60 <_printf_common+0xa4>
 8005c92:	3601      	adds	r6, #1
 8005c94:	e7d9      	b.n	8005c4a <_printf_common+0x8e>
	...

08005c98 <_printf_i>:
 8005c98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005c9c:	7e0f      	ldrb	r7, [r1, #24]
 8005c9e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005ca0:	2f78      	cmp	r7, #120	@ 0x78
 8005ca2:	4691      	mov	r9, r2
 8005ca4:	4680      	mov	r8, r0
 8005ca6:	460c      	mov	r4, r1
 8005ca8:	469a      	mov	sl, r3
 8005caa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005cae:	d807      	bhi.n	8005cc0 <_printf_i+0x28>
 8005cb0:	2f62      	cmp	r7, #98	@ 0x62
 8005cb2:	d80a      	bhi.n	8005cca <_printf_i+0x32>
 8005cb4:	2f00      	cmp	r7, #0
 8005cb6:	f000 80d2 	beq.w	8005e5e <_printf_i+0x1c6>
 8005cba:	2f58      	cmp	r7, #88	@ 0x58
 8005cbc:	f000 80b9 	beq.w	8005e32 <_printf_i+0x19a>
 8005cc0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005cc4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005cc8:	e03a      	b.n	8005d40 <_printf_i+0xa8>
 8005cca:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005cce:	2b15      	cmp	r3, #21
 8005cd0:	d8f6      	bhi.n	8005cc0 <_printf_i+0x28>
 8005cd2:	a101      	add	r1, pc, #4	@ (adr r1, 8005cd8 <_printf_i+0x40>)
 8005cd4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005cd8:	08005d31 	.word	0x08005d31
 8005cdc:	08005d45 	.word	0x08005d45
 8005ce0:	08005cc1 	.word	0x08005cc1
 8005ce4:	08005cc1 	.word	0x08005cc1
 8005ce8:	08005cc1 	.word	0x08005cc1
 8005cec:	08005cc1 	.word	0x08005cc1
 8005cf0:	08005d45 	.word	0x08005d45
 8005cf4:	08005cc1 	.word	0x08005cc1
 8005cf8:	08005cc1 	.word	0x08005cc1
 8005cfc:	08005cc1 	.word	0x08005cc1
 8005d00:	08005cc1 	.word	0x08005cc1
 8005d04:	08005e45 	.word	0x08005e45
 8005d08:	08005d6f 	.word	0x08005d6f
 8005d0c:	08005dff 	.word	0x08005dff
 8005d10:	08005cc1 	.word	0x08005cc1
 8005d14:	08005cc1 	.word	0x08005cc1
 8005d18:	08005e67 	.word	0x08005e67
 8005d1c:	08005cc1 	.word	0x08005cc1
 8005d20:	08005d6f 	.word	0x08005d6f
 8005d24:	08005cc1 	.word	0x08005cc1
 8005d28:	08005cc1 	.word	0x08005cc1
 8005d2c:	08005e07 	.word	0x08005e07
 8005d30:	6833      	ldr	r3, [r6, #0]
 8005d32:	1d1a      	adds	r2, r3, #4
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	6032      	str	r2, [r6, #0]
 8005d38:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005d3c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005d40:	2301      	movs	r3, #1
 8005d42:	e09d      	b.n	8005e80 <_printf_i+0x1e8>
 8005d44:	6833      	ldr	r3, [r6, #0]
 8005d46:	6820      	ldr	r0, [r4, #0]
 8005d48:	1d19      	adds	r1, r3, #4
 8005d4a:	6031      	str	r1, [r6, #0]
 8005d4c:	0606      	lsls	r6, r0, #24
 8005d4e:	d501      	bpl.n	8005d54 <_printf_i+0xbc>
 8005d50:	681d      	ldr	r5, [r3, #0]
 8005d52:	e003      	b.n	8005d5c <_printf_i+0xc4>
 8005d54:	0645      	lsls	r5, r0, #25
 8005d56:	d5fb      	bpl.n	8005d50 <_printf_i+0xb8>
 8005d58:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005d5c:	2d00      	cmp	r5, #0
 8005d5e:	da03      	bge.n	8005d68 <_printf_i+0xd0>
 8005d60:	232d      	movs	r3, #45	@ 0x2d
 8005d62:	426d      	negs	r5, r5
 8005d64:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005d68:	4859      	ldr	r0, [pc, #356]	@ (8005ed0 <_printf_i+0x238>)
 8005d6a:	230a      	movs	r3, #10
 8005d6c:	e011      	b.n	8005d92 <_printf_i+0xfa>
 8005d6e:	6821      	ldr	r1, [r4, #0]
 8005d70:	6833      	ldr	r3, [r6, #0]
 8005d72:	0608      	lsls	r0, r1, #24
 8005d74:	f853 5b04 	ldr.w	r5, [r3], #4
 8005d78:	d402      	bmi.n	8005d80 <_printf_i+0xe8>
 8005d7a:	0649      	lsls	r1, r1, #25
 8005d7c:	bf48      	it	mi
 8005d7e:	b2ad      	uxthmi	r5, r5
 8005d80:	2f6f      	cmp	r7, #111	@ 0x6f
 8005d82:	4853      	ldr	r0, [pc, #332]	@ (8005ed0 <_printf_i+0x238>)
 8005d84:	6033      	str	r3, [r6, #0]
 8005d86:	bf14      	ite	ne
 8005d88:	230a      	movne	r3, #10
 8005d8a:	2308      	moveq	r3, #8
 8005d8c:	2100      	movs	r1, #0
 8005d8e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005d92:	6866      	ldr	r6, [r4, #4]
 8005d94:	60a6      	str	r6, [r4, #8]
 8005d96:	2e00      	cmp	r6, #0
 8005d98:	bfa2      	ittt	ge
 8005d9a:	6821      	ldrge	r1, [r4, #0]
 8005d9c:	f021 0104 	bicge.w	r1, r1, #4
 8005da0:	6021      	strge	r1, [r4, #0]
 8005da2:	b90d      	cbnz	r5, 8005da8 <_printf_i+0x110>
 8005da4:	2e00      	cmp	r6, #0
 8005da6:	d04b      	beq.n	8005e40 <_printf_i+0x1a8>
 8005da8:	4616      	mov	r6, r2
 8005daa:	fbb5 f1f3 	udiv	r1, r5, r3
 8005dae:	fb03 5711 	mls	r7, r3, r1, r5
 8005db2:	5dc7      	ldrb	r7, [r0, r7]
 8005db4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005db8:	462f      	mov	r7, r5
 8005dba:	42bb      	cmp	r3, r7
 8005dbc:	460d      	mov	r5, r1
 8005dbe:	d9f4      	bls.n	8005daa <_printf_i+0x112>
 8005dc0:	2b08      	cmp	r3, #8
 8005dc2:	d10b      	bne.n	8005ddc <_printf_i+0x144>
 8005dc4:	6823      	ldr	r3, [r4, #0]
 8005dc6:	07df      	lsls	r7, r3, #31
 8005dc8:	d508      	bpl.n	8005ddc <_printf_i+0x144>
 8005dca:	6923      	ldr	r3, [r4, #16]
 8005dcc:	6861      	ldr	r1, [r4, #4]
 8005dce:	4299      	cmp	r1, r3
 8005dd0:	bfde      	ittt	le
 8005dd2:	2330      	movle	r3, #48	@ 0x30
 8005dd4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005dd8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005ddc:	1b92      	subs	r2, r2, r6
 8005dde:	6122      	str	r2, [r4, #16]
 8005de0:	f8cd a000 	str.w	sl, [sp]
 8005de4:	464b      	mov	r3, r9
 8005de6:	aa03      	add	r2, sp, #12
 8005de8:	4621      	mov	r1, r4
 8005dea:	4640      	mov	r0, r8
 8005dec:	f7ff fee6 	bl	8005bbc <_printf_common>
 8005df0:	3001      	adds	r0, #1
 8005df2:	d14a      	bne.n	8005e8a <_printf_i+0x1f2>
 8005df4:	f04f 30ff 	mov.w	r0, #4294967295
 8005df8:	b004      	add	sp, #16
 8005dfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005dfe:	6823      	ldr	r3, [r4, #0]
 8005e00:	f043 0320 	orr.w	r3, r3, #32
 8005e04:	6023      	str	r3, [r4, #0]
 8005e06:	4833      	ldr	r0, [pc, #204]	@ (8005ed4 <_printf_i+0x23c>)
 8005e08:	2778      	movs	r7, #120	@ 0x78
 8005e0a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005e0e:	6823      	ldr	r3, [r4, #0]
 8005e10:	6831      	ldr	r1, [r6, #0]
 8005e12:	061f      	lsls	r7, r3, #24
 8005e14:	f851 5b04 	ldr.w	r5, [r1], #4
 8005e18:	d402      	bmi.n	8005e20 <_printf_i+0x188>
 8005e1a:	065f      	lsls	r7, r3, #25
 8005e1c:	bf48      	it	mi
 8005e1e:	b2ad      	uxthmi	r5, r5
 8005e20:	6031      	str	r1, [r6, #0]
 8005e22:	07d9      	lsls	r1, r3, #31
 8005e24:	bf44      	itt	mi
 8005e26:	f043 0320 	orrmi.w	r3, r3, #32
 8005e2a:	6023      	strmi	r3, [r4, #0]
 8005e2c:	b11d      	cbz	r5, 8005e36 <_printf_i+0x19e>
 8005e2e:	2310      	movs	r3, #16
 8005e30:	e7ac      	b.n	8005d8c <_printf_i+0xf4>
 8005e32:	4827      	ldr	r0, [pc, #156]	@ (8005ed0 <_printf_i+0x238>)
 8005e34:	e7e9      	b.n	8005e0a <_printf_i+0x172>
 8005e36:	6823      	ldr	r3, [r4, #0]
 8005e38:	f023 0320 	bic.w	r3, r3, #32
 8005e3c:	6023      	str	r3, [r4, #0]
 8005e3e:	e7f6      	b.n	8005e2e <_printf_i+0x196>
 8005e40:	4616      	mov	r6, r2
 8005e42:	e7bd      	b.n	8005dc0 <_printf_i+0x128>
 8005e44:	6833      	ldr	r3, [r6, #0]
 8005e46:	6825      	ldr	r5, [r4, #0]
 8005e48:	6961      	ldr	r1, [r4, #20]
 8005e4a:	1d18      	adds	r0, r3, #4
 8005e4c:	6030      	str	r0, [r6, #0]
 8005e4e:	062e      	lsls	r6, r5, #24
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	d501      	bpl.n	8005e58 <_printf_i+0x1c0>
 8005e54:	6019      	str	r1, [r3, #0]
 8005e56:	e002      	b.n	8005e5e <_printf_i+0x1c6>
 8005e58:	0668      	lsls	r0, r5, #25
 8005e5a:	d5fb      	bpl.n	8005e54 <_printf_i+0x1bc>
 8005e5c:	8019      	strh	r1, [r3, #0]
 8005e5e:	2300      	movs	r3, #0
 8005e60:	6123      	str	r3, [r4, #16]
 8005e62:	4616      	mov	r6, r2
 8005e64:	e7bc      	b.n	8005de0 <_printf_i+0x148>
 8005e66:	6833      	ldr	r3, [r6, #0]
 8005e68:	1d1a      	adds	r2, r3, #4
 8005e6a:	6032      	str	r2, [r6, #0]
 8005e6c:	681e      	ldr	r6, [r3, #0]
 8005e6e:	6862      	ldr	r2, [r4, #4]
 8005e70:	2100      	movs	r1, #0
 8005e72:	4630      	mov	r0, r6
 8005e74:	f7fa f9ac 	bl	80001d0 <memchr>
 8005e78:	b108      	cbz	r0, 8005e7e <_printf_i+0x1e6>
 8005e7a:	1b80      	subs	r0, r0, r6
 8005e7c:	6060      	str	r0, [r4, #4]
 8005e7e:	6863      	ldr	r3, [r4, #4]
 8005e80:	6123      	str	r3, [r4, #16]
 8005e82:	2300      	movs	r3, #0
 8005e84:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005e88:	e7aa      	b.n	8005de0 <_printf_i+0x148>
 8005e8a:	6923      	ldr	r3, [r4, #16]
 8005e8c:	4632      	mov	r2, r6
 8005e8e:	4649      	mov	r1, r9
 8005e90:	4640      	mov	r0, r8
 8005e92:	47d0      	blx	sl
 8005e94:	3001      	adds	r0, #1
 8005e96:	d0ad      	beq.n	8005df4 <_printf_i+0x15c>
 8005e98:	6823      	ldr	r3, [r4, #0]
 8005e9a:	079b      	lsls	r3, r3, #30
 8005e9c:	d413      	bmi.n	8005ec6 <_printf_i+0x22e>
 8005e9e:	68e0      	ldr	r0, [r4, #12]
 8005ea0:	9b03      	ldr	r3, [sp, #12]
 8005ea2:	4298      	cmp	r0, r3
 8005ea4:	bfb8      	it	lt
 8005ea6:	4618      	movlt	r0, r3
 8005ea8:	e7a6      	b.n	8005df8 <_printf_i+0x160>
 8005eaa:	2301      	movs	r3, #1
 8005eac:	4632      	mov	r2, r6
 8005eae:	4649      	mov	r1, r9
 8005eb0:	4640      	mov	r0, r8
 8005eb2:	47d0      	blx	sl
 8005eb4:	3001      	adds	r0, #1
 8005eb6:	d09d      	beq.n	8005df4 <_printf_i+0x15c>
 8005eb8:	3501      	adds	r5, #1
 8005eba:	68e3      	ldr	r3, [r4, #12]
 8005ebc:	9903      	ldr	r1, [sp, #12]
 8005ebe:	1a5b      	subs	r3, r3, r1
 8005ec0:	42ab      	cmp	r3, r5
 8005ec2:	dcf2      	bgt.n	8005eaa <_printf_i+0x212>
 8005ec4:	e7eb      	b.n	8005e9e <_printf_i+0x206>
 8005ec6:	2500      	movs	r5, #0
 8005ec8:	f104 0619 	add.w	r6, r4, #25
 8005ecc:	e7f5      	b.n	8005eba <_printf_i+0x222>
 8005ece:	bf00      	nop
 8005ed0:	08009d92 	.word	0x08009d92
 8005ed4:	08009da3 	.word	0x08009da3

08005ed8 <_scanf_float>:
 8005ed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005edc:	b087      	sub	sp, #28
 8005ede:	4617      	mov	r7, r2
 8005ee0:	9303      	str	r3, [sp, #12]
 8005ee2:	688b      	ldr	r3, [r1, #8]
 8005ee4:	1e5a      	subs	r2, r3, #1
 8005ee6:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8005eea:	bf81      	itttt	hi
 8005eec:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8005ef0:	eb03 0b05 	addhi.w	fp, r3, r5
 8005ef4:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8005ef8:	608b      	strhi	r3, [r1, #8]
 8005efa:	680b      	ldr	r3, [r1, #0]
 8005efc:	460a      	mov	r2, r1
 8005efe:	f04f 0500 	mov.w	r5, #0
 8005f02:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8005f06:	f842 3b1c 	str.w	r3, [r2], #28
 8005f0a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8005f0e:	4680      	mov	r8, r0
 8005f10:	460c      	mov	r4, r1
 8005f12:	bf98      	it	ls
 8005f14:	f04f 0b00 	movls.w	fp, #0
 8005f18:	9201      	str	r2, [sp, #4]
 8005f1a:	4616      	mov	r6, r2
 8005f1c:	46aa      	mov	sl, r5
 8005f1e:	46a9      	mov	r9, r5
 8005f20:	9502      	str	r5, [sp, #8]
 8005f22:	68a2      	ldr	r2, [r4, #8]
 8005f24:	b152      	cbz	r2, 8005f3c <_scanf_float+0x64>
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	781b      	ldrb	r3, [r3, #0]
 8005f2a:	2b4e      	cmp	r3, #78	@ 0x4e
 8005f2c:	d864      	bhi.n	8005ff8 <_scanf_float+0x120>
 8005f2e:	2b40      	cmp	r3, #64	@ 0x40
 8005f30:	d83c      	bhi.n	8005fac <_scanf_float+0xd4>
 8005f32:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8005f36:	b2c8      	uxtb	r0, r1
 8005f38:	280e      	cmp	r0, #14
 8005f3a:	d93a      	bls.n	8005fb2 <_scanf_float+0xda>
 8005f3c:	f1b9 0f00 	cmp.w	r9, #0
 8005f40:	d003      	beq.n	8005f4a <_scanf_float+0x72>
 8005f42:	6823      	ldr	r3, [r4, #0]
 8005f44:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005f48:	6023      	str	r3, [r4, #0]
 8005f4a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005f4e:	f1ba 0f01 	cmp.w	sl, #1
 8005f52:	f200 8117 	bhi.w	8006184 <_scanf_float+0x2ac>
 8005f56:	9b01      	ldr	r3, [sp, #4]
 8005f58:	429e      	cmp	r6, r3
 8005f5a:	f200 8108 	bhi.w	800616e <_scanf_float+0x296>
 8005f5e:	2001      	movs	r0, #1
 8005f60:	b007      	add	sp, #28
 8005f62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f66:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8005f6a:	2a0d      	cmp	r2, #13
 8005f6c:	d8e6      	bhi.n	8005f3c <_scanf_float+0x64>
 8005f6e:	a101      	add	r1, pc, #4	@ (adr r1, 8005f74 <_scanf_float+0x9c>)
 8005f70:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005f74:	080060bb 	.word	0x080060bb
 8005f78:	08005f3d 	.word	0x08005f3d
 8005f7c:	08005f3d 	.word	0x08005f3d
 8005f80:	08005f3d 	.word	0x08005f3d
 8005f84:	0800611b 	.word	0x0800611b
 8005f88:	080060f3 	.word	0x080060f3
 8005f8c:	08005f3d 	.word	0x08005f3d
 8005f90:	08005f3d 	.word	0x08005f3d
 8005f94:	080060c9 	.word	0x080060c9
 8005f98:	08005f3d 	.word	0x08005f3d
 8005f9c:	08005f3d 	.word	0x08005f3d
 8005fa0:	08005f3d 	.word	0x08005f3d
 8005fa4:	08005f3d 	.word	0x08005f3d
 8005fa8:	08006081 	.word	0x08006081
 8005fac:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8005fb0:	e7db      	b.n	8005f6a <_scanf_float+0x92>
 8005fb2:	290e      	cmp	r1, #14
 8005fb4:	d8c2      	bhi.n	8005f3c <_scanf_float+0x64>
 8005fb6:	a001      	add	r0, pc, #4	@ (adr r0, 8005fbc <_scanf_float+0xe4>)
 8005fb8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005fbc:	08006071 	.word	0x08006071
 8005fc0:	08005f3d 	.word	0x08005f3d
 8005fc4:	08006071 	.word	0x08006071
 8005fc8:	08006107 	.word	0x08006107
 8005fcc:	08005f3d 	.word	0x08005f3d
 8005fd0:	08006019 	.word	0x08006019
 8005fd4:	08006057 	.word	0x08006057
 8005fd8:	08006057 	.word	0x08006057
 8005fdc:	08006057 	.word	0x08006057
 8005fe0:	08006057 	.word	0x08006057
 8005fe4:	08006057 	.word	0x08006057
 8005fe8:	08006057 	.word	0x08006057
 8005fec:	08006057 	.word	0x08006057
 8005ff0:	08006057 	.word	0x08006057
 8005ff4:	08006057 	.word	0x08006057
 8005ff8:	2b6e      	cmp	r3, #110	@ 0x6e
 8005ffa:	d809      	bhi.n	8006010 <_scanf_float+0x138>
 8005ffc:	2b60      	cmp	r3, #96	@ 0x60
 8005ffe:	d8b2      	bhi.n	8005f66 <_scanf_float+0x8e>
 8006000:	2b54      	cmp	r3, #84	@ 0x54
 8006002:	d07b      	beq.n	80060fc <_scanf_float+0x224>
 8006004:	2b59      	cmp	r3, #89	@ 0x59
 8006006:	d199      	bne.n	8005f3c <_scanf_float+0x64>
 8006008:	2d07      	cmp	r5, #7
 800600a:	d197      	bne.n	8005f3c <_scanf_float+0x64>
 800600c:	2508      	movs	r5, #8
 800600e:	e02c      	b.n	800606a <_scanf_float+0x192>
 8006010:	2b74      	cmp	r3, #116	@ 0x74
 8006012:	d073      	beq.n	80060fc <_scanf_float+0x224>
 8006014:	2b79      	cmp	r3, #121	@ 0x79
 8006016:	e7f6      	b.n	8006006 <_scanf_float+0x12e>
 8006018:	6821      	ldr	r1, [r4, #0]
 800601a:	05c8      	lsls	r0, r1, #23
 800601c:	d51b      	bpl.n	8006056 <_scanf_float+0x17e>
 800601e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8006022:	6021      	str	r1, [r4, #0]
 8006024:	f109 0901 	add.w	r9, r9, #1
 8006028:	f1bb 0f00 	cmp.w	fp, #0
 800602c:	d003      	beq.n	8006036 <_scanf_float+0x15e>
 800602e:	3201      	adds	r2, #1
 8006030:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006034:	60a2      	str	r2, [r4, #8]
 8006036:	68a3      	ldr	r3, [r4, #8]
 8006038:	3b01      	subs	r3, #1
 800603a:	60a3      	str	r3, [r4, #8]
 800603c:	6923      	ldr	r3, [r4, #16]
 800603e:	3301      	adds	r3, #1
 8006040:	6123      	str	r3, [r4, #16]
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	3b01      	subs	r3, #1
 8006046:	2b00      	cmp	r3, #0
 8006048:	607b      	str	r3, [r7, #4]
 800604a:	f340 8087 	ble.w	800615c <_scanf_float+0x284>
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	3301      	adds	r3, #1
 8006052:	603b      	str	r3, [r7, #0]
 8006054:	e765      	b.n	8005f22 <_scanf_float+0x4a>
 8006056:	eb1a 0105 	adds.w	r1, sl, r5
 800605a:	f47f af6f 	bne.w	8005f3c <_scanf_float+0x64>
 800605e:	6822      	ldr	r2, [r4, #0]
 8006060:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8006064:	6022      	str	r2, [r4, #0]
 8006066:	460d      	mov	r5, r1
 8006068:	468a      	mov	sl, r1
 800606a:	f806 3b01 	strb.w	r3, [r6], #1
 800606e:	e7e2      	b.n	8006036 <_scanf_float+0x15e>
 8006070:	6822      	ldr	r2, [r4, #0]
 8006072:	0610      	lsls	r0, r2, #24
 8006074:	f57f af62 	bpl.w	8005f3c <_scanf_float+0x64>
 8006078:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800607c:	6022      	str	r2, [r4, #0]
 800607e:	e7f4      	b.n	800606a <_scanf_float+0x192>
 8006080:	f1ba 0f00 	cmp.w	sl, #0
 8006084:	d10e      	bne.n	80060a4 <_scanf_float+0x1cc>
 8006086:	f1b9 0f00 	cmp.w	r9, #0
 800608a:	d10e      	bne.n	80060aa <_scanf_float+0x1d2>
 800608c:	6822      	ldr	r2, [r4, #0]
 800608e:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8006092:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006096:	d108      	bne.n	80060aa <_scanf_float+0x1d2>
 8006098:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800609c:	6022      	str	r2, [r4, #0]
 800609e:	f04f 0a01 	mov.w	sl, #1
 80060a2:	e7e2      	b.n	800606a <_scanf_float+0x192>
 80060a4:	f1ba 0f02 	cmp.w	sl, #2
 80060a8:	d055      	beq.n	8006156 <_scanf_float+0x27e>
 80060aa:	2d01      	cmp	r5, #1
 80060ac:	d002      	beq.n	80060b4 <_scanf_float+0x1dc>
 80060ae:	2d04      	cmp	r5, #4
 80060b0:	f47f af44 	bne.w	8005f3c <_scanf_float+0x64>
 80060b4:	3501      	adds	r5, #1
 80060b6:	b2ed      	uxtb	r5, r5
 80060b8:	e7d7      	b.n	800606a <_scanf_float+0x192>
 80060ba:	f1ba 0f01 	cmp.w	sl, #1
 80060be:	f47f af3d 	bne.w	8005f3c <_scanf_float+0x64>
 80060c2:	f04f 0a02 	mov.w	sl, #2
 80060c6:	e7d0      	b.n	800606a <_scanf_float+0x192>
 80060c8:	b97d      	cbnz	r5, 80060ea <_scanf_float+0x212>
 80060ca:	f1b9 0f00 	cmp.w	r9, #0
 80060ce:	f47f af38 	bne.w	8005f42 <_scanf_float+0x6a>
 80060d2:	6822      	ldr	r2, [r4, #0]
 80060d4:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80060d8:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80060dc:	f040 8108 	bne.w	80062f0 <_scanf_float+0x418>
 80060e0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80060e4:	6022      	str	r2, [r4, #0]
 80060e6:	2501      	movs	r5, #1
 80060e8:	e7bf      	b.n	800606a <_scanf_float+0x192>
 80060ea:	2d03      	cmp	r5, #3
 80060ec:	d0e2      	beq.n	80060b4 <_scanf_float+0x1dc>
 80060ee:	2d05      	cmp	r5, #5
 80060f0:	e7de      	b.n	80060b0 <_scanf_float+0x1d8>
 80060f2:	2d02      	cmp	r5, #2
 80060f4:	f47f af22 	bne.w	8005f3c <_scanf_float+0x64>
 80060f8:	2503      	movs	r5, #3
 80060fa:	e7b6      	b.n	800606a <_scanf_float+0x192>
 80060fc:	2d06      	cmp	r5, #6
 80060fe:	f47f af1d 	bne.w	8005f3c <_scanf_float+0x64>
 8006102:	2507      	movs	r5, #7
 8006104:	e7b1      	b.n	800606a <_scanf_float+0x192>
 8006106:	6822      	ldr	r2, [r4, #0]
 8006108:	0591      	lsls	r1, r2, #22
 800610a:	f57f af17 	bpl.w	8005f3c <_scanf_float+0x64>
 800610e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8006112:	6022      	str	r2, [r4, #0]
 8006114:	f8cd 9008 	str.w	r9, [sp, #8]
 8006118:	e7a7      	b.n	800606a <_scanf_float+0x192>
 800611a:	6822      	ldr	r2, [r4, #0]
 800611c:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8006120:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8006124:	d006      	beq.n	8006134 <_scanf_float+0x25c>
 8006126:	0550      	lsls	r0, r2, #21
 8006128:	f57f af08 	bpl.w	8005f3c <_scanf_float+0x64>
 800612c:	f1b9 0f00 	cmp.w	r9, #0
 8006130:	f000 80de 	beq.w	80062f0 <_scanf_float+0x418>
 8006134:	0591      	lsls	r1, r2, #22
 8006136:	bf58      	it	pl
 8006138:	9902      	ldrpl	r1, [sp, #8]
 800613a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800613e:	bf58      	it	pl
 8006140:	eba9 0101 	subpl.w	r1, r9, r1
 8006144:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8006148:	bf58      	it	pl
 800614a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800614e:	6022      	str	r2, [r4, #0]
 8006150:	f04f 0900 	mov.w	r9, #0
 8006154:	e789      	b.n	800606a <_scanf_float+0x192>
 8006156:	f04f 0a03 	mov.w	sl, #3
 800615a:	e786      	b.n	800606a <_scanf_float+0x192>
 800615c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8006160:	4639      	mov	r1, r7
 8006162:	4640      	mov	r0, r8
 8006164:	4798      	blx	r3
 8006166:	2800      	cmp	r0, #0
 8006168:	f43f aedb 	beq.w	8005f22 <_scanf_float+0x4a>
 800616c:	e6e6      	b.n	8005f3c <_scanf_float+0x64>
 800616e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006172:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006176:	463a      	mov	r2, r7
 8006178:	4640      	mov	r0, r8
 800617a:	4798      	blx	r3
 800617c:	6923      	ldr	r3, [r4, #16]
 800617e:	3b01      	subs	r3, #1
 8006180:	6123      	str	r3, [r4, #16]
 8006182:	e6e8      	b.n	8005f56 <_scanf_float+0x7e>
 8006184:	1e6b      	subs	r3, r5, #1
 8006186:	2b06      	cmp	r3, #6
 8006188:	d824      	bhi.n	80061d4 <_scanf_float+0x2fc>
 800618a:	2d02      	cmp	r5, #2
 800618c:	d836      	bhi.n	80061fc <_scanf_float+0x324>
 800618e:	9b01      	ldr	r3, [sp, #4]
 8006190:	429e      	cmp	r6, r3
 8006192:	f67f aee4 	bls.w	8005f5e <_scanf_float+0x86>
 8006196:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800619a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800619e:	463a      	mov	r2, r7
 80061a0:	4640      	mov	r0, r8
 80061a2:	4798      	blx	r3
 80061a4:	6923      	ldr	r3, [r4, #16]
 80061a6:	3b01      	subs	r3, #1
 80061a8:	6123      	str	r3, [r4, #16]
 80061aa:	e7f0      	b.n	800618e <_scanf_float+0x2b6>
 80061ac:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80061b0:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80061b4:	463a      	mov	r2, r7
 80061b6:	4640      	mov	r0, r8
 80061b8:	4798      	blx	r3
 80061ba:	6923      	ldr	r3, [r4, #16]
 80061bc:	3b01      	subs	r3, #1
 80061be:	6123      	str	r3, [r4, #16]
 80061c0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80061c4:	fa5f fa8a 	uxtb.w	sl, sl
 80061c8:	f1ba 0f02 	cmp.w	sl, #2
 80061cc:	d1ee      	bne.n	80061ac <_scanf_float+0x2d4>
 80061ce:	3d03      	subs	r5, #3
 80061d0:	b2ed      	uxtb	r5, r5
 80061d2:	1b76      	subs	r6, r6, r5
 80061d4:	6823      	ldr	r3, [r4, #0]
 80061d6:	05da      	lsls	r2, r3, #23
 80061d8:	d530      	bpl.n	800623c <_scanf_float+0x364>
 80061da:	055b      	lsls	r3, r3, #21
 80061dc:	d511      	bpl.n	8006202 <_scanf_float+0x32a>
 80061de:	9b01      	ldr	r3, [sp, #4]
 80061e0:	429e      	cmp	r6, r3
 80061e2:	f67f aebc 	bls.w	8005f5e <_scanf_float+0x86>
 80061e6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80061ea:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80061ee:	463a      	mov	r2, r7
 80061f0:	4640      	mov	r0, r8
 80061f2:	4798      	blx	r3
 80061f4:	6923      	ldr	r3, [r4, #16]
 80061f6:	3b01      	subs	r3, #1
 80061f8:	6123      	str	r3, [r4, #16]
 80061fa:	e7f0      	b.n	80061de <_scanf_float+0x306>
 80061fc:	46aa      	mov	sl, r5
 80061fe:	46b3      	mov	fp, r6
 8006200:	e7de      	b.n	80061c0 <_scanf_float+0x2e8>
 8006202:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006206:	6923      	ldr	r3, [r4, #16]
 8006208:	2965      	cmp	r1, #101	@ 0x65
 800620a:	f103 33ff 	add.w	r3, r3, #4294967295
 800620e:	f106 35ff 	add.w	r5, r6, #4294967295
 8006212:	6123      	str	r3, [r4, #16]
 8006214:	d00c      	beq.n	8006230 <_scanf_float+0x358>
 8006216:	2945      	cmp	r1, #69	@ 0x45
 8006218:	d00a      	beq.n	8006230 <_scanf_float+0x358>
 800621a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800621e:	463a      	mov	r2, r7
 8006220:	4640      	mov	r0, r8
 8006222:	4798      	blx	r3
 8006224:	6923      	ldr	r3, [r4, #16]
 8006226:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800622a:	3b01      	subs	r3, #1
 800622c:	1eb5      	subs	r5, r6, #2
 800622e:	6123      	str	r3, [r4, #16]
 8006230:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006234:	463a      	mov	r2, r7
 8006236:	4640      	mov	r0, r8
 8006238:	4798      	blx	r3
 800623a:	462e      	mov	r6, r5
 800623c:	6822      	ldr	r2, [r4, #0]
 800623e:	f012 0210 	ands.w	r2, r2, #16
 8006242:	d001      	beq.n	8006248 <_scanf_float+0x370>
 8006244:	2000      	movs	r0, #0
 8006246:	e68b      	b.n	8005f60 <_scanf_float+0x88>
 8006248:	7032      	strb	r2, [r6, #0]
 800624a:	6823      	ldr	r3, [r4, #0]
 800624c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006250:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006254:	d11c      	bne.n	8006290 <_scanf_float+0x3b8>
 8006256:	9b02      	ldr	r3, [sp, #8]
 8006258:	454b      	cmp	r3, r9
 800625a:	eba3 0209 	sub.w	r2, r3, r9
 800625e:	d123      	bne.n	80062a8 <_scanf_float+0x3d0>
 8006260:	9901      	ldr	r1, [sp, #4]
 8006262:	2200      	movs	r2, #0
 8006264:	4640      	mov	r0, r8
 8006266:	f002 fbf7 	bl	8008a58 <_strtod_r>
 800626a:	9b03      	ldr	r3, [sp, #12]
 800626c:	6821      	ldr	r1, [r4, #0]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f011 0f02 	tst.w	r1, #2
 8006274:	ec57 6b10 	vmov	r6, r7, d0
 8006278:	f103 0204 	add.w	r2, r3, #4
 800627c:	d01f      	beq.n	80062be <_scanf_float+0x3e6>
 800627e:	9903      	ldr	r1, [sp, #12]
 8006280:	600a      	str	r2, [r1, #0]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	e9c3 6700 	strd	r6, r7, [r3]
 8006288:	68e3      	ldr	r3, [r4, #12]
 800628a:	3301      	adds	r3, #1
 800628c:	60e3      	str	r3, [r4, #12]
 800628e:	e7d9      	b.n	8006244 <_scanf_float+0x36c>
 8006290:	9b04      	ldr	r3, [sp, #16]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d0e4      	beq.n	8006260 <_scanf_float+0x388>
 8006296:	9905      	ldr	r1, [sp, #20]
 8006298:	230a      	movs	r3, #10
 800629a:	3101      	adds	r1, #1
 800629c:	4640      	mov	r0, r8
 800629e:	f002 fc5b 	bl	8008b58 <_strtol_r>
 80062a2:	9b04      	ldr	r3, [sp, #16]
 80062a4:	9e05      	ldr	r6, [sp, #20]
 80062a6:	1ac2      	subs	r2, r0, r3
 80062a8:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80062ac:	429e      	cmp	r6, r3
 80062ae:	bf28      	it	cs
 80062b0:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80062b4:	4910      	ldr	r1, [pc, #64]	@ (80062f8 <_scanf_float+0x420>)
 80062b6:	4630      	mov	r0, r6
 80062b8:	f000 f8e4 	bl	8006484 <siprintf>
 80062bc:	e7d0      	b.n	8006260 <_scanf_float+0x388>
 80062be:	f011 0f04 	tst.w	r1, #4
 80062c2:	9903      	ldr	r1, [sp, #12]
 80062c4:	600a      	str	r2, [r1, #0]
 80062c6:	d1dc      	bne.n	8006282 <_scanf_float+0x3aa>
 80062c8:	681d      	ldr	r5, [r3, #0]
 80062ca:	4632      	mov	r2, r6
 80062cc:	463b      	mov	r3, r7
 80062ce:	4630      	mov	r0, r6
 80062d0:	4639      	mov	r1, r7
 80062d2:	f7fa fc2b 	bl	8000b2c <__aeabi_dcmpun>
 80062d6:	b128      	cbz	r0, 80062e4 <_scanf_float+0x40c>
 80062d8:	4808      	ldr	r0, [pc, #32]	@ (80062fc <_scanf_float+0x424>)
 80062da:	f000 f9b7 	bl	800664c <nanf>
 80062de:	ed85 0a00 	vstr	s0, [r5]
 80062e2:	e7d1      	b.n	8006288 <_scanf_float+0x3b0>
 80062e4:	4630      	mov	r0, r6
 80062e6:	4639      	mov	r1, r7
 80062e8:	f7fa fc7e 	bl	8000be8 <__aeabi_d2f>
 80062ec:	6028      	str	r0, [r5, #0]
 80062ee:	e7cb      	b.n	8006288 <_scanf_float+0x3b0>
 80062f0:	f04f 0900 	mov.w	r9, #0
 80062f4:	e629      	b.n	8005f4a <_scanf_float+0x72>
 80062f6:	bf00      	nop
 80062f8:	08009db4 	.word	0x08009db4
 80062fc:	0800a14d 	.word	0x0800a14d

08006300 <std>:
 8006300:	2300      	movs	r3, #0
 8006302:	b510      	push	{r4, lr}
 8006304:	4604      	mov	r4, r0
 8006306:	e9c0 3300 	strd	r3, r3, [r0]
 800630a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800630e:	6083      	str	r3, [r0, #8]
 8006310:	8181      	strh	r1, [r0, #12]
 8006312:	6643      	str	r3, [r0, #100]	@ 0x64
 8006314:	81c2      	strh	r2, [r0, #14]
 8006316:	6183      	str	r3, [r0, #24]
 8006318:	4619      	mov	r1, r3
 800631a:	2208      	movs	r2, #8
 800631c:	305c      	adds	r0, #92	@ 0x5c
 800631e:	f000 f914 	bl	800654a <memset>
 8006322:	4b0d      	ldr	r3, [pc, #52]	@ (8006358 <std+0x58>)
 8006324:	6263      	str	r3, [r4, #36]	@ 0x24
 8006326:	4b0d      	ldr	r3, [pc, #52]	@ (800635c <std+0x5c>)
 8006328:	62a3      	str	r3, [r4, #40]	@ 0x28
 800632a:	4b0d      	ldr	r3, [pc, #52]	@ (8006360 <std+0x60>)
 800632c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800632e:	4b0d      	ldr	r3, [pc, #52]	@ (8006364 <std+0x64>)
 8006330:	6323      	str	r3, [r4, #48]	@ 0x30
 8006332:	4b0d      	ldr	r3, [pc, #52]	@ (8006368 <std+0x68>)
 8006334:	6224      	str	r4, [r4, #32]
 8006336:	429c      	cmp	r4, r3
 8006338:	d006      	beq.n	8006348 <std+0x48>
 800633a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800633e:	4294      	cmp	r4, r2
 8006340:	d002      	beq.n	8006348 <std+0x48>
 8006342:	33d0      	adds	r3, #208	@ 0xd0
 8006344:	429c      	cmp	r4, r3
 8006346:	d105      	bne.n	8006354 <std+0x54>
 8006348:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800634c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006350:	f000 b978 	b.w	8006644 <__retarget_lock_init_recursive>
 8006354:	bd10      	pop	{r4, pc}
 8006356:	bf00      	nop
 8006358:	080064c5 	.word	0x080064c5
 800635c:	080064e7 	.word	0x080064e7
 8006360:	0800651f 	.word	0x0800651f
 8006364:	08006543 	.word	0x08006543
 8006368:	20000308 	.word	0x20000308

0800636c <stdio_exit_handler>:
 800636c:	4a02      	ldr	r2, [pc, #8]	@ (8006378 <stdio_exit_handler+0xc>)
 800636e:	4903      	ldr	r1, [pc, #12]	@ (800637c <stdio_exit_handler+0x10>)
 8006370:	4803      	ldr	r0, [pc, #12]	@ (8006380 <stdio_exit_handler+0x14>)
 8006372:	f000 b869 	b.w	8006448 <_fwalk_sglue>
 8006376:	bf00      	nop
 8006378:	2000000c 	.word	0x2000000c
 800637c:	08008f15 	.word	0x08008f15
 8006380:	2000001c 	.word	0x2000001c

08006384 <cleanup_stdio>:
 8006384:	6841      	ldr	r1, [r0, #4]
 8006386:	4b0c      	ldr	r3, [pc, #48]	@ (80063b8 <cleanup_stdio+0x34>)
 8006388:	4299      	cmp	r1, r3
 800638a:	b510      	push	{r4, lr}
 800638c:	4604      	mov	r4, r0
 800638e:	d001      	beq.n	8006394 <cleanup_stdio+0x10>
 8006390:	f002 fdc0 	bl	8008f14 <_fflush_r>
 8006394:	68a1      	ldr	r1, [r4, #8]
 8006396:	4b09      	ldr	r3, [pc, #36]	@ (80063bc <cleanup_stdio+0x38>)
 8006398:	4299      	cmp	r1, r3
 800639a:	d002      	beq.n	80063a2 <cleanup_stdio+0x1e>
 800639c:	4620      	mov	r0, r4
 800639e:	f002 fdb9 	bl	8008f14 <_fflush_r>
 80063a2:	68e1      	ldr	r1, [r4, #12]
 80063a4:	4b06      	ldr	r3, [pc, #24]	@ (80063c0 <cleanup_stdio+0x3c>)
 80063a6:	4299      	cmp	r1, r3
 80063a8:	d004      	beq.n	80063b4 <cleanup_stdio+0x30>
 80063aa:	4620      	mov	r0, r4
 80063ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80063b0:	f002 bdb0 	b.w	8008f14 <_fflush_r>
 80063b4:	bd10      	pop	{r4, pc}
 80063b6:	bf00      	nop
 80063b8:	20000308 	.word	0x20000308
 80063bc:	20000370 	.word	0x20000370
 80063c0:	200003d8 	.word	0x200003d8

080063c4 <global_stdio_init.part.0>:
 80063c4:	b510      	push	{r4, lr}
 80063c6:	4b0b      	ldr	r3, [pc, #44]	@ (80063f4 <global_stdio_init.part.0+0x30>)
 80063c8:	4c0b      	ldr	r4, [pc, #44]	@ (80063f8 <global_stdio_init.part.0+0x34>)
 80063ca:	4a0c      	ldr	r2, [pc, #48]	@ (80063fc <global_stdio_init.part.0+0x38>)
 80063cc:	601a      	str	r2, [r3, #0]
 80063ce:	4620      	mov	r0, r4
 80063d0:	2200      	movs	r2, #0
 80063d2:	2104      	movs	r1, #4
 80063d4:	f7ff ff94 	bl	8006300 <std>
 80063d8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80063dc:	2201      	movs	r2, #1
 80063de:	2109      	movs	r1, #9
 80063e0:	f7ff ff8e 	bl	8006300 <std>
 80063e4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80063e8:	2202      	movs	r2, #2
 80063ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80063ee:	2112      	movs	r1, #18
 80063f0:	f7ff bf86 	b.w	8006300 <std>
 80063f4:	20000440 	.word	0x20000440
 80063f8:	20000308 	.word	0x20000308
 80063fc:	0800636d 	.word	0x0800636d

08006400 <__sfp_lock_acquire>:
 8006400:	4801      	ldr	r0, [pc, #4]	@ (8006408 <__sfp_lock_acquire+0x8>)
 8006402:	f000 b920 	b.w	8006646 <__retarget_lock_acquire_recursive>
 8006406:	bf00      	nop
 8006408:	20000449 	.word	0x20000449

0800640c <__sfp_lock_release>:
 800640c:	4801      	ldr	r0, [pc, #4]	@ (8006414 <__sfp_lock_release+0x8>)
 800640e:	f000 b91b 	b.w	8006648 <__retarget_lock_release_recursive>
 8006412:	bf00      	nop
 8006414:	20000449 	.word	0x20000449

08006418 <__sinit>:
 8006418:	b510      	push	{r4, lr}
 800641a:	4604      	mov	r4, r0
 800641c:	f7ff fff0 	bl	8006400 <__sfp_lock_acquire>
 8006420:	6a23      	ldr	r3, [r4, #32]
 8006422:	b11b      	cbz	r3, 800642c <__sinit+0x14>
 8006424:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006428:	f7ff bff0 	b.w	800640c <__sfp_lock_release>
 800642c:	4b04      	ldr	r3, [pc, #16]	@ (8006440 <__sinit+0x28>)
 800642e:	6223      	str	r3, [r4, #32]
 8006430:	4b04      	ldr	r3, [pc, #16]	@ (8006444 <__sinit+0x2c>)
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d1f5      	bne.n	8006424 <__sinit+0xc>
 8006438:	f7ff ffc4 	bl	80063c4 <global_stdio_init.part.0>
 800643c:	e7f2      	b.n	8006424 <__sinit+0xc>
 800643e:	bf00      	nop
 8006440:	08006385 	.word	0x08006385
 8006444:	20000440 	.word	0x20000440

08006448 <_fwalk_sglue>:
 8006448:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800644c:	4607      	mov	r7, r0
 800644e:	4688      	mov	r8, r1
 8006450:	4614      	mov	r4, r2
 8006452:	2600      	movs	r6, #0
 8006454:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006458:	f1b9 0901 	subs.w	r9, r9, #1
 800645c:	d505      	bpl.n	800646a <_fwalk_sglue+0x22>
 800645e:	6824      	ldr	r4, [r4, #0]
 8006460:	2c00      	cmp	r4, #0
 8006462:	d1f7      	bne.n	8006454 <_fwalk_sglue+0xc>
 8006464:	4630      	mov	r0, r6
 8006466:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800646a:	89ab      	ldrh	r3, [r5, #12]
 800646c:	2b01      	cmp	r3, #1
 800646e:	d907      	bls.n	8006480 <_fwalk_sglue+0x38>
 8006470:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006474:	3301      	adds	r3, #1
 8006476:	d003      	beq.n	8006480 <_fwalk_sglue+0x38>
 8006478:	4629      	mov	r1, r5
 800647a:	4638      	mov	r0, r7
 800647c:	47c0      	blx	r8
 800647e:	4306      	orrs	r6, r0
 8006480:	3568      	adds	r5, #104	@ 0x68
 8006482:	e7e9      	b.n	8006458 <_fwalk_sglue+0x10>

08006484 <siprintf>:
 8006484:	b40e      	push	{r1, r2, r3}
 8006486:	b500      	push	{lr}
 8006488:	b09c      	sub	sp, #112	@ 0x70
 800648a:	ab1d      	add	r3, sp, #116	@ 0x74
 800648c:	9002      	str	r0, [sp, #8]
 800648e:	9006      	str	r0, [sp, #24]
 8006490:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006494:	4809      	ldr	r0, [pc, #36]	@ (80064bc <siprintf+0x38>)
 8006496:	9107      	str	r1, [sp, #28]
 8006498:	9104      	str	r1, [sp, #16]
 800649a:	4909      	ldr	r1, [pc, #36]	@ (80064c0 <siprintf+0x3c>)
 800649c:	f853 2b04 	ldr.w	r2, [r3], #4
 80064a0:	9105      	str	r1, [sp, #20]
 80064a2:	6800      	ldr	r0, [r0, #0]
 80064a4:	9301      	str	r3, [sp, #4]
 80064a6:	a902      	add	r1, sp, #8
 80064a8:	f002 fbb4 	bl	8008c14 <_svfiprintf_r>
 80064ac:	9b02      	ldr	r3, [sp, #8]
 80064ae:	2200      	movs	r2, #0
 80064b0:	701a      	strb	r2, [r3, #0]
 80064b2:	b01c      	add	sp, #112	@ 0x70
 80064b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80064b8:	b003      	add	sp, #12
 80064ba:	4770      	bx	lr
 80064bc:	20000018 	.word	0x20000018
 80064c0:	ffff0208 	.word	0xffff0208

080064c4 <__sread>:
 80064c4:	b510      	push	{r4, lr}
 80064c6:	460c      	mov	r4, r1
 80064c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064cc:	f000 f86c 	bl	80065a8 <_read_r>
 80064d0:	2800      	cmp	r0, #0
 80064d2:	bfab      	itete	ge
 80064d4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80064d6:	89a3      	ldrhlt	r3, [r4, #12]
 80064d8:	181b      	addge	r3, r3, r0
 80064da:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80064de:	bfac      	ite	ge
 80064e0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80064e2:	81a3      	strhlt	r3, [r4, #12]
 80064e4:	bd10      	pop	{r4, pc}

080064e6 <__swrite>:
 80064e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064ea:	461f      	mov	r7, r3
 80064ec:	898b      	ldrh	r3, [r1, #12]
 80064ee:	05db      	lsls	r3, r3, #23
 80064f0:	4605      	mov	r5, r0
 80064f2:	460c      	mov	r4, r1
 80064f4:	4616      	mov	r6, r2
 80064f6:	d505      	bpl.n	8006504 <__swrite+0x1e>
 80064f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064fc:	2302      	movs	r3, #2
 80064fe:	2200      	movs	r2, #0
 8006500:	f000 f840 	bl	8006584 <_lseek_r>
 8006504:	89a3      	ldrh	r3, [r4, #12]
 8006506:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800650a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800650e:	81a3      	strh	r3, [r4, #12]
 8006510:	4632      	mov	r2, r6
 8006512:	463b      	mov	r3, r7
 8006514:	4628      	mov	r0, r5
 8006516:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800651a:	f000 b857 	b.w	80065cc <_write_r>

0800651e <__sseek>:
 800651e:	b510      	push	{r4, lr}
 8006520:	460c      	mov	r4, r1
 8006522:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006526:	f000 f82d 	bl	8006584 <_lseek_r>
 800652a:	1c43      	adds	r3, r0, #1
 800652c:	89a3      	ldrh	r3, [r4, #12]
 800652e:	bf15      	itete	ne
 8006530:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006532:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006536:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800653a:	81a3      	strheq	r3, [r4, #12]
 800653c:	bf18      	it	ne
 800653e:	81a3      	strhne	r3, [r4, #12]
 8006540:	bd10      	pop	{r4, pc}

08006542 <__sclose>:
 8006542:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006546:	f000 b80d 	b.w	8006564 <_close_r>

0800654a <memset>:
 800654a:	4402      	add	r2, r0
 800654c:	4603      	mov	r3, r0
 800654e:	4293      	cmp	r3, r2
 8006550:	d100      	bne.n	8006554 <memset+0xa>
 8006552:	4770      	bx	lr
 8006554:	f803 1b01 	strb.w	r1, [r3], #1
 8006558:	e7f9      	b.n	800654e <memset+0x4>
	...

0800655c <_localeconv_r>:
 800655c:	4800      	ldr	r0, [pc, #0]	@ (8006560 <_localeconv_r+0x4>)
 800655e:	4770      	bx	lr
 8006560:	20000158 	.word	0x20000158

08006564 <_close_r>:
 8006564:	b538      	push	{r3, r4, r5, lr}
 8006566:	4d06      	ldr	r5, [pc, #24]	@ (8006580 <_close_r+0x1c>)
 8006568:	2300      	movs	r3, #0
 800656a:	4604      	mov	r4, r0
 800656c:	4608      	mov	r0, r1
 800656e:	602b      	str	r3, [r5, #0]
 8006570:	f7fb f891 	bl	8001696 <_close>
 8006574:	1c43      	adds	r3, r0, #1
 8006576:	d102      	bne.n	800657e <_close_r+0x1a>
 8006578:	682b      	ldr	r3, [r5, #0]
 800657a:	b103      	cbz	r3, 800657e <_close_r+0x1a>
 800657c:	6023      	str	r3, [r4, #0]
 800657e:	bd38      	pop	{r3, r4, r5, pc}
 8006580:	20000444 	.word	0x20000444

08006584 <_lseek_r>:
 8006584:	b538      	push	{r3, r4, r5, lr}
 8006586:	4d07      	ldr	r5, [pc, #28]	@ (80065a4 <_lseek_r+0x20>)
 8006588:	4604      	mov	r4, r0
 800658a:	4608      	mov	r0, r1
 800658c:	4611      	mov	r1, r2
 800658e:	2200      	movs	r2, #0
 8006590:	602a      	str	r2, [r5, #0]
 8006592:	461a      	mov	r2, r3
 8006594:	f7fb f8a6 	bl	80016e4 <_lseek>
 8006598:	1c43      	adds	r3, r0, #1
 800659a:	d102      	bne.n	80065a2 <_lseek_r+0x1e>
 800659c:	682b      	ldr	r3, [r5, #0]
 800659e:	b103      	cbz	r3, 80065a2 <_lseek_r+0x1e>
 80065a0:	6023      	str	r3, [r4, #0]
 80065a2:	bd38      	pop	{r3, r4, r5, pc}
 80065a4:	20000444 	.word	0x20000444

080065a8 <_read_r>:
 80065a8:	b538      	push	{r3, r4, r5, lr}
 80065aa:	4d07      	ldr	r5, [pc, #28]	@ (80065c8 <_read_r+0x20>)
 80065ac:	4604      	mov	r4, r0
 80065ae:	4608      	mov	r0, r1
 80065b0:	4611      	mov	r1, r2
 80065b2:	2200      	movs	r2, #0
 80065b4:	602a      	str	r2, [r5, #0]
 80065b6:	461a      	mov	r2, r3
 80065b8:	f7fb f834 	bl	8001624 <_read>
 80065bc:	1c43      	adds	r3, r0, #1
 80065be:	d102      	bne.n	80065c6 <_read_r+0x1e>
 80065c0:	682b      	ldr	r3, [r5, #0]
 80065c2:	b103      	cbz	r3, 80065c6 <_read_r+0x1e>
 80065c4:	6023      	str	r3, [r4, #0]
 80065c6:	bd38      	pop	{r3, r4, r5, pc}
 80065c8:	20000444 	.word	0x20000444

080065cc <_write_r>:
 80065cc:	b538      	push	{r3, r4, r5, lr}
 80065ce:	4d07      	ldr	r5, [pc, #28]	@ (80065ec <_write_r+0x20>)
 80065d0:	4604      	mov	r4, r0
 80065d2:	4608      	mov	r0, r1
 80065d4:	4611      	mov	r1, r2
 80065d6:	2200      	movs	r2, #0
 80065d8:	602a      	str	r2, [r5, #0]
 80065da:	461a      	mov	r2, r3
 80065dc:	f7fb f83f 	bl	800165e <_write>
 80065e0:	1c43      	adds	r3, r0, #1
 80065e2:	d102      	bne.n	80065ea <_write_r+0x1e>
 80065e4:	682b      	ldr	r3, [r5, #0]
 80065e6:	b103      	cbz	r3, 80065ea <_write_r+0x1e>
 80065e8:	6023      	str	r3, [r4, #0]
 80065ea:	bd38      	pop	{r3, r4, r5, pc}
 80065ec:	20000444 	.word	0x20000444

080065f0 <__errno>:
 80065f0:	4b01      	ldr	r3, [pc, #4]	@ (80065f8 <__errno+0x8>)
 80065f2:	6818      	ldr	r0, [r3, #0]
 80065f4:	4770      	bx	lr
 80065f6:	bf00      	nop
 80065f8:	20000018 	.word	0x20000018

080065fc <__libc_init_array>:
 80065fc:	b570      	push	{r4, r5, r6, lr}
 80065fe:	4d0d      	ldr	r5, [pc, #52]	@ (8006634 <__libc_init_array+0x38>)
 8006600:	4c0d      	ldr	r4, [pc, #52]	@ (8006638 <__libc_init_array+0x3c>)
 8006602:	1b64      	subs	r4, r4, r5
 8006604:	10a4      	asrs	r4, r4, #2
 8006606:	2600      	movs	r6, #0
 8006608:	42a6      	cmp	r6, r4
 800660a:	d109      	bne.n	8006620 <__libc_init_array+0x24>
 800660c:	4d0b      	ldr	r5, [pc, #44]	@ (800663c <__libc_init_array+0x40>)
 800660e:	4c0c      	ldr	r4, [pc, #48]	@ (8006640 <__libc_init_array+0x44>)
 8006610:	f003 fb70 	bl	8009cf4 <_init>
 8006614:	1b64      	subs	r4, r4, r5
 8006616:	10a4      	asrs	r4, r4, #2
 8006618:	2600      	movs	r6, #0
 800661a:	42a6      	cmp	r6, r4
 800661c:	d105      	bne.n	800662a <__libc_init_array+0x2e>
 800661e:	bd70      	pop	{r4, r5, r6, pc}
 8006620:	f855 3b04 	ldr.w	r3, [r5], #4
 8006624:	4798      	blx	r3
 8006626:	3601      	adds	r6, #1
 8006628:	e7ee      	b.n	8006608 <__libc_init_array+0xc>
 800662a:	f855 3b04 	ldr.w	r3, [r5], #4
 800662e:	4798      	blx	r3
 8006630:	3601      	adds	r6, #1
 8006632:	e7f2      	b.n	800661a <__libc_init_array+0x1e>
 8006634:	0800a1b8 	.word	0x0800a1b8
 8006638:	0800a1b8 	.word	0x0800a1b8
 800663c:	0800a1b8 	.word	0x0800a1b8
 8006640:	0800a1bc 	.word	0x0800a1bc

08006644 <__retarget_lock_init_recursive>:
 8006644:	4770      	bx	lr

08006646 <__retarget_lock_acquire_recursive>:
 8006646:	4770      	bx	lr

08006648 <__retarget_lock_release_recursive>:
 8006648:	4770      	bx	lr
	...

0800664c <nanf>:
 800664c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8006654 <nanf+0x8>
 8006650:	4770      	bx	lr
 8006652:	bf00      	nop
 8006654:	7fc00000 	.word	0x7fc00000

08006658 <quorem>:
 8006658:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800665c:	6903      	ldr	r3, [r0, #16]
 800665e:	690c      	ldr	r4, [r1, #16]
 8006660:	42a3      	cmp	r3, r4
 8006662:	4607      	mov	r7, r0
 8006664:	db7e      	blt.n	8006764 <quorem+0x10c>
 8006666:	3c01      	subs	r4, #1
 8006668:	f101 0814 	add.w	r8, r1, #20
 800666c:	00a3      	lsls	r3, r4, #2
 800666e:	f100 0514 	add.w	r5, r0, #20
 8006672:	9300      	str	r3, [sp, #0]
 8006674:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006678:	9301      	str	r3, [sp, #4]
 800667a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800667e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006682:	3301      	adds	r3, #1
 8006684:	429a      	cmp	r2, r3
 8006686:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800668a:	fbb2 f6f3 	udiv	r6, r2, r3
 800668e:	d32e      	bcc.n	80066ee <quorem+0x96>
 8006690:	f04f 0a00 	mov.w	sl, #0
 8006694:	46c4      	mov	ip, r8
 8006696:	46ae      	mov	lr, r5
 8006698:	46d3      	mov	fp, sl
 800669a:	f85c 3b04 	ldr.w	r3, [ip], #4
 800669e:	b298      	uxth	r0, r3
 80066a0:	fb06 a000 	mla	r0, r6, r0, sl
 80066a4:	0c02      	lsrs	r2, r0, #16
 80066a6:	0c1b      	lsrs	r3, r3, #16
 80066a8:	fb06 2303 	mla	r3, r6, r3, r2
 80066ac:	f8de 2000 	ldr.w	r2, [lr]
 80066b0:	b280      	uxth	r0, r0
 80066b2:	b292      	uxth	r2, r2
 80066b4:	1a12      	subs	r2, r2, r0
 80066b6:	445a      	add	r2, fp
 80066b8:	f8de 0000 	ldr.w	r0, [lr]
 80066bc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80066c0:	b29b      	uxth	r3, r3
 80066c2:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80066c6:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80066ca:	b292      	uxth	r2, r2
 80066cc:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80066d0:	45e1      	cmp	r9, ip
 80066d2:	f84e 2b04 	str.w	r2, [lr], #4
 80066d6:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80066da:	d2de      	bcs.n	800669a <quorem+0x42>
 80066dc:	9b00      	ldr	r3, [sp, #0]
 80066de:	58eb      	ldr	r3, [r5, r3]
 80066e0:	b92b      	cbnz	r3, 80066ee <quorem+0x96>
 80066e2:	9b01      	ldr	r3, [sp, #4]
 80066e4:	3b04      	subs	r3, #4
 80066e6:	429d      	cmp	r5, r3
 80066e8:	461a      	mov	r2, r3
 80066ea:	d32f      	bcc.n	800674c <quorem+0xf4>
 80066ec:	613c      	str	r4, [r7, #16]
 80066ee:	4638      	mov	r0, r7
 80066f0:	f001 f9c2 	bl	8007a78 <__mcmp>
 80066f4:	2800      	cmp	r0, #0
 80066f6:	db25      	blt.n	8006744 <quorem+0xec>
 80066f8:	4629      	mov	r1, r5
 80066fa:	2000      	movs	r0, #0
 80066fc:	f858 2b04 	ldr.w	r2, [r8], #4
 8006700:	f8d1 c000 	ldr.w	ip, [r1]
 8006704:	fa1f fe82 	uxth.w	lr, r2
 8006708:	fa1f f38c 	uxth.w	r3, ip
 800670c:	eba3 030e 	sub.w	r3, r3, lr
 8006710:	4403      	add	r3, r0
 8006712:	0c12      	lsrs	r2, r2, #16
 8006714:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006718:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800671c:	b29b      	uxth	r3, r3
 800671e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006722:	45c1      	cmp	r9, r8
 8006724:	f841 3b04 	str.w	r3, [r1], #4
 8006728:	ea4f 4022 	mov.w	r0, r2, asr #16
 800672c:	d2e6      	bcs.n	80066fc <quorem+0xa4>
 800672e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006732:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006736:	b922      	cbnz	r2, 8006742 <quorem+0xea>
 8006738:	3b04      	subs	r3, #4
 800673a:	429d      	cmp	r5, r3
 800673c:	461a      	mov	r2, r3
 800673e:	d30b      	bcc.n	8006758 <quorem+0x100>
 8006740:	613c      	str	r4, [r7, #16]
 8006742:	3601      	adds	r6, #1
 8006744:	4630      	mov	r0, r6
 8006746:	b003      	add	sp, #12
 8006748:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800674c:	6812      	ldr	r2, [r2, #0]
 800674e:	3b04      	subs	r3, #4
 8006750:	2a00      	cmp	r2, #0
 8006752:	d1cb      	bne.n	80066ec <quorem+0x94>
 8006754:	3c01      	subs	r4, #1
 8006756:	e7c6      	b.n	80066e6 <quorem+0x8e>
 8006758:	6812      	ldr	r2, [r2, #0]
 800675a:	3b04      	subs	r3, #4
 800675c:	2a00      	cmp	r2, #0
 800675e:	d1ef      	bne.n	8006740 <quorem+0xe8>
 8006760:	3c01      	subs	r4, #1
 8006762:	e7ea      	b.n	800673a <quorem+0xe2>
 8006764:	2000      	movs	r0, #0
 8006766:	e7ee      	b.n	8006746 <quorem+0xee>

08006768 <_dtoa_r>:
 8006768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800676c:	69c7      	ldr	r7, [r0, #28]
 800676e:	b099      	sub	sp, #100	@ 0x64
 8006770:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006774:	ec55 4b10 	vmov	r4, r5, d0
 8006778:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800677a:	9109      	str	r1, [sp, #36]	@ 0x24
 800677c:	4683      	mov	fp, r0
 800677e:	920e      	str	r2, [sp, #56]	@ 0x38
 8006780:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006782:	b97f      	cbnz	r7, 80067a4 <_dtoa_r+0x3c>
 8006784:	2010      	movs	r0, #16
 8006786:	f000 fdfd 	bl	8007384 <malloc>
 800678a:	4602      	mov	r2, r0
 800678c:	f8cb 001c 	str.w	r0, [fp, #28]
 8006790:	b920      	cbnz	r0, 800679c <_dtoa_r+0x34>
 8006792:	4ba7      	ldr	r3, [pc, #668]	@ (8006a30 <_dtoa_r+0x2c8>)
 8006794:	21ef      	movs	r1, #239	@ 0xef
 8006796:	48a7      	ldr	r0, [pc, #668]	@ (8006a34 <_dtoa_r+0x2cc>)
 8006798:	f002 fc36 	bl	8009008 <__assert_func>
 800679c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80067a0:	6007      	str	r7, [r0, #0]
 80067a2:	60c7      	str	r7, [r0, #12]
 80067a4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80067a8:	6819      	ldr	r1, [r3, #0]
 80067aa:	b159      	cbz	r1, 80067c4 <_dtoa_r+0x5c>
 80067ac:	685a      	ldr	r2, [r3, #4]
 80067ae:	604a      	str	r2, [r1, #4]
 80067b0:	2301      	movs	r3, #1
 80067b2:	4093      	lsls	r3, r2
 80067b4:	608b      	str	r3, [r1, #8]
 80067b6:	4658      	mov	r0, fp
 80067b8:	f000 feda 	bl	8007570 <_Bfree>
 80067bc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80067c0:	2200      	movs	r2, #0
 80067c2:	601a      	str	r2, [r3, #0]
 80067c4:	1e2b      	subs	r3, r5, #0
 80067c6:	bfb9      	ittee	lt
 80067c8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80067cc:	9303      	strlt	r3, [sp, #12]
 80067ce:	2300      	movge	r3, #0
 80067d0:	6033      	strge	r3, [r6, #0]
 80067d2:	9f03      	ldr	r7, [sp, #12]
 80067d4:	4b98      	ldr	r3, [pc, #608]	@ (8006a38 <_dtoa_r+0x2d0>)
 80067d6:	bfbc      	itt	lt
 80067d8:	2201      	movlt	r2, #1
 80067da:	6032      	strlt	r2, [r6, #0]
 80067dc:	43bb      	bics	r3, r7
 80067de:	d112      	bne.n	8006806 <_dtoa_r+0x9e>
 80067e0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80067e2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80067e6:	6013      	str	r3, [r2, #0]
 80067e8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80067ec:	4323      	orrs	r3, r4
 80067ee:	f000 854d 	beq.w	800728c <_dtoa_r+0xb24>
 80067f2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80067f4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8006a4c <_dtoa_r+0x2e4>
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	f000 854f 	beq.w	800729c <_dtoa_r+0xb34>
 80067fe:	f10a 0303 	add.w	r3, sl, #3
 8006802:	f000 bd49 	b.w	8007298 <_dtoa_r+0xb30>
 8006806:	ed9d 7b02 	vldr	d7, [sp, #8]
 800680a:	2200      	movs	r2, #0
 800680c:	ec51 0b17 	vmov	r0, r1, d7
 8006810:	2300      	movs	r3, #0
 8006812:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8006816:	f7fa f957 	bl	8000ac8 <__aeabi_dcmpeq>
 800681a:	4680      	mov	r8, r0
 800681c:	b158      	cbz	r0, 8006836 <_dtoa_r+0xce>
 800681e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006820:	2301      	movs	r3, #1
 8006822:	6013      	str	r3, [r2, #0]
 8006824:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006826:	b113      	cbz	r3, 800682e <_dtoa_r+0xc6>
 8006828:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800682a:	4b84      	ldr	r3, [pc, #528]	@ (8006a3c <_dtoa_r+0x2d4>)
 800682c:	6013      	str	r3, [r2, #0]
 800682e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8006a50 <_dtoa_r+0x2e8>
 8006832:	f000 bd33 	b.w	800729c <_dtoa_r+0xb34>
 8006836:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800683a:	aa16      	add	r2, sp, #88	@ 0x58
 800683c:	a917      	add	r1, sp, #92	@ 0x5c
 800683e:	4658      	mov	r0, fp
 8006840:	f001 fa3a 	bl	8007cb8 <__d2b>
 8006844:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006848:	4681      	mov	r9, r0
 800684a:	2e00      	cmp	r6, #0
 800684c:	d077      	beq.n	800693e <_dtoa_r+0x1d6>
 800684e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006850:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8006854:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006858:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800685c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006860:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006864:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006868:	4619      	mov	r1, r3
 800686a:	2200      	movs	r2, #0
 800686c:	4b74      	ldr	r3, [pc, #464]	@ (8006a40 <_dtoa_r+0x2d8>)
 800686e:	f7f9 fd0b 	bl	8000288 <__aeabi_dsub>
 8006872:	a369      	add	r3, pc, #420	@ (adr r3, 8006a18 <_dtoa_r+0x2b0>)
 8006874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006878:	f7f9 febe 	bl	80005f8 <__aeabi_dmul>
 800687c:	a368      	add	r3, pc, #416	@ (adr r3, 8006a20 <_dtoa_r+0x2b8>)
 800687e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006882:	f7f9 fd03 	bl	800028c <__adddf3>
 8006886:	4604      	mov	r4, r0
 8006888:	4630      	mov	r0, r6
 800688a:	460d      	mov	r5, r1
 800688c:	f7f9 fe4a 	bl	8000524 <__aeabi_i2d>
 8006890:	a365      	add	r3, pc, #404	@ (adr r3, 8006a28 <_dtoa_r+0x2c0>)
 8006892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006896:	f7f9 feaf 	bl	80005f8 <__aeabi_dmul>
 800689a:	4602      	mov	r2, r0
 800689c:	460b      	mov	r3, r1
 800689e:	4620      	mov	r0, r4
 80068a0:	4629      	mov	r1, r5
 80068a2:	f7f9 fcf3 	bl	800028c <__adddf3>
 80068a6:	4604      	mov	r4, r0
 80068a8:	460d      	mov	r5, r1
 80068aa:	f7fa f955 	bl	8000b58 <__aeabi_d2iz>
 80068ae:	2200      	movs	r2, #0
 80068b0:	4607      	mov	r7, r0
 80068b2:	2300      	movs	r3, #0
 80068b4:	4620      	mov	r0, r4
 80068b6:	4629      	mov	r1, r5
 80068b8:	f7fa f910 	bl	8000adc <__aeabi_dcmplt>
 80068bc:	b140      	cbz	r0, 80068d0 <_dtoa_r+0x168>
 80068be:	4638      	mov	r0, r7
 80068c0:	f7f9 fe30 	bl	8000524 <__aeabi_i2d>
 80068c4:	4622      	mov	r2, r4
 80068c6:	462b      	mov	r3, r5
 80068c8:	f7fa f8fe 	bl	8000ac8 <__aeabi_dcmpeq>
 80068cc:	b900      	cbnz	r0, 80068d0 <_dtoa_r+0x168>
 80068ce:	3f01      	subs	r7, #1
 80068d0:	2f16      	cmp	r7, #22
 80068d2:	d851      	bhi.n	8006978 <_dtoa_r+0x210>
 80068d4:	4b5b      	ldr	r3, [pc, #364]	@ (8006a44 <_dtoa_r+0x2dc>)
 80068d6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80068da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068de:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80068e2:	f7fa f8fb 	bl	8000adc <__aeabi_dcmplt>
 80068e6:	2800      	cmp	r0, #0
 80068e8:	d048      	beq.n	800697c <_dtoa_r+0x214>
 80068ea:	3f01      	subs	r7, #1
 80068ec:	2300      	movs	r3, #0
 80068ee:	9312      	str	r3, [sp, #72]	@ 0x48
 80068f0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80068f2:	1b9b      	subs	r3, r3, r6
 80068f4:	1e5a      	subs	r2, r3, #1
 80068f6:	bf44      	itt	mi
 80068f8:	f1c3 0801 	rsbmi	r8, r3, #1
 80068fc:	2300      	movmi	r3, #0
 80068fe:	9208      	str	r2, [sp, #32]
 8006900:	bf54      	ite	pl
 8006902:	f04f 0800 	movpl.w	r8, #0
 8006906:	9308      	strmi	r3, [sp, #32]
 8006908:	2f00      	cmp	r7, #0
 800690a:	db39      	blt.n	8006980 <_dtoa_r+0x218>
 800690c:	9b08      	ldr	r3, [sp, #32]
 800690e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8006910:	443b      	add	r3, r7
 8006912:	9308      	str	r3, [sp, #32]
 8006914:	2300      	movs	r3, #0
 8006916:	930a      	str	r3, [sp, #40]	@ 0x28
 8006918:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800691a:	2b09      	cmp	r3, #9
 800691c:	d864      	bhi.n	80069e8 <_dtoa_r+0x280>
 800691e:	2b05      	cmp	r3, #5
 8006920:	bfc4      	itt	gt
 8006922:	3b04      	subgt	r3, #4
 8006924:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8006926:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006928:	f1a3 0302 	sub.w	r3, r3, #2
 800692c:	bfcc      	ite	gt
 800692e:	2400      	movgt	r4, #0
 8006930:	2401      	movle	r4, #1
 8006932:	2b03      	cmp	r3, #3
 8006934:	d863      	bhi.n	80069fe <_dtoa_r+0x296>
 8006936:	e8df f003 	tbb	[pc, r3]
 800693a:	372a      	.short	0x372a
 800693c:	5535      	.short	0x5535
 800693e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8006942:	441e      	add	r6, r3
 8006944:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006948:	2b20      	cmp	r3, #32
 800694a:	bfc1      	itttt	gt
 800694c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006950:	409f      	lslgt	r7, r3
 8006952:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006956:	fa24 f303 	lsrgt.w	r3, r4, r3
 800695a:	bfd6      	itet	le
 800695c:	f1c3 0320 	rsble	r3, r3, #32
 8006960:	ea47 0003 	orrgt.w	r0, r7, r3
 8006964:	fa04 f003 	lslle.w	r0, r4, r3
 8006968:	f7f9 fdcc 	bl	8000504 <__aeabi_ui2d>
 800696c:	2201      	movs	r2, #1
 800696e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006972:	3e01      	subs	r6, #1
 8006974:	9214      	str	r2, [sp, #80]	@ 0x50
 8006976:	e777      	b.n	8006868 <_dtoa_r+0x100>
 8006978:	2301      	movs	r3, #1
 800697a:	e7b8      	b.n	80068ee <_dtoa_r+0x186>
 800697c:	9012      	str	r0, [sp, #72]	@ 0x48
 800697e:	e7b7      	b.n	80068f0 <_dtoa_r+0x188>
 8006980:	427b      	negs	r3, r7
 8006982:	930a      	str	r3, [sp, #40]	@ 0x28
 8006984:	2300      	movs	r3, #0
 8006986:	eba8 0807 	sub.w	r8, r8, r7
 800698a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800698c:	e7c4      	b.n	8006918 <_dtoa_r+0x1b0>
 800698e:	2300      	movs	r3, #0
 8006990:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006992:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006994:	2b00      	cmp	r3, #0
 8006996:	dc35      	bgt.n	8006a04 <_dtoa_r+0x29c>
 8006998:	2301      	movs	r3, #1
 800699a:	9300      	str	r3, [sp, #0]
 800699c:	9307      	str	r3, [sp, #28]
 800699e:	461a      	mov	r2, r3
 80069a0:	920e      	str	r2, [sp, #56]	@ 0x38
 80069a2:	e00b      	b.n	80069bc <_dtoa_r+0x254>
 80069a4:	2301      	movs	r3, #1
 80069a6:	e7f3      	b.n	8006990 <_dtoa_r+0x228>
 80069a8:	2300      	movs	r3, #0
 80069aa:	930b      	str	r3, [sp, #44]	@ 0x2c
 80069ac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80069ae:	18fb      	adds	r3, r7, r3
 80069b0:	9300      	str	r3, [sp, #0]
 80069b2:	3301      	adds	r3, #1
 80069b4:	2b01      	cmp	r3, #1
 80069b6:	9307      	str	r3, [sp, #28]
 80069b8:	bfb8      	it	lt
 80069ba:	2301      	movlt	r3, #1
 80069bc:	f8db 001c 	ldr.w	r0, [fp, #28]
 80069c0:	2100      	movs	r1, #0
 80069c2:	2204      	movs	r2, #4
 80069c4:	f102 0514 	add.w	r5, r2, #20
 80069c8:	429d      	cmp	r5, r3
 80069ca:	d91f      	bls.n	8006a0c <_dtoa_r+0x2a4>
 80069cc:	6041      	str	r1, [r0, #4]
 80069ce:	4658      	mov	r0, fp
 80069d0:	f000 fd8e 	bl	80074f0 <_Balloc>
 80069d4:	4682      	mov	sl, r0
 80069d6:	2800      	cmp	r0, #0
 80069d8:	d13c      	bne.n	8006a54 <_dtoa_r+0x2ec>
 80069da:	4b1b      	ldr	r3, [pc, #108]	@ (8006a48 <_dtoa_r+0x2e0>)
 80069dc:	4602      	mov	r2, r0
 80069de:	f240 11af 	movw	r1, #431	@ 0x1af
 80069e2:	e6d8      	b.n	8006796 <_dtoa_r+0x2e>
 80069e4:	2301      	movs	r3, #1
 80069e6:	e7e0      	b.n	80069aa <_dtoa_r+0x242>
 80069e8:	2401      	movs	r4, #1
 80069ea:	2300      	movs	r3, #0
 80069ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80069ee:	940b      	str	r4, [sp, #44]	@ 0x2c
 80069f0:	f04f 33ff 	mov.w	r3, #4294967295
 80069f4:	9300      	str	r3, [sp, #0]
 80069f6:	9307      	str	r3, [sp, #28]
 80069f8:	2200      	movs	r2, #0
 80069fa:	2312      	movs	r3, #18
 80069fc:	e7d0      	b.n	80069a0 <_dtoa_r+0x238>
 80069fe:	2301      	movs	r3, #1
 8006a00:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006a02:	e7f5      	b.n	80069f0 <_dtoa_r+0x288>
 8006a04:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006a06:	9300      	str	r3, [sp, #0]
 8006a08:	9307      	str	r3, [sp, #28]
 8006a0a:	e7d7      	b.n	80069bc <_dtoa_r+0x254>
 8006a0c:	3101      	adds	r1, #1
 8006a0e:	0052      	lsls	r2, r2, #1
 8006a10:	e7d8      	b.n	80069c4 <_dtoa_r+0x25c>
 8006a12:	bf00      	nop
 8006a14:	f3af 8000 	nop.w
 8006a18:	636f4361 	.word	0x636f4361
 8006a1c:	3fd287a7 	.word	0x3fd287a7
 8006a20:	8b60c8b3 	.word	0x8b60c8b3
 8006a24:	3fc68a28 	.word	0x3fc68a28
 8006a28:	509f79fb 	.word	0x509f79fb
 8006a2c:	3fd34413 	.word	0x3fd34413
 8006a30:	08009dc6 	.word	0x08009dc6
 8006a34:	08009ddd 	.word	0x08009ddd
 8006a38:	7ff00000 	.word	0x7ff00000
 8006a3c:	08009d91 	.word	0x08009d91
 8006a40:	3ff80000 	.word	0x3ff80000
 8006a44:	08009ed8 	.word	0x08009ed8
 8006a48:	08009e35 	.word	0x08009e35
 8006a4c:	08009dc2 	.word	0x08009dc2
 8006a50:	08009d90 	.word	0x08009d90
 8006a54:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006a58:	6018      	str	r0, [r3, #0]
 8006a5a:	9b07      	ldr	r3, [sp, #28]
 8006a5c:	2b0e      	cmp	r3, #14
 8006a5e:	f200 80a4 	bhi.w	8006baa <_dtoa_r+0x442>
 8006a62:	2c00      	cmp	r4, #0
 8006a64:	f000 80a1 	beq.w	8006baa <_dtoa_r+0x442>
 8006a68:	2f00      	cmp	r7, #0
 8006a6a:	dd33      	ble.n	8006ad4 <_dtoa_r+0x36c>
 8006a6c:	4bad      	ldr	r3, [pc, #692]	@ (8006d24 <_dtoa_r+0x5bc>)
 8006a6e:	f007 020f 	and.w	r2, r7, #15
 8006a72:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006a76:	ed93 7b00 	vldr	d7, [r3]
 8006a7a:	05f8      	lsls	r0, r7, #23
 8006a7c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006a80:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006a84:	d516      	bpl.n	8006ab4 <_dtoa_r+0x34c>
 8006a86:	4ba8      	ldr	r3, [pc, #672]	@ (8006d28 <_dtoa_r+0x5c0>)
 8006a88:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006a8c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006a90:	f7f9 fedc 	bl	800084c <__aeabi_ddiv>
 8006a94:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006a98:	f004 040f 	and.w	r4, r4, #15
 8006a9c:	2603      	movs	r6, #3
 8006a9e:	4da2      	ldr	r5, [pc, #648]	@ (8006d28 <_dtoa_r+0x5c0>)
 8006aa0:	b954      	cbnz	r4, 8006ab8 <_dtoa_r+0x350>
 8006aa2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006aa6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006aaa:	f7f9 fecf 	bl	800084c <__aeabi_ddiv>
 8006aae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006ab2:	e028      	b.n	8006b06 <_dtoa_r+0x39e>
 8006ab4:	2602      	movs	r6, #2
 8006ab6:	e7f2      	b.n	8006a9e <_dtoa_r+0x336>
 8006ab8:	07e1      	lsls	r1, r4, #31
 8006aba:	d508      	bpl.n	8006ace <_dtoa_r+0x366>
 8006abc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006ac0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006ac4:	f7f9 fd98 	bl	80005f8 <__aeabi_dmul>
 8006ac8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006acc:	3601      	adds	r6, #1
 8006ace:	1064      	asrs	r4, r4, #1
 8006ad0:	3508      	adds	r5, #8
 8006ad2:	e7e5      	b.n	8006aa0 <_dtoa_r+0x338>
 8006ad4:	f000 80d2 	beq.w	8006c7c <_dtoa_r+0x514>
 8006ad8:	427c      	negs	r4, r7
 8006ada:	4b92      	ldr	r3, [pc, #584]	@ (8006d24 <_dtoa_r+0x5bc>)
 8006adc:	4d92      	ldr	r5, [pc, #584]	@ (8006d28 <_dtoa_r+0x5c0>)
 8006ade:	f004 020f 	and.w	r2, r4, #15
 8006ae2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aea:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006aee:	f7f9 fd83 	bl	80005f8 <__aeabi_dmul>
 8006af2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006af6:	1124      	asrs	r4, r4, #4
 8006af8:	2300      	movs	r3, #0
 8006afa:	2602      	movs	r6, #2
 8006afc:	2c00      	cmp	r4, #0
 8006afe:	f040 80b2 	bne.w	8006c66 <_dtoa_r+0x4fe>
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d1d3      	bne.n	8006aae <_dtoa_r+0x346>
 8006b06:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006b08:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	f000 80b7 	beq.w	8006c80 <_dtoa_r+0x518>
 8006b12:	4b86      	ldr	r3, [pc, #536]	@ (8006d2c <_dtoa_r+0x5c4>)
 8006b14:	2200      	movs	r2, #0
 8006b16:	4620      	mov	r0, r4
 8006b18:	4629      	mov	r1, r5
 8006b1a:	f7f9 ffdf 	bl	8000adc <__aeabi_dcmplt>
 8006b1e:	2800      	cmp	r0, #0
 8006b20:	f000 80ae 	beq.w	8006c80 <_dtoa_r+0x518>
 8006b24:	9b07      	ldr	r3, [sp, #28]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	f000 80aa 	beq.w	8006c80 <_dtoa_r+0x518>
 8006b2c:	9b00      	ldr	r3, [sp, #0]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	dd37      	ble.n	8006ba2 <_dtoa_r+0x43a>
 8006b32:	1e7b      	subs	r3, r7, #1
 8006b34:	9304      	str	r3, [sp, #16]
 8006b36:	4620      	mov	r0, r4
 8006b38:	4b7d      	ldr	r3, [pc, #500]	@ (8006d30 <_dtoa_r+0x5c8>)
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	4629      	mov	r1, r5
 8006b3e:	f7f9 fd5b 	bl	80005f8 <__aeabi_dmul>
 8006b42:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006b46:	9c00      	ldr	r4, [sp, #0]
 8006b48:	3601      	adds	r6, #1
 8006b4a:	4630      	mov	r0, r6
 8006b4c:	f7f9 fcea 	bl	8000524 <__aeabi_i2d>
 8006b50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006b54:	f7f9 fd50 	bl	80005f8 <__aeabi_dmul>
 8006b58:	4b76      	ldr	r3, [pc, #472]	@ (8006d34 <_dtoa_r+0x5cc>)
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	f7f9 fb96 	bl	800028c <__adddf3>
 8006b60:	4605      	mov	r5, r0
 8006b62:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006b66:	2c00      	cmp	r4, #0
 8006b68:	f040 808d 	bne.w	8006c86 <_dtoa_r+0x51e>
 8006b6c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006b70:	4b71      	ldr	r3, [pc, #452]	@ (8006d38 <_dtoa_r+0x5d0>)
 8006b72:	2200      	movs	r2, #0
 8006b74:	f7f9 fb88 	bl	8000288 <__aeabi_dsub>
 8006b78:	4602      	mov	r2, r0
 8006b7a:	460b      	mov	r3, r1
 8006b7c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006b80:	462a      	mov	r2, r5
 8006b82:	4633      	mov	r3, r6
 8006b84:	f7f9 ffc8 	bl	8000b18 <__aeabi_dcmpgt>
 8006b88:	2800      	cmp	r0, #0
 8006b8a:	f040 828b 	bne.w	80070a4 <_dtoa_r+0x93c>
 8006b8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006b92:	462a      	mov	r2, r5
 8006b94:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006b98:	f7f9 ffa0 	bl	8000adc <__aeabi_dcmplt>
 8006b9c:	2800      	cmp	r0, #0
 8006b9e:	f040 8128 	bne.w	8006df2 <_dtoa_r+0x68a>
 8006ba2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8006ba6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8006baa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	f2c0 815a 	blt.w	8006e66 <_dtoa_r+0x6fe>
 8006bb2:	2f0e      	cmp	r7, #14
 8006bb4:	f300 8157 	bgt.w	8006e66 <_dtoa_r+0x6fe>
 8006bb8:	4b5a      	ldr	r3, [pc, #360]	@ (8006d24 <_dtoa_r+0x5bc>)
 8006bba:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006bbe:	ed93 7b00 	vldr	d7, [r3]
 8006bc2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	ed8d 7b00 	vstr	d7, [sp]
 8006bca:	da03      	bge.n	8006bd4 <_dtoa_r+0x46c>
 8006bcc:	9b07      	ldr	r3, [sp, #28]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	f340 8101 	ble.w	8006dd6 <_dtoa_r+0x66e>
 8006bd4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006bd8:	4656      	mov	r6, sl
 8006bda:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006bde:	4620      	mov	r0, r4
 8006be0:	4629      	mov	r1, r5
 8006be2:	f7f9 fe33 	bl	800084c <__aeabi_ddiv>
 8006be6:	f7f9 ffb7 	bl	8000b58 <__aeabi_d2iz>
 8006bea:	4680      	mov	r8, r0
 8006bec:	f7f9 fc9a 	bl	8000524 <__aeabi_i2d>
 8006bf0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006bf4:	f7f9 fd00 	bl	80005f8 <__aeabi_dmul>
 8006bf8:	4602      	mov	r2, r0
 8006bfa:	460b      	mov	r3, r1
 8006bfc:	4620      	mov	r0, r4
 8006bfe:	4629      	mov	r1, r5
 8006c00:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006c04:	f7f9 fb40 	bl	8000288 <__aeabi_dsub>
 8006c08:	f806 4b01 	strb.w	r4, [r6], #1
 8006c0c:	9d07      	ldr	r5, [sp, #28]
 8006c0e:	eba6 040a 	sub.w	r4, r6, sl
 8006c12:	42a5      	cmp	r5, r4
 8006c14:	4602      	mov	r2, r0
 8006c16:	460b      	mov	r3, r1
 8006c18:	f040 8117 	bne.w	8006e4a <_dtoa_r+0x6e2>
 8006c1c:	f7f9 fb36 	bl	800028c <__adddf3>
 8006c20:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006c24:	4604      	mov	r4, r0
 8006c26:	460d      	mov	r5, r1
 8006c28:	f7f9 ff76 	bl	8000b18 <__aeabi_dcmpgt>
 8006c2c:	2800      	cmp	r0, #0
 8006c2e:	f040 80f9 	bne.w	8006e24 <_dtoa_r+0x6bc>
 8006c32:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006c36:	4620      	mov	r0, r4
 8006c38:	4629      	mov	r1, r5
 8006c3a:	f7f9 ff45 	bl	8000ac8 <__aeabi_dcmpeq>
 8006c3e:	b118      	cbz	r0, 8006c48 <_dtoa_r+0x4e0>
 8006c40:	f018 0f01 	tst.w	r8, #1
 8006c44:	f040 80ee 	bne.w	8006e24 <_dtoa_r+0x6bc>
 8006c48:	4649      	mov	r1, r9
 8006c4a:	4658      	mov	r0, fp
 8006c4c:	f000 fc90 	bl	8007570 <_Bfree>
 8006c50:	2300      	movs	r3, #0
 8006c52:	7033      	strb	r3, [r6, #0]
 8006c54:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006c56:	3701      	adds	r7, #1
 8006c58:	601f      	str	r7, [r3, #0]
 8006c5a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	f000 831d 	beq.w	800729c <_dtoa_r+0xb34>
 8006c62:	601e      	str	r6, [r3, #0]
 8006c64:	e31a      	b.n	800729c <_dtoa_r+0xb34>
 8006c66:	07e2      	lsls	r2, r4, #31
 8006c68:	d505      	bpl.n	8006c76 <_dtoa_r+0x50e>
 8006c6a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006c6e:	f7f9 fcc3 	bl	80005f8 <__aeabi_dmul>
 8006c72:	3601      	adds	r6, #1
 8006c74:	2301      	movs	r3, #1
 8006c76:	1064      	asrs	r4, r4, #1
 8006c78:	3508      	adds	r5, #8
 8006c7a:	e73f      	b.n	8006afc <_dtoa_r+0x394>
 8006c7c:	2602      	movs	r6, #2
 8006c7e:	e742      	b.n	8006b06 <_dtoa_r+0x39e>
 8006c80:	9c07      	ldr	r4, [sp, #28]
 8006c82:	9704      	str	r7, [sp, #16]
 8006c84:	e761      	b.n	8006b4a <_dtoa_r+0x3e2>
 8006c86:	4b27      	ldr	r3, [pc, #156]	@ (8006d24 <_dtoa_r+0x5bc>)
 8006c88:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006c8a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006c8e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006c92:	4454      	add	r4, sl
 8006c94:	2900      	cmp	r1, #0
 8006c96:	d053      	beq.n	8006d40 <_dtoa_r+0x5d8>
 8006c98:	4928      	ldr	r1, [pc, #160]	@ (8006d3c <_dtoa_r+0x5d4>)
 8006c9a:	2000      	movs	r0, #0
 8006c9c:	f7f9 fdd6 	bl	800084c <__aeabi_ddiv>
 8006ca0:	4633      	mov	r3, r6
 8006ca2:	462a      	mov	r2, r5
 8006ca4:	f7f9 faf0 	bl	8000288 <__aeabi_dsub>
 8006ca8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006cac:	4656      	mov	r6, sl
 8006cae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006cb2:	f7f9 ff51 	bl	8000b58 <__aeabi_d2iz>
 8006cb6:	4605      	mov	r5, r0
 8006cb8:	f7f9 fc34 	bl	8000524 <__aeabi_i2d>
 8006cbc:	4602      	mov	r2, r0
 8006cbe:	460b      	mov	r3, r1
 8006cc0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006cc4:	f7f9 fae0 	bl	8000288 <__aeabi_dsub>
 8006cc8:	3530      	adds	r5, #48	@ 0x30
 8006cca:	4602      	mov	r2, r0
 8006ccc:	460b      	mov	r3, r1
 8006cce:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006cd2:	f806 5b01 	strb.w	r5, [r6], #1
 8006cd6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006cda:	f7f9 feff 	bl	8000adc <__aeabi_dcmplt>
 8006cde:	2800      	cmp	r0, #0
 8006ce0:	d171      	bne.n	8006dc6 <_dtoa_r+0x65e>
 8006ce2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006ce6:	4911      	ldr	r1, [pc, #68]	@ (8006d2c <_dtoa_r+0x5c4>)
 8006ce8:	2000      	movs	r0, #0
 8006cea:	f7f9 facd 	bl	8000288 <__aeabi_dsub>
 8006cee:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006cf2:	f7f9 fef3 	bl	8000adc <__aeabi_dcmplt>
 8006cf6:	2800      	cmp	r0, #0
 8006cf8:	f040 8095 	bne.w	8006e26 <_dtoa_r+0x6be>
 8006cfc:	42a6      	cmp	r6, r4
 8006cfe:	f43f af50 	beq.w	8006ba2 <_dtoa_r+0x43a>
 8006d02:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006d06:	4b0a      	ldr	r3, [pc, #40]	@ (8006d30 <_dtoa_r+0x5c8>)
 8006d08:	2200      	movs	r2, #0
 8006d0a:	f7f9 fc75 	bl	80005f8 <__aeabi_dmul>
 8006d0e:	4b08      	ldr	r3, [pc, #32]	@ (8006d30 <_dtoa_r+0x5c8>)
 8006d10:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006d14:	2200      	movs	r2, #0
 8006d16:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006d1a:	f7f9 fc6d 	bl	80005f8 <__aeabi_dmul>
 8006d1e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006d22:	e7c4      	b.n	8006cae <_dtoa_r+0x546>
 8006d24:	08009ed8 	.word	0x08009ed8
 8006d28:	08009eb0 	.word	0x08009eb0
 8006d2c:	3ff00000 	.word	0x3ff00000
 8006d30:	40240000 	.word	0x40240000
 8006d34:	401c0000 	.word	0x401c0000
 8006d38:	40140000 	.word	0x40140000
 8006d3c:	3fe00000 	.word	0x3fe00000
 8006d40:	4631      	mov	r1, r6
 8006d42:	4628      	mov	r0, r5
 8006d44:	f7f9 fc58 	bl	80005f8 <__aeabi_dmul>
 8006d48:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006d4c:	9415      	str	r4, [sp, #84]	@ 0x54
 8006d4e:	4656      	mov	r6, sl
 8006d50:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006d54:	f7f9 ff00 	bl	8000b58 <__aeabi_d2iz>
 8006d58:	4605      	mov	r5, r0
 8006d5a:	f7f9 fbe3 	bl	8000524 <__aeabi_i2d>
 8006d5e:	4602      	mov	r2, r0
 8006d60:	460b      	mov	r3, r1
 8006d62:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006d66:	f7f9 fa8f 	bl	8000288 <__aeabi_dsub>
 8006d6a:	3530      	adds	r5, #48	@ 0x30
 8006d6c:	f806 5b01 	strb.w	r5, [r6], #1
 8006d70:	4602      	mov	r2, r0
 8006d72:	460b      	mov	r3, r1
 8006d74:	42a6      	cmp	r6, r4
 8006d76:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006d7a:	f04f 0200 	mov.w	r2, #0
 8006d7e:	d124      	bne.n	8006dca <_dtoa_r+0x662>
 8006d80:	4bac      	ldr	r3, [pc, #688]	@ (8007034 <_dtoa_r+0x8cc>)
 8006d82:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006d86:	f7f9 fa81 	bl	800028c <__adddf3>
 8006d8a:	4602      	mov	r2, r0
 8006d8c:	460b      	mov	r3, r1
 8006d8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006d92:	f7f9 fec1 	bl	8000b18 <__aeabi_dcmpgt>
 8006d96:	2800      	cmp	r0, #0
 8006d98:	d145      	bne.n	8006e26 <_dtoa_r+0x6be>
 8006d9a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006d9e:	49a5      	ldr	r1, [pc, #660]	@ (8007034 <_dtoa_r+0x8cc>)
 8006da0:	2000      	movs	r0, #0
 8006da2:	f7f9 fa71 	bl	8000288 <__aeabi_dsub>
 8006da6:	4602      	mov	r2, r0
 8006da8:	460b      	mov	r3, r1
 8006daa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006dae:	f7f9 fe95 	bl	8000adc <__aeabi_dcmplt>
 8006db2:	2800      	cmp	r0, #0
 8006db4:	f43f aef5 	beq.w	8006ba2 <_dtoa_r+0x43a>
 8006db8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8006dba:	1e73      	subs	r3, r6, #1
 8006dbc:	9315      	str	r3, [sp, #84]	@ 0x54
 8006dbe:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006dc2:	2b30      	cmp	r3, #48	@ 0x30
 8006dc4:	d0f8      	beq.n	8006db8 <_dtoa_r+0x650>
 8006dc6:	9f04      	ldr	r7, [sp, #16]
 8006dc8:	e73e      	b.n	8006c48 <_dtoa_r+0x4e0>
 8006dca:	4b9b      	ldr	r3, [pc, #620]	@ (8007038 <_dtoa_r+0x8d0>)
 8006dcc:	f7f9 fc14 	bl	80005f8 <__aeabi_dmul>
 8006dd0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006dd4:	e7bc      	b.n	8006d50 <_dtoa_r+0x5e8>
 8006dd6:	d10c      	bne.n	8006df2 <_dtoa_r+0x68a>
 8006dd8:	4b98      	ldr	r3, [pc, #608]	@ (800703c <_dtoa_r+0x8d4>)
 8006dda:	2200      	movs	r2, #0
 8006ddc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006de0:	f7f9 fc0a 	bl	80005f8 <__aeabi_dmul>
 8006de4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006de8:	f7f9 fe8c 	bl	8000b04 <__aeabi_dcmpge>
 8006dec:	2800      	cmp	r0, #0
 8006dee:	f000 8157 	beq.w	80070a0 <_dtoa_r+0x938>
 8006df2:	2400      	movs	r4, #0
 8006df4:	4625      	mov	r5, r4
 8006df6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006df8:	43db      	mvns	r3, r3
 8006dfa:	9304      	str	r3, [sp, #16]
 8006dfc:	4656      	mov	r6, sl
 8006dfe:	2700      	movs	r7, #0
 8006e00:	4621      	mov	r1, r4
 8006e02:	4658      	mov	r0, fp
 8006e04:	f000 fbb4 	bl	8007570 <_Bfree>
 8006e08:	2d00      	cmp	r5, #0
 8006e0a:	d0dc      	beq.n	8006dc6 <_dtoa_r+0x65e>
 8006e0c:	b12f      	cbz	r7, 8006e1a <_dtoa_r+0x6b2>
 8006e0e:	42af      	cmp	r7, r5
 8006e10:	d003      	beq.n	8006e1a <_dtoa_r+0x6b2>
 8006e12:	4639      	mov	r1, r7
 8006e14:	4658      	mov	r0, fp
 8006e16:	f000 fbab 	bl	8007570 <_Bfree>
 8006e1a:	4629      	mov	r1, r5
 8006e1c:	4658      	mov	r0, fp
 8006e1e:	f000 fba7 	bl	8007570 <_Bfree>
 8006e22:	e7d0      	b.n	8006dc6 <_dtoa_r+0x65e>
 8006e24:	9704      	str	r7, [sp, #16]
 8006e26:	4633      	mov	r3, r6
 8006e28:	461e      	mov	r6, r3
 8006e2a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006e2e:	2a39      	cmp	r2, #57	@ 0x39
 8006e30:	d107      	bne.n	8006e42 <_dtoa_r+0x6da>
 8006e32:	459a      	cmp	sl, r3
 8006e34:	d1f8      	bne.n	8006e28 <_dtoa_r+0x6c0>
 8006e36:	9a04      	ldr	r2, [sp, #16]
 8006e38:	3201      	adds	r2, #1
 8006e3a:	9204      	str	r2, [sp, #16]
 8006e3c:	2230      	movs	r2, #48	@ 0x30
 8006e3e:	f88a 2000 	strb.w	r2, [sl]
 8006e42:	781a      	ldrb	r2, [r3, #0]
 8006e44:	3201      	adds	r2, #1
 8006e46:	701a      	strb	r2, [r3, #0]
 8006e48:	e7bd      	b.n	8006dc6 <_dtoa_r+0x65e>
 8006e4a:	4b7b      	ldr	r3, [pc, #492]	@ (8007038 <_dtoa_r+0x8d0>)
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	f7f9 fbd3 	bl	80005f8 <__aeabi_dmul>
 8006e52:	2200      	movs	r2, #0
 8006e54:	2300      	movs	r3, #0
 8006e56:	4604      	mov	r4, r0
 8006e58:	460d      	mov	r5, r1
 8006e5a:	f7f9 fe35 	bl	8000ac8 <__aeabi_dcmpeq>
 8006e5e:	2800      	cmp	r0, #0
 8006e60:	f43f aebb 	beq.w	8006bda <_dtoa_r+0x472>
 8006e64:	e6f0      	b.n	8006c48 <_dtoa_r+0x4e0>
 8006e66:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006e68:	2a00      	cmp	r2, #0
 8006e6a:	f000 80db 	beq.w	8007024 <_dtoa_r+0x8bc>
 8006e6e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006e70:	2a01      	cmp	r2, #1
 8006e72:	f300 80bf 	bgt.w	8006ff4 <_dtoa_r+0x88c>
 8006e76:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8006e78:	2a00      	cmp	r2, #0
 8006e7a:	f000 80b7 	beq.w	8006fec <_dtoa_r+0x884>
 8006e7e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006e82:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006e84:	4646      	mov	r6, r8
 8006e86:	9a08      	ldr	r2, [sp, #32]
 8006e88:	2101      	movs	r1, #1
 8006e8a:	441a      	add	r2, r3
 8006e8c:	4658      	mov	r0, fp
 8006e8e:	4498      	add	r8, r3
 8006e90:	9208      	str	r2, [sp, #32]
 8006e92:	f000 fc6b 	bl	800776c <__i2b>
 8006e96:	4605      	mov	r5, r0
 8006e98:	b15e      	cbz	r6, 8006eb2 <_dtoa_r+0x74a>
 8006e9a:	9b08      	ldr	r3, [sp, #32]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	dd08      	ble.n	8006eb2 <_dtoa_r+0x74a>
 8006ea0:	42b3      	cmp	r3, r6
 8006ea2:	9a08      	ldr	r2, [sp, #32]
 8006ea4:	bfa8      	it	ge
 8006ea6:	4633      	movge	r3, r6
 8006ea8:	eba8 0803 	sub.w	r8, r8, r3
 8006eac:	1af6      	subs	r6, r6, r3
 8006eae:	1ad3      	subs	r3, r2, r3
 8006eb0:	9308      	str	r3, [sp, #32]
 8006eb2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006eb4:	b1f3      	cbz	r3, 8006ef4 <_dtoa_r+0x78c>
 8006eb6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	f000 80b7 	beq.w	800702c <_dtoa_r+0x8c4>
 8006ebe:	b18c      	cbz	r4, 8006ee4 <_dtoa_r+0x77c>
 8006ec0:	4629      	mov	r1, r5
 8006ec2:	4622      	mov	r2, r4
 8006ec4:	4658      	mov	r0, fp
 8006ec6:	f000 fd11 	bl	80078ec <__pow5mult>
 8006eca:	464a      	mov	r2, r9
 8006ecc:	4601      	mov	r1, r0
 8006ece:	4605      	mov	r5, r0
 8006ed0:	4658      	mov	r0, fp
 8006ed2:	f000 fc61 	bl	8007798 <__multiply>
 8006ed6:	4649      	mov	r1, r9
 8006ed8:	9004      	str	r0, [sp, #16]
 8006eda:	4658      	mov	r0, fp
 8006edc:	f000 fb48 	bl	8007570 <_Bfree>
 8006ee0:	9b04      	ldr	r3, [sp, #16]
 8006ee2:	4699      	mov	r9, r3
 8006ee4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006ee6:	1b1a      	subs	r2, r3, r4
 8006ee8:	d004      	beq.n	8006ef4 <_dtoa_r+0x78c>
 8006eea:	4649      	mov	r1, r9
 8006eec:	4658      	mov	r0, fp
 8006eee:	f000 fcfd 	bl	80078ec <__pow5mult>
 8006ef2:	4681      	mov	r9, r0
 8006ef4:	2101      	movs	r1, #1
 8006ef6:	4658      	mov	r0, fp
 8006ef8:	f000 fc38 	bl	800776c <__i2b>
 8006efc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006efe:	4604      	mov	r4, r0
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	f000 81cf 	beq.w	80072a4 <_dtoa_r+0xb3c>
 8006f06:	461a      	mov	r2, r3
 8006f08:	4601      	mov	r1, r0
 8006f0a:	4658      	mov	r0, fp
 8006f0c:	f000 fcee 	bl	80078ec <__pow5mult>
 8006f10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f12:	2b01      	cmp	r3, #1
 8006f14:	4604      	mov	r4, r0
 8006f16:	f300 8095 	bgt.w	8007044 <_dtoa_r+0x8dc>
 8006f1a:	9b02      	ldr	r3, [sp, #8]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	f040 8087 	bne.w	8007030 <_dtoa_r+0x8c8>
 8006f22:	9b03      	ldr	r3, [sp, #12]
 8006f24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	f040 8089 	bne.w	8007040 <_dtoa_r+0x8d8>
 8006f2e:	9b03      	ldr	r3, [sp, #12]
 8006f30:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006f34:	0d1b      	lsrs	r3, r3, #20
 8006f36:	051b      	lsls	r3, r3, #20
 8006f38:	b12b      	cbz	r3, 8006f46 <_dtoa_r+0x7de>
 8006f3a:	9b08      	ldr	r3, [sp, #32]
 8006f3c:	3301      	adds	r3, #1
 8006f3e:	9308      	str	r3, [sp, #32]
 8006f40:	f108 0801 	add.w	r8, r8, #1
 8006f44:	2301      	movs	r3, #1
 8006f46:	930a      	str	r3, [sp, #40]	@ 0x28
 8006f48:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	f000 81b0 	beq.w	80072b0 <_dtoa_r+0xb48>
 8006f50:	6923      	ldr	r3, [r4, #16]
 8006f52:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006f56:	6918      	ldr	r0, [r3, #16]
 8006f58:	f000 fbbc 	bl	80076d4 <__hi0bits>
 8006f5c:	f1c0 0020 	rsb	r0, r0, #32
 8006f60:	9b08      	ldr	r3, [sp, #32]
 8006f62:	4418      	add	r0, r3
 8006f64:	f010 001f 	ands.w	r0, r0, #31
 8006f68:	d077      	beq.n	800705a <_dtoa_r+0x8f2>
 8006f6a:	f1c0 0320 	rsb	r3, r0, #32
 8006f6e:	2b04      	cmp	r3, #4
 8006f70:	dd6b      	ble.n	800704a <_dtoa_r+0x8e2>
 8006f72:	9b08      	ldr	r3, [sp, #32]
 8006f74:	f1c0 001c 	rsb	r0, r0, #28
 8006f78:	4403      	add	r3, r0
 8006f7a:	4480      	add	r8, r0
 8006f7c:	4406      	add	r6, r0
 8006f7e:	9308      	str	r3, [sp, #32]
 8006f80:	f1b8 0f00 	cmp.w	r8, #0
 8006f84:	dd05      	ble.n	8006f92 <_dtoa_r+0x82a>
 8006f86:	4649      	mov	r1, r9
 8006f88:	4642      	mov	r2, r8
 8006f8a:	4658      	mov	r0, fp
 8006f8c:	f000 fd08 	bl	80079a0 <__lshift>
 8006f90:	4681      	mov	r9, r0
 8006f92:	9b08      	ldr	r3, [sp, #32]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	dd05      	ble.n	8006fa4 <_dtoa_r+0x83c>
 8006f98:	4621      	mov	r1, r4
 8006f9a:	461a      	mov	r2, r3
 8006f9c:	4658      	mov	r0, fp
 8006f9e:	f000 fcff 	bl	80079a0 <__lshift>
 8006fa2:	4604      	mov	r4, r0
 8006fa4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d059      	beq.n	800705e <_dtoa_r+0x8f6>
 8006faa:	4621      	mov	r1, r4
 8006fac:	4648      	mov	r0, r9
 8006fae:	f000 fd63 	bl	8007a78 <__mcmp>
 8006fb2:	2800      	cmp	r0, #0
 8006fb4:	da53      	bge.n	800705e <_dtoa_r+0x8f6>
 8006fb6:	1e7b      	subs	r3, r7, #1
 8006fb8:	9304      	str	r3, [sp, #16]
 8006fba:	4649      	mov	r1, r9
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	220a      	movs	r2, #10
 8006fc0:	4658      	mov	r0, fp
 8006fc2:	f000 faf7 	bl	80075b4 <__multadd>
 8006fc6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006fc8:	4681      	mov	r9, r0
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	f000 8172 	beq.w	80072b4 <_dtoa_r+0xb4c>
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	4629      	mov	r1, r5
 8006fd4:	220a      	movs	r2, #10
 8006fd6:	4658      	mov	r0, fp
 8006fd8:	f000 faec 	bl	80075b4 <__multadd>
 8006fdc:	9b00      	ldr	r3, [sp, #0]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	4605      	mov	r5, r0
 8006fe2:	dc67      	bgt.n	80070b4 <_dtoa_r+0x94c>
 8006fe4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006fe6:	2b02      	cmp	r3, #2
 8006fe8:	dc41      	bgt.n	800706e <_dtoa_r+0x906>
 8006fea:	e063      	b.n	80070b4 <_dtoa_r+0x94c>
 8006fec:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006fee:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8006ff2:	e746      	b.n	8006e82 <_dtoa_r+0x71a>
 8006ff4:	9b07      	ldr	r3, [sp, #28]
 8006ff6:	1e5c      	subs	r4, r3, #1
 8006ff8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006ffa:	42a3      	cmp	r3, r4
 8006ffc:	bfbf      	itttt	lt
 8006ffe:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007000:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8007002:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8007004:	1ae3      	sublt	r3, r4, r3
 8007006:	bfb4      	ite	lt
 8007008:	18d2      	addlt	r2, r2, r3
 800700a:	1b1c      	subge	r4, r3, r4
 800700c:	9b07      	ldr	r3, [sp, #28]
 800700e:	bfbc      	itt	lt
 8007010:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8007012:	2400      	movlt	r4, #0
 8007014:	2b00      	cmp	r3, #0
 8007016:	bfb5      	itete	lt
 8007018:	eba8 0603 	sublt.w	r6, r8, r3
 800701c:	9b07      	ldrge	r3, [sp, #28]
 800701e:	2300      	movlt	r3, #0
 8007020:	4646      	movge	r6, r8
 8007022:	e730      	b.n	8006e86 <_dtoa_r+0x71e>
 8007024:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007026:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007028:	4646      	mov	r6, r8
 800702a:	e735      	b.n	8006e98 <_dtoa_r+0x730>
 800702c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800702e:	e75c      	b.n	8006eea <_dtoa_r+0x782>
 8007030:	2300      	movs	r3, #0
 8007032:	e788      	b.n	8006f46 <_dtoa_r+0x7de>
 8007034:	3fe00000 	.word	0x3fe00000
 8007038:	40240000 	.word	0x40240000
 800703c:	40140000 	.word	0x40140000
 8007040:	9b02      	ldr	r3, [sp, #8]
 8007042:	e780      	b.n	8006f46 <_dtoa_r+0x7de>
 8007044:	2300      	movs	r3, #0
 8007046:	930a      	str	r3, [sp, #40]	@ 0x28
 8007048:	e782      	b.n	8006f50 <_dtoa_r+0x7e8>
 800704a:	d099      	beq.n	8006f80 <_dtoa_r+0x818>
 800704c:	9a08      	ldr	r2, [sp, #32]
 800704e:	331c      	adds	r3, #28
 8007050:	441a      	add	r2, r3
 8007052:	4498      	add	r8, r3
 8007054:	441e      	add	r6, r3
 8007056:	9208      	str	r2, [sp, #32]
 8007058:	e792      	b.n	8006f80 <_dtoa_r+0x818>
 800705a:	4603      	mov	r3, r0
 800705c:	e7f6      	b.n	800704c <_dtoa_r+0x8e4>
 800705e:	9b07      	ldr	r3, [sp, #28]
 8007060:	9704      	str	r7, [sp, #16]
 8007062:	2b00      	cmp	r3, #0
 8007064:	dc20      	bgt.n	80070a8 <_dtoa_r+0x940>
 8007066:	9300      	str	r3, [sp, #0]
 8007068:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800706a:	2b02      	cmp	r3, #2
 800706c:	dd1e      	ble.n	80070ac <_dtoa_r+0x944>
 800706e:	9b00      	ldr	r3, [sp, #0]
 8007070:	2b00      	cmp	r3, #0
 8007072:	f47f aec0 	bne.w	8006df6 <_dtoa_r+0x68e>
 8007076:	4621      	mov	r1, r4
 8007078:	2205      	movs	r2, #5
 800707a:	4658      	mov	r0, fp
 800707c:	f000 fa9a 	bl	80075b4 <__multadd>
 8007080:	4601      	mov	r1, r0
 8007082:	4604      	mov	r4, r0
 8007084:	4648      	mov	r0, r9
 8007086:	f000 fcf7 	bl	8007a78 <__mcmp>
 800708a:	2800      	cmp	r0, #0
 800708c:	f77f aeb3 	ble.w	8006df6 <_dtoa_r+0x68e>
 8007090:	4656      	mov	r6, sl
 8007092:	2331      	movs	r3, #49	@ 0x31
 8007094:	f806 3b01 	strb.w	r3, [r6], #1
 8007098:	9b04      	ldr	r3, [sp, #16]
 800709a:	3301      	adds	r3, #1
 800709c:	9304      	str	r3, [sp, #16]
 800709e:	e6ae      	b.n	8006dfe <_dtoa_r+0x696>
 80070a0:	9c07      	ldr	r4, [sp, #28]
 80070a2:	9704      	str	r7, [sp, #16]
 80070a4:	4625      	mov	r5, r4
 80070a6:	e7f3      	b.n	8007090 <_dtoa_r+0x928>
 80070a8:	9b07      	ldr	r3, [sp, #28]
 80070aa:	9300      	str	r3, [sp, #0]
 80070ac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	f000 8104 	beq.w	80072bc <_dtoa_r+0xb54>
 80070b4:	2e00      	cmp	r6, #0
 80070b6:	dd05      	ble.n	80070c4 <_dtoa_r+0x95c>
 80070b8:	4629      	mov	r1, r5
 80070ba:	4632      	mov	r2, r6
 80070bc:	4658      	mov	r0, fp
 80070be:	f000 fc6f 	bl	80079a0 <__lshift>
 80070c2:	4605      	mov	r5, r0
 80070c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d05a      	beq.n	8007180 <_dtoa_r+0xa18>
 80070ca:	6869      	ldr	r1, [r5, #4]
 80070cc:	4658      	mov	r0, fp
 80070ce:	f000 fa0f 	bl	80074f0 <_Balloc>
 80070d2:	4606      	mov	r6, r0
 80070d4:	b928      	cbnz	r0, 80070e2 <_dtoa_r+0x97a>
 80070d6:	4b84      	ldr	r3, [pc, #528]	@ (80072e8 <_dtoa_r+0xb80>)
 80070d8:	4602      	mov	r2, r0
 80070da:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80070de:	f7ff bb5a 	b.w	8006796 <_dtoa_r+0x2e>
 80070e2:	692a      	ldr	r2, [r5, #16]
 80070e4:	3202      	adds	r2, #2
 80070e6:	0092      	lsls	r2, r2, #2
 80070e8:	f105 010c 	add.w	r1, r5, #12
 80070ec:	300c      	adds	r0, #12
 80070ee:	f001 ff75 	bl	8008fdc <memcpy>
 80070f2:	2201      	movs	r2, #1
 80070f4:	4631      	mov	r1, r6
 80070f6:	4658      	mov	r0, fp
 80070f8:	f000 fc52 	bl	80079a0 <__lshift>
 80070fc:	f10a 0301 	add.w	r3, sl, #1
 8007100:	9307      	str	r3, [sp, #28]
 8007102:	9b00      	ldr	r3, [sp, #0]
 8007104:	4453      	add	r3, sl
 8007106:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007108:	9b02      	ldr	r3, [sp, #8]
 800710a:	f003 0301 	and.w	r3, r3, #1
 800710e:	462f      	mov	r7, r5
 8007110:	930a      	str	r3, [sp, #40]	@ 0x28
 8007112:	4605      	mov	r5, r0
 8007114:	9b07      	ldr	r3, [sp, #28]
 8007116:	4621      	mov	r1, r4
 8007118:	3b01      	subs	r3, #1
 800711a:	4648      	mov	r0, r9
 800711c:	9300      	str	r3, [sp, #0]
 800711e:	f7ff fa9b 	bl	8006658 <quorem>
 8007122:	4639      	mov	r1, r7
 8007124:	9002      	str	r0, [sp, #8]
 8007126:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800712a:	4648      	mov	r0, r9
 800712c:	f000 fca4 	bl	8007a78 <__mcmp>
 8007130:	462a      	mov	r2, r5
 8007132:	9008      	str	r0, [sp, #32]
 8007134:	4621      	mov	r1, r4
 8007136:	4658      	mov	r0, fp
 8007138:	f000 fcba 	bl	8007ab0 <__mdiff>
 800713c:	68c2      	ldr	r2, [r0, #12]
 800713e:	4606      	mov	r6, r0
 8007140:	bb02      	cbnz	r2, 8007184 <_dtoa_r+0xa1c>
 8007142:	4601      	mov	r1, r0
 8007144:	4648      	mov	r0, r9
 8007146:	f000 fc97 	bl	8007a78 <__mcmp>
 800714a:	4602      	mov	r2, r0
 800714c:	4631      	mov	r1, r6
 800714e:	4658      	mov	r0, fp
 8007150:	920e      	str	r2, [sp, #56]	@ 0x38
 8007152:	f000 fa0d 	bl	8007570 <_Bfree>
 8007156:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007158:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800715a:	9e07      	ldr	r6, [sp, #28]
 800715c:	ea43 0102 	orr.w	r1, r3, r2
 8007160:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007162:	4319      	orrs	r1, r3
 8007164:	d110      	bne.n	8007188 <_dtoa_r+0xa20>
 8007166:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800716a:	d029      	beq.n	80071c0 <_dtoa_r+0xa58>
 800716c:	9b08      	ldr	r3, [sp, #32]
 800716e:	2b00      	cmp	r3, #0
 8007170:	dd02      	ble.n	8007178 <_dtoa_r+0xa10>
 8007172:	9b02      	ldr	r3, [sp, #8]
 8007174:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8007178:	9b00      	ldr	r3, [sp, #0]
 800717a:	f883 8000 	strb.w	r8, [r3]
 800717e:	e63f      	b.n	8006e00 <_dtoa_r+0x698>
 8007180:	4628      	mov	r0, r5
 8007182:	e7bb      	b.n	80070fc <_dtoa_r+0x994>
 8007184:	2201      	movs	r2, #1
 8007186:	e7e1      	b.n	800714c <_dtoa_r+0x9e4>
 8007188:	9b08      	ldr	r3, [sp, #32]
 800718a:	2b00      	cmp	r3, #0
 800718c:	db04      	blt.n	8007198 <_dtoa_r+0xa30>
 800718e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007190:	430b      	orrs	r3, r1
 8007192:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007194:	430b      	orrs	r3, r1
 8007196:	d120      	bne.n	80071da <_dtoa_r+0xa72>
 8007198:	2a00      	cmp	r2, #0
 800719a:	dded      	ble.n	8007178 <_dtoa_r+0xa10>
 800719c:	4649      	mov	r1, r9
 800719e:	2201      	movs	r2, #1
 80071a0:	4658      	mov	r0, fp
 80071a2:	f000 fbfd 	bl	80079a0 <__lshift>
 80071a6:	4621      	mov	r1, r4
 80071a8:	4681      	mov	r9, r0
 80071aa:	f000 fc65 	bl	8007a78 <__mcmp>
 80071ae:	2800      	cmp	r0, #0
 80071b0:	dc03      	bgt.n	80071ba <_dtoa_r+0xa52>
 80071b2:	d1e1      	bne.n	8007178 <_dtoa_r+0xa10>
 80071b4:	f018 0f01 	tst.w	r8, #1
 80071b8:	d0de      	beq.n	8007178 <_dtoa_r+0xa10>
 80071ba:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80071be:	d1d8      	bne.n	8007172 <_dtoa_r+0xa0a>
 80071c0:	9a00      	ldr	r2, [sp, #0]
 80071c2:	2339      	movs	r3, #57	@ 0x39
 80071c4:	7013      	strb	r3, [r2, #0]
 80071c6:	4633      	mov	r3, r6
 80071c8:	461e      	mov	r6, r3
 80071ca:	3b01      	subs	r3, #1
 80071cc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80071d0:	2a39      	cmp	r2, #57	@ 0x39
 80071d2:	d052      	beq.n	800727a <_dtoa_r+0xb12>
 80071d4:	3201      	adds	r2, #1
 80071d6:	701a      	strb	r2, [r3, #0]
 80071d8:	e612      	b.n	8006e00 <_dtoa_r+0x698>
 80071da:	2a00      	cmp	r2, #0
 80071dc:	dd07      	ble.n	80071ee <_dtoa_r+0xa86>
 80071de:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80071e2:	d0ed      	beq.n	80071c0 <_dtoa_r+0xa58>
 80071e4:	9a00      	ldr	r2, [sp, #0]
 80071e6:	f108 0301 	add.w	r3, r8, #1
 80071ea:	7013      	strb	r3, [r2, #0]
 80071ec:	e608      	b.n	8006e00 <_dtoa_r+0x698>
 80071ee:	9b07      	ldr	r3, [sp, #28]
 80071f0:	9a07      	ldr	r2, [sp, #28]
 80071f2:	f803 8c01 	strb.w	r8, [r3, #-1]
 80071f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80071f8:	4293      	cmp	r3, r2
 80071fa:	d028      	beq.n	800724e <_dtoa_r+0xae6>
 80071fc:	4649      	mov	r1, r9
 80071fe:	2300      	movs	r3, #0
 8007200:	220a      	movs	r2, #10
 8007202:	4658      	mov	r0, fp
 8007204:	f000 f9d6 	bl	80075b4 <__multadd>
 8007208:	42af      	cmp	r7, r5
 800720a:	4681      	mov	r9, r0
 800720c:	f04f 0300 	mov.w	r3, #0
 8007210:	f04f 020a 	mov.w	r2, #10
 8007214:	4639      	mov	r1, r7
 8007216:	4658      	mov	r0, fp
 8007218:	d107      	bne.n	800722a <_dtoa_r+0xac2>
 800721a:	f000 f9cb 	bl	80075b4 <__multadd>
 800721e:	4607      	mov	r7, r0
 8007220:	4605      	mov	r5, r0
 8007222:	9b07      	ldr	r3, [sp, #28]
 8007224:	3301      	adds	r3, #1
 8007226:	9307      	str	r3, [sp, #28]
 8007228:	e774      	b.n	8007114 <_dtoa_r+0x9ac>
 800722a:	f000 f9c3 	bl	80075b4 <__multadd>
 800722e:	4629      	mov	r1, r5
 8007230:	4607      	mov	r7, r0
 8007232:	2300      	movs	r3, #0
 8007234:	220a      	movs	r2, #10
 8007236:	4658      	mov	r0, fp
 8007238:	f000 f9bc 	bl	80075b4 <__multadd>
 800723c:	4605      	mov	r5, r0
 800723e:	e7f0      	b.n	8007222 <_dtoa_r+0xaba>
 8007240:	9b00      	ldr	r3, [sp, #0]
 8007242:	2b00      	cmp	r3, #0
 8007244:	bfcc      	ite	gt
 8007246:	461e      	movgt	r6, r3
 8007248:	2601      	movle	r6, #1
 800724a:	4456      	add	r6, sl
 800724c:	2700      	movs	r7, #0
 800724e:	4649      	mov	r1, r9
 8007250:	2201      	movs	r2, #1
 8007252:	4658      	mov	r0, fp
 8007254:	f000 fba4 	bl	80079a0 <__lshift>
 8007258:	4621      	mov	r1, r4
 800725a:	4681      	mov	r9, r0
 800725c:	f000 fc0c 	bl	8007a78 <__mcmp>
 8007260:	2800      	cmp	r0, #0
 8007262:	dcb0      	bgt.n	80071c6 <_dtoa_r+0xa5e>
 8007264:	d102      	bne.n	800726c <_dtoa_r+0xb04>
 8007266:	f018 0f01 	tst.w	r8, #1
 800726a:	d1ac      	bne.n	80071c6 <_dtoa_r+0xa5e>
 800726c:	4633      	mov	r3, r6
 800726e:	461e      	mov	r6, r3
 8007270:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007274:	2a30      	cmp	r2, #48	@ 0x30
 8007276:	d0fa      	beq.n	800726e <_dtoa_r+0xb06>
 8007278:	e5c2      	b.n	8006e00 <_dtoa_r+0x698>
 800727a:	459a      	cmp	sl, r3
 800727c:	d1a4      	bne.n	80071c8 <_dtoa_r+0xa60>
 800727e:	9b04      	ldr	r3, [sp, #16]
 8007280:	3301      	adds	r3, #1
 8007282:	9304      	str	r3, [sp, #16]
 8007284:	2331      	movs	r3, #49	@ 0x31
 8007286:	f88a 3000 	strb.w	r3, [sl]
 800728a:	e5b9      	b.n	8006e00 <_dtoa_r+0x698>
 800728c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800728e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80072ec <_dtoa_r+0xb84>
 8007292:	b11b      	cbz	r3, 800729c <_dtoa_r+0xb34>
 8007294:	f10a 0308 	add.w	r3, sl, #8
 8007298:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800729a:	6013      	str	r3, [r2, #0]
 800729c:	4650      	mov	r0, sl
 800729e:	b019      	add	sp, #100	@ 0x64
 80072a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80072a6:	2b01      	cmp	r3, #1
 80072a8:	f77f ae37 	ble.w	8006f1a <_dtoa_r+0x7b2>
 80072ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80072ae:	930a      	str	r3, [sp, #40]	@ 0x28
 80072b0:	2001      	movs	r0, #1
 80072b2:	e655      	b.n	8006f60 <_dtoa_r+0x7f8>
 80072b4:	9b00      	ldr	r3, [sp, #0]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	f77f aed6 	ble.w	8007068 <_dtoa_r+0x900>
 80072bc:	4656      	mov	r6, sl
 80072be:	4621      	mov	r1, r4
 80072c0:	4648      	mov	r0, r9
 80072c2:	f7ff f9c9 	bl	8006658 <quorem>
 80072c6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80072ca:	f806 8b01 	strb.w	r8, [r6], #1
 80072ce:	9b00      	ldr	r3, [sp, #0]
 80072d0:	eba6 020a 	sub.w	r2, r6, sl
 80072d4:	4293      	cmp	r3, r2
 80072d6:	ddb3      	ble.n	8007240 <_dtoa_r+0xad8>
 80072d8:	4649      	mov	r1, r9
 80072da:	2300      	movs	r3, #0
 80072dc:	220a      	movs	r2, #10
 80072de:	4658      	mov	r0, fp
 80072e0:	f000 f968 	bl	80075b4 <__multadd>
 80072e4:	4681      	mov	r9, r0
 80072e6:	e7ea      	b.n	80072be <_dtoa_r+0xb56>
 80072e8:	08009e35 	.word	0x08009e35
 80072ec:	08009db9 	.word	0x08009db9

080072f0 <_free_r>:
 80072f0:	b538      	push	{r3, r4, r5, lr}
 80072f2:	4605      	mov	r5, r0
 80072f4:	2900      	cmp	r1, #0
 80072f6:	d041      	beq.n	800737c <_free_r+0x8c>
 80072f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80072fc:	1f0c      	subs	r4, r1, #4
 80072fe:	2b00      	cmp	r3, #0
 8007300:	bfb8      	it	lt
 8007302:	18e4      	addlt	r4, r4, r3
 8007304:	f000 f8e8 	bl	80074d8 <__malloc_lock>
 8007308:	4a1d      	ldr	r2, [pc, #116]	@ (8007380 <_free_r+0x90>)
 800730a:	6813      	ldr	r3, [r2, #0]
 800730c:	b933      	cbnz	r3, 800731c <_free_r+0x2c>
 800730e:	6063      	str	r3, [r4, #4]
 8007310:	6014      	str	r4, [r2, #0]
 8007312:	4628      	mov	r0, r5
 8007314:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007318:	f000 b8e4 	b.w	80074e4 <__malloc_unlock>
 800731c:	42a3      	cmp	r3, r4
 800731e:	d908      	bls.n	8007332 <_free_r+0x42>
 8007320:	6820      	ldr	r0, [r4, #0]
 8007322:	1821      	adds	r1, r4, r0
 8007324:	428b      	cmp	r3, r1
 8007326:	bf01      	itttt	eq
 8007328:	6819      	ldreq	r1, [r3, #0]
 800732a:	685b      	ldreq	r3, [r3, #4]
 800732c:	1809      	addeq	r1, r1, r0
 800732e:	6021      	streq	r1, [r4, #0]
 8007330:	e7ed      	b.n	800730e <_free_r+0x1e>
 8007332:	461a      	mov	r2, r3
 8007334:	685b      	ldr	r3, [r3, #4]
 8007336:	b10b      	cbz	r3, 800733c <_free_r+0x4c>
 8007338:	42a3      	cmp	r3, r4
 800733a:	d9fa      	bls.n	8007332 <_free_r+0x42>
 800733c:	6811      	ldr	r1, [r2, #0]
 800733e:	1850      	adds	r0, r2, r1
 8007340:	42a0      	cmp	r0, r4
 8007342:	d10b      	bne.n	800735c <_free_r+0x6c>
 8007344:	6820      	ldr	r0, [r4, #0]
 8007346:	4401      	add	r1, r0
 8007348:	1850      	adds	r0, r2, r1
 800734a:	4283      	cmp	r3, r0
 800734c:	6011      	str	r1, [r2, #0]
 800734e:	d1e0      	bne.n	8007312 <_free_r+0x22>
 8007350:	6818      	ldr	r0, [r3, #0]
 8007352:	685b      	ldr	r3, [r3, #4]
 8007354:	6053      	str	r3, [r2, #4]
 8007356:	4408      	add	r0, r1
 8007358:	6010      	str	r0, [r2, #0]
 800735a:	e7da      	b.n	8007312 <_free_r+0x22>
 800735c:	d902      	bls.n	8007364 <_free_r+0x74>
 800735e:	230c      	movs	r3, #12
 8007360:	602b      	str	r3, [r5, #0]
 8007362:	e7d6      	b.n	8007312 <_free_r+0x22>
 8007364:	6820      	ldr	r0, [r4, #0]
 8007366:	1821      	adds	r1, r4, r0
 8007368:	428b      	cmp	r3, r1
 800736a:	bf04      	itt	eq
 800736c:	6819      	ldreq	r1, [r3, #0]
 800736e:	685b      	ldreq	r3, [r3, #4]
 8007370:	6063      	str	r3, [r4, #4]
 8007372:	bf04      	itt	eq
 8007374:	1809      	addeq	r1, r1, r0
 8007376:	6021      	streq	r1, [r4, #0]
 8007378:	6054      	str	r4, [r2, #4]
 800737a:	e7ca      	b.n	8007312 <_free_r+0x22>
 800737c:	bd38      	pop	{r3, r4, r5, pc}
 800737e:	bf00      	nop
 8007380:	20000450 	.word	0x20000450

08007384 <malloc>:
 8007384:	4b02      	ldr	r3, [pc, #8]	@ (8007390 <malloc+0xc>)
 8007386:	4601      	mov	r1, r0
 8007388:	6818      	ldr	r0, [r3, #0]
 800738a:	f000 b825 	b.w	80073d8 <_malloc_r>
 800738e:	bf00      	nop
 8007390:	20000018 	.word	0x20000018

08007394 <sbrk_aligned>:
 8007394:	b570      	push	{r4, r5, r6, lr}
 8007396:	4e0f      	ldr	r6, [pc, #60]	@ (80073d4 <sbrk_aligned+0x40>)
 8007398:	460c      	mov	r4, r1
 800739a:	6831      	ldr	r1, [r6, #0]
 800739c:	4605      	mov	r5, r0
 800739e:	b911      	cbnz	r1, 80073a6 <sbrk_aligned+0x12>
 80073a0:	f001 fe0c 	bl	8008fbc <_sbrk_r>
 80073a4:	6030      	str	r0, [r6, #0]
 80073a6:	4621      	mov	r1, r4
 80073a8:	4628      	mov	r0, r5
 80073aa:	f001 fe07 	bl	8008fbc <_sbrk_r>
 80073ae:	1c43      	adds	r3, r0, #1
 80073b0:	d103      	bne.n	80073ba <sbrk_aligned+0x26>
 80073b2:	f04f 34ff 	mov.w	r4, #4294967295
 80073b6:	4620      	mov	r0, r4
 80073b8:	bd70      	pop	{r4, r5, r6, pc}
 80073ba:	1cc4      	adds	r4, r0, #3
 80073bc:	f024 0403 	bic.w	r4, r4, #3
 80073c0:	42a0      	cmp	r0, r4
 80073c2:	d0f8      	beq.n	80073b6 <sbrk_aligned+0x22>
 80073c4:	1a21      	subs	r1, r4, r0
 80073c6:	4628      	mov	r0, r5
 80073c8:	f001 fdf8 	bl	8008fbc <_sbrk_r>
 80073cc:	3001      	adds	r0, #1
 80073ce:	d1f2      	bne.n	80073b6 <sbrk_aligned+0x22>
 80073d0:	e7ef      	b.n	80073b2 <sbrk_aligned+0x1e>
 80073d2:	bf00      	nop
 80073d4:	2000044c 	.word	0x2000044c

080073d8 <_malloc_r>:
 80073d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80073dc:	1ccd      	adds	r5, r1, #3
 80073de:	f025 0503 	bic.w	r5, r5, #3
 80073e2:	3508      	adds	r5, #8
 80073e4:	2d0c      	cmp	r5, #12
 80073e6:	bf38      	it	cc
 80073e8:	250c      	movcc	r5, #12
 80073ea:	2d00      	cmp	r5, #0
 80073ec:	4606      	mov	r6, r0
 80073ee:	db01      	blt.n	80073f4 <_malloc_r+0x1c>
 80073f0:	42a9      	cmp	r1, r5
 80073f2:	d904      	bls.n	80073fe <_malloc_r+0x26>
 80073f4:	230c      	movs	r3, #12
 80073f6:	6033      	str	r3, [r6, #0]
 80073f8:	2000      	movs	r0, #0
 80073fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80073fe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80074d4 <_malloc_r+0xfc>
 8007402:	f000 f869 	bl	80074d8 <__malloc_lock>
 8007406:	f8d8 3000 	ldr.w	r3, [r8]
 800740a:	461c      	mov	r4, r3
 800740c:	bb44      	cbnz	r4, 8007460 <_malloc_r+0x88>
 800740e:	4629      	mov	r1, r5
 8007410:	4630      	mov	r0, r6
 8007412:	f7ff ffbf 	bl	8007394 <sbrk_aligned>
 8007416:	1c43      	adds	r3, r0, #1
 8007418:	4604      	mov	r4, r0
 800741a:	d158      	bne.n	80074ce <_malloc_r+0xf6>
 800741c:	f8d8 4000 	ldr.w	r4, [r8]
 8007420:	4627      	mov	r7, r4
 8007422:	2f00      	cmp	r7, #0
 8007424:	d143      	bne.n	80074ae <_malloc_r+0xd6>
 8007426:	2c00      	cmp	r4, #0
 8007428:	d04b      	beq.n	80074c2 <_malloc_r+0xea>
 800742a:	6823      	ldr	r3, [r4, #0]
 800742c:	4639      	mov	r1, r7
 800742e:	4630      	mov	r0, r6
 8007430:	eb04 0903 	add.w	r9, r4, r3
 8007434:	f001 fdc2 	bl	8008fbc <_sbrk_r>
 8007438:	4581      	cmp	r9, r0
 800743a:	d142      	bne.n	80074c2 <_malloc_r+0xea>
 800743c:	6821      	ldr	r1, [r4, #0]
 800743e:	1a6d      	subs	r5, r5, r1
 8007440:	4629      	mov	r1, r5
 8007442:	4630      	mov	r0, r6
 8007444:	f7ff ffa6 	bl	8007394 <sbrk_aligned>
 8007448:	3001      	adds	r0, #1
 800744a:	d03a      	beq.n	80074c2 <_malloc_r+0xea>
 800744c:	6823      	ldr	r3, [r4, #0]
 800744e:	442b      	add	r3, r5
 8007450:	6023      	str	r3, [r4, #0]
 8007452:	f8d8 3000 	ldr.w	r3, [r8]
 8007456:	685a      	ldr	r2, [r3, #4]
 8007458:	bb62      	cbnz	r2, 80074b4 <_malloc_r+0xdc>
 800745a:	f8c8 7000 	str.w	r7, [r8]
 800745e:	e00f      	b.n	8007480 <_malloc_r+0xa8>
 8007460:	6822      	ldr	r2, [r4, #0]
 8007462:	1b52      	subs	r2, r2, r5
 8007464:	d420      	bmi.n	80074a8 <_malloc_r+0xd0>
 8007466:	2a0b      	cmp	r2, #11
 8007468:	d917      	bls.n	800749a <_malloc_r+0xc2>
 800746a:	1961      	adds	r1, r4, r5
 800746c:	42a3      	cmp	r3, r4
 800746e:	6025      	str	r5, [r4, #0]
 8007470:	bf18      	it	ne
 8007472:	6059      	strne	r1, [r3, #4]
 8007474:	6863      	ldr	r3, [r4, #4]
 8007476:	bf08      	it	eq
 8007478:	f8c8 1000 	streq.w	r1, [r8]
 800747c:	5162      	str	r2, [r4, r5]
 800747e:	604b      	str	r3, [r1, #4]
 8007480:	4630      	mov	r0, r6
 8007482:	f000 f82f 	bl	80074e4 <__malloc_unlock>
 8007486:	f104 000b 	add.w	r0, r4, #11
 800748a:	1d23      	adds	r3, r4, #4
 800748c:	f020 0007 	bic.w	r0, r0, #7
 8007490:	1ac2      	subs	r2, r0, r3
 8007492:	bf1c      	itt	ne
 8007494:	1a1b      	subne	r3, r3, r0
 8007496:	50a3      	strne	r3, [r4, r2]
 8007498:	e7af      	b.n	80073fa <_malloc_r+0x22>
 800749a:	6862      	ldr	r2, [r4, #4]
 800749c:	42a3      	cmp	r3, r4
 800749e:	bf0c      	ite	eq
 80074a0:	f8c8 2000 	streq.w	r2, [r8]
 80074a4:	605a      	strne	r2, [r3, #4]
 80074a6:	e7eb      	b.n	8007480 <_malloc_r+0xa8>
 80074a8:	4623      	mov	r3, r4
 80074aa:	6864      	ldr	r4, [r4, #4]
 80074ac:	e7ae      	b.n	800740c <_malloc_r+0x34>
 80074ae:	463c      	mov	r4, r7
 80074b0:	687f      	ldr	r7, [r7, #4]
 80074b2:	e7b6      	b.n	8007422 <_malloc_r+0x4a>
 80074b4:	461a      	mov	r2, r3
 80074b6:	685b      	ldr	r3, [r3, #4]
 80074b8:	42a3      	cmp	r3, r4
 80074ba:	d1fb      	bne.n	80074b4 <_malloc_r+0xdc>
 80074bc:	2300      	movs	r3, #0
 80074be:	6053      	str	r3, [r2, #4]
 80074c0:	e7de      	b.n	8007480 <_malloc_r+0xa8>
 80074c2:	230c      	movs	r3, #12
 80074c4:	6033      	str	r3, [r6, #0]
 80074c6:	4630      	mov	r0, r6
 80074c8:	f000 f80c 	bl	80074e4 <__malloc_unlock>
 80074cc:	e794      	b.n	80073f8 <_malloc_r+0x20>
 80074ce:	6005      	str	r5, [r0, #0]
 80074d0:	e7d6      	b.n	8007480 <_malloc_r+0xa8>
 80074d2:	bf00      	nop
 80074d4:	20000450 	.word	0x20000450

080074d8 <__malloc_lock>:
 80074d8:	4801      	ldr	r0, [pc, #4]	@ (80074e0 <__malloc_lock+0x8>)
 80074da:	f7ff b8b4 	b.w	8006646 <__retarget_lock_acquire_recursive>
 80074de:	bf00      	nop
 80074e0:	20000448 	.word	0x20000448

080074e4 <__malloc_unlock>:
 80074e4:	4801      	ldr	r0, [pc, #4]	@ (80074ec <__malloc_unlock+0x8>)
 80074e6:	f7ff b8af 	b.w	8006648 <__retarget_lock_release_recursive>
 80074ea:	bf00      	nop
 80074ec:	20000448 	.word	0x20000448

080074f0 <_Balloc>:
 80074f0:	b570      	push	{r4, r5, r6, lr}
 80074f2:	69c6      	ldr	r6, [r0, #28]
 80074f4:	4604      	mov	r4, r0
 80074f6:	460d      	mov	r5, r1
 80074f8:	b976      	cbnz	r6, 8007518 <_Balloc+0x28>
 80074fa:	2010      	movs	r0, #16
 80074fc:	f7ff ff42 	bl	8007384 <malloc>
 8007500:	4602      	mov	r2, r0
 8007502:	61e0      	str	r0, [r4, #28]
 8007504:	b920      	cbnz	r0, 8007510 <_Balloc+0x20>
 8007506:	4b18      	ldr	r3, [pc, #96]	@ (8007568 <_Balloc+0x78>)
 8007508:	4818      	ldr	r0, [pc, #96]	@ (800756c <_Balloc+0x7c>)
 800750a:	216b      	movs	r1, #107	@ 0x6b
 800750c:	f001 fd7c 	bl	8009008 <__assert_func>
 8007510:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007514:	6006      	str	r6, [r0, #0]
 8007516:	60c6      	str	r6, [r0, #12]
 8007518:	69e6      	ldr	r6, [r4, #28]
 800751a:	68f3      	ldr	r3, [r6, #12]
 800751c:	b183      	cbz	r3, 8007540 <_Balloc+0x50>
 800751e:	69e3      	ldr	r3, [r4, #28]
 8007520:	68db      	ldr	r3, [r3, #12]
 8007522:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007526:	b9b8      	cbnz	r0, 8007558 <_Balloc+0x68>
 8007528:	2101      	movs	r1, #1
 800752a:	fa01 f605 	lsl.w	r6, r1, r5
 800752e:	1d72      	adds	r2, r6, #5
 8007530:	0092      	lsls	r2, r2, #2
 8007532:	4620      	mov	r0, r4
 8007534:	f001 fd86 	bl	8009044 <_calloc_r>
 8007538:	b160      	cbz	r0, 8007554 <_Balloc+0x64>
 800753a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800753e:	e00e      	b.n	800755e <_Balloc+0x6e>
 8007540:	2221      	movs	r2, #33	@ 0x21
 8007542:	2104      	movs	r1, #4
 8007544:	4620      	mov	r0, r4
 8007546:	f001 fd7d 	bl	8009044 <_calloc_r>
 800754a:	69e3      	ldr	r3, [r4, #28]
 800754c:	60f0      	str	r0, [r6, #12]
 800754e:	68db      	ldr	r3, [r3, #12]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d1e4      	bne.n	800751e <_Balloc+0x2e>
 8007554:	2000      	movs	r0, #0
 8007556:	bd70      	pop	{r4, r5, r6, pc}
 8007558:	6802      	ldr	r2, [r0, #0]
 800755a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800755e:	2300      	movs	r3, #0
 8007560:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007564:	e7f7      	b.n	8007556 <_Balloc+0x66>
 8007566:	bf00      	nop
 8007568:	08009dc6 	.word	0x08009dc6
 800756c:	08009e46 	.word	0x08009e46

08007570 <_Bfree>:
 8007570:	b570      	push	{r4, r5, r6, lr}
 8007572:	69c6      	ldr	r6, [r0, #28]
 8007574:	4605      	mov	r5, r0
 8007576:	460c      	mov	r4, r1
 8007578:	b976      	cbnz	r6, 8007598 <_Bfree+0x28>
 800757a:	2010      	movs	r0, #16
 800757c:	f7ff ff02 	bl	8007384 <malloc>
 8007580:	4602      	mov	r2, r0
 8007582:	61e8      	str	r0, [r5, #28]
 8007584:	b920      	cbnz	r0, 8007590 <_Bfree+0x20>
 8007586:	4b09      	ldr	r3, [pc, #36]	@ (80075ac <_Bfree+0x3c>)
 8007588:	4809      	ldr	r0, [pc, #36]	@ (80075b0 <_Bfree+0x40>)
 800758a:	218f      	movs	r1, #143	@ 0x8f
 800758c:	f001 fd3c 	bl	8009008 <__assert_func>
 8007590:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007594:	6006      	str	r6, [r0, #0]
 8007596:	60c6      	str	r6, [r0, #12]
 8007598:	b13c      	cbz	r4, 80075aa <_Bfree+0x3a>
 800759a:	69eb      	ldr	r3, [r5, #28]
 800759c:	6862      	ldr	r2, [r4, #4]
 800759e:	68db      	ldr	r3, [r3, #12]
 80075a0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80075a4:	6021      	str	r1, [r4, #0]
 80075a6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80075aa:	bd70      	pop	{r4, r5, r6, pc}
 80075ac:	08009dc6 	.word	0x08009dc6
 80075b0:	08009e46 	.word	0x08009e46

080075b4 <__multadd>:
 80075b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075b8:	690d      	ldr	r5, [r1, #16]
 80075ba:	4607      	mov	r7, r0
 80075bc:	460c      	mov	r4, r1
 80075be:	461e      	mov	r6, r3
 80075c0:	f101 0c14 	add.w	ip, r1, #20
 80075c4:	2000      	movs	r0, #0
 80075c6:	f8dc 3000 	ldr.w	r3, [ip]
 80075ca:	b299      	uxth	r1, r3
 80075cc:	fb02 6101 	mla	r1, r2, r1, r6
 80075d0:	0c1e      	lsrs	r6, r3, #16
 80075d2:	0c0b      	lsrs	r3, r1, #16
 80075d4:	fb02 3306 	mla	r3, r2, r6, r3
 80075d8:	b289      	uxth	r1, r1
 80075da:	3001      	adds	r0, #1
 80075dc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80075e0:	4285      	cmp	r5, r0
 80075e2:	f84c 1b04 	str.w	r1, [ip], #4
 80075e6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80075ea:	dcec      	bgt.n	80075c6 <__multadd+0x12>
 80075ec:	b30e      	cbz	r6, 8007632 <__multadd+0x7e>
 80075ee:	68a3      	ldr	r3, [r4, #8]
 80075f0:	42ab      	cmp	r3, r5
 80075f2:	dc19      	bgt.n	8007628 <__multadd+0x74>
 80075f4:	6861      	ldr	r1, [r4, #4]
 80075f6:	4638      	mov	r0, r7
 80075f8:	3101      	adds	r1, #1
 80075fa:	f7ff ff79 	bl	80074f0 <_Balloc>
 80075fe:	4680      	mov	r8, r0
 8007600:	b928      	cbnz	r0, 800760e <__multadd+0x5a>
 8007602:	4602      	mov	r2, r0
 8007604:	4b0c      	ldr	r3, [pc, #48]	@ (8007638 <__multadd+0x84>)
 8007606:	480d      	ldr	r0, [pc, #52]	@ (800763c <__multadd+0x88>)
 8007608:	21ba      	movs	r1, #186	@ 0xba
 800760a:	f001 fcfd 	bl	8009008 <__assert_func>
 800760e:	6922      	ldr	r2, [r4, #16]
 8007610:	3202      	adds	r2, #2
 8007612:	f104 010c 	add.w	r1, r4, #12
 8007616:	0092      	lsls	r2, r2, #2
 8007618:	300c      	adds	r0, #12
 800761a:	f001 fcdf 	bl	8008fdc <memcpy>
 800761e:	4621      	mov	r1, r4
 8007620:	4638      	mov	r0, r7
 8007622:	f7ff ffa5 	bl	8007570 <_Bfree>
 8007626:	4644      	mov	r4, r8
 8007628:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800762c:	3501      	adds	r5, #1
 800762e:	615e      	str	r6, [r3, #20]
 8007630:	6125      	str	r5, [r4, #16]
 8007632:	4620      	mov	r0, r4
 8007634:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007638:	08009e35 	.word	0x08009e35
 800763c:	08009e46 	.word	0x08009e46

08007640 <__s2b>:
 8007640:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007644:	460c      	mov	r4, r1
 8007646:	4615      	mov	r5, r2
 8007648:	461f      	mov	r7, r3
 800764a:	2209      	movs	r2, #9
 800764c:	3308      	adds	r3, #8
 800764e:	4606      	mov	r6, r0
 8007650:	fb93 f3f2 	sdiv	r3, r3, r2
 8007654:	2100      	movs	r1, #0
 8007656:	2201      	movs	r2, #1
 8007658:	429a      	cmp	r2, r3
 800765a:	db09      	blt.n	8007670 <__s2b+0x30>
 800765c:	4630      	mov	r0, r6
 800765e:	f7ff ff47 	bl	80074f0 <_Balloc>
 8007662:	b940      	cbnz	r0, 8007676 <__s2b+0x36>
 8007664:	4602      	mov	r2, r0
 8007666:	4b19      	ldr	r3, [pc, #100]	@ (80076cc <__s2b+0x8c>)
 8007668:	4819      	ldr	r0, [pc, #100]	@ (80076d0 <__s2b+0x90>)
 800766a:	21d3      	movs	r1, #211	@ 0xd3
 800766c:	f001 fccc 	bl	8009008 <__assert_func>
 8007670:	0052      	lsls	r2, r2, #1
 8007672:	3101      	adds	r1, #1
 8007674:	e7f0      	b.n	8007658 <__s2b+0x18>
 8007676:	9b08      	ldr	r3, [sp, #32]
 8007678:	6143      	str	r3, [r0, #20]
 800767a:	2d09      	cmp	r5, #9
 800767c:	f04f 0301 	mov.w	r3, #1
 8007680:	6103      	str	r3, [r0, #16]
 8007682:	dd16      	ble.n	80076b2 <__s2b+0x72>
 8007684:	f104 0909 	add.w	r9, r4, #9
 8007688:	46c8      	mov	r8, r9
 800768a:	442c      	add	r4, r5
 800768c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007690:	4601      	mov	r1, r0
 8007692:	3b30      	subs	r3, #48	@ 0x30
 8007694:	220a      	movs	r2, #10
 8007696:	4630      	mov	r0, r6
 8007698:	f7ff ff8c 	bl	80075b4 <__multadd>
 800769c:	45a0      	cmp	r8, r4
 800769e:	d1f5      	bne.n	800768c <__s2b+0x4c>
 80076a0:	f1a5 0408 	sub.w	r4, r5, #8
 80076a4:	444c      	add	r4, r9
 80076a6:	1b2d      	subs	r5, r5, r4
 80076a8:	1963      	adds	r3, r4, r5
 80076aa:	42bb      	cmp	r3, r7
 80076ac:	db04      	blt.n	80076b8 <__s2b+0x78>
 80076ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80076b2:	340a      	adds	r4, #10
 80076b4:	2509      	movs	r5, #9
 80076b6:	e7f6      	b.n	80076a6 <__s2b+0x66>
 80076b8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80076bc:	4601      	mov	r1, r0
 80076be:	3b30      	subs	r3, #48	@ 0x30
 80076c0:	220a      	movs	r2, #10
 80076c2:	4630      	mov	r0, r6
 80076c4:	f7ff ff76 	bl	80075b4 <__multadd>
 80076c8:	e7ee      	b.n	80076a8 <__s2b+0x68>
 80076ca:	bf00      	nop
 80076cc:	08009e35 	.word	0x08009e35
 80076d0:	08009e46 	.word	0x08009e46

080076d4 <__hi0bits>:
 80076d4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80076d8:	4603      	mov	r3, r0
 80076da:	bf36      	itet	cc
 80076dc:	0403      	lslcc	r3, r0, #16
 80076de:	2000      	movcs	r0, #0
 80076e0:	2010      	movcc	r0, #16
 80076e2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80076e6:	bf3c      	itt	cc
 80076e8:	021b      	lslcc	r3, r3, #8
 80076ea:	3008      	addcc	r0, #8
 80076ec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80076f0:	bf3c      	itt	cc
 80076f2:	011b      	lslcc	r3, r3, #4
 80076f4:	3004      	addcc	r0, #4
 80076f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80076fa:	bf3c      	itt	cc
 80076fc:	009b      	lslcc	r3, r3, #2
 80076fe:	3002      	addcc	r0, #2
 8007700:	2b00      	cmp	r3, #0
 8007702:	db05      	blt.n	8007710 <__hi0bits+0x3c>
 8007704:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007708:	f100 0001 	add.w	r0, r0, #1
 800770c:	bf08      	it	eq
 800770e:	2020      	moveq	r0, #32
 8007710:	4770      	bx	lr

08007712 <__lo0bits>:
 8007712:	6803      	ldr	r3, [r0, #0]
 8007714:	4602      	mov	r2, r0
 8007716:	f013 0007 	ands.w	r0, r3, #7
 800771a:	d00b      	beq.n	8007734 <__lo0bits+0x22>
 800771c:	07d9      	lsls	r1, r3, #31
 800771e:	d421      	bmi.n	8007764 <__lo0bits+0x52>
 8007720:	0798      	lsls	r0, r3, #30
 8007722:	bf49      	itett	mi
 8007724:	085b      	lsrmi	r3, r3, #1
 8007726:	089b      	lsrpl	r3, r3, #2
 8007728:	2001      	movmi	r0, #1
 800772a:	6013      	strmi	r3, [r2, #0]
 800772c:	bf5c      	itt	pl
 800772e:	6013      	strpl	r3, [r2, #0]
 8007730:	2002      	movpl	r0, #2
 8007732:	4770      	bx	lr
 8007734:	b299      	uxth	r1, r3
 8007736:	b909      	cbnz	r1, 800773c <__lo0bits+0x2a>
 8007738:	0c1b      	lsrs	r3, r3, #16
 800773a:	2010      	movs	r0, #16
 800773c:	b2d9      	uxtb	r1, r3
 800773e:	b909      	cbnz	r1, 8007744 <__lo0bits+0x32>
 8007740:	3008      	adds	r0, #8
 8007742:	0a1b      	lsrs	r3, r3, #8
 8007744:	0719      	lsls	r1, r3, #28
 8007746:	bf04      	itt	eq
 8007748:	091b      	lsreq	r3, r3, #4
 800774a:	3004      	addeq	r0, #4
 800774c:	0799      	lsls	r1, r3, #30
 800774e:	bf04      	itt	eq
 8007750:	089b      	lsreq	r3, r3, #2
 8007752:	3002      	addeq	r0, #2
 8007754:	07d9      	lsls	r1, r3, #31
 8007756:	d403      	bmi.n	8007760 <__lo0bits+0x4e>
 8007758:	085b      	lsrs	r3, r3, #1
 800775a:	f100 0001 	add.w	r0, r0, #1
 800775e:	d003      	beq.n	8007768 <__lo0bits+0x56>
 8007760:	6013      	str	r3, [r2, #0]
 8007762:	4770      	bx	lr
 8007764:	2000      	movs	r0, #0
 8007766:	4770      	bx	lr
 8007768:	2020      	movs	r0, #32
 800776a:	4770      	bx	lr

0800776c <__i2b>:
 800776c:	b510      	push	{r4, lr}
 800776e:	460c      	mov	r4, r1
 8007770:	2101      	movs	r1, #1
 8007772:	f7ff febd 	bl	80074f0 <_Balloc>
 8007776:	4602      	mov	r2, r0
 8007778:	b928      	cbnz	r0, 8007786 <__i2b+0x1a>
 800777a:	4b05      	ldr	r3, [pc, #20]	@ (8007790 <__i2b+0x24>)
 800777c:	4805      	ldr	r0, [pc, #20]	@ (8007794 <__i2b+0x28>)
 800777e:	f240 1145 	movw	r1, #325	@ 0x145
 8007782:	f001 fc41 	bl	8009008 <__assert_func>
 8007786:	2301      	movs	r3, #1
 8007788:	6144      	str	r4, [r0, #20]
 800778a:	6103      	str	r3, [r0, #16]
 800778c:	bd10      	pop	{r4, pc}
 800778e:	bf00      	nop
 8007790:	08009e35 	.word	0x08009e35
 8007794:	08009e46 	.word	0x08009e46

08007798 <__multiply>:
 8007798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800779c:	4614      	mov	r4, r2
 800779e:	690a      	ldr	r2, [r1, #16]
 80077a0:	6923      	ldr	r3, [r4, #16]
 80077a2:	429a      	cmp	r2, r3
 80077a4:	bfa8      	it	ge
 80077a6:	4623      	movge	r3, r4
 80077a8:	460f      	mov	r7, r1
 80077aa:	bfa4      	itt	ge
 80077ac:	460c      	movge	r4, r1
 80077ae:	461f      	movge	r7, r3
 80077b0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80077b4:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80077b8:	68a3      	ldr	r3, [r4, #8]
 80077ba:	6861      	ldr	r1, [r4, #4]
 80077bc:	eb0a 0609 	add.w	r6, sl, r9
 80077c0:	42b3      	cmp	r3, r6
 80077c2:	b085      	sub	sp, #20
 80077c4:	bfb8      	it	lt
 80077c6:	3101      	addlt	r1, #1
 80077c8:	f7ff fe92 	bl	80074f0 <_Balloc>
 80077cc:	b930      	cbnz	r0, 80077dc <__multiply+0x44>
 80077ce:	4602      	mov	r2, r0
 80077d0:	4b44      	ldr	r3, [pc, #272]	@ (80078e4 <__multiply+0x14c>)
 80077d2:	4845      	ldr	r0, [pc, #276]	@ (80078e8 <__multiply+0x150>)
 80077d4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80077d8:	f001 fc16 	bl	8009008 <__assert_func>
 80077dc:	f100 0514 	add.w	r5, r0, #20
 80077e0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80077e4:	462b      	mov	r3, r5
 80077e6:	2200      	movs	r2, #0
 80077e8:	4543      	cmp	r3, r8
 80077ea:	d321      	bcc.n	8007830 <__multiply+0x98>
 80077ec:	f107 0114 	add.w	r1, r7, #20
 80077f0:	f104 0214 	add.w	r2, r4, #20
 80077f4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80077f8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80077fc:	9302      	str	r3, [sp, #8]
 80077fe:	1b13      	subs	r3, r2, r4
 8007800:	3b15      	subs	r3, #21
 8007802:	f023 0303 	bic.w	r3, r3, #3
 8007806:	3304      	adds	r3, #4
 8007808:	f104 0715 	add.w	r7, r4, #21
 800780c:	42ba      	cmp	r2, r7
 800780e:	bf38      	it	cc
 8007810:	2304      	movcc	r3, #4
 8007812:	9301      	str	r3, [sp, #4]
 8007814:	9b02      	ldr	r3, [sp, #8]
 8007816:	9103      	str	r1, [sp, #12]
 8007818:	428b      	cmp	r3, r1
 800781a:	d80c      	bhi.n	8007836 <__multiply+0x9e>
 800781c:	2e00      	cmp	r6, #0
 800781e:	dd03      	ble.n	8007828 <__multiply+0x90>
 8007820:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007824:	2b00      	cmp	r3, #0
 8007826:	d05b      	beq.n	80078e0 <__multiply+0x148>
 8007828:	6106      	str	r6, [r0, #16]
 800782a:	b005      	add	sp, #20
 800782c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007830:	f843 2b04 	str.w	r2, [r3], #4
 8007834:	e7d8      	b.n	80077e8 <__multiply+0x50>
 8007836:	f8b1 a000 	ldrh.w	sl, [r1]
 800783a:	f1ba 0f00 	cmp.w	sl, #0
 800783e:	d024      	beq.n	800788a <__multiply+0xf2>
 8007840:	f104 0e14 	add.w	lr, r4, #20
 8007844:	46a9      	mov	r9, r5
 8007846:	f04f 0c00 	mov.w	ip, #0
 800784a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800784e:	f8d9 3000 	ldr.w	r3, [r9]
 8007852:	fa1f fb87 	uxth.w	fp, r7
 8007856:	b29b      	uxth	r3, r3
 8007858:	fb0a 330b 	mla	r3, sl, fp, r3
 800785c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8007860:	f8d9 7000 	ldr.w	r7, [r9]
 8007864:	4463      	add	r3, ip
 8007866:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800786a:	fb0a c70b 	mla	r7, sl, fp, ip
 800786e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8007872:	b29b      	uxth	r3, r3
 8007874:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007878:	4572      	cmp	r2, lr
 800787a:	f849 3b04 	str.w	r3, [r9], #4
 800787e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007882:	d8e2      	bhi.n	800784a <__multiply+0xb2>
 8007884:	9b01      	ldr	r3, [sp, #4]
 8007886:	f845 c003 	str.w	ip, [r5, r3]
 800788a:	9b03      	ldr	r3, [sp, #12]
 800788c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007890:	3104      	adds	r1, #4
 8007892:	f1b9 0f00 	cmp.w	r9, #0
 8007896:	d021      	beq.n	80078dc <__multiply+0x144>
 8007898:	682b      	ldr	r3, [r5, #0]
 800789a:	f104 0c14 	add.w	ip, r4, #20
 800789e:	46ae      	mov	lr, r5
 80078a0:	f04f 0a00 	mov.w	sl, #0
 80078a4:	f8bc b000 	ldrh.w	fp, [ip]
 80078a8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80078ac:	fb09 770b 	mla	r7, r9, fp, r7
 80078b0:	4457      	add	r7, sl
 80078b2:	b29b      	uxth	r3, r3
 80078b4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80078b8:	f84e 3b04 	str.w	r3, [lr], #4
 80078bc:	f85c 3b04 	ldr.w	r3, [ip], #4
 80078c0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80078c4:	f8be 3000 	ldrh.w	r3, [lr]
 80078c8:	fb09 330a 	mla	r3, r9, sl, r3
 80078cc:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80078d0:	4562      	cmp	r2, ip
 80078d2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80078d6:	d8e5      	bhi.n	80078a4 <__multiply+0x10c>
 80078d8:	9f01      	ldr	r7, [sp, #4]
 80078da:	51eb      	str	r3, [r5, r7]
 80078dc:	3504      	adds	r5, #4
 80078de:	e799      	b.n	8007814 <__multiply+0x7c>
 80078e0:	3e01      	subs	r6, #1
 80078e2:	e79b      	b.n	800781c <__multiply+0x84>
 80078e4:	08009e35 	.word	0x08009e35
 80078e8:	08009e46 	.word	0x08009e46

080078ec <__pow5mult>:
 80078ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80078f0:	4615      	mov	r5, r2
 80078f2:	f012 0203 	ands.w	r2, r2, #3
 80078f6:	4607      	mov	r7, r0
 80078f8:	460e      	mov	r6, r1
 80078fa:	d007      	beq.n	800790c <__pow5mult+0x20>
 80078fc:	4c25      	ldr	r4, [pc, #148]	@ (8007994 <__pow5mult+0xa8>)
 80078fe:	3a01      	subs	r2, #1
 8007900:	2300      	movs	r3, #0
 8007902:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007906:	f7ff fe55 	bl	80075b4 <__multadd>
 800790a:	4606      	mov	r6, r0
 800790c:	10ad      	asrs	r5, r5, #2
 800790e:	d03d      	beq.n	800798c <__pow5mult+0xa0>
 8007910:	69fc      	ldr	r4, [r7, #28]
 8007912:	b97c      	cbnz	r4, 8007934 <__pow5mult+0x48>
 8007914:	2010      	movs	r0, #16
 8007916:	f7ff fd35 	bl	8007384 <malloc>
 800791a:	4602      	mov	r2, r0
 800791c:	61f8      	str	r0, [r7, #28]
 800791e:	b928      	cbnz	r0, 800792c <__pow5mult+0x40>
 8007920:	4b1d      	ldr	r3, [pc, #116]	@ (8007998 <__pow5mult+0xac>)
 8007922:	481e      	ldr	r0, [pc, #120]	@ (800799c <__pow5mult+0xb0>)
 8007924:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007928:	f001 fb6e 	bl	8009008 <__assert_func>
 800792c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007930:	6004      	str	r4, [r0, #0]
 8007932:	60c4      	str	r4, [r0, #12]
 8007934:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007938:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800793c:	b94c      	cbnz	r4, 8007952 <__pow5mult+0x66>
 800793e:	f240 2171 	movw	r1, #625	@ 0x271
 8007942:	4638      	mov	r0, r7
 8007944:	f7ff ff12 	bl	800776c <__i2b>
 8007948:	2300      	movs	r3, #0
 800794a:	f8c8 0008 	str.w	r0, [r8, #8]
 800794e:	4604      	mov	r4, r0
 8007950:	6003      	str	r3, [r0, #0]
 8007952:	f04f 0900 	mov.w	r9, #0
 8007956:	07eb      	lsls	r3, r5, #31
 8007958:	d50a      	bpl.n	8007970 <__pow5mult+0x84>
 800795a:	4631      	mov	r1, r6
 800795c:	4622      	mov	r2, r4
 800795e:	4638      	mov	r0, r7
 8007960:	f7ff ff1a 	bl	8007798 <__multiply>
 8007964:	4631      	mov	r1, r6
 8007966:	4680      	mov	r8, r0
 8007968:	4638      	mov	r0, r7
 800796a:	f7ff fe01 	bl	8007570 <_Bfree>
 800796e:	4646      	mov	r6, r8
 8007970:	106d      	asrs	r5, r5, #1
 8007972:	d00b      	beq.n	800798c <__pow5mult+0xa0>
 8007974:	6820      	ldr	r0, [r4, #0]
 8007976:	b938      	cbnz	r0, 8007988 <__pow5mult+0x9c>
 8007978:	4622      	mov	r2, r4
 800797a:	4621      	mov	r1, r4
 800797c:	4638      	mov	r0, r7
 800797e:	f7ff ff0b 	bl	8007798 <__multiply>
 8007982:	6020      	str	r0, [r4, #0]
 8007984:	f8c0 9000 	str.w	r9, [r0]
 8007988:	4604      	mov	r4, r0
 800798a:	e7e4      	b.n	8007956 <__pow5mult+0x6a>
 800798c:	4630      	mov	r0, r6
 800798e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007992:	bf00      	nop
 8007994:	08009ea0 	.word	0x08009ea0
 8007998:	08009dc6 	.word	0x08009dc6
 800799c:	08009e46 	.word	0x08009e46

080079a0 <__lshift>:
 80079a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80079a4:	460c      	mov	r4, r1
 80079a6:	6849      	ldr	r1, [r1, #4]
 80079a8:	6923      	ldr	r3, [r4, #16]
 80079aa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80079ae:	68a3      	ldr	r3, [r4, #8]
 80079b0:	4607      	mov	r7, r0
 80079b2:	4691      	mov	r9, r2
 80079b4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80079b8:	f108 0601 	add.w	r6, r8, #1
 80079bc:	42b3      	cmp	r3, r6
 80079be:	db0b      	blt.n	80079d8 <__lshift+0x38>
 80079c0:	4638      	mov	r0, r7
 80079c2:	f7ff fd95 	bl	80074f0 <_Balloc>
 80079c6:	4605      	mov	r5, r0
 80079c8:	b948      	cbnz	r0, 80079de <__lshift+0x3e>
 80079ca:	4602      	mov	r2, r0
 80079cc:	4b28      	ldr	r3, [pc, #160]	@ (8007a70 <__lshift+0xd0>)
 80079ce:	4829      	ldr	r0, [pc, #164]	@ (8007a74 <__lshift+0xd4>)
 80079d0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80079d4:	f001 fb18 	bl	8009008 <__assert_func>
 80079d8:	3101      	adds	r1, #1
 80079da:	005b      	lsls	r3, r3, #1
 80079dc:	e7ee      	b.n	80079bc <__lshift+0x1c>
 80079de:	2300      	movs	r3, #0
 80079e0:	f100 0114 	add.w	r1, r0, #20
 80079e4:	f100 0210 	add.w	r2, r0, #16
 80079e8:	4618      	mov	r0, r3
 80079ea:	4553      	cmp	r3, sl
 80079ec:	db33      	blt.n	8007a56 <__lshift+0xb6>
 80079ee:	6920      	ldr	r0, [r4, #16]
 80079f0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80079f4:	f104 0314 	add.w	r3, r4, #20
 80079f8:	f019 091f 	ands.w	r9, r9, #31
 80079fc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007a00:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007a04:	d02b      	beq.n	8007a5e <__lshift+0xbe>
 8007a06:	f1c9 0e20 	rsb	lr, r9, #32
 8007a0a:	468a      	mov	sl, r1
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	6818      	ldr	r0, [r3, #0]
 8007a10:	fa00 f009 	lsl.w	r0, r0, r9
 8007a14:	4310      	orrs	r0, r2
 8007a16:	f84a 0b04 	str.w	r0, [sl], #4
 8007a1a:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a1e:	459c      	cmp	ip, r3
 8007a20:	fa22 f20e 	lsr.w	r2, r2, lr
 8007a24:	d8f3      	bhi.n	8007a0e <__lshift+0x6e>
 8007a26:	ebac 0304 	sub.w	r3, ip, r4
 8007a2a:	3b15      	subs	r3, #21
 8007a2c:	f023 0303 	bic.w	r3, r3, #3
 8007a30:	3304      	adds	r3, #4
 8007a32:	f104 0015 	add.w	r0, r4, #21
 8007a36:	4584      	cmp	ip, r0
 8007a38:	bf38      	it	cc
 8007a3a:	2304      	movcc	r3, #4
 8007a3c:	50ca      	str	r2, [r1, r3]
 8007a3e:	b10a      	cbz	r2, 8007a44 <__lshift+0xa4>
 8007a40:	f108 0602 	add.w	r6, r8, #2
 8007a44:	3e01      	subs	r6, #1
 8007a46:	4638      	mov	r0, r7
 8007a48:	612e      	str	r6, [r5, #16]
 8007a4a:	4621      	mov	r1, r4
 8007a4c:	f7ff fd90 	bl	8007570 <_Bfree>
 8007a50:	4628      	mov	r0, r5
 8007a52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a56:	f842 0f04 	str.w	r0, [r2, #4]!
 8007a5a:	3301      	adds	r3, #1
 8007a5c:	e7c5      	b.n	80079ea <__lshift+0x4a>
 8007a5e:	3904      	subs	r1, #4
 8007a60:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a64:	f841 2f04 	str.w	r2, [r1, #4]!
 8007a68:	459c      	cmp	ip, r3
 8007a6a:	d8f9      	bhi.n	8007a60 <__lshift+0xc0>
 8007a6c:	e7ea      	b.n	8007a44 <__lshift+0xa4>
 8007a6e:	bf00      	nop
 8007a70:	08009e35 	.word	0x08009e35
 8007a74:	08009e46 	.word	0x08009e46

08007a78 <__mcmp>:
 8007a78:	690a      	ldr	r2, [r1, #16]
 8007a7a:	4603      	mov	r3, r0
 8007a7c:	6900      	ldr	r0, [r0, #16]
 8007a7e:	1a80      	subs	r0, r0, r2
 8007a80:	b530      	push	{r4, r5, lr}
 8007a82:	d10e      	bne.n	8007aa2 <__mcmp+0x2a>
 8007a84:	3314      	adds	r3, #20
 8007a86:	3114      	adds	r1, #20
 8007a88:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007a8c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007a90:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007a94:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007a98:	4295      	cmp	r5, r2
 8007a9a:	d003      	beq.n	8007aa4 <__mcmp+0x2c>
 8007a9c:	d205      	bcs.n	8007aaa <__mcmp+0x32>
 8007a9e:	f04f 30ff 	mov.w	r0, #4294967295
 8007aa2:	bd30      	pop	{r4, r5, pc}
 8007aa4:	42a3      	cmp	r3, r4
 8007aa6:	d3f3      	bcc.n	8007a90 <__mcmp+0x18>
 8007aa8:	e7fb      	b.n	8007aa2 <__mcmp+0x2a>
 8007aaa:	2001      	movs	r0, #1
 8007aac:	e7f9      	b.n	8007aa2 <__mcmp+0x2a>
	...

08007ab0 <__mdiff>:
 8007ab0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ab4:	4689      	mov	r9, r1
 8007ab6:	4606      	mov	r6, r0
 8007ab8:	4611      	mov	r1, r2
 8007aba:	4648      	mov	r0, r9
 8007abc:	4614      	mov	r4, r2
 8007abe:	f7ff ffdb 	bl	8007a78 <__mcmp>
 8007ac2:	1e05      	subs	r5, r0, #0
 8007ac4:	d112      	bne.n	8007aec <__mdiff+0x3c>
 8007ac6:	4629      	mov	r1, r5
 8007ac8:	4630      	mov	r0, r6
 8007aca:	f7ff fd11 	bl	80074f0 <_Balloc>
 8007ace:	4602      	mov	r2, r0
 8007ad0:	b928      	cbnz	r0, 8007ade <__mdiff+0x2e>
 8007ad2:	4b3f      	ldr	r3, [pc, #252]	@ (8007bd0 <__mdiff+0x120>)
 8007ad4:	f240 2137 	movw	r1, #567	@ 0x237
 8007ad8:	483e      	ldr	r0, [pc, #248]	@ (8007bd4 <__mdiff+0x124>)
 8007ada:	f001 fa95 	bl	8009008 <__assert_func>
 8007ade:	2301      	movs	r3, #1
 8007ae0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007ae4:	4610      	mov	r0, r2
 8007ae6:	b003      	add	sp, #12
 8007ae8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007aec:	bfbc      	itt	lt
 8007aee:	464b      	movlt	r3, r9
 8007af0:	46a1      	movlt	r9, r4
 8007af2:	4630      	mov	r0, r6
 8007af4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007af8:	bfba      	itte	lt
 8007afa:	461c      	movlt	r4, r3
 8007afc:	2501      	movlt	r5, #1
 8007afe:	2500      	movge	r5, #0
 8007b00:	f7ff fcf6 	bl	80074f0 <_Balloc>
 8007b04:	4602      	mov	r2, r0
 8007b06:	b918      	cbnz	r0, 8007b10 <__mdiff+0x60>
 8007b08:	4b31      	ldr	r3, [pc, #196]	@ (8007bd0 <__mdiff+0x120>)
 8007b0a:	f240 2145 	movw	r1, #581	@ 0x245
 8007b0e:	e7e3      	b.n	8007ad8 <__mdiff+0x28>
 8007b10:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007b14:	6926      	ldr	r6, [r4, #16]
 8007b16:	60c5      	str	r5, [r0, #12]
 8007b18:	f109 0310 	add.w	r3, r9, #16
 8007b1c:	f109 0514 	add.w	r5, r9, #20
 8007b20:	f104 0e14 	add.w	lr, r4, #20
 8007b24:	f100 0b14 	add.w	fp, r0, #20
 8007b28:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007b2c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007b30:	9301      	str	r3, [sp, #4]
 8007b32:	46d9      	mov	r9, fp
 8007b34:	f04f 0c00 	mov.w	ip, #0
 8007b38:	9b01      	ldr	r3, [sp, #4]
 8007b3a:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007b3e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007b42:	9301      	str	r3, [sp, #4]
 8007b44:	fa1f f38a 	uxth.w	r3, sl
 8007b48:	4619      	mov	r1, r3
 8007b4a:	b283      	uxth	r3, r0
 8007b4c:	1acb      	subs	r3, r1, r3
 8007b4e:	0c00      	lsrs	r0, r0, #16
 8007b50:	4463      	add	r3, ip
 8007b52:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007b56:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007b5a:	b29b      	uxth	r3, r3
 8007b5c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007b60:	4576      	cmp	r6, lr
 8007b62:	f849 3b04 	str.w	r3, [r9], #4
 8007b66:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007b6a:	d8e5      	bhi.n	8007b38 <__mdiff+0x88>
 8007b6c:	1b33      	subs	r3, r6, r4
 8007b6e:	3b15      	subs	r3, #21
 8007b70:	f023 0303 	bic.w	r3, r3, #3
 8007b74:	3415      	adds	r4, #21
 8007b76:	3304      	adds	r3, #4
 8007b78:	42a6      	cmp	r6, r4
 8007b7a:	bf38      	it	cc
 8007b7c:	2304      	movcc	r3, #4
 8007b7e:	441d      	add	r5, r3
 8007b80:	445b      	add	r3, fp
 8007b82:	461e      	mov	r6, r3
 8007b84:	462c      	mov	r4, r5
 8007b86:	4544      	cmp	r4, r8
 8007b88:	d30e      	bcc.n	8007ba8 <__mdiff+0xf8>
 8007b8a:	f108 0103 	add.w	r1, r8, #3
 8007b8e:	1b49      	subs	r1, r1, r5
 8007b90:	f021 0103 	bic.w	r1, r1, #3
 8007b94:	3d03      	subs	r5, #3
 8007b96:	45a8      	cmp	r8, r5
 8007b98:	bf38      	it	cc
 8007b9a:	2100      	movcc	r1, #0
 8007b9c:	440b      	add	r3, r1
 8007b9e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007ba2:	b191      	cbz	r1, 8007bca <__mdiff+0x11a>
 8007ba4:	6117      	str	r7, [r2, #16]
 8007ba6:	e79d      	b.n	8007ae4 <__mdiff+0x34>
 8007ba8:	f854 1b04 	ldr.w	r1, [r4], #4
 8007bac:	46e6      	mov	lr, ip
 8007bae:	0c08      	lsrs	r0, r1, #16
 8007bb0:	fa1c fc81 	uxtah	ip, ip, r1
 8007bb4:	4471      	add	r1, lr
 8007bb6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007bba:	b289      	uxth	r1, r1
 8007bbc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007bc0:	f846 1b04 	str.w	r1, [r6], #4
 8007bc4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007bc8:	e7dd      	b.n	8007b86 <__mdiff+0xd6>
 8007bca:	3f01      	subs	r7, #1
 8007bcc:	e7e7      	b.n	8007b9e <__mdiff+0xee>
 8007bce:	bf00      	nop
 8007bd0:	08009e35 	.word	0x08009e35
 8007bd4:	08009e46 	.word	0x08009e46

08007bd8 <__ulp>:
 8007bd8:	b082      	sub	sp, #8
 8007bda:	ed8d 0b00 	vstr	d0, [sp]
 8007bde:	9a01      	ldr	r2, [sp, #4]
 8007be0:	4b0f      	ldr	r3, [pc, #60]	@ (8007c20 <__ulp+0x48>)
 8007be2:	4013      	ands	r3, r2
 8007be4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	dc08      	bgt.n	8007bfe <__ulp+0x26>
 8007bec:	425b      	negs	r3, r3
 8007bee:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8007bf2:	ea4f 5223 	mov.w	r2, r3, asr #20
 8007bf6:	da04      	bge.n	8007c02 <__ulp+0x2a>
 8007bf8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8007bfc:	4113      	asrs	r3, r2
 8007bfe:	2200      	movs	r2, #0
 8007c00:	e008      	b.n	8007c14 <__ulp+0x3c>
 8007c02:	f1a2 0314 	sub.w	r3, r2, #20
 8007c06:	2b1e      	cmp	r3, #30
 8007c08:	bfda      	itte	le
 8007c0a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8007c0e:	40da      	lsrle	r2, r3
 8007c10:	2201      	movgt	r2, #1
 8007c12:	2300      	movs	r3, #0
 8007c14:	4619      	mov	r1, r3
 8007c16:	4610      	mov	r0, r2
 8007c18:	ec41 0b10 	vmov	d0, r0, r1
 8007c1c:	b002      	add	sp, #8
 8007c1e:	4770      	bx	lr
 8007c20:	7ff00000 	.word	0x7ff00000

08007c24 <__b2d>:
 8007c24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c28:	6906      	ldr	r6, [r0, #16]
 8007c2a:	f100 0814 	add.w	r8, r0, #20
 8007c2e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8007c32:	1f37      	subs	r7, r6, #4
 8007c34:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8007c38:	4610      	mov	r0, r2
 8007c3a:	f7ff fd4b 	bl	80076d4 <__hi0bits>
 8007c3e:	f1c0 0320 	rsb	r3, r0, #32
 8007c42:	280a      	cmp	r0, #10
 8007c44:	600b      	str	r3, [r1, #0]
 8007c46:	491b      	ldr	r1, [pc, #108]	@ (8007cb4 <__b2d+0x90>)
 8007c48:	dc15      	bgt.n	8007c76 <__b2d+0x52>
 8007c4a:	f1c0 0c0b 	rsb	ip, r0, #11
 8007c4e:	fa22 f30c 	lsr.w	r3, r2, ip
 8007c52:	45b8      	cmp	r8, r7
 8007c54:	ea43 0501 	orr.w	r5, r3, r1
 8007c58:	bf34      	ite	cc
 8007c5a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8007c5e:	2300      	movcs	r3, #0
 8007c60:	3015      	adds	r0, #21
 8007c62:	fa02 f000 	lsl.w	r0, r2, r0
 8007c66:	fa23 f30c 	lsr.w	r3, r3, ip
 8007c6a:	4303      	orrs	r3, r0
 8007c6c:	461c      	mov	r4, r3
 8007c6e:	ec45 4b10 	vmov	d0, r4, r5
 8007c72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c76:	45b8      	cmp	r8, r7
 8007c78:	bf3a      	itte	cc
 8007c7a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8007c7e:	f1a6 0708 	subcc.w	r7, r6, #8
 8007c82:	2300      	movcs	r3, #0
 8007c84:	380b      	subs	r0, #11
 8007c86:	d012      	beq.n	8007cae <__b2d+0x8a>
 8007c88:	f1c0 0120 	rsb	r1, r0, #32
 8007c8c:	fa23 f401 	lsr.w	r4, r3, r1
 8007c90:	4082      	lsls	r2, r0
 8007c92:	4322      	orrs	r2, r4
 8007c94:	4547      	cmp	r7, r8
 8007c96:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8007c9a:	bf8c      	ite	hi
 8007c9c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8007ca0:	2200      	movls	r2, #0
 8007ca2:	4083      	lsls	r3, r0
 8007ca4:	40ca      	lsrs	r2, r1
 8007ca6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8007caa:	4313      	orrs	r3, r2
 8007cac:	e7de      	b.n	8007c6c <__b2d+0x48>
 8007cae:	ea42 0501 	orr.w	r5, r2, r1
 8007cb2:	e7db      	b.n	8007c6c <__b2d+0x48>
 8007cb4:	3ff00000 	.word	0x3ff00000

08007cb8 <__d2b>:
 8007cb8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007cbc:	460f      	mov	r7, r1
 8007cbe:	2101      	movs	r1, #1
 8007cc0:	ec59 8b10 	vmov	r8, r9, d0
 8007cc4:	4616      	mov	r6, r2
 8007cc6:	f7ff fc13 	bl	80074f0 <_Balloc>
 8007cca:	4604      	mov	r4, r0
 8007ccc:	b930      	cbnz	r0, 8007cdc <__d2b+0x24>
 8007cce:	4602      	mov	r2, r0
 8007cd0:	4b23      	ldr	r3, [pc, #140]	@ (8007d60 <__d2b+0xa8>)
 8007cd2:	4824      	ldr	r0, [pc, #144]	@ (8007d64 <__d2b+0xac>)
 8007cd4:	f240 310f 	movw	r1, #783	@ 0x30f
 8007cd8:	f001 f996 	bl	8009008 <__assert_func>
 8007cdc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007ce0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007ce4:	b10d      	cbz	r5, 8007cea <__d2b+0x32>
 8007ce6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007cea:	9301      	str	r3, [sp, #4]
 8007cec:	f1b8 0300 	subs.w	r3, r8, #0
 8007cf0:	d023      	beq.n	8007d3a <__d2b+0x82>
 8007cf2:	4668      	mov	r0, sp
 8007cf4:	9300      	str	r3, [sp, #0]
 8007cf6:	f7ff fd0c 	bl	8007712 <__lo0bits>
 8007cfa:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007cfe:	b1d0      	cbz	r0, 8007d36 <__d2b+0x7e>
 8007d00:	f1c0 0320 	rsb	r3, r0, #32
 8007d04:	fa02 f303 	lsl.w	r3, r2, r3
 8007d08:	430b      	orrs	r3, r1
 8007d0a:	40c2      	lsrs	r2, r0
 8007d0c:	6163      	str	r3, [r4, #20]
 8007d0e:	9201      	str	r2, [sp, #4]
 8007d10:	9b01      	ldr	r3, [sp, #4]
 8007d12:	61a3      	str	r3, [r4, #24]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	bf0c      	ite	eq
 8007d18:	2201      	moveq	r2, #1
 8007d1a:	2202      	movne	r2, #2
 8007d1c:	6122      	str	r2, [r4, #16]
 8007d1e:	b1a5      	cbz	r5, 8007d4a <__d2b+0x92>
 8007d20:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007d24:	4405      	add	r5, r0
 8007d26:	603d      	str	r5, [r7, #0]
 8007d28:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007d2c:	6030      	str	r0, [r6, #0]
 8007d2e:	4620      	mov	r0, r4
 8007d30:	b003      	add	sp, #12
 8007d32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007d36:	6161      	str	r1, [r4, #20]
 8007d38:	e7ea      	b.n	8007d10 <__d2b+0x58>
 8007d3a:	a801      	add	r0, sp, #4
 8007d3c:	f7ff fce9 	bl	8007712 <__lo0bits>
 8007d40:	9b01      	ldr	r3, [sp, #4]
 8007d42:	6163      	str	r3, [r4, #20]
 8007d44:	3020      	adds	r0, #32
 8007d46:	2201      	movs	r2, #1
 8007d48:	e7e8      	b.n	8007d1c <__d2b+0x64>
 8007d4a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007d4e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007d52:	6038      	str	r0, [r7, #0]
 8007d54:	6918      	ldr	r0, [r3, #16]
 8007d56:	f7ff fcbd 	bl	80076d4 <__hi0bits>
 8007d5a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007d5e:	e7e5      	b.n	8007d2c <__d2b+0x74>
 8007d60:	08009e35 	.word	0x08009e35
 8007d64:	08009e46 	.word	0x08009e46

08007d68 <__ratio>:
 8007d68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d6c:	b085      	sub	sp, #20
 8007d6e:	e9cd 1000 	strd	r1, r0, [sp]
 8007d72:	a902      	add	r1, sp, #8
 8007d74:	f7ff ff56 	bl	8007c24 <__b2d>
 8007d78:	9800      	ldr	r0, [sp, #0]
 8007d7a:	a903      	add	r1, sp, #12
 8007d7c:	ec55 4b10 	vmov	r4, r5, d0
 8007d80:	f7ff ff50 	bl	8007c24 <__b2d>
 8007d84:	9b01      	ldr	r3, [sp, #4]
 8007d86:	6919      	ldr	r1, [r3, #16]
 8007d88:	9b00      	ldr	r3, [sp, #0]
 8007d8a:	691b      	ldr	r3, [r3, #16]
 8007d8c:	1ac9      	subs	r1, r1, r3
 8007d8e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8007d92:	1a9b      	subs	r3, r3, r2
 8007d94:	ec5b ab10 	vmov	sl, fp, d0
 8007d98:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	bfce      	itee	gt
 8007da0:	462a      	movgt	r2, r5
 8007da2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007da6:	465a      	movle	r2, fp
 8007da8:	462f      	mov	r7, r5
 8007daa:	46d9      	mov	r9, fp
 8007dac:	bfcc      	ite	gt
 8007dae:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8007db2:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8007db6:	464b      	mov	r3, r9
 8007db8:	4652      	mov	r2, sl
 8007dba:	4620      	mov	r0, r4
 8007dbc:	4639      	mov	r1, r7
 8007dbe:	f7f8 fd45 	bl	800084c <__aeabi_ddiv>
 8007dc2:	ec41 0b10 	vmov	d0, r0, r1
 8007dc6:	b005      	add	sp, #20
 8007dc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007dcc <__copybits>:
 8007dcc:	3901      	subs	r1, #1
 8007dce:	b570      	push	{r4, r5, r6, lr}
 8007dd0:	1149      	asrs	r1, r1, #5
 8007dd2:	6914      	ldr	r4, [r2, #16]
 8007dd4:	3101      	adds	r1, #1
 8007dd6:	f102 0314 	add.w	r3, r2, #20
 8007dda:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007dde:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007de2:	1f05      	subs	r5, r0, #4
 8007de4:	42a3      	cmp	r3, r4
 8007de6:	d30c      	bcc.n	8007e02 <__copybits+0x36>
 8007de8:	1aa3      	subs	r3, r4, r2
 8007dea:	3b11      	subs	r3, #17
 8007dec:	f023 0303 	bic.w	r3, r3, #3
 8007df0:	3211      	adds	r2, #17
 8007df2:	42a2      	cmp	r2, r4
 8007df4:	bf88      	it	hi
 8007df6:	2300      	movhi	r3, #0
 8007df8:	4418      	add	r0, r3
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	4288      	cmp	r0, r1
 8007dfe:	d305      	bcc.n	8007e0c <__copybits+0x40>
 8007e00:	bd70      	pop	{r4, r5, r6, pc}
 8007e02:	f853 6b04 	ldr.w	r6, [r3], #4
 8007e06:	f845 6f04 	str.w	r6, [r5, #4]!
 8007e0a:	e7eb      	b.n	8007de4 <__copybits+0x18>
 8007e0c:	f840 3b04 	str.w	r3, [r0], #4
 8007e10:	e7f4      	b.n	8007dfc <__copybits+0x30>

08007e12 <__any_on>:
 8007e12:	f100 0214 	add.w	r2, r0, #20
 8007e16:	6900      	ldr	r0, [r0, #16]
 8007e18:	114b      	asrs	r3, r1, #5
 8007e1a:	4298      	cmp	r0, r3
 8007e1c:	b510      	push	{r4, lr}
 8007e1e:	db11      	blt.n	8007e44 <__any_on+0x32>
 8007e20:	dd0a      	ble.n	8007e38 <__any_on+0x26>
 8007e22:	f011 011f 	ands.w	r1, r1, #31
 8007e26:	d007      	beq.n	8007e38 <__any_on+0x26>
 8007e28:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007e2c:	fa24 f001 	lsr.w	r0, r4, r1
 8007e30:	fa00 f101 	lsl.w	r1, r0, r1
 8007e34:	428c      	cmp	r4, r1
 8007e36:	d10b      	bne.n	8007e50 <__any_on+0x3e>
 8007e38:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007e3c:	4293      	cmp	r3, r2
 8007e3e:	d803      	bhi.n	8007e48 <__any_on+0x36>
 8007e40:	2000      	movs	r0, #0
 8007e42:	bd10      	pop	{r4, pc}
 8007e44:	4603      	mov	r3, r0
 8007e46:	e7f7      	b.n	8007e38 <__any_on+0x26>
 8007e48:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007e4c:	2900      	cmp	r1, #0
 8007e4e:	d0f5      	beq.n	8007e3c <__any_on+0x2a>
 8007e50:	2001      	movs	r0, #1
 8007e52:	e7f6      	b.n	8007e42 <__any_on+0x30>

08007e54 <sulp>:
 8007e54:	b570      	push	{r4, r5, r6, lr}
 8007e56:	4604      	mov	r4, r0
 8007e58:	460d      	mov	r5, r1
 8007e5a:	ec45 4b10 	vmov	d0, r4, r5
 8007e5e:	4616      	mov	r6, r2
 8007e60:	f7ff feba 	bl	8007bd8 <__ulp>
 8007e64:	ec51 0b10 	vmov	r0, r1, d0
 8007e68:	b17e      	cbz	r6, 8007e8a <sulp+0x36>
 8007e6a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007e6e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	dd09      	ble.n	8007e8a <sulp+0x36>
 8007e76:	051b      	lsls	r3, r3, #20
 8007e78:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8007e7c:	2400      	movs	r4, #0
 8007e7e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8007e82:	4622      	mov	r2, r4
 8007e84:	462b      	mov	r3, r5
 8007e86:	f7f8 fbb7 	bl	80005f8 <__aeabi_dmul>
 8007e8a:	ec41 0b10 	vmov	d0, r0, r1
 8007e8e:	bd70      	pop	{r4, r5, r6, pc}

08007e90 <_strtod_l>:
 8007e90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e94:	b09f      	sub	sp, #124	@ 0x7c
 8007e96:	460c      	mov	r4, r1
 8007e98:	9217      	str	r2, [sp, #92]	@ 0x5c
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	921a      	str	r2, [sp, #104]	@ 0x68
 8007e9e:	9005      	str	r0, [sp, #20]
 8007ea0:	f04f 0a00 	mov.w	sl, #0
 8007ea4:	f04f 0b00 	mov.w	fp, #0
 8007ea8:	460a      	mov	r2, r1
 8007eaa:	9219      	str	r2, [sp, #100]	@ 0x64
 8007eac:	7811      	ldrb	r1, [r2, #0]
 8007eae:	292b      	cmp	r1, #43	@ 0x2b
 8007eb0:	d04a      	beq.n	8007f48 <_strtod_l+0xb8>
 8007eb2:	d838      	bhi.n	8007f26 <_strtod_l+0x96>
 8007eb4:	290d      	cmp	r1, #13
 8007eb6:	d832      	bhi.n	8007f1e <_strtod_l+0x8e>
 8007eb8:	2908      	cmp	r1, #8
 8007eba:	d832      	bhi.n	8007f22 <_strtod_l+0x92>
 8007ebc:	2900      	cmp	r1, #0
 8007ebe:	d03b      	beq.n	8007f38 <_strtod_l+0xa8>
 8007ec0:	2200      	movs	r2, #0
 8007ec2:	920b      	str	r2, [sp, #44]	@ 0x2c
 8007ec4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8007ec6:	782a      	ldrb	r2, [r5, #0]
 8007ec8:	2a30      	cmp	r2, #48	@ 0x30
 8007eca:	f040 80b3 	bne.w	8008034 <_strtod_l+0x1a4>
 8007ece:	786a      	ldrb	r2, [r5, #1]
 8007ed0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007ed4:	2a58      	cmp	r2, #88	@ 0x58
 8007ed6:	d16e      	bne.n	8007fb6 <_strtod_l+0x126>
 8007ed8:	9302      	str	r3, [sp, #8]
 8007eda:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007edc:	9301      	str	r3, [sp, #4]
 8007ede:	ab1a      	add	r3, sp, #104	@ 0x68
 8007ee0:	9300      	str	r3, [sp, #0]
 8007ee2:	4a8e      	ldr	r2, [pc, #568]	@ (800811c <_strtod_l+0x28c>)
 8007ee4:	9805      	ldr	r0, [sp, #20]
 8007ee6:	ab1b      	add	r3, sp, #108	@ 0x6c
 8007ee8:	a919      	add	r1, sp, #100	@ 0x64
 8007eea:	f001 f927 	bl	800913c <__gethex>
 8007eee:	f010 060f 	ands.w	r6, r0, #15
 8007ef2:	4604      	mov	r4, r0
 8007ef4:	d005      	beq.n	8007f02 <_strtod_l+0x72>
 8007ef6:	2e06      	cmp	r6, #6
 8007ef8:	d128      	bne.n	8007f4c <_strtod_l+0xbc>
 8007efa:	3501      	adds	r5, #1
 8007efc:	2300      	movs	r3, #0
 8007efe:	9519      	str	r5, [sp, #100]	@ 0x64
 8007f00:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007f02:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	f040 858e 	bne.w	8008a26 <_strtod_l+0xb96>
 8007f0a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007f0c:	b1cb      	cbz	r3, 8007f42 <_strtod_l+0xb2>
 8007f0e:	4652      	mov	r2, sl
 8007f10:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8007f14:	ec43 2b10 	vmov	d0, r2, r3
 8007f18:	b01f      	add	sp, #124	@ 0x7c
 8007f1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f1e:	2920      	cmp	r1, #32
 8007f20:	d1ce      	bne.n	8007ec0 <_strtod_l+0x30>
 8007f22:	3201      	adds	r2, #1
 8007f24:	e7c1      	b.n	8007eaa <_strtod_l+0x1a>
 8007f26:	292d      	cmp	r1, #45	@ 0x2d
 8007f28:	d1ca      	bne.n	8007ec0 <_strtod_l+0x30>
 8007f2a:	2101      	movs	r1, #1
 8007f2c:	910b      	str	r1, [sp, #44]	@ 0x2c
 8007f2e:	1c51      	adds	r1, r2, #1
 8007f30:	9119      	str	r1, [sp, #100]	@ 0x64
 8007f32:	7852      	ldrb	r2, [r2, #1]
 8007f34:	2a00      	cmp	r2, #0
 8007f36:	d1c5      	bne.n	8007ec4 <_strtod_l+0x34>
 8007f38:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007f3a:	9419      	str	r4, [sp, #100]	@ 0x64
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	f040 8570 	bne.w	8008a22 <_strtod_l+0xb92>
 8007f42:	4652      	mov	r2, sl
 8007f44:	465b      	mov	r3, fp
 8007f46:	e7e5      	b.n	8007f14 <_strtod_l+0x84>
 8007f48:	2100      	movs	r1, #0
 8007f4a:	e7ef      	b.n	8007f2c <_strtod_l+0x9c>
 8007f4c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007f4e:	b13a      	cbz	r2, 8007f60 <_strtod_l+0xd0>
 8007f50:	2135      	movs	r1, #53	@ 0x35
 8007f52:	a81c      	add	r0, sp, #112	@ 0x70
 8007f54:	f7ff ff3a 	bl	8007dcc <__copybits>
 8007f58:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007f5a:	9805      	ldr	r0, [sp, #20]
 8007f5c:	f7ff fb08 	bl	8007570 <_Bfree>
 8007f60:	3e01      	subs	r6, #1
 8007f62:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8007f64:	2e04      	cmp	r6, #4
 8007f66:	d806      	bhi.n	8007f76 <_strtod_l+0xe6>
 8007f68:	e8df f006 	tbb	[pc, r6]
 8007f6c:	201d0314 	.word	0x201d0314
 8007f70:	14          	.byte	0x14
 8007f71:	00          	.byte	0x00
 8007f72:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8007f76:	05e1      	lsls	r1, r4, #23
 8007f78:	bf48      	it	mi
 8007f7a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8007f7e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007f82:	0d1b      	lsrs	r3, r3, #20
 8007f84:	051b      	lsls	r3, r3, #20
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d1bb      	bne.n	8007f02 <_strtod_l+0x72>
 8007f8a:	f7fe fb31 	bl	80065f0 <__errno>
 8007f8e:	2322      	movs	r3, #34	@ 0x22
 8007f90:	6003      	str	r3, [r0, #0]
 8007f92:	e7b6      	b.n	8007f02 <_strtod_l+0x72>
 8007f94:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8007f98:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8007f9c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8007fa0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8007fa4:	e7e7      	b.n	8007f76 <_strtod_l+0xe6>
 8007fa6:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8008124 <_strtod_l+0x294>
 8007faa:	e7e4      	b.n	8007f76 <_strtod_l+0xe6>
 8007fac:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8007fb0:	f04f 3aff 	mov.w	sl, #4294967295
 8007fb4:	e7df      	b.n	8007f76 <_strtod_l+0xe6>
 8007fb6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007fb8:	1c5a      	adds	r2, r3, #1
 8007fba:	9219      	str	r2, [sp, #100]	@ 0x64
 8007fbc:	785b      	ldrb	r3, [r3, #1]
 8007fbe:	2b30      	cmp	r3, #48	@ 0x30
 8007fc0:	d0f9      	beq.n	8007fb6 <_strtod_l+0x126>
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d09d      	beq.n	8007f02 <_strtod_l+0x72>
 8007fc6:	2301      	movs	r3, #1
 8007fc8:	9309      	str	r3, [sp, #36]	@ 0x24
 8007fca:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007fcc:	930c      	str	r3, [sp, #48]	@ 0x30
 8007fce:	2300      	movs	r3, #0
 8007fd0:	9308      	str	r3, [sp, #32]
 8007fd2:	930a      	str	r3, [sp, #40]	@ 0x28
 8007fd4:	461f      	mov	r7, r3
 8007fd6:	220a      	movs	r2, #10
 8007fd8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8007fda:	7805      	ldrb	r5, [r0, #0]
 8007fdc:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8007fe0:	b2d9      	uxtb	r1, r3
 8007fe2:	2909      	cmp	r1, #9
 8007fe4:	d928      	bls.n	8008038 <_strtod_l+0x1a8>
 8007fe6:	494e      	ldr	r1, [pc, #312]	@ (8008120 <_strtod_l+0x290>)
 8007fe8:	2201      	movs	r2, #1
 8007fea:	f000 ffd5 	bl	8008f98 <strncmp>
 8007fee:	2800      	cmp	r0, #0
 8007ff0:	d032      	beq.n	8008058 <_strtod_l+0x1c8>
 8007ff2:	2000      	movs	r0, #0
 8007ff4:	462a      	mov	r2, r5
 8007ff6:	4681      	mov	r9, r0
 8007ff8:	463d      	mov	r5, r7
 8007ffa:	4603      	mov	r3, r0
 8007ffc:	2a65      	cmp	r2, #101	@ 0x65
 8007ffe:	d001      	beq.n	8008004 <_strtod_l+0x174>
 8008000:	2a45      	cmp	r2, #69	@ 0x45
 8008002:	d114      	bne.n	800802e <_strtod_l+0x19e>
 8008004:	b91d      	cbnz	r5, 800800e <_strtod_l+0x17e>
 8008006:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008008:	4302      	orrs	r2, r0
 800800a:	d095      	beq.n	8007f38 <_strtod_l+0xa8>
 800800c:	2500      	movs	r5, #0
 800800e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8008010:	1c62      	adds	r2, r4, #1
 8008012:	9219      	str	r2, [sp, #100]	@ 0x64
 8008014:	7862      	ldrb	r2, [r4, #1]
 8008016:	2a2b      	cmp	r2, #43	@ 0x2b
 8008018:	d077      	beq.n	800810a <_strtod_l+0x27a>
 800801a:	2a2d      	cmp	r2, #45	@ 0x2d
 800801c:	d07b      	beq.n	8008116 <_strtod_l+0x286>
 800801e:	f04f 0c00 	mov.w	ip, #0
 8008022:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8008026:	2909      	cmp	r1, #9
 8008028:	f240 8082 	bls.w	8008130 <_strtod_l+0x2a0>
 800802c:	9419      	str	r4, [sp, #100]	@ 0x64
 800802e:	f04f 0800 	mov.w	r8, #0
 8008032:	e0a2      	b.n	800817a <_strtod_l+0x2ea>
 8008034:	2300      	movs	r3, #0
 8008036:	e7c7      	b.n	8007fc8 <_strtod_l+0x138>
 8008038:	2f08      	cmp	r7, #8
 800803a:	bfd5      	itete	le
 800803c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800803e:	9908      	ldrgt	r1, [sp, #32]
 8008040:	fb02 3301 	mlale	r3, r2, r1, r3
 8008044:	fb02 3301 	mlagt	r3, r2, r1, r3
 8008048:	f100 0001 	add.w	r0, r0, #1
 800804c:	bfd4      	ite	le
 800804e:	930a      	strle	r3, [sp, #40]	@ 0x28
 8008050:	9308      	strgt	r3, [sp, #32]
 8008052:	3701      	adds	r7, #1
 8008054:	9019      	str	r0, [sp, #100]	@ 0x64
 8008056:	e7bf      	b.n	8007fd8 <_strtod_l+0x148>
 8008058:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800805a:	1c5a      	adds	r2, r3, #1
 800805c:	9219      	str	r2, [sp, #100]	@ 0x64
 800805e:	785a      	ldrb	r2, [r3, #1]
 8008060:	b37f      	cbz	r7, 80080c2 <_strtod_l+0x232>
 8008062:	4681      	mov	r9, r0
 8008064:	463d      	mov	r5, r7
 8008066:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800806a:	2b09      	cmp	r3, #9
 800806c:	d912      	bls.n	8008094 <_strtod_l+0x204>
 800806e:	2301      	movs	r3, #1
 8008070:	e7c4      	b.n	8007ffc <_strtod_l+0x16c>
 8008072:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008074:	1c5a      	adds	r2, r3, #1
 8008076:	9219      	str	r2, [sp, #100]	@ 0x64
 8008078:	785a      	ldrb	r2, [r3, #1]
 800807a:	3001      	adds	r0, #1
 800807c:	2a30      	cmp	r2, #48	@ 0x30
 800807e:	d0f8      	beq.n	8008072 <_strtod_l+0x1e2>
 8008080:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8008084:	2b08      	cmp	r3, #8
 8008086:	f200 84d3 	bhi.w	8008a30 <_strtod_l+0xba0>
 800808a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800808c:	930c      	str	r3, [sp, #48]	@ 0x30
 800808e:	4681      	mov	r9, r0
 8008090:	2000      	movs	r0, #0
 8008092:	4605      	mov	r5, r0
 8008094:	3a30      	subs	r2, #48	@ 0x30
 8008096:	f100 0301 	add.w	r3, r0, #1
 800809a:	d02a      	beq.n	80080f2 <_strtod_l+0x262>
 800809c:	4499      	add	r9, r3
 800809e:	eb00 0c05 	add.w	ip, r0, r5
 80080a2:	462b      	mov	r3, r5
 80080a4:	210a      	movs	r1, #10
 80080a6:	4563      	cmp	r3, ip
 80080a8:	d10d      	bne.n	80080c6 <_strtod_l+0x236>
 80080aa:	1c69      	adds	r1, r5, #1
 80080ac:	4401      	add	r1, r0
 80080ae:	4428      	add	r0, r5
 80080b0:	2808      	cmp	r0, #8
 80080b2:	dc16      	bgt.n	80080e2 <_strtod_l+0x252>
 80080b4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80080b6:	230a      	movs	r3, #10
 80080b8:	fb03 2300 	mla	r3, r3, r0, r2
 80080bc:	930a      	str	r3, [sp, #40]	@ 0x28
 80080be:	2300      	movs	r3, #0
 80080c0:	e018      	b.n	80080f4 <_strtod_l+0x264>
 80080c2:	4638      	mov	r0, r7
 80080c4:	e7da      	b.n	800807c <_strtod_l+0x1ec>
 80080c6:	2b08      	cmp	r3, #8
 80080c8:	f103 0301 	add.w	r3, r3, #1
 80080cc:	dc03      	bgt.n	80080d6 <_strtod_l+0x246>
 80080ce:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80080d0:	434e      	muls	r6, r1
 80080d2:	960a      	str	r6, [sp, #40]	@ 0x28
 80080d4:	e7e7      	b.n	80080a6 <_strtod_l+0x216>
 80080d6:	2b10      	cmp	r3, #16
 80080d8:	bfde      	ittt	le
 80080da:	9e08      	ldrle	r6, [sp, #32]
 80080dc:	434e      	mulle	r6, r1
 80080de:	9608      	strle	r6, [sp, #32]
 80080e0:	e7e1      	b.n	80080a6 <_strtod_l+0x216>
 80080e2:	280f      	cmp	r0, #15
 80080e4:	dceb      	bgt.n	80080be <_strtod_l+0x22e>
 80080e6:	9808      	ldr	r0, [sp, #32]
 80080e8:	230a      	movs	r3, #10
 80080ea:	fb03 2300 	mla	r3, r3, r0, r2
 80080ee:	9308      	str	r3, [sp, #32]
 80080f0:	e7e5      	b.n	80080be <_strtod_l+0x22e>
 80080f2:	4629      	mov	r1, r5
 80080f4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80080f6:	1c50      	adds	r0, r2, #1
 80080f8:	9019      	str	r0, [sp, #100]	@ 0x64
 80080fa:	7852      	ldrb	r2, [r2, #1]
 80080fc:	4618      	mov	r0, r3
 80080fe:	460d      	mov	r5, r1
 8008100:	e7b1      	b.n	8008066 <_strtod_l+0x1d6>
 8008102:	f04f 0900 	mov.w	r9, #0
 8008106:	2301      	movs	r3, #1
 8008108:	e77d      	b.n	8008006 <_strtod_l+0x176>
 800810a:	f04f 0c00 	mov.w	ip, #0
 800810e:	1ca2      	adds	r2, r4, #2
 8008110:	9219      	str	r2, [sp, #100]	@ 0x64
 8008112:	78a2      	ldrb	r2, [r4, #2]
 8008114:	e785      	b.n	8008022 <_strtod_l+0x192>
 8008116:	f04f 0c01 	mov.w	ip, #1
 800811a:	e7f8      	b.n	800810e <_strtod_l+0x27e>
 800811c:	08009fb8 	.word	0x08009fb8
 8008120:	08009fa0 	.word	0x08009fa0
 8008124:	7ff00000 	.word	0x7ff00000
 8008128:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800812a:	1c51      	adds	r1, r2, #1
 800812c:	9119      	str	r1, [sp, #100]	@ 0x64
 800812e:	7852      	ldrb	r2, [r2, #1]
 8008130:	2a30      	cmp	r2, #48	@ 0x30
 8008132:	d0f9      	beq.n	8008128 <_strtod_l+0x298>
 8008134:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8008138:	2908      	cmp	r1, #8
 800813a:	f63f af78 	bhi.w	800802e <_strtod_l+0x19e>
 800813e:	3a30      	subs	r2, #48	@ 0x30
 8008140:	920e      	str	r2, [sp, #56]	@ 0x38
 8008142:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008144:	920f      	str	r2, [sp, #60]	@ 0x3c
 8008146:	f04f 080a 	mov.w	r8, #10
 800814a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800814c:	1c56      	adds	r6, r2, #1
 800814e:	9619      	str	r6, [sp, #100]	@ 0x64
 8008150:	7852      	ldrb	r2, [r2, #1]
 8008152:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8008156:	f1be 0f09 	cmp.w	lr, #9
 800815a:	d939      	bls.n	80081d0 <_strtod_l+0x340>
 800815c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800815e:	1a76      	subs	r6, r6, r1
 8008160:	2e08      	cmp	r6, #8
 8008162:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8008166:	dc03      	bgt.n	8008170 <_strtod_l+0x2e0>
 8008168:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800816a:	4588      	cmp	r8, r1
 800816c:	bfa8      	it	ge
 800816e:	4688      	movge	r8, r1
 8008170:	f1bc 0f00 	cmp.w	ip, #0
 8008174:	d001      	beq.n	800817a <_strtod_l+0x2ea>
 8008176:	f1c8 0800 	rsb	r8, r8, #0
 800817a:	2d00      	cmp	r5, #0
 800817c:	d14e      	bne.n	800821c <_strtod_l+0x38c>
 800817e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008180:	4308      	orrs	r0, r1
 8008182:	f47f aebe 	bne.w	8007f02 <_strtod_l+0x72>
 8008186:	2b00      	cmp	r3, #0
 8008188:	f47f aed6 	bne.w	8007f38 <_strtod_l+0xa8>
 800818c:	2a69      	cmp	r2, #105	@ 0x69
 800818e:	d028      	beq.n	80081e2 <_strtod_l+0x352>
 8008190:	dc25      	bgt.n	80081de <_strtod_l+0x34e>
 8008192:	2a49      	cmp	r2, #73	@ 0x49
 8008194:	d025      	beq.n	80081e2 <_strtod_l+0x352>
 8008196:	2a4e      	cmp	r2, #78	@ 0x4e
 8008198:	f47f aece 	bne.w	8007f38 <_strtod_l+0xa8>
 800819c:	499b      	ldr	r1, [pc, #620]	@ (800840c <_strtod_l+0x57c>)
 800819e:	a819      	add	r0, sp, #100	@ 0x64
 80081a0:	f001 f9ee 	bl	8009580 <__match>
 80081a4:	2800      	cmp	r0, #0
 80081a6:	f43f aec7 	beq.w	8007f38 <_strtod_l+0xa8>
 80081aa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80081ac:	781b      	ldrb	r3, [r3, #0]
 80081ae:	2b28      	cmp	r3, #40	@ 0x28
 80081b0:	d12e      	bne.n	8008210 <_strtod_l+0x380>
 80081b2:	4997      	ldr	r1, [pc, #604]	@ (8008410 <_strtod_l+0x580>)
 80081b4:	aa1c      	add	r2, sp, #112	@ 0x70
 80081b6:	a819      	add	r0, sp, #100	@ 0x64
 80081b8:	f001 f9f6 	bl	80095a8 <__hexnan>
 80081bc:	2805      	cmp	r0, #5
 80081be:	d127      	bne.n	8008210 <_strtod_l+0x380>
 80081c0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80081c2:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80081c6:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80081ca:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80081ce:	e698      	b.n	8007f02 <_strtod_l+0x72>
 80081d0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80081d2:	fb08 2101 	mla	r1, r8, r1, r2
 80081d6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80081da:	920e      	str	r2, [sp, #56]	@ 0x38
 80081dc:	e7b5      	b.n	800814a <_strtod_l+0x2ba>
 80081de:	2a6e      	cmp	r2, #110	@ 0x6e
 80081e0:	e7da      	b.n	8008198 <_strtod_l+0x308>
 80081e2:	498c      	ldr	r1, [pc, #560]	@ (8008414 <_strtod_l+0x584>)
 80081e4:	a819      	add	r0, sp, #100	@ 0x64
 80081e6:	f001 f9cb 	bl	8009580 <__match>
 80081ea:	2800      	cmp	r0, #0
 80081ec:	f43f aea4 	beq.w	8007f38 <_strtod_l+0xa8>
 80081f0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80081f2:	4989      	ldr	r1, [pc, #548]	@ (8008418 <_strtod_l+0x588>)
 80081f4:	3b01      	subs	r3, #1
 80081f6:	a819      	add	r0, sp, #100	@ 0x64
 80081f8:	9319      	str	r3, [sp, #100]	@ 0x64
 80081fa:	f001 f9c1 	bl	8009580 <__match>
 80081fe:	b910      	cbnz	r0, 8008206 <_strtod_l+0x376>
 8008200:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008202:	3301      	adds	r3, #1
 8008204:	9319      	str	r3, [sp, #100]	@ 0x64
 8008206:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8008428 <_strtod_l+0x598>
 800820a:	f04f 0a00 	mov.w	sl, #0
 800820e:	e678      	b.n	8007f02 <_strtod_l+0x72>
 8008210:	4882      	ldr	r0, [pc, #520]	@ (800841c <_strtod_l+0x58c>)
 8008212:	f000 fef1 	bl	8008ff8 <nan>
 8008216:	ec5b ab10 	vmov	sl, fp, d0
 800821a:	e672      	b.n	8007f02 <_strtod_l+0x72>
 800821c:	eba8 0309 	sub.w	r3, r8, r9
 8008220:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008222:	9309      	str	r3, [sp, #36]	@ 0x24
 8008224:	2f00      	cmp	r7, #0
 8008226:	bf08      	it	eq
 8008228:	462f      	moveq	r7, r5
 800822a:	2d10      	cmp	r5, #16
 800822c:	462c      	mov	r4, r5
 800822e:	bfa8      	it	ge
 8008230:	2410      	movge	r4, #16
 8008232:	f7f8 f967 	bl	8000504 <__aeabi_ui2d>
 8008236:	2d09      	cmp	r5, #9
 8008238:	4682      	mov	sl, r0
 800823a:	468b      	mov	fp, r1
 800823c:	dc13      	bgt.n	8008266 <_strtod_l+0x3d6>
 800823e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008240:	2b00      	cmp	r3, #0
 8008242:	f43f ae5e 	beq.w	8007f02 <_strtod_l+0x72>
 8008246:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008248:	dd78      	ble.n	800833c <_strtod_l+0x4ac>
 800824a:	2b16      	cmp	r3, #22
 800824c:	dc5f      	bgt.n	800830e <_strtod_l+0x47e>
 800824e:	4974      	ldr	r1, [pc, #464]	@ (8008420 <_strtod_l+0x590>)
 8008250:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008254:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008258:	4652      	mov	r2, sl
 800825a:	465b      	mov	r3, fp
 800825c:	f7f8 f9cc 	bl	80005f8 <__aeabi_dmul>
 8008260:	4682      	mov	sl, r0
 8008262:	468b      	mov	fp, r1
 8008264:	e64d      	b.n	8007f02 <_strtod_l+0x72>
 8008266:	4b6e      	ldr	r3, [pc, #440]	@ (8008420 <_strtod_l+0x590>)
 8008268:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800826c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8008270:	f7f8 f9c2 	bl	80005f8 <__aeabi_dmul>
 8008274:	4682      	mov	sl, r0
 8008276:	9808      	ldr	r0, [sp, #32]
 8008278:	468b      	mov	fp, r1
 800827a:	f7f8 f943 	bl	8000504 <__aeabi_ui2d>
 800827e:	4602      	mov	r2, r0
 8008280:	460b      	mov	r3, r1
 8008282:	4650      	mov	r0, sl
 8008284:	4659      	mov	r1, fp
 8008286:	f7f8 f801 	bl	800028c <__adddf3>
 800828a:	2d0f      	cmp	r5, #15
 800828c:	4682      	mov	sl, r0
 800828e:	468b      	mov	fp, r1
 8008290:	ddd5      	ble.n	800823e <_strtod_l+0x3ae>
 8008292:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008294:	1b2c      	subs	r4, r5, r4
 8008296:	441c      	add	r4, r3
 8008298:	2c00      	cmp	r4, #0
 800829a:	f340 8096 	ble.w	80083ca <_strtod_l+0x53a>
 800829e:	f014 030f 	ands.w	r3, r4, #15
 80082a2:	d00a      	beq.n	80082ba <_strtod_l+0x42a>
 80082a4:	495e      	ldr	r1, [pc, #376]	@ (8008420 <_strtod_l+0x590>)
 80082a6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80082aa:	4652      	mov	r2, sl
 80082ac:	465b      	mov	r3, fp
 80082ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 80082b2:	f7f8 f9a1 	bl	80005f8 <__aeabi_dmul>
 80082b6:	4682      	mov	sl, r0
 80082b8:	468b      	mov	fp, r1
 80082ba:	f034 040f 	bics.w	r4, r4, #15
 80082be:	d073      	beq.n	80083a8 <_strtod_l+0x518>
 80082c0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80082c4:	dd48      	ble.n	8008358 <_strtod_l+0x4c8>
 80082c6:	2400      	movs	r4, #0
 80082c8:	46a0      	mov	r8, r4
 80082ca:	940a      	str	r4, [sp, #40]	@ 0x28
 80082cc:	46a1      	mov	r9, r4
 80082ce:	9a05      	ldr	r2, [sp, #20]
 80082d0:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8008428 <_strtod_l+0x598>
 80082d4:	2322      	movs	r3, #34	@ 0x22
 80082d6:	6013      	str	r3, [r2, #0]
 80082d8:	f04f 0a00 	mov.w	sl, #0
 80082dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80082de:	2b00      	cmp	r3, #0
 80082e0:	f43f ae0f 	beq.w	8007f02 <_strtod_l+0x72>
 80082e4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80082e6:	9805      	ldr	r0, [sp, #20]
 80082e8:	f7ff f942 	bl	8007570 <_Bfree>
 80082ec:	9805      	ldr	r0, [sp, #20]
 80082ee:	4649      	mov	r1, r9
 80082f0:	f7ff f93e 	bl	8007570 <_Bfree>
 80082f4:	9805      	ldr	r0, [sp, #20]
 80082f6:	4641      	mov	r1, r8
 80082f8:	f7ff f93a 	bl	8007570 <_Bfree>
 80082fc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80082fe:	9805      	ldr	r0, [sp, #20]
 8008300:	f7ff f936 	bl	8007570 <_Bfree>
 8008304:	9805      	ldr	r0, [sp, #20]
 8008306:	4621      	mov	r1, r4
 8008308:	f7ff f932 	bl	8007570 <_Bfree>
 800830c:	e5f9      	b.n	8007f02 <_strtod_l+0x72>
 800830e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008310:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8008314:	4293      	cmp	r3, r2
 8008316:	dbbc      	blt.n	8008292 <_strtod_l+0x402>
 8008318:	4c41      	ldr	r4, [pc, #260]	@ (8008420 <_strtod_l+0x590>)
 800831a:	f1c5 050f 	rsb	r5, r5, #15
 800831e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8008322:	4652      	mov	r2, sl
 8008324:	465b      	mov	r3, fp
 8008326:	e9d1 0100 	ldrd	r0, r1, [r1]
 800832a:	f7f8 f965 	bl	80005f8 <__aeabi_dmul>
 800832e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008330:	1b5d      	subs	r5, r3, r5
 8008332:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8008336:	e9d4 2300 	ldrd	r2, r3, [r4]
 800833a:	e78f      	b.n	800825c <_strtod_l+0x3cc>
 800833c:	3316      	adds	r3, #22
 800833e:	dba8      	blt.n	8008292 <_strtod_l+0x402>
 8008340:	4b37      	ldr	r3, [pc, #220]	@ (8008420 <_strtod_l+0x590>)
 8008342:	eba9 0808 	sub.w	r8, r9, r8
 8008346:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800834a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800834e:	4650      	mov	r0, sl
 8008350:	4659      	mov	r1, fp
 8008352:	f7f8 fa7b 	bl	800084c <__aeabi_ddiv>
 8008356:	e783      	b.n	8008260 <_strtod_l+0x3d0>
 8008358:	4b32      	ldr	r3, [pc, #200]	@ (8008424 <_strtod_l+0x594>)
 800835a:	9308      	str	r3, [sp, #32]
 800835c:	2300      	movs	r3, #0
 800835e:	1124      	asrs	r4, r4, #4
 8008360:	4650      	mov	r0, sl
 8008362:	4659      	mov	r1, fp
 8008364:	461e      	mov	r6, r3
 8008366:	2c01      	cmp	r4, #1
 8008368:	dc21      	bgt.n	80083ae <_strtod_l+0x51e>
 800836a:	b10b      	cbz	r3, 8008370 <_strtod_l+0x4e0>
 800836c:	4682      	mov	sl, r0
 800836e:	468b      	mov	fp, r1
 8008370:	492c      	ldr	r1, [pc, #176]	@ (8008424 <_strtod_l+0x594>)
 8008372:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8008376:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800837a:	4652      	mov	r2, sl
 800837c:	465b      	mov	r3, fp
 800837e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008382:	f7f8 f939 	bl	80005f8 <__aeabi_dmul>
 8008386:	4b28      	ldr	r3, [pc, #160]	@ (8008428 <_strtod_l+0x598>)
 8008388:	460a      	mov	r2, r1
 800838a:	400b      	ands	r3, r1
 800838c:	4927      	ldr	r1, [pc, #156]	@ (800842c <_strtod_l+0x59c>)
 800838e:	428b      	cmp	r3, r1
 8008390:	4682      	mov	sl, r0
 8008392:	d898      	bhi.n	80082c6 <_strtod_l+0x436>
 8008394:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8008398:	428b      	cmp	r3, r1
 800839a:	bf86      	itte	hi
 800839c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8008430 <_strtod_l+0x5a0>
 80083a0:	f04f 3aff 	movhi.w	sl, #4294967295
 80083a4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80083a8:	2300      	movs	r3, #0
 80083aa:	9308      	str	r3, [sp, #32]
 80083ac:	e07a      	b.n	80084a4 <_strtod_l+0x614>
 80083ae:	07e2      	lsls	r2, r4, #31
 80083b0:	d505      	bpl.n	80083be <_strtod_l+0x52e>
 80083b2:	9b08      	ldr	r3, [sp, #32]
 80083b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083b8:	f7f8 f91e 	bl	80005f8 <__aeabi_dmul>
 80083bc:	2301      	movs	r3, #1
 80083be:	9a08      	ldr	r2, [sp, #32]
 80083c0:	3208      	adds	r2, #8
 80083c2:	3601      	adds	r6, #1
 80083c4:	1064      	asrs	r4, r4, #1
 80083c6:	9208      	str	r2, [sp, #32]
 80083c8:	e7cd      	b.n	8008366 <_strtod_l+0x4d6>
 80083ca:	d0ed      	beq.n	80083a8 <_strtod_l+0x518>
 80083cc:	4264      	negs	r4, r4
 80083ce:	f014 020f 	ands.w	r2, r4, #15
 80083d2:	d00a      	beq.n	80083ea <_strtod_l+0x55a>
 80083d4:	4b12      	ldr	r3, [pc, #72]	@ (8008420 <_strtod_l+0x590>)
 80083d6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80083da:	4650      	mov	r0, sl
 80083dc:	4659      	mov	r1, fp
 80083de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083e2:	f7f8 fa33 	bl	800084c <__aeabi_ddiv>
 80083e6:	4682      	mov	sl, r0
 80083e8:	468b      	mov	fp, r1
 80083ea:	1124      	asrs	r4, r4, #4
 80083ec:	d0dc      	beq.n	80083a8 <_strtod_l+0x518>
 80083ee:	2c1f      	cmp	r4, #31
 80083f0:	dd20      	ble.n	8008434 <_strtod_l+0x5a4>
 80083f2:	2400      	movs	r4, #0
 80083f4:	46a0      	mov	r8, r4
 80083f6:	940a      	str	r4, [sp, #40]	@ 0x28
 80083f8:	46a1      	mov	r9, r4
 80083fa:	9a05      	ldr	r2, [sp, #20]
 80083fc:	2322      	movs	r3, #34	@ 0x22
 80083fe:	f04f 0a00 	mov.w	sl, #0
 8008402:	f04f 0b00 	mov.w	fp, #0
 8008406:	6013      	str	r3, [r2, #0]
 8008408:	e768      	b.n	80082dc <_strtod_l+0x44c>
 800840a:	bf00      	nop
 800840c:	08009d8d 	.word	0x08009d8d
 8008410:	08009fa4 	.word	0x08009fa4
 8008414:	08009d85 	.word	0x08009d85
 8008418:	08009dbc 	.word	0x08009dbc
 800841c:	0800a14d 	.word	0x0800a14d
 8008420:	08009ed8 	.word	0x08009ed8
 8008424:	08009eb0 	.word	0x08009eb0
 8008428:	7ff00000 	.word	0x7ff00000
 800842c:	7ca00000 	.word	0x7ca00000
 8008430:	7fefffff 	.word	0x7fefffff
 8008434:	f014 0310 	ands.w	r3, r4, #16
 8008438:	bf18      	it	ne
 800843a:	236a      	movne	r3, #106	@ 0x6a
 800843c:	4ea9      	ldr	r6, [pc, #676]	@ (80086e4 <_strtod_l+0x854>)
 800843e:	9308      	str	r3, [sp, #32]
 8008440:	4650      	mov	r0, sl
 8008442:	4659      	mov	r1, fp
 8008444:	2300      	movs	r3, #0
 8008446:	07e2      	lsls	r2, r4, #31
 8008448:	d504      	bpl.n	8008454 <_strtod_l+0x5c4>
 800844a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800844e:	f7f8 f8d3 	bl	80005f8 <__aeabi_dmul>
 8008452:	2301      	movs	r3, #1
 8008454:	1064      	asrs	r4, r4, #1
 8008456:	f106 0608 	add.w	r6, r6, #8
 800845a:	d1f4      	bne.n	8008446 <_strtod_l+0x5b6>
 800845c:	b10b      	cbz	r3, 8008462 <_strtod_l+0x5d2>
 800845e:	4682      	mov	sl, r0
 8008460:	468b      	mov	fp, r1
 8008462:	9b08      	ldr	r3, [sp, #32]
 8008464:	b1b3      	cbz	r3, 8008494 <_strtod_l+0x604>
 8008466:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800846a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800846e:	2b00      	cmp	r3, #0
 8008470:	4659      	mov	r1, fp
 8008472:	dd0f      	ble.n	8008494 <_strtod_l+0x604>
 8008474:	2b1f      	cmp	r3, #31
 8008476:	dd55      	ble.n	8008524 <_strtod_l+0x694>
 8008478:	2b34      	cmp	r3, #52	@ 0x34
 800847a:	bfde      	ittt	le
 800847c:	f04f 33ff 	movle.w	r3, #4294967295
 8008480:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8008484:	4093      	lslle	r3, r2
 8008486:	f04f 0a00 	mov.w	sl, #0
 800848a:	bfcc      	ite	gt
 800848c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8008490:	ea03 0b01 	andle.w	fp, r3, r1
 8008494:	2200      	movs	r2, #0
 8008496:	2300      	movs	r3, #0
 8008498:	4650      	mov	r0, sl
 800849a:	4659      	mov	r1, fp
 800849c:	f7f8 fb14 	bl	8000ac8 <__aeabi_dcmpeq>
 80084a0:	2800      	cmp	r0, #0
 80084a2:	d1a6      	bne.n	80083f2 <_strtod_l+0x562>
 80084a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80084a6:	9300      	str	r3, [sp, #0]
 80084a8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80084aa:	9805      	ldr	r0, [sp, #20]
 80084ac:	462b      	mov	r3, r5
 80084ae:	463a      	mov	r2, r7
 80084b0:	f7ff f8c6 	bl	8007640 <__s2b>
 80084b4:	900a      	str	r0, [sp, #40]	@ 0x28
 80084b6:	2800      	cmp	r0, #0
 80084b8:	f43f af05 	beq.w	80082c6 <_strtod_l+0x436>
 80084bc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80084be:	2a00      	cmp	r2, #0
 80084c0:	eba9 0308 	sub.w	r3, r9, r8
 80084c4:	bfa8      	it	ge
 80084c6:	2300      	movge	r3, #0
 80084c8:	9312      	str	r3, [sp, #72]	@ 0x48
 80084ca:	2400      	movs	r4, #0
 80084cc:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80084d0:	9316      	str	r3, [sp, #88]	@ 0x58
 80084d2:	46a0      	mov	r8, r4
 80084d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80084d6:	9805      	ldr	r0, [sp, #20]
 80084d8:	6859      	ldr	r1, [r3, #4]
 80084da:	f7ff f809 	bl	80074f0 <_Balloc>
 80084de:	4681      	mov	r9, r0
 80084e0:	2800      	cmp	r0, #0
 80084e2:	f43f aef4 	beq.w	80082ce <_strtod_l+0x43e>
 80084e6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80084e8:	691a      	ldr	r2, [r3, #16]
 80084ea:	3202      	adds	r2, #2
 80084ec:	f103 010c 	add.w	r1, r3, #12
 80084f0:	0092      	lsls	r2, r2, #2
 80084f2:	300c      	adds	r0, #12
 80084f4:	f000 fd72 	bl	8008fdc <memcpy>
 80084f8:	ec4b ab10 	vmov	d0, sl, fp
 80084fc:	9805      	ldr	r0, [sp, #20]
 80084fe:	aa1c      	add	r2, sp, #112	@ 0x70
 8008500:	a91b      	add	r1, sp, #108	@ 0x6c
 8008502:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8008506:	f7ff fbd7 	bl	8007cb8 <__d2b>
 800850a:	901a      	str	r0, [sp, #104]	@ 0x68
 800850c:	2800      	cmp	r0, #0
 800850e:	f43f aede 	beq.w	80082ce <_strtod_l+0x43e>
 8008512:	9805      	ldr	r0, [sp, #20]
 8008514:	2101      	movs	r1, #1
 8008516:	f7ff f929 	bl	800776c <__i2b>
 800851a:	4680      	mov	r8, r0
 800851c:	b948      	cbnz	r0, 8008532 <_strtod_l+0x6a2>
 800851e:	f04f 0800 	mov.w	r8, #0
 8008522:	e6d4      	b.n	80082ce <_strtod_l+0x43e>
 8008524:	f04f 32ff 	mov.w	r2, #4294967295
 8008528:	fa02 f303 	lsl.w	r3, r2, r3
 800852c:	ea03 0a0a 	and.w	sl, r3, sl
 8008530:	e7b0      	b.n	8008494 <_strtod_l+0x604>
 8008532:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8008534:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8008536:	2d00      	cmp	r5, #0
 8008538:	bfab      	itete	ge
 800853a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800853c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800853e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8008540:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8008542:	bfac      	ite	ge
 8008544:	18ef      	addge	r7, r5, r3
 8008546:	1b5e      	sublt	r6, r3, r5
 8008548:	9b08      	ldr	r3, [sp, #32]
 800854a:	1aed      	subs	r5, r5, r3
 800854c:	4415      	add	r5, r2
 800854e:	4b66      	ldr	r3, [pc, #408]	@ (80086e8 <_strtod_l+0x858>)
 8008550:	3d01      	subs	r5, #1
 8008552:	429d      	cmp	r5, r3
 8008554:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8008558:	da50      	bge.n	80085fc <_strtod_l+0x76c>
 800855a:	1b5b      	subs	r3, r3, r5
 800855c:	2b1f      	cmp	r3, #31
 800855e:	eba2 0203 	sub.w	r2, r2, r3
 8008562:	f04f 0101 	mov.w	r1, #1
 8008566:	dc3d      	bgt.n	80085e4 <_strtod_l+0x754>
 8008568:	fa01 f303 	lsl.w	r3, r1, r3
 800856c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800856e:	2300      	movs	r3, #0
 8008570:	9310      	str	r3, [sp, #64]	@ 0x40
 8008572:	18bd      	adds	r5, r7, r2
 8008574:	9b08      	ldr	r3, [sp, #32]
 8008576:	42af      	cmp	r7, r5
 8008578:	4416      	add	r6, r2
 800857a:	441e      	add	r6, r3
 800857c:	463b      	mov	r3, r7
 800857e:	bfa8      	it	ge
 8008580:	462b      	movge	r3, r5
 8008582:	42b3      	cmp	r3, r6
 8008584:	bfa8      	it	ge
 8008586:	4633      	movge	r3, r6
 8008588:	2b00      	cmp	r3, #0
 800858a:	bfc2      	ittt	gt
 800858c:	1aed      	subgt	r5, r5, r3
 800858e:	1af6      	subgt	r6, r6, r3
 8008590:	1aff      	subgt	r7, r7, r3
 8008592:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008594:	2b00      	cmp	r3, #0
 8008596:	dd16      	ble.n	80085c6 <_strtod_l+0x736>
 8008598:	4641      	mov	r1, r8
 800859a:	9805      	ldr	r0, [sp, #20]
 800859c:	461a      	mov	r2, r3
 800859e:	f7ff f9a5 	bl	80078ec <__pow5mult>
 80085a2:	4680      	mov	r8, r0
 80085a4:	2800      	cmp	r0, #0
 80085a6:	d0ba      	beq.n	800851e <_strtod_l+0x68e>
 80085a8:	4601      	mov	r1, r0
 80085aa:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80085ac:	9805      	ldr	r0, [sp, #20]
 80085ae:	f7ff f8f3 	bl	8007798 <__multiply>
 80085b2:	900e      	str	r0, [sp, #56]	@ 0x38
 80085b4:	2800      	cmp	r0, #0
 80085b6:	f43f ae8a 	beq.w	80082ce <_strtod_l+0x43e>
 80085ba:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80085bc:	9805      	ldr	r0, [sp, #20]
 80085be:	f7fe ffd7 	bl	8007570 <_Bfree>
 80085c2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80085c4:	931a      	str	r3, [sp, #104]	@ 0x68
 80085c6:	2d00      	cmp	r5, #0
 80085c8:	dc1d      	bgt.n	8008606 <_strtod_l+0x776>
 80085ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	dd23      	ble.n	8008618 <_strtod_l+0x788>
 80085d0:	4649      	mov	r1, r9
 80085d2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80085d4:	9805      	ldr	r0, [sp, #20]
 80085d6:	f7ff f989 	bl	80078ec <__pow5mult>
 80085da:	4681      	mov	r9, r0
 80085dc:	b9e0      	cbnz	r0, 8008618 <_strtod_l+0x788>
 80085de:	f04f 0900 	mov.w	r9, #0
 80085e2:	e674      	b.n	80082ce <_strtod_l+0x43e>
 80085e4:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80085e8:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80085ec:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80085f0:	35e2      	adds	r5, #226	@ 0xe2
 80085f2:	fa01 f305 	lsl.w	r3, r1, r5
 80085f6:	9310      	str	r3, [sp, #64]	@ 0x40
 80085f8:	9113      	str	r1, [sp, #76]	@ 0x4c
 80085fa:	e7ba      	b.n	8008572 <_strtod_l+0x6e2>
 80085fc:	2300      	movs	r3, #0
 80085fe:	9310      	str	r3, [sp, #64]	@ 0x40
 8008600:	2301      	movs	r3, #1
 8008602:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008604:	e7b5      	b.n	8008572 <_strtod_l+0x6e2>
 8008606:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008608:	9805      	ldr	r0, [sp, #20]
 800860a:	462a      	mov	r2, r5
 800860c:	f7ff f9c8 	bl	80079a0 <__lshift>
 8008610:	901a      	str	r0, [sp, #104]	@ 0x68
 8008612:	2800      	cmp	r0, #0
 8008614:	d1d9      	bne.n	80085ca <_strtod_l+0x73a>
 8008616:	e65a      	b.n	80082ce <_strtod_l+0x43e>
 8008618:	2e00      	cmp	r6, #0
 800861a:	dd07      	ble.n	800862c <_strtod_l+0x79c>
 800861c:	4649      	mov	r1, r9
 800861e:	9805      	ldr	r0, [sp, #20]
 8008620:	4632      	mov	r2, r6
 8008622:	f7ff f9bd 	bl	80079a0 <__lshift>
 8008626:	4681      	mov	r9, r0
 8008628:	2800      	cmp	r0, #0
 800862a:	d0d8      	beq.n	80085de <_strtod_l+0x74e>
 800862c:	2f00      	cmp	r7, #0
 800862e:	dd08      	ble.n	8008642 <_strtod_l+0x7b2>
 8008630:	4641      	mov	r1, r8
 8008632:	9805      	ldr	r0, [sp, #20]
 8008634:	463a      	mov	r2, r7
 8008636:	f7ff f9b3 	bl	80079a0 <__lshift>
 800863a:	4680      	mov	r8, r0
 800863c:	2800      	cmp	r0, #0
 800863e:	f43f ae46 	beq.w	80082ce <_strtod_l+0x43e>
 8008642:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008644:	9805      	ldr	r0, [sp, #20]
 8008646:	464a      	mov	r2, r9
 8008648:	f7ff fa32 	bl	8007ab0 <__mdiff>
 800864c:	4604      	mov	r4, r0
 800864e:	2800      	cmp	r0, #0
 8008650:	f43f ae3d 	beq.w	80082ce <_strtod_l+0x43e>
 8008654:	68c3      	ldr	r3, [r0, #12]
 8008656:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008658:	2300      	movs	r3, #0
 800865a:	60c3      	str	r3, [r0, #12]
 800865c:	4641      	mov	r1, r8
 800865e:	f7ff fa0b 	bl	8007a78 <__mcmp>
 8008662:	2800      	cmp	r0, #0
 8008664:	da46      	bge.n	80086f4 <_strtod_l+0x864>
 8008666:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008668:	ea53 030a 	orrs.w	r3, r3, sl
 800866c:	d16c      	bne.n	8008748 <_strtod_l+0x8b8>
 800866e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008672:	2b00      	cmp	r3, #0
 8008674:	d168      	bne.n	8008748 <_strtod_l+0x8b8>
 8008676:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800867a:	0d1b      	lsrs	r3, r3, #20
 800867c:	051b      	lsls	r3, r3, #20
 800867e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008682:	d961      	bls.n	8008748 <_strtod_l+0x8b8>
 8008684:	6963      	ldr	r3, [r4, #20]
 8008686:	b913      	cbnz	r3, 800868e <_strtod_l+0x7fe>
 8008688:	6923      	ldr	r3, [r4, #16]
 800868a:	2b01      	cmp	r3, #1
 800868c:	dd5c      	ble.n	8008748 <_strtod_l+0x8b8>
 800868e:	4621      	mov	r1, r4
 8008690:	2201      	movs	r2, #1
 8008692:	9805      	ldr	r0, [sp, #20]
 8008694:	f7ff f984 	bl	80079a0 <__lshift>
 8008698:	4641      	mov	r1, r8
 800869a:	4604      	mov	r4, r0
 800869c:	f7ff f9ec 	bl	8007a78 <__mcmp>
 80086a0:	2800      	cmp	r0, #0
 80086a2:	dd51      	ble.n	8008748 <_strtod_l+0x8b8>
 80086a4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80086a8:	9a08      	ldr	r2, [sp, #32]
 80086aa:	0d1b      	lsrs	r3, r3, #20
 80086ac:	051b      	lsls	r3, r3, #20
 80086ae:	2a00      	cmp	r2, #0
 80086b0:	d06b      	beq.n	800878a <_strtod_l+0x8fa>
 80086b2:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80086b6:	d868      	bhi.n	800878a <_strtod_l+0x8fa>
 80086b8:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80086bc:	f67f ae9d 	bls.w	80083fa <_strtod_l+0x56a>
 80086c0:	4b0a      	ldr	r3, [pc, #40]	@ (80086ec <_strtod_l+0x85c>)
 80086c2:	4650      	mov	r0, sl
 80086c4:	4659      	mov	r1, fp
 80086c6:	2200      	movs	r2, #0
 80086c8:	f7f7 ff96 	bl	80005f8 <__aeabi_dmul>
 80086cc:	4b08      	ldr	r3, [pc, #32]	@ (80086f0 <_strtod_l+0x860>)
 80086ce:	400b      	ands	r3, r1
 80086d0:	4682      	mov	sl, r0
 80086d2:	468b      	mov	fp, r1
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	f47f ae05 	bne.w	80082e4 <_strtod_l+0x454>
 80086da:	9a05      	ldr	r2, [sp, #20]
 80086dc:	2322      	movs	r3, #34	@ 0x22
 80086de:	6013      	str	r3, [r2, #0]
 80086e0:	e600      	b.n	80082e4 <_strtod_l+0x454>
 80086e2:	bf00      	nop
 80086e4:	08009fd0 	.word	0x08009fd0
 80086e8:	fffffc02 	.word	0xfffffc02
 80086ec:	39500000 	.word	0x39500000
 80086f0:	7ff00000 	.word	0x7ff00000
 80086f4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80086f8:	d165      	bne.n	80087c6 <_strtod_l+0x936>
 80086fa:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80086fc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008700:	b35a      	cbz	r2, 800875a <_strtod_l+0x8ca>
 8008702:	4a9f      	ldr	r2, [pc, #636]	@ (8008980 <_strtod_l+0xaf0>)
 8008704:	4293      	cmp	r3, r2
 8008706:	d12b      	bne.n	8008760 <_strtod_l+0x8d0>
 8008708:	9b08      	ldr	r3, [sp, #32]
 800870a:	4651      	mov	r1, sl
 800870c:	b303      	cbz	r3, 8008750 <_strtod_l+0x8c0>
 800870e:	4b9d      	ldr	r3, [pc, #628]	@ (8008984 <_strtod_l+0xaf4>)
 8008710:	465a      	mov	r2, fp
 8008712:	4013      	ands	r3, r2
 8008714:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8008718:	f04f 32ff 	mov.w	r2, #4294967295
 800871c:	d81b      	bhi.n	8008756 <_strtod_l+0x8c6>
 800871e:	0d1b      	lsrs	r3, r3, #20
 8008720:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008724:	fa02 f303 	lsl.w	r3, r2, r3
 8008728:	4299      	cmp	r1, r3
 800872a:	d119      	bne.n	8008760 <_strtod_l+0x8d0>
 800872c:	4b96      	ldr	r3, [pc, #600]	@ (8008988 <_strtod_l+0xaf8>)
 800872e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008730:	429a      	cmp	r2, r3
 8008732:	d102      	bne.n	800873a <_strtod_l+0x8aa>
 8008734:	3101      	adds	r1, #1
 8008736:	f43f adca 	beq.w	80082ce <_strtod_l+0x43e>
 800873a:	4b92      	ldr	r3, [pc, #584]	@ (8008984 <_strtod_l+0xaf4>)
 800873c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800873e:	401a      	ands	r2, r3
 8008740:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8008744:	f04f 0a00 	mov.w	sl, #0
 8008748:	9b08      	ldr	r3, [sp, #32]
 800874a:	2b00      	cmp	r3, #0
 800874c:	d1b8      	bne.n	80086c0 <_strtod_l+0x830>
 800874e:	e5c9      	b.n	80082e4 <_strtod_l+0x454>
 8008750:	f04f 33ff 	mov.w	r3, #4294967295
 8008754:	e7e8      	b.n	8008728 <_strtod_l+0x898>
 8008756:	4613      	mov	r3, r2
 8008758:	e7e6      	b.n	8008728 <_strtod_l+0x898>
 800875a:	ea53 030a 	orrs.w	r3, r3, sl
 800875e:	d0a1      	beq.n	80086a4 <_strtod_l+0x814>
 8008760:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008762:	b1db      	cbz	r3, 800879c <_strtod_l+0x90c>
 8008764:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008766:	4213      	tst	r3, r2
 8008768:	d0ee      	beq.n	8008748 <_strtod_l+0x8b8>
 800876a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800876c:	9a08      	ldr	r2, [sp, #32]
 800876e:	4650      	mov	r0, sl
 8008770:	4659      	mov	r1, fp
 8008772:	b1bb      	cbz	r3, 80087a4 <_strtod_l+0x914>
 8008774:	f7ff fb6e 	bl	8007e54 <sulp>
 8008778:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800877c:	ec53 2b10 	vmov	r2, r3, d0
 8008780:	f7f7 fd84 	bl	800028c <__adddf3>
 8008784:	4682      	mov	sl, r0
 8008786:	468b      	mov	fp, r1
 8008788:	e7de      	b.n	8008748 <_strtod_l+0x8b8>
 800878a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800878e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8008792:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8008796:	f04f 3aff 	mov.w	sl, #4294967295
 800879a:	e7d5      	b.n	8008748 <_strtod_l+0x8b8>
 800879c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800879e:	ea13 0f0a 	tst.w	r3, sl
 80087a2:	e7e1      	b.n	8008768 <_strtod_l+0x8d8>
 80087a4:	f7ff fb56 	bl	8007e54 <sulp>
 80087a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80087ac:	ec53 2b10 	vmov	r2, r3, d0
 80087b0:	f7f7 fd6a 	bl	8000288 <__aeabi_dsub>
 80087b4:	2200      	movs	r2, #0
 80087b6:	2300      	movs	r3, #0
 80087b8:	4682      	mov	sl, r0
 80087ba:	468b      	mov	fp, r1
 80087bc:	f7f8 f984 	bl	8000ac8 <__aeabi_dcmpeq>
 80087c0:	2800      	cmp	r0, #0
 80087c2:	d0c1      	beq.n	8008748 <_strtod_l+0x8b8>
 80087c4:	e619      	b.n	80083fa <_strtod_l+0x56a>
 80087c6:	4641      	mov	r1, r8
 80087c8:	4620      	mov	r0, r4
 80087ca:	f7ff facd 	bl	8007d68 <__ratio>
 80087ce:	ec57 6b10 	vmov	r6, r7, d0
 80087d2:	2200      	movs	r2, #0
 80087d4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80087d8:	4630      	mov	r0, r6
 80087da:	4639      	mov	r1, r7
 80087dc:	f7f8 f988 	bl	8000af0 <__aeabi_dcmple>
 80087e0:	2800      	cmp	r0, #0
 80087e2:	d06f      	beq.n	80088c4 <_strtod_l+0xa34>
 80087e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d17a      	bne.n	80088e0 <_strtod_l+0xa50>
 80087ea:	f1ba 0f00 	cmp.w	sl, #0
 80087ee:	d158      	bne.n	80088a2 <_strtod_l+0xa12>
 80087f0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80087f2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d15a      	bne.n	80088b0 <_strtod_l+0xa20>
 80087fa:	4b64      	ldr	r3, [pc, #400]	@ (800898c <_strtod_l+0xafc>)
 80087fc:	2200      	movs	r2, #0
 80087fe:	4630      	mov	r0, r6
 8008800:	4639      	mov	r1, r7
 8008802:	f7f8 f96b 	bl	8000adc <__aeabi_dcmplt>
 8008806:	2800      	cmp	r0, #0
 8008808:	d159      	bne.n	80088be <_strtod_l+0xa2e>
 800880a:	4630      	mov	r0, r6
 800880c:	4639      	mov	r1, r7
 800880e:	4b60      	ldr	r3, [pc, #384]	@ (8008990 <_strtod_l+0xb00>)
 8008810:	2200      	movs	r2, #0
 8008812:	f7f7 fef1 	bl	80005f8 <__aeabi_dmul>
 8008816:	4606      	mov	r6, r0
 8008818:	460f      	mov	r7, r1
 800881a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800881e:	9606      	str	r6, [sp, #24]
 8008820:	9307      	str	r3, [sp, #28]
 8008822:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008826:	4d57      	ldr	r5, [pc, #348]	@ (8008984 <_strtod_l+0xaf4>)
 8008828:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800882c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800882e:	401d      	ands	r5, r3
 8008830:	4b58      	ldr	r3, [pc, #352]	@ (8008994 <_strtod_l+0xb04>)
 8008832:	429d      	cmp	r5, r3
 8008834:	f040 80b2 	bne.w	800899c <_strtod_l+0xb0c>
 8008838:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800883a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800883e:	ec4b ab10 	vmov	d0, sl, fp
 8008842:	f7ff f9c9 	bl	8007bd8 <__ulp>
 8008846:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800884a:	ec51 0b10 	vmov	r0, r1, d0
 800884e:	f7f7 fed3 	bl	80005f8 <__aeabi_dmul>
 8008852:	4652      	mov	r2, sl
 8008854:	465b      	mov	r3, fp
 8008856:	f7f7 fd19 	bl	800028c <__adddf3>
 800885a:	460b      	mov	r3, r1
 800885c:	4949      	ldr	r1, [pc, #292]	@ (8008984 <_strtod_l+0xaf4>)
 800885e:	4a4e      	ldr	r2, [pc, #312]	@ (8008998 <_strtod_l+0xb08>)
 8008860:	4019      	ands	r1, r3
 8008862:	4291      	cmp	r1, r2
 8008864:	4682      	mov	sl, r0
 8008866:	d942      	bls.n	80088ee <_strtod_l+0xa5e>
 8008868:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800886a:	4b47      	ldr	r3, [pc, #284]	@ (8008988 <_strtod_l+0xaf8>)
 800886c:	429a      	cmp	r2, r3
 800886e:	d103      	bne.n	8008878 <_strtod_l+0x9e8>
 8008870:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008872:	3301      	adds	r3, #1
 8008874:	f43f ad2b 	beq.w	80082ce <_strtod_l+0x43e>
 8008878:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8008988 <_strtod_l+0xaf8>
 800887c:	f04f 3aff 	mov.w	sl, #4294967295
 8008880:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008882:	9805      	ldr	r0, [sp, #20]
 8008884:	f7fe fe74 	bl	8007570 <_Bfree>
 8008888:	9805      	ldr	r0, [sp, #20]
 800888a:	4649      	mov	r1, r9
 800888c:	f7fe fe70 	bl	8007570 <_Bfree>
 8008890:	9805      	ldr	r0, [sp, #20]
 8008892:	4641      	mov	r1, r8
 8008894:	f7fe fe6c 	bl	8007570 <_Bfree>
 8008898:	9805      	ldr	r0, [sp, #20]
 800889a:	4621      	mov	r1, r4
 800889c:	f7fe fe68 	bl	8007570 <_Bfree>
 80088a0:	e618      	b.n	80084d4 <_strtod_l+0x644>
 80088a2:	f1ba 0f01 	cmp.w	sl, #1
 80088a6:	d103      	bne.n	80088b0 <_strtod_l+0xa20>
 80088a8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	f43f ada5 	beq.w	80083fa <_strtod_l+0x56a>
 80088b0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8008960 <_strtod_l+0xad0>
 80088b4:	4f35      	ldr	r7, [pc, #212]	@ (800898c <_strtod_l+0xafc>)
 80088b6:	ed8d 7b06 	vstr	d7, [sp, #24]
 80088ba:	2600      	movs	r6, #0
 80088bc:	e7b1      	b.n	8008822 <_strtod_l+0x992>
 80088be:	4f34      	ldr	r7, [pc, #208]	@ (8008990 <_strtod_l+0xb00>)
 80088c0:	2600      	movs	r6, #0
 80088c2:	e7aa      	b.n	800881a <_strtod_l+0x98a>
 80088c4:	4b32      	ldr	r3, [pc, #200]	@ (8008990 <_strtod_l+0xb00>)
 80088c6:	4630      	mov	r0, r6
 80088c8:	4639      	mov	r1, r7
 80088ca:	2200      	movs	r2, #0
 80088cc:	f7f7 fe94 	bl	80005f8 <__aeabi_dmul>
 80088d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80088d2:	4606      	mov	r6, r0
 80088d4:	460f      	mov	r7, r1
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d09f      	beq.n	800881a <_strtod_l+0x98a>
 80088da:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80088de:	e7a0      	b.n	8008822 <_strtod_l+0x992>
 80088e0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8008968 <_strtod_l+0xad8>
 80088e4:	ed8d 7b06 	vstr	d7, [sp, #24]
 80088e8:	ec57 6b17 	vmov	r6, r7, d7
 80088ec:	e799      	b.n	8008822 <_strtod_l+0x992>
 80088ee:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80088f2:	9b08      	ldr	r3, [sp, #32]
 80088f4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d1c1      	bne.n	8008880 <_strtod_l+0x9f0>
 80088fc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008900:	0d1b      	lsrs	r3, r3, #20
 8008902:	051b      	lsls	r3, r3, #20
 8008904:	429d      	cmp	r5, r3
 8008906:	d1bb      	bne.n	8008880 <_strtod_l+0x9f0>
 8008908:	4630      	mov	r0, r6
 800890a:	4639      	mov	r1, r7
 800890c:	f7f8 f9d4 	bl	8000cb8 <__aeabi_d2lz>
 8008910:	f7f7 fe44 	bl	800059c <__aeabi_l2d>
 8008914:	4602      	mov	r2, r0
 8008916:	460b      	mov	r3, r1
 8008918:	4630      	mov	r0, r6
 800891a:	4639      	mov	r1, r7
 800891c:	f7f7 fcb4 	bl	8000288 <__aeabi_dsub>
 8008920:	460b      	mov	r3, r1
 8008922:	4602      	mov	r2, r0
 8008924:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8008928:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800892c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800892e:	ea46 060a 	orr.w	r6, r6, sl
 8008932:	431e      	orrs	r6, r3
 8008934:	d06f      	beq.n	8008a16 <_strtod_l+0xb86>
 8008936:	a30e      	add	r3, pc, #56	@ (adr r3, 8008970 <_strtod_l+0xae0>)
 8008938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800893c:	f7f8 f8ce 	bl	8000adc <__aeabi_dcmplt>
 8008940:	2800      	cmp	r0, #0
 8008942:	f47f accf 	bne.w	80082e4 <_strtod_l+0x454>
 8008946:	a30c      	add	r3, pc, #48	@ (adr r3, 8008978 <_strtod_l+0xae8>)
 8008948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800894c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008950:	f7f8 f8e2 	bl	8000b18 <__aeabi_dcmpgt>
 8008954:	2800      	cmp	r0, #0
 8008956:	d093      	beq.n	8008880 <_strtod_l+0x9f0>
 8008958:	e4c4      	b.n	80082e4 <_strtod_l+0x454>
 800895a:	bf00      	nop
 800895c:	f3af 8000 	nop.w
 8008960:	00000000 	.word	0x00000000
 8008964:	bff00000 	.word	0xbff00000
 8008968:	00000000 	.word	0x00000000
 800896c:	3ff00000 	.word	0x3ff00000
 8008970:	94a03595 	.word	0x94a03595
 8008974:	3fdfffff 	.word	0x3fdfffff
 8008978:	35afe535 	.word	0x35afe535
 800897c:	3fe00000 	.word	0x3fe00000
 8008980:	000fffff 	.word	0x000fffff
 8008984:	7ff00000 	.word	0x7ff00000
 8008988:	7fefffff 	.word	0x7fefffff
 800898c:	3ff00000 	.word	0x3ff00000
 8008990:	3fe00000 	.word	0x3fe00000
 8008994:	7fe00000 	.word	0x7fe00000
 8008998:	7c9fffff 	.word	0x7c9fffff
 800899c:	9b08      	ldr	r3, [sp, #32]
 800899e:	b323      	cbz	r3, 80089ea <_strtod_l+0xb5a>
 80089a0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80089a4:	d821      	bhi.n	80089ea <_strtod_l+0xb5a>
 80089a6:	a328      	add	r3, pc, #160	@ (adr r3, 8008a48 <_strtod_l+0xbb8>)
 80089a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089ac:	4630      	mov	r0, r6
 80089ae:	4639      	mov	r1, r7
 80089b0:	f7f8 f89e 	bl	8000af0 <__aeabi_dcmple>
 80089b4:	b1a0      	cbz	r0, 80089e0 <_strtod_l+0xb50>
 80089b6:	4639      	mov	r1, r7
 80089b8:	4630      	mov	r0, r6
 80089ba:	f7f8 f8f5 	bl	8000ba8 <__aeabi_d2uiz>
 80089be:	2801      	cmp	r0, #1
 80089c0:	bf38      	it	cc
 80089c2:	2001      	movcc	r0, #1
 80089c4:	f7f7 fd9e 	bl	8000504 <__aeabi_ui2d>
 80089c8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80089ca:	4606      	mov	r6, r0
 80089cc:	460f      	mov	r7, r1
 80089ce:	b9fb      	cbnz	r3, 8008a10 <_strtod_l+0xb80>
 80089d0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80089d4:	9014      	str	r0, [sp, #80]	@ 0x50
 80089d6:	9315      	str	r3, [sp, #84]	@ 0x54
 80089d8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80089dc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80089e0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80089e2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80089e6:	1b5b      	subs	r3, r3, r5
 80089e8:	9311      	str	r3, [sp, #68]	@ 0x44
 80089ea:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80089ee:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80089f2:	f7ff f8f1 	bl	8007bd8 <__ulp>
 80089f6:	4650      	mov	r0, sl
 80089f8:	ec53 2b10 	vmov	r2, r3, d0
 80089fc:	4659      	mov	r1, fp
 80089fe:	f7f7 fdfb 	bl	80005f8 <__aeabi_dmul>
 8008a02:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8008a06:	f7f7 fc41 	bl	800028c <__adddf3>
 8008a0a:	4682      	mov	sl, r0
 8008a0c:	468b      	mov	fp, r1
 8008a0e:	e770      	b.n	80088f2 <_strtod_l+0xa62>
 8008a10:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8008a14:	e7e0      	b.n	80089d8 <_strtod_l+0xb48>
 8008a16:	a30e      	add	r3, pc, #56	@ (adr r3, 8008a50 <_strtod_l+0xbc0>)
 8008a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a1c:	f7f8 f85e 	bl	8000adc <__aeabi_dcmplt>
 8008a20:	e798      	b.n	8008954 <_strtod_l+0xac4>
 8008a22:	2300      	movs	r3, #0
 8008a24:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008a26:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8008a28:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008a2a:	6013      	str	r3, [r2, #0]
 8008a2c:	f7ff ba6d 	b.w	8007f0a <_strtod_l+0x7a>
 8008a30:	2a65      	cmp	r2, #101	@ 0x65
 8008a32:	f43f ab66 	beq.w	8008102 <_strtod_l+0x272>
 8008a36:	2a45      	cmp	r2, #69	@ 0x45
 8008a38:	f43f ab63 	beq.w	8008102 <_strtod_l+0x272>
 8008a3c:	2301      	movs	r3, #1
 8008a3e:	f7ff bb9e 	b.w	800817e <_strtod_l+0x2ee>
 8008a42:	bf00      	nop
 8008a44:	f3af 8000 	nop.w
 8008a48:	ffc00000 	.word	0xffc00000
 8008a4c:	41dfffff 	.word	0x41dfffff
 8008a50:	94a03595 	.word	0x94a03595
 8008a54:	3fcfffff 	.word	0x3fcfffff

08008a58 <_strtod_r>:
 8008a58:	4b01      	ldr	r3, [pc, #4]	@ (8008a60 <_strtod_r+0x8>)
 8008a5a:	f7ff ba19 	b.w	8007e90 <_strtod_l>
 8008a5e:	bf00      	nop
 8008a60:	20000068 	.word	0x20000068

08008a64 <_strtol_l.constprop.0>:
 8008a64:	2b24      	cmp	r3, #36	@ 0x24
 8008a66:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a6a:	4686      	mov	lr, r0
 8008a6c:	4690      	mov	r8, r2
 8008a6e:	d801      	bhi.n	8008a74 <_strtol_l.constprop.0+0x10>
 8008a70:	2b01      	cmp	r3, #1
 8008a72:	d106      	bne.n	8008a82 <_strtol_l.constprop.0+0x1e>
 8008a74:	f7fd fdbc 	bl	80065f0 <__errno>
 8008a78:	2316      	movs	r3, #22
 8008a7a:	6003      	str	r3, [r0, #0]
 8008a7c:	2000      	movs	r0, #0
 8008a7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a82:	4834      	ldr	r0, [pc, #208]	@ (8008b54 <_strtol_l.constprop.0+0xf0>)
 8008a84:	460d      	mov	r5, r1
 8008a86:	462a      	mov	r2, r5
 8008a88:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008a8c:	5d06      	ldrb	r6, [r0, r4]
 8008a8e:	f016 0608 	ands.w	r6, r6, #8
 8008a92:	d1f8      	bne.n	8008a86 <_strtol_l.constprop.0+0x22>
 8008a94:	2c2d      	cmp	r4, #45	@ 0x2d
 8008a96:	d12d      	bne.n	8008af4 <_strtol_l.constprop.0+0x90>
 8008a98:	782c      	ldrb	r4, [r5, #0]
 8008a9a:	2601      	movs	r6, #1
 8008a9c:	1c95      	adds	r5, r2, #2
 8008a9e:	f033 0210 	bics.w	r2, r3, #16
 8008aa2:	d109      	bne.n	8008ab8 <_strtol_l.constprop.0+0x54>
 8008aa4:	2c30      	cmp	r4, #48	@ 0x30
 8008aa6:	d12a      	bne.n	8008afe <_strtol_l.constprop.0+0x9a>
 8008aa8:	782a      	ldrb	r2, [r5, #0]
 8008aaa:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008aae:	2a58      	cmp	r2, #88	@ 0x58
 8008ab0:	d125      	bne.n	8008afe <_strtol_l.constprop.0+0x9a>
 8008ab2:	786c      	ldrb	r4, [r5, #1]
 8008ab4:	2310      	movs	r3, #16
 8008ab6:	3502      	adds	r5, #2
 8008ab8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8008abc:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008ac0:	2200      	movs	r2, #0
 8008ac2:	fbbc f9f3 	udiv	r9, ip, r3
 8008ac6:	4610      	mov	r0, r2
 8008ac8:	fb03 ca19 	mls	sl, r3, r9, ip
 8008acc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8008ad0:	2f09      	cmp	r7, #9
 8008ad2:	d81b      	bhi.n	8008b0c <_strtol_l.constprop.0+0xa8>
 8008ad4:	463c      	mov	r4, r7
 8008ad6:	42a3      	cmp	r3, r4
 8008ad8:	dd27      	ble.n	8008b2a <_strtol_l.constprop.0+0xc6>
 8008ada:	1c57      	adds	r7, r2, #1
 8008adc:	d007      	beq.n	8008aee <_strtol_l.constprop.0+0x8a>
 8008ade:	4581      	cmp	r9, r0
 8008ae0:	d320      	bcc.n	8008b24 <_strtol_l.constprop.0+0xc0>
 8008ae2:	d101      	bne.n	8008ae8 <_strtol_l.constprop.0+0x84>
 8008ae4:	45a2      	cmp	sl, r4
 8008ae6:	db1d      	blt.n	8008b24 <_strtol_l.constprop.0+0xc0>
 8008ae8:	fb00 4003 	mla	r0, r0, r3, r4
 8008aec:	2201      	movs	r2, #1
 8008aee:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008af2:	e7eb      	b.n	8008acc <_strtol_l.constprop.0+0x68>
 8008af4:	2c2b      	cmp	r4, #43	@ 0x2b
 8008af6:	bf04      	itt	eq
 8008af8:	782c      	ldrbeq	r4, [r5, #0]
 8008afa:	1c95      	addeq	r5, r2, #2
 8008afc:	e7cf      	b.n	8008a9e <_strtol_l.constprop.0+0x3a>
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d1da      	bne.n	8008ab8 <_strtol_l.constprop.0+0x54>
 8008b02:	2c30      	cmp	r4, #48	@ 0x30
 8008b04:	bf0c      	ite	eq
 8008b06:	2308      	moveq	r3, #8
 8008b08:	230a      	movne	r3, #10
 8008b0a:	e7d5      	b.n	8008ab8 <_strtol_l.constprop.0+0x54>
 8008b0c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8008b10:	2f19      	cmp	r7, #25
 8008b12:	d801      	bhi.n	8008b18 <_strtol_l.constprop.0+0xb4>
 8008b14:	3c37      	subs	r4, #55	@ 0x37
 8008b16:	e7de      	b.n	8008ad6 <_strtol_l.constprop.0+0x72>
 8008b18:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8008b1c:	2f19      	cmp	r7, #25
 8008b1e:	d804      	bhi.n	8008b2a <_strtol_l.constprop.0+0xc6>
 8008b20:	3c57      	subs	r4, #87	@ 0x57
 8008b22:	e7d8      	b.n	8008ad6 <_strtol_l.constprop.0+0x72>
 8008b24:	f04f 32ff 	mov.w	r2, #4294967295
 8008b28:	e7e1      	b.n	8008aee <_strtol_l.constprop.0+0x8a>
 8008b2a:	1c53      	adds	r3, r2, #1
 8008b2c:	d108      	bne.n	8008b40 <_strtol_l.constprop.0+0xdc>
 8008b2e:	2322      	movs	r3, #34	@ 0x22
 8008b30:	f8ce 3000 	str.w	r3, [lr]
 8008b34:	4660      	mov	r0, ip
 8008b36:	f1b8 0f00 	cmp.w	r8, #0
 8008b3a:	d0a0      	beq.n	8008a7e <_strtol_l.constprop.0+0x1a>
 8008b3c:	1e69      	subs	r1, r5, #1
 8008b3e:	e006      	b.n	8008b4e <_strtol_l.constprop.0+0xea>
 8008b40:	b106      	cbz	r6, 8008b44 <_strtol_l.constprop.0+0xe0>
 8008b42:	4240      	negs	r0, r0
 8008b44:	f1b8 0f00 	cmp.w	r8, #0
 8008b48:	d099      	beq.n	8008a7e <_strtol_l.constprop.0+0x1a>
 8008b4a:	2a00      	cmp	r2, #0
 8008b4c:	d1f6      	bne.n	8008b3c <_strtol_l.constprop.0+0xd8>
 8008b4e:	f8c8 1000 	str.w	r1, [r8]
 8008b52:	e794      	b.n	8008a7e <_strtol_l.constprop.0+0x1a>
 8008b54:	08009ff9 	.word	0x08009ff9

08008b58 <_strtol_r>:
 8008b58:	f7ff bf84 	b.w	8008a64 <_strtol_l.constprop.0>

08008b5c <__ssputs_r>:
 8008b5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b60:	688e      	ldr	r6, [r1, #8]
 8008b62:	461f      	mov	r7, r3
 8008b64:	42be      	cmp	r6, r7
 8008b66:	680b      	ldr	r3, [r1, #0]
 8008b68:	4682      	mov	sl, r0
 8008b6a:	460c      	mov	r4, r1
 8008b6c:	4690      	mov	r8, r2
 8008b6e:	d82d      	bhi.n	8008bcc <__ssputs_r+0x70>
 8008b70:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008b74:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008b78:	d026      	beq.n	8008bc8 <__ssputs_r+0x6c>
 8008b7a:	6965      	ldr	r5, [r4, #20]
 8008b7c:	6909      	ldr	r1, [r1, #16]
 8008b7e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008b82:	eba3 0901 	sub.w	r9, r3, r1
 8008b86:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008b8a:	1c7b      	adds	r3, r7, #1
 8008b8c:	444b      	add	r3, r9
 8008b8e:	106d      	asrs	r5, r5, #1
 8008b90:	429d      	cmp	r5, r3
 8008b92:	bf38      	it	cc
 8008b94:	461d      	movcc	r5, r3
 8008b96:	0553      	lsls	r3, r2, #21
 8008b98:	d527      	bpl.n	8008bea <__ssputs_r+0x8e>
 8008b9a:	4629      	mov	r1, r5
 8008b9c:	f7fe fc1c 	bl	80073d8 <_malloc_r>
 8008ba0:	4606      	mov	r6, r0
 8008ba2:	b360      	cbz	r0, 8008bfe <__ssputs_r+0xa2>
 8008ba4:	6921      	ldr	r1, [r4, #16]
 8008ba6:	464a      	mov	r2, r9
 8008ba8:	f000 fa18 	bl	8008fdc <memcpy>
 8008bac:	89a3      	ldrh	r3, [r4, #12]
 8008bae:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008bb2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008bb6:	81a3      	strh	r3, [r4, #12]
 8008bb8:	6126      	str	r6, [r4, #16]
 8008bba:	6165      	str	r5, [r4, #20]
 8008bbc:	444e      	add	r6, r9
 8008bbe:	eba5 0509 	sub.w	r5, r5, r9
 8008bc2:	6026      	str	r6, [r4, #0]
 8008bc4:	60a5      	str	r5, [r4, #8]
 8008bc6:	463e      	mov	r6, r7
 8008bc8:	42be      	cmp	r6, r7
 8008bca:	d900      	bls.n	8008bce <__ssputs_r+0x72>
 8008bcc:	463e      	mov	r6, r7
 8008bce:	6820      	ldr	r0, [r4, #0]
 8008bd0:	4632      	mov	r2, r6
 8008bd2:	4641      	mov	r1, r8
 8008bd4:	f000 f9c6 	bl	8008f64 <memmove>
 8008bd8:	68a3      	ldr	r3, [r4, #8]
 8008bda:	1b9b      	subs	r3, r3, r6
 8008bdc:	60a3      	str	r3, [r4, #8]
 8008bde:	6823      	ldr	r3, [r4, #0]
 8008be0:	4433      	add	r3, r6
 8008be2:	6023      	str	r3, [r4, #0]
 8008be4:	2000      	movs	r0, #0
 8008be6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bea:	462a      	mov	r2, r5
 8008bec:	f000 fd89 	bl	8009702 <_realloc_r>
 8008bf0:	4606      	mov	r6, r0
 8008bf2:	2800      	cmp	r0, #0
 8008bf4:	d1e0      	bne.n	8008bb8 <__ssputs_r+0x5c>
 8008bf6:	6921      	ldr	r1, [r4, #16]
 8008bf8:	4650      	mov	r0, sl
 8008bfa:	f7fe fb79 	bl	80072f0 <_free_r>
 8008bfe:	230c      	movs	r3, #12
 8008c00:	f8ca 3000 	str.w	r3, [sl]
 8008c04:	89a3      	ldrh	r3, [r4, #12]
 8008c06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008c0a:	81a3      	strh	r3, [r4, #12]
 8008c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8008c10:	e7e9      	b.n	8008be6 <__ssputs_r+0x8a>
	...

08008c14 <_svfiprintf_r>:
 8008c14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c18:	4698      	mov	r8, r3
 8008c1a:	898b      	ldrh	r3, [r1, #12]
 8008c1c:	061b      	lsls	r3, r3, #24
 8008c1e:	b09d      	sub	sp, #116	@ 0x74
 8008c20:	4607      	mov	r7, r0
 8008c22:	460d      	mov	r5, r1
 8008c24:	4614      	mov	r4, r2
 8008c26:	d510      	bpl.n	8008c4a <_svfiprintf_r+0x36>
 8008c28:	690b      	ldr	r3, [r1, #16]
 8008c2a:	b973      	cbnz	r3, 8008c4a <_svfiprintf_r+0x36>
 8008c2c:	2140      	movs	r1, #64	@ 0x40
 8008c2e:	f7fe fbd3 	bl	80073d8 <_malloc_r>
 8008c32:	6028      	str	r0, [r5, #0]
 8008c34:	6128      	str	r0, [r5, #16]
 8008c36:	b930      	cbnz	r0, 8008c46 <_svfiprintf_r+0x32>
 8008c38:	230c      	movs	r3, #12
 8008c3a:	603b      	str	r3, [r7, #0]
 8008c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8008c40:	b01d      	add	sp, #116	@ 0x74
 8008c42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c46:	2340      	movs	r3, #64	@ 0x40
 8008c48:	616b      	str	r3, [r5, #20]
 8008c4a:	2300      	movs	r3, #0
 8008c4c:	9309      	str	r3, [sp, #36]	@ 0x24
 8008c4e:	2320      	movs	r3, #32
 8008c50:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008c54:	f8cd 800c 	str.w	r8, [sp, #12]
 8008c58:	2330      	movs	r3, #48	@ 0x30
 8008c5a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008df8 <_svfiprintf_r+0x1e4>
 8008c5e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008c62:	f04f 0901 	mov.w	r9, #1
 8008c66:	4623      	mov	r3, r4
 8008c68:	469a      	mov	sl, r3
 8008c6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008c6e:	b10a      	cbz	r2, 8008c74 <_svfiprintf_r+0x60>
 8008c70:	2a25      	cmp	r2, #37	@ 0x25
 8008c72:	d1f9      	bne.n	8008c68 <_svfiprintf_r+0x54>
 8008c74:	ebba 0b04 	subs.w	fp, sl, r4
 8008c78:	d00b      	beq.n	8008c92 <_svfiprintf_r+0x7e>
 8008c7a:	465b      	mov	r3, fp
 8008c7c:	4622      	mov	r2, r4
 8008c7e:	4629      	mov	r1, r5
 8008c80:	4638      	mov	r0, r7
 8008c82:	f7ff ff6b 	bl	8008b5c <__ssputs_r>
 8008c86:	3001      	adds	r0, #1
 8008c88:	f000 80a7 	beq.w	8008dda <_svfiprintf_r+0x1c6>
 8008c8c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008c8e:	445a      	add	r2, fp
 8008c90:	9209      	str	r2, [sp, #36]	@ 0x24
 8008c92:	f89a 3000 	ldrb.w	r3, [sl]
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	f000 809f 	beq.w	8008dda <_svfiprintf_r+0x1c6>
 8008c9c:	2300      	movs	r3, #0
 8008c9e:	f04f 32ff 	mov.w	r2, #4294967295
 8008ca2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008ca6:	f10a 0a01 	add.w	sl, sl, #1
 8008caa:	9304      	str	r3, [sp, #16]
 8008cac:	9307      	str	r3, [sp, #28]
 8008cae:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008cb2:	931a      	str	r3, [sp, #104]	@ 0x68
 8008cb4:	4654      	mov	r4, sl
 8008cb6:	2205      	movs	r2, #5
 8008cb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008cbc:	484e      	ldr	r0, [pc, #312]	@ (8008df8 <_svfiprintf_r+0x1e4>)
 8008cbe:	f7f7 fa87 	bl	80001d0 <memchr>
 8008cc2:	9a04      	ldr	r2, [sp, #16]
 8008cc4:	b9d8      	cbnz	r0, 8008cfe <_svfiprintf_r+0xea>
 8008cc6:	06d0      	lsls	r0, r2, #27
 8008cc8:	bf44      	itt	mi
 8008cca:	2320      	movmi	r3, #32
 8008ccc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008cd0:	0711      	lsls	r1, r2, #28
 8008cd2:	bf44      	itt	mi
 8008cd4:	232b      	movmi	r3, #43	@ 0x2b
 8008cd6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008cda:	f89a 3000 	ldrb.w	r3, [sl]
 8008cde:	2b2a      	cmp	r3, #42	@ 0x2a
 8008ce0:	d015      	beq.n	8008d0e <_svfiprintf_r+0xfa>
 8008ce2:	9a07      	ldr	r2, [sp, #28]
 8008ce4:	4654      	mov	r4, sl
 8008ce6:	2000      	movs	r0, #0
 8008ce8:	f04f 0c0a 	mov.w	ip, #10
 8008cec:	4621      	mov	r1, r4
 8008cee:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008cf2:	3b30      	subs	r3, #48	@ 0x30
 8008cf4:	2b09      	cmp	r3, #9
 8008cf6:	d94b      	bls.n	8008d90 <_svfiprintf_r+0x17c>
 8008cf8:	b1b0      	cbz	r0, 8008d28 <_svfiprintf_r+0x114>
 8008cfa:	9207      	str	r2, [sp, #28]
 8008cfc:	e014      	b.n	8008d28 <_svfiprintf_r+0x114>
 8008cfe:	eba0 0308 	sub.w	r3, r0, r8
 8008d02:	fa09 f303 	lsl.w	r3, r9, r3
 8008d06:	4313      	orrs	r3, r2
 8008d08:	9304      	str	r3, [sp, #16]
 8008d0a:	46a2      	mov	sl, r4
 8008d0c:	e7d2      	b.n	8008cb4 <_svfiprintf_r+0xa0>
 8008d0e:	9b03      	ldr	r3, [sp, #12]
 8008d10:	1d19      	adds	r1, r3, #4
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	9103      	str	r1, [sp, #12]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	bfbb      	ittet	lt
 8008d1a:	425b      	neglt	r3, r3
 8008d1c:	f042 0202 	orrlt.w	r2, r2, #2
 8008d20:	9307      	strge	r3, [sp, #28]
 8008d22:	9307      	strlt	r3, [sp, #28]
 8008d24:	bfb8      	it	lt
 8008d26:	9204      	strlt	r2, [sp, #16]
 8008d28:	7823      	ldrb	r3, [r4, #0]
 8008d2a:	2b2e      	cmp	r3, #46	@ 0x2e
 8008d2c:	d10a      	bne.n	8008d44 <_svfiprintf_r+0x130>
 8008d2e:	7863      	ldrb	r3, [r4, #1]
 8008d30:	2b2a      	cmp	r3, #42	@ 0x2a
 8008d32:	d132      	bne.n	8008d9a <_svfiprintf_r+0x186>
 8008d34:	9b03      	ldr	r3, [sp, #12]
 8008d36:	1d1a      	adds	r2, r3, #4
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	9203      	str	r2, [sp, #12]
 8008d3c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008d40:	3402      	adds	r4, #2
 8008d42:	9305      	str	r3, [sp, #20]
 8008d44:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008e08 <_svfiprintf_r+0x1f4>
 8008d48:	7821      	ldrb	r1, [r4, #0]
 8008d4a:	2203      	movs	r2, #3
 8008d4c:	4650      	mov	r0, sl
 8008d4e:	f7f7 fa3f 	bl	80001d0 <memchr>
 8008d52:	b138      	cbz	r0, 8008d64 <_svfiprintf_r+0x150>
 8008d54:	9b04      	ldr	r3, [sp, #16]
 8008d56:	eba0 000a 	sub.w	r0, r0, sl
 8008d5a:	2240      	movs	r2, #64	@ 0x40
 8008d5c:	4082      	lsls	r2, r0
 8008d5e:	4313      	orrs	r3, r2
 8008d60:	3401      	adds	r4, #1
 8008d62:	9304      	str	r3, [sp, #16]
 8008d64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d68:	4824      	ldr	r0, [pc, #144]	@ (8008dfc <_svfiprintf_r+0x1e8>)
 8008d6a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008d6e:	2206      	movs	r2, #6
 8008d70:	f7f7 fa2e 	bl	80001d0 <memchr>
 8008d74:	2800      	cmp	r0, #0
 8008d76:	d036      	beq.n	8008de6 <_svfiprintf_r+0x1d2>
 8008d78:	4b21      	ldr	r3, [pc, #132]	@ (8008e00 <_svfiprintf_r+0x1ec>)
 8008d7a:	bb1b      	cbnz	r3, 8008dc4 <_svfiprintf_r+0x1b0>
 8008d7c:	9b03      	ldr	r3, [sp, #12]
 8008d7e:	3307      	adds	r3, #7
 8008d80:	f023 0307 	bic.w	r3, r3, #7
 8008d84:	3308      	adds	r3, #8
 8008d86:	9303      	str	r3, [sp, #12]
 8008d88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d8a:	4433      	add	r3, r6
 8008d8c:	9309      	str	r3, [sp, #36]	@ 0x24
 8008d8e:	e76a      	b.n	8008c66 <_svfiprintf_r+0x52>
 8008d90:	fb0c 3202 	mla	r2, ip, r2, r3
 8008d94:	460c      	mov	r4, r1
 8008d96:	2001      	movs	r0, #1
 8008d98:	e7a8      	b.n	8008cec <_svfiprintf_r+0xd8>
 8008d9a:	2300      	movs	r3, #0
 8008d9c:	3401      	adds	r4, #1
 8008d9e:	9305      	str	r3, [sp, #20]
 8008da0:	4619      	mov	r1, r3
 8008da2:	f04f 0c0a 	mov.w	ip, #10
 8008da6:	4620      	mov	r0, r4
 8008da8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008dac:	3a30      	subs	r2, #48	@ 0x30
 8008dae:	2a09      	cmp	r2, #9
 8008db0:	d903      	bls.n	8008dba <_svfiprintf_r+0x1a6>
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d0c6      	beq.n	8008d44 <_svfiprintf_r+0x130>
 8008db6:	9105      	str	r1, [sp, #20]
 8008db8:	e7c4      	b.n	8008d44 <_svfiprintf_r+0x130>
 8008dba:	fb0c 2101 	mla	r1, ip, r1, r2
 8008dbe:	4604      	mov	r4, r0
 8008dc0:	2301      	movs	r3, #1
 8008dc2:	e7f0      	b.n	8008da6 <_svfiprintf_r+0x192>
 8008dc4:	ab03      	add	r3, sp, #12
 8008dc6:	9300      	str	r3, [sp, #0]
 8008dc8:	462a      	mov	r2, r5
 8008dca:	4b0e      	ldr	r3, [pc, #56]	@ (8008e04 <_svfiprintf_r+0x1f0>)
 8008dcc:	a904      	add	r1, sp, #16
 8008dce:	4638      	mov	r0, r7
 8008dd0:	f7fc fcca 	bl	8005768 <_printf_float>
 8008dd4:	1c42      	adds	r2, r0, #1
 8008dd6:	4606      	mov	r6, r0
 8008dd8:	d1d6      	bne.n	8008d88 <_svfiprintf_r+0x174>
 8008dda:	89ab      	ldrh	r3, [r5, #12]
 8008ddc:	065b      	lsls	r3, r3, #25
 8008dde:	f53f af2d 	bmi.w	8008c3c <_svfiprintf_r+0x28>
 8008de2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008de4:	e72c      	b.n	8008c40 <_svfiprintf_r+0x2c>
 8008de6:	ab03      	add	r3, sp, #12
 8008de8:	9300      	str	r3, [sp, #0]
 8008dea:	462a      	mov	r2, r5
 8008dec:	4b05      	ldr	r3, [pc, #20]	@ (8008e04 <_svfiprintf_r+0x1f0>)
 8008dee:	a904      	add	r1, sp, #16
 8008df0:	4638      	mov	r0, r7
 8008df2:	f7fc ff51 	bl	8005c98 <_printf_i>
 8008df6:	e7ed      	b.n	8008dd4 <_svfiprintf_r+0x1c0>
 8008df8:	0800a0f9 	.word	0x0800a0f9
 8008dfc:	0800a103 	.word	0x0800a103
 8008e00:	08005769 	.word	0x08005769
 8008e04:	08008b5d 	.word	0x08008b5d
 8008e08:	0800a0ff 	.word	0x0800a0ff

08008e0c <__sflush_r>:
 8008e0c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008e10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e14:	0716      	lsls	r6, r2, #28
 8008e16:	4605      	mov	r5, r0
 8008e18:	460c      	mov	r4, r1
 8008e1a:	d454      	bmi.n	8008ec6 <__sflush_r+0xba>
 8008e1c:	684b      	ldr	r3, [r1, #4]
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	dc02      	bgt.n	8008e28 <__sflush_r+0x1c>
 8008e22:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	dd48      	ble.n	8008eba <__sflush_r+0xae>
 8008e28:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008e2a:	2e00      	cmp	r6, #0
 8008e2c:	d045      	beq.n	8008eba <__sflush_r+0xae>
 8008e2e:	2300      	movs	r3, #0
 8008e30:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008e34:	682f      	ldr	r7, [r5, #0]
 8008e36:	6a21      	ldr	r1, [r4, #32]
 8008e38:	602b      	str	r3, [r5, #0]
 8008e3a:	d030      	beq.n	8008e9e <__sflush_r+0x92>
 8008e3c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008e3e:	89a3      	ldrh	r3, [r4, #12]
 8008e40:	0759      	lsls	r1, r3, #29
 8008e42:	d505      	bpl.n	8008e50 <__sflush_r+0x44>
 8008e44:	6863      	ldr	r3, [r4, #4]
 8008e46:	1ad2      	subs	r2, r2, r3
 8008e48:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008e4a:	b10b      	cbz	r3, 8008e50 <__sflush_r+0x44>
 8008e4c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008e4e:	1ad2      	subs	r2, r2, r3
 8008e50:	2300      	movs	r3, #0
 8008e52:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008e54:	6a21      	ldr	r1, [r4, #32]
 8008e56:	4628      	mov	r0, r5
 8008e58:	47b0      	blx	r6
 8008e5a:	1c43      	adds	r3, r0, #1
 8008e5c:	89a3      	ldrh	r3, [r4, #12]
 8008e5e:	d106      	bne.n	8008e6e <__sflush_r+0x62>
 8008e60:	6829      	ldr	r1, [r5, #0]
 8008e62:	291d      	cmp	r1, #29
 8008e64:	d82b      	bhi.n	8008ebe <__sflush_r+0xb2>
 8008e66:	4a2a      	ldr	r2, [pc, #168]	@ (8008f10 <__sflush_r+0x104>)
 8008e68:	410a      	asrs	r2, r1
 8008e6a:	07d6      	lsls	r6, r2, #31
 8008e6c:	d427      	bmi.n	8008ebe <__sflush_r+0xb2>
 8008e6e:	2200      	movs	r2, #0
 8008e70:	6062      	str	r2, [r4, #4]
 8008e72:	04d9      	lsls	r1, r3, #19
 8008e74:	6922      	ldr	r2, [r4, #16]
 8008e76:	6022      	str	r2, [r4, #0]
 8008e78:	d504      	bpl.n	8008e84 <__sflush_r+0x78>
 8008e7a:	1c42      	adds	r2, r0, #1
 8008e7c:	d101      	bne.n	8008e82 <__sflush_r+0x76>
 8008e7e:	682b      	ldr	r3, [r5, #0]
 8008e80:	b903      	cbnz	r3, 8008e84 <__sflush_r+0x78>
 8008e82:	6560      	str	r0, [r4, #84]	@ 0x54
 8008e84:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008e86:	602f      	str	r7, [r5, #0]
 8008e88:	b1b9      	cbz	r1, 8008eba <__sflush_r+0xae>
 8008e8a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008e8e:	4299      	cmp	r1, r3
 8008e90:	d002      	beq.n	8008e98 <__sflush_r+0x8c>
 8008e92:	4628      	mov	r0, r5
 8008e94:	f7fe fa2c 	bl	80072f0 <_free_r>
 8008e98:	2300      	movs	r3, #0
 8008e9a:	6363      	str	r3, [r4, #52]	@ 0x34
 8008e9c:	e00d      	b.n	8008eba <__sflush_r+0xae>
 8008e9e:	2301      	movs	r3, #1
 8008ea0:	4628      	mov	r0, r5
 8008ea2:	47b0      	blx	r6
 8008ea4:	4602      	mov	r2, r0
 8008ea6:	1c50      	adds	r0, r2, #1
 8008ea8:	d1c9      	bne.n	8008e3e <__sflush_r+0x32>
 8008eaa:	682b      	ldr	r3, [r5, #0]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d0c6      	beq.n	8008e3e <__sflush_r+0x32>
 8008eb0:	2b1d      	cmp	r3, #29
 8008eb2:	d001      	beq.n	8008eb8 <__sflush_r+0xac>
 8008eb4:	2b16      	cmp	r3, #22
 8008eb6:	d11e      	bne.n	8008ef6 <__sflush_r+0xea>
 8008eb8:	602f      	str	r7, [r5, #0]
 8008eba:	2000      	movs	r0, #0
 8008ebc:	e022      	b.n	8008f04 <__sflush_r+0xf8>
 8008ebe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008ec2:	b21b      	sxth	r3, r3
 8008ec4:	e01b      	b.n	8008efe <__sflush_r+0xf2>
 8008ec6:	690f      	ldr	r7, [r1, #16]
 8008ec8:	2f00      	cmp	r7, #0
 8008eca:	d0f6      	beq.n	8008eba <__sflush_r+0xae>
 8008ecc:	0793      	lsls	r3, r2, #30
 8008ece:	680e      	ldr	r6, [r1, #0]
 8008ed0:	bf08      	it	eq
 8008ed2:	694b      	ldreq	r3, [r1, #20]
 8008ed4:	600f      	str	r7, [r1, #0]
 8008ed6:	bf18      	it	ne
 8008ed8:	2300      	movne	r3, #0
 8008eda:	eba6 0807 	sub.w	r8, r6, r7
 8008ede:	608b      	str	r3, [r1, #8]
 8008ee0:	f1b8 0f00 	cmp.w	r8, #0
 8008ee4:	dde9      	ble.n	8008eba <__sflush_r+0xae>
 8008ee6:	6a21      	ldr	r1, [r4, #32]
 8008ee8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008eea:	4643      	mov	r3, r8
 8008eec:	463a      	mov	r2, r7
 8008eee:	4628      	mov	r0, r5
 8008ef0:	47b0      	blx	r6
 8008ef2:	2800      	cmp	r0, #0
 8008ef4:	dc08      	bgt.n	8008f08 <__sflush_r+0xfc>
 8008ef6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008efa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008efe:	81a3      	strh	r3, [r4, #12]
 8008f00:	f04f 30ff 	mov.w	r0, #4294967295
 8008f04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f08:	4407      	add	r7, r0
 8008f0a:	eba8 0800 	sub.w	r8, r8, r0
 8008f0e:	e7e7      	b.n	8008ee0 <__sflush_r+0xd4>
 8008f10:	dfbffffe 	.word	0xdfbffffe

08008f14 <_fflush_r>:
 8008f14:	b538      	push	{r3, r4, r5, lr}
 8008f16:	690b      	ldr	r3, [r1, #16]
 8008f18:	4605      	mov	r5, r0
 8008f1a:	460c      	mov	r4, r1
 8008f1c:	b913      	cbnz	r3, 8008f24 <_fflush_r+0x10>
 8008f1e:	2500      	movs	r5, #0
 8008f20:	4628      	mov	r0, r5
 8008f22:	bd38      	pop	{r3, r4, r5, pc}
 8008f24:	b118      	cbz	r0, 8008f2e <_fflush_r+0x1a>
 8008f26:	6a03      	ldr	r3, [r0, #32]
 8008f28:	b90b      	cbnz	r3, 8008f2e <_fflush_r+0x1a>
 8008f2a:	f7fd fa75 	bl	8006418 <__sinit>
 8008f2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d0f3      	beq.n	8008f1e <_fflush_r+0xa>
 8008f36:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008f38:	07d0      	lsls	r0, r2, #31
 8008f3a:	d404      	bmi.n	8008f46 <_fflush_r+0x32>
 8008f3c:	0599      	lsls	r1, r3, #22
 8008f3e:	d402      	bmi.n	8008f46 <_fflush_r+0x32>
 8008f40:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008f42:	f7fd fb80 	bl	8006646 <__retarget_lock_acquire_recursive>
 8008f46:	4628      	mov	r0, r5
 8008f48:	4621      	mov	r1, r4
 8008f4a:	f7ff ff5f 	bl	8008e0c <__sflush_r>
 8008f4e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008f50:	07da      	lsls	r2, r3, #31
 8008f52:	4605      	mov	r5, r0
 8008f54:	d4e4      	bmi.n	8008f20 <_fflush_r+0xc>
 8008f56:	89a3      	ldrh	r3, [r4, #12]
 8008f58:	059b      	lsls	r3, r3, #22
 8008f5a:	d4e1      	bmi.n	8008f20 <_fflush_r+0xc>
 8008f5c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008f5e:	f7fd fb73 	bl	8006648 <__retarget_lock_release_recursive>
 8008f62:	e7dd      	b.n	8008f20 <_fflush_r+0xc>

08008f64 <memmove>:
 8008f64:	4288      	cmp	r0, r1
 8008f66:	b510      	push	{r4, lr}
 8008f68:	eb01 0402 	add.w	r4, r1, r2
 8008f6c:	d902      	bls.n	8008f74 <memmove+0x10>
 8008f6e:	4284      	cmp	r4, r0
 8008f70:	4623      	mov	r3, r4
 8008f72:	d807      	bhi.n	8008f84 <memmove+0x20>
 8008f74:	1e43      	subs	r3, r0, #1
 8008f76:	42a1      	cmp	r1, r4
 8008f78:	d008      	beq.n	8008f8c <memmove+0x28>
 8008f7a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008f7e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008f82:	e7f8      	b.n	8008f76 <memmove+0x12>
 8008f84:	4402      	add	r2, r0
 8008f86:	4601      	mov	r1, r0
 8008f88:	428a      	cmp	r2, r1
 8008f8a:	d100      	bne.n	8008f8e <memmove+0x2a>
 8008f8c:	bd10      	pop	{r4, pc}
 8008f8e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008f92:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008f96:	e7f7      	b.n	8008f88 <memmove+0x24>

08008f98 <strncmp>:
 8008f98:	b510      	push	{r4, lr}
 8008f9a:	b16a      	cbz	r2, 8008fb8 <strncmp+0x20>
 8008f9c:	3901      	subs	r1, #1
 8008f9e:	1884      	adds	r4, r0, r2
 8008fa0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008fa4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008fa8:	429a      	cmp	r2, r3
 8008faa:	d103      	bne.n	8008fb4 <strncmp+0x1c>
 8008fac:	42a0      	cmp	r0, r4
 8008fae:	d001      	beq.n	8008fb4 <strncmp+0x1c>
 8008fb0:	2a00      	cmp	r2, #0
 8008fb2:	d1f5      	bne.n	8008fa0 <strncmp+0x8>
 8008fb4:	1ad0      	subs	r0, r2, r3
 8008fb6:	bd10      	pop	{r4, pc}
 8008fb8:	4610      	mov	r0, r2
 8008fba:	e7fc      	b.n	8008fb6 <strncmp+0x1e>

08008fbc <_sbrk_r>:
 8008fbc:	b538      	push	{r3, r4, r5, lr}
 8008fbe:	4d06      	ldr	r5, [pc, #24]	@ (8008fd8 <_sbrk_r+0x1c>)
 8008fc0:	2300      	movs	r3, #0
 8008fc2:	4604      	mov	r4, r0
 8008fc4:	4608      	mov	r0, r1
 8008fc6:	602b      	str	r3, [r5, #0]
 8008fc8:	f7f8 fb9a 	bl	8001700 <_sbrk>
 8008fcc:	1c43      	adds	r3, r0, #1
 8008fce:	d102      	bne.n	8008fd6 <_sbrk_r+0x1a>
 8008fd0:	682b      	ldr	r3, [r5, #0]
 8008fd2:	b103      	cbz	r3, 8008fd6 <_sbrk_r+0x1a>
 8008fd4:	6023      	str	r3, [r4, #0]
 8008fd6:	bd38      	pop	{r3, r4, r5, pc}
 8008fd8:	20000444 	.word	0x20000444

08008fdc <memcpy>:
 8008fdc:	440a      	add	r2, r1
 8008fde:	4291      	cmp	r1, r2
 8008fe0:	f100 33ff 	add.w	r3, r0, #4294967295
 8008fe4:	d100      	bne.n	8008fe8 <memcpy+0xc>
 8008fe6:	4770      	bx	lr
 8008fe8:	b510      	push	{r4, lr}
 8008fea:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008fee:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008ff2:	4291      	cmp	r1, r2
 8008ff4:	d1f9      	bne.n	8008fea <memcpy+0xe>
 8008ff6:	bd10      	pop	{r4, pc}

08008ff8 <nan>:
 8008ff8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8009000 <nan+0x8>
 8008ffc:	4770      	bx	lr
 8008ffe:	bf00      	nop
 8009000:	00000000 	.word	0x00000000
 8009004:	7ff80000 	.word	0x7ff80000

08009008 <__assert_func>:
 8009008:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800900a:	4614      	mov	r4, r2
 800900c:	461a      	mov	r2, r3
 800900e:	4b09      	ldr	r3, [pc, #36]	@ (8009034 <__assert_func+0x2c>)
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	4605      	mov	r5, r0
 8009014:	68d8      	ldr	r0, [r3, #12]
 8009016:	b954      	cbnz	r4, 800902e <__assert_func+0x26>
 8009018:	4b07      	ldr	r3, [pc, #28]	@ (8009038 <__assert_func+0x30>)
 800901a:	461c      	mov	r4, r3
 800901c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009020:	9100      	str	r1, [sp, #0]
 8009022:	462b      	mov	r3, r5
 8009024:	4905      	ldr	r1, [pc, #20]	@ (800903c <__assert_func+0x34>)
 8009026:	f000 fba7 	bl	8009778 <fiprintf>
 800902a:	f000 fbb7 	bl	800979c <abort>
 800902e:	4b04      	ldr	r3, [pc, #16]	@ (8009040 <__assert_func+0x38>)
 8009030:	e7f4      	b.n	800901c <__assert_func+0x14>
 8009032:	bf00      	nop
 8009034:	20000018 	.word	0x20000018
 8009038:	0800a14d 	.word	0x0800a14d
 800903c:	0800a11f 	.word	0x0800a11f
 8009040:	0800a112 	.word	0x0800a112

08009044 <_calloc_r>:
 8009044:	b570      	push	{r4, r5, r6, lr}
 8009046:	fba1 5402 	umull	r5, r4, r1, r2
 800904a:	b93c      	cbnz	r4, 800905c <_calloc_r+0x18>
 800904c:	4629      	mov	r1, r5
 800904e:	f7fe f9c3 	bl	80073d8 <_malloc_r>
 8009052:	4606      	mov	r6, r0
 8009054:	b928      	cbnz	r0, 8009062 <_calloc_r+0x1e>
 8009056:	2600      	movs	r6, #0
 8009058:	4630      	mov	r0, r6
 800905a:	bd70      	pop	{r4, r5, r6, pc}
 800905c:	220c      	movs	r2, #12
 800905e:	6002      	str	r2, [r0, #0]
 8009060:	e7f9      	b.n	8009056 <_calloc_r+0x12>
 8009062:	462a      	mov	r2, r5
 8009064:	4621      	mov	r1, r4
 8009066:	f7fd fa70 	bl	800654a <memset>
 800906a:	e7f5      	b.n	8009058 <_calloc_r+0x14>

0800906c <rshift>:
 800906c:	6903      	ldr	r3, [r0, #16]
 800906e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009072:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009076:	ea4f 1261 	mov.w	r2, r1, asr #5
 800907a:	f100 0414 	add.w	r4, r0, #20
 800907e:	dd45      	ble.n	800910c <rshift+0xa0>
 8009080:	f011 011f 	ands.w	r1, r1, #31
 8009084:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009088:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800908c:	d10c      	bne.n	80090a8 <rshift+0x3c>
 800908e:	f100 0710 	add.w	r7, r0, #16
 8009092:	4629      	mov	r1, r5
 8009094:	42b1      	cmp	r1, r6
 8009096:	d334      	bcc.n	8009102 <rshift+0x96>
 8009098:	1a9b      	subs	r3, r3, r2
 800909a:	009b      	lsls	r3, r3, #2
 800909c:	1eea      	subs	r2, r5, #3
 800909e:	4296      	cmp	r6, r2
 80090a0:	bf38      	it	cc
 80090a2:	2300      	movcc	r3, #0
 80090a4:	4423      	add	r3, r4
 80090a6:	e015      	b.n	80090d4 <rshift+0x68>
 80090a8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80090ac:	f1c1 0820 	rsb	r8, r1, #32
 80090b0:	40cf      	lsrs	r7, r1
 80090b2:	f105 0e04 	add.w	lr, r5, #4
 80090b6:	46a1      	mov	r9, r4
 80090b8:	4576      	cmp	r6, lr
 80090ba:	46f4      	mov	ip, lr
 80090bc:	d815      	bhi.n	80090ea <rshift+0x7e>
 80090be:	1a9a      	subs	r2, r3, r2
 80090c0:	0092      	lsls	r2, r2, #2
 80090c2:	3a04      	subs	r2, #4
 80090c4:	3501      	adds	r5, #1
 80090c6:	42ae      	cmp	r6, r5
 80090c8:	bf38      	it	cc
 80090ca:	2200      	movcc	r2, #0
 80090cc:	18a3      	adds	r3, r4, r2
 80090ce:	50a7      	str	r7, [r4, r2]
 80090d0:	b107      	cbz	r7, 80090d4 <rshift+0x68>
 80090d2:	3304      	adds	r3, #4
 80090d4:	1b1a      	subs	r2, r3, r4
 80090d6:	42a3      	cmp	r3, r4
 80090d8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80090dc:	bf08      	it	eq
 80090de:	2300      	moveq	r3, #0
 80090e0:	6102      	str	r2, [r0, #16]
 80090e2:	bf08      	it	eq
 80090e4:	6143      	streq	r3, [r0, #20]
 80090e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80090ea:	f8dc c000 	ldr.w	ip, [ip]
 80090ee:	fa0c fc08 	lsl.w	ip, ip, r8
 80090f2:	ea4c 0707 	orr.w	r7, ip, r7
 80090f6:	f849 7b04 	str.w	r7, [r9], #4
 80090fa:	f85e 7b04 	ldr.w	r7, [lr], #4
 80090fe:	40cf      	lsrs	r7, r1
 8009100:	e7da      	b.n	80090b8 <rshift+0x4c>
 8009102:	f851 cb04 	ldr.w	ip, [r1], #4
 8009106:	f847 cf04 	str.w	ip, [r7, #4]!
 800910a:	e7c3      	b.n	8009094 <rshift+0x28>
 800910c:	4623      	mov	r3, r4
 800910e:	e7e1      	b.n	80090d4 <rshift+0x68>

08009110 <__hexdig_fun>:
 8009110:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8009114:	2b09      	cmp	r3, #9
 8009116:	d802      	bhi.n	800911e <__hexdig_fun+0xe>
 8009118:	3820      	subs	r0, #32
 800911a:	b2c0      	uxtb	r0, r0
 800911c:	4770      	bx	lr
 800911e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8009122:	2b05      	cmp	r3, #5
 8009124:	d801      	bhi.n	800912a <__hexdig_fun+0x1a>
 8009126:	3847      	subs	r0, #71	@ 0x47
 8009128:	e7f7      	b.n	800911a <__hexdig_fun+0xa>
 800912a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800912e:	2b05      	cmp	r3, #5
 8009130:	d801      	bhi.n	8009136 <__hexdig_fun+0x26>
 8009132:	3827      	subs	r0, #39	@ 0x27
 8009134:	e7f1      	b.n	800911a <__hexdig_fun+0xa>
 8009136:	2000      	movs	r0, #0
 8009138:	4770      	bx	lr
	...

0800913c <__gethex>:
 800913c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009140:	b085      	sub	sp, #20
 8009142:	468a      	mov	sl, r1
 8009144:	9302      	str	r3, [sp, #8]
 8009146:	680b      	ldr	r3, [r1, #0]
 8009148:	9001      	str	r0, [sp, #4]
 800914a:	4690      	mov	r8, r2
 800914c:	1c9c      	adds	r4, r3, #2
 800914e:	46a1      	mov	r9, r4
 8009150:	f814 0b01 	ldrb.w	r0, [r4], #1
 8009154:	2830      	cmp	r0, #48	@ 0x30
 8009156:	d0fa      	beq.n	800914e <__gethex+0x12>
 8009158:	eba9 0303 	sub.w	r3, r9, r3
 800915c:	f1a3 0b02 	sub.w	fp, r3, #2
 8009160:	f7ff ffd6 	bl	8009110 <__hexdig_fun>
 8009164:	4605      	mov	r5, r0
 8009166:	2800      	cmp	r0, #0
 8009168:	d168      	bne.n	800923c <__gethex+0x100>
 800916a:	49a0      	ldr	r1, [pc, #640]	@ (80093ec <__gethex+0x2b0>)
 800916c:	2201      	movs	r2, #1
 800916e:	4648      	mov	r0, r9
 8009170:	f7ff ff12 	bl	8008f98 <strncmp>
 8009174:	4607      	mov	r7, r0
 8009176:	2800      	cmp	r0, #0
 8009178:	d167      	bne.n	800924a <__gethex+0x10e>
 800917a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800917e:	4626      	mov	r6, r4
 8009180:	f7ff ffc6 	bl	8009110 <__hexdig_fun>
 8009184:	2800      	cmp	r0, #0
 8009186:	d062      	beq.n	800924e <__gethex+0x112>
 8009188:	4623      	mov	r3, r4
 800918a:	7818      	ldrb	r0, [r3, #0]
 800918c:	2830      	cmp	r0, #48	@ 0x30
 800918e:	4699      	mov	r9, r3
 8009190:	f103 0301 	add.w	r3, r3, #1
 8009194:	d0f9      	beq.n	800918a <__gethex+0x4e>
 8009196:	f7ff ffbb 	bl	8009110 <__hexdig_fun>
 800919a:	fab0 f580 	clz	r5, r0
 800919e:	096d      	lsrs	r5, r5, #5
 80091a0:	f04f 0b01 	mov.w	fp, #1
 80091a4:	464a      	mov	r2, r9
 80091a6:	4616      	mov	r6, r2
 80091a8:	3201      	adds	r2, #1
 80091aa:	7830      	ldrb	r0, [r6, #0]
 80091ac:	f7ff ffb0 	bl	8009110 <__hexdig_fun>
 80091b0:	2800      	cmp	r0, #0
 80091b2:	d1f8      	bne.n	80091a6 <__gethex+0x6a>
 80091b4:	498d      	ldr	r1, [pc, #564]	@ (80093ec <__gethex+0x2b0>)
 80091b6:	2201      	movs	r2, #1
 80091b8:	4630      	mov	r0, r6
 80091ba:	f7ff feed 	bl	8008f98 <strncmp>
 80091be:	2800      	cmp	r0, #0
 80091c0:	d13f      	bne.n	8009242 <__gethex+0x106>
 80091c2:	b944      	cbnz	r4, 80091d6 <__gethex+0x9a>
 80091c4:	1c74      	adds	r4, r6, #1
 80091c6:	4622      	mov	r2, r4
 80091c8:	4616      	mov	r6, r2
 80091ca:	3201      	adds	r2, #1
 80091cc:	7830      	ldrb	r0, [r6, #0]
 80091ce:	f7ff ff9f 	bl	8009110 <__hexdig_fun>
 80091d2:	2800      	cmp	r0, #0
 80091d4:	d1f8      	bne.n	80091c8 <__gethex+0x8c>
 80091d6:	1ba4      	subs	r4, r4, r6
 80091d8:	00a7      	lsls	r7, r4, #2
 80091da:	7833      	ldrb	r3, [r6, #0]
 80091dc:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80091e0:	2b50      	cmp	r3, #80	@ 0x50
 80091e2:	d13e      	bne.n	8009262 <__gethex+0x126>
 80091e4:	7873      	ldrb	r3, [r6, #1]
 80091e6:	2b2b      	cmp	r3, #43	@ 0x2b
 80091e8:	d033      	beq.n	8009252 <__gethex+0x116>
 80091ea:	2b2d      	cmp	r3, #45	@ 0x2d
 80091ec:	d034      	beq.n	8009258 <__gethex+0x11c>
 80091ee:	1c71      	adds	r1, r6, #1
 80091f0:	2400      	movs	r4, #0
 80091f2:	7808      	ldrb	r0, [r1, #0]
 80091f4:	f7ff ff8c 	bl	8009110 <__hexdig_fun>
 80091f8:	1e43      	subs	r3, r0, #1
 80091fa:	b2db      	uxtb	r3, r3
 80091fc:	2b18      	cmp	r3, #24
 80091fe:	d830      	bhi.n	8009262 <__gethex+0x126>
 8009200:	f1a0 0210 	sub.w	r2, r0, #16
 8009204:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009208:	f7ff ff82 	bl	8009110 <__hexdig_fun>
 800920c:	f100 3cff 	add.w	ip, r0, #4294967295
 8009210:	fa5f fc8c 	uxtb.w	ip, ip
 8009214:	f1bc 0f18 	cmp.w	ip, #24
 8009218:	f04f 030a 	mov.w	r3, #10
 800921c:	d91e      	bls.n	800925c <__gethex+0x120>
 800921e:	b104      	cbz	r4, 8009222 <__gethex+0xe6>
 8009220:	4252      	negs	r2, r2
 8009222:	4417      	add	r7, r2
 8009224:	f8ca 1000 	str.w	r1, [sl]
 8009228:	b1ed      	cbz	r5, 8009266 <__gethex+0x12a>
 800922a:	f1bb 0f00 	cmp.w	fp, #0
 800922e:	bf0c      	ite	eq
 8009230:	2506      	moveq	r5, #6
 8009232:	2500      	movne	r5, #0
 8009234:	4628      	mov	r0, r5
 8009236:	b005      	add	sp, #20
 8009238:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800923c:	2500      	movs	r5, #0
 800923e:	462c      	mov	r4, r5
 8009240:	e7b0      	b.n	80091a4 <__gethex+0x68>
 8009242:	2c00      	cmp	r4, #0
 8009244:	d1c7      	bne.n	80091d6 <__gethex+0x9a>
 8009246:	4627      	mov	r7, r4
 8009248:	e7c7      	b.n	80091da <__gethex+0x9e>
 800924a:	464e      	mov	r6, r9
 800924c:	462f      	mov	r7, r5
 800924e:	2501      	movs	r5, #1
 8009250:	e7c3      	b.n	80091da <__gethex+0x9e>
 8009252:	2400      	movs	r4, #0
 8009254:	1cb1      	adds	r1, r6, #2
 8009256:	e7cc      	b.n	80091f2 <__gethex+0xb6>
 8009258:	2401      	movs	r4, #1
 800925a:	e7fb      	b.n	8009254 <__gethex+0x118>
 800925c:	fb03 0002 	mla	r0, r3, r2, r0
 8009260:	e7ce      	b.n	8009200 <__gethex+0xc4>
 8009262:	4631      	mov	r1, r6
 8009264:	e7de      	b.n	8009224 <__gethex+0xe8>
 8009266:	eba6 0309 	sub.w	r3, r6, r9
 800926a:	3b01      	subs	r3, #1
 800926c:	4629      	mov	r1, r5
 800926e:	2b07      	cmp	r3, #7
 8009270:	dc0a      	bgt.n	8009288 <__gethex+0x14c>
 8009272:	9801      	ldr	r0, [sp, #4]
 8009274:	f7fe f93c 	bl	80074f0 <_Balloc>
 8009278:	4604      	mov	r4, r0
 800927a:	b940      	cbnz	r0, 800928e <__gethex+0x152>
 800927c:	4b5c      	ldr	r3, [pc, #368]	@ (80093f0 <__gethex+0x2b4>)
 800927e:	4602      	mov	r2, r0
 8009280:	21e4      	movs	r1, #228	@ 0xe4
 8009282:	485c      	ldr	r0, [pc, #368]	@ (80093f4 <__gethex+0x2b8>)
 8009284:	f7ff fec0 	bl	8009008 <__assert_func>
 8009288:	3101      	adds	r1, #1
 800928a:	105b      	asrs	r3, r3, #1
 800928c:	e7ef      	b.n	800926e <__gethex+0x132>
 800928e:	f100 0a14 	add.w	sl, r0, #20
 8009292:	2300      	movs	r3, #0
 8009294:	4655      	mov	r5, sl
 8009296:	469b      	mov	fp, r3
 8009298:	45b1      	cmp	r9, r6
 800929a:	d337      	bcc.n	800930c <__gethex+0x1d0>
 800929c:	f845 bb04 	str.w	fp, [r5], #4
 80092a0:	eba5 050a 	sub.w	r5, r5, sl
 80092a4:	10ad      	asrs	r5, r5, #2
 80092a6:	6125      	str	r5, [r4, #16]
 80092a8:	4658      	mov	r0, fp
 80092aa:	f7fe fa13 	bl	80076d4 <__hi0bits>
 80092ae:	016d      	lsls	r5, r5, #5
 80092b0:	f8d8 6000 	ldr.w	r6, [r8]
 80092b4:	1a2d      	subs	r5, r5, r0
 80092b6:	42b5      	cmp	r5, r6
 80092b8:	dd54      	ble.n	8009364 <__gethex+0x228>
 80092ba:	1bad      	subs	r5, r5, r6
 80092bc:	4629      	mov	r1, r5
 80092be:	4620      	mov	r0, r4
 80092c0:	f7fe fda7 	bl	8007e12 <__any_on>
 80092c4:	4681      	mov	r9, r0
 80092c6:	b178      	cbz	r0, 80092e8 <__gethex+0x1ac>
 80092c8:	1e6b      	subs	r3, r5, #1
 80092ca:	1159      	asrs	r1, r3, #5
 80092cc:	f003 021f 	and.w	r2, r3, #31
 80092d0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80092d4:	f04f 0901 	mov.w	r9, #1
 80092d8:	fa09 f202 	lsl.w	r2, r9, r2
 80092dc:	420a      	tst	r2, r1
 80092de:	d003      	beq.n	80092e8 <__gethex+0x1ac>
 80092e0:	454b      	cmp	r3, r9
 80092e2:	dc36      	bgt.n	8009352 <__gethex+0x216>
 80092e4:	f04f 0902 	mov.w	r9, #2
 80092e8:	4629      	mov	r1, r5
 80092ea:	4620      	mov	r0, r4
 80092ec:	f7ff febe 	bl	800906c <rshift>
 80092f0:	442f      	add	r7, r5
 80092f2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80092f6:	42bb      	cmp	r3, r7
 80092f8:	da42      	bge.n	8009380 <__gethex+0x244>
 80092fa:	9801      	ldr	r0, [sp, #4]
 80092fc:	4621      	mov	r1, r4
 80092fe:	f7fe f937 	bl	8007570 <_Bfree>
 8009302:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009304:	2300      	movs	r3, #0
 8009306:	6013      	str	r3, [r2, #0]
 8009308:	25a3      	movs	r5, #163	@ 0xa3
 800930a:	e793      	b.n	8009234 <__gethex+0xf8>
 800930c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8009310:	2a2e      	cmp	r2, #46	@ 0x2e
 8009312:	d012      	beq.n	800933a <__gethex+0x1fe>
 8009314:	2b20      	cmp	r3, #32
 8009316:	d104      	bne.n	8009322 <__gethex+0x1e6>
 8009318:	f845 bb04 	str.w	fp, [r5], #4
 800931c:	f04f 0b00 	mov.w	fp, #0
 8009320:	465b      	mov	r3, fp
 8009322:	7830      	ldrb	r0, [r6, #0]
 8009324:	9303      	str	r3, [sp, #12]
 8009326:	f7ff fef3 	bl	8009110 <__hexdig_fun>
 800932a:	9b03      	ldr	r3, [sp, #12]
 800932c:	f000 000f 	and.w	r0, r0, #15
 8009330:	4098      	lsls	r0, r3
 8009332:	ea4b 0b00 	orr.w	fp, fp, r0
 8009336:	3304      	adds	r3, #4
 8009338:	e7ae      	b.n	8009298 <__gethex+0x15c>
 800933a:	45b1      	cmp	r9, r6
 800933c:	d8ea      	bhi.n	8009314 <__gethex+0x1d8>
 800933e:	492b      	ldr	r1, [pc, #172]	@ (80093ec <__gethex+0x2b0>)
 8009340:	9303      	str	r3, [sp, #12]
 8009342:	2201      	movs	r2, #1
 8009344:	4630      	mov	r0, r6
 8009346:	f7ff fe27 	bl	8008f98 <strncmp>
 800934a:	9b03      	ldr	r3, [sp, #12]
 800934c:	2800      	cmp	r0, #0
 800934e:	d1e1      	bne.n	8009314 <__gethex+0x1d8>
 8009350:	e7a2      	b.n	8009298 <__gethex+0x15c>
 8009352:	1ea9      	subs	r1, r5, #2
 8009354:	4620      	mov	r0, r4
 8009356:	f7fe fd5c 	bl	8007e12 <__any_on>
 800935a:	2800      	cmp	r0, #0
 800935c:	d0c2      	beq.n	80092e4 <__gethex+0x1a8>
 800935e:	f04f 0903 	mov.w	r9, #3
 8009362:	e7c1      	b.n	80092e8 <__gethex+0x1ac>
 8009364:	da09      	bge.n	800937a <__gethex+0x23e>
 8009366:	1b75      	subs	r5, r6, r5
 8009368:	4621      	mov	r1, r4
 800936a:	9801      	ldr	r0, [sp, #4]
 800936c:	462a      	mov	r2, r5
 800936e:	f7fe fb17 	bl	80079a0 <__lshift>
 8009372:	1b7f      	subs	r7, r7, r5
 8009374:	4604      	mov	r4, r0
 8009376:	f100 0a14 	add.w	sl, r0, #20
 800937a:	f04f 0900 	mov.w	r9, #0
 800937e:	e7b8      	b.n	80092f2 <__gethex+0x1b6>
 8009380:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009384:	42bd      	cmp	r5, r7
 8009386:	dd6f      	ble.n	8009468 <__gethex+0x32c>
 8009388:	1bed      	subs	r5, r5, r7
 800938a:	42ae      	cmp	r6, r5
 800938c:	dc34      	bgt.n	80093f8 <__gethex+0x2bc>
 800938e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009392:	2b02      	cmp	r3, #2
 8009394:	d022      	beq.n	80093dc <__gethex+0x2a0>
 8009396:	2b03      	cmp	r3, #3
 8009398:	d024      	beq.n	80093e4 <__gethex+0x2a8>
 800939a:	2b01      	cmp	r3, #1
 800939c:	d115      	bne.n	80093ca <__gethex+0x28e>
 800939e:	42ae      	cmp	r6, r5
 80093a0:	d113      	bne.n	80093ca <__gethex+0x28e>
 80093a2:	2e01      	cmp	r6, #1
 80093a4:	d10b      	bne.n	80093be <__gethex+0x282>
 80093a6:	9a02      	ldr	r2, [sp, #8]
 80093a8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80093ac:	6013      	str	r3, [r2, #0]
 80093ae:	2301      	movs	r3, #1
 80093b0:	6123      	str	r3, [r4, #16]
 80093b2:	f8ca 3000 	str.w	r3, [sl]
 80093b6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80093b8:	2562      	movs	r5, #98	@ 0x62
 80093ba:	601c      	str	r4, [r3, #0]
 80093bc:	e73a      	b.n	8009234 <__gethex+0xf8>
 80093be:	1e71      	subs	r1, r6, #1
 80093c0:	4620      	mov	r0, r4
 80093c2:	f7fe fd26 	bl	8007e12 <__any_on>
 80093c6:	2800      	cmp	r0, #0
 80093c8:	d1ed      	bne.n	80093a6 <__gethex+0x26a>
 80093ca:	9801      	ldr	r0, [sp, #4]
 80093cc:	4621      	mov	r1, r4
 80093ce:	f7fe f8cf 	bl	8007570 <_Bfree>
 80093d2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80093d4:	2300      	movs	r3, #0
 80093d6:	6013      	str	r3, [r2, #0]
 80093d8:	2550      	movs	r5, #80	@ 0x50
 80093da:	e72b      	b.n	8009234 <__gethex+0xf8>
 80093dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d1f3      	bne.n	80093ca <__gethex+0x28e>
 80093e2:	e7e0      	b.n	80093a6 <__gethex+0x26a>
 80093e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d1dd      	bne.n	80093a6 <__gethex+0x26a>
 80093ea:	e7ee      	b.n	80093ca <__gethex+0x28e>
 80093ec:	08009fa0 	.word	0x08009fa0
 80093f0:	08009e35 	.word	0x08009e35
 80093f4:	0800a14e 	.word	0x0800a14e
 80093f8:	1e6f      	subs	r7, r5, #1
 80093fa:	f1b9 0f00 	cmp.w	r9, #0
 80093fe:	d130      	bne.n	8009462 <__gethex+0x326>
 8009400:	b127      	cbz	r7, 800940c <__gethex+0x2d0>
 8009402:	4639      	mov	r1, r7
 8009404:	4620      	mov	r0, r4
 8009406:	f7fe fd04 	bl	8007e12 <__any_on>
 800940a:	4681      	mov	r9, r0
 800940c:	117a      	asrs	r2, r7, #5
 800940e:	2301      	movs	r3, #1
 8009410:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8009414:	f007 071f 	and.w	r7, r7, #31
 8009418:	40bb      	lsls	r3, r7
 800941a:	4213      	tst	r3, r2
 800941c:	4629      	mov	r1, r5
 800941e:	4620      	mov	r0, r4
 8009420:	bf18      	it	ne
 8009422:	f049 0902 	orrne.w	r9, r9, #2
 8009426:	f7ff fe21 	bl	800906c <rshift>
 800942a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800942e:	1b76      	subs	r6, r6, r5
 8009430:	2502      	movs	r5, #2
 8009432:	f1b9 0f00 	cmp.w	r9, #0
 8009436:	d047      	beq.n	80094c8 <__gethex+0x38c>
 8009438:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800943c:	2b02      	cmp	r3, #2
 800943e:	d015      	beq.n	800946c <__gethex+0x330>
 8009440:	2b03      	cmp	r3, #3
 8009442:	d017      	beq.n	8009474 <__gethex+0x338>
 8009444:	2b01      	cmp	r3, #1
 8009446:	d109      	bne.n	800945c <__gethex+0x320>
 8009448:	f019 0f02 	tst.w	r9, #2
 800944c:	d006      	beq.n	800945c <__gethex+0x320>
 800944e:	f8da 3000 	ldr.w	r3, [sl]
 8009452:	ea49 0903 	orr.w	r9, r9, r3
 8009456:	f019 0f01 	tst.w	r9, #1
 800945a:	d10e      	bne.n	800947a <__gethex+0x33e>
 800945c:	f045 0510 	orr.w	r5, r5, #16
 8009460:	e032      	b.n	80094c8 <__gethex+0x38c>
 8009462:	f04f 0901 	mov.w	r9, #1
 8009466:	e7d1      	b.n	800940c <__gethex+0x2d0>
 8009468:	2501      	movs	r5, #1
 800946a:	e7e2      	b.n	8009432 <__gethex+0x2f6>
 800946c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800946e:	f1c3 0301 	rsb	r3, r3, #1
 8009472:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009474:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009476:	2b00      	cmp	r3, #0
 8009478:	d0f0      	beq.n	800945c <__gethex+0x320>
 800947a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800947e:	f104 0314 	add.w	r3, r4, #20
 8009482:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009486:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800948a:	f04f 0c00 	mov.w	ip, #0
 800948e:	4618      	mov	r0, r3
 8009490:	f853 2b04 	ldr.w	r2, [r3], #4
 8009494:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009498:	d01b      	beq.n	80094d2 <__gethex+0x396>
 800949a:	3201      	adds	r2, #1
 800949c:	6002      	str	r2, [r0, #0]
 800949e:	2d02      	cmp	r5, #2
 80094a0:	f104 0314 	add.w	r3, r4, #20
 80094a4:	d13c      	bne.n	8009520 <__gethex+0x3e4>
 80094a6:	f8d8 2000 	ldr.w	r2, [r8]
 80094aa:	3a01      	subs	r2, #1
 80094ac:	42b2      	cmp	r2, r6
 80094ae:	d109      	bne.n	80094c4 <__gethex+0x388>
 80094b0:	1171      	asrs	r1, r6, #5
 80094b2:	2201      	movs	r2, #1
 80094b4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80094b8:	f006 061f 	and.w	r6, r6, #31
 80094bc:	fa02 f606 	lsl.w	r6, r2, r6
 80094c0:	421e      	tst	r6, r3
 80094c2:	d13a      	bne.n	800953a <__gethex+0x3fe>
 80094c4:	f045 0520 	orr.w	r5, r5, #32
 80094c8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80094ca:	601c      	str	r4, [r3, #0]
 80094cc:	9b02      	ldr	r3, [sp, #8]
 80094ce:	601f      	str	r7, [r3, #0]
 80094d0:	e6b0      	b.n	8009234 <__gethex+0xf8>
 80094d2:	4299      	cmp	r1, r3
 80094d4:	f843 cc04 	str.w	ip, [r3, #-4]
 80094d8:	d8d9      	bhi.n	800948e <__gethex+0x352>
 80094da:	68a3      	ldr	r3, [r4, #8]
 80094dc:	459b      	cmp	fp, r3
 80094de:	db17      	blt.n	8009510 <__gethex+0x3d4>
 80094e0:	6861      	ldr	r1, [r4, #4]
 80094e2:	9801      	ldr	r0, [sp, #4]
 80094e4:	3101      	adds	r1, #1
 80094e6:	f7fe f803 	bl	80074f0 <_Balloc>
 80094ea:	4681      	mov	r9, r0
 80094ec:	b918      	cbnz	r0, 80094f6 <__gethex+0x3ba>
 80094ee:	4b1a      	ldr	r3, [pc, #104]	@ (8009558 <__gethex+0x41c>)
 80094f0:	4602      	mov	r2, r0
 80094f2:	2184      	movs	r1, #132	@ 0x84
 80094f4:	e6c5      	b.n	8009282 <__gethex+0x146>
 80094f6:	6922      	ldr	r2, [r4, #16]
 80094f8:	3202      	adds	r2, #2
 80094fa:	f104 010c 	add.w	r1, r4, #12
 80094fe:	0092      	lsls	r2, r2, #2
 8009500:	300c      	adds	r0, #12
 8009502:	f7ff fd6b 	bl	8008fdc <memcpy>
 8009506:	4621      	mov	r1, r4
 8009508:	9801      	ldr	r0, [sp, #4]
 800950a:	f7fe f831 	bl	8007570 <_Bfree>
 800950e:	464c      	mov	r4, r9
 8009510:	6923      	ldr	r3, [r4, #16]
 8009512:	1c5a      	adds	r2, r3, #1
 8009514:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009518:	6122      	str	r2, [r4, #16]
 800951a:	2201      	movs	r2, #1
 800951c:	615a      	str	r2, [r3, #20]
 800951e:	e7be      	b.n	800949e <__gethex+0x362>
 8009520:	6922      	ldr	r2, [r4, #16]
 8009522:	455a      	cmp	r2, fp
 8009524:	dd0b      	ble.n	800953e <__gethex+0x402>
 8009526:	2101      	movs	r1, #1
 8009528:	4620      	mov	r0, r4
 800952a:	f7ff fd9f 	bl	800906c <rshift>
 800952e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009532:	3701      	adds	r7, #1
 8009534:	42bb      	cmp	r3, r7
 8009536:	f6ff aee0 	blt.w	80092fa <__gethex+0x1be>
 800953a:	2501      	movs	r5, #1
 800953c:	e7c2      	b.n	80094c4 <__gethex+0x388>
 800953e:	f016 061f 	ands.w	r6, r6, #31
 8009542:	d0fa      	beq.n	800953a <__gethex+0x3fe>
 8009544:	4453      	add	r3, sl
 8009546:	f1c6 0620 	rsb	r6, r6, #32
 800954a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800954e:	f7fe f8c1 	bl	80076d4 <__hi0bits>
 8009552:	42b0      	cmp	r0, r6
 8009554:	dbe7      	blt.n	8009526 <__gethex+0x3ea>
 8009556:	e7f0      	b.n	800953a <__gethex+0x3fe>
 8009558:	08009e35 	.word	0x08009e35

0800955c <L_shift>:
 800955c:	f1c2 0208 	rsb	r2, r2, #8
 8009560:	0092      	lsls	r2, r2, #2
 8009562:	b570      	push	{r4, r5, r6, lr}
 8009564:	f1c2 0620 	rsb	r6, r2, #32
 8009568:	6843      	ldr	r3, [r0, #4]
 800956a:	6804      	ldr	r4, [r0, #0]
 800956c:	fa03 f506 	lsl.w	r5, r3, r6
 8009570:	432c      	orrs	r4, r5
 8009572:	40d3      	lsrs	r3, r2
 8009574:	6004      	str	r4, [r0, #0]
 8009576:	f840 3f04 	str.w	r3, [r0, #4]!
 800957a:	4288      	cmp	r0, r1
 800957c:	d3f4      	bcc.n	8009568 <L_shift+0xc>
 800957e:	bd70      	pop	{r4, r5, r6, pc}

08009580 <__match>:
 8009580:	b530      	push	{r4, r5, lr}
 8009582:	6803      	ldr	r3, [r0, #0]
 8009584:	3301      	adds	r3, #1
 8009586:	f811 4b01 	ldrb.w	r4, [r1], #1
 800958a:	b914      	cbnz	r4, 8009592 <__match+0x12>
 800958c:	6003      	str	r3, [r0, #0]
 800958e:	2001      	movs	r0, #1
 8009590:	bd30      	pop	{r4, r5, pc}
 8009592:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009596:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800959a:	2d19      	cmp	r5, #25
 800959c:	bf98      	it	ls
 800959e:	3220      	addls	r2, #32
 80095a0:	42a2      	cmp	r2, r4
 80095a2:	d0f0      	beq.n	8009586 <__match+0x6>
 80095a4:	2000      	movs	r0, #0
 80095a6:	e7f3      	b.n	8009590 <__match+0x10>

080095a8 <__hexnan>:
 80095a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095ac:	680b      	ldr	r3, [r1, #0]
 80095ae:	6801      	ldr	r1, [r0, #0]
 80095b0:	115e      	asrs	r6, r3, #5
 80095b2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80095b6:	f013 031f 	ands.w	r3, r3, #31
 80095ba:	b087      	sub	sp, #28
 80095bc:	bf18      	it	ne
 80095be:	3604      	addne	r6, #4
 80095c0:	2500      	movs	r5, #0
 80095c2:	1f37      	subs	r7, r6, #4
 80095c4:	4682      	mov	sl, r0
 80095c6:	4690      	mov	r8, r2
 80095c8:	9301      	str	r3, [sp, #4]
 80095ca:	f846 5c04 	str.w	r5, [r6, #-4]
 80095ce:	46b9      	mov	r9, r7
 80095d0:	463c      	mov	r4, r7
 80095d2:	9502      	str	r5, [sp, #8]
 80095d4:	46ab      	mov	fp, r5
 80095d6:	784a      	ldrb	r2, [r1, #1]
 80095d8:	1c4b      	adds	r3, r1, #1
 80095da:	9303      	str	r3, [sp, #12]
 80095dc:	b342      	cbz	r2, 8009630 <__hexnan+0x88>
 80095de:	4610      	mov	r0, r2
 80095e0:	9105      	str	r1, [sp, #20]
 80095e2:	9204      	str	r2, [sp, #16]
 80095e4:	f7ff fd94 	bl	8009110 <__hexdig_fun>
 80095e8:	2800      	cmp	r0, #0
 80095ea:	d151      	bne.n	8009690 <__hexnan+0xe8>
 80095ec:	9a04      	ldr	r2, [sp, #16]
 80095ee:	9905      	ldr	r1, [sp, #20]
 80095f0:	2a20      	cmp	r2, #32
 80095f2:	d818      	bhi.n	8009626 <__hexnan+0x7e>
 80095f4:	9b02      	ldr	r3, [sp, #8]
 80095f6:	459b      	cmp	fp, r3
 80095f8:	dd13      	ble.n	8009622 <__hexnan+0x7a>
 80095fa:	454c      	cmp	r4, r9
 80095fc:	d206      	bcs.n	800960c <__hexnan+0x64>
 80095fe:	2d07      	cmp	r5, #7
 8009600:	dc04      	bgt.n	800960c <__hexnan+0x64>
 8009602:	462a      	mov	r2, r5
 8009604:	4649      	mov	r1, r9
 8009606:	4620      	mov	r0, r4
 8009608:	f7ff ffa8 	bl	800955c <L_shift>
 800960c:	4544      	cmp	r4, r8
 800960e:	d952      	bls.n	80096b6 <__hexnan+0x10e>
 8009610:	2300      	movs	r3, #0
 8009612:	f1a4 0904 	sub.w	r9, r4, #4
 8009616:	f844 3c04 	str.w	r3, [r4, #-4]
 800961a:	f8cd b008 	str.w	fp, [sp, #8]
 800961e:	464c      	mov	r4, r9
 8009620:	461d      	mov	r5, r3
 8009622:	9903      	ldr	r1, [sp, #12]
 8009624:	e7d7      	b.n	80095d6 <__hexnan+0x2e>
 8009626:	2a29      	cmp	r2, #41	@ 0x29
 8009628:	d157      	bne.n	80096da <__hexnan+0x132>
 800962a:	3102      	adds	r1, #2
 800962c:	f8ca 1000 	str.w	r1, [sl]
 8009630:	f1bb 0f00 	cmp.w	fp, #0
 8009634:	d051      	beq.n	80096da <__hexnan+0x132>
 8009636:	454c      	cmp	r4, r9
 8009638:	d206      	bcs.n	8009648 <__hexnan+0xa0>
 800963a:	2d07      	cmp	r5, #7
 800963c:	dc04      	bgt.n	8009648 <__hexnan+0xa0>
 800963e:	462a      	mov	r2, r5
 8009640:	4649      	mov	r1, r9
 8009642:	4620      	mov	r0, r4
 8009644:	f7ff ff8a 	bl	800955c <L_shift>
 8009648:	4544      	cmp	r4, r8
 800964a:	d936      	bls.n	80096ba <__hexnan+0x112>
 800964c:	f1a8 0204 	sub.w	r2, r8, #4
 8009650:	4623      	mov	r3, r4
 8009652:	f853 1b04 	ldr.w	r1, [r3], #4
 8009656:	f842 1f04 	str.w	r1, [r2, #4]!
 800965a:	429f      	cmp	r7, r3
 800965c:	d2f9      	bcs.n	8009652 <__hexnan+0xaa>
 800965e:	1b3b      	subs	r3, r7, r4
 8009660:	f023 0303 	bic.w	r3, r3, #3
 8009664:	3304      	adds	r3, #4
 8009666:	3401      	adds	r4, #1
 8009668:	3e03      	subs	r6, #3
 800966a:	42b4      	cmp	r4, r6
 800966c:	bf88      	it	hi
 800966e:	2304      	movhi	r3, #4
 8009670:	4443      	add	r3, r8
 8009672:	2200      	movs	r2, #0
 8009674:	f843 2b04 	str.w	r2, [r3], #4
 8009678:	429f      	cmp	r7, r3
 800967a:	d2fb      	bcs.n	8009674 <__hexnan+0xcc>
 800967c:	683b      	ldr	r3, [r7, #0]
 800967e:	b91b      	cbnz	r3, 8009688 <__hexnan+0xe0>
 8009680:	4547      	cmp	r7, r8
 8009682:	d128      	bne.n	80096d6 <__hexnan+0x12e>
 8009684:	2301      	movs	r3, #1
 8009686:	603b      	str	r3, [r7, #0]
 8009688:	2005      	movs	r0, #5
 800968a:	b007      	add	sp, #28
 800968c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009690:	3501      	adds	r5, #1
 8009692:	2d08      	cmp	r5, #8
 8009694:	f10b 0b01 	add.w	fp, fp, #1
 8009698:	dd06      	ble.n	80096a8 <__hexnan+0x100>
 800969a:	4544      	cmp	r4, r8
 800969c:	d9c1      	bls.n	8009622 <__hexnan+0x7a>
 800969e:	2300      	movs	r3, #0
 80096a0:	f844 3c04 	str.w	r3, [r4, #-4]
 80096a4:	2501      	movs	r5, #1
 80096a6:	3c04      	subs	r4, #4
 80096a8:	6822      	ldr	r2, [r4, #0]
 80096aa:	f000 000f 	and.w	r0, r0, #15
 80096ae:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80096b2:	6020      	str	r0, [r4, #0]
 80096b4:	e7b5      	b.n	8009622 <__hexnan+0x7a>
 80096b6:	2508      	movs	r5, #8
 80096b8:	e7b3      	b.n	8009622 <__hexnan+0x7a>
 80096ba:	9b01      	ldr	r3, [sp, #4]
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d0dd      	beq.n	800967c <__hexnan+0xd4>
 80096c0:	f1c3 0320 	rsb	r3, r3, #32
 80096c4:	f04f 32ff 	mov.w	r2, #4294967295
 80096c8:	40da      	lsrs	r2, r3
 80096ca:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80096ce:	4013      	ands	r3, r2
 80096d0:	f846 3c04 	str.w	r3, [r6, #-4]
 80096d4:	e7d2      	b.n	800967c <__hexnan+0xd4>
 80096d6:	3f04      	subs	r7, #4
 80096d8:	e7d0      	b.n	800967c <__hexnan+0xd4>
 80096da:	2004      	movs	r0, #4
 80096dc:	e7d5      	b.n	800968a <__hexnan+0xe2>

080096de <__ascii_mbtowc>:
 80096de:	b082      	sub	sp, #8
 80096e0:	b901      	cbnz	r1, 80096e4 <__ascii_mbtowc+0x6>
 80096e2:	a901      	add	r1, sp, #4
 80096e4:	b142      	cbz	r2, 80096f8 <__ascii_mbtowc+0x1a>
 80096e6:	b14b      	cbz	r3, 80096fc <__ascii_mbtowc+0x1e>
 80096e8:	7813      	ldrb	r3, [r2, #0]
 80096ea:	600b      	str	r3, [r1, #0]
 80096ec:	7812      	ldrb	r2, [r2, #0]
 80096ee:	1e10      	subs	r0, r2, #0
 80096f0:	bf18      	it	ne
 80096f2:	2001      	movne	r0, #1
 80096f4:	b002      	add	sp, #8
 80096f6:	4770      	bx	lr
 80096f8:	4610      	mov	r0, r2
 80096fa:	e7fb      	b.n	80096f4 <__ascii_mbtowc+0x16>
 80096fc:	f06f 0001 	mvn.w	r0, #1
 8009700:	e7f8      	b.n	80096f4 <__ascii_mbtowc+0x16>

08009702 <_realloc_r>:
 8009702:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009706:	4680      	mov	r8, r0
 8009708:	4615      	mov	r5, r2
 800970a:	460c      	mov	r4, r1
 800970c:	b921      	cbnz	r1, 8009718 <_realloc_r+0x16>
 800970e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009712:	4611      	mov	r1, r2
 8009714:	f7fd be60 	b.w	80073d8 <_malloc_r>
 8009718:	b92a      	cbnz	r2, 8009726 <_realloc_r+0x24>
 800971a:	f7fd fde9 	bl	80072f0 <_free_r>
 800971e:	2400      	movs	r4, #0
 8009720:	4620      	mov	r0, r4
 8009722:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009726:	f000 f840 	bl	80097aa <_malloc_usable_size_r>
 800972a:	4285      	cmp	r5, r0
 800972c:	4606      	mov	r6, r0
 800972e:	d802      	bhi.n	8009736 <_realloc_r+0x34>
 8009730:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009734:	d8f4      	bhi.n	8009720 <_realloc_r+0x1e>
 8009736:	4629      	mov	r1, r5
 8009738:	4640      	mov	r0, r8
 800973a:	f7fd fe4d 	bl	80073d8 <_malloc_r>
 800973e:	4607      	mov	r7, r0
 8009740:	2800      	cmp	r0, #0
 8009742:	d0ec      	beq.n	800971e <_realloc_r+0x1c>
 8009744:	42b5      	cmp	r5, r6
 8009746:	462a      	mov	r2, r5
 8009748:	4621      	mov	r1, r4
 800974a:	bf28      	it	cs
 800974c:	4632      	movcs	r2, r6
 800974e:	f7ff fc45 	bl	8008fdc <memcpy>
 8009752:	4621      	mov	r1, r4
 8009754:	4640      	mov	r0, r8
 8009756:	f7fd fdcb 	bl	80072f0 <_free_r>
 800975a:	463c      	mov	r4, r7
 800975c:	e7e0      	b.n	8009720 <_realloc_r+0x1e>

0800975e <__ascii_wctomb>:
 800975e:	4603      	mov	r3, r0
 8009760:	4608      	mov	r0, r1
 8009762:	b141      	cbz	r1, 8009776 <__ascii_wctomb+0x18>
 8009764:	2aff      	cmp	r2, #255	@ 0xff
 8009766:	d904      	bls.n	8009772 <__ascii_wctomb+0x14>
 8009768:	228a      	movs	r2, #138	@ 0x8a
 800976a:	601a      	str	r2, [r3, #0]
 800976c:	f04f 30ff 	mov.w	r0, #4294967295
 8009770:	4770      	bx	lr
 8009772:	700a      	strb	r2, [r1, #0]
 8009774:	2001      	movs	r0, #1
 8009776:	4770      	bx	lr

08009778 <fiprintf>:
 8009778:	b40e      	push	{r1, r2, r3}
 800977a:	b503      	push	{r0, r1, lr}
 800977c:	4601      	mov	r1, r0
 800977e:	ab03      	add	r3, sp, #12
 8009780:	4805      	ldr	r0, [pc, #20]	@ (8009798 <fiprintf+0x20>)
 8009782:	f853 2b04 	ldr.w	r2, [r3], #4
 8009786:	6800      	ldr	r0, [r0, #0]
 8009788:	9301      	str	r3, [sp, #4]
 800978a:	f000 f83f 	bl	800980c <_vfiprintf_r>
 800978e:	b002      	add	sp, #8
 8009790:	f85d eb04 	ldr.w	lr, [sp], #4
 8009794:	b003      	add	sp, #12
 8009796:	4770      	bx	lr
 8009798:	20000018 	.word	0x20000018

0800979c <abort>:
 800979c:	b508      	push	{r3, lr}
 800979e:	2006      	movs	r0, #6
 80097a0:	f000 fa08 	bl	8009bb4 <raise>
 80097a4:	2001      	movs	r0, #1
 80097a6:	f7f7 ff32 	bl	800160e <_exit>

080097aa <_malloc_usable_size_r>:
 80097aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80097ae:	1f18      	subs	r0, r3, #4
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	bfbc      	itt	lt
 80097b4:	580b      	ldrlt	r3, [r1, r0]
 80097b6:	18c0      	addlt	r0, r0, r3
 80097b8:	4770      	bx	lr

080097ba <__sfputc_r>:
 80097ba:	6893      	ldr	r3, [r2, #8]
 80097bc:	3b01      	subs	r3, #1
 80097be:	2b00      	cmp	r3, #0
 80097c0:	b410      	push	{r4}
 80097c2:	6093      	str	r3, [r2, #8]
 80097c4:	da08      	bge.n	80097d8 <__sfputc_r+0x1e>
 80097c6:	6994      	ldr	r4, [r2, #24]
 80097c8:	42a3      	cmp	r3, r4
 80097ca:	db01      	blt.n	80097d0 <__sfputc_r+0x16>
 80097cc:	290a      	cmp	r1, #10
 80097ce:	d103      	bne.n	80097d8 <__sfputc_r+0x1e>
 80097d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80097d4:	f000 b932 	b.w	8009a3c <__swbuf_r>
 80097d8:	6813      	ldr	r3, [r2, #0]
 80097da:	1c58      	adds	r0, r3, #1
 80097dc:	6010      	str	r0, [r2, #0]
 80097de:	7019      	strb	r1, [r3, #0]
 80097e0:	4608      	mov	r0, r1
 80097e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80097e6:	4770      	bx	lr

080097e8 <__sfputs_r>:
 80097e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097ea:	4606      	mov	r6, r0
 80097ec:	460f      	mov	r7, r1
 80097ee:	4614      	mov	r4, r2
 80097f0:	18d5      	adds	r5, r2, r3
 80097f2:	42ac      	cmp	r4, r5
 80097f4:	d101      	bne.n	80097fa <__sfputs_r+0x12>
 80097f6:	2000      	movs	r0, #0
 80097f8:	e007      	b.n	800980a <__sfputs_r+0x22>
 80097fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80097fe:	463a      	mov	r2, r7
 8009800:	4630      	mov	r0, r6
 8009802:	f7ff ffda 	bl	80097ba <__sfputc_r>
 8009806:	1c43      	adds	r3, r0, #1
 8009808:	d1f3      	bne.n	80097f2 <__sfputs_r+0xa>
 800980a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800980c <_vfiprintf_r>:
 800980c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009810:	460d      	mov	r5, r1
 8009812:	b09d      	sub	sp, #116	@ 0x74
 8009814:	4614      	mov	r4, r2
 8009816:	4698      	mov	r8, r3
 8009818:	4606      	mov	r6, r0
 800981a:	b118      	cbz	r0, 8009824 <_vfiprintf_r+0x18>
 800981c:	6a03      	ldr	r3, [r0, #32]
 800981e:	b90b      	cbnz	r3, 8009824 <_vfiprintf_r+0x18>
 8009820:	f7fc fdfa 	bl	8006418 <__sinit>
 8009824:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009826:	07d9      	lsls	r1, r3, #31
 8009828:	d405      	bmi.n	8009836 <_vfiprintf_r+0x2a>
 800982a:	89ab      	ldrh	r3, [r5, #12]
 800982c:	059a      	lsls	r2, r3, #22
 800982e:	d402      	bmi.n	8009836 <_vfiprintf_r+0x2a>
 8009830:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009832:	f7fc ff08 	bl	8006646 <__retarget_lock_acquire_recursive>
 8009836:	89ab      	ldrh	r3, [r5, #12]
 8009838:	071b      	lsls	r3, r3, #28
 800983a:	d501      	bpl.n	8009840 <_vfiprintf_r+0x34>
 800983c:	692b      	ldr	r3, [r5, #16]
 800983e:	b99b      	cbnz	r3, 8009868 <_vfiprintf_r+0x5c>
 8009840:	4629      	mov	r1, r5
 8009842:	4630      	mov	r0, r6
 8009844:	f000 f938 	bl	8009ab8 <__swsetup_r>
 8009848:	b170      	cbz	r0, 8009868 <_vfiprintf_r+0x5c>
 800984a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800984c:	07dc      	lsls	r4, r3, #31
 800984e:	d504      	bpl.n	800985a <_vfiprintf_r+0x4e>
 8009850:	f04f 30ff 	mov.w	r0, #4294967295
 8009854:	b01d      	add	sp, #116	@ 0x74
 8009856:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800985a:	89ab      	ldrh	r3, [r5, #12]
 800985c:	0598      	lsls	r0, r3, #22
 800985e:	d4f7      	bmi.n	8009850 <_vfiprintf_r+0x44>
 8009860:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009862:	f7fc fef1 	bl	8006648 <__retarget_lock_release_recursive>
 8009866:	e7f3      	b.n	8009850 <_vfiprintf_r+0x44>
 8009868:	2300      	movs	r3, #0
 800986a:	9309      	str	r3, [sp, #36]	@ 0x24
 800986c:	2320      	movs	r3, #32
 800986e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009872:	f8cd 800c 	str.w	r8, [sp, #12]
 8009876:	2330      	movs	r3, #48	@ 0x30
 8009878:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009a28 <_vfiprintf_r+0x21c>
 800987c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009880:	f04f 0901 	mov.w	r9, #1
 8009884:	4623      	mov	r3, r4
 8009886:	469a      	mov	sl, r3
 8009888:	f813 2b01 	ldrb.w	r2, [r3], #1
 800988c:	b10a      	cbz	r2, 8009892 <_vfiprintf_r+0x86>
 800988e:	2a25      	cmp	r2, #37	@ 0x25
 8009890:	d1f9      	bne.n	8009886 <_vfiprintf_r+0x7a>
 8009892:	ebba 0b04 	subs.w	fp, sl, r4
 8009896:	d00b      	beq.n	80098b0 <_vfiprintf_r+0xa4>
 8009898:	465b      	mov	r3, fp
 800989a:	4622      	mov	r2, r4
 800989c:	4629      	mov	r1, r5
 800989e:	4630      	mov	r0, r6
 80098a0:	f7ff ffa2 	bl	80097e8 <__sfputs_r>
 80098a4:	3001      	adds	r0, #1
 80098a6:	f000 80a7 	beq.w	80099f8 <_vfiprintf_r+0x1ec>
 80098aa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80098ac:	445a      	add	r2, fp
 80098ae:	9209      	str	r2, [sp, #36]	@ 0x24
 80098b0:	f89a 3000 	ldrb.w	r3, [sl]
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	f000 809f 	beq.w	80099f8 <_vfiprintf_r+0x1ec>
 80098ba:	2300      	movs	r3, #0
 80098bc:	f04f 32ff 	mov.w	r2, #4294967295
 80098c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80098c4:	f10a 0a01 	add.w	sl, sl, #1
 80098c8:	9304      	str	r3, [sp, #16]
 80098ca:	9307      	str	r3, [sp, #28]
 80098cc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80098d0:	931a      	str	r3, [sp, #104]	@ 0x68
 80098d2:	4654      	mov	r4, sl
 80098d4:	2205      	movs	r2, #5
 80098d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80098da:	4853      	ldr	r0, [pc, #332]	@ (8009a28 <_vfiprintf_r+0x21c>)
 80098dc:	f7f6 fc78 	bl	80001d0 <memchr>
 80098e0:	9a04      	ldr	r2, [sp, #16]
 80098e2:	b9d8      	cbnz	r0, 800991c <_vfiprintf_r+0x110>
 80098e4:	06d1      	lsls	r1, r2, #27
 80098e6:	bf44      	itt	mi
 80098e8:	2320      	movmi	r3, #32
 80098ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80098ee:	0713      	lsls	r3, r2, #28
 80098f0:	bf44      	itt	mi
 80098f2:	232b      	movmi	r3, #43	@ 0x2b
 80098f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80098f8:	f89a 3000 	ldrb.w	r3, [sl]
 80098fc:	2b2a      	cmp	r3, #42	@ 0x2a
 80098fe:	d015      	beq.n	800992c <_vfiprintf_r+0x120>
 8009900:	9a07      	ldr	r2, [sp, #28]
 8009902:	4654      	mov	r4, sl
 8009904:	2000      	movs	r0, #0
 8009906:	f04f 0c0a 	mov.w	ip, #10
 800990a:	4621      	mov	r1, r4
 800990c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009910:	3b30      	subs	r3, #48	@ 0x30
 8009912:	2b09      	cmp	r3, #9
 8009914:	d94b      	bls.n	80099ae <_vfiprintf_r+0x1a2>
 8009916:	b1b0      	cbz	r0, 8009946 <_vfiprintf_r+0x13a>
 8009918:	9207      	str	r2, [sp, #28]
 800991a:	e014      	b.n	8009946 <_vfiprintf_r+0x13a>
 800991c:	eba0 0308 	sub.w	r3, r0, r8
 8009920:	fa09 f303 	lsl.w	r3, r9, r3
 8009924:	4313      	orrs	r3, r2
 8009926:	9304      	str	r3, [sp, #16]
 8009928:	46a2      	mov	sl, r4
 800992a:	e7d2      	b.n	80098d2 <_vfiprintf_r+0xc6>
 800992c:	9b03      	ldr	r3, [sp, #12]
 800992e:	1d19      	adds	r1, r3, #4
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	9103      	str	r1, [sp, #12]
 8009934:	2b00      	cmp	r3, #0
 8009936:	bfbb      	ittet	lt
 8009938:	425b      	neglt	r3, r3
 800993a:	f042 0202 	orrlt.w	r2, r2, #2
 800993e:	9307      	strge	r3, [sp, #28]
 8009940:	9307      	strlt	r3, [sp, #28]
 8009942:	bfb8      	it	lt
 8009944:	9204      	strlt	r2, [sp, #16]
 8009946:	7823      	ldrb	r3, [r4, #0]
 8009948:	2b2e      	cmp	r3, #46	@ 0x2e
 800994a:	d10a      	bne.n	8009962 <_vfiprintf_r+0x156>
 800994c:	7863      	ldrb	r3, [r4, #1]
 800994e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009950:	d132      	bne.n	80099b8 <_vfiprintf_r+0x1ac>
 8009952:	9b03      	ldr	r3, [sp, #12]
 8009954:	1d1a      	adds	r2, r3, #4
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	9203      	str	r2, [sp, #12]
 800995a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800995e:	3402      	adds	r4, #2
 8009960:	9305      	str	r3, [sp, #20]
 8009962:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009a38 <_vfiprintf_r+0x22c>
 8009966:	7821      	ldrb	r1, [r4, #0]
 8009968:	2203      	movs	r2, #3
 800996a:	4650      	mov	r0, sl
 800996c:	f7f6 fc30 	bl	80001d0 <memchr>
 8009970:	b138      	cbz	r0, 8009982 <_vfiprintf_r+0x176>
 8009972:	9b04      	ldr	r3, [sp, #16]
 8009974:	eba0 000a 	sub.w	r0, r0, sl
 8009978:	2240      	movs	r2, #64	@ 0x40
 800997a:	4082      	lsls	r2, r0
 800997c:	4313      	orrs	r3, r2
 800997e:	3401      	adds	r4, #1
 8009980:	9304      	str	r3, [sp, #16]
 8009982:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009986:	4829      	ldr	r0, [pc, #164]	@ (8009a2c <_vfiprintf_r+0x220>)
 8009988:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800998c:	2206      	movs	r2, #6
 800998e:	f7f6 fc1f 	bl	80001d0 <memchr>
 8009992:	2800      	cmp	r0, #0
 8009994:	d03f      	beq.n	8009a16 <_vfiprintf_r+0x20a>
 8009996:	4b26      	ldr	r3, [pc, #152]	@ (8009a30 <_vfiprintf_r+0x224>)
 8009998:	bb1b      	cbnz	r3, 80099e2 <_vfiprintf_r+0x1d6>
 800999a:	9b03      	ldr	r3, [sp, #12]
 800999c:	3307      	adds	r3, #7
 800999e:	f023 0307 	bic.w	r3, r3, #7
 80099a2:	3308      	adds	r3, #8
 80099a4:	9303      	str	r3, [sp, #12]
 80099a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80099a8:	443b      	add	r3, r7
 80099aa:	9309      	str	r3, [sp, #36]	@ 0x24
 80099ac:	e76a      	b.n	8009884 <_vfiprintf_r+0x78>
 80099ae:	fb0c 3202 	mla	r2, ip, r2, r3
 80099b2:	460c      	mov	r4, r1
 80099b4:	2001      	movs	r0, #1
 80099b6:	e7a8      	b.n	800990a <_vfiprintf_r+0xfe>
 80099b8:	2300      	movs	r3, #0
 80099ba:	3401      	adds	r4, #1
 80099bc:	9305      	str	r3, [sp, #20]
 80099be:	4619      	mov	r1, r3
 80099c0:	f04f 0c0a 	mov.w	ip, #10
 80099c4:	4620      	mov	r0, r4
 80099c6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80099ca:	3a30      	subs	r2, #48	@ 0x30
 80099cc:	2a09      	cmp	r2, #9
 80099ce:	d903      	bls.n	80099d8 <_vfiprintf_r+0x1cc>
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d0c6      	beq.n	8009962 <_vfiprintf_r+0x156>
 80099d4:	9105      	str	r1, [sp, #20]
 80099d6:	e7c4      	b.n	8009962 <_vfiprintf_r+0x156>
 80099d8:	fb0c 2101 	mla	r1, ip, r1, r2
 80099dc:	4604      	mov	r4, r0
 80099de:	2301      	movs	r3, #1
 80099e0:	e7f0      	b.n	80099c4 <_vfiprintf_r+0x1b8>
 80099e2:	ab03      	add	r3, sp, #12
 80099e4:	9300      	str	r3, [sp, #0]
 80099e6:	462a      	mov	r2, r5
 80099e8:	4b12      	ldr	r3, [pc, #72]	@ (8009a34 <_vfiprintf_r+0x228>)
 80099ea:	a904      	add	r1, sp, #16
 80099ec:	4630      	mov	r0, r6
 80099ee:	f7fb febb 	bl	8005768 <_printf_float>
 80099f2:	4607      	mov	r7, r0
 80099f4:	1c78      	adds	r0, r7, #1
 80099f6:	d1d6      	bne.n	80099a6 <_vfiprintf_r+0x19a>
 80099f8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80099fa:	07d9      	lsls	r1, r3, #31
 80099fc:	d405      	bmi.n	8009a0a <_vfiprintf_r+0x1fe>
 80099fe:	89ab      	ldrh	r3, [r5, #12]
 8009a00:	059a      	lsls	r2, r3, #22
 8009a02:	d402      	bmi.n	8009a0a <_vfiprintf_r+0x1fe>
 8009a04:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009a06:	f7fc fe1f 	bl	8006648 <__retarget_lock_release_recursive>
 8009a0a:	89ab      	ldrh	r3, [r5, #12]
 8009a0c:	065b      	lsls	r3, r3, #25
 8009a0e:	f53f af1f 	bmi.w	8009850 <_vfiprintf_r+0x44>
 8009a12:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009a14:	e71e      	b.n	8009854 <_vfiprintf_r+0x48>
 8009a16:	ab03      	add	r3, sp, #12
 8009a18:	9300      	str	r3, [sp, #0]
 8009a1a:	462a      	mov	r2, r5
 8009a1c:	4b05      	ldr	r3, [pc, #20]	@ (8009a34 <_vfiprintf_r+0x228>)
 8009a1e:	a904      	add	r1, sp, #16
 8009a20:	4630      	mov	r0, r6
 8009a22:	f7fc f939 	bl	8005c98 <_printf_i>
 8009a26:	e7e4      	b.n	80099f2 <_vfiprintf_r+0x1e6>
 8009a28:	0800a0f9 	.word	0x0800a0f9
 8009a2c:	0800a103 	.word	0x0800a103
 8009a30:	08005769 	.word	0x08005769
 8009a34:	080097e9 	.word	0x080097e9
 8009a38:	0800a0ff 	.word	0x0800a0ff

08009a3c <__swbuf_r>:
 8009a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a3e:	460e      	mov	r6, r1
 8009a40:	4614      	mov	r4, r2
 8009a42:	4605      	mov	r5, r0
 8009a44:	b118      	cbz	r0, 8009a4e <__swbuf_r+0x12>
 8009a46:	6a03      	ldr	r3, [r0, #32]
 8009a48:	b90b      	cbnz	r3, 8009a4e <__swbuf_r+0x12>
 8009a4a:	f7fc fce5 	bl	8006418 <__sinit>
 8009a4e:	69a3      	ldr	r3, [r4, #24]
 8009a50:	60a3      	str	r3, [r4, #8]
 8009a52:	89a3      	ldrh	r3, [r4, #12]
 8009a54:	071a      	lsls	r2, r3, #28
 8009a56:	d501      	bpl.n	8009a5c <__swbuf_r+0x20>
 8009a58:	6923      	ldr	r3, [r4, #16]
 8009a5a:	b943      	cbnz	r3, 8009a6e <__swbuf_r+0x32>
 8009a5c:	4621      	mov	r1, r4
 8009a5e:	4628      	mov	r0, r5
 8009a60:	f000 f82a 	bl	8009ab8 <__swsetup_r>
 8009a64:	b118      	cbz	r0, 8009a6e <__swbuf_r+0x32>
 8009a66:	f04f 37ff 	mov.w	r7, #4294967295
 8009a6a:	4638      	mov	r0, r7
 8009a6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a6e:	6823      	ldr	r3, [r4, #0]
 8009a70:	6922      	ldr	r2, [r4, #16]
 8009a72:	1a98      	subs	r0, r3, r2
 8009a74:	6963      	ldr	r3, [r4, #20]
 8009a76:	b2f6      	uxtb	r6, r6
 8009a78:	4283      	cmp	r3, r0
 8009a7a:	4637      	mov	r7, r6
 8009a7c:	dc05      	bgt.n	8009a8a <__swbuf_r+0x4e>
 8009a7e:	4621      	mov	r1, r4
 8009a80:	4628      	mov	r0, r5
 8009a82:	f7ff fa47 	bl	8008f14 <_fflush_r>
 8009a86:	2800      	cmp	r0, #0
 8009a88:	d1ed      	bne.n	8009a66 <__swbuf_r+0x2a>
 8009a8a:	68a3      	ldr	r3, [r4, #8]
 8009a8c:	3b01      	subs	r3, #1
 8009a8e:	60a3      	str	r3, [r4, #8]
 8009a90:	6823      	ldr	r3, [r4, #0]
 8009a92:	1c5a      	adds	r2, r3, #1
 8009a94:	6022      	str	r2, [r4, #0]
 8009a96:	701e      	strb	r6, [r3, #0]
 8009a98:	6962      	ldr	r2, [r4, #20]
 8009a9a:	1c43      	adds	r3, r0, #1
 8009a9c:	429a      	cmp	r2, r3
 8009a9e:	d004      	beq.n	8009aaa <__swbuf_r+0x6e>
 8009aa0:	89a3      	ldrh	r3, [r4, #12]
 8009aa2:	07db      	lsls	r3, r3, #31
 8009aa4:	d5e1      	bpl.n	8009a6a <__swbuf_r+0x2e>
 8009aa6:	2e0a      	cmp	r6, #10
 8009aa8:	d1df      	bne.n	8009a6a <__swbuf_r+0x2e>
 8009aaa:	4621      	mov	r1, r4
 8009aac:	4628      	mov	r0, r5
 8009aae:	f7ff fa31 	bl	8008f14 <_fflush_r>
 8009ab2:	2800      	cmp	r0, #0
 8009ab4:	d0d9      	beq.n	8009a6a <__swbuf_r+0x2e>
 8009ab6:	e7d6      	b.n	8009a66 <__swbuf_r+0x2a>

08009ab8 <__swsetup_r>:
 8009ab8:	b538      	push	{r3, r4, r5, lr}
 8009aba:	4b29      	ldr	r3, [pc, #164]	@ (8009b60 <__swsetup_r+0xa8>)
 8009abc:	4605      	mov	r5, r0
 8009abe:	6818      	ldr	r0, [r3, #0]
 8009ac0:	460c      	mov	r4, r1
 8009ac2:	b118      	cbz	r0, 8009acc <__swsetup_r+0x14>
 8009ac4:	6a03      	ldr	r3, [r0, #32]
 8009ac6:	b90b      	cbnz	r3, 8009acc <__swsetup_r+0x14>
 8009ac8:	f7fc fca6 	bl	8006418 <__sinit>
 8009acc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ad0:	0719      	lsls	r1, r3, #28
 8009ad2:	d422      	bmi.n	8009b1a <__swsetup_r+0x62>
 8009ad4:	06da      	lsls	r2, r3, #27
 8009ad6:	d407      	bmi.n	8009ae8 <__swsetup_r+0x30>
 8009ad8:	2209      	movs	r2, #9
 8009ada:	602a      	str	r2, [r5, #0]
 8009adc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009ae0:	81a3      	strh	r3, [r4, #12]
 8009ae2:	f04f 30ff 	mov.w	r0, #4294967295
 8009ae6:	e033      	b.n	8009b50 <__swsetup_r+0x98>
 8009ae8:	0758      	lsls	r0, r3, #29
 8009aea:	d512      	bpl.n	8009b12 <__swsetup_r+0x5a>
 8009aec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009aee:	b141      	cbz	r1, 8009b02 <__swsetup_r+0x4a>
 8009af0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009af4:	4299      	cmp	r1, r3
 8009af6:	d002      	beq.n	8009afe <__swsetup_r+0x46>
 8009af8:	4628      	mov	r0, r5
 8009afa:	f7fd fbf9 	bl	80072f0 <_free_r>
 8009afe:	2300      	movs	r3, #0
 8009b00:	6363      	str	r3, [r4, #52]	@ 0x34
 8009b02:	89a3      	ldrh	r3, [r4, #12]
 8009b04:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009b08:	81a3      	strh	r3, [r4, #12]
 8009b0a:	2300      	movs	r3, #0
 8009b0c:	6063      	str	r3, [r4, #4]
 8009b0e:	6923      	ldr	r3, [r4, #16]
 8009b10:	6023      	str	r3, [r4, #0]
 8009b12:	89a3      	ldrh	r3, [r4, #12]
 8009b14:	f043 0308 	orr.w	r3, r3, #8
 8009b18:	81a3      	strh	r3, [r4, #12]
 8009b1a:	6923      	ldr	r3, [r4, #16]
 8009b1c:	b94b      	cbnz	r3, 8009b32 <__swsetup_r+0x7a>
 8009b1e:	89a3      	ldrh	r3, [r4, #12]
 8009b20:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009b24:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009b28:	d003      	beq.n	8009b32 <__swsetup_r+0x7a>
 8009b2a:	4621      	mov	r1, r4
 8009b2c:	4628      	mov	r0, r5
 8009b2e:	f000 f883 	bl	8009c38 <__smakebuf_r>
 8009b32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009b36:	f013 0201 	ands.w	r2, r3, #1
 8009b3a:	d00a      	beq.n	8009b52 <__swsetup_r+0x9a>
 8009b3c:	2200      	movs	r2, #0
 8009b3e:	60a2      	str	r2, [r4, #8]
 8009b40:	6962      	ldr	r2, [r4, #20]
 8009b42:	4252      	negs	r2, r2
 8009b44:	61a2      	str	r2, [r4, #24]
 8009b46:	6922      	ldr	r2, [r4, #16]
 8009b48:	b942      	cbnz	r2, 8009b5c <__swsetup_r+0xa4>
 8009b4a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009b4e:	d1c5      	bne.n	8009adc <__swsetup_r+0x24>
 8009b50:	bd38      	pop	{r3, r4, r5, pc}
 8009b52:	0799      	lsls	r1, r3, #30
 8009b54:	bf58      	it	pl
 8009b56:	6962      	ldrpl	r2, [r4, #20]
 8009b58:	60a2      	str	r2, [r4, #8]
 8009b5a:	e7f4      	b.n	8009b46 <__swsetup_r+0x8e>
 8009b5c:	2000      	movs	r0, #0
 8009b5e:	e7f7      	b.n	8009b50 <__swsetup_r+0x98>
 8009b60:	20000018 	.word	0x20000018

08009b64 <_raise_r>:
 8009b64:	291f      	cmp	r1, #31
 8009b66:	b538      	push	{r3, r4, r5, lr}
 8009b68:	4605      	mov	r5, r0
 8009b6a:	460c      	mov	r4, r1
 8009b6c:	d904      	bls.n	8009b78 <_raise_r+0x14>
 8009b6e:	2316      	movs	r3, #22
 8009b70:	6003      	str	r3, [r0, #0]
 8009b72:	f04f 30ff 	mov.w	r0, #4294967295
 8009b76:	bd38      	pop	{r3, r4, r5, pc}
 8009b78:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009b7a:	b112      	cbz	r2, 8009b82 <_raise_r+0x1e>
 8009b7c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009b80:	b94b      	cbnz	r3, 8009b96 <_raise_r+0x32>
 8009b82:	4628      	mov	r0, r5
 8009b84:	f000 f830 	bl	8009be8 <_getpid_r>
 8009b88:	4622      	mov	r2, r4
 8009b8a:	4601      	mov	r1, r0
 8009b8c:	4628      	mov	r0, r5
 8009b8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009b92:	f000 b817 	b.w	8009bc4 <_kill_r>
 8009b96:	2b01      	cmp	r3, #1
 8009b98:	d00a      	beq.n	8009bb0 <_raise_r+0x4c>
 8009b9a:	1c59      	adds	r1, r3, #1
 8009b9c:	d103      	bne.n	8009ba6 <_raise_r+0x42>
 8009b9e:	2316      	movs	r3, #22
 8009ba0:	6003      	str	r3, [r0, #0]
 8009ba2:	2001      	movs	r0, #1
 8009ba4:	e7e7      	b.n	8009b76 <_raise_r+0x12>
 8009ba6:	2100      	movs	r1, #0
 8009ba8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009bac:	4620      	mov	r0, r4
 8009bae:	4798      	blx	r3
 8009bb0:	2000      	movs	r0, #0
 8009bb2:	e7e0      	b.n	8009b76 <_raise_r+0x12>

08009bb4 <raise>:
 8009bb4:	4b02      	ldr	r3, [pc, #8]	@ (8009bc0 <raise+0xc>)
 8009bb6:	4601      	mov	r1, r0
 8009bb8:	6818      	ldr	r0, [r3, #0]
 8009bba:	f7ff bfd3 	b.w	8009b64 <_raise_r>
 8009bbe:	bf00      	nop
 8009bc0:	20000018 	.word	0x20000018

08009bc4 <_kill_r>:
 8009bc4:	b538      	push	{r3, r4, r5, lr}
 8009bc6:	4d07      	ldr	r5, [pc, #28]	@ (8009be4 <_kill_r+0x20>)
 8009bc8:	2300      	movs	r3, #0
 8009bca:	4604      	mov	r4, r0
 8009bcc:	4608      	mov	r0, r1
 8009bce:	4611      	mov	r1, r2
 8009bd0:	602b      	str	r3, [r5, #0]
 8009bd2:	f7f7 fd0c 	bl	80015ee <_kill>
 8009bd6:	1c43      	adds	r3, r0, #1
 8009bd8:	d102      	bne.n	8009be0 <_kill_r+0x1c>
 8009bda:	682b      	ldr	r3, [r5, #0]
 8009bdc:	b103      	cbz	r3, 8009be0 <_kill_r+0x1c>
 8009bde:	6023      	str	r3, [r4, #0]
 8009be0:	bd38      	pop	{r3, r4, r5, pc}
 8009be2:	bf00      	nop
 8009be4:	20000444 	.word	0x20000444

08009be8 <_getpid_r>:
 8009be8:	f7f7 bcf9 	b.w	80015de <_getpid>

08009bec <__swhatbuf_r>:
 8009bec:	b570      	push	{r4, r5, r6, lr}
 8009bee:	460c      	mov	r4, r1
 8009bf0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009bf4:	2900      	cmp	r1, #0
 8009bf6:	b096      	sub	sp, #88	@ 0x58
 8009bf8:	4615      	mov	r5, r2
 8009bfa:	461e      	mov	r6, r3
 8009bfc:	da0d      	bge.n	8009c1a <__swhatbuf_r+0x2e>
 8009bfe:	89a3      	ldrh	r3, [r4, #12]
 8009c00:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009c04:	f04f 0100 	mov.w	r1, #0
 8009c08:	bf14      	ite	ne
 8009c0a:	2340      	movne	r3, #64	@ 0x40
 8009c0c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009c10:	2000      	movs	r0, #0
 8009c12:	6031      	str	r1, [r6, #0]
 8009c14:	602b      	str	r3, [r5, #0]
 8009c16:	b016      	add	sp, #88	@ 0x58
 8009c18:	bd70      	pop	{r4, r5, r6, pc}
 8009c1a:	466a      	mov	r2, sp
 8009c1c:	f000 f848 	bl	8009cb0 <_fstat_r>
 8009c20:	2800      	cmp	r0, #0
 8009c22:	dbec      	blt.n	8009bfe <__swhatbuf_r+0x12>
 8009c24:	9901      	ldr	r1, [sp, #4]
 8009c26:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009c2a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009c2e:	4259      	negs	r1, r3
 8009c30:	4159      	adcs	r1, r3
 8009c32:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009c36:	e7eb      	b.n	8009c10 <__swhatbuf_r+0x24>

08009c38 <__smakebuf_r>:
 8009c38:	898b      	ldrh	r3, [r1, #12]
 8009c3a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009c3c:	079d      	lsls	r5, r3, #30
 8009c3e:	4606      	mov	r6, r0
 8009c40:	460c      	mov	r4, r1
 8009c42:	d507      	bpl.n	8009c54 <__smakebuf_r+0x1c>
 8009c44:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009c48:	6023      	str	r3, [r4, #0]
 8009c4a:	6123      	str	r3, [r4, #16]
 8009c4c:	2301      	movs	r3, #1
 8009c4e:	6163      	str	r3, [r4, #20]
 8009c50:	b003      	add	sp, #12
 8009c52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c54:	ab01      	add	r3, sp, #4
 8009c56:	466a      	mov	r2, sp
 8009c58:	f7ff ffc8 	bl	8009bec <__swhatbuf_r>
 8009c5c:	9f00      	ldr	r7, [sp, #0]
 8009c5e:	4605      	mov	r5, r0
 8009c60:	4639      	mov	r1, r7
 8009c62:	4630      	mov	r0, r6
 8009c64:	f7fd fbb8 	bl	80073d8 <_malloc_r>
 8009c68:	b948      	cbnz	r0, 8009c7e <__smakebuf_r+0x46>
 8009c6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c6e:	059a      	lsls	r2, r3, #22
 8009c70:	d4ee      	bmi.n	8009c50 <__smakebuf_r+0x18>
 8009c72:	f023 0303 	bic.w	r3, r3, #3
 8009c76:	f043 0302 	orr.w	r3, r3, #2
 8009c7a:	81a3      	strh	r3, [r4, #12]
 8009c7c:	e7e2      	b.n	8009c44 <__smakebuf_r+0xc>
 8009c7e:	89a3      	ldrh	r3, [r4, #12]
 8009c80:	6020      	str	r0, [r4, #0]
 8009c82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009c86:	81a3      	strh	r3, [r4, #12]
 8009c88:	9b01      	ldr	r3, [sp, #4]
 8009c8a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009c8e:	b15b      	cbz	r3, 8009ca8 <__smakebuf_r+0x70>
 8009c90:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009c94:	4630      	mov	r0, r6
 8009c96:	f000 f81d 	bl	8009cd4 <_isatty_r>
 8009c9a:	b128      	cbz	r0, 8009ca8 <__smakebuf_r+0x70>
 8009c9c:	89a3      	ldrh	r3, [r4, #12]
 8009c9e:	f023 0303 	bic.w	r3, r3, #3
 8009ca2:	f043 0301 	orr.w	r3, r3, #1
 8009ca6:	81a3      	strh	r3, [r4, #12]
 8009ca8:	89a3      	ldrh	r3, [r4, #12]
 8009caa:	431d      	orrs	r5, r3
 8009cac:	81a5      	strh	r5, [r4, #12]
 8009cae:	e7cf      	b.n	8009c50 <__smakebuf_r+0x18>

08009cb0 <_fstat_r>:
 8009cb0:	b538      	push	{r3, r4, r5, lr}
 8009cb2:	4d07      	ldr	r5, [pc, #28]	@ (8009cd0 <_fstat_r+0x20>)
 8009cb4:	2300      	movs	r3, #0
 8009cb6:	4604      	mov	r4, r0
 8009cb8:	4608      	mov	r0, r1
 8009cba:	4611      	mov	r1, r2
 8009cbc:	602b      	str	r3, [r5, #0]
 8009cbe:	f7f7 fcf6 	bl	80016ae <_fstat>
 8009cc2:	1c43      	adds	r3, r0, #1
 8009cc4:	d102      	bne.n	8009ccc <_fstat_r+0x1c>
 8009cc6:	682b      	ldr	r3, [r5, #0]
 8009cc8:	b103      	cbz	r3, 8009ccc <_fstat_r+0x1c>
 8009cca:	6023      	str	r3, [r4, #0]
 8009ccc:	bd38      	pop	{r3, r4, r5, pc}
 8009cce:	bf00      	nop
 8009cd0:	20000444 	.word	0x20000444

08009cd4 <_isatty_r>:
 8009cd4:	b538      	push	{r3, r4, r5, lr}
 8009cd6:	4d06      	ldr	r5, [pc, #24]	@ (8009cf0 <_isatty_r+0x1c>)
 8009cd8:	2300      	movs	r3, #0
 8009cda:	4604      	mov	r4, r0
 8009cdc:	4608      	mov	r0, r1
 8009cde:	602b      	str	r3, [r5, #0]
 8009ce0:	f7f7 fcf5 	bl	80016ce <_isatty>
 8009ce4:	1c43      	adds	r3, r0, #1
 8009ce6:	d102      	bne.n	8009cee <_isatty_r+0x1a>
 8009ce8:	682b      	ldr	r3, [r5, #0]
 8009cea:	b103      	cbz	r3, 8009cee <_isatty_r+0x1a>
 8009cec:	6023      	str	r3, [r4, #0]
 8009cee:	bd38      	pop	{r3, r4, r5, pc}
 8009cf0:	20000444 	.word	0x20000444

08009cf4 <_init>:
 8009cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cf6:	bf00      	nop
 8009cf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009cfa:	bc08      	pop	{r3}
 8009cfc:	469e      	mov	lr, r3
 8009cfe:	4770      	bx	lr

08009d00 <_fini>:
 8009d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d02:	bf00      	nop
 8009d04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d06:	bc08      	pop	{r3}
 8009d08:	469e      	mov	lr, r3
 8009d0a:	4770      	bx	lr
