
DAC2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000509c  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000428  08005228  08005228  00006228  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005650  08005650  0000700c  2**0
                  CONTENTS
  4 .ARM          00000008  08005650  08005650  00006650  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005658  08005658  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005658  08005658  00006658  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800565c  0800565c  0000665c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08005660  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000150  2000000c  0800566c  0000700c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000015c  0800566c  0000715c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010fc5  00000000  00000000  0000703c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000240c  00000000  00000000  00018001  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001010  00000000  00000000  0001a410  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c8a  00000000  00000000  0001b420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002705c  00000000  00000000  0001c0aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012d3e  00000000  00000000  00043106  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f4119  00000000  00000000  00055e44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00149f5d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000046b4  00000000  00000000  00149fa0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004d  00000000  00000000  0014e654  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800520c 	.word	0x0800520c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	0800520c 	.word	0x0800520c

080001c8 <__aeabi_dmul>:
 80001c8:	b570      	push	{r4, r5, r6, lr}
 80001ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80001ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80001d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001d6:	bf1d      	ittte	ne
 80001d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001dc:	ea94 0f0c 	teqne	r4, ip
 80001e0:	ea95 0f0c 	teqne	r5, ip
 80001e4:	f000 f8de 	bleq	80003a4 <__aeabi_dmul+0x1dc>
 80001e8:	442c      	add	r4, r5
 80001ea:	ea81 0603 	eor.w	r6, r1, r3
 80001ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80001fa:	bf18      	it	ne
 80001fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000200:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000204:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000208:	d038      	beq.n	800027c <__aeabi_dmul+0xb4>
 800020a:	fba0 ce02 	umull	ip, lr, r0, r2
 800020e:	f04f 0500 	mov.w	r5, #0
 8000212:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000216:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800021a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800021e:	f04f 0600 	mov.w	r6, #0
 8000222:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000226:	f09c 0f00 	teq	ip, #0
 800022a:	bf18      	it	ne
 800022c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000230:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000234:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000238:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800023c:	d204      	bcs.n	8000248 <__aeabi_dmul+0x80>
 800023e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000242:	416d      	adcs	r5, r5
 8000244:	eb46 0606 	adc.w	r6, r6, r6
 8000248:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800024c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000250:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000254:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000258:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800025c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000260:	bf88      	it	hi
 8000262:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000266:	d81e      	bhi.n	80002a6 <__aeabi_dmul+0xde>
 8000268:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	bd70      	pop	{r4, r5, r6, pc}
 800027c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000280:	ea46 0101 	orr.w	r1, r6, r1
 8000284:	ea40 0002 	orr.w	r0, r0, r2
 8000288:	ea81 0103 	eor.w	r1, r1, r3
 800028c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000290:	bfc2      	ittt	gt
 8000292:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000296:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800029a:	bd70      	popgt	{r4, r5, r6, pc}
 800029c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002a0:	f04f 0e00 	mov.w	lr, #0
 80002a4:	3c01      	subs	r4, #1
 80002a6:	f300 80ab 	bgt.w	8000400 <__aeabi_dmul+0x238>
 80002aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80002ae:	bfde      	ittt	le
 80002b0:	2000      	movle	r0, #0
 80002b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80002b6:	bd70      	pople	{r4, r5, r6, pc}
 80002b8:	f1c4 0400 	rsb	r4, r4, #0
 80002bc:	3c20      	subs	r4, #32
 80002be:	da35      	bge.n	800032c <__aeabi_dmul+0x164>
 80002c0:	340c      	adds	r4, #12
 80002c2:	dc1b      	bgt.n	80002fc <__aeabi_dmul+0x134>
 80002c4:	f104 0414 	add.w	r4, r4, #20
 80002c8:	f1c4 0520 	rsb	r5, r4, #32
 80002cc:	fa00 f305 	lsl.w	r3, r0, r5
 80002d0:	fa20 f004 	lsr.w	r0, r0, r4
 80002d4:	fa01 f205 	lsl.w	r2, r1, r5
 80002d8:	ea40 0002 	orr.w	r0, r0, r2
 80002dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80002e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80002e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002e8:	fa21 f604 	lsr.w	r6, r1, r4
 80002ec:	eb42 0106 	adc.w	r1, r2, r6
 80002f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f4:	bf08      	it	eq
 80002f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f1c4 040c 	rsb	r4, r4, #12
 8000300:	f1c4 0520 	rsb	r5, r4, #32
 8000304:	fa00 f304 	lsl.w	r3, r0, r4
 8000308:	fa20 f005 	lsr.w	r0, r0, r5
 800030c:	fa01 f204 	lsl.w	r2, r1, r4
 8000310:	ea40 0002 	orr.w	r0, r0, r2
 8000314:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000318:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000324:	bf08      	it	eq
 8000326:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800032a:	bd70      	pop	{r4, r5, r6, pc}
 800032c:	f1c4 0520 	rsb	r5, r4, #32
 8000330:	fa00 f205 	lsl.w	r2, r0, r5
 8000334:	ea4e 0e02 	orr.w	lr, lr, r2
 8000338:	fa20 f304 	lsr.w	r3, r0, r4
 800033c:	fa01 f205 	lsl.w	r2, r1, r5
 8000340:	ea43 0302 	orr.w	r3, r3, r2
 8000344:	fa21 f004 	lsr.w	r0, r1, r4
 8000348:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800034c:	fa21 f204 	lsr.w	r2, r1, r4
 8000350:	ea20 0002 	bic.w	r0, r0, r2
 8000354:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000358:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800035c:	bf08      	it	eq
 800035e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f094 0f00 	teq	r4, #0
 8000368:	d10f      	bne.n	800038a <__aeabi_dmul+0x1c2>
 800036a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800036e:	0040      	lsls	r0, r0, #1
 8000370:	eb41 0101 	adc.w	r1, r1, r1
 8000374:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000378:	bf08      	it	eq
 800037a:	3c01      	subeq	r4, #1
 800037c:	d0f7      	beq.n	800036e <__aeabi_dmul+0x1a6>
 800037e:	ea41 0106 	orr.w	r1, r1, r6
 8000382:	f095 0f00 	teq	r5, #0
 8000386:	bf18      	it	ne
 8000388:	4770      	bxne	lr
 800038a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800038e:	0052      	lsls	r2, r2, #1
 8000390:	eb43 0303 	adc.w	r3, r3, r3
 8000394:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000398:	bf08      	it	eq
 800039a:	3d01      	subeq	r5, #1
 800039c:	d0f7      	beq.n	800038e <__aeabi_dmul+0x1c6>
 800039e:	ea43 0306 	orr.w	r3, r3, r6
 80003a2:	4770      	bx	lr
 80003a4:	ea94 0f0c 	teq	r4, ip
 80003a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003ac:	bf18      	it	ne
 80003ae:	ea95 0f0c 	teqne	r5, ip
 80003b2:	d00c      	beq.n	80003ce <__aeabi_dmul+0x206>
 80003b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003b8:	bf18      	it	ne
 80003ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003be:	d1d1      	bne.n	8000364 <__aeabi_dmul+0x19c>
 80003c0:	ea81 0103 	eor.w	r1, r1, r3
 80003c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd70      	pop	{r4, r5, r6, pc}
 80003ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003d2:	bf06      	itte	eq
 80003d4:	4610      	moveq	r0, r2
 80003d6:	4619      	moveq	r1, r3
 80003d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003dc:	d019      	beq.n	8000412 <__aeabi_dmul+0x24a>
 80003de:	ea94 0f0c 	teq	r4, ip
 80003e2:	d102      	bne.n	80003ea <__aeabi_dmul+0x222>
 80003e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003e8:	d113      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003ea:	ea95 0f0c 	teq	r5, ip
 80003ee:	d105      	bne.n	80003fc <__aeabi_dmul+0x234>
 80003f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003f4:	bf1c      	itt	ne
 80003f6:	4610      	movne	r0, r2
 80003f8:	4619      	movne	r1, r3
 80003fa:	d10a      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003fc:	ea81 0103 	eor.w	r1, r1, r3
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000404:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000408:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800040c:	f04f 0000 	mov.w	r0, #0
 8000410:	bd70      	pop	{r4, r5, r6, pc}
 8000412:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000416:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800041a:	bd70      	pop	{r4, r5, r6, pc}

0800041c <__aeabi_drsub>:
 800041c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000420:	e002      	b.n	8000428 <__adddf3>
 8000422:	bf00      	nop

08000424 <__aeabi_dsub>:
 8000424:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000428 <__adddf3>:
 8000428:	b530      	push	{r4, r5, lr}
 800042a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800042e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000432:	ea94 0f05 	teq	r4, r5
 8000436:	bf08      	it	eq
 8000438:	ea90 0f02 	teqeq	r0, r2
 800043c:	bf1f      	itttt	ne
 800043e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000442:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000446:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800044a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800044e:	f000 80e2 	beq.w	8000616 <__adddf3+0x1ee>
 8000452:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000456:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800045a:	bfb8      	it	lt
 800045c:	426d      	neglt	r5, r5
 800045e:	dd0c      	ble.n	800047a <__adddf3+0x52>
 8000460:	442c      	add	r4, r5
 8000462:	ea80 0202 	eor.w	r2, r0, r2
 8000466:	ea81 0303 	eor.w	r3, r1, r3
 800046a:	ea82 0000 	eor.w	r0, r2, r0
 800046e:	ea83 0101 	eor.w	r1, r3, r1
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	2d36      	cmp	r5, #54	@ 0x36
 800047c:	bf88      	it	hi
 800047e:	bd30      	pophi	{r4, r5, pc}
 8000480:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000484:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000488:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 800048c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000490:	d002      	beq.n	8000498 <__adddf3+0x70>
 8000492:	4240      	negs	r0, r0
 8000494:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000498:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 800049c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004a0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004a4:	d002      	beq.n	80004ac <__adddf3+0x84>
 80004a6:	4252      	negs	r2, r2
 80004a8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004ac:	ea94 0f05 	teq	r4, r5
 80004b0:	f000 80a7 	beq.w	8000602 <__adddf3+0x1da>
 80004b4:	f1a4 0401 	sub.w	r4, r4, #1
 80004b8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004bc:	db0d      	blt.n	80004da <__adddf3+0xb2>
 80004be:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004c2:	fa22 f205 	lsr.w	r2, r2, r5
 80004c6:	1880      	adds	r0, r0, r2
 80004c8:	f141 0100 	adc.w	r1, r1, #0
 80004cc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004d0:	1880      	adds	r0, r0, r2
 80004d2:	fa43 f305 	asr.w	r3, r3, r5
 80004d6:	4159      	adcs	r1, r3
 80004d8:	e00e      	b.n	80004f8 <__adddf3+0xd0>
 80004da:	f1a5 0520 	sub.w	r5, r5, #32
 80004de:	f10e 0e20 	add.w	lr, lr, #32
 80004e2:	2a01      	cmp	r2, #1
 80004e4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004e8:	bf28      	it	cs
 80004ea:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004ee:	fa43 f305 	asr.w	r3, r3, r5
 80004f2:	18c0      	adds	r0, r0, r3
 80004f4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	d507      	bpl.n	800050e <__adddf3+0xe6>
 80004fe:	f04f 0e00 	mov.w	lr, #0
 8000502:	f1dc 0c00 	rsbs	ip, ip, #0
 8000506:	eb7e 0000 	sbcs.w	r0, lr, r0
 800050a:	eb6e 0101 	sbc.w	r1, lr, r1
 800050e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000512:	d31b      	bcc.n	800054c <__adddf3+0x124>
 8000514:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000518:	d30c      	bcc.n	8000534 <__adddf3+0x10c>
 800051a:	0849      	lsrs	r1, r1, #1
 800051c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000520:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000524:	f104 0401 	add.w	r4, r4, #1
 8000528:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800052c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000530:	f080 809a 	bcs.w	8000668 <__adddf3+0x240>
 8000534:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000538:	bf08      	it	eq
 800053a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800053e:	f150 0000 	adcs.w	r0, r0, #0
 8000542:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000546:	ea41 0105 	orr.w	r1, r1, r5
 800054a:	bd30      	pop	{r4, r5, pc}
 800054c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000550:	4140      	adcs	r0, r0
 8000552:	eb41 0101 	adc.w	r1, r1, r1
 8000556:	3c01      	subs	r4, #1
 8000558:	bf28      	it	cs
 800055a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800055e:	d2e9      	bcs.n	8000534 <__adddf3+0x10c>
 8000560:	f091 0f00 	teq	r1, #0
 8000564:	bf04      	itt	eq
 8000566:	4601      	moveq	r1, r0
 8000568:	2000      	moveq	r0, #0
 800056a:	fab1 f381 	clz	r3, r1
 800056e:	bf08      	it	eq
 8000570:	3320      	addeq	r3, #32
 8000572:	f1a3 030b 	sub.w	r3, r3, #11
 8000576:	f1b3 0220 	subs.w	r2, r3, #32
 800057a:	da0c      	bge.n	8000596 <__adddf3+0x16e>
 800057c:	320c      	adds	r2, #12
 800057e:	dd08      	ble.n	8000592 <__adddf3+0x16a>
 8000580:	f102 0c14 	add.w	ip, r2, #20
 8000584:	f1c2 020c 	rsb	r2, r2, #12
 8000588:	fa01 f00c 	lsl.w	r0, r1, ip
 800058c:	fa21 f102 	lsr.w	r1, r1, r2
 8000590:	e00c      	b.n	80005ac <__adddf3+0x184>
 8000592:	f102 0214 	add.w	r2, r2, #20
 8000596:	bfd8      	it	le
 8000598:	f1c2 0c20 	rsble	ip, r2, #32
 800059c:	fa01 f102 	lsl.w	r1, r1, r2
 80005a0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005a4:	bfdc      	itt	le
 80005a6:	ea41 010c 	orrle.w	r1, r1, ip
 80005aa:	4090      	lslle	r0, r2
 80005ac:	1ae4      	subs	r4, r4, r3
 80005ae:	bfa2      	ittt	ge
 80005b0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005b4:	4329      	orrge	r1, r5
 80005b6:	bd30      	popge	{r4, r5, pc}
 80005b8:	ea6f 0404 	mvn.w	r4, r4
 80005bc:	3c1f      	subs	r4, #31
 80005be:	da1c      	bge.n	80005fa <__adddf3+0x1d2>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc0e      	bgt.n	80005e2 <__adddf3+0x1ba>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0220 	rsb	r2, r4, #32
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f302 	lsl.w	r3, r1, r2
 80005d4:	ea40 0003 	orr.w	r0, r0, r3
 80005d8:	fa21 f304 	lsr.w	r3, r1, r4
 80005dc:	ea45 0103 	orr.w	r1, r5, r3
 80005e0:	bd30      	pop	{r4, r5, pc}
 80005e2:	f1c4 040c 	rsb	r4, r4, #12
 80005e6:	f1c4 0220 	rsb	r2, r4, #32
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 f304 	lsl.w	r3, r1, r4
 80005f2:	ea40 0003 	orr.w	r0, r0, r3
 80005f6:	4629      	mov	r1, r5
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	fa21 f004 	lsr.w	r0, r1, r4
 80005fe:	4629      	mov	r1, r5
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	f094 0f00 	teq	r4, #0
 8000606:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800060a:	bf06      	itte	eq
 800060c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000610:	3401      	addeq	r4, #1
 8000612:	3d01      	subne	r5, #1
 8000614:	e74e      	b.n	80004b4 <__adddf3+0x8c>
 8000616:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061a:	bf18      	it	ne
 800061c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000620:	d029      	beq.n	8000676 <__adddf3+0x24e>
 8000622:	ea94 0f05 	teq	r4, r5
 8000626:	bf08      	it	eq
 8000628:	ea90 0f02 	teqeq	r0, r2
 800062c:	d005      	beq.n	800063a <__adddf3+0x212>
 800062e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000632:	bf04      	itt	eq
 8000634:	4619      	moveq	r1, r3
 8000636:	4610      	moveq	r0, r2
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	ea91 0f03 	teq	r1, r3
 800063e:	bf1e      	ittt	ne
 8000640:	2100      	movne	r1, #0
 8000642:	2000      	movne	r0, #0
 8000644:	bd30      	popne	{r4, r5, pc}
 8000646:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800064a:	d105      	bne.n	8000658 <__adddf3+0x230>
 800064c:	0040      	lsls	r0, r0, #1
 800064e:	4149      	adcs	r1, r1
 8000650:	bf28      	it	cs
 8000652:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000656:	bd30      	pop	{r4, r5, pc}
 8000658:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800065c:	bf3c      	itt	cc
 800065e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000662:	bd30      	popcc	{r4, r5, pc}
 8000664:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000668:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 800066c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000670:	f04f 0000 	mov.w	r0, #0
 8000674:	bd30      	pop	{r4, r5, pc}
 8000676:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800067a:	bf1a      	itte	ne
 800067c:	4619      	movne	r1, r3
 800067e:	4610      	movne	r0, r2
 8000680:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000684:	bf1c      	itt	ne
 8000686:	460b      	movne	r3, r1
 8000688:	4602      	movne	r2, r0
 800068a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800068e:	bf06      	itte	eq
 8000690:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000694:	ea91 0f03 	teqeq	r1, r3
 8000698:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 800069c:	bd30      	pop	{r4, r5, pc}
 800069e:	bf00      	nop

080006a0 <__aeabi_ui2d>:
 80006a0:	f090 0f00 	teq	r0, #0
 80006a4:	bf04      	itt	eq
 80006a6:	2100      	moveq	r1, #0
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006b0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006b4:	f04f 0500 	mov.w	r5, #0
 80006b8:	f04f 0100 	mov.w	r1, #0
 80006bc:	e750      	b.n	8000560 <__adddf3+0x138>
 80006be:	bf00      	nop

080006c0 <__aeabi_i2d>:
 80006c0:	f090 0f00 	teq	r0, #0
 80006c4:	bf04      	itt	eq
 80006c6:	2100      	moveq	r1, #0
 80006c8:	4770      	bxeq	lr
 80006ca:	b530      	push	{r4, r5, lr}
 80006cc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006d0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006d4:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80006d8:	bf48      	it	mi
 80006da:	4240      	negmi	r0, r0
 80006dc:	f04f 0100 	mov.w	r1, #0
 80006e0:	e73e      	b.n	8000560 <__adddf3+0x138>
 80006e2:	bf00      	nop

080006e4 <__aeabi_f2d>:
 80006e4:	0042      	lsls	r2, r0, #1
 80006e6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006ea:	ea4f 0131 	mov.w	r1, r1, rrx
 80006ee:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006f2:	bf1f      	itttt	ne
 80006f4:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80006f8:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80006fc:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000700:	4770      	bxne	lr
 8000702:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000706:	bf08      	it	eq
 8000708:	4770      	bxeq	lr
 800070a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800070e:	bf04      	itt	eq
 8000710:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000714:	4770      	bxeq	lr
 8000716:	b530      	push	{r4, r5, lr}
 8000718:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	e71c      	b.n	8000560 <__adddf3+0x138>
 8000726:	bf00      	nop

08000728 <__aeabi_ul2d>:
 8000728:	ea50 0201 	orrs.w	r2, r0, r1
 800072c:	bf08      	it	eq
 800072e:	4770      	bxeq	lr
 8000730:	b530      	push	{r4, r5, lr}
 8000732:	f04f 0500 	mov.w	r5, #0
 8000736:	e00a      	b.n	800074e <__aeabi_l2d+0x16>

08000738 <__aeabi_l2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000746:	d502      	bpl.n	800074e <__aeabi_l2d+0x16>
 8000748:	4240      	negs	r0, r0
 800074a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800074e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000752:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000756:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800075a:	f43f aed8 	beq.w	800050e <__adddf3+0xe6>
 800075e:	f04f 0203 	mov.w	r2, #3
 8000762:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000766:	bf18      	it	ne
 8000768:	3203      	addne	r2, #3
 800076a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800076e:	bf18      	it	ne
 8000770:	3203      	addne	r2, #3
 8000772:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000776:	f1c2 0320 	rsb	r3, r2, #32
 800077a:	fa00 fc03 	lsl.w	ip, r0, r3
 800077e:	fa20 f002 	lsr.w	r0, r0, r2
 8000782:	fa01 fe03 	lsl.w	lr, r1, r3
 8000786:	ea40 000e 	orr.w	r0, r0, lr
 800078a:	fa21 f102 	lsr.w	r1, r1, r2
 800078e:	4414      	add	r4, r2
 8000790:	e6bd      	b.n	800050e <__adddf3+0xe6>
 8000792:	bf00      	nop

08000794 <__aeabi_d2uiz>:
 8000794:	004a      	lsls	r2, r1, #1
 8000796:	d211      	bcs.n	80007bc <__aeabi_d2uiz+0x28>
 8000798:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 800079c:	d211      	bcs.n	80007c2 <__aeabi_d2uiz+0x2e>
 800079e:	d50d      	bpl.n	80007bc <__aeabi_d2uiz+0x28>
 80007a0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80007a4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007a8:	d40e      	bmi.n	80007c8 <__aeabi_d2uiz+0x34>
 80007aa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007ae:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80007b2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80007b6:	fa23 f002 	lsr.w	r0, r3, r2
 80007ba:	4770      	bx	lr
 80007bc:	f04f 0000 	mov.w	r0, #0
 80007c0:	4770      	bx	lr
 80007c2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80007c6:	d102      	bne.n	80007ce <__aeabi_d2uiz+0x3a>
 80007c8:	f04f 30ff 	mov.w	r0, #4294967295
 80007cc:	4770      	bx	lr
 80007ce:	f04f 0000 	mov.w	r0, #0
 80007d2:	4770      	bx	lr

080007d4 <__aeabi_d2f>:
 80007d4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80007d8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80007dc:	bf24      	itt	cs
 80007de:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80007e2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80007e6:	d90d      	bls.n	8000804 <__aeabi_d2f+0x30>
 80007e8:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80007ec:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80007f0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80007f4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80007f8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80007fc:	bf08      	it	eq
 80007fe:	f020 0001 	biceq.w	r0, r0, #1
 8000802:	4770      	bx	lr
 8000804:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000808:	d121      	bne.n	800084e <__aeabi_d2f+0x7a>
 800080a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 800080e:	bfbc      	itt	lt
 8000810:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000814:	4770      	bxlt	lr
 8000816:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800081a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800081e:	f1c2 0218 	rsb	r2, r2, #24
 8000822:	f1c2 0c20 	rsb	ip, r2, #32
 8000826:	fa10 f30c 	lsls.w	r3, r0, ip
 800082a:	fa20 f002 	lsr.w	r0, r0, r2
 800082e:	bf18      	it	ne
 8000830:	f040 0001 	orrne.w	r0, r0, #1
 8000834:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000838:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800083c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000840:	ea40 000c 	orr.w	r0, r0, ip
 8000844:	fa23 f302 	lsr.w	r3, r3, r2
 8000848:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800084c:	e7cc      	b.n	80007e8 <__aeabi_d2f+0x14>
 800084e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000852:	d107      	bne.n	8000864 <__aeabi_d2f+0x90>
 8000854:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000858:	bf1e      	ittt	ne
 800085a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 800085e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000862:	4770      	bxne	lr
 8000864:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000868:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 800086c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000870:	4770      	bx	lr
 8000872:	bf00      	nop

08000874 <__aeabi_uldivmod>:
 8000874:	b953      	cbnz	r3, 800088c <__aeabi_uldivmod+0x18>
 8000876:	b94a      	cbnz	r2, 800088c <__aeabi_uldivmod+0x18>
 8000878:	2900      	cmp	r1, #0
 800087a:	bf08      	it	eq
 800087c:	2800      	cmpeq	r0, #0
 800087e:	bf1c      	itt	ne
 8000880:	f04f 31ff 	movne.w	r1, #4294967295
 8000884:	f04f 30ff 	movne.w	r0, #4294967295
 8000888:	f000 b96a 	b.w	8000b60 <__aeabi_idiv0>
 800088c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000890:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000894:	f000 f806 	bl	80008a4 <__udivmoddi4>
 8000898:	f8dd e004 	ldr.w	lr, [sp, #4]
 800089c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008a0:	b004      	add	sp, #16
 80008a2:	4770      	bx	lr

080008a4 <__udivmoddi4>:
 80008a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008a8:	9d08      	ldr	r5, [sp, #32]
 80008aa:	460c      	mov	r4, r1
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d14e      	bne.n	800094e <__udivmoddi4+0xaa>
 80008b0:	4694      	mov	ip, r2
 80008b2:	458c      	cmp	ip, r1
 80008b4:	4686      	mov	lr, r0
 80008b6:	fab2 f282 	clz	r2, r2
 80008ba:	d962      	bls.n	8000982 <__udivmoddi4+0xde>
 80008bc:	b14a      	cbz	r2, 80008d2 <__udivmoddi4+0x2e>
 80008be:	f1c2 0320 	rsb	r3, r2, #32
 80008c2:	4091      	lsls	r1, r2
 80008c4:	fa20 f303 	lsr.w	r3, r0, r3
 80008c8:	fa0c fc02 	lsl.w	ip, ip, r2
 80008cc:	4319      	orrs	r1, r3
 80008ce:	fa00 fe02 	lsl.w	lr, r0, r2
 80008d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008d6:	fa1f f68c 	uxth.w	r6, ip
 80008da:	fbb1 f4f7 	udiv	r4, r1, r7
 80008de:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008e2:	fb07 1114 	mls	r1, r7, r4, r1
 80008e6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008ea:	fb04 f106 	mul.w	r1, r4, r6
 80008ee:	4299      	cmp	r1, r3
 80008f0:	d90a      	bls.n	8000908 <__udivmoddi4+0x64>
 80008f2:	eb1c 0303 	adds.w	r3, ip, r3
 80008f6:	f104 30ff 	add.w	r0, r4, #4294967295
 80008fa:	f080 8112 	bcs.w	8000b22 <__udivmoddi4+0x27e>
 80008fe:	4299      	cmp	r1, r3
 8000900:	f240 810f 	bls.w	8000b22 <__udivmoddi4+0x27e>
 8000904:	3c02      	subs	r4, #2
 8000906:	4463      	add	r3, ip
 8000908:	1a59      	subs	r1, r3, r1
 800090a:	fa1f f38e 	uxth.w	r3, lr
 800090e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000912:	fb07 1110 	mls	r1, r7, r0, r1
 8000916:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800091a:	fb00 f606 	mul.w	r6, r0, r6
 800091e:	429e      	cmp	r6, r3
 8000920:	d90a      	bls.n	8000938 <__udivmoddi4+0x94>
 8000922:	eb1c 0303 	adds.w	r3, ip, r3
 8000926:	f100 31ff 	add.w	r1, r0, #4294967295
 800092a:	f080 80fc 	bcs.w	8000b26 <__udivmoddi4+0x282>
 800092e:	429e      	cmp	r6, r3
 8000930:	f240 80f9 	bls.w	8000b26 <__udivmoddi4+0x282>
 8000934:	4463      	add	r3, ip
 8000936:	3802      	subs	r0, #2
 8000938:	1b9b      	subs	r3, r3, r6
 800093a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800093e:	2100      	movs	r1, #0
 8000940:	b11d      	cbz	r5, 800094a <__udivmoddi4+0xa6>
 8000942:	40d3      	lsrs	r3, r2
 8000944:	2200      	movs	r2, #0
 8000946:	e9c5 3200 	strd	r3, r2, [r5]
 800094a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800094e:	428b      	cmp	r3, r1
 8000950:	d905      	bls.n	800095e <__udivmoddi4+0xba>
 8000952:	b10d      	cbz	r5, 8000958 <__udivmoddi4+0xb4>
 8000954:	e9c5 0100 	strd	r0, r1, [r5]
 8000958:	2100      	movs	r1, #0
 800095a:	4608      	mov	r0, r1
 800095c:	e7f5      	b.n	800094a <__udivmoddi4+0xa6>
 800095e:	fab3 f183 	clz	r1, r3
 8000962:	2900      	cmp	r1, #0
 8000964:	d146      	bne.n	80009f4 <__udivmoddi4+0x150>
 8000966:	42a3      	cmp	r3, r4
 8000968:	d302      	bcc.n	8000970 <__udivmoddi4+0xcc>
 800096a:	4290      	cmp	r0, r2
 800096c:	f0c0 80f0 	bcc.w	8000b50 <__udivmoddi4+0x2ac>
 8000970:	1a86      	subs	r6, r0, r2
 8000972:	eb64 0303 	sbc.w	r3, r4, r3
 8000976:	2001      	movs	r0, #1
 8000978:	2d00      	cmp	r5, #0
 800097a:	d0e6      	beq.n	800094a <__udivmoddi4+0xa6>
 800097c:	e9c5 6300 	strd	r6, r3, [r5]
 8000980:	e7e3      	b.n	800094a <__udivmoddi4+0xa6>
 8000982:	2a00      	cmp	r2, #0
 8000984:	f040 8090 	bne.w	8000aa8 <__udivmoddi4+0x204>
 8000988:	eba1 040c 	sub.w	r4, r1, ip
 800098c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000990:	fa1f f78c 	uxth.w	r7, ip
 8000994:	2101      	movs	r1, #1
 8000996:	fbb4 f6f8 	udiv	r6, r4, r8
 800099a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800099e:	fb08 4416 	mls	r4, r8, r6, r4
 80009a2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80009a6:	fb07 f006 	mul.w	r0, r7, r6
 80009aa:	4298      	cmp	r0, r3
 80009ac:	d908      	bls.n	80009c0 <__udivmoddi4+0x11c>
 80009ae:	eb1c 0303 	adds.w	r3, ip, r3
 80009b2:	f106 34ff 	add.w	r4, r6, #4294967295
 80009b6:	d202      	bcs.n	80009be <__udivmoddi4+0x11a>
 80009b8:	4298      	cmp	r0, r3
 80009ba:	f200 80cd 	bhi.w	8000b58 <__udivmoddi4+0x2b4>
 80009be:	4626      	mov	r6, r4
 80009c0:	1a1c      	subs	r4, r3, r0
 80009c2:	fa1f f38e 	uxth.w	r3, lr
 80009c6:	fbb4 f0f8 	udiv	r0, r4, r8
 80009ca:	fb08 4410 	mls	r4, r8, r0, r4
 80009ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80009d2:	fb00 f707 	mul.w	r7, r0, r7
 80009d6:	429f      	cmp	r7, r3
 80009d8:	d908      	bls.n	80009ec <__udivmoddi4+0x148>
 80009da:	eb1c 0303 	adds.w	r3, ip, r3
 80009de:	f100 34ff 	add.w	r4, r0, #4294967295
 80009e2:	d202      	bcs.n	80009ea <__udivmoddi4+0x146>
 80009e4:	429f      	cmp	r7, r3
 80009e6:	f200 80b0 	bhi.w	8000b4a <__udivmoddi4+0x2a6>
 80009ea:	4620      	mov	r0, r4
 80009ec:	1bdb      	subs	r3, r3, r7
 80009ee:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80009f2:	e7a5      	b.n	8000940 <__udivmoddi4+0x9c>
 80009f4:	f1c1 0620 	rsb	r6, r1, #32
 80009f8:	408b      	lsls	r3, r1
 80009fa:	fa22 f706 	lsr.w	r7, r2, r6
 80009fe:	431f      	orrs	r7, r3
 8000a00:	fa20 fc06 	lsr.w	ip, r0, r6
 8000a04:	fa04 f301 	lsl.w	r3, r4, r1
 8000a08:	ea43 030c 	orr.w	r3, r3, ip
 8000a0c:	40f4      	lsrs	r4, r6
 8000a0e:	fa00 f801 	lsl.w	r8, r0, r1
 8000a12:	0c38      	lsrs	r0, r7, #16
 8000a14:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000a18:	fbb4 fef0 	udiv	lr, r4, r0
 8000a1c:	fa1f fc87 	uxth.w	ip, r7
 8000a20:	fb00 441e 	mls	r4, r0, lr, r4
 8000a24:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000a28:	fb0e f90c 	mul.w	r9, lr, ip
 8000a2c:	45a1      	cmp	r9, r4
 8000a2e:	fa02 f201 	lsl.w	r2, r2, r1
 8000a32:	d90a      	bls.n	8000a4a <__udivmoddi4+0x1a6>
 8000a34:	193c      	adds	r4, r7, r4
 8000a36:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000a3a:	f080 8084 	bcs.w	8000b46 <__udivmoddi4+0x2a2>
 8000a3e:	45a1      	cmp	r9, r4
 8000a40:	f240 8081 	bls.w	8000b46 <__udivmoddi4+0x2a2>
 8000a44:	f1ae 0e02 	sub.w	lr, lr, #2
 8000a48:	443c      	add	r4, r7
 8000a4a:	eba4 0409 	sub.w	r4, r4, r9
 8000a4e:	fa1f f983 	uxth.w	r9, r3
 8000a52:	fbb4 f3f0 	udiv	r3, r4, r0
 8000a56:	fb00 4413 	mls	r4, r0, r3, r4
 8000a5a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000a5e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000a62:	45a4      	cmp	ip, r4
 8000a64:	d907      	bls.n	8000a76 <__udivmoddi4+0x1d2>
 8000a66:	193c      	adds	r4, r7, r4
 8000a68:	f103 30ff 	add.w	r0, r3, #4294967295
 8000a6c:	d267      	bcs.n	8000b3e <__udivmoddi4+0x29a>
 8000a6e:	45a4      	cmp	ip, r4
 8000a70:	d965      	bls.n	8000b3e <__udivmoddi4+0x29a>
 8000a72:	3b02      	subs	r3, #2
 8000a74:	443c      	add	r4, r7
 8000a76:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000a7a:	fba0 9302 	umull	r9, r3, r0, r2
 8000a7e:	eba4 040c 	sub.w	r4, r4, ip
 8000a82:	429c      	cmp	r4, r3
 8000a84:	46ce      	mov	lr, r9
 8000a86:	469c      	mov	ip, r3
 8000a88:	d351      	bcc.n	8000b2e <__udivmoddi4+0x28a>
 8000a8a:	d04e      	beq.n	8000b2a <__udivmoddi4+0x286>
 8000a8c:	b155      	cbz	r5, 8000aa4 <__udivmoddi4+0x200>
 8000a8e:	ebb8 030e 	subs.w	r3, r8, lr
 8000a92:	eb64 040c 	sbc.w	r4, r4, ip
 8000a96:	fa04 f606 	lsl.w	r6, r4, r6
 8000a9a:	40cb      	lsrs	r3, r1
 8000a9c:	431e      	orrs	r6, r3
 8000a9e:	40cc      	lsrs	r4, r1
 8000aa0:	e9c5 6400 	strd	r6, r4, [r5]
 8000aa4:	2100      	movs	r1, #0
 8000aa6:	e750      	b.n	800094a <__udivmoddi4+0xa6>
 8000aa8:	f1c2 0320 	rsb	r3, r2, #32
 8000aac:	fa20 f103 	lsr.w	r1, r0, r3
 8000ab0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ab4:	fa24 f303 	lsr.w	r3, r4, r3
 8000ab8:	4094      	lsls	r4, r2
 8000aba:	430c      	orrs	r4, r1
 8000abc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ac0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ac4:	fa1f f78c 	uxth.w	r7, ip
 8000ac8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000acc:	fb08 3110 	mls	r1, r8, r0, r3
 8000ad0:	0c23      	lsrs	r3, r4, #16
 8000ad2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ad6:	fb00 f107 	mul.w	r1, r0, r7
 8000ada:	4299      	cmp	r1, r3
 8000adc:	d908      	bls.n	8000af0 <__udivmoddi4+0x24c>
 8000ade:	eb1c 0303 	adds.w	r3, ip, r3
 8000ae2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000ae6:	d22c      	bcs.n	8000b42 <__udivmoddi4+0x29e>
 8000ae8:	4299      	cmp	r1, r3
 8000aea:	d92a      	bls.n	8000b42 <__udivmoddi4+0x29e>
 8000aec:	3802      	subs	r0, #2
 8000aee:	4463      	add	r3, ip
 8000af0:	1a5b      	subs	r3, r3, r1
 8000af2:	b2a4      	uxth	r4, r4
 8000af4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000af8:	fb08 3311 	mls	r3, r8, r1, r3
 8000afc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b00:	fb01 f307 	mul.w	r3, r1, r7
 8000b04:	42a3      	cmp	r3, r4
 8000b06:	d908      	bls.n	8000b1a <__udivmoddi4+0x276>
 8000b08:	eb1c 0404 	adds.w	r4, ip, r4
 8000b0c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000b10:	d213      	bcs.n	8000b3a <__udivmoddi4+0x296>
 8000b12:	42a3      	cmp	r3, r4
 8000b14:	d911      	bls.n	8000b3a <__udivmoddi4+0x296>
 8000b16:	3902      	subs	r1, #2
 8000b18:	4464      	add	r4, ip
 8000b1a:	1ae4      	subs	r4, r4, r3
 8000b1c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000b20:	e739      	b.n	8000996 <__udivmoddi4+0xf2>
 8000b22:	4604      	mov	r4, r0
 8000b24:	e6f0      	b.n	8000908 <__udivmoddi4+0x64>
 8000b26:	4608      	mov	r0, r1
 8000b28:	e706      	b.n	8000938 <__udivmoddi4+0x94>
 8000b2a:	45c8      	cmp	r8, r9
 8000b2c:	d2ae      	bcs.n	8000a8c <__udivmoddi4+0x1e8>
 8000b2e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000b32:	eb63 0c07 	sbc.w	ip, r3, r7
 8000b36:	3801      	subs	r0, #1
 8000b38:	e7a8      	b.n	8000a8c <__udivmoddi4+0x1e8>
 8000b3a:	4631      	mov	r1, r6
 8000b3c:	e7ed      	b.n	8000b1a <__udivmoddi4+0x276>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	e799      	b.n	8000a76 <__udivmoddi4+0x1d2>
 8000b42:	4630      	mov	r0, r6
 8000b44:	e7d4      	b.n	8000af0 <__udivmoddi4+0x24c>
 8000b46:	46d6      	mov	lr, sl
 8000b48:	e77f      	b.n	8000a4a <__udivmoddi4+0x1a6>
 8000b4a:	4463      	add	r3, ip
 8000b4c:	3802      	subs	r0, #2
 8000b4e:	e74d      	b.n	80009ec <__udivmoddi4+0x148>
 8000b50:	4606      	mov	r6, r0
 8000b52:	4623      	mov	r3, r4
 8000b54:	4608      	mov	r0, r1
 8000b56:	e70f      	b.n	8000978 <__udivmoddi4+0xd4>
 8000b58:	3e02      	subs	r6, #2
 8000b5a:	4463      	add	r3, ip
 8000b5c:	e730      	b.n	80009c0 <__udivmoddi4+0x11c>
 8000b5e:	bf00      	nop

08000b60 <__aeabi_idiv0>:
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop
 8000b64:	0000      	movs	r0, r0
	...

08000b68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b0e8      	sub	sp, #416	@ 0x1a0
 8000b6c:	af02      	add	r7, sp, #8
  HAL_Init();
 8000b6e:	f000 fb19 	bl	80011a4 <HAL_Init>
  SystemClock_Config();
 8000b72:	f000 f873 	bl	8000c5c <SystemClock_Config>
  MX_GPIO_Init();
 8000b76:	f000 f951 	bl	8000e1c <MX_GPIO_Init>
  MX_DMA_Init();
 8000b7a:	f000 f931 	bl	8000de0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000b7e:	f000 f90b 	bl	8000d98 <MX_USART2_UART_Init>
  MX_DAC1_Init();
 8000b82:	f000 f8b7 	bl	8000cf4 <MX_DAC1_Init>
  MX_TIM6_Init();
 8000b86:	f000 f8dd 	bl	8000d44 <MX_TIM6_Init>

  uint16_t IV[SAMPLES], value;
  for (uint16_t i = 0; i < SAMPLES; i++) {
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	f8a7 3196 	strh.w	r3, [r7, #406]	@ 0x196
 8000b90:	e046      	b.n	8000c20 <main+0xb8>
	  value = (uint16_t) rint((sinf(((2*PI)/SAMPLES)*i)+1)*2048);
 8000b92:	f8b7 3196 	ldrh.w	r3, [r7, #406]	@ 0x196
 8000b96:	4618      	mov	r0, r3
 8000b98:	f7ff fd92 	bl	80006c0 <__aeabi_i2d>
 8000b9c:	a32d      	add	r3, pc, #180	@ (adr r3, 8000c54 <main+0xec>)
 8000b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ba2:	f7ff fb11 	bl	80001c8 <__aeabi_dmul>
 8000ba6:	4602      	mov	r2, r0
 8000ba8:	460b      	mov	r3, r1
 8000baa:	4610      	mov	r0, r2
 8000bac:	4619      	mov	r1, r3
 8000bae:	f7ff fe11 	bl	80007d4 <__aeabi_d2f>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	ee00 3a10 	vmov	s0, r3
 8000bb8:	f003 fd62 	bl	8004680 <sinf>
 8000bbc:	eef0 7a40 	vmov.f32	s15, s0
 8000bc0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000bc4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000bc8:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8000c48 <main+0xe0>
 8000bcc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000bd0:	ee17 0a90 	vmov	r0, s15
 8000bd4:	f7ff fd86 	bl	80006e4 <__aeabi_f2d>
 8000bd8:	4602      	mov	r2, r0
 8000bda:	460b      	mov	r3, r1
 8000bdc:	ec43 2b10 	vmov	d0, r2, r3
 8000be0:	f003 fd94 	bl	800470c <rint>
 8000be4:	ec53 2b10 	vmov	r2, r3, d0
 8000be8:	4610      	mov	r0, r2
 8000bea:	4619      	mov	r1, r3
 8000bec:	f7ff fdd2 	bl	8000794 <__aeabi_d2uiz>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	f8a7 3194 	strh.w	r3, [r7, #404]	@ 0x194
	  IV[i] = value < 4096 ? value : 4095;
 8000bf6:	f8b7 2196 	ldrh.w	r2, [r7, #406]	@ 0x196
 8000bfa:	f8b7 3194 	ldrh.w	r3, [r7, #404]	@ 0x194
 8000bfe:	f640 71ff 	movw	r1, #4095	@ 0xfff
 8000c02:	428b      	cmp	r3, r1
 8000c04:	bf28      	it	cs
 8000c06:	460b      	movcs	r3, r1
 8000c08:	b299      	uxth	r1, r3
 8000c0a:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8000c0e:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8000c12:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
  for (uint16_t i = 0; i < SAMPLES; i++) {
 8000c16:	f8b7 3196 	ldrh.w	r3, [r7, #406]	@ 0x196
 8000c1a:	3301      	adds	r3, #1
 8000c1c:	f8a7 3196 	strh.w	r3, [r7, #406]	@ 0x196
 8000c20:	f8b7 3196 	ldrh.w	r3, [r7, #406]	@ 0x196
 8000c24:	2bc7      	cmp	r3, #199	@ 0xc7
 8000c26:	d9b4      	bls.n	8000b92 <main+0x2a>
  }

  HAL_DAC_Init(&hdac1);
 8000c28:	4808      	ldr	r0, [pc, #32]	@ (8000c4c <main+0xe4>)
 8000c2a:	f000 fc6c 	bl	8001506 <HAL_DAC_Init>
  HAL_TIM_Base_Start(&htim6);
 8000c2e:	4808      	ldr	r0, [pc, #32]	@ (8000c50 <main+0xe8>)
 8000c30:	f002 fe42 	bl	80038b8 <HAL_TIM_Base_Start>
  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*)IV, SAMPLES, DAC_ALIGN_12B_R);
 8000c34:	1d3a      	adds	r2, r7, #4
 8000c36:	2300      	movs	r3, #0
 8000c38:	9300      	str	r3, [sp, #0]
 8000c3a:	23c8      	movs	r3, #200	@ 0xc8
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	4803      	ldr	r0, [pc, #12]	@ (8000c4c <main+0xe4>)
 8000c40:	f000 fc84 	bl	800154c <HAL_DAC_Start_DMA>

  while (1);
 8000c44:	bf00      	nop
 8000c46:	e7fd      	b.n	8000c44 <main+0xdc>
 8000c48:	45000000 	.word	0x45000000
 8000c4c:	20000028 	.word	0x20000028
 8000c50:	20000084 	.word	0x20000084
 8000c54:	ae261898 	.word	0xae261898
 8000c58:	3fa015be 	.word	0x3fa015be

08000c5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b096      	sub	sp, #88	@ 0x58
 8000c60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c62:	f107 0314 	add.w	r3, r7, #20
 8000c66:	2244      	movs	r2, #68	@ 0x44
 8000c68:	2100      	movs	r1, #0
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f003 fcdb 	bl	8004626 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c70:	463b      	mov	r3, r7
 8000c72:	2200      	movs	r2, #0
 8000c74:	601a      	str	r2, [r3, #0]
 8000c76:	605a      	str	r2, [r3, #4]
 8000c78:	609a      	str	r2, [r3, #8]
 8000c7a:	60da      	str	r2, [r3, #12]
 8000c7c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c7e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000c82:	f001 faaf 	bl	80021e4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c86:	2302      	movs	r3, #2
 8000c88:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c8a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000c8e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c90:	2310      	movs	r3, #16
 8000c92:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c94:	2302      	movs	r3, #2
 8000c96:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c98:	2302      	movs	r3, #2
 8000c9a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000ca0:	230a      	movs	r3, #10
 8000ca2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000ca4:	2307      	movs	r3, #7
 8000ca6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000ca8:	2302      	movs	r3, #2
 8000caa:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000cac:	2302      	movs	r3, #2
 8000cae:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cb0:	f107 0314 	add.w	r3, r7, #20
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f001 faeb 	bl	8002290 <HAL_RCC_OscConfig>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d001      	beq.n	8000cc4 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8000cc0:	f000 f8ec 	bl	8000e9c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cc4:	230f      	movs	r3, #15
 8000cc6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cc8:	2303      	movs	r3, #3
 8000cca:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000cd8:	463b      	mov	r3, r7
 8000cda:	2104      	movs	r1, #4
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f001 feb3 	bl	8002a48 <HAL_RCC_ClockConfig>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d001      	beq.n	8000cec <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000ce8:	f000 f8d8 	bl	8000e9c <Error_Handler>
  }
}
 8000cec:	bf00      	nop
 8000cee:	3758      	adds	r7, #88	@ 0x58
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}

08000cf4 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b08a      	sub	sp, #40	@ 0x28
 8000cf8:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 8000cfa:	1d3b      	adds	r3, r7, #4
 8000cfc:	2224      	movs	r2, #36	@ 0x24
 8000cfe:	2100      	movs	r1, #0
 8000d00:	4618      	mov	r0, r3
 8000d02:	f003 fc90 	bl	8004626 <memset>
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000d06:	4b0d      	ldr	r3, [pc, #52]	@ (8000d3c <MX_DAC1_Init+0x48>)
 8000d08:	4a0d      	ldr	r2, [pc, #52]	@ (8000d40 <MX_DAC1_Init+0x4c>)
 8000d0a:	601a      	str	r2, [r3, #0]
  HAL_DAC_Init(&hdac1);
 8000d0c:	480b      	ldr	r0, [pc, #44]	@ (8000d3c <MX_DAC1_Init+0x48>)
 8000d0e:	f000 fbfa 	bl	8001506 <HAL_DAC_Init>
  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000d12:	2300      	movs	r3, #0
 8000d14:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 8000d16:	2304      	movs	r3, #4
 8000d18:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_ENABLE;
 8000d1e:	2301      	movs	r3, #1
 8000d20:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000d22:	2300      	movs	r3, #0
 8000d24:	617b      	str	r3, [r7, #20]
  HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1);
 8000d26:	1d3b      	adds	r3, r7, #4
 8000d28:	2200      	movs	r2, #0
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	4803      	ldr	r0, [pc, #12]	@ (8000d3c <MX_DAC1_Init+0x48>)
 8000d2e:	f000 fcf7 	bl	8001720 <HAL_DAC_ConfigChannel>
}
 8000d32:	bf00      	nop
 8000d34:	3728      	adds	r7, #40	@ 0x28
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	20000028 	.word	0x20000028
 8000d40:	40007400 	.word	0x40007400

08000d44 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b084      	sub	sp, #16
 8000d48:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d4a:	1d3b      	adds	r3, r7, #4
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	601a      	str	r2, [r3, #0]
 8000d50:	605a      	str	r2, [r3, #4]
 8000d52:	609a      	str	r2, [r3, #8]

  htim6.Instance = TIM6;
 8000d54:	4b0e      	ldr	r3, [pc, #56]	@ (8000d90 <MX_TIM6_Init+0x4c>)
 8000d56:	4a0f      	ldr	r2, [pc, #60]	@ (8000d94 <MX_TIM6_Init+0x50>)
 8000d58:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8000d5a:	4b0d      	ldr	r3, [pc, #52]	@ (8000d90 <MX_TIM6_Init+0x4c>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d60:	4b0b      	ldr	r3, [pc, #44]	@ (8000d90 <MX_TIM6_Init+0x4c>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 7999;
 8000d66:	4b0a      	ldr	r3, [pc, #40]	@ (8000d90 <MX_TIM6_Init+0x4c>)
 8000d68:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8000d6c:	60da      	str	r2, [r3, #12]
  HAL_TIM_Base_Init(&htim6);
 8000d6e:	4808      	ldr	r0, [pc, #32]	@ (8000d90 <MX_TIM6_Init+0x4c>)
 8000d70:	f002 fd4a 	bl	8003808 <HAL_TIM_Base_Init>

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000d74:	2320      	movs	r3, #32
 8000d76:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	60fb      	str	r3, [r7, #12]
  HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig);
 8000d7c:	1d3b      	adds	r3, r7, #4
 8000d7e:	4619      	mov	r1, r3
 8000d80:	4803      	ldr	r0, [pc, #12]	@ (8000d90 <MX_TIM6_Init+0x4c>)
 8000d82:	f002 fea7 	bl	8003ad4 <HAL_TIMEx_MasterConfigSynchronization>
}
 8000d86:	bf00      	nop
 8000d88:	3710      	adds	r7, #16
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	20000084 	.word	0x20000084
 8000d94:	40001000 	.word	0x40001000

08000d98 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
  huart2.Instance = USART2;
 8000d9c:	4b0e      	ldr	r3, [pc, #56]	@ (8000dd8 <MX_USART2_UART_Init+0x40>)
 8000d9e:	4a0f      	ldr	r2, [pc, #60]	@ (8000ddc <MX_USART2_UART_Init+0x44>)
 8000da0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000da2:	4b0d      	ldr	r3, [pc, #52]	@ (8000dd8 <MX_USART2_UART_Init+0x40>)
 8000da4:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8000da8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000daa:	4b0b      	ldr	r3, [pc, #44]	@ (8000dd8 <MX_USART2_UART_Init+0x40>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000db0:	4b09      	ldr	r3, [pc, #36]	@ (8000dd8 <MX_USART2_UART_Init+0x40>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000db6:	4b08      	ldr	r3, [pc, #32]	@ (8000dd8 <MX_USART2_UART_Init+0x40>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000dbc:	4b06      	ldr	r3, [pc, #24]	@ (8000dd8 <MX_USART2_UART_Init+0x40>)
 8000dbe:	220c      	movs	r2, #12
 8000dc0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dc2:	4b05      	ldr	r3, [pc, #20]	@ (8000dd8 <MX_USART2_UART_Init+0x40>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dc8:	4b03      	ldr	r3, [pc, #12]	@ (8000dd8 <MX_USART2_UART_Init+0x40>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	61da      	str	r2, [r3, #28]
  HAL_UART_Init(&huart2);
 8000dce:	4802      	ldr	r0, [pc, #8]	@ (8000dd8 <MX_USART2_UART_Init+0x40>)
 8000dd0:	f002 ff08 	bl	8003be4 <HAL_UART_Init>
}
 8000dd4:	bf00      	nop
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	200000d0 	.word	0x200000d0
 8000ddc:	40004400 	.word	0x40004400

08000de0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000de6:	4b0c      	ldr	r3, [pc, #48]	@ (8000e18 <MX_DMA_Init+0x38>)
 8000de8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000dea:	4a0b      	ldr	r2, [pc, #44]	@ (8000e18 <MX_DMA_Init+0x38>)
 8000dec:	f043 0301 	orr.w	r3, r3, #1
 8000df0:	6493      	str	r3, [r2, #72]	@ 0x48
 8000df2:	4b09      	ldr	r3, [pc, #36]	@ (8000e18 <MX_DMA_Init+0x38>)
 8000df4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000df6:	f003 0301 	and.w	r3, r3, #1
 8000dfa:	607b      	str	r3, [r7, #4]
 8000dfc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000dfe:	2200      	movs	r2, #0
 8000e00:	2100      	movs	r1, #0
 8000e02:	200d      	movs	r0, #13
 8000e04:	f000 fb49 	bl	800149a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000e08:	200d      	movs	r0, #13
 8000e0a:	f000 fb62 	bl	80014d2 <HAL_NVIC_EnableIRQ>

}
 8000e0e:	bf00      	nop
 8000e10:	3708      	adds	r7, #8
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	40021000 	.word	0x40021000

08000e1c <MX_GPIO_Init>:

void MX_GPIO_Init(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b088      	sub	sp, #32
 8000e20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __GPIOC_CLK_ENABLE();
 8000e22:	4b1c      	ldr	r3, [pc, #112]	@ (8000e94 <MX_GPIO_Init+0x78>)
 8000e24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e26:	4a1b      	ldr	r2, [pc, #108]	@ (8000e94 <MX_GPIO_Init+0x78>)
 8000e28:	f043 0304 	orr.w	r3, r3, #4
 8000e2c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e2e:	4b19      	ldr	r3, [pc, #100]	@ (8000e94 <MX_GPIO_Init+0x78>)
 8000e30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e32:	f003 0304 	and.w	r3, r3, #4
 8000e36:	60bb      	str	r3, [r7, #8]
 8000e38:	68bb      	ldr	r3, [r7, #8]
  __GPIOA_CLK_ENABLE();
 8000e3a:	4b16      	ldr	r3, [pc, #88]	@ (8000e94 <MX_GPIO_Init+0x78>)
 8000e3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e3e:	4a15      	ldr	r2, [pc, #84]	@ (8000e94 <MX_GPIO_Init+0x78>)
 8000e40:	f043 0301 	orr.w	r3, r3, #1
 8000e44:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e46:	4b13      	ldr	r3, [pc, #76]	@ (8000e94 <MX_GPIO_Init+0x78>)
 8000e48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e4a:	f003 0301 	and.w	r3, r3, #1
 8000e4e:	607b      	str	r3, [r7, #4]
 8000e50:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000e52:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e56:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e58:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000e5c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000e62:	f107 030c 	add.w	r3, r7, #12
 8000e66:	4619      	mov	r1, r3
 8000e68:	480b      	ldr	r0, [pc, #44]	@ (8000e98 <MX_GPIO_Init+0x7c>)
 8000e6a:	f001 f803 	bl	8001e74 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000e6e:	2320      	movs	r3, #32
 8000e70:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e72:	2301      	movs	r3, #1
 8000e74:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e76:	2300      	movs	r3, #0
 8000e78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8000e7a:	2303      	movs	r3, #3
 8000e7c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000e7e:	f107 030c 	add.w	r3, r7, #12
 8000e82:	4619      	mov	r1, r3
 8000e84:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e88:	f000 fff4 	bl	8001e74 <HAL_GPIO_Init>
}
 8000e8c:	bf00      	nop
 8000e8e:	3720      	adds	r7, #32
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	40021000 	.word	0x40021000
 8000e98:	48000800 	.word	0x48000800

08000e9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ea0:	b672      	cpsid	i
}
 8000ea2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ea4:	bf00      	nop
 8000ea6:	e7fd      	b.n	8000ea4 <Error_Handler+0x8>

08000ea8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b083      	sub	sp, #12
 8000eac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eae:	4b0f      	ldr	r3, [pc, #60]	@ (8000eec <HAL_MspInit+0x44>)
 8000eb0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000eb2:	4a0e      	ldr	r2, [pc, #56]	@ (8000eec <HAL_MspInit+0x44>)
 8000eb4:	f043 0301 	orr.w	r3, r3, #1
 8000eb8:	6613      	str	r3, [r2, #96]	@ 0x60
 8000eba:	4b0c      	ldr	r3, [pc, #48]	@ (8000eec <HAL_MspInit+0x44>)
 8000ebc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ebe:	f003 0301 	and.w	r3, r3, #1
 8000ec2:	607b      	str	r3, [r7, #4]
 8000ec4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ec6:	4b09      	ldr	r3, [pc, #36]	@ (8000eec <HAL_MspInit+0x44>)
 8000ec8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000eca:	4a08      	ldr	r2, [pc, #32]	@ (8000eec <HAL_MspInit+0x44>)
 8000ecc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ed0:	6593      	str	r3, [r2, #88]	@ 0x58
 8000ed2:	4b06      	ldr	r3, [pc, #24]	@ (8000eec <HAL_MspInit+0x44>)
 8000ed4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ed6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000eda:	603b      	str	r3, [r7, #0]
 8000edc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ede:	bf00      	nop
 8000ee0:	370c      	adds	r7, #12
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop
 8000eec:	40021000 	.word	0x40021000

08000ef0 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b08a      	sub	sp, #40	@ 0x28
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef8:	f107 0314 	add.w	r3, r7, #20
 8000efc:	2200      	movs	r2, #0
 8000efe:	601a      	str	r2, [r3, #0]
 8000f00:	605a      	str	r2, [r3, #4]
 8000f02:	609a      	str	r2, [r3, #8]
 8000f04:	60da      	str	r2, [r3, #12]
 8000f06:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4a28      	ldr	r2, [pc, #160]	@ (8000fb0 <HAL_DAC_MspInit+0xc0>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d14a      	bne.n	8000fa8 <HAL_DAC_MspInit+0xb8>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000f12:	4b28      	ldr	r3, [pc, #160]	@ (8000fb4 <HAL_DAC_MspInit+0xc4>)
 8000f14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f16:	4a27      	ldr	r2, [pc, #156]	@ (8000fb4 <HAL_DAC_MspInit+0xc4>)
 8000f18:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8000f1c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f1e:	4b25      	ldr	r3, [pc, #148]	@ (8000fb4 <HAL_DAC_MspInit+0xc4>)
 8000f20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f22:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000f26:	613b      	str	r3, [r7, #16]
 8000f28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f2a:	4b22      	ldr	r3, [pc, #136]	@ (8000fb4 <HAL_DAC_MspInit+0xc4>)
 8000f2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f2e:	4a21      	ldr	r2, [pc, #132]	@ (8000fb4 <HAL_DAC_MspInit+0xc4>)
 8000f30:	f043 0301 	orr.w	r3, r3, #1
 8000f34:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f36:	4b1f      	ldr	r3, [pc, #124]	@ (8000fb4 <HAL_DAC_MspInit+0xc4>)
 8000f38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f3a:	f003 0301 	and.w	r3, r3, #1
 8000f3e:	60fb      	str	r3, [r7, #12]
 8000f40:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000f42:	2310      	movs	r3, #16
 8000f44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f46:	2303      	movs	r3, #3
 8000f48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f4e:	f107 0314 	add.w	r3, r7, #20
 8000f52:	4619      	mov	r1, r3
 8000f54:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f58:	f000 ff8c 	bl	8001e74 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA1_Channel3;
 8000f5c:	4b16      	ldr	r3, [pc, #88]	@ (8000fb8 <HAL_DAC_MspInit+0xc8>)
 8000f5e:	4a17      	ldr	r2, [pc, #92]	@ (8000fbc <HAL_DAC_MspInit+0xcc>)
 8000f60:	601a      	str	r2, [r3, #0]
    hdma_dac_ch1.Init.Request = DMA_REQUEST_6;
 8000f62:	4b15      	ldr	r3, [pc, #84]	@ (8000fb8 <HAL_DAC_MspInit+0xc8>)
 8000f64:	2206      	movs	r2, #6
 8000f66:	605a      	str	r2, [r3, #4]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f68:	4b13      	ldr	r3, [pc, #76]	@ (8000fb8 <HAL_DAC_MspInit+0xc8>)
 8000f6a:	2210      	movs	r2, #16
 8000f6c:	609a      	str	r2, [r3, #8]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f6e:	4b12      	ldr	r3, [pc, #72]	@ (8000fb8 <HAL_DAC_MspInit+0xc8>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	60da      	str	r2, [r3, #12]
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000f74:	4b10      	ldr	r3, [pc, #64]	@ (8000fb8 <HAL_DAC_MspInit+0xc8>)
 8000f76:	2280      	movs	r2, #128	@ 0x80
 8000f78:	611a      	str	r2, [r3, #16]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000f7a:	4b0f      	ldr	r3, [pc, #60]	@ (8000fb8 <HAL_DAC_MspInit+0xc8>)
 8000f7c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000f80:	615a      	str	r2, [r3, #20]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000f82:	4b0d      	ldr	r3, [pc, #52]	@ (8000fb8 <HAL_DAC_MspInit+0xc8>)
 8000f84:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000f88:	619a      	str	r2, [r3, #24]
    hdma_dac_ch1.Init.Mode = DMA_CIRCULAR;
 8000f8a:	4b0b      	ldr	r3, [pc, #44]	@ (8000fb8 <HAL_DAC_MspInit+0xc8>)
 8000f8c:	2220      	movs	r2, #32
 8000f8e:	61da      	str	r2, [r3, #28]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000f90:	4b09      	ldr	r3, [pc, #36]	@ (8000fb8 <HAL_DAC_MspInit+0xc8>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	621a      	str	r2, [r3, #32]
    HAL_DMA_Init(&hdma_dac_ch1);
 8000f96:	4808      	ldr	r0, [pc, #32]	@ (8000fb8 <HAL_DAC_MspInit+0xc8>)
 8000f98:	f000 fd74 	bl	8001a84 <HAL_DMA_Init>

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac_ch1);
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	4a06      	ldr	r2, [pc, #24]	@ (8000fb8 <HAL_DAC_MspInit+0xc8>)
 8000fa0:	609a      	str	r2, [r3, #8]
 8000fa2:	4a05      	ldr	r2, [pc, #20]	@ (8000fb8 <HAL_DAC_MspInit+0xc8>)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE END DAC1_MspInit 1 */

  }

}
 8000fa8:	bf00      	nop
 8000faa:	3728      	adds	r7, #40	@ 0x28
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	40007400 	.word	0x40007400
 8000fb4:	40021000 	.word	0x40021000
 8000fb8:	2000003c 	.word	0x2000003c
 8000fbc:	40020030 	.word	0x40020030

08000fc0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b085      	sub	sp, #20
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a0a      	ldr	r2, [pc, #40]	@ (8000ff8 <HAL_TIM_Base_MspInit+0x38>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d10b      	bne.n	8000fea <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000fd2:	4b0a      	ldr	r3, [pc, #40]	@ (8000ffc <HAL_TIM_Base_MspInit+0x3c>)
 8000fd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fd6:	4a09      	ldr	r2, [pc, #36]	@ (8000ffc <HAL_TIM_Base_MspInit+0x3c>)
 8000fd8:	f043 0310 	orr.w	r3, r3, #16
 8000fdc:	6593      	str	r3, [r2, #88]	@ 0x58
 8000fde:	4b07      	ldr	r3, [pc, #28]	@ (8000ffc <HAL_TIM_Base_MspInit+0x3c>)
 8000fe0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fe2:	f003 0310 	and.w	r3, r3, #16
 8000fe6:	60fb      	str	r3, [r7, #12]
 8000fe8:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM6_MspInit 1 */

  }

}
 8000fea:	bf00      	nop
 8000fec:	3714      	adds	r7, #20
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop
 8000ff8:	40001000 	.word	0x40001000
 8000ffc:	40021000 	.word	0x40021000

08001000 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b0ac      	sub	sp, #176	@ 0xb0
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001008:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800100c:	2200      	movs	r2, #0
 800100e:	601a      	str	r2, [r3, #0]
 8001010:	605a      	str	r2, [r3, #4]
 8001012:	609a      	str	r2, [r3, #8]
 8001014:	60da      	str	r2, [r3, #12]
 8001016:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001018:	f107 0314 	add.w	r3, r7, #20
 800101c:	2288      	movs	r2, #136	@ 0x88
 800101e:	2100      	movs	r1, #0
 8001020:	4618      	mov	r0, r3
 8001022:	f003 fb00 	bl	8004626 <memset>
  if(huart->Instance==USART2)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4a21      	ldr	r2, [pc, #132]	@ (80010b0 <HAL_UART_MspInit+0xb0>)
 800102c:	4293      	cmp	r3, r2
 800102e:	d13b      	bne.n	80010a8 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001030:	2302      	movs	r3, #2
 8001032:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001034:	2300      	movs	r3, #0
 8001036:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001038:	f107 0314 	add.w	r3, r7, #20
 800103c:	4618      	mov	r0, r3
 800103e:	f001 ff27 	bl	8002e90 <HAL_RCCEx_PeriphCLKConfig>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d001      	beq.n	800104c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001048:	f7ff ff28 	bl	8000e9c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800104c:	4b19      	ldr	r3, [pc, #100]	@ (80010b4 <HAL_UART_MspInit+0xb4>)
 800104e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001050:	4a18      	ldr	r2, [pc, #96]	@ (80010b4 <HAL_UART_MspInit+0xb4>)
 8001052:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001056:	6593      	str	r3, [r2, #88]	@ 0x58
 8001058:	4b16      	ldr	r3, [pc, #88]	@ (80010b4 <HAL_UART_MspInit+0xb4>)
 800105a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800105c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001060:	613b      	str	r3, [r7, #16]
 8001062:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001064:	4b13      	ldr	r3, [pc, #76]	@ (80010b4 <HAL_UART_MspInit+0xb4>)
 8001066:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001068:	4a12      	ldr	r2, [pc, #72]	@ (80010b4 <HAL_UART_MspInit+0xb4>)
 800106a:	f043 0301 	orr.w	r3, r3, #1
 800106e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001070:	4b10      	ldr	r3, [pc, #64]	@ (80010b4 <HAL_UART_MspInit+0xb4>)
 8001072:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001074:	f003 0301 	and.w	r3, r3, #1
 8001078:	60fb      	str	r3, [r7, #12]
 800107a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800107c:	230c      	movs	r3, #12
 800107e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001082:	2302      	movs	r3, #2
 8001084:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001088:	2300      	movs	r3, #0
 800108a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800108e:	2303      	movs	r3, #3
 8001090:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001094:	2307      	movs	r3, #7
 8001096:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800109a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800109e:	4619      	mov	r1, r3
 80010a0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010a4:	f000 fee6 	bl	8001e74 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80010a8:	bf00      	nop
 80010aa:	37b0      	adds	r7, #176	@ 0xb0
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	40004400 	.word	0x40004400
 80010b4:	40021000 	.word	0x40021000

080010b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010bc:	bf00      	nop
 80010be:	e7fd      	b.n	80010bc <NMI_Handler+0x4>

080010c0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010c4:	bf00      	nop
 80010c6:	e7fd      	b.n	80010c4 <HardFault_Handler+0x4>

080010c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010cc:	bf00      	nop
 80010ce:	e7fd      	b.n	80010cc <MemManage_Handler+0x4>

080010d0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010d4:	bf00      	nop
 80010d6:	e7fd      	b.n	80010d4 <BusFault_Handler+0x4>

080010d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010dc:	bf00      	nop
 80010de:	e7fd      	b.n	80010dc <UsageFault_Handler+0x4>

080010e0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010e4:	bf00      	nop
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr

080010ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010ee:	b480      	push	{r7}
 80010f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010f2:	bf00      	nop
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr

080010fc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001100:	bf00      	nop
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr

0800110a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800110a:	b580      	push	{r7, lr}
 800110c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800110e:	f000 f8a5 	bl	800125c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001112:	bf00      	nop
 8001114:	bd80      	pop	{r7, pc}
	...

08001118 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 800111c:	4802      	ldr	r0, [pc, #8]	@ (8001128 <DMA1_Channel3_IRQHandler+0x10>)
 800111e:	f000 fdc9 	bl	8001cb4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001122:	bf00      	nop
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	2000003c 	.word	0x2000003c

0800112c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001130:	4b06      	ldr	r3, [pc, #24]	@ (800114c <SystemInit+0x20>)
 8001132:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001136:	4a05      	ldr	r2, [pc, #20]	@ (800114c <SystemInit+0x20>)
 8001138:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800113c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001140:	bf00      	nop
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop
 800114c:	e000ed00 	.word	0xe000ed00

08001150 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001150:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001188 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001154:	f7ff ffea 	bl	800112c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001158:	480c      	ldr	r0, [pc, #48]	@ (800118c <LoopForever+0x6>)
  ldr r1, =_edata
 800115a:	490d      	ldr	r1, [pc, #52]	@ (8001190 <LoopForever+0xa>)
  ldr r2, =_sidata
 800115c:	4a0d      	ldr	r2, [pc, #52]	@ (8001194 <LoopForever+0xe>)
  movs r3, #0
 800115e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001160:	e002      	b.n	8001168 <LoopCopyDataInit>

08001162 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001162:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001164:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001166:	3304      	adds	r3, #4

08001168 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001168:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800116a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800116c:	d3f9      	bcc.n	8001162 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800116e:	4a0a      	ldr	r2, [pc, #40]	@ (8001198 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001170:	4c0a      	ldr	r4, [pc, #40]	@ (800119c <LoopForever+0x16>)
  movs r3, #0
 8001172:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001174:	e001      	b.n	800117a <LoopFillZerobss>

08001176 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001176:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001178:	3204      	adds	r2, #4

0800117a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800117a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800117c:	d3fb      	bcc.n	8001176 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800117e:	f003 fa5b 	bl	8004638 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001182:	f7ff fcf1 	bl	8000b68 <main>

08001186 <LoopForever>:

LoopForever:
    b LoopForever
 8001186:	e7fe      	b.n	8001186 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001188:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800118c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001190:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001194:	08005660 	.word	0x08005660
  ldr r2, =_sbss
 8001198:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800119c:	2000015c 	.word	0x2000015c

080011a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80011a0:	e7fe      	b.n	80011a0 <ADC1_2_IRQHandler>
	...

080011a4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80011aa:	2300      	movs	r3, #0
 80011ac:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011ae:	4b0c      	ldr	r3, [pc, #48]	@ (80011e0 <HAL_Init+0x3c>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4a0b      	ldr	r2, [pc, #44]	@ (80011e0 <HAL_Init+0x3c>)
 80011b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011b8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011ba:	2003      	movs	r0, #3
 80011bc:	f000 f962 	bl	8001484 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011c0:	2000      	movs	r0, #0
 80011c2:	f000 f80f 	bl	80011e4 <HAL_InitTick>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d002      	beq.n	80011d2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80011cc:	2301      	movs	r3, #1
 80011ce:	71fb      	strb	r3, [r7, #7]
 80011d0:	e001      	b.n	80011d6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80011d2:	f7ff fe69 	bl	8000ea8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80011d6:	79fb      	ldrb	r3, [r7, #7]
}
 80011d8:	4618      	mov	r0, r3
 80011da:	3708      	adds	r7, #8
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	40022000 	.word	0x40022000

080011e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b084      	sub	sp, #16
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80011ec:	2300      	movs	r3, #0
 80011ee:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80011f0:	4b17      	ldr	r3, [pc, #92]	@ (8001250 <HAL_InitTick+0x6c>)
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d023      	beq.n	8001240 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80011f8:	4b16      	ldr	r3, [pc, #88]	@ (8001254 <HAL_InitTick+0x70>)
 80011fa:	681a      	ldr	r2, [r3, #0]
 80011fc:	4b14      	ldr	r3, [pc, #80]	@ (8001250 <HAL_InitTick+0x6c>)
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	4619      	mov	r1, r3
 8001202:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001206:	fbb3 f3f1 	udiv	r3, r3, r1
 800120a:	fbb2 f3f3 	udiv	r3, r2, r3
 800120e:	4618      	mov	r0, r3
 8001210:	f000 f96d 	bl	80014ee <HAL_SYSTICK_Config>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d10f      	bne.n	800123a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	2b0f      	cmp	r3, #15
 800121e:	d809      	bhi.n	8001234 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001220:	2200      	movs	r2, #0
 8001222:	6879      	ldr	r1, [r7, #4]
 8001224:	f04f 30ff 	mov.w	r0, #4294967295
 8001228:	f000 f937 	bl	800149a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800122c:	4a0a      	ldr	r2, [pc, #40]	@ (8001258 <HAL_InitTick+0x74>)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6013      	str	r3, [r2, #0]
 8001232:	e007      	b.n	8001244 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001234:	2301      	movs	r3, #1
 8001236:	73fb      	strb	r3, [r7, #15]
 8001238:	e004      	b.n	8001244 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800123a:	2301      	movs	r3, #1
 800123c:	73fb      	strb	r3, [r7, #15]
 800123e:	e001      	b.n	8001244 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001240:	2301      	movs	r3, #1
 8001242:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001244:	7bfb      	ldrb	r3, [r7, #15]
}
 8001246:	4618      	mov	r0, r3
 8001248:	3710      	adds	r7, #16
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	20000008 	.word	0x20000008
 8001254:	20000000 	.word	0x20000000
 8001258:	20000004 	.word	0x20000004

0800125c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001260:	4b06      	ldr	r3, [pc, #24]	@ (800127c <HAL_IncTick+0x20>)
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	461a      	mov	r2, r3
 8001266:	4b06      	ldr	r3, [pc, #24]	@ (8001280 <HAL_IncTick+0x24>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4413      	add	r3, r2
 800126c:	4a04      	ldr	r2, [pc, #16]	@ (8001280 <HAL_IncTick+0x24>)
 800126e:	6013      	str	r3, [r2, #0]
}
 8001270:	bf00      	nop
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr
 800127a:	bf00      	nop
 800127c:	20000008 	.word	0x20000008
 8001280:	20000158 	.word	0x20000158

08001284 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
  return uwTick;
 8001288:	4b03      	ldr	r3, [pc, #12]	@ (8001298 <HAL_GetTick+0x14>)
 800128a:	681b      	ldr	r3, [r3, #0]
}
 800128c:	4618      	mov	r0, r3
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr
 8001296:	bf00      	nop
 8001298:	20000158 	.word	0x20000158

0800129c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b084      	sub	sp, #16
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012a4:	f7ff ffee 	bl	8001284 <HAL_GetTick>
 80012a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012b4:	d005      	beq.n	80012c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80012b6:	4b0a      	ldr	r3, [pc, #40]	@ (80012e0 <HAL_Delay+0x44>)
 80012b8:	781b      	ldrb	r3, [r3, #0]
 80012ba:	461a      	mov	r2, r3
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	4413      	add	r3, r2
 80012c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012c2:	bf00      	nop
 80012c4:	f7ff ffde 	bl	8001284 <HAL_GetTick>
 80012c8:	4602      	mov	r2, r0
 80012ca:	68bb      	ldr	r3, [r7, #8]
 80012cc:	1ad3      	subs	r3, r2, r3
 80012ce:	68fa      	ldr	r2, [r7, #12]
 80012d0:	429a      	cmp	r2, r3
 80012d2:	d8f7      	bhi.n	80012c4 <HAL_Delay+0x28>
  {
  }
}
 80012d4:	bf00      	nop
 80012d6:	bf00      	nop
 80012d8:	3710      	adds	r7, #16
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	20000008 	.word	0x20000008

080012e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b085      	sub	sp, #20
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	f003 0307 	and.w	r3, r3, #7
 80012f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001328 <__NVIC_SetPriorityGrouping+0x44>)
 80012f6:	68db      	ldr	r3, [r3, #12]
 80012f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012fa:	68ba      	ldr	r2, [r7, #8]
 80012fc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001300:	4013      	ands	r3, r2
 8001302:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001308:	68bb      	ldr	r3, [r7, #8]
 800130a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800130c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001310:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001314:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001316:	4a04      	ldr	r2, [pc, #16]	@ (8001328 <__NVIC_SetPriorityGrouping+0x44>)
 8001318:	68bb      	ldr	r3, [r7, #8]
 800131a:	60d3      	str	r3, [r2, #12]
}
 800131c:	bf00      	nop
 800131e:	3714      	adds	r7, #20
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr
 8001328:	e000ed00 	.word	0xe000ed00

0800132c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001330:	4b04      	ldr	r3, [pc, #16]	@ (8001344 <__NVIC_GetPriorityGrouping+0x18>)
 8001332:	68db      	ldr	r3, [r3, #12]
 8001334:	0a1b      	lsrs	r3, r3, #8
 8001336:	f003 0307 	and.w	r3, r3, #7
}
 800133a:	4618      	mov	r0, r3
 800133c:	46bd      	mov	sp, r7
 800133e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001342:	4770      	bx	lr
 8001344:	e000ed00 	.word	0xe000ed00

08001348 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001348:	b480      	push	{r7}
 800134a:	b083      	sub	sp, #12
 800134c:	af00      	add	r7, sp, #0
 800134e:	4603      	mov	r3, r0
 8001350:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001352:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001356:	2b00      	cmp	r3, #0
 8001358:	db0b      	blt.n	8001372 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800135a:	79fb      	ldrb	r3, [r7, #7]
 800135c:	f003 021f 	and.w	r2, r3, #31
 8001360:	4907      	ldr	r1, [pc, #28]	@ (8001380 <__NVIC_EnableIRQ+0x38>)
 8001362:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001366:	095b      	lsrs	r3, r3, #5
 8001368:	2001      	movs	r0, #1
 800136a:	fa00 f202 	lsl.w	r2, r0, r2
 800136e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001372:	bf00      	nop
 8001374:	370c      	adds	r7, #12
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr
 800137e:	bf00      	nop
 8001380:	e000e100 	.word	0xe000e100

08001384 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001384:	b480      	push	{r7}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0
 800138a:	4603      	mov	r3, r0
 800138c:	6039      	str	r1, [r7, #0]
 800138e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001390:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001394:	2b00      	cmp	r3, #0
 8001396:	db0a      	blt.n	80013ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	b2da      	uxtb	r2, r3
 800139c:	490c      	ldr	r1, [pc, #48]	@ (80013d0 <__NVIC_SetPriority+0x4c>)
 800139e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a2:	0112      	lsls	r2, r2, #4
 80013a4:	b2d2      	uxtb	r2, r2
 80013a6:	440b      	add	r3, r1
 80013a8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013ac:	e00a      	b.n	80013c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	b2da      	uxtb	r2, r3
 80013b2:	4908      	ldr	r1, [pc, #32]	@ (80013d4 <__NVIC_SetPriority+0x50>)
 80013b4:	79fb      	ldrb	r3, [r7, #7]
 80013b6:	f003 030f 	and.w	r3, r3, #15
 80013ba:	3b04      	subs	r3, #4
 80013bc:	0112      	lsls	r2, r2, #4
 80013be:	b2d2      	uxtb	r2, r2
 80013c0:	440b      	add	r3, r1
 80013c2:	761a      	strb	r2, [r3, #24]
}
 80013c4:	bf00      	nop
 80013c6:	370c      	adds	r7, #12
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr
 80013d0:	e000e100 	.word	0xe000e100
 80013d4:	e000ed00 	.word	0xe000ed00

080013d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013d8:	b480      	push	{r7}
 80013da:	b089      	sub	sp, #36	@ 0x24
 80013dc:	af00      	add	r7, sp, #0
 80013de:	60f8      	str	r0, [r7, #12]
 80013e0:	60b9      	str	r1, [r7, #8]
 80013e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	f003 0307 	and.w	r3, r3, #7
 80013ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013ec:	69fb      	ldr	r3, [r7, #28]
 80013ee:	f1c3 0307 	rsb	r3, r3, #7
 80013f2:	2b04      	cmp	r3, #4
 80013f4:	bf28      	it	cs
 80013f6:	2304      	movcs	r3, #4
 80013f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013fa:	69fb      	ldr	r3, [r7, #28]
 80013fc:	3304      	adds	r3, #4
 80013fe:	2b06      	cmp	r3, #6
 8001400:	d902      	bls.n	8001408 <NVIC_EncodePriority+0x30>
 8001402:	69fb      	ldr	r3, [r7, #28]
 8001404:	3b03      	subs	r3, #3
 8001406:	e000      	b.n	800140a <NVIC_EncodePriority+0x32>
 8001408:	2300      	movs	r3, #0
 800140a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800140c:	f04f 32ff 	mov.w	r2, #4294967295
 8001410:	69bb      	ldr	r3, [r7, #24]
 8001412:	fa02 f303 	lsl.w	r3, r2, r3
 8001416:	43da      	mvns	r2, r3
 8001418:	68bb      	ldr	r3, [r7, #8]
 800141a:	401a      	ands	r2, r3
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001420:	f04f 31ff 	mov.w	r1, #4294967295
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	fa01 f303 	lsl.w	r3, r1, r3
 800142a:	43d9      	mvns	r1, r3
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001430:	4313      	orrs	r3, r2
         );
}
 8001432:	4618      	mov	r0, r3
 8001434:	3724      	adds	r7, #36	@ 0x24
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr
	...

08001440 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	3b01      	subs	r3, #1
 800144c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001450:	d301      	bcc.n	8001456 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001452:	2301      	movs	r3, #1
 8001454:	e00f      	b.n	8001476 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001456:	4a0a      	ldr	r2, [pc, #40]	@ (8001480 <SysTick_Config+0x40>)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	3b01      	subs	r3, #1
 800145c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800145e:	210f      	movs	r1, #15
 8001460:	f04f 30ff 	mov.w	r0, #4294967295
 8001464:	f7ff ff8e 	bl	8001384 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001468:	4b05      	ldr	r3, [pc, #20]	@ (8001480 <SysTick_Config+0x40>)
 800146a:	2200      	movs	r2, #0
 800146c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800146e:	4b04      	ldr	r3, [pc, #16]	@ (8001480 <SysTick_Config+0x40>)
 8001470:	2207      	movs	r2, #7
 8001472:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001474:	2300      	movs	r3, #0
}
 8001476:	4618      	mov	r0, r3
 8001478:	3708      	adds	r7, #8
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	e000e010 	.word	0xe000e010

08001484 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800148c:	6878      	ldr	r0, [r7, #4]
 800148e:	f7ff ff29 	bl	80012e4 <__NVIC_SetPriorityGrouping>
}
 8001492:	bf00      	nop
 8001494:	3708      	adds	r7, #8
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}

0800149a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800149a:	b580      	push	{r7, lr}
 800149c:	b086      	sub	sp, #24
 800149e:	af00      	add	r7, sp, #0
 80014a0:	4603      	mov	r3, r0
 80014a2:	60b9      	str	r1, [r7, #8]
 80014a4:	607a      	str	r2, [r7, #4]
 80014a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80014a8:	2300      	movs	r3, #0
 80014aa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80014ac:	f7ff ff3e 	bl	800132c <__NVIC_GetPriorityGrouping>
 80014b0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014b2:	687a      	ldr	r2, [r7, #4]
 80014b4:	68b9      	ldr	r1, [r7, #8]
 80014b6:	6978      	ldr	r0, [r7, #20]
 80014b8:	f7ff ff8e 	bl	80013d8 <NVIC_EncodePriority>
 80014bc:	4602      	mov	r2, r0
 80014be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014c2:	4611      	mov	r1, r2
 80014c4:	4618      	mov	r0, r3
 80014c6:	f7ff ff5d 	bl	8001384 <__NVIC_SetPriority>
}
 80014ca:	bf00      	nop
 80014cc:	3718      	adds	r7, #24
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}

080014d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014d2:	b580      	push	{r7, lr}
 80014d4:	b082      	sub	sp, #8
 80014d6:	af00      	add	r7, sp, #0
 80014d8:	4603      	mov	r3, r0
 80014da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014e0:	4618      	mov	r0, r3
 80014e2:	f7ff ff31 	bl	8001348 <__NVIC_EnableIRQ>
}
 80014e6:	bf00      	nop
 80014e8:	3708      	adds	r7, #8
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}

080014ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014ee:	b580      	push	{r7, lr}
 80014f0:	b082      	sub	sp, #8
 80014f2:	af00      	add	r7, sp, #0
 80014f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014f6:	6878      	ldr	r0, [r7, #4]
 80014f8:	f7ff ffa2 	bl	8001440 <SysTick_Config>
 80014fc:	4603      	mov	r3, r0
}
 80014fe:	4618      	mov	r0, r3
 8001500:	3708      	adds	r7, #8
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}

08001506 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001506:	b580      	push	{r7, lr}
 8001508:	b082      	sub	sp, #8
 800150a:	af00      	add	r7, sp, #0
 800150c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d101      	bne.n	8001518 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8001514:	2301      	movs	r3, #1
 8001516:	e014      	b.n	8001542 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	791b      	ldrb	r3, [r3, #4]
 800151c:	b2db      	uxtb	r3, r3
 800151e:	2b00      	cmp	r3, #0
 8001520:	d105      	bne.n	800152e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2200      	movs	r2, #0
 8001526:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001528:	6878      	ldr	r0, [r7, #4]
 800152a:	f7ff fce1 	bl	8000ef0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2202      	movs	r2, #2
 8001532:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2200      	movs	r2, #0
 8001538:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	2201      	movs	r2, #1
 800153e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001540:	2300      	movs	r3, #0
}
 8001542:	4618      	mov	r0, r3
 8001544:	3708      	adds	r7, #8
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
	...

0800154c <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b086      	sub	sp, #24
 8001550:	af00      	add	r7, sp, #0
 8001552:	60f8      	str	r0, [r7, #12]
 8001554:	60b9      	str	r1, [r7, #8]
 8001556:	607a      	str	r2, [r7, #4]
 8001558:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 800155a:	2300      	movs	r3, #0
 800155c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	795b      	ldrb	r3, [r3, #5]
 8001562:	2b01      	cmp	r3, #1
 8001564:	d101      	bne.n	800156a <HAL_DAC_Start_DMA+0x1e>
 8001566:	2302      	movs	r3, #2
 8001568:	e0ab      	b.n	80016c2 <HAL_DAC_Start_DMA+0x176>
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	2201      	movs	r2, #1
 800156e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	2202      	movs	r2, #2
 8001574:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8001576:	68bb      	ldr	r3, [r7, #8]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d12f      	bne.n	80015dc <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	689b      	ldr	r3, [r3, #8]
 8001580:	4a52      	ldr	r2, [pc, #328]	@ (80016cc <HAL_DAC_Start_DMA+0x180>)
 8001582:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	689b      	ldr	r3, [r3, #8]
 8001588:	4a51      	ldr	r2, [pc, #324]	@ (80016d0 <HAL_DAC_Start_DMA+0x184>)
 800158a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	689b      	ldr	r3, [r3, #8]
 8001590:	4a50      	ldr	r2, [pc, #320]	@ (80016d4 <HAL_DAC_Start_DMA+0x188>)
 8001592:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	681a      	ldr	r2, [r3, #0]
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80015a2:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 80015a4:	6a3b      	ldr	r3, [r7, #32]
 80015a6:	2b08      	cmp	r3, #8
 80015a8:	d013      	beq.n	80015d2 <HAL_DAC_Start_DMA+0x86>
 80015aa:	6a3b      	ldr	r3, [r7, #32]
 80015ac:	2b08      	cmp	r3, #8
 80015ae:	d845      	bhi.n	800163c <HAL_DAC_Start_DMA+0xf0>
 80015b0:	6a3b      	ldr	r3, [r7, #32]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d003      	beq.n	80015be <HAL_DAC_Start_DMA+0x72>
 80015b6:	6a3b      	ldr	r3, [r7, #32]
 80015b8:	2b04      	cmp	r3, #4
 80015ba:	d005      	beq.n	80015c8 <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 80015bc:	e03e      	b.n	800163c <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	3308      	adds	r3, #8
 80015c4:	613b      	str	r3, [r7, #16]
        break;
 80015c6:	e03c      	b.n	8001642 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	330c      	adds	r3, #12
 80015ce:	613b      	str	r3, [r7, #16]
        break;
 80015d0:	e037      	b.n	8001642 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	3310      	adds	r3, #16
 80015d8:	613b      	str	r3, [r7, #16]
        break;
 80015da:	e032      	b.n	8001642 <HAL_DAC_Start_DMA+0xf6>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	68db      	ldr	r3, [r3, #12]
 80015e0:	4a3d      	ldr	r2, [pc, #244]	@ (80016d8 <HAL_DAC_Start_DMA+0x18c>)
 80015e2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	68db      	ldr	r3, [r3, #12]
 80015e8:	4a3c      	ldr	r2, [pc, #240]	@ (80016dc <HAL_DAC_Start_DMA+0x190>)
 80015ea:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	68db      	ldr	r3, [r3, #12]
 80015f0:	4a3b      	ldr	r2, [pc, #236]	@ (80016e0 <HAL_DAC_Start_DMA+0x194>)
 80015f2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	681a      	ldr	r2, [r3, #0]
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001602:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8001604:	6a3b      	ldr	r3, [r7, #32]
 8001606:	2b08      	cmp	r3, #8
 8001608:	d013      	beq.n	8001632 <HAL_DAC_Start_DMA+0xe6>
 800160a:	6a3b      	ldr	r3, [r7, #32]
 800160c:	2b08      	cmp	r3, #8
 800160e:	d817      	bhi.n	8001640 <HAL_DAC_Start_DMA+0xf4>
 8001610:	6a3b      	ldr	r3, [r7, #32]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d003      	beq.n	800161e <HAL_DAC_Start_DMA+0xd2>
 8001616:	6a3b      	ldr	r3, [r7, #32]
 8001618:	2b04      	cmp	r3, #4
 800161a:	d005      	beq.n	8001628 <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 800161c:	e010      	b.n	8001640 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	3314      	adds	r3, #20
 8001624:	613b      	str	r3, [r7, #16]
        break;
 8001626:	e00c      	b.n	8001642 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	3318      	adds	r3, #24
 800162e:	613b      	str	r3, [r7, #16]
        break;
 8001630:	e007      	b.n	8001642 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	331c      	adds	r3, #28
 8001638:	613b      	str	r3, [r7, #16]
        break;
 800163a:	e002      	b.n	8001642 <HAL_DAC_Start_DMA+0xf6>
        break;
 800163c:	bf00      	nop
 800163e:	e000      	b.n	8001642 <HAL_DAC_Start_DMA+0xf6>
        break;
 8001640:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 8001642:	68bb      	ldr	r3, [r7, #8]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d111      	bne.n	800166c <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	681a      	ldr	r2, [r3, #0]
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001656:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	6898      	ldr	r0, [r3, #8]
 800165c:	6879      	ldr	r1, [r7, #4]
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	693a      	ldr	r2, [r7, #16]
 8001662:	f000 fac7 	bl	8001bf4 <HAL_DMA_Start_IT>
 8001666:	4603      	mov	r3, r0
 8001668:	75fb      	strb	r3, [r7, #23]
 800166a:	e010      	b.n	800168e <HAL_DAC_Start_DMA+0x142>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	681a      	ldr	r2, [r3, #0]
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 800167a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	68d8      	ldr	r0, [r3, #12]
 8001680:	6879      	ldr	r1, [r7, #4]
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	693a      	ldr	r2, [r7, #16]
 8001686:	f000 fab5 	bl	8001bf4 <HAL_DMA_Start_IT>
 800168a:	4603      	mov	r3, r0
 800168c:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	2200      	movs	r2, #0
 8001692:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8001694:	7dfb      	ldrb	r3, [r7, #23]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d10c      	bne.n	80016b4 <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	6819      	ldr	r1, [r3, #0]
 80016a0:	68bb      	ldr	r3, [r7, #8]
 80016a2:	f003 0310 	and.w	r3, r3, #16
 80016a6:	2201      	movs	r2, #1
 80016a8:	409a      	lsls	r2, r3
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	430a      	orrs	r2, r1
 80016b0:	601a      	str	r2, [r3, #0]
 80016b2:	e005      	b.n	80016c0 <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	691b      	ldr	r3, [r3, #16]
 80016b8:	f043 0204 	orr.w	r2, r3, #4
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 80016c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	3718      	adds	r7, #24
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	0800196f 	.word	0x0800196f
 80016d0:	08001991 	.word	0x08001991
 80016d4:	080019ad 	.word	0x080019ad
 80016d8:	08001a17 	.word	0x08001a17
 80016dc:	08001a39 	.word	0x08001a39
 80016e0:	08001a55 	.word	0x08001a55

080016e4 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b083      	sub	sp, #12
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 80016ec:	bf00      	nop
 80016ee:	370c      	adds	r7, #12
 80016f0:	46bd      	mov	sp, r7
 80016f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f6:	4770      	bx	lr

080016f8 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b083      	sub	sp, #12
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8001700:	bf00      	nop
 8001702:	370c      	adds	r7, #12
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr

0800170c <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800170c:	b480      	push	{r7}
 800170e:	b083      	sub	sp, #12
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8001714:	bf00      	nop
 8001716:	370c      	adds	r7, #12
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr

08001720 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b088      	sub	sp, #32
 8001724:	af00      	add	r7, sp, #0
 8001726:	60f8      	str	r0, [r7, #12]
 8001728:	60b9      	str	r1, [r7, #8]
 800172a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 800172c:	2300      	movs	r3, #0
 800172e:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	795b      	ldrb	r3, [r3, #5]
 8001734:	2b01      	cmp	r3, #1
 8001736:	d101      	bne.n	800173c <HAL_DAC_ConfigChannel+0x1c>
 8001738:	2302      	movs	r3, #2
 800173a:	e114      	b.n	8001966 <HAL_DAC_ConfigChannel+0x246>
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	2201      	movs	r2, #1
 8001740:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	2202      	movs	r2, #2
 8001746:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8001748:	68bb      	ldr	r3, [r7, #8]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	2b04      	cmp	r3, #4
 800174e:	f040 8081 	bne.w	8001854 <HAL_DAC_ConfigChannel+0x134>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8001752:	f7ff fd97 	bl	8001284 <HAL_GetTick>
 8001756:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d140      	bne.n	80017e0 <HAL_DAC_ConfigChannel+0xc0>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800175e:	e018      	b.n	8001792 <HAL_DAC_ConfigChannel+0x72>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001760:	f7ff fd90 	bl	8001284 <HAL_GetTick>
 8001764:	4602      	mov	r2, r0
 8001766:	69fb      	ldr	r3, [r7, #28]
 8001768:	1ad3      	subs	r3, r2, r3
 800176a:	2b01      	cmp	r3, #1
 800176c:	d911      	bls.n	8001792 <HAL_DAC_ConfigChannel+0x72>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001774:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001778:	2b00      	cmp	r3, #0
 800177a:	d00a      	beq.n	8001792 <HAL_DAC_ConfigChannel+0x72>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	691b      	ldr	r3, [r3, #16]
 8001780:	f043 0208 	orr.w	r2, r3, #8
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	2203      	movs	r2, #3
 800178c:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800178e:	2303      	movs	r3, #3
 8001790:	e0e9      	b.n	8001966 <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001798:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800179c:	2b00      	cmp	r3, #0
 800179e:	d1df      	bne.n	8001760 <HAL_DAC_ConfigChannel+0x40>
          }
        }
      }
      HAL_Delay(1);
 80017a0:	2001      	movs	r0, #1
 80017a2:	f7ff fd7b 	bl	800129c <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	68ba      	ldr	r2, [r7, #8]
 80017ac:	6992      	ldr	r2, [r2, #24]
 80017ae:	641a      	str	r2, [r3, #64]	@ 0x40
 80017b0:	e023      	b.n	80017fa <HAL_DAC_ConfigChannel+0xda>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80017b2:	f7ff fd67 	bl	8001284 <HAL_GetTick>
 80017b6:	4602      	mov	r2, r0
 80017b8:	69fb      	ldr	r3, [r7, #28]
 80017ba:	1ad3      	subs	r3, r2, r3
 80017bc:	2b01      	cmp	r3, #1
 80017be:	d90f      	bls.n	80017e0 <HAL_DAC_ConfigChannel+0xc0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	da0a      	bge.n	80017e0 <HAL_DAC_ConfigChannel+0xc0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	691b      	ldr	r3, [r3, #16]
 80017ce:	f043 0208 	orr.w	r2, r3, #8
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	2203      	movs	r2, #3
 80017da:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80017dc:	2303      	movs	r3, #3
 80017de:	e0c2      	b.n	8001966 <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	dbe3      	blt.n	80017b2 <HAL_DAC_ConfigChannel+0x92>
          }
        }
      }
      HAL_Delay(1U);
 80017ea:	2001      	movs	r0, #1
 80017ec:	f7ff fd56 	bl	800129c <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	68ba      	ldr	r2, [r7, #8]
 80017f6:	6992      	ldr	r2, [r2, #24]
 80017f8:	645a      	str	r2, [r3, #68]	@ 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	f003 0310 	and.w	r3, r3, #16
 8001806:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 800180a:	fa01 f303 	lsl.w	r3, r1, r3
 800180e:	43db      	mvns	r3, r3
 8001810:	ea02 0103 	and.w	r1, r2, r3
 8001814:	68bb      	ldr	r3, [r7, #8]
 8001816:	69da      	ldr	r2, [r3, #28]
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	f003 0310 	and.w	r3, r3, #16
 800181e:	409a      	lsls	r2, r3
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	430a      	orrs	r2, r1
 8001826:	649a      	str	r2, [r3, #72]	@ 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	f003 0310 	and.w	r3, r3, #16
 8001834:	21ff      	movs	r1, #255	@ 0xff
 8001836:	fa01 f303 	lsl.w	r3, r1, r3
 800183a:	43db      	mvns	r3, r3
 800183c:	ea02 0103 	and.w	r1, r2, r3
 8001840:	68bb      	ldr	r3, [r7, #8]
 8001842:	6a1a      	ldr	r2, [r3, #32]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	f003 0310 	and.w	r3, r3, #16
 800184a:	409a      	lsls	r2, r3
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	430a      	orrs	r2, r1
 8001852:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8001854:	68bb      	ldr	r3, [r7, #8]
 8001856:	691b      	ldr	r3, [r3, #16]
 8001858:	2b01      	cmp	r3, #1
 800185a:	d11d      	bne.n	8001898 <HAL_DAC_ConfigChannel+0x178>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001862:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	f003 0310 	and.w	r3, r3, #16
 800186a:	221f      	movs	r2, #31
 800186c:	fa02 f303 	lsl.w	r3, r2, r3
 8001870:	43db      	mvns	r3, r3
 8001872:	69ba      	ldr	r2, [r7, #24]
 8001874:	4013      	ands	r3, r2
 8001876:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8001878:	68bb      	ldr	r3, [r7, #8]
 800187a:	695b      	ldr	r3, [r3, #20]
 800187c:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	f003 0310 	and.w	r3, r3, #16
 8001884:	697a      	ldr	r2, [r7, #20]
 8001886:	fa02 f303 	lsl.w	r3, r2, r3
 800188a:	69ba      	ldr	r2, [r7, #24]
 800188c:	4313      	orrs	r3, r2
 800188e:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	69ba      	ldr	r2, [r7, #24]
 8001896:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800189e:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	f003 0310 	and.w	r3, r3, #16
 80018a6:	2207      	movs	r2, #7
 80018a8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ac:	43db      	mvns	r3, r3
 80018ae:	69ba      	ldr	r2, [r7, #24]
 80018b0:	4013      	ands	r3, r2
 80018b2:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	681a      	ldr	r2, [r3, #0]
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	689b      	ldr	r3, [r3, #8]
 80018bc:	431a      	orrs	r2, r3
 80018be:	68bb      	ldr	r3, [r7, #8]
 80018c0:	68db      	ldr	r3, [r3, #12]
 80018c2:	4313      	orrs	r3, r2
 80018c4:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	f003 0310 	and.w	r3, r3, #16
 80018cc:	697a      	ldr	r2, [r7, #20]
 80018ce:	fa02 f303 	lsl.w	r3, r2, r3
 80018d2:	69ba      	ldr	r2, [r7, #24]
 80018d4:	4313      	orrs	r3, r2
 80018d6:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	69ba      	ldr	r2, [r7, #24]
 80018de:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	6819      	ldr	r1, [r3, #0]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	f003 0310 	and.w	r3, r3, #16
 80018ec:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80018f0:	fa02 f303 	lsl.w	r3, r2, r3
 80018f4:	43da      	mvns	r2, r3
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	400a      	ands	r2, r1
 80018fc:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	f003 0310 	and.w	r3, r3, #16
 800190c:	f640 72fc 	movw	r2, #4092	@ 0xffc
 8001910:	fa02 f303 	lsl.w	r3, r2, r3
 8001914:	43db      	mvns	r3, r3
 8001916:	69ba      	ldr	r2, [r7, #24]
 8001918:	4013      	ands	r3, r2
 800191a:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800191c:	68bb      	ldr	r3, [r7, #8]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	f003 0310 	and.w	r3, r3, #16
 8001928:	697a      	ldr	r2, [r7, #20]
 800192a:	fa02 f303 	lsl.w	r3, r2, r3
 800192e:	69ba      	ldr	r2, [r7, #24]
 8001930:	4313      	orrs	r3, r2
 8001932:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	69ba      	ldr	r2, [r7, #24]
 800193a:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	6819      	ldr	r1, [r3, #0]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	f003 0310 	and.w	r3, r3, #16
 8001948:	22c0      	movs	r2, #192	@ 0xc0
 800194a:	fa02 f303 	lsl.w	r3, r2, r3
 800194e:	43da      	mvns	r2, r3
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	400a      	ands	r2, r1
 8001956:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	2201      	movs	r2, #1
 800195c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	2200      	movs	r2, #0
 8001962:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001964:	2300      	movs	r3, #0
}
 8001966:	4618      	mov	r0, r3
 8001968:	3720      	adds	r7, #32
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}

0800196e <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800196e:	b580      	push	{r7, lr}
 8001970:	b084      	sub	sp, #16
 8001972:	af00      	add	r7, sp, #0
 8001974:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800197a:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 800197c:	68f8      	ldr	r0, [r7, #12]
 800197e:	f7ff feb1 	bl	80016e4 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	2201      	movs	r2, #1
 8001986:	711a      	strb	r2, [r3, #4]
}
 8001988:	bf00      	nop
 800198a:	3710      	adds	r7, #16
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}

08001990 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b084      	sub	sp, #16
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800199c:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 800199e:	68f8      	ldr	r0, [r7, #12]
 80019a0:	f7ff feaa 	bl	80016f8 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80019a4:	bf00      	nop
 80019a6:	3710      	adds	r7, #16
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}

080019ac <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b084      	sub	sp, #16
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019b8:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	691b      	ldr	r3, [r3, #16]
 80019be:	f043 0204 	orr.w	r2, r3, #4
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 80019c6:	68f8      	ldr	r0, [r7, #12]
 80019c8:	f7ff fea0 	bl	800170c <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	2201      	movs	r2, #1
 80019d0:	711a      	strb	r2, [r3, #4]
}
 80019d2:	bf00      	nop
 80019d4:	3710      	adds	r7, #16
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}

080019da <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80019da:	b480      	push	{r7}
 80019dc:	b083      	sub	sp, #12
 80019de:	af00      	add	r7, sp, #0
 80019e0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 80019e2:	bf00      	nop
 80019e4:	370c      	adds	r7, #12
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr

080019ee <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80019ee:	b480      	push	{r7}
 80019f0:	b083      	sub	sp, #12
 80019f2:	af00      	add	r7, sp, #0
 80019f4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 80019f6:	bf00      	nop
 80019f8:	370c      	adds	r7, #12
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr

08001a02 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001a02:	b480      	push	{r7}
 8001a04:	b083      	sub	sp, #12
 8001a06:	af00      	add	r7, sp, #0
 8001a08:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8001a0a:	bf00      	nop
 8001a0c:	370c      	adds	r7, #12
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr

08001a16 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8001a16:	b580      	push	{r7, lr}
 8001a18:	b084      	sub	sp, #16
 8001a1a:	af00      	add	r7, sp, #0
 8001a1c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a22:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8001a24:	68f8      	ldr	r0, [r7, #12]
 8001a26:	f7ff ffd8 	bl	80019da <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	711a      	strb	r2, [r3, #4]
}
 8001a30:	bf00      	nop
 8001a32:	3710      	adds	r7, #16
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}

08001a38 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b084      	sub	sp, #16
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a44:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8001a46:	68f8      	ldr	r0, [r7, #12]
 8001a48:	f7ff ffd1 	bl	80019ee <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8001a4c:	bf00      	nop
 8001a4e:	3710      	adds	r7, #16
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}

08001a54 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b084      	sub	sp, #16
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a60:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	691b      	ldr	r3, [r3, #16]
 8001a66:	f043 0204 	orr.w	r2, r3, #4
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8001a6e:	68f8      	ldr	r0, [r7, #12]
 8001a70:	f7ff ffc7 	bl	8001a02 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	2201      	movs	r2, #1
 8001a78:	711a      	strb	r2, [r3, #4]
}
 8001a7a:	bf00      	nop
 8001a7c:	3710      	adds	r7, #16
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
	...

08001a84 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b085      	sub	sp, #20
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d101      	bne.n	8001a96 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
 8001a94:	e098      	b.n	8001bc8 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	461a      	mov	r2, r3
 8001a9c:	4b4d      	ldr	r3, [pc, #308]	@ (8001bd4 <HAL_DMA_Init+0x150>)
 8001a9e:	429a      	cmp	r2, r3
 8001aa0:	d80f      	bhi.n	8001ac2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	461a      	mov	r2, r3
 8001aa8:	4b4b      	ldr	r3, [pc, #300]	@ (8001bd8 <HAL_DMA_Init+0x154>)
 8001aaa:	4413      	add	r3, r2
 8001aac:	4a4b      	ldr	r2, [pc, #300]	@ (8001bdc <HAL_DMA_Init+0x158>)
 8001aae:	fba2 2303 	umull	r2, r3, r2, r3
 8001ab2:	091b      	lsrs	r3, r3, #4
 8001ab4:	009a      	lsls	r2, r3, #2
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	4a48      	ldr	r2, [pc, #288]	@ (8001be0 <HAL_DMA_Init+0x15c>)
 8001abe:	641a      	str	r2, [r3, #64]	@ 0x40
 8001ac0:	e00e      	b.n	8001ae0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	461a      	mov	r2, r3
 8001ac8:	4b46      	ldr	r3, [pc, #280]	@ (8001be4 <HAL_DMA_Init+0x160>)
 8001aca:	4413      	add	r3, r2
 8001acc:	4a43      	ldr	r2, [pc, #268]	@ (8001bdc <HAL_DMA_Init+0x158>)
 8001ace:	fba2 2303 	umull	r2, r3, r2, r3
 8001ad2:	091b      	lsrs	r3, r3, #4
 8001ad4:	009a      	lsls	r2, r3, #2
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	4a42      	ldr	r2, [pc, #264]	@ (8001be8 <HAL_DMA_Init+0x164>)
 8001ade:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2202      	movs	r2, #2
 8001ae4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8001af6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001afa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001b04:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	691b      	ldr	r3, [r3, #16]
 8001b0a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b10:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	699b      	ldr	r3, [r3, #24]
 8001b16:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b1c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6a1b      	ldr	r3, [r3, #32]
 8001b22:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001b24:	68fa      	ldr	r2, [r7, #12]
 8001b26:	4313      	orrs	r3, r2
 8001b28:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	68fa      	ldr	r2, [r7, #12]
 8001b30:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	689b      	ldr	r3, [r3, #8]
 8001b36:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001b3a:	d039      	beq.n	8001bb0 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b40:	4a27      	ldr	r2, [pc, #156]	@ (8001be0 <HAL_DMA_Init+0x15c>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d11a      	bne.n	8001b7c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001b46:	4b29      	ldr	r3, [pc, #164]	@ (8001bec <HAL_DMA_Init+0x168>)
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b4e:	f003 031c 	and.w	r3, r3, #28
 8001b52:	210f      	movs	r1, #15
 8001b54:	fa01 f303 	lsl.w	r3, r1, r3
 8001b58:	43db      	mvns	r3, r3
 8001b5a:	4924      	ldr	r1, [pc, #144]	@ (8001bec <HAL_DMA_Init+0x168>)
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001b60:	4b22      	ldr	r3, [pc, #136]	@ (8001bec <HAL_DMA_Init+0x168>)
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6859      	ldr	r1, [r3, #4]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b6c:	f003 031c 	and.w	r3, r3, #28
 8001b70:	fa01 f303 	lsl.w	r3, r1, r3
 8001b74:	491d      	ldr	r1, [pc, #116]	@ (8001bec <HAL_DMA_Init+0x168>)
 8001b76:	4313      	orrs	r3, r2
 8001b78:	600b      	str	r3, [r1, #0]
 8001b7a:	e019      	b.n	8001bb0 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001b7c:	4b1c      	ldr	r3, [pc, #112]	@ (8001bf0 <HAL_DMA_Init+0x16c>)
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b84:	f003 031c 	and.w	r3, r3, #28
 8001b88:	210f      	movs	r1, #15
 8001b8a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b8e:	43db      	mvns	r3, r3
 8001b90:	4917      	ldr	r1, [pc, #92]	@ (8001bf0 <HAL_DMA_Init+0x16c>)
 8001b92:	4013      	ands	r3, r2
 8001b94:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001b96:	4b16      	ldr	r3, [pc, #88]	@ (8001bf0 <HAL_DMA_Init+0x16c>)
 8001b98:	681a      	ldr	r2, [r3, #0]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6859      	ldr	r1, [r3, #4]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ba2:	f003 031c 	and.w	r3, r3, #28
 8001ba6:	fa01 f303 	lsl.w	r3, r1, r3
 8001baa:	4911      	ldr	r1, [pc, #68]	@ (8001bf0 <HAL_DMA_Init+0x16c>)
 8001bac:	4313      	orrs	r3, r2
 8001bae:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2201      	movs	r2, #1
 8001bba:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8001bc6:	2300      	movs	r3, #0
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	3714      	adds	r7, #20
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd2:	4770      	bx	lr
 8001bd4:	40020407 	.word	0x40020407
 8001bd8:	bffdfff8 	.word	0xbffdfff8
 8001bdc:	cccccccd 	.word	0xcccccccd
 8001be0:	40020000 	.word	0x40020000
 8001be4:	bffdfbf8 	.word	0xbffdfbf8
 8001be8:	40020400 	.word	0x40020400
 8001bec:	400200a8 	.word	0x400200a8
 8001bf0:	400204a8 	.word	0x400204a8

08001bf4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b086      	sub	sp, #24
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	60f8      	str	r0, [r7, #12]
 8001bfc:	60b9      	str	r1, [r7, #8]
 8001bfe:	607a      	str	r2, [r7, #4]
 8001c00:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001c02:	2300      	movs	r3, #0
 8001c04:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001c0c:	2b01      	cmp	r3, #1
 8001c0e:	d101      	bne.n	8001c14 <HAL_DMA_Start_IT+0x20>
 8001c10:	2302      	movs	r3, #2
 8001c12:	e04b      	b.n	8001cac <HAL_DMA_Start_IT+0xb8>
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	2201      	movs	r2, #1
 8001c18:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001c22:	b2db      	uxtb	r3, r3
 8001c24:	2b01      	cmp	r3, #1
 8001c26:	d13a      	bne.n	8001c9e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	2202      	movs	r2, #2
 8001c2c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	2200      	movs	r2, #0
 8001c34:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f022 0201 	bic.w	r2, r2, #1
 8001c44:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	687a      	ldr	r2, [r7, #4]
 8001c4a:	68b9      	ldr	r1, [r7, #8]
 8001c4c:	68f8      	ldr	r0, [r7, #12]
 8001c4e:	f000 f8e0 	bl	8001e12 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d008      	beq.n	8001c6c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f042 020e 	orr.w	r2, r2, #14
 8001c68:	601a      	str	r2, [r3, #0]
 8001c6a:	e00f      	b.n	8001c8c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f022 0204 	bic.w	r2, r2, #4
 8001c7a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	681a      	ldr	r2, [r3, #0]
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f042 020a 	orr.w	r2, r2, #10
 8001c8a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	681a      	ldr	r2, [r3, #0]
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f042 0201 	orr.w	r2, r2, #1
 8001c9a:	601a      	str	r2, [r3, #0]
 8001c9c:	e005      	b.n	8001caa <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001ca6:	2302      	movs	r3, #2
 8001ca8:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001caa:	7dfb      	ldrb	r3, [r7, #23]
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	3718      	adds	r7, #24
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}

08001cb4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b084      	sub	sp, #16
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cd0:	f003 031c 	and.w	r3, r3, #28
 8001cd4:	2204      	movs	r2, #4
 8001cd6:	409a      	lsls	r2, r3
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	4013      	ands	r3, r2
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d026      	beq.n	8001d2e <HAL_DMA_IRQHandler+0x7a>
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	f003 0304 	and.w	r3, r3, #4
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d021      	beq.n	8001d2e <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f003 0320 	and.w	r3, r3, #32
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d107      	bne.n	8001d08 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	681a      	ldr	r2, [r3, #0]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f022 0204 	bic.w	r2, r2, #4
 8001d06:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d0c:	f003 021c 	and.w	r2, r3, #28
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d14:	2104      	movs	r1, #4
 8001d16:	fa01 f202 	lsl.w	r2, r1, r2
 8001d1a:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d071      	beq.n	8001e08 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d28:	6878      	ldr	r0, [r7, #4]
 8001d2a:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001d2c:	e06c      	b.n	8001e08 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d32:	f003 031c 	and.w	r3, r3, #28
 8001d36:	2202      	movs	r2, #2
 8001d38:	409a      	lsls	r2, r3
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d02e      	beq.n	8001da0 <HAL_DMA_IRQHandler+0xec>
 8001d42:	68bb      	ldr	r3, [r7, #8]
 8001d44:	f003 0302 	and.w	r3, r3, #2
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d029      	beq.n	8001da0 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f003 0320 	and.w	r3, r3, #32
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d10b      	bne.n	8001d72 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f022 020a 	bic.w	r2, r2, #10
 8001d68:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d76:	f003 021c 	and.w	r2, r3, #28
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d7e:	2102      	movs	r1, #2
 8001d80:	fa01 f202 	lsl.w	r2, r1, r2
 8001d84:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d038      	beq.n	8001e08 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d9a:	6878      	ldr	r0, [r7, #4]
 8001d9c:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001d9e:	e033      	b.n	8001e08 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001da4:	f003 031c 	and.w	r3, r3, #28
 8001da8:	2208      	movs	r2, #8
 8001daa:	409a      	lsls	r2, r3
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	4013      	ands	r3, r2
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d02a      	beq.n	8001e0a <HAL_DMA_IRQHandler+0x156>
 8001db4:	68bb      	ldr	r3, [r7, #8]
 8001db6:	f003 0308 	and.w	r3, r3, #8
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d025      	beq.n	8001e0a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f022 020e 	bic.w	r2, r2, #14
 8001dcc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dd2:	f003 021c 	and.w	r2, r3, #28
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dda:	2101      	movs	r1, #1
 8001ddc:	fa01 f202 	lsl.w	r2, r1, r2
 8001de0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2201      	movs	r2, #1
 8001de6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2201      	movs	r2, #1
 8001dec:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2200      	movs	r2, #0
 8001df4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d004      	beq.n	8001e0a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e04:	6878      	ldr	r0, [r7, #4]
 8001e06:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001e08:	bf00      	nop
 8001e0a:	bf00      	nop
}
 8001e0c:	3710      	adds	r7, #16
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}

08001e12 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e12:	b480      	push	{r7}
 8001e14:	b085      	sub	sp, #20
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	60f8      	str	r0, [r7, #12]
 8001e1a:	60b9      	str	r1, [r7, #8]
 8001e1c:	607a      	str	r2, [r7, #4]
 8001e1e:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e24:	f003 021c 	and.w	r2, r3, #28
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e2c:	2101      	movs	r1, #1
 8001e2e:	fa01 f202 	lsl.w	r2, r1, r2
 8001e32:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	683a      	ldr	r2, [r7, #0]
 8001e3a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	2b10      	cmp	r3, #16
 8001e42:	d108      	bne.n	8001e56 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	687a      	ldr	r2, [r7, #4]
 8001e4a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	68ba      	ldr	r2, [r7, #8]
 8001e52:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001e54:	e007      	b.n	8001e66 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	68ba      	ldr	r2, [r7, #8]
 8001e5c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	687a      	ldr	r2, [r7, #4]
 8001e64:	60da      	str	r2, [r3, #12]
}
 8001e66:	bf00      	nop
 8001e68:	3714      	adds	r7, #20
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr
	...

08001e74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b087      	sub	sp, #28
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
 8001e7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e82:	e17f      	b.n	8002184 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	681a      	ldr	r2, [r3, #0]
 8001e88:	2101      	movs	r1, #1
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e90:	4013      	ands	r3, r2
 8001e92:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	f000 8171 	beq.w	800217e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	f003 0303 	and.w	r3, r3, #3
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d005      	beq.n	8001eb4 <HAL_GPIO_Init+0x40>
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	f003 0303 	and.w	r3, r3, #3
 8001eb0:	2b02      	cmp	r3, #2
 8001eb2:	d130      	bne.n	8001f16 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	005b      	lsls	r3, r3, #1
 8001ebe:	2203      	movs	r2, #3
 8001ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec4:	43db      	mvns	r3, r3
 8001ec6:	693a      	ldr	r2, [r7, #16]
 8001ec8:	4013      	ands	r3, r2
 8001eca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	68da      	ldr	r2, [r3, #12]
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	005b      	lsls	r3, r3, #1
 8001ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed8:	693a      	ldr	r2, [r7, #16]
 8001eda:	4313      	orrs	r3, r2
 8001edc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	693a      	ldr	r2, [r7, #16]
 8001ee2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001eea:	2201      	movs	r2, #1
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef2:	43db      	mvns	r3, r3
 8001ef4:	693a      	ldr	r2, [r7, #16]
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	091b      	lsrs	r3, r3, #4
 8001f00:	f003 0201 	and.w	r2, r3, #1
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0a:	693a      	ldr	r2, [r7, #16]
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	693a      	ldr	r2, [r7, #16]
 8001f14:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	f003 0303 	and.w	r3, r3, #3
 8001f1e:	2b03      	cmp	r3, #3
 8001f20:	d118      	bne.n	8001f54 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f26:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001f28:	2201      	movs	r2, #1
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f30:	43db      	mvns	r3, r3
 8001f32:	693a      	ldr	r2, [r7, #16]
 8001f34:	4013      	ands	r3, r2
 8001f36:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	08db      	lsrs	r3, r3, #3
 8001f3e:	f003 0201 	and.w	r2, r3, #1
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	fa02 f303 	lsl.w	r3, r2, r3
 8001f48:	693a      	ldr	r2, [r7, #16]
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	693a      	ldr	r2, [r7, #16]
 8001f52:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	f003 0303 	and.w	r3, r3, #3
 8001f5c:	2b03      	cmp	r3, #3
 8001f5e:	d017      	beq.n	8001f90 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	68db      	ldr	r3, [r3, #12]
 8001f64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	005b      	lsls	r3, r3, #1
 8001f6a:	2203      	movs	r2, #3
 8001f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f70:	43db      	mvns	r3, r3
 8001f72:	693a      	ldr	r2, [r7, #16]
 8001f74:	4013      	ands	r3, r2
 8001f76:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	689a      	ldr	r2, [r3, #8]
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	005b      	lsls	r3, r3, #1
 8001f80:	fa02 f303 	lsl.w	r3, r2, r3
 8001f84:	693a      	ldr	r2, [r7, #16]
 8001f86:	4313      	orrs	r3, r2
 8001f88:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	693a      	ldr	r2, [r7, #16]
 8001f8e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	f003 0303 	and.w	r3, r3, #3
 8001f98:	2b02      	cmp	r3, #2
 8001f9a:	d123      	bne.n	8001fe4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	08da      	lsrs	r2, r3, #3
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	3208      	adds	r2, #8
 8001fa4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fa8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001faa:	697b      	ldr	r3, [r7, #20]
 8001fac:	f003 0307 	and.w	r3, r3, #7
 8001fb0:	009b      	lsls	r3, r3, #2
 8001fb2:	220f      	movs	r2, #15
 8001fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb8:	43db      	mvns	r3, r3
 8001fba:	693a      	ldr	r2, [r7, #16]
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	691a      	ldr	r2, [r3, #16]
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	f003 0307 	and.w	r3, r3, #7
 8001fca:	009b      	lsls	r3, r3, #2
 8001fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd0:	693a      	ldr	r2, [r7, #16]
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	08da      	lsrs	r2, r3, #3
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	3208      	adds	r2, #8
 8001fde:	6939      	ldr	r1, [r7, #16]
 8001fe0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	005b      	lsls	r3, r3, #1
 8001fee:	2203      	movs	r2, #3
 8001ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff4:	43db      	mvns	r3, r3
 8001ff6:	693a      	ldr	r2, [r7, #16]
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	f003 0203 	and.w	r2, r3, #3
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	005b      	lsls	r3, r3, #1
 8002008:	fa02 f303 	lsl.w	r3, r2, r3
 800200c:	693a      	ldr	r2, [r7, #16]
 800200e:	4313      	orrs	r3, r2
 8002010:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	693a      	ldr	r2, [r7, #16]
 8002016:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002020:	2b00      	cmp	r3, #0
 8002022:	f000 80ac 	beq.w	800217e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002026:	4b5f      	ldr	r3, [pc, #380]	@ (80021a4 <HAL_GPIO_Init+0x330>)
 8002028:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800202a:	4a5e      	ldr	r2, [pc, #376]	@ (80021a4 <HAL_GPIO_Init+0x330>)
 800202c:	f043 0301 	orr.w	r3, r3, #1
 8002030:	6613      	str	r3, [r2, #96]	@ 0x60
 8002032:	4b5c      	ldr	r3, [pc, #368]	@ (80021a4 <HAL_GPIO_Init+0x330>)
 8002034:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002036:	f003 0301 	and.w	r3, r3, #1
 800203a:	60bb      	str	r3, [r7, #8]
 800203c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800203e:	4a5a      	ldr	r2, [pc, #360]	@ (80021a8 <HAL_GPIO_Init+0x334>)
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	089b      	lsrs	r3, r3, #2
 8002044:	3302      	adds	r3, #2
 8002046:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800204a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	f003 0303 	and.w	r3, r3, #3
 8002052:	009b      	lsls	r3, r3, #2
 8002054:	220f      	movs	r2, #15
 8002056:	fa02 f303 	lsl.w	r3, r2, r3
 800205a:	43db      	mvns	r3, r3
 800205c:	693a      	ldr	r2, [r7, #16]
 800205e:	4013      	ands	r3, r2
 8002060:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002068:	d025      	beq.n	80020b6 <HAL_GPIO_Init+0x242>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	4a4f      	ldr	r2, [pc, #316]	@ (80021ac <HAL_GPIO_Init+0x338>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d01f      	beq.n	80020b2 <HAL_GPIO_Init+0x23e>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	4a4e      	ldr	r2, [pc, #312]	@ (80021b0 <HAL_GPIO_Init+0x33c>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d019      	beq.n	80020ae <HAL_GPIO_Init+0x23a>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	4a4d      	ldr	r2, [pc, #308]	@ (80021b4 <HAL_GPIO_Init+0x340>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d013      	beq.n	80020aa <HAL_GPIO_Init+0x236>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	4a4c      	ldr	r2, [pc, #304]	@ (80021b8 <HAL_GPIO_Init+0x344>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d00d      	beq.n	80020a6 <HAL_GPIO_Init+0x232>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	4a4b      	ldr	r2, [pc, #300]	@ (80021bc <HAL_GPIO_Init+0x348>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d007      	beq.n	80020a2 <HAL_GPIO_Init+0x22e>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	4a4a      	ldr	r2, [pc, #296]	@ (80021c0 <HAL_GPIO_Init+0x34c>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d101      	bne.n	800209e <HAL_GPIO_Init+0x22a>
 800209a:	2306      	movs	r3, #6
 800209c:	e00c      	b.n	80020b8 <HAL_GPIO_Init+0x244>
 800209e:	2307      	movs	r3, #7
 80020a0:	e00a      	b.n	80020b8 <HAL_GPIO_Init+0x244>
 80020a2:	2305      	movs	r3, #5
 80020a4:	e008      	b.n	80020b8 <HAL_GPIO_Init+0x244>
 80020a6:	2304      	movs	r3, #4
 80020a8:	e006      	b.n	80020b8 <HAL_GPIO_Init+0x244>
 80020aa:	2303      	movs	r3, #3
 80020ac:	e004      	b.n	80020b8 <HAL_GPIO_Init+0x244>
 80020ae:	2302      	movs	r3, #2
 80020b0:	e002      	b.n	80020b8 <HAL_GPIO_Init+0x244>
 80020b2:	2301      	movs	r3, #1
 80020b4:	e000      	b.n	80020b8 <HAL_GPIO_Init+0x244>
 80020b6:	2300      	movs	r3, #0
 80020b8:	697a      	ldr	r2, [r7, #20]
 80020ba:	f002 0203 	and.w	r2, r2, #3
 80020be:	0092      	lsls	r2, r2, #2
 80020c0:	4093      	lsls	r3, r2
 80020c2:	693a      	ldr	r2, [r7, #16]
 80020c4:	4313      	orrs	r3, r2
 80020c6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80020c8:	4937      	ldr	r1, [pc, #220]	@ (80021a8 <HAL_GPIO_Init+0x334>)
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	089b      	lsrs	r3, r3, #2
 80020ce:	3302      	adds	r3, #2
 80020d0:	693a      	ldr	r2, [r7, #16]
 80020d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80020d6:	4b3b      	ldr	r3, [pc, #236]	@ (80021c4 <HAL_GPIO_Init+0x350>)
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	43db      	mvns	r3, r3
 80020e0:	693a      	ldr	r2, [r7, #16]
 80020e2:	4013      	ands	r3, r2
 80020e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d003      	beq.n	80020fa <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80020f2:	693a      	ldr	r2, [r7, #16]
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	4313      	orrs	r3, r2
 80020f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80020fa:	4a32      	ldr	r2, [pc, #200]	@ (80021c4 <HAL_GPIO_Init+0x350>)
 80020fc:	693b      	ldr	r3, [r7, #16]
 80020fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002100:	4b30      	ldr	r3, [pc, #192]	@ (80021c4 <HAL_GPIO_Init+0x350>)
 8002102:	68db      	ldr	r3, [r3, #12]
 8002104:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	43db      	mvns	r3, r3
 800210a:	693a      	ldr	r2, [r7, #16]
 800210c:	4013      	ands	r3, r2
 800210e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002118:	2b00      	cmp	r3, #0
 800211a:	d003      	beq.n	8002124 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800211c:	693a      	ldr	r2, [r7, #16]
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	4313      	orrs	r3, r2
 8002122:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002124:	4a27      	ldr	r2, [pc, #156]	@ (80021c4 <HAL_GPIO_Init+0x350>)
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800212a:	4b26      	ldr	r3, [pc, #152]	@ (80021c4 <HAL_GPIO_Init+0x350>)
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	43db      	mvns	r3, r3
 8002134:	693a      	ldr	r2, [r7, #16]
 8002136:	4013      	ands	r3, r2
 8002138:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002142:	2b00      	cmp	r3, #0
 8002144:	d003      	beq.n	800214e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002146:	693a      	ldr	r2, [r7, #16]
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	4313      	orrs	r3, r2
 800214c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800214e:	4a1d      	ldr	r2, [pc, #116]	@ (80021c4 <HAL_GPIO_Init+0x350>)
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002154:	4b1b      	ldr	r3, [pc, #108]	@ (80021c4 <HAL_GPIO_Init+0x350>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	43db      	mvns	r3, r3
 800215e:	693a      	ldr	r2, [r7, #16]
 8002160:	4013      	ands	r3, r2
 8002162:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800216c:	2b00      	cmp	r3, #0
 800216e:	d003      	beq.n	8002178 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002170:	693a      	ldr	r2, [r7, #16]
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	4313      	orrs	r3, r2
 8002176:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002178:	4a12      	ldr	r2, [pc, #72]	@ (80021c4 <HAL_GPIO_Init+0x350>)
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	3301      	adds	r3, #1
 8002182:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	681a      	ldr	r2, [r3, #0]
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	fa22 f303 	lsr.w	r3, r2, r3
 800218e:	2b00      	cmp	r3, #0
 8002190:	f47f ae78 	bne.w	8001e84 <HAL_GPIO_Init+0x10>
  }
}
 8002194:	bf00      	nop
 8002196:	bf00      	nop
 8002198:	371c      	adds	r7, #28
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr
 80021a2:	bf00      	nop
 80021a4:	40021000 	.word	0x40021000
 80021a8:	40010000 	.word	0x40010000
 80021ac:	48000400 	.word	0x48000400
 80021b0:	48000800 	.word	0x48000800
 80021b4:	48000c00 	.word	0x48000c00
 80021b8:	48001000 	.word	0x48001000
 80021bc:	48001400 	.word	0x48001400
 80021c0:	48001800 	.word	0x48001800
 80021c4:	40010400 	.word	0x40010400

080021c8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80021c8:	b480      	push	{r7}
 80021ca:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80021cc:	4b04      	ldr	r3, [pc, #16]	@ (80021e0 <HAL_PWREx_GetVoltageRange+0x18>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr
 80021de:	bf00      	nop
 80021e0:	40007000 	.word	0x40007000

080021e4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b085      	sub	sp, #20
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80021f2:	d130      	bne.n	8002256 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80021f4:	4b23      	ldr	r3, [pc, #140]	@ (8002284 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80021fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002200:	d038      	beq.n	8002274 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002202:	4b20      	ldr	r3, [pc, #128]	@ (8002284 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800220a:	4a1e      	ldr	r2, [pc, #120]	@ (8002284 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800220c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002210:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002212:	4b1d      	ldr	r3, [pc, #116]	@ (8002288 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	2232      	movs	r2, #50	@ 0x32
 8002218:	fb02 f303 	mul.w	r3, r2, r3
 800221c:	4a1b      	ldr	r2, [pc, #108]	@ (800228c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800221e:	fba2 2303 	umull	r2, r3, r2, r3
 8002222:	0c9b      	lsrs	r3, r3, #18
 8002224:	3301      	adds	r3, #1
 8002226:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002228:	e002      	b.n	8002230 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	3b01      	subs	r3, #1
 800222e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002230:	4b14      	ldr	r3, [pc, #80]	@ (8002284 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002232:	695b      	ldr	r3, [r3, #20]
 8002234:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002238:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800223c:	d102      	bne.n	8002244 <HAL_PWREx_ControlVoltageScaling+0x60>
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d1f2      	bne.n	800222a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002244:	4b0f      	ldr	r3, [pc, #60]	@ (8002284 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002246:	695b      	ldr	r3, [r3, #20]
 8002248:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800224c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002250:	d110      	bne.n	8002274 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002252:	2303      	movs	r3, #3
 8002254:	e00f      	b.n	8002276 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002256:	4b0b      	ldr	r3, [pc, #44]	@ (8002284 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800225e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002262:	d007      	beq.n	8002274 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002264:	4b07      	ldr	r3, [pc, #28]	@ (8002284 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800226c:	4a05      	ldr	r2, [pc, #20]	@ (8002284 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800226e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002272:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002274:	2300      	movs	r3, #0
}
 8002276:	4618      	mov	r0, r3
 8002278:	3714      	adds	r7, #20
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr
 8002282:	bf00      	nop
 8002284:	40007000 	.word	0x40007000
 8002288:	20000000 	.word	0x20000000
 800228c:	431bde83 	.word	0x431bde83

08002290 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b088      	sub	sp, #32
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d101      	bne.n	80022a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	e3ca      	b.n	8002a38 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022a2:	4b97      	ldr	r3, [pc, #604]	@ (8002500 <HAL_RCC_OscConfig+0x270>)
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	f003 030c 	and.w	r3, r3, #12
 80022aa:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80022ac:	4b94      	ldr	r3, [pc, #592]	@ (8002500 <HAL_RCC_OscConfig+0x270>)
 80022ae:	68db      	ldr	r3, [r3, #12]
 80022b0:	f003 0303 	and.w	r3, r3, #3
 80022b4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 0310 	and.w	r3, r3, #16
 80022be:	2b00      	cmp	r3, #0
 80022c0:	f000 80e4 	beq.w	800248c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80022c4:	69bb      	ldr	r3, [r7, #24]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d007      	beq.n	80022da <HAL_RCC_OscConfig+0x4a>
 80022ca:	69bb      	ldr	r3, [r7, #24]
 80022cc:	2b0c      	cmp	r3, #12
 80022ce:	f040 808b 	bne.w	80023e8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	f040 8087 	bne.w	80023e8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80022da:	4b89      	ldr	r3, [pc, #548]	@ (8002500 <HAL_RCC_OscConfig+0x270>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 0302 	and.w	r3, r3, #2
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d005      	beq.n	80022f2 <HAL_RCC_OscConfig+0x62>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	699b      	ldr	r3, [r3, #24]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d101      	bne.n	80022f2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	e3a2      	b.n	8002a38 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6a1a      	ldr	r2, [r3, #32]
 80022f6:	4b82      	ldr	r3, [pc, #520]	@ (8002500 <HAL_RCC_OscConfig+0x270>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f003 0308 	and.w	r3, r3, #8
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d004      	beq.n	800230c <HAL_RCC_OscConfig+0x7c>
 8002302:	4b7f      	ldr	r3, [pc, #508]	@ (8002500 <HAL_RCC_OscConfig+0x270>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800230a:	e005      	b.n	8002318 <HAL_RCC_OscConfig+0x88>
 800230c:	4b7c      	ldr	r3, [pc, #496]	@ (8002500 <HAL_RCC_OscConfig+0x270>)
 800230e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002312:	091b      	lsrs	r3, r3, #4
 8002314:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002318:	4293      	cmp	r3, r2
 800231a:	d223      	bcs.n	8002364 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6a1b      	ldr	r3, [r3, #32]
 8002320:	4618      	mov	r0, r3
 8002322:	f000 fd55 	bl	8002dd0 <RCC_SetFlashLatencyFromMSIRange>
 8002326:	4603      	mov	r3, r0
 8002328:	2b00      	cmp	r3, #0
 800232a:	d001      	beq.n	8002330 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800232c:	2301      	movs	r3, #1
 800232e:	e383      	b.n	8002a38 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002330:	4b73      	ldr	r3, [pc, #460]	@ (8002500 <HAL_RCC_OscConfig+0x270>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a72      	ldr	r2, [pc, #456]	@ (8002500 <HAL_RCC_OscConfig+0x270>)
 8002336:	f043 0308 	orr.w	r3, r3, #8
 800233a:	6013      	str	r3, [r2, #0]
 800233c:	4b70      	ldr	r3, [pc, #448]	@ (8002500 <HAL_RCC_OscConfig+0x270>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6a1b      	ldr	r3, [r3, #32]
 8002348:	496d      	ldr	r1, [pc, #436]	@ (8002500 <HAL_RCC_OscConfig+0x270>)
 800234a:	4313      	orrs	r3, r2
 800234c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800234e:	4b6c      	ldr	r3, [pc, #432]	@ (8002500 <HAL_RCC_OscConfig+0x270>)
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	69db      	ldr	r3, [r3, #28]
 800235a:	021b      	lsls	r3, r3, #8
 800235c:	4968      	ldr	r1, [pc, #416]	@ (8002500 <HAL_RCC_OscConfig+0x270>)
 800235e:	4313      	orrs	r3, r2
 8002360:	604b      	str	r3, [r1, #4]
 8002362:	e025      	b.n	80023b0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002364:	4b66      	ldr	r3, [pc, #408]	@ (8002500 <HAL_RCC_OscConfig+0x270>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a65      	ldr	r2, [pc, #404]	@ (8002500 <HAL_RCC_OscConfig+0x270>)
 800236a:	f043 0308 	orr.w	r3, r3, #8
 800236e:	6013      	str	r3, [r2, #0]
 8002370:	4b63      	ldr	r3, [pc, #396]	@ (8002500 <HAL_RCC_OscConfig+0x270>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6a1b      	ldr	r3, [r3, #32]
 800237c:	4960      	ldr	r1, [pc, #384]	@ (8002500 <HAL_RCC_OscConfig+0x270>)
 800237e:	4313      	orrs	r3, r2
 8002380:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002382:	4b5f      	ldr	r3, [pc, #380]	@ (8002500 <HAL_RCC_OscConfig+0x270>)
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	69db      	ldr	r3, [r3, #28]
 800238e:	021b      	lsls	r3, r3, #8
 8002390:	495b      	ldr	r1, [pc, #364]	@ (8002500 <HAL_RCC_OscConfig+0x270>)
 8002392:	4313      	orrs	r3, r2
 8002394:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002396:	69bb      	ldr	r3, [r7, #24]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d109      	bne.n	80023b0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6a1b      	ldr	r3, [r3, #32]
 80023a0:	4618      	mov	r0, r3
 80023a2:	f000 fd15 	bl	8002dd0 <RCC_SetFlashLatencyFromMSIRange>
 80023a6:	4603      	mov	r3, r0
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d001      	beq.n	80023b0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80023ac:	2301      	movs	r3, #1
 80023ae:	e343      	b.n	8002a38 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80023b0:	f000 fc4a 	bl	8002c48 <HAL_RCC_GetSysClockFreq>
 80023b4:	4602      	mov	r2, r0
 80023b6:	4b52      	ldr	r3, [pc, #328]	@ (8002500 <HAL_RCC_OscConfig+0x270>)
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	091b      	lsrs	r3, r3, #4
 80023bc:	f003 030f 	and.w	r3, r3, #15
 80023c0:	4950      	ldr	r1, [pc, #320]	@ (8002504 <HAL_RCC_OscConfig+0x274>)
 80023c2:	5ccb      	ldrb	r3, [r1, r3]
 80023c4:	f003 031f 	and.w	r3, r3, #31
 80023c8:	fa22 f303 	lsr.w	r3, r2, r3
 80023cc:	4a4e      	ldr	r2, [pc, #312]	@ (8002508 <HAL_RCC_OscConfig+0x278>)
 80023ce:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80023d0:	4b4e      	ldr	r3, [pc, #312]	@ (800250c <HAL_RCC_OscConfig+0x27c>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4618      	mov	r0, r3
 80023d6:	f7fe ff05 	bl	80011e4 <HAL_InitTick>
 80023da:	4603      	mov	r3, r0
 80023dc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80023de:	7bfb      	ldrb	r3, [r7, #15]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d052      	beq.n	800248a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80023e4:	7bfb      	ldrb	r3, [r7, #15]
 80023e6:	e327      	b.n	8002a38 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	699b      	ldr	r3, [r3, #24]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d032      	beq.n	8002456 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80023f0:	4b43      	ldr	r3, [pc, #268]	@ (8002500 <HAL_RCC_OscConfig+0x270>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a42      	ldr	r2, [pc, #264]	@ (8002500 <HAL_RCC_OscConfig+0x270>)
 80023f6:	f043 0301 	orr.w	r3, r3, #1
 80023fa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80023fc:	f7fe ff42 	bl	8001284 <HAL_GetTick>
 8002400:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002402:	e008      	b.n	8002416 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002404:	f7fe ff3e 	bl	8001284 <HAL_GetTick>
 8002408:	4602      	mov	r2, r0
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	1ad3      	subs	r3, r2, r3
 800240e:	2b02      	cmp	r3, #2
 8002410:	d901      	bls.n	8002416 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002412:	2303      	movs	r3, #3
 8002414:	e310      	b.n	8002a38 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002416:	4b3a      	ldr	r3, [pc, #232]	@ (8002500 <HAL_RCC_OscConfig+0x270>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f003 0302 	and.w	r3, r3, #2
 800241e:	2b00      	cmp	r3, #0
 8002420:	d0f0      	beq.n	8002404 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002422:	4b37      	ldr	r3, [pc, #220]	@ (8002500 <HAL_RCC_OscConfig+0x270>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a36      	ldr	r2, [pc, #216]	@ (8002500 <HAL_RCC_OscConfig+0x270>)
 8002428:	f043 0308 	orr.w	r3, r3, #8
 800242c:	6013      	str	r3, [r2, #0]
 800242e:	4b34      	ldr	r3, [pc, #208]	@ (8002500 <HAL_RCC_OscConfig+0x270>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6a1b      	ldr	r3, [r3, #32]
 800243a:	4931      	ldr	r1, [pc, #196]	@ (8002500 <HAL_RCC_OscConfig+0x270>)
 800243c:	4313      	orrs	r3, r2
 800243e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002440:	4b2f      	ldr	r3, [pc, #188]	@ (8002500 <HAL_RCC_OscConfig+0x270>)
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	69db      	ldr	r3, [r3, #28]
 800244c:	021b      	lsls	r3, r3, #8
 800244e:	492c      	ldr	r1, [pc, #176]	@ (8002500 <HAL_RCC_OscConfig+0x270>)
 8002450:	4313      	orrs	r3, r2
 8002452:	604b      	str	r3, [r1, #4]
 8002454:	e01a      	b.n	800248c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002456:	4b2a      	ldr	r3, [pc, #168]	@ (8002500 <HAL_RCC_OscConfig+0x270>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a29      	ldr	r2, [pc, #164]	@ (8002500 <HAL_RCC_OscConfig+0x270>)
 800245c:	f023 0301 	bic.w	r3, r3, #1
 8002460:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002462:	f7fe ff0f 	bl	8001284 <HAL_GetTick>
 8002466:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002468:	e008      	b.n	800247c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800246a:	f7fe ff0b 	bl	8001284 <HAL_GetTick>
 800246e:	4602      	mov	r2, r0
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	1ad3      	subs	r3, r2, r3
 8002474:	2b02      	cmp	r3, #2
 8002476:	d901      	bls.n	800247c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002478:	2303      	movs	r3, #3
 800247a:	e2dd      	b.n	8002a38 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800247c:	4b20      	ldr	r3, [pc, #128]	@ (8002500 <HAL_RCC_OscConfig+0x270>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 0302 	and.w	r3, r3, #2
 8002484:	2b00      	cmp	r3, #0
 8002486:	d1f0      	bne.n	800246a <HAL_RCC_OscConfig+0x1da>
 8002488:	e000      	b.n	800248c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800248a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 0301 	and.w	r3, r3, #1
 8002494:	2b00      	cmp	r3, #0
 8002496:	d074      	beq.n	8002582 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002498:	69bb      	ldr	r3, [r7, #24]
 800249a:	2b08      	cmp	r3, #8
 800249c:	d005      	beq.n	80024aa <HAL_RCC_OscConfig+0x21a>
 800249e:	69bb      	ldr	r3, [r7, #24]
 80024a0:	2b0c      	cmp	r3, #12
 80024a2:	d10e      	bne.n	80024c2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	2b03      	cmp	r3, #3
 80024a8:	d10b      	bne.n	80024c2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024aa:	4b15      	ldr	r3, [pc, #84]	@ (8002500 <HAL_RCC_OscConfig+0x270>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d064      	beq.n	8002580 <HAL_RCC_OscConfig+0x2f0>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d160      	bne.n	8002580 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	e2ba      	b.n	8002a38 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80024ca:	d106      	bne.n	80024da <HAL_RCC_OscConfig+0x24a>
 80024cc:	4b0c      	ldr	r3, [pc, #48]	@ (8002500 <HAL_RCC_OscConfig+0x270>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a0b      	ldr	r2, [pc, #44]	@ (8002500 <HAL_RCC_OscConfig+0x270>)
 80024d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024d6:	6013      	str	r3, [r2, #0]
 80024d8:	e026      	b.n	8002528 <HAL_RCC_OscConfig+0x298>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80024e2:	d115      	bne.n	8002510 <HAL_RCC_OscConfig+0x280>
 80024e4:	4b06      	ldr	r3, [pc, #24]	@ (8002500 <HAL_RCC_OscConfig+0x270>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a05      	ldr	r2, [pc, #20]	@ (8002500 <HAL_RCC_OscConfig+0x270>)
 80024ea:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80024ee:	6013      	str	r3, [r2, #0]
 80024f0:	4b03      	ldr	r3, [pc, #12]	@ (8002500 <HAL_RCC_OscConfig+0x270>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a02      	ldr	r2, [pc, #8]	@ (8002500 <HAL_RCC_OscConfig+0x270>)
 80024f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024fa:	6013      	str	r3, [r2, #0]
 80024fc:	e014      	b.n	8002528 <HAL_RCC_OscConfig+0x298>
 80024fe:	bf00      	nop
 8002500:	40021000 	.word	0x40021000
 8002504:	08005228 	.word	0x08005228
 8002508:	20000000 	.word	0x20000000
 800250c:	20000004 	.word	0x20000004
 8002510:	4ba0      	ldr	r3, [pc, #640]	@ (8002794 <HAL_RCC_OscConfig+0x504>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a9f      	ldr	r2, [pc, #636]	@ (8002794 <HAL_RCC_OscConfig+0x504>)
 8002516:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800251a:	6013      	str	r3, [r2, #0]
 800251c:	4b9d      	ldr	r3, [pc, #628]	@ (8002794 <HAL_RCC_OscConfig+0x504>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a9c      	ldr	r2, [pc, #624]	@ (8002794 <HAL_RCC_OscConfig+0x504>)
 8002522:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002526:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d013      	beq.n	8002558 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002530:	f7fe fea8 	bl	8001284 <HAL_GetTick>
 8002534:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002536:	e008      	b.n	800254a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002538:	f7fe fea4 	bl	8001284 <HAL_GetTick>
 800253c:	4602      	mov	r2, r0
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	2b64      	cmp	r3, #100	@ 0x64
 8002544:	d901      	bls.n	800254a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002546:	2303      	movs	r3, #3
 8002548:	e276      	b.n	8002a38 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800254a:	4b92      	ldr	r3, [pc, #584]	@ (8002794 <HAL_RCC_OscConfig+0x504>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002552:	2b00      	cmp	r3, #0
 8002554:	d0f0      	beq.n	8002538 <HAL_RCC_OscConfig+0x2a8>
 8002556:	e014      	b.n	8002582 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002558:	f7fe fe94 	bl	8001284 <HAL_GetTick>
 800255c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800255e:	e008      	b.n	8002572 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002560:	f7fe fe90 	bl	8001284 <HAL_GetTick>
 8002564:	4602      	mov	r2, r0
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	1ad3      	subs	r3, r2, r3
 800256a:	2b64      	cmp	r3, #100	@ 0x64
 800256c:	d901      	bls.n	8002572 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800256e:	2303      	movs	r3, #3
 8002570:	e262      	b.n	8002a38 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002572:	4b88      	ldr	r3, [pc, #544]	@ (8002794 <HAL_RCC_OscConfig+0x504>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800257a:	2b00      	cmp	r3, #0
 800257c:	d1f0      	bne.n	8002560 <HAL_RCC_OscConfig+0x2d0>
 800257e:	e000      	b.n	8002582 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002580:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f003 0302 	and.w	r3, r3, #2
 800258a:	2b00      	cmp	r3, #0
 800258c:	d060      	beq.n	8002650 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800258e:	69bb      	ldr	r3, [r7, #24]
 8002590:	2b04      	cmp	r3, #4
 8002592:	d005      	beq.n	80025a0 <HAL_RCC_OscConfig+0x310>
 8002594:	69bb      	ldr	r3, [r7, #24]
 8002596:	2b0c      	cmp	r3, #12
 8002598:	d119      	bne.n	80025ce <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	2b02      	cmp	r3, #2
 800259e:	d116      	bne.n	80025ce <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025a0:	4b7c      	ldr	r3, [pc, #496]	@ (8002794 <HAL_RCC_OscConfig+0x504>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d005      	beq.n	80025b8 <HAL_RCC_OscConfig+0x328>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	68db      	ldr	r3, [r3, #12]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d101      	bne.n	80025b8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	e23f      	b.n	8002a38 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025b8:	4b76      	ldr	r3, [pc, #472]	@ (8002794 <HAL_RCC_OscConfig+0x504>)
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	691b      	ldr	r3, [r3, #16]
 80025c4:	061b      	lsls	r3, r3, #24
 80025c6:	4973      	ldr	r1, [pc, #460]	@ (8002794 <HAL_RCC_OscConfig+0x504>)
 80025c8:	4313      	orrs	r3, r2
 80025ca:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025cc:	e040      	b.n	8002650 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	68db      	ldr	r3, [r3, #12]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d023      	beq.n	800261e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025d6:	4b6f      	ldr	r3, [pc, #444]	@ (8002794 <HAL_RCC_OscConfig+0x504>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a6e      	ldr	r2, [pc, #440]	@ (8002794 <HAL_RCC_OscConfig+0x504>)
 80025dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025e2:	f7fe fe4f 	bl	8001284 <HAL_GetTick>
 80025e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025e8:	e008      	b.n	80025fc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025ea:	f7fe fe4b 	bl	8001284 <HAL_GetTick>
 80025ee:	4602      	mov	r2, r0
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	1ad3      	subs	r3, r2, r3
 80025f4:	2b02      	cmp	r3, #2
 80025f6:	d901      	bls.n	80025fc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80025f8:	2303      	movs	r3, #3
 80025fa:	e21d      	b.n	8002a38 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025fc:	4b65      	ldr	r3, [pc, #404]	@ (8002794 <HAL_RCC_OscConfig+0x504>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002604:	2b00      	cmp	r3, #0
 8002606:	d0f0      	beq.n	80025ea <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002608:	4b62      	ldr	r3, [pc, #392]	@ (8002794 <HAL_RCC_OscConfig+0x504>)
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	691b      	ldr	r3, [r3, #16]
 8002614:	061b      	lsls	r3, r3, #24
 8002616:	495f      	ldr	r1, [pc, #380]	@ (8002794 <HAL_RCC_OscConfig+0x504>)
 8002618:	4313      	orrs	r3, r2
 800261a:	604b      	str	r3, [r1, #4]
 800261c:	e018      	b.n	8002650 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800261e:	4b5d      	ldr	r3, [pc, #372]	@ (8002794 <HAL_RCC_OscConfig+0x504>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a5c      	ldr	r2, [pc, #368]	@ (8002794 <HAL_RCC_OscConfig+0x504>)
 8002624:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002628:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800262a:	f7fe fe2b 	bl	8001284 <HAL_GetTick>
 800262e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002630:	e008      	b.n	8002644 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002632:	f7fe fe27 	bl	8001284 <HAL_GetTick>
 8002636:	4602      	mov	r2, r0
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	1ad3      	subs	r3, r2, r3
 800263c:	2b02      	cmp	r3, #2
 800263e:	d901      	bls.n	8002644 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002640:	2303      	movs	r3, #3
 8002642:	e1f9      	b.n	8002a38 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002644:	4b53      	ldr	r3, [pc, #332]	@ (8002794 <HAL_RCC_OscConfig+0x504>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800264c:	2b00      	cmp	r3, #0
 800264e:	d1f0      	bne.n	8002632 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f003 0308 	and.w	r3, r3, #8
 8002658:	2b00      	cmp	r3, #0
 800265a:	d03c      	beq.n	80026d6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	695b      	ldr	r3, [r3, #20]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d01c      	beq.n	800269e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002664:	4b4b      	ldr	r3, [pc, #300]	@ (8002794 <HAL_RCC_OscConfig+0x504>)
 8002666:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800266a:	4a4a      	ldr	r2, [pc, #296]	@ (8002794 <HAL_RCC_OscConfig+0x504>)
 800266c:	f043 0301 	orr.w	r3, r3, #1
 8002670:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002674:	f7fe fe06 	bl	8001284 <HAL_GetTick>
 8002678:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800267a:	e008      	b.n	800268e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800267c:	f7fe fe02 	bl	8001284 <HAL_GetTick>
 8002680:	4602      	mov	r2, r0
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	1ad3      	subs	r3, r2, r3
 8002686:	2b02      	cmp	r3, #2
 8002688:	d901      	bls.n	800268e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800268a:	2303      	movs	r3, #3
 800268c:	e1d4      	b.n	8002a38 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800268e:	4b41      	ldr	r3, [pc, #260]	@ (8002794 <HAL_RCC_OscConfig+0x504>)
 8002690:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002694:	f003 0302 	and.w	r3, r3, #2
 8002698:	2b00      	cmp	r3, #0
 800269a:	d0ef      	beq.n	800267c <HAL_RCC_OscConfig+0x3ec>
 800269c:	e01b      	b.n	80026d6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800269e:	4b3d      	ldr	r3, [pc, #244]	@ (8002794 <HAL_RCC_OscConfig+0x504>)
 80026a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80026a4:	4a3b      	ldr	r2, [pc, #236]	@ (8002794 <HAL_RCC_OscConfig+0x504>)
 80026a6:	f023 0301 	bic.w	r3, r3, #1
 80026aa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026ae:	f7fe fde9 	bl	8001284 <HAL_GetTick>
 80026b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80026b4:	e008      	b.n	80026c8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026b6:	f7fe fde5 	bl	8001284 <HAL_GetTick>
 80026ba:	4602      	mov	r2, r0
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	1ad3      	subs	r3, r2, r3
 80026c0:	2b02      	cmp	r3, #2
 80026c2:	d901      	bls.n	80026c8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80026c4:	2303      	movs	r3, #3
 80026c6:	e1b7      	b.n	8002a38 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80026c8:	4b32      	ldr	r3, [pc, #200]	@ (8002794 <HAL_RCC_OscConfig+0x504>)
 80026ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80026ce:	f003 0302 	and.w	r3, r3, #2
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d1ef      	bne.n	80026b6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 0304 	and.w	r3, r3, #4
 80026de:	2b00      	cmp	r3, #0
 80026e0:	f000 80a6 	beq.w	8002830 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026e4:	2300      	movs	r3, #0
 80026e6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80026e8:	4b2a      	ldr	r3, [pc, #168]	@ (8002794 <HAL_RCC_OscConfig+0x504>)
 80026ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d10d      	bne.n	8002710 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026f4:	4b27      	ldr	r3, [pc, #156]	@ (8002794 <HAL_RCC_OscConfig+0x504>)
 80026f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026f8:	4a26      	ldr	r2, [pc, #152]	@ (8002794 <HAL_RCC_OscConfig+0x504>)
 80026fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80026fe:	6593      	str	r3, [r2, #88]	@ 0x58
 8002700:	4b24      	ldr	r3, [pc, #144]	@ (8002794 <HAL_RCC_OscConfig+0x504>)
 8002702:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002704:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002708:	60bb      	str	r3, [r7, #8]
 800270a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800270c:	2301      	movs	r3, #1
 800270e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002710:	4b21      	ldr	r3, [pc, #132]	@ (8002798 <HAL_RCC_OscConfig+0x508>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002718:	2b00      	cmp	r3, #0
 800271a:	d118      	bne.n	800274e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800271c:	4b1e      	ldr	r3, [pc, #120]	@ (8002798 <HAL_RCC_OscConfig+0x508>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a1d      	ldr	r2, [pc, #116]	@ (8002798 <HAL_RCC_OscConfig+0x508>)
 8002722:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002726:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002728:	f7fe fdac 	bl	8001284 <HAL_GetTick>
 800272c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800272e:	e008      	b.n	8002742 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002730:	f7fe fda8 	bl	8001284 <HAL_GetTick>
 8002734:	4602      	mov	r2, r0
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	1ad3      	subs	r3, r2, r3
 800273a:	2b02      	cmp	r3, #2
 800273c:	d901      	bls.n	8002742 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800273e:	2303      	movs	r3, #3
 8002740:	e17a      	b.n	8002a38 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002742:	4b15      	ldr	r3, [pc, #84]	@ (8002798 <HAL_RCC_OscConfig+0x508>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800274a:	2b00      	cmp	r3, #0
 800274c:	d0f0      	beq.n	8002730 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	2b01      	cmp	r3, #1
 8002754:	d108      	bne.n	8002768 <HAL_RCC_OscConfig+0x4d8>
 8002756:	4b0f      	ldr	r3, [pc, #60]	@ (8002794 <HAL_RCC_OscConfig+0x504>)
 8002758:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800275c:	4a0d      	ldr	r2, [pc, #52]	@ (8002794 <HAL_RCC_OscConfig+0x504>)
 800275e:	f043 0301 	orr.w	r3, r3, #1
 8002762:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002766:	e029      	b.n	80027bc <HAL_RCC_OscConfig+0x52c>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	2b05      	cmp	r3, #5
 800276e:	d115      	bne.n	800279c <HAL_RCC_OscConfig+0x50c>
 8002770:	4b08      	ldr	r3, [pc, #32]	@ (8002794 <HAL_RCC_OscConfig+0x504>)
 8002772:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002776:	4a07      	ldr	r2, [pc, #28]	@ (8002794 <HAL_RCC_OscConfig+0x504>)
 8002778:	f043 0304 	orr.w	r3, r3, #4
 800277c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002780:	4b04      	ldr	r3, [pc, #16]	@ (8002794 <HAL_RCC_OscConfig+0x504>)
 8002782:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002786:	4a03      	ldr	r2, [pc, #12]	@ (8002794 <HAL_RCC_OscConfig+0x504>)
 8002788:	f043 0301 	orr.w	r3, r3, #1
 800278c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002790:	e014      	b.n	80027bc <HAL_RCC_OscConfig+0x52c>
 8002792:	bf00      	nop
 8002794:	40021000 	.word	0x40021000
 8002798:	40007000 	.word	0x40007000
 800279c:	4b9c      	ldr	r3, [pc, #624]	@ (8002a10 <HAL_RCC_OscConfig+0x780>)
 800279e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027a2:	4a9b      	ldr	r2, [pc, #620]	@ (8002a10 <HAL_RCC_OscConfig+0x780>)
 80027a4:	f023 0301 	bic.w	r3, r3, #1
 80027a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80027ac:	4b98      	ldr	r3, [pc, #608]	@ (8002a10 <HAL_RCC_OscConfig+0x780>)
 80027ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027b2:	4a97      	ldr	r2, [pc, #604]	@ (8002a10 <HAL_RCC_OscConfig+0x780>)
 80027b4:	f023 0304 	bic.w	r3, r3, #4
 80027b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d016      	beq.n	80027f2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027c4:	f7fe fd5e 	bl	8001284 <HAL_GetTick>
 80027c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027ca:	e00a      	b.n	80027e2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027cc:	f7fe fd5a 	bl	8001284 <HAL_GetTick>
 80027d0:	4602      	mov	r2, r0
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	1ad3      	subs	r3, r2, r3
 80027d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027da:	4293      	cmp	r3, r2
 80027dc:	d901      	bls.n	80027e2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80027de:	2303      	movs	r3, #3
 80027e0:	e12a      	b.n	8002a38 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027e2:	4b8b      	ldr	r3, [pc, #556]	@ (8002a10 <HAL_RCC_OscConfig+0x780>)
 80027e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027e8:	f003 0302 	and.w	r3, r3, #2
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d0ed      	beq.n	80027cc <HAL_RCC_OscConfig+0x53c>
 80027f0:	e015      	b.n	800281e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027f2:	f7fe fd47 	bl	8001284 <HAL_GetTick>
 80027f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80027f8:	e00a      	b.n	8002810 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027fa:	f7fe fd43 	bl	8001284 <HAL_GetTick>
 80027fe:	4602      	mov	r2, r0
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	1ad3      	subs	r3, r2, r3
 8002804:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002808:	4293      	cmp	r3, r2
 800280a:	d901      	bls.n	8002810 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800280c:	2303      	movs	r3, #3
 800280e:	e113      	b.n	8002a38 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002810:	4b7f      	ldr	r3, [pc, #508]	@ (8002a10 <HAL_RCC_OscConfig+0x780>)
 8002812:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002816:	f003 0302 	and.w	r3, r3, #2
 800281a:	2b00      	cmp	r3, #0
 800281c:	d1ed      	bne.n	80027fa <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800281e:	7ffb      	ldrb	r3, [r7, #31]
 8002820:	2b01      	cmp	r3, #1
 8002822:	d105      	bne.n	8002830 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002824:	4b7a      	ldr	r3, [pc, #488]	@ (8002a10 <HAL_RCC_OscConfig+0x780>)
 8002826:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002828:	4a79      	ldr	r2, [pc, #484]	@ (8002a10 <HAL_RCC_OscConfig+0x780>)
 800282a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800282e:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002834:	2b00      	cmp	r3, #0
 8002836:	f000 80fe 	beq.w	8002a36 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800283e:	2b02      	cmp	r3, #2
 8002840:	f040 80d0 	bne.w	80029e4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002844:	4b72      	ldr	r3, [pc, #456]	@ (8002a10 <HAL_RCC_OscConfig+0x780>)
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	f003 0203 	and.w	r2, r3, #3
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002854:	429a      	cmp	r2, r3
 8002856:	d130      	bne.n	80028ba <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002862:	3b01      	subs	r3, #1
 8002864:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002866:	429a      	cmp	r2, r3
 8002868:	d127      	bne.n	80028ba <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002874:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002876:	429a      	cmp	r2, r3
 8002878:	d11f      	bne.n	80028ba <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002880:	687a      	ldr	r2, [r7, #4]
 8002882:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002884:	2a07      	cmp	r2, #7
 8002886:	bf14      	ite	ne
 8002888:	2201      	movne	r2, #1
 800288a:	2200      	moveq	r2, #0
 800288c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800288e:	4293      	cmp	r3, r2
 8002890:	d113      	bne.n	80028ba <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800289c:	085b      	lsrs	r3, r3, #1
 800289e:	3b01      	subs	r3, #1
 80028a0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80028a2:	429a      	cmp	r2, r3
 80028a4:	d109      	bne.n	80028ba <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028b0:	085b      	lsrs	r3, r3, #1
 80028b2:	3b01      	subs	r3, #1
 80028b4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80028b6:	429a      	cmp	r2, r3
 80028b8:	d06e      	beq.n	8002998 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80028ba:	69bb      	ldr	r3, [r7, #24]
 80028bc:	2b0c      	cmp	r3, #12
 80028be:	d069      	beq.n	8002994 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80028c0:	4b53      	ldr	r3, [pc, #332]	@ (8002a10 <HAL_RCC_OscConfig+0x780>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d105      	bne.n	80028d8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80028cc:	4b50      	ldr	r3, [pc, #320]	@ (8002a10 <HAL_RCC_OscConfig+0x780>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d001      	beq.n	80028dc <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	e0ad      	b.n	8002a38 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80028dc:	4b4c      	ldr	r3, [pc, #304]	@ (8002a10 <HAL_RCC_OscConfig+0x780>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a4b      	ldr	r2, [pc, #300]	@ (8002a10 <HAL_RCC_OscConfig+0x780>)
 80028e2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80028e6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80028e8:	f7fe fccc 	bl	8001284 <HAL_GetTick>
 80028ec:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028ee:	e008      	b.n	8002902 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028f0:	f7fe fcc8 	bl	8001284 <HAL_GetTick>
 80028f4:	4602      	mov	r2, r0
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	1ad3      	subs	r3, r2, r3
 80028fa:	2b02      	cmp	r3, #2
 80028fc:	d901      	bls.n	8002902 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80028fe:	2303      	movs	r3, #3
 8002900:	e09a      	b.n	8002a38 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002902:	4b43      	ldr	r3, [pc, #268]	@ (8002a10 <HAL_RCC_OscConfig+0x780>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800290a:	2b00      	cmp	r3, #0
 800290c:	d1f0      	bne.n	80028f0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800290e:	4b40      	ldr	r3, [pc, #256]	@ (8002a10 <HAL_RCC_OscConfig+0x780>)
 8002910:	68da      	ldr	r2, [r3, #12]
 8002912:	4b40      	ldr	r3, [pc, #256]	@ (8002a14 <HAL_RCC_OscConfig+0x784>)
 8002914:	4013      	ands	r3, r2
 8002916:	687a      	ldr	r2, [r7, #4]
 8002918:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800291a:	687a      	ldr	r2, [r7, #4]
 800291c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800291e:	3a01      	subs	r2, #1
 8002920:	0112      	lsls	r2, r2, #4
 8002922:	4311      	orrs	r1, r2
 8002924:	687a      	ldr	r2, [r7, #4]
 8002926:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002928:	0212      	lsls	r2, r2, #8
 800292a:	4311      	orrs	r1, r2
 800292c:	687a      	ldr	r2, [r7, #4]
 800292e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002930:	0852      	lsrs	r2, r2, #1
 8002932:	3a01      	subs	r2, #1
 8002934:	0552      	lsls	r2, r2, #21
 8002936:	4311      	orrs	r1, r2
 8002938:	687a      	ldr	r2, [r7, #4]
 800293a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800293c:	0852      	lsrs	r2, r2, #1
 800293e:	3a01      	subs	r2, #1
 8002940:	0652      	lsls	r2, r2, #25
 8002942:	4311      	orrs	r1, r2
 8002944:	687a      	ldr	r2, [r7, #4]
 8002946:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002948:	0912      	lsrs	r2, r2, #4
 800294a:	0452      	lsls	r2, r2, #17
 800294c:	430a      	orrs	r2, r1
 800294e:	4930      	ldr	r1, [pc, #192]	@ (8002a10 <HAL_RCC_OscConfig+0x780>)
 8002950:	4313      	orrs	r3, r2
 8002952:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002954:	4b2e      	ldr	r3, [pc, #184]	@ (8002a10 <HAL_RCC_OscConfig+0x780>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a2d      	ldr	r2, [pc, #180]	@ (8002a10 <HAL_RCC_OscConfig+0x780>)
 800295a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800295e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002960:	4b2b      	ldr	r3, [pc, #172]	@ (8002a10 <HAL_RCC_OscConfig+0x780>)
 8002962:	68db      	ldr	r3, [r3, #12]
 8002964:	4a2a      	ldr	r2, [pc, #168]	@ (8002a10 <HAL_RCC_OscConfig+0x780>)
 8002966:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800296a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800296c:	f7fe fc8a 	bl	8001284 <HAL_GetTick>
 8002970:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002972:	e008      	b.n	8002986 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002974:	f7fe fc86 	bl	8001284 <HAL_GetTick>
 8002978:	4602      	mov	r2, r0
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	1ad3      	subs	r3, r2, r3
 800297e:	2b02      	cmp	r3, #2
 8002980:	d901      	bls.n	8002986 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002982:	2303      	movs	r3, #3
 8002984:	e058      	b.n	8002a38 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002986:	4b22      	ldr	r3, [pc, #136]	@ (8002a10 <HAL_RCC_OscConfig+0x780>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800298e:	2b00      	cmp	r3, #0
 8002990:	d0f0      	beq.n	8002974 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002992:	e050      	b.n	8002a36 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	e04f      	b.n	8002a38 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002998:	4b1d      	ldr	r3, [pc, #116]	@ (8002a10 <HAL_RCC_OscConfig+0x780>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d148      	bne.n	8002a36 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80029a4:	4b1a      	ldr	r3, [pc, #104]	@ (8002a10 <HAL_RCC_OscConfig+0x780>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a19      	ldr	r2, [pc, #100]	@ (8002a10 <HAL_RCC_OscConfig+0x780>)
 80029aa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80029ae:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80029b0:	4b17      	ldr	r3, [pc, #92]	@ (8002a10 <HAL_RCC_OscConfig+0x780>)
 80029b2:	68db      	ldr	r3, [r3, #12]
 80029b4:	4a16      	ldr	r2, [pc, #88]	@ (8002a10 <HAL_RCC_OscConfig+0x780>)
 80029b6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80029ba:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80029bc:	f7fe fc62 	bl	8001284 <HAL_GetTick>
 80029c0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029c2:	e008      	b.n	80029d6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029c4:	f7fe fc5e 	bl	8001284 <HAL_GetTick>
 80029c8:	4602      	mov	r2, r0
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	1ad3      	subs	r3, r2, r3
 80029ce:	2b02      	cmp	r3, #2
 80029d0:	d901      	bls.n	80029d6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80029d2:	2303      	movs	r3, #3
 80029d4:	e030      	b.n	8002a38 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029d6:	4b0e      	ldr	r3, [pc, #56]	@ (8002a10 <HAL_RCC_OscConfig+0x780>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d0f0      	beq.n	80029c4 <HAL_RCC_OscConfig+0x734>
 80029e2:	e028      	b.n	8002a36 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80029e4:	69bb      	ldr	r3, [r7, #24]
 80029e6:	2b0c      	cmp	r3, #12
 80029e8:	d023      	beq.n	8002a32 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029ea:	4b09      	ldr	r3, [pc, #36]	@ (8002a10 <HAL_RCC_OscConfig+0x780>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a08      	ldr	r2, [pc, #32]	@ (8002a10 <HAL_RCC_OscConfig+0x780>)
 80029f0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80029f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029f6:	f7fe fc45 	bl	8001284 <HAL_GetTick>
 80029fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029fc:	e00c      	b.n	8002a18 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029fe:	f7fe fc41 	bl	8001284 <HAL_GetTick>
 8002a02:	4602      	mov	r2, r0
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	1ad3      	subs	r3, r2, r3
 8002a08:	2b02      	cmp	r3, #2
 8002a0a:	d905      	bls.n	8002a18 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002a0c:	2303      	movs	r3, #3
 8002a0e:	e013      	b.n	8002a38 <HAL_RCC_OscConfig+0x7a8>
 8002a10:	40021000 	.word	0x40021000
 8002a14:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a18:	4b09      	ldr	r3, [pc, #36]	@ (8002a40 <HAL_RCC_OscConfig+0x7b0>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d1ec      	bne.n	80029fe <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002a24:	4b06      	ldr	r3, [pc, #24]	@ (8002a40 <HAL_RCC_OscConfig+0x7b0>)
 8002a26:	68da      	ldr	r2, [r3, #12]
 8002a28:	4905      	ldr	r1, [pc, #20]	@ (8002a40 <HAL_RCC_OscConfig+0x7b0>)
 8002a2a:	4b06      	ldr	r3, [pc, #24]	@ (8002a44 <HAL_RCC_OscConfig+0x7b4>)
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	60cb      	str	r3, [r1, #12]
 8002a30:	e001      	b.n	8002a36 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e000      	b.n	8002a38 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002a36:	2300      	movs	r3, #0
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	3720      	adds	r7, #32
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}
 8002a40:	40021000 	.word	0x40021000
 8002a44:	feeefffc 	.word	0xfeeefffc

08002a48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b084      	sub	sp, #16
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
 8002a50:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d101      	bne.n	8002a5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	e0e7      	b.n	8002c2c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a5c:	4b75      	ldr	r3, [pc, #468]	@ (8002c34 <HAL_RCC_ClockConfig+0x1ec>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f003 0307 	and.w	r3, r3, #7
 8002a64:	683a      	ldr	r2, [r7, #0]
 8002a66:	429a      	cmp	r2, r3
 8002a68:	d910      	bls.n	8002a8c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a6a:	4b72      	ldr	r3, [pc, #456]	@ (8002c34 <HAL_RCC_ClockConfig+0x1ec>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f023 0207 	bic.w	r2, r3, #7
 8002a72:	4970      	ldr	r1, [pc, #448]	@ (8002c34 <HAL_RCC_ClockConfig+0x1ec>)
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	4313      	orrs	r3, r2
 8002a78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a7a:	4b6e      	ldr	r3, [pc, #440]	@ (8002c34 <HAL_RCC_ClockConfig+0x1ec>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 0307 	and.w	r3, r3, #7
 8002a82:	683a      	ldr	r2, [r7, #0]
 8002a84:	429a      	cmp	r2, r3
 8002a86:	d001      	beq.n	8002a8c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	e0cf      	b.n	8002c2c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f003 0302 	and.w	r3, r3, #2
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d010      	beq.n	8002aba <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	689a      	ldr	r2, [r3, #8]
 8002a9c:	4b66      	ldr	r3, [pc, #408]	@ (8002c38 <HAL_RCC_ClockConfig+0x1f0>)
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	d908      	bls.n	8002aba <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002aa8:	4b63      	ldr	r3, [pc, #396]	@ (8002c38 <HAL_RCC_ClockConfig+0x1f0>)
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	4960      	ldr	r1, [pc, #384]	@ (8002c38 <HAL_RCC_ClockConfig+0x1f0>)
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f003 0301 	and.w	r3, r3, #1
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d04c      	beq.n	8002b60 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	2b03      	cmp	r3, #3
 8002acc:	d107      	bne.n	8002ade <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ace:	4b5a      	ldr	r3, [pc, #360]	@ (8002c38 <HAL_RCC_ClockConfig+0x1f0>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d121      	bne.n	8002b1e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e0a6      	b.n	8002c2c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	2b02      	cmp	r3, #2
 8002ae4:	d107      	bne.n	8002af6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ae6:	4b54      	ldr	r3, [pc, #336]	@ (8002c38 <HAL_RCC_ClockConfig+0x1f0>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d115      	bne.n	8002b1e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e09a      	b.n	8002c2c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d107      	bne.n	8002b0e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002afe:	4b4e      	ldr	r3, [pc, #312]	@ (8002c38 <HAL_RCC_ClockConfig+0x1f0>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f003 0302 	and.w	r3, r3, #2
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d109      	bne.n	8002b1e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e08e      	b.n	8002c2c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b0e:	4b4a      	ldr	r3, [pc, #296]	@ (8002c38 <HAL_RCC_ClockConfig+0x1f0>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d101      	bne.n	8002b1e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e086      	b.n	8002c2c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002b1e:	4b46      	ldr	r3, [pc, #280]	@ (8002c38 <HAL_RCC_ClockConfig+0x1f0>)
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	f023 0203 	bic.w	r2, r3, #3
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	4943      	ldr	r1, [pc, #268]	@ (8002c38 <HAL_RCC_ClockConfig+0x1f0>)
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b30:	f7fe fba8 	bl	8001284 <HAL_GetTick>
 8002b34:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b36:	e00a      	b.n	8002b4e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b38:	f7fe fba4 	bl	8001284 <HAL_GetTick>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	1ad3      	subs	r3, r2, r3
 8002b42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d901      	bls.n	8002b4e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002b4a:	2303      	movs	r3, #3
 8002b4c:	e06e      	b.n	8002c2c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b4e:	4b3a      	ldr	r3, [pc, #232]	@ (8002c38 <HAL_RCC_ClockConfig+0x1f0>)
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	f003 020c 	and.w	r2, r3, #12
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	009b      	lsls	r3, r3, #2
 8002b5c:	429a      	cmp	r2, r3
 8002b5e:	d1eb      	bne.n	8002b38 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f003 0302 	and.w	r3, r3, #2
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d010      	beq.n	8002b8e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	689a      	ldr	r2, [r3, #8]
 8002b70:	4b31      	ldr	r3, [pc, #196]	@ (8002c38 <HAL_RCC_ClockConfig+0x1f0>)
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002b78:	429a      	cmp	r2, r3
 8002b7a:	d208      	bcs.n	8002b8e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b7c:	4b2e      	ldr	r3, [pc, #184]	@ (8002c38 <HAL_RCC_ClockConfig+0x1f0>)
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	492b      	ldr	r1, [pc, #172]	@ (8002c38 <HAL_RCC_ClockConfig+0x1f0>)
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b8e:	4b29      	ldr	r3, [pc, #164]	@ (8002c34 <HAL_RCC_ClockConfig+0x1ec>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f003 0307 	and.w	r3, r3, #7
 8002b96:	683a      	ldr	r2, [r7, #0]
 8002b98:	429a      	cmp	r2, r3
 8002b9a:	d210      	bcs.n	8002bbe <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b9c:	4b25      	ldr	r3, [pc, #148]	@ (8002c34 <HAL_RCC_ClockConfig+0x1ec>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f023 0207 	bic.w	r2, r3, #7
 8002ba4:	4923      	ldr	r1, [pc, #140]	@ (8002c34 <HAL_RCC_ClockConfig+0x1ec>)
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bac:	4b21      	ldr	r3, [pc, #132]	@ (8002c34 <HAL_RCC_ClockConfig+0x1ec>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 0307 	and.w	r3, r3, #7
 8002bb4:	683a      	ldr	r2, [r7, #0]
 8002bb6:	429a      	cmp	r2, r3
 8002bb8:	d001      	beq.n	8002bbe <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e036      	b.n	8002c2c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 0304 	and.w	r3, r3, #4
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d008      	beq.n	8002bdc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bca:	4b1b      	ldr	r3, [pc, #108]	@ (8002c38 <HAL_RCC_ClockConfig+0x1f0>)
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	68db      	ldr	r3, [r3, #12]
 8002bd6:	4918      	ldr	r1, [pc, #96]	@ (8002c38 <HAL_RCC_ClockConfig+0x1f0>)
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f003 0308 	and.w	r3, r3, #8
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d009      	beq.n	8002bfc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002be8:	4b13      	ldr	r3, [pc, #76]	@ (8002c38 <HAL_RCC_ClockConfig+0x1f0>)
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	691b      	ldr	r3, [r3, #16]
 8002bf4:	00db      	lsls	r3, r3, #3
 8002bf6:	4910      	ldr	r1, [pc, #64]	@ (8002c38 <HAL_RCC_ClockConfig+0x1f0>)
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002bfc:	f000 f824 	bl	8002c48 <HAL_RCC_GetSysClockFreq>
 8002c00:	4602      	mov	r2, r0
 8002c02:	4b0d      	ldr	r3, [pc, #52]	@ (8002c38 <HAL_RCC_ClockConfig+0x1f0>)
 8002c04:	689b      	ldr	r3, [r3, #8]
 8002c06:	091b      	lsrs	r3, r3, #4
 8002c08:	f003 030f 	and.w	r3, r3, #15
 8002c0c:	490b      	ldr	r1, [pc, #44]	@ (8002c3c <HAL_RCC_ClockConfig+0x1f4>)
 8002c0e:	5ccb      	ldrb	r3, [r1, r3]
 8002c10:	f003 031f 	and.w	r3, r3, #31
 8002c14:	fa22 f303 	lsr.w	r3, r2, r3
 8002c18:	4a09      	ldr	r2, [pc, #36]	@ (8002c40 <HAL_RCC_ClockConfig+0x1f8>)
 8002c1a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002c1c:	4b09      	ldr	r3, [pc, #36]	@ (8002c44 <HAL_RCC_ClockConfig+0x1fc>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4618      	mov	r0, r3
 8002c22:	f7fe fadf 	bl	80011e4 <HAL_InitTick>
 8002c26:	4603      	mov	r3, r0
 8002c28:	72fb      	strb	r3, [r7, #11]

  return status;
 8002c2a:	7afb      	ldrb	r3, [r7, #11]
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	3710      	adds	r7, #16
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}
 8002c34:	40022000 	.word	0x40022000
 8002c38:	40021000 	.word	0x40021000
 8002c3c:	08005228 	.word	0x08005228
 8002c40:	20000000 	.word	0x20000000
 8002c44:	20000004 	.word	0x20000004

08002c48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b089      	sub	sp, #36	@ 0x24
 8002c4c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	61fb      	str	r3, [r7, #28]
 8002c52:	2300      	movs	r3, #0
 8002c54:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c56:	4b3e      	ldr	r3, [pc, #248]	@ (8002d50 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c58:	689b      	ldr	r3, [r3, #8]
 8002c5a:	f003 030c 	and.w	r3, r3, #12
 8002c5e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c60:	4b3b      	ldr	r3, [pc, #236]	@ (8002d50 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c62:	68db      	ldr	r3, [r3, #12]
 8002c64:	f003 0303 	and.w	r3, r3, #3
 8002c68:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d005      	beq.n	8002c7c <HAL_RCC_GetSysClockFreq+0x34>
 8002c70:	693b      	ldr	r3, [r7, #16]
 8002c72:	2b0c      	cmp	r3, #12
 8002c74:	d121      	bne.n	8002cba <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	d11e      	bne.n	8002cba <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002c7c:	4b34      	ldr	r3, [pc, #208]	@ (8002d50 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f003 0308 	and.w	r3, r3, #8
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d107      	bne.n	8002c98 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002c88:	4b31      	ldr	r3, [pc, #196]	@ (8002d50 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c8e:	0a1b      	lsrs	r3, r3, #8
 8002c90:	f003 030f 	and.w	r3, r3, #15
 8002c94:	61fb      	str	r3, [r7, #28]
 8002c96:	e005      	b.n	8002ca4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002c98:	4b2d      	ldr	r3, [pc, #180]	@ (8002d50 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	091b      	lsrs	r3, r3, #4
 8002c9e:	f003 030f 	and.w	r3, r3, #15
 8002ca2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002ca4:	4a2b      	ldr	r2, [pc, #172]	@ (8002d54 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002ca6:	69fb      	ldr	r3, [r7, #28]
 8002ca8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cac:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d10d      	bne.n	8002cd0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002cb4:	69fb      	ldr	r3, [r7, #28]
 8002cb6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002cb8:	e00a      	b.n	8002cd0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002cba:	693b      	ldr	r3, [r7, #16]
 8002cbc:	2b04      	cmp	r3, #4
 8002cbe:	d102      	bne.n	8002cc6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002cc0:	4b25      	ldr	r3, [pc, #148]	@ (8002d58 <HAL_RCC_GetSysClockFreq+0x110>)
 8002cc2:	61bb      	str	r3, [r7, #24]
 8002cc4:	e004      	b.n	8002cd0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	2b08      	cmp	r3, #8
 8002cca:	d101      	bne.n	8002cd0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002ccc:	4b23      	ldr	r3, [pc, #140]	@ (8002d5c <HAL_RCC_GetSysClockFreq+0x114>)
 8002cce:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	2b0c      	cmp	r3, #12
 8002cd4:	d134      	bne.n	8002d40 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002cd6:	4b1e      	ldr	r3, [pc, #120]	@ (8002d50 <HAL_RCC_GetSysClockFreq+0x108>)
 8002cd8:	68db      	ldr	r3, [r3, #12]
 8002cda:	f003 0303 	and.w	r3, r3, #3
 8002cde:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	2b02      	cmp	r3, #2
 8002ce4:	d003      	beq.n	8002cee <HAL_RCC_GetSysClockFreq+0xa6>
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	2b03      	cmp	r3, #3
 8002cea:	d003      	beq.n	8002cf4 <HAL_RCC_GetSysClockFreq+0xac>
 8002cec:	e005      	b.n	8002cfa <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002cee:	4b1a      	ldr	r3, [pc, #104]	@ (8002d58 <HAL_RCC_GetSysClockFreq+0x110>)
 8002cf0:	617b      	str	r3, [r7, #20]
      break;
 8002cf2:	e005      	b.n	8002d00 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002cf4:	4b19      	ldr	r3, [pc, #100]	@ (8002d5c <HAL_RCC_GetSysClockFreq+0x114>)
 8002cf6:	617b      	str	r3, [r7, #20]
      break;
 8002cf8:	e002      	b.n	8002d00 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002cfa:	69fb      	ldr	r3, [r7, #28]
 8002cfc:	617b      	str	r3, [r7, #20]
      break;
 8002cfe:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002d00:	4b13      	ldr	r3, [pc, #76]	@ (8002d50 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d02:	68db      	ldr	r3, [r3, #12]
 8002d04:	091b      	lsrs	r3, r3, #4
 8002d06:	f003 0307 	and.w	r3, r3, #7
 8002d0a:	3301      	adds	r3, #1
 8002d0c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002d0e:	4b10      	ldr	r3, [pc, #64]	@ (8002d50 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d10:	68db      	ldr	r3, [r3, #12]
 8002d12:	0a1b      	lsrs	r3, r3, #8
 8002d14:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002d18:	697a      	ldr	r2, [r7, #20]
 8002d1a:	fb03 f202 	mul.w	r2, r3, r2
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d24:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002d26:	4b0a      	ldr	r3, [pc, #40]	@ (8002d50 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d28:	68db      	ldr	r3, [r3, #12]
 8002d2a:	0e5b      	lsrs	r3, r3, #25
 8002d2c:	f003 0303 	and.w	r3, r3, #3
 8002d30:	3301      	adds	r3, #1
 8002d32:	005b      	lsls	r3, r3, #1
 8002d34:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002d36:	697a      	ldr	r2, [r7, #20]
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d3e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002d40:	69bb      	ldr	r3, [r7, #24]
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	3724      	adds	r7, #36	@ 0x24
 8002d46:	46bd      	mov	sp, r7
 8002d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4c:	4770      	bx	lr
 8002d4e:	bf00      	nop
 8002d50:	40021000 	.word	0x40021000
 8002d54:	08005240 	.word	0x08005240
 8002d58:	00f42400 	.word	0x00f42400
 8002d5c:	007a1200 	.word	0x007a1200

08002d60 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d60:	b480      	push	{r7}
 8002d62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d64:	4b03      	ldr	r3, [pc, #12]	@ (8002d74 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d66:	681b      	ldr	r3, [r3, #0]
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d70:	4770      	bx	lr
 8002d72:	bf00      	nop
 8002d74:	20000000 	.word	0x20000000

08002d78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002d7c:	f7ff fff0 	bl	8002d60 <HAL_RCC_GetHCLKFreq>
 8002d80:	4602      	mov	r2, r0
 8002d82:	4b06      	ldr	r3, [pc, #24]	@ (8002d9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	0a1b      	lsrs	r3, r3, #8
 8002d88:	f003 0307 	and.w	r3, r3, #7
 8002d8c:	4904      	ldr	r1, [pc, #16]	@ (8002da0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002d8e:	5ccb      	ldrb	r3, [r1, r3]
 8002d90:	f003 031f 	and.w	r3, r3, #31
 8002d94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	bd80      	pop	{r7, pc}
 8002d9c:	40021000 	.word	0x40021000
 8002da0:	08005238 	.word	0x08005238

08002da4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002da8:	f7ff ffda 	bl	8002d60 <HAL_RCC_GetHCLKFreq>
 8002dac:	4602      	mov	r2, r0
 8002dae:	4b06      	ldr	r3, [pc, #24]	@ (8002dc8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	0adb      	lsrs	r3, r3, #11
 8002db4:	f003 0307 	and.w	r3, r3, #7
 8002db8:	4904      	ldr	r1, [pc, #16]	@ (8002dcc <HAL_RCC_GetPCLK2Freq+0x28>)
 8002dba:	5ccb      	ldrb	r3, [r1, r3]
 8002dbc:	f003 031f 	and.w	r3, r3, #31
 8002dc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	bd80      	pop	{r7, pc}
 8002dc8:	40021000 	.word	0x40021000
 8002dcc:	08005238 	.word	0x08005238

08002dd0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b086      	sub	sp, #24
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002dd8:	2300      	movs	r3, #0
 8002dda:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002ddc:	4b2a      	ldr	r3, [pc, #168]	@ (8002e88 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002dde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002de0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d003      	beq.n	8002df0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002de8:	f7ff f9ee 	bl	80021c8 <HAL_PWREx_GetVoltageRange>
 8002dec:	6178      	str	r0, [r7, #20]
 8002dee:	e014      	b.n	8002e1a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002df0:	4b25      	ldr	r3, [pc, #148]	@ (8002e88 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002df2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002df4:	4a24      	ldr	r2, [pc, #144]	@ (8002e88 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002df6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002dfa:	6593      	str	r3, [r2, #88]	@ 0x58
 8002dfc:	4b22      	ldr	r3, [pc, #136]	@ (8002e88 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002dfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e00:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e04:	60fb      	str	r3, [r7, #12]
 8002e06:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002e08:	f7ff f9de 	bl	80021c8 <HAL_PWREx_GetVoltageRange>
 8002e0c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002e0e:	4b1e      	ldr	r3, [pc, #120]	@ (8002e88 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e12:	4a1d      	ldr	r2, [pc, #116]	@ (8002e88 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e14:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e18:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002e20:	d10b      	bne.n	8002e3a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2b80      	cmp	r3, #128	@ 0x80
 8002e26:	d919      	bls.n	8002e5c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2ba0      	cmp	r3, #160	@ 0xa0
 8002e2c:	d902      	bls.n	8002e34 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002e2e:	2302      	movs	r3, #2
 8002e30:	613b      	str	r3, [r7, #16]
 8002e32:	e013      	b.n	8002e5c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002e34:	2301      	movs	r3, #1
 8002e36:	613b      	str	r3, [r7, #16]
 8002e38:	e010      	b.n	8002e5c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2b80      	cmp	r3, #128	@ 0x80
 8002e3e:	d902      	bls.n	8002e46 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002e40:	2303      	movs	r3, #3
 8002e42:	613b      	str	r3, [r7, #16]
 8002e44:	e00a      	b.n	8002e5c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2b80      	cmp	r3, #128	@ 0x80
 8002e4a:	d102      	bne.n	8002e52 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002e4c:	2302      	movs	r3, #2
 8002e4e:	613b      	str	r3, [r7, #16]
 8002e50:	e004      	b.n	8002e5c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2b70      	cmp	r3, #112	@ 0x70
 8002e56:	d101      	bne.n	8002e5c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002e58:	2301      	movs	r3, #1
 8002e5a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002e5c:	4b0b      	ldr	r3, [pc, #44]	@ (8002e8c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f023 0207 	bic.w	r2, r3, #7
 8002e64:	4909      	ldr	r1, [pc, #36]	@ (8002e8c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002e6c:	4b07      	ldr	r3, [pc, #28]	@ (8002e8c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f003 0307 	and.w	r3, r3, #7
 8002e74:	693a      	ldr	r2, [r7, #16]
 8002e76:	429a      	cmp	r2, r3
 8002e78:	d001      	beq.n	8002e7e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e000      	b.n	8002e80 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002e7e:	2300      	movs	r3, #0
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	3718      	adds	r7, #24
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}
 8002e88:	40021000 	.word	0x40021000
 8002e8c:	40022000 	.word	0x40022000

08002e90 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b086      	sub	sp, #24
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002e98:	2300      	movs	r3, #0
 8002e9a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d041      	beq.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002eb0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002eb4:	d02a      	beq.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002eb6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002eba:	d824      	bhi.n	8002f06 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002ebc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002ec0:	d008      	beq.n	8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002ec2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002ec6:	d81e      	bhi.n	8002f06 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d00a      	beq.n	8002ee2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002ecc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002ed0:	d010      	beq.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002ed2:	e018      	b.n	8002f06 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002ed4:	4b86      	ldr	r3, [pc, #536]	@ (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ed6:	68db      	ldr	r3, [r3, #12]
 8002ed8:	4a85      	ldr	r2, [pc, #532]	@ (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002eda:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ede:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002ee0:	e015      	b.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	3304      	adds	r3, #4
 8002ee6:	2100      	movs	r1, #0
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f000 fabb 	bl	8003464 <RCCEx_PLLSAI1_Config>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002ef2:	e00c      	b.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	3320      	adds	r3, #32
 8002ef8:	2100      	movs	r1, #0
 8002efa:	4618      	mov	r0, r3
 8002efc:	f000 fba6 	bl	800364c <RCCEx_PLLSAI2_Config>
 8002f00:	4603      	mov	r3, r0
 8002f02:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002f04:	e003      	b.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	74fb      	strb	r3, [r7, #19]
      break;
 8002f0a:	e000      	b.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002f0c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f0e:	7cfb      	ldrb	r3, [r7, #19]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d10b      	bne.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002f14:	4b76      	ldr	r3, [pc, #472]	@ (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f1a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002f22:	4973      	ldr	r1, [pc, #460]	@ (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f24:	4313      	orrs	r3, r2
 8002f26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002f2a:	e001      	b.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f2c:	7cfb      	ldrb	r3, [r7, #19]
 8002f2e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d041      	beq.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002f40:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002f44:	d02a      	beq.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002f46:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002f4a:	d824      	bhi.n	8002f96 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002f4c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002f50:	d008      	beq.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002f52:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002f56:	d81e      	bhi.n	8002f96 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d00a      	beq.n	8002f72 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002f5c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002f60:	d010      	beq.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002f62:	e018      	b.n	8002f96 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002f64:	4b62      	ldr	r3, [pc, #392]	@ (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f66:	68db      	ldr	r3, [r3, #12]
 8002f68:	4a61      	ldr	r2, [pc, #388]	@ (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f6a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f6e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002f70:	e015      	b.n	8002f9e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	3304      	adds	r3, #4
 8002f76:	2100      	movs	r1, #0
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f000 fa73 	bl	8003464 <RCCEx_PLLSAI1_Config>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002f82:	e00c      	b.n	8002f9e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	3320      	adds	r3, #32
 8002f88:	2100      	movs	r1, #0
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f000 fb5e 	bl	800364c <RCCEx_PLLSAI2_Config>
 8002f90:	4603      	mov	r3, r0
 8002f92:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002f94:	e003      	b.n	8002f9e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	74fb      	strb	r3, [r7, #19]
      break;
 8002f9a:	e000      	b.n	8002f9e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002f9c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f9e:	7cfb      	ldrb	r3, [r7, #19]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d10b      	bne.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002fa4:	4b52      	ldr	r3, [pc, #328]	@ (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002faa:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002fb2:	494f      	ldr	r1, [pc, #316]	@ (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002fba:	e001      	b.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fbc:	7cfb      	ldrb	r3, [r7, #19]
 8002fbe:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	f000 80a0 	beq.w	800310e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002fd2:	4b47      	ldr	r3, [pc, #284]	@ (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fd6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d101      	bne.n	8002fe2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e000      	b.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d00d      	beq.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fe8:	4b41      	ldr	r3, [pc, #260]	@ (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fec:	4a40      	ldr	r2, [pc, #256]	@ (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ff2:	6593      	str	r3, [r2, #88]	@ 0x58
 8002ff4:	4b3e      	ldr	r3, [pc, #248]	@ (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ff6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ff8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ffc:	60bb      	str	r3, [r7, #8]
 8002ffe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003000:	2301      	movs	r3, #1
 8003002:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003004:	4b3b      	ldr	r3, [pc, #236]	@ (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a3a      	ldr	r2, [pc, #232]	@ (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800300a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800300e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003010:	f7fe f938 	bl	8001284 <HAL_GetTick>
 8003014:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003016:	e009      	b.n	800302c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003018:	f7fe f934 	bl	8001284 <HAL_GetTick>
 800301c:	4602      	mov	r2, r0
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	1ad3      	subs	r3, r2, r3
 8003022:	2b02      	cmp	r3, #2
 8003024:	d902      	bls.n	800302c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003026:	2303      	movs	r3, #3
 8003028:	74fb      	strb	r3, [r7, #19]
        break;
 800302a:	e005      	b.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800302c:	4b31      	ldr	r3, [pc, #196]	@ (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003034:	2b00      	cmp	r3, #0
 8003036:	d0ef      	beq.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003038:	7cfb      	ldrb	r3, [r7, #19]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d15c      	bne.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800303e:	4b2c      	ldr	r3, [pc, #176]	@ (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003040:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003044:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003048:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d01f      	beq.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003056:	697a      	ldr	r2, [r7, #20]
 8003058:	429a      	cmp	r2, r3
 800305a:	d019      	beq.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800305c:	4b24      	ldr	r3, [pc, #144]	@ (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800305e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003062:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003066:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003068:	4b21      	ldr	r3, [pc, #132]	@ (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800306a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800306e:	4a20      	ldr	r2, [pc, #128]	@ (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003070:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003074:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003078:	4b1d      	ldr	r3, [pc, #116]	@ (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800307a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800307e:	4a1c      	ldr	r2, [pc, #112]	@ (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003080:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003084:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003088:	4a19      	ldr	r2, [pc, #100]	@ (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	f003 0301 	and.w	r3, r3, #1
 8003096:	2b00      	cmp	r3, #0
 8003098:	d016      	beq.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800309a:	f7fe f8f3 	bl	8001284 <HAL_GetTick>
 800309e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030a0:	e00b      	b.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030a2:	f7fe f8ef 	bl	8001284 <HAL_GetTick>
 80030a6:	4602      	mov	r2, r0
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	1ad3      	subs	r3, r2, r3
 80030ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d902      	bls.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80030b4:	2303      	movs	r3, #3
 80030b6:	74fb      	strb	r3, [r7, #19]
            break;
 80030b8:	e006      	b.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030ba:	4b0d      	ldr	r3, [pc, #52]	@ (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030c0:	f003 0302 	and.w	r3, r3, #2
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d0ec      	beq.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80030c8:	7cfb      	ldrb	r3, [r7, #19]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d10c      	bne.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80030ce:	4b08      	ldr	r3, [pc, #32]	@ (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030d4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80030de:	4904      	ldr	r1, [pc, #16]	@ (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030e0:	4313      	orrs	r3, r2
 80030e2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80030e6:	e009      	b.n	80030fc <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80030e8:	7cfb      	ldrb	r3, [r7, #19]
 80030ea:	74bb      	strb	r3, [r7, #18]
 80030ec:	e006      	b.n	80030fc <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80030ee:	bf00      	nop
 80030f0:	40021000 	.word	0x40021000
 80030f4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030f8:	7cfb      	ldrb	r3, [r7, #19]
 80030fa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80030fc:	7c7b      	ldrb	r3, [r7, #17]
 80030fe:	2b01      	cmp	r3, #1
 8003100:	d105      	bne.n	800310e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003102:	4b9e      	ldr	r3, [pc, #632]	@ (800337c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003104:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003106:	4a9d      	ldr	r2, [pc, #628]	@ (800337c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003108:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800310c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f003 0301 	and.w	r3, r3, #1
 8003116:	2b00      	cmp	r3, #0
 8003118:	d00a      	beq.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800311a:	4b98      	ldr	r3, [pc, #608]	@ (800337c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800311c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003120:	f023 0203 	bic.w	r2, r3, #3
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003128:	4994      	ldr	r1, [pc, #592]	@ (800337c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800312a:	4313      	orrs	r3, r2
 800312c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f003 0302 	and.w	r3, r3, #2
 8003138:	2b00      	cmp	r3, #0
 800313a:	d00a      	beq.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800313c:	4b8f      	ldr	r3, [pc, #572]	@ (800337c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800313e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003142:	f023 020c 	bic.w	r2, r3, #12
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800314a:	498c      	ldr	r1, [pc, #560]	@ (800337c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800314c:	4313      	orrs	r3, r2
 800314e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f003 0304 	and.w	r3, r3, #4
 800315a:	2b00      	cmp	r3, #0
 800315c:	d00a      	beq.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800315e:	4b87      	ldr	r3, [pc, #540]	@ (800337c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003160:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003164:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800316c:	4983      	ldr	r1, [pc, #524]	@ (800337c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800316e:	4313      	orrs	r3, r2
 8003170:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f003 0308 	and.w	r3, r3, #8
 800317c:	2b00      	cmp	r3, #0
 800317e:	d00a      	beq.n	8003196 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003180:	4b7e      	ldr	r3, [pc, #504]	@ (800337c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003182:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003186:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800318e:	497b      	ldr	r1, [pc, #492]	@ (800337c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003190:	4313      	orrs	r3, r2
 8003192:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f003 0310 	and.w	r3, r3, #16
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d00a      	beq.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80031a2:	4b76      	ldr	r3, [pc, #472]	@ (800337c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031a8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031b0:	4972      	ldr	r1, [pc, #456]	@ (800337c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031b2:	4313      	orrs	r3, r2
 80031b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f003 0320 	and.w	r3, r3, #32
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d00a      	beq.n	80031da <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80031c4:	4b6d      	ldr	r3, [pc, #436]	@ (800337c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031ca:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031d2:	496a      	ldr	r1, [pc, #424]	@ (800337c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031d4:	4313      	orrs	r3, r2
 80031d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d00a      	beq.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80031e6:	4b65      	ldr	r3, [pc, #404]	@ (800337c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031ec:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031f4:	4961      	ldr	r1, [pc, #388]	@ (800337c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031f6:	4313      	orrs	r3, r2
 80031f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003204:	2b00      	cmp	r3, #0
 8003206:	d00a      	beq.n	800321e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003208:	4b5c      	ldr	r3, [pc, #368]	@ (800337c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800320a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800320e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003216:	4959      	ldr	r1, [pc, #356]	@ (800337c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003218:	4313      	orrs	r3, r2
 800321a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003226:	2b00      	cmp	r3, #0
 8003228:	d00a      	beq.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800322a:	4b54      	ldr	r3, [pc, #336]	@ (800337c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800322c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003230:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003238:	4950      	ldr	r1, [pc, #320]	@ (800337c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800323a:	4313      	orrs	r3, r2
 800323c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003248:	2b00      	cmp	r3, #0
 800324a:	d00a      	beq.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800324c:	4b4b      	ldr	r3, [pc, #300]	@ (800337c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800324e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003252:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800325a:	4948      	ldr	r1, [pc, #288]	@ (800337c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800325c:	4313      	orrs	r3, r2
 800325e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800326a:	2b00      	cmp	r3, #0
 800326c:	d00a      	beq.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800326e:	4b43      	ldr	r3, [pc, #268]	@ (800337c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003270:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003274:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800327c:	493f      	ldr	r1, [pc, #252]	@ (800337c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800327e:	4313      	orrs	r3, r2
 8003280:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800328c:	2b00      	cmp	r3, #0
 800328e:	d028      	beq.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003290:	4b3a      	ldr	r3, [pc, #232]	@ (800337c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003292:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003296:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800329e:	4937      	ldr	r1, [pc, #220]	@ (800337c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032a0:	4313      	orrs	r3, r2
 80032a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80032aa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80032ae:	d106      	bne.n	80032be <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80032b0:	4b32      	ldr	r3, [pc, #200]	@ (800337c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032b2:	68db      	ldr	r3, [r3, #12]
 80032b4:	4a31      	ldr	r2, [pc, #196]	@ (800337c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032b6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80032ba:	60d3      	str	r3, [r2, #12]
 80032bc:	e011      	b.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80032c2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80032c6:	d10c      	bne.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	3304      	adds	r3, #4
 80032cc:	2101      	movs	r1, #1
 80032ce:	4618      	mov	r0, r3
 80032d0:	f000 f8c8 	bl	8003464 <RCCEx_PLLSAI1_Config>
 80032d4:	4603      	mov	r3, r0
 80032d6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80032d8:	7cfb      	ldrb	r3, [r7, #19]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d001      	beq.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80032de:	7cfb      	ldrb	r3, [r7, #19]
 80032e0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d028      	beq.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80032ee:	4b23      	ldr	r3, [pc, #140]	@ (800337c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032f4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032fc:	491f      	ldr	r1, [pc, #124]	@ (800337c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032fe:	4313      	orrs	r3, r2
 8003300:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003308:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800330c:	d106      	bne.n	800331c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800330e:	4b1b      	ldr	r3, [pc, #108]	@ (800337c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003310:	68db      	ldr	r3, [r3, #12]
 8003312:	4a1a      	ldr	r2, [pc, #104]	@ (800337c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003314:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003318:	60d3      	str	r3, [r2, #12]
 800331a:	e011      	b.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003320:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003324:	d10c      	bne.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	3304      	adds	r3, #4
 800332a:	2101      	movs	r1, #1
 800332c:	4618      	mov	r0, r3
 800332e:	f000 f899 	bl	8003464 <RCCEx_PLLSAI1_Config>
 8003332:	4603      	mov	r3, r0
 8003334:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003336:	7cfb      	ldrb	r3, [r7, #19]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d001      	beq.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800333c:	7cfb      	ldrb	r3, [r7, #19]
 800333e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003348:	2b00      	cmp	r3, #0
 800334a:	d02b      	beq.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800334c:	4b0b      	ldr	r3, [pc, #44]	@ (800337c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800334e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003352:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800335a:	4908      	ldr	r1, [pc, #32]	@ (800337c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800335c:	4313      	orrs	r3, r2
 800335e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003366:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800336a:	d109      	bne.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800336c:	4b03      	ldr	r3, [pc, #12]	@ (800337c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800336e:	68db      	ldr	r3, [r3, #12]
 8003370:	4a02      	ldr	r2, [pc, #8]	@ (800337c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003372:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003376:	60d3      	str	r3, [r2, #12]
 8003378:	e014      	b.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800337a:	bf00      	nop
 800337c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003384:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003388:	d10c      	bne.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	3304      	adds	r3, #4
 800338e:	2101      	movs	r1, #1
 8003390:	4618      	mov	r0, r3
 8003392:	f000 f867 	bl	8003464 <RCCEx_PLLSAI1_Config>
 8003396:	4603      	mov	r3, r0
 8003398:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800339a:	7cfb      	ldrb	r3, [r7, #19]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d001      	beq.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80033a0:	7cfb      	ldrb	r3, [r7, #19]
 80033a2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d02f      	beq.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80033b0:	4b2b      	ldr	r3, [pc, #172]	@ (8003460 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80033b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033b6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80033be:	4928      	ldr	r1, [pc, #160]	@ (8003460 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80033c0:	4313      	orrs	r3, r2
 80033c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80033ca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80033ce:	d10d      	bne.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	3304      	adds	r3, #4
 80033d4:	2102      	movs	r1, #2
 80033d6:	4618      	mov	r0, r3
 80033d8:	f000 f844 	bl	8003464 <RCCEx_PLLSAI1_Config>
 80033dc:	4603      	mov	r3, r0
 80033de:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80033e0:	7cfb      	ldrb	r3, [r7, #19]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d014      	beq.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80033e6:	7cfb      	ldrb	r3, [r7, #19]
 80033e8:	74bb      	strb	r3, [r7, #18]
 80033ea:	e011      	b.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80033f0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80033f4:	d10c      	bne.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	3320      	adds	r3, #32
 80033fa:	2102      	movs	r1, #2
 80033fc:	4618      	mov	r0, r3
 80033fe:	f000 f925 	bl	800364c <RCCEx_PLLSAI2_Config>
 8003402:	4603      	mov	r3, r0
 8003404:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003406:	7cfb      	ldrb	r3, [r7, #19]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d001      	beq.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800340c:	7cfb      	ldrb	r3, [r7, #19]
 800340e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003418:	2b00      	cmp	r3, #0
 800341a:	d00a      	beq.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800341c:	4b10      	ldr	r3, [pc, #64]	@ (8003460 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800341e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003422:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800342a:	490d      	ldr	r1, [pc, #52]	@ (8003460 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800342c:	4313      	orrs	r3, r2
 800342e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800343a:	2b00      	cmp	r3, #0
 800343c:	d00b      	beq.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800343e:	4b08      	ldr	r3, [pc, #32]	@ (8003460 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003440:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003444:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800344e:	4904      	ldr	r1, [pc, #16]	@ (8003460 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003450:	4313      	orrs	r3, r2
 8003452:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003456:	7cbb      	ldrb	r3, [r7, #18]
}
 8003458:	4618      	mov	r0, r3
 800345a:	3718      	adds	r7, #24
 800345c:	46bd      	mov	sp, r7
 800345e:	bd80      	pop	{r7, pc}
 8003460:	40021000 	.word	0x40021000

08003464 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b084      	sub	sp, #16
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
 800346c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800346e:	2300      	movs	r3, #0
 8003470:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003472:	4b75      	ldr	r3, [pc, #468]	@ (8003648 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003474:	68db      	ldr	r3, [r3, #12]
 8003476:	f003 0303 	and.w	r3, r3, #3
 800347a:	2b00      	cmp	r3, #0
 800347c:	d018      	beq.n	80034b0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800347e:	4b72      	ldr	r3, [pc, #456]	@ (8003648 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003480:	68db      	ldr	r3, [r3, #12]
 8003482:	f003 0203 	and.w	r2, r3, #3
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	429a      	cmp	r2, r3
 800348c:	d10d      	bne.n	80034aa <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
       ||
 8003492:	2b00      	cmp	r3, #0
 8003494:	d009      	beq.n	80034aa <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003496:	4b6c      	ldr	r3, [pc, #432]	@ (8003648 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003498:	68db      	ldr	r3, [r3, #12]
 800349a:	091b      	lsrs	r3, r3, #4
 800349c:	f003 0307 	and.w	r3, r3, #7
 80034a0:	1c5a      	adds	r2, r3, #1
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	685b      	ldr	r3, [r3, #4]
       ||
 80034a6:	429a      	cmp	r2, r3
 80034a8:	d047      	beq.n	800353a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	73fb      	strb	r3, [r7, #15]
 80034ae:	e044      	b.n	800353a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	2b03      	cmp	r3, #3
 80034b6:	d018      	beq.n	80034ea <RCCEx_PLLSAI1_Config+0x86>
 80034b8:	2b03      	cmp	r3, #3
 80034ba:	d825      	bhi.n	8003508 <RCCEx_PLLSAI1_Config+0xa4>
 80034bc:	2b01      	cmp	r3, #1
 80034be:	d002      	beq.n	80034c6 <RCCEx_PLLSAI1_Config+0x62>
 80034c0:	2b02      	cmp	r3, #2
 80034c2:	d009      	beq.n	80034d8 <RCCEx_PLLSAI1_Config+0x74>
 80034c4:	e020      	b.n	8003508 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80034c6:	4b60      	ldr	r3, [pc, #384]	@ (8003648 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f003 0302 	and.w	r3, r3, #2
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d11d      	bne.n	800350e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034d6:	e01a      	b.n	800350e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80034d8:	4b5b      	ldr	r3, [pc, #364]	@ (8003648 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d116      	bne.n	8003512 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80034e4:	2301      	movs	r3, #1
 80034e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034e8:	e013      	b.n	8003512 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80034ea:	4b57      	ldr	r3, [pc, #348]	@ (8003648 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d10f      	bne.n	8003516 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80034f6:	4b54      	ldr	r3, [pc, #336]	@ (8003648 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d109      	bne.n	8003516 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003506:	e006      	b.n	8003516 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	73fb      	strb	r3, [r7, #15]
      break;
 800350c:	e004      	b.n	8003518 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800350e:	bf00      	nop
 8003510:	e002      	b.n	8003518 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003512:	bf00      	nop
 8003514:	e000      	b.n	8003518 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003516:	bf00      	nop
    }

    if(status == HAL_OK)
 8003518:	7bfb      	ldrb	r3, [r7, #15]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d10d      	bne.n	800353a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800351e:	4b4a      	ldr	r3, [pc, #296]	@ (8003648 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003520:	68db      	ldr	r3, [r3, #12]
 8003522:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6819      	ldr	r1, [r3, #0]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	3b01      	subs	r3, #1
 8003530:	011b      	lsls	r3, r3, #4
 8003532:	430b      	orrs	r3, r1
 8003534:	4944      	ldr	r1, [pc, #272]	@ (8003648 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003536:	4313      	orrs	r3, r2
 8003538:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800353a:	7bfb      	ldrb	r3, [r7, #15]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d17d      	bne.n	800363c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003540:	4b41      	ldr	r3, [pc, #260]	@ (8003648 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a40      	ldr	r2, [pc, #256]	@ (8003648 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003546:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800354a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800354c:	f7fd fe9a 	bl	8001284 <HAL_GetTick>
 8003550:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003552:	e009      	b.n	8003568 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003554:	f7fd fe96 	bl	8001284 <HAL_GetTick>
 8003558:	4602      	mov	r2, r0
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	1ad3      	subs	r3, r2, r3
 800355e:	2b02      	cmp	r3, #2
 8003560:	d902      	bls.n	8003568 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003562:	2303      	movs	r3, #3
 8003564:	73fb      	strb	r3, [r7, #15]
        break;
 8003566:	e005      	b.n	8003574 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003568:	4b37      	ldr	r3, [pc, #220]	@ (8003648 <RCCEx_PLLSAI1_Config+0x1e4>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003570:	2b00      	cmp	r3, #0
 8003572:	d1ef      	bne.n	8003554 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003574:	7bfb      	ldrb	r3, [r7, #15]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d160      	bne.n	800363c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d111      	bne.n	80035a4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003580:	4b31      	ldr	r3, [pc, #196]	@ (8003648 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003582:	691b      	ldr	r3, [r3, #16]
 8003584:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003588:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800358c:	687a      	ldr	r2, [r7, #4]
 800358e:	6892      	ldr	r2, [r2, #8]
 8003590:	0211      	lsls	r1, r2, #8
 8003592:	687a      	ldr	r2, [r7, #4]
 8003594:	68d2      	ldr	r2, [r2, #12]
 8003596:	0912      	lsrs	r2, r2, #4
 8003598:	0452      	lsls	r2, r2, #17
 800359a:	430a      	orrs	r2, r1
 800359c:	492a      	ldr	r1, [pc, #168]	@ (8003648 <RCCEx_PLLSAI1_Config+0x1e4>)
 800359e:	4313      	orrs	r3, r2
 80035a0:	610b      	str	r3, [r1, #16]
 80035a2:	e027      	b.n	80035f4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	2b01      	cmp	r3, #1
 80035a8:	d112      	bne.n	80035d0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80035aa:	4b27      	ldr	r3, [pc, #156]	@ (8003648 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035ac:	691b      	ldr	r3, [r3, #16]
 80035ae:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80035b2:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80035b6:	687a      	ldr	r2, [r7, #4]
 80035b8:	6892      	ldr	r2, [r2, #8]
 80035ba:	0211      	lsls	r1, r2, #8
 80035bc:	687a      	ldr	r2, [r7, #4]
 80035be:	6912      	ldr	r2, [r2, #16]
 80035c0:	0852      	lsrs	r2, r2, #1
 80035c2:	3a01      	subs	r2, #1
 80035c4:	0552      	lsls	r2, r2, #21
 80035c6:	430a      	orrs	r2, r1
 80035c8:	491f      	ldr	r1, [pc, #124]	@ (8003648 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035ca:	4313      	orrs	r3, r2
 80035cc:	610b      	str	r3, [r1, #16]
 80035ce:	e011      	b.n	80035f4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80035d0:	4b1d      	ldr	r3, [pc, #116]	@ (8003648 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035d2:	691b      	ldr	r3, [r3, #16]
 80035d4:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80035d8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80035dc:	687a      	ldr	r2, [r7, #4]
 80035de:	6892      	ldr	r2, [r2, #8]
 80035e0:	0211      	lsls	r1, r2, #8
 80035e2:	687a      	ldr	r2, [r7, #4]
 80035e4:	6952      	ldr	r2, [r2, #20]
 80035e6:	0852      	lsrs	r2, r2, #1
 80035e8:	3a01      	subs	r2, #1
 80035ea:	0652      	lsls	r2, r2, #25
 80035ec:	430a      	orrs	r2, r1
 80035ee:	4916      	ldr	r1, [pc, #88]	@ (8003648 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035f0:	4313      	orrs	r3, r2
 80035f2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80035f4:	4b14      	ldr	r3, [pc, #80]	@ (8003648 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a13      	ldr	r2, [pc, #76]	@ (8003648 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035fa:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80035fe:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003600:	f7fd fe40 	bl	8001284 <HAL_GetTick>
 8003604:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003606:	e009      	b.n	800361c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003608:	f7fd fe3c 	bl	8001284 <HAL_GetTick>
 800360c:	4602      	mov	r2, r0
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	1ad3      	subs	r3, r2, r3
 8003612:	2b02      	cmp	r3, #2
 8003614:	d902      	bls.n	800361c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003616:	2303      	movs	r3, #3
 8003618:	73fb      	strb	r3, [r7, #15]
          break;
 800361a:	e005      	b.n	8003628 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800361c:	4b0a      	ldr	r3, [pc, #40]	@ (8003648 <RCCEx_PLLSAI1_Config+0x1e4>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003624:	2b00      	cmp	r3, #0
 8003626:	d0ef      	beq.n	8003608 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003628:	7bfb      	ldrb	r3, [r7, #15]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d106      	bne.n	800363c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800362e:	4b06      	ldr	r3, [pc, #24]	@ (8003648 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003630:	691a      	ldr	r2, [r3, #16]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	699b      	ldr	r3, [r3, #24]
 8003636:	4904      	ldr	r1, [pc, #16]	@ (8003648 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003638:	4313      	orrs	r3, r2
 800363a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800363c:	7bfb      	ldrb	r3, [r7, #15]
}
 800363e:	4618      	mov	r0, r3
 8003640:	3710      	adds	r7, #16
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}
 8003646:	bf00      	nop
 8003648:	40021000 	.word	0x40021000

0800364c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b084      	sub	sp, #16
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
 8003654:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003656:	2300      	movs	r3, #0
 8003658:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800365a:	4b6a      	ldr	r3, [pc, #424]	@ (8003804 <RCCEx_PLLSAI2_Config+0x1b8>)
 800365c:	68db      	ldr	r3, [r3, #12]
 800365e:	f003 0303 	and.w	r3, r3, #3
 8003662:	2b00      	cmp	r3, #0
 8003664:	d018      	beq.n	8003698 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003666:	4b67      	ldr	r3, [pc, #412]	@ (8003804 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003668:	68db      	ldr	r3, [r3, #12]
 800366a:	f003 0203 	and.w	r2, r3, #3
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	429a      	cmp	r2, r3
 8003674:	d10d      	bne.n	8003692 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
       ||
 800367a:	2b00      	cmp	r3, #0
 800367c:	d009      	beq.n	8003692 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800367e:	4b61      	ldr	r3, [pc, #388]	@ (8003804 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003680:	68db      	ldr	r3, [r3, #12]
 8003682:	091b      	lsrs	r3, r3, #4
 8003684:	f003 0307 	and.w	r3, r3, #7
 8003688:	1c5a      	adds	r2, r3, #1
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	685b      	ldr	r3, [r3, #4]
       ||
 800368e:	429a      	cmp	r2, r3
 8003690:	d047      	beq.n	8003722 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003692:	2301      	movs	r3, #1
 8003694:	73fb      	strb	r3, [r7, #15]
 8003696:	e044      	b.n	8003722 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	2b03      	cmp	r3, #3
 800369e:	d018      	beq.n	80036d2 <RCCEx_PLLSAI2_Config+0x86>
 80036a0:	2b03      	cmp	r3, #3
 80036a2:	d825      	bhi.n	80036f0 <RCCEx_PLLSAI2_Config+0xa4>
 80036a4:	2b01      	cmp	r3, #1
 80036a6:	d002      	beq.n	80036ae <RCCEx_PLLSAI2_Config+0x62>
 80036a8:	2b02      	cmp	r3, #2
 80036aa:	d009      	beq.n	80036c0 <RCCEx_PLLSAI2_Config+0x74>
 80036ac:	e020      	b.n	80036f0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80036ae:	4b55      	ldr	r3, [pc, #340]	@ (8003804 <RCCEx_PLLSAI2_Config+0x1b8>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f003 0302 	and.w	r3, r3, #2
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d11d      	bne.n	80036f6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036be:	e01a      	b.n	80036f6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80036c0:	4b50      	ldr	r3, [pc, #320]	@ (8003804 <RCCEx_PLLSAI2_Config+0x1b8>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d116      	bne.n	80036fa <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80036cc:	2301      	movs	r3, #1
 80036ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036d0:	e013      	b.n	80036fa <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80036d2:	4b4c      	ldr	r3, [pc, #304]	@ (8003804 <RCCEx_PLLSAI2_Config+0x1b8>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d10f      	bne.n	80036fe <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80036de:	4b49      	ldr	r3, [pc, #292]	@ (8003804 <RCCEx_PLLSAI2_Config+0x1b8>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d109      	bne.n	80036fe <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80036ee:	e006      	b.n	80036fe <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80036f0:	2301      	movs	r3, #1
 80036f2:	73fb      	strb	r3, [r7, #15]
      break;
 80036f4:	e004      	b.n	8003700 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80036f6:	bf00      	nop
 80036f8:	e002      	b.n	8003700 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80036fa:	bf00      	nop
 80036fc:	e000      	b.n	8003700 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80036fe:	bf00      	nop
    }

    if(status == HAL_OK)
 8003700:	7bfb      	ldrb	r3, [r7, #15]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d10d      	bne.n	8003722 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003706:	4b3f      	ldr	r3, [pc, #252]	@ (8003804 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003708:	68db      	ldr	r3, [r3, #12]
 800370a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6819      	ldr	r1, [r3, #0]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	3b01      	subs	r3, #1
 8003718:	011b      	lsls	r3, r3, #4
 800371a:	430b      	orrs	r3, r1
 800371c:	4939      	ldr	r1, [pc, #228]	@ (8003804 <RCCEx_PLLSAI2_Config+0x1b8>)
 800371e:	4313      	orrs	r3, r2
 8003720:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003722:	7bfb      	ldrb	r3, [r7, #15]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d167      	bne.n	80037f8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003728:	4b36      	ldr	r3, [pc, #216]	@ (8003804 <RCCEx_PLLSAI2_Config+0x1b8>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a35      	ldr	r2, [pc, #212]	@ (8003804 <RCCEx_PLLSAI2_Config+0x1b8>)
 800372e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003732:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003734:	f7fd fda6 	bl	8001284 <HAL_GetTick>
 8003738:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800373a:	e009      	b.n	8003750 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800373c:	f7fd fda2 	bl	8001284 <HAL_GetTick>
 8003740:	4602      	mov	r2, r0
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	1ad3      	subs	r3, r2, r3
 8003746:	2b02      	cmp	r3, #2
 8003748:	d902      	bls.n	8003750 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800374a:	2303      	movs	r3, #3
 800374c:	73fb      	strb	r3, [r7, #15]
        break;
 800374e:	e005      	b.n	800375c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003750:	4b2c      	ldr	r3, [pc, #176]	@ (8003804 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003758:	2b00      	cmp	r3, #0
 800375a:	d1ef      	bne.n	800373c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800375c:	7bfb      	ldrb	r3, [r7, #15]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d14a      	bne.n	80037f8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d111      	bne.n	800378c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003768:	4b26      	ldr	r3, [pc, #152]	@ (8003804 <RCCEx_PLLSAI2_Config+0x1b8>)
 800376a:	695b      	ldr	r3, [r3, #20]
 800376c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003770:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003774:	687a      	ldr	r2, [r7, #4]
 8003776:	6892      	ldr	r2, [r2, #8]
 8003778:	0211      	lsls	r1, r2, #8
 800377a:	687a      	ldr	r2, [r7, #4]
 800377c:	68d2      	ldr	r2, [r2, #12]
 800377e:	0912      	lsrs	r2, r2, #4
 8003780:	0452      	lsls	r2, r2, #17
 8003782:	430a      	orrs	r2, r1
 8003784:	491f      	ldr	r1, [pc, #124]	@ (8003804 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003786:	4313      	orrs	r3, r2
 8003788:	614b      	str	r3, [r1, #20]
 800378a:	e011      	b.n	80037b0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800378c:	4b1d      	ldr	r3, [pc, #116]	@ (8003804 <RCCEx_PLLSAI2_Config+0x1b8>)
 800378e:	695b      	ldr	r3, [r3, #20]
 8003790:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003794:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003798:	687a      	ldr	r2, [r7, #4]
 800379a:	6892      	ldr	r2, [r2, #8]
 800379c:	0211      	lsls	r1, r2, #8
 800379e:	687a      	ldr	r2, [r7, #4]
 80037a0:	6912      	ldr	r2, [r2, #16]
 80037a2:	0852      	lsrs	r2, r2, #1
 80037a4:	3a01      	subs	r2, #1
 80037a6:	0652      	lsls	r2, r2, #25
 80037a8:	430a      	orrs	r2, r1
 80037aa:	4916      	ldr	r1, [pc, #88]	@ (8003804 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037ac:	4313      	orrs	r3, r2
 80037ae:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80037b0:	4b14      	ldr	r3, [pc, #80]	@ (8003804 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a13      	ldr	r2, [pc, #76]	@ (8003804 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80037ba:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037bc:	f7fd fd62 	bl	8001284 <HAL_GetTick>
 80037c0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80037c2:	e009      	b.n	80037d8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80037c4:	f7fd fd5e 	bl	8001284 <HAL_GetTick>
 80037c8:	4602      	mov	r2, r0
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	1ad3      	subs	r3, r2, r3
 80037ce:	2b02      	cmp	r3, #2
 80037d0:	d902      	bls.n	80037d8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80037d2:	2303      	movs	r3, #3
 80037d4:	73fb      	strb	r3, [r7, #15]
          break;
 80037d6:	e005      	b.n	80037e4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80037d8:	4b0a      	ldr	r3, [pc, #40]	@ (8003804 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d0ef      	beq.n	80037c4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80037e4:	7bfb      	ldrb	r3, [r7, #15]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d106      	bne.n	80037f8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80037ea:	4b06      	ldr	r3, [pc, #24]	@ (8003804 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037ec:	695a      	ldr	r2, [r3, #20]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	695b      	ldr	r3, [r3, #20]
 80037f2:	4904      	ldr	r1, [pc, #16]	@ (8003804 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037f4:	4313      	orrs	r3, r2
 80037f6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80037f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	3710      	adds	r7, #16
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}
 8003802:	bf00      	nop
 8003804:	40021000 	.word	0x40021000

08003808 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b082      	sub	sp, #8
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d101      	bne.n	800381a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	e049      	b.n	80038ae <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003820:	b2db      	uxtb	r3, r3
 8003822:	2b00      	cmp	r3, #0
 8003824:	d106      	bne.n	8003834 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2200      	movs	r2, #0
 800382a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	f7fd fbc6 	bl	8000fc0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2202      	movs	r2, #2
 8003838:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681a      	ldr	r2, [r3, #0]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	3304      	adds	r3, #4
 8003844:	4619      	mov	r1, r3
 8003846:	4610      	mov	r0, r2
 8003848:	f000 f89e 	bl	8003988 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2201      	movs	r2, #1
 8003850:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2201      	movs	r2, #1
 8003858:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2201      	movs	r2, #1
 8003860:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2201      	movs	r2, #1
 8003868:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2201      	movs	r2, #1
 8003870:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2201      	movs	r2, #1
 8003878:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2201      	movs	r2, #1
 8003880:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2201      	movs	r2, #1
 8003888:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2201      	movs	r2, #1
 8003890:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2201      	movs	r2, #1
 8003898:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2201      	movs	r2, #1
 80038a0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2201      	movs	r2, #1
 80038a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80038ac:	2300      	movs	r3, #0
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	3708      	adds	r7, #8
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd80      	pop	{r7, pc}
	...

080038b8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80038b8:	b480      	push	{r7}
 80038ba:	b085      	sub	sp, #20
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80038c6:	b2db      	uxtb	r3, r3
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	d001      	beq.n	80038d0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80038cc:	2301      	movs	r3, #1
 80038ce:	e047      	b.n	8003960 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2202      	movs	r2, #2
 80038d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a23      	ldr	r2, [pc, #140]	@ (800396c <HAL_TIM_Base_Start+0xb4>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d01d      	beq.n	800391e <HAL_TIM_Base_Start+0x66>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038ea:	d018      	beq.n	800391e <HAL_TIM_Base_Start+0x66>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a1f      	ldr	r2, [pc, #124]	@ (8003970 <HAL_TIM_Base_Start+0xb8>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d013      	beq.n	800391e <HAL_TIM_Base_Start+0x66>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a1e      	ldr	r2, [pc, #120]	@ (8003974 <HAL_TIM_Base_Start+0xbc>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d00e      	beq.n	800391e <HAL_TIM_Base_Start+0x66>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a1c      	ldr	r2, [pc, #112]	@ (8003978 <HAL_TIM_Base_Start+0xc0>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d009      	beq.n	800391e <HAL_TIM_Base_Start+0x66>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a1b      	ldr	r2, [pc, #108]	@ (800397c <HAL_TIM_Base_Start+0xc4>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d004      	beq.n	800391e <HAL_TIM_Base_Start+0x66>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a19      	ldr	r2, [pc, #100]	@ (8003980 <HAL_TIM_Base_Start+0xc8>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d115      	bne.n	800394a <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	689a      	ldr	r2, [r3, #8]
 8003924:	4b17      	ldr	r3, [pc, #92]	@ (8003984 <HAL_TIM_Base_Start+0xcc>)
 8003926:	4013      	ands	r3, r2
 8003928:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	2b06      	cmp	r3, #6
 800392e:	d015      	beq.n	800395c <HAL_TIM_Base_Start+0xa4>
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003936:	d011      	beq.n	800395c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	681a      	ldr	r2, [r3, #0]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f042 0201 	orr.w	r2, r2, #1
 8003946:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003948:	e008      	b.n	800395c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	681a      	ldr	r2, [r3, #0]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f042 0201 	orr.w	r2, r2, #1
 8003958:	601a      	str	r2, [r3, #0]
 800395a:	e000      	b.n	800395e <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800395c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800395e:	2300      	movs	r3, #0
}
 8003960:	4618      	mov	r0, r3
 8003962:	3714      	adds	r7, #20
 8003964:	46bd      	mov	sp, r7
 8003966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396a:	4770      	bx	lr
 800396c:	40012c00 	.word	0x40012c00
 8003970:	40000400 	.word	0x40000400
 8003974:	40000800 	.word	0x40000800
 8003978:	40000c00 	.word	0x40000c00
 800397c:	40013400 	.word	0x40013400
 8003980:	40014000 	.word	0x40014000
 8003984:	00010007 	.word	0x00010007

08003988 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003988:	b480      	push	{r7}
 800398a:	b085      	sub	sp, #20
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
 8003990:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	4a46      	ldr	r2, [pc, #280]	@ (8003ab4 <TIM_Base_SetConfig+0x12c>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d013      	beq.n	80039c8 <TIM_Base_SetConfig+0x40>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039a6:	d00f      	beq.n	80039c8 <TIM_Base_SetConfig+0x40>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	4a43      	ldr	r2, [pc, #268]	@ (8003ab8 <TIM_Base_SetConfig+0x130>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d00b      	beq.n	80039c8 <TIM_Base_SetConfig+0x40>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	4a42      	ldr	r2, [pc, #264]	@ (8003abc <TIM_Base_SetConfig+0x134>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d007      	beq.n	80039c8 <TIM_Base_SetConfig+0x40>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	4a41      	ldr	r2, [pc, #260]	@ (8003ac0 <TIM_Base_SetConfig+0x138>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d003      	beq.n	80039c8 <TIM_Base_SetConfig+0x40>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	4a40      	ldr	r2, [pc, #256]	@ (8003ac4 <TIM_Base_SetConfig+0x13c>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d108      	bne.n	80039da <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80039ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	68fa      	ldr	r2, [r7, #12]
 80039d6:	4313      	orrs	r3, r2
 80039d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	4a35      	ldr	r2, [pc, #212]	@ (8003ab4 <TIM_Base_SetConfig+0x12c>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d01f      	beq.n	8003a22 <TIM_Base_SetConfig+0x9a>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039e8:	d01b      	beq.n	8003a22 <TIM_Base_SetConfig+0x9a>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	4a32      	ldr	r2, [pc, #200]	@ (8003ab8 <TIM_Base_SetConfig+0x130>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d017      	beq.n	8003a22 <TIM_Base_SetConfig+0x9a>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	4a31      	ldr	r2, [pc, #196]	@ (8003abc <TIM_Base_SetConfig+0x134>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d013      	beq.n	8003a22 <TIM_Base_SetConfig+0x9a>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	4a30      	ldr	r2, [pc, #192]	@ (8003ac0 <TIM_Base_SetConfig+0x138>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d00f      	beq.n	8003a22 <TIM_Base_SetConfig+0x9a>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	4a2f      	ldr	r2, [pc, #188]	@ (8003ac4 <TIM_Base_SetConfig+0x13c>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d00b      	beq.n	8003a22 <TIM_Base_SetConfig+0x9a>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	4a2e      	ldr	r2, [pc, #184]	@ (8003ac8 <TIM_Base_SetConfig+0x140>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d007      	beq.n	8003a22 <TIM_Base_SetConfig+0x9a>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	4a2d      	ldr	r2, [pc, #180]	@ (8003acc <TIM_Base_SetConfig+0x144>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d003      	beq.n	8003a22 <TIM_Base_SetConfig+0x9a>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	4a2c      	ldr	r2, [pc, #176]	@ (8003ad0 <TIM_Base_SetConfig+0x148>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d108      	bne.n	8003a34 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	68db      	ldr	r3, [r3, #12]
 8003a2e:	68fa      	ldr	r2, [r7, #12]
 8003a30:	4313      	orrs	r3, r2
 8003a32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	695b      	ldr	r3, [r3, #20]
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	68fa      	ldr	r2, [r7, #12]
 8003a46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	689a      	ldr	r2, [r3, #8]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	681a      	ldr	r2, [r3, #0]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	4a16      	ldr	r2, [pc, #88]	@ (8003ab4 <TIM_Base_SetConfig+0x12c>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d00f      	beq.n	8003a80 <TIM_Base_SetConfig+0xf8>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	4a18      	ldr	r2, [pc, #96]	@ (8003ac4 <TIM_Base_SetConfig+0x13c>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d00b      	beq.n	8003a80 <TIM_Base_SetConfig+0xf8>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	4a17      	ldr	r2, [pc, #92]	@ (8003ac8 <TIM_Base_SetConfig+0x140>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d007      	beq.n	8003a80 <TIM_Base_SetConfig+0xf8>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	4a16      	ldr	r2, [pc, #88]	@ (8003acc <TIM_Base_SetConfig+0x144>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d003      	beq.n	8003a80 <TIM_Base_SetConfig+0xf8>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	4a15      	ldr	r2, [pc, #84]	@ (8003ad0 <TIM_Base_SetConfig+0x148>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d103      	bne.n	8003a88 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	691a      	ldr	r2, [r3, #16]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	691b      	ldr	r3, [r3, #16]
 8003a92:	f003 0301 	and.w	r3, r3, #1
 8003a96:	2b01      	cmp	r3, #1
 8003a98:	d105      	bne.n	8003aa6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	691b      	ldr	r3, [r3, #16]
 8003a9e:	f023 0201 	bic.w	r2, r3, #1
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	611a      	str	r2, [r3, #16]
  }
}
 8003aa6:	bf00      	nop
 8003aa8:	3714      	adds	r7, #20
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab0:	4770      	bx	lr
 8003ab2:	bf00      	nop
 8003ab4:	40012c00 	.word	0x40012c00
 8003ab8:	40000400 	.word	0x40000400
 8003abc:	40000800 	.word	0x40000800
 8003ac0:	40000c00 	.word	0x40000c00
 8003ac4:	40013400 	.word	0x40013400
 8003ac8:	40014000 	.word	0x40014000
 8003acc:	40014400 	.word	0x40014400
 8003ad0:	40014800 	.word	0x40014800

08003ad4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b085      	sub	sp, #20
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
 8003adc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ae4:	2b01      	cmp	r3, #1
 8003ae6:	d101      	bne.n	8003aec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003ae8:	2302      	movs	r3, #2
 8003aea:	e068      	b.n	8003bbe <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2201      	movs	r2, #1
 8003af0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2202      	movs	r2, #2
 8003af8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	689b      	ldr	r3, [r3, #8]
 8003b0a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a2e      	ldr	r2, [pc, #184]	@ (8003bcc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d004      	beq.n	8003b20 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a2d      	ldr	r2, [pc, #180]	@ (8003bd0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d108      	bne.n	8003b32 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003b26:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	68fa      	ldr	r2, [r7, #12]
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b38:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	68fa      	ldr	r2, [r7, #12]
 8003b40:	4313      	orrs	r3, r2
 8003b42:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	68fa      	ldr	r2, [r7, #12]
 8003b4a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a1e      	ldr	r2, [pc, #120]	@ (8003bcc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d01d      	beq.n	8003b92 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b5e:	d018      	beq.n	8003b92 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a1b      	ldr	r2, [pc, #108]	@ (8003bd4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d013      	beq.n	8003b92 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a1a      	ldr	r2, [pc, #104]	@ (8003bd8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d00e      	beq.n	8003b92 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a18      	ldr	r2, [pc, #96]	@ (8003bdc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d009      	beq.n	8003b92 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a13      	ldr	r2, [pc, #76]	@ (8003bd0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d004      	beq.n	8003b92 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a14      	ldr	r2, [pc, #80]	@ (8003be0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d10c      	bne.n	8003bac <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003b98:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	689b      	ldr	r3, [r3, #8]
 8003b9e:	68ba      	ldr	r2, [r7, #8]
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	68ba      	ldr	r2, [r7, #8]
 8003baa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2201      	movs	r2, #1
 8003bb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003bbc:	2300      	movs	r3, #0
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	3714      	adds	r7, #20
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc8:	4770      	bx	lr
 8003bca:	bf00      	nop
 8003bcc:	40012c00 	.word	0x40012c00
 8003bd0:	40013400 	.word	0x40013400
 8003bd4:	40000400 	.word	0x40000400
 8003bd8:	40000800 	.word	0x40000800
 8003bdc:	40000c00 	.word	0x40000c00
 8003be0:	40014000 	.word	0x40014000

08003be4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b082      	sub	sp, #8
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d101      	bne.n	8003bf6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	e040      	b.n	8003c78 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d106      	bne.n	8003c0c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2200      	movs	r2, #0
 8003c02:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c06:	6878      	ldr	r0, [r7, #4]
 8003c08:	f7fd f9fa 	bl	8001000 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2224      	movs	r2, #36	@ 0x24
 8003c10:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f022 0201 	bic.w	r2, r2, #1
 8003c20:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d002      	beq.n	8003c30 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	f000 fae0 	bl	80041f0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003c30:	6878      	ldr	r0, [r7, #4]
 8003c32:	f000 f825 	bl	8003c80 <UART_SetConfig>
 8003c36:	4603      	mov	r3, r0
 8003c38:	2b01      	cmp	r3, #1
 8003c3a:	d101      	bne.n	8003c40 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	e01b      	b.n	8003c78 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	685a      	ldr	r2, [r3, #4]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003c4e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	689a      	ldr	r2, [r3, #8]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003c5e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	681a      	ldr	r2, [r3, #0]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f042 0201 	orr.w	r2, r2, #1
 8003c6e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003c70:	6878      	ldr	r0, [r7, #4]
 8003c72:	f000 fb5f 	bl	8004334 <UART_CheckIdleState>
 8003c76:	4603      	mov	r3, r0
}
 8003c78:	4618      	mov	r0, r3
 8003c7a:	3708      	adds	r7, #8
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bd80      	pop	{r7, pc}

08003c80 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c84:	b08a      	sub	sp, #40	@ 0x28
 8003c86:	af00      	add	r7, sp, #0
 8003c88:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	689a      	ldr	r2, [r3, #8]
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	691b      	ldr	r3, [r3, #16]
 8003c98:	431a      	orrs	r2, r3
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	695b      	ldr	r3, [r3, #20]
 8003c9e:	431a      	orrs	r2, r3
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	69db      	ldr	r3, [r3, #28]
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	4ba4      	ldr	r3, [pc, #656]	@ (8003f40 <UART_SetConfig+0x2c0>)
 8003cb0:	4013      	ands	r3, r2
 8003cb2:	68fa      	ldr	r2, [r7, #12]
 8003cb4:	6812      	ldr	r2, [r2, #0]
 8003cb6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003cb8:	430b      	orrs	r3, r1
 8003cba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	68da      	ldr	r2, [r3, #12]
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	430a      	orrs	r2, r1
 8003cd0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	699b      	ldr	r3, [r3, #24]
 8003cd6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a99      	ldr	r2, [pc, #612]	@ (8003f44 <UART_SetConfig+0x2c4>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d004      	beq.n	8003cec <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	6a1b      	ldr	r3, [r3, #32]
 8003ce6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003cfc:	430a      	orrs	r2, r1
 8003cfe:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a90      	ldr	r2, [pc, #576]	@ (8003f48 <UART_SetConfig+0x2c8>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d126      	bne.n	8003d58 <UART_SetConfig+0xd8>
 8003d0a:	4b90      	ldr	r3, [pc, #576]	@ (8003f4c <UART_SetConfig+0x2cc>)
 8003d0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d10:	f003 0303 	and.w	r3, r3, #3
 8003d14:	2b03      	cmp	r3, #3
 8003d16:	d81b      	bhi.n	8003d50 <UART_SetConfig+0xd0>
 8003d18:	a201      	add	r2, pc, #4	@ (adr r2, 8003d20 <UART_SetConfig+0xa0>)
 8003d1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d1e:	bf00      	nop
 8003d20:	08003d31 	.word	0x08003d31
 8003d24:	08003d41 	.word	0x08003d41
 8003d28:	08003d39 	.word	0x08003d39
 8003d2c:	08003d49 	.word	0x08003d49
 8003d30:	2301      	movs	r3, #1
 8003d32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d36:	e116      	b.n	8003f66 <UART_SetConfig+0x2e6>
 8003d38:	2302      	movs	r3, #2
 8003d3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d3e:	e112      	b.n	8003f66 <UART_SetConfig+0x2e6>
 8003d40:	2304      	movs	r3, #4
 8003d42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d46:	e10e      	b.n	8003f66 <UART_SetConfig+0x2e6>
 8003d48:	2308      	movs	r3, #8
 8003d4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d4e:	e10a      	b.n	8003f66 <UART_SetConfig+0x2e6>
 8003d50:	2310      	movs	r3, #16
 8003d52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d56:	e106      	b.n	8003f66 <UART_SetConfig+0x2e6>
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a7c      	ldr	r2, [pc, #496]	@ (8003f50 <UART_SetConfig+0x2d0>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d138      	bne.n	8003dd4 <UART_SetConfig+0x154>
 8003d62:	4b7a      	ldr	r3, [pc, #488]	@ (8003f4c <UART_SetConfig+0x2cc>)
 8003d64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d68:	f003 030c 	and.w	r3, r3, #12
 8003d6c:	2b0c      	cmp	r3, #12
 8003d6e:	d82d      	bhi.n	8003dcc <UART_SetConfig+0x14c>
 8003d70:	a201      	add	r2, pc, #4	@ (adr r2, 8003d78 <UART_SetConfig+0xf8>)
 8003d72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d76:	bf00      	nop
 8003d78:	08003dad 	.word	0x08003dad
 8003d7c:	08003dcd 	.word	0x08003dcd
 8003d80:	08003dcd 	.word	0x08003dcd
 8003d84:	08003dcd 	.word	0x08003dcd
 8003d88:	08003dbd 	.word	0x08003dbd
 8003d8c:	08003dcd 	.word	0x08003dcd
 8003d90:	08003dcd 	.word	0x08003dcd
 8003d94:	08003dcd 	.word	0x08003dcd
 8003d98:	08003db5 	.word	0x08003db5
 8003d9c:	08003dcd 	.word	0x08003dcd
 8003da0:	08003dcd 	.word	0x08003dcd
 8003da4:	08003dcd 	.word	0x08003dcd
 8003da8:	08003dc5 	.word	0x08003dc5
 8003dac:	2300      	movs	r3, #0
 8003dae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003db2:	e0d8      	b.n	8003f66 <UART_SetConfig+0x2e6>
 8003db4:	2302      	movs	r3, #2
 8003db6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003dba:	e0d4      	b.n	8003f66 <UART_SetConfig+0x2e6>
 8003dbc:	2304      	movs	r3, #4
 8003dbe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003dc2:	e0d0      	b.n	8003f66 <UART_SetConfig+0x2e6>
 8003dc4:	2308      	movs	r3, #8
 8003dc6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003dca:	e0cc      	b.n	8003f66 <UART_SetConfig+0x2e6>
 8003dcc:	2310      	movs	r3, #16
 8003dce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003dd2:	e0c8      	b.n	8003f66 <UART_SetConfig+0x2e6>
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a5e      	ldr	r2, [pc, #376]	@ (8003f54 <UART_SetConfig+0x2d4>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d125      	bne.n	8003e2a <UART_SetConfig+0x1aa>
 8003dde:	4b5b      	ldr	r3, [pc, #364]	@ (8003f4c <UART_SetConfig+0x2cc>)
 8003de0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003de4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003de8:	2b30      	cmp	r3, #48	@ 0x30
 8003dea:	d016      	beq.n	8003e1a <UART_SetConfig+0x19a>
 8003dec:	2b30      	cmp	r3, #48	@ 0x30
 8003dee:	d818      	bhi.n	8003e22 <UART_SetConfig+0x1a2>
 8003df0:	2b20      	cmp	r3, #32
 8003df2:	d00a      	beq.n	8003e0a <UART_SetConfig+0x18a>
 8003df4:	2b20      	cmp	r3, #32
 8003df6:	d814      	bhi.n	8003e22 <UART_SetConfig+0x1a2>
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d002      	beq.n	8003e02 <UART_SetConfig+0x182>
 8003dfc:	2b10      	cmp	r3, #16
 8003dfe:	d008      	beq.n	8003e12 <UART_SetConfig+0x192>
 8003e00:	e00f      	b.n	8003e22 <UART_SetConfig+0x1a2>
 8003e02:	2300      	movs	r3, #0
 8003e04:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e08:	e0ad      	b.n	8003f66 <UART_SetConfig+0x2e6>
 8003e0a:	2302      	movs	r3, #2
 8003e0c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e10:	e0a9      	b.n	8003f66 <UART_SetConfig+0x2e6>
 8003e12:	2304      	movs	r3, #4
 8003e14:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e18:	e0a5      	b.n	8003f66 <UART_SetConfig+0x2e6>
 8003e1a:	2308      	movs	r3, #8
 8003e1c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e20:	e0a1      	b.n	8003f66 <UART_SetConfig+0x2e6>
 8003e22:	2310      	movs	r3, #16
 8003e24:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e28:	e09d      	b.n	8003f66 <UART_SetConfig+0x2e6>
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a4a      	ldr	r2, [pc, #296]	@ (8003f58 <UART_SetConfig+0x2d8>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d125      	bne.n	8003e80 <UART_SetConfig+0x200>
 8003e34:	4b45      	ldr	r3, [pc, #276]	@ (8003f4c <UART_SetConfig+0x2cc>)
 8003e36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e3a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003e3e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003e40:	d016      	beq.n	8003e70 <UART_SetConfig+0x1f0>
 8003e42:	2bc0      	cmp	r3, #192	@ 0xc0
 8003e44:	d818      	bhi.n	8003e78 <UART_SetConfig+0x1f8>
 8003e46:	2b80      	cmp	r3, #128	@ 0x80
 8003e48:	d00a      	beq.n	8003e60 <UART_SetConfig+0x1e0>
 8003e4a:	2b80      	cmp	r3, #128	@ 0x80
 8003e4c:	d814      	bhi.n	8003e78 <UART_SetConfig+0x1f8>
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d002      	beq.n	8003e58 <UART_SetConfig+0x1d8>
 8003e52:	2b40      	cmp	r3, #64	@ 0x40
 8003e54:	d008      	beq.n	8003e68 <UART_SetConfig+0x1e8>
 8003e56:	e00f      	b.n	8003e78 <UART_SetConfig+0x1f8>
 8003e58:	2300      	movs	r3, #0
 8003e5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e5e:	e082      	b.n	8003f66 <UART_SetConfig+0x2e6>
 8003e60:	2302      	movs	r3, #2
 8003e62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e66:	e07e      	b.n	8003f66 <UART_SetConfig+0x2e6>
 8003e68:	2304      	movs	r3, #4
 8003e6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e6e:	e07a      	b.n	8003f66 <UART_SetConfig+0x2e6>
 8003e70:	2308      	movs	r3, #8
 8003e72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e76:	e076      	b.n	8003f66 <UART_SetConfig+0x2e6>
 8003e78:	2310      	movs	r3, #16
 8003e7a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e7e:	e072      	b.n	8003f66 <UART_SetConfig+0x2e6>
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a35      	ldr	r2, [pc, #212]	@ (8003f5c <UART_SetConfig+0x2dc>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d12a      	bne.n	8003ee0 <UART_SetConfig+0x260>
 8003e8a:	4b30      	ldr	r3, [pc, #192]	@ (8003f4c <UART_SetConfig+0x2cc>)
 8003e8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e90:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e94:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003e98:	d01a      	beq.n	8003ed0 <UART_SetConfig+0x250>
 8003e9a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003e9e:	d81b      	bhi.n	8003ed8 <UART_SetConfig+0x258>
 8003ea0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ea4:	d00c      	beq.n	8003ec0 <UART_SetConfig+0x240>
 8003ea6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003eaa:	d815      	bhi.n	8003ed8 <UART_SetConfig+0x258>
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d003      	beq.n	8003eb8 <UART_SetConfig+0x238>
 8003eb0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003eb4:	d008      	beq.n	8003ec8 <UART_SetConfig+0x248>
 8003eb6:	e00f      	b.n	8003ed8 <UART_SetConfig+0x258>
 8003eb8:	2300      	movs	r3, #0
 8003eba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ebe:	e052      	b.n	8003f66 <UART_SetConfig+0x2e6>
 8003ec0:	2302      	movs	r3, #2
 8003ec2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ec6:	e04e      	b.n	8003f66 <UART_SetConfig+0x2e6>
 8003ec8:	2304      	movs	r3, #4
 8003eca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ece:	e04a      	b.n	8003f66 <UART_SetConfig+0x2e6>
 8003ed0:	2308      	movs	r3, #8
 8003ed2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ed6:	e046      	b.n	8003f66 <UART_SetConfig+0x2e6>
 8003ed8:	2310      	movs	r3, #16
 8003eda:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ede:	e042      	b.n	8003f66 <UART_SetConfig+0x2e6>
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a17      	ldr	r2, [pc, #92]	@ (8003f44 <UART_SetConfig+0x2c4>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d13a      	bne.n	8003f60 <UART_SetConfig+0x2e0>
 8003eea:	4b18      	ldr	r3, [pc, #96]	@ (8003f4c <UART_SetConfig+0x2cc>)
 8003eec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ef0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003ef4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003ef8:	d01a      	beq.n	8003f30 <UART_SetConfig+0x2b0>
 8003efa:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003efe:	d81b      	bhi.n	8003f38 <UART_SetConfig+0x2b8>
 8003f00:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003f04:	d00c      	beq.n	8003f20 <UART_SetConfig+0x2a0>
 8003f06:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003f0a:	d815      	bhi.n	8003f38 <UART_SetConfig+0x2b8>
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d003      	beq.n	8003f18 <UART_SetConfig+0x298>
 8003f10:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f14:	d008      	beq.n	8003f28 <UART_SetConfig+0x2a8>
 8003f16:	e00f      	b.n	8003f38 <UART_SetConfig+0x2b8>
 8003f18:	2300      	movs	r3, #0
 8003f1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f1e:	e022      	b.n	8003f66 <UART_SetConfig+0x2e6>
 8003f20:	2302      	movs	r3, #2
 8003f22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f26:	e01e      	b.n	8003f66 <UART_SetConfig+0x2e6>
 8003f28:	2304      	movs	r3, #4
 8003f2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f2e:	e01a      	b.n	8003f66 <UART_SetConfig+0x2e6>
 8003f30:	2308      	movs	r3, #8
 8003f32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f36:	e016      	b.n	8003f66 <UART_SetConfig+0x2e6>
 8003f38:	2310      	movs	r3, #16
 8003f3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f3e:	e012      	b.n	8003f66 <UART_SetConfig+0x2e6>
 8003f40:	efff69f3 	.word	0xefff69f3
 8003f44:	40008000 	.word	0x40008000
 8003f48:	40013800 	.word	0x40013800
 8003f4c:	40021000 	.word	0x40021000
 8003f50:	40004400 	.word	0x40004400
 8003f54:	40004800 	.word	0x40004800
 8003f58:	40004c00 	.word	0x40004c00
 8003f5c:	40005000 	.word	0x40005000
 8003f60:	2310      	movs	r3, #16
 8003f62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a9f      	ldr	r2, [pc, #636]	@ (80041e8 <UART_SetConfig+0x568>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d17a      	bne.n	8004066 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003f70:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003f74:	2b08      	cmp	r3, #8
 8003f76:	d824      	bhi.n	8003fc2 <UART_SetConfig+0x342>
 8003f78:	a201      	add	r2, pc, #4	@ (adr r2, 8003f80 <UART_SetConfig+0x300>)
 8003f7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f7e:	bf00      	nop
 8003f80:	08003fa5 	.word	0x08003fa5
 8003f84:	08003fc3 	.word	0x08003fc3
 8003f88:	08003fad 	.word	0x08003fad
 8003f8c:	08003fc3 	.word	0x08003fc3
 8003f90:	08003fb3 	.word	0x08003fb3
 8003f94:	08003fc3 	.word	0x08003fc3
 8003f98:	08003fc3 	.word	0x08003fc3
 8003f9c:	08003fc3 	.word	0x08003fc3
 8003fa0:	08003fbb 	.word	0x08003fbb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003fa4:	f7fe fee8 	bl	8002d78 <HAL_RCC_GetPCLK1Freq>
 8003fa8:	61f8      	str	r0, [r7, #28]
        break;
 8003faa:	e010      	b.n	8003fce <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003fac:	4b8f      	ldr	r3, [pc, #572]	@ (80041ec <UART_SetConfig+0x56c>)
 8003fae:	61fb      	str	r3, [r7, #28]
        break;
 8003fb0:	e00d      	b.n	8003fce <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003fb2:	f7fe fe49 	bl	8002c48 <HAL_RCC_GetSysClockFreq>
 8003fb6:	61f8      	str	r0, [r7, #28]
        break;
 8003fb8:	e009      	b.n	8003fce <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003fba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003fbe:	61fb      	str	r3, [r7, #28]
        break;
 8003fc0:	e005      	b.n	8003fce <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003fcc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003fce:	69fb      	ldr	r3, [r7, #28]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	f000 80fb 	beq.w	80041cc <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	685a      	ldr	r2, [r3, #4]
 8003fda:	4613      	mov	r3, r2
 8003fdc:	005b      	lsls	r3, r3, #1
 8003fde:	4413      	add	r3, r2
 8003fe0:	69fa      	ldr	r2, [r7, #28]
 8003fe2:	429a      	cmp	r2, r3
 8003fe4:	d305      	bcc.n	8003ff2 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003fec:	69fa      	ldr	r2, [r7, #28]
 8003fee:	429a      	cmp	r2, r3
 8003ff0:	d903      	bls.n	8003ffa <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003ff8:	e0e8      	b.n	80041cc <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003ffa:	69fb      	ldr	r3, [r7, #28]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	461c      	mov	r4, r3
 8004000:	4615      	mov	r5, r2
 8004002:	f04f 0200 	mov.w	r2, #0
 8004006:	f04f 0300 	mov.w	r3, #0
 800400a:	022b      	lsls	r3, r5, #8
 800400c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004010:	0222      	lsls	r2, r4, #8
 8004012:	68f9      	ldr	r1, [r7, #12]
 8004014:	6849      	ldr	r1, [r1, #4]
 8004016:	0849      	lsrs	r1, r1, #1
 8004018:	2000      	movs	r0, #0
 800401a:	4688      	mov	r8, r1
 800401c:	4681      	mov	r9, r0
 800401e:	eb12 0a08 	adds.w	sl, r2, r8
 8004022:	eb43 0b09 	adc.w	fp, r3, r9
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	2200      	movs	r2, #0
 800402c:	603b      	str	r3, [r7, #0]
 800402e:	607a      	str	r2, [r7, #4]
 8004030:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004034:	4650      	mov	r0, sl
 8004036:	4659      	mov	r1, fp
 8004038:	f7fc fc1c 	bl	8000874 <__aeabi_uldivmod>
 800403c:	4602      	mov	r2, r0
 800403e:	460b      	mov	r3, r1
 8004040:	4613      	mov	r3, r2
 8004042:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004044:	69bb      	ldr	r3, [r7, #24]
 8004046:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800404a:	d308      	bcc.n	800405e <UART_SetConfig+0x3de>
 800404c:	69bb      	ldr	r3, [r7, #24]
 800404e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004052:	d204      	bcs.n	800405e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	69ba      	ldr	r2, [r7, #24]
 800405a:	60da      	str	r2, [r3, #12]
 800405c:	e0b6      	b.n	80041cc <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004064:	e0b2      	b.n	80041cc <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	69db      	ldr	r3, [r3, #28]
 800406a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800406e:	d15e      	bne.n	800412e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004070:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004074:	2b08      	cmp	r3, #8
 8004076:	d828      	bhi.n	80040ca <UART_SetConfig+0x44a>
 8004078:	a201      	add	r2, pc, #4	@ (adr r2, 8004080 <UART_SetConfig+0x400>)
 800407a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800407e:	bf00      	nop
 8004080:	080040a5 	.word	0x080040a5
 8004084:	080040ad 	.word	0x080040ad
 8004088:	080040b5 	.word	0x080040b5
 800408c:	080040cb 	.word	0x080040cb
 8004090:	080040bb 	.word	0x080040bb
 8004094:	080040cb 	.word	0x080040cb
 8004098:	080040cb 	.word	0x080040cb
 800409c:	080040cb 	.word	0x080040cb
 80040a0:	080040c3 	.word	0x080040c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80040a4:	f7fe fe68 	bl	8002d78 <HAL_RCC_GetPCLK1Freq>
 80040a8:	61f8      	str	r0, [r7, #28]
        break;
 80040aa:	e014      	b.n	80040d6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80040ac:	f7fe fe7a 	bl	8002da4 <HAL_RCC_GetPCLK2Freq>
 80040b0:	61f8      	str	r0, [r7, #28]
        break;
 80040b2:	e010      	b.n	80040d6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80040b4:	4b4d      	ldr	r3, [pc, #308]	@ (80041ec <UART_SetConfig+0x56c>)
 80040b6:	61fb      	str	r3, [r7, #28]
        break;
 80040b8:	e00d      	b.n	80040d6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80040ba:	f7fe fdc5 	bl	8002c48 <HAL_RCC_GetSysClockFreq>
 80040be:	61f8      	str	r0, [r7, #28]
        break;
 80040c0:	e009      	b.n	80040d6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80040c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80040c6:	61fb      	str	r3, [r7, #28]
        break;
 80040c8:	e005      	b.n	80040d6 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80040ca:	2300      	movs	r3, #0
 80040cc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80040ce:	2301      	movs	r3, #1
 80040d0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80040d4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80040d6:	69fb      	ldr	r3, [r7, #28]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d077      	beq.n	80041cc <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80040dc:	69fb      	ldr	r3, [r7, #28]
 80040de:	005a      	lsls	r2, r3, #1
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	085b      	lsrs	r3, r3, #1
 80040e6:	441a      	add	r2, r3
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80040f0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80040f2:	69bb      	ldr	r3, [r7, #24]
 80040f4:	2b0f      	cmp	r3, #15
 80040f6:	d916      	bls.n	8004126 <UART_SetConfig+0x4a6>
 80040f8:	69bb      	ldr	r3, [r7, #24]
 80040fa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80040fe:	d212      	bcs.n	8004126 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004100:	69bb      	ldr	r3, [r7, #24]
 8004102:	b29b      	uxth	r3, r3
 8004104:	f023 030f 	bic.w	r3, r3, #15
 8004108:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800410a:	69bb      	ldr	r3, [r7, #24]
 800410c:	085b      	lsrs	r3, r3, #1
 800410e:	b29b      	uxth	r3, r3
 8004110:	f003 0307 	and.w	r3, r3, #7
 8004114:	b29a      	uxth	r2, r3
 8004116:	8afb      	ldrh	r3, [r7, #22]
 8004118:	4313      	orrs	r3, r2
 800411a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	8afa      	ldrh	r2, [r7, #22]
 8004122:	60da      	str	r2, [r3, #12]
 8004124:	e052      	b.n	80041cc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800412c:	e04e      	b.n	80041cc <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800412e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004132:	2b08      	cmp	r3, #8
 8004134:	d827      	bhi.n	8004186 <UART_SetConfig+0x506>
 8004136:	a201      	add	r2, pc, #4	@ (adr r2, 800413c <UART_SetConfig+0x4bc>)
 8004138:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800413c:	08004161 	.word	0x08004161
 8004140:	08004169 	.word	0x08004169
 8004144:	08004171 	.word	0x08004171
 8004148:	08004187 	.word	0x08004187
 800414c:	08004177 	.word	0x08004177
 8004150:	08004187 	.word	0x08004187
 8004154:	08004187 	.word	0x08004187
 8004158:	08004187 	.word	0x08004187
 800415c:	0800417f 	.word	0x0800417f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004160:	f7fe fe0a 	bl	8002d78 <HAL_RCC_GetPCLK1Freq>
 8004164:	61f8      	str	r0, [r7, #28]
        break;
 8004166:	e014      	b.n	8004192 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004168:	f7fe fe1c 	bl	8002da4 <HAL_RCC_GetPCLK2Freq>
 800416c:	61f8      	str	r0, [r7, #28]
        break;
 800416e:	e010      	b.n	8004192 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004170:	4b1e      	ldr	r3, [pc, #120]	@ (80041ec <UART_SetConfig+0x56c>)
 8004172:	61fb      	str	r3, [r7, #28]
        break;
 8004174:	e00d      	b.n	8004192 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004176:	f7fe fd67 	bl	8002c48 <HAL_RCC_GetSysClockFreq>
 800417a:	61f8      	str	r0, [r7, #28]
        break;
 800417c:	e009      	b.n	8004192 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800417e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004182:	61fb      	str	r3, [r7, #28]
        break;
 8004184:	e005      	b.n	8004192 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004186:	2300      	movs	r3, #0
 8004188:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800418a:	2301      	movs	r3, #1
 800418c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004190:	bf00      	nop
    }

    if (pclk != 0U)
 8004192:	69fb      	ldr	r3, [r7, #28]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d019      	beq.n	80041cc <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	085a      	lsrs	r2, r3, #1
 800419e:	69fb      	ldr	r3, [r7, #28]
 80041a0:	441a      	add	r2, r3
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80041aa:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80041ac:	69bb      	ldr	r3, [r7, #24]
 80041ae:	2b0f      	cmp	r3, #15
 80041b0:	d909      	bls.n	80041c6 <UART_SetConfig+0x546>
 80041b2:	69bb      	ldr	r3, [r7, #24]
 80041b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80041b8:	d205      	bcs.n	80041c6 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80041ba:	69bb      	ldr	r3, [r7, #24]
 80041bc:	b29a      	uxth	r2, r3
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	60da      	str	r2, [r3, #12]
 80041c4:	e002      	b.n	80041cc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80041c6:	2301      	movs	r3, #1
 80041c8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	2200      	movs	r2, #0
 80041d0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	2200      	movs	r2, #0
 80041d6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80041d8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80041dc:	4618      	mov	r0, r3
 80041de:	3728      	adds	r7, #40	@ 0x28
 80041e0:	46bd      	mov	sp, r7
 80041e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80041e6:	bf00      	nop
 80041e8:	40008000 	.word	0x40008000
 80041ec:	00f42400 	.word	0x00f42400

080041f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80041f0:	b480      	push	{r7}
 80041f2:	b083      	sub	sp, #12
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041fc:	f003 0308 	and.w	r3, r3, #8
 8004200:	2b00      	cmp	r3, #0
 8004202:	d00a      	beq.n	800421a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	430a      	orrs	r2, r1
 8004218:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800421e:	f003 0301 	and.w	r3, r3, #1
 8004222:	2b00      	cmp	r3, #0
 8004224:	d00a      	beq.n	800423c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	430a      	orrs	r2, r1
 800423a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004240:	f003 0302 	and.w	r3, r3, #2
 8004244:	2b00      	cmp	r3, #0
 8004246:	d00a      	beq.n	800425e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	430a      	orrs	r2, r1
 800425c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004262:	f003 0304 	and.w	r3, r3, #4
 8004266:	2b00      	cmp	r3, #0
 8004268:	d00a      	beq.n	8004280 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	430a      	orrs	r2, r1
 800427e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004284:	f003 0310 	and.w	r3, r3, #16
 8004288:	2b00      	cmp	r3, #0
 800428a:	d00a      	beq.n	80042a2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	689b      	ldr	r3, [r3, #8]
 8004292:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	430a      	orrs	r2, r1
 80042a0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042a6:	f003 0320 	and.w	r3, r3, #32
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d00a      	beq.n	80042c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	689b      	ldr	r3, [r3, #8]
 80042b4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	430a      	orrs	r2, r1
 80042c2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d01a      	beq.n	8004306 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	430a      	orrs	r2, r1
 80042e4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042ea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80042ee:	d10a      	bne.n	8004306 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	430a      	orrs	r2, r1
 8004304:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800430a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800430e:	2b00      	cmp	r3, #0
 8004310:	d00a      	beq.n	8004328 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	430a      	orrs	r2, r1
 8004326:	605a      	str	r2, [r3, #4]
  }
}
 8004328:	bf00      	nop
 800432a:	370c      	adds	r7, #12
 800432c:	46bd      	mov	sp, r7
 800432e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004332:	4770      	bx	lr

08004334 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b098      	sub	sp, #96	@ 0x60
 8004338:	af02      	add	r7, sp, #8
 800433a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2200      	movs	r2, #0
 8004340:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004344:	f7fc ff9e 	bl	8001284 <HAL_GetTick>
 8004348:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f003 0308 	and.w	r3, r3, #8
 8004354:	2b08      	cmp	r3, #8
 8004356:	d12e      	bne.n	80043b6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004358:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800435c:	9300      	str	r3, [sp, #0]
 800435e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004360:	2200      	movs	r2, #0
 8004362:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004366:	6878      	ldr	r0, [r7, #4]
 8004368:	f000 f88c 	bl	8004484 <UART_WaitOnFlagUntilTimeout>
 800436c:	4603      	mov	r3, r0
 800436e:	2b00      	cmp	r3, #0
 8004370:	d021      	beq.n	80043b6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004378:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800437a:	e853 3f00 	ldrex	r3, [r3]
 800437e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004380:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004382:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004386:	653b      	str	r3, [r7, #80]	@ 0x50
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	461a      	mov	r2, r3
 800438e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004390:	647b      	str	r3, [r7, #68]	@ 0x44
 8004392:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004394:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004396:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004398:	e841 2300 	strex	r3, r2, [r1]
 800439c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800439e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d1e6      	bne.n	8004372 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2220      	movs	r2, #32
 80043a8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2200      	movs	r2, #0
 80043ae:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80043b2:	2303      	movs	r3, #3
 80043b4:	e062      	b.n	800447c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f003 0304 	and.w	r3, r3, #4
 80043c0:	2b04      	cmp	r3, #4
 80043c2:	d149      	bne.n	8004458 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80043c4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80043c8:	9300      	str	r3, [sp, #0]
 80043ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043cc:	2200      	movs	r2, #0
 80043ce:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80043d2:	6878      	ldr	r0, [r7, #4]
 80043d4:	f000 f856 	bl	8004484 <UART_WaitOnFlagUntilTimeout>
 80043d8:	4603      	mov	r3, r0
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d03c      	beq.n	8004458 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043e6:	e853 3f00 	ldrex	r3, [r3]
 80043ea:	623b      	str	r3, [r7, #32]
   return(result);
 80043ec:	6a3b      	ldr	r3, [r7, #32]
 80043ee:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80043f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	461a      	mov	r2, r3
 80043fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80043fc:	633b      	str	r3, [r7, #48]	@ 0x30
 80043fe:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004400:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004402:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004404:	e841 2300 	strex	r3, r2, [r1]
 8004408:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800440a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800440c:	2b00      	cmp	r3, #0
 800440e:	d1e6      	bne.n	80043de <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	3308      	adds	r3, #8
 8004416:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004418:	693b      	ldr	r3, [r7, #16]
 800441a:	e853 3f00 	ldrex	r3, [r3]
 800441e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	f023 0301 	bic.w	r3, r3, #1
 8004426:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	3308      	adds	r3, #8
 800442e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004430:	61fa      	str	r2, [r7, #28]
 8004432:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004434:	69b9      	ldr	r1, [r7, #24]
 8004436:	69fa      	ldr	r2, [r7, #28]
 8004438:	e841 2300 	strex	r3, r2, [r1]
 800443c:	617b      	str	r3, [r7, #20]
   return(result);
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d1e5      	bne.n	8004410 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2220      	movs	r2, #32
 8004448:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2200      	movs	r2, #0
 8004450:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004454:	2303      	movs	r3, #3
 8004456:	e011      	b.n	800447c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2220      	movs	r2, #32
 800445c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2220      	movs	r2, #32
 8004462:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2200      	movs	r2, #0
 800446a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2200      	movs	r2, #0
 8004470:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2200      	movs	r2, #0
 8004476:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800447a:	2300      	movs	r3, #0
}
 800447c:	4618      	mov	r0, r3
 800447e:	3758      	adds	r7, #88	@ 0x58
 8004480:	46bd      	mov	sp, r7
 8004482:	bd80      	pop	{r7, pc}

08004484 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b084      	sub	sp, #16
 8004488:	af00      	add	r7, sp, #0
 800448a:	60f8      	str	r0, [r7, #12]
 800448c:	60b9      	str	r1, [r7, #8]
 800448e:	603b      	str	r3, [r7, #0]
 8004490:	4613      	mov	r3, r2
 8004492:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004494:	e04f      	b.n	8004536 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004496:	69bb      	ldr	r3, [r7, #24]
 8004498:	f1b3 3fff 	cmp.w	r3, #4294967295
 800449c:	d04b      	beq.n	8004536 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800449e:	f7fc fef1 	bl	8001284 <HAL_GetTick>
 80044a2:	4602      	mov	r2, r0
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	1ad3      	subs	r3, r2, r3
 80044a8:	69ba      	ldr	r2, [r7, #24]
 80044aa:	429a      	cmp	r2, r3
 80044ac:	d302      	bcc.n	80044b4 <UART_WaitOnFlagUntilTimeout+0x30>
 80044ae:	69bb      	ldr	r3, [r7, #24]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d101      	bne.n	80044b8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80044b4:	2303      	movs	r3, #3
 80044b6:	e04e      	b.n	8004556 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f003 0304 	and.w	r3, r3, #4
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d037      	beq.n	8004536 <UART_WaitOnFlagUntilTimeout+0xb2>
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	2b80      	cmp	r3, #128	@ 0x80
 80044ca:	d034      	beq.n	8004536 <UART_WaitOnFlagUntilTimeout+0xb2>
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	2b40      	cmp	r3, #64	@ 0x40
 80044d0:	d031      	beq.n	8004536 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	69db      	ldr	r3, [r3, #28]
 80044d8:	f003 0308 	and.w	r3, r3, #8
 80044dc:	2b08      	cmp	r3, #8
 80044de:	d110      	bne.n	8004502 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	2208      	movs	r2, #8
 80044e6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80044e8:	68f8      	ldr	r0, [r7, #12]
 80044ea:	f000 f838 	bl	800455e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	2208      	movs	r2, #8
 80044f2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	2200      	movs	r2, #0
 80044fa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80044fe:	2301      	movs	r3, #1
 8004500:	e029      	b.n	8004556 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	69db      	ldr	r3, [r3, #28]
 8004508:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800450c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004510:	d111      	bne.n	8004536 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800451a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800451c:	68f8      	ldr	r0, [r7, #12]
 800451e:	f000 f81e 	bl	800455e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	2220      	movs	r2, #32
 8004526:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	2200      	movs	r2, #0
 800452e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004532:	2303      	movs	r3, #3
 8004534:	e00f      	b.n	8004556 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	69da      	ldr	r2, [r3, #28]
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	4013      	ands	r3, r2
 8004540:	68ba      	ldr	r2, [r7, #8]
 8004542:	429a      	cmp	r2, r3
 8004544:	bf0c      	ite	eq
 8004546:	2301      	moveq	r3, #1
 8004548:	2300      	movne	r3, #0
 800454a:	b2db      	uxtb	r3, r3
 800454c:	461a      	mov	r2, r3
 800454e:	79fb      	ldrb	r3, [r7, #7]
 8004550:	429a      	cmp	r2, r3
 8004552:	d0a0      	beq.n	8004496 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004554:	2300      	movs	r3, #0
}
 8004556:	4618      	mov	r0, r3
 8004558:	3710      	adds	r7, #16
 800455a:	46bd      	mov	sp, r7
 800455c:	bd80      	pop	{r7, pc}

0800455e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800455e:	b480      	push	{r7}
 8004560:	b095      	sub	sp, #84	@ 0x54
 8004562:	af00      	add	r7, sp, #0
 8004564:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800456c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800456e:	e853 3f00 	ldrex	r3, [r3]
 8004572:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004574:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004576:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800457a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	461a      	mov	r2, r3
 8004582:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004584:	643b      	str	r3, [r7, #64]	@ 0x40
 8004586:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004588:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800458a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800458c:	e841 2300 	strex	r3, r2, [r1]
 8004590:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004592:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004594:	2b00      	cmp	r3, #0
 8004596:	d1e6      	bne.n	8004566 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	3308      	adds	r3, #8
 800459e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045a0:	6a3b      	ldr	r3, [r7, #32]
 80045a2:	e853 3f00 	ldrex	r3, [r3]
 80045a6:	61fb      	str	r3, [r7, #28]
   return(result);
 80045a8:	69fb      	ldr	r3, [r7, #28]
 80045aa:	f023 0301 	bic.w	r3, r3, #1
 80045ae:	64bb      	str	r3, [r7, #72]	@ 0x48
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	3308      	adds	r3, #8
 80045b6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80045b8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80045ba:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045bc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80045be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80045c0:	e841 2300 	strex	r3, r2, [r1]
 80045c4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80045c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d1e5      	bne.n	8004598 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045d0:	2b01      	cmp	r3, #1
 80045d2:	d118      	bne.n	8004606 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	e853 3f00 	ldrex	r3, [r3]
 80045e0:	60bb      	str	r3, [r7, #8]
   return(result);
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	f023 0310 	bic.w	r3, r3, #16
 80045e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	461a      	mov	r2, r3
 80045f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80045f2:	61bb      	str	r3, [r7, #24]
 80045f4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045f6:	6979      	ldr	r1, [r7, #20]
 80045f8:	69ba      	ldr	r2, [r7, #24]
 80045fa:	e841 2300 	strex	r3, r2, [r1]
 80045fe:	613b      	str	r3, [r7, #16]
   return(result);
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d1e6      	bne.n	80045d4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2220      	movs	r2, #32
 800460a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2200      	movs	r2, #0
 8004612:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2200      	movs	r2, #0
 8004618:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800461a:	bf00      	nop
 800461c:	3754      	adds	r7, #84	@ 0x54
 800461e:	46bd      	mov	sp, r7
 8004620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004624:	4770      	bx	lr

08004626 <memset>:
 8004626:	4402      	add	r2, r0
 8004628:	4603      	mov	r3, r0
 800462a:	4293      	cmp	r3, r2
 800462c:	d100      	bne.n	8004630 <memset+0xa>
 800462e:	4770      	bx	lr
 8004630:	f803 1b01 	strb.w	r1, [r3], #1
 8004634:	e7f9      	b.n	800462a <memset+0x4>
	...

08004638 <__libc_init_array>:
 8004638:	b570      	push	{r4, r5, r6, lr}
 800463a:	4d0d      	ldr	r5, [pc, #52]	@ (8004670 <__libc_init_array+0x38>)
 800463c:	4c0d      	ldr	r4, [pc, #52]	@ (8004674 <__libc_init_array+0x3c>)
 800463e:	1b64      	subs	r4, r4, r5
 8004640:	10a4      	asrs	r4, r4, #2
 8004642:	2600      	movs	r6, #0
 8004644:	42a6      	cmp	r6, r4
 8004646:	d109      	bne.n	800465c <__libc_init_array+0x24>
 8004648:	4d0b      	ldr	r5, [pc, #44]	@ (8004678 <__libc_init_array+0x40>)
 800464a:	4c0c      	ldr	r4, [pc, #48]	@ (800467c <__libc_init_array+0x44>)
 800464c:	f000 fdde 	bl	800520c <_init>
 8004650:	1b64      	subs	r4, r4, r5
 8004652:	10a4      	asrs	r4, r4, #2
 8004654:	2600      	movs	r6, #0
 8004656:	42a6      	cmp	r6, r4
 8004658:	d105      	bne.n	8004666 <__libc_init_array+0x2e>
 800465a:	bd70      	pop	{r4, r5, r6, pc}
 800465c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004660:	4798      	blx	r3
 8004662:	3601      	adds	r6, #1
 8004664:	e7ee      	b.n	8004644 <__libc_init_array+0xc>
 8004666:	f855 3b04 	ldr.w	r3, [r5], #4
 800466a:	4798      	blx	r3
 800466c:	3601      	adds	r6, #1
 800466e:	e7f2      	b.n	8004656 <__libc_init_array+0x1e>
 8004670:	08005658 	.word	0x08005658
 8004674:	08005658 	.word	0x08005658
 8004678:	08005658 	.word	0x08005658
 800467c:	0800565c 	.word	0x0800565c

08004680 <sinf>:
 8004680:	ee10 3a10 	vmov	r3, s0
 8004684:	b507      	push	{r0, r1, r2, lr}
 8004686:	4a1f      	ldr	r2, [pc, #124]	@ (8004704 <sinf+0x84>)
 8004688:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800468c:	4293      	cmp	r3, r2
 800468e:	d807      	bhi.n	80046a0 <sinf+0x20>
 8004690:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 8004708 <sinf+0x88>
 8004694:	2000      	movs	r0, #0
 8004696:	b003      	add	sp, #12
 8004698:	f85d eb04 	ldr.w	lr, [sp], #4
 800469c:	f000 b91a 	b.w	80048d4 <__kernel_sinf>
 80046a0:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80046a4:	d304      	bcc.n	80046b0 <sinf+0x30>
 80046a6:	ee30 0a40 	vsub.f32	s0, s0, s0
 80046aa:	b003      	add	sp, #12
 80046ac:	f85d fb04 	ldr.w	pc, [sp], #4
 80046b0:	4668      	mov	r0, sp
 80046b2:	f000 f957 	bl	8004964 <__ieee754_rem_pio2f>
 80046b6:	f000 0003 	and.w	r0, r0, #3
 80046ba:	2801      	cmp	r0, #1
 80046bc:	d00a      	beq.n	80046d4 <sinf+0x54>
 80046be:	2802      	cmp	r0, #2
 80046c0:	d00f      	beq.n	80046e2 <sinf+0x62>
 80046c2:	b9c0      	cbnz	r0, 80046f6 <sinf+0x76>
 80046c4:	eddd 0a01 	vldr	s1, [sp, #4]
 80046c8:	ed9d 0a00 	vldr	s0, [sp]
 80046cc:	2001      	movs	r0, #1
 80046ce:	f000 f901 	bl	80048d4 <__kernel_sinf>
 80046d2:	e7ea      	b.n	80046aa <sinf+0x2a>
 80046d4:	eddd 0a01 	vldr	s1, [sp, #4]
 80046d8:	ed9d 0a00 	vldr	s0, [sp]
 80046dc:	f000 f8a2 	bl	8004824 <__kernel_cosf>
 80046e0:	e7e3      	b.n	80046aa <sinf+0x2a>
 80046e2:	eddd 0a01 	vldr	s1, [sp, #4]
 80046e6:	ed9d 0a00 	vldr	s0, [sp]
 80046ea:	2001      	movs	r0, #1
 80046ec:	f000 f8f2 	bl	80048d4 <__kernel_sinf>
 80046f0:	eeb1 0a40 	vneg.f32	s0, s0
 80046f4:	e7d9      	b.n	80046aa <sinf+0x2a>
 80046f6:	eddd 0a01 	vldr	s1, [sp, #4]
 80046fa:	ed9d 0a00 	vldr	s0, [sp]
 80046fe:	f000 f891 	bl	8004824 <__kernel_cosf>
 8004702:	e7f5      	b.n	80046f0 <sinf+0x70>
 8004704:	3f490fd8 	.word	0x3f490fd8
 8004708:	00000000 	.word	0x00000000

0800470c <rint>:
 800470c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800470e:	ec53 2b10 	vmov	r2, r3, d0
 8004712:	f3c3 500a 	ubfx	r0, r3, #20, #11
 8004716:	f2a0 35ff 	subw	r5, r0, #1023	@ 0x3ff
 800471a:	2d13      	cmp	r5, #19
 800471c:	461c      	mov	r4, r3
 800471e:	4611      	mov	r1, r2
 8004720:	ea4f 76d3 	mov.w	r6, r3, lsr #31
 8004724:	dc5b      	bgt.n	80047de <rint+0xd2>
 8004726:	2d00      	cmp	r5, #0
 8004728:	da2f      	bge.n	800478a <rint+0x7e>
 800472a:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 800472e:	4310      	orrs	r0, r2
 8004730:	d027      	beq.n	8004782 <rint+0x76>
 8004732:	f3c3 0513 	ubfx	r5, r3, #0, #20
 8004736:	4315      	orrs	r5, r2
 8004738:	426b      	negs	r3, r5
 800473a:	432b      	orrs	r3, r5
 800473c:	4610      	mov	r0, r2
 800473e:	0b1b      	lsrs	r3, r3, #12
 8004740:	0c62      	lsrs	r2, r4, #17
 8004742:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004746:	0452      	lsls	r2, r2, #17
 8004748:	ea43 0102 	orr.w	r1, r3, r2
 800474c:	460b      	mov	r3, r1
 800474e:	4933      	ldr	r1, [pc, #204]	@ (800481c <rint+0x110>)
 8004750:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8004754:	e9d1 6700 	ldrd	r6, r7, [r1]
 8004758:	4602      	mov	r2, r0
 800475a:	4639      	mov	r1, r7
 800475c:	4630      	mov	r0, r6
 800475e:	f7fb fe63 	bl	8000428 <__adddf3>
 8004762:	e9cd 0100 	strd	r0, r1, [sp]
 8004766:	463b      	mov	r3, r7
 8004768:	4632      	mov	r2, r6
 800476a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800476e:	f7fb fe59 	bl	8000424 <__aeabi_dsub>
 8004772:	f004 4400 	and.w	r4, r4, #2147483648	@ 0x80000000
 8004776:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800477a:	ea44 0703 	orr.w	r7, r4, r3
 800477e:	4602      	mov	r2, r0
 8004780:	463b      	mov	r3, r7
 8004782:	ec43 2b10 	vmov	d0, r2, r3
 8004786:	b003      	add	sp, #12
 8004788:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800478a:	4825      	ldr	r0, [pc, #148]	@ (8004820 <rint+0x114>)
 800478c:	4128      	asrs	r0, r5
 800478e:	ea00 0703 	and.w	r7, r0, r3
 8004792:	4317      	orrs	r7, r2
 8004794:	d0f5      	beq.n	8004782 <rint+0x76>
 8004796:	0843      	lsrs	r3, r0, #1
 8004798:	ea04 0050 	and.w	r0, r4, r0, lsr #1
 800479c:	4301      	orrs	r1, r0
 800479e:	d00a      	beq.n	80047b6 <rint+0xaa>
 80047a0:	f1a5 0213 	sub.w	r2, r5, #19
 80047a4:	ea24 0303 	bic.w	r3, r4, r3
 80047a8:	4251      	negs	r1, r2
 80047aa:	f44f 2480 	mov.w	r4, #262144	@ 0x40000
 80047ae:	4151      	adcs	r1, r2
 80047b0:	412c      	asrs	r4, r5
 80047b2:	07c9      	lsls	r1, r1, #31
 80047b4:	431c      	orrs	r4, r3
 80047b6:	460a      	mov	r2, r1
 80047b8:	4918      	ldr	r1, [pc, #96]	@ (800481c <rint+0x110>)
 80047ba:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80047be:	4623      	mov	r3, r4
 80047c0:	e9d1 4500 	ldrd	r4, r5, [r1]
 80047c4:	4620      	mov	r0, r4
 80047c6:	4629      	mov	r1, r5
 80047c8:	f7fb fe2e 	bl	8000428 <__adddf3>
 80047cc:	e9cd 0100 	strd	r0, r1, [sp]
 80047d0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80047d4:	4622      	mov	r2, r4
 80047d6:	462b      	mov	r3, r5
 80047d8:	f7fb fe24 	bl	8000424 <__aeabi_dsub>
 80047dc:	e008      	b.n	80047f0 <rint+0xe4>
 80047de:	2d33      	cmp	r5, #51	@ 0x33
 80047e0:	dd09      	ble.n	80047f6 <rint+0xea>
 80047e2:	f5b5 6f80 	cmp.w	r5, #1024	@ 0x400
 80047e6:	d1cc      	bne.n	8004782 <rint+0x76>
 80047e8:	4610      	mov	r0, r2
 80047ea:	4619      	mov	r1, r3
 80047ec:	f7fb fe1c 	bl	8000428 <__adddf3>
 80047f0:	4602      	mov	r2, r0
 80047f2:	460b      	mov	r3, r1
 80047f4:	e7c5      	b.n	8004782 <rint+0x76>
 80047f6:	f2a0 4513 	subw	r5, r0, #1043	@ 0x413
 80047fa:	f04f 30ff 	mov.w	r0, #4294967295
 80047fe:	40e8      	lsrs	r0, r5
 8004800:	4202      	tst	r2, r0
 8004802:	d0be      	beq.n	8004782 <rint+0x76>
 8004804:	0843      	lsrs	r3, r0, #1
 8004806:	ea11 0050 	ands.w	r0, r1, r0, lsr #1
 800480a:	bf1f      	itttt	ne
 800480c:	ea21 0303 	bicne.w	r3, r1, r3
 8004810:	f04f 4180 	movne.w	r1, #1073741824	@ 0x40000000
 8004814:	4129      	asrne	r1, r5
 8004816:	4319      	orrne	r1, r3
 8004818:	e7cd      	b.n	80047b6 <rint+0xaa>
 800481a:	bf00      	nop
 800481c:	08005270 	.word	0x08005270
 8004820:	000fffff 	.word	0x000fffff

08004824 <__kernel_cosf>:
 8004824:	ee10 3a10 	vmov	r3, s0
 8004828:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800482c:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8004830:	eef0 6a40 	vmov.f32	s13, s0
 8004834:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8004838:	d204      	bcs.n	8004844 <__kernel_cosf+0x20>
 800483a:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 800483e:	ee17 2a90 	vmov	r2, s15
 8004842:	b342      	cbz	r2, 8004896 <__kernel_cosf+0x72>
 8004844:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8004848:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 80048b4 <__kernel_cosf+0x90>
 800484c:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 80048b8 <__kernel_cosf+0x94>
 8004850:	4a1a      	ldr	r2, [pc, #104]	@ (80048bc <__kernel_cosf+0x98>)
 8004852:	eea7 6a27 	vfma.f32	s12, s14, s15
 8004856:	4293      	cmp	r3, r2
 8004858:	eddf 7a19 	vldr	s15, [pc, #100]	@ 80048c0 <__kernel_cosf+0x9c>
 800485c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8004860:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 80048c4 <__kernel_cosf+0xa0>
 8004864:	eea7 6a87 	vfma.f32	s12, s15, s14
 8004868:	eddf 7a17 	vldr	s15, [pc, #92]	@ 80048c8 <__kernel_cosf+0xa4>
 800486c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8004870:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 80048cc <__kernel_cosf+0xa8>
 8004874:	eea7 6a87 	vfma.f32	s12, s15, s14
 8004878:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 800487c:	ee26 6a07 	vmul.f32	s12, s12, s14
 8004880:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8004884:	eee7 0a06 	vfma.f32	s1, s14, s12
 8004888:	ee67 7a27 	vmul.f32	s15, s14, s15
 800488c:	d804      	bhi.n	8004898 <__kernel_cosf+0x74>
 800488e:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8004892:	ee30 0a67 	vsub.f32	s0, s0, s15
 8004896:	4770      	bx	lr
 8004898:	4a0d      	ldr	r2, [pc, #52]	@ (80048d0 <__kernel_cosf+0xac>)
 800489a:	4293      	cmp	r3, r2
 800489c:	bf9a      	itte	ls
 800489e:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 80048a2:	ee07 3a10 	vmovls	s14, r3
 80048a6:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 80048aa:	ee30 0a47 	vsub.f32	s0, s0, s14
 80048ae:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80048b2:	e7ec      	b.n	800488e <__kernel_cosf+0x6a>
 80048b4:	ad47d74e 	.word	0xad47d74e
 80048b8:	310f74f6 	.word	0x310f74f6
 80048bc:	3e999999 	.word	0x3e999999
 80048c0:	b493f27c 	.word	0xb493f27c
 80048c4:	37d00d01 	.word	0x37d00d01
 80048c8:	bab60b61 	.word	0xbab60b61
 80048cc:	3d2aaaab 	.word	0x3d2aaaab
 80048d0:	3f480000 	.word	0x3f480000

080048d4 <__kernel_sinf>:
 80048d4:	ee10 3a10 	vmov	r3, s0
 80048d8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80048dc:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 80048e0:	d204      	bcs.n	80048ec <__kernel_sinf+0x18>
 80048e2:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80048e6:	ee17 3a90 	vmov	r3, s15
 80048ea:	b35b      	cbz	r3, 8004944 <__kernel_sinf+0x70>
 80048ec:	ee20 7a00 	vmul.f32	s14, s0, s0
 80048f0:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8004948 <__kernel_sinf+0x74>
 80048f4:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 800494c <__kernel_sinf+0x78>
 80048f8:	eea7 6a27 	vfma.f32	s12, s14, s15
 80048fc:	eddf 7a14 	vldr	s15, [pc, #80]	@ 8004950 <__kernel_sinf+0x7c>
 8004900:	eee6 7a07 	vfma.f32	s15, s12, s14
 8004904:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 8004954 <__kernel_sinf+0x80>
 8004908:	eea7 6a87 	vfma.f32	s12, s15, s14
 800490c:	eddf 7a12 	vldr	s15, [pc, #72]	@ 8004958 <__kernel_sinf+0x84>
 8004910:	ee60 6a07 	vmul.f32	s13, s0, s14
 8004914:	eee6 7a07 	vfma.f32	s15, s12, s14
 8004918:	b930      	cbnz	r0, 8004928 <__kernel_sinf+0x54>
 800491a:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 800495c <__kernel_sinf+0x88>
 800491e:	eea7 6a27 	vfma.f32	s12, s14, s15
 8004922:	eea6 0a26 	vfma.f32	s0, s12, s13
 8004926:	4770      	bx	lr
 8004928:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800492c:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8004930:	eee0 7a86 	vfma.f32	s15, s1, s12
 8004934:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8004938:	eddf 7a09 	vldr	s15, [pc, #36]	@ 8004960 <__kernel_sinf+0x8c>
 800493c:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8004940:	ee30 0a60 	vsub.f32	s0, s0, s1
 8004944:	4770      	bx	lr
 8004946:	bf00      	nop
 8004948:	2f2ec9d3 	.word	0x2f2ec9d3
 800494c:	b2d72f34 	.word	0xb2d72f34
 8004950:	3638ef1b 	.word	0x3638ef1b
 8004954:	b9500d01 	.word	0xb9500d01
 8004958:	3c088889 	.word	0x3c088889
 800495c:	be2aaaab 	.word	0xbe2aaaab
 8004960:	3e2aaaab 	.word	0x3e2aaaab

08004964 <__ieee754_rem_pio2f>:
 8004964:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004966:	ee10 6a10 	vmov	r6, s0
 800496a:	4b88      	ldr	r3, [pc, #544]	@ (8004b8c <__ieee754_rem_pio2f+0x228>)
 800496c:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 8004970:	429d      	cmp	r5, r3
 8004972:	b087      	sub	sp, #28
 8004974:	4604      	mov	r4, r0
 8004976:	d805      	bhi.n	8004984 <__ieee754_rem_pio2f+0x20>
 8004978:	2300      	movs	r3, #0
 800497a:	ed80 0a00 	vstr	s0, [r0]
 800497e:	6043      	str	r3, [r0, #4]
 8004980:	2000      	movs	r0, #0
 8004982:	e022      	b.n	80049ca <__ieee754_rem_pio2f+0x66>
 8004984:	4b82      	ldr	r3, [pc, #520]	@ (8004b90 <__ieee754_rem_pio2f+0x22c>)
 8004986:	429d      	cmp	r5, r3
 8004988:	d83a      	bhi.n	8004a00 <__ieee754_rem_pio2f+0x9c>
 800498a:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800498e:	2e00      	cmp	r6, #0
 8004990:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8004b94 <__ieee754_rem_pio2f+0x230>
 8004994:	4a80      	ldr	r2, [pc, #512]	@ (8004b98 <__ieee754_rem_pio2f+0x234>)
 8004996:	f023 030f 	bic.w	r3, r3, #15
 800499a:	dd18      	ble.n	80049ce <__ieee754_rem_pio2f+0x6a>
 800499c:	4293      	cmp	r3, r2
 800499e:	ee70 7a47 	vsub.f32	s15, s0, s14
 80049a2:	bf09      	itett	eq
 80049a4:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 8004b9c <__ieee754_rem_pio2f+0x238>
 80049a8:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 8004ba0 <__ieee754_rem_pio2f+0x23c>
 80049ac:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 8004ba4 <__ieee754_rem_pio2f+0x240>
 80049b0:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 80049b4:	ee37 7ae6 	vsub.f32	s14, s15, s13
 80049b8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80049bc:	ed80 7a00 	vstr	s14, [r0]
 80049c0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80049c4:	edc0 7a01 	vstr	s15, [r0, #4]
 80049c8:	2001      	movs	r0, #1
 80049ca:	b007      	add	sp, #28
 80049cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80049ce:	4293      	cmp	r3, r2
 80049d0:	ee70 7a07 	vadd.f32	s15, s0, s14
 80049d4:	bf09      	itett	eq
 80049d6:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 8004b9c <__ieee754_rem_pio2f+0x238>
 80049da:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 8004ba0 <__ieee754_rem_pio2f+0x23c>
 80049de:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 8004ba4 <__ieee754_rem_pio2f+0x240>
 80049e2:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 80049e6:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80049ea:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80049ee:	ed80 7a00 	vstr	s14, [r0]
 80049f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049f6:	edc0 7a01 	vstr	s15, [r0, #4]
 80049fa:	f04f 30ff 	mov.w	r0, #4294967295
 80049fe:	e7e4      	b.n	80049ca <__ieee754_rem_pio2f+0x66>
 8004a00:	4b69      	ldr	r3, [pc, #420]	@ (8004ba8 <__ieee754_rem_pio2f+0x244>)
 8004a02:	429d      	cmp	r5, r3
 8004a04:	d873      	bhi.n	8004aee <__ieee754_rem_pio2f+0x18a>
 8004a06:	f000 f8dd 	bl	8004bc4 <fabsf>
 8004a0a:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 8004bac <__ieee754_rem_pio2f+0x248>
 8004a0e:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8004a12:	eee0 7a07 	vfma.f32	s15, s0, s14
 8004a16:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004a1a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004a1e:	ee17 0a90 	vmov	r0, s15
 8004a22:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8004b94 <__ieee754_rem_pio2f+0x230>
 8004a26:	eea7 0a67 	vfms.f32	s0, s14, s15
 8004a2a:	281f      	cmp	r0, #31
 8004a2c:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8004ba0 <__ieee754_rem_pio2f+0x23c>
 8004a30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a34:	eeb1 6a47 	vneg.f32	s12, s14
 8004a38:	ee70 6a67 	vsub.f32	s13, s0, s15
 8004a3c:	ee16 1a90 	vmov	r1, s13
 8004a40:	dc09      	bgt.n	8004a56 <__ieee754_rem_pio2f+0xf2>
 8004a42:	4a5b      	ldr	r2, [pc, #364]	@ (8004bb0 <__ieee754_rem_pio2f+0x24c>)
 8004a44:	1e47      	subs	r7, r0, #1
 8004a46:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8004a4a:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 8004a4e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d107      	bne.n	8004a66 <__ieee754_rem_pio2f+0x102>
 8004a56:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 8004a5a:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 8004a5e:	2a08      	cmp	r2, #8
 8004a60:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8004a64:	dc14      	bgt.n	8004a90 <__ieee754_rem_pio2f+0x12c>
 8004a66:	6021      	str	r1, [r4, #0]
 8004a68:	ed94 7a00 	vldr	s14, [r4]
 8004a6c:	ee30 0a47 	vsub.f32	s0, s0, s14
 8004a70:	2e00      	cmp	r6, #0
 8004a72:	ee30 0a67 	vsub.f32	s0, s0, s15
 8004a76:	ed84 0a01 	vstr	s0, [r4, #4]
 8004a7a:	daa6      	bge.n	80049ca <__ieee754_rem_pio2f+0x66>
 8004a7c:	eeb1 7a47 	vneg.f32	s14, s14
 8004a80:	eeb1 0a40 	vneg.f32	s0, s0
 8004a84:	ed84 7a00 	vstr	s14, [r4]
 8004a88:	ed84 0a01 	vstr	s0, [r4, #4]
 8004a8c:	4240      	negs	r0, r0
 8004a8e:	e79c      	b.n	80049ca <__ieee754_rem_pio2f+0x66>
 8004a90:	eddf 5a42 	vldr	s11, [pc, #264]	@ 8004b9c <__ieee754_rem_pio2f+0x238>
 8004a94:	eef0 6a40 	vmov.f32	s13, s0
 8004a98:	eee6 6a25 	vfma.f32	s13, s12, s11
 8004a9c:	ee70 7a66 	vsub.f32	s15, s0, s13
 8004aa0:	eee6 7a25 	vfma.f32	s15, s12, s11
 8004aa4:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8004ba4 <__ieee754_rem_pio2f+0x240>
 8004aa8:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8004aac:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8004ab0:	ee15 2a90 	vmov	r2, s11
 8004ab4:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8004ab8:	1a5b      	subs	r3, r3, r1
 8004aba:	2b19      	cmp	r3, #25
 8004abc:	dc04      	bgt.n	8004ac8 <__ieee754_rem_pio2f+0x164>
 8004abe:	edc4 5a00 	vstr	s11, [r4]
 8004ac2:	eeb0 0a66 	vmov.f32	s0, s13
 8004ac6:	e7cf      	b.n	8004a68 <__ieee754_rem_pio2f+0x104>
 8004ac8:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 8004bb4 <__ieee754_rem_pio2f+0x250>
 8004acc:	eeb0 0a66 	vmov.f32	s0, s13
 8004ad0:	eea6 0a25 	vfma.f32	s0, s12, s11
 8004ad4:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8004ad8:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8004bb8 <__ieee754_rem_pio2f+0x254>
 8004adc:	eee6 7a25 	vfma.f32	s15, s12, s11
 8004ae0:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8004ae4:	ee30 7a67 	vsub.f32	s14, s0, s15
 8004ae8:	ed84 7a00 	vstr	s14, [r4]
 8004aec:	e7bc      	b.n	8004a68 <__ieee754_rem_pio2f+0x104>
 8004aee:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 8004af2:	d306      	bcc.n	8004b02 <__ieee754_rem_pio2f+0x19e>
 8004af4:	ee70 7a40 	vsub.f32	s15, s0, s0
 8004af8:	edc0 7a01 	vstr	s15, [r0, #4]
 8004afc:	edc0 7a00 	vstr	s15, [r0]
 8004b00:	e73e      	b.n	8004980 <__ieee754_rem_pio2f+0x1c>
 8004b02:	15ea      	asrs	r2, r5, #23
 8004b04:	3a86      	subs	r2, #134	@ 0x86
 8004b06:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8004b0a:	ee07 3a90 	vmov	s15, r3
 8004b0e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8004b12:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 8004bbc <__ieee754_rem_pio2f+0x258>
 8004b16:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8004b1a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004b1e:	ed8d 7a03 	vstr	s14, [sp, #12]
 8004b22:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004b26:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8004b2a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8004b2e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004b32:	ed8d 7a04 	vstr	s14, [sp, #16]
 8004b36:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004b3a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004b3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b42:	edcd 7a05 	vstr	s15, [sp, #20]
 8004b46:	d11e      	bne.n	8004b86 <__ieee754_rem_pio2f+0x222>
 8004b48:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8004b4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b50:	bf0c      	ite	eq
 8004b52:	2301      	moveq	r3, #1
 8004b54:	2302      	movne	r3, #2
 8004b56:	491a      	ldr	r1, [pc, #104]	@ (8004bc0 <__ieee754_rem_pio2f+0x25c>)
 8004b58:	9101      	str	r1, [sp, #4]
 8004b5a:	2102      	movs	r1, #2
 8004b5c:	9100      	str	r1, [sp, #0]
 8004b5e:	a803      	add	r0, sp, #12
 8004b60:	4621      	mov	r1, r4
 8004b62:	f000 f837 	bl	8004bd4 <__kernel_rem_pio2f>
 8004b66:	2e00      	cmp	r6, #0
 8004b68:	f6bf af2f 	bge.w	80049ca <__ieee754_rem_pio2f+0x66>
 8004b6c:	edd4 7a00 	vldr	s15, [r4]
 8004b70:	eef1 7a67 	vneg.f32	s15, s15
 8004b74:	edc4 7a00 	vstr	s15, [r4]
 8004b78:	edd4 7a01 	vldr	s15, [r4, #4]
 8004b7c:	eef1 7a67 	vneg.f32	s15, s15
 8004b80:	edc4 7a01 	vstr	s15, [r4, #4]
 8004b84:	e782      	b.n	8004a8c <__ieee754_rem_pio2f+0x128>
 8004b86:	2303      	movs	r3, #3
 8004b88:	e7e5      	b.n	8004b56 <__ieee754_rem_pio2f+0x1f2>
 8004b8a:	bf00      	nop
 8004b8c:	3f490fd8 	.word	0x3f490fd8
 8004b90:	4016cbe3 	.word	0x4016cbe3
 8004b94:	3fc90f80 	.word	0x3fc90f80
 8004b98:	3fc90fd0 	.word	0x3fc90fd0
 8004b9c:	37354400 	.word	0x37354400
 8004ba0:	37354443 	.word	0x37354443
 8004ba4:	2e85a308 	.word	0x2e85a308
 8004ba8:	43490f80 	.word	0x43490f80
 8004bac:	3f22f984 	.word	0x3f22f984
 8004bb0:	08005280 	.word	0x08005280
 8004bb4:	2e85a300 	.word	0x2e85a300
 8004bb8:	248d3132 	.word	0x248d3132
 8004bbc:	43800000 	.word	0x43800000
 8004bc0:	08005300 	.word	0x08005300

08004bc4 <fabsf>:
 8004bc4:	ee10 3a10 	vmov	r3, s0
 8004bc8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004bcc:	ee00 3a10 	vmov	s0, r3
 8004bd0:	4770      	bx	lr
	...

08004bd4 <__kernel_rem_pio2f>:
 8004bd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bd8:	ed2d 8b04 	vpush	{d8-d9}
 8004bdc:	b0d9      	sub	sp, #356	@ 0x164
 8004bde:	4690      	mov	r8, r2
 8004be0:	9001      	str	r0, [sp, #4]
 8004be2:	4ab9      	ldr	r2, [pc, #740]	@ (8004ec8 <__kernel_rem_pio2f+0x2f4>)
 8004be4:	9866      	ldr	r0, [sp, #408]	@ 0x198
 8004be6:	f118 0f04 	cmn.w	r8, #4
 8004bea:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 8004bee:	460f      	mov	r7, r1
 8004bf0:	f103 3bff 	add.w	fp, r3, #4294967295
 8004bf4:	db27      	blt.n	8004c46 <__kernel_rem_pio2f+0x72>
 8004bf6:	f1b8 0203 	subs.w	r2, r8, #3
 8004bfa:	bf48      	it	mi
 8004bfc:	f108 0204 	addmi.w	r2, r8, #4
 8004c00:	10d2      	asrs	r2, r2, #3
 8004c02:	1c55      	adds	r5, r2, #1
 8004c04:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8004c06:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 8004ed8 <__kernel_rem_pio2f+0x304>
 8004c0a:	00e8      	lsls	r0, r5, #3
 8004c0c:	eba2 060b 	sub.w	r6, r2, fp
 8004c10:	9002      	str	r0, [sp, #8]
 8004c12:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 8004c16:	eb0a 0c0b 	add.w	ip, sl, fp
 8004c1a:	ac1c      	add	r4, sp, #112	@ 0x70
 8004c1c:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 8004c20:	2000      	movs	r0, #0
 8004c22:	4560      	cmp	r0, ip
 8004c24:	dd11      	ble.n	8004c4a <__kernel_rem_pio2f+0x76>
 8004c26:	a91c      	add	r1, sp, #112	@ 0x70
 8004c28:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 8004c2c:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 8004c30:	f04f 0c00 	mov.w	ip, #0
 8004c34:	45d4      	cmp	ip, sl
 8004c36:	dc27      	bgt.n	8004c88 <__kernel_rem_pio2f+0xb4>
 8004c38:	f8dd e004 	ldr.w	lr, [sp, #4]
 8004c3c:	eddf 7aa6 	vldr	s15, [pc, #664]	@ 8004ed8 <__kernel_rem_pio2f+0x304>
 8004c40:	4606      	mov	r6, r0
 8004c42:	2400      	movs	r4, #0
 8004c44:	e016      	b.n	8004c74 <__kernel_rem_pio2f+0xa0>
 8004c46:	2200      	movs	r2, #0
 8004c48:	e7db      	b.n	8004c02 <__kernel_rem_pio2f+0x2e>
 8004c4a:	42c6      	cmn	r6, r0
 8004c4c:	bf5d      	ittte	pl
 8004c4e:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 8004c52:	ee07 1a90 	vmovpl	s15, r1
 8004c56:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8004c5a:	eef0 7a47 	vmovmi.f32	s15, s14
 8004c5e:	ece4 7a01 	vstmia	r4!, {s15}
 8004c62:	3001      	adds	r0, #1
 8004c64:	e7dd      	b.n	8004c22 <__kernel_rem_pio2f+0x4e>
 8004c66:	ecfe 6a01 	vldmia	lr!, {s13}
 8004c6a:	ed96 7a00 	vldr	s14, [r6]
 8004c6e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8004c72:	3401      	adds	r4, #1
 8004c74:	455c      	cmp	r4, fp
 8004c76:	f1a6 0604 	sub.w	r6, r6, #4
 8004c7a:	ddf4      	ble.n	8004c66 <__kernel_rem_pio2f+0x92>
 8004c7c:	ece9 7a01 	vstmia	r9!, {s15}
 8004c80:	f10c 0c01 	add.w	ip, ip, #1
 8004c84:	3004      	adds	r0, #4
 8004c86:	e7d5      	b.n	8004c34 <__kernel_rem_pio2f+0x60>
 8004c88:	a908      	add	r1, sp, #32
 8004c8a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8004c8e:	9104      	str	r1, [sp, #16]
 8004c90:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8004c92:	eddf 8a90 	vldr	s17, [pc, #576]	@ 8004ed4 <__kernel_rem_pio2f+0x300>
 8004c96:	ed9f 9a8e 	vldr	s18, [pc, #568]	@ 8004ed0 <__kernel_rem_pio2f+0x2fc>
 8004c9a:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8004c9e:	9203      	str	r2, [sp, #12]
 8004ca0:	4654      	mov	r4, sl
 8004ca2:	00a2      	lsls	r2, r4, #2
 8004ca4:	9205      	str	r2, [sp, #20]
 8004ca6:	aa58      	add	r2, sp, #352	@ 0x160
 8004ca8:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8004cac:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 8004cb0:	a944      	add	r1, sp, #272	@ 0x110
 8004cb2:	aa08      	add	r2, sp, #32
 8004cb4:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8004cb8:	4694      	mov	ip, r2
 8004cba:	4626      	mov	r6, r4
 8004cbc:	2e00      	cmp	r6, #0
 8004cbe:	f1a0 0004 	sub.w	r0, r0, #4
 8004cc2:	dc4c      	bgt.n	8004d5e <__kernel_rem_pio2f+0x18a>
 8004cc4:	4628      	mov	r0, r5
 8004cc6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004cca:	f000 f9f5 	bl	80050b8 <scalbnf>
 8004cce:	eeb0 8a40 	vmov.f32	s16, s0
 8004cd2:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 8004cd6:	ee28 0a00 	vmul.f32	s0, s16, s0
 8004cda:	f000 fa53 	bl	8005184 <floorf>
 8004cde:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 8004ce2:	eea0 8a67 	vfms.f32	s16, s0, s15
 8004ce6:	2d00      	cmp	r5, #0
 8004ce8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004cec:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8004cf0:	ee17 9a90 	vmov	r9, s15
 8004cf4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004cf8:	ee38 8a67 	vsub.f32	s16, s16, s15
 8004cfc:	dd41      	ble.n	8004d82 <__kernel_rem_pio2f+0x1ae>
 8004cfe:	f104 3cff 	add.w	ip, r4, #4294967295
 8004d02:	a908      	add	r1, sp, #32
 8004d04:	f1c5 0e08 	rsb	lr, r5, #8
 8004d08:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 8004d0c:	fa46 f00e 	asr.w	r0, r6, lr
 8004d10:	4481      	add	r9, r0
 8004d12:	fa00 f00e 	lsl.w	r0, r0, lr
 8004d16:	1a36      	subs	r6, r6, r0
 8004d18:	f1c5 0007 	rsb	r0, r5, #7
 8004d1c:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 8004d20:	4106      	asrs	r6, r0
 8004d22:	2e00      	cmp	r6, #0
 8004d24:	dd3c      	ble.n	8004da0 <__kernel_rem_pio2f+0x1cc>
 8004d26:	f04f 0e00 	mov.w	lr, #0
 8004d2a:	f109 0901 	add.w	r9, r9, #1
 8004d2e:	4670      	mov	r0, lr
 8004d30:	4574      	cmp	r4, lr
 8004d32:	dc68      	bgt.n	8004e06 <__kernel_rem_pio2f+0x232>
 8004d34:	2d00      	cmp	r5, #0
 8004d36:	dd03      	ble.n	8004d40 <__kernel_rem_pio2f+0x16c>
 8004d38:	2d01      	cmp	r5, #1
 8004d3a:	d074      	beq.n	8004e26 <__kernel_rem_pio2f+0x252>
 8004d3c:	2d02      	cmp	r5, #2
 8004d3e:	d07d      	beq.n	8004e3c <__kernel_rem_pio2f+0x268>
 8004d40:	2e02      	cmp	r6, #2
 8004d42:	d12d      	bne.n	8004da0 <__kernel_rem_pio2f+0x1cc>
 8004d44:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8004d48:	ee30 8a48 	vsub.f32	s16, s0, s16
 8004d4c:	b340      	cbz	r0, 8004da0 <__kernel_rem_pio2f+0x1cc>
 8004d4e:	4628      	mov	r0, r5
 8004d50:	9306      	str	r3, [sp, #24]
 8004d52:	f000 f9b1 	bl	80050b8 <scalbnf>
 8004d56:	9b06      	ldr	r3, [sp, #24]
 8004d58:	ee38 8a40 	vsub.f32	s16, s16, s0
 8004d5c:	e020      	b.n	8004da0 <__kernel_rem_pio2f+0x1cc>
 8004d5e:	ee60 7a28 	vmul.f32	s15, s0, s17
 8004d62:	3e01      	subs	r6, #1
 8004d64:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004d68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004d6c:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8004d70:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8004d74:	ecac 0a01 	vstmia	ip!, {s0}
 8004d78:	ed90 0a00 	vldr	s0, [r0]
 8004d7c:	ee37 0a80 	vadd.f32	s0, s15, s0
 8004d80:	e79c      	b.n	8004cbc <__kernel_rem_pio2f+0xe8>
 8004d82:	d105      	bne.n	8004d90 <__kernel_rem_pio2f+0x1bc>
 8004d84:	1e60      	subs	r0, r4, #1
 8004d86:	a908      	add	r1, sp, #32
 8004d88:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 8004d8c:	11f6      	asrs	r6, r6, #7
 8004d8e:	e7c8      	b.n	8004d22 <__kernel_rem_pio2f+0x14e>
 8004d90:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8004d94:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8004d98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d9c:	da31      	bge.n	8004e02 <__kernel_rem_pio2f+0x22e>
 8004d9e:	2600      	movs	r6, #0
 8004da0:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8004da4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004da8:	f040 8098 	bne.w	8004edc <__kernel_rem_pio2f+0x308>
 8004dac:	1e60      	subs	r0, r4, #1
 8004dae:	2200      	movs	r2, #0
 8004db0:	4550      	cmp	r0, sl
 8004db2:	da4b      	bge.n	8004e4c <__kernel_rem_pio2f+0x278>
 8004db4:	2a00      	cmp	r2, #0
 8004db6:	d065      	beq.n	8004e84 <__kernel_rem_pio2f+0x2b0>
 8004db8:	3c01      	subs	r4, #1
 8004dba:	ab08      	add	r3, sp, #32
 8004dbc:	3d08      	subs	r5, #8
 8004dbe:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d0f8      	beq.n	8004db8 <__kernel_rem_pio2f+0x1e4>
 8004dc6:	4628      	mov	r0, r5
 8004dc8:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8004dcc:	f000 f974 	bl	80050b8 <scalbnf>
 8004dd0:	1c63      	adds	r3, r4, #1
 8004dd2:	aa44      	add	r2, sp, #272	@ 0x110
 8004dd4:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8004ed4 <__kernel_rem_pio2f+0x300>
 8004dd8:	0099      	lsls	r1, r3, #2
 8004dda:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8004dde:	4623      	mov	r3, r4
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	f280 80a9 	bge.w	8004f38 <__kernel_rem_pio2f+0x364>
 8004de6:	4623      	mov	r3, r4
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	f2c0 80c7 	blt.w	8004f7c <__kernel_rem_pio2f+0x3a8>
 8004dee:	aa44      	add	r2, sp, #272	@ 0x110
 8004df0:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8004df4:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 8004ecc <__kernel_rem_pio2f+0x2f8>
 8004df8:	eddf 7a37 	vldr	s15, [pc, #220]	@ 8004ed8 <__kernel_rem_pio2f+0x304>
 8004dfc:	2000      	movs	r0, #0
 8004dfe:	1ae2      	subs	r2, r4, r3
 8004e00:	e0b1      	b.n	8004f66 <__kernel_rem_pio2f+0x392>
 8004e02:	2602      	movs	r6, #2
 8004e04:	e78f      	b.n	8004d26 <__kernel_rem_pio2f+0x152>
 8004e06:	f852 1b04 	ldr.w	r1, [r2], #4
 8004e0a:	b948      	cbnz	r0, 8004e20 <__kernel_rem_pio2f+0x24c>
 8004e0c:	b121      	cbz	r1, 8004e18 <__kernel_rem_pio2f+0x244>
 8004e0e:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 8004e12:	f842 1c04 	str.w	r1, [r2, #-4]
 8004e16:	2101      	movs	r1, #1
 8004e18:	f10e 0e01 	add.w	lr, lr, #1
 8004e1c:	4608      	mov	r0, r1
 8004e1e:	e787      	b.n	8004d30 <__kernel_rem_pio2f+0x15c>
 8004e20:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 8004e24:	e7f5      	b.n	8004e12 <__kernel_rem_pio2f+0x23e>
 8004e26:	f104 3cff 	add.w	ip, r4, #4294967295
 8004e2a:	aa08      	add	r2, sp, #32
 8004e2c:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8004e30:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004e34:	a908      	add	r1, sp, #32
 8004e36:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 8004e3a:	e781      	b.n	8004d40 <__kernel_rem_pio2f+0x16c>
 8004e3c:	f104 3cff 	add.w	ip, r4, #4294967295
 8004e40:	aa08      	add	r2, sp, #32
 8004e42:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8004e46:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8004e4a:	e7f3      	b.n	8004e34 <__kernel_rem_pio2f+0x260>
 8004e4c:	a908      	add	r1, sp, #32
 8004e4e:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8004e52:	3801      	subs	r0, #1
 8004e54:	430a      	orrs	r2, r1
 8004e56:	e7ab      	b.n	8004db0 <__kernel_rem_pio2f+0x1dc>
 8004e58:	3201      	adds	r2, #1
 8004e5a:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 8004e5e:	2e00      	cmp	r6, #0
 8004e60:	d0fa      	beq.n	8004e58 <__kernel_rem_pio2f+0x284>
 8004e62:	9905      	ldr	r1, [sp, #20]
 8004e64:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 8004e68:	eb0d 0001 	add.w	r0, sp, r1
 8004e6c:	18e6      	adds	r6, r4, r3
 8004e6e:	a91c      	add	r1, sp, #112	@ 0x70
 8004e70:	f104 0c01 	add.w	ip, r4, #1
 8004e74:	384c      	subs	r0, #76	@ 0x4c
 8004e76:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 8004e7a:	4422      	add	r2, r4
 8004e7c:	4562      	cmp	r2, ip
 8004e7e:	da04      	bge.n	8004e8a <__kernel_rem_pio2f+0x2b6>
 8004e80:	4614      	mov	r4, r2
 8004e82:	e70e      	b.n	8004ca2 <__kernel_rem_pio2f+0xce>
 8004e84:	9804      	ldr	r0, [sp, #16]
 8004e86:	2201      	movs	r2, #1
 8004e88:	e7e7      	b.n	8004e5a <__kernel_rem_pio2f+0x286>
 8004e8a:	9903      	ldr	r1, [sp, #12]
 8004e8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8004e90:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 8004e94:	9105      	str	r1, [sp, #20]
 8004e96:	ee07 1a90 	vmov	s15, r1
 8004e9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004e9e:	2400      	movs	r4, #0
 8004ea0:	ece6 7a01 	vstmia	r6!, {s15}
 8004ea4:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 8004ed8 <__kernel_rem_pio2f+0x304>
 8004ea8:	46b1      	mov	r9, r6
 8004eaa:	455c      	cmp	r4, fp
 8004eac:	dd04      	ble.n	8004eb8 <__kernel_rem_pio2f+0x2e4>
 8004eae:	ece0 7a01 	vstmia	r0!, {s15}
 8004eb2:	f10c 0c01 	add.w	ip, ip, #1
 8004eb6:	e7e1      	b.n	8004e7c <__kernel_rem_pio2f+0x2a8>
 8004eb8:	ecfe 6a01 	vldmia	lr!, {s13}
 8004ebc:	ed39 7a01 	vldmdb	r9!, {s14}
 8004ec0:	3401      	adds	r4, #1
 8004ec2:	eee6 7a87 	vfma.f32	s15, s13, s14
 8004ec6:	e7f0      	b.n	8004eaa <__kernel_rem_pio2f+0x2d6>
 8004ec8:	08005644 	.word	0x08005644
 8004ecc:	08005618 	.word	0x08005618
 8004ed0:	43800000 	.word	0x43800000
 8004ed4:	3b800000 	.word	0x3b800000
 8004ed8:	00000000 	.word	0x00000000
 8004edc:	9b02      	ldr	r3, [sp, #8]
 8004ede:	eeb0 0a48 	vmov.f32	s0, s16
 8004ee2:	eba3 0008 	sub.w	r0, r3, r8
 8004ee6:	f000 f8e7 	bl	80050b8 <scalbnf>
 8004eea:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 8004ed0 <__kernel_rem_pio2f+0x2fc>
 8004eee:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8004ef2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ef6:	db19      	blt.n	8004f2c <__kernel_rem_pio2f+0x358>
 8004ef8:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 8004ed4 <__kernel_rem_pio2f+0x300>
 8004efc:	ee60 7a27 	vmul.f32	s15, s0, s15
 8004f00:	aa08      	add	r2, sp, #32
 8004f02:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004f06:	3508      	adds	r5, #8
 8004f08:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004f0c:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8004f10:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004f14:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8004f18:	ee10 3a10 	vmov	r3, s0
 8004f1c:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8004f20:	ee17 3a90 	vmov	r3, s15
 8004f24:	3401      	adds	r4, #1
 8004f26:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8004f2a:	e74c      	b.n	8004dc6 <__kernel_rem_pio2f+0x1f2>
 8004f2c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8004f30:	aa08      	add	r2, sp, #32
 8004f32:	ee10 3a10 	vmov	r3, s0
 8004f36:	e7f6      	b.n	8004f26 <__kernel_rem_pio2f+0x352>
 8004f38:	a808      	add	r0, sp, #32
 8004f3a:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8004f3e:	9001      	str	r0, [sp, #4]
 8004f40:	ee07 0a90 	vmov	s15, r0
 8004f44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004f48:	3b01      	subs	r3, #1
 8004f4a:	ee67 7a80 	vmul.f32	s15, s15, s0
 8004f4e:	ee20 0a07 	vmul.f32	s0, s0, s14
 8004f52:	ed62 7a01 	vstmdb	r2!, {s15}
 8004f56:	e743      	b.n	8004de0 <__kernel_rem_pio2f+0x20c>
 8004f58:	ecfc 6a01 	vldmia	ip!, {s13}
 8004f5c:	ecb5 7a01 	vldmia	r5!, {s14}
 8004f60:	eee6 7a87 	vfma.f32	s15, s13, s14
 8004f64:	3001      	adds	r0, #1
 8004f66:	4550      	cmp	r0, sl
 8004f68:	dc01      	bgt.n	8004f6e <__kernel_rem_pio2f+0x39a>
 8004f6a:	4282      	cmp	r2, r0
 8004f6c:	daf4      	bge.n	8004f58 <__kernel_rem_pio2f+0x384>
 8004f6e:	a858      	add	r0, sp, #352	@ 0x160
 8004f70:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8004f74:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 8004f78:	3b01      	subs	r3, #1
 8004f7a:	e735      	b.n	8004de8 <__kernel_rem_pio2f+0x214>
 8004f7c:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8004f7e:	2b02      	cmp	r3, #2
 8004f80:	dc09      	bgt.n	8004f96 <__kernel_rem_pio2f+0x3c2>
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	dc2b      	bgt.n	8004fde <__kernel_rem_pio2f+0x40a>
 8004f86:	d044      	beq.n	8005012 <__kernel_rem_pio2f+0x43e>
 8004f88:	f009 0007 	and.w	r0, r9, #7
 8004f8c:	b059      	add	sp, #356	@ 0x164
 8004f8e:	ecbd 8b04 	vpop	{d8-d9}
 8004f92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f96:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8004f98:	2b03      	cmp	r3, #3
 8004f9a:	d1f5      	bne.n	8004f88 <__kernel_rem_pio2f+0x3b4>
 8004f9c:	aa30      	add	r2, sp, #192	@ 0xc0
 8004f9e:	1f0b      	subs	r3, r1, #4
 8004fa0:	4413      	add	r3, r2
 8004fa2:	461a      	mov	r2, r3
 8004fa4:	4620      	mov	r0, r4
 8004fa6:	2800      	cmp	r0, #0
 8004fa8:	f1a2 0204 	sub.w	r2, r2, #4
 8004fac:	dc52      	bgt.n	8005054 <__kernel_rem_pio2f+0x480>
 8004fae:	4622      	mov	r2, r4
 8004fb0:	2a01      	cmp	r2, #1
 8004fb2:	f1a3 0304 	sub.w	r3, r3, #4
 8004fb6:	dc5d      	bgt.n	8005074 <__kernel_rem_pio2f+0x4a0>
 8004fb8:	ab30      	add	r3, sp, #192	@ 0xc0
 8004fba:	ed5f 7a39 	vldr	s15, [pc, #-228]	@ 8004ed8 <__kernel_rem_pio2f+0x304>
 8004fbe:	440b      	add	r3, r1
 8004fc0:	2c01      	cmp	r4, #1
 8004fc2:	dc67      	bgt.n	8005094 <__kernel_rem_pio2f+0x4c0>
 8004fc4:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 8004fc8:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 8004fcc:	2e00      	cmp	r6, #0
 8004fce:	d167      	bne.n	80050a0 <__kernel_rem_pio2f+0x4cc>
 8004fd0:	edc7 6a00 	vstr	s13, [r7]
 8004fd4:	ed87 7a01 	vstr	s14, [r7, #4]
 8004fd8:	edc7 7a02 	vstr	s15, [r7, #8]
 8004fdc:	e7d4      	b.n	8004f88 <__kernel_rem_pio2f+0x3b4>
 8004fde:	ab30      	add	r3, sp, #192	@ 0xc0
 8004fe0:	ed1f 7a43 	vldr	s14, [pc, #-268]	@ 8004ed8 <__kernel_rem_pio2f+0x304>
 8004fe4:	440b      	add	r3, r1
 8004fe6:	4622      	mov	r2, r4
 8004fe8:	2a00      	cmp	r2, #0
 8004fea:	da24      	bge.n	8005036 <__kernel_rem_pio2f+0x462>
 8004fec:	b34e      	cbz	r6, 8005042 <__kernel_rem_pio2f+0x46e>
 8004fee:	eef1 7a47 	vneg.f32	s15, s14
 8004ff2:	edc7 7a00 	vstr	s15, [r7]
 8004ff6:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 8004ffa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004ffe:	aa31      	add	r2, sp, #196	@ 0xc4
 8005000:	2301      	movs	r3, #1
 8005002:	429c      	cmp	r4, r3
 8005004:	da20      	bge.n	8005048 <__kernel_rem_pio2f+0x474>
 8005006:	b10e      	cbz	r6, 800500c <__kernel_rem_pio2f+0x438>
 8005008:	eef1 7a67 	vneg.f32	s15, s15
 800500c:	edc7 7a01 	vstr	s15, [r7, #4]
 8005010:	e7ba      	b.n	8004f88 <__kernel_rem_pio2f+0x3b4>
 8005012:	ab30      	add	r3, sp, #192	@ 0xc0
 8005014:	ed5f 7a50 	vldr	s15, [pc, #-320]	@ 8004ed8 <__kernel_rem_pio2f+0x304>
 8005018:	440b      	add	r3, r1
 800501a:	2c00      	cmp	r4, #0
 800501c:	da05      	bge.n	800502a <__kernel_rem_pio2f+0x456>
 800501e:	b10e      	cbz	r6, 8005024 <__kernel_rem_pio2f+0x450>
 8005020:	eef1 7a67 	vneg.f32	s15, s15
 8005024:	edc7 7a00 	vstr	s15, [r7]
 8005028:	e7ae      	b.n	8004f88 <__kernel_rem_pio2f+0x3b4>
 800502a:	ed33 7a01 	vldmdb	r3!, {s14}
 800502e:	3c01      	subs	r4, #1
 8005030:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005034:	e7f1      	b.n	800501a <__kernel_rem_pio2f+0x446>
 8005036:	ed73 7a01 	vldmdb	r3!, {s15}
 800503a:	3a01      	subs	r2, #1
 800503c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005040:	e7d2      	b.n	8004fe8 <__kernel_rem_pio2f+0x414>
 8005042:	eef0 7a47 	vmov.f32	s15, s14
 8005046:	e7d4      	b.n	8004ff2 <__kernel_rem_pio2f+0x41e>
 8005048:	ecb2 7a01 	vldmia	r2!, {s14}
 800504c:	3301      	adds	r3, #1
 800504e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005052:	e7d6      	b.n	8005002 <__kernel_rem_pio2f+0x42e>
 8005054:	edd2 7a00 	vldr	s15, [r2]
 8005058:	edd2 6a01 	vldr	s13, [r2, #4]
 800505c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8005060:	3801      	subs	r0, #1
 8005062:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005066:	ed82 7a00 	vstr	s14, [r2]
 800506a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800506e:	edc2 7a01 	vstr	s15, [r2, #4]
 8005072:	e798      	b.n	8004fa6 <__kernel_rem_pio2f+0x3d2>
 8005074:	edd3 7a00 	vldr	s15, [r3]
 8005078:	edd3 6a01 	vldr	s13, [r3, #4]
 800507c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8005080:	3a01      	subs	r2, #1
 8005082:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005086:	ed83 7a00 	vstr	s14, [r3]
 800508a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800508e:	edc3 7a01 	vstr	s15, [r3, #4]
 8005092:	e78d      	b.n	8004fb0 <__kernel_rem_pio2f+0x3dc>
 8005094:	ed33 7a01 	vldmdb	r3!, {s14}
 8005098:	3c01      	subs	r4, #1
 800509a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800509e:	e78f      	b.n	8004fc0 <__kernel_rem_pio2f+0x3ec>
 80050a0:	eef1 6a66 	vneg.f32	s13, s13
 80050a4:	eeb1 7a47 	vneg.f32	s14, s14
 80050a8:	edc7 6a00 	vstr	s13, [r7]
 80050ac:	ed87 7a01 	vstr	s14, [r7, #4]
 80050b0:	eef1 7a67 	vneg.f32	s15, s15
 80050b4:	e790      	b.n	8004fd8 <__kernel_rem_pio2f+0x404>
 80050b6:	bf00      	nop

080050b8 <scalbnf>:
 80050b8:	ee10 3a10 	vmov	r3, s0
 80050bc:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 80050c0:	d02b      	beq.n	800511a <scalbnf+0x62>
 80050c2:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 80050c6:	d302      	bcc.n	80050ce <scalbnf+0x16>
 80050c8:	ee30 0a00 	vadd.f32	s0, s0, s0
 80050cc:	4770      	bx	lr
 80050ce:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 80050d2:	d123      	bne.n	800511c <scalbnf+0x64>
 80050d4:	4b24      	ldr	r3, [pc, #144]	@ (8005168 <scalbnf+0xb0>)
 80050d6:	eddf 7a25 	vldr	s15, [pc, #148]	@ 800516c <scalbnf+0xb4>
 80050da:	4298      	cmp	r0, r3
 80050dc:	ee20 0a27 	vmul.f32	s0, s0, s15
 80050e0:	db17      	blt.n	8005112 <scalbnf+0x5a>
 80050e2:	ee10 3a10 	vmov	r3, s0
 80050e6:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80050ea:	3a19      	subs	r2, #25
 80050ec:	f24c 3150 	movw	r1, #50000	@ 0xc350
 80050f0:	4288      	cmp	r0, r1
 80050f2:	dd15      	ble.n	8005120 <scalbnf+0x68>
 80050f4:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8005170 <scalbnf+0xb8>
 80050f8:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8005174 <scalbnf+0xbc>
 80050fc:	ee10 3a10 	vmov	r3, s0
 8005100:	eeb0 7a67 	vmov.f32	s14, s15
 8005104:	2b00      	cmp	r3, #0
 8005106:	bfb8      	it	lt
 8005108:	eef0 7a66 	vmovlt.f32	s15, s13
 800510c:	ee27 0a87 	vmul.f32	s0, s15, s14
 8005110:	4770      	bx	lr
 8005112:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8005178 <scalbnf+0xc0>
 8005116:	ee27 0a80 	vmul.f32	s0, s15, s0
 800511a:	4770      	bx	lr
 800511c:	0dd2      	lsrs	r2, r2, #23
 800511e:	e7e5      	b.n	80050ec <scalbnf+0x34>
 8005120:	4410      	add	r0, r2
 8005122:	28fe      	cmp	r0, #254	@ 0xfe
 8005124:	dce6      	bgt.n	80050f4 <scalbnf+0x3c>
 8005126:	2800      	cmp	r0, #0
 8005128:	dd06      	ble.n	8005138 <scalbnf+0x80>
 800512a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800512e:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8005132:	ee00 3a10 	vmov	s0, r3
 8005136:	4770      	bx	lr
 8005138:	f110 0f16 	cmn.w	r0, #22
 800513c:	da09      	bge.n	8005152 <scalbnf+0x9a>
 800513e:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8005178 <scalbnf+0xc0>
 8005142:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800517c <scalbnf+0xc4>
 8005146:	ee10 3a10 	vmov	r3, s0
 800514a:	eeb0 7a67 	vmov.f32	s14, s15
 800514e:	2b00      	cmp	r3, #0
 8005150:	e7d9      	b.n	8005106 <scalbnf+0x4e>
 8005152:	3019      	adds	r0, #25
 8005154:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8005158:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800515c:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8005180 <scalbnf+0xc8>
 8005160:	ee07 3a90 	vmov	s15, r3
 8005164:	e7d7      	b.n	8005116 <scalbnf+0x5e>
 8005166:	bf00      	nop
 8005168:	ffff3cb0 	.word	0xffff3cb0
 800516c:	4c000000 	.word	0x4c000000
 8005170:	7149f2ca 	.word	0x7149f2ca
 8005174:	f149f2ca 	.word	0xf149f2ca
 8005178:	0da24260 	.word	0x0da24260
 800517c:	8da24260 	.word	0x8da24260
 8005180:	33000000 	.word	0x33000000

08005184 <floorf>:
 8005184:	ee10 3a10 	vmov	r3, s0
 8005188:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800518c:	3a7f      	subs	r2, #127	@ 0x7f
 800518e:	2a16      	cmp	r2, #22
 8005190:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005194:	dc2b      	bgt.n	80051ee <floorf+0x6a>
 8005196:	2a00      	cmp	r2, #0
 8005198:	da12      	bge.n	80051c0 <floorf+0x3c>
 800519a:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8005200 <floorf+0x7c>
 800519e:	ee30 0a27 	vadd.f32	s0, s0, s15
 80051a2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80051a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051aa:	dd06      	ble.n	80051ba <floorf+0x36>
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	da24      	bge.n	80051fa <floorf+0x76>
 80051b0:	2900      	cmp	r1, #0
 80051b2:	4b14      	ldr	r3, [pc, #80]	@ (8005204 <floorf+0x80>)
 80051b4:	bf08      	it	eq
 80051b6:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 80051ba:	ee00 3a10 	vmov	s0, r3
 80051be:	4770      	bx	lr
 80051c0:	4911      	ldr	r1, [pc, #68]	@ (8005208 <floorf+0x84>)
 80051c2:	4111      	asrs	r1, r2
 80051c4:	420b      	tst	r3, r1
 80051c6:	d0fa      	beq.n	80051be <floorf+0x3a>
 80051c8:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 8005200 <floorf+0x7c>
 80051cc:	ee30 0a27 	vadd.f32	s0, s0, s15
 80051d0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80051d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051d8:	ddef      	ble.n	80051ba <floorf+0x36>
 80051da:	2b00      	cmp	r3, #0
 80051dc:	bfbe      	ittt	lt
 80051de:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 80051e2:	fa40 f202 	asrlt.w	r2, r0, r2
 80051e6:	189b      	addlt	r3, r3, r2
 80051e8:	ea23 0301 	bic.w	r3, r3, r1
 80051ec:	e7e5      	b.n	80051ba <floorf+0x36>
 80051ee:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 80051f2:	d3e4      	bcc.n	80051be <floorf+0x3a>
 80051f4:	ee30 0a00 	vadd.f32	s0, s0, s0
 80051f8:	4770      	bx	lr
 80051fa:	2300      	movs	r3, #0
 80051fc:	e7dd      	b.n	80051ba <floorf+0x36>
 80051fe:	bf00      	nop
 8005200:	7149f2ca 	.word	0x7149f2ca
 8005204:	bf800000 	.word	0xbf800000
 8005208:	007fffff 	.word	0x007fffff

0800520c <_init>:
 800520c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800520e:	bf00      	nop
 8005210:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005212:	bc08      	pop	{r3}
 8005214:	469e      	mov	lr, r3
 8005216:	4770      	bx	lr

08005218 <_fini>:
 8005218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800521a:	bf00      	nop
 800521c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800521e:	bc08      	pop	{r3}
 8005220:	469e      	mov	lr, r3
 8005222:	4770      	bx	lr
