
I2C-1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004220  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  080043a8  080043a8  000053a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004400  08004400  0000605c  2**0
                  CONTENTS
  4 .ARM          00000008  08004400  08004400  00005400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004408  08004408  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004408  08004408  00005408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800440c  0800440c  0000540c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08004410  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000248  2000005c  0800446c  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002a4  0800446c  000062a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e1f2  00000000  00000000  0000608c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e2b  00000000  00000000  0001427e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c00  00000000  00000000  000160b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000094c  00000000  00000000  00016cb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026396  00000000  00000000  000175fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fcf6  00000000  00000000  0003d992  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ea280  00000000  00000000  0004d688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00137908  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000034b8  00000000  00000000  0013794c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  0013ae04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000005c 	.word	0x2000005c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004390 	.word	0x08004390

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000060 	.word	0x20000060
 80001c4:	08004390 	.word	0x08004390

080001c8 <strcmp>:
 80001c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d0:	2a01      	cmp	r2, #1
 80001d2:	bf28      	it	cs
 80001d4:	429a      	cmpcs	r2, r3
 80001d6:	d0f7      	beq.n	80001c8 <strcmp>
 80001d8:	1ad0      	subs	r0, r2, r3
 80001da:	4770      	bx	lr

080001dc <__aeabi_uldivmod>:
 80001dc:	b953      	cbnz	r3, 80001f4 <__aeabi_uldivmod+0x18>
 80001de:	b94a      	cbnz	r2, 80001f4 <__aeabi_uldivmod+0x18>
 80001e0:	2900      	cmp	r1, #0
 80001e2:	bf08      	it	eq
 80001e4:	2800      	cmpeq	r0, #0
 80001e6:	bf1c      	itt	ne
 80001e8:	f04f 31ff 	movne.w	r1, #4294967295
 80001ec:	f04f 30ff 	movne.w	r0, #4294967295
 80001f0:	f000 b96a 	b.w	80004c8 <__aeabi_idiv0>
 80001f4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001fc:	f000 f806 	bl	800020c <__udivmoddi4>
 8000200:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000204:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000208:	b004      	add	sp, #16
 800020a:	4770      	bx	lr

0800020c <__udivmoddi4>:
 800020c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000210:	9d08      	ldr	r5, [sp, #32]
 8000212:	460c      	mov	r4, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14e      	bne.n	80002b6 <__udivmoddi4+0xaa>
 8000218:	4694      	mov	ip, r2
 800021a:	458c      	cmp	ip, r1
 800021c:	4686      	mov	lr, r0
 800021e:	fab2 f282 	clz	r2, r2
 8000222:	d962      	bls.n	80002ea <__udivmoddi4+0xde>
 8000224:	b14a      	cbz	r2, 800023a <__udivmoddi4+0x2e>
 8000226:	f1c2 0320 	rsb	r3, r2, #32
 800022a:	4091      	lsls	r1, r2
 800022c:	fa20 f303 	lsr.w	r3, r0, r3
 8000230:	fa0c fc02 	lsl.w	ip, ip, r2
 8000234:	4319      	orrs	r1, r3
 8000236:	fa00 fe02 	lsl.w	lr, r0, r2
 800023a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800023e:	fa1f f68c 	uxth.w	r6, ip
 8000242:	fbb1 f4f7 	udiv	r4, r1, r7
 8000246:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800024a:	fb07 1114 	mls	r1, r7, r4, r1
 800024e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000252:	fb04 f106 	mul.w	r1, r4, r6
 8000256:	4299      	cmp	r1, r3
 8000258:	d90a      	bls.n	8000270 <__udivmoddi4+0x64>
 800025a:	eb1c 0303 	adds.w	r3, ip, r3
 800025e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000262:	f080 8112 	bcs.w	800048a <__udivmoddi4+0x27e>
 8000266:	4299      	cmp	r1, r3
 8000268:	f240 810f 	bls.w	800048a <__udivmoddi4+0x27e>
 800026c:	3c02      	subs	r4, #2
 800026e:	4463      	add	r3, ip
 8000270:	1a59      	subs	r1, r3, r1
 8000272:	fa1f f38e 	uxth.w	r3, lr
 8000276:	fbb1 f0f7 	udiv	r0, r1, r7
 800027a:	fb07 1110 	mls	r1, r7, r0, r1
 800027e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000282:	fb00 f606 	mul.w	r6, r0, r6
 8000286:	429e      	cmp	r6, r3
 8000288:	d90a      	bls.n	80002a0 <__udivmoddi4+0x94>
 800028a:	eb1c 0303 	adds.w	r3, ip, r3
 800028e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000292:	f080 80fc 	bcs.w	800048e <__udivmoddi4+0x282>
 8000296:	429e      	cmp	r6, r3
 8000298:	f240 80f9 	bls.w	800048e <__udivmoddi4+0x282>
 800029c:	4463      	add	r3, ip
 800029e:	3802      	subs	r0, #2
 80002a0:	1b9b      	subs	r3, r3, r6
 80002a2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002a6:	2100      	movs	r1, #0
 80002a8:	b11d      	cbz	r5, 80002b2 <__udivmoddi4+0xa6>
 80002aa:	40d3      	lsrs	r3, r2
 80002ac:	2200      	movs	r2, #0
 80002ae:	e9c5 3200 	strd	r3, r2, [r5]
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d905      	bls.n	80002c6 <__udivmoddi4+0xba>
 80002ba:	b10d      	cbz	r5, 80002c0 <__udivmoddi4+0xb4>
 80002bc:	e9c5 0100 	strd	r0, r1, [r5]
 80002c0:	2100      	movs	r1, #0
 80002c2:	4608      	mov	r0, r1
 80002c4:	e7f5      	b.n	80002b2 <__udivmoddi4+0xa6>
 80002c6:	fab3 f183 	clz	r1, r3
 80002ca:	2900      	cmp	r1, #0
 80002cc:	d146      	bne.n	800035c <__udivmoddi4+0x150>
 80002ce:	42a3      	cmp	r3, r4
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xcc>
 80002d2:	4290      	cmp	r0, r2
 80002d4:	f0c0 80f0 	bcc.w	80004b8 <__udivmoddi4+0x2ac>
 80002d8:	1a86      	subs	r6, r0, r2
 80002da:	eb64 0303 	sbc.w	r3, r4, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	2d00      	cmp	r5, #0
 80002e2:	d0e6      	beq.n	80002b2 <__udivmoddi4+0xa6>
 80002e4:	e9c5 6300 	strd	r6, r3, [r5]
 80002e8:	e7e3      	b.n	80002b2 <__udivmoddi4+0xa6>
 80002ea:	2a00      	cmp	r2, #0
 80002ec:	f040 8090 	bne.w	8000410 <__udivmoddi4+0x204>
 80002f0:	eba1 040c 	sub.w	r4, r1, ip
 80002f4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f8:	fa1f f78c 	uxth.w	r7, ip
 80002fc:	2101      	movs	r1, #1
 80002fe:	fbb4 f6f8 	udiv	r6, r4, r8
 8000302:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000306:	fb08 4416 	mls	r4, r8, r6, r4
 800030a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800030e:	fb07 f006 	mul.w	r0, r7, r6
 8000312:	4298      	cmp	r0, r3
 8000314:	d908      	bls.n	8000328 <__udivmoddi4+0x11c>
 8000316:	eb1c 0303 	adds.w	r3, ip, r3
 800031a:	f106 34ff 	add.w	r4, r6, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x11a>
 8000320:	4298      	cmp	r0, r3
 8000322:	f200 80cd 	bhi.w	80004c0 <__udivmoddi4+0x2b4>
 8000326:	4626      	mov	r6, r4
 8000328:	1a1c      	subs	r4, r3, r0
 800032a:	fa1f f38e 	uxth.w	r3, lr
 800032e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000332:	fb08 4410 	mls	r4, r8, r0, r4
 8000336:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800033a:	fb00 f707 	mul.w	r7, r0, r7
 800033e:	429f      	cmp	r7, r3
 8000340:	d908      	bls.n	8000354 <__udivmoddi4+0x148>
 8000342:	eb1c 0303 	adds.w	r3, ip, r3
 8000346:	f100 34ff 	add.w	r4, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x146>
 800034c:	429f      	cmp	r7, r3
 800034e:	f200 80b0 	bhi.w	80004b2 <__udivmoddi4+0x2a6>
 8000352:	4620      	mov	r0, r4
 8000354:	1bdb      	subs	r3, r3, r7
 8000356:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0x9c>
 800035c:	f1c1 0620 	rsb	r6, r1, #32
 8000360:	408b      	lsls	r3, r1
 8000362:	fa22 f706 	lsr.w	r7, r2, r6
 8000366:	431f      	orrs	r7, r3
 8000368:	fa20 fc06 	lsr.w	ip, r0, r6
 800036c:	fa04 f301 	lsl.w	r3, r4, r1
 8000370:	ea43 030c 	orr.w	r3, r3, ip
 8000374:	40f4      	lsrs	r4, r6
 8000376:	fa00 f801 	lsl.w	r8, r0, r1
 800037a:	0c38      	lsrs	r0, r7, #16
 800037c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000380:	fbb4 fef0 	udiv	lr, r4, r0
 8000384:	fa1f fc87 	uxth.w	ip, r7
 8000388:	fb00 441e 	mls	r4, r0, lr, r4
 800038c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000390:	fb0e f90c 	mul.w	r9, lr, ip
 8000394:	45a1      	cmp	r9, r4
 8000396:	fa02 f201 	lsl.w	r2, r2, r1
 800039a:	d90a      	bls.n	80003b2 <__udivmoddi4+0x1a6>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003a2:	f080 8084 	bcs.w	80004ae <__udivmoddi4+0x2a2>
 80003a6:	45a1      	cmp	r9, r4
 80003a8:	f240 8081 	bls.w	80004ae <__udivmoddi4+0x2a2>
 80003ac:	f1ae 0e02 	sub.w	lr, lr, #2
 80003b0:	443c      	add	r4, r7
 80003b2:	eba4 0409 	sub.w	r4, r4, r9
 80003b6:	fa1f f983 	uxth.w	r9, r3
 80003ba:	fbb4 f3f0 	udiv	r3, r4, r0
 80003be:	fb00 4413 	mls	r4, r0, r3, r4
 80003c2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ca:	45a4      	cmp	ip, r4
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x1d2>
 80003ce:	193c      	adds	r4, r7, r4
 80003d0:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d4:	d267      	bcs.n	80004a6 <__udivmoddi4+0x29a>
 80003d6:	45a4      	cmp	ip, r4
 80003d8:	d965      	bls.n	80004a6 <__udivmoddi4+0x29a>
 80003da:	3b02      	subs	r3, #2
 80003dc:	443c      	add	r4, r7
 80003de:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003e2:	fba0 9302 	umull	r9, r3, r0, r2
 80003e6:	eba4 040c 	sub.w	r4, r4, ip
 80003ea:	429c      	cmp	r4, r3
 80003ec:	46ce      	mov	lr, r9
 80003ee:	469c      	mov	ip, r3
 80003f0:	d351      	bcc.n	8000496 <__udivmoddi4+0x28a>
 80003f2:	d04e      	beq.n	8000492 <__udivmoddi4+0x286>
 80003f4:	b155      	cbz	r5, 800040c <__udivmoddi4+0x200>
 80003f6:	ebb8 030e 	subs.w	r3, r8, lr
 80003fa:	eb64 040c 	sbc.w	r4, r4, ip
 80003fe:	fa04 f606 	lsl.w	r6, r4, r6
 8000402:	40cb      	lsrs	r3, r1
 8000404:	431e      	orrs	r6, r3
 8000406:	40cc      	lsrs	r4, r1
 8000408:	e9c5 6400 	strd	r6, r4, [r5]
 800040c:	2100      	movs	r1, #0
 800040e:	e750      	b.n	80002b2 <__udivmoddi4+0xa6>
 8000410:	f1c2 0320 	rsb	r3, r2, #32
 8000414:	fa20 f103 	lsr.w	r1, r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa24 f303 	lsr.w	r3, r4, r3
 8000420:	4094      	lsls	r4, r2
 8000422:	430c      	orrs	r4, r1
 8000424:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000428:	fa00 fe02 	lsl.w	lr, r0, r2
 800042c:	fa1f f78c 	uxth.w	r7, ip
 8000430:	fbb3 f0f8 	udiv	r0, r3, r8
 8000434:	fb08 3110 	mls	r1, r8, r0, r3
 8000438:	0c23      	lsrs	r3, r4, #16
 800043a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043e:	fb00 f107 	mul.w	r1, r0, r7
 8000442:	4299      	cmp	r1, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x24c>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 36ff 	add.w	r6, r0, #4294967295
 800044e:	d22c      	bcs.n	80004aa <__udivmoddi4+0x29e>
 8000450:	4299      	cmp	r1, r3
 8000452:	d92a      	bls.n	80004aa <__udivmoddi4+0x29e>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1a5b      	subs	r3, r3, r1
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000460:	fb08 3311 	mls	r3, r8, r1, r3
 8000464:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000468:	fb01 f307 	mul.w	r3, r1, r7
 800046c:	42a3      	cmp	r3, r4
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x276>
 8000470:	eb1c 0404 	adds.w	r4, ip, r4
 8000474:	f101 36ff 	add.w	r6, r1, #4294967295
 8000478:	d213      	bcs.n	80004a2 <__udivmoddi4+0x296>
 800047a:	42a3      	cmp	r3, r4
 800047c:	d911      	bls.n	80004a2 <__udivmoddi4+0x296>
 800047e:	3902      	subs	r1, #2
 8000480:	4464      	add	r4, ip
 8000482:	1ae4      	subs	r4, r4, r3
 8000484:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000488:	e739      	b.n	80002fe <__udivmoddi4+0xf2>
 800048a:	4604      	mov	r4, r0
 800048c:	e6f0      	b.n	8000270 <__udivmoddi4+0x64>
 800048e:	4608      	mov	r0, r1
 8000490:	e706      	b.n	80002a0 <__udivmoddi4+0x94>
 8000492:	45c8      	cmp	r8, r9
 8000494:	d2ae      	bcs.n	80003f4 <__udivmoddi4+0x1e8>
 8000496:	ebb9 0e02 	subs.w	lr, r9, r2
 800049a:	eb63 0c07 	sbc.w	ip, r3, r7
 800049e:	3801      	subs	r0, #1
 80004a0:	e7a8      	b.n	80003f4 <__udivmoddi4+0x1e8>
 80004a2:	4631      	mov	r1, r6
 80004a4:	e7ed      	b.n	8000482 <__udivmoddi4+0x276>
 80004a6:	4603      	mov	r3, r0
 80004a8:	e799      	b.n	80003de <__udivmoddi4+0x1d2>
 80004aa:	4630      	mov	r0, r6
 80004ac:	e7d4      	b.n	8000458 <__udivmoddi4+0x24c>
 80004ae:	46d6      	mov	lr, sl
 80004b0:	e77f      	b.n	80003b2 <__udivmoddi4+0x1a6>
 80004b2:	4463      	add	r3, ip
 80004b4:	3802      	subs	r0, #2
 80004b6:	e74d      	b.n	8000354 <__udivmoddi4+0x148>
 80004b8:	4606      	mov	r6, r0
 80004ba:	4623      	mov	r3, r4
 80004bc:	4608      	mov	r0, r1
 80004be:	e70f      	b.n	80002e0 <__udivmoddi4+0xd4>
 80004c0:	3e02      	subs	r6, #2
 80004c2:	4463      	add	r3, ip
 80004c4:	e730      	b.n	8000328 <__udivmoddi4+0x11c>
 80004c6:	bf00      	nop

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <main>:
static void MX_I2C1_Init(void);

HAL_StatusTypeDef Write_To_24LCxx(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint8_t *pData, uint16_t len);
HAL_StatusTypeDef Read_From_24LCxx(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint8_t *pData, uint16_t len);

int main(void) {
 80004cc:	b590      	push	{r4, r7, lr}
 80004ce:	b08d      	sub	sp, #52	@ 0x34
 80004d0:	af02      	add	r7, sp, #8
  const char wmsg[] = "We love STM32!";
 80004d2:	4b1b      	ldr	r3, [pc, #108]	@ (8000540 <main+0x74>)
 80004d4:	f107 0418 	add.w	r4, r7, #24
 80004d8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80004da:	c407      	stmia	r4!, {r0, r1, r2}
 80004dc:	8023      	strh	r3, [r4, #0]
 80004de:	3402      	adds	r4, #2
 80004e0:	0c1b      	lsrs	r3, r3, #16
 80004e2:	7023      	strb	r3, [r4, #0]
  char rmsg[20];

  HAL_Init();
 80004e4:	f000 fb86 	bl	8000bf4 <HAL_Init>
  Nucleo_BSP_Init();
 80004e8:	f000 f8f7 	bl	80006da <Nucleo_BSP_Init>

  MX_I2C1_Init();
 80004ec:	f000 f82c 	bl	8000548 <MX_I2C1_Init>

  Write_To_24LCxx(&hi2c1, 0xA0, 0x1AAA, (uint8_t*)wmsg, strlen(wmsg)+1);
 80004f0:	f107 0318 	add.w	r3, r7, #24
 80004f4:	220f      	movs	r2, #15
 80004f6:	9200      	str	r2, [sp, #0]
 80004f8:	f641 22aa 	movw	r2, #6826	@ 0x1aaa
 80004fc:	21a0      	movs	r1, #160	@ 0xa0
 80004fe:	4811      	ldr	r0, [pc, #68]	@ (8000544 <main+0x78>)
 8000500:	f000 f8a4 	bl	800064c <Write_To_24LCxx>
  Read_From_24LCxx(&hi2c1, 0xA0, 0x1AAA, (uint8_t*)rmsg, strlen(wmsg)+1);
 8000504:	1d3b      	adds	r3, r7, #4
 8000506:	220f      	movs	r2, #15
 8000508:	9200      	str	r2, [sp, #0]
 800050a:	f641 22aa 	movw	r2, #6826	@ 0x1aaa
 800050e:	21a0      	movs	r1, #160	@ 0xa0
 8000510:	480c      	ldr	r0, [pc, #48]	@ (8000544 <main+0x78>)
 8000512:	f000 f869 	bl	80005e8 <Read_From_24LCxx>

  if(strcmp(wmsg, rmsg) == 0) {
 8000516:	1d3a      	adds	r2, r7, #4
 8000518:	f107 0318 	add.w	r3, r7, #24
 800051c:	4611      	mov	r1, r2
 800051e:	4618      	mov	r0, r3
 8000520:	f7ff fe52 	bl	80001c8 <strcmp>
 8000524:	4603      	mov	r3, r0
 8000526:	2b00      	cmp	r3, #0
 8000528:	d109      	bne.n	800053e <main+0x72>
    while(1) {
      HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800052a:	2120      	movs	r1, #32
 800052c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000530:	f000 fed8 	bl	80012e4 <HAL_GPIO_TogglePin>
      HAL_Delay(100);
 8000534:	2064      	movs	r0, #100	@ 0x64
 8000536:	f000 fbd9 	bl	8000cec <HAL_Delay>
      HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800053a:	bf00      	nop
 800053c:	e7f5      	b.n	800052a <main+0x5e>
    }
  }

  while(1);
 800053e:	e7fe      	b.n	800053e <main+0x72>
 8000540:	080043a8 	.word	0x080043a8
 8000544:	20000078 	.word	0x20000078

08000548 <MX_I2C1_Init>:
}

/* I2C1 init function */
static void MX_I2C1_Init(void) {
 8000548:	b580      	push	{r7, lr}
 800054a:	b086      	sub	sp, #24
 800054c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;

  /* Peripheral clock enable */
  __HAL_RCC_I2C1_CLK_ENABLE();
 800054e:	4b21      	ldr	r3, [pc, #132]	@ (80005d4 <MX_I2C1_Init+0x8c>)
 8000550:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000552:	4a20      	ldr	r2, [pc, #128]	@ (80005d4 <MX_I2C1_Init+0x8c>)
 8000554:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000558:	6593      	str	r3, [r2, #88]	@ 0x58
 800055a:	4b1e      	ldr	r3, [pc, #120]	@ (80005d4 <MX_I2C1_Init+0x8c>)
 800055c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800055e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000562:	603b      	str	r3, [r7, #0]
 8000564:	683b      	ldr	r3, [r7, #0]

  hi2c1.Instance = I2C1;
 8000566:	4b1c      	ldr	r3, [pc, #112]	@ (80005d8 <MX_I2C1_Init+0x90>)
 8000568:	4a1c      	ldr	r2, [pc, #112]	@ (80005dc <MX_I2C1_Init+0x94>)
 800056a:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 800056c:	4b1a      	ldr	r3, [pc, #104]	@ (80005d8 <MX_I2C1_Init+0x90>)
 800056e:	4a1c      	ldr	r2, [pc, #112]	@ (80005e0 <MX_I2C1_Init+0x98>)
 8000570:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000572:	4b19      	ldr	r3, [pc, #100]	@ (80005d8 <MX_I2C1_Init+0x90>)
 8000574:	2200      	movs	r2, #0
 8000576:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000578:	4b17      	ldr	r3, [pc, #92]	@ (80005d8 <MX_I2C1_Init+0x90>)
 800057a:	2201      	movs	r2, #1
 800057c:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800057e:	4b16      	ldr	r3, [pc, #88]	@ (80005d8 <MX_I2C1_Init+0x90>)
 8000580:	2200      	movs	r2, #0
 8000582:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000584:	4b14      	ldr	r3, [pc, #80]	@ (80005d8 <MX_I2C1_Init+0x90>)
 8000586:	2200      	movs	r2, #0
 8000588:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800058a:	4b13      	ldr	r3, [pc, #76]	@ (80005d8 <MX_I2C1_Init+0x90>)
 800058c:	2200      	movs	r2, #0
 800058e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000590:	4b11      	ldr	r3, [pc, #68]	@ (80005d8 <MX_I2C1_Init+0x90>)
 8000592:	2200      	movs	r2, #0
 8000594:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000596:	4b10      	ldr	r3, [pc, #64]	@ (80005d8 <MX_I2C1_Init+0x90>)
 8000598:	2200      	movs	r2, #0
 800059a:	621a      	str	r2, [r3, #32]
  HAL_I2C_Init(&hi2c1);
 800059c:	480e      	ldr	r0, [pc, #56]	@ (80005d8 <MX_I2C1_Init+0x90>)
 800059e:	f000 febb 	bl	8001318 <HAL_I2C_Init>

  /**Configure Analog filter
  */
  HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE);
 80005a2:	2100      	movs	r1, #0
 80005a4:	480c      	ldr	r0, [pc, #48]	@ (80005d8 <MX_I2C1_Init+0x90>)
 80005a6:	f001 fd0b 	bl	8001fc0 <HAL_I2CEx_ConfigAnalogFilter>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80005aa:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80005ae:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80005b0:	2312      	movs	r3, #18
 80005b2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005b4:	2301      	movs	r3, #1
 80005b6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005b8:	2303      	movs	r3, #3
 80005ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80005bc:	2304      	movs	r3, #4
 80005be:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005c0:	1d3b      	adds	r3, r7, #4
 80005c2:	4619      	mov	r1, r3
 80005c4:	4807      	ldr	r0, [pc, #28]	@ (80005e4 <MX_I2C1_Init+0x9c>)
 80005c6:	f000 fce3 	bl	8000f90 <HAL_GPIO_Init>
}
 80005ca:	bf00      	nop
 80005cc:	3718      	adds	r7, #24
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	40021000 	.word	0x40021000
 80005d8:	20000078 	.word	0x20000078
 80005dc:	40005400 	.word	0x40005400
 80005e0:	10909cec 	.word	0x10909cec
 80005e4:	48000400 	.word	0x48000400

080005e8 <Read_From_24LCxx>:

HAL_StatusTypeDef Read_From_24LCxx(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint8_t *pData, uint16_t len) {
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b088      	sub	sp, #32
 80005ec:	af02      	add	r7, sp, #8
 80005ee:	60f8      	str	r0, [r7, #12]
 80005f0:	607b      	str	r3, [r7, #4]
 80005f2:	460b      	mov	r3, r1
 80005f4:	817b      	strh	r3, [r7, #10]
 80005f6:	4613      	mov	r3, r2
 80005f8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef returnValue;
  uint8_t addr[2];

  /* We compute the MSB and LSB parts of the memory address */
  addr[0] = (uint8_t) ((MemAddress & 0xFF00) >> 8);
 80005fa:	893b      	ldrh	r3, [r7, #8]
 80005fc:	0a1b      	lsrs	r3, r3, #8
 80005fe:	b29b      	uxth	r3, r3
 8000600:	b2db      	uxtb	r3, r3
 8000602:	753b      	strb	r3, [r7, #20]
  addr[1] = (uint8_t) (MemAddress & 0xFF);
 8000604:	893b      	ldrh	r3, [r7, #8]
 8000606:	b2db      	uxtb	r3, r3
 8000608:	757b      	strb	r3, [r7, #21]

  /* First we send the memory location address where start reading data */
  returnValue = HAL_I2C_Master_Transmit(hi2c, DevAddress, addr, 2, HAL_MAX_DELAY);
 800060a:	f107 0214 	add.w	r2, r7, #20
 800060e:	8979      	ldrh	r1, [r7, #10]
 8000610:	f04f 33ff 	mov.w	r3, #4294967295
 8000614:	9300      	str	r3, [sp, #0]
 8000616:	2302      	movs	r3, #2
 8000618:	68f8      	ldr	r0, [r7, #12]
 800061a:	f000 ff19 	bl	8001450 <HAL_I2C_Master_Transmit>
 800061e:	4603      	mov	r3, r0
 8000620:	75fb      	strb	r3, [r7, #23]
  if(returnValue != HAL_OK)
 8000622:	7dfb      	ldrb	r3, [r7, #23]
 8000624:	2b00      	cmp	r3, #0
 8000626:	d001      	beq.n	800062c <Read_From_24LCxx+0x44>
    return returnValue;
 8000628:	7dfb      	ldrb	r3, [r7, #23]
 800062a:	e00b      	b.n	8000644 <Read_From_24LCxx+0x5c>

  /* Next we can retrieve the data from EEPROM */
  returnValue = HAL_I2C_Master_Receive(hi2c, DevAddress, pData, len, HAL_MAX_DELAY);
 800062c:	8c3b      	ldrh	r3, [r7, #32]
 800062e:	8979      	ldrh	r1, [r7, #10]
 8000630:	f04f 32ff 	mov.w	r2, #4294967295
 8000634:	9200      	str	r2, [sp, #0]
 8000636:	687a      	ldr	r2, [r7, #4]
 8000638:	68f8      	ldr	r0, [r7, #12]
 800063a:	f001 f821 	bl	8001680 <HAL_I2C_Master_Receive>
 800063e:	4603      	mov	r3, r0
 8000640:	75fb      	strb	r3, [r7, #23]

  return returnValue;
 8000642:	7dfb      	ldrb	r3, [r7, #23]
}
 8000644:	4618      	mov	r0, r3
 8000646:	3718      	adds	r7, #24
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}

0800064c <Write_To_24LCxx>:

HAL_StatusTypeDef Write_To_24LCxx(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint8_t *pData, uint16_t len) {
 800064c:	b580      	push	{r7, lr}
 800064e:	b088      	sub	sp, #32
 8000650:	af02      	add	r7, sp, #8
 8000652:	60f8      	str	r0, [r7, #12]
 8000654:	607b      	str	r3, [r7, #4]
 8000656:	460b      	mov	r3, r1
 8000658:	817b      	strh	r3, [r7, #10]
 800065a:	4613      	mov	r3, r2
 800065c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef returnValue;
  uint8_t *data;

  /* First we allocate a temporary buffer to store the destination memory
   * address and the data to store */
  data = (uint8_t*)malloc(sizeof(uint8_t)*(len+2));
 800065e:	8c3b      	ldrh	r3, [r7, #32]
 8000660:	3302      	adds	r3, #2
 8000662:	4618      	mov	r0, r3
 8000664:	f003 fd3a 	bl	80040dc <malloc>
 8000668:	4603      	mov	r3, r0
 800066a:	617b      	str	r3, [r7, #20]

  /* We compute the MSB and LSB parts of the memory address */
  data[0] = (uint8_t) ((MemAddress & 0xFF00) >> 8);
 800066c:	893b      	ldrh	r3, [r7, #8]
 800066e:	0a1b      	lsrs	r3, r3, #8
 8000670:	b29b      	uxth	r3, r3
 8000672:	b2da      	uxtb	r2, r3
 8000674:	697b      	ldr	r3, [r7, #20]
 8000676:	701a      	strb	r2, [r3, #0]
  data[1] = (uint8_t) (MemAddress & 0xFF);
 8000678:	697b      	ldr	r3, [r7, #20]
 800067a:	3301      	adds	r3, #1
 800067c:	893a      	ldrh	r2, [r7, #8]
 800067e:	b2d2      	uxtb	r2, r2
 8000680:	701a      	strb	r2, [r3, #0]

  /* And copy the content of the pData array in the temporary buffer */
  memcpy(data+2, pData, len);
 8000682:	697b      	ldr	r3, [r7, #20]
 8000684:	3302      	adds	r3, #2
 8000686:	8c3a      	ldrh	r2, [r7, #32]
 8000688:	6879      	ldr	r1, [r7, #4]
 800068a:	4618      	mov	r0, r3
 800068c:	f003 fe28 	bl	80042e0 <memcpy>

  /* We are now ready to transfer the buffer over the I2C bus */
  returnValue = HAL_I2C_Master_Transmit(hi2c, DevAddress, data, len + 2, HAL_MAX_DELAY);
 8000690:	8c3b      	ldrh	r3, [r7, #32]
 8000692:	3302      	adds	r3, #2
 8000694:	b29b      	uxth	r3, r3
 8000696:	8979      	ldrh	r1, [r7, #10]
 8000698:	f04f 32ff 	mov.w	r2, #4294967295
 800069c:	9200      	str	r2, [sp, #0]
 800069e:	697a      	ldr	r2, [r7, #20]
 80006a0:	68f8      	ldr	r0, [r7, #12]
 80006a2:	f000 fed5 	bl	8001450 <HAL_I2C_Master_Transmit>
 80006a6:	4603      	mov	r3, r0
 80006a8:	74fb      	strb	r3, [r7, #19]
  if(returnValue != HAL_OK)
 80006aa:	7cfb      	ldrb	r3, [r7, #19]
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <Write_To_24LCxx+0x68>
    return returnValue;
 80006b0:	7cfb      	ldrb	r3, [r7, #19]
 80006b2:	e00e      	b.n	80006d2 <Write_To_24LCxx+0x86>

  free(data);
 80006b4:	6978      	ldr	r0, [r7, #20]
 80006b6:	f003 fd19 	bl	80040ec <free>

  /* We wait until the EEPROM effectively stores data in memory */
  while(HAL_I2C_IsDeviceReady(hi2c, DevAddress, 1, HAL_MAX_DELAY) != HAL_OK);
 80006ba:	bf00      	nop
 80006bc:	8979      	ldrh	r1, [r7, #10]
 80006be:	f04f 33ff 	mov.w	r3, #4294967295
 80006c2:	2201      	movs	r2, #1
 80006c4:	68f8      	ldr	r0, [r7, #12]
 80006c6:	f001 f8d1 	bl	800186c <HAL_I2C_IsDeviceReady>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d1f5      	bne.n	80006bc <Write_To_24LCxx+0x70>

  return HAL_OK;
 80006d0:	2300      	movs	r3, #0
}
 80006d2:	4618      	mov	r0, r3
 80006d4:	3718      	adds	r7, #24
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}

080006da <Nucleo_BSP_Init>:
void SystemClock_Decrease(void);
void MX_GPIO_Init(void);
void MX_USART2_UART_Init(void);
void Error_Handler(void);

void Nucleo_BSP_Init() {
 80006da:	b580      	push	{r7, lr}
 80006dc:	af00      	add	r7, sp, #0
  /* Configure the system clock */
  SystemClock_Config();
 80006de:	f000 f807 	bl	80006f0 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006e2:	f000 f8af 	bl	8000844 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80006e6:	f000 f889 	bl	80007fc <MX_USART2_UART_Init>
}
 80006ea:	bf00      	nop
 80006ec:	bd80      	pop	{r7, pc}
	...

080006f0 <SystemClock_Config>:

/** System Clock Configuration
*/

void SystemClock_Config(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b0ba      	sub	sp, #232	@ 0xe8
 80006f4:	af00      	add	r7, sp, #0

  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006f6:	2302      	movs	r3, #2
 80006f8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006fc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000700:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8000704:	2310      	movs	r3, #16
 8000706:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800070a:	2302      	movs	r3, #2
 800070c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000710:	2302      	movs	r3, #2
 8000712:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000716:	2301      	movs	r3, #1
 8000718:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  RCC_OscInitStruct.PLL.PLLN = 10;
 800071c:	230a      	movs	r3, #10
 800071e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000722:	2307      	movs	r3, #7
 8000724:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000728:	2302      	movs	r3, #2
 800072a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800072e:	2302      	movs	r3, #2
 8000730:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000734:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000738:	4618      	mov	r0, r3
 800073a:	f001 fcf1 	bl	8002120 <HAL_RCC_OscConfig>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000744:	f000 f8d2 	bl	80008ec <Error_Handler>
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000748:	230f      	movs	r3, #15
 800074a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800074e:	2303      	movs	r3, #3
 8000750:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000754:	2300      	movs	r3, #0
 8000756:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800075a:	2300      	movs	r3, #0
 800075c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000760:	2300      	movs	r3, #0
 8000762:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000766:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 800076a:	2104      	movs	r1, #4
 800076c:	4618      	mov	r0, r3
 800076e:	f002 f8b3 	bl	80028d8 <HAL_RCC_ClockConfig>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000778:	f000 f8b8 	bl	80008ec <Error_Handler>
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800077c:	2340      	movs	r3, #64	@ 0x40
 800077e:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_SYSCLK;
 8000780:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000784:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000786:	f107 0308 	add.w	r3, r7, #8
 800078a:	4618      	mov	r0, r3
 800078c:	f002 fac8 	bl	8002d20 <HAL_RCCEx_PeriphCLKConfig>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000796:	f000 f8a9 	bl	80008ec <Error_Handler>
  }

  __HAL_RCC_PWR_CLK_ENABLE();
 800079a:	4b16      	ldr	r3, [pc, #88]	@ (80007f4 <SystemClock_Config+0x104>)
 800079c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800079e:	4a15      	ldr	r2, [pc, #84]	@ (80007f4 <SystemClock_Config+0x104>)
 80007a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007a4:	6593      	str	r3, [r2, #88]	@ 0x58
 80007a6:	4b13      	ldr	r3, [pc, #76]	@ (80007f4 <SystemClock_Config+0x104>)
 80007a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007ae:	607b      	str	r3, [r7, #4]
 80007b0:	687b      	ldr	r3, [r7, #4]

  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80007b2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80007b6:	f001 fc5d 	bl	8002074 <HAL_PWREx_ControlVoltageScaling>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d001      	beq.n	80007c4 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80007c0:	f000 f894 	bl	80008ec <Error_Handler>
  }

  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80007c4:	f002 fa14 	bl	8002bf0 <HAL_RCC_GetHCLKFreq>
 80007c8:	4603      	mov	r3, r0
 80007ca:	4a0b      	ldr	r2, [pc, #44]	@ (80007f8 <SystemClock_Config+0x108>)
 80007cc:	fba2 2303 	umull	r2, r3, r2, r3
 80007d0:	099b      	lsrs	r3, r3, #6
 80007d2:	4618      	mov	r0, r3
 80007d4:	f000 fbb3 	bl	8000f3e <HAL_SYSTICK_Config>

  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80007d8:	2004      	movs	r0, #4
 80007da:	f000 fbbd 	bl	8000f58 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80007de:	2200      	movs	r2, #0
 80007e0:	2100      	movs	r1, #0
 80007e2:	f04f 30ff 	mov.w	r0, #4294967295
 80007e6:	f000 fb80 	bl	8000eea <HAL_NVIC_SetPriority>
}
 80007ea:	bf00      	nop
 80007ec:	37e8      	adds	r7, #232	@ 0xe8
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	40021000 	.word	0x40021000
 80007f8:	10624dd3 	.word	0x10624dd3

080007fc <MX_USART2_UART_Init>:

/* USART2 init function */
void MX_USART2_UART_Init(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8000800:	4b0e      	ldr	r3, [pc, #56]	@ (800083c <MX_USART2_UART_Init+0x40>)
 8000802:	4a0f      	ldr	r2, [pc, #60]	@ (8000840 <MX_USART2_UART_Init+0x44>)
 8000804:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000806:	4b0d      	ldr	r3, [pc, #52]	@ (800083c <MX_USART2_UART_Init+0x40>)
 8000808:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 800080c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800080e:	4b0b      	ldr	r3, [pc, #44]	@ (800083c <MX_USART2_UART_Init+0x40>)
 8000810:	2200      	movs	r2, #0
 8000812:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000814:	4b09      	ldr	r3, [pc, #36]	@ (800083c <MX_USART2_UART_Init+0x40>)
 8000816:	2200      	movs	r2, #0
 8000818:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800081a:	4b08      	ldr	r3, [pc, #32]	@ (800083c <MX_USART2_UART_Init+0x40>)
 800081c:	2200      	movs	r2, #0
 800081e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000820:	4b06      	ldr	r3, [pc, #24]	@ (800083c <MX_USART2_UART_Init+0x40>)
 8000822:	220c      	movs	r2, #12
 8000824:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000826:	4b05      	ldr	r3, [pc, #20]	@ (800083c <MX_USART2_UART_Init+0x40>)
 8000828:	2200      	movs	r2, #0
 800082a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800082c:	4b03      	ldr	r3, [pc, #12]	@ (800083c <MX_USART2_UART_Init+0x40>)
 800082e:	2200      	movs	r2, #0
 8000830:	61da      	str	r2, [r3, #28]
  HAL_UART_Init(&huart2);
 8000832:	4802      	ldr	r0, [pc, #8]	@ (800083c <MX_USART2_UART_Init+0x40>)
 8000834:	f002 ff30 	bl	8003698 <HAL_UART_Init>

}
 8000838:	bf00      	nop
 800083a:	bd80      	pop	{r7, pc}
 800083c:	200000cc 	.word	0x200000cc
 8000840:	40004400 	.word	0x40004400

08000844 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b088      	sub	sp, #32
 8000848:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __GPIOC_CLK_ENABLE();
 800084a:	4b26      	ldr	r3, [pc, #152]	@ (80008e4 <MX_GPIO_Init+0xa0>)
 800084c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800084e:	4a25      	ldr	r2, [pc, #148]	@ (80008e4 <MX_GPIO_Init+0xa0>)
 8000850:	f043 0304 	orr.w	r3, r3, #4
 8000854:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000856:	4b23      	ldr	r3, [pc, #140]	@ (80008e4 <MX_GPIO_Init+0xa0>)
 8000858:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800085a:	f003 0304 	and.w	r3, r3, #4
 800085e:	60bb      	str	r3, [r7, #8]
 8000860:	68bb      	ldr	r3, [r7, #8]
  __GPIOA_CLK_ENABLE();
 8000862:	4b20      	ldr	r3, [pc, #128]	@ (80008e4 <MX_GPIO_Init+0xa0>)
 8000864:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000866:	4a1f      	ldr	r2, [pc, #124]	@ (80008e4 <MX_GPIO_Init+0xa0>)
 8000868:	f043 0301 	orr.w	r3, r3, #1
 800086c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800086e:	4b1d      	ldr	r3, [pc, #116]	@ (80008e4 <MX_GPIO_Init+0xa0>)
 8000870:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000872:	f003 0301 	and.w	r3, r3, #1
 8000876:	607b      	str	r3, [r7, #4]
 8000878:	687b      	ldr	r3, [r7, #4]
  __GPIOB_CLK_ENABLE();
 800087a:	4b1a      	ldr	r3, [pc, #104]	@ (80008e4 <MX_GPIO_Init+0xa0>)
 800087c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800087e:	4a19      	ldr	r2, [pc, #100]	@ (80008e4 <MX_GPIO_Init+0xa0>)
 8000880:	f043 0302 	orr.w	r3, r3, #2
 8000884:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000886:	4b17      	ldr	r3, [pc, #92]	@ (80008e4 <MX_GPIO_Init+0xa0>)
 8000888:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800088a:	f003 0302 	and.w	r3, r3, #2
 800088e:	603b      	str	r3, [r7, #0]
 8000890:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000892:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000896:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000898:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800089c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089e:	2300      	movs	r3, #0
 80008a0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008a2:	f107 030c 	add.w	r3, r7, #12
 80008a6:	4619      	mov	r1, r3
 80008a8:	480f      	ldr	r0, [pc, #60]	@ (80008e8 <MX_GPIO_Init+0xa4>)
 80008aa:	f000 fb71 	bl	8000f90 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80008ae:	2320      	movs	r3, #32
 80008b0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b2:	2301      	movs	r3, #1
 80008b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b6:	2300      	movs	r3, #0
 80008b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 80008ba:	2303      	movs	r3, #3
 80008bc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008be:	f107 030c 	add.w	r3, r7, #12
 80008c2:	4619      	mov	r1, r3
 80008c4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008c8:	f000 fb62 	bl	8000f90 <HAL_GPIO_Init>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80008cc:	2200      	movs	r2, #0
 80008ce:	2100      	movs	r1, #0
 80008d0:	2028      	movs	r0, #40	@ 0x28
 80008d2:	f000 fb0a 	bl	8000eea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80008d6:	2028      	movs	r0, #40	@ 0x28
 80008d8:	f000 fb23 	bl	8000f22 <HAL_NVIC_EnableIRQ>
}
 80008dc:	bf00      	nop
 80008de:	3720      	adds	r7, #32
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	40021000 	.word	0x40021000
 80008e8:	48000800 	.word	0x48000800

080008ec <Error_Handler>:
  __HAL_RCC_GPIOG_CLK_DISABLE();
  __HAL_RCC_GPIOH_CLK_DISABLE();
}

void Error_Handler(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 80008f0:	bf00      	nop
 80008f2:	e7fd      	b.n	80008f0 <Error_Handler+0x4>

080008f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	b083      	sub	sp, #12
 80008f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008fa:	4b0f      	ldr	r3, [pc, #60]	@ (8000938 <HAL_MspInit+0x44>)
 80008fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008fe:	4a0e      	ldr	r2, [pc, #56]	@ (8000938 <HAL_MspInit+0x44>)
 8000900:	f043 0301 	orr.w	r3, r3, #1
 8000904:	6613      	str	r3, [r2, #96]	@ 0x60
 8000906:	4b0c      	ldr	r3, [pc, #48]	@ (8000938 <HAL_MspInit+0x44>)
 8000908:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800090a:	f003 0301 	and.w	r3, r3, #1
 800090e:	607b      	str	r3, [r7, #4]
 8000910:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000912:	4b09      	ldr	r3, [pc, #36]	@ (8000938 <HAL_MspInit+0x44>)
 8000914:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000916:	4a08      	ldr	r2, [pc, #32]	@ (8000938 <HAL_MspInit+0x44>)
 8000918:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800091c:	6593      	str	r3, [r2, #88]	@ 0x58
 800091e:	4b06      	ldr	r3, [pc, #24]	@ (8000938 <HAL_MspInit+0x44>)
 8000920:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000922:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000926:	603b      	str	r3, [r7, #0]
 8000928:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800092a:	bf00      	nop
 800092c:	370c      	adds	r7, #12
 800092e:	46bd      	mov	sp, r7
 8000930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop
 8000938:	40021000 	.word	0x40021000

0800093c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b0ac      	sub	sp, #176	@ 0xb0
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000944:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000948:	2200      	movs	r2, #0
 800094a:	601a      	str	r2, [r3, #0]
 800094c:	605a      	str	r2, [r3, #4]
 800094e:	609a      	str	r2, [r3, #8]
 8000950:	60da      	str	r2, [r3, #12]
 8000952:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000954:	f107 0314 	add.w	r3, r7, #20
 8000958:	2288      	movs	r2, #136	@ 0x88
 800095a:	2100      	movs	r1, #0
 800095c:	4618      	mov	r0, r3
 800095e:	f003 fc7b 	bl	8004258 <memset>
  if(hi2c->Instance==I2C1)
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	4a21      	ldr	r2, [pc, #132]	@ (80009ec <HAL_I2C_MspInit+0xb0>)
 8000968:	4293      	cmp	r3, r2
 800096a:	d13b      	bne.n	80009e4 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800096c:	2340      	movs	r3, #64	@ 0x40
 800096e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000970:	2300      	movs	r3, #0
 8000972:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000974:	f107 0314 	add.w	r3, r7, #20
 8000978:	4618      	mov	r0, r3
 800097a:	f002 f9d1 	bl	8002d20 <HAL_RCCEx_PeriphCLKConfig>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d001      	beq.n	8000988 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000984:	f7ff ffb2 	bl	80008ec <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000988:	4b19      	ldr	r3, [pc, #100]	@ (80009f0 <HAL_I2C_MspInit+0xb4>)
 800098a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800098c:	4a18      	ldr	r2, [pc, #96]	@ (80009f0 <HAL_I2C_MspInit+0xb4>)
 800098e:	f043 0302 	orr.w	r3, r3, #2
 8000992:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000994:	4b16      	ldr	r3, [pc, #88]	@ (80009f0 <HAL_I2C_MspInit+0xb4>)
 8000996:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000998:	f003 0302 	and.w	r3, r3, #2
 800099c:	613b      	str	r3, [r7, #16]
 800099e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80009a0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80009a4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009a8:	2312      	movs	r3, #18
 80009aa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009ae:	2301      	movs	r3, #1
 80009b0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009b4:	2303      	movs	r3, #3
 80009b6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009ba:	2304      	movs	r3, #4
 80009bc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009c0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80009c4:	4619      	mov	r1, r3
 80009c6:	480b      	ldr	r0, [pc, #44]	@ (80009f4 <HAL_I2C_MspInit+0xb8>)
 80009c8:	f000 fae2 	bl	8000f90 <HAL_GPIO_Init>
    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80009cc:	4b08      	ldr	r3, [pc, #32]	@ (80009f0 <HAL_I2C_MspInit+0xb4>)
 80009ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009d0:	4a07      	ldr	r2, [pc, #28]	@ (80009f0 <HAL_I2C_MspInit+0xb4>)
 80009d2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80009d6:	6593      	str	r3, [r2, #88]	@ 0x58
 80009d8:	4b05      	ldr	r3, [pc, #20]	@ (80009f0 <HAL_I2C_MspInit+0xb4>)
 80009da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80009e0:	60fb      	str	r3, [r7, #12]
 80009e2:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80009e4:	bf00      	nop
 80009e6:	37b0      	adds	r7, #176	@ 0xb0
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	40005400 	.word	0x40005400
 80009f0:	40021000 	.word	0x40021000
 80009f4:	48000400 	.word	0x48000400

080009f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b0ac      	sub	sp, #176	@ 0xb0
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a00:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000a04:	2200      	movs	r2, #0
 8000a06:	601a      	str	r2, [r3, #0]
 8000a08:	605a      	str	r2, [r3, #4]
 8000a0a:	609a      	str	r2, [r3, #8]
 8000a0c:	60da      	str	r2, [r3, #12]
 8000a0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a10:	f107 0314 	add.w	r3, r7, #20
 8000a14:	2288      	movs	r2, #136	@ 0x88
 8000a16:	2100      	movs	r1, #0
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f003 fc1d 	bl	8004258 <memset>
  if(huart->Instance==USART2)
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	4a21      	ldr	r2, [pc, #132]	@ (8000aa8 <HAL_UART_MspInit+0xb0>)
 8000a24:	4293      	cmp	r3, r2
 8000a26:	d13b      	bne.n	8000aa0 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000a28:	2302      	movs	r3, #2
 8000a2a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a30:	f107 0314 	add.w	r3, r7, #20
 8000a34:	4618      	mov	r0, r3
 8000a36:	f002 f973 	bl	8002d20 <HAL_RCCEx_PeriphCLKConfig>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000a40:	f7ff ff54 	bl	80008ec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a44:	4b19      	ldr	r3, [pc, #100]	@ (8000aac <HAL_UART_MspInit+0xb4>)
 8000a46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a48:	4a18      	ldr	r2, [pc, #96]	@ (8000aac <HAL_UART_MspInit+0xb4>)
 8000a4a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a4e:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a50:	4b16      	ldr	r3, [pc, #88]	@ (8000aac <HAL_UART_MspInit+0xb4>)
 8000a52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a58:	613b      	str	r3, [r7, #16]
 8000a5a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a5c:	4b13      	ldr	r3, [pc, #76]	@ (8000aac <HAL_UART_MspInit+0xb4>)
 8000a5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a60:	4a12      	ldr	r2, [pc, #72]	@ (8000aac <HAL_UART_MspInit+0xb4>)
 8000a62:	f043 0301 	orr.w	r3, r3, #1
 8000a66:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a68:	4b10      	ldr	r3, [pc, #64]	@ (8000aac <HAL_UART_MspInit+0xb4>)
 8000a6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a6c:	f003 0301 	and.w	r3, r3, #1
 8000a70:	60fb      	str	r3, [r7, #12]
 8000a72:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a74:	230c      	movs	r3, #12
 8000a76:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a7a:	2302      	movs	r3, #2
 8000a7c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a80:	2300      	movs	r3, #0
 8000a82:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a86:	2303      	movs	r3, #3
 8000a88:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a8c:	2307      	movs	r3, #7
 8000a8e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a92:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000a96:	4619      	mov	r1, r3
 8000a98:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a9c:	f000 fa78 	bl	8000f90 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000aa0:	bf00      	nop
 8000aa2:	37b0      	adds	r7, #176	@ 0xb0
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	40004400 	.word	0x40004400
 8000aac:	40021000 	.word	0x40021000

08000ab0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ab4:	bf00      	nop
 8000ab6:	e7fd      	b.n	8000ab4 <NMI_Handler+0x4>

08000ab8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000abc:	bf00      	nop
 8000abe:	e7fd      	b.n	8000abc <HardFault_Handler+0x4>

08000ac0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ac4:	bf00      	nop
 8000ac6:	e7fd      	b.n	8000ac4 <MemManage_Handler+0x4>

08000ac8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000acc:	bf00      	nop
 8000ace:	e7fd      	b.n	8000acc <BusFault_Handler+0x4>

08000ad0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ad4:	bf00      	nop
 8000ad6:	e7fd      	b.n	8000ad4 <UsageFault_Handler+0x4>

08000ad8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000adc:	bf00      	nop
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr

08000ae6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ae6:	b480      	push	{r7}
 8000ae8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aea:	bf00      	nop
 8000aec:	46bd      	mov	sp, r7
 8000aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af2:	4770      	bx	lr

08000af4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000af8:	bf00      	nop
 8000afa:	46bd      	mov	sp, r7
 8000afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b00:	4770      	bx	lr

08000b02 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b02:	b580      	push	{r7, lr}
 8000b04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b06:	f000 f8d1 	bl	8000cac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b0a:	bf00      	nop
 8000b0c:	bd80      	pop	{r7, pc}
	...

08000b10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b086      	sub	sp, #24
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b18:	4a14      	ldr	r2, [pc, #80]	@ (8000b6c <_sbrk+0x5c>)
 8000b1a:	4b15      	ldr	r3, [pc, #84]	@ (8000b70 <_sbrk+0x60>)
 8000b1c:	1ad3      	subs	r3, r2, r3
 8000b1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b20:	697b      	ldr	r3, [r7, #20]
 8000b22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b24:	4b13      	ldr	r3, [pc, #76]	@ (8000b74 <_sbrk+0x64>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d102      	bne.n	8000b32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b2c:	4b11      	ldr	r3, [pc, #68]	@ (8000b74 <_sbrk+0x64>)
 8000b2e:	4a12      	ldr	r2, [pc, #72]	@ (8000b78 <_sbrk+0x68>)
 8000b30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b32:	4b10      	ldr	r3, [pc, #64]	@ (8000b74 <_sbrk+0x64>)
 8000b34:	681a      	ldr	r2, [r3, #0]
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	4413      	add	r3, r2
 8000b3a:	693a      	ldr	r2, [r7, #16]
 8000b3c:	429a      	cmp	r2, r3
 8000b3e:	d207      	bcs.n	8000b50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b40:	f003 fba2 	bl	8004288 <__errno>
 8000b44:	4603      	mov	r3, r0
 8000b46:	220c      	movs	r2, #12
 8000b48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b4a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b4e:	e009      	b.n	8000b64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b50:	4b08      	ldr	r3, [pc, #32]	@ (8000b74 <_sbrk+0x64>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b56:	4b07      	ldr	r3, [pc, #28]	@ (8000b74 <_sbrk+0x64>)
 8000b58:	681a      	ldr	r2, [r3, #0]
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	4413      	add	r3, r2
 8000b5e:	4a05      	ldr	r2, [pc, #20]	@ (8000b74 <_sbrk+0x64>)
 8000b60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b62:	68fb      	ldr	r3, [r7, #12]
}
 8000b64:	4618      	mov	r0, r3
 8000b66:	3718      	adds	r7, #24
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	20018000 	.word	0x20018000
 8000b70:	00000400 	.word	0x00000400
 8000b74:	20000154 	.word	0x20000154
 8000b78:	200002a8 	.word	0x200002a8

08000b7c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000b80:	4b06      	ldr	r3, [pc, #24]	@ (8000b9c <SystemInit+0x20>)
 8000b82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b86:	4a05      	ldr	r2, [pc, #20]	@ (8000b9c <SystemInit+0x20>)
 8000b88:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b8c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000b90:	bf00      	nop
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop
 8000b9c:	e000ed00 	.word	0xe000ed00

08000ba0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000ba0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000bd8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ba4:	f7ff ffea 	bl	8000b7c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ba8:	480c      	ldr	r0, [pc, #48]	@ (8000bdc <LoopForever+0x6>)
  ldr r1, =_edata
 8000baa:	490d      	ldr	r1, [pc, #52]	@ (8000be0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bac:	4a0d      	ldr	r2, [pc, #52]	@ (8000be4 <LoopForever+0xe>)
  movs r3, #0
 8000bae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bb0:	e002      	b.n	8000bb8 <LoopCopyDataInit>

08000bb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bb6:	3304      	adds	r3, #4

08000bb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bbc:	d3f9      	bcc.n	8000bb2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bbe:	4a0a      	ldr	r2, [pc, #40]	@ (8000be8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bc0:	4c0a      	ldr	r4, [pc, #40]	@ (8000bec <LoopForever+0x16>)
  movs r3, #0
 8000bc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bc4:	e001      	b.n	8000bca <LoopFillZerobss>

08000bc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bc8:	3204      	adds	r2, #4

08000bca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bcc:	d3fb      	bcc.n	8000bc6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bce:	f003 fb61 	bl	8004294 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000bd2:	f7ff fc7b 	bl	80004cc <main>

08000bd6 <LoopForever>:

LoopForever:
    b LoopForever
 8000bd6:	e7fe      	b.n	8000bd6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000bd8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000bdc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000be0:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000be4:	08004410 	.word	0x08004410
  ldr r2, =_sbss
 8000be8:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000bec:	200002a4 	.word	0x200002a4

08000bf0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000bf0:	e7fe      	b.n	8000bf0 <ADC1_2_IRQHandler>
	...

08000bf4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bfe:	4b0c      	ldr	r3, [pc, #48]	@ (8000c30 <HAL_Init+0x3c>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	4a0b      	ldr	r2, [pc, #44]	@ (8000c30 <HAL_Init+0x3c>)
 8000c04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c08:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c0a:	2003      	movs	r0, #3
 8000c0c:	f000 f962 	bl	8000ed4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c10:	2000      	movs	r0, #0
 8000c12:	f000 f80f 	bl	8000c34 <HAL_InitTick>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d002      	beq.n	8000c22 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	71fb      	strb	r3, [r7, #7]
 8000c20:	e001      	b.n	8000c26 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c22:	f7ff fe67 	bl	80008f4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c26:	79fb      	ldrb	r3, [r7, #7]
}
 8000c28:	4618      	mov	r0, r3
 8000c2a:	3708      	adds	r7, #8
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	40022000 	.word	0x40022000

08000c34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b084      	sub	sp, #16
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000c40:	4b17      	ldr	r3, [pc, #92]	@ (8000ca0 <HAL_InitTick+0x6c>)
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d023      	beq.n	8000c90 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000c48:	4b16      	ldr	r3, [pc, #88]	@ (8000ca4 <HAL_InitTick+0x70>)
 8000c4a:	681a      	ldr	r2, [r3, #0]
 8000c4c:	4b14      	ldr	r3, [pc, #80]	@ (8000ca0 <HAL_InitTick+0x6c>)
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	4619      	mov	r1, r3
 8000c52:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c56:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f000 f96d 	bl	8000f3e <HAL_SYSTICK_Config>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d10f      	bne.n	8000c8a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	2b0f      	cmp	r3, #15
 8000c6e:	d809      	bhi.n	8000c84 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c70:	2200      	movs	r2, #0
 8000c72:	6879      	ldr	r1, [r7, #4]
 8000c74:	f04f 30ff 	mov.w	r0, #4294967295
 8000c78:	f000 f937 	bl	8000eea <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c7c:	4a0a      	ldr	r2, [pc, #40]	@ (8000ca8 <HAL_InitTick+0x74>)
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	6013      	str	r3, [r2, #0]
 8000c82:	e007      	b.n	8000c94 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000c84:	2301      	movs	r3, #1
 8000c86:	73fb      	strb	r3, [r7, #15]
 8000c88:	e004      	b.n	8000c94 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	73fb      	strb	r3, [r7, #15]
 8000c8e:	e001      	b.n	8000c94 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c90:	2301      	movs	r3, #1
 8000c92:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c94:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	3710      	adds	r7, #16
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	20000008 	.word	0x20000008
 8000ca4:	20000000 	.word	0x20000000
 8000ca8:	20000004 	.word	0x20000004

08000cac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000cb0:	4b06      	ldr	r3, [pc, #24]	@ (8000ccc <HAL_IncTick+0x20>)
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	461a      	mov	r2, r3
 8000cb6:	4b06      	ldr	r3, [pc, #24]	@ (8000cd0 <HAL_IncTick+0x24>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	4413      	add	r3, r2
 8000cbc:	4a04      	ldr	r2, [pc, #16]	@ (8000cd0 <HAL_IncTick+0x24>)
 8000cbe:	6013      	str	r3, [r2, #0]
}
 8000cc0:	bf00      	nop
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop
 8000ccc:	20000008 	.word	0x20000008
 8000cd0:	20000158 	.word	0x20000158

08000cd4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  return uwTick;
 8000cd8:	4b03      	ldr	r3, [pc, #12]	@ (8000ce8 <HAL_GetTick+0x14>)
 8000cda:	681b      	ldr	r3, [r3, #0]
}
 8000cdc:	4618      	mov	r0, r3
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop
 8000ce8:	20000158 	.word	0x20000158

08000cec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b084      	sub	sp, #16
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cf4:	f7ff ffee 	bl	8000cd4 <HAL_GetTick>
 8000cf8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d04:	d005      	beq.n	8000d12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000d06:	4b0a      	ldr	r3, [pc, #40]	@ (8000d30 <HAL_Delay+0x44>)
 8000d08:	781b      	ldrb	r3, [r3, #0]
 8000d0a:	461a      	mov	r2, r3
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	4413      	add	r3, r2
 8000d10:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d12:	bf00      	nop
 8000d14:	f7ff ffde 	bl	8000cd4 <HAL_GetTick>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	68bb      	ldr	r3, [r7, #8]
 8000d1c:	1ad3      	subs	r3, r2, r3
 8000d1e:	68fa      	ldr	r2, [r7, #12]
 8000d20:	429a      	cmp	r2, r3
 8000d22:	d8f7      	bhi.n	8000d14 <HAL_Delay+0x28>
  {
  }
}
 8000d24:	bf00      	nop
 8000d26:	bf00      	nop
 8000d28:	3710      	adds	r7, #16
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	20000008 	.word	0x20000008

08000d34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b085      	sub	sp, #20
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	f003 0307 	and.w	r3, r3, #7
 8000d42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d44:	4b0c      	ldr	r3, [pc, #48]	@ (8000d78 <__NVIC_SetPriorityGrouping+0x44>)
 8000d46:	68db      	ldr	r3, [r3, #12]
 8000d48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d4a:	68ba      	ldr	r2, [r7, #8]
 8000d4c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d50:	4013      	ands	r3, r2
 8000d52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d58:	68bb      	ldr	r3, [r7, #8]
 8000d5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d5c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d60:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d66:	4a04      	ldr	r2, [pc, #16]	@ (8000d78 <__NVIC_SetPriorityGrouping+0x44>)
 8000d68:	68bb      	ldr	r3, [r7, #8]
 8000d6a:	60d3      	str	r3, [r2, #12]
}
 8000d6c:	bf00      	nop
 8000d6e:	3714      	adds	r7, #20
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr
 8000d78:	e000ed00 	.word	0xe000ed00

08000d7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d80:	4b04      	ldr	r3, [pc, #16]	@ (8000d94 <__NVIC_GetPriorityGrouping+0x18>)
 8000d82:	68db      	ldr	r3, [r3, #12]
 8000d84:	0a1b      	lsrs	r3, r3, #8
 8000d86:	f003 0307 	and.w	r3, r3, #7
}
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d92:	4770      	bx	lr
 8000d94:	e000ed00 	.word	0xe000ed00

08000d98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b083      	sub	sp, #12
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	4603      	mov	r3, r0
 8000da0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000da2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	db0b      	blt.n	8000dc2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000daa:	79fb      	ldrb	r3, [r7, #7]
 8000dac:	f003 021f 	and.w	r2, r3, #31
 8000db0:	4907      	ldr	r1, [pc, #28]	@ (8000dd0 <__NVIC_EnableIRQ+0x38>)
 8000db2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db6:	095b      	lsrs	r3, r3, #5
 8000db8:	2001      	movs	r0, #1
 8000dba:	fa00 f202 	lsl.w	r2, r0, r2
 8000dbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000dc2:	bf00      	nop
 8000dc4:	370c      	adds	r7, #12
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop
 8000dd0:	e000e100 	.word	0xe000e100

08000dd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b083      	sub	sp, #12
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	4603      	mov	r3, r0
 8000ddc:	6039      	str	r1, [r7, #0]
 8000dde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000de0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	db0a      	blt.n	8000dfe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	b2da      	uxtb	r2, r3
 8000dec:	490c      	ldr	r1, [pc, #48]	@ (8000e20 <__NVIC_SetPriority+0x4c>)
 8000dee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df2:	0112      	lsls	r2, r2, #4
 8000df4:	b2d2      	uxtb	r2, r2
 8000df6:	440b      	add	r3, r1
 8000df8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dfc:	e00a      	b.n	8000e14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	b2da      	uxtb	r2, r3
 8000e02:	4908      	ldr	r1, [pc, #32]	@ (8000e24 <__NVIC_SetPriority+0x50>)
 8000e04:	79fb      	ldrb	r3, [r7, #7]
 8000e06:	f003 030f 	and.w	r3, r3, #15
 8000e0a:	3b04      	subs	r3, #4
 8000e0c:	0112      	lsls	r2, r2, #4
 8000e0e:	b2d2      	uxtb	r2, r2
 8000e10:	440b      	add	r3, r1
 8000e12:	761a      	strb	r2, [r3, #24]
}
 8000e14:	bf00      	nop
 8000e16:	370c      	adds	r7, #12
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1e:	4770      	bx	lr
 8000e20:	e000e100 	.word	0xe000e100
 8000e24:	e000ed00 	.word	0xe000ed00

08000e28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b089      	sub	sp, #36	@ 0x24
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	60f8      	str	r0, [r7, #12]
 8000e30:	60b9      	str	r1, [r7, #8]
 8000e32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	f003 0307 	and.w	r3, r3, #7
 8000e3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e3c:	69fb      	ldr	r3, [r7, #28]
 8000e3e:	f1c3 0307 	rsb	r3, r3, #7
 8000e42:	2b04      	cmp	r3, #4
 8000e44:	bf28      	it	cs
 8000e46:	2304      	movcs	r3, #4
 8000e48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e4a:	69fb      	ldr	r3, [r7, #28]
 8000e4c:	3304      	adds	r3, #4
 8000e4e:	2b06      	cmp	r3, #6
 8000e50:	d902      	bls.n	8000e58 <NVIC_EncodePriority+0x30>
 8000e52:	69fb      	ldr	r3, [r7, #28]
 8000e54:	3b03      	subs	r3, #3
 8000e56:	e000      	b.n	8000e5a <NVIC_EncodePriority+0x32>
 8000e58:	2300      	movs	r3, #0
 8000e5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e5c:	f04f 32ff 	mov.w	r2, #4294967295
 8000e60:	69bb      	ldr	r3, [r7, #24]
 8000e62:	fa02 f303 	lsl.w	r3, r2, r3
 8000e66:	43da      	mvns	r2, r3
 8000e68:	68bb      	ldr	r3, [r7, #8]
 8000e6a:	401a      	ands	r2, r3
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e70:	f04f 31ff 	mov.w	r1, #4294967295
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	fa01 f303 	lsl.w	r3, r1, r3
 8000e7a:	43d9      	mvns	r1, r3
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e80:	4313      	orrs	r3, r2
         );
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	3724      	adds	r7, #36	@ 0x24
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr
	...

08000e90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	3b01      	subs	r3, #1
 8000e9c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000ea0:	d301      	bcc.n	8000ea6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	e00f      	b.n	8000ec6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ea6:	4a0a      	ldr	r2, [pc, #40]	@ (8000ed0 <SysTick_Config+0x40>)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	3b01      	subs	r3, #1
 8000eac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000eae:	210f      	movs	r1, #15
 8000eb0:	f04f 30ff 	mov.w	r0, #4294967295
 8000eb4:	f7ff ff8e 	bl	8000dd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000eb8:	4b05      	ldr	r3, [pc, #20]	@ (8000ed0 <SysTick_Config+0x40>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ebe:	4b04      	ldr	r3, [pc, #16]	@ (8000ed0 <SysTick_Config+0x40>)
 8000ec0:	2207      	movs	r2, #7
 8000ec2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ec4:	2300      	movs	r3, #0
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	3708      	adds	r7, #8
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	e000e010 	.word	0xe000e010

08000ed4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000edc:	6878      	ldr	r0, [r7, #4]
 8000ede:	f7ff ff29 	bl	8000d34 <__NVIC_SetPriorityGrouping>
}
 8000ee2:	bf00      	nop
 8000ee4:	3708      	adds	r7, #8
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}

08000eea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000eea:	b580      	push	{r7, lr}
 8000eec:	b086      	sub	sp, #24
 8000eee:	af00      	add	r7, sp, #0
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	60b9      	str	r1, [r7, #8]
 8000ef4:	607a      	str	r2, [r7, #4]
 8000ef6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000efc:	f7ff ff3e 	bl	8000d7c <__NVIC_GetPriorityGrouping>
 8000f00:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f02:	687a      	ldr	r2, [r7, #4]
 8000f04:	68b9      	ldr	r1, [r7, #8]
 8000f06:	6978      	ldr	r0, [r7, #20]
 8000f08:	f7ff ff8e 	bl	8000e28 <NVIC_EncodePriority>
 8000f0c:	4602      	mov	r2, r0
 8000f0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f12:	4611      	mov	r1, r2
 8000f14:	4618      	mov	r0, r3
 8000f16:	f7ff ff5d 	bl	8000dd4 <__NVIC_SetPriority>
}
 8000f1a:	bf00      	nop
 8000f1c:	3718      	adds	r7, #24
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}

08000f22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f22:	b580      	push	{r7, lr}
 8000f24:	b082      	sub	sp, #8
 8000f26:	af00      	add	r7, sp, #0
 8000f28:	4603      	mov	r3, r0
 8000f2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f30:	4618      	mov	r0, r3
 8000f32:	f7ff ff31 	bl	8000d98 <__NVIC_EnableIRQ>
}
 8000f36:	bf00      	nop
 8000f38:	3708      	adds	r7, #8
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}

08000f3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f3e:	b580      	push	{r7, lr}
 8000f40:	b082      	sub	sp, #8
 8000f42:	af00      	add	r7, sp, #0
 8000f44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f46:	6878      	ldr	r0, [r7, #4]
 8000f48:	f7ff ffa2 	bl	8000e90 <SysTick_Config>
 8000f4c:	4603      	mov	r3, r0
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	3708      	adds	r7, #8
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
	...

08000f58 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b083      	sub	sp, #12
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	2b04      	cmp	r3, #4
 8000f64:	d106      	bne.n	8000f74 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000f66:	4b09      	ldr	r3, [pc, #36]	@ (8000f8c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	4a08      	ldr	r2, [pc, #32]	@ (8000f8c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000f6c:	f043 0304 	orr.w	r3, r3, #4
 8000f70:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8000f72:	e005      	b.n	8000f80 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000f74:	4b05      	ldr	r3, [pc, #20]	@ (8000f8c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4a04      	ldr	r2, [pc, #16]	@ (8000f8c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000f7a:	f023 0304 	bic.w	r3, r3, #4
 8000f7e:	6013      	str	r3, [r2, #0]
}
 8000f80:	bf00      	nop
 8000f82:	370c      	adds	r7, #12
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr
 8000f8c:	e000e010 	.word	0xe000e010

08000f90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b087      	sub	sp, #28
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
 8000f98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f9e:	e17f      	b.n	80012a0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	681a      	ldr	r2, [r3, #0]
 8000fa4:	2101      	movs	r1, #1
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	fa01 f303 	lsl.w	r3, r1, r3
 8000fac:	4013      	ands	r3, r2
 8000fae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	f000 8171 	beq.w	800129a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	f003 0303 	and.w	r3, r3, #3
 8000fc0:	2b01      	cmp	r3, #1
 8000fc2:	d005      	beq.n	8000fd0 <HAL_GPIO_Init+0x40>
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	f003 0303 	and.w	r3, r3, #3
 8000fcc:	2b02      	cmp	r3, #2
 8000fce:	d130      	bne.n	8001032 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	689b      	ldr	r3, [r3, #8]
 8000fd4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000fd6:	697b      	ldr	r3, [r7, #20]
 8000fd8:	005b      	lsls	r3, r3, #1
 8000fda:	2203      	movs	r2, #3
 8000fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe0:	43db      	mvns	r3, r3
 8000fe2:	693a      	ldr	r2, [r7, #16]
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	68da      	ldr	r2, [r3, #12]
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	005b      	lsls	r3, r3, #1
 8000ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff4:	693a      	ldr	r2, [r7, #16]
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	693a      	ldr	r2, [r7, #16]
 8000ffe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001006:	2201      	movs	r2, #1
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	fa02 f303 	lsl.w	r3, r2, r3
 800100e:	43db      	mvns	r3, r3
 8001010:	693a      	ldr	r2, [r7, #16]
 8001012:	4013      	ands	r3, r2
 8001014:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	091b      	lsrs	r3, r3, #4
 800101c:	f003 0201 	and.w	r2, r3, #1
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	fa02 f303 	lsl.w	r3, r2, r3
 8001026:	693a      	ldr	r2, [r7, #16]
 8001028:	4313      	orrs	r3, r2
 800102a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	693a      	ldr	r2, [r7, #16]
 8001030:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	f003 0303 	and.w	r3, r3, #3
 800103a:	2b03      	cmp	r3, #3
 800103c:	d118      	bne.n	8001070 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001042:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001044:	2201      	movs	r2, #1
 8001046:	697b      	ldr	r3, [r7, #20]
 8001048:	fa02 f303 	lsl.w	r3, r2, r3
 800104c:	43db      	mvns	r3, r3
 800104e:	693a      	ldr	r2, [r7, #16]
 8001050:	4013      	ands	r3, r2
 8001052:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	08db      	lsrs	r3, r3, #3
 800105a:	f003 0201 	and.w	r2, r3, #1
 800105e:	697b      	ldr	r3, [r7, #20]
 8001060:	fa02 f303 	lsl.w	r3, r2, r3
 8001064:	693a      	ldr	r2, [r7, #16]
 8001066:	4313      	orrs	r3, r2
 8001068:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	693a      	ldr	r2, [r7, #16]
 800106e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	f003 0303 	and.w	r3, r3, #3
 8001078:	2b03      	cmp	r3, #3
 800107a:	d017      	beq.n	80010ac <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	68db      	ldr	r3, [r3, #12]
 8001080:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001082:	697b      	ldr	r3, [r7, #20]
 8001084:	005b      	lsls	r3, r3, #1
 8001086:	2203      	movs	r2, #3
 8001088:	fa02 f303 	lsl.w	r3, r2, r3
 800108c:	43db      	mvns	r3, r3
 800108e:	693a      	ldr	r2, [r7, #16]
 8001090:	4013      	ands	r3, r2
 8001092:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	689a      	ldr	r2, [r3, #8]
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	005b      	lsls	r3, r3, #1
 800109c:	fa02 f303 	lsl.w	r3, r2, r3
 80010a0:	693a      	ldr	r2, [r7, #16]
 80010a2:	4313      	orrs	r3, r2
 80010a4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	693a      	ldr	r2, [r7, #16]
 80010aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	f003 0303 	and.w	r3, r3, #3
 80010b4:	2b02      	cmp	r3, #2
 80010b6:	d123      	bne.n	8001100 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	08da      	lsrs	r2, r3, #3
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	3208      	adds	r2, #8
 80010c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010c4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80010c6:	697b      	ldr	r3, [r7, #20]
 80010c8:	f003 0307 	and.w	r3, r3, #7
 80010cc:	009b      	lsls	r3, r3, #2
 80010ce:	220f      	movs	r2, #15
 80010d0:	fa02 f303 	lsl.w	r3, r2, r3
 80010d4:	43db      	mvns	r3, r3
 80010d6:	693a      	ldr	r2, [r7, #16]
 80010d8:	4013      	ands	r3, r2
 80010da:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	691a      	ldr	r2, [r3, #16]
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	f003 0307 	and.w	r3, r3, #7
 80010e6:	009b      	lsls	r3, r3, #2
 80010e8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ec:	693a      	ldr	r2, [r7, #16]
 80010ee:	4313      	orrs	r3, r2
 80010f0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80010f2:	697b      	ldr	r3, [r7, #20]
 80010f4:	08da      	lsrs	r2, r3, #3
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	3208      	adds	r2, #8
 80010fa:	6939      	ldr	r1, [r7, #16]
 80010fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001106:	697b      	ldr	r3, [r7, #20]
 8001108:	005b      	lsls	r3, r3, #1
 800110a:	2203      	movs	r2, #3
 800110c:	fa02 f303 	lsl.w	r3, r2, r3
 8001110:	43db      	mvns	r3, r3
 8001112:	693a      	ldr	r2, [r7, #16]
 8001114:	4013      	ands	r3, r2
 8001116:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	f003 0203 	and.w	r2, r3, #3
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	005b      	lsls	r3, r3, #1
 8001124:	fa02 f303 	lsl.w	r3, r2, r3
 8001128:	693a      	ldr	r2, [r7, #16]
 800112a:	4313      	orrs	r3, r2
 800112c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	693a      	ldr	r2, [r7, #16]
 8001132:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800113c:	2b00      	cmp	r3, #0
 800113e:	f000 80ac 	beq.w	800129a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001142:	4b5f      	ldr	r3, [pc, #380]	@ (80012c0 <HAL_GPIO_Init+0x330>)
 8001144:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001146:	4a5e      	ldr	r2, [pc, #376]	@ (80012c0 <HAL_GPIO_Init+0x330>)
 8001148:	f043 0301 	orr.w	r3, r3, #1
 800114c:	6613      	str	r3, [r2, #96]	@ 0x60
 800114e:	4b5c      	ldr	r3, [pc, #368]	@ (80012c0 <HAL_GPIO_Init+0x330>)
 8001150:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001152:	f003 0301 	and.w	r3, r3, #1
 8001156:	60bb      	str	r3, [r7, #8]
 8001158:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800115a:	4a5a      	ldr	r2, [pc, #360]	@ (80012c4 <HAL_GPIO_Init+0x334>)
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	089b      	lsrs	r3, r3, #2
 8001160:	3302      	adds	r3, #2
 8001162:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001166:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	f003 0303 	and.w	r3, r3, #3
 800116e:	009b      	lsls	r3, r3, #2
 8001170:	220f      	movs	r2, #15
 8001172:	fa02 f303 	lsl.w	r3, r2, r3
 8001176:	43db      	mvns	r3, r3
 8001178:	693a      	ldr	r2, [r7, #16]
 800117a:	4013      	ands	r3, r2
 800117c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001184:	d025      	beq.n	80011d2 <HAL_GPIO_Init+0x242>
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	4a4f      	ldr	r2, [pc, #316]	@ (80012c8 <HAL_GPIO_Init+0x338>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d01f      	beq.n	80011ce <HAL_GPIO_Init+0x23e>
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	4a4e      	ldr	r2, [pc, #312]	@ (80012cc <HAL_GPIO_Init+0x33c>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d019      	beq.n	80011ca <HAL_GPIO_Init+0x23a>
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	4a4d      	ldr	r2, [pc, #308]	@ (80012d0 <HAL_GPIO_Init+0x340>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d013      	beq.n	80011c6 <HAL_GPIO_Init+0x236>
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	4a4c      	ldr	r2, [pc, #304]	@ (80012d4 <HAL_GPIO_Init+0x344>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d00d      	beq.n	80011c2 <HAL_GPIO_Init+0x232>
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	4a4b      	ldr	r2, [pc, #300]	@ (80012d8 <HAL_GPIO_Init+0x348>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d007      	beq.n	80011be <HAL_GPIO_Init+0x22e>
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	4a4a      	ldr	r2, [pc, #296]	@ (80012dc <HAL_GPIO_Init+0x34c>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d101      	bne.n	80011ba <HAL_GPIO_Init+0x22a>
 80011b6:	2306      	movs	r3, #6
 80011b8:	e00c      	b.n	80011d4 <HAL_GPIO_Init+0x244>
 80011ba:	2307      	movs	r3, #7
 80011bc:	e00a      	b.n	80011d4 <HAL_GPIO_Init+0x244>
 80011be:	2305      	movs	r3, #5
 80011c0:	e008      	b.n	80011d4 <HAL_GPIO_Init+0x244>
 80011c2:	2304      	movs	r3, #4
 80011c4:	e006      	b.n	80011d4 <HAL_GPIO_Init+0x244>
 80011c6:	2303      	movs	r3, #3
 80011c8:	e004      	b.n	80011d4 <HAL_GPIO_Init+0x244>
 80011ca:	2302      	movs	r3, #2
 80011cc:	e002      	b.n	80011d4 <HAL_GPIO_Init+0x244>
 80011ce:	2301      	movs	r3, #1
 80011d0:	e000      	b.n	80011d4 <HAL_GPIO_Init+0x244>
 80011d2:	2300      	movs	r3, #0
 80011d4:	697a      	ldr	r2, [r7, #20]
 80011d6:	f002 0203 	and.w	r2, r2, #3
 80011da:	0092      	lsls	r2, r2, #2
 80011dc:	4093      	lsls	r3, r2
 80011de:	693a      	ldr	r2, [r7, #16]
 80011e0:	4313      	orrs	r3, r2
 80011e2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80011e4:	4937      	ldr	r1, [pc, #220]	@ (80012c4 <HAL_GPIO_Init+0x334>)
 80011e6:	697b      	ldr	r3, [r7, #20]
 80011e8:	089b      	lsrs	r3, r3, #2
 80011ea:	3302      	adds	r3, #2
 80011ec:	693a      	ldr	r2, [r7, #16]
 80011ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80011f2:	4b3b      	ldr	r3, [pc, #236]	@ (80012e0 <HAL_GPIO_Init+0x350>)
 80011f4:	689b      	ldr	r3, [r3, #8]
 80011f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	43db      	mvns	r3, r3
 80011fc:	693a      	ldr	r2, [r7, #16]
 80011fe:	4013      	ands	r3, r2
 8001200:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800120a:	2b00      	cmp	r3, #0
 800120c:	d003      	beq.n	8001216 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800120e:	693a      	ldr	r2, [r7, #16]
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	4313      	orrs	r3, r2
 8001214:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001216:	4a32      	ldr	r2, [pc, #200]	@ (80012e0 <HAL_GPIO_Init+0x350>)
 8001218:	693b      	ldr	r3, [r7, #16]
 800121a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800121c:	4b30      	ldr	r3, [pc, #192]	@ (80012e0 <HAL_GPIO_Init+0x350>)
 800121e:	68db      	ldr	r3, [r3, #12]
 8001220:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	43db      	mvns	r3, r3
 8001226:	693a      	ldr	r2, [r7, #16]
 8001228:	4013      	ands	r3, r2
 800122a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001234:	2b00      	cmp	r3, #0
 8001236:	d003      	beq.n	8001240 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001238:	693a      	ldr	r2, [r7, #16]
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	4313      	orrs	r3, r2
 800123e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001240:	4a27      	ldr	r2, [pc, #156]	@ (80012e0 <HAL_GPIO_Init+0x350>)
 8001242:	693b      	ldr	r3, [r7, #16]
 8001244:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001246:	4b26      	ldr	r3, [pc, #152]	@ (80012e0 <HAL_GPIO_Init+0x350>)
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	43db      	mvns	r3, r3
 8001250:	693a      	ldr	r2, [r7, #16]
 8001252:	4013      	ands	r3, r2
 8001254:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800125e:	2b00      	cmp	r3, #0
 8001260:	d003      	beq.n	800126a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001262:	693a      	ldr	r2, [r7, #16]
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	4313      	orrs	r3, r2
 8001268:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800126a:	4a1d      	ldr	r2, [pc, #116]	@ (80012e0 <HAL_GPIO_Init+0x350>)
 800126c:	693b      	ldr	r3, [r7, #16]
 800126e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001270:	4b1b      	ldr	r3, [pc, #108]	@ (80012e0 <HAL_GPIO_Init+0x350>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	43db      	mvns	r3, r3
 800127a:	693a      	ldr	r2, [r7, #16]
 800127c:	4013      	ands	r3, r2
 800127e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001288:	2b00      	cmp	r3, #0
 800128a:	d003      	beq.n	8001294 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800128c:	693a      	ldr	r2, [r7, #16]
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	4313      	orrs	r3, r2
 8001292:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001294:	4a12      	ldr	r2, [pc, #72]	@ (80012e0 <HAL_GPIO_Init+0x350>)
 8001296:	693b      	ldr	r3, [r7, #16]
 8001298:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800129a:	697b      	ldr	r3, [r7, #20]
 800129c:	3301      	adds	r3, #1
 800129e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	681a      	ldr	r2, [r3, #0]
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	fa22 f303 	lsr.w	r3, r2, r3
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	f47f ae78 	bne.w	8000fa0 <HAL_GPIO_Init+0x10>
  }
}
 80012b0:	bf00      	nop
 80012b2:	bf00      	nop
 80012b4:	371c      	adds	r7, #28
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr
 80012be:	bf00      	nop
 80012c0:	40021000 	.word	0x40021000
 80012c4:	40010000 	.word	0x40010000
 80012c8:	48000400 	.word	0x48000400
 80012cc:	48000800 	.word	0x48000800
 80012d0:	48000c00 	.word	0x48000c00
 80012d4:	48001000 	.word	0x48001000
 80012d8:	48001400 	.word	0x48001400
 80012dc:	48001800 	.word	0x48001800
 80012e0:	40010400 	.word	0x40010400

080012e4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b085      	sub	sp, #20
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
 80012ec:	460b      	mov	r3, r1
 80012ee:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	695b      	ldr	r3, [r3, #20]
 80012f4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80012f6:	887a      	ldrh	r2, [r7, #2]
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	4013      	ands	r3, r2
 80012fc:	041a      	lsls	r2, r3, #16
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	43d9      	mvns	r1, r3
 8001302:	887b      	ldrh	r3, [r7, #2]
 8001304:	400b      	ands	r3, r1
 8001306:	431a      	orrs	r2, r3
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	619a      	str	r2, [r3, #24]
}
 800130c:	bf00      	nop
 800130e:	3714      	adds	r7, #20
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr

08001318 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d101      	bne.n	800132a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001326:	2301      	movs	r3, #1
 8001328:	e08d      	b.n	8001446 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001330:	b2db      	uxtb	r3, r3
 8001332:	2b00      	cmp	r3, #0
 8001334:	d106      	bne.n	8001344 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	2200      	movs	r2, #0
 800133a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800133e:	6878      	ldr	r0, [r7, #4]
 8001340:	f7ff fafc 	bl	800093c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2224      	movs	r2, #36	@ 0x24
 8001348:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	681a      	ldr	r2, [r3, #0]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f022 0201 	bic.w	r2, r2, #1
 800135a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	685a      	ldr	r2, [r3, #4]
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001368:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	689a      	ldr	r2, [r3, #8]
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001378:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	68db      	ldr	r3, [r3, #12]
 800137e:	2b01      	cmp	r3, #1
 8001380:	d107      	bne.n	8001392 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	689a      	ldr	r2, [r3, #8]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800138e:	609a      	str	r2, [r3, #8]
 8001390:	e006      	b.n	80013a0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	689a      	ldr	r2, [r3, #8]
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800139e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	68db      	ldr	r3, [r3, #12]
 80013a4:	2b02      	cmp	r3, #2
 80013a6:	d108      	bne.n	80013ba <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	685a      	ldr	r2, [r3, #4]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80013b6:	605a      	str	r2, [r3, #4]
 80013b8:	e007      	b.n	80013ca <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	685a      	ldr	r2, [r3, #4]
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80013c8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	687a      	ldr	r2, [r7, #4]
 80013d2:	6812      	ldr	r2, [r2, #0]
 80013d4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80013d8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80013dc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	68da      	ldr	r2, [r3, #12]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80013ec:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	691a      	ldr	r2, [r3, #16]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	695b      	ldr	r3, [r3, #20]
 80013f6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	699b      	ldr	r3, [r3, #24]
 80013fe:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	430a      	orrs	r2, r1
 8001406:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	69d9      	ldr	r1, [r3, #28]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6a1a      	ldr	r2, [r3, #32]
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	430a      	orrs	r2, r1
 8001416:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	681a      	ldr	r2, [r3, #0]
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f042 0201 	orr.w	r2, r2, #1
 8001426:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2200      	movs	r2, #0
 800142c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	2220      	movs	r2, #32
 8001432:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	2200      	movs	r2, #0
 800143a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2200      	movs	r2, #0
 8001440:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001444:	2300      	movs	r3, #0
}
 8001446:	4618      	mov	r0, r3
 8001448:	3708      	adds	r7, #8
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
	...

08001450 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b088      	sub	sp, #32
 8001454:	af02      	add	r7, sp, #8
 8001456:	60f8      	str	r0, [r7, #12]
 8001458:	607a      	str	r2, [r7, #4]
 800145a:	461a      	mov	r2, r3
 800145c:	460b      	mov	r3, r1
 800145e:	817b      	strh	r3, [r7, #10]
 8001460:	4613      	mov	r3, r2
 8001462:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800146a:	b2db      	uxtb	r3, r3
 800146c:	2b20      	cmp	r3, #32
 800146e:	f040 80fd 	bne.w	800166c <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001478:	2b01      	cmp	r3, #1
 800147a:	d101      	bne.n	8001480 <HAL_I2C_Master_Transmit+0x30>
 800147c:	2302      	movs	r3, #2
 800147e:	e0f6      	b.n	800166e <HAL_I2C_Master_Transmit+0x21e>
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	2201      	movs	r2, #1
 8001484:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001488:	f7ff fc24 	bl	8000cd4 <HAL_GetTick>
 800148c:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	9300      	str	r3, [sp, #0]
 8001492:	2319      	movs	r3, #25
 8001494:	2201      	movs	r2, #1
 8001496:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800149a:	68f8      	ldr	r0, [r7, #12]
 800149c:	f000 fb0f 	bl	8001abe <I2C_WaitOnFlagUntilTimeout>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d001      	beq.n	80014aa <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80014a6:	2301      	movs	r3, #1
 80014a8:	e0e1      	b.n	800166e <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	2221      	movs	r2, #33	@ 0x21
 80014ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	2210      	movs	r2, #16
 80014b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	2200      	movs	r2, #0
 80014be:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	687a      	ldr	r2, [r7, #4]
 80014c4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	893a      	ldrh	r2, [r7, #8]
 80014ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	2200      	movs	r2, #0
 80014d0:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80014d6:	b29b      	uxth	r3, r3
 80014d8:	2bff      	cmp	r3, #255	@ 0xff
 80014da:	d906      	bls.n	80014ea <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	22ff      	movs	r2, #255	@ 0xff
 80014e0:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80014e2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80014e6:	617b      	str	r3, [r7, #20]
 80014e8:	e007      	b.n	80014fa <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80014ee:	b29a      	uxth	r2, r3
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80014f4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80014f8:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d024      	beq.n	800154c <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001506:	781a      	ldrb	r2, [r3, #0]
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001512:	1c5a      	adds	r2, r3, #1
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800151c:	b29b      	uxth	r3, r3
 800151e:	3b01      	subs	r3, #1
 8001520:	b29a      	uxth	r2, r3
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800152a:	3b01      	subs	r3, #1
 800152c:	b29a      	uxth	r2, r3
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001536:	b2db      	uxtb	r3, r3
 8001538:	3301      	adds	r3, #1
 800153a:	b2da      	uxtb	r2, r3
 800153c:	8979      	ldrh	r1, [r7, #10]
 800153e:	4b4e      	ldr	r3, [pc, #312]	@ (8001678 <HAL_I2C_Master_Transmit+0x228>)
 8001540:	9300      	str	r3, [sp, #0]
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	68f8      	ldr	r0, [r7, #12]
 8001546:	f000 fd09 	bl	8001f5c <I2C_TransferConfig>
 800154a:	e066      	b.n	800161a <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001550:	b2da      	uxtb	r2, r3
 8001552:	8979      	ldrh	r1, [r7, #10]
 8001554:	4b48      	ldr	r3, [pc, #288]	@ (8001678 <HAL_I2C_Master_Transmit+0x228>)
 8001556:	9300      	str	r3, [sp, #0]
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	68f8      	ldr	r0, [r7, #12]
 800155c:	f000 fcfe 	bl	8001f5c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001560:	e05b      	b.n	800161a <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001562:	693a      	ldr	r2, [r7, #16]
 8001564:	6a39      	ldr	r1, [r7, #32]
 8001566:	68f8      	ldr	r0, [r7, #12]
 8001568:	f000 fb02 	bl	8001b70 <I2C_WaitOnTXISFlagUntilTimeout>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8001572:	2301      	movs	r3, #1
 8001574:	e07b      	b.n	800166e <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800157a:	781a      	ldrb	r2, [r3, #0]
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001586:	1c5a      	adds	r2, r3, #1
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001590:	b29b      	uxth	r3, r3
 8001592:	3b01      	subs	r3, #1
 8001594:	b29a      	uxth	r2, r3
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800159e:	3b01      	subs	r3, #1
 80015a0:	b29a      	uxth	r2, r3
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80015aa:	b29b      	uxth	r3, r3
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d034      	beq.n	800161a <HAL_I2C_Master_Transmit+0x1ca>
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d130      	bne.n	800161a <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80015b8:	693b      	ldr	r3, [r7, #16]
 80015ba:	9300      	str	r3, [sp, #0]
 80015bc:	6a3b      	ldr	r3, [r7, #32]
 80015be:	2200      	movs	r2, #0
 80015c0:	2180      	movs	r1, #128	@ 0x80
 80015c2:	68f8      	ldr	r0, [r7, #12]
 80015c4:	f000 fa7b 	bl	8001abe <I2C_WaitOnFlagUntilTimeout>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
 80015d0:	e04d      	b.n	800166e <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80015d6:	b29b      	uxth	r3, r3
 80015d8:	2bff      	cmp	r3, #255	@ 0xff
 80015da:	d90e      	bls.n	80015fa <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	22ff      	movs	r2, #255	@ 0xff
 80015e0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80015e6:	b2da      	uxtb	r2, r3
 80015e8:	8979      	ldrh	r1, [r7, #10]
 80015ea:	2300      	movs	r3, #0
 80015ec:	9300      	str	r3, [sp, #0]
 80015ee:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80015f2:	68f8      	ldr	r0, [r7, #12]
 80015f4:	f000 fcb2 	bl	8001f5c <I2C_TransferConfig>
 80015f8:	e00f      	b.n	800161a <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80015fe:	b29a      	uxth	r2, r3
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001608:	b2da      	uxtb	r2, r3
 800160a:	8979      	ldrh	r1, [r7, #10]
 800160c:	2300      	movs	r3, #0
 800160e:	9300      	str	r3, [sp, #0]
 8001610:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001614:	68f8      	ldr	r0, [r7, #12]
 8001616:	f000 fca1 	bl	8001f5c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800161e:	b29b      	uxth	r3, r3
 8001620:	2b00      	cmp	r3, #0
 8001622:	d19e      	bne.n	8001562 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001624:	693a      	ldr	r2, [r7, #16]
 8001626:	6a39      	ldr	r1, [r7, #32]
 8001628:	68f8      	ldr	r0, [r7, #12]
 800162a:	f000 fae8 	bl	8001bfe <I2C_WaitOnSTOPFlagUntilTimeout>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d001      	beq.n	8001638 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8001634:	2301      	movs	r3, #1
 8001636:	e01a      	b.n	800166e <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	2220      	movs	r2, #32
 800163e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	6859      	ldr	r1, [r3, #4]
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	4b0c      	ldr	r3, [pc, #48]	@ (800167c <HAL_I2C_Master_Transmit+0x22c>)
 800164c:	400b      	ands	r3, r1
 800164e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	2220      	movs	r2, #32
 8001654:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	2200      	movs	r2, #0
 800165c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	2200      	movs	r2, #0
 8001664:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001668:	2300      	movs	r3, #0
 800166a:	e000      	b.n	800166e <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 800166c:	2302      	movs	r3, #2
  }
}
 800166e:	4618      	mov	r0, r3
 8001670:	3718      	adds	r7, #24
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	80002000 	.word	0x80002000
 800167c:	fe00e800 	.word	0xfe00e800

08001680 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b088      	sub	sp, #32
 8001684:	af02      	add	r7, sp, #8
 8001686:	60f8      	str	r0, [r7, #12]
 8001688:	607a      	str	r2, [r7, #4]
 800168a:	461a      	mov	r2, r3
 800168c:	460b      	mov	r3, r1
 800168e:	817b      	strh	r3, [r7, #10]
 8001690:	4613      	mov	r3, r2
 8001692:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800169a:	b2db      	uxtb	r3, r3
 800169c:	2b20      	cmp	r3, #32
 800169e:	f040 80db 	bne.w	8001858 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80016a8:	2b01      	cmp	r3, #1
 80016aa:	d101      	bne.n	80016b0 <HAL_I2C_Master_Receive+0x30>
 80016ac:	2302      	movs	r3, #2
 80016ae:	e0d4      	b.n	800185a <HAL_I2C_Master_Receive+0x1da>
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	2201      	movs	r2, #1
 80016b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80016b8:	f7ff fb0c 	bl	8000cd4 <HAL_GetTick>
 80016bc:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80016be:	697b      	ldr	r3, [r7, #20]
 80016c0:	9300      	str	r3, [sp, #0]
 80016c2:	2319      	movs	r3, #25
 80016c4:	2201      	movs	r2, #1
 80016c6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80016ca:	68f8      	ldr	r0, [r7, #12]
 80016cc:	f000 f9f7 	bl	8001abe <I2C_WaitOnFlagUntilTimeout>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d001      	beq.n	80016da <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80016d6:	2301      	movs	r3, #1
 80016d8:	e0bf      	b.n	800185a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	2222      	movs	r2, #34	@ 0x22
 80016de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	2210      	movs	r2, #16
 80016e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	2200      	movs	r2, #0
 80016ee:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	687a      	ldr	r2, [r7, #4]
 80016f4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	893a      	ldrh	r2, [r7, #8]
 80016fa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	2200      	movs	r2, #0
 8001700:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001706:	b29b      	uxth	r3, r3
 8001708:	2bff      	cmp	r3, #255	@ 0xff
 800170a:	d90e      	bls.n	800172a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = 1U;
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	2201      	movs	r2, #1
 8001710:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001716:	b2da      	uxtb	r2, r3
 8001718:	8979      	ldrh	r1, [r7, #10]
 800171a:	4b52      	ldr	r3, [pc, #328]	@ (8001864 <HAL_I2C_Master_Receive+0x1e4>)
 800171c:	9300      	str	r3, [sp, #0]
 800171e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001722:	68f8      	ldr	r0, [r7, #12]
 8001724:	f000 fc1a 	bl	8001f5c <I2C_TransferConfig>
 8001728:	e06d      	b.n	8001806 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800172e:	b29a      	uxth	r2, r3
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001738:	b2da      	uxtb	r2, r3
 800173a:	8979      	ldrh	r1, [r7, #10]
 800173c:	4b49      	ldr	r3, [pc, #292]	@ (8001864 <HAL_I2C_Master_Receive+0x1e4>)
 800173e:	9300      	str	r3, [sp, #0]
 8001740:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001744:	68f8      	ldr	r0, [r7, #12]
 8001746:	f000 fc09 	bl	8001f5c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800174a:	e05c      	b.n	8001806 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800174c:	697a      	ldr	r2, [r7, #20]
 800174e:	6a39      	ldr	r1, [r7, #32]
 8001750:	68f8      	ldr	r0, [r7, #12]
 8001752:	f000 fa97 	bl	8001c84 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d001      	beq.n	8001760 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800175c:	2301      	movs	r3, #1
 800175e:	e07c      	b.n	800185a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800176a:	b2d2      	uxtb	r2, r2
 800176c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001772:	1c5a      	adds	r2, r3, #1
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800177c:	3b01      	subs	r3, #1
 800177e:	b29a      	uxth	r2, r3
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001788:	b29b      	uxth	r3, r3
 800178a:	3b01      	subs	r3, #1
 800178c:	b29a      	uxth	r2, r3
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001796:	b29b      	uxth	r3, r3
 8001798:	2b00      	cmp	r3, #0
 800179a:	d034      	beq.n	8001806 <HAL_I2C_Master_Receive+0x186>
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d130      	bne.n	8001806 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	9300      	str	r3, [sp, #0]
 80017a8:	6a3b      	ldr	r3, [r7, #32]
 80017aa:	2200      	movs	r2, #0
 80017ac:	2180      	movs	r1, #128	@ 0x80
 80017ae:	68f8      	ldr	r0, [r7, #12]
 80017b0:	f000 f985 	bl	8001abe <I2C_WaitOnFlagUntilTimeout>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d001      	beq.n	80017be <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
 80017bc:	e04d      	b.n	800185a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80017c2:	b29b      	uxth	r3, r3
 80017c4:	2bff      	cmp	r3, #255	@ 0xff
 80017c6:	d90e      	bls.n	80017e6 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	22ff      	movs	r2, #255	@ 0xff
 80017cc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017d2:	b2da      	uxtb	r2, r3
 80017d4:	8979      	ldrh	r1, [r7, #10]
 80017d6:	2300      	movs	r3, #0
 80017d8:	9300      	str	r3, [sp, #0]
 80017da:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80017de:	68f8      	ldr	r0, [r7, #12]
 80017e0:	f000 fbbc 	bl	8001f5c <I2C_TransferConfig>
 80017e4:	e00f      	b.n	8001806 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80017ea:	b29a      	uxth	r2, r3
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017f4:	b2da      	uxtb	r2, r3
 80017f6:	8979      	ldrh	r1, [r7, #10]
 80017f8:	2300      	movs	r3, #0
 80017fa:	9300      	str	r3, [sp, #0]
 80017fc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001800:	68f8      	ldr	r0, [r7, #12]
 8001802:	f000 fbab 	bl	8001f5c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800180a:	b29b      	uxth	r3, r3
 800180c:	2b00      	cmp	r3, #0
 800180e:	d19d      	bne.n	800174c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001810:	697a      	ldr	r2, [r7, #20]
 8001812:	6a39      	ldr	r1, [r7, #32]
 8001814:	68f8      	ldr	r0, [r7, #12]
 8001816:	f000 f9f2 	bl	8001bfe <I2C_WaitOnSTOPFlagUntilTimeout>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d001      	beq.n	8001824 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8001820:	2301      	movs	r3, #1
 8001822:	e01a      	b.n	800185a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	2220      	movs	r2, #32
 800182a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	6859      	ldr	r1, [r3, #4]
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	681a      	ldr	r2, [r3, #0]
 8001836:	4b0c      	ldr	r3, [pc, #48]	@ (8001868 <HAL_I2C_Master_Receive+0x1e8>)
 8001838:	400b      	ands	r3, r1
 800183a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	2220      	movs	r2, #32
 8001840:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	2200      	movs	r2, #0
 8001848:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	2200      	movs	r2, #0
 8001850:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001854:	2300      	movs	r3, #0
 8001856:	e000      	b.n	800185a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8001858:	2302      	movs	r3, #2
  }
}
 800185a:	4618      	mov	r0, r3
 800185c:	3718      	adds	r7, #24
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	80002400 	.word	0x80002400
 8001868:	fe00e800 	.word	0xfe00e800

0800186c <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b08a      	sub	sp, #40	@ 0x28
 8001870:	af02      	add	r7, sp, #8
 8001872:	60f8      	str	r0, [r7, #12]
 8001874:	607a      	str	r2, [r7, #4]
 8001876:	603b      	str	r3, [r7, #0]
 8001878:	460b      	mov	r3, r1
 800187a:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 800187c:	2300      	movs	r3, #0
 800187e:	617b      	str	r3, [r7, #20]

  HAL_StatusTypeDef status = HAL_OK;
 8001880:	2300      	movs	r3, #0
 8001882:	77fb      	strb	r3, [r7, #31]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800188a:	b2db      	uxtb	r3, r3
 800188c:	2b20      	cmp	r3, #32
 800188e:	f040 80ed 	bne.w	8001a6c <HAL_I2C_IsDeviceReady+0x200>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	699b      	ldr	r3, [r3, #24]
 8001898:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800189c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80018a0:	d101      	bne.n	80018a6 <HAL_I2C_IsDeviceReady+0x3a>
    {
      return HAL_BUSY;
 80018a2:	2302      	movs	r3, #2
 80018a4:	e0e3      	b.n	8001a6e <HAL_I2C_IsDeviceReady+0x202>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80018ac:	2b01      	cmp	r3, #1
 80018ae:	d101      	bne.n	80018b4 <HAL_I2C_IsDeviceReady+0x48>
 80018b0:	2302      	movs	r3, #2
 80018b2:	e0dc      	b.n	8001a6e <HAL_I2C_IsDeviceReady+0x202>
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	2201      	movs	r2, #1
 80018b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	2224      	movs	r2, #36	@ 0x24
 80018c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	2200      	movs	r2, #0
 80018c8:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	68db      	ldr	r3, [r3, #12]
 80018ce:	2b01      	cmp	r3, #1
 80018d0:	d107      	bne.n	80018e2 <HAL_I2C_IsDeviceReady+0x76>
 80018d2:	897b      	ldrh	r3, [r7, #10]
 80018d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80018d8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80018dc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80018e0:	e006      	b.n	80018f0 <HAL_I2C_IsDeviceReady+0x84>
 80018e2:	897b      	ldrh	r3, [r7, #10]
 80018e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80018e8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80018ec:	f443 5320 	orr.w	r3, r3, #10240	@ 0x2800
 80018f0:	68fa      	ldr	r2, [r7, #12]
 80018f2:	6812      	ldr	r2, [r2, #0]
 80018f4:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80018f6:	f7ff f9ed 	bl	8000cd4 <HAL_GetTick>
 80018fa:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	699b      	ldr	r3, [r3, #24]
 8001902:	f003 0320 	and.w	r3, r3, #32
 8001906:	2b20      	cmp	r3, #32
 8001908:	bf0c      	ite	eq
 800190a:	2301      	moveq	r3, #1
 800190c:	2300      	movne	r3, #0
 800190e:	b2db      	uxtb	r3, r3
 8001910:	77bb      	strb	r3, [r7, #30]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	699b      	ldr	r3, [r3, #24]
 8001918:	f003 0310 	and.w	r3, r3, #16
 800191c:	2b10      	cmp	r3, #16
 800191e:	bf0c      	ite	eq
 8001920:	2301      	moveq	r3, #1
 8001922:	2300      	movne	r3, #0
 8001924:	b2db      	uxtb	r3, r3
 8001926:	777b      	strb	r3, [r7, #29]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001928:	e034      	b.n	8001994 <HAL_I2C_IsDeviceReady+0x128>
      {
        if (Timeout != HAL_MAX_DELAY)
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001930:	d01a      	beq.n	8001968 <HAL_I2C_IsDeviceReady+0xfc>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001932:	f7ff f9cf 	bl	8000cd4 <HAL_GetTick>
 8001936:	4602      	mov	r2, r0
 8001938:	69bb      	ldr	r3, [r7, #24]
 800193a:	1ad3      	subs	r3, r2, r3
 800193c:	683a      	ldr	r2, [r7, #0]
 800193e:	429a      	cmp	r2, r3
 8001940:	d302      	bcc.n	8001948 <HAL_I2C_IsDeviceReady+0xdc>
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d10f      	bne.n	8001968 <HAL_I2C_IsDeviceReady+0xfc>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	2220      	movs	r2, #32
 800194c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001954:	f043 0220 	orr.w	r2, r3, #32
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	2200      	movs	r2, #0
 8001960:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 8001964:	2301      	movs	r3, #1
 8001966:	e082      	b.n	8001a6e <HAL_I2C_IsDeviceReady+0x202>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	699b      	ldr	r3, [r3, #24]
 800196e:	f003 0320 	and.w	r3, r3, #32
 8001972:	2b20      	cmp	r3, #32
 8001974:	bf0c      	ite	eq
 8001976:	2301      	moveq	r3, #1
 8001978:	2300      	movne	r3, #0
 800197a:	b2db      	uxtb	r3, r3
 800197c:	77bb      	strb	r3, [r7, #30]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	699b      	ldr	r3, [r3, #24]
 8001984:	f003 0310 	and.w	r3, r3, #16
 8001988:	2b10      	cmp	r3, #16
 800198a:	bf0c      	ite	eq
 800198c:	2301      	moveq	r3, #1
 800198e:	2300      	movne	r3, #0
 8001990:	b2db      	uxtb	r3, r3
 8001992:	777b      	strb	r3, [r7, #29]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001994:	7fbb      	ldrb	r3, [r7, #30]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d102      	bne.n	80019a0 <HAL_I2C_IsDeviceReady+0x134>
 800199a:	7f7b      	ldrb	r3, [r7, #29]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d0c4      	beq.n	800192a <HAL_I2C_IsDeviceReady+0xbe>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	699b      	ldr	r3, [r3, #24]
 80019a6:	f003 0310 	and.w	r3, r3, #16
 80019aa:	2b10      	cmp	r3, #16
 80019ac:	d027      	beq.n	80019fe <HAL_I2C_IsDeviceReady+0x192>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80019ae:	69bb      	ldr	r3, [r7, #24]
 80019b0:	9300      	str	r3, [sp, #0]
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	2200      	movs	r2, #0
 80019b6:	2120      	movs	r1, #32
 80019b8:	68f8      	ldr	r0, [r7, #12]
 80019ba:	f000 f880 	bl	8001abe <I2C_WaitOnFlagUntilTimeout>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d00e      	beq.n	80019e2 <HAL_I2C_IsDeviceReady+0x176>
        {
          /* A non acknowledge appear during STOP Flag waiting process, a new trial must be performed */
          if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019c8:	2b04      	cmp	r3, #4
 80019ca:	d107      	bne.n	80019dc <HAL_I2C_IsDeviceReady+0x170>
          {
            /* Clear STOP Flag */
            __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	2220      	movs	r2, #32
 80019d2:	61da      	str	r2, [r3, #28]

            /* Reset the error code for next trial */
            hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	2200      	movs	r2, #0
 80019d8:	645a      	str	r2, [r3, #68]	@ 0x44
 80019da:	e026      	b.n	8001a2a <HAL_I2C_IsDeviceReady+0x1be>
          }
          else
          {
            status = HAL_ERROR;
 80019dc:	2301      	movs	r3, #1
 80019de:	77fb      	strb	r3, [r7, #31]
 80019e0:	e023      	b.n	8001a2a <HAL_I2C_IsDeviceReady+0x1be>
        else
        {
          /* A acknowledge appear during STOP Flag waiting process, this mean that device respond to its address */

          /* Clear STOP Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	2220      	movs	r2, #32
 80019e8:	61da      	str	r2, [r3, #28]

          /* Device is ready */
          hi2c->State = HAL_I2C_STATE_READY;
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	2220      	movs	r2, #32
 80019ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	2200      	movs	r2, #0
 80019f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_OK;
 80019fa:	2300      	movs	r3, #0
 80019fc:	e037      	b.n	8001a6e <HAL_I2C_IsDeviceReady+0x202>
      {
        /* A non acknowledge is detected, this mean that device not respond to its address,
           a new trial must be performed */

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	2210      	movs	r2, #16
 8001a04:	61da      	str	r2, [r3, #28]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001a06:	69bb      	ldr	r3, [r7, #24]
 8001a08:	9300      	str	r3, [sp, #0]
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	2120      	movs	r1, #32
 8001a10:	68f8      	ldr	r0, [r7, #12]
 8001a12:	f000 f854 	bl	8001abe <I2C_WaitOnFlagUntilTimeout>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d002      	beq.n	8001a22 <HAL_I2C_IsDeviceReady+0x1b6>
        {
          status = HAL_ERROR;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	77fb      	strb	r3, [r7, #31]
 8001a20:	e003      	b.n	8001a2a <HAL_I2C_IsDeviceReady+0x1be>
        }
        else
        {
          /* Clear STOP Flag, auto generated with autoend*/
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	2220      	movs	r2, #32
 8001a28:	61da      	str	r2, [r3, #28]
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	3301      	adds	r3, #1
 8001a2e:	617b      	str	r3, [r7, #20]

      if ((I2C_Trials < Trials) && (status == HAL_ERROR))
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	687a      	ldr	r2, [r7, #4]
 8001a34:	429a      	cmp	r2, r3
 8001a36:	d904      	bls.n	8001a42 <HAL_I2C_IsDeviceReady+0x1d6>
 8001a38:	7ffb      	ldrb	r3, [r7, #31]
 8001a3a:	2b01      	cmp	r3, #1
 8001a3c:	d101      	bne.n	8001a42 <HAL_I2C_IsDeviceReady+0x1d6>
      {
        status = HAL_OK;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	77fb      	strb	r3, [r7, #31]
      }

    } while (I2C_Trials < Trials);
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	687a      	ldr	r2, [r7, #4]
 8001a46:	429a      	cmp	r2, r3
 8001a48:	f63f af3f 	bhi.w	80018ca <HAL_I2C_IsDeviceReady+0x5e>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	2220      	movs	r2, #32
 8001a50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a58:	f043 0220 	orr.w	r2, r3, #32
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	2200      	movs	r2, #0
 8001a64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	e000      	b.n	8001a6e <HAL_I2C_IsDeviceReady+0x202>
  }
  else
  {
    return HAL_BUSY;
 8001a6c:	2302      	movs	r3, #2
  }
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3720      	adds	r7, #32
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}

08001a76 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001a76:	b480      	push	{r7}
 8001a78:	b083      	sub	sp, #12
 8001a7a:	af00      	add	r7, sp, #0
 8001a7c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	699b      	ldr	r3, [r3, #24]
 8001a84:	f003 0302 	and.w	r3, r3, #2
 8001a88:	2b02      	cmp	r3, #2
 8001a8a:	d103      	bne.n	8001a94 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	2200      	movs	r2, #0
 8001a92:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	699b      	ldr	r3, [r3, #24]
 8001a9a:	f003 0301 	and.w	r3, r3, #1
 8001a9e:	2b01      	cmp	r3, #1
 8001aa0:	d007      	beq.n	8001ab2 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	699a      	ldr	r2, [r3, #24]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f042 0201 	orr.w	r2, r2, #1
 8001ab0:	619a      	str	r2, [r3, #24]
  }
}
 8001ab2:	bf00      	nop
 8001ab4:	370c      	adds	r7, #12
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr

08001abe <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001abe:	b580      	push	{r7, lr}
 8001ac0:	b084      	sub	sp, #16
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	60f8      	str	r0, [r7, #12]
 8001ac6:	60b9      	str	r1, [r7, #8]
 8001ac8:	603b      	str	r3, [r7, #0]
 8001aca:	4613      	mov	r3, r2
 8001acc:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001ace:	e03b      	b.n	8001b48 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ad0:	69ba      	ldr	r2, [r7, #24]
 8001ad2:	6839      	ldr	r1, [r7, #0]
 8001ad4:	68f8      	ldr	r0, [r7, #12]
 8001ad6:	f000 f961 	bl	8001d9c <I2C_IsErrorOccurred>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d001      	beq.n	8001ae4 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	e041      	b.n	8001b68 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001aea:	d02d      	beq.n	8001b48 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001aec:	f7ff f8f2 	bl	8000cd4 <HAL_GetTick>
 8001af0:	4602      	mov	r2, r0
 8001af2:	69bb      	ldr	r3, [r7, #24]
 8001af4:	1ad3      	subs	r3, r2, r3
 8001af6:	683a      	ldr	r2, [r7, #0]
 8001af8:	429a      	cmp	r2, r3
 8001afa:	d302      	bcc.n	8001b02 <I2C_WaitOnFlagUntilTimeout+0x44>
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d122      	bne.n	8001b48 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	699a      	ldr	r2, [r3, #24]
 8001b08:	68bb      	ldr	r3, [r7, #8]
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	68ba      	ldr	r2, [r7, #8]
 8001b0e:	429a      	cmp	r2, r3
 8001b10:	bf0c      	ite	eq
 8001b12:	2301      	moveq	r3, #1
 8001b14:	2300      	movne	r3, #0
 8001b16:	b2db      	uxtb	r3, r3
 8001b18:	461a      	mov	r2, r3
 8001b1a:	79fb      	ldrb	r3, [r7, #7]
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	d113      	bne.n	8001b48 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b24:	f043 0220 	orr.w	r2, r3, #32
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	2220      	movs	r2, #32
 8001b30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	2200      	movs	r2, #0
 8001b38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	2200      	movs	r2, #0
 8001b40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8001b44:	2301      	movs	r3, #1
 8001b46:	e00f      	b.n	8001b68 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	699a      	ldr	r2, [r3, #24]
 8001b4e:	68bb      	ldr	r3, [r7, #8]
 8001b50:	4013      	ands	r3, r2
 8001b52:	68ba      	ldr	r2, [r7, #8]
 8001b54:	429a      	cmp	r2, r3
 8001b56:	bf0c      	ite	eq
 8001b58:	2301      	moveq	r3, #1
 8001b5a:	2300      	movne	r3, #0
 8001b5c:	b2db      	uxtb	r3, r3
 8001b5e:	461a      	mov	r2, r3
 8001b60:	79fb      	ldrb	r3, [r7, #7]
 8001b62:	429a      	cmp	r2, r3
 8001b64:	d0b4      	beq.n	8001ad0 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001b66:	2300      	movs	r3, #0
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	3710      	adds	r7, #16
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}

08001b70 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b084      	sub	sp, #16
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	60f8      	str	r0, [r7, #12]
 8001b78:	60b9      	str	r1, [r7, #8]
 8001b7a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001b7c:	e033      	b.n	8001be6 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b7e:	687a      	ldr	r2, [r7, #4]
 8001b80:	68b9      	ldr	r1, [r7, #8]
 8001b82:	68f8      	ldr	r0, [r7, #12]
 8001b84:	f000 f90a 	bl	8001d9c <I2C_IsErrorOccurred>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d001      	beq.n	8001b92 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e031      	b.n	8001bf6 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b92:	68bb      	ldr	r3, [r7, #8]
 8001b94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b98:	d025      	beq.n	8001be6 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b9a:	f7ff f89b 	bl	8000cd4 <HAL_GetTick>
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	1ad3      	subs	r3, r2, r3
 8001ba4:	68ba      	ldr	r2, [r7, #8]
 8001ba6:	429a      	cmp	r2, r3
 8001ba8:	d302      	bcc.n	8001bb0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001baa:	68bb      	ldr	r3, [r7, #8]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d11a      	bne.n	8001be6 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	699b      	ldr	r3, [r3, #24]
 8001bb6:	f003 0302 	and.w	r3, r3, #2
 8001bba:	2b02      	cmp	r3, #2
 8001bbc:	d013      	beq.n	8001be6 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bc2:	f043 0220 	orr.w	r2, r3, #32
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	2220      	movs	r2, #32
 8001bce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
 8001be4:	e007      	b.n	8001bf6 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	699b      	ldr	r3, [r3, #24]
 8001bec:	f003 0302 	and.w	r3, r3, #2
 8001bf0:	2b02      	cmp	r3, #2
 8001bf2:	d1c4      	bne.n	8001b7e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001bf4:	2300      	movs	r3, #0
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	3710      	adds	r7, #16
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}

08001bfe <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001bfe:	b580      	push	{r7, lr}
 8001c00:	b084      	sub	sp, #16
 8001c02:	af00      	add	r7, sp, #0
 8001c04:	60f8      	str	r0, [r7, #12]
 8001c06:	60b9      	str	r1, [r7, #8]
 8001c08:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001c0a:	e02f      	b.n	8001c6c <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c0c:	687a      	ldr	r2, [r7, #4]
 8001c0e:	68b9      	ldr	r1, [r7, #8]
 8001c10:	68f8      	ldr	r0, [r7, #12]
 8001c12:	f000 f8c3 	bl	8001d9c <I2C_IsErrorOccurred>
 8001c16:	4603      	mov	r3, r0
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d001      	beq.n	8001c20 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	e02d      	b.n	8001c7c <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c20:	f7ff f858 	bl	8000cd4 <HAL_GetTick>
 8001c24:	4602      	mov	r2, r0
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	1ad3      	subs	r3, r2, r3
 8001c2a:	68ba      	ldr	r2, [r7, #8]
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	d302      	bcc.n	8001c36 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d11a      	bne.n	8001c6c <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	699b      	ldr	r3, [r3, #24]
 8001c3c:	f003 0320 	and.w	r3, r3, #32
 8001c40:	2b20      	cmp	r3, #32
 8001c42:	d013      	beq.n	8001c6c <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c48:	f043 0220 	orr.w	r2, r3, #32
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	2220      	movs	r2, #32
 8001c54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	2200      	movs	r2, #0
 8001c64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	e007      	b.n	8001c7c <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	699b      	ldr	r3, [r3, #24]
 8001c72:	f003 0320 	and.w	r3, r3, #32
 8001c76:	2b20      	cmp	r3, #32
 8001c78:	d1c8      	bne.n	8001c0c <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001c7a:	2300      	movs	r3, #0
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	3710      	adds	r7, #16
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}

08001c84 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b086      	sub	sp, #24
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	60f8      	str	r0, [r7, #12]
 8001c8c:	60b9      	str	r1, [r7, #8]
 8001c8e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c90:	2300      	movs	r3, #0
 8001c92:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8001c94:	e071      	b.n	8001d7a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c96:	687a      	ldr	r2, [r7, #4]
 8001c98:	68b9      	ldr	r1, [r7, #8]
 8001c9a:	68f8      	ldr	r0, [r7, #12]
 8001c9c:	f000 f87e 	bl	8001d9c <I2C_IsErrorOccurred>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d001      	beq.n	8001caa <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	699b      	ldr	r3, [r3, #24]
 8001cb0:	f003 0320 	and.w	r3, r3, #32
 8001cb4:	2b20      	cmp	r3, #32
 8001cb6:	d13b      	bne.n	8001d30 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8001cb8:	7dfb      	ldrb	r3, [r7, #23]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d138      	bne.n	8001d30 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	699b      	ldr	r3, [r3, #24]
 8001cc4:	f003 0304 	and.w	r3, r3, #4
 8001cc8:	2b04      	cmp	r3, #4
 8001cca:	d105      	bne.n	8001cd8 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d001      	beq.n	8001cd8 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	699b      	ldr	r3, [r3, #24]
 8001cde:	f003 0310 	and.w	r3, r3, #16
 8001ce2:	2b10      	cmp	r3, #16
 8001ce4:	d121      	bne.n	8001d2a <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	2210      	movs	r2, #16
 8001cec:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	2204      	movs	r2, #4
 8001cf2:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	2220      	movs	r2, #32
 8001cfa:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	6859      	ldr	r1, [r3, #4]
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	681a      	ldr	r2, [r3, #0]
 8001d06:	4b24      	ldr	r3, [pc, #144]	@ (8001d98 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8001d08:	400b      	ands	r3, r1
 8001d0a:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	2220      	movs	r2, #32
 8001d10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	2200      	movs	r2, #0
 8001d18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	2200      	movs	r2, #0
 8001d20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8001d24:	2301      	movs	r3, #1
 8001d26:	75fb      	strb	r3, [r7, #23]
 8001d28:	e002      	b.n	8001d30 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8001d30:	f7fe ffd0 	bl	8000cd4 <HAL_GetTick>
 8001d34:	4602      	mov	r2, r0
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	1ad3      	subs	r3, r2, r3
 8001d3a:	68ba      	ldr	r2, [r7, #8]
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	d302      	bcc.n	8001d46 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d119      	bne.n	8001d7a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8001d46:	7dfb      	ldrb	r3, [r7, #23]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d116      	bne.n	8001d7a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	699b      	ldr	r3, [r3, #24]
 8001d52:	f003 0304 	and.w	r3, r3, #4
 8001d56:	2b04      	cmp	r3, #4
 8001d58:	d00f      	beq.n	8001d7a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d5e:	f043 0220 	orr.w	r2, r3, #32
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	2220      	movs	r2, #32
 8001d6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	2200      	movs	r2, #0
 8001d72:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
 8001d78:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	699b      	ldr	r3, [r3, #24]
 8001d80:	f003 0304 	and.w	r3, r3, #4
 8001d84:	2b04      	cmp	r3, #4
 8001d86:	d002      	beq.n	8001d8e <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8001d88:	7dfb      	ldrb	r3, [r7, #23]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d083      	beq.n	8001c96 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8001d8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	3718      	adds	r7, #24
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	fe00e800 	.word	0xfe00e800

08001d9c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b08a      	sub	sp, #40	@ 0x28
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	60f8      	str	r0, [r7, #12]
 8001da4:	60b9      	str	r1, [r7, #8]
 8001da6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001da8:	2300      	movs	r3, #0
 8001daa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	699b      	ldr	r3, [r3, #24]
 8001db4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001db6:	2300      	movs	r3, #0
 8001db8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001dbe:	69bb      	ldr	r3, [r7, #24]
 8001dc0:	f003 0310 	and.w	r3, r3, #16
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d068      	beq.n	8001e9a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	2210      	movs	r2, #16
 8001dce:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001dd0:	e049      	b.n	8001e66 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001dd2:	68bb      	ldr	r3, [r7, #8]
 8001dd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dd8:	d045      	beq.n	8001e66 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001dda:	f7fe ff7b 	bl	8000cd4 <HAL_GetTick>
 8001dde:	4602      	mov	r2, r0
 8001de0:	69fb      	ldr	r3, [r7, #28]
 8001de2:	1ad3      	subs	r3, r2, r3
 8001de4:	68ba      	ldr	r2, [r7, #8]
 8001de6:	429a      	cmp	r2, r3
 8001de8:	d302      	bcc.n	8001df0 <I2C_IsErrorOccurred+0x54>
 8001dea:	68bb      	ldr	r3, [r7, #8]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d13a      	bne.n	8001e66 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001dfa:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001e02:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	699b      	ldr	r3, [r3, #24]
 8001e0a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001e0e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001e12:	d121      	bne.n	8001e58 <I2C_IsErrorOccurred+0xbc>
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001e1a:	d01d      	beq.n	8001e58 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8001e1c:	7cfb      	ldrb	r3, [r7, #19]
 8001e1e:	2b20      	cmp	r3, #32
 8001e20:	d01a      	beq.n	8001e58 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	685a      	ldr	r2, [r3, #4]
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001e30:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001e32:	f7fe ff4f 	bl	8000cd4 <HAL_GetTick>
 8001e36:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001e38:	e00e      	b.n	8001e58 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001e3a:	f7fe ff4b 	bl	8000cd4 <HAL_GetTick>
 8001e3e:	4602      	mov	r2, r0
 8001e40:	69fb      	ldr	r3, [r7, #28]
 8001e42:	1ad3      	subs	r3, r2, r3
 8001e44:	2b19      	cmp	r3, #25
 8001e46:	d907      	bls.n	8001e58 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001e48:	6a3b      	ldr	r3, [r7, #32]
 8001e4a:	f043 0320 	orr.w	r3, r3, #32
 8001e4e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001e50:	2301      	movs	r3, #1
 8001e52:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8001e56:	e006      	b.n	8001e66 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	699b      	ldr	r3, [r3, #24]
 8001e5e:	f003 0320 	and.w	r3, r3, #32
 8001e62:	2b20      	cmp	r3, #32
 8001e64:	d1e9      	bne.n	8001e3a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	699b      	ldr	r3, [r3, #24]
 8001e6c:	f003 0320 	and.w	r3, r3, #32
 8001e70:	2b20      	cmp	r3, #32
 8001e72:	d003      	beq.n	8001e7c <I2C_IsErrorOccurred+0xe0>
 8001e74:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d0aa      	beq.n	8001dd2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001e7c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d103      	bne.n	8001e8c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	2220      	movs	r2, #32
 8001e8a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001e8c:	6a3b      	ldr	r3, [r7, #32]
 8001e8e:	f043 0304 	orr.w	r3, r3, #4
 8001e92:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001e94:	2301      	movs	r3, #1
 8001e96:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	699b      	ldr	r3, [r3, #24]
 8001ea0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001ea2:	69bb      	ldr	r3, [r7, #24]
 8001ea4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d00b      	beq.n	8001ec4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001eac:	6a3b      	ldr	r3, [r7, #32]
 8001eae:	f043 0301 	orr.w	r3, r3, #1
 8001eb2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001ebc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001ec4:	69bb      	ldr	r3, [r7, #24]
 8001ec6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d00b      	beq.n	8001ee6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001ece:	6a3b      	ldr	r3, [r7, #32]
 8001ed0:	f043 0308 	orr.w	r3, r3, #8
 8001ed4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001ede:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001ee6:	69bb      	ldr	r3, [r7, #24]
 8001ee8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d00b      	beq.n	8001f08 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001ef0:	6a3b      	ldr	r3, [r7, #32]
 8001ef2:	f043 0302 	orr.w	r3, r3, #2
 8001ef6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f00:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8001f08:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d01c      	beq.n	8001f4a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001f10:	68f8      	ldr	r0, [r7, #12]
 8001f12:	f7ff fdb0 	bl	8001a76 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	6859      	ldr	r1, [r3, #4]
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681a      	ldr	r2, [r3, #0]
 8001f20:	4b0d      	ldr	r3, [pc, #52]	@ (8001f58 <I2C_IsErrorOccurred+0x1bc>)
 8001f22:	400b      	ands	r3, r1
 8001f24:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001f2a:	6a3b      	ldr	r3, [r7, #32]
 8001f2c:	431a      	orrs	r2, r3
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	2220      	movs	r2, #32
 8001f36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	2200      	movs	r2, #0
 8001f46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8001f4a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	3728      	adds	r7, #40	@ 0x28
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	fe00e800 	.word	0xfe00e800

08001f5c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b087      	sub	sp, #28
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	60f8      	str	r0, [r7, #12]
 8001f64:	607b      	str	r3, [r7, #4]
 8001f66:	460b      	mov	r3, r1
 8001f68:	817b      	strh	r3, [r7, #10]
 8001f6a:	4613      	mov	r3, r2
 8001f6c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001f6e:	897b      	ldrh	r3, [r7, #10]
 8001f70:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001f74:	7a7b      	ldrb	r3, [r7, #9]
 8001f76:	041b      	lsls	r3, r3, #16
 8001f78:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001f7c:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001f82:	6a3b      	ldr	r3, [r7, #32]
 8001f84:	4313      	orrs	r3, r2
 8001f86:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001f8a:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	685a      	ldr	r2, [r3, #4]
 8001f92:	6a3b      	ldr	r3, [r7, #32]
 8001f94:	0d5b      	lsrs	r3, r3, #21
 8001f96:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8001f9a:	4b08      	ldr	r3, [pc, #32]	@ (8001fbc <I2C_TransferConfig+0x60>)
 8001f9c:	430b      	orrs	r3, r1
 8001f9e:	43db      	mvns	r3, r3
 8001fa0:	ea02 0103 	and.w	r1, r2, r3
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	697a      	ldr	r2, [r7, #20]
 8001faa:	430a      	orrs	r2, r1
 8001fac:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001fae:	bf00      	nop
 8001fb0:	371c      	adds	r7, #28
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr
 8001fba:	bf00      	nop
 8001fbc:	03ff63ff 	.word	0x03ff63ff

08001fc0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b083      	sub	sp, #12
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
 8001fc8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001fd0:	b2db      	uxtb	r3, r3
 8001fd2:	2b20      	cmp	r3, #32
 8001fd4:	d138      	bne.n	8002048 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001fdc:	2b01      	cmp	r3, #1
 8001fde:	d101      	bne.n	8001fe4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001fe0:	2302      	movs	r3, #2
 8001fe2:	e032      	b.n	800204a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2224      	movs	r2, #36	@ 0x24
 8001ff0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f022 0201 	bic.w	r2, r2, #1
 8002002:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	681a      	ldr	r2, [r3, #0]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002012:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	6819      	ldr	r1, [r3, #0]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	683a      	ldr	r2, [r7, #0]
 8002020:	430a      	orrs	r2, r1
 8002022:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f042 0201 	orr.w	r2, r2, #1
 8002032:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2220      	movs	r2, #32
 8002038:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2200      	movs	r2, #0
 8002040:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002044:	2300      	movs	r3, #0
 8002046:	e000      	b.n	800204a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002048:	2302      	movs	r3, #2
  }
}
 800204a:	4618      	mov	r0, r3
 800204c:	370c      	adds	r7, #12
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr
	...

08002058 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002058:	b480      	push	{r7}
 800205a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800205c:	4b04      	ldr	r3, [pc, #16]	@ (8002070 <HAL_PWREx_GetVoltageRange+0x18>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002064:	4618      	mov	r0, r3
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr
 800206e:	bf00      	nop
 8002070:	40007000 	.word	0x40007000

08002074 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002074:	b480      	push	{r7}
 8002076:	b085      	sub	sp, #20
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002082:	d130      	bne.n	80020e6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002084:	4b23      	ldr	r3, [pc, #140]	@ (8002114 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800208c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002090:	d038      	beq.n	8002104 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002092:	4b20      	ldr	r3, [pc, #128]	@ (8002114 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800209a:	4a1e      	ldr	r2, [pc, #120]	@ (8002114 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800209c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80020a0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80020a2:	4b1d      	ldr	r3, [pc, #116]	@ (8002118 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	2232      	movs	r2, #50	@ 0x32
 80020a8:	fb02 f303 	mul.w	r3, r2, r3
 80020ac:	4a1b      	ldr	r2, [pc, #108]	@ (800211c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80020ae:	fba2 2303 	umull	r2, r3, r2, r3
 80020b2:	0c9b      	lsrs	r3, r3, #18
 80020b4:	3301      	adds	r3, #1
 80020b6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80020b8:	e002      	b.n	80020c0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	3b01      	subs	r3, #1
 80020be:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80020c0:	4b14      	ldr	r3, [pc, #80]	@ (8002114 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020c2:	695b      	ldr	r3, [r3, #20]
 80020c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80020cc:	d102      	bne.n	80020d4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d1f2      	bne.n	80020ba <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80020d4:	4b0f      	ldr	r3, [pc, #60]	@ (8002114 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020d6:	695b      	ldr	r3, [r3, #20]
 80020d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80020e0:	d110      	bne.n	8002104 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80020e2:	2303      	movs	r3, #3
 80020e4:	e00f      	b.n	8002106 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80020e6:	4b0b      	ldr	r3, [pc, #44]	@ (8002114 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80020ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80020f2:	d007      	beq.n	8002104 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80020f4:	4b07      	ldr	r3, [pc, #28]	@ (8002114 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80020fc:	4a05      	ldr	r2, [pc, #20]	@ (8002114 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020fe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002102:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002104:	2300      	movs	r3, #0
}
 8002106:	4618      	mov	r0, r3
 8002108:	3714      	adds	r7, #20
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr
 8002112:	bf00      	nop
 8002114:	40007000 	.word	0x40007000
 8002118:	20000000 	.word	0x20000000
 800211c:	431bde83 	.word	0x431bde83

08002120 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b088      	sub	sp, #32
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d101      	bne.n	8002132 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	e3ca      	b.n	80028c8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002132:	4b97      	ldr	r3, [pc, #604]	@ (8002390 <HAL_RCC_OscConfig+0x270>)
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	f003 030c 	and.w	r3, r3, #12
 800213a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800213c:	4b94      	ldr	r3, [pc, #592]	@ (8002390 <HAL_RCC_OscConfig+0x270>)
 800213e:	68db      	ldr	r3, [r3, #12]
 8002140:	f003 0303 	and.w	r3, r3, #3
 8002144:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f003 0310 	and.w	r3, r3, #16
 800214e:	2b00      	cmp	r3, #0
 8002150:	f000 80e4 	beq.w	800231c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002154:	69bb      	ldr	r3, [r7, #24]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d007      	beq.n	800216a <HAL_RCC_OscConfig+0x4a>
 800215a:	69bb      	ldr	r3, [r7, #24]
 800215c:	2b0c      	cmp	r3, #12
 800215e:	f040 808b 	bne.w	8002278 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	2b01      	cmp	r3, #1
 8002166:	f040 8087 	bne.w	8002278 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800216a:	4b89      	ldr	r3, [pc, #548]	@ (8002390 <HAL_RCC_OscConfig+0x270>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 0302 	and.w	r3, r3, #2
 8002172:	2b00      	cmp	r3, #0
 8002174:	d005      	beq.n	8002182 <HAL_RCC_OscConfig+0x62>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	699b      	ldr	r3, [r3, #24]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d101      	bne.n	8002182 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800217e:	2301      	movs	r3, #1
 8002180:	e3a2      	b.n	80028c8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6a1a      	ldr	r2, [r3, #32]
 8002186:	4b82      	ldr	r3, [pc, #520]	@ (8002390 <HAL_RCC_OscConfig+0x270>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 0308 	and.w	r3, r3, #8
 800218e:	2b00      	cmp	r3, #0
 8002190:	d004      	beq.n	800219c <HAL_RCC_OscConfig+0x7c>
 8002192:	4b7f      	ldr	r3, [pc, #508]	@ (8002390 <HAL_RCC_OscConfig+0x270>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800219a:	e005      	b.n	80021a8 <HAL_RCC_OscConfig+0x88>
 800219c:	4b7c      	ldr	r3, [pc, #496]	@ (8002390 <HAL_RCC_OscConfig+0x270>)
 800219e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80021a2:	091b      	lsrs	r3, r3, #4
 80021a4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d223      	bcs.n	80021f4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6a1b      	ldr	r3, [r3, #32]
 80021b0:	4618      	mov	r0, r3
 80021b2:	f000 fd55 	bl	8002c60 <RCC_SetFlashLatencyFromMSIRange>
 80021b6:	4603      	mov	r3, r0
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d001      	beq.n	80021c0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80021bc:	2301      	movs	r3, #1
 80021be:	e383      	b.n	80028c8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80021c0:	4b73      	ldr	r3, [pc, #460]	@ (8002390 <HAL_RCC_OscConfig+0x270>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a72      	ldr	r2, [pc, #456]	@ (8002390 <HAL_RCC_OscConfig+0x270>)
 80021c6:	f043 0308 	orr.w	r3, r3, #8
 80021ca:	6013      	str	r3, [r2, #0]
 80021cc:	4b70      	ldr	r3, [pc, #448]	@ (8002390 <HAL_RCC_OscConfig+0x270>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6a1b      	ldr	r3, [r3, #32]
 80021d8:	496d      	ldr	r1, [pc, #436]	@ (8002390 <HAL_RCC_OscConfig+0x270>)
 80021da:	4313      	orrs	r3, r2
 80021dc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80021de:	4b6c      	ldr	r3, [pc, #432]	@ (8002390 <HAL_RCC_OscConfig+0x270>)
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	69db      	ldr	r3, [r3, #28]
 80021ea:	021b      	lsls	r3, r3, #8
 80021ec:	4968      	ldr	r1, [pc, #416]	@ (8002390 <HAL_RCC_OscConfig+0x270>)
 80021ee:	4313      	orrs	r3, r2
 80021f0:	604b      	str	r3, [r1, #4]
 80021f2:	e025      	b.n	8002240 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80021f4:	4b66      	ldr	r3, [pc, #408]	@ (8002390 <HAL_RCC_OscConfig+0x270>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a65      	ldr	r2, [pc, #404]	@ (8002390 <HAL_RCC_OscConfig+0x270>)
 80021fa:	f043 0308 	orr.w	r3, r3, #8
 80021fe:	6013      	str	r3, [r2, #0]
 8002200:	4b63      	ldr	r3, [pc, #396]	@ (8002390 <HAL_RCC_OscConfig+0x270>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6a1b      	ldr	r3, [r3, #32]
 800220c:	4960      	ldr	r1, [pc, #384]	@ (8002390 <HAL_RCC_OscConfig+0x270>)
 800220e:	4313      	orrs	r3, r2
 8002210:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002212:	4b5f      	ldr	r3, [pc, #380]	@ (8002390 <HAL_RCC_OscConfig+0x270>)
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	69db      	ldr	r3, [r3, #28]
 800221e:	021b      	lsls	r3, r3, #8
 8002220:	495b      	ldr	r1, [pc, #364]	@ (8002390 <HAL_RCC_OscConfig+0x270>)
 8002222:	4313      	orrs	r3, r2
 8002224:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002226:	69bb      	ldr	r3, [r7, #24]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d109      	bne.n	8002240 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6a1b      	ldr	r3, [r3, #32]
 8002230:	4618      	mov	r0, r3
 8002232:	f000 fd15 	bl	8002c60 <RCC_SetFlashLatencyFromMSIRange>
 8002236:	4603      	mov	r3, r0
 8002238:	2b00      	cmp	r3, #0
 800223a:	d001      	beq.n	8002240 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800223c:	2301      	movs	r3, #1
 800223e:	e343      	b.n	80028c8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002240:	f000 fc4a 	bl	8002ad8 <HAL_RCC_GetSysClockFreq>
 8002244:	4602      	mov	r2, r0
 8002246:	4b52      	ldr	r3, [pc, #328]	@ (8002390 <HAL_RCC_OscConfig+0x270>)
 8002248:	689b      	ldr	r3, [r3, #8]
 800224a:	091b      	lsrs	r3, r3, #4
 800224c:	f003 030f 	and.w	r3, r3, #15
 8002250:	4950      	ldr	r1, [pc, #320]	@ (8002394 <HAL_RCC_OscConfig+0x274>)
 8002252:	5ccb      	ldrb	r3, [r1, r3]
 8002254:	f003 031f 	and.w	r3, r3, #31
 8002258:	fa22 f303 	lsr.w	r3, r2, r3
 800225c:	4a4e      	ldr	r2, [pc, #312]	@ (8002398 <HAL_RCC_OscConfig+0x278>)
 800225e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002260:	4b4e      	ldr	r3, [pc, #312]	@ (800239c <HAL_RCC_OscConfig+0x27c>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4618      	mov	r0, r3
 8002266:	f7fe fce5 	bl	8000c34 <HAL_InitTick>
 800226a:	4603      	mov	r3, r0
 800226c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800226e:	7bfb      	ldrb	r3, [r7, #15]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d052      	beq.n	800231a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002274:	7bfb      	ldrb	r3, [r7, #15]
 8002276:	e327      	b.n	80028c8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	699b      	ldr	r3, [r3, #24]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d032      	beq.n	80022e6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002280:	4b43      	ldr	r3, [pc, #268]	@ (8002390 <HAL_RCC_OscConfig+0x270>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a42      	ldr	r2, [pc, #264]	@ (8002390 <HAL_RCC_OscConfig+0x270>)
 8002286:	f043 0301 	orr.w	r3, r3, #1
 800228a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800228c:	f7fe fd22 	bl	8000cd4 <HAL_GetTick>
 8002290:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002292:	e008      	b.n	80022a6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002294:	f7fe fd1e 	bl	8000cd4 <HAL_GetTick>
 8002298:	4602      	mov	r2, r0
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	1ad3      	subs	r3, r2, r3
 800229e:	2b02      	cmp	r3, #2
 80022a0:	d901      	bls.n	80022a6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80022a2:	2303      	movs	r3, #3
 80022a4:	e310      	b.n	80028c8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80022a6:	4b3a      	ldr	r3, [pc, #232]	@ (8002390 <HAL_RCC_OscConfig+0x270>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f003 0302 	and.w	r3, r3, #2
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d0f0      	beq.n	8002294 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80022b2:	4b37      	ldr	r3, [pc, #220]	@ (8002390 <HAL_RCC_OscConfig+0x270>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a36      	ldr	r2, [pc, #216]	@ (8002390 <HAL_RCC_OscConfig+0x270>)
 80022b8:	f043 0308 	orr.w	r3, r3, #8
 80022bc:	6013      	str	r3, [r2, #0]
 80022be:	4b34      	ldr	r3, [pc, #208]	@ (8002390 <HAL_RCC_OscConfig+0x270>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6a1b      	ldr	r3, [r3, #32]
 80022ca:	4931      	ldr	r1, [pc, #196]	@ (8002390 <HAL_RCC_OscConfig+0x270>)
 80022cc:	4313      	orrs	r3, r2
 80022ce:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80022d0:	4b2f      	ldr	r3, [pc, #188]	@ (8002390 <HAL_RCC_OscConfig+0x270>)
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	69db      	ldr	r3, [r3, #28]
 80022dc:	021b      	lsls	r3, r3, #8
 80022de:	492c      	ldr	r1, [pc, #176]	@ (8002390 <HAL_RCC_OscConfig+0x270>)
 80022e0:	4313      	orrs	r3, r2
 80022e2:	604b      	str	r3, [r1, #4]
 80022e4:	e01a      	b.n	800231c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80022e6:	4b2a      	ldr	r3, [pc, #168]	@ (8002390 <HAL_RCC_OscConfig+0x270>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a29      	ldr	r2, [pc, #164]	@ (8002390 <HAL_RCC_OscConfig+0x270>)
 80022ec:	f023 0301 	bic.w	r3, r3, #1
 80022f0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80022f2:	f7fe fcef 	bl	8000cd4 <HAL_GetTick>
 80022f6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80022f8:	e008      	b.n	800230c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80022fa:	f7fe fceb 	bl	8000cd4 <HAL_GetTick>
 80022fe:	4602      	mov	r2, r0
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	1ad3      	subs	r3, r2, r3
 8002304:	2b02      	cmp	r3, #2
 8002306:	d901      	bls.n	800230c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002308:	2303      	movs	r3, #3
 800230a:	e2dd      	b.n	80028c8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800230c:	4b20      	ldr	r3, [pc, #128]	@ (8002390 <HAL_RCC_OscConfig+0x270>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f003 0302 	and.w	r3, r3, #2
 8002314:	2b00      	cmp	r3, #0
 8002316:	d1f0      	bne.n	80022fa <HAL_RCC_OscConfig+0x1da>
 8002318:	e000      	b.n	800231c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800231a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f003 0301 	and.w	r3, r3, #1
 8002324:	2b00      	cmp	r3, #0
 8002326:	d074      	beq.n	8002412 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002328:	69bb      	ldr	r3, [r7, #24]
 800232a:	2b08      	cmp	r3, #8
 800232c:	d005      	beq.n	800233a <HAL_RCC_OscConfig+0x21a>
 800232e:	69bb      	ldr	r3, [r7, #24]
 8002330:	2b0c      	cmp	r3, #12
 8002332:	d10e      	bne.n	8002352 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	2b03      	cmp	r3, #3
 8002338:	d10b      	bne.n	8002352 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800233a:	4b15      	ldr	r3, [pc, #84]	@ (8002390 <HAL_RCC_OscConfig+0x270>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002342:	2b00      	cmp	r3, #0
 8002344:	d064      	beq.n	8002410 <HAL_RCC_OscConfig+0x2f0>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d160      	bne.n	8002410 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	e2ba      	b.n	80028c8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800235a:	d106      	bne.n	800236a <HAL_RCC_OscConfig+0x24a>
 800235c:	4b0c      	ldr	r3, [pc, #48]	@ (8002390 <HAL_RCC_OscConfig+0x270>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a0b      	ldr	r2, [pc, #44]	@ (8002390 <HAL_RCC_OscConfig+0x270>)
 8002362:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002366:	6013      	str	r3, [r2, #0]
 8002368:	e026      	b.n	80023b8 <HAL_RCC_OscConfig+0x298>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002372:	d115      	bne.n	80023a0 <HAL_RCC_OscConfig+0x280>
 8002374:	4b06      	ldr	r3, [pc, #24]	@ (8002390 <HAL_RCC_OscConfig+0x270>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a05      	ldr	r2, [pc, #20]	@ (8002390 <HAL_RCC_OscConfig+0x270>)
 800237a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800237e:	6013      	str	r3, [r2, #0]
 8002380:	4b03      	ldr	r3, [pc, #12]	@ (8002390 <HAL_RCC_OscConfig+0x270>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a02      	ldr	r2, [pc, #8]	@ (8002390 <HAL_RCC_OscConfig+0x270>)
 8002386:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800238a:	6013      	str	r3, [r2, #0]
 800238c:	e014      	b.n	80023b8 <HAL_RCC_OscConfig+0x298>
 800238e:	bf00      	nop
 8002390:	40021000 	.word	0x40021000
 8002394:	080043b8 	.word	0x080043b8
 8002398:	20000000 	.word	0x20000000
 800239c:	20000004 	.word	0x20000004
 80023a0:	4ba0      	ldr	r3, [pc, #640]	@ (8002624 <HAL_RCC_OscConfig+0x504>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a9f      	ldr	r2, [pc, #636]	@ (8002624 <HAL_RCC_OscConfig+0x504>)
 80023a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80023aa:	6013      	str	r3, [r2, #0]
 80023ac:	4b9d      	ldr	r3, [pc, #628]	@ (8002624 <HAL_RCC_OscConfig+0x504>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a9c      	ldr	r2, [pc, #624]	@ (8002624 <HAL_RCC_OscConfig+0x504>)
 80023b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80023b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d013      	beq.n	80023e8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023c0:	f7fe fc88 	bl	8000cd4 <HAL_GetTick>
 80023c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023c6:	e008      	b.n	80023da <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023c8:	f7fe fc84 	bl	8000cd4 <HAL_GetTick>
 80023cc:	4602      	mov	r2, r0
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	1ad3      	subs	r3, r2, r3
 80023d2:	2b64      	cmp	r3, #100	@ 0x64
 80023d4:	d901      	bls.n	80023da <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80023d6:	2303      	movs	r3, #3
 80023d8:	e276      	b.n	80028c8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023da:	4b92      	ldr	r3, [pc, #584]	@ (8002624 <HAL_RCC_OscConfig+0x504>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d0f0      	beq.n	80023c8 <HAL_RCC_OscConfig+0x2a8>
 80023e6:	e014      	b.n	8002412 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023e8:	f7fe fc74 	bl	8000cd4 <HAL_GetTick>
 80023ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80023ee:	e008      	b.n	8002402 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023f0:	f7fe fc70 	bl	8000cd4 <HAL_GetTick>
 80023f4:	4602      	mov	r2, r0
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	1ad3      	subs	r3, r2, r3
 80023fa:	2b64      	cmp	r3, #100	@ 0x64
 80023fc:	d901      	bls.n	8002402 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80023fe:	2303      	movs	r3, #3
 8002400:	e262      	b.n	80028c8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002402:	4b88      	ldr	r3, [pc, #544]	@ (8002624 <HAL_RCC_OscConfig+0x504>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800240a:	2b00      	cmp	r3, #0
 800240c:	d1f0      	bne.n	80023f0 <HAL_RCC_OscConfig+0x2d0>
 800240e:	e000      	b.n	8002412 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002410:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 0302 	and.w	r3, r3, #2
 800241a:	2b00      	cmp	r3, #0
 800241c:	d060      	beq.n	80024e0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800241e:	69bb      	ldr	r3, [r7, #24]
 8002420:	2b04      	cmp	r3, #4
 8002422:	d005      	beq.n	8002430 <HAL_RCC_OscConfig+0x310>
 8002424:	69bb      	ldr	r3, [r7, #24]
 8002426:	2b0c      	cmp	r3, #12
 8002428:	d119      	bne.n	800245e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	2b02      	cmp	r3, #2
 800242e:	d116      	bne.n	800245e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002430:	4b7c      	ldr	r3, [pc, #496]	@ (8002624 <HAL_RCC_OscConfig+0x504>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002438:	2b00      	cmp	r3, #0
 800243a:	d005      	beq.n	8002448 <HAL_RCC_OscConfig+0x328>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	68db      	ldr	r3, [r3, #12]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d101      	bne.n	8002448 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002444:	2301      	movs	r3, #1
 8002446:	e23f      	b.n	80028c8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002448:	4b76      	ldr	r3, [pc, #472]	@ (8002624 <HAL_RCC_OscConfig+0x504>)
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	691b      	ldr	r3, [r3, #16]
 8002454:	061b      	lsls	r3, r3, #24
 8002456:	4973      	ldr	r1, [pc, #460]	@ (8002624 <HAL_RCC_OscConfig+0x504>)
 8002458:	4313      	orrs	r3, r2
 800245a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800245c:	e040      	b.n	80024e0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	68db      	ldr	r3, [r3, #12]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d023      	beq.n	80024ae <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002466:	4b6f      	ldr	r3, [pc, #444]	@ (8002624 <HAL_RCC_OscConfig+0x504>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a6e      	ldr	r2, [pc, #440]	@ (8002624 <HAL_RCC_OscConfig+0x504>)
 800246c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002470:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002472:	f7fe fc2f 	bl	8000cd4 <HAL_GetTick>
 8002476:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002478:	e008      	b.n	800248c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800247a:	f7fe fc2b 	bl	8000cd4 <HAL_GetTick>
 800247e:	4602      	mov	r2, r0
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	1ad3      	subs	r3, r2, r3
 8002484:	2b02      	cmp	r3, #2
 8002486:	d901      	bls.n	800248c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002488:	2303      	movs	r3, #3
 800248a:	e21d      	b.n	80028c8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800248c:	4b65      	ldr	r3, [pc, #404]	@ (8002624 <HAL_RCC_OscConfig+0x504>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002494:	2b00      	cmp	r3, #0
 8002496:	d0f0      	beq.n	800247a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002498:	4b62      	ldr	r3, [pc, #392]	@ (8002624 <HAL_RCC_OscConfig+0x504>)
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	691b      	ldr	r3, [r3, #16]
 80024a4:	061b      	lsls	r3, r3, #24
 80024a6:	495f      	ldr	r1, [pc, #380]	@ (8002624 <HAL_RCC_OscConfig+0x504>)
 80024a8:	4313      	orrs	r3, r2
 80024aa:	604b      	str	r3, [r1, #4]
 80024ac:	e018      	b.n	80024e0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024ae:	4b5d      	ldr	r3, [pc, #372]	@ (8002624 <HAL_RCC_OscConfig+0x504>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a5c      	ldr	r2, [pc, #368]	@ (8002624 <HAL_RCC_OscConfig+0x504>)
 80024b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80024b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024ba:	f7fe fc0b 	bl	8000cd4 <HAL_GetTick>
 80024be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80024c0:	e008      	b.n	80024d4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024c2:	f7fe fc07 	bl	8000cd4 <HAL_GetTick>
 80024c6:	4602      	mov	r2, r0
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	1ad3      	subs	r3, r2, r3
 80024cc:	2b02      	cmp	r3, #2
 80024ce:	d901      	bls.n	80024d4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80024d0:	2303      	movs	r3, #3
 80024d2:	e1f9      	b.n	80028c8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80024d4:	4b53      	ldr	r3, [pc, #332]	@ (8002624 <HAL_RCC_OscConfig+0x504>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d1f0      	bne.n	80024c2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f003 0308 	and.w	r3, r3, #8
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d03c      	beq.n	8002566 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	695b      	ldr	r3, [r3, #20]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d01c      	beq.n	800252e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024f4:	4b4b      	ldr	r3, [pc, #300]	@ (8002624 <HAL_RCC_OscConfig+0x504>)
 80024f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80024fa:	4a4a      	ldr	r2, [pc, #296]	@ (8002624 <HAL_RCC_OscConfig+0x504>)
 80024fc:	f043 0301 	orr.w	r3, r3, #1
 8002500:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002504:	f7fe fbe6 	bl	8000cd4 <HAL_GetTick>
 8002508:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800250a:	e008      	b.n	800251e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800250c:	f7fe fbe2 	bl	8000cd4 <HAL_GetTick>
 8002510:	4602      	mov	r2, r0
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	1ad3      	subs	r3, r2, r3
 8002516:	2b02      	cmp	r3, #2
 8002518:	d901      	bls.n	800251e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800251a:	2303      	movs	r3, #3
 800251c:	e1d4      	b.n	80028c8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800251e:	4b41      	ldr	r3, [pc, #260]	@ (8002624 <HAL_RCC_OscConfig+0x504>)
 8002520:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002524:	f003 0302 	and.w	r3, r3, #2
 8002528:	2b00      	cmp	r3, #0
 800252a:	d0ef      	beq.n	800250c <HAL_RCC_OscConfig+0x3ec>
 800252c:	e01b      	b.n	8002566 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800252e:	4b3d      	ldr	r3, [pc, #244]	@ (8002624 <HAL_RCC_OscConfig+0x504>)
 8002530:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002534:	4a3b      	ldr	r2, [pc, #236]	@ (8002624 <HAL_RCC_OscConfig+0x504>)
 8002536:	f023 0301 	bic.w	r3, r3, #1
 800253a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800253e:	f7fe fbc9 	bl	8000cd4 <HAL_GetTick>
 8002542:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002544:	e008      	b.n	8002558 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002546:	f7fe fbc5 	bl	8000cd4 <HAL_GetTick>
 800254a:	4602      	mov	r2, r0
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	1ad3      	subs	r3, r2, r3
 8002550:	2b02      	cmp	r3, #2
 8002552:	d901      	bls.n	8002558 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002554:	2303      	movs	r3, #3
 8002556:	e1b7      	b.n	80028c8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002558:	4b32      	ldr	r3, [pc, #200]	@ (8002624 <HAL_RCC_OscConfig+0x504>)
 800255a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800255e:	f003 0302 	and.w	r3, r3, #2
 8002562:	2b00      	cmp	r3, #0
 8002564:	d1ef      	bne.n	8002546 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f003 0304 	and.w	r3, r3, #4
 800256e:	2b00      	cmp	r3, #0
 8002570:	f000 80a6 	beq.w	80026c0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002574:	2300      	movs	r3, #0
 8002576:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002578:	4b2a      	ldr	r3, [pc, #168]	@ (8002624 <HAL_RCC_OscConfig+0x504>)
 800257a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800257c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002580:	2b00      	cmp	r3, #0
 8002582:	d10d      	bne.n	80025a0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002584:	4b27      	ldr	r3, [pc, #156]	@ (8002624 <HAL_RCC_OscConfig+0x504>)
 8002586:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002588:	4a26      	ldr	r2, [pc, #152]	@ (8002624 <HAL_RCC_OscConfig+0x504>)
 800258a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800258e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002590:	4b24      	ldr	r3, [pc, #144]	@ (8002624 <HAL_RCC_OscConfig+0x504>)
 8002592:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002594:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002598:	60bb      	str	r3, [r7, #8]
 800259a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800259c:	2301      	movs	r3, #1
 800259e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025a0:	4b21      	ldr	r3, [pc, #132]	@ (8002628 <HAL_RCC_OscConfig+0x508>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d118      	bne.n	80025de <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80025ac:	4b1e      	ldr	r3, [pc, #120]	@ (8002628 <HAL_RCC_OscConfig+0x508>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a1d      	ldr	r2, [pc, #116]	@ (8002628 <HAL_RCC_OscConfig+0x508>)
 80025b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025b6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025b8:	f7fe fb8c 	bl	8000cd4 <HAL_GetTick>
 80025bc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025be:	e008      	b.n	80025d2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025c0:	f7fe fb88 	bl	8000cd4 <HAL_GetTick>
 80025c4:	4602      	mov	r2, r0
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	1ad3      	subs	r3, r2, r3
 80025ca:	2b02      	cmp	r3, #2
 80025cc:	d901      	bls.n	80025d2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80025ce:	2303      	movs	r3, #3
 80025d0:	e17a      	b.n	80028c8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025d2:	4b15      	ldr	r3, [pc, #84]	@ (8002628 <HAL_RCC_OscConfig+0x508>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d0f0      	beq.n	80025c0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	2b01      	cmp	r3, #1
 80025e4:	d108      	bne.n	80025f8 <HAL_RCC_OscConfig+0x4d8>
 80025e6:	4b0f      	ldr	r3, [pc, #60]	@ (8002624 <HAL_RCC_OscConfig+0x504>)
 80025e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025ec:	4a0d      	ldr	r2, [pc, #52]	@ (8002624 <HAL_RCC_OscConfig+0x504>)
 80025ee:	f043 0301 	orr.w	r3, r3, #1
 80025f2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80025f6:	e029      	b.n	800264c <HAL_RCC_OscConfig+0x52c>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	2b05      	cmp	r3, #5
 80025fe:	d115      	bne.n	800262c <HAL_RCC_OscConfig+0x50c>
 8002600:	4b08      	ldr	r3, [pc, #32]	@ (8002624 <HAL_RCC_OscConfig+0x504>)
 8002602:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002606:	4a07      	ldr	r2, [pc, #28]	@ (8002624 <HAL_RCC_OscConfig+0x504>)
 8002608:	f043 0304 	orr.w	r3, r3, #4
 800260c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002610:	4b04      	ldr	r3, [pc, #16]	@ (8002624 <HAL_RCC_OscConfig+0x504>)
 8002612:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002616:	4a03      	ldr	r2, [pc, #12]	@ (8002624 <HAL_RCC_OscConfig+0x504>)
 8002618:	f043 0301 	orr.w	r3, r3, #1
 800261c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002620:	e014      	b.n	800264c <HAL_RCC_OscConfig+0x52c>
 8002622:	bf00      	nop
 8002624:	40021000 	.word	0x40021000
 8002628:	40007000 	.word	0x40007000
 800262c:	4b9c      	ldr	r3, [pc, #624]	@ (80028a0 <HAL_RCC_OscConfig+0x780>)
 800262e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002632:	4a9b      	ldr	r2, [pc, #620]	@ (80028a0 <HAL_RCC_OscConfig+0x780>)
 8002634:	f023 0301 	bic.w	r3, r3, #1
 8002638:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800263c:	4b98      	ldr	r3, [pc, #608]	@ (80028a0 <HAL_RCC_OscConfig+0x780>)
 800263e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002642:	4a97      	ldr	r2, [pc, #604]	@ (80028a0 <HAL_RCC_OscConfig+0x780>)
 8002644:	f023 0304 	bic.w	r3, r3, #4
 8002648:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d016      	beq.n	8002682 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002654:	f7fe fb3e 	bl	8000cd4 <HAL_GetTick>
 8002658:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800265a:	e00a      	b.n	8002672 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800265c:	f7fe fb3a 	bl	8000cd4 <HAL_GetTick>
 8002660:	4602      	mov	r2, r0
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	1ad3      	subs	r3, r2, r3
 8002666:	f241 3288 	movw	r2, #5000	@ 0x1388
 800266a:	4293      	cmp	r3, r2
 800266c:	d901      	bls.n	8002672 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800266e:	2303      	movs	r3, #3
 8002670:	e12a      	b.n	80028c8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002672:	4b8b      	ldr	r3, [pc, #556]	@ (80028a0 <HAL_RCC_OscConfig+0x780>)
 8002674:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002678:	f003 0302 	and.w	r3, r3, #2
 800267c:	2b00      	cmp	r3, #0
 800267e:	d0ed      	beq.n	800265c <HAL_RCC_OscConfig+0x53c>
 8002680:	e015      	b.n	80026ae <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002682:	f7fe fb27 	bl	8000cd4 <HAL_GetTick>
 8002686:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002688:	e00a      	b.n	80026a0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800268a:	f7fe fb23 	bl	8000cd4 <HAL_GetTick>
 800268e:	4602      	mov	r2, r0
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	1ad3      	subs	r3, r2, r3
 8002694:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002698:	4293      	cmp	r3, r2
 800269a:	d901      	bls.n	80026a0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800269c:	2303      	movs	r3, #3
 800269e:	e113      	b.n	80028c8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80026a0:	4b7f      	ldr	r3, [pc, #508]	@ (80028a0 <HAL_RCC_OscConfig+0x780>)
 80026a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026a6:	f003 0302 	and.w	r3, r3, #2
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d1ed      	bne.n	800268a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80026ae:	7ffb      	ldrb	r3, [r7, #31]
 80026b0:	2b01      	cmp	r3, #1
 80026b2:	d105      	bne.n	80026c0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026b4:	4b7a      	ldr	r3, [pc, #488]	@ (80028a0 <HAL_RCC_OscConfig+0x780>)
 80026b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026b8:	4a79      	ldr	r2, [pc, #484]	@ (80028a0 <HAL_RCC_OscConfig+0x780>)
 80026ba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80026be:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	f000 80fe 	beq.w	80028c6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026ce:	2b02      	cmp	r3, #2
 80026d0:	f040 80d0 	bne.w	8002874 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80026d4:	4b72      	ldr	r3, [pc, #456]	@ (80028a0 <HAL_RCC_OscConfig+0x780>)
 80026d6:	68db      	ldr	r3, [r3, #12]
 80026d8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	f003 0203 	and.w	r2, r3, #3
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026e4:	429a      	cmp	r2, r3
 80026e6:	d130      	bne.n	800274a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026f2:	3b01      	subs	r3, #1
 80026f4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80026f6:	429a      	cmp	r2, r3
 80026f8:	d127      	bne.n	800274a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002704:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002706:	429a      	cmp	r2, r3
 8002708:	d11f      	bne.n	800274a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002710:	687a      	ldr	r2, [r7, #4]
 8002712:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002714:	2a07      	cmp	r2, #7
 8002716:	bf14      	ite	ne
 8002718:	2201      	movne	r2, #1
 800271a:	2200      	moveq	r2, #0
 800271c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800271e:	4293      	cmp	r3, r2
 8002720:	d113      	bne.n	800274a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800272c:	085b      	lsrs	r3, r3, #1
 800272e:	3b01      	subs	r3, #1
 8002730:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002732:	429a      	cmp	r2, r3
 8002734:	d109      	bne.n	800274a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002740:	085b      	lsrs	r3, r3, #1
 8002742:	3b01      	subs	r3, #1
 8002744:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002746:	429a      	cmp	r2, r3
 8002748:	d06e      	beq.n	8002828 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800274a:	69bb      	ldr	r3, [r7, #24]
 800274c:	2b0c      	cmp	r3, #12
 800274e:	d069      	beq.n	8002824 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002750:	4b53      	ldr	r3, [pc, #332]	@ (80028a0 <HAL_RCC_OscConfig+0x780>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002758:	2b00      	cmp	r3, #0
 800275a:	d105      	bne.n	8002768 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800275c:	4b50      	ldr	r3, [pc, #320]	@ (80028a0 <HAL_RCC_OscConfig+0x780>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002764:	2b00      	cmp	r3, #0
 8002766:	d001      	beq.n	800276c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002768:	2301      	movs	r3, #1
 800276a:	e0ad      	b.n	80028c8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800276c:	4b4c      	ldr	r3, [pc, #304]	@ (80028a0 <HAL_RCC_OscConfig+0x780>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a4b      	ldr	r2, [pc, #300]	@ (80028a0 <HAL_RCC_OscConfig+0x780>)
 8002772:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002776:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002778:	f7fe faac 	bl	8000cd4 <HAL_GetTick>
 800277c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800277e:	e008      	b.n	8002792 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002780:	f7fe faa8 	bl	8000cd4 <HAL_GetTick>
 8002784:	4602      	mov	r2, r0
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	1ad3      	subs	r3, r2, r3
 800278a:	2b02      	cmp	r3, #2
 800278c:	d901      	bls.n	8002792 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800278e:	2303      	movs	r3, #3
 8002790:	e09a      	b.n	80028c8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002792:	4b43      	ldr	r3, [pc, #268]	@ (80028a0 <HAL_RCC_OscConfig+0x780>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800279a:	2b00      	cmp	r3, #0
 800279c:	d1f0      	bne.n	8002780 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800279e:	4b40      	ldr	r3, [pc, #256]	@ (80028a0 <HAL_RCC_OscConfig+0x780>)
 80027a0:	68da      	ldr	r2, [r3, #12]
 80027a2:	4b40      	ldr	r3, [pc, #256]	@ (80028a4 <HAL_RCC_OscConfig+0x784>)
 80027a4:	4013      	ands	r3, r2
 80027a6:	687a      	ldr	r2, [r7, #4]
 80027a8:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80027aa:	687a      	ldr	r2, [r7, #4]
 80027ac:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80027ae:	3a01      	subs	r2, #1
 80027b0:	0112      	lsls	r2, r2, #4
 80027b2:	4311      	orrs	r1, r2
 80027b4:	687a      	ldr	r2, [r7, #4]
 80027b6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80027b8:	0212      	lsls	r2, r2, #8
 80027ba:	4311      	orrs	r1, r2
 80027bc:	687a      	ldr	r2, [r7, #4]
 80027be:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80027c0:	0852      	lsrs	r2, r2, #1
 80027c2:	3a01      	subs	r2, #1
 80027c4:	0552      	lsls	r2, r2, #21
 80027c6:	4311      	orrs	r1, r2
 80027c8:	687a      	ldr	r2, [r7, #4]
 80027ca:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80027cc:	0852      	lsrs	r2, r2, #1
 80027ce:	3a01      	subs	r2, #1
 80027d0:	0652      	lsls	r2, r2, #25
 80027d2:	4311      	orrs	r1, r2
 80027d4:	687a      	ldr	r2, [r7, #4]
 80027d6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80027d8:	0912      	lsrs	r2, r2, #4
 80027da:	0452      	lsls	r2, r2, #17
 80027dc:	430a      	orrs	r2, r1
 80027de:	4930      	ldr	r1, [pc, #192]	@ (80028a0 <HAL_RCC_OscConfig+0x780>)
 80027e0:	4313      	orrs	r3, r2
 80027e2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80027e4:	4b2e      	ldr	r3, [pc, #184]	@ (80028a0 <HAL_RCC_OscConfig+0x780>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a2d      	ldr	r2, [pc, #180]	@ (80028a0 <HAL_RCC_OscConfig+0x780>)
 80027ea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80027ee:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80027f0:	4b2b      	ldr	r3, [pc, #172]	@ (80028a0 <HAL_RCC_OscConfig+0x780>)
 80027f2:	68db      	ldr	r3, [r3, #12]
 80027f4:	4a2a      	ldr	r2, [pc, #168]	@ (80028a0 <HAL_RCC_OscConfig+0x780>)
 80027f6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80027fa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80027fc:	f7fe fa6a 	bl	8000cd4 <HAL_GetTick>
 8002800:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002802:	e008      	b.n	8002816 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002804:	f7fe fa66 	bl	8000cd4 <HAL_GetTick>
 8002808:	4602      	mov	r2, r0
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	1ad3      	subs	r3, r2, r3
 800280e:	2b02      	cmp	r3, #2
 8002810:	d901      	bls.n	8002816 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002812:	2303      	movs	r3, #3
 8002814:	e058      	b.n	80028c8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002816:	4b22      	ldr	r3, [pc, #136]	@ (80028a0 <HAL_RCC_OscConfig+0x780>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800281e:	2b00      	cmp	r3, #0
 8002820:	d0f0      	beq.n	8002804 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002822:	e050      	b.n	80028c6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	e04f      	b.n	80028c8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002828:	4b1d      	ldr	r3, [pc, #116]	@ (80028a0 <HAL_RCC_OscConfig+0x780>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002830:	2b00      	cmp	r3, #0
 8002832:	d148      	bne.n	80028c6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002834:	4b1a      	ldr	r3, [pc, #104]	@ (80028a0 <HAL_RCC_OscConfig+0x780>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a19      	ldr	r2, [pc, #100]	@ (80028a0 <HAL_RCC_OscConfig+0x780>)
 800283a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800283e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002840:	4b17      	ldr	r3, [pc, #92]	@ (80028a0 <HAL_RCC_OscConfig+0x780>)
 8002842:	68db      	ldr	r3, [r3, #12]
 8002844:	4a16      	ldr	r2, [pc, #88]	@ (80028a0 <HAL_RCC_OscConfig+0x780>)
 8002846:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800284a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800284c:	f7fe fa42 	bl	8000cd4 <HAL_GetTick>
 8002850:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002852:	e008      	b.n	8002866 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002854:	f7fe fa3e 	bl	8000cd4 <HAL_GetTick>
 8002858:	4602      	mov	r2, r0
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	2b02      	cmp	r3, #2
 8002860:	d901      	bls.n	8002866 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002862:	2303      	movs	r3, #3
 8002864:	e030      	b.n	80028c8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002866:	4b0e      	ldr	r3, [pc, #56]	@ (80028a0 <HAL_RCC_OscConfig+0x780>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800286e:	2b00      	cmp	r3, #0
 8002870:	d0f0      	beq.n	8002854 <HAL_RCC_OscConfig+0x734>
 8002872:	e028      	b.n	80028c6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002874:	69bb      	ldr	r3, [r7, #24]
 8002876:	2b0c      	cmp	r3, #12
 8002878:	d023      	beq.n	80028c2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800287a:	4b09      	ldr	r3, [pc, #36]	@ (80028a0 <HAL_RCC_OscConfig+0x780>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a08      	ldr	r2, [pc, #32]	@ (80028a0 <HAL_RCC_OscConfig+0x780>)
 8002880:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002884:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002886:	f7fe fa25 	bl	8000cd4 <HAL_GetTick>
 800288a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800288c:	e00c      	b.n	80028a8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800288e:	f7fe fa21 	bl	8000cd4 <HAL_GetTick>
 8002892:	4602      	mov	r2, r0
 8002894:	693b      	ldr	r3, [r7, #16]
 8002896:	1ad3      	subs	r3, r2, r3
 8002898:	2b02      	cmp	r3, #2
 800289a:	d905      	bls.n	80028a8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800289c:	2303      	movs	r3, #3
 800289e:	e013      	b.n	80028c8 <HAL_RCC_OscConfig+0x7a8>
 80028a0:	40021000 	.word	0x40021000
 80028a4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028a8:	4b09      	ldr	r3, [pc, #36]	@ (80028d0 <HAL_RCC_OscConfig+0x7b0>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d1ec      	bne.n	800288e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80028b4:	4b06      	ldr	r3, [pc, #24]	@ (80028d0 <HAL_RCC_OscConfig+0x7b0>)
 80028b6:	68da      	ldr	r2, [r3, #12]
 80028b8:	4905      	ldr	r1, [pc, #20]	@ (80028d0 <HAL_RCC_OscConfig+0x7b0>)
 80028ba:	4b06      	ldr	r3, [pc, #24]	@ (80028d4 <HAL_RCC_OscConfig+0x7b4>)
 80028bc:	4013      	ands	r3, r2
 80028be:	60cb      	str	r3, [r1, #12]
 80028c0:	e001      	b.n	80028c6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e000      	b.n	80028c8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80028c6:	2300      	movs	r3, #0
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	3720      	adds	r7, #32
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}
 80028d0:	40021000 	.word	0x40021000
 80028d4:	feeefffc 	.word	0xfeeefffc

080028d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b084      	sub	sp, #16
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
 80028e0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d101      	bne.n	80028ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028e8:	2301      	movs	r3, #1
 80028ea:	e0e7      	b.n	8002abc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80028ec:	4b75      	ldr	r3, [pc, #468]	@ (8002ac4 <HAL_RCC_ClockConfig+0x1ec>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 0307 	and.w	r3, r3, #7
 80028f4:	683a      	ldr	r2, [r7, #0]
 80028f6:	429a      	cmp	r2, r3
 80028f8:	d910      	bls.n	800291c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028fa:	4b72      	ldr	r3, [pc, #456]	@ (8002ac4 <HAL_RCC_ClockConfig+0x1ec>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f023 0207 	bic.w	r2, r3, #7
 8002902:	4970      	ldr	r1, [pc, #448]	@ (8002ac4 <HAL_RCC_ClockConfig+0x1ec>)
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	4313      	orrs	r3, r2
 8002908:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800290a:	4b6e      	ldr	r3, [pc, #440]	@ (8002ac4 <HAL_RCC_ClockConfig+0x1ec>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 0307 	and.w	r3, r3, #7
 8002912:	683a      	ldr	r2, [r7, #0]
 8002914:	429a      	cmp	r2, r3
 8002916:	d001      	beq.n	800291c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002918:	2301      	movs	r3, #1
 800291a:	e0cf      	b.n	8002abc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f003 0302 	and.w	r3, r3, #2
 8002924:	2b00      	cmp	r3, #0
 8002926:	d010      	beq.n	800294a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	689a      	ldr	r2, [r3, #8]
 800292c:	4b66      	ldr	r3, [pc, #408]	@ (8002ac8 <HAL_RCC_ClockConfig+0x1f0>)
 800292e:	689b      	ldr	r3, [r3, #8]
 8002930:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002934:	429a      	cmp	r2, r3
 8002936:	d908      	bls.n	800294a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002938:	4b63      	ldr	r3, [pc, #396]	@ (8002ac8 <HAL_RCC_ClockConfig+0x1f0>)
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	4960      	ldr	r1, [pc, #384]	@ (8002ac8 <HAL_RCC_ClockConfig+0x1f0>)
 8002946:	4313      	orrs	r3, r2
 8002948:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 0301 	and.w	r3, r3, #1
 8002952:	2b00      	cmp	r3, #0
 8002954:	d04c      	beq.n	80029f0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	2b03      	cmp	r3, #3
 800295c:	d107      	bne.n	800296e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800295e:	4b5a      	ldr	r3, [pc, #360]	@ (8002ac8 <HAL_RCC_ClockConfig+0x1f0>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002966:	2b00      	cmp	r3, #0
 8002968:	d121      	bne.n	80029ae <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	e0a6      	b.n	8002abc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	2b02      	cmp	r3, #2
 8002974:	d107      	bne.n	8002986 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002976:	4b54      	ldr	r3, [pc, #336]	@ (8002ac8 <HAL_RCC_ClockConfig+0x1f0>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800297e:	2b00      	cmp	r3, #0
 8002980:	d115      	bne.n	80029ae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	e09a      	b.n	8002abc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d107      	bne.n	800299e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800298e:	4b4e      	ldr	r3, [pc, #312]	@ (8002ac8 <HAL_RCC_ClockConfig+0x1f0>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 0302 	and.w	r3, r3, #2
 8002996:	2b00      	cmp	r3, #0
 8002998:	d109      	bne.n	80029ae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	e08e      	b.n	8002abc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800299e:	4b4a      	ldr	r3, [pc, #296]	@ (8002ac8 <HAL_RCC_ClockConfig+0x1f0>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d101      	bne.n	80029ae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e086      	b.n	8002abc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80029ae:	4b46      	ldr	r3, [pc, #280]	@ (8002ac8 <HAL_RCC_ClockConfig+0x1f0>)
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	f023 0203 	bic.w	r2, r3, #3
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	4943      	ldr	r1, [pc, #268]	@ (8002ac8 <HAL_RCC_ClockConfig+0x1f0>)
 80029bc:	4313      	orrs	r3, r2
 80029be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029c0:	f7fe f988 	bl	8000cd4 <HAL_GetTick>
 80029c4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029c6:	e00a      	b.n	80029de <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029c8:	f7fe f984 	bl	8000cd4 <HAL_GetTick>
 80029cc:	4602      	mov	r2, r0
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	1ad3      	subs	r3, r2, r3
 80029d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d901      	bls.n	80029de <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80029da:	2303      	movs	r3, #3
 80029dc:	e06e      	b.n	8002abc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029de:	4b3a      	ldr	r3, [pc, #232]	@ (8002ac8 <HAL_RCC_ClockConfig+0x1f0>)
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	f003 020c 	and.w	r2, r3, #12
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	009b      	lsls	r3, r3, #2
 80029ec:	429a      	cmp	r2, r3
 80029ee:	d1eb      	bne.n	80029c8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f003 0302 	and.w	r3, r3, #2
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d010      	beq.n	8002a1e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	689a      	ldr	r2, [r3, #8]
 8002a00:	4b31      	ldr	r3, [pc, #196]	@ (8002ac8 <HAL_RCC_ClockConfig+0x1f0>)
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002a08:	429a      	cmp	r2, r3
 8002a0a:	d208      	bcs.n	8002a1e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a0c:	4b2e      	ldr	r3, [pc, #184]	@ (8002ac8 <HAL_RCC_ClockConfig+0x1f0>)
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	492b      	ldr	r1, [pc, #172]	@ (8002ac8 <HAL_RCC_ClockConfig+0x1f0>)
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a1e:	4b29      	ldr	r3, [pc, #164]	@ (8002ac4 <HAL_RCC_ClockConfig+0x1ec>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f003 0307 	and.w	r3, r3, #7
 8002a26:	683a      	ldr	r2, [r7, #0]
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d210      	bcs.n	8002a4e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a2c:	4b25      	ldr	r3, [pc, #148]	@ (8002ac4 <HAL_RCC_ClockConfig+0x1ec>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f023 0207 	bic.w	r2, r3, #7
 8002a34:	4923      	ldr	r1, [pc, #140]	@ (8002ac4 <HAL_RCC_ClockConfig+0x1ec>)
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a3c:	4b21      	ldr	r3, [pc, #132]	@ (8002ac4 <HAL_RCC_ClockConfig+0x1ec>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f003 0307 	and.w	r3, r3, #7
 8002a44:	683a      	ldr	r2, [r7, #0]
 8002a46:	429a      	cmp	r2, r3
 8002a48:	d001      	beq.n	8002a4e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e036      	b.n	8002abc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 0304 	and.w	r3, r3, #4
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d008      	beq.n	8002a6c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a5a:	4b1b      	ldr	r3, [pc, #108]	@ (8002ac8 <HAL_RCC_ClockConfig+0x1f0>)
 8002a5c:	689b      	ldr	r3, [r3, #8]
 8002a5e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	68db      	ldr	r3, [r3, #12]
 8002a66:	4918      	ldr	r1, [pc, #96]	@ (8002ac8 <HAL_RCC_ClockConfig+0x1f0>)
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f003 0308 	and.w	r3, r3, #8
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d009      	beq.n	8002a8c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a78:	4b13      	ldr	r3, [pc, #76]	@ (8002ac8 <HAL_RCC_ClockConfig+0x1f0>)
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	691b      	ldr	r3, [r3, #16]
 8002a84:	00db      	lsls	r3, r3, #3
 8002a86:	4910      	ldr	r1, [pc, #64]	@ (8002ac8 <HAL_RCC_ClockConfig+0x1f0>)
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002a8c:	f000 f824 	bl	8002ad8 <HAL_RCC_GetSysClockFreq>
 8002a90:	4602      	mov	r2, r0
 8002a92:	4b0d      	ldr	r3, [pc, #52]	@ (8002ac8 <HAL_RCC_ClockConfig+0x1f0>)
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	091b      	lsrs	r3, r3, #4
 8002a98:	f003 030f 	and.w	r3, r3, #15
 8002a9c:	490b      	ldr	r1, [pc, #44]	@ (8002acc <HAL_RCC_ClockConfig+0x1f4>)
 8002a9e:	5ccb      	ldrb	r3, [r1, r3]
 8002aa0:	f003 031f 	and.w	r3, r3, #31
 8002aa4:	fa22 f303 	lsr.w	r3, r2, r3
 8002aa8:	4a09      	ldr	r2, [pc, #36]	@ (8002ad0 <HAL_RCC_ClockConfig+0x1f8>)
 8002aaa:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002aac:	4b09      	ldr	r3, [pc, #36]	@ (8002ad4 <HAL_RCC_ClockConfig+0x1fc>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f7fe f8bf 	bl	8000c34 <HAL_InitTick>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	72fb      	strb	r3, [r7, #11]

  return status;
 8002aba:	7afb      	ldrb	r3, [r7, #11]
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	3710      	adds	r7, #16
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}
 8002ac4:	40022000 	.word	0x40022000
 8002ac8:	40021000 	.word	0x40021000
 8002acc:	080043b8 	.word	0x080043b8
 8002ad0:	20000000 	.word	0x20000000
 8002ad4:	20000004 	.word	0x20000004

08002ad8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b089      	sub	sp, #36	@ 0x24
 8002adc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	61fb      	str	r3, [r7, #28]
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ae6:	4b3e      	ldr	r3, [pc, #248]	@ (8002be0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ae8:	689b      	ldr	r3, [r3, #8]
 8002aea:	f003 030c 	and.w	r3, r3, #12
 8002aee:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002af0:	4b3b      	ldr	r3, [pc, #236]	@ (8002be0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002af2:	68db      	ldr	r3, [r3, #12]
 8002af4:	f003 0303 	and.w	r3, r3, #3
 8002af8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d005      	beq.n	8002b0c <HAL_RCC_GetSysClockFreq+0x34>
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	2b0c      	cmp	r3, #12
 8002b04:	d121      	bne.n	8002b4a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	2b01      	cmp	r3, #1
 8002b0a:	d11e      	bne.n	8002b4a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002b0c:	4b34      	ldr	r3, [pc, #208]	@ (8002be0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f003 0308 	and.w	r3, r3, #8
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d107      	bne.n	8002b28 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002b18:	4b31      	ldr	r3, [pc, #196]	@ (8002be0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b1e:	0a1b      	lsrs	r3, r3, #8
 8002b20:	f003 030f 	and.w	r3, r3, #15
 8002b24:	61fb      	str	r3, [r7, #28]
 8002b26:	e005      	b.n	8002b34 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002b28:	4b2d      	ldr	r3, [pc, #180]	@ (8002be0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	091b      	lsrs	r3, r3, #4
 8002b2e:	f003 030f 	and.w	r3, r3, #15
 8002b32:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002b34:	4a2b      	ldr	r2, [pc, #172]	@ (8002be4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002b36:	69fb      	ldr	r3, [r7, #28]
 8002b38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b3c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d10d      	bne.n	8002b60 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002b44:	69fb      	ldr	r3, [r7, #28]
 8002b46:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b48:	e00a      	b.n	8002b60 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002b4a:	693b      	ldr	r3, [r7, #16]
 8002b4c:	2b04      	cmp	r3, #4
 8002b4e:	d102      	bne.n	8002b56 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002b50:	4b25      	ldr	r3, [pc, #148]	@ (8002be8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002b52:	61bb      	str	r3, [r7, #24]
 8002b54:	e004      	b.n	8002b60 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	2b08      	cmp	r3, #8
 8002b5a:	d101      	bne.n	8002b60 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002b5c:	4b23      	ldr	r3, [pc, #140]	@ (8002bec <HAL_RCC_GetSysClockFreq+0x114>)
 8002b5e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	2b0c      	cmp	r3, #12
 8002b64:	d134      	bne.n	8002bd0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002b66:	4b1e      	ldr	r3, [pc, #120]	@ (8002be0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b68:	68db      	ldr	r3, [r3, #12]
 8002b6a:	f003 0303 	and.w	r3, r3, #3
 8002b6e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	2b02      	cmp	r3, #2
 8002b74:	d003      	beq.n	8002b7e <HAL_RCC_GetSysClockFreq+0xa6>
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	2b03      	cmp	r3, #3
 8002b7a:	d003      	beq.n	8002b84 <HAL_RCC_GetSysClockFreq+0xac>
 8002b7c:	e005      	b.n	8002b8a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002b7e:	4b1a      	ldr	r3, [pc, #104]	@ (8002be8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002b80:	617b      	str	r3, [r7, #20]
      break;
 8002b82:	e005      	b.n	8002b90 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002b84:	4b19      	ldr	r3, [pc, #100]	@ (8002bec <HAL_RCC_GetSysClockFreq+0x114>)
 8002b86:	617b      	str	r3, [r7, #20]
      break;
 8002b88:	e002      	b.n	8002b90 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002b8a:	69fb      	ldr	r3, [r7, #28]
 8002b8c:	617b      	str	r3, [r7, #20]
      break;
 8002b8e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002b90:	4b13      	ldr	r3, [pc, #76]	@ (8002be0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b92:	68db      	ldr	r3, [r3, #12]
 8002b94:	091b      	lsrs	r3, r3, #4
 8002b96:	f003 0307 	and.w	r3, r3, #7
 8002b9a:	3301      	adds	r3, #1
 8002b9c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002b9e:	4b10      	ldr	r3, [pc, #64]	@ (8002be0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ba0:	68db      	ldr	r3, [r3, #12]
 8002ba2:	0a1b      	lsrs	r3, r3, #8
 8002ba4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002ba8:	697a      	ldr	r2, [r7, #20]
 8002baa:	fb03 f202 	mul.w	r2, r3, r2
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bb4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002bb6:	4b0a      	ldr	r3, [pc, #40]	@ (8002be0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bb8:	68db      	ldr	r3, [r3, #12]
 8002bba:	0e5b      	lsrs	r3, r3, #25
 8002bbc:	f003 0303 	and.w	r3, r3, #3
 8002bc0:	3301      	adds	r3, #1
 8002bc2:	005b      	lsls	r3, r3, #1
 8002bc4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002bc6:	697a      	ldr	r2, [r7, #20]
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bce:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002bd0:	69bb      	ldr	r3, [r7, #24]
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	3724      	adds	r7, #36	@ 0x24
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr
 8002bde:	bf00      	nop
 8002be0:	40021000 	.word	0x40021000
 8002be4:	080043d0 	.word	0x080043d0
 8002be8:	00f42400 	.word	0x00f42400
 8002bec:	007a1200 	.word	0x007a1200

08002bf0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002bf4:	4b03      	ldr	r3, [pc, #12]	@ (8002c04 <HAL_RCC_GetHCLKFreq+0x14>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c00:	4770      	bx	lr
 8002c02:	bf00      	nop
 8002c04:	20000000 	.word	0x20000000

08002c08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002c0c:	f7ff fff0 	bl	8002bf0 <HAL_RCC_GetHCLKFreq>
 8002c10:	4602      	mov	r2, r0
 8002c12:	4b06      	ldr	r3, [pc, #24]	@ (8002c2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	0a1b      	lsrs	r3, r3, #8
 8002c18:	f003 0307 	and.w	r3, r3, #7
 8002c1c:	4904      	ldr	r1, [pc, #16]	@ (8002c30 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002c1e:	5ccb      	ldrb	r3, [r1, r3]
 8002c20:	f003 031f 	and.w	r3, r3, #31
 8002c24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	bd80      	pop	{r7, pc}
 8002c2c:	40021000 	.word	0x40021000
 8002c30:	080043c8 	.word	0x080043c8

08002c34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002c38:	f7ff ffda 	bl	8002bf0 <HAL_RCC_GetHCLKFreq>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	4b06      	ldr	r3, [pc, #24]	@ (8002c58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	0adb      	lsrs	r3, r3, #11
 8002c44:	f003 0307 	and.w	r3, r3, #7
 8002c48:	4904      	ldr	r1, [pc, #16]	@ (8002c5c <HAL_RCC_GetPCLK2Freq+0x28>)
 8002c4a:	5ccb      	ldrb	r3, [r1, r3]
 8002c4c:	f003 031f 	and.w	r3, r3, #31
 8002c50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	bd80      	pop	{r7, pc}
 8002c58:	40021000 	.word	0x40021000
 8002c5c:	080043c8 	.word	0x080043c8

08002c60 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b086      	sub	sp, #24
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002c68:	2300      	movs	r3, #0
 8002c6a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002c6c:	4b2a      	ldr	r3, [pc, #168]	@ (8002d18 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c70:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d003      	beq.n	8002c80 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002c78:	f7ff f9ee 	bl	8002058 <HAL_PWREx_GetVoltageRange>
 8002c7c:	6178      	str	r0, [r7, #20]
 8002c7e:	e014      	b.n	8002caa <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002c80:	4b25      	ldr	r3, [pc, #148]	@ (8002d18 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c84:	4a24      	ldr	r2, [pc, #144]	@ (8002d18 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c86:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c8a:	6593      	str	r3, [r2, #88]	@ 0x58
 8002c8c:	4b22      	ldr	r3, [pc, #136]	@ (8002d18 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c90:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c94:	60fb      	str	r3, [r7, #12]
 8002c96:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002c98:	f7ff f9de 	bl	8002058 <HAL_PWREx_GetVoltageRange>
 8002c9c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002c9e:	4b1e      	ldr	r3, [pc, #120]	@ (8002d18 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ca0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ca2:	4a1d      	ldr	r2, [pc, #116]	@ (8002d18 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ca4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ca8:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002cb0:	d10b      	bne.n	8002cca <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2b80      	cmp	r3, #128	@ 0x80
 8002cb6:	d919      	bls.n	8002cec <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2ba0      	cmp	r3, #160	@ 0xa0
 8002cbc:	d902      	bls.n	8002cc4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002cbe:	2302      	movs	r3, #2
 8002cc0:	613b      	str	r3, [r7, #16]
 8002cc2:	e013      	b.n	8002cec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	613b      	str	r3, [r7, #16]
 8002cc8:	e010      	b.n	8002cec <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2b80      	cmp	r3, #128	@ 0x80
 8002cce:	d902      	bls.n	8002cd6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002cd0:	2303      	movs	r3, #3
 8002cd2:	613b      	str	r3, [r7, #16]
 8002cd4:	e00a      	b.n	8002cec <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2b80      	cmp	r3, #128	@ 0x80
 8002cda:	d102      	bne.n	8002ce2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002cdc:	2302      	movs	r3, #2
 8002cde:	613b      	str	r3, [r7, #16]
 8002ce0:	e004      	b.n	8002cec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2b70      	cmp	r3, #112	@ 0x70
 8002ce6:	d101      	bne.n	8002cec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002ce8:	2301      	movs	r3, #1
 8002cea:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002cec:	4b0b      	ldr	r3, [pc, #44]	@ (8002d1c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f023 0207 	bic.w	r2, r3, #7
 8002cf4:	4909      	ldr	r1, [pc, #36]	@ (8002d1c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002cfc:	4b07      	ldr	r3, [pc, #28]	@ (8002d1c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f003 0307 	and.w	r3, r3, #7
 8002d04:	693a      	ldr	r2, [r7, #16]
 8002d06:	429a      	cmp	r2, r3
 8002d08:	d001      	beq.n	8002d0e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e000      	b.n	8002d10 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002d0e:	2300      	movs	r3, #0
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	3718      	adds	r7, #24
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}
 8002d18:	40021000 	.word	0x40021000
 8002d1c:	40022000 	.word	0x40022000

08002d20 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b086      	sub	sp, #24
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002d28:	2300      	movs	r3, #0
 8002d2a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d041      	beq.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002d40:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002d44:	d02a      	beq.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002d46:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002d4a:	d824      	bhi.n	8002d96 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002d4c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002d50:	d008      	beq.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002d52:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002d56:	d81e      	bhi.n	8002d96 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d00a      	beq.n	8002d72 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002d5c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002d60:	d010      	beq.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002d62:	e018      	b.n	8002d96 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002d64:	4b86      	ldr	r3, [pc, #536]	@ (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d66:	68db      	ldr	r3, [r3, #12]
 8002d68:	4a85      	ldr	r2, [pc, #532]	@ (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d6a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d6e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002d70:	e015      	b.n	8002d9e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	3304      	adds	r3, #4
 8002d76:	2100      	movs	r1, #0
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f000 fabb 	bl	80032f4 <RCCEx_PLLSAI1_Config>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002d82:	e00c      	b.n	8002d9e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	3320      	adds	r3, #32
 8002d88:	2100      	movs	r1, #0
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f000 fba6 	bl	80034dc <RCCEx_PLLSAI2_Config>
 8002d90:	4603      	mov	r3, r0
 8002d92:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002d94:	e003      	b.n	8002d9e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
 8002d98:	74fb      	strb	r3, [r7, #19]
      break;
 8002d9a:	e000      	b.n	8002d9e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002d9c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d9e:	7cfb      	ldrb	r3, [r7, #19]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d10b      	bne.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002da4:	4b76      	ldr	r3, [pc, #472]	@ (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002da6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002daa:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002db2:	4973      	ldr	r1, [pc, #460]	@ (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002db4:	4313      	orrs	r3, r2
 8002db6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002dba:	e001      	b.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002dbc:	7cfb      	ldrb	r3, [r7, #19]
 8002dbe:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d041      	beq.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002dd0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002dd4:	d02a      	beq.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002dd6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002dda:	d824      	bhi.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002ddc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002de0:	d008      	beq.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002de2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002de6:	d81e      	bhi.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d00a      	beq.n	8002e02 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002dec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002df0:	d010      	beq.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002df2:	e018      	b.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002df4:	4b62      	ldr	r3, [pc, #392]	@ (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002df6:	68db      	ldr	r3, [r3, #12]
 8002df8:	4a61      	ldr	r2, [pc, #388]	@ (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002dfa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002dfe:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002e00:	e015      	b.n	8002e2e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	3304      	adds	r3, #4
 8002e06:	2100      	movs	r1, #0
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f000 fa73 	bl	80032f4 <RCCEx_PLLSAI1_Config>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002e12:	e00c      	b.n	8002e2e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	3320      	adds	r3, #32
 8002e18:	2100      	movs	r1, #0
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f000 fb5e 	bl	80034dc <RCCEx_PLLSAI2_Config>
 8002e20:	4603      	mov	r3, r0
 8002e22:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002e24:	e003      	b.n	8002e2e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	74fb      	strb	r3, [r7, #19]
      break;
 8002e2a:	e000      	b.n	8002e2e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002e2c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e2e:	7cfb      	ldrb	r3, [r7, #19]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d10b      	bne.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002e34:	4b52      	ldr	r3, [pc, #328]	@ (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e3a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002e42:	494f      	ldr	r1, [pc, #316]	@ (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e44:	4313      	orrs	r3, r2
 8002e46:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002e4a:	e001      	b.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e4c:	7cfb      	ldrb	r3, [r7, #19]
 8002e4e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	f000 80a0 	beq.w	8002f9e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002e62:	4b47      	ldr	r3, [pc, #284]	@ (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d101      	bne.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e000      	b.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002e72:	2300      	movs	r3, #0
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d00d      	beq.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e78:	4b41      	ldr	r3, [pc, #260]	@ (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e7c:	4a40      	ldr	r2, [pc, #256]	@ (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e7e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e82:	6593      	str	r3, [r2, #88]	@ 0x58
 8002e84:	4b3e      	ldr	r3, [pc, #248]	@ (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e88:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e8c:	60bb      	str	r3, [r7, #8]
 8002e8e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e90:	2301      	movs	r3, #1
 8002e92:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e94:	4b3b      	ldr	r3, [pc, #236]	@ (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a3a      	ldr	r2, [pc, #232]	@ (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002e9a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e9e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002ea0:	f7fd ff18 	bl	8000cd4 <HAL_GetTick>
 8002ea4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002ea6:	e009      	b.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ea8:	f7fd ff14 	bl	8000cd4 <HAL_GetTick>
 8002eac:	4602      	mov	r2, r0
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	1ad3      	subs	r3, r2, r3
 8002eb2:	2b02      	cmp	r3, #2
 8002eb4:	d902      	bls.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002eb6:	2303      	movs	r3, #3
 8002eb8:	74fb      	strb	r3, [r7, #19]
        break;
 8002eba:	e005      	b.n	8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002ebc:	4b31      	ldr	r3, [pc, #196]	@ (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d0ef      	beq.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002ec8:	7cfb      	ldrb	r3, [r7, #19]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d15c      	bne.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002ece:	4b2c      	ldr	r3, [pc, #176]	@ (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ed0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ed4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002ed8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d01f      	beq.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002ee6:	697a      	ldr	r2, [r7, #20]
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	d019      	beq.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002eec:	4b24      	ldr	r3, [pc, #144]	@ (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002eee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ef2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002ef6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002ef8:	4b21      	ldr	r3, [pc, #132]	@ (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002efa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002efe:	4a20      	ldr	r2, [pc, #128]	@ (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f04:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002f08:	4b1d      	ldr	r3, [pc, #116]	@ (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f0e:	4a1c      	ldr	r2, [pc, #112]	@ (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f10:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f14:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002f18:	4a19      	ldr	r2, [pc, #100]	@ (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	f003 0301 	and.w	r3, r3, #1
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d016      	beq.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f2a:	f7fd fed3 	bl	8000cd4 <HAL_GetTick>
 8002f2e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f30:	e00b      	b.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f32:	f7fd fecf 	bl	8000cd4 <HAL_GetTick>
 8002f36:	4602      	mov	r2, r0
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	1ad3      	subs	r3, r2, r3
 8002f3c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d902      	bls.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002f44:	2303      	movs	r3, #3
 8002f46:	74fb      	strb	r3, [r7, #19]
            break;
 8002f48:	e006      	b.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f4a:	4b0d      	ldr	r3, [pc, #52]	@ (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f50:	f003 0302 	and.w	r3, r3, #2
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d0ec      	beq.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002f58:	7cfb      	ldrb	r3, [r7, #19]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d10c      	bne.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f5e:	4b08      	ldr	r3, [pc, #32]	@ (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f64:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002f6e:	4904      	ldr	r1, [pc, #16]	@ (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f70:	4313      	orrs	r3, r2
 8002f72:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002f76:	e009      	b.n	8002f8c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002f78:	7cfb      	ldrb	r3, [r7, #19]
 8002f7a:	74bb      	strb	r3, [r7, #18]
 8002f7c:	e006      	b.n	8002f8c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002f7e:	bf00      	nop
 8002f80:	40021000 	.word	0x40021000
 8002f84:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f88:	7cfb      	ldrb	r3, [r7, #19]
 8002f8a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f8c:	7c7b      	ldrb	r3, [r7, #17]
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	d105      	bne.n	8002f9e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f92:	4b9e      	ldr	r3, [pc, #632]	@ (800320c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f96:	4a9d      	ldr	r2, [pc, #628]	@ (800320c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f98:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f9c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 0301 	and.w	r3, r3, #1
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d00a      	beq.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002faa:	4b98      	ldr	r3, [pc, #608]	@ (800320c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fb0:	f023 0203 	bic.w	r2, r3, #3
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fb8:	4994      	ldr	r1, [pc, #592]	@ (800320c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f003 0302 	and.w	r3, r3, #2
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d00a      	beq.n	8002fe2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002fcc:	4b8f      	ldr	r3, [pc, #572]	@ (800320c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fd2:	f023 020c 	bic.w	r2, r3, #12
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fda:	498c      	ldr	r1, [pc, #560]	@ (800320c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 0304 	and.w	r3, r3, #4
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d00a      	beq.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002fee:	4b87      	ldr	r3, [pc, #540]	@ (800320c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ff0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ff4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ffc:	4983      	ldr	r1, [pc, #524]	@ (800320c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ffe:	4313      	orrs	r3, r2
 8003000:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f003 0308 	and.w	r3, r3, #8
 800300c:	2b00      	cmp	r3, #0
 800300e:	d00a      	beq.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003010:	4b7e      	ldr	r3, [pc, #504]	@ (800320c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003012:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003016:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800301e:	497b      	ldr	r1, [pc, #492]	@ (800320c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003020:	4313      	orrs	r3, r2
 8003022:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f003 0310 	and.w	r3, r3, #16
 800302e:	2b00      	cmp	r3, #0
 8003030:	d00a      	beq.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003032:	4b76      	ldr	r3, [pc, #472]	@ (800320c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003034:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003038:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003040:	4972      	ldr	r1, [pc, #456]	@ (800320c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003042:	4313      	orrs	r3, r2
 8003044:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f003 0320 	and.w	r3, r3, #32
 8003050:	2b00      	cmp	r3, #0
 8003052:	d00a      	beq.n	800306a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003054:	4b6d      	ldr	r3, [pc, #436]	@ (800320c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003056:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800305a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003062:	496a      	ldr	r1, [pc, #424]	@ (800320c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003064:	4313      	orrs	r3, r2
 8003066:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003072:	2b00      	cmp	r3, #0
 8003074:	d00a      	beq.n	800308c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003076:	4b65      	ldr	r3, [pc, #404]	@ (800320c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003078:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800307c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003084:	4961      	ldr	r1, [pc, #388]	@ (800320c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003086:	4313      	orrs	r3, r2
 8003088:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003094:	2b00      	cmp	r3, #0
 8003096:	d00a      	beq.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003098:	4b5c      	ldr	r3, [pc, #368]	@ (800320c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800309a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800309e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030a6:	4959      	ldr	r1, [pc, #356]	@ (800320c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030a8:	4313      	orrs	r3, r2
 80030aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d00a      	beq.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80030ba:	4b54      	ldr	r3, [pc, #336]	@ (800320c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030c0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030c8:	4950      	ldr	r1, [pc, #320]	@ (800320c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030ca:	4313      	orrs	r3, r2
 80030cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d00a      	beq.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80030dc:	4b4b      	ldr	r3, [pc, #300]	@ (800320c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030e2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030ea:	4948      	ldr	r1, [pc, #288]	@ (800320c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030ec:	4313      	orrs	r3, r2
 80030ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d00a      	beq.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80030fe:	4b43      	ldr	r3, [pc, #268]	@ (800320c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003100:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003104:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800310c:	493f      	ldr	r1, [pc, #252]	@ (800320c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800310e:	4313      	orrs	r3, r2
 8003110:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800311c:	2b00      	cmp	r3, #0
 800311e:	d028      	beq.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003120:	4b3a      	ldr	r3, [pc, #232]	@ (800320c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003122:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003126:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800312e:	4937      	ldr	r1, [pc, #220]	@ (800320c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003130:	4313      	orrs	r3, r2
 8003132:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800313a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800313e:	d106      	bne.n	800314e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003140:	4b32      	ldr	r3, [pc, #200]	@ (800320c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003142:	68db      	ldr	r3, [r3, #12]
 8003144:	4a31      	ldr	r2, [pc, #196]	@ (800320c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003146:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800314a:	60d3      	str	r3, [r2, #12]
 800314c:	e011      	b.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003152:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003156:	d10c      	bne.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	3304      	adds	r3, #4
 800315c:	2101      	movs	r1, #1
 800315e:	4618      	mov	r0, r3
 8003160:	f000 f8c8 	bl	80032f4 <RCCEx_PLLSAI1_Config>
 8003164:	4603      	mov	r3, r0
 8003166:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003168:	7cfb      	ldrb	r3, [r7, #19]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d001      	beq.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800316e:	7cfb      	ldrb	r3, [r7, #19]
 8003170:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800317a:	2b00      	cmp	r3, #0
 800317c:	d028      	beq.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800317e:	4b23      	ldr	r3, [pc, #140]	@ (800320c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003180:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003184:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800318c:	491f      	ldr	r1, [pc, #124]	@ (800320c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800318e:	4313      	orrs	r3, r2
 8003190:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003198:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800319c:	d106      	bne.n	80031ac <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800319e:	4b1b      	ldr	r3, [pc, #108]	@ (800320c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031a0:	68db      	ldr	r3, [r3, #12]
 80031a2:	4a1a      	ldr	r2, [pc, #104]	@ (800320c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031a4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80031a8:	60d3      	str	r3, [r2, #12]
 80031aa:	e011      	b.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031b0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80031b4:	d10c      	bne.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	3304      	adds	r3, #4
 80031ba:	2101      	movs	r1, #1
 80031bc:	4618      	mov	r0, r3
 80031be:	f000 f899 	bl	80032f4 <RCCEx_PLLSAI1_Config>
 80031c2:	4603      	mov	r3, r0
 80031c4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80031c6:	7cfb      	ldrb	r3, [r7, #19]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d001      	beq.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80031cc:	7cfb      	ldrb	r3, [r7, #19]
 80031ce:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d02b      	beq.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80031dc:	4b0b      	ldr	r3, [pc, #44]	@ (800320c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031e2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80031ea:	4908      	ldr	r1, [pc, #32]	@ (800320c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031ec:	4313      	orrs	r3, r2
 80031ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80031f6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80031fa:	d109      	bne.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80031fc:	4b03      	ldr	r3, [pc, #12]	@ (800320c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031fe:	68db      	ldr	r3, [r3, #12]
 8003200:	4a02      	ldr	r2, [pc, #8]	@ (800320c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003202:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003206:	60d3      	str	r3, [r2, #12]
 8003208:	e014      	b.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800320a:	bf00      	nop
 800320c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003214:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003218:	d10c      	bne.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	3304      	adds	r3, #4
 800321e:	2101      	movs	r1, #1
 8003220:	4618      	mov	r0, r3
 8003222:	f000 f867 	bl	80032f4 <RCCEx_PLLSAI1_Config>
 8003226:	4603      	mov	r3, r0
 8003228:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800322a:	7cfb      	ldrb	r3, [r7, #19]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d001      	beq.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003230:	7cfb      	ldrb	r3, [r7, #19]
 8003232:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800323c:	2b00      	cmp	r3, #0
 800323e:	d02f      	beq.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003240:	4b2b      	ldr	r3, [pc, #172]	@ (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003242:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003246:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800324e:	4928      	ldr	r1, [pc, #160]	@ (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003250:	4313      	orrs	r3, r2
 8003252:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800325a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800325e:	d10d      	bne.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	3304      	adds	r3, #4
 8003264:	2102      	movs	r1, #2
 8003266:	4618      	mov	r0, r3
 8003268:	f000 f844 	bl	80032f4 <RCCEx_PLLSAI1_Config>
 800326c:	4603      	mov	r3, r0
 800326e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003270:	7cfb      	ldrb	r3, [r7, #19]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d014      	beq.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003276:	7cfb      	ldrb	r3, [r7, #19]
 8003278:	74bb      	strb	r3, [r7, #18]
 800327a:	e011      	b.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003280:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003284:	d10c      	bne.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	3320      	adds	r3, #32
 800328a:	2102      	movs	r1, #2
 800328c:	4618      	mov	r0, r3
 800328e:	f000 f925 	bl	80034dc <RCCEx_PLLSAI2_Config>
 8003292:	4603      	mov	r3, r0
 8003294:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003296:	7cfb      	ldrb	r3, [r7, #19]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d001      	beq.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800329c:	7cfb      	ldrb	r3, [r7, #19]
 800329e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d00a      	beq.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80032ac:	4b10      	ldr	r3, [pc, #64]	@ (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80032ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032b2:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80032ba:	490d      	ldr	r1, [pc, #52]	@ (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80032bc:	4313      	orrs	r3, r2
 80032be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d00b      	beq.n	80032e6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80032ce:	4b08      	ldr	r3, [pc, #32]	@ (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80032d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032d4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80032de:	4904      	ldr	r1, [pc, #16]	@ (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80032e0:	4313      	orrs	r3, r2
 80032e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80032e6:	7cbb      	ldrb	r3, [r7, #18]
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	3718      	adds	r7, #24
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}
 80032f0:	40021000 	.word	0x40021000

080032f4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b084      	sub	sp, #16
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
 80032fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80032fe:	2300      	movs	r3, #0
 8003300:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003302:	4b75      	ldr	r3, [pc, #468]	@ (80034d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003304:	68db      	ldr	r3, [r3, #12]
 8003306:	f003 0303 	and.w	r3, r3, #3
 800330a:	2b00      	cmp	r3, #0
 800330c:	d018      	beq.n	8003340 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800330e:	4b72      	ldr	r3, [pc, #456]	@ (80034d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003310:	68db      	ldr	r3, [r3, #12]
 8003312:	f003 0203 	and.w	r2, r3, #3
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	429a      	cmp	r2, r3
 800331c:	d10d      	bne.n	800333a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
       ||
 8003322:	2b00      	cmp	r3, #0
 8003324:	d009      	beq.n	800333a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003326:	4b6c      	ldr	r3, [pc, #432]	@ (80034d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003328:	68db      	ldr	r3, [r3, #12]
 800332a:	091b      	lsrs	r3, r3, #4
 800332c:	f003 0307 	and.w	r3, r3, #7
 8003330:	1c5a      	adds	r2, r3, #1
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	685b      	ldr	r3, [r3, #4]
       ||
 8003336:	429a      	cmp	r2, r3
 8003338:	d047      	beq.n	80033ca <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	73fb      	strb	r3, [r7, #15]
 800333e:	e044      	b.n	80033ca <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	2b03      	cmp	r3, #3
 8003346:	d018      	beq.n	800337a <RCCEx_PLLSAI1_Config+0x86>
 8003348:	2b03      	cmp	r3, #3
 800334a:	d825      	bhi.n	8003398 <RCCEx_PLLSAI1_Config+0xa4>
 800334c:	2b01      	cmp	r3, #1
 800334e:	d002      	beq.n	8003356 <RCCEx_PLLSAI1_Config+0x62>
 8003350:	2b02      	cmp	r3, #2
 8003352:	d009      	beq.n	8003368 <RCCEx_PLLSAI1_Config+0x74>
 8003354:	e020      	b.n	8003398 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003356:	4b60      	ldr	r3, [pc, #384]	@ (80034d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f003 0302 	and.w	r3, r3, #2
 800335e:	2b00      	cmp	r3, #0
 8003360:	d11d      	bne.n	800339e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003366:	e01a      	b.n	800339e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003368:	4b5b      	ldr	r3, [pc, #364]	@ (80034d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003370:	2b00      	cmp	r3, #0
 8003372:	d116      	bne.n	80033a2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003374:	2301      	movs	r3, #1
 8003376:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003378:	e013      	b.n	80033a2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800337a:	4b57      	ldr	r3, [pc, #348]	@ (80034d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003382:	2b00      	cmp	r3, #0
 8003384:	d10f      	bne.n	80033a6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003386:	4b54      	ldr	r3, [pc, #336]	@ (80034d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800338e:	2b00      	cmp	r3, #0
 8003390:	d109      	bne.n	80033a6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003396:	e006      	b.n	80033a6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003398:	2301      	movs	r3, #1
 800339a:	73fb      	strb	r3, [r7, #15]
      break;
 800339c:	e004      	b.n	80033a8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800339e:	bf00      	nop
 80033a0:	e002      	b.n	80033a8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80033a2:	bf00      	nop
 80033a4:	e000      	b.n	80033a8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80033a6:	bf00      	nop
    }

    if(status == HAL_OK)
 80033a8:	7bfb      	ldrb	r3, [r7, #15]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d10d      	bne.n	80033ca <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80033ae:	4b4a      	ldr	r3, [pc, #296]	@ (80034d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033b0:	68db      	ldr	r3, [r3, #12]
 80033b2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6819      	ldr	r1, [r3, #0]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	3b01      	subs	r3, #1
 80033c0:	011b      	lsls	r3, r3, #4
 80033c2:	430b      	orrs	r3, r1
 80033c4:	4944      	ldr	r1, [pc, #272]	@ (80034d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033c6:	4313      	orrs	r3, r2
 80033c8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80033ca:	7bfb      	ldrb	r3, [r7, #15]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d17d      	bne.n	80034cc <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80033d0:	4b41      	ldr	r3, [pc, #260]	@ (80034d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a40      	ldr	r2, [pc, #256]	@ (80034d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033d6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80033da:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033dc:	f7fd fc7a 	bl	8000cd4 <HAL_GetTick>
 80033e0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80033e2:	e009      	b.n	80033f8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80033e4:	f7fd fc76 	bl	8000cd4 <HAL_GetTick>
 80033e8:	4602      	mov	r2, r0
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	1ad3      	subs	r3, r2, r3
 80033ee:	2b02      	cmp	r3, #2
 80033f0:	d902      	bls.n	80033f8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80033f2:	2303      	movs	r3, #3
 80033f4:	73fb      	strb	r3, [r7, #15]
        break;
 80033f6:	e005      	b.n	8003404 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80033f8:	4b37      	ldr	r3, [pc, #220]	@ (80034d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003400:	2b00      	cmp	r3, #0
 8003402:	d1ef      	bne.n	80033e4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003404:	7bfb      	ldrb	r3, [r7, #15]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d160      	bne.n	80034cc <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d111      	bne.n	8003434 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003410:	4b31      	ldr	r3, [pc, #196]	@ (80034d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003412:	691b      	ldr	r3, [r3, #16]
 8003414:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003418:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800341c:	687a      	ldr	r2, [r7, #4]
 800341e:	6892      	ldr	r2, [r2, #8]
 8003420:	0211      	lsls	r1, r2, #8
 8003422:	687a      	ldr	r2, [r7, #4]
 8003424:	68d2      	ldr	r2, [r2, #12]
 8003426:	0912      	lsrs	r2, r2, #4
 8003428:	0452      	lsls	r2, r2, #17
 800342a:	430a      	orrs	r2, r1
 800342c:	492a      	ldr	r1, [pc, #168]	@ (80034d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800342e:	4313      	orrs	r3, r2
 8003430:	610b      	str	r3, [r1, #16]
 8003432:	e027      	b.n	8003484 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	2b01      	cmp	r3, #1
 8003438:	d112      	bne.n	8003460 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800343a:	4b27      	ldr	r3, [pc, #156]	@ (80034d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800343c:	691b      	ldr	r3, [r3, #16]
 800343e:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8003442:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003446:	687a      	ldr	r2, [r7, #4]
 8003448:	6892      	ldr	r2, [r2, #8]
 800344a:	0211      	lsls	r1, r2, #8
 800344c:	687a      	ldr	r2, [r7, #4]
 800344e:	6912      	ldr	r2, [r2, #16]
 8003450:	0852      	lsrs	r2, r2, #1
 8003452:	3a01      	subs	r2, #1
 8003454:	0552      	lsls	r2, r2, #21
 8003456:	430a      	orrs	r2, r1
 8003458:	491f      	ldr	r1, [pc, #124]	@ (80034d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800345a:	4313      	orrs	r3, r2
 800345c:	610b      	str	r3, [r1, #16]
 800345e:	e011      	b.n	8003484 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003460:	4b1d      	ldr	r3, [pc, #116]	@ (80034d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003462:	691b      	ldr	r3, [r3, #16]
 8003464:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003468:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800346c:	687a      	ldr	r2, [r7, #4]
 800346e:	6892      	ldr	r2, [r2, #8]
 8003470:	0211      	lsls	r1, r2, #8
 8003472:	687a      	ldr	r2, [r7, #4]
 8003474:	6952      	ldr	r2, [r2, #20]
 8003476:	0852      	lsrs	r2, r2, #1
 8003478:	3a01      	subs	r2, #1
 800347a:	0652      	lsls	r2, r2, #25
 800347c:	430a      	orrs	r2, r1
 800347e:	4916      	ldr	r1, [pc, #88]	@ (80034d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003480:	4313      	orrs	r3, r2
 8003482:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003484:	4b14      	ldr	r3, [pc, #80]	@ (80034d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a13      	ldr	r2, [pc, #76]	@ (80034d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800348a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800348e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003490:	f7fd fc20 	bl	8000cd4 <HAL_GetTick>
 8003494:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003496:	e009      	b.n	80034ac <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003498:	f7fd fc1c 	bl	8000cd4 <HAL_GetTick>
 800349c:	4602      	mov	r2, r0
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	1ad3      	subs	r3, r2, r3
 80034a2:	2b02      	cmp	r3, #2
 80034a4:	d902      	bls.n	80034ac <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80034a6:	2303      	movs	r3, #3
 80034a8:	73fb      	strb	r3, [r7, #15]
          break;
 80034aa:	e005      	b.n	80034b8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80034ac:	4b0a      	ldr	r3, [pc, #40]	@ (80034d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d0ef      	beq.n	8003498 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80034b8:	7bfb      	ldrb	r3, [r7, #15]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d106      	bne.n	80034cc <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80034be:	4b06      	ldr	r3, [pc, #24]	@ (80034d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034c0:	691a      	ldr	r2, [r3, #16]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	699b      	ldr	r3, [r3, #24]
 80034c6:	4904      	ldr	r1, [pc, #16]	@ (80034d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034c8:	4313      	orrs	r3, r2
 80034ca:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80034cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	3710      	adds	r7, #16
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}
 80034d6:	bf00      	nop
 80034d8:	40021000 	.word	0x40021000

080034dc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b084      	sub	sp, #16
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
 80034e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80034e6:	2300      	movs	r3, #0
 80034e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80034ea:	4b6a      	ldr	r3, [pc, #424]	@ (8003694 <RCCEx_PLLSAI2_Config+0x1b8>)
 80034ec:	68db      	ldr	r3, [r3, #12]
 80034ee:	f003 0303 	and.w	r3, r3, #3
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d018      	beq.n	8003528 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80034f6:	4b67      	ldr	r3, [pc, #412]	@ (8003694 <RCCEx_PLLSAI2_Config+0x1b8>)
 80034f8:	68db      	ldr	r3, [r3, #12]
 80034fa:	f003 0203 	and.w	r2, r3, #3
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	429a      	cmp	r2, r3
 8003504:	d10d      	bne.n	8003522 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
       ||
 800350a:	2b00      	cmp	r3, #0
 800350c:	d009      	beq.n	8003522 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800350e:	4b61      	ldr	r3, [pc, #388]	@ (8003694 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003510:	68db      	ldr	r3, [r3, #12]
 8003512:	091b      	lsrs	r3, r3, #4
 8003514:	f003 0307 	and.w	r3, r3, #7
 8003518:	1c5a      	adds	r2, r3, #1
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	685b      	ldr	r3, [r3, #4]
       ||
 800351e:	429a      	cmp	r2, r3
 8003520:	d047      	beq.n	80035b2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003522:	2301      	movs	r3, #1
 8003524:	73fb      	strb	r3, [r7, #15]
 8003526:	e044      	b.n	80035b2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	2b03      	cmp	r3, #3
 800352e:	d018      	beq.n	8003562 <RCCEx_PLLSAI2_Config+0x86>
 8003530:	2b03      	cmp	r3, #3
 8003532:	d825      	bhi.n	8003580 <RCCEx_PLLSAI2_Config+0xa4>
 8003534:	2b01      	cmp	r3, #1
 8003536:	d002      	beq.n	800353e <RCCEx_PLLSAI2_Config+0x62>
 8003538:	2b02      	cmp	r3, #2
 800353a:	d009      	beq.n	8003550 <RCCEx_PLLSAI2_Config+0x74>
 800353c:	e020      	b.n	8003580 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800353e:	4b55      	ldr	r3, [pc, #340]	@ (8003694 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f003 0302 	and.w	r3, r3, #2
 8003546:	2b00      	cmp	r3, #0
 8003548:	d11d      	bne.n	8003586 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800354e:	e01a      	b.n	8003586 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003550:	4b50      	ldr	r3, [pc, #320]	@ (8003694 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003558:	2b00      	cmp	r3, #0
 800355a:	d116      	bne.n	800358a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800355c:	2301      	movs	r3, #1
 800355e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003560:	e013      	b.n	800358a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003562:	4b4c      	ldr	r3, [pc, #304]	@ (8003694 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800356a:	2b00      	cmp	r3, #0
 800356c:	d10f      	bne.n	800358e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800356e:	4b49      	ldr	r3, [pc, #292]	@ (8003694 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003576:	2b00      	cmp	r3, #0
 8003578:	d109      	bne.n	800358e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800357e:	e006      	b.n	800358e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003580:	2301      	movs	r3, #1
 8003582:	73fb      	strb	r3, [r7, #15]
      break;
 8003584:	e004      	b.n	8003590 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003586:	bf00      	nop
 8003588:	e002      	b.n	8003590 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800358a:	bf00      	nop
 800358c:	e000      	b.n	8003590 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800358e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003590:	7bfb      	ldrb	r3, [r7, #15]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d10d      	bne.n	80035b2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003596:	4b3f      	ldr	r3, [pc, #252]	@ (8003694 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003598:	68db      	ldr	r3, [r3, #12]
 800359a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6819      	ldr	r1, [r3, #0]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	3b01      	subs	r3, #1
 80035a8:	011b      	lsls	r3, r3, #4
 80035aa:	430b      	orrs	r3, r1
 80035ac:	4939      	ldr	r1, [pc, #228]	@ (8003694 <RCCEx_PLLSAI2_Config+0x1b8>)
 80035ae:	4313      	orrs	r3, r2
 80035b0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80035b2:	7bfb      	ldrb	r3, [r7, #15]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d167      	bne.n	8003688 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80035b8:	4b36      	ldr	r3, [pc, #216]	@ (8003694 <RCCEx_PLLSAI2_Config+0x1b8>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a35      	ldr	r2, [pc, #212]	@ (8003694 <RCCEx_PLLSAI2_Config+0x1b8>)
 80035be:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80035c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035c4:	f7fd fb86 	bl	8000cd4 <HAL_GetTick>
 80035c8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80035ca:	e009      	b.n	80035e0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80035cc:	f7fd fb82 	bl	8000cd4 <HAL_GetTick>
 80035d0:	4602      	mov	r2, r0
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	1ad3      	subs	r3, r2, r3
 80035d6:	2b02      	cmp	r3, #2
 80035d8:	d902      	bls.n	80035e0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80035da:	2303      	movs	r3, #3
 80035dc:	73fb      	strb	r3, [r7, #15]
        break;
 80035de:	e005      	b.n	80035ec <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80035e0:	4b2c      	ldr	r3, [pc, #176]	@ (8003694 <RCCEx_PLLSAI2_Config+0x1b8>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d1ef      	bne.n	80035cc <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80035ec:	7bfb      	ldrb	r3, [r7, #15]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d14a      	bne.n	8003688 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d111      	bne.n	800361c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80035f8:	4b26      	ldr	r3, [pc, #152]	@ (8003694 <RCCEx_PLLSAI2_Config+0x1b8>)
 80035fa:	695b      	ldr	r3, [r3, #20]
 80035fc:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003600:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003604:	687a      	ldr	r2, [r7, #4]
 8003606:	6892      	ldr	r2, [r2, #8]
 8003608:	0211      	lsls	r1, r2, #8
 800360a:	687a      	ldr	r2, [r7, #4]
 800360c:	68d2      	ldr	r2, [r2, #12]
 800360e:	0912      	lsrs	r2, r2, #4
 8003610:	0452      	lsls	r2, r2, #17
 8003612:	430a      	orrs	r2, r1
 8003614:	491f      	ldr	r1, [pc, #124]	@ (8003694 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003616:	4313      	orrs	r3, r2
 8003618:	614b      	str	r3, [r1, #20]
 800361a:	e011      	b.n	8003640 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800361c:	4b1d      	ldr	r3, [pc, #116]	@ (8003694 <RCCEx_PLLSAI2_Config+0x1b8>)
 800361e:	695b      	ldr	r3, [r3, #20]
 8003620:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003624:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003628:	687a      	ldr	r2, [r7, #4]
 800362a:	6892      	ldr	r2, [r2, #8]
 800362c:	0211      	lsls	r1, r2, #8
 800362e:	687a      	ldr	r2, [r7, #4]
 8003630:	6912      	ldr	r2, [r2, #16]
 8003632:	0852      	lsrs	r2, r2, #1
 8003634:	3a01      	subs	r2, #1
 8003636:	0652      	lsls	r2, r2, #25
 8003638:	430a      	orrs	r2, r1
 800363a:	4916      	ldr	r1, [pc, #88]	@ (8003694 <RCCEx_PLLSAI2_Config+0x1b8>)
 800363c:	4313      	orrs	r3, r2
 800363e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003640:	4b14      	ldr	r3, [pc, #80]	@ (8003694 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a13      	ldr	r2, [pc, #76]	@ (8003694 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003646:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800364a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800364c:	f7fd fb42 	bl	8000cd4 <HAL_GetTick>
 8003650:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003652:	e009      	b.n	8003668 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003654:	f7fd fb3e 	bl	8000cd4 <HAL_GetTick>
 8003658:	4602      	mov	r2, r0
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	1ad3      	subs	r3, r2, r3
 800365e:	2b02      	cmp	r3, #2
 8003660:	d902      	bls.n	8003668 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003662:	2303      	movs	r3, #3
 8003664:	73fb      	strb	r3, [r7, #15]
          break;
 8003666:	e005      	b.n	8003674 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003668:	4b0a      	ldr	r3, [pc, #40]	@ (8003694 <RCCEx_PLLSAI2_Config+0x1b8>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003670:	2b00      	cmp	r3, #0
 8003672:	d0ef      	beq.n	8003654 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003674:	7bfb      	ldrb	r3, [r7, #15]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d106      	bne.n	8003688 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800367a:	4b06      	ldr	r3, [pc, #24]	@ (8003694 <RCCEx_PLLSAI2_Config+0x1b8>)
 800367c:	695a      	ldr	r2, [r3, #20]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	695b      	ldr	r3, [r3, #20]
 8003682:	4904      	ldr	r1, [pc, #16]	@ (8003694 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003684:	4313      	orrs	r3, r2
 8003686:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003688:	7bfb      	ldrb	r3, [r7, #15]
}
 800368a:	4618      	mov	r0, r3
 800368c:	3710      	adds	r7, #16
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}
 8003692:	bf00      	nop
 8003694:	40021000 	.word	0x40021000

08003698 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b082      	sub	sp, #8
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d101      	bne.n	80036aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	e040      	b.n	800372c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d106      	bne.n	80036c0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2200      	movs	r2, #0
 80036b6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	f7fd f99c 	bl	80009f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2224      	movs	r2, #36	@ 0x24
 80036c4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	681a      	ldr	r2, [r3, #0]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f022 0201 	bic.w	r2, r2, #1
 80036d4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d002      	beq.n	80036e4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80036de:	6878      	ldr	r0, [r7, #4]
 80036e0:	f000 fae0 	bl	8003ca4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80036e4:	6878      	ldr	r0, [r7, #4]
 80036e6:	f000 f825 	bl	8003734 <UART_SetConfig>
 80036ea:	4603      	mov	r3, r0
 80036ec:	2b01      	cmp	r3, #1
 80036ee:	d101      	bne.n	80036f4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80036f0:	2301      	movs	r3, #1
 80036f2:	e01b      	b.n	800372c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	685a      	ldr	r2, [r3, #4]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003702:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	689a      	ldr	r2, [r3, #8]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003712:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	681a      	ldr	r2, [r3, #0]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f042 0201 	orr.w	r2, r2, #1
 8003722:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003724:	6878      	ldr	r0, [r7, #4]
 8003726:	f000 fb5f 	bl	8003de8 <UART_CheckIdleState>
 800372a:	4603      	mov	r3, r0
}
 800372c:	4618      	mov	r0, r3
 800372e:	3708      	adds	r7, #8
 8003730:	46bd      	mov	sp, r7
 8003732:	bd80      	pop	{r7, pc}

08003734 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003734:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003738:	b08a      	sub	sp, #40	@ 0x28
 800373a:	af00      	add	r7, sp, #0
 800373c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800373e:	2300      	movs	r3, #0
 8003740:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	689a      	ldr	r2, [r3, #8]
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	691b      	ldr	r3, [r3, #16]
 800374c:	431a      	orrs	r2, r3
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	695b      	ldr	r3, [r3, #20]
 8003752:	431a      	orrs	r2, r3
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	69db      	ldr	r3, [r3, #28]
 8003758:	4313      	orrs	r3, r2
 800375a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	681a      	ldr	r2, [r3, #0]
 8003762:	4ba4      	ldr	r3, [pc, #656]	@ (80039f4 <UART_SetConfig+0x2c0>)
 8003764:	4013      	ands	r3, r2
 8003766:	68fa      	ldr	r2, [r7, #12]
 8003768:	6812      	ldr	r2, [r2, #0]
 800376a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800376c:	430b      	orrs	r3, r1
 800376e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	68da      	ldr	r2, [r3, #12]
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	430a      	orrs	r2, r1
 8003784:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	699b      	ldr	r3, [r3, #24]
 800378a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a99      	ldr	r2, [pc, #612]	@ (80039f8 <UART_SetConfig+0x2c4>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d004      	beq.n	80037a0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	6a1b      	ldr	r3, [r3, #32]
 800379a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800379c:	4313      	orrs	r3, r2
 800379e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	689b      	ldr	r3, [r3, #8]
 80037a6:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037b0:	430a      	orrs	r2, r1
 80037b2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a90      	ldr	r2, [pc, #576]	@ (80039fc <UART_SetConfig+0x2c8>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d126      	bne.n	800380c <UART_SetConfig+0xd8>
 80037be:	4b90      	ldr	r3, [pc, #576]	@ (8003a00 <UART_SetConfig+0x2cc>)
 80037c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037c4:	f003 0303 	and.w	r3, r3, #3
 80037c8:	2b03      	cmp	r3, #3
 80037ca:	d81b      	bhi.n	8003804 <UART_SetConfig+0xd0>
 80037cc:	a201      	add	r2, pc, #4	@ (adr r2, 80037d4 <UART_SetConfig+0xa0>)
 80037ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037d2:	bf00      	nop
 80037d4:	080037e5 	.word	0x080037e5
 80037d8:	080037f5 	.word	0x080037f5
 80037dc:	080037ed 	.word	0x080037ed
 80037e0:	080037fd 	.word	0x080037fd
 80037e4:	2301      	movs	r3, #1
 80037e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80037ea:	e116      	b.n	8003a1a <UART_SetConfig+0x2e6>
 80037ec:	2302      	movs	r3, #2
 80037ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80037f2:	e112      	b.n	8003a1a <UART_SetConfig+0x2e6>
 80037f4:	2304      	movs	r3, #4
 80037f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80037fa:	e10e      	b.n	8003a1a <UART_SetConfig+0x2e6>
 80037fc:	2308      	movs	r3, #8
 80037fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003802:	e10a      	b.n	8003a1a <UART_SetConfig+0x2e6>
 8003804:	2310      	movs	r3, #16
 8003806:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800380a:	e106      	b.n	8003a1a <UART_SetConfig+0x2e6>
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a7c      	ldr	r2, [pc, #496]	@ (8003a04 <UART_SetConfig+0x2d0>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d138      	bne.n	8003888 <UART_SetConfig+0x154>
 8003816:	4b7a      	ldr	r3, [pc, #488]	@ (8003a00 <UART_SetConfig+0x2cc>)
 8003818:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800381c:	f003 030c 	and.w	r3, r3, #12
 8003820:	2b0c      	cmp	r3, #12
 8003822:	d82d      	bhi.n	8003880 <UART_SetConfig+0x14c>
 8003824:	a201      	add	r2, pc, #4	@ (adr r2, 800382c <UART_SetConfig+0xf8>)
 8003826:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800382a:	bf00      	nop
 800382c:	08003861 	.word	0x08003861
 8003830:	08003881 	.word	0x08003881
 8003834:	08003881 	.word	0x08003881
 8003838:	08003881 	.word	0x08003881
 800383c:	08003871 	.word	0x08003871
 8003840:	08003881 	.word	0x08003881
 8003844:	08003881 	.word	0x08003881
 8003848:	08003881 	.word	0x08003881
 800384c:	08003869 	.word	0x08003869
 8003850:	08003881 	.word	0x08003881
 8003854:	08003881 	.word	0x08003881
 8003858:	08003881 	.word	0x08003881
 800385c:	08003879 	.word	0x08003879
 8003860:	2300      	movs	r3, #0
 8003862:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003866:	e0d8      	b.n	8003a1a <UART_SetConfig+0x2e6>
 8003868:	2302      	movs	r3, #2
 800386a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800386e:	e0d4      	b.n	8003a1a <UART_SetConfig+0x2e6>
 8003870:	2304      	movs	r3, #4
 8003872:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003876:	e0d0      	b.n	8003a1a <UART_SetConfig+0x2e6>
 8003878:	2308      	movs	r3, #8
 800387a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800387e:	e0cc      	b.n	8003a1a <UART_SetConfig+0x2e6>
 8003880:	2310      	movs	r3, #16
 8003882:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003886:	e0c8      	b.n	8003a1a <UART_SetConfig+0x2e6>
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a5e      	ldr	r2, [pc, #376]	@ (8003a08 <UART_SetConfig+0x2d4>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d125      	bne.n	80038de <UART_SetConfig+0x1aa>
 8003892:	4b5b      	ldr	r3, [pc, #364]	@ (8003a00 <UART_SetConfig+0x2cc>)
 8003894:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003898:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800389c:	2b30      	cmp	r3, #48	@ 0x30
 800389e:	d016      	beq.n	80038ce <UART_SetConfig+0x19a>
 80038a0:	2b30      	cmp	r3, #48	@ 0x30
 80038a2:	d818      	bhi.n	80038d6 <UART_SetConfig+0x1a2>
 80038a4:	2b20      	cmp	r3, #32
 80038a6:	d00a      	beq.n	80038be <UART_SetConfig+0x18a>
 80038a8:	2b20      	cmp	r3, #32
 80038aa:	d814      	bhi.n	80038d6 <UART_SetConfig+0x1a2>
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d002      	beq.n	80038b6 <UART_SetConfig+0x182>
 80038b0:	2b10      	cmp	r3, #16
 80038b2:	d008      	beq.n	80038c6 <UART_SetConfig+0x192>
 80038b4:	e00f      	b.n	80038d6 <UART_SetConfig+0x1a2>
 80038b6:	2300      	movs	r3, #0
 80038b8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80038bc:	e0ad      	b.n	8003a1a <UART_SetConfig+0x2e6>
 80038be:	2302      	movs	r3, #2
 80038c0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80038c4:	e0a9      	b.n	8003a1a <UART_SetConfig+0x2e6>
 80038c6:	2304      	movs	r3, #4
 80038c8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80038cc:	e0a5      	b.n	8003a1a <UART_SetConfig+0x2e6>
 80038ce:	2308      	movs	r3, #8
 80038d0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80038d4:	e0a1      	b.n	8003a1a <UART_SetConfig+0x2e6>
 80038d6:	2310      	movs	r3, #16
 80038d8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80038dc:	e09d      	b.n	8003a1a <UART_SetConfig+0x2e6>
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a4a      	ldr	r2, [pc, #296]	@ (8003a0c <UART_SetConfig+0x2d8>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d125      	bne.n	8003934 <UART_SetConfig+0x200>
 80038e8:	4b45      	ldr	r3, [pc, #276]	@ (8003a00 <UART_SetConfig+0x2cc>)
 80038ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038ee:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80038f2:	2bc0      	cmp	r3, #192	@ 0xc0
 80038f4:	d016      	beq.n	8003924 <UART_SetConfig+0x1f0>
 80038f6:	2bc0      	cmp	r3, #192	@ 0xc0
 80038f8:	d818      	bhi.n	800392c <UART_SetConfig+0x1f8>
 80038fa:	2b80      	cmp	r3, #128	@ 0x80
 80038fc:	d00a      	beq.n	8003914 <UART_SetConfig+0x1e0>
 80038fe:	2b80      	cmp	r3, #128	@ 0x80
 8003900:	d814      	bhi.n	800392c <UART_SetConfig+0x1f8>
 8003902:	2b00      	cmp	r3, #0
 8003904:	d002      	beq.n	800390c <UART_SetConfig+0x1d8>
 8003906:	2b40      	cmp	r3, #64	@ 0x40
 8003908:	d008      	beq.n	800391c <UART_SetConfig+0x1e8>
 800390a:	e00f      	b.n	800392c <UART_SetConfig+0x1f8>
 800390c:	2300      	movs	r3, #0
 800390e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003912:	e082      	b.n	8003a1a <UART_SetConfig+0x2e6>
 8003914:	2302      	movs	r3, #2
 8003916:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800391a:	e07e      	b.n	8003a1a <UART_SetConfig+0x2e6>
 800391c:	2304      	movs	r3, #4
 800391e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003922:	e07a      	b.n	8003a1a <UART_SetConfig+0x2e6>
 8003924:	2308      	movs	r3, #8
 8003926:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800392a:	e076      	b.n	8003a1a <UART_SetConfig+0x2e6>
 800392c:	2310      	movs	r3, #16
 800392e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003932:	e072      	b.n	8003a1a <UART_SetConfig+0x2e6>
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a35      	ldr	r2, [pc, #212]	@ (8003a10 <UART_SetConfig+0x2dc>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d12a      	bne.n	8003994 <UART_SetConfig+0x260>
 800393e:	4b30      	ldr	r3, [pc, #192]	@ (8003a00 <UART_SetConfig+0x2cc>)
 8003940:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003944:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003948:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800394c:	d01a      	beq.n	8003984 <UART_SetConfig+0x250>
 800394e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003952:	d81b      	bhi.n	800398c <UART_SetConfig+0x258>
 8003954:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003958:	d00c      	beq.n	8003974 <UART_SetConfig+0x240>
 800395a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800395e:	d815      	bhi.n	800398c <UART_SetConfig+0x258>
 8003960:	2b00      	cmp	r3, #0
 8003962:	d003      	beq.n	800396c <UART_SetConfig+0x238>
 8003964:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003968:	d008      	beq.n	800397c <UART_SetConfig+0x248>
 800396a:	e00f      	b.n	800398c <UART_SetConfig+0x258>
 800396c:	2300      	movs	r3, #0
 800396e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003972:	e052      	b.n	8003a1a <UART_SetConfig+0x2e6>
 8003974:	2302      	movs	r3, #2
 8003976:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800397a:	e04e      	b.n	8003a1a <UART_SetConfig+0x2e6>
 800397c:	2304      	movs	r3, #4
 800397e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003982:	e04a      	b.n	8003a1a <UART_SetConfig+0x2e6>
 8003984:	2308      	movs	r3, #8
 8003986:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800398a:	e046      	b.n	8003a1a <UART_SetConfig+0x2e6>
 800398c:	2310      	movs	r3, #16
 800398e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003992:	e042      	b.n	8003a1a <UART_SetConfig+0x2e6>
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a17      	ldr	r2, [pc, #92]	@ (80039f8 <UART_SetConfig+0x2c4>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d13a      	bne.n	8003a14 <UART_SetConfig+0x2e0>
 800399e:	4b18      	ldr	r3, [pc, #96]	@ (8003a00 <UART_SetConfig+0x2cc>)
 80039a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039a4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80039a8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80039ac:	d01a      	beq.n	80039e4 <UART_SetConfig+0x2b0>
 80039ae:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80039b2:	d81b      	bhi.n	80039ec <UART_SetConfig+0x2b8>
 80039b4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80039b8:	d00c      	beq.n	80039d4 <UART_SetConfig+0x2a0>
 80039ba:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80039be:	d815      	bhi.n	80039ec <UART_SetConfig+0x2b8>
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d003      	beq.n	80039cc <UART_SetConfig+0x298>
 80039c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80039c8:	d008      	beq.n	80039dc <UART_SetConfig+0x2a8>
 80039ca:	e00f      	b.n	80039ec <UART_SetConfig+0x2b8>
 80039cc:	2300      	movs	r3, #0
 80039ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80039d2:	e022      	b.n	8003a1a <UART_SetConfig+0x2e6>
 80039d4:	2302      	movs	r3, #2
 80039d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80039da:	e01e      	b.n	8003a1a <UART_SetConfig+0x2e6>
 80039dc:	2304      	movs	r3, #4
 80039de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80039e2:	e01a      	b.n	8003a1a <UART_SetConfig+0x2e6>
 80039e4:	2308      	movs	r3, #8
 80039e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80039ea:	e016      	b.n	8003a1a <UART_SetConfig+0x2e6>
 80039ec:	2310      	movs	r3, #16
 80039ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80039f2:	e012      	b.n	8003a1a <UART_SetConfig+0x2e6>
 80039f4:	efff69f3 	.word	0xefff69f3
 80039f8:	40008000 	.word	0x40008000
 80039fc:	40013800 	.word	0x40013800
 8003a00:	40021000 	.word	0x40021000
 8003a04:	40004400 	.word	0x40004400
 8003a08:	40004800 	.word	0x40004800
 8003a0c:	40004c00 	.word	0x40004c00
 8003a10:	40005000 	.word	0x40005000
 8003a14:	2310      	movs	r3, #16
 8003a16:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a9f      	ldr	r2, [pc, #636]	@ (8003c9c <UART_SetConfig+0x568>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d17a      	bne.n	8003b1a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003a24:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003a28:	2b08      	cmp	r3, #8
 8003a2a:	d824      	bhi.n	8003a76 <UART_SetConfig+0x342>
 8003a2c:	a201      	add	r2, pc, #4	@ (adr r2, 8003a34 <UART_SetConfig+0x300>)
 8003a2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a32:	bf00      	nop
 8003a34:	08003a59 	.word	0x08003a59
 8003a38:	08003a77 	.word	0x08003a77
 8003a3c:	08003a61 	.word	0x08003a61
 8003a40:	08003a77 	.word	0x08003a77
 8003a44:	08003a67 	.word	0x08003a67
 8003a48:	08003a77 	.word	0x08003a77
 8003a4c:	08003a77 	.word	0x08003a77
 8003a50:	08003a77 	.word	0x08003a77
 8003a54:	08003a6f 	.word	0x08003a6f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a58:	f7ff f8d6 	bl	8002c08 <HAL_RCC_GetPCLK1Freq>
 8003a5c:	61f8      	str	r0, [r7, #28]
        break;
 8003a5e:	e010      	b.n	8003a82 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a60:	4b8f      	ldr	r3, [pc, #572]	@ (8003ca0 <UART_SetConfig+0x56c>)
 8003a62:	61fb      	str	r3, [r7, #28]
        break;
 8003a64:	e00d      	b.n	8003a82 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a66:	f7ff f837 	bl	8002ad8 <HAL_RCC_GetSysClockFreq>
 8003a6a:	61f8      	str	r0, [r7, #28]
        break;
 8003a6c:	e009      	b.n	8003a82 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a6e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003a72:	61fb      	str	r3, [r7, #28]
        break;
 8003a74:	e005      	b.n	8003a82 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003a76:	2300      	movs	r3, #0
 8003a78:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003a80:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003a82:	69fb      	ldr	r3, [r7, #28]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	f000 80fb 	beq.w	8003c80 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	685a      	ldr	r2, [r3, #4]
 8003a8e:	4613      	mov	r3, r2
 8003a90:	005b      	lsls	r3, r3, #1
 8003a92:	4413      	add	r3, r2
 8003a94:	69fa      	ldr	r2, [r7, #28]
 8003a96:	429a      	cmp	r2, r3
 8003a98:	d305      	bcc.n	8003aa6 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003aa0:	69fa      	ldr	r2, [r7, #28]
 8003aa2:	429a      	cmp	r2, r3
 8003aa4:	d903      	bls.n	8003aae <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003aac:	e0e8      	b.n	8003c80 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003aae:	69fb      	ldr	r3, [r7, #28]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	461c      	mov	r4, r3
 8003ab4:	4615      	mov	r5, r2
 8003ab6:	f04f 0200 	mov.w	r2, #0
 8003aba:	f04f 0300 	mov.w	r3, #0
 8003abe:	022b      	lsls	r3, r5, #8
 8003ac0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003ac4:	0222      	lsls	r2, r4, #8
 8003ac6:	68f9      	ldr	r1, [r7, #12]
 8003ac8:	6849      	ldr	r1, [r1, #4]
 8003aca:	0849      	lsrs	r1, r1, #1
 8003acc:	2000      	movs	r0, #0
 8003ace:	4688      	mov	r8, r1
 8003ad0:	4681      	mov	r9, r0
 8003ad2:	eb12 0a08 	adds.w	sl, r2, r8
 8003ad6:	eb43 0b09 	adc.w	fp, r3, r9
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	603b      	str	r3, [r7, #0]
 8003ae2:	607a      	str	r2, [r7, #4]
 8003ae4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003ae8:	4650      	mov	r0, sl
 8003aea:	4659      	mov	r1, fp
 8003aec:	f7fc fb76 	bl	80001dc <__aeabi_uldivmod>
 8003af0:	4602      	mov	r2, r0
 8003af2:	460b      	mov	r3, r1
 8003af4:	4613      	mov	r3, r2
 8003af6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003af8:	69bb      	ldr	r3, [r7, #24]
 8003afa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003afe:	d308      	bcc.n	8003b12 <UART_SetConfig+0x3de>
 8003b00:	69bb      	ldr	r3, [r7, #24]
 8003b02:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003b06:	d204      	bcs.n	8003b12 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	69ba      	ldr	r2, [r7, #24]
 8003b0e:	60da      	str	r2, [r3, #12]
 8003b10:	e0b6      	b.n	8003c80 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
 8003b14:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003b18:	e0b2      	b.n	8003c80 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	69db      	ldr	r3, [r3, #28]
 8003b1e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003b22:	d15e      	bne.n	8003be2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003b24:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003b28:	2b08      	cmp	r3, #8
 8003b2a:	d828      	bhi.n	8003b7e <UART_SetConfig+0x44a>
 8003b2c:	a201      	add	r2, pc, #4	@ (adr r2, 8003b34 <UART_SetConfig+0x400>)
 8003b2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b32:	bf00      	nop
 8003b34:	08003b59 	.word	0x08003b59
 8003b38:	08003b61 	.word	0x08003b61
 8003b3c:	08003b69 	.word	0x08003b69
 8003b40:	08003b7f 	.word	0x08003b7f
 8003b44:	08003b6f 	.word	0x08003b6f
 8003b48:	08003b7f 	.word	0x08003b7f
 8003b4c:	08003b7f 	.word	0x08003b7f
 8003b50:	08003b7f 	.word	0x08003b7f
 8003b54:	08003b77 	.word	0x08003b77
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b58:	f7ff f856 	bl	8002c08 <HAL_RCC_GetPCLK1Freq>
 8003b5c:	61f8      	str	r0, [r7, #28]
        break;
 8003b5e:	e014      	b.n	8003b8a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003b60:	f7ff f868 	bl	8002c34 <HAL_RCC_GetPCLK2Freq>
 8003b64:	61f8      	str	r0, [r7, #28]
        break;
 8003b66:	e010      	b.n	8003b8a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b68:	4b4d      	ldr	r3, [pc, #308]	@ (8003ca0 <UART_SetConfig+0x56c>)
 8003b6a:	61fb      	str	r3, [r7, #28]
        break;
 8003b6c:	e00d      	b.n	8003b8a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b6e:	f7fe ffb3 	bl	8002ad8 <HAL_RCC_GetSysClockFreq>
 8003b72:	61f8      	str	r0, [r7, #28]
        break;
 8003b74:	e009      	b.n	8003b8a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b76:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003b7a:	61fb      	str	r3, [r7, #28]
        break;
 8003b7c:	e005      	b.n	8003b8a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003b88:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003b8a:	69fb      	ldr	r3, [r7, #28]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d077      	beq.n	8003c80 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003b90:	69fb      	ldr	r3, [r7, #28]
 8003b92:	005a      	lsls	r2, r3, #1
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	085b      	lsrs	r3, r3, #1
 8003b9a:	441a      	add	r2, r3
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ba4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ba6:	69bb      	ldr	r3, [r7, #24]
 8003ba8:	2b0f      	cmp	r3, #15
 8003baa:	d916      	bls.n	8003bda <UART_SetConfig+0x4a6>
 8003bac:	69bb      	ldr	r3, [r7, #24]
 8003bae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003bb2:	d212      	bcs.n	8003bda <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003bb4:	69bb      	ldr	r3, [r7, #24]
 8003bb6:	b29b      	uxth	r3, r3
 8003bb8:	f023 030f 	bic.w	r3, r3, #15
 8003bbc:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003bbe:	69bb      	ldr	r3, [r7, #24]
 8003bc0:	085b      	lsrs	r3, r3, #1
 8003bc2:	b29b      	uxth	r3, r3
 8003bc4:	f003 0307 	and.w	r3, r3, #7
 8003bc8:	b29a      	uxth	r2, r3
 8003bca:	8afb      	ldrh	r3, [r7, #22]
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	8afa      	ldrh	r2, [r7, #22]
 8003bd6:	60da      	str	r2, [r3, #12]
 8003bd8:	e052      	b.n	8003c80 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003be0:	e04e      	b.n	8003c80 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003be2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003be6:	2b08      	cmp	r3, #8
 8003be8:	d827      	bhi.n	8003c3a <UART_SetConfig+0x506>
 8003bea:	a201      	add	r2, pc, #4	@ (adr r2, 8003bf0 <UART_SetConfig+0x4bc>)
 8003bec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bf0:	08003c15 	.word	0x08003c15
 8003bf4:	08003c1d 	.word	0x08003c1d
 8003bf8:	08003c25 	.word	0x08003c25
 8003bfc:	08003c3b 	.word	0x08003c3b
 8003c00:	08003c2b 	.word	0x08003c2b
 8003c04:	08003c3b 	.word	0x08003c3b
 8003c08:	08003c3b 	.word	0x08003c3b
 8003c0c:	08003c3b 	.word	0x08003c3b
 8003c10:	08003c33 	.word	0x08003c33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c14:	f7fe fff8 	bl	8002c08 <HAL_RCC_GetPCLK1Freq>
 8003c18:	61f8      	str	r0, [r7, #28]
        break;
 8003c1a:	e014      	b.n	8003c46 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c1c:	f7ff f80a 	bl	8002c34 <HAL_RCC_GetPCLK2Freq>
 8003c20:	61f8      	str	r0, [r7, #28]
        break;
 8003c22:	e010      	b.n	8003c46 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c24:	4b1e      	ldr	r3, [pc, #120]	@ (8003ca0 <UART_SetConfig+0x56c>)
 8003c26:	61fb      	str	r3, [r7, #28]
        break;
 8003c28:	e00d      	b.n	8003c46 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c2a:	f7fe ff55 	bl	8002ad8 <HAL_RCC_GetSysClockFreq>
 8003c2e:	61f8      	str	r0, [r7, #28]
        break;
 8003c30:	e009      	b.n	8003c46 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c32:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003c36:	61fb      	str	r3, [r7, #28]
        break;
 8003c38:	e005      	b.n	8003c46 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003c44:	bf00      	nop
    }

    if (pclk != 0U)
 8003c46:	69fb      	ldr	r3, [r7, #28]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d019      	beq.n	8003c80 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	085a      	lsrs	r2, r3, #1
 8003c52:	69fb      	ldr	r3, [r7, #28]
 8003c54:	441a      	add	r2, r3
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c5e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c60:	69bb      	ldr	r3, [r7, #24]
 8003c62:	2b0f      	cmp	r3, #15
 8003c64:	d909      	bls.n	8003c7a <UART_SetConfig+0x546>
 8003c66:	69bb      	ldr	r3, [r7, #24]
 8003c68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c6c:	d205      	bcs.n	8003c7a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003c6e:	69bb      	ldr	r3, [r7, #24]
 8003c70:	b29a      	uxth	r2, r3
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	60da      	str	r2, [r3, #12]
 8003c78:	e002      	b.n	8003c80 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	2200      	movs	r2, #0
 8003c84:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003c8c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8003c90:	4618      	mov	r0, r3
 8003c92:	3728      	adds	r7, #40	@ 0x28
 8003c94:	46bd      	mov	sp, r7
 8003c96:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c9a:	bf00      	nop
 8003c9c:	40008000 	.word	0x40008000
 8003ca0:	00f42400 	.word	0x00f42400

08003ca4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b083      	sub	sp, #12
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cb0:	f003 0308 	and.w	r3, r3, #8
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d00a      	beq.n	8003cce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	430a      	orrs	r2, r1
 8003ccc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cd2:	f003 0301 	and.w	r3, r3, #1
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d00a      	beq.n	8003cf0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	430a      	orrs	r2, r1
 8003cee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cf4:	f003 0302 	and.w	r3, r3, #2
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d00a      	beq.n	8003d12 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	430a      	orrs	r2, r1
 8003d10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d16:	f003 0304 	and.w	r3, r3, #4
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d00a      	beq.n	8003d34 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	430a      	orrs	r2, r1
 8003d32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d38:	f003 0310 	and.w	r3, r3, #16
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d00a      	beq.n	8003d56 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	689b      	ldr	r3, [r3, #8]
 8003d46:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	430a      	orrs	r2, r1
 8003d54:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d5a:	f003 0320 	and.w	r3, r3, #32
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d00a      	beq.n	8003d78 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	689b      	ldr	r3, [r3, #8]
 8003d68:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	430a      	orrs	r2, r1
 8003d76:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d01a      	beq.n	8003dba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	430a      	orrs	r2, r1
 8003d98:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d9e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003da2:	d10a      	bne.n	8003dba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	430a      	orrs	r2, r1
 8003db8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d00a      	beq.n	8003ddc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	430a      	orrs	r2, r1
 8003dda:	605a      	str	r2, [r3, #4]
  }
}
 8003ddc:	bf00      	nop
 8003dde:	370c      	adds	r7, #12
 8003de0:	46bd      	mov	sp, r7
 8003de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de6:	4770      	bx	lr

08003de8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b098      	sub	sp, #96	@ 0x60
 8003dec:	af02      	add	r7, sp, #8
 8003dee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2200      	movs	r2, #0
 8003df4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003df8:	f7fc ff6c 	bl	8000cd4 <HAL_GetTick>
 8003dfc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f003 0308 	and.w	r3, r3, #8
 8003e08:	2b08      	cmp	r3, #8
 8003e0a:	d12e      	bne.n	8003e6a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e0c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003e10:	9300      	str	r3, [sp, #0]
 8003e12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e14:	2200      	movs	r2, #0
 8003e16:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003e1a:	6878      	ldr	r0, [r7, #4]
 8003e1c:	f000 f88c 	bl	8003f38 <UART_WaitOnFlagUntilTimeout>
 8003e20:	4603      	mov	r3, r0
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d021      	beq.n	8003e6a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e2e:	e853 3f00 	ldrex	r3, [r3]
 8003e32:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003e34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e36:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003e3a:	653b      	str	r3, [r7, #80]	@ 0x50
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	461a      	mov	r2, r3
 8003e42:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003e44:	647b      	str	r3, [r7, #68]	@ 0x44
 8003e46:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e48:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003e4a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003e4c:	e841 2300 	strex	r3, r2, [r1]
 8003e50:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003e52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d1e6      	bne.n	8003e26 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2220      	movs	r2, #32
 8003e5c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2200      	movs	r2, #0
 8003e62:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e66:	2303      	movs	r3, #3
 8003e68:	e062      	b.n	8003f30 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f003 0304 	and.w	r3, r3, #4
 8003e74:	2b04      	cmp	r3, #4
 8003e76:	d149      	bne.n	8003f0c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e78:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003e7c:	9300      	str	r3, [sp, #0]
 8003e7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e80:	2200      	movs	r2, #0
 8003e82:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003e86:	6878      	ldr	r0, [r7, #4]
 8003e88:	f000 f856 	bl	8003f38 <UART_WaitOnFlagUntilTimeout>
 8003e8c:	4603      	mov	r3, r0
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d03c      	beq.n	8003f0c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e9a:	e853 3f00 	ldrex	r3, [r3]
 8003e9e:	623b      	str	r3, [r7, #32]
   return(result);
 8003ea0:	6a3b      	ldr	r3, [r7, #32]
 8003ea2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003ea6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	461a      	mov	r2, r3
 8003eae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003eb0:	633b      	str	r3, [r7, #48]	@ 0x30
 8003eb2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eb4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003eb6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003eb8:	e841 2300 	strex	r3, r2, [r1]
 8003ebc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003ebe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d1e6      	bne.n	8003e92 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	3308      	adds	r3, #8
 8003eca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ecc:	693b      	ldr	r3, [r7, #16]
 8003ece:	e853 3f00 	ldrex	r3, [r3]
 8003ed2:	60fb      	str	r3, [r7, #12]
   return(result);
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	f023 0301 	bic.w	r3, r3, #1
 8003eda:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	3308      	adds	r3, #8
 8003ee2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003ee4:	61fa      	str	r2, [r7, #28]
 8003ee6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ee8:	69b9      	ldr	r1, [r7, #24]
 8003eea:	69fa      	ldr	r2, [r7, #28]
 8003eec:	e841 2300 	strex	r3, r2, [r1]
 8003ef0:	617b      	str	r3, [r7, #20]
   return(result);
 8003ef2:	697b      	ldr	r3, [r7, #20]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d1e5      	bne.n	8003ec4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2220      	movs	r2, #32
 8003efc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2200      	movs	r2, #0
 8003f04:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f08:	2303      	movs	r3, #3
 8003f0a:	e011      	b.n	8003f30 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2220      	movs	r2, #32
 8003f10:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2220      	movs	r2, #32
 8003f16:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2200      	movs	r2, #0
 8003f24:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003f2e:	2300      	movs	r3, #0
}
 8003f30:	4618      	mov	r0, r3
 8003f32:	3758      	adds	r7, #88	@ 0x58
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd80      	pop	{r7, pc}

08003f38 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b084      	sub	sp, #16
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	60f8      	str	r0, [r7, #12]
 8003f40:	60b9      	str	r1, [r7, #8]
 8003f42:	603b      	str	r3, [r7, #0]
 8003f44:	4613      	mov	r3, r2
 8003f46:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f48:	e04f      	b.n	8003fea <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f4a:	69bb      	ldr	r3, [r7, #24]
 8003f4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f50:	d04b      	beq.n	8003fea <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f52:	f7fc febf 	bl	8000cd4 <HAL_GetTick>
 8003f56:	4602      	mov	r2, r0
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	1ad3      	subs	r3, r2, r3
 8003f5c:	69ba      	ldr	r2, [r7, #24]
 8003f5e:	429a      	cmp	r2, r3
 8003f60:	d302      	bcc.n	8003f68 <UART_WaitOnFlagUntilTimeout+0x30>
 8003f62:	69bb      	ldr	r3, [r7, #24]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d101      	bne.n	8003f6c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003f68:	2303      	movs	r3, #3
 8003f6a:	e04e      	b.n	800400a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f003 0304 	and.w	r3, r3, #4
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d037      	beq.n	8003fea <UART_WaitOnFlagUntilTimeout+0xb2>
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	2b80      	cmp	r3, #128	@ 0x80
 8003f7e:	d034      	beq.n	8003fea <UART_WaitOnFlagUntilTimeout+0xb2>
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	2b40      	cmp	r3, #64	@ 0x40
 8003f84:	d031      	beq.n	8003fea <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	69db      	ldr	r3, [r3, #28]
 8003f8c:	f003 0308 	and.w	r3, r3, #8
 8003f90:	2b08      	cmp	r3, #8
 8003f92:	d110      	bne.n	8003fb6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	2208      	movs	r2, #8
 8003f9a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003f9c:	68f8      	ldr	r0, [r7, #12]
 8003f9e:	f000 f838 	bl	8004012 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	2208      	movs	r2, #8
 8003fa6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	2200      	movs	r2, #0
 8003fae:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	e029      	b.n	800400a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	69db      	ldr	r3, [r3, #28]
 8003fbc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003fc0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003fc4:	d111      	bne.n	8003fea <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003fce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003fd0:	68f8      	ldr	r0, [r7, #12]
 8003fd2:	f000 f81e 	bl	8004012 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	2220      	movs	r2, #32
 8003fda:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003fe6:	2303      	movs	r3, #3
 8003fe8:	e00f      	b.n	800400a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	69da      	ldr	r2, [r3, #28]
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	4013      	ands	r3, r2
 8003ff4:	68ba      	ldr	r2, [r7, #8]
 8003ff6:	429a      	cmp	r2, r3
 8003ff8:	bf0c      	ite	eq
 8003ffa:	2301      	moveq	r3, #1
 8003ffc:	2300      	movne	r3, #0
 8003ffe:	b2db      	uxtb	r3, r3
 8004000:	461a      	mov	r2, r3
 8004002:	79fb      	ldrb	r3, [r7, #7]
 8004004:	429a      	cmp	r2, r3
 8004006:	d0a0      	beq.n	8003f4a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004008:	2300      	movs	r3, #0
}
 800400a:	4618      	mov	r0, r3
 800400c:	3710      	adds	r7, #16
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}

08004012 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004012:	b480      	push	{r7}
 8004014:	b095      	sub	sp, #84	@ 0x54
 8004016:	af00      	add	r7, sp, #0
 8004018:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004020:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004022:	e853 3f00 	ldrex	r3, [r3]
 8004026:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004028:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800402a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800402e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	461a      	mov	r2, r3
 8004036:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004038:	643b      	str	r3, [r7, #64]	@ 0x40
 800403a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800403c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800403e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004040:	e841 2300 	strex	r3, r2, [r1]
 8004044:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004046:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004048:	2b00      	cmp	r3, #0
 800404a:	d1e6      	bne.n	800401a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	3308      	adds	r3, #8
 8004052:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004054:	6a3b      	ldr	r3, [r7, #32]
 8004056:	e853 3f00 	ldrex	r3, [r3]
 800405a:	61fb      	str	r3, [r7, #28]
   return(result);
 800405c:	69fb      	ldr	r3, [r7, #28]
 800405e:	f023 0301 	bic.w	r3, r3, #1
 8004062:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	3308      	adds	r3, #8
 800406a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800406c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800406e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004070:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004072:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004074:	e841 2300 	strex	r3, r2, [r1]
 8004078:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800407a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800407c:	2b00      	cmp	r3, #0
 800407e:	d1e5      	bne.n	800404c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004084:	2b01      	cmp	r3, #1
 8004086:	d118      	bne.n	80040ba <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	e853 3f00 	ldrex	r3, [r3]
 8004094:	60bb      	str	r3, [r7, #8]
   return(result);
 8004096:	68bb      	ldr	r3, [r7, #8]
 8004098:	f023 0310 	bic.w	r3, r3, #16
 800409c:	647b      	str	r3, [r7, #68]	@ 0x44
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	461a      	mov	r2, r3
 80040a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80040a6:	61bb      	str	r3, [r7, #24]
 80040a8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040aa:	6979      	ldr	r1, [r7, #20]
 80040ac:	69ba      	ldr	r2, [r7, #24]
 80040ae:	e841 2300 	strex	r3, r2, [r1]
 80040b2:	613b      	str	r3, [r7, #16]
   return(result);
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d1e6      	bne.n	8004088 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2220      	movs	r2, #32
 80040be:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2200      	movs	r2, #0
 80040c6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2200      	movs	r2, #0
 80040cc:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80040ce:	bf00      	nop
 80040d0:	3754      	adds	r7, #84	@ 0x54
 80040d2:	46bd      	mov	sp, r7
 80040d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d8:	4770      	bx	lr
	...

080040dc <malloc>:
 80040dc:	4b02      	ldr	r3, [pc, #8]	@ (80040e8 <malloc+0xc>)
 80040de:	4601      	mov	r1, r0
 80040e0:	6818      	ldr	r0, [r3, #0]
 80040e2:	f000 b82d 	b.w	8004140 <_malloc_r>
 80040e6:	bf00      	nop
 80040e8:	2000000c 	.word	0x2000000c

080040ec <free>:
 80040ec:	4b02      	ldr	r3, [pc, #8]	@ (80040f8 <free+0xc>)
 80040ee:	4601      	mov	r1, r0
 80040f0:	6818      	ldr	r0, [r3, #0]
 80040f2:	f000 b903 	b.w	80042fc <_free_r>
 80040f6:	bf00      	nop
 80040f8:	2000000c 	.word	0x2000000c

080040fc <sbrk_aligned>:
 80040fc:	b570      	push	{r4, r5, r6, lr}
 80040fe:	4e0f      	ldr	r6, [pc, #60]	@ (800413c <sbrk_aligned+0x40>)
 8004100:	460c      	mov	r4, r1
 8004102:	6831      	ldr	r1, [r6, #0]
 8004104:	4605      	mov	r5, r0
 8004106:	b911      	cbnz	r1, 800410e <sbrk_aligned+0x12>
 8004108:	f000 f8ae 	bl	8004268 <_sbrk_r>
 800410c:	6030      	str	r0, [r6, #0]
 800410e:	4621      	mov	r1, r4
 8004110:	4628      	mov	r0, r5
 8004112:	f000 f8a9 	bl	8004268 <_sbrk_r>
 8004116:	1c43      	adds	r3, r0, #1
 8004118:	d103      	bne.n	8004122 <sbrk_aligned+0x26>
 800411a:	f04f 34ff 	mov.w	r4, #4294967295
 800411e:	4620      	mov	r0, r4
 8004120:	bd70      	pop	{r4, r5, r6, pc}
 8004122:	1cc4      	adds	r4, r0, #3
 8004124:	f024 0403 	bic.w	r4, r4, #3
 8004128:	42a0      	cmp	r0, r4
 800412a:	d0f8      	beq.n	800411e <sbrk_aligned+0x22>
 800412c:	1a21      	subs	r1, r4, r0
 800412e:	4628      	mov	r0, r5
 8004130:	f000 f89a 	bl	8004268 <_sbrk_r>
 8004134:	3001      	adds	r0, #1
 8004136:	d1f2      	bne.n	800411e <sbrk_aligned+0x22>
 8004138:	e7ef      	b.n	800411a <sbrk_aligned+0x1e>
 800413a:	bf00      	nop
 800413c:	2000015c 	.word	0x2000015c

08004140 <_malloc_r>:
 8004140:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004144:	1ccd      	adds	r5, r1, #3
 8004146:	f025 0503 	bic.w	r5, r5, #3
 800414a:	3508      	adds	r5, #8
 800414c:	2d0c      	cmp	r5, #12
 800414e:	bf38      	it	cc
 8004150:	250c      	movcc	r5, #12
 8004152:	2d00      	cmp	r5, #0
 8004154:	4606      	mov	r6, r0
 8004156:	db01      	blt.n	800415c <_malloc_r+0x1c>
 8004158:	42a9      	cmp	r1, r5
 800415a:	d904      	bls.n	8004166 <_malloc_r+0x26>
 800415c:	230c      	movs	r3, #12
 800415e:	6033      	str	r3, [r6, #0]
 8004160:	2000      	movs	r0, #0
 8004162:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004166:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800423c <_malloc_r+0xfc>
 800416a:	f000 f869 	bl	8004240 <__malloc_lock>
 800416e:	f8d8 3000 	ldr.w	r3, [r8]
 8004172:	461c      	mov	r4, r3
 8004174:	bb44      	cbnz	r4, 80041c8 <_malloc_r+0x88>
 8004176:	4629      	mov	r1, r5
 8004178:	4630      	mov	r0, r6
 800417a:	f7ff ffbf 	bl	80040fc <sbrk_aligned>
 800417e:	1c43      	adds	r3, r0, #1
 8004180:	4604      	mov	r4, r0
 8004182:	d158      	bne.n	8004236 <_malloc_r+0xf6>
 8004184:	f8d8 4000 	ldr.w	r4, [r8]
 8004188:	4627      	mov	r7, r4
 800418a:	2f00      	cmp	r7, #0
 800418c:	d143      	bne.n	8004216 <_malloc_r+0xd6>
 800418e:	2c00      	cmp	r4, #0
 8004190:	d04b      	beq.n	800422a <_malloc_r+0xea>
 8004192:	6823      	ldr	r3, [r4, #0]
 8004194:	4639      	mov	r1, r7
 8004196:	4630      	mov	r0, r6
 8004198:	eb04 0903 	add.w	r9, r4, r3
 800419c:	f000 f864 	bl	8004268 <_sbrk_r>
 80041a0:	4581      	cmp	r9, r0
 80041a2:	d142      	bne.n	800422a <_malloc_r+0xea>
 80041a4:	6821      	ldr	r1, [r4, #0]
 80041a6:	1a6d      	subs	r5, r5, r1
 80041a8:	4629      	mov	r1, r5
 80041aa:	4630      	mov	r0, r6
 80041ac:	f7ff ffa6 	bl	80040fc <sbrk_aligned>
 80041b0:	3001      	adds	r0, #1
 80041b2:	d03a      	beq.n	800422a <_malloc_r+0xea>
 80041b4:	6823      	ldr	r3, [r4, #0]
 80041b6:	442b      	add	r3, r5
 80041b8:	6023      	str	r3, [r4, #0]
 80041ba:	f8d8 3000 	ldr.w	r3, [r8]
 80041be:	685a      	ldr	r2, [r3, #4]
 80041c0:	bb62      	cbnz	r2, 800421c <_malloc_r+0xdc>
 80041c2:	f8c8 7000 	str.w	r7, [r8]
 80041c6:	e00f      	b.n	80041e8 <_malloc_r+0xa8>
 80041c8:	6822      	ldr	r2, [r4, #0]
 80041ca:	1b52      	subs	r2, r2, r5
 80041cc:	d420      	bmi.n	8004210 <_malloc_r+0xd0>
 80041ce:	2a0b      	cmp	r2, #11
 80041d0:	d917      	bls.n	8004202 <_malloc_r+0xc2>
 80041d2:	1961      	adds	r1, r4, r5
 80041d4:	42a3      	cmp	r3, r4
 80041d6:	6025      	str	r5, [r4, #0]
 80041d8:	bf18      	it	ne
 80041da:	6059      	strne	r1, [r3, #4]
 80041dc:	6863      	ldr	r3, [r4, #4]
 80041de:	bf08      	it	eq
 80041e0:	f8c8 1000 	streq.w	r1, [r8]
 80041e4:	5162      	str	r2, [r4, r5]
 80041e6:	604b      	str	r3, [r1, #4]
 80041e8:	4630      	mov	r0, r6
 80041ea:	f000 f82f 	bl	800424c <__malloc_unlock>
 80041ee:	f104 000b 	add.w	r0, r4, #11
 80041f2:	1d23      	adds	r3, r4, #4
 80041f4:	f020 0007 	bic.w	r0, r0, #7
 80041f8:	1ac2      	subs	r2, r0, r3
 80041fa:	bf1c      	itt	ne
 80041fc:	1a1b      	subne	r3, r3, r0
 80041fe:	50a3      	strne	r3, [r4, r2]
 8004200:	e7af      	b.n	8004162 <_malloc_r+0x22>
 8004202:	6862      	ldr	r2, [r4, #4]
 8004204:	42a3      	cmp	r3, r4
 8004206:	bf0c      	ite	eq
 8004208:	f8c8 2000 	streq.w	r2, [r8]
 800420c:	605a      	strne	r2, [r3, #4]
 800420e:	e7eb      	b.n	80041e8 <_malloc_r+0xa8>
 8004210:	4623      	mov	r3, r4
 8004212:	6864      	ldr	r4, [r4, #4]
 8004214:	e7ae      	b.n	8004174 <_malloc_r+0x34>
 8004216:	463c      	mov	r4, r7
 8004218:	687f      	ldr	r7, [r7, #4]
 800421a:	e7b6      	b.n	800418a <_malloc_r+0x4a>
 800421c:	461a      	mov	r2, r3
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	42a3      	cmp	r3, r4
 8004222:	d1fb      	bne.n	800421c <_malloc_r+0xdc>
 8004224:	2300      	movs	r3, #0
 8004226:	6053      	str	r3, [r2, #4]
 8004228:	e7de      	b.n	80041e8 <_malloc_r+0xa8>
 800422a:	230c      	movs	r3, #12
 800422c:	6033      	str	r3, [r6, #0]
 800422e:	4630      	mov	r0, r6
 8004230:	f000 f80c 	bl	800424c <__malloc_unlock>
 8004234:	e794      	b.n	8004160 <_malloc_r+0x20>
 8004236:	6005      	str	r5, [r0, #0]
 8004238:	e7d6      	b.n	80041e8 <_malloc_r+0xa8>
 800423a:	bf00      	nop
 800423c:	20000160 	.word	0x20000160

08004240 <__malloc_lock>:
 8004240:	4801      	ldr	r0, [pc, #4]	@ (8004248 <__malloc_lock+0x8>)
 8004242:	f000 b84b 	b.w	80042dc <__retarget_lock_acquire_recursive>
 8004246:	bf00      	nop
 8004248:	200002a0 	.word	0x200002a0

0800424c <__malloc_unlock>:
 800424c:	4801      	ldr	r0, [pc, #4]	@ (8004254 <__malloc_unlock+0x8>)
 800424e:	f000 b846 	b.w	80042de <__retarget_lock_release_recursive>
 8004252:	bf00      	nop
 8004254:	200002a0 	.word	0x200002a0

08004258 <memset>:
 8004258:	4402      	add	r2, r0
 800425a:	4603      	mov	r3, r0
 800425c:	4293      	cmp	r3, r2
 800425e:	d100      	bne.n	8004262 <memset+0xa>
 8004260:	4770      	bx	lr
 8004262:	f803 1b01 	strb.w	r1, [r3], #1
 8004266:	e7f9      	b.n	800425c <memset+0x4>

08004268 <_sbrk_r>:
 8004268:	b538      	push	{r3, r4, r5, lr}
 800426a:	4d06      	ldr	r5, [pc, #24]	@ (8004284 <_sbrk_r+0x1c>)
 800426c:	2300      	movs	r3, #0
 800426e:	4604      	mov	r4, r0
 8004270:	4608      	mov	r0, r1
 8004272:	602b      	str	r3, [r5, #0]
 8004274:	f7fc fc4c 	bl	8000b10 <_sbrk>
 8004278:	1c43      	adds	r3, r0, #1
 800427a:	d102      	bne.n	8004282 <_sbrk_r+0x1a>
 800427c:	682b      	ldr	r3, [r5, #0]
 800427e:	b103      	cbz	r3, 8004282 <_sbrk_r+0x1a>
 8004280:	6023      	str	r3, [r4, #0]
 8004282:	bd38      	pop	{r3, r4, r5, pc}
 8004284:	2000029c 	.word	0x2000029c

08004288 <__errno>:
 8004288:	4b01      	ldr	r3, [pc, #4]	@ (8004290 <__errno+0x8>)
 800428a:	6818      	ldr	r0, [r3, #0]
 800428c:	4770      	bx	lr
 800428e:	bf00      	nop
 8004290:	2000000c 	.word	0x2000000c

08004294 <__libc_init_array>:
 8004294:	b570      	push	{r4, r5, r6, lr}
 8004296:	4d0d      	ldr	r5, [pc, #52]	@ (80042cc <__libc_init_array+0x38>)
 8004298:	4c0d      	ldr	r4, [pc, #52]	@ (80042d0 <__libc_init_array+0x3c>)
 800429a:	1b64      	subs	r4, r4, r5
 800429c:	10a4      	asrs	r4, r4, #2
 800429e:	2600      	movs	r6, #0
 80042a0:	42a6      	cmp	r6, r4
 80042a2:	d109      	bne.n	80042b8 <__libc_init_array+0x24>
 80042a4:	4d0b      	ldr	r5, [pc, #44]	@ (80042d4 <__libc_init_array+0x40>)
 80042a6:	4c0c      	ldr	r4, [pc, #48]	@ (80042d8 <__libc_init_array+0x44>)
 80042a8:	f000 f872 	bl	8004390 <_init>
 80042ac:	1b64      	subs	r4, r4, r5
 80042ae:	10a4      	asrs	r4, r4, #2
 80042b0:	2600      	movs	r6, #0
 80042b2:	42a6      	cmp	r6, r4
 80042b4:	d105      	bne.n	80042c2 <__libc_init_array+0x2e>
 80042b6:	bd70      	pop	{r4, r5, r6, pc}
 80042b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80042bc:	4798      	blx	r3
 80042be:	3601      	adds	r6, #1
 80042c0:	e7ee      	b.n	80042a0 <__libc_init_array+0xc>
 80042c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80042c6:	4798      	blx	r3
 80042c8:	3601      	adds	r6, #1
 80042ca:	e7f2      	b.n	80042b2 <__libc_init_array+0x1e>
 80042cc:	08004408 	.word	0x08004408
 80042d0:	08004408 	.word	0x08004408
 80042d4:	08004408 	.word	0x08004408
 80042d8:	0800440c 	.word	0x0800440c

080042dc <__retarget_lock_acquire_recursive>:
 80042dc:	4770      	bx	lr

080042de <__retarget_lock_release_recursive>:
 80042de:	4770      	bx	lr

080042e0 <memcpy>:
 80042e0:	440a      	add	r2, r1
 80042e2:	4291      	cmp	r1, r2
 80042e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80042e8:	d100      	bne.n	80042ec <memcpy+0xc>
 80042ea:	4770      	bx	lr
 80042ec:	b510      	push	{r4, lr}
 80042ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80042f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80042f6:	4291      	cmp	r1, r2
 80042f8:	d1f9      	bne.n	80042ee <memcpy+0xe>
 80042fa:	bd10      	pop	{r4, pc}

080042fc <_free_r>:
 80042fc:	b538      	push	{r3, r4, r5, lr}
 80042fe:	4605      	mov	r5, r0
 8004300:	2900      	cmp	r1, #0
 8004302:	d041      	beq.n	8004388 <_free_r+0x8c>
 8004304:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004308:	1f0c      	subs	r4, r1, #4
 800430a:	2b00      	cmp	r3, #0
 800430c:	bfb8      	it	lt
 800430e:	18e4      	addlt	r4, r4, r3
 8004310:	f7ff ff96 	bl	8004240 <__malloc_lock>
 8004314:	4a1d      	ldr	r2, [pc, #116]	@ (800438c <_free_r+0x90>)
 8004316:	6813      	ldr	r3, [r2, #0]
 8004318:	b933      	cbnz	r3, 8004328 <_free_r+0x2c>
 800431a:	6063      	str	r3, [r4, #4]
 800431c:	6014      	str	r4, [r2, #0]
 800431e:	4628      	mov	r0, r5
 8004320:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004324:	f7ff bf92 	b.w	800424c <__malloc_unlock>
 8004328:	42a3      	cmp	r3, r4
 800432a:	d908      	bls.n	800433e <_free_r+0x42>
 800432c:	6820      	ldr	r0, [r4, #0]
 800432e:	1821      	adds	r1, r4, r0
 8004330:	428b      	cmp	r3, r1
 8004332:	bf01      	itttt	eq
 8004334:	6819      	ldreq	r1, [r3, #0]
 8004336:	685b      	ldreq	r3, [r3, #4]
 8004338:	1809      	addeq	r1, r1, r0
 800433a:	6021      	streq	r1, [r4, #0]
 800433c:	e7ed      	b.n	800431a <_free_r+0x1e>
 800433e:	461a      	mov	r2, r3
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	b10b      	cbz	r3, 8004348 <_free_r+0x4c>
 8004344:	42a3      	cmp	r3, r4
 8004346:	d9fa      	bls.n	800433e <_free_r+0x42>
 8004348:	6811      	ldr	r1, [r2, #0]
 800434a:	1850      	adds	r0, r2, r1
 800434c:	42a0      	cmp	r0, r4
 800434e:	d10b      	bne.n	8004368 <_free_r+0x6c>
 8004350:	6820      	ldr	r0, [r4, #0]
 8004352:	4401      	add	r1, r0
 8004354:	1850      	adds	r0, r2, r1
 8004356:	4283      	cmp	r3, r0
 8004358:	6011      	str	r1, [r2, #0]
 800435a:	d1e0      	bne.n	800431e <_free_r+0x22>
 800435c:	6818      	ldr	r0, [r3, #0]
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	6053      	str	r3, [r2, #4]
 8004362:	4408      	add	r0, r1
 8004364:	6010      	str	r0, [r2, #0]
 8004366:	e7da      	b.n	800431e <_free_r+0x22>
 8004368:	d902      	bls.n	8004370 <_free_r+0x74>
 800436a:	230c      	movs	r3, #12
 800436c:	602b      	str	r3, [r5, #0]
 800436e:	e7d6      	b.n	800431e <_free_r+0x22>
 8004370:	6820      	ldr	r0, [r4, #0]
 8004372:	1821      	adds	r1, r4, r0
 8004374:	428b      	cmp	r3, r1
 8004376:	bf04      	itt	eq
 8004378:	6819      	ldreq	r1, [r3, #0]
 800437a:	685b      	ldreq	r3, [r3, #4]
 800437c:	6063      	str	r3, [r4, #4]
 800437e:	bf04      	itt	eq
 8004380:	1809      	addeq	r1, r1, r0
 8004382:	6021      	streq	r1, [r4, #0]
 8004384:	6054      	str	r4, [r2, #4]
 8004386:	e7ca      	b.n	800431e <_free_r+0x22>
 8004388:	bd38      	pop	{r3, r4, r5, pc}
 800438a:	bf00      	nop
 800438c:	20000160 	.word	0x20000160

08004390 <_init>:
 8004390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004392:	bf00      	nop
 8004394:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004396:	bc08      	pop	{r3}
 8004398:	469e      	mov	lr, r3
 800439a:	4770      	bx	lr

0800439c <_fini>:
 800439c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800439e:	bf00      	nop
 80043a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043a2:	bc08      	pop	{r3}
 80043a4:	469e      	mov	lr, r3
 80043a6:	4770      	bx	lr
