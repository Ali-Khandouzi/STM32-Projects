
PowerManagement1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000044d4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000134  08004664  08004664  00005664  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004798  08004798  0000605c  2**0
                  CONTENTS
  4 .ARM          00000008  08004798  08004798  00005798  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080047a0  080047a0  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080047a0  080047a0  000057a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080047a4  080047a4  000057a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080047a8  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f4  2000005c  08004804  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000250  08004804  00006250  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bfbe  00000000  00000000  0000608c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bdc  00000000  00000000  0001204a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009b0  00000000  00000000  00013c28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000075e  00000000  00000000  000145d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025dfb  00000000  00000000  00014d36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bf73  00000000  00000000  0003ab31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e7ac3  00000000  00000000  00046aa4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012e567  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b3c  00000000  00000000  0012e5ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  001310e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800464c 	.word	0x0800464c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	0800464c 	.word	0x0800464c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <main>:
void StopMode(void);
void MX_GPIO_Deinit(void);
void MX_GPIO_Init(void);
void MX_USART2_UART_Init(void);

int main(void) {
 8000570:	b580      	push	{r7, lr}
 8000572:	b08a      	sub	sp, #40	@ 0x28
 8000574:	af00      	add	r7, sp, #0
  char msg[30];

  HAL_Init();
 8000576:	f000 fcb1 	bl	8000edc <HAL_Init>
  Nucleo_BSP_Init();
 800057a:	f000 f9b5 	bl	80008e8 <Nucleo_BSP_Init>

  /* Before we can access to every register of the PWR peripheral we must enable it */
  __HAL_RCC_PWR_CLK_ENABLE();
 800057e:	4b6c      	ldr	r3, [pc, #432]	@ (8000730 <main+0x1c0>)
 8000580:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000582:	4a6b      	ldr	r2, [pc, #428]	@ (8000730 <main+0x1c0>)
 8000584:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000588:	6593      	str	r3, [r2, #88]	@ 0x58
 800058a:	4b69      	ldr	r3, [pc, #420]	@ (8000730 <main+0x1c0>)
 800058c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800058e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000592:	607b      	str	r3, [r7, #4]
 8000594:	687b      	ldr	r3, [r7, #4]

  while (1) {
    if(__HAL_PWR_GET_FLAG(PWR_FLAG_SB)) {
 8000596:	4b67      	ldr	r3, [pc, #412]	@ (8000734 <main+0x1c4>)
 8000598:	691b      	ldr	r3, [r3, #16]
 800059a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d01a      	beq.n	80005d8 <main+0x68>
      /* If standby flag set in PWR->CSR, then the reset is generated from
       * the exit of the standby mode */
      sprintf(msg, "RESET after STANDBY mode\r\n");
 80005a2:	f107 0308 	add.w	r3, r7, #8
 80005a6:	4964      	ldr	r1, [pc, #400]	@ (8000738 <main+0x1c8>)
 80005a8:	4618      	mov	r0, r3
 80005aa:	f003 fbaf 	bl	8003d0c <siprintf>
      HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80005ae:	f107 0308 	add.w	r3, r7, #8
 80005b2:	4618      	mov	r0, r3
 80005b4:	f7ff fe0c 	bl	80001d0 <strlen>
 80005b8:	4603      	mov	r3, r0
 80005ba:	b29a      	uxth	r2, r3
 80005bc:	f107 0108 	add.w	r1, r7, #8
 80005c0:	f04f 33ff 	mov.w	r3, #4294967295
 80005c4:	485d      	ldr	r0, [pc, #372]	@ (800073c <main+0x1cc>)
 80005c6:	f002 fe44 	bl	8003252 <HAL_UART_Transmit>
      /* We have to explicitly clear the flag */
      __HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB);
 80005ca:	4b5a      	ldr	r3, [pc, #360]	@ (8000734 <main+0x1c4>)
 80005cc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80005d0:	619a      	str	r2, [r3, #24]
      __HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 80005d2:	4b58      	ldr	r3, [pc, #352]	@ (8000734 <main+0x1c4>)
 80005d4:	221f      	movs	r2, #31
 80005d6:	619a      	str	r2, [r3, #24]
    }

    sprintf(msg, "MCU in run mode\r\n");
 80005d8:	f107 0308 	add.w	r3, r7, #8
 80005dc:	4958      	ldr	r1, [pc, #352]	@ (8000740 <main+0x1d0>)
 80005de:	4618      	mov	r0, r3
 80005e0:	f003 fb94 	bl	8003d0c <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80005e4:	f107 0308 	add.w	r3, r7, #8
 80005e8:	4618      	mov	r0, r3
 80005ea:	f7ff fdf1 	bl	80001d0 <strlen>
 80005ee:	4603      	mov	r3, r0
 80005f0:	b29a      	uxth	r2, r3
 80005f2:	f107 0108 	add.w	r1, r7, #8
 80005f6:	f04f 33ff 	mov.w	r3, #4294967295
 80005fa:	4850      	ldr	r0, [pc, #320]	@ (800073c <main+0x1cc>)
 80005fc:	f002 fe29 	bl	8003252 <HAL_UART_Transmit>
    while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_SET) {
 8000600:	e007      	b.n	8000612 <main+0xa2>
      HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000602:	2120      	movs	r1, #32
 8000604:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000608:	f001 f90c 	bl	8001824 <HAL_GPIO_TogglePin>
      HAL_Delay(100);
 800060c:	2064      	movs	r0, #100	@ 0x64
 800060e:	f000 fce1 	bl	8000fd4 <HAL_Delay>
    while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_SET) {
 8000612:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000616:	484b      	ldr	r0, [pc, #300]	@ (8000744 <main+0x1d4>)
 8000618:	f001 f8ec 	bl	80017f4 <HAL_GPIO_ReadPin>
 800061c:	4603      	mov	r3, r0
 800061e:	2b01      	cmp	r3, #1
 8000620:	d0ef      	beq.n	8000602 <main+0x92>
    }

    HAL_Delay(200);
 8000622:	20c8      	movs	r0, #200	@ 0xc8
 8000624:	f000 fcd6 	bl	8000fd4 <HAL_Delay>

    sprintf(msg, "Entering in SLEEP mode\r\n");
 8000628:	f107 0308 	add.w	r3, r7, #8
 800062c:	4946      	ldr	r1, [pc, #280]	@ (8000748 <main+0x1d8>)
 800062e:	4618      	mov	r0, r3
 8000630:	f003 fb6c 	bl	8003d0c <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000634:	f107 0308 	add.w	r3, r7, #8
 8000638:	4618      	mov	r0, r3
 800063a:	f7ff fdc9 	bl	80001d0 <strlen>
 800063e:	4603      	mov	r3, r0
 8000640:	b29a      	uxth	r2, r3
 8000642:	f107 0108 	add.w	r1, r7, #8
 8000646:	f04f 33ff 	mov.w	r3, #4294967295
 800064a:	483c      	ldr	r0, [pc, #240]	@ (800073c <main+0x1cc>)
 800064c:	f002 fe01 	bl	8003252 <HAL_UART_Transmit>

    SleepMode();
 8000650:	f000 f884 	bl	800075c <SleepMode>

    sprintf(msg, "Exiting from SLEEP mode\r\n");
 8000654:	f107 0308 	add.w	r3, r7, #8
 8000658:	493c      	ldr	r1, [pc, #240]	@ (800074c <main+0x1dc>)
 800065a:	4618      	mov	r0, r3
 800065c:	f003 fb56 	bl	8003d0c <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000660:	f107 0308 	add.w	r3, r7, #8
 8000664:	4618      	mov	r0, r3
 8000666:	f7ff fdb3 	bl	80001d0 <strlen>
 800066a:	4603      	mov	r3, r0
 800066c:	b29a      	uxth	r2, r3
 800066e:	f107 0108 	add.w	r1, r7, #8
 8000672:	f04f 33ff 	mov.w	r3, #4294967295
 8000676:	4831      	ldr	r0, [pc, #196]	@ (800073c <main+0x1cc>)
 8000678:	f002 fdeb 	bl	8003252 <HAL_UART_Transmit>

    while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_SET);
 800067c:	bf00      	nop
 800067e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000682:	4830      	ldr	r0, [pc, #192]	@ (8000744 <main+0x1d4>)
 8000684:	f001 f8b6 	bl	80017f4 <HAL_GPIO_ReadPin>
 8000688:	4603      	mov	r3, r0
 800068a:	2b01      	cmp	r3, #1
 800068c:	d0f7      	beq.n	800067e <main+0x10e>
    HAL_Delay(200);
 800068e:	20c8      	movs	r0, #200	@ 0xc8
 8000690:	f000 fca0 	bl	8000fd4 <HAL_Delay>

    sprintf(msg, "Entering in STOP mode\r\n");
 8000694:	f107 0308 	add.w	r3, r7, #8
 8000698:	492d      	ldr	r1, [pc, #180]	@ (8000750 <main+0x1e0>)
 800069a:	4618      	mov	r0, r3
 800069c:	f003 fb36 	bl	8003d0c <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80006a0:	f107 0308 	add.w	r3, r7, #8
 80006a4:	4618      	mov	r0, r3
 80006a6:	f7ff fd93 	bl	80001d0 <strlen>
 80006aa:	4603      	mov	r3, r0
 80006ac:	b29a      	uxth	r2, r3
 80006ae:	f107 0108 	add.w	r1, r7, #8
 80006b2:	f04f 33ff 	mov.w	r3, #4294967295
 80006b6:	4821      	ldr	r0, [pc, #132]	@ (800073c <main+0x1cc>)
 80006b8:	f002 fdcb 	bl	8003252 <HAL_UART_Transmit>

    StopMode();
 80006bc:	f000 f892 	bl	80007e4 <StopMode>

    sprintf(msg, "Exiting from STOP mode\r\n");
 80006c0:	f107 0308 	add.w	r3, r7, #8
 80006c4:	4923      	ldr	r1, [pc, #140]	@ (8000754 <main+0x1e4>)
 80006c6:	4618      	mov	r0, r3
 80006c8:	f003 fb20 	bl	8003d0c <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80006cc:	f107 0308 	add.w	r3, r7, #8
 80006d0:	4618      	mov	r0, r3
 80006d2:	f7ff fd7d 	bl	80001d0 <strlen>
 80006d6:	4603      	mov	r3, r0
 80006d8:	b29a      	uxth	r2, r3
 80006da:	f107 0108 	add.w	r1, r7, #8
 80006de:	f04f 33ff 	mov.w	r3, #4294967295
 80006e2:	4816      	ldr	r0, [pc, #88]	@ (800073c <main+0x1cc>)
 80006e4:	f002 fdb5 	bl	8003252 <HAL_UART_Transmit>

    while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_SET);
 80006e8:	bf00      	nop
 80006ea:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80006ee:	4815      	ldr	r0, [pc, #84]	@ (8000744 <main+0x1d4>)
 80006f0:	f001 f880 	bl	80017f4 <HAL_GPIO_ReadPin>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b01      	cmp	r3, #1
 80006f8:	d0f7      	beq.n	80006ea <main+0x17a>
    HAL_Delay(200);
 80006fa:	20c8      	movs	r0, #200	@ 0xc8
 80006fc:	f000 fc6a 	bl	8000fd4 <HAL_Delay>

    sprintf(msg, "Entering in STANDBY mode\r\n");
 8000700:	f107 0308 	add.w	r3, r7, #8
 8000704:	4914      	ldr	r1, [pc, #80]	@ (8000758 <main+0x1e8>)
 8000706:	4618      	mov	r0, r3
 8000708:	f003 fb00 	bl	8003d0c <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 800070c:	f107 0308 	add.w	r3, r7, #8
 8000710:	4618      	mov	r0, r3
 8000712:	f7ff fd5d 	bl	80001d0 <strlen>
 8000716:	4603      	mov	r3, r0
 8000718:	b29a      	uxth	r2, r3
 800071a:	f107 0108 	add.w	r1, r7, #8
 800071e:	f04f 33ff 	mov.w	r3, #4294967295
 8000722:	4806      	ldr	r0, [pc, #24]	@ (800073c <main+0x1cc>)
 8000724:	f002 fd95 	bl	8003252 <HAL_UART_Transmit>

    StandbyMode();
 8000728:	f000 f8a2 	bl	8000870 <StandbyMode>

    while(1); //Never arrives here, since MCU is reset when exiting from STANDBY
 800072c:	bf00      	nop
 800072e:	e7fd      	b.n	800072c <main+0x1bc>
 8000730:	40021000 	.word	0x40021000
 8000734:	40007000 	.word	0x40007000
 8000738:	08004664 	.word	0x08004664
 800073c:	20000078 	.word	0x20000078
 8000740:	08004680 	.word	0x08004680
 8000744:	48000800 	.word	0x48000800
 8000748:	08004694 	.word	0x08004694
 800074c:	080046b0 	.word	0x080046b0
 8000750:	080046cc 	.word	0x080046cc
 8000754:	080046e4 	.word	0x080046e4
 8000758:	08004700 	.word	0x08004700

0800075c <SleepMode>:
  }
}


void SleepMode(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b088      	sub	sp, #32
 8000760:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;

  /* Disable all GPIOs to reduce power */
  MX_GPIO_Deinit();
 8000762:	f000 f997 	bl	8000a94 <MX_GPIO_Deinit>

  /* Configure User push-button as external interrupt generator */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000766:	4b1c      	ldr	r3, [pc, #112]	@ (80007d8 <SleepMode+0x7c>)
 8000768:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800076a:	4a1b      	ldr	r2, [pc, #108]	@ (80007d8 <SleepMode+0x7c>)
 800076c:	f043 0304 	orr.w	r3, r3, #4
 8000770:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000772:	4b19      	ldr	r3, [pc, #100]	@ (80007d8 <SleepMode+0x7c>)
 8000774:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000776:	f003 0304 	and.w	r3, r3, #4
 800077a:	60bb      	str	r3, [r7, #8]
 800077c:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitStruct.Pin = B1_Pin;
 800077e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000782:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000784:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000788:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078a:	2300      	movs	r3, #0
 800078c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800078e:	f107 030c 	add.w	r3, r7, #12
 8000792:	4619      	mov	r1, r3
 8000794:	4811      	ldr	r0, [pc, #68]	@ (80007dc <SleepMode+0x80>)
 8000796:	f000 fd8f 	bl	80012b8 <HAL_GPIO_Init>

  HAL_UART_DeInit(&huart2);
 800079a:	4811      	ldr	r0, [pc, #68]	@ (80007e0 <SleepMode+0x84>)
 800079c:	f002 fd1c 	bl	80031d8 <HAL_UART_DeInit>

  /* Suspend Tick increment to prevent wakeup by Systick interrupt.
     Otherwise the Systick interrupt will wake up the device within 1ms (HAL time base) */
  HAL_SuspendTick();
 80007a0:	f000 fc3c 	bl	800101c <HAL_SuspendTick>

  __HAL_RCC_PWR_CLK_ENABLE();
 80007a4:	4b0c      	ldr	r3, [pc, #48]	@ (80007d8 <SleepMode+0x7c>)
 80007a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007a8:	4a0b      	ldr	r2, [pc, #44]	@ (80007d8 <SleepMode+0x7c>)
 80007aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007ae:	6593      	str	r3, [r2, #88]	@ 0x58
 80007b0:	4b09      	ldr	r3, [pc, #36]	@ (80007d8 <SleepMode+0x7c>)
 80007b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007b8:	607b      	str	r3, [r7, #4]
 80007ba:	687b      	ldr	r3, [r7, #4]

  /* Request to enter SLEEP mode */
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 80007bc:	2101      	movs	r1, #1
 80007be:	2000      	movs	r0, #0
 80007c0:	f001 f898 	bl	80018f4 <HAL_PWR_EnterSLEEPMode>

  /* Resume Tick interrupt if disabled prior to sleep mode entry*/
  HAL_ResumeTick();
 80007c4:	f000 fc3a 	bl	800103c <HAL_ResumeTick>

  /* Reinitialize GPIOs */
  MX_GPIO_Init();
 80007c8:	f000 f91c 	bl	8000a04 <MX_GPIO_Init>

  /* Reinitialize UART2 */
  MX_USART2_UART_Init();
 80007cc:	f000 f8f6 	bl	80009bc <MX_USART2_UART_Init>
}
 80007d0:	bf00      	nop
 80007d2:	3720      	adds	r7, #32
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	40021000 	.word	0x40021000
 80007dc:	48000800 	.word	0x48000800
 80007e0:	20000078 	.word	0x20000078

080007e4 <StopMode>:

void StopMode(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b088      	sub	sp, #32
 80007e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;

  /* Disable all GPIOs to reduce power */
  MX_GPIO_Deinit();
 80007ea:	f000 f953 	bl	8000a94 <MX_GPIO_Deinit>

  /* Configure User push-button as external interrupt generator */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ee:	4b1d      	ldr	r3, [pc, #116]	@ (8000864 <StopMode+0x80>)
 80007f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007f2:	4a1c      	ldr	r2, [pc, #112]	@ (8000864 <StopMode+0x80>)
 80007f4:	f043 0304 	orr.w	r3, r3, #4
 80007f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007fa:	4b1a      	ldr	r3, [pc, #104]	@ (8000864 <StopMode+0x80>)
 80007fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007fe:	f003 0304 	and.w	r3, r3, #4
 8000802:	60bb      	str	r3, [r7, #8]
 8000804:	68bb      	ldr	r3, [r7, #8]
  GPIO_InitStruct.Pin = B1_Pin;
 8000806:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800080a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800080c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000810:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000812:	2300      	movs	r3, #0
 8000814:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000816:	f107 030c 	add.w	r3, r7, #12
 800081a:	4619      	mov	r1, r3
 800081c:	4812      	ldr	r0, [pc, #72]	@ (8000868 <StopMode+0x84>)
 800081e:	f000 fd4b 	bl	80012b8 <HAL_GPIO_Init>

  HAL_UART_DeInit(&huart2);
 8000822:	4812      	ldr	r0, [pc, #72]	@ (800086c <StopMode+0x88>)
 8000824:	f002 fcd8 	bl	80031d8 <HAL_UART_DeInit>

  /* Suspend Tick increment to prevent wakeup by Systick interrupt.
     Otherwise the Systick interrupt will wake up the device within 1ms (HAL time base) */
  HAL_SuspendTick();
 8000828:	f000 fbf8 	bl	800101c <HAL_SuspendTick>

  /* We enable again the PWR peripheral */
  __HAL_RCC_PWR_CLK_ENABLE();
 800082c:	4b0d      	ldr	r3, [pc, #52]	@ (8000864 <StopMode+0x80>)
 800082e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000830:	4a0c      	ldr	r2, [pc, #48]	@ (8000864 <StopMode+0x80>)
 8000832:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000836:	6593      	str	r3, [r2, #88]	@ 0x58
 8000838:	4b0a      	ldr	r3, [pc, #40]	@ (8000864 <StopMode+0x80>)
 800083a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800083c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000840:	607b      	str	r3, [r7, #4]
 8000842:	687b      	ldr	r3, [r7, #4]

  /* Request to enter SLEEP mode */
  HAL_PWR_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8000844:	2101      	movs	r1, #1
 8000846:	2000      	movs	r0, #0
 8000848:	f001 f888 	bl	800195c <HAL_PWR_EnterSTOPMode>

  /* This caused that the SystemClock_Config() is called */
  Nucleo_BSP_Init();
 800084c:	f000 f84c 	bl	80008e8 <Nucleo_BSP_Init>

  /* Resume Tick interrupt if disabled prior to sleep mode entry*/
  HAL_ResumeTick();
 8000850:	f000 fbf4 	bl	800103c <HAL_ResumeTick>

  /* Reinitialize GPIOs */
  MX_GPIO_Init();
 8000854:	f000 f8d6 	bl	8000a04 <MX_GPIO_Init>

  /* Reinitialize UART2 */
  MX_USART2_UART_Init();
 8000858:	f000 f8b0 	bl	80009bc <MX_USART2_UART_Init>
}
 800085c:	bf00      	nop
 800085e:	3720      	adds	r7, #32
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}
 8000864:	40021000 	.word	0x40021000
 8000868:	48000800 	.word	0x48000800
 800086c:	20000078 	.word	0x20000078

08000870 <StandbyMode>:


void StandbyMode(void) {
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0
  MX_GPIO_Deinit();
 8000876:	f000 f90d 	bl	8000a94 <MX_GPIO_Deinit>

  __HAL_RCC_PWR_CLK_ENABLE();
 800087a:	4b0d      	ldr	r3, [pc, #52]	@ (80008b0 <StandbyMode+0x40>)
 800087c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800087e:	4a0c      	ldr	r2, [pc, #48]	@ (80008b0 <StandbyMode+0x40>)
 8000880:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000884:	6593      	str	r3, [r2, #88]	@ 0x58
 8000886:	4b0a      	ldr	r3, [pc, #40]	@ (80008b0 <StandbyMode+0x40>)
 8000888:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800088a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800088e:	607b      	str	r3, [r7, #4]
 8000890:	687b      	ldr	r3, [r7, #4]

  HAL_PWR_DisableWakeUpPin(PWR_WAKEUP_PIN1);
 8000892:	2001      	movs	r0, #1
 8000894:	f001 f818 	bl	80018c8 <HAL_PWR_DisableWakeUpPin>

  /* Clear PWR wake up Flag */
  __HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 8000898:	4b06      	ldr	r3, [pc, #24]	@ (80008b4 <StandbyMode+0x44>)
 800089a:	221f      	movs	r2, #31
 800089c:	619a      	str	r2, [r3, #24]

  /* Enable WKUP pin */
  HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN1);
 800089e:	2001      	movs	r0, #1
 80008a0:	f000 fff2 	bl	8001888 <HAL_PWR_EnableWakeUpPin>

  /* Enter STANDBY mode */
  HAL_PWR_EnterSTANDBYMode();
 80008a4:	f001 f872 	bl	800198c <HAL_PWR_EnterSTANDBYMode>
}
 80008a8:	bf00      	nop
 80008aa:	3708      	adds	r7, #8
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	40021000 	.word	0x40021000
 80008b4:	40007000 	.word	0x40007000

080008b8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b082      	sub	sp, #8
 80008bc:	af00      	add	r7, sp, #0
 80008be:	4603      	mov	r3, r0
 80008c0:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == B1_Pin) {
 80008c2:	88fb      	ldrh	r3, [r7, #6]
 80008c4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80008c8:	d108      	bne.n	80008dc <HAL_GPIO_EXTI_Callback+0x24>
    while(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_RESET);
 80008ca:	bf00      	nop
 80008cc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80008d0:	4804      	ldr	r0, [pc, #16]	@ (80008e4 <HAL_GPIO_EXTI_Callback+0x2c>)
 80008d2:	f000 ff8f 	bl	80017f4 <HAL_GPIO_ReadPin>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d0f7      	beq.n	80008cc <HAL_GPIO_EXTI_Callback+0x14>
  }
}
 80008dc:	bf00      	nop
 80008de:	3708      	adds	r7, #8
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	48000800 	.word	0x48000800

080008e8 <Nucleo_BSP_Init>:
void SystemClock_Config(void);
void SystemClock_Decrease(void);
void MX_GPIO_Init(void);
void MX_USART2_UART_Init(void);

void Nucleo_BSP_Init() {
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
  /* Configure the system clock */
  SystemClock_Config();
 80008ec:	f000 f806 	bl	80008fc <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008f0:	f000 f888 	bl	8000a04 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80008f4:	f000 f862 	bl	80009bc <MX_USART2_UART_Init>
}
 80008f8:	bf00      	nop
 80008fa:	bd80      	pop	{r7, pc}

080008fc <SystemClock_Config>:

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b0ba      	sub	sp, #232	@ 0xe8
 8000900:	af00      	add	r7, sp, #0

  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000902:	2310      	movs	r3, #16
 8000904:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000908:	2301      	movs	r3, #1
 800090a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800090e:	2300      	movs	r3, #0
 8000910:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_7;
 8000914:	2370      	movs	r3, #112	@ 0x70
 8000916:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800091a:	2300      	movs	r3, #0
 800091c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8000920:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000924:	4618      	mov	r0, r3
 8000926:	f001 f94d 	bl	8001bc4 <HAL_RCC_OscConfig>

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800092a:	230f      	movs	r3, #15
 800092c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000930:	2300      	movs	r3, #0
 8000932:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000936:	2300      	movs	r3, #0
 8000938:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800093c:	2300      	movs	r3, #0
 800093e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000942:	2300      	movs	r3, #0
 8000944:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0);
 8000948:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 800094c:	2100      	movs	r1, #0
 800094e:	4618      	mov	r0, r3
 8000950:	f001 fd14 	bl	800237c <HAL_RCC_ClockConfig>

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000954:	2302      	movs	r3, #2
 8000956:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 8000958:	2304      	movs	r3, #4
 800095a:	647b      	str	r3, [r7, #68]	@ 0x44
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 800095c:	f107 0308 	add.w	r3, r7, #8
 8000960:	4618      	mov	r0, r3
 8000962:	f001 ff2f 	bl	80027c4 <HAL_RCCEx_PeriphCLKConfig>

  __HAL_RCC_PWR_CLK_ENABLE();
 8000966:	4b13      	ldr	r3, [pc, #76]	@ (80009b4 <SystemClock_Config+0xb8>)
 8000968:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800096a:	4a12      	ldr	r2, [pc, #72]	@ (80009b4 <SystemClock_Config+0xb8>)
 800096c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000970:	6593      	str	r3, [r2, #88]	@ 0x58
 8000972:	4b10      	ldr	r3, [pc, #64]	@ (80009b4 <SystemClock_Config+0xb8>)
 8000974:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000976:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800097a:	607b      	str	r3, [r7, #4]
 800097c:	687b      	ldr	r3, [r7, #4]

  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800097e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000982:	f001 f82b 	bl	80019dc <HAL_PWREx_ControlVoltageScaling>

  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8000986:	f001 fe85 	bl	8002694 <HAL_RCC_GetHCLKFreq>
 800098a:	4603      	mov	r3, r0
 800098c:	4a0a      	ldr	r2, [pc, #40]	@ (80009b8 <SystemClock_Config+0xbc>)
 800098e:	fba2 2303 	umull	r2, r3, r2, r3
 8000992:	099b      	lsrs	r3, r3, #6
 8000994:	4618      	mov	r0, r3
 8000996:	f000 fc66 	bl	8001266 <HAL_SYSTICK_Config>

  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800099a:	2004      	movs	r0, #4
 800099c:	f000 fc70 	bl	8001280 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80009a0:	2200      	movs	r2, #0
 80009a2:	2100      	movs	r1, #0
 80009a4:	f04f 30ff 	mov.w	r0, #4294967295
 80009a8:	f000 fc33 	bl	8001212 <HAL_NVIC_SetPriority>
}
 80009ac:	bf00      	nop
 80009ae:	37e8      	adds	r7, #232	@ 0xe8
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	40021000 	.word	0x40021000
 80009b8:	10624dd3 	.word	0x10624dd3

080009bc <MX_USART2_UART_Init>:

}

/* USART2 init function */
void MX_USART2_UART_Init(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 80009c0:	4b0e      	ldr	r3, [pc, #56]	@ (80009fc <MX_USART2_UART_Init+0x40>)
 80009c2:	4a0f      	ldr	r2, [pc, #60]	@ (8000a00 <MX_USART2_UART_Init+0x44>)
 80009c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009c6:	4b0d      	ldr	r3, [pc, #52]	@ (80009fc <MX_USART2_UART_Init+0x40>)
 80009c8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80009cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009ce:	4b0b      	ldr	r3, [pc, #44]	@ (80009fc <MX_USART2_UART_Init+0x40>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009d4:	4b09      	ldr	r3, [pc, #36]	@ (80009fc <MX_USART2_UART_Init+0x40>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009da:	4b08      	ldr	r3, [pc, #32]	@ (80009fc <MX_USART2_UART_Init+0x40>)
 80009dc:	2200      	movs	r2, #0
 80009de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009e0:	4b06      	ldr	r3, [pc, #24]	@ (80009fc <MX_USART2_UART_Init+0x40>)
 80009e2:	220c      	movs	r2, #12
 80009e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009e6:	4b05      	ldr	r3, [pc, #20]	@ (80009fc <MX_USART2_UART_Init+0x40>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009ec:	4b03      	ldr	r3, [pc, #12]	@ (80009fc <MX_USART2_UART_Init+0x40>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	61da      	str	r2, [r3, #28]
  HAL_UART_Init(&huart2);
 80009f2:	4802      	ldr	r0, [pc, #8]	@ (80009fc <MX_USART2_UART_Init+0x40>)
 80009f4:	f002 fba2 	bl	800313c <HAL_UART_Init>

}
 80009f8:	bf00      	nop
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	20000078 	.word	0x20000078
 8000a00:	40004400 	.word	0x40004400

08000a04 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b088      	sub	sp, #32
 8000a08:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __GPIOC_CLK_ENABLE();
 8000a0a:	4b20      	ldr	r3, [pc, #128]	@ (8000a8c <MX_GPIO_Init+0x88>)
 8000a0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a0e:	4a1f      	ldr	r2, [pc, #124]	@ (8000a8c <MX_GPIO_Init+0x88>)
 8000a10:	f043 0304 	orr.w	r3, r3, #4
 8000a14:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a16:	4b1d      	ldr	r3, [pc, #116]	@ (8000a8c <MX_GPIO_Init+0x88>)
 8000a18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a1a:	f003 0304 	and.w	r3, r3, #4
 8000a1e:	60bb      	str	r3, [r7, #8]
 8000a20:	68bb      	ldr	r3, [r7, #8]
  __GPIOA_CLK_ENABLE();
 8000a22:	4b1a      	ldr	r3, [pc, #104]	@ (8000a8c <MX_GPIO_Init+0x88>)
 8000a24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a26:	4a19      	ldr	r2, [pc, #100]	@ (8000a8c <MX_GPIO_Init+0x88>)
 8000a28:	f043 0301 	orr.w	r3, r3, #1
 8000a2c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a2e:	4b17      	ldr	r3, [pc, #92]	@ (8000a8c <MX_GPIO_Init+0x88>)
 8000a30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a32:	f003 0301 	and.w	r3, r3, #1
 8000a36:	607b      	str	r3, [r7, #4]
 8000a38:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a3a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a3e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a40:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000a44:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a46:	2300      	movs	r3, #0
 8000a48:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a4a:	f107 030c 	add.w	r3, r7, #12
 8000a4e:	4619      	mov	r1, r3
 8000a50:	480f      	ldr	r0, [pc, #60]	@ (8000a90 <MX_GPIO_Init+0x8c>)
 8000a52:	f000 fc31 	bl	80012b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a56:	2320      	movs	r3, #32
 8000a58:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8000a62:	2303      	movs	r3, #3
 8000a64:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a66:	f107 030c 	add.w	r3, r7, #12
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a70:	f000 fc22 	bl	80012b8 <HAL_GPIO_Init>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000a74:	2200      	movs	r2, #0
 8000a76:	2100      	movs	r1, #0
 8000a78:	2028      	movs	r0, #40	@ 0x28
 8000a7a:	f000 fbca 	bl	8001212 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a7e:	2028      	movs	r0, #40	@ 0x28
 8000a80:	f000 fbe3 	bl	800124a <HAL_NVIC_EnableIRQ>
}
 8000a84:	bf00      	nop
 8000a86:	3720      	adds	r7, #32
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	40021000 	.word	0x40021000
 8000a90:	48000800 	.word	0x48000800

08000a94 <MX_GPIO_Deinit>:

void MX_GPIO_Deinit(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b08e      	sub	sp, #56	@ 0x38
 8000a98:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;

  /* Configure all GPIO as analog to reduce current consumption on non used IOs */
  /* Enable GPIOs clock */
  /* Warning : Reconfiguring all GPIO will close the connection with the debugger */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a9a:	4b67      	ldr	r3, [pc, #412]	@ (8000c38 <MX_GPIO_Deinit+0x1a4>)
 8000a9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a9e:	4a66      	ldr	r2, [pc, #408]	@ (8000c38 <MX_GPIO_Deinit+0x1a4>)
 8000aa0:	f043 0301 	orr.w	r3, r3, #1
 8000aa4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000aa6:	4b64      	ldr	r3, [pc, #400]	@ (8000c38 <MX_GPIO_Deinit+0x1a4>)
 8000aa8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000aaa:	f003 0301 	and.w	r3, r3, #1
 8000aae:	623b      	str	r3, [r7, #32]
 8000ab0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ab2:	4b61      	ldr	r3, [pc, #388]	@ (8000c38 <MX_GPIO_Deinit+0x1a4>)
 8000ab4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ab6:	4a60      	ldr	r2, [pc, #384]	@ (8000c38 <MX_GPIO_Deinit+0x1a4>)
 8000ab8:	f043 0302 	orr.w	r3, r3, #2
 8000abc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000abe:	4b5e      	ldr	r3, [pc, #376]	@ (8000c38 <MX_GPIO_Deinit+0x1a4>)
 8000ac0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ac2:	f003 0302 	and.w	r3, r3, #2
 8000ac6:	61fb      	str	r3, [r7, #28]
 8000ac8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aca:	4b5b      	ldr	r3, [pc, #364]	@ (8000c38 <MX_GPIO_Deinit+0x1a4>)
 8000acc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ace:	4a5a      	ldr	r2, [pc, #360]	@ (8000c38 <MX_GPIO_Deinit+0x1a4>)
 8000ad0:	f043 0304 	orr.w	r3, r3, #4
 8000ad4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ad6:	4b58      	ldr	r3, [pc, #352]	@ (8000c38 <MX_GPIO_Deinit+0x1a4>)
 8000ad8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ada:	f003 0304 	and.w	r3, r3, #4
 8000ade:	61bb      	str	r3, [r7, #24]
 8000ae0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ae2:	4b55      	ldr	r3, [pc, #340]	@ (8000c38 <MX_GPIO_Deinit+0x1a4>)
 8000ae4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ae6:	4a54      	ldr	r2, [pc, #336]	@ (8000c38 <MX_GPIO_Deinit+0x1a4>)
 8000ae8:	f043 0308 	orr.w	r3, r3, #8
 8000aec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000aee:	4b52      	ldr	r3, [pc, #328]	@ (8000c38 <MX_GPIO_Deinit+0x1a4>)
 8000af0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000af2:	f003 0308 	and.w	r3, r3, #8
 8000af6:	617b      	str	r3, [r7, #20]
 8000af8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000afa:	4b4f      	ldr	r3, [pc, #316]	@ (8000c38 <MX_GPIO_Deinit+0x1a4>)
 8000afc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000afe:	4a4e      	ldr	r2, [pc, #312]	@ (8000c38 <MX_GPIO_Deinit+0x1a4>)
 8000b00:	f043 0310 	orr.w	r3, r3, #16
 8000b04:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b06:	4b4c      	ldr	r3, [pc, #304]	@ (8000c38 <MX_GPIO_Deinit+0x1a4>)
 8000b08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b0a:	f003 0310 	and.w	r3, r3, #16
 8000b0e:	613b      	str	r3, [r7, #16]
 8000b10:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b12:	4b49      	ldr	r3, [pc, #292]	@ (8000c38 <MX_GPIO_Deinit+0x1a4>)
 8000b14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b16:	4a48      	ldr	r2, [pc, #288]	@ (8000c38 <MX_GPIO_Deinit+0x1a4>)
 8000b18:	f043 0320 	orr.w	r3, r3, #32
 8000b1c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b1e:	4b46      	ldr	r3, [pc, #280]	@ (8000c38 <MX_GPIO_Deinit+0x1a4>)
 8000b20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b22:	f003 0320 	and.w	r3, r3, #32
 8000b26:	60fb      	str	r3, [r7, #12]
 8000b28:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b2a:	4b43      	ldr	r3, [pc, #268]	@ (8000c38 <MX_GPIO_Deinit+0x1a4>)
 8000b2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b2e:	4a42      	ldr	r2, [pc, #264]	@ (8000c38 <MX_GPIO_Deinit+0x1a4>)
 8000b30:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000b34:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b36:	4b40      	ldr	r3, [pc, #256]	@ (8000c38 <MX_GPIO_Deinit+0x1a4>)
 8000b38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000b3e:	60bb      	str	r3, [r7, #8]
 8000b40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b42:	4b3d      	ldr	r3, [pc, #244]	@ (8000c38 <MX_GPIO_Deinit+0x1a4>)
 8000b44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b46:	4a3c      	ldr	r2, [pc, #240]	@ (8000c38 <MX_GPIO_Deinit+0x1a4>)
 8000b48:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b4c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b4e:	4b3a      	ldr	r3, [pc, #232]	@ (8000c38 <MX_GPIO_Deinit+0x1a4>)
 8000b50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b56:	607b      	str	r3, [r7, #4]
 8000b58:	687b      	ldr	r3, [r7, #4]

  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b5a:	2303      	movs	r3, #3
 8000b5c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b5e:	2302      	movs	r3, #2
 8000b60:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b62:	2300      	movs	r3, #0
 8000b64:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Pin = GPIO_PIN_All;
 8000b66:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000b6a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b6c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b70:	4619      	mov	r1, r3
 8000b72:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b76:	f000 fb9f 	bl	80012b8 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b7a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b7e:	4619      	mov	r1, r3
 8000b80:	482e      	ldr	r0, [pc, #184]	@ (8000c3c <MX_GPIO_Deinit+0x1a8>)
 8000b82:	f000 fb99 	bl	80012b8 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b86:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	482c      	ldr	r0, [pc, #176]	@ (8000c40 <MX_GPIO_Deinit+0x1ac>)
 8000b8e:	f000 fb93 	bl	80012b8 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b92:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b96:	4619      	mov	r1, r3
 8000b98:	482a      	ldr	r0, [pc, #168]	@ (8000c44 <MX_GPIO_Deinit+0x1b0>)
 8000b9a:	f000 fb8d 	bl	80012b8 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b9e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	4828      	ldr	r0, [pc, #160]	@ (8000c48 <MX_GPIO_Deinit+0x1b4>)
 8000ba6:	f000 fb87 	bl	80012b8 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000baa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bae:	4619      	mov	r1, r3
 8000bb0:	4826      	ldr	r0, [pc, #152]	@ (8000c4c <MX_GPIO_Deinit+0x1b8>)
 8000bb2:	f000 fb81 	bl	80012b8 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000bb6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bba:	4619      	mov	r1, r3
 8000bbc:	4824      	ldr	r0, [pc, #144]	@ (8000c50 <MX_GPIO_Deinit+0x1bc>)
 8000bbe:	f000 fb7b 	bl	80012b8 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000bc2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	4822      	ldr	r0, [pc, #136]	@ (8000c54 <MX_GPIO_Deinit+0x1c0>)
 8000bca:	f000 fb75 	bl	80012b8 <HAL_GPIO_Init>

  /* Disable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_DISABLE();
 8000bce:	4b1a      	ldr	r3, [pc, #104]	@ (8000c38 <MX_GPIO_Deinit+0x1a4>)
 8000bd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bd2:	4a19      	ldr	r2, [pc, #100]	@ (8000c38 <MX_GPIO_Deinit+0x1a4>)
 8000bd4:	f023 0301 	bic.w	r3, r3, #1
 8000bd8:	64d3      	str	r3, [r2, #76]	@ 0x4c
  __HAL_RCC_GPIOB_CLK_DISABLE();
 8000bda:	4b17      	ldr	r3, [pc, #92]	@ (8000c38 <MX_GPIO_Deinit+0x1a4>)
 8000bdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bde:	4a16      	ldr	r2, [pc, #88]	@ (8000c38 <MX_GPIO_Deinit+0x1a4>)
 8000be0:	f023 0302 	bic.w	r3, r3, #2
 8000be4:	64d3      	str	r3, [r2, #76]	@ 0x4c
  __HAL_RCC_GPIOC_CLK_DISABLE();
 8000be6:	4b14      	ldr	r3, [pc, #80]	@ (8000c38 <MX_GPIO_Deinit+0x1a4>)
 8000be8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bea:	4a13      	ldr	r2, [pc, #76]	@ (8000c38 <MX_GPIO_Deinit+0x1a4>)
 8000bec:	f023 0304 	bic.w	r3, r3, #4
 8000bf0:	64d3      	str	r3, [r2, #76]	@ 0x4c
  __HAL_RCC_GPIOD_CLK_DISABLE();
 8000bf2:	4b11      	ldr	r3, [pc, #68]	@ (8000c38 <MX_GPIO_Deinit+0x1a4>)
 8000bf4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bf6:	4a10      	ldr	r2, [pc, #64]	@ (8000c38 <MX_GPIO_Deinit+0x1a4>)
 8000bf8:	f023 0308 	bic.w	r3, r3, #8
 8000bfc:	64d3      	str	r3, [r2, #76]	@ 0x4c
  __HAL_RCC_GPIOE_CLK_DISABLE();
 8000bfe:	4b0e      	ldr	r3, [pc, #56]	@ (8000c38 <MX_GPIO_Deinit+0x1a4>)
 8000c00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c02:	4a0d      	ldr	r2, [pc, #52]	@ (8000c38 <MX_GPIO_Deinit+0x1a4>)
 8000c04:	f023 0310 	bic.w	r3, r3, #16
 8000c08:	64d3      	str	r3, [r2, #76]	@ 0x4c
  __HAL_RCC_GPIOF_CLK_DISABLE();
 8000c0a:	4b0b      	ldr	r3, [pc, #44]	@ (8000c38 <MX_GPIO_Deinit+0x1a4>)
 8000c0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c0e:	4a0a      	ldr	r2, [pc, #40]	@ (8000c38 <MX_GPIO_Deinit+0x1a4>)
 8000c10:	f023 0320 	bic.w	r3, r3, #32
 8000c14:	64d3      	str	r3, [r2, #76]	@ 0x4c
  __HAL_RCC_GPIOG_CLK_DISABLE();
 8000c16:	4b08      	ldr	r3, [pc, #32]	@ (8000c38 <MX_GPIO_Deinit+0x1a4>)
 8000c18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c1a:	4a07      	ldr	r2, [pc, #28]	@ (8000c38 <MX_GPIO_Deinit+0x1a4>)
 8000c1c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000c20:	64d3      	str	r3, [r2, #76]	@ 0x4c
  __HAL_RCC_GPIOH_CLK_DISABLE();
 8000c22:	4b05      	ldr	r3, [pc, #20]	@ (8000c38 <MX_GPIO_Deinit+0x1a4>)
 8000c24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c26:	4a04      	ldr	r2, [pc, #16]	@ (8000c38 <MX_GPIO_Deinit+0x1a4>)
 8000c28:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000c2c:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000c2e:	bf00      	nop
 8000c30:	3738      	adds	r7, #56	@ 0x38
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	40021000 	.word	0x40021000
 8000c3c:	48000400 	.word	0x48000400
 8000c40:	48000800 	.word	0x48000800
 8000c44:	48000c00 	.word	0x48000c00
 8000c48:	48001000 	.word	0x48001000
 8000c4c:	48001400 	.word	0x48001400
 8000c50:	48001800 	.word	0x48001800
 8000c54:	48001c00 	.word	0x48001c00

08000c58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b083      	sub	sp, #12
 8000c5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c5e:	4b0f      	ldr	r3, [pc, #60]	@ (8000c9c <HAL_MspInit+0x44>)
 8000c60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c62:	4a0e      	ldr	r2, [pc, #56]	@ (8000c9c <HAL_MspInit+0x44>)
 8000c64:	f043 0301 	orr.w	r3, r3, #1
 8000c68:	6613      	str	r3, [r2, #96]	@ 0x60
 8000c6a:	4b0c      	ldr	r3, [pc, #48]	@ (8000c9c <HAL_MspInit+0x44>)
 8000c6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c6e:	f003 0301 	and.w	r3, r3, #1
 8000c72:	607b      	str	r3, [r7, #4]
 8000c74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c76:	4b09      	ldr	r3, [pc, #36]	@ (8000c9c <HAL_MspInit+0x44>)
 8000c78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c7a:	4a08      	ldr	r2, [pc, #32]	@ (8000c9c <HAL_MspInit+0x44>)
 8000c7c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c80:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c82:	4b06      	ldr	r3, [pc, #24]	@ (8000c9c <HAL_MspInit+0x44>)
 8000c84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c8a:	603b      	str	r3, [r7, #0]
 8000c8c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c8e:	bf00      	nop
 8000c90:	370c      	adds	r7, #12
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop
 8000c9c:	40021000 	.word	0x40021000

08000ca0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b0ac      	sub	sp, #176	@ 0xb0
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000cac:	2200      	movs	r2, #0
 8000cae:	601a      	str	r2, [r3, #0]
 8000cb0:	605a      	str	r2, [r3, #4]
 8000cb2:	609a      	str	r2, [r3, #8]
 8000cb4:	60da      	str	r2, [r3, #12]
 8000cb6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cb8:	f107 0314 	add.w	r3, r7, #20
 8000cbc:	2288      	movs	r2, #136	@ 0x88
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f003 f843 	bl	8003d4c <memset>
  if(huart->Instance==USART2)
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	4a1f      	ldr	r2, [pc, #124]	@ (8000d48 <HAL_UART_MspInit+0xa8>)
 8000ccc:	4293      	cmp	r3, r2
 8000cce:	d136      	bne.n	8000d3e <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000cd0:	2302      	movs	r3, #2
 8000cd2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	653b      	str	r3, [r7, #80]	@ 0x50
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 8000cd8:	f107 0314 	add.w	r3, r7, #20
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f001 fd71 	bl	80027c4 <HAL_RCCEx_PeriphCLKConfig>

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ce2:	4b1a      	ldr	r3, [pc, #104]	@ (8000d4c <HAL_UART_MspInit+0xac>)
 8000ce4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ce6:	4a19      	ldr	r2, [pc, #100]	@ (8000d4c <HAL_UART_MspInit+0xac>)
 8000ce8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000cec:	6593      	str	r3, [r2, #88]	@ 0x58
 8000cee:	4b17      	ldr	r3, [pc, #92]	@ (8000d4c <HAL_UART_MspInit+0xac>)
 8000cf0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cf2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000cf6:	613b      	str	r3, [r7, #16]
 8000cf8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cfa:	4b14      	ldr	r3, [pc, #80]	@ (8000d4c <HAL_UART_MspInit+0xac>)
 8000cfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cfe:	4a13      	ldr	r2, [pc, #76]	@ (8000d4c <HAL_UART_MspInit+0xac>)
 8000d00:	f043 0301 	orr.w	r3, r3, #1
 8000d04:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d06:	4b11      	ldr	r3, [pc, #68]	@ (8000d4c <HAL_UART_MspInit+0xac>)
 8000d08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d0a:	f003 0301 	and.w	r3, r3, #1
 8000d0e:	60fb      	str	r3, [r7, #12]
 8000d10:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000d12:	230c      	movs	r3, #12
 8000d14:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d18:	2302      	movs	r3, #2
 8000d1a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d24:	2303      	movs	r3, #3
 8000d26:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d2a:	2307      	movs	r3, #7
 8000d2c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d30:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000d34:	4619      	mov	r1, r3
 8000d36:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d3a:	f000 fabd 	bl	80012b8 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000d3e:	bf00      	nop
 8000d40:	37b0      	adds	r7, #176	@ 0xb0
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	40004400 	.word	0x40004400
 8000d4c:	40021000 	.word	0x40021000

08000d50 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART2)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	4a08      	ldr	r2, [pc, #32]	@ (8000d80 <HAL_UART_MspDeInit+0x30>)
 8000d5e:	4293      	cmp	r3, r2
 8000d60:	d10a      	bne.n	8000d78 <HAL_UART_MspDeInit+0x28>
  {
  /* USER CODE BEGIN USART2_MspDeInit 0 */

  /* USER CODE END USART2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART2_CLK_DISABLE();
 8000d62:	4b08      	ldr	r3, [pc, #32]	@ (8000d84 <HAL_UART_MspDeInit+0x34>)
 8000d64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d66:	4a07      	ldr	r2, [pc, #28]	@ (8000d84 <HAL_UART_MspDeInit+0x34>)
 8000d68:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8000d6c:	6593      	str	r3, [r2, #88]	@ 0x58

    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    HAL_GPIO_DeInit(GPIOA, USART_TX_Pin|USART_RX_Pin);
 8000d6e:	210c      	movs	r1, #12
 8000d70:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d74:	f000 fc4a 	bl	800160c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }

}
 8000d78:	bf00      	nop
 8000d7a:	3708      	adds	r7, #8
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	40004400 	.word	0x40004400
 8000d84:	40021000 	.word	0x40021000

08000d88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d8c:	bf00      	nop
 8000d8e:	e7fd      	b.n	8000d8c <NMI_Handler+0x4>

08000d90 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d94:	bf00      	nop
 8000d96:	e7fd      	b.n	8000d94 <HardFault_Handler+0x4>

08000d98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d9c:	bf00      	nop
 8000d9e:	e7fd      	b.n	8000d9c <MemManage_Handler+0x4>

08000da0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000da4:	bf00      	nop
 8000da6:	e7fd      	b.n	8000da4 <BusFault_Handler+0x4>

08000da8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dac:	bf00      	nop
 8000dae:	e7fd      	b.n	8000dac <UsageFault_Handler+0x4>

08000db0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000db4:	bf00      	nop
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr

08000dbe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dbe:	b480      	push	{r7}
 8000dc0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dc2:	bf00      	nop
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dca:	4770      	bx	lr

08000dcc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dd0:	bf00      	nop
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr

08000dda <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dda:	b580      	push	{r7, lr}
 8000ddc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dde:	f000 f8d9 	bl	8000f94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000de2:	bf00      	nop
 8000de4:	bd80      	pop	{r7, pc}

08000de6 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000de6:	b580      	push	{r7, lr}
 8000de8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000dea:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000dee:	f000 fd33 	bl	8001858 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000df2:	bf00      	nop
 8000df4:	bd80      	pop	{r7, pc}
	...

08000df8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b086      	sub	sp, #24
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e00:	4a14      	ldr	r2, [pc, #80]	@ (8000e54 <_sbrk+0x5c>)
 8000e02:	4b15      	ldr	r3, [pc, #84]	@ (8000e58 <_sbrk+0x60>)
 8000e04:	1ad3      	subs	r3, r2, r3
 8000e06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e08:	697b      	ldr	r3, [r7, #20]
 8000e0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e0c:	4b13      	ldr	r3, [pc, #76]	@ (8000e5c <_sbrk+0x64>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d102      	bne.n	8000e1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e14:	4b11      	ldr	r3, [pc, #68]	@ (8000e5c <_sbrk+0x64>)
 8000e16:	4a12      	ldr	r2, [pc, #72]	@ (8000e60 <_sbrk+0x68>)
 8000e18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e1a:	4b10      	ldr	r3, [pc, #64]	@ (8000e5c <_sbrk+0x64>)
 8000e1c:	681a      	ldr	r2, [r3, #0]
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	4413      	add	r3, r2
 8000e22:	693a      	ldr	r2, [r7, #16]
 8000e24:	429a      	cmp	r2, r3
 8000e26:	d207      	bcs.n	8000e38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e28:	f002 ff98 	bl	8003d5c <__errno>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	220c      	movs	r2, #12
 8000e30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e32:	f04f 33ff 	mov.w	r3, #4294967295
 8000e36:	e009      	b.n	8000e4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e38:	4b08      	ldr	r3, [pc, #32]	@ (8000e5c <_sbrk+0x64>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e3e:	4b07      	ldr	r3, [pc, #28]	@ (8000e5c <_sbrk+0x64>)
 8000e40:	681a      	ldr	r2, [r3, #0]
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	4413      	add	r3, r2
 8000e46:	4a05      	ldr	r2, [pc, #20]	@ (8000e5c <_sbrk+0x64>)
 8000e48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e4a:	68fb      	ldr	r3, [r7, #12]
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	3718      	adds	r7, #24
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	20018000 	.word	0x20018000
 8000e58:	00000400 	.word	0x00000400
 8000e5c:	20000100 	.word	0x20000100
 8000e60:	20000250 	.word	0x20000250

08000e64 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000e68:	4b06      	ldr	r3, [pc, #24]	@ (8000e84 <SystemInit+0x20>)
 8000e6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e6e:	4a05      	ldr	r2, [pc, #20]	@ (8000e84 <SystemInit+0x20>)
 8000e70:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e74:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000e78:	bf00      	nop
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop
 8000e84:	e000ed00 	.word	0xe000ed00

08000e88 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000e88:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ec0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e8c:	f7ff ffea 	bl	8000e64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e90:	480c      	ldr	r0, [pc, #48]	@ (8000ec4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e92:	490d      	ldr	r1, [pc, #52]	@ (8000ec8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e94:	4a0d      	ldr	r2, [pc, #52]	@ (8000ecc <LoopForever+0xe>)
  movs r3, #0
 8000e96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e98:	e002      	b.n	8000ea0 <LoopCopyDataInit>

08000e9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e9e:	3304      	adds	r3, #4

08000ea0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ea0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ea2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ea4:	d3f9      	bcc.n	8000e9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ea6:	4a0a      	ldr	r2, [pc, #40]	@ (8000ed0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ea8:	4c0a      	ldr	r4, [pc, #40]	@ (8000ed4 <LoopForever+0x16>)
  movs r3, #0
 8000eaa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000eac:	e001      	b.n	8000eb2 <LoopFillZerobss>

08000eae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000eb0:	3204      	adds	r2, #4

08000eb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000eb4:	d3fb      	bcc.n	8000eae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000eb6:	f002 ff57 	bl	8003d68 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000eba:	f7ff fb59 	bl	8000570 <main>

08000ebe <LoopForever>:

LoopForever:
    b LoopForever
 8000ebe:	e7fe      	b.n	8000ebe <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000ec0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000ec4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ec8:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000ecc:	080047a8 	.word	0x080047a8
  ldr r2, =_sbss
 8000ed0:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000ed4:	20000250 	.word	0x20000250

08000ed8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ed8:	e7fe      	b.n	8000ed8 <ADC1_2_IRQHandler>
	...

08000edc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ee6:	4b0c      	ldr	r3, [pc, #48]	@ (8000f18 <HAL_Init+0x3c>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	4a0b      	ldr	r2, [pc, #44]	@ (8000f18 <HAL_Init+0x3c>)
 8000eec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ef0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ef2:	2003      	movs	r0, #3
 8000ef4:	f000 f982 	bl	80011fc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ef8:	2000      	movs	r0, #0
 8000efa:	f000 f80f 	bl	8000f1c <HAL_InitTick>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d002      	beq.n	8000f0a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000f04:	2301      	movs	r3, #1
 8000f06:	71fb      	strb	r3, [r7, #7]
 8000f08:	e001      	b.n	8000f0e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f0a:	f7ff fea5 	bl	8000c58 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f0e:	79fb      	ldrb	r3, [r7, #7]
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	3708      	adds	r7, #8
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	40022000 	.word	0x40022000

08000f1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b084      	sub	sp, #16
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f24:	2300      	movs	r3, #0
 8000f26:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000f28:	4b17      	ldr	r3, [pc, #92]	@ (8000f88 <HAL_InitTick+0x6c>)
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d023      	beq.n	8000f78 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000f30:	4b16      	ldr	r3, [pc, #88]	@ (8000f8c <HAL_InitTick+0x70>)
 8000f32:	681a      	ldr	r2, [r3, #0]
 8000f34:	4b14      	ldr	r3, [pc, #80]	@ (8000f88 <HAL_InitTick+0x6c>)
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	4619      	mov	r1, r3
 8000f3a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f42:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f46:	4618      	mov	r0, r3
 8000f48:	f000 f98d 	bl	8001266 <HAL_SYSTICK_Config>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d10f      	bne.n	8000f72 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	2b0f      	cmp	r3, #15
 8000f56:	d809      	bhi.n	8000f6c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f58:	2200      	movs	r2, #0
 8000f5a:	6879      	ldr	r1, [r7, #4]
 8000f5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f60:	f000 f957 	bl	8001212 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f64:	4a0a      	ldr	r2, [pc, #40]	@ (8000f90 <HAL_InitTick+0x74>)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	6013      	str	r3, [r2, #0]
 8000f6a:	e007      	b.n	8000f7c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	73fb      	strb	r3, [r7, #15]
 8000f70:	e004      	b.n	8000f7c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f72:	2301      	movs	r3, #1
 8000f74:	73fb      	strb	r3, [r7, #15]
 8000f76:	e001      	b.n	8000f7c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f78:	2301      	movs	r3, #1
 8000f7a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000f7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	3710      	adds	r7, #16
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	20000008 	.word	0x20000008
 8000f8c:	20000000 	.word	0x20000000
 8000f90:	20000004 	.word	0x20000004

08000f94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f98:	4b06      	ldr	r3, [pc, #24]	@ (8000fb4 <HAL_IncTick+0x20>)
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	461a      	mov	r2, r3
 8000f9e:	4b06      	ldr	r3, [pc, #24]	@ (8000fb8 <HAL_IncTick+0x24>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	4413      	add	r3, r2
 8000fa4:	4a04      	ldr	r2, [pc, #16]	@ (8000fb8 <HAL_IncTick+0x24>)
 8000fa6:	6013      	str	r3, [r2, #0]
}
 8000fa8:	bf00      	nop
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop
 8000fb4:	20000008 	.word	0x20000008
 8000fb8:	20000104 	.word	0x20000104

08000fbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  return uwTick;
 8000fc0:	4b03      	ldr	r3, [pc, #12]	@ (8000fd0 <HAL_GetTick+0x14>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop
 8000fd0:	20000104 	.word	0x20000104

08000fd4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b084      	sub	sp, #16
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fdc:	f7ff ffee 	bl	8000fbc <HAL_GetTick>
 8000fe0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fec:	d005      	beq.n	8000ffa <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000fee:	4b0a      	ldr	r3, [pc, #40]	@ (8001018 <HAL_Delay+0x44>)
 8000ff0:	781b      	ldrb	r3, [r3, #0]
 8000ff2:	461a      	mov	r2, r3
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	4413      	add	r3, r2
 8000ff8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ffa:	bf00      	nop
 8000ffc:	f7ff ffde 	bl	8000fbc <HAL_GetTick>
 8001000:	4602      	mov	r2, r0
 8001002:	68bb      	ldr	r3, [r7, #8]
 8001004:	1ad3      	subs	r3, r2, r3
 8001006:	68fa      	ldr	r2, [r7, #12]
 8001008:	429a      	cmp	r2, r3
 800100a:	d8f7      	bhi.n	8000ffc <HAL_Delay+0x28>
  {
  }
}
 800100c:	bf00      	nop
 800100e:	bf00      	nop
 8001010:	3710      	adds	r7, #16
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	20000008 	.word	0x20000008

0800101c <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8001020:	4b05      	ldr	r3, [pc, #20]	@ (8001038 <HAL_SuspendTick+0x1c>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4a04      	ldr	r2, [pc, #16]	@ (8001038 <HAL_SuspendTick+0x1c>)
 8001026:	f023 0302 	bic.w	r3, r3, #2
 800102a:	6013      	str	r3, [r2, #0]
}
 800102c:	bf00      	nop
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop
 8001038:	e000e010 	.word	0xe000e010

0800103c <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8001040:	4b05      	ldr	r3, [pc, #20]	@ (8001058 <HAL_ResumeTick+0x1c>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4a04      	ldr	r2, [pc, #16]	@ (8001058 <HAL_ResumeTick+0x1c>)
 8001046:	f043 0302 	orr.w	r3, r3, #2
 800104a:	6013      	str	r3, [r2, #0]
}
 800104c:	bf00      	nop
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop
 8001058:	e000e010 	.word	0xe000e010

0800105c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800105c:	b480      	push	{r7}
 800105e:	b085      	sub	sp, #20
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	f003 0307 	and.w	r3, r3, #7
 800106a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800106c:	4b0c      	ldr	r3, [pc, #48]	@ (80010a0 <__NVIC_SetPriorityGrouping+0x44>)
 800106e:	68db      	ldr	r3, [r3, #12]
 8001070:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001072:	68ba      	ldr	r2, [r7, #8]
 8001074:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001078:	4013      	ands	r3, r2
 800107a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001080:	68bb      	ldr	r3, [r7, #8]
 8001082:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001084:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001088:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800108c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800108e:	4a04      	ldr	r2, [pc, #16]	@ (80010a0 <__NVIC_SetPriorityGrouping+0x44>)
 8001090:	68bb      	ldr	r3, [r7, #8]
 8001092:	60d3      	str	r3, [r2, #12]
}
 8001094:	bf00      	nop
 8001096:	3714      	adds	r7, #20
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr
 80010a0:	e000ed00 	.word	0xe000ed00

080010a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010a8:	4b04      	ldr	r3, [pc, #16]	@ (80010bc <__NVIC_GetPriorityGrouping+0x18>)
 80010aa:	68db      	ldr	r3, [r3, #12]
 80010ac:	0a1b      	lsrs	r3, r3, #8
 80010ae:	f003 0307 	and.w	r3, r3, #7
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr
 80010bc:	e000ed00 	.word	0xe000ed00

080010c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b083      	sub	sp, #12
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	4603      	mov	r3, r0
 80010c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	db0b      	blt.n	80010ea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010d2:	79fb      	ldrb	r3, [r7, #7]
 80010d4:	f003 021f 	and.w	r2, r3, #31
 80010d8:	4907      	ldr	r1, [pc, #28]	@ (80010f8 <__NVIC_EnableIRQ+0x38>)
 80010da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010de:	095b      	lsrs	r3, r3, #5
 80010e0:	2001      	movs	r0, #1
 80010e2:	fa00 f202 	lsl.w	r2, r0, r2
 80010e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80010ea:	bf00      	nop
 80010ec:	370c      	adds	r7, #12
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr
 80010f6:	bf00      	nop
 80010f8:	e000e100 	.word	0xe000e100

080010fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b083      	sub	sp, #12
 8001100:	af00      	add	r7, sp, #0
 8001102:	4603      	mov	r3, r0
 8001104:	6039      	str	r1, [r7, #0]
 8001106:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001108:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800110c:	2b00      	cmp	r3, #0
 800110e:	db0a      	blt.n	8001126 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	b2da      	uxtb	r2, r3
 8001114:	490c      	ldr	r1, [pc, #48]	@ (8001148 <__NVIC_SetPriority+0x4c>)
 8001116:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800111a:	0112      	lsls	r2, r2, #4
 800111c:	b2d2      	uxtb	r2, r2
 800111e:	440b      	add	r3, r1
 8001120:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001124:	e00a      	b.n	800113c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	b2da      	uxtb	r2, r3
 800112a:	4908      	ldr	r1, [pc, #32]	@ (800114c <__NVIC_SetPriority+0x50>)
 800112c:	79fb      	ldrb	r3, [r7, #7]
 800112e:	f003 030f 	and.w	r3, r3, #15
 8001132:	3b04      	subs	r3, #4
 8001134:	0112      	lsls	r2, r2, #4
 8001136:	b2d2      	uxtb	r2, r2
 8001138:	440b      	add	r3, r1
 800113a:	761a      	strb	r2, [r3, #24]
}
 800113c:	bf00      	nop
 800113e:	370c      	adds	r7, #12
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr
 8001148:	e000e100 	.word	0xe000e100
 800114c:	e000ed00 	.word	0xe000ed00

08001150 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001150:	b480      	push	{r7}
 8001152:	b089      	sub	sp, #36	@ 0x24
 8001154:	af00      	add	r7, sp, #0
 8001156:	60f8      	str	r0, [r7, #12]
 8001158:	60b9      	str	r1, [r7, #8]
 800115a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	f003 0307 	and.w	r3, r3, #7
 8001162:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001164:	69fb      	ldr	r3, [r7, #28]
 8001166:	f1c3 0307 	rsb	r3, r3, #7
 800116a:	2b04      	cmp	r3, #4
 800116c:	bf28      	it	cs
 800116e:	2304      	movcs	r3, #4
 8001170:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001172:	69fb      	ldr	r3, [r7, #28]
 8001174:	3304      	adds	r3, #4
 8001176:	2b06      	cmp	r3, #6
 8001178:	d902      	bls.n	8001180 <NVIC_EncodePriority+0x30>
 800117a:	69fb      	ldr	r3, [r7, #28]
 800117c:	3b03      	subs	r3, #3
 800117e:	e000      	b.n	8001182 <NVIC_EncodePriority+0x32>
 8001180:	2300      	movs	r3, #0
 8001182:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001184:	f04f 32ff 	mov.w	r2, #4294967295
 8001188:	69bb      	ldr	r3, [r7, #24]
 800118a:	fa02 f303 	lsl.w	r3, r2, r3
 800118e:	43da      	mvns	r2, r3
 8001190:	68bb      	ldr	r3, [r7, #8]
 8001192:	401a      	ands	r2, r3
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001198:	f04f 31ff 	mov.w	r1, #4294967295
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	fa01 f303 	lsl.w	r3, r1, r3
 80011a2:	43d9      	mvns	r1, r3
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011a8:	4313      	orrs	r3, r2
         );
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	3724      	adds	r7, #36	@ 0x24
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr
	...

080011b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	3b01      	subs	r3, #1
 80011c4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80011c8:	d301      	bcc.n	80011ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011ca:	2301      	movs	r3, #1
 80011cc:	e00f      	b.n	80011ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011ce:	4a0a      	ldr	r2, [pc, #40]	@ (80011f8 <SysTick_Config+0x40>)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	3b01      	subs	r3, #1
 80011d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011d6:	210f      	movs	r1, #15
 80011d8:	f04f 30ff 	mov.w	r0, #4294967295
 80011dc:	f7ff ff8e 	bl	80010fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011e0:	4b05      	ldr	r3, [pc, #20]	@ (80011f8 <SysTick_Config+0x40>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011e6:	4b04      	ldr	r3, [pc, #16]	@ (80011f8 <SysTick_Config+0x40>)
 80011e8:	2207      	movs	r2, #7
 80011ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011ec:	2300      	movs	r3, #0
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	3708      	adds	r7, #8
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	e000e010 	.word	0xe000e010

080011fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001204:	6878      	ldr	r0, [r7, #4]
 8001206:	f7ff ff29 	bl	800105c <__NVIC_SetPriorityGrouping>
}
 800120a:	bf00      	nop
 800120c:	3708      	adds	r7, #8
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}

08001212 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001212:	b580      	push	{r7, lr}
 8001214:	b086      	sub	sp, #24
 8001216:	af00      	add	r7, sp, #0
 8001218:	4603      	mov	r3, r0
 800121a:	60b9      	str	r1, [r7, #8]
 800121c:	607a      	str	r2, [r7, #4]
 800121e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001220:	2300      	movs	r3, #0
 8001222:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001224:	f7ff ff3e 	bl	80010a4 <__NVIC_GetPriorityGrouping>
 8001228:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800122a:	687a      	ldr	r2, [r7, #4]
 800122c:	68b9      	ldr	r1, [r7, #8]
 800122e:	6978      	ldr	r0, [r7, #20]
 8001230:	f7ff ff8e 	bl	8001150 <NVIC_EncodePriority>
 8001234:	4602      	mov	r2, r0
 8001236:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800123a:	4611      	mov	r1, r2
 800123c:	4618      	mov	r0, r3
 800123e:	f7ff ff5d 	bl	80010fc <__NVIC_SetPriority>
}
 8001242:	bf00      	nop
 8001244:	3718      	adds	r7, #24
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}

0800124a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800124a:	b580      	push	{r7, lr}
 800124c:	b082      	sub	sp, #8
 800124e:	af00      	add	r7, sp, #0
 8001250:	4603      	mov	r3, r0
 8001252:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001254:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001258:	4618      	mov	r0, r3
 800125a:	f7ff ff31 	bl	80010c0 <__NVIC_EnableIRQ>
}
 800125e:	bf00      	nop
 8001260:	3708      	adds	r7, #8
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}

08001266 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001266:	b580      	push	{r7, lr}
 8001268:	b082      	sub	sp, #8
 800126a:	af00      	add	r7, sp, #0
 800126c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800126e:	6878      	ldr	r0, [r7, #4]
 8001270:	f7ff ffa2 	bl	80011b8 <SysTick_Config>
 8001274:	4603      	mov	r3, r0
}
 8001276:	4618      	mov	r0, r3
 8001278:	3708      	adds	r7, #8
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
	...

08001280 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001280:	b480      	push	{r7}
 8001282:	b083      	sub	sp, #12
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2b04      	cmp	r3, #4
 800128c:	d106      	bne.n	800129c <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800128e:	4b09      	ldr	r3, [pc, #36]	@ (80012b4 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4a08      	ldr	r2, [pc, #32]	@ (80012b4 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001294:	f043 0304 	orr.w	r3, r3, #4
 8001298:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 800129a:	e005      	b.n	80012a8 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 800129c:	4b05      	ldr	r3, [pc, #20]	@ (80012b4 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a04      	ldr	r2, [pc, #16]	@ (80012b4 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80012a2:	f023 0304 	bic.w	r3, r3, #4
 80012a6:	6013      	str	r3, [r2, #0]
}
 80012a8:	bf00      	nop
 80012aa:	370c      	adds	r7, #12
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr
 80012b4:	e000e010 	.word	0xe000e010

080012b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b087      	sub	sp, #28
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
 80012c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80012c2:	2300      	movs	r3, #0
 80012c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012c6:	e17f      	b.n	80015c8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	681a      	ldr	r2, [r3, #0]
 80012cc:	2101      	movs	r1, #1
 80012ce:	697b      	ldr	r3, [r7, #20]
 80012d0:	fa01 f303 	lsl.w	r3, r1, r3
 80012d4:	4013      	ands	r3, r2
 80012d6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	f000 8171 	beq.w	80015c2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	f003 0303 	and.w	r3, r3, #3
 80012e8:	2b01      	cmp	r3, #1
 80012ea:	d005      	beq.n	80012f8 <HAL_GPIO_Init+0x40>
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	f003 0303 	and.w	r3, r3, #3
 80012f4:	2b02      	cmp	r3, #2
 80012f6:	d130      	bne.n	800135a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	689b      	ldr	r3, [r3, #8]
 80012fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	005b      	lsls	r3, r3, #1
 8001302:	2203      	movs	r2, #3
 8001304:	fa02 f303 	lsl.w	r3, r2, r3
 8001308:	43db      	mvns	r3, r3
 800130a:	693a      	ldr	r2, [r7, #16]
 800130c:	4013      	ands	r3, r2
 800130e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	68da      	ldr	r2, [r3, #12]
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	005b      	lsls	r3, r3, #1
 8001318:	fa02 f303 	lsl.w	r3, r2, r3
 800131c:	693a      	ldr	r2, [r7, #16]
 800131e:	4313      	orrs	r3, r2
 8001320:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	693a      	ldr	r2, [r7, #16]
 8001326:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800132e:	2201      	movs	r2, #1
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	fa02 f303 	lsl.w	r3, r2, r3
 8001336:	43db      	mvns	r3, r3
 8001338:	693a      	ldr	r2, [r7, #16]
 800133a:	4013      	ands	r3, r2
 800133c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	091b      	lsrs	r3, r3, #4
 8001344:	f003 0201 	and.w	r2, r3, #1
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	fa02 f303 	lsl.w	r3, r2, r3
 800134e:	693a      	ldr	r2, [r7, #16]
 8001350:	4313      	orrs	r3, r2
 8001352:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	693a      	ldr	r2, [r7, #16]
 8001358:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	f003 0303 	and.w	r3, r3, #3
 8001362:	2b03      	cmp	r3, #3
 8001364:	d118      	bne.n	8001398 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800136a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800136c:	2201      	movs	r2, #1
 800136e:	697b      	ldr	r3, [r7, #20]
 8001370:	fa02 f303 	lsl.w	r3, r2, r3
 8001374:	43db      	mvns	r3, r3
 8001376:	693a      	ldr	r2, [r7, #16]
 8001378:	4013      	ands	r3, r2
 800137a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	08db      	lsrs	r3, r3, #3
 8001382:	f003 0201 	and.w	r2, r3, #1
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	fa02 f303 	lsl.w	r3, r2, r3
 800138c:	693a      	ldr	r2, [r7, #16]
 800138e:	4313      	orrs	r3, r2
 8001390:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	693a      	ldr	r2, [r7, #16]
 8001396:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	f003 0303 	and.w	r3, r3, #3
 80013a0:	2b03      	cmp	r3, #3
 80013a2:	d017      	beq.n	80013d4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	68db      	ldr	r3, [r3, #12]
 80013a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80013aa:	697b      	ldr	r3, [r7, #20]
 80013ac:	005b      	lsls	r3, r3, #1
 80013ae:	2203      	movs	r2, #3
 80013b0:	fa02 f303 	lsl.w	r3, r2, r3
 80013b4:	43db      	mvns	r3, r3
 80013b6:	693a      	ldr	r2, [r7, #16]
 80013b8:	4013      	ands	r3, r2
 80013ba:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	689a      	ldr	r2, [r3, #8]
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	005b      	lsls	r3, r3, #1
 80013c4:	fa02 f303 	lsl.w	r3, r2, r3
 80013c8:	693a      	ldr	r2, [r7, #16]
 80013ca:	4313      	orrs	r3, r2
 80013cc:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	693a      	ldr	r2, [r7, #16]
 80013d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	f003 0303 	and.w	r3, r3, #3
 80013dc:	2b02      	cmp	r3, #2
 80013de:	d123      	bne.n	8001428 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	08da      	lsrs	r2, r3, #3
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	3208      	adds	r2, #8
 80013e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013ec:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80013ee:	697b      	ldr	r3, [r7, #20]
 80013f0:	f003 0307 	and.w	r3, r3, #7
 80013f4:	009b      	lsls	r3, r3, #2
 80013f6:	220f      	movs	r2, #15
 80013f8:	fa02 f303 	lsl.w	r3, r2, r3
 80013fc:	43db      	mvns	r3, r3
 80013fe:	693a      	ldr	r2, [r7, #16]
 8001400:	4013      	ands	r3, r2
 8001402:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	691a      	ldr	r2, [r3, #16]
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	f003 0307 	and.w	r3, r3, #7
 800140e:	009b      	lsls	r3, r3, #2
 8001410:	fa02 f303 	lsl.w	r3, r2, r3
 8001414:	693a      	ldr	r2, [r7, #16]
 8001416:	4313      	orrs	r3, r2
 8001418:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800141a:	697b      	ldr	r3, [r7, #20]
 800141c:	08da      	lsrs	r2, r3, #3
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	3208      	adds	r2, #8
 8001422:	6939      	ldr	r1, [r7, #16]
 8001424:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800142e:	697b      	ldr	r3, [r7, #20]
 8001430:	005b      	lsls	r3, r3, #1
 8001432:	2203      	movs	r2, #3
 8001434:	fa02 f303 	lsl.w	r3, r2, r3
 8001438:	43db      	mvns	r3, r3
 800143a:	693a      	ldr	r2, [r7, #16]
 800143c:	4013      	ands	r3, r2
 800143e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	f003 0203 	and.w	r2, r3, #3
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	005b      	lsls	r3, r3, #1
 800144c:	fa02 f303 	lsl.w	r3, r2, r3
 8001450:	693a      	ldr	r2, [r7, #16]
 8001452:	4313      	orrs	r3, r2
 8001454:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	693a      	ldr	r2, [r7, #16]
 800145a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001464:	2b00      	cmp	r3, #0
 8001466:	f000 80ac 	beq.w	80015c2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800146a:	4b5f      	ldr	r3, [pc, #380]	@ (80015e8 <HAL_GPIO_Init+0x330>)
 800146c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800146e:	4a5e      	ldr	r2, [pc, #376]	@ (80015e8 <HAL_GPIO_Init+0x330>)
 8001470:	f043 0301 	orr.w	r3, r3, #1
 8001474:	6613      	str	r3, [r2, #96]	@ 0x60
 8001476:	4b5c      	ldr	r3, [pc, #368]	@ (80015e8 <HAL_GPIO_Init+0x330>)
 8001478:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800147a:	f003 0301 	and.w	r3, r3, #1
 800147e:	60bb      	str	r3, [r7, #8]
 8001480:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001482:	4a5a      	ldr	r2, [pc, #360]	@ (80015ec <HAL_GPIO_Init+0x334>)
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	089b      	lsrs	r3, r3, #2
 8001488:	3302      	adds	r3, #2
 800148a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800148e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001490:	697b      	ldr	r3, [r7, #20]
 8001492:	f003 0303 	and.w	r3, r3, #3
 8001496:	009b      	lsls	r3, r3, #2
 8001498:	220f      	movs	r2, #15
 800149a:	fa02 f303 	lsl.w	r3, r2, r3
 800149e:	43db      	mvns	r3, r3
 80014a0:	693a      	ldr	r2, [r7, #16]
 80014a2:	4013      	ands	r3, r2
 80014a4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80014ac:	d025      	beq.n	80014fa <HAL_GPIO_Init+0x242>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	4a4f      	ldr	r2, [pc, #316]	@ (80015f0 <HAL_GPIO_Init+0x338>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d01f      	beq.n	80014f6 <HAL_GPIO_Init+0x23e>
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	4a4e      	ldr	r2, [pc, #312]	@ (80015f4 <HAL_GPIO_Init+0x33c>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d019      	beq.n	80014f2 <HAL_GPIO_Init+0x23a>
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	4a4d      	ldr	r2, [pc, #308]	@ (80015f8 <HAL_GPIO_Init+0x340>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d013      	beq.n	80014ee <HAL_GPIO_Init+0x236>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	4a4c      	ldr	r2, [pc, #304]	@ (80015fc <HAL_GPIO_Init+0x344>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d00d      	beq.n	80014ea <HAL_GPIO_Init+0x232>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	4a4b      	ldr	r2, [pc, #300]	@ (8001600 <HAL_GPIO_Init+0x348>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d007      	beq.n	80014e6 <HAL_GPIO_Init+0x22e>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	4a4a      	ldr	r2, [pc, #296]	@ (8001604 <HAL_GPIO_Init+0x34c>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d101      	bne.n	80014e2 <HAL_GPIO_Init+0x22a>
 80014de:	2306      	movs	r3, #6
 80014e0:	e00c      	b.n	80014fc <HAL_GPIO_Init+0x244>
 80014e2:	2307      	movs	r3, #7
 80014e4:	e00a      	b.n	80014fc <HAL_GPIO_Init+0x244>
 80014e6:	2305      	movs	r3, #5
 80014e8:	e008      	b.n	80014fc <HAL_GPIO_Init+0x244>
 80014ea:	2304      	movs	r3, #4
 80014ec:	e006      	b.n	80014fc <HAL_GPIO_Init+0x244>
 80014ee:	2303      	movs	r3, #3
 80014f0:	e004      	b.n	80014fc <HAL_GPIO_Init+0x244>
 80014f2:	2302      	movs	r3, #2
 80014f4:	e002      	b.n	80014fc <HAL_GPIO_Init+0x244>
 80014f6:	2301      	movs	r3, #1
 80014f8:	e000      	b.n	80014fc <HAL_GPIO_Init+0x244>
 80014fa:	2300      	movs	r3, #0
 80014fc:	697a      	ldr	r2, [r7, #20]
 80014fe:	f002 0203 	and.w	r2, r2, #3
 8001502:	0092      	lsls	r2, r2, #2
 8001504:	4093      	lsls	r3, r2
 8001506:	693a      	ldr	r2, [r7, #16]
 8001508:	4313      	orrs	r3, r2
 800150a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800150c:	4937      	ldr	r1, [pc, #220]	@ (80015ec <HAL_GPIO_Init+0x334>)
 800150e:	697b      	ldr	r3, [r7, #20]
 8001510:	089b      	lsrs	r3, r3, #2
 8001512:	3302      	adds	r3, #2
 8001514:	693a      	ldr	r2, [r7, #16]
 8001516:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800151a:	4b3b      	ldr	r3, [pc, #236]	@ (8001608 <HAL_GPIO_Init+0x350>)
 800151c:	689b      	ldr	r3, [r3, #8]
 800151e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	43db      	mvns	r3, r3
 8001524:	693a      	ldr	r2, [r7, #16]
 8001526:	4013      	ands	r3, r2
 8001528:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001532:	2b00      	cmp	r3, #0
 8001534:	d003      	beq.n	800153e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001536:	693a      	ldr	r2, [r7, #16]
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	4313      	orrs	r3, r2
 800153c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800153e:	4a32      	ldr	r2, [pc, #200]	@ (8001608 <HAL_GPIO_Init+0x350>)
 8001540:	693b      	ldr	r3, [r7, #16]
 8001542:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001544:	4b30      	ldr	r3, [pc, #192]	@ (8001608 <HAL_GPIO_Init+0x350>)
 8001546:	68db      	ldr	r3, [r3, #12]
 8001548:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	43db      	mvns	r3, r3
 800154e:	693a      	ldr	r2, [r7, #16]
 8001550:	4013      	ands	r3, r2
 8001552:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800155c:	2b00      	cmp	r3, #0
 800155e:	d003      	beq.n	8001568 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001560:	693a      	ldr	r2, [r7, #16]
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	4313      	orrs	r3, r2
 8001566:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001568:	4a27      	ldr	r2, [pc, #156]	@ (8001608 <HAL_GPIO_Init+0x350>)
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800156e:	4b26      	ldr	r3, [pc, #152]	@ (8001608 <HAL_GPIO_Init+0x350>)
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	43db      	mvns	r3, r3
 8001578:	693a      	ldr	r2, [r7, #16]
 800157a:	4013      	ands	r3, r2
 800157c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001586:	2b00      	cmp	r3, #0
 8001588:	d003      	beq.n	8001592 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800158a:	693a      	ldr	r2, [r7, #16]
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	4313      	orrs	r3, r2
 8001590:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001592:	4a1d      	ldr	r2, [pc, #116]	@ (8001608 <HAL_GPIO_Init+0x350>)
 8001594:	693b      	ldr	r3, [r7, #16]
 8001596:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001598:	4b1b      	ldr	r3, [pc, #108]	@ (8001608 <HAL_GPIO_Init+0x350>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	43db      	mvns	r3, r3
 80015a2:	693a      	ldr	r2, [r7, #16]
 80015a4:	4013      	ands	r3, r2
 80015a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d003      	beq.n	80015bc <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80015b4:	693a      	ldr	r2, [r7, #16]
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	4313      	orrs	r3, r2
 80015ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80015bc:	4a12      	ldr	r2, [pc, #72]	@ (8001608 <HAL_GPIO_Init+0x350>)
 80015be:	693b      	ldr	r3, [r7, #16]
 80015c0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	3301      	adds	r3, #1
 80015c6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	681a      	ldr	r2, [r3, #0]
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	fa22 f303 	lsr.w	r3, r2, r3
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	f47f ae78 	bne.w	80012c8 <HAL_GPIO_Init+0x10>
  }
}
 80015d8:	bf00      	nop
 80015da:	bf00      	nop
 80015dc:	371c      	adds	r7, #28
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr
 80015e6:	bf00      	nop
 80015e8:	40021000 	.word	0x40021000
 80015ec:	40010000 	.word	0x40010000
 80015f0:	48000400 	.word	0x48000400
 80015f4:	48000800 	.word	0x48000800
 80015f8:	48000c00 	.word	0x48000c00
 80015fc:	48001000 	.word	0x48001000
 8001600:	48001400 	.word	0x48001400
 8001604:	48001800 	.word	0x48001800
 8001608:	40010400 	.word	0x40010400

0800160c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800160c:	b480      	push	{r7}
 800160e:	b087      	sub	sp, #28
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
 8001614:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001616:	2300      	movs	r3, #0
 8001618:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800161a:	e0cd      	b.n	80017b8 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800161c:	2201      	movs	r2, #1
 800161e:	697b      	ldr	r3, [r7, #20]
 8001620:	fa02 f303 	lsl.w	r3, r2, r3
 8001624:	683a      	ldr	r2, [r7, #0]
 8001626:	4013      	ands	r3, r2
 8001628:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800162a:	693b      	ldr	r3, [r7, #16]
 800162c:	2b00      	cmp	r3, #0
 800162e:	f000 80c0 	beq.w	80017b2 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8001632:	4a68      	ldr	r2, [pc, #416]	@ (80017d4 <HAL_GPIO_DeInit+0x1c8>)
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	089b      	lsrs	r3, r3, #2
 8001638:	3302      	adds	r3, #2
 800163a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800163e:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	f003 0303 	and.w	r3, r3, #3
 8001646:	009b      	lsls	r3, r3, #2
 8001648:	220f      	movs	r2, #15
 800164a:	fa02 f303 	lsl.w	r3, r2, r3
 800164e:	68fa      	ldr	r2, [r7, #12]
 8001650:	4013      	ands	r3, r2
 8001652:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800165a:	d025      	beq.n	80016a8 <HAL_GPIO_DeInit+0x9c>
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	4a5e      	ldr	r2, [pc, #376]	@ (80017d8 <HAL_GPIO_DeInit+0x1cc>)
 8001660:	4293      	cmp	r3, r2
 8001662:	d01f      	beq.n	80016a4 <HAL_GPIO_DeInit+0x98>
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	4a5d      	ldr	r2, [pc, #372]	@ (80017dc <HAL_GPIO_DeInit+0x1d0>)
 8001668:	4293      	cmp	r3, r2
 800166a:	d019      	beq.n	80016a0 <HAL_GPIO_DeInit+0x94>
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	4a5c      	ldr	r2, [pc, #368]	@ (80017e0 <HAL_GPIO_DeInit+0x1d4>)
 8001670:	4293      	cmp	r3, r2
 8001672:	d013      	beq.n	800169c <HAL_GPIO_DeInit+0x90>
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	4a5b      	ldr	r2, [pc, #364]	@ (80017e4 <HAL_GPIO_DeInit+0x1d8>)
 8001678:	4293      	cmp	r3, r2
 800167a:	d00d      	beq.n	8001698 <HAL_GPIO_DeInit+0x8c>
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	4a5a      	ldr	r2, [pc, #360]	@ (80017e8 <HAL_GPIO_DeInit+0x1dc>)
 8001680:	4293      	cmp	r3, r2
 8001682:	d007      	beq.n	8001694 <HAL_GPIO_DeInit+0x88>
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	4a59      	ldr	r2, [pc, #356]	@ (80017ec <HAL_GPIO_DeInit+0x1e0>)
 8001688:	4293      	cmp	r3, r2
 800168a:	d101      	bne.n	8001690 <HAL_GPIO_DeInit+0x84>
 800168c:	2306      	movs	r3, #6
 800168e:	e00c      	b.n	80016aa <HAL_GPIO_DeInit+0x9e>
 8001690:	2307      	movs	r3, #7
 8001692:	e00a      	b.n	80016aa <HAL_GPIO_DeInit+0x9e>
 8001694:	2305      	movs	r3, #5
 8001696:	e008      	b.n	80016aa <HAL_GPIO_DeInit+0x9e>
 8001698:	2304      	movs	r3, #4
 800169a:	e006      	b.n	80016aa <HAL_GPIO_DeInit+0x9e>
 800169c:	2303      	movs	r3, #3
 800169e:	e004      	b.n	80016aa <HAL_GPIO_DeInit+0x9e>
 80016a0:	2302      	movs	r3, #2
 80016a2:	e002      	b.n	80016aa <HAL_GPIO_DeInit+0x9e>
 80016a4:	2301      	movs	r3, #1
 80016a6:	e000      	b.n	80016aa <HAL_GPIO_DeInit+0x9e>
 80016a8:	2300      	movs	r3, #0
 80016aa:	697a      	ldr	r2, [r7, #20]
 80016ac:	f002 0203 	and.w	r2, r2, #3
 80016b0:	0092      	lsls	r2, r2, #2
 80016b2:	4093      	lsls	r3, r2
 80016b4:	68fa      	ldr	r2, [r7, #12]
 80016b6:	429a      	cmp	r2, r3
 80016b8:	d132      	bne.n	8001720 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80016ba:	4b4d      	ldr	r3, [pc, #308]	@ (80017f0 <HAL_GPIO_DeInit+0x1e4>)
 80016bc:	681a      	ldr	r2, [r3, #0]
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	43db      	mvns	r3, r3
 80016c2:	494b      	ldr	r1, [pc, #300]	@ (80017f0 <HAL_GPIO_DeInit+0x1e4>)
 80016c4:	4013      	ands	r3, r2
 80016c6:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 80016c8:	4b49      	ldr	r3, [pc, #292]	@ (80017f0 <HAL_GPIO_DeInit+0x1e4>)
 80016ca:	685a      	ldr	r2, [r3, #4]
 80016cc:	693b      	ldr	r3, [r7, #16]
 80016ce:	43db      	mvns	r3, r3
 80016d0:	4947      	ldr	r1, [pc, #284]	@ (80017f0 <HAL_GPIO_DeInit+0x1e4>)
 80016d2:	4013      	ands	r3, r2
 80016d4:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 80016d6:	4b46      	ldr	r3, [pc, #280]	@ (80017f0 <HAL_GPIO_DeInit+0x1e4>)
 80016d8:	68da      	ldr	r2, [r3, #12]
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	43db      	mvns	r3, r3
 80016de:	4944      	ldr	r1, [pc, #272]	@ (80017f0 <HAL_GPIO_DeInit+0x1e4>)
 80016e0:	4013      	ands	r3, r2
 80016e2:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 80016e4:	4b42      	ldr	r3, [pc, #264]	@ (80017f0 <HAL_GPIO_DeInit+0x1e4>)
 80016e6:	689a      	ldr	r2, [r3, #8]
 80016e8:	693b      	ldr	r3, [r7, #16]
 80016ea:	43db      	mvns	r3, r3
 80016ec:	4940      	ldr	r1, [pc, #256]	@ (80017f0 <HAL_GPIO_DeInit+0x1e4>)
 80016ee:	4013      	ands	r3, r2
 80016f0:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 80016f2:	697b      	ldr	r3, [r7, #20]
 80016f4:	f003 0303 	and.w	r3, r3, #3
 80016f8:	009b      	lsls	r3, r3, #2
 80016fa:	220f      	movs	r2, #15
 80016fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001700:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8001702:	4a34      	ldr	r2, [pc, #208]	@ (80017d4 <HAL_GPIO_DeInit+0x1c8>)
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	089b      	lsrs	r3, r3, #2
 8001708:	3302      	adds	r3, #2
 800170a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	43da      	mvns	r2, r3
 8001712:	4830      	ldr	r0, [pc, #192]	@ (80017d4 <HAL_GPIO_DeInit+0x1c8>)
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	089b      	lsrs	r3, r3, #2
 8001718:	400a      	ands	r2, r1
 800171a:	3302      	adds	r3, #2
 800171c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681a      	ldr	r2, [r3, #0]
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	005b      	lsls	r3, r3, #1
 8001728:	2103      	movs	r1, #3
 800172a:	fa01 f303 	lsl.w	r3, r1, r3
 800172e:	431a      	orrs	r2, r3
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	08da      	lsrs	r2, r3, #3
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	3208      	adds	r2, #8
 800173c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	f003 0307 	and.w	r3, r3, #7
 8001746:	009b      	lsls	r3, r3, #2
 8001748:	220f      	movs	r2, #15
 800174a:	fa02 f303 	lsl.w	r3, r2, r3
 800174e:	43db      	mvns	r3, r3
 8001750:	697a      	ldr	r2, [r7, #20]
 8001752:	08d2      	lsrs	r2, r2, #3
 8001754:	4019      	ands	r1, r3
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	3208      	adds	r2, #8
 800175a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	689a      	ldr	r2, [r3, #8]
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	005b      	lsls	r3, r3, #1
 8001766:	2103      	movs	r1, #3
 8001768:	fa01 f303 	lsl.w	r3, r1, r3
 800176c:	43db      	mvns	r3, r3
 800176e:	401a      	ands	r2, r3
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	685a      	ldr	r2, [r3, #4]
 8001778:	2101      	movs	r1, #1
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	fa01 f303 	lsl.w	r3, r1, r3
 8001780:	43db      	mvns	r3, r3
 8001782:	401a      	ands	r2, r3
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	68da      	ldr	r2, [r3, #12]
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	005b      	lsls	r3, r3, #1
 8001790:	2103      	movs	r1, #3
 8001792:	fa01 f303 	lsl.w	r3, r1, r3
 8001796:	43db      	mvns	r3, r3
 8001798:	401a      	ands	r2, r3
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80017a2:	2101      	movs	r1, #1
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	fa01 f303 	lsl.w	r3, r1, r3
 80017aa:	43db      	mvns	r3, r3
 80017ac:	401a      	ands	r2, r3
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	3301      	adds	r3, #1
 80017b6:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80017b8:	683a      	ldr	r2, [r7, #0]
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	fa22 f303 	lsr.w	r3, r2, r3
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	f47f af2b 	bne.w	800161c <HAL_GPIO_DeInit+0x10>
  }
}
 80017c6:	bf00      	nop
 80017c8:	bf00      	nop
 80017ca:	371c      	adds	r7, #28
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr
 80017d4:	40010000 	.word	0x40010000
 80017d8:	48000400 	.word	0x48000400
 80017dc:	48000800 	.word	0x48000800
 80017e0:	48000c00 	.word	0x48000c00
 80017e4:	48001000 	.word	0x48001000
 80017e8:	48001400 	.word	0x48001400
 80017ec:	48001800 	.word	0x48001800
 80017f0:	40010400 	.word	0x40010400

080017f4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b085      	sub	sp, #20
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
 80017fc:	460b      	mov	r3, r1
 80017fe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	691a      	ldr	r2, [r3, #16]
 8001804:	887b      	ldrh	r3, [r7, #2]
 8001806:	4013      	ands	r3, r2
 8001808:	2b00      	cmp	r3, #0
 800180a:	d002      	beq.n	8001812 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800180c:	2301      	movs	r3, #1
 800180e:	73fb      	strb	r3, [r7, #15]
 8001810:	e001      	b.n	8001816 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001812:	2300      	movs	r3, #0
 8001814:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001816:	7bfb      	ldrb	r3, [r7, #15]
}
 8001818:	4618      	mov	r0, r3
 800181a:	3714      	adds	r7, #20
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr

08001824 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001824:	b480      	push	{r7}
 8001826:	b085      	sub	sp, #20
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
 800182c:	460b      	mov	r3, r1
 800182e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	695b      	ldr	r3, [r3, #20]
 8001834:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001836:	887a      	ldrh	r2, [r7, #2]
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	4013      	ands	r3, r2
 800183c:	041a      	lsls	r2, r3, #16
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	43d9      	mvns	r1, r3
 8001842:	887b      	ldrh	r3, [r7, #2]
 8001844:	400b      	ands	r3, r1
 8001846:	431a      	orrs	r2, r3
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	619a      	str	r2, [r3, #24]
}
 800184c:	bf00      	nop
 800184e:	3714      	adds	r7, #20
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr

08001858 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b082      	sub	sp, #8
 800185c:	af00      	add	r7, sp, #0
 800185e:	4603      	mov	r3, r0
 8001860:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001862:	4b08      	ldr	r3, [pc, #32]	@ (8001884 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001864:	695a      	ldr	r2, [r3, #20]
 8001866:	88fb      	ldrh	r3, [r7, #6]
 8001868:	4013      	ands	r3, r2
 800186a:	2b00      	cmp	r3, #0
 800186c:	d006      	beq.n	800187c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800186e:	4a05      	ldr	r2, [pc, #20]	@ (8001884 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001870:	88fb      	ldrh	r3, [r7, #6]
 8001872:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001874:	88fb      	ldrh	r3, [r7, #6]
 8001876:	4618      	mov	r0, r3
 8001878:	f7ff f81e 	bl	80008b8 <HAL_GPIO_EXTI_Callback>
  }
}
 800187c:	bf00      	nop
 800187e:	3708      	adds	r7, #8
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}
 8001884:	40010400 	.word	0x40010400

08001888 <HAL_PWR_EnableWakeUpPin>:
  *           @arg @ref PWR_WAKEUP_PIN5_HIGH or PWR_WAKEUP_PIN5_LOW
  * @note  PWR_WAKEUP_PINx and PWR_WAKEUP_PINx_HIGH are equivalent.
  * @retval None
  */
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinPolarity)
{
 8001888:	b480      	push	{r7}
 800188a:	b083      	sub	sp, #12
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinPolarity));

  /* Specifies the Wake-Up pin polarity for the event detection
    (rising or falling edge) */
  MODIFY_REG(PWR->CR4, (PWR_CR3_EWUP & WakeUpPinPolarity), (WakeUpPinPolarity >> PWR_WUP_POLARITY_SHIFT));
 8001890:	4b0c      	ldr	r3, [pc, #48]	@ (80018c4 <HAL_PWR_EnableWakeUpPin+0x3c>)
 8001892:	68da      	ldr	r2, [r3, #12]
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	f003 031f 	and.w	r3, r3, #31
 800189a:	43db      	mvns	r3, r3
 800189c:	401a      	ands	r2, r3
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	095b      	lsrs	r3, r3, #5
 80018a2:	4908      	ldr	r1, [pc, #32]	@ (80018c4 <HAL_PWR_EnableWakeUpPin+0x3c>)
 80018a4:	4313      	orrs	r3, r2
 80018a6:	60cb      	str	r3, [r1, #12]

  /* Enable wake-up pin */
  SET_BIT(PWR->CR3, (PWR_CR3_EWUP & WakeUpPinPolarity));
 80018a8:	4b06      	ldr	r3, [pc, #24]	@ (80018c4 <HAL_PWR_EnableWakeUpPin+0x3c>)
 80018aa:	689a      	ldr	r2, [r3, #8]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	f003 031f 	and.w	r3, r3, #31
 80018b2:	4904      	ldr	r1, [pc, #16]	@ (80018c4 <HAL_PWR_EnableWakeUpPin+0x3c>)
 80018b4:	4313      	orrs	r3, r2
 80018b6:	608b      	str	r3, [r1, #8]


}
 80018b8:	bf00      	nop
 80018ba:	370c      	adds	r7, #12
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr
 80018c4:	40007000 	.word	0x40007000

080018c8 <HAL_PWR_DisableWakeUpPin>:
  *         This parameter can be one of the following values:
  *           @arg @ref PWR_WAKEUP_PIN1, PWR_WAKEUP_PIN2, PWR_WAKEUP_PIN3, PWR_WAKEUP_PIN4, PWR_WAKEUP_PIN5
  * @retval None
  */
void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b083      	sub	sp, #12
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));

  CLEAR_BIT(PWR->CR3, (PWR_CR3_EWUP & WakeUpPinx));
 80018d0:	4b07      	ldr	r3, [pc, #28]	@ (80018f0 <HAL_PWR_DisableWakeUpPin+0x28>)
 80018d2:	689a      	ldr	r2, [r3, #8]
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	f003 031f 	and.w	r3, r3, #31
 80018da:	43db      	mvns	r3, r3
 80018dc:	4904      	ldr	r1, [pc, #16]	@ (80018f0 <HAL_PWR_DisableWakeUpPin+0x28>)
 80018de:	4013      	ands	r3, r2
 80018e0:	608b      	str	r3, [r1, #8]
}
 80018e2:	bf00      	nop
 80018e4:	370c      	adds	r7, #12
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr
 80018ee:	bf00      	nop
 80018f0:	40007000 	.word	0x40007000

080018f4 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b082      	sub	sp, #8
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
 80018fc:	460b      	mov	r3, r1
 80018fe:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d10c      	bne.n	8001920 <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 8001906:	4b13      	ldr	r3, [pc, #76]	@ (8001954 <HAL_PWR_EnterSLEEPMode+0x60>)
 8001908:	695b      	ldr	r3, [r3, #20]
 800190a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800190e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001912:	d10e      	bne.n	8001932 <HAL_PWR_EnterSLEEPMode+0x3e>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 8001914:	f000 f8c8 	bl	8001aa8 <HAL_PWREx_DisableLowPowerRunMode>
 8001918:	4603      	mov	r3, r0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d009      	beq.n	8001932 <HAL_PWR_EnterSLEEPMode+0x3e>
      {
        return ;
 800191e:	e016      	b.n	800194e <HAL_PWR_EnterSLEEPMode+0x5a>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF) == RESET)
 8001920:	4b0c      	ldr	r3, [pc, #48]	@ (8001954 <HAL_PWR_EnterSLEEPMode+0x60>)
 8001922:	695b      	ldr	r3, [r3, #20]
 8001924:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001928:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800192c:	d001      	beq.n	8001932 <HAL_PWR_EnterSLEEPMode+0x3e>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 800192e:	f000 f8ab 	bl	8001a88 <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001932:	4b09      	ldr	r3, [pc, #36]	@ (8001958 <HAL_PWR_EnterSLEEPMode+0x64>)
 8001934:	691b      	ldr	r3, [r3, #16]
 8001936:	4a08      	ldr	r2, [pc, #32]	@ (8001958 <HAL_PWR_EnterSLEEPMode+0x64>)
 8001938:	f023 0304 	bic.w	r3, r3, #4
 800193c:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 800193e:	78fb      	ldrb	r3, [r7, #3]
 8001940:	2b01      	cmp	r3, #1
 8001942:	d101      	bne.n	8001948 <HAL_PWR_EnterSLEEPMode+0x54>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8001944:	bf30      	wfi
 8001946:	e002      	b.n	800194e <HAL_PWR_EnterSLEEPMode+0x5a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8001948:	bf40      	sev
    __WFE();
 800194a:	bf20      	wfe
    __WFE();
 800194c:	bf20      	wfe
  }

}
 800194e:	3708      	adds	r7, #8
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}
 8001954:	40007000 	.word	0x40007000
 8001958:	e000ed00 	.word	0xe000ed00

0800195c <HAL_PWR_EnterSTOPMode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop 0 or Stop 1 mode with WFI instruction.
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop 0 or Stop 1 mode with WFE instruction.
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b082      	sub	sp, #8
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
 8001964:	460b      	mov	r3, r1
 8001966:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));

  if(Regulator == PWR_LOWPOWERREGULATOR_ON)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800196e:	d104      	bne.n	800197a <HAL_PWR_EnterSTOPMode+0x1e>
  {
    HAL_PWREx_EnterSTOP1Mode(STOPEntry);
 8001970:	78fb      	ldrb	r3, [r7, #3]
 8001972:	4618      	mov	r0, r3
 8001974:	f000 f8fa 	bl	8001b6c <HAL_PWREx_EnterSTOP1Mode>
  }
  else
  {
    HAL_PWREx_EnterSTOP0Mode(STOPEntry);
  }
}
 8001978:	e003      	b.n	8001982 <HAL_PWR_EnterSTOPMode+0x26>
    HAL_PWREx_EnterSTOP0Mode(STOPEntry);
 800197a:	78fb      	ldrb	r3, [r7, #3]
 800197c:	4618      	mov	r0, r3
 800197e:	f000 f8cb 	bl	8001b18 <HAL_PWREx_EnterSTOP0Mode>
}
 8001982:	bf00      	nop
 8001984:	3708      	adds	r7, #8
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
	...

0800198c <HAL_PWR_EnterSTANDBYMode>:
  *        These states are effective in Standby mode only if APC bit is set through
  *        HAL_PWREx_EnablePullUpPullDownConfig() API.
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
  /* Set Stand-by mode */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STANDBY);
 8001990:	4b09      	ldr	r3, [pc, #36]	@ (80019b8 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f023 0307 	bic.w	r3, r3, #7
 8001998:	4a07      	ldr	r2, [pc, #28]	@ (80019b8 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 800199a:	f043 0303 	orr.w	r3, r3, #3
 800199e:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80019a0:	4b06      	ldr	r3, [pc, #24]	@ (80019bc <HAL_PWR_EnterSTANDBYMode+0x30>)
 80019a2:	691b      	ldr	r3, [r3, #16]
 80019a4:	4a05      	ldr	r2, [pc, #20]	@ (80019bc <HAL_PWR_EnterSTANDBYMode+0x30>)
 80019a6:	f043 0304 	orr.w	r3, r3, #4
 80019aa:	6113      	str	r3, [r2, #16]
/* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 80019ac:	bf30      	wfi
}
 80019ae:	bf00      	nop
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr
 80019b8:	40007000 	.word	0x40007000
 80019bc:	e000ed00 	.word	0xe000ed00

080019c0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80019c4:	4b04      	ldr	r3, [pc, #16]	@ (80019d8 <HAL_PWREx_GetVoltageRange+0x18>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr
 80019d6:	bf00      	nop
 80019d8:	40007000 	.word	0x40007000

080019dc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80019dc:	b480      	push	{r7}
 80019de:	b085      	sub	sp, #20
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80019ea:	d130      	bne.n	8001a4e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80019ec:	4b23      	ldr	r3, [pc, #140]	@ (8001a7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80019f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80019f8:	d038      	beq.n	8001a6c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80019fa:	4b20      	ldr	r3, [pc, #128]	@ (8001a7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001a02:	4a1e      	ldr	r2, [pc, #120]	@ (8001a7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a04:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001a08:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001a0a:	4b1d      	ldr	r3, [pc, #116]	@ (8001a80 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	2232      	movs	r2, #50	@ 0x32
 8001a10:	fb02 f303 	mul.w	r3, r2, r3
 8001a14:	4a1b      	ldr	r2, [pc, #108]	@ (8001a84 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001a16:	fba2 2303 	umull	r2, r3, r2, r3
 8001a1a:	0c9b      	lsrs	r3, r3, #18
 8001a1c:	3301      	adds	r3, #1
 8001a1e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a20:	e002      	b.n	8001a28 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	3b01      	subs	r3, #1
 8001a26:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a28:	4b14      	ldr	r3, [pc, #80]	@ (8001a7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a2a:	695b      	ldr	r3, [r3, #20]
 8001a2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a30:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001a34:	d102      	bne.n	8001a3c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d1f2      	bne.n	8001a22 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001a3c:	4b0f      	ldr	r3, [pc, #60]	@ (8001a7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a3e:	695b      	ldr	r3, [r3, #20]
 8001a40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a44:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001a48:	d110      	bne.n	8001a6c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	e00f      	b.n	8001a6e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001a4e:	4b0b      	ldr	r3, [pc, #44]	@ (8001a7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001a56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001a5a:	d007      	beq.n	8001a6c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001a5c:	4b07      	ldr	r3, [pc, #28]	@ (8001a7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001a64:	4a05      	ldr	r2, [pc, #20]	@ (8001a7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a66:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001a6a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001a6c:	2300      	movs	r3, #0
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3714      	adds	r7, #20
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr
 8001a7a:	bf00      	nop
 8001a7c:	40007000 	.word	0x40007000
 8001a80:	20000000 	.word	0x20000000
 8001a84:	431bde83 	.word	0x431bde83

08001a88 <HAL_PWREx_EnableLowPowerRunMode>:
  *        Setting RUN_PD in FLASH_ACR then appropriately reducing the clock frequency must
  *        be done before calling HAL_PWREx_EnableLowPowerRunMode() API.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 8001a8c:	4b05      	ldr	r3, [pc, #20]	@ (8001aa4 <HAL_PWREx_EnableLowPowerRunMode+0x1c>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a04      	ldr	r2, [pc, #16]	@ (8001aa4 <HAL_PWREx_EnableLowPowerRunMode+0x1c>)
 8001a92:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a96:	6013      	str	r3, [r2, #0]
}
 8001a98:	bf00      	nop
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr
 8001aa2:	bf00      	nop
 8001aa4:	40007000 	.word	0x40007000

08001aa8 <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b083      	sub	sp, #12
 8001aac:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 8001aae:	4b17      	ldr	r3, [pc, #92]	@ (8001b0c <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4a16      	ldr	r2, [pc, #88]	@ (8001b0c <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8001ab4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001ab8:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001aba:	4b15      	ldr	r3, [pc, #84]	@ (8001b10 <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	2232      	movs	r2, #50	@ 0x32
 8001ac0:	fb02 f303 	mul.w	r3, r2, r3
 8001ac4:	4a13      	ldr	r2, [pc, #76]	@ (8001b14 <HAL_PWREx_DisableLowPowerRunMode+0x6c>)
 8001ac6:	fba2 2303 	umull	r2, r3, r2, r3
 8001aca:	0c9b      	lsrs	r3, r3, #18
 8001acc:	3301      	adds	r3, #1
 8001ace:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8001ad0:	e002      	b.n	8001ad8 <HAL_PWREx_DisableLowPowerRunMode+0x30>
  {
    wait_loop_index--;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	3b01      	subs	r3, #1
 8001ad6:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8001ad8:	4b0c      	ldr	r3, [pc, #48]	@ (8001b0c <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8001ada:	695b      	ldr	r3, [r3, #20]
 8001adc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001ae0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001ae4:	d102      	bne.n	8001aec <HAL_PWREx_DisableLowPowerRunMode+0x44>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d1f2      	bne.n	8001ad2 <HAL_PWREx_DisableLowPowerRunMode+0x2a>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 8001aec:	4b07      	ldr	r3, [pc, #28]	@ (8001b0c <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8001aee:	695b      	ldr	r3, [r3, #20]
 8001af0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001af4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001af8:	d101      	bne.n	8001afe <HAL_PWREx_DisableLowPowerRunMode+0x56>
  {
    return HAL_TIMEOUT;
 8001afa:	2303      	movs	r3, #3
 8001afc:	e000      	b.n	8001b00 <HAL_PWREx_DisableLowPowerRunMode+0x58>
  }

  return HAL_OK;
 8001afe:	2300      	movs	r3, #0
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	370c      	adds	r7, #12
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr
 8001b0c:	40007000 	.word	0x40007000
 8001b10:	20000000 	.word	0x20000000
 8001b14:	431bde83 	.word	0x431bde83

08001b18 <HAL_PWREx_EnterSTOP0Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP0Mode(uint8_t STOPEntry)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b083      	sub	sp, #12
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	4603      	mov	r3, r0
 8001b20:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Stop 0 mode with Main Regulator */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STOP0);
 8001b22:	4b10      	ldr	r3, [pc, #64]	@ (8001b64 <HAL_PWREx_EnterSTOP0Mode+0x4c>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a0f      	ldr	r2, [pc, #60]	@ (8001b64 <HAL_PWREx_EnterSTOP0Mode+0x4c>)
 8001b28:	f023 0307 	bic.w	r3, r3, #7
 8001b2c:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001b2e:	4b0e      	ldr	r3, [pc, #56]	@ (8001b68 <HAL_PWREx_EnterSTOP0Mode+0x50>)
 8001b30:	691b      	ldr	r3, [r3, #16]
 8001b32:	4a0d      	ldr	r2, [pc, #52]	@ (8001b68 <HAL_PWREx_EnterSTOP0Mode+0x50>)
 8001b34:	f043 0304 	orr.w	r3, r3, #4
 8001b38:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8001b3a:	79fb      	ldrb	r3, [r7, #7]
 8001b3c:	2b01      	cmp	r3, #1
 8001b3e:	d101      	bne.n	8001b44 <HAL_PWREx_EnterSTOP0Mode+0x2c>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8001b40:	bf30      	wfi
 8001b42:	e002      	b.n	8001b4a <HAL_PWREx_EnterSTOP0Mode+0x32>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8001b44:	bf40      	sev
    __WFE();
 8001b46:	bf20      	wfe
    __WFE();
 8001b48:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001b4a:	4b07      	ldr	r3, [pc, #28]	@ (8001b68 <HAL_PWREx_EnterSTOP0Mode+0x50>)
 8001b4c:	691b      	ldr	r3, [r3, #16]
 8001b4e:	4a06      	ldr	r2, [pc, #24]	@ (8001b68 <HAL_PWREx_EnterSTOP0Mode+0x50>)
 8001b50:	f023 0304 	bic.w	r3, r3, #4
 8001b54:	6113      	str	r3, [r2, #16]
}
 8001b56:	bf00      	nop
 8001b58:	370c      	adds	r7, #12
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr
 8001b62:	bf00      	nop
 8001b64:	40007000 	.word	0x40007000
 8001b68:	e000ed00 	.word	0xe000ed00

08001b6c <HAL_PWREx_EnterSTOP1Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP1Mode(uint8_t STOPEntry)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b083      	sub	sp, #12
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	4603      	mov	r3, r0
 8001b74:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Stop 1 mode with Low-Power Regulator */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STOP1);
 8001b76:	4b11      	ldr	r3, [pc, #68]	@ (8001bbc <HAL_PWREx_EnterSTOP1Mode+0x50>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f023 0307 	bic.w	r3, r3, #7
 8001b7e:	4a0f      	ldr	r2, [pc, #60]	@ (8001bbc <HAL_PWREx_EnterSTOP1Mode+0x50>)
 8001b80:	f043 0301 	orr.w	r3, r3, #1
 8001b84:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001b86:	4b0e      	ldr	r3, [pc, #56]	@ (8001bc0 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 8001b88:	691b      	ldr	r3, [r3, #16]
 8001b8a:	4a0d      	ldr	r2, [pc, #52]	@ (8001bc0 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 8001b8c:	f043 0304 	orr.w	r3, r3, #4
 8001b90:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8001b92:	79fb      	ldrb	r3, [r7, #7]
 8001b94:	2b01      	cmp	r3, #1
 8001b96:	d101      	bne.n	8001b9c <HAL_PWREx_EnterSTOP1Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8001b98:	bf30      	wfi
 8001b9a:	e002      	b.n	8001ba2 <HAL_PWREx_EnterSTOP1Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8001b9c:	bf40      	sev
    __WFE();
 8001b9e:	bf20      	wfe
    __WFE();
 8001ba0:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001ba2:	4b07      	ldr	r3, [pc, #28]	@ (8001bc0 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 8001ba4:	691b      	ldr	r3, [r3, #16]
 8001ba6:	4a06      	ldr	r2, [pc, #24]	@ (8001bc0 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 8001ba8:	f023 0304 	bic.w	r3, r3, #4
 8001bac:	6113      	str	r3, [r2, #16]
}
 8001bae:	bf00      	nop
 8001bb0:	370c      	adds	r7, #12
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr
 8001bba:	bf00      	nop
 8001bbc:	40007000 	.word	0x40007000
 8001bc0:	e000ed00 	.word	0xe000ed00

08001bc4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b088      	sub	sp, #32
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d101      	bne.n	8001bd6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e3ca      	b.n	800236c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001bd6:	4b97      	ldr	r3, [pc, #604]	@ (8001e34 <HAL_RCC_OscConfig+0x270>)
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	f003 030c 	and.w	r3, r3, #12
 8001bde:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001be0:	4b94      	ldr	r3, [pc, #592]	@ (8001e34 <HAL_RCC_OscConfig+0x270>)
 8001be2:	68db      	ldr	r3, [r3, #12]
 8001be4:	f003 0303 	and.w	r3, r3, #3
 8001be8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f003 0310 	and.w	r3, r3, #16
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	f000 80e4 	beq.w	8001dc0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001bf8:	69bb      	ldr	r3, [r7, #24]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d007      	beq.n	8001c0e <HAL_RCC_OscConfig+0x4a>
 8001bfe:	69bb      	ldr	r3, [r7, #24]
 8001c00:	2b0c      	cmp	r3, #12
 8001c02:	f040 808b 	bne.w	8001d1c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	2b01      	cmp	r3, #1
 8001c0a:	f040 8087 	bne.w	8001d1c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001c0e:	4b89      	ldr	r3, [pc, #548]	@ (8001e34 <HAL_RCC_OscConfig+0x270>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f003 0302 	and.w	r3, r3, #2
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d005      	beq.n	8001c26 <HAL_RCC_OscConfig+0x62>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	699b      	ldr	r3, [r3, #24]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d101      	bne.n	8001c26 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001c22:	2301      	movs	r3, #1
 8001c24:	e3a2      	b.n	800236c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6a1a      	ldr	r2, [r3, #32]
 8001c2a:	4b82      	ldr	r3, [pc, #520]	@ (8001e34 <HAL_RCC_OscConfig+0x270>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f003 0308 	and.w	r3, r3, #8
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d004      	beq.n	8001c40 <HAL_RCC_OscConfig+0x7c>
 8001c36:	4b7f      	ldr	r3, [pc, #508]	@ (8001e34 <HAL_RCC_OscConfig+0x270>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001c3e:	e005      	b.n	8001c4c <HAL_RCC_OscConfig+0x88>
 8001c40:	4b7c      	ldr	r3, [pc, #496]	@ (8001e34 <HAL_RCC_OscConfig+0x270>)
 8001c42:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001c46:	091b      	lsrs	r3, r3, #4
 8001c48:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d223      	bcs.n	8001c98 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6a1b      	ldr	r3, [r3, #32]
 8001c54:	4618      	mov	r0, r3
 8001c56:	f000 fd55 	bl	8002704 <RCC_SetFlashLatencyFromMSIRange>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d001      	beq.n	8001c64 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001c60:	2301      	movs	r3, #1
 8001c62:	e383      	b.n	800236c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c64:	4b73      	ldr	r3, [pc, #460]	@ (8001e34 <HAL_RCC_OscConfig+0x270>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a72      	ldr	r2, [pc, #456]	@ (8001e34 <HAL_RCC_OscConfig+0x270>)
 8001c6a:	f043 0308 	orr.w	r3, r3, #8
 8001c6e:	6013      	str	r3, [r2, #0]
 8001c70:	4b70      	ldr	r3, [pc, #448]	@ (8001e34 <HAL_RCC_OscConfig+0x270>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6a1b      	ldr	r3, [r3, #32]
 8001c7c:	496d      	ldr	r1, [pc, #436]	@ (8001e34 <HAL_RCC_OscConfig+0x270>)
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c82:	4b6c      	ldr	r3, [pc, #432]	@ (8001e34 <HAL_RCC_OscConfig+0x270>)
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	69db      	ldr	r3, [r3, #28]
 8001c8e:	021b      	lsls	r3, r3, #8
 8001c90:	4968      	ldr	r1, [pc, #416]	@ (8001e34 <HAL_RCC_OscConfig+0x270>)
 8001c92:	4313      	orrs	r3, r2
 8001c94:	604b      	str	r3, [r1, #4]
 8001c96:	e025      	b.n	8001ce4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c98:	4b66      	ldr	r3, [pc, #408]	@ (8001e34 <HAL_RCC_OscConfig+0x270>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a65      	ldr	r2, [pc, #404]	@ (8001e34 <HAL_RCC_OscConfig+0x270>)
 8001c9e:	f043 0308 	orr.w	r3, r3, #8
 8001ca2:	6013      	str	r3, [r2, #0]
 8001ca4:	4b63      	ldr	r3, [pc, #396]	@ (8001e34 <HAL_RCC_OscConfig+0x270>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6a1b      	ldr	r3, [r3, #32]
 8001cb0:	4960      	ldr	r1, [pc, #384]	@ (8001e34 <HAL_RCC_OscConfig+0x270>)
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001cb6:	4b5f      	ldr	r3, [pc, #380]	@ (8001e34 <HAL_RCC_OscConfig+0x270>)
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	69db      	ldr	r3, [r3, #28]
 8001cc2:	021b      	lsls	r3, r3, #8
 8001cc4:	495b      	ldr	r1, [pc, #364]	@ (8001e34 <HAL_RCC_OscConfig+0x270>)
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001cca:	69bb      	ldr	r3, [r7, #24]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d109      	bne.n	8001ce4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6a1b      	ldr	r3, [r3, #32]
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f000 fd15 	bl	8002704 <RCC_SetFlashLatencyFromMSIRange>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d001      	beq.n	8001ce4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	e343      	b.n	800236c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001ce4:	f000 fc4a 	bl	800257c <HAL_RCC_GetSysClockFreq>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	4b52      	ldr	r3, [pc, #328]	@ (8001e34 <HAL_RCC_OscConfig+0x270>)
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	091b      	lsrs	r3, r3, #4
 8001cf0:	f003 030f 	and.w	r3, r3, #15
 8001cf4:	4950      	ldr	r1, [pc, #320]	@ (8001e38 <HAL_RCC_OscConfig+0x274>)
 8001cf6:	5ccb      	ldrb	r3, [r1, r3]
 8001cf8:	f003 031f 	and.w	r3, r3, #31
 8001cfc:	fa22 f303 	lsr.w	r3, r2, r3
 8001d00:	4a4e      	ldr	r2, [pc, #312]	@ (8001e3c <HAL_RCC_OscConfig+0x278>)
 8001d02:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001d04:	4b4e      	ldr	r3, [pc, #312]	@ (8001e40 <HAL_RCC_OscConfig+0x27c>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f7ff f907 	bl	8000f1c <HAL_InitTick>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001d12:	7bfb      	ldrb	r3, [r7, #15]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d052      	beq.n	8001dbe <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001d18:	7bfb      	ldrb	r3, [r7, #15]
 8001d1a:	e327      	b.n	800236c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	699b      	ldr	r3, [r3, #24]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d032      	beq.n	8001d8a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001d24:	4b43      	ldr	r3, [pc, #268]	@ (8001e34 <HAL_RCC_OscConfig+0x270>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a42      	ldr	r2, [pc, #264]	@ (8001e34 <HAL_RCC_OscConfig+0x270>)
 8001d2a:	f043 0301 	orr.w	r3, r3, #1
 8001d2e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001d30:	f7ff f944 	bl	8000fbc <HAL_GetTick>
 8001d34:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d36:	e008      	b.n	8001d4a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d38:	f7ff f940 	bl	8000fbc <HAL_GetTick>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	1ad3      	subs	r3, r2, r3
 8001d42:	2b02      	cmp	r3, #2
 8001d44:	d901      	bls.n	8001d4a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001d46:	2303      	movs	r3, #3
 8001d48:	e310      	b.n	800236c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d4a:	4b3a      	ldr	r3, [pc, #232]	@ (8001e34 <HAL_RCC_OscConfig+0x270>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f003 0302 	and.w	r3, r3, #2
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d0f0      	beq.n	8001d38 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d56:	4b37      	ldr	r3, [pc, #220]	@ (8001e34 <HAL_RCC_OscConfig+0x270>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a36      	ldr	r2, [pc, #216]	@ (8001e34 <HAL_RCC_OscConfig+0x270>)
 8001d5c:	f043 0308 	orr.w	r3, r3, #8
 8001d60:	6013      	str	r3, [r2, #0]
 8001d62:	4b34      	ldr	r3, [pc, #208]	@ (8001e34 <HAL_RCC_OscConfig+0x270>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6a1b      	ldr	r3, [r3, #32]
 8001d6e:	4931      	ldr	r1, [pc, #196]	@ (8001e34 <HAL_RCC_OscConfig+0x270>)
 8001d70:	4313      	orrs	r3, r2
 8001d72:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d74:	4b2f      	ldr	r3, [pc, #188]	@ (8001e34 <HAL_RCC_OscConfig+0x270>)
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	69db      	ldr	r3, [r3, #28]
 8001d80:	021b      	lsls	r3, r3, #8
 8001d82:	492c      	ldr	r1, [pc, #176]	@ (8001e34 <HAL_RCC_OscConfig+0x270>)
 8001d84:	4313      	orrs	r3, r2
 8001d86:	604b      	str	r3, [r1, #4]
 8001d88:	e01a      	b.n	8001dc0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001d8a:	4b2a      	ldr	r3, [pc, #168]	@ (8001e34 <HAL_RCC_OscConfig+0x270>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a29      	ldr	r2, [pc, #164]	@ (8001e34 <HAL_RCC_OscConfig+0x270>)
 8001d90:	f023 0301 	bic.w	r3, r3, #1
 8001d94:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001d96:	f7ff f911 	bl	8000fbc <HAL_GetTick>
 8001d9a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001d9c:	e008      	b.n	8001db0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d9e:	f7ff f90d 	bl	8000fbc <HAL_GetTick>
 8001da2:	4602      	mov	r2, r0
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	1ad3      	subs	r3, r2, r3
 8001da8:	2b02      	cmp	r3, #2
 8001daa:	d901      	bls.n	8001db0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001dac:	2303      	movs	r3, #3
 8001dae:	e2dd      	b.n	800236c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001db0:	4b20      	ldr	r3, [pc, #128]	@ (8001e34 <HAL_RCC_OscConfig+0x270>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f003 0302 	and.w	r3, r3, #2
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d1f0      	bne.n	8001d9e <HAL_RCC_OscConfig+0x1da>
 8001dbc:	e000      	b.n	8001dc0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001dbe:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f003 0301 	and.w	r3, r3, #1
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d074      	beq.n	8001eb6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001dcc:	69bb      	ldr	r3, [r7, #24]
 8001dce:	2b08      	cmp	r3, #8
 8001dd0:	d005      	beq.n	8001dde <HAL_RCC_OscConfig+0x21a>
 8001dd2:	69bb      	ldr	r3, [r7, #24]
 8001dd4:	2b0c      	cmp	r3, #12
 8001dd6:	d10e      	bne.n	8001df6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	2b03      	cmp	r3, #3
 8001ddc:	d10b      	bne.n	8001df6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dde:	4b15      	ldr	r3, [pc, #84]	@ (8001e34 <HAL_RCC_OscConfig+0x270>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d064      	beq.n	8001eb4 <HAL_RCC_OscConfig+0x2f0>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d160      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	e2ba      	b.n	800236c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001dfe:	d106      	bne.n	8001e0e <HAL_RCC_OscConfig+0x24a>
 8001e00:	4b0c      	ldr	r3, [pc, #48]	@ (8001e34 <HAL_RCC_OscConfig+0x270>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a0b      	ldr	r2, [pc, #44]	@ (8001e34 <HAL_RCC_OscConfig+0x270>)
 8001e06:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e0a:	6013      	str	r3, [r2, #0]
 8001e0c:	e026      	b.n	8001e5c <HAL_RCC_OscConfig+0x298>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001e16:	d115      	bne.n	8001e44 <HAL_RCC_OscConfig+0x280>
 8001e18:	4b06      	ldr	r3, [pc, #24]	@ (8001e34 <HAL_RCC_OscConfig+0x270>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a05      	ldr	r2, [pc, #20]	@ (8001e34 <HAL_RCC_OscConfig+0x270>)
 8001e1e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e22:	6013      	str	r3, [r2, #0]
 8001e24:	4b03      	ldr	r3, [pc, #12]	@ (8001e34 <HAL_RCC_OscConfig+0x270>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a02      	ldr	r2, [pc, #8]	@ (8001e34 <HAL_RCC_OscConfig+0x270>)
 8001e2a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e2e:	6013      	str	r3, [r2, #0]
 8001e30:	e014      	b.n	8001e5c <HAL_RCC_OscConfig+0x298>
 8001e32:	bf00      	nop
 8001e34:	40021000 	.word	0x40021000
 8001e38:	0800471c 	.word	0x0800471c
 8001e3c:	20000000 	.word	0x20000000
 8001e40:	20000004 	.word	0x20000004
 8001e44:	4ba0      	ldr	r3, [pc, #640]	@ (80020c8 <HAL_RCC_OscConfig+0x504>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a9f      	ldr	r2, [pc, #636]	@ (80020c8 <HAL_RCC_OscConfig+0x504>)
 8001e4a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e4e:	6013      	str	r3, [r2, #0]
 8001e50:	4b9d      	ldr	r3, [pc, #628]	@ (80020c8 <HAL_RCC_OscConfig+0x504>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a9c      	ldr	r2, [pc, #624]	@ (80020c8 <HAL_RCC_OscConfig+0x504>)
 8001e56:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e5a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d013      	beq.n	8001e8c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e64:	f7ff f8aa 	bl	8000fbc <HAL_GetTick>
 8001e68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e6a:	e008      	b.n	8001e7e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e6c:	f7ff f8a6 	bl	8000fbc <HAL_GetTick>
 8001e70:	4602      	mov	r2, r0
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	1ad3      	subs	r3, r2, r3
 8001e76:	2b64      	cmp	r3, #100	@ 0x64
 8001e78:	d901      	bls.n	8001e7e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001e7a:	2303      	movs	r3, #3
 8001e7c:	e276      	b.n	800236c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e7e:	4b92      	ldr	r3, [pc, #584]	@ (80020c8 <HAL_RCC_OscConfig+0x504>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d0f0      	beq.n	8001e6c <HAL_RCC_OscConfig+0x2a8>
 8001e8a:	e014      	b.n	8001eb6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e8c:	f7ff f896 	bl	8000fbc <HAL_GetTick>
 8001e90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e92:	e008      	b.n	8001ea6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e94:	f7ff f892 	bl	8000fbc <HAL_GetTick>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	1ad3      	subs	r3, r2, r3
 8001e9e:	2b64      	cmp	r3, #100	@ 0x64
 8001ea0:	d901      	bls.n	8001ea6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	e262      	b.n	800236c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001ea6:	4b88      	ldr	r3, [pc, #544]	@ (80020c8 <HAL_RCC_OscConfig+0x504>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d1f0      	bne.n	8001e94 <HAL_RCC_OscConfig+0x2d0>
 8001eb2:	e000      	b.n	8001eb6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001eb4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f003 0302 	and.w	r3, r3, #2
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d060      	beq.n	8001f84 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001ec2:	69bb      	ldr	r3, [r7, #24]
 8001ec4:	2b04      	cmp	r3, #4
 8001ec6:	d005      	beq.n	8001ed4 <HAL_RCC_OscConfig+0x310>
 8001ec8:	69bb      	ldr	r3, [r7, #24]
 8001eca:	2b0c      	cmp	r3, #12
 8001ecc:	d119      	bne.n	8001f02 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	2b02      	cmp	r3, #2
 8001ed2:	d116      	bne.n	8001f02 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ed4:	4b7c      	ldr	r3, [pc, #496]	@ (80020c8 <HAL_RCC_OscConfig+0x504>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d005      	beq.n	8001eec <HAL_RCC_OscConfig+0x328>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	68db      	ldr	r3, [r3, #12]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d101      	bne.n	8001eec <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	e23f      	b.n	800236c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eec:	4b76      	ldr	r3, [pc, #472]	@ (80020c8 <HAL_RCC_OscConfig+0x504>)
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	691b      	ldr	r3, [r3, #16]
 8001ef8:	061b      	lsls	r3, r3, #24
 8001efa:	4973      	ldr	r1, [pc, #460]	@ (80020c8 <HAL_RCC_OscConfig+0x504>)
 8001efc:	4313      	orrs	r3, r2
 8001efe:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f00:	e040      	b.n	8001f84 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	68db      	ldr	r3, [r3, #12]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d023      	beq.n	8001f52 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f0a:	4b6f      	ldr	r3, [pc, #444]	@ (80020c8 <HAL_RCC_OscConfig+0x504>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a6e      	ldr	r2, [pc, #440]	@ (80020c8 <HAL_RCC_OscConfig+0x504>)
 8001f10:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f16:	f7ff f851 	bl	8000fbc <HAL_GetTick>
 8001f1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f1c:	e008      	b.n	8001f30 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f1e:	f7ff f84d 	bl	8000fbc <HAL_GetTick>
 8001f22:	4602      	mov	r2, r0
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	1ad3      	subs	r3, r2, r3
 8001f28:	2b02      	cmp	r3, #2
 8001f2a:	d901      	bls.n	8001f30 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001f2c:	2303      	movs	r3, #3
 8001f2e:	e21d      	b.n	800236c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f30:	4b65      	ldr	r3, [pc, #404]	@ (80020c8 <HAL_RCC_OscConfig+0x504>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d0f0      	beq.n	8001f1e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f3c:	4b62      	ldr	r3, [pc, #392]	@ (80020c8 <HAL_RCC_OscConfig+0x504>)
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	691b      	ldr	r3, [r3, #16]
 8001f48:	061b      	lsls	r3, r3, #24
 8001f4a:	495f      	ldr	r1, [pc, #380]	@ (80020c8 <HAL_RCC_OscConfig+0x504>)
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	604b      	str	r3, [r1, #4]
 8001f50:	e018      	b.n	8001f84 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f52:	4b5d      	ldr	r3, [pc, #372]	@ (80020c8 <HAL_RCC_OscConfig+0x504>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a5c      	ldr	r2, [pc, #368]	@ (80020c8 <HAL_RCC_OscConfig+0x504>)
 8001f58:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001f5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f5e:	f7ff f82d 	bl	8000fbc <HAL_GetTick>
 8001f62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f64:	e008      	b.n	8001f78 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f66:	f7ff f829 	bl	8000fbc <HAL_GetTick>
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	1ad3      	subs	r3, r2, r3
 8001f70:	2b02      	cmp	r3, #2
 8001f72:	d901      	bls.n	8001f78 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001f74:	2303      	movs	r3, #3
 8001f76:	e1f9      	b.n	800236c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f78:	4b53      	ldr	r3, [pc, #332]	@ (80020c8 <HAL_RCC_OscConfig+0x504>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d1f0      	bne.n	8001f66 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f003 0308 	and.w	r3, r3, #8
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d03c      	beq.n	800200a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	695b      	ldr	r3, [r3, #20]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d01c      	beq.n	8001fd2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f98:	4b4b      	ldr	r3, [pc, #300]	@ (80020c8 <HAL_RCC_OscConfig+0x504>)
 8001f9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f9e:	4a4a      	ldr	r2, [pc, #296]	@ (80020c8 <HAL_RCC_OscConfig+0x504>)
 8001fa0:	f043 0301 	orr.w	r3, r3, #1
 8001fa4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fa8:	f7ff f808 	bl	8000fbc <HAL_GetTick>
 8001fac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001fae:	e008      	b.n	8001fc2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fb0:	f7ff f804 	bl	8000fbc <HAL_GetTick>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	1ad3      	subs	r3, r2, r3
 8001fba:	2b02      	cmp	r3, #2
 8001fbc:	d901      	bls.n	8001fc2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001fbe:	2303      	movs	r3, #3
 8001fc0:	e1d4      	b.n	800236c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001fc2:	4b41      	ldr	r3, [pc, #260]	@ (80020c8 <HAL_RCC_OscConfig+0x504>)
 8001fc4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001fc8:	f003 0302 	and.w	r3, r3, #2
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d0ef      	beq.n	8001fb0 <HAL_RCC_OscConfig+0x3ec>
 8001fd0:	e01b      	b.n	800200a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fd2:	4b3d      	ldr	r3, [pc, #244]	@ (80020c8 <HAL_RCC_OscConfig+0x504>)
 8001fd4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001fd8:	4a3b      	ldr	r2, [pc, #236]	@ (80020c8 <HAL_RCC_OscConfig+0x504>)
 8001fda:	f023 0301 	bic.w	r3, r3, #1
 8001fde:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fe2:	f7fe ffeb 	bl	8000fbc <HAL_GetTick>
 8001fe6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001fe8:	e008      	b.n	8001ffc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fea:	f7fe ffe7 	bl	8000fbc <HAL_GetTick>
 8001fee:	4602      	mov	r2, r0
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	1ad3      	subs	r3, r2, r3
 8001ff4:	2b02      	cmp	r3, #2
 8001ff6:	d901      	bls.n	8001ffc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001ff8:	2303      	movs	r3, #3
 8001ffa:	e1b7      	b.n	800236c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ffc:	4b32      	ldr	r3, [pc, #200]	@ (80020c8 <HAL_RCC_OscConfig+0x504>)
 8001ffe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002002:	f003 0302 	and.w	r3, r3, #2
 8002006:	2b00      	cmp	r3, #0
 8002008:	d1ef      	bne.n	8001fea <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 0304 	and.w	r3, r3, #4
 8002012:	2b00      	cmp	r3, #0
 8002014:	f000 80a6 	beq.w	8002164 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002018:	2300      	movs	r3, #0
 800201a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800201c:	4b2a      	ldr	r3, [pc, #168]	@ (80020c8 <HAL_RCC_OscConfig+0x504>)
 800201e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002020:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002024:	2b00      	cmp	r3, #0
 8002026:	d10d      	bne.n	8002044 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002028:	4b27      	ldr	r3, [pc, #156]	@ (80020c8 <HAL_RCC_OscConfig+0x504>)
 800202a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800202c:	4a26      	ldr	r2, [pc, #152]	@ (80020c8 <HAL_RCC_OscConfig+0x504>)
 800202e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002032:	6593      	str	r3, [r2, #88]	@ 0x58
 8002034:	4b24      	ldr	r3, [pc, #144]	@ (80020c8 <HAL_RCC_OscConfig+0x504>)
 8002036:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002038:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800203c:	60bb      	str	r3, [r7, #8]
 800203e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002040:	2301      	movs	r3, #1
 8002042:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002044:	4b21      	ldr	r3, [pc, #132]	@ (80020cc <HAL_RCC_OscConfig+0x508>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800204c:	2b00      	cmp	r3, #0
 800204e:	d118      	bne.n	8002082 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002050:	4b1e      	ldr	r3, [pc, #120]	@ (80020cc <HAL_RCC_OscConfig+0x508>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a1d      	ldr	r2, [pc, #116]	@ (80020cc <HAL_RCC_OscConfig+0x508>)
 8002056:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800205a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800205c:	f7fe ffae 	bl	8000fbc <HAL_GetTick>
 8002060:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002062:	e008      	b.n	8002076 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002064:	f7fe ffaa 	bl	8000fbc <HAL_GetTick>
 8002068:	4602      	mov	r2, r0
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	1ad3      	subs	r3, r2, r3
 800206e:	2b02      	cmp	r3, #2
 8002070:	d901      	bls.n	8002076 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002072:	2303      	movs	r3, #3
 8002074:	e17a      	b.n	800236c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002076:	4b15      	ldr	r3, [pc, #84]	@ (80020cc <HAL_RCC_OscConfig+0x508>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800207e:	2b00      	cmp	r3, #0
 8002080:	d0f0      	beq.n	8002064 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	689b      	ldr	r3, [r3, #8]
 8002086:	2b01      	cmp	r3, #1
 8002088:	d108      	bne.n	800209c <HAL_RCC_OscConfig+0x4d8>
 800208a:	4b0f      	ldr	r3, [pc, #60]	@ (80020c8 <HAL_RCC_OscConfig+0x504>)
 800208c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002090:	4a0d      	ldr	r2, [pc, #52]	@ (80020c8 <HAL_RCC_OscConfig+0x504>)
 8002092:	f043 0301 	orr.w	r3, r3, #1
 8002096:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800209a:	e029      	b.n	80020f0 <HAL_RCC_OscConfig+0x52c>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	2b05      	cmp	r3, #5
 80020a2:	d115      	bne.n	80020d0 <HAL_RCC_OscConfig+0x50c>
 80020a4:	4b08      	ldr	r3, [pc, #32]	@ (80020c8 <HAL_RCC_OscConfig+0x504>)
 80020a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020aa:	4a07      	ldr	r2, [pc, #28]	@ (80020c8 <HAL_RCC_OscConfig+0x504>)
 80020ac:	f043 0304 	orr.w	r3, r3, #4
 80020b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80020b4:	4b04      	ldr	r3, [pc, #16]	@ (80020c8 <HAL_RCC_OscConfig+0x504>)
 80020b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020ba:	4a03      	ldr	r2, [pc, #12]	@ (80020c8 <HAL_RCC_OscConfig+0x504>)
 80020bc:	f043 0301 	orr.w	r3, r3, #1
 80020c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80020c4:	e014      	b.n	80020f0 <HAL_RCC_OscConfig+0x52c>
 80020c6:	bf00      	nop
 80020c8:	40021000 	.word	0x40021000
 80020cc:	40007000 	.word	0x40007000
 80020d0:	4b9c      	ldr	r3, [pc, #624]	@ (8002344 <HAL_RCC_OscConfig+0x780>)
 80020d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020d6:	4a9b      	ldr	r2, [pc, #620]	@ (8002344 <HAL_RCC_OscConfig+0x780>)
 80020d8:	f023 0301 	bic.w	r3, r3, #1
 80020dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80020e0:	4b98      	ldr	r3, [pc, #608]	@ (8002344 <HAL_RCC_OscConfig+0x780>)
 80020e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020e6:	4a97      	ldr	r2, [pc, #604]	@ (8002344 <HAL_RCC_OscConfig+0x780>)
 80020e8:	f023 0304 	bic.w	r3, r3, #4
 80020ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d016      	beq.n	8002126 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020f8:	f7fe ff60 	bl	8000fbc <HAL_GetTick>
 80020fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020fe:	e00a      	b.n	8002116 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002100:	f7fe ff5c 	bl	8000fbc <HAL_GetTick>
 8002104:	4602      	mov	r2, r0
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	1ad3      	subs	r3, r2, r3
 800210a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800210e:	4293      	cmp	r3, r2
 8002110:	d901      	bls.n	8002116 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002112:	2303      	movs	r3, #3
 8002114:	e12a      	b.n	800236c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002116:	4b8b      	ldr	r3, [pc, #556]	@ (8002344 <HAL_RCC_OscConfig+0x780>)
 8002118:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800211c:	f003 0302 	and.w	r3, r3, #2
 8002120:	2b00      	cmp	r3, #0
 8002122:	d0ed      	beq.n	8002100 <HAL_RCC_OscConfig+0x53c>
 8002124:	e015      	b.n	8002152 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002126:	f7fe ff49 	bl	8000fbc <HAL_GetTick>
 800212a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800212c:	e00a      	b.n	8002144 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800212e:	f7fe ff45 	bl	8000fbc <HAL_GetTick>
 8002132:	4602      	mov	r2, r0
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	1ad3      	subs	r3, r2, r3
 8002138:	f241 3288 	movw	r2, #5000	@ 0x1388
 800213c:	4293      	cmp	r3, r2
 800213e:	d901      	bls.n	8002144 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002140:	2303      	movs	r3, #3
 8002142:	e113      	b.n	800236c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002144:	4b7f      	ldr	r3, [pc, #508]	@ (8002344 <HAL_RCC_OscConfig+0x780>)
 8002146:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800214a:	f003 0302 	and.w	r3, r3, #2
 800214e:	2b00      	cmp	r3, #0
 8002150:	d1ed      	bne.n	800212e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002152:	7ffb      	ldrb	r3, [r7, #31]
 8002154:	2b01      	cmp	r3, #1
 8002156:	d105      	bne.n	8002164 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002158:	4b7a      	ldr	r3, [pc, #488]	@ (8002344 <HAL_RCC_OscConfig+0x780>)
 800215a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800215c:	4a79      	ldr	r2, [pc, #484]	@ (8002344 <HAL_RCC_OscConfig+0x780>)
 800215e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002162:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002168:	2b00      	cmp	r3, #0
 800216a:	f000 80fe 	beq.w	800236a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002172:	2b02      	cmp	r3, #2
 8002174:	f040 80d0 	bne.w	8002318 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002178:	4b72      	ldr	r3, [pc, #456]	@ (8002344 <HAL_RCC_OscConfig+0x780>)
 800217a:	68db      	ldr	r3, [r3, #12]
 800217c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	f003 0203 	and.w	r2, r3, #3
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002188:	429a      	cmp	r2, r3
 800218a:	d130      	bne.n	80021ee <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800218c:	697b      	ldr	r3, [r7, #20]
 800218e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002196:	3b01      	subs	r3, #1
 8002198:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800219a:	429a      	cmp	r2, r3
 800219c:	d127      	bne.n	80021ee <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021a8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80021aa:	429a      	cmp	r2, r3
 80021ac:	d11f      	bne.n	80021ee <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021b4:	687a      	ldr	r2, [r7, #4]
 80021b6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80021b8:	2a07      	cmp	r2, #7
 80021ba:	bf14      	ite	ne
 80021bc:	2201      	movne	r2, #1
 80021be:	2200      	moveq	r2, #0
 80021c0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d113      	bne.n	80021ee <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021d0:	085b      	lsrs	r3, r3, #1
 80021d2:	3b01      	subs	r3, #1
 80021d4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80021d6:	429a      	cmp	r2, r3
 80021d8:	d109      	bne.n	80021ee <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021e4:	085b      	lsrs	r3, r3, #1
 80021e6:	3b01      	subs	r3, #1
 80021e8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80021ea:	429a      	cmp	r2, r3
 80021ec:	d06e      	beq.n	80022cc <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80021ee:	69bb      	ldr	r3, [r7, #24]
 80021f0:	2b0c      	cmp	r3, #12
 80021f2:	d069      	beq.n	80022c8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80021f4:	4b53      	ldr	r3, [pc, #332]	@ (8002344 <HAL_RCC_OscConfig+0x780>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d105      	bne.n	800220c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002200:	4b50      	ldr	r3, [pc, #320]	@ (8002344 <HAL_RCC_OscConfig+0x780>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002208:	2b00      	cmp	r3, #0
 800220a:	d001      	beq.n	8002210 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800220c:	2301      	movs	r3, #1
 800220e:	e0ad      	b.n	800236c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002210:	4b4c      	ldr	r3, [pc, #304]	@ (8002344 <HAL_RCC_OscConfig+0x780>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a4b      	ldr	r2, [pc, #300]	@ (8002344 <HAL_RCC_OscConfig+0x780>)
 8002216:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800221a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800221c:	f7fe fece 	bl	8000fbc <HAL_GetTick>
 8002220:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002222:	e008      	b.n	8002236 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002224:	f7fe feca 	bl	8000fbc <HAL_GetTick>
 8002228:	4602      	mov	r2, r0
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	1ad3      	subs	r3, r2, r3
 800222e:	2b02      	cmp	r3, #2
 8002230:	d901      	bls.n	8002236 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002232:	2303      	movs	r3, #3
 8002234:	e09a      	b.n	800236c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002236:	4b43      	ldr	r3, [pc, #268]	@ (8002344 <HAL_RCC_OscConfig+0x780>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800223e:	2b00      	cmp	r3, #0
 8002240:	d1f0      	bne.n	8002224 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002242:	4b40      	ldr	r3, [pc, #256]	@ (8002344 <HAL_RCC_OscConfig+0x780>)
 8002244:	68da      	ldr	r2, [r3, #12]
 8002246:	4b40      	ldr	r3, [pc, #256]	@ (8002348 <HAL_RCC_OscConfig+0x784>)
 8002248:	4013      	ands	r3, r2
 800224a:	687a      	ldr	r2, [r7, #4]
 800224c:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800224e:	687a      	ldr	r2, [r7, #4]
 8002250:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002252:	3a01      	subs	r2, #1
 8002254:	0112      	lsls	r2, r2, #4
 8002256:	4311      	orrs	r1, r2
 8002258:	687a      	ldr	r2, [r7, #4]
 800225a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800225c:	0212      	lsls	r2, r2, #8
 800225e:	4311      	orrs	r1, r2
 8002260:	687a      	ldr	r2, [r7, #4]
 8002262:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002264:	0852      	lsrs	r2, r2, #1
 8002266:	3a01      	subs	r2, #1
 8002268:	0552      	lsls	r2, r2, #21
 800226a:	4311      	orrs	r1, r2
 800226c:	687a      	ldr	r2, [r7, #4]
 800226e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002270:	0852      	lsrs	r2, r2, #1
 8002272:	3a01      	subs	r2, #1
 8002274:	0652      	lsls	r2, r2, #25
 8002276:	4311      	orrs	r1, r2
 8002278:	687a      	ldr	r2, [r7, #4]
 800227a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800227c:	0912      	lsrs	r2, r2, #4
 800227e:	0452      	lsls	r2, r2, #17
 8002280:	430a      	orrs	r2, r1
 8002282:	4930      	ldr	r1, [pc, #192]	@ (8002344 <HAL_RCC_OscConfig+0x780>)
 8002284:	4313      	orrs	r3, r2
 8002286:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002288:	4b2e      	ldr	r3, [pc, #184]	@ (8002344 <HAL_RCC_OscConfig+0x780>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a2d      	ldr	r2, [pc, #180]	@ (8002344 <HAL_RCC_OscConfig+0x780>)
 800228e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002292:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002294:	4b2b      	ldr	r3, [pc, #172]	@ (8002344 <HAL_RCC_OscConfig+0x780>)
 8002296:	68db      	ldr	r3, [r3, #12]
 8002298:	4a2a      	ldr	r2, [pc, #168]	@ (8002344 <HAL_RCC_OscConfig+0x780>)
 800229a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800229e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80022a0:	f7fe fe8c 	bl	8000fbc <HAL_GetTick>
 80022a4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022a6:	e008      	b.n	80022ba <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022a8:	f7fe fe88 	bl	8000fbc <HAL_GetTick>
 80022ac:	4602      	mov	r2, r0
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	1ad3      	subs	r3, r2, r3
 80022b2:	2b02      	cmp	r3, #2
 80022b4:	d901      	bls.n	80022ba <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80022b6:	2303      	movs	r3, #3
 80022b8:	e058      	b.n	800236c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022ba:	4b22      	ldr	r3, [pc, #136]	@ (8002344 <HAL_RCC_OscConfig+0x780>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d0f0      	beq.n	80022a8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80022c6:	e050      	b.n	800236a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80022c8:	2301      	movs	r3, #1
 80022ca:	e04f      	b.n	800236c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022cc:	4b1d      	ldr	r3, [pc, #116]	@ (8002344 <HAL_RCC_OscConfig+0x780>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d148      	bne.n	800236a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80022d8:	4b1a      	ldr	r3, [pc, #104]	@ (8002344 <HAL_RCC_OscConfig+0x780>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a19      	ldr	r2, [pc, #100]	@ (8002344 <HAL_RCC_OscConfig+0x780>)
 80022de:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80022e2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80022e4:	4b17      	ldr	r3, [pc, #92]	@ (8002344 <HAL_RCC_OscConfig+0x780>)
 80022e6:	68db      	ldr	r3, [r3, #12]
 80022e8:	4a16      	ldr	r2, [pc, #88]	@ (8002344 <HAL_RCC_OscConfig+0x780>)
 80022ea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80022ee:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80022f0:	f7fe fe64 	bl	8000fbc <HAL_GetTick>
 80022f4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022f6:	e008      	b.n	800230a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022f8:	f7fe fe60 	bl	8000fbc <HAL_GetTick>
 80022fc:	4602      	mov	r2, r0
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	1ad3      	subs	r3, r2, r3
 8002302:	2b02      	cmp	r3, #2
 8002304:	d901      	bls.n	800230a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002306:	2303      	movs	r3, #3
 8002308:	e030      	b.n	800236c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800230a:	4b0e      	ldr	r3, [pc, #56]	@ (8002344 <HAL_RCC_OscConfig+0x780>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002312:	2b00      	cmp	r3, #0
 8002314:	d0f0      	beq.n	80022f8 <HAL_RCC_OscConfig+0x734>
 8002316:	e028      	b.n	800236a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002318:	69bb      	ldr	r3, [r7, #24]
 800231a:	2b0c      	cmp	r3, #12
 800231c:	d023      	beq.n	8002366 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800231e:	4b09      	ldr	r3, [pc, #36]	@ (8002344 <HAL_RCC_OscConfig+0x780>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a08      	ldr	r2, [pc, #32]	@ (8002344 <HAL_RCC_OscConfig+0x780>)
 8002324:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002328:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800232a:	f7fe fe47 	bl	8000fbc <HAL_GetTick>
 800232e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002330:	e00c      	b.n	800234c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002332:	f7fe fe43 	bl	8000fbc <HAL_GetTick>
 8002336:	4602      	mov	r2, r0
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	1ad3      	subs	r3, r2, r3
 800233c:	2b02      	cmp	r3, #2
 800233e:	d905      	bls.n	800234c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002340:	2303      	movs	r3, #3
 8002342:	e013      	b.n	800236c <HAL_RCC_OscConfig+0x7a8>
 8002344:	40021000 	.word	0x40021000
 8002348:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800234c:	4b09      	ldr	r3, [pc, #36]	@ (8002374 <HAL_RCC_OscConfig+0x7b0>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002354:	2b00      	cmp	r3, #0
 8002356:	d1ec      	bne.n	8002332 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002358:	4b06      	ldr	r3, [pc, #24]	@ (8002374 <HAL_RCC_OscConfig+0x7b0>)
 800235a:	68da      	ldr	r2, [r3, #12]
 800235c:	4905      	ldr	r1, [pc, #20]	@ (8002374 <HAL_RCC_OscConfig+0x7b0>)
 800235e:	4b06      	ldr	r3, [pc, #24]	@ (8002378 <HAL_RCC_OscConfig+0x7b4>)
 8002360:	4013      	ands	r3, r2
 8002362:	60cb      	str	r3, [r1, #12]
 8002364:	e001      	b.n	800236a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	e000      	b.n	800236c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800236a:	2300      	movs	r3, #0
}
 800236c:	4618      	mov	r0, r3
 800236e:	3720      	adds	r7, #32
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}
 8002374:	40021000 	.word	0x40021000
 8002378:	feeefffc 	.word	0xfeeefffc

0800237c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b084      	sub	sp, #16
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
 8002384:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d101      	bne.n	8002390 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800238c:	2301      	movs	r3, #1
 800238e:	e0e7      	b.n	8002560 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002390:	4b75      	ldr	r3, [pc, #468]	@ (8002568 <HAL_RCC_ClockConfig+0x1ec>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f003 0307 	and.w	r3, r3, #7
 8002398:	683a      	ldr	r2, [r7, #0]
 800239a:	429a      	cmp	r2, r3
 800239c:	d910      	bls.n	80023c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800239e:	4b72      	ldr	r3, [pc, #456]	@ (8002568 <HAL_RCC_ClockConfig+0x1ec>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f023 0207 	bic.w	r2, r3, #7
 80023a6:	4970      	ldr	r1, [pc, #448]	@ (8002568 <HAL_RCC_ClockConfig+0x1ec>)
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	4313      	orrs	r3, r2
 80023ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023ae:	4b6e      	ldr	r3, [pc, #440]	@ (8002568 <HAL_RCC_ClockConfig+0x1ec>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 0307 	and.w	r3, r3, #7
 80023b6:	683a      	ldr	r2, [r7, #0]
 80023b8:	429a      	cmp	r2, r3
 80023ba:	d001      	beq.n	80023c0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80023bc:	2301      	movs	r3, #1
 80023be:	e0cf      	b.n	8002560 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f003 0302 	and.w	r3, r3, #2
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d010      	beq.n	80023ee <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	689a      	ldr	r2, [r3, #8]
 80023d0:	4b66      	ldr	r3, [pc, #408]	@ (800256c <HAL_RCC_ClockConfig+0x1f0>)
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80023d8:	429a      	cmp	r2, r3
 80023da:	d908      	bls.n	80023ee <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023dc:	4b63      	ldr	r3, [pc, #396]	@ (800256c <HAL_RCC_ClockConfig+0x1f0>)
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	4960      	ldr	r1, [pc, #384]	@ (800256c <HAL_RCC_ClockConfig+0x1f0>)
 80023ea:	4313      	orrs	r3, r2
 80023ec:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 0301 	and.w	r3, r3, #1
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d04c      	beq.n	8002494 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	2b03      	cmp	r3, #3
 8002400:	d107      	bne.n	8002412 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002402:	4b5a      	ldr	r3, [pc, #360]	@ (800256c <HAL_RCC_ClockConfig+0x1f0>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800240a:	2b00      	cmp	r3, #0
 800240c:	d121      	bne.n	8002452 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	e0a6      	b.n	8002560 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	2b02      	cmp	r3, #2
 8002418:	d107      	bne.n	800242a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800241a:	4b54      	ldr	r3, [pc, #336]	@ (800256c <HAL_RCC_ClockConfig+0x1f0>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002422:	2b00      	cmp	r3, #0
 8002424:	d115      	bne.n	8002452 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	e09a      	b.n	8002560 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d107      	bne.n	8002442 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002432:	4b4e      	ldr	r3, [pc, #312]	@ (800256c <HAL_RCC_ClockConfig+0x1f0>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 0302 	and.w	r3, r3, #2
 800243a:	2b00      	cmp	r3, #0
 800243c:	d109      	bne.n	8002452 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	e08e      	b.n	8002560 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002442:	4b4a      	ldr	r3, [pc, #296]	@ (800256c <HAL_RCC_ClockConfig+0x1f0>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800244a:	2b00      	cmp	r3, #0
 800244c:	d101      	bne.n	8002452 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	e086      	b.n	8002560 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002452:	4b46      	ldr	r3, [pc, #280]	@ (800256c <HAL_RCC_ClockConfig+0x1f0>)
 8002454:	689b      	ldr	r3, [r3, #8]
 8002456:	f023 0203 	bic.w	r2, r3, #3
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	4943      	ldr	r1, [pc, #268]	@ (800256c <HAL_RCC_ClockConfig+0x1f0>)
 8002460:	4313      	orrs	r3, r2
 8002462:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002464:	f7fe fdaa 	bl	8000fbc <HAL_GetTick>
 8002468:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800246a:	e00a      	b.n	8002482 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800246c:	f7fe fda6 	bl	8000fbc <HAL_GetTick>
 8002470:	4602      	mov	r2, r0
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	1ad3      	subs	r3, r2, r3
 8002476:	f241 3288 	movw	r2, #5000	@ 0x1388
 800247a:	4293      	cmp	r3, r2
 800247c:	d901      	bls.n	8002482 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800247e:	2303      	movs	r3, #3
 8002480:	e06e      	b.n	8002560 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002482:	4b3a      	ldr	r3, [pc, #232]	@ (800256c <HAL_RCC_ClockConfig+0x1f0>)
 8002484:	689b      	ldr	r3, [r3, #8]
 8002486:	f003 020c 	and.w	r2, r3, #12
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	429a      	cmp	r2, r3
 8002492:	d1eb      	bne.n	800246c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f003 0302 	and.w	r3, r3, #2
 800249c:	2b00      	cmp	r3, #0
 800249e:	d010      	beq.n	80024c2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	689a      	ldr	r2, [r3, #8]
 80024a4:	4b31      	ldr	r3, [pc, #196]	@ (800256c <HAL_RCC_ClockConfig+0x1f0>)
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80024ac:	429a      	cmp	r2, r3
 80024ae:	d208      	bcs.n	80024c2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024b0:	4b2e      	ldr	r3, [pc, #184]	@ (800256c <HAL_RCC_ClockConfig+0x1f0>)
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	492b      	ldr	r1, [pc, #172]	@ (800256c <HAL_RCC_ClockConfig+0x1f0>)
 80024be:	4313      	orrs	r3, r2
 80024c0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80024c2:	4b29      	ldr	r3, [pc, #164]	@ (8002568 <HAL_RCC_ClockConfig+0x1ec>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f003 0307 	and.w	r3, r3, #7
 80024ca:	683a      	ldr	r2, [r7, #0]
 80024cc:	429a      	cmp	r2, r3
 80024ce:	d210      	bcs.n	80024f2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024d0:	4b25      	ldr	r3, [pc, #148]	@ (8002568 <HAL_RCC_ClockConfig+0x1ec>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f023 0207 	bic.w	r2, r3, #7
 80024d8:	4923      	ldr	r1, [pc, #140]	@ (8002568 <HAL_RCC_ClockConfig+0x1ec>)
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	4313      	orrs	r3, r2
 80024de:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024e0:	4b21      	ldr	r3, [pc, #132]	@ (8002568 <HAL_RCC_ClockConfig+0x1ec>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f003 0307 	and.w	r3, r3, #7
 80024e8:	683a      	ldr	r2, [r7, #0]
 80024ea:	429a      	cmp	r2, r3
 80024ec:	d001      	beq.n	80024f2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	e036      	b.n	8002560 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 0304 	and.w	r3, r3, #4
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d008      	beq.n	8002510 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024fe:	4b1b      	ldr	r3, [pc, #108]	@ (800256c <HAL_RCC_ClockConfig+0x1f0>)
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	68db      	ldr	r3, [r3, #12]
 800250a:	4918      	ldr	r1, [pc, #96]	@ (800256c <HAL_RCC_ClockConfig+0x1f0>)
 800250c:	4313      	orrs	r3, r2
 800250e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f003 0308 	and.w	r3, r3, #8
 8002518:	2b00      	cmp	r3, #0
 800251a:	d009      	beq.n	8002530 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800251c:	4b13      	ldr	r3, [pc, #76]	@ (800256c <HAL_RCC_ClockConfig+0x1f0>)
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	691b      	ldr	r3, [r3, #16]
 8002528:	00db      	lsls	r3, r3, #3
 800252a:	4910      	ldr	r1, [pc, #64]	@ (800256c <HAL_RCC_ClockConfig+0x1f0>)
 800252c:	4313      	orrs	r3, r2
 800252e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002530:	f000 f824 	bl	800257c <HAL_RCC_GetSysClockFreq>
 8002534:	4602      	mov	r2, r0
 8002536:	4b0d      	ldr	r3, [pc, #52]	@ (800256c <HAL_RCC_ClockConfig+0x1f0>)
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	091b      	lsrs	r3, r3, #4
 800253c:	f003 030f 	and.w	r3, r3, #15
 8002540:	490b      	ldr	r1, [pc, #44]	@ (8002570 <HAL_RCC_ClockConfig+0x1f4>)
 8002542:	5ccb      	ldrb	r3, [r1, r3]
 8002544:	f003 031f 	and.w	r3, r3, #31
 8002548:	fa22 f303 	lsr.w	r3, r2, r3
 800254c:	4a09      	ldr	r2, [pc, #36]	@ (8002574 <HAL_RCC_ClockConfig+0x1f8>)
 800254e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002550:	4b09      	ldr	r3, [pc, #36]	@ (8002578 <HAL_RCC_ClockConfig+0x1fc>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4618      	mov	r0, r3
 8002556:	f7fe fce1 	bl	8000f1c <HAL_InitTick>
 800255a:	4603      	mov	r3, r0
 800255c:	72fb      	strb	r3, [r7, #11]

  return status;
 800255e:	7afb      	ldrb	r3, [r7, #11]
}
 8002560:	4618      	mov	r0, r3
 8002562:	3710      	adds	r7, #16
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}
 8002568:	40022000 	.word	0x40022000
 800256c:	40021000 	.word	0x40021000
 8002570:	0800471c 	.word	0x0800471c
 8002574:	20000000 	.word	0x20000000
 8002578:	20000004 	.word	0x20000004

0800257c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800257c:	b480      	push	{r7}
 800257e:	b089      	sub	sp, #36	@ 0x24
 8002580:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002582:	2300      	movs	r3, #0
 8002584:	61fb      	str	r3, [r7, #28]
 8002586:	2300      	movs	r3, #0
 8002588:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800258a:	4b3e      	ldr	r3, [pc, #248]	@ (8002684 <HAL_RCC_GetSysClockFreq+0x108>)
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	f003 030c 	and.w	r3, r3, #12
 8002592:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002594:	4b3b      	ldr	r3, [pc, #236]	@ (8002684 <HAL_RCC_GetSysClockFreq+0x108>)
 8002596:	68db      	ldr	r3, [r3, #12]
 8002598:	f003 0303 	and.w	r3, r3, #3
 800259c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d005      	beq.n	80025b0 <HAL_RCC_GetSysClockFreq+0x34>
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	2b0c      	cmp	r3, #12
 80025a8:	d121      	bne.n	80025ee <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	d11e      	bne.n	80025ee <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80025b0:	4b34      	ldr	r3, [pc, #208]	@ (8002684 <HAL_RCC_GetSysClockFreq+0x108>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f003 0308 	and.w	r3, r3, #8
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d107      	bne.n	80025cc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80025bc:	4b31      	ldr	r3, [pc, #196]	@ (8002684 <HAL_RCC_GetSysClockFreq+0x108>)
 80025be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80025c2:	0a1b      	lsrs	r3, r3, #8
 80025c4:	f003 030f 	and.w	r3, r3, #15
 80025c8:	61fb      	str	r3, [r7, #28]
 80025ca:	e005      	b.n	80025d8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80025cc:	4b2d      	ldr	r3, [pc, #180]	@ (8002684 <HAL_RCC_GetSysClockFreq+0x108>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	091b      	lsrs	r3, r3, #4
 80025d2:	f003 030f 	and.w	r3, r3, #15
 80025d6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80025d8:	4a2b      	ldr	r2, [pc, #172]	@ (8002688 <HAL_RCC_GetSysClockFreq+0x10c>)
 80025da:	69fb      	ldr	r3, [r7, #28]
 80025dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025e0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d10d      	bne.n	8002604 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80025e8:	69fb      	ldr	r3, [r7, #28]
 80025ea:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80025ec:	e00a      	b.n	8002604 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	2b04      	cmp	r3, #4
 80025f2:	d102      	bne.n	80025fa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80025f4:	4b25      	ldr	r3, [pc, #148]	@ (800268c <HAL_RCC_GetSysClockFreq+0x110>)
 80025f6:	61bb      	str	r3, [r7, #24]
 80025f8:	e004      	b.n	8002604 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	2b08      	cmp	r3, #8
 80025fe:	d101      	bne.n	8002604 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002600:	4b23      	ldr	r3, [pc, #140]	@ (8002690 <HAL_RCC_GetSysClockFreq+0x114>)
 8002602:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002604:	693b      	ldr	r3, [r7, #16]
 8002606:	2b0c      	cmp	r3, #12
 8002608:	d134      	bne.n	8002674 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800260a:	4b1e      	ldr	r3, [pc, #120]	@ (8002684 <HAL_RCC_GetSysClockFreq+0x108>)
 800260c:	68db      	ldr	r3, [r3, #12]
 800260e:	f003 0303 	and.w	r3, r3, #3
 8002612:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	2b02      	cmp	r3, #2
 8002618:	d003      	beq.n	8002622 <HAL_RCC_GetSysClockFreq+0xa6>
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	2b03      	cmp	r3, #3
 800261e:	d003      	beq.n	8002628 <HAL_RCC_GetSysClockFreq+0xac>
 8002620:	e005      	b.n	800262e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002622:	4b1a      	ldr	r3, [pc, #104]	@ (800268c <HAL_RCC_GetSysClockFreq+0x110>)
 8002624:	617b      	str	r3, [r7, #20]
      break;
 8002626:	e005      	b.n	8002634 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002628:	4b19      	ldr	r3, [pc, #100]	@ (8002690 <HAL_RCC_GetSysClockFreq+0x114>)
 800262a:	617b      	str	r3, [r7, #20]
      break;
 800262c:	e002      	b.n	8002634 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800262e:	69fb      	ldr	r3, [r7, #28]
 8002630:	617b      	str	r3, [r7, #20]
      break;
 8002632:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002634:	4b13      	ldr	r3, [pc, #76]	@ (8002684 <HAL_RCC_GetSysClockFreq+0x108>)
 8002636:	68db      	ldr	r3, [r3, #12]
 8002638:	091b      	lsrs	r3, r3, #4
 800263a:	f003 0307 	and.w	r3, r3, #7
 800263e:	3301      	adds	r3, #1
 8002640:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002642:	4b10      	ldr	r3, [pc, #64]	@ (8002684 <HAL_RCC_GetSysClockFreq+0x108>)
 8002644:	68db      	ldr	r3, [r3, #12]
 8002646:	0a1b      	lsrs	r3, r3, #8
 8002648:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800264c:	697a      	ldr	r2, [r7, #20]
 800264e:	fb03 f202 	mul.w	r2, r3, r2
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	fbb2 f3f3 	udiv	r3, r2, r3
 8002658:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800265a:	4b0a      	ldr	r3, [pc, #40]	@ (8002684 <HAL_RCC_GetSysClockFreq+0x108>)
 800265c:	68db      	ldr	r3, [r3, #12]
 800265e:	0e5b      	lsrs	r3, r3, #25
 8002660:	f003 0303 	and.w	r3, r3, #3
 8002664:	3301      	adds	r3, #1
 8002666:	005b      	lsls	r3, r3, #1
 8002668:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800266a:	697a      	ldr	r2, [r7, #20]
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002672:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002674:	69bb      	ldr	r3, [r7, #24]
}
 8002676:	4618      	mov	r0, r3
 8002678:	3724      	adds	r7, #36	@ 0x24
 800267a:	46bd      	mov	sp, r7
 800267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002680:	4770      	bx	lr
 8002682:	bf00      	nop
 8002684:	40021000 	.word	0x40021000
 8002688:	08004734 	.word	0x08004734
 800268c:	00f42400 	.word	0x00f42400
 8002690:	007a1200 	.word	0x007a1200

08002694 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002694:	b480      	push	{r7}
 8002696:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002698:	4b03      	ldr	r3, [pc, #12]	@ (80026a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800269a:	681b      	ldr	r3, [r3, #0]
}
 800269c:	4618      	mov	r0, r3
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr
 80026a6:	bf00      	nop
 80026a8:	20000000 	.word	0x20000000

080026ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80026b0:	f7ff fff0 	bl	8002694 <HAL_RCC_GetHCLKFreq>
 80026b4:	4602      	mov	r2, r0
 80026b6:	4b06      	ldr	r3, [pc, #24]	@ (80026d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	0a1b      	lsrs	r3, r3, #8
 80026bc:	f003 0307 	and.w	r3, r3, #7
 80026c0:	4904      	ldr	r1, [pc, #16]	@ (80026d4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80026c2:	5ccb      	ldrb	r3, [r1, r3]
 80026c4:	f003 031f 	and.w	r3, r3, #31
 80026c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	bd80      	pop	{r7, pc}
 80026d0:	40021000 	.word	0x40021000
 80026d4:	0800472c 	.word	0x0800472c

080026d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80026dc:	f7ff ffda 	bl	8002694 <HAL_RCC_GetHCLKFreq>
 80026e0:	4602      	mov	r2, r0
 80026e2:	4b06      	ldr	r3, [pc, #24]	@ (80026fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	0adb      	lsrs	r3, r3, #11
 80026e8:	f003 0307 	and.w	r3, r3, #7
 80026ec:	4904      	ldr	r1, [pc, #16]	@ (8002700 <HAL_RCC_GetPCLK2Freq+0x28>)
 80026ee:	5ccb      	ldrb	r3, [r1, r3]
 80026f0:	f003 031f 	and.w	r3, r3, #31
 80026f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	bd80      	pop	{r7, pc}
 80026fc:	40021000 	.word	0x40021000
 8002700:	0800472c 	.word	0x0800472c

08002704 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b086      	sub	sp, #24
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800270c:	2300      	movs	r3, #0
 800270e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002710:	4b2a      	ldr	r3, [pc, #168]	@ (80027bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002712:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002714:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002718:	2b00      	cmp	r3, #0
 800271a:	d003      	beq.n	8002724 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800271c:	f7ff f950 	bl	80019c0 <HAL_PWREx_GetVoltageRange>
 8002720:	6178      	str	r0, [r7, #20]
 8002722:	e014      	b.n	800274e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002724:	4b25      	ldr	r3, [pc, #148]	@ (80027bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002726:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002728:	4a24      	ldr	r2, [pc, #144]	@ (80027bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800272a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800272e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002730:	4b22      	ldr	r3, [pc, #136]	@ (80027bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002732:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002734:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002738:	60fb      	str	r3, [r7, #12]
 800273a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800273c:	f7ff f940 	bl	80019c0 <HAL_PWREx_GetVoltageRange>
 8002740:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002742:	4b1e      	ldr	r3, [pc, #120]	@ (80027bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002744:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002746:	4a1d      	ldr	r2, [pc, #116]	@ (80027bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002748:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800274c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002754:	d10b      	bne.n	800276e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2b80      	cmp	r3, #128	@ 0x80
 800275a:	d919      	bls.n	8002790 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2ba0      	cmp	r3, #160	@ 0xa0
 8002760:	d902      	bls.n	8002768 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002762:	2302      	movs	r3, #2
 8002764:	613b      	str	r3, [r7, #16]
 8002766:	e013      	b.n	8002790 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002768:	2301      	movs	r3, #1
 800276a:	613b      	str	r3, [r7, #16]
 800276c:	e010      	b.n	8002790 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2b80      	cmp	r3, #128	@ 0x80
 8002772:	d902      	bls.n	800277a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002774:	2303      	movs	r3, #3
 8002776:	613b      	str	r3, [r7, #16]
 8002778:	e00a      	b.n	8002790 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2b80      	cmp	r3, #128	@ 0x80
 800277e:	d102      	bne.n	8002786 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002780:	2302      	movs	r3, #2
 8002782:	613b      	str	r3, [r7, #16]
 8002784:	e004      	b.n	8002790 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2b70      	cmp	r3, #112	@ 0x70
 800278a:	d101      	bne.n	8002790 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800278c:	2301      	movs	r3, #1
 800278e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002790:	4b0b      	ldr	r3, [pc, #44]	@ (80027c0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f023 0207 	bic.w	r2, r3, #7
 8002798:	4909      	ldr	r1, [pc, #36]	@ (80027c0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800279a:	693b      	ldr	r3, [r7, #16]
 800279c:	4313      	orrs	r3, r2
 800279e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80027a0:	4b07      	ldr	r3, [pc, #28]	@ (80027c0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f003 0307 	and.w	r3, r3, #7
 80027a8:	693a      	ldr	r2, [r7, #16]
 80027aa:	429a      	cmp	r2, r3
 80027ac:	d001      	beq.n	80027b2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	e000      	b.n	80027b4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80027b2:	2300      	movs	r3, #0
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	3718      	adds	r7, #24
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}
 80027bc:	40021000 	.word	0x40021000
 80027c0:	40022000 	.word	0x40022000

080027c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b086      	sub	sp, #24
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80027cc:	2300      	movs	r3, #0
 80027ce:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80027d0:	2300      	movs	r3, #0
 80027d2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d041      	beq.n	8002864 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80027e4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80027e8:	d02a      	beq.n	8002840 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80027ea:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80027ee:	d824      	bhi.n	800283a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80027f0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80027f4:	d008      	beq.n	8002808 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80027f6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80027fa:	d81e      	bhi.n	800283a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d00a      	beq.n	8002816 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002800:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002804:	d010      	beq.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002806:	e018      	b.n	800283a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002808:	4b86      	ldr	r3, [pc, #536]	@ (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	4a85      	ldr	r2, [pc, #532]	@ (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800280e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002812:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002814:	e015      	b.n	8002842 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	3304      	adds	r3, #4
 800281a:	2100      	movs	r1, #0
 800281c:	4618      	mov	r0, r3
 800281e:	f000 fabb 	bl	8002d98 <RCCEx_PLLSAI1_Config>
 8002822:	4603      	mov	r3, r0
 8002824:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002826:	e00c      	b.n	8002842 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	3320      	adds	r3, #32
 800282c:	2100      	movs	r1, #0
 800282e:	4618      	mov	r0, r3
 8002830:	f000 fba6 	bl	8002f80 <RCCEx_PLLSAI2_Config>
 8002834:	4603      	mov	r3, r0
 8002836:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002838:	e003      	b.n	8002842 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	74fb      	strb	r3, [r7, #19]
      break;
 800283e:	e000      	b.n	8002842 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002840:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002842:	7cfb      	ldrb	r3, [r7, #19]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d10b      	bne.n	8002860 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002848:	4b76      	ldr	r3, [pc, #472]	@ (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800284a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800284e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002856:	4973      	ldr	r1, [pc, #460]	@ (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002858:	4313      	orrs	r3, r2
 800285a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800285e:	e001      	b.n	8002864 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002860:	7cfb      	ldrb	r3, [r7, #19]
 8002862:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800286c:	2b00      	cmp	r3, #0
 800286e:	d041      	beq.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002874:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002878:	d02a      	beq.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800287a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800287e:	d824      	bhi.n	80028ca <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002880:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002884:	d008      	beq.n	8002898 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002886:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800288a:	d81e      	bhi.n	80028ca <HAL_RCCEx_PeriphCLKConfig+0x106>
 800288c:	2b00      	cmp	r3, #0
 800288e:	d00a      	beq.n	80028a6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002890:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002894:	d010      	beq.n	80028b8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002896:	e018      	b.n	80028ca <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002898:	4b62      	ldr	r3, [pc, #392]	@ (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800289a:	68db      	ldr	r3, [r3, #12]
 800289c:	4a61      	ldr	r2, [pc, #388]	@ (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800289e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028a2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80028a4:	e015      	b.n	80028d2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	3304      	adds	r3, #4
 80028aa:	2100      	movs	r1, #0
 80028ac:	4618      	mov	r0, r3
 80028ae:	f000 fa73 	bl	8002d98 <RCCEx_PLLSAI1_Config>
 80028b2:	4603      	mov	r3, r0
 80028b4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80028b6:	e00c      	b.n	80028d2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	3320      	adds	r3, #32
 80028bc:	2100      	movs	r1, #0
 80028be:	4618      	mov	r0, r3
 80028c0:	f000 fb5e 	bl	8002f80 <RCCEx_PLLSAI2_Config>
 80028c4:	4603      	mov	r3, r0
 80028c6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80028c8:	e003      	b.n	80028d2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	74fb      	strb	r3, [r7, #19]
      break;
 80028ce:	e000      	b.n	80028d2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80028d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80028d2:	7cfb      	ldrb	r3, [r7, #19]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d10b      	bne.n	80028f0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80028d8:	4b52      	ldr	r3, [pc, #328]	@ (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028de:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80028e6:	494f      	ldr	r1, [pc, #316]	@ (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028e8:	4313      	orrs	r3, r2
 80028ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80028ee:	e001      	b.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028f0:	7cfb      	ldrb	r3, [r7, #19]
 80028f2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	f000 80a0 	beq.w	8002a42 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002902:	2300      	movs	r3, #0
 8002904:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002906:	4b47      	ldr	r3, [pc, #284]	@ (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002908:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800290a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800290e:	2b00      	cmp	r3, #0
 8002910:	d101      	bne.n	8002916 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002912:	2301      	movs	r3, #1
 8002914:	e000      	b.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002916:	2300      	movs	r3, #0
 8002918:	2b00      	cmp	r3, #0
 800291a:	d00d      	beq.n	8002938 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800291c:	4b41      	ldr	r3, [pc, #260]	@ (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800291e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002920:	4a40      	ldr	r2, [pc, #256]	@ (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002922:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002926:	6593      	str	r3, [r2, #88]	@ 0x58
 8002928:	4b3e      	ldr	r3, [pc, #248]	@ (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800292a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800292c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002930:	60bb      	str	r3, [r7, #8]
 8002932:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002934:	2301      	movs	r3, #1
 8002936:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002938:	4b3b      	ldr	r3, [pc, #236]	@ (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a3a      	ldr	r2, [pc, #232]	@ (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800293e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002942:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002944:	f7fe fb3a 	bl	8000fbc <HAL_GetTick>
 8002948:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800294a:	e009      	b.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800294c:	f7fe fb36 	bl	8000fbc <HAL_GetTick>
 8002950:	4602      	mov	r2, r0
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	1ad3      	subs	r3, r2, r3
 8002956:	2b02      	cmp	r3, #2
 8002958:	d902      	bls.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800295a:	2303      	movs	r3, #3
 800295c:	74fb      	strb	r3, [r7, #19]
        break;
 800295e:	e005      	b.n	800296c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002960:	4b31      	ldr	r3, [pc, #196]	@ (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002968:	2b00      	cmp	r3, #0
 800296a:	d0ef      	beq.n	800294c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800296c:	7cfb      	ldrb	r3, [r7, #19]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d15c      	bne.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002972:	4b2c      	ldr	r3, [pc, #176]	@ (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002974:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002978:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800297c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d01f      	beq.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800298a:	697a      	ldr	r2, [r7, #20]
 800298c:	429a      	cmp	r2, r3
 800298e:	d019      	beq.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002990:	4b24      	ldr	r3, [pc, #144]	@ (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002992:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002996:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800299a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800299c:	4b21      	ldr	r3, [pc, #132]	@ (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800299e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029a2:	4a20      	ldr	r2, [pc, #128]	@ (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80029ac:	4b1d      	ldr	r3, [pc, #116]	@ (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029b2:	4a1c      	ldr	r2, [pc, #112]	@ (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80029b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80029bc:	4a19      	ldr	r2, [pc, #100]	@ (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	f003 0301 	and.w	r3, r3, #1
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d016      	beq.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029ce:	f7fe faf5 	bl	8000fbc <HAL_GetTick>
 80029d2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029d4:	e00b      	b.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029d6:	f7fe faf1 	bl	8000fbc <HAL_GetTick>
 80029da:	4602      	mov	r2, r0
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	1ad3      	subs	r3, r2, r3
 80029e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d902      	bls.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80029e8:	2303      	movs	r3, #3
 80029ea:	74fb      	strb	r3, [r7, #19]
            break;
 80029ec:	e006      	b.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029ee:	4b0d      	ldr	r3, [pc, #52]	@ (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029f4:	f003 0302 	and.w	r3, r3, #2
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d0ec      	beq.n	80029d6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80029fc:	7cfb      	ldrb	r3, [r7, #19]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d10c      	bne.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a02:	4b08      	ldr	r3, [pc, #32]	@ (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a08:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002a12:	4904      	ldr	r1, [pc, #16]	@ (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a14:	4313      	orrs	r3, r2
 8002a16:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002a1a:	e009      	b.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002a1c:	7cfb      	ldrb	r3, [r7, #19]
 8002a1e:	74bb      	strb	r3, [r7, #18]
 8002a20:	e006      	b.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002a22:	bf00      	nop
 8002a24:	40021000 	.word	0x40021000
 8002a28:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a2c:	7cfb      	ldrb	r3, [r7, #19]
 8002a2e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a30:	7c7b      	ldrb	r3, [r7, #17]
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	d105      	bne.n	8002a42 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a36:	4b9e      	ldr	r3, [pc, #632]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a3a:	4a9d      	ldr	r2, [pc, #628]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a3c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a40:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 0301 	and.w	r3, r3, #1
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d00a      	beq.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002a4e:	4b98      	ldr	r3, [pc, #608]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a54:	f023 0203 	bic.w	r2, r3, #3
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a5c:	4994      	ldr	r1, [pc, #592]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 0302 	and.w	r3, r3, #2
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d00a      	beq.n	8002a86 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002a70:	4b8f      	ldr	r3, [pc, #572]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a76:	f023 020c 	bic.w	r2, r3, #12
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a7e:	498c      	ldr	r1, [pc, #560]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a80:	4313      	orrs	r3, r2
 8002a82:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 0304 	and.w	r3, r3, #4
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d00a      	beq.n	8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002a92:	4b87      	ldr	r3, [pc, #540]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a98:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aa0:	4983      	ldr	r1, [pc, #524]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f003 0308 	and.w	r3, r3, #8
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d00a      	beq.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002ab4:	4b7e      	ldr	r3, [pc, #504]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ab6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002aba:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ac2:	497b      	ldr	r1, [pc, #492]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 0310 	and.w	r3, r3, #16
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d00a      	beq.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002ad6:	4b76      	ldr	r3, [pc, #472]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ad8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002adc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ae4:	4972      	ldr	r1, [pc, #456]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f003 0320 	and.w	r3, r3, #32
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d00a      	beq.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002af8:	4b6d      	ldr	r3, [pc, #436]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002afa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002afe:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b06:	496a      	ldr	r1, [pc, #424]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d00a      	beq.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002b1a:	4b65      	ldr	r3, [pc, #404]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b20:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b28:	4961      	ldr	r1, [pc, #388]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d00a      	beq.n	8002b52 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002b3c:	4b5c      	ldr	r3, [pc, #368]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b42:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b4a:	4959      	ldr	r1, [pc, #356]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d00a      	beq.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002b5e:	4b54      	ldr	r3, [pc, #336]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b64:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b6c:	4950      	ldr	r1, [pc, #320]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d00a      	beq.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002b80:	4b4b      	ldr	r3, [pc, #300]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b86:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b8e:	4948      	ldr	r1, [pc, #288]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b90:	4313      	orrs	r3, r2
 8002b92:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d00a      	beq.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002ba2:	4b43      	ldr	r3, [pc, #268]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ba4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ba8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bb0:	493f      	ldr	r1, [pc, #252]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d028      	beq.n	8002c16 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002bc4:	4b3a      	ldr	r3, [pc, #232]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bca:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002bd2:	4937      	ldr	r1, [pc, #220]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002bde:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002be2:	d106      	bne.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002be4:	4b32      	ldr	r3, [pc, #200]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002be6:	68db      	ldr	r3, [r3, #12]
 8002be8:	4a31      	ldr	r2, [pc, #196]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002bee:	60d3      	str	r3, [r2, #12]
 8002bf0:	e011      	b.n	8002c16 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002bf6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002bfa:	d10c      	bne.n	8002c16 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	3304      	adds	r3, #4
 8002c00:	2101      	movs	r1, #1
 8002c02:	4618      	mov	r0, r3
 8002c04:	f000 f8c8 	bl	8002d98 <RCCEx_PLLSAI1_Config>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002c0c:	7cfb      	ldrb	r3, [r7, #19]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d001      	beq.n	8002c16 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002c12:	7cfb      	ldrb	r3, [r7, #19]
 8002c14:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d028      	beq.n	8002c74 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002c22:	4b23      	ldr	r3, [pc, #140]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c28:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c30:	491f      	ldr	r1, [pc, #124]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c32:	4313      	orrs	r3, r2
 8002c34:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c3c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002c40:	d106      	bne.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c42:	4b1b      	ldr	r3, [pc, #108]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c44:	68db      	ldr	r3, [r3, #12]
 8002c46:	4a1a      	ldr	r2, [pc, #104]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c48:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002c4c:	60d3      	str	r3, [r2, #12]
 8002c4e:	e011      	b.n	8002c74 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c54:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002c58:	d10c      	bne.n	8002c74 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	3304      	adds	r3, #4
 8002c5e:	2101      	movs	r1, #1
 8002c60:	4618      	mov	r0, r3
 8002c62:	f000 f899 	bl	8002d98 <RCCEx_PLLSAI1_Config>
 8002c66:	4603      	mov	r3, r0
 8002c68:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c6a:	7cfb      	ldrb	r3, [r7, #19]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d001      	beq.n	8002c74 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002c70:	7cfb      	ldrb	r3, [r7, #19]
 8002c72:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d02b      	beq.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002c80:	4b0b      	ldr	r3, [pc, #44]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c86:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c8e:	4908      	ldr	r1, [pc, #32]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c90:	4313      	orrs	r3, r2
 8002c92:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c9a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002c9e:	d109      	bne.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ca0:	4b03      	ldr	r3, [pc, #12]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ca2:	68db      	ldr	r3, [r3, #12]
 8002ca4:	4a02      	ldr	r2, [pc, #8]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ca6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002caa:	60d3      	str	r3, [r2, #12]
 8002cac:	e014      	b.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002cae:	bf00      	nop
 8002cb0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002cb8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002cbc:	d10c      	bne.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	3304      	adds	r3, #4
 8002cc2:	2101      	movs	r1, #1
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f000 f867 	bl	8002d98 <RCCEx_PLLSAI1_Config>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002cce:	7cfb      	ldrb	r3, [r7, #19]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d001      	beq.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002cd4:	7cfb      	ldrb	r3, [r7, #19]
 8002cd6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d02f      	beq.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002ce4:	4b2b      	ldr	r3, [pc, #172]	@ (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cea:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002cf2:	4928      	ldr	r1, [pc, #160]	@ (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002cfe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002d02:	d10d      	bne.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	3304      	adds	r3, #4
 8002d08:	2102      	movs	r1, #2
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f000 f844 	bl	8002d98 <RCCEx_PLLSAI1_Config>
 8002d10:	4603      	mov	r3, r0
 8002d12:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002d14:	7cfb      	ldrb	r3, [r7, #19]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d014      	beq.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002d1a:	7cfb      	ldrb	r3, [r7, #19]
 8002d1c:	74bb      	strb	r3, [r7, #18]
 8002d1e:	e011      	b.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002d24:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002d28:	d10c      	bne.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	3320      	adds	r3, #32
 8002d2e:	2102      	movs	r1, #2
 8002d30:	4618      	mov	r0, r3
 8002d32:	f000 f925 	bl	8002f80 <RCCEx_PLLSAI2_Config>
 8002d36:	4603      	mov	r3, r0
 8002d38:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002d3a:	7cfb      	ldrb	r3, [r7, #19]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d001      	beq.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002d40:	7cfb      	ldrb	r3, [r7, #19]
 8002d42:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d00a      	beq.n	8002d66 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002d50:	4b10      	ldr	r3, [pc, #64]	@ (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002d52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d56:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002d5e:	490d      	ldr	r1, [pc, #52]	@ (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002d60:	4313      	orrs	r3, r2
 8002d62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d00b      	beq.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002d72:	4b08      	ldr	r3, [pc, #32]	@ (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002d74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d78:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002d82:	4904      	ldr	r1, [pc, #16]	@ (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002d84:	4313      	orrs	r3, r2
 8002d86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002d8a:	7cbb      	ldrb	r3, [r7, #18]
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	3718      	adds	r7, #24
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}
 8002d94:	40021000 	.word	0x40021000

08002d98 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b084      	sub	sp, #16
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
 8002da0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002da2:	2300      	movs	r3, #0
 8002da4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002da6:	4b75      	ldr	r3, [pc, #468]	@ (8002f7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002da8:	68db      	ldr	r3, [r3, #12]
 8002daa:	f003 0303 	and.w	r3, r3, #3
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d018      	beq.n	8002de4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002db2:	4b72      	ldr	r3, [pc, #456]	@ (8002f7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002db4:	68db      	ldr	r3, [r3, #12]
 8002db6:	f003 0203 	and.w	r2, r3, #3
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	429a      	cmp	r2, r3
 8002dc0:	d10d      	bne.n	8002dde <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
       ||
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d009      	beq.n	8002dde <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002dca:	4b6c      	ldr	r3, [pc, #432]	@ (8002f7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dcc:	68db      	ldr	r3, [r3, #12]
 8002dce:	091b      	lsrs	r3, r3, #4
 8002dd0:	f003 0307 	and.w	r3, r3, #7
 8002dd4:	1c5a      	adds	r2, r3, #1
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	685b      	ldr	r3, [r3, #4]
       ||
 8002dda:	429a      	cmp	r2, r3
 8002ddc:	d047      	beq.n	8002e6e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	73fb      	strb	r3, [r7, #15]
 8002de2:	e044      	b.n	8002e6e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	2b03      	cmp	r3, #3
 8002dea:	d018      	beq.n	8002e1e <RCCEx_PLLSAI1_Config+0x86>
 8002dec:	2b03      	cmp	r3, #3
 8002dee:	d825      	bhi.n	8002e3c <RCCEx_PLLSAI1_Config+0xa4>
 8002df0:	2b01      	cmp	r3, #1
 8002df2:	d002      	beq.n	8002dfa <RCCEx_PLLSAI1_Config+0x62>
 8002df4:	2b02      	cmp	r3, #2
 8002df6:	d009      	beq.n	8002e0c <RCCEx_PLLSAI1_Config+0x74>
 8002df8:	e020      	b.n	8002e3c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002dfa:	4b60      	ldr	r3, [pc, #384]	@ (8002f7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f003 0302 	and.w	r3, r3, #2
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d11d      	bne.n	8002e42 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e0a:	e01a      	b.n	8002e42 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002e0c:	4b5b      	ldr	r3, [pc, #364]	@ (8002f7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d116      	bne.n	8002e46 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e1c:	e013      	b.n	8002e46 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002e1e:	4b57      	ldr	r3, [pc, #348]	@ (8002f7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d10f      	bne.n	8002e4a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002e2a:	4b54      	ldr	r3, [pc, #336]	@ (8002f7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d109      	bne.n	8002e4a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
 8002e38:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002e3a:	e006      	b.n	8002e4a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	73fb      	strb	r3, [r7, #15]
      break;
 8002e40:	e004      	b.n	8002e4c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002e42:	bf00      	nop
 8002e44:	e002      	b.n	8002e4c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002e46:	bf00      	nop
 8002e48:	e000      	b.n	8002e4c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002e4a:	bf00      	nop
    }

    if(status == HAL_OK)
 8002e4c:	7bfb      	ldrb	r3, [r7, #15]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d10d      	bne.n	8002e6e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002e52:	4b4a      	ldr	r3, [pc, #296]	@ (8002f7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e54:	68db      	ldr	r3, [r3, #12]
 8002e56:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6819      	ldr	r1, [r3, #0]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	3b01      	subs	r3, #1
 8002e64:	011b      	lsls	r3, r3, #4
 8002e66:	430b      	orrs	r3, r1
 8002e68:	4944      	ldr	r1, [pc, #272]	@ (8002f7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002e6e:	7bfb      	ldrb	r3, [r7, #15]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d17d      	bne.n	8002f70 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002e74:	4b41      	ldr	r3, [pc, #260]	@ (8002f7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a40      	ldr	r2, [pc, #256]	@ (8002f7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e7a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002e7e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e80:	f7fe f89c 	bl	8000fbc <HAL_GetTick>
 8002e84:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002e86:	e009      	b.n	8002e9c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002e88:	f7fe f898 	bl	8000fbc <HAL_GetTick>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	1ad3      	subs	r3, r2, r3
 8002e92:	2b02      	cmp	r3, #2
 8002e94:	d902      	bls.n	8002e9c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002e96:	2303      	movs	r3, #3
 8002e98:	73fb      	strb	r3, [r7, #15]
        break;
 8002e9a:	e005      	b.n	8002ea8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002e9c:	4b37      	ldr	r3, [pc, #220]	@ (8002f7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d1ef      	bne.n	8002e88 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002ea8:	7bfb      	ldrb	r3, [r7, #15]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d160      	bne.n	8002f70 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d111      	bne.n	8002ed8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002eb4:	4b31      	ldr	r3, [pc, #196]	@ (8002f7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002eb6:	691b      	ldr	r3, [r3, #16]
 8002eb8:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002ebc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002ec0:	687a      	ldr	r2, [r7, #4]
 8002ec2:	6892      	ldr	r2, [r2, #8]
 8002ec4:	0211      	lsls	r1, r2, #8
 8002ec6:	687a      	ldr	r2, [r7, #4]
 8002ec8:	68d2      	ldr	r2, [r2, #12]
 8002eca:	0912      	lsrs	r2, r2, #4
 8002ecc:	0452      	lsls	r2, r2, #17
 8002ece:	430a      	orrs	r2, r1
 8002ed0:	492a      	ldr	r1, [pc, #168]	@ (8002f7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	610b      	str	r3, [r1, #16]
 8002ed6:	e027      	b.n	8002f28 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	2b01      	cmp	r3, #1
 8002edc:	d112      	bne.n	8002f04 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002ede:	4b27      	ldr	r3, [pc, #156]	@ (8002f7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ee0:	691b      	ldr	r3, [r3, #16]
 8002ee2:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002ee6:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002eea:	687a      	ldr	r2, [r7, #4]
 8002eec:	6892      	ldr	r2, [r2, #8]
 8002eee:	0211      	lsls	r1, r2, #8
 8002ef0:	687a      	ldr	r2, [r7, #4]
 8002ef2:	6912      	ldr	r2, [r2, #16]
 8002ef4:	0852      	lsrs	r2, r2, #1
 8002ef6:	3a01      	subs	r2, #1
 8002ef8:	0552      	lsls	r2, r2, #21
 8002efa:	430a      	orrs	r2, r1
 8002efc:	491f      	ldr	r1, [pc, #124]	@ (8002f7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002efe:	4313      	orrs	r3, r2
 8002f00:	610b      	str	r3, [r1, #16]
 8002f02:	e011      	b.n	8002f28 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002f04:	4b1d      	ldr	r3, [pc, #116]	@ (8002f7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f06:	691b      	ldr	r3, [r3, #16]
 8002f08:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002f0c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002f10:	687a      	ldr	r2, [r7, #4]
 8002f12:	6892      	ldr	r2, [r2, #8]
 8002f14:	0211      	lsls	r1, r2, #8
 8002f16:	687a      	ldr	r2, [r7, #4]
 8002f18:	6952      	ldr	r2, [r2, #20]
 8002f1a:	0852      	lsrs	r2, r2, #1
 8002f1c:	3a01      	subs	r2, #1
 8002f1e:	0652      	lsls	r2, r2, #25
 8002f20:	430a      	orrs	r2, r1
 8002f22:	4916      	ldr	r1, [pc, #88]	@ (8002f7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f24:	4313      	orrs	r3, r2
 8002f26:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002f28:	4b14      	ldr	r3, [pc, #80]	@ (8002f7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a13      	ldr	r2, [pc, #76]	@ (8002f7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f2e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002f32:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f34:	f7fe f842 	bl	8000fbc <HAL_GetTick>
 8002f38:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002f3a:	e009      	b.n	8002f50 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002f3c:	f7fe f83e 	bl	8000fbc <HAL_GetTick>
 8002f40:	4602      	mov	r2, r0
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	1ad3      	subs	r3, r2, r3
 8002f46:	2b02      	cmp	r3, #2
 8002f48:	d902      	bls.n	8002f50 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002f4a:	2303      	movs	r3, #3
 8002f4c:	73fb      	strb	r3, [r7, #15]
          break;
 8002f4e:	e005      	b.n	8002f5c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002f50:	4b0a      	ldr	r3, [pc, #40]	@ (8002f7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d0ef      	beq.n	8002f3c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002f5c:	7bfb      	ldrb	r3, [r7, #15]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d106      	bne.n	8002f70 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002f62:	4b06      	ldr	r3, [pc, #24]	@ (8002f7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f64:	691a      	ldr	r2, [r3, #16]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	699b      	ldr	r3, [r3, #24]
 8002f6a:	4904      	ldr	r1, [pc, #16]	@ (8002f7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002f70:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	3710      	adds	r7, #16
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}
 8002f7a:	bf00      	nop
 8002f7c:	40021000 	.word	0x40021000

08002f80 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b084      	sub	sp, #16
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
 8002f88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002f8e:	4b6a      	ldr	r3, [pc, #424]	@ (8003138 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f90:	68db      	ldr	r3, [r3, #12]
 8002f92:	f003 0303 	and.w	r3, r3, #3
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d018      	beq.n	8002fcc <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002f9a:	4b67      	ldr	r3, [pc, #412]	@ (8003138 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f9c:	68db      	ldr	r3, [r3, #12]
 8002f9e:	f003 0203 	and.w	r2, r3, #3
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	d10d      	bne.n	8002fc6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
       ||
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d009      	beq.n	8002fc6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002fb2:	4b61      	ldr	r3, [pc, #388]	@ (8003138 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fb4:	68db      	ldr	r3, [r3, #12]
 8002fb6:	091b      	lsrs	r3, r3, #4
 8002fb8:	f003 0307 	and.w	r3, r3, #7
 8002fbc:	1c5a      	adds	r2, r3, #1
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	685b      	ldr	r3, [r3, #4]
       ||
 8002fc2:	429a      	cmp	r2, r3
 8002fc4:	d047      	beq.n	8003056 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	73fb      	strb	r3, [r7, #15]
 8002fca:	e044      	b.n	8003056 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	2b03      	cmp	r3, #3
 8002fd2:	d018      	beq.n	8003006 <RCCEx_PLLSAI2_Config+0x86>
 8002fd4:	2b03      	cmp	r3, #3
 8002fd6:	d825      	bhi.n	8003024 <RCCEx_PLLSAI2_Config+0xa4>
 8002fd8:	2b01      	cmp	r3, #1
 8002fda:	d002      	beq.n	8002fe2 <RCCEx_PLLSAI2_Config+0x62>
 8002fdc:	2b02      	cmp	r3, #2
 8002fde:	d009      	beq.n	8002ff4 <RCCEx_PLLSAI2_Config+0x74>
 8002fe0:	e020      	b.n	8003024 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002fe2:	4b55      	ldr	r3, [pc, #340]	@ (8003138 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 0302 	and.w	r3, r3, #2
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d11d      	bne.n	800302a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ff2:	e01a      	b.n	800302a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002ff4:	4b50      	ldr	r3, [pc, #320]	@ (8003138 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d116      	bne.n	800302e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003004:	e013      	b.n	800302e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003006:	4b4c      	ldr	r3, [pc, #304]	@ (8003138 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800300e:	2b00      	cmp	r3, #0
 8003010:	d10f      	bne.n	8003032 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003012:	4b49      	ldr	r3, [pc, #292]	@ (8003138 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800301a:	2b00      	cmp	r3, #0
 800301c:	d109      	bne.n	8003032 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003022:	e006      	b.n	8003032 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003024:	2301      	movs	r3, #1
 8003026:	73fb      	strb	r3, [r7, #15]
      break;
 8003028:	e004      	b.n	8003034 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800302a:	bf00      	nop
 800302c:	e002      	b.n	8003034 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800302e:	bf00      	nop
 8003030:	e000      	b.n	8003034 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003032:	bf00      	nop
    }

    if(status == HAL_OK)
 8003034:	7bfb      	ldrb	r3, [r7, #15]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d10d      	bne.n	8003056 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800303a:	4b3f      	ldr	r3, [pc, #252]	@ (8003138 <RCCEx_PLLSAI2_Config+0x1b8>)
 800303c:	68db      	ldr	r3, [r3, #12]
 800303e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6819      	ldr	r1, [r3, #0]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	3b01      	subs	r3, #1
 800304c:	011b      	lsls	r3, r3, #4
 800304e:	430b      	orrs	r3, r1
 8003050:	4939      	ldr	r1, [pc, #228]	@ (8003138 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003052:	4313      	orrs	r3, r2
 8003054:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003056:	7bfb      	ldrb	r3, [r7, #15]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d167      	bne.n	800312c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800305c:	4b36      	ldr	r3, [pc, #216]	@ (8003138 <RCCEx_PLLSAI2_Config+0x1b8>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a35      	ldr	r2, [pc, #212]	@ (8003138 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003062:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003066:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003068:	f7fd ffa8 	bl	8000fbc <HAL_GetTick>
 800306c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800306e:	e009      	b.n	8003084 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003070:	f7fd ffa4 	bl	8000fbc <HAL_GetTick>
 8003074:	4602      	mov	r2, r0
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	1ad3      	subs	r3, r2, r3
 800307a:	2b02      	cmp	r3, #2
 800307c:	d902      	bls.n	8003084 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800307e:	2303      	movs	r3, #3
 8003080:	73fb      	strb	r3, [r7, #15]
        break;
 8003082:	e005      	b.n	8003090 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003084:	4b2c      	ldr	r3, [pc, #176]	@ (8003138 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800308c:	2b00      	cmp	r3, #0
 800308e:	d1ef      	bne.n	8003070 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003090:	7bfb      	ldrb	r3, [r7, #15]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d14a      	bne.n	800312c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d111      	bne.n	80030c0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800309c:	4b26      	ldr	r3, [pc, #152]	@ (8003138 <RCCEx_PLLSAI2_Config+0x1b8>)
 800309e:	695b      	ldr	r3, [r3, #20]
 80030a0:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80030a4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80030a8:	687a      	ldr	r2, [r7, #4]
 80030aa:	6892      	ldr	r2, [r2, #8]
 80030ac:	0211      	lsls	r1, r2, #8
 80030ae:	687a      	ldr	r2, [r7, #4]
 80030b0:	68d2      	ldr	r2, [r2, #12]
 80030b2:	0912      	lsrs	r2, r2, #4
 80030b4:	0452      	lsls	r2, r2, #17
 80030b6:	430a      	orrs	r2, r1
 80030b8:	491f      	ldr	r1, [pc, #124]	@ (8003138 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030ba:	4313      	orrs	r3, r2
 80030bc:	614b      	str	r3, [r1, #20]
 80030be:	e011      	b.n	80030e4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80030c0:	4b1d      	ldr	r3, [pc, #116]	@ (8003138 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030c2:	695b      	ldr	r3, [r3, #20]
 80030c4:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80030c8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80030cc:	687a      	ldr	r2, [r7, #4]
 80030ce:	6892      	ldr	r2, [r2, #8]
 80030d0:	0211      	lsls	r1, r2, #8
 80030d2:	687a      	ldr	r2, [r7, #4]
 80030d4:	6912      	ldr	r2, [r2, #16]
 80030d6:	0852      	lsrs	r2, r2, #1
 80030d8:	3a01      	subs	r2, #1
 80030da:	0652      	lsls	r2, r2, #25
 80030dc:	430a      	orrs	r2, r1
 80030de:	4916      	ldr	r1, [pc, #88]	@ (8003138 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030e0:	4313      	orrs	r3, r2
 80030e2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80030e4:	4b14      	ldr	r3, [pc, #80]	@ (8003138 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a13      	ldr	r2, [pc, #76]	@ (8003138 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80030ee:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030f0:	f7fd ff64 	bl	8000fbc <HAL_GetTick>
 80030f4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80030f6:	e009      	b.n	800310c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80030f8:	f7fd ff60 	bl	8000fbc <HAL_GetTick>
 80030fc:	4602      	mov	r2, r0
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	1ad3      	subs	r3, r2, r3
 8003102:	2b02      	cmp	r3, #2
 8003104:	d902      	bls.n	800310c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003106:	2303      	movs	r3, #3
 8003108:	73fb      	strb	r3, [r7, #15]
          break;
 800310a:	e005      	b.n	8003118 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800310c:	4b0a      	ldr	r3, [pc, #40]	@ (8003138 <RCCEx_PLLSAI2_Config+0x1b8>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003114:	2b00      	cmp	r3, #0
 8003116:	d0ef      	beq.n	80030f8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003118:	7bfb      	ldrb	r3, [r7, #15]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d106      	bne.n	800312c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800311e:	4b06      	ldr	r3, [pc, #24]	@ (8003138 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003120:	695a      	ldr	r2, [r3, #20]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	695b      	ldr	r3, [r3, #20]
 8003126:	4904      	ldr	r1, [pc, #16]	@ (8003138 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003128:	4313      	orrs	r3, r2
 800312a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800312c:	7bfb      	ldrb	r3, [r7, #15]
}
 800312e:	4618      	mov	r0, r3
 8003130:	3710      	adds	r7, #16
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}
 8003136:	bf00      	nop
 8003138:	40021000 	.word	0x40021000

0800313c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b082      	sub	sp, #8
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d101      	bne.n	800314e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	e040      	b.n	80031d0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003152:	2b00      	cmp	r3, #0
 8003154:	d106      	bne.n	8003164 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2200      	movs	r2, #0
 800315a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	f7fd fd9e 	bl	8000ca0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2224      	movs	r2, #36	@ 0x24
 8003168:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	681a      	ldr	r2, [r3, #0]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f022 0201 	bic.w	r2, r2, #1
 8003178:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800317e:	2b00      	cmp	r3, #0
 8003180:	d002      	beq.n	8003188 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003182:	6878      	ldr	r0, [r7, #4]
 8003184:	f000 fba6 	bl	80038d4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003188:	6878      	ldr	r0, [r7, #4]
 800318a:	f000 f8eb 	bl	8003364 <UART_SetConfig>
 800318e:	4603      	mov	r3, r0
 8003190:	2b01      	cmp	r3, #1
 8003192:	d101      	bne.n	8003198 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003194:	2301      	movs	r3, #1
 8003196:	e01b      	b.n	80031d0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	685a      	ldr	r2, [r3, #4]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80031a6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	689a      	ldr	r2, [r3, #8]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80031b6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f042 0201 	orr.w	r2, r2, #1
 80031c6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80031c8:	6878      	ldr	r0, [r7, #4]
 80031ca:	f000 fc25 	bl	8003a18 <UART_CheckIdleState>
 80031ce:	4603      	mov	r3, r0
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	3708      	adds	r7, #8
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bd80      	pop	{r7, pc}

080031d8 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b082      	sub	sp, #8
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d101      	bne.n	80031ea <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	e02f      	b.n	800324a <HAL_UART_DeInit+0x72>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2224      	movs	r2, #36	@ 0x24
 80031ee:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	681a      	ldr	r2, [r3, #0]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f022 0201 	bic.w	r2, r2, #1
 80031fe:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	2200      	movs	r2, #0
 8003206:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	2200      	movs	r2, #0
 800320e:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	2200      	movs	r2, #0
 8003216:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8003218:	6878      	ldr	r0, [r7, #4]
 800321a:	f7fd fd99 	bl	8000d50 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2200      	movs	r2, #0
 8003222:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_RESET;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2200      	movs	r2, #0
 800322a:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_RESET;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2200      	movs	r2, #0
 8003230:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2200      	movs	r2, #0
 8003238:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2200      	movs	r2, #0
 800323e:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2200      	movs	r2, #0
 8003244:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003248:	2300      	movs	r3, #0
}
 800324a:	4618      	mov	r0, r3
 800324c:	3708      	adds	r7, #8
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}

08003252 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003252:	b580      	push	{r7, lr}
 8003254:	b08a      	sub	sp, #40	@ 0x28
 8003256:	af02      	add	r7, sp, #8
 8003258:	60f8      	str	r0, [r7, #12]
 800325a:	60b9      	str	r1, [r7, #8]
 800325c:	603b      	str	r3, [r7, #0]
 800325e:	4613      	mov	r3, r2
 8003260:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003266:	2b20      	cmp	r3, #32
 8003268:	d177      	bne.n	800335a <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d002      	beq.n	8003276 <HAL_UART_Transmit+0x24>
 8003270:	88fb      	ldrh	r3, [r7, #6]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d101      	bne.n	800327a <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	e070      	b.n	800335c <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	2200      	movs	r2, #0
 800327e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	2221      	movs	r2, #33	@ 0x21
 8003286:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003288:	f7fd fe98 	bl	8000fbc <HAL_GetTick>
 800328c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	88fa      	ldrh	r2, [r7, #6]
 8003292:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	88fa      	ldrh	r2, [r7, #6]
 800329a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80032a6:	d108      	bne.n	80032ba <HAL_UART_Transmit+0x68>
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	691b      	ldr	r3, [r3, #16]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d104      	bne.n	80032ba <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80032b0:	2300      	movs	r3, #0
 80032b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	61bb      	str	r3, [r7, #24]
 80032b8:	e003      	b.n	80032c2 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80032be:	2300      	movs	r3, #0
 80032c0:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80032c2:	e02f      	b.n	8003324 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	9300      	str	r3, [sp, #0]
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	2200      	movs	r2, #0
 80032cc:	2180      	movs	r1, #128	@ 0x80
 80032ce:	68f8      	ldr	r0, [r7, #12]
 80032d0:	f000 fc4a 	bl	8003b68 <UART_WaitOnFlagUntilTimeout>
 80032d4:	4603      	mov	r3, r0
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d004      	beq.n	80032e4 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	2220      	movs	r2, #32
 80032de:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80032e0:	2303      	movs	r3, #3
 80032e2:	e03b      	b.n	800335c <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80032e4:	69fb      	ldr	r3, [r7, #28]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d10b      	bne.n	8003302 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80032ea:	69bb      	ldr	r3, [r7, #24]
 80032ec:	881a      	ldrh	r2, [r3, #0]
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80032f6:	b292      	uxth	r2, r2
 80032f8:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80032fa:	69bb      	ldr	r3, [r7, #24]
 80032fc:	3302      	adds	r3, #2
 80032fe:	61bb      	str	r3, [r7, #24]
 8003300:	e007      	b.n	8003312 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003302:	69fb      	ldr	r3, [r7, #28]
 8003304:	781a      	ldrb	r2, [r3, #0]
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800330c:	69fb      	ldr	r3, [r7, #28]
 800330e:	3301      	adds	r3, #1
 8003310:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003318:	b29b      	uxth	r3, r3
 800331a:	3b01      	subs	r3, #1
 800331c:	b29a      	uxth	r2, r3
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800332a:	b29b      	uxth	r3, r3
 800332c:	2b00      	cmp	r3, #0
 800332e:	d1c9      	bne.n	80032c4 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	9300      	str	r3, [sp, #0]
 8003334:	697b      	ldr	r3, [r7, #20]
 8003336:	2200      	movs	r2, #0
 8003338:	2140      	movs	r1, #64	@ 0x40
 800333a:	68f8      	ldr	r0, [r7, #12]
 800333c:	f000 fc14 	bl	8003b68 <UART_WaitOnFlagUntilTimeout>
 8003340:	4603      	mov	r3, r0
 8003342:	2b00      	cmp	r3, #0
 8003344:	d004      	beq.n	8003350 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	2220      	movs	r2, #32
 800334a:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800334c:	2303      	movs	r3, #3
 800334e:	e005      	b.n	800335c <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	2220      	movs	r2, #32
 8003354:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003356:	2300      	movs	r3, #0
 8003358:	e000      	b.n	800335c <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800335a:	2302      	movs	r3, #2
  }
}
 800335c:	4618      	mov	r0, r3
 800335e:	3720      	adds	r7, #32
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}

08003364 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003364:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003368:	b08a      	sub	sp, #40	@ 0x28
 800336a:	af00      	add	r7, sp, #0
 800336c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800336e:	2300      	movs	r3, #0
 8003370:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	689a      	ldr	r2, [r3, #8]
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	691b      	ldr	r3, [r3, #16]
 800337c:	431a      	orrs	r2, r3
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	695b      	ldr	r3, [r3, #20]
 8003382:	431a      	orrs	r2, r3
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	69db      	ldr	r3, [r3, #28]
 8003388:	4313      	orrs	r3, r2
 800338a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	681a      	ldr	r2, [r3, #0]
 8003392:	4ba4      	ldr	r3, [pc, #656]	@ (8003624 <UART_SetConfig+0x2c0>)
 8003394:	4013      	ands	r3, r2
 8003396:	68fa      	ldr	r2, [r7, #12]
 8003398:	6812      	ldr	r2, [r2, #0]
 800339a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800339c:	430b      	orrs	r3, r1
 800339e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	68da      	ldr	r2, [r3, #12]
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	430a      	orrs	r2, r1
 80033b4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	699b      	ldr	r3, [r3, #24]
 80033ba:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a99      	ldr	r2, [pc, #612]	@ (8003628 <UART_SetConfig+0x2c4>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d004      	beq.n	80033d0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	6a1b      	ldr	r3, [r3, #32]
 80033ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80033cc:	4313      	orrs	r3, r2
 80033ce:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80033e0:	430a      	orrs	r2, r1
 80033e2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a90      	ldr	r2, [pc, #576]	@ (800362c <UART_SetConfig+0x2c8>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d126      	bne.n	800343c <UART_SetConfig+0xd8>
 80033ee:	4b90      	ldr	r3, [pc, #576]	@ (8003630 <UART_SetConfig+0x2cc>)
 80033f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033f4:	f003 0303 	and.w	r3, r3, #3
 80033f8:	2b03      	cmp	r3, #3
 80033fa:	d81b      	bhi.n	8003434 <UART_SetConfig+0xd0>
 80033fc:	a201      	add	r2, pc, #4	@ (adr r2, 8003404 <UART_SetConfig+0xa0>)
 80033fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003402:	bf00      	nop
 8003404:	08003415 	.word	0x08003415
 8003408:	08003425 	.word	0x08003425
 800340c:	0800341d 	.word	0x0800341d
 8003410:	0800342d 	.word	0x0800342d
 8003414:	2301      	movs	r3, #1
 8003416:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800341a:	e116      	b.n	800364a <UART_SetConfig+0x2e6>
 800341c:	2302      	movs	r3, #2
 800341e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003422:	e112      	b.n	800364a <UART_SetConfig+0x2e6>
 8003424:	2304      	movs	r3, #4
 8003426:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800342a:	e10e      	b.n	800364a <UART_SetConfig+0x2e6>
 800342c:	2308      	movs	r3, #8
 800342e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003432:	e10a      	b.n	800364a <UART_SetConfig+0x2e6>
 8003434:	2310      	movs	r3, #16
 8003436:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800343a:	e106      	b.n	800364a <UART_SetConfig+0x2e6>
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a7c      	ldr	r2, [pc, #496]	@ (8003634 <UART_SetConfig+0x2d0>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d138      	bne.n	80034b8 <UART_SetConfig+0x154>
 8003446:	4b7a      	ldr	r3, [pc, #488]	@ (8003630 <UART_SetConfig+0x2cc>)
 8003448:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800344c:	f003 030c 	and.w	r3, r3, #12
 8003450:	2b0c      	cmp	r3, #12
 8003452:	d82d      	bhi.n	80034b0 <UART_SetConfig+0x14c>
 8003454:	a201      	add	r2, pc, #4	@ (adr r2, 800345c <UART_SetConfig+0xf8>)
 8003456:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800345a:	bf00      	nop
 800345c:	08003491 	.word	0x08003491
 8003460:	080034b1 	.word	0x080034b1
 8003464:	080034b1 	.word	0x080034b1
 8003468:	080034b1 	.word	0x080034b1
 800346c:	080034a1 	.word	0x080034a1
 8003470:	080034b1 	.word	0x080034b1
 8003474:	080034b1 	.word	0x080034b1
 8003478:	080034b1 	.word	0x080034b1
 800347c:	08003499 	.word	0x08003499
 8003480:	080034b1 	.word	0x080034b1
 8003484:	080034b1 	.word	0x080034b1
 8003488:	080034b1 	.word	0x080034b1
 800348c:	080034a9 	.word	0x080034a9
 8003490:	2300      	movs	r3, #0
 8003492:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003496:	e0d8      	b.n	800364a <UART_SetConfig+0x2e6>
 8003498:	2302      	movs	r3, #2
 800349a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800349e:	e0d4      	b.n	800364a <UART_SetConfig+0x2e6>
 80034a0:	2304      	movs	r3, #4
 80034a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80034a6:	e0d0      	b.n	800364a <UART_SetConfig+0x2e6>
 80034a8:	2308      	movs	r3, #8
 80034aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80034ae:	e0cc      	b.n	800364a <UART_SetConfig+0x2e6>
 80034b0:	2310      	movs	r3, #16
 80034b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80034b6:	e0c8      	b.n	800364a <UART_SetConfig+0x2e6>
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a5e      	ldr	r2, [pc, #376]	@ (8003638 <UART_SetConfig+0x2d4>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d125      	bne.n	800350e <UART_SetConfig+0x1aa>
 80034c2:	4b5b      	ldr	r3, [pc, #364]	@ (8003630 <UART_SetConfig+0x2cc>)
 80034c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034c8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80034cc:	2b30      	cmp	r3, #48	@ 0x30
 80034ce:	d016      	beq.n	80034fe <UART_SetConfig+0x19a>
 80034d0:	2b30      	cmp	r3, #48	@ 0x30
 80034d2:	d818      	bhi.n	8003506 <UART_SetConfig+0x1a2>
 80034d4:	2b20      	cmp	r3, #32
 80034d6:	d00a      	beq.n	80034ee <UART_SetConfig+0x18a>
 80034d8:	2b20      	cmp	r3, #32
 80034da:	d814      	bhi.n	8003506 <UART_SetConfig+0x1a2>
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d002      	beq.n	80034e6 <UART_SetConfig+0x182>
 80034e0:	2b10      	cmp	r3, #16
 80034e2:	d008      	beq.n	80034f6 <UART_SetConfig+0x192>
 80034e4:	e00f      	b.n	8003506 <UART_SetConfig+0x1a2>
 80034e6:	2300      	movs	r3, #0
 80034e8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80034ec:	e0ad      	b.n	800364a <UART_SetConfig+0x2e6>
 80034ee:	2302      	movs	r3, #2
 80034f0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80034f4:	e0a9      	b.n	800364a <UART_SetConfig+0x2e6>
 80034f6:	2304      	movs	r3, #4
 80034f8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80034fc:	e0a5      	b.n	800364a <UART_SetConfig+0x2e6>
 80034fe:	2308      	movs	r3, #8
 8003500:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003504:	e0a1      	b.n	800364a <UART_SetConfig+0x2e6>
 8003506:	2310      	movs	r3, #16
 8003508:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800350c:	e09d      	b.n	800364a <UART_SetConfig+0x2e6>
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a4a      	ldr	r2, [pc, #296]	@ (800363c <UART_SetConfig+0x2d8>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d125      	bne.n	8003564 <UART_SetConfig+0x200>
 8003518:	4b45      	ldr	r3, [pc, #276]	@ (8003630 <UART_SetConfig+0x2cc>)
 800351a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800351e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003522:	2bc0      	cmp	r3, #192	@ 0xc0
 8003524:	d016      	beq.n	8003554 <UART_SetConfig+0x1f0>
 8003526:	2bc0      	cmp	r3, #192	@ 0xc0
 8003528:	d818      	bhi.n	800355c <UART_SetConfig+0x1f8>
 800352a:	2b80      	cmp	r3, #128	@ 0x80
 800352c:	d00a      	beq.n	8003544 <UART_SetConfig+0x1e0>
 800352e:	2b80      	cmp	r3, #128	@ 0x80
 8003530:	d814      	bhi.n	800355c <UART_SetConfig+0x1f8>
 8003532:	2b00      	cmp	r3, #0
 8003534:	d002      	beq.n	800353c <UART_SetConfig+0x1d8>
 8003536:	2b40      	cmp	r3, #64	@ 0x40
 8003538:	d008      	beq.n	800354c <UART_SetConfig+0x1e8>
 800353a:	e00f      	b.n	800355c <UART_SetConfig+0x1f8>
 800353c:	2300      	movs	r3, #0
 800353e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003542:	e082      	b.n	800364a <UART_SetConfig+0x2e6>
 8003544:	2302      	movs	r3, #2
 8003546:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800354a:	e07e      	b.n	800364a <UART_SetConfig+0x2e6>
 800354c:	2304      	movs	r3, #4
 800354e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003552:	e07a      	b.n	800364a <UART_SetConfig+0x2e6>
 8003554:	2308      	movs	r3, #8
 8003556:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800355a:	e076      	b.n	800364a <UART_SetConfig+0x2e6>
 800355c:	2310      	movs	r3, #16
 800355e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003562:	e072      	b.n	800364a <UART_SetConfig+0x2e6>
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a35      	ldr	r2, [pc, #212]	@ (8003640 <UART_SetConfig+0x2dc>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d12a      	bne.n	80035c4 <UART_SetConfig+0x260>
 800356e:	4b30      	ldr	r3, [pc, #192]	@ (8003630 <UART_SetConfig+0x2cc>)
 8003570:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003574:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003578:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800357c:	d01a      	beq.n	80035b4 <UART_SetConfig+0x250>
 800357e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003582:	d81b      	bhi.n	80035bc <UART_SetConfig+0x258>
 8003584:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003588:	d00c      	beq.n	80035a4 <UART_SetConfig+0x240>
 800358a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800358e:	d815      	bhi.n	80035bc <UART_SetConfig+0x258>
 8003590:	2b00      	cmp	r3, #0
 8003592:	d003      	beq.n	800359c <UART_SetConfig+0x238>
 8003594:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003598:	d008      	beq.n	80035ac <UART_SetConfig+0x248>
 800359a:	e00f      	b.n	80035bc <UART_SetConfig+0x258>
 800359c:	2300      	movs	r3, #0
 800359e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80035a2:	e052      	b.n	800364a <UART_SetConfig+0x2e6>
 80035a4:	2302      	movs	r3, #2
 80035a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80035aa:	e04e      	b.n	800364a <UART_SetConfig+0x2e6>
 80035ac:	2304      	movs	r3, #4
 80035ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80035b2:	e04a      	b.n	800364a <UART_SetConfig+0x2e6>
 80035b4:	2308      	movs	r3, #8
 80035b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80035ba:	e046      	b.n	800364a <UART_SetConfig+0x2e6>
 80035bc:	2310      	movs	r3, #16
 80035be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80035c2:	e042      	b.n	800364a <UART_SetConfig+0x2e6>
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a17      	ldr	r2, [pc, #92]	@ (8003628 <UART_SetConfig+0x2c4>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d13a      	bne.n	8003644 <UART_SetConfig+0x2e0>
 80035ce:	4b18      	ldr	r3, [pc, #96]	@ (8003630 <UART_SetConfig+0x2cc>)
 80035d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035d4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80035d8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80035dc:	d01a      	beq.n	8003614 <UART_SetConfig+0x2b0>
 80035de:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80035e2:	d81b      	bhi.n	800361c <UART_SetConfig+0x2b8>
 80035e4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80035e8:	d00c      	beq.n	8003604 <UART_SetConfig+0x2a0>
 80035ea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80035ee:	d815      	bhi.n	800361c <UART_SetConfig+0x2b8>
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d003      	beq.n	80035fc <UART_SetConfig+0x298>
 80035f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80035f8:	d008      	beq.n	800360c <UART_SetConfig+0x2a8>
 80035fa:	e00f      	b.n	800361c <UART_SetConfig+0x2b8>
 80035fc:	2300      	movs	r3, #0
 80035fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003602:	e022      	b.n	800364a <UART_SetConfig+0x2e6>
 8003604:	2302      	movs	r3, #2
 8003606:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800360a:	e01e      	b.n	800364a <UART_SetConfig+0x2e6>
 800360c:	2304      	movs	r3, #4
 800360e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003612:	e01a      	b.n	800364a <UART_SetConfig+0x2e6>
 8003614:	2308      	movs	r3, #8
 8003616:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800361a:	e016      	b.n	800364a <UART_SetConfig+0x2e6>
 800361c:	2310      	movs	r3, #16
 800361e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003622:	e012      	b.n	800364a <UART_SetConfig+0x2e6>
 8003624:	efff69f3 	.word	0xefff69f3
 8003628:	40008000 	.word	0x40008000
 800362c:	40013800 	.word	0x40013800
 8003630:	40021000 	.word	0x40021000
 8003634:	40004400 	.word	0x40004400
 8003638:	40004800 	.word	0x40004800
 800363c:	40004c00 	.word	0x40004c00
 8003640:	40005000 	.word	0x40005000
 8003644:	2310      	movs	r3, #16
 8003646:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a9f      	ldr	r2, [pc, #636]	@ (80038cc <UART_SetConfig+0x568>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d17a      	bne.n	800374a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003654:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003658:	2b08      	cmp	r3, #8
 800365a:	d824      	bhi.n	80036a6 <UART_SetConfig+0x342>
 800365c:	a201      	add	r2, pc, #4	@ (adr r2, 8003664 <UART_SetConfig+0x300>)
 800365e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003662:	bf00      	nop
 8003664:	08003689 	.word	0x08003689
 8003668:	080036a7 	.word	0x080036a7
 800366c:	08003691 	.word	0x08003691
 8003670:	080036a7 	.word	0x080036a7
 8003674:	08003697 	.word	0x08003697
 8003678:	080036a7 	.word	0x080036a7
 800367c:	080036a7 	.word	0x080036a7
 8003680:	080036a7 	.word	0x080036a7
 8003684:	0800369f 	.word	0x0800369f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003688:	f7ff f810 	bl	80026ac <HAL_RCC_GetPCLK1Freq>
 800368c:	61f8      	str	r0, [r7, #28]
        break;
 800368e:	e010      	b.n	80036b2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003690:	4b8f      	ldr	r3, [pc, #572]	@ (80038d0 <UART_SetConfig+0x56c>)
 8003692:	61fb      	str	r3, [r7, #28]
        break;
 8003694:	e00d      	b.n	80036b2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003696:	f7fe ff71 	bl	800257c <HAL_RCC_GetSysClockFreq>
 800369a:	61f8      	str	r0, [r7, #28]
        break;
 800369c:	e009      	b.n	80036b2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800369e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80036a2:	61fb      	str	r3, [r7, #28]
        break;
 80036a4:	e005      	b.n	80036b2 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80036a6:	2300      	movs	r3, #0
 80036a8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80036b0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80036b2:	69fb      	ldr	r3, [r7, #28]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	f000 80fb 	beq.w	80038b0 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	685a      	ldr	r2, [r3, #4]
 80036be:	4613      	mov	r3, r2
 80036c0:	005b      	lsls	r3, r3, #1
 80036c2:	4413      	add	r3, r2
 80036c4:	69fa      	ldr	r2, [r7, #28]
 80036c6:	429a      	cmp	r2, r3
 80036c8:	d305      	bcc.n	80036d6 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80036d0:	69fa      	ldr	r2, [r7, #28]
 80036d2:	429a      	cmp	r2, r3
 80036d4:	d903      	bls.n	80036de <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80036dc:	e0e8      	b.n	80038b0 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80036de:	69fb      	ldr	r3, [r7, #28]
 80036e0:	2200      	movs	r2, #0
 80036e2:	461c      	mov	r4, r3
 80036e4:	4615      	mov	r5, r2
 80036e6:	f04f 0200 	mov.w	r2, #0
 80036ea:	f04f 0300 	mov.w	r3, #0
 80036ee:	022b      	lsls	r3, r5, #8
 80036f0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80036f4:	0222      	lsls	r2, r4, #8
 80036f6:	68f9      	ldr	r1, [r7, #12]
 80036f8:	6849      	ldr	r1, [r1, #4]
 80036fa:	0849      	lsrs	r1, r1, #1
 80036fc:	2000      	movs	r0, #0
 80036fe:	4688      	mov	r8, r1
 8003700:	4681      	mov	r9, r0
 8003702:	eb12 0a08 	adds.w	sl, r2, r8
 8003706:	eb43 0b09 	adc.w	fp, r3, r9
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	2200      	movs	r2, #0
 8003710:	603b      	str	r3, [r7, #0]
 8003712:	607a      	str	r2, [r7, #4]
 8003714:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003718:	4650      	mov	r0, sl
 800371a:	4659      	mov	r1, fp
 800371c:	f7fc fdb0 	bl	8000280 <__aeabi_uldivmod>
 8003720:	4602      	mov	r2, r0
 8003722:	460b      	mov	r3, r1
 8003724:	4613      	mov	r3, r2
 8003726:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003728:	69bb      	ldr	r3, [r7, #24]
 800372a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800372e:	d308      	bcc.n	8003742 <UART_SetConfig+0x3de>
 8003730:	69bb      	ldr	r3, [r7, #24]
 8003732:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003736:	d204      	bcs.n	8003742 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	69ba      	ldr	r2, [r7, #24]
 800373e:	60da      	str	r2, [r3, #12]
 8003740:	e0b6      	b.n	80038b0 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003748:	e0b2      	b.n	80038b0 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	69db      	ldr	r3, [r3, #28]
 800374e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003752:	d15e      	bne.n	8003812 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003754:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003758:	2b08      	cmp	r3, #8
 800375a:	d828      	bhi.n	80037ae <UART_SetConfig+0x44a>
 800375c:	a201      	add	r2, pc, #4	@ (adr r2, 8003764 <UART_SetConfig+0x400>)
 800375e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003762:	bf00      	nop
 8003764:	08003789 	.word	0x08003789
 8003768:	08003791 	.word	0x08003791
 800376c:	08003799 	.word	0x08003799
 8003770:	080037af 	.word	0x080037af
 8003774:	0800379f 	.word	0x0800379f
 8003778:	080037af 	.word	0x080037af
 800377c:	080037af 	.word	0x080037af
 8003780:	080037af 	.word	0x080037af
 8003784:	080037a7 	.word	0x080037a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003788:	f7fe ff90 	bl	80026ac <HAL_RCC_GetPCLK1Freq>
 800378c:	61f8      	str	r0, [r7, #28]
        break;
 800378e:	e014      	b.n	80037ba <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003790:	f7fe ffa2 	bl	80026d8 <HAL_RCC_GetPCLK2Freq>
 8003794:	61f8      	str	r0, [r7, #28]
        break;
 8003796:	e010      	b.n	80037ba <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003798:	4b4d      	ldr	r3, [pc, #308]	@ (80038d0 <UART_SetConfig+0x56c>)
 800379a:	61fb      	str	r3, [r7, #28]
        break;
 800379c:	e00d      	b.n	80037ba <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800379e:	f7fe feed 	bl	800257c <HAL_RCC_GetSysClockFreq>
 80037a2:	61f8      	str	r0, [r7, #28]
        break;
 80037a4:	e009      	b.n	80037ba <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80037a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80037aa:	61fb      	str	r3, [r7, #28]
        break;
 80037ac:	e005      	b.n	80037ba <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80037ae:	2300      	movs	r3, #0
 80037b0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
 80037b4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80037b8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80037ba:	69fb      	ldr	r3, [r7, #28]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d077      	beq.n	80038b0 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80037c0:	69fb      	ldr	r3, [r7, #28]
 80037c2:	005a      	lsls	r2, r3, #1
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	085b      	lsrs	r3, r3, #1
 80037ca:	441a      	add	r2, r3
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80037d4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80037d6:	69bb      	ldr	r3, [r7, #24]
 80037d8:	2b0f      	cmp	r3, #15
 80037da:	d916      	bls.n	800380a <UART_SetConfig+0x4a6>
 80037dc:	69bb      	ldr	r3, [r7, #24]
 80037de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80037e2:	d212      	bcs.n	800380a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80037e4:	69bb      	ldr	r3, [r7, #24]
 80037e6:	b29b      	uxth	r3, r3
 80037e8:	f023 030f 	bic.w	r3, r3, #15
 80037ec:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80037ee:	69bb      	ldr	r3, [r7, #24]
 80037f0:	085b      	lsrs	r3, r3, #1
 80037f2:	b29b      	uxth	r3, r3
 80037f4:	f003 0307 	and.w	r3, r3, #7
 80037f8:	b29a      	uxth	r2, r3
 80037fa:	8afb      	ldrh	r3, [r7, #22]
 80037fc:	4313      	orrs	r3, r2
 80037fe:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	8afa      	ldrh	r2, [r7, #22]
 8003806:	60da      	str	r2, [r3, #12]
 8003808:	e052      	b.n	80038b0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800380a:	2301      	movs	r3, #1
 800380c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003810:	e04e      	b.n	80038b0 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003812:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003816:	2b08      	cmp	r3, #8
 8003818:	d827      	bhi.n	800386a <UART_SetConfig+0x506>
 800381a:	a201      	add	r2, pc, #4	@ (adr r2, 8003820 <UART_SetConfig+0x4bc>)
 800381c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003820:	08003845 	.word	0x08003845
 8003824:	0800384d 	.word	0x0800384d
 8003828:	08003855 	.word	0x08003855
 800382c:	0800386b 	.word	0x0800386b
 8003830:	0800385b 	.word	0x0800385b
 8003834:	0800386b 	.word	0x0800386b
 8003838:	0800386b 	.word	0x0800386b
 800383c:	0800386b 	.word	0x0800386b
 8003840:	08003863 	.word	0x08003863
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003844:	f7fe ff32 	bl	80026ac <HAL_RCC_GetPCLK1Freq>
 8003848:	61f8      	str	r0, [r7, #28]
        break;
 800384a:	e014      	b.n	8003876 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800384c:	f7fe ff44 	bl	80026d8 <HAL_RCC_GetPCLK2Freq>
 8003850:	61f8      	str	r0, [r7, #28]
        break;
 8003852:	e010      	b.n	8003876 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003854:	4b1e      	ldr	r3, [pc, #120]	@ (80038d0 <UART_SetConfig+0x56c>)
 8003856:	61fb      	str	r3, [r7, #28]
        break;
 8003858:	e00d      	b.n	8003876 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800385a:	f7fe fe8f 	bl	800257c <HAL_RCC_GetSysClockFreq>
 800385e:	61f8      	str	r0, [r7, #28]
        break;
 8003860:	e009      	b.n	8003876 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003862:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003866:	61fb      	str	r3, [r7, #28]
        break;
 8003868:	e005      	b.n	8003876 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800386a:	2300      	movs	r3, #0
 800386c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003874:	bf00      	nop
    }

    if (pclk != 0U)
 8003876:	69fb      	ldr	r3, [r7, #28]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d019      	beq.n	80038b0 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	085a      	lsrs	r2, r3, #1
 8003882:	69fb      	ldr	r3, [r7, #28]
 8003884:	441a      	add	r2, r3
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	fbb2 f3f3 	udiv	r3, r2, r3
 800388e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003890:	69bb      	ldr	r3, [r7, #24]
 8003892:	2b0f      	cmp	r3, #15
 8003894:	d909      	bls.n	80038aa <UART_SetConfig+0x546>
 8003896:	69bb      	ldr	r3, [r7, #24]
 8003898:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800389c:	d205      	bcs.n	80038aa <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800389e:	69bb      	ldr	r3, [r7, #24]
 80038a0:	b29a      	uxth	r2, r3
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	60da      	str	r2, [r3, #12]
 80038a8:	e002      	b.n	80038b0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80038aa:	2301      	movs	r3, #1
 80038ac:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	2200      	movs	r2, #0
 80038b4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2200      	movs	r2, #0
 80038ba:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80038bc:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	3728      	adds	r7, #40	@ 0x28
 80038c4:	46bd      	mov	sp, r7
 80038c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80038ca:	bf00      	nop
 80038cc:	40008000 	.word	0x40008000
 80038d0:	00f42400 	.word	0x00f42400

080038d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b083      	sub	sp, #12
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038e0:	f003 0308 	and.w	r3, r3, #8
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d00a      	beq.n	80038fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	430a      	orrs	r2, r1
 80038fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003902:	f003 0301 	and.w	r3, r3, #1
 8003906:	2b00      	cmp	r3, #0
 8003908:	d00a      	beq.n	8003920 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	430a      	orrs	r2, r1
 800391e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003924:	f003 0302 	and.w	r3, r3, #2
 8003928:	2b00      	cmp	r3, #0
 800392a:	d00a      	beq.n	8003942 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	430a      	orrs	r2, r1
 8003940:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003946:	f003 0304 	and.w	r3, r3, #4
 800394a:	2b00      	cmp	r3, #0
 800394c:	d00a      	beq.n	8003964 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	430a      	orrs	r2, r1
 8003962:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003968:	f003 0310 	and.w	r3, r3, #16
 800396c:	2b00      	cmp	r3, #0
 800396e:	d00a      	beq.n	8003986 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	430a      	orrs	r2, r1
 8003984:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800398a:	f003 0320 	and.w	r3, r3, #32
 800398e:	2b00      	cmp	r3, #0
 8003990:	d00a      	beq.n	80039a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	430a      	orrs	r2, r1
 80039a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d01a      	beq.n	80039ea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	430a      	orrs	r2, r1
 80039c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039ce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80039d2:	d10a      	bne.n	80039ea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	430a      	orrs	r2, r1
 80039e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d00a      	beq.n	8003a0c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	430a      	orrs	r2, r1
 8003a0a:	605a      	str	r2, [r3, #4]
  }
}
 8003a0c:	bf00      	nop
 8003a0e:	370c      	adds	r7, #12
 8003a10:	46bd      	mov	sp, r7
 8003a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a16:	4770      	bx	lr

08003a18 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b098      	sub	sp, #96	@ 0x60
 8003a1c:	af02      	add	r7, sp, #8
 8003a1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2200      	movs	r2, #0
 8003a24:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003a28:	f7fd fac8 	bl	8000fbc <HAL_GetTick>
 8003a2c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f003 0308 	and.w	r3, r3, #8
 8003a38:	2b08      	cmp	r3, #8
 8003a3a:	d12e      	bne.n	8003a9a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a3c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003a40:	9300      	str	r3, [sp, #0]
 8003a42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a44:	2200      	movs	r2, #0
 8003a46:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	f000 f88c 	bl	8003b68 <UART_WaitOnFlagUntilTimeout>
 8003a50:	4603      	mov	r3, r0
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d021      	beq.n	8003a9a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a5e:	e853 3f00 	ldrex	r3, [r3]
 8003a62:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003a64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a66:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003a6a:	653b      	str	r3, [r7, #80]	@ 0x50
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	461a      	mov	r2, r3
 8003a72:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003a74:	647b      	str	r3, [r7, #68]	@ 0x44
 8003a76:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a78:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003a7a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003a7c:	e841 2300 	strex	r3, r2, [r1]
 8003a80:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003a82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d1e6      	bne.n	8003a56 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2220      	movs	r2, #32
 8003a8c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2200      	movs	r2, #0
 8003a92:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a96:	2303      	movs	r3, #3
 8003a98:	e062      	b.n	8003b60 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f003 0304 	and.w	r3, r3, #4
 8003aa4:	2b04      	cmp	r3, #4
 8003aa6:	d149      	bne.n	8003b3c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003aa8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003aac:	9300      	str	r3, [sp, #0]
 8003aae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003ab6:	6878      	ldr	r0, [r7, #4]
 8003ab8:	f000 f856 	bl	8003b68 <UART_WaitOnFlagUntilTimeout>
 8003abc:	4603      	mov	r3, r0
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d03c      	beq.n	8003b3c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ac8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aca:	e853 3f00 	ldrex	r3, [r3]
 8003ace:	623b      	str	r3, [r7, #32]
   return(result);
 8003ad0:	6a3b      	ldr	r3, [r7, #32]
 8003ad2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003ad6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	461a      	mov	r2, r3
 8003ade:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003ae0:	633b      	str	r3, [r7, #48]	@ 0x30
 8003ae2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ae4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003ae6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003ae8:	e841 2300 	strex	r3, r2, [r1]
 8003aec:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003aee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d1e6      	bne.n	8003ac2 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	3308      	adds	r3, #8
 8003afa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	e853 3f00 	ldrex	r3, [r3]
 8003b02:	60fb      	str	r3, [r7, #12]
   return(result);
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	f023 0301 	bic.w	r3, r3, #1
 8003b0a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	3308      	adds	r3, #8
 8003b12:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003b14:	61fa      	str	r2, [r7, #28]
 8003b16:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b18:	69b9      	ldr	r1, [r7, #24]
 8003b1a:	69fa      	ldr	r2, [r7, #28]
 8003b1c:	e841 2300 	strex	r3, r2, [r1]
 8003b20:	617b      	str	r3, [r7, #20]
   return(result);
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d1e5      	bne.n	8003af4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2220      	movs	r2, #32
 8003b2c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2200      	movs	r2, #0
 8003b34:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b38:	2303      	movs	r3, #3
 8003b3a:	e011      	b.n	8003b60 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2220      	movs	r2, #32
 8003b40:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2220      	movs	r2, #32
 8003b46:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2200      	movs	r2, #0
 8003b54:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003b5e:	2300      	movs	r3, #0
}
 8003b60:	4618      	mov	r0, r3
 8003b62:	3758      	adds	r7, #88	@ 0x58
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bd80      	pop	{r7, pc}

08003b68 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b084      	sub	sp, #16
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	60f8      	str	r0, [r7, #12]
 8003b70:	60b9      	str	r1, [r7, #8]
 8003b72:	603b      	str	r3, [r7, #0]
 8003b74:	4613      	mov	r3, r2
 8003b76:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b78:	e04f      	b.n	8003c1a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b7a:	69bb      	ldr	r3, [r7, #24]
 8003b7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b80:	d04b      	beq.n	8003c1a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b82:	f7fd fa1b 	bl	8000fbc <HAL_GetTick>
 8003b86:	4602      	mov	r2, r0
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	1ad3      	subs	r3, r2, r3
 8003b8c:	69ba      	ldr	r2, [r7, #24]
 8003b8e:	429a      	cmp	r2, r3
 8003b90:	d302      	bcc.n	8003b98 <UART_WaitOnFlagUntilTimeout+0x30>
 8003b92:	69bb      	ldr	r3, [r7, #24]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d101      	bne.n	8003b9c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003b98:	2303      	movs	r3, #3
 8003b9a:	e04e      	b.n	8003c3a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f003 0304 	and.w	r3, r3, #4
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d037      	beq.n	8003c1a <UART_WaitOnFlagUntilTimeout+0xb2>
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	2b80      	cmp	r3, #128	@ 0x80
 8003bae:	d034      	beq.n	8003c1a <UART_WaitOnFlagUntilTimeout+0xb2>
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	2b40      	cmp	r3, #64	@ 0x40
 8003bb4:	d031      	beq.n	8003c1a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	69db      	ldr	r3, [r3, #28]
 8003bbc:	f003 0308 	and.w	r3, r3, #8
 8003bc0:	2b08      	cmp	r3, #8
 8003bc2:	d110      	bne.n	8003be6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	2208      	movs	r2, #8
 8003bca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003bcc:	68f8      	ldr	r0, [r7, #12]
 8003bce:	f000 f838 	bl	8003c42 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	2208      	movs	r2, #8
 8003bd6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	e029      	b.n	8003c3a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	69db      	ldr	r3, [r3, #28]
 8003bec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003bf0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003bf4:	d111      	bne.n	8003c1a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003bfe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003c00:	68f8      	ldr	r0, [r7, #12]
 8003c02:	f000 f81e 	bl	8003c42 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	2220      	movs	r2, #32
 8003c0a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	2200      	movs	r2, #0
 8003c12:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003c16:	2303      	movs	r3, #3
 8003c18:	e00f      	b.n	8003c3a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	69da      	ldr	r2, [r3, #28]
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	4013      	ands	r3, r2
 8003c24:	68ba      	ldr	r2, [r7, #8]
 8003c26:	429a      	cmp	r2, r3
 8003c28:	bf0c      	ite	eq
 8003c2a:	2301      	moveq	r3, #1
 8003c2c:	2300      	movne	r3, #0
 8003c2e:	b2db      	uxtb	r3, r3
 8003c30:	461a      	mov	r2, r3
 8003c32:	79fb      	ldrb	r3, [r7, #7]
 8003c34:	429a      	cmp	r2, r3
 8003c36:	d0a0      	beq.n	8003b7a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c38:	2300      	movs	r3, #0
}
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	3710      	adds	r7, #16
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}

08003c42 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003c42:	b480      	push	{r7}
 8003c44:	b095      	sub	sp, #84	@ 0x54
 8003c46:	af00      	add	r7, sp, #0
 8003c48:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c52:	e853 3f00 	ldrex	r3, [r3]
 8003c56:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003c58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c5a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003c5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	461a      	mov	r2, r3
 8003c66:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003c68:	643b      	str	r3, [r7, #64]	@ 0x40
 8003c6a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c6c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003c6e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003c70:	e841 2300 	strex	r3, r2, [r1]
 8003c74:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003c76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d1e6      	bne.n	8003c4a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	3308      	adds	r3, #8
 8003c82:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c84:	6a3b      	ldr	r3, [r7, #32]
 8003c86:	e853 3f00 	ldrex	r3, [r3]
 8003c8a:	61fb      	str	r3, [r7, #28]
   return(result);
 8003c8c:	69fb      	ldr	r3, [r7, #28]
 8003c8e:	f023 0301 	bic.w	r3, r3, #1
 8003c92:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	3308      	adds	r3, #8
 8003c9a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003c9c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003c9e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ca0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003ca2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003ca4:	e841 2300 	strex	r3, r2, [r1]
 8003ca8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003caa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d1e5      	bne.n	8003c7c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003cb4:	2b01      	cmp	r3, #1
 8003cb6:	d118      	bne.n	8003cea <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	e853 3f00 	ldrex	r3, [r3]
 8003cc4:	60bb      	str	r3, [r7, #8]
   return(result);
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	f023 0310 	bic.w	r3, r3, #16
 8003ccc:	647b      	str	r3, [r7, #68]	@ 0x44
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	461a      	mov	r2, r3
 8003cd4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003cd6:	61bb      	str	r3, [r7, #24]
 8003cd8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cda:	6979      	ldr	r1, [r7, #20]
 8003cdc:	69ba      	ldr	r2, [r7, #24]
 8003cde:	e841 2300 	strex	r3, r2, [r1]
 8003ce2:	613b      	str	r3, [r7, #16]
   return(result);
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d1e6      	bne.n	8003cb8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2220      	movs	r2, #32
 8003cee:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003cfe:	bf00      	nop
 8003d00:	3754      	adds	r7, #84	@ 0x54
 8003d02:	46bd      	mov	sp, r7
 8003d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d08:	4770      	bx	lr
	...

08003d0c <siprintf>:
 8003d0c:	b40e      	push	{r1, r2, r3}
 8003d0e:	b500      	push	{lr}
 8003d10:	b09c      	sub	sp, #112	@ 0x70
 8003d12:	ab1d      	add	r3, sp, #116	@ 0x74
 8003d14:	9002      	str	r0, [sp, #8]
 8003d16:	9006      	str	r0, [sp, #24]
 8003d18:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003d1c:	4809      	ldr	r0, [pc, #36]	@ (8003d44 <siprintf+0x38>)
 8003d1e:	9107      	str	r1, [sp, #28]
 8003d20:	9104      	str	r1, [sp, #16]
 8003d22:	4909      	ldr	r1, [pc, #36]	@ (8003d48 <siprintf+0x3c>)
 8003d24:	f853 2b04 	ldr.w	r2, [r3], #4
 8003d28:	9105      	str	r1, [sp, #20]
 8003d2a:	6800      	ldr	r0, [r0, #0]
 8003d2c:	9301      	str	r3, [sp, #4]
 8003d2e:	a902      	add	r1, sp, #8
 8003d30:	f000 f994 	bl	800405c <_svfiprintf_r>
 8003d34:	9b02      	ldr	r3, [sp, #8]
 8003d36:	2200      	movs	r2, #0
 8003d38:	701a      	strb	r2, [r3, #0]
 8003d3a:	b01c      	add	sp, #112	@ 0x70
 8003d3c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003d40:	b003      	add	sp, #12
 8003d42:	4770      	bx	lr
 8003d44:	2000000c 	.word	0x2000000c
 8003d48:	ffff0208 	.word	0xffff0208

08003d4c <memset>:
 8003d4c:	4402      	add	r2, r0
 8003d4e:	4603      	mov	r3, r0
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d100      	bne.n	8003d56 <memset+0xa>
 8003d54:	4770      	bx	lr
 8003d56:	f803 1b01 	strb.w	r1, [r3], #1
 8003d5a:	e7f9      	b.n	8003d50 <memset+0x4>

08003d5c <__errno>:
 8003d5c:	4b01      	ldr	r3, [pc, #4]	@ (8003d64 <__errno+0x8>)
 8003d5e:	6818      	ldr	r0, [r3, #0]
 8003d60:	4770      	bx	lr
 8003d62:	bf00      	nop
 8003d64:	2000000c 	.word	0x2000000c

08003d68 <__libc_init_array>:
 8003d68:	b570      	push	{r4, r5, r6, lr}
 8003d6a:	4d0d      	ldr	r5, [pc, #52]	@ (8003da0 <__libc_init_array+0x38>)
 8003d6c:	4c0d      	ldr	r4, [pc, #52]	@ (8003da4 <__libc_init_array+0x3c>)
 8003d6e:	1b64      	subs	r4, r4, r5
 8003d70:	10a4      	asrs	r4, r4, #2
 8003d72:	2600      	movs	r6, #0
 8003d74:	42a6      	cmp	r6, r4
 8003d76:	d109      	bne.n	8003d8c <__libc_init_array+0x24>
 8003d78:	4d0b      	ldr	r5, [pc, #44]	@ (8003da8 <__libc_init_array+0x40>)
 8003d7a:	4c0c      	ldr	r4, [pc, #48]	@ (8003dac <__libc_init_array+0x44>)
 8003d7c:	f000 fc66 	bl	800464c <_init>
 8003d80:	1b64      	subs	r4, r4, r5
 8003d82:	10a4      	asrs	r4, r4, #2
 8003d84:	2600      	movs	r6, #0
 8003d86:	42a6      	cmp	r6, r4
 8003d88:	d105      	bne.n	8003d96 <__libc_init_array+0x2e>
 8003d8a:	bd70      	pop	{r4, r5, r6, pc}
 8003d8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d90:	4798      	blx	r3
 8003d92:	3601      	adds	r6, #1
 8003d94:	e7ee      	b.n	8003d74 <__libc_init_array+0xc>
 8003d96:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d9a:	4798      	blx	r3
 8003d9c:	3601      	adds	r6, #1
 8003d9e:	e7f2      	b.n	8003d86 <__libc_init_array+0x1e>
 8003da0:	080047a0 	.word	0x080047a0
 8003da4:	080047a0 	.word	0x080047a0
 8003da8:	080047a0 	.word	0x080047a0
 8003dac:	080047a4 	.word	0x080047a4

08003db0 <__retarget_lock_acquire_recursive>:
 8003db0:	4770      	bx	lr

08003db2 <__retarget_lock_release_recursive>:
 8003db2:	4770      	bx	lr

08003db4 <_free_r>:
 8003db4:	b538      	push	{r3, r4, r5, lr}
 8003db6:	4605      	mov	r5, r0
 8003db8:	2900      	cmp	r1, #0
 8003dba:	d041      	beq.n	8003e40 <_free_r+0x8c>
 8003dbc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003dc0:	1f0c      	subs	r4, r1, #4
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	bfb8      	it	lt
 8003dc6:	18e4      	addlt	r4, r4, r3
 8003dc8:	f000 f8e0 	bl	8003f8c <__malloc_lock>
 8003dcc:	4a1d      	ldr	r2, [pc, #116]	@ (8003e44 <_free_r+0x90>)
 8003dce:	6813      	ldr	r3, [r2, #0]
 8003dd0:	b933      	cbnz	r3, 8003de0 <_free_r+0x2c>
 8003dd2:	6063      	str	r3, [r4, #4]
 8003dd4:	6014      	str	r4, [r2, #0]
 8003dd6:	4628      	mov	r0, r5
 8003dd8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003ddc:	f000 b8dc 	b.w	8003f98 <__malloc_unlock>
 8003de0:	42a3      	cmp	r3, r4
 8003de2:	d908      	bls.n	8003df6 <_free_r+0x42>
 8003de4:	6820      	ldr	r0, [r4, #0]
 8003de6:	1821      	adds	r1, r4, r0
 8003de8:	428b      	cmp	r3, r1
 8003dea:	bf01      	itttt	eq
 8003dec:	6819      	ldreq	r1, [r3, #0]
 8003dee:	685b      	ldreq	r3, [r3, #4]
 8003df0:	1809      	addeq	r1, r1, r0
 8003df2:	6021      	streq	r1, [r4, #0]
 8003df4:	e7ed      	b.n	8003dd2 <_free_r+0x1e>
 8003df6:	461a      	mov	r2, r3
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	b10b      	cbz	r3, 8003e00 <_free_r+0x4c>
 8003dfc:	42a3      	cmp	r3, r4
 8003dfe:	d9fa      	bls.n	8003df6 <_free_r+0x42>
 8003e00:	6811      	ldr	r1, [r2, #0]
 8003e02:	1850      	adds	r0, r2, r1
 8003e04:	42a0      	cmp	r0, r4
 8003e06:	d10b      	bne.n	8003e20 <_free_r+0x6c>
 8003e08:	6820      	ldr	r0, [r4, #0]
 8003e0a:	4401      	add	r1, r0
 8003e0c:	1850      	adds	r0, r2, r1
 8003e0e:	4283      	cmp	r3, r0
 8003e10:	6011      	str	r1, [r2, #0]
 8003e12:	d1e0      	bne.n	8003dd6 <_free_r+0x22>
 8003e14:	6818      	ldr	r0, [r3, #0]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	6053      	str	r3, [r2, #4]
 8003e1a:	4408      	add	r0, r1
 8003e1c:	6010      	str	r0, [r2, #0]
 8003e1e:	e7da      	b.n	8003dd6 <_free_r+0x22>
 8003e20:	d902      	bls.n	8003e28 <_free_r+0x74>
 8003e22:	230c      	movs	r3, #12
 8003e24:	602b      	str	r3, [r5, #0]
 8003e26:	e7d6      	b.n	8003dd6 <_free_r+0x22>
 8003e28:	6820      	ldr	r0, [r4, #0]
 8003e2a:	1821      	adds	r1, r4, r0
 8003e2c:	428b      	cmp	r3, r1
 8003e2e:	bf04      	itt	eq
 8003e30:	6819      	ldreq	r1, [r3, #0]
 8003e32:	685b      	ldreq	r3, [r3, #4]
 8003e34:	6063      	str	r3, [r4, #4]
 8003e36:	bf04      	itt	eq
 8003e38:	1809      	addeq	r1, r1, r0
 8003e3a:	6021      	streq	r1, [r4, #0]
 8003e3c:	6054      	str	r4, [r2, #4]
 8003e3e:	e7ca      	b.n	8003dd6 <_free_r+0x22>
 8003e40:	bd38      	pop	{r3, r4, r5, pc}
 8003e42:	bf00      	nop
 8003e44:	2000024c 	.word	0x2000024c

08003e48 <sbrk_aligned>:
 8003e48:	b570      	push	{r4, r5, r6, lr}
 8003e4a:	4e0f      	ldr	r6, [pc, #60]	@ (8003e88 <sbrk_aligned+0x40>)
 8003e4c:	460c      	mov	r4, r1
 8003e4e:	6831      	ldr	r1, [r6, #0]
 8003e50:	4605      	mov	r5, r0
 8003e52:	b911      	cbnz	r1, 8003e5a <sbrk_aligned+0x12>
 8003e54:	f000 fba6 	bl	80045a4 <_sbrk_r>
 8003e58:	6030      	str	r0, [r6, #0]
 8003e5a:	4621      	mov	r1, r4
 8003e5c:	4628      	mov	r0, r5
 8003e5e:	f000 fba1 	bl	80045a4 <_sbrk_r>
 8003e62:	1c43      	adds	r3, r0, #1
 8003e64:	d103      	bne.n	8003e6e <sbrk_aligned+0x26>
 8003e66:	f04f 34ff 	mov.w	r4, #4294967295
 8003e6a:	4620      	mov	r0, r4
 8003e6c:	bd70      	pop	{r4, r5, r6, pc}
 8003e6e:	1cc4      	adds	r4, r0, #3
 8003e70:	f024 0403 	bic.w	r4, r4, #3
 8003e74:	42a0      	cmp	r0, r4
 8003e76:	d0f8      	beq.n	8003e6a <sbrk_aligned+0x22>
 8003e78:	1a21      	subs	r1, r4, r0
 8003e7a:	4628      	mov	r0, r5
 8003e7c:	f000 fb92 	bl	80045a4 <_sbrk_r>
 8003e80:	3001      	adds	r0, #1
 8003e82:	d1f2      	bne.n	8003e6a <sbrk_aligned+0x22>
 8003e84:	e7ef      	b.n	8003e66 <sbrk_aligned+0x1e>
 8003e86:	bf00      	nop
 8003e88:	20000248 	.word	0x20000248

08003e8c <_malloc_r>:
 8003e8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003e90:	1ccd      	adds	r5, r1, #3
 8003e92:	f025 0503 	bic.w	r5, r5, #3
 8003e96:	3508      	adds	r5, #8
 8003e98:	2d0c      	cmp	r5, #12
 8003e9a:	bf38      	it	cc
 8003e9c:	250c      	movcc	r5, #12
 8003e9e:	2d00      	cmp	r5, #0
 8003ea0:	4606      	mov	r6, r0
 8003ea2:	db01      	blt.n	8003ea8 <_malloc_r+0x1c>
 8003ea4:	42a9      	cmp	r1, r5
 8003ea6:	d904      	bls.n	8003eb2 <_malloc_r+0x26>
 8003ea8:	230c      	movs	r3, #12
 8003eaa:	6033      	str	r3, [r6, #0]
 8003eac:	2000      	movs	r0, #0
 8003eae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003eb2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003f88 <_malloc_r+0xfc>
 8003eb6:	f000 f869 	bl	8003f8c <__malloc_lock>
 8003eba:	f8d8 3000 	ldr.w	r3, [r8]
 8003ebe:	461c      	mov	r4, r3
 8003ec0:	bb44      	cbnz	r4, 8003f14 <_malloc_r+0x88>
 8003ec2:	4629      	mov	r1, r5
 8003ec4:	4630      	mov	r0, r6
 8003ec6:	f7ff ffbf 	bl	8003e48 <sbrk_aligned>
 8003eca:	1c43      	adds	r3, r0, #1
 8003ecc:	4604      	mov	r4, r0
 8003ece:	d158      	bne.n	8003f82 <_malloc_r+0xf6>
 8003ed0:	f8d8 4000 	ldr.w	r4, [r8]
 8003ed4:	4627      	mov	r7, r4
 8003ed6:	2f00      	cmp	r7, #0
 8003ed8:	d143      	bne.n	8003f62 <_malloc_r+0xd6>
 8003eda:	2c00      	cmp	r4, #0
 8003edc:	d04b      	beq.n	8003f76 <_malloc_r+0xea>
 8003ede:	6823      	ldr	r3, [r4, #0]
 8003ee0:	4639      	mov	r1, r7
 8003ee2:	4630      	mov	r0, r6
 8003ee4:	eb04 0903 	add.w	r9, r4, r3
 8003ee8:	f000 fb5c 	bl	80045a4 <_sbrk_r>
 8003eec:	4581      	cmp	r9, r0
 8003eee:	d142      	bne.n	8003f76 <_malloc_r+0xea>
 8003ef0:	6821      	ldr	r1, [r4, #0]
 8003ef2:	1a6d      	subs	r5, r5, r1
 8003ef4:	4629      	mov	r1, r5
 8003ef6:	4630      	mov	r0, r6
 8003ef8:	f7ff ffa6 	bl	8003e48 <sbrk_aligned>
 8003efc:	3001      	adds	r0, #1
 8003efe:	d03a      	beq.n	8003f76 <_malloc_r+0xea>
 8003f00:	6823      	ldr	r3, [r4, #0]
 8003f02:	442b      	add	r3, r5
 8003f04:	6023      	str	r3, [r4, #0]
 8003f06:	f8d8 3000 	ldr.w	r3, [r8]
 8003f0a:	685a      	ldr	r2, [r3, #4]
 8003f0c:	bb62      	cbnz	r2, 8003f68 <_malloc_r+0xdc>
 8003f0e:	f8c8 7000 	str.w	r7, [r8]
 8003f12:	e00f      	b.n	8003f34 <_malloc_r+0xa8>
 8003f14:	6822      	ldr	r2, [r4, #0]
 8003f16:	1b52      	subs	r2, r2, r5
 8003f18:	d420      	bmi.n	8003f5c <_malloc_r+0xd0>
 8003f1a:	2a0b      	cmp	r2, #11
 8003f1c:	d917      	bls.n	8003f4e <_malloc_r+0xc2>
 8003f1e:	1961      	adds	r1, r4, r5
 8003f20:	42a3      	cmp	r3, r4
 8003f22:	6025      	str	r5, [r4, #0]
 8003f24:	bf18      	it	ne
 8003f26:	6059      	strne	r1, [r3, #4]
 8003f28:	6863      	ldr	r3, [r4, #4]
 8003f2a:	bf08      	it	eq
 8003f2c:	f8c8 1000 	streq.w	r1, [r8]
 8003f30:	5162      	str	r2, [r4, r5]
 8003f32:	604b      	str	r3, [r1, #4]
 8003f34:	4630      	mov	r0, r6
 8003f36:	f000 f82f 	bl	8003f98 <__malloc_unlock>
 8003f3a:	f104 000b 	add.w	r0, r4, #11
 8003f3e:	1d23      	adds	r3, r4, #4
 8003f40:	f020 0007 	bic.w	r0, r0, #7
 8003f44:	1ac2      	subs	r2, r0, r3
 8003f46:	bf1c      	itt	ne
 8003f48:	1a1b      	subne	r3, r3, r0
 8003f4a:	50a3      	strne	r3, [r4, r2]
 8003f4c:	e7af      	b.n	8003eae <_malloc_r+0x22>
 8003f4e:	6862      	ldr	r2, [r4, #4]
 8003f50:	42a3      	cmp	r3, r4
 8003f52:	bf0c      	ite	eq
 8003f54:	f8c8 2000 	streq.w	r2, [r8]
 8003f58:	605a      	strne	r2, [r3, #4]
 8003f5a:	e7eb      	b.n	8003f34 <_malloc_r+0xa8>
 8003f5c:	4623      	mov	r3, r4
 8003f5e:	6864      	ldr	r4, [r4, #4]
 8003f60:	e7ae      	b.n	8003ec0 <_malloc_r+0x34>
 8003f62:	463c      	mov	r4, r7
 8003f64:	687f      	ldr	r7, [r7, #4]
 8003f66:	e7b6      	b.n	8003ed6 <_malloc_r+0x4a>
 8003f68:	461a      	mov	r2, r3
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	42a3      	cmp	r3, r4
 8003f6e:	d1fb      	bne.n	8003f68 <_malloc_r+0xdc>
 8003f70:	2300      	movs	r3, #0
 8003f72:	6053      	str	r3, [r2, #4]
 8003f74:	e7de      	b.n	8003f34 <_malloc_r+0xa8>
 8003f76:	230c      	movs	r3, #12
 8003f78:	6033      	str	r3, [r6, #0]
 8003f7a:	4630      	mov	r0, r6
 8003f7c:	f000 f80c 	bl	8003f98 <__malloc_unlock>
 8003f80:	e794      	b.n	8003eac <_malloc_r+0x20>
 8003f82:	6005      	str	r5, [r0, #0]
 8003f84:	e7d6      	b.n	8003f34 <_malloc_r+0xa8>
 8003f86:	bf00      	nop
 8003f88:	2000024c 	.word	0x2000024c

08003f8c <__malloc_lock>:
 8003f8c:	4801      	ldr	r0, [pc, #4]	@ (8003f94 <__malloc_lock+0x8>)
 8003f8e:	f7ff bf0f 	b.w	8003db0 <__retarget_lock_acquire_recursive>
 8003f92:	bf00      	nop
 8003f94:	20000244 	.word	0x20000244

08003f98 <__malloc_unlock>:
 8003f98:	4801      	ldr	r0, [pc, #4]	@ (8003fa0 <__malloc_unlock+0x8>)
 8003f9a:	f7ff bf0a 	b.w	8003db2 <__retarget_lock_release_recursive>
 8003f9e:	bf00      	nop
 8003fa0:	20000244 	.word	0x20000244

08003fa4 <__ssputs_r>:
 8003fa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003fa8:	688e      	ldr	r6, [r1, #8]
 8003faa:	461f      	mov	r7, r3
 8003fac:	42be      	cmp	r6, r7
 8003fae:	680b      	ldr	r3, [r1, #0]
 8003fb0:	4682      	mov	sl, r0
 8003fb2:	460c      	mov	r4, r1
 8003fb4:	4690      	mov	r8, r2
 8003fb6:	d82d      	bhi.n	8004014 <__ssputs_r+0x70>
 8003fb8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003fbc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003fc0:	d026      	beq.n	8004010 <__ssputs_r+0x6c>
 8003fc2:	6965      	ldr	r5, [r4, #20]
 8003fc4:	6909      	ldr	r1, [r1, #16]
 8003fc6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003fca:	eba3 0901 	sub.w	r9, r3, r1
 8003fce:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003fd2:	1c7b      	adds	r3, r7, #1
 8003fd4:	444b      	add	r3, r9
 8003fd6:	106d      	asrs	r5, r5, #1
 8003fd8:	429d      	cmp	r5, r3
 8003fda:	bf38      	it	cc
 8003fdc:	461d      	movcc	r5, r3
 8003fde:	0553      	lsls	r3, r2, #21
 8003fe0:	d527      	bpl.n	8004032 <__ssputs_r+0x8e>
 8003fe2:	4629      	mov	r1, r5
 8003fe4:	f7ff ff52 	bl	8003e8c <_malloc_r>
 8003fe8:	4606      	mov	r6, r0
 8003fea:	b360      	cbz	r0, 8004046 <__ssputs_r+0xa2>
 8003fec:	6921      	ldr	r1, [r4, #16]
 8003fee:	464a      	mov	r2, r9
 8003ff0:	f000 fae8 	bl	80045c4 <memcpy>
 8003ff4:	89a3      	ldrh	r3, [r4, #12]
 8003ff6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003ffa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003ffe:	81a3      	strh	r3, [r4, #12]
 8004000:	6126      	str	r6, [r4, #16]
 8004002:	6165      	str	r5, [r4, #20]
 8004004:	444e      	add	r6, r9
 8004006:	eba5 0509 	sub.w	r5, r5, r9
 800400a:	6026      	str	r6, [r4, #0]
 800400c:	60a5      	str	r5, [r4, #8]
 800400e:	463e      	mov	r6, r7
 8004010:	42be      	cmp	r6, r7
 8004012:	d900      	bls.n	8004016 <__ssputs_r+0x72>
 8004014:	463e      	mov	r6, r7
 8004016:	6820      	ldr	r0, [r4, #0]
 8004018:	4632      	mov	r2, r6
 800401a:	4641      	mov	r1, r8
 800401c:	f000 faa8 	bl	8004570 <memmove>
 8004020:	68a3      	ldr	r3, [r4, #8]
 8004022:	1b9b      	subs	r3, r3, r6
 8004024:	60a3      	str	r3, [r4, #8]
 8004026:	6823      	ldr	r3, [r4, #0]
 8004028:	4433      	add	r3, r6
 800402a:	6023      	str	r3, [r4, #0]
 800402c:	2000      	movs	r0, #0
 800402e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004032:	462a      	mov	r2, r5
 8004034:	f000 fad4 	bl	80045e0 <_realloc_r>
 8004038:	4606      	mov	r6, r0
 800403a:	2800      	cmp	r0, #0
 800403c:	d1e0      	bne.n	8004000 <__ssputs_r+0x5c>
 800403e:	6921      	ldr	r1, [r4, #16]
 8004040:	4650      	mov	r0, sl
 8004042:	f7ff feb7 	bl	8003db4 <_free_r>
 8004046:	230c      	movs	r3, #12
 8004048:	f8ca 3000 	str.w	r3, [sl]
 800404c:	89a3      	ldrh	r3, [r4, #12]
 800404e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004052:	81a3      	strh	r3, [r4, #12]
 8004054:	f04f 30ff 	mov.w	r0, #4294967295
 8004058:	e7e9      	b.n	800402e <__ssputs_r+0x8a>
	...

0800405c <_svfiprintf_r>:
 800405c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004060:	4698      	mov	r8, r3
 8004062:	898b      	ldrh	r3, [r1, #12]
 8004064:	061b      	lsls	r3, r3, #24
 8004066:	b09d      	sub	sp, #116	@ 0x74
 8004068:	4607      	mov	r7, r0
 800406a:	460d      	mov	r5, r1
 800406c:	4614      	mov	r4, r2
 800406e:	d510      	bpl.n	8004092 <_svfiprintf_r+0x36>
 8004070:	690b      	ldr	r3, [r1, #16]
 8004072:	b973      	cbnz	r3, 8004092 <_svfiprintf_r+0x36>
 8004074:	2140      	movs	r1, #64	@ 0x40
 8004076:	f7ff ff09 	bl	8003e8c <_malloc_r>
 800407a:	6028      	str	r0, [r5, #0]
 800407c:	6128      	str	r0, [r5, #16]
 800407e:	b930      	cbnz	r0, 800408e <_svfiprintf_r+0x32>
 8004080:	230c      	movs	r3, #12
 8004082:	603b      	str	r3, [r7, #0]
 8004084:	f04f 30ff 	mov.w	r0, #4294967295
 8004088:	b01d      	add	sp, #116	@ 0x74
 800408a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800408e:	2340      	movs	r3, #64	@ 0x40
 8004090:	616b      	str	r3, [r5, #20]
 8004092:	2300      	movs	r3, #0
 8004094:	9309      	str	r3, [sp, #36]	@ 0x24
 8004096:	2320      	movs	r3, #32
 8004098:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800409c:	f8cd 800c 	str.w	r8, [sp, #12]
 80040a0:	2330      	movs	r3, #48	@ 0x30
 80040a2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004240 <_svfiprintf_r+0x1e4>
 80040a6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80040aa:	f04f 0901 	mov.w	r9, #1
 80040ae:	4623      	mov	r3, r4
 80040b0:	469a      	mov	sl, r3
 80040b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80040b6:	b10a      	cbz	r2, 80040bc <_svfiprintf_r+0x60>
 80040b8:	2a25      	cmp	r2, #37	@ 0x25
 80040ba:	d1f9      	bne.n	80040b0 <_svfiprintf_r+0x54>
 80040bc:	ebba 0b04 	subs.w	fp, sl, r4
 80040c0:	d00b      	beq.n	80040da <_svfiprintf_r+0x7e>
 80040c2:	465b      	mov	r3, fp
 80040c4:	4622      	mov	r2, r4
 80040c6:	4629      	mov	r1, r5
 80040c8:	4638      	mov	r0, r7
 80040ca:	f7ff ff6b 	bl	8003fa4 <__ssputs_r>
 80040ce:	3001      	adds	r0, #1
 80040d0:	f000 80a7 	beq.w	8004222 <_svfiprintf_r+0x1c6>
 80040d4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80040d6:	445a      	add	r2, fp
 80040d8:	9209      	str	r2, [sp, #36]	@ 0x24
 80040da:	f89a 3000 	ldrb.w	r3, [sl]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	f000 809f 	beq.w	8004222 <_svfiprintf_r+0x1c6>
 80040e4:	2300      	movs	r3, #0
 80040e6:	f04f 32ff 	mov.w	r2, #4294967295
 80040ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80040ee:	f10a 0a01 	add.w	sl, sl, #1
 80040f2:	9304      	str	r3, [sp, #16]
 80040f4:	9307      	str	r3, [sp, #28]
 80040f6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80040fa:	931a      	str	r3, [sp, #104]	@ 0x68
 80040fc:	4654      	mov	r4, sl
 80040fe:	2205      	movs	r2, #5
 8004100:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004104:	484e      	ldr	r0, [pc, #312]	@ (8004240 <_svfiprintf_r+0x1e4>)
 8004106:	f7fc f86b 	bl	80001e0 <memchr>
 800410a:	9a04      	ldr	r2, [sp, #16]
 800410c:	b9d8      	cbnz	r0, 8004146 <_svfiprintf_r+0xea>
 800410e:	06d0      	lsls	r0, r2, #27
 8004110:	bf44      	itt	mi
 8004112:	2320      	movmi	r3, #32
 8004114:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004118:	0711      	lsls	r1, r2, #28
 800411a:	bf44      	itt	mi
 800411c:	232b      	movmi	r3, #43	@ 0x2b
 800411e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004122:	f89a 3000 	ldrb.w	r3, [sl]
 8004126:	2b2a      	cmp	r3, #42	@ 0x2a
 8004128:	d015      	beq.n	8004156 <_svfiprintf_r+0xfa>
 800412a:	9a07      	ldr	r2, [sp, #28]
 800412c:	4654      	mov	r4, sl
 800412e:	2000      	movs	r0, #0
 8004130:	f04f 0c0a 	mov.w	ip, #10
 8004134:	4621      	mov	r1, r4
 8004136:	f811 3b01 	ldrb.w	r3, [r1], #1
 800413a:	3b30      	subs	r3, #48	@ 0x30
 800413c:	2b09      	cmp	r3, #9
 800413e:	d94b      	bls.n	80041d8 <_svfiprintf_r+0x17c>
 8004140:	b1b0      	cbz	r0, 8004170 <_svfiprintf_r+0x114>
 8004142:	9207      	str	r2, [sp, #28]
 8004144:	e014      	b.n	8004170 <_svfiprintf_r+0x114>
 8004146:	eba0 0308 	sub.w	r3, r0, r8
 800414a:	fa09 f303 	lsl.w	r3, r9, r3
 800414e:	4313      	orrs	r3, r2
 8004150:	9304      	str	r3, [sp, #16]
 8004152:	46a2      	mov	sl, r4
 8004154:	e7d2      	b.n	80040fc <_svfiprintf_r+0xa0>
 8004156:	9b03      	ldr	r3, [sp, #12]
 8004158:	1d19      	adds	r1, r3, #4
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	9103      	str	r1, [sp, #12]
 800415e:	2b00      	cmp	r3, #0
 8004160:	bfbb      	ittet	lt
 8004162:	425b      	neglt	r3, r3
 8004164:	f042 0202 	orrlt.w	r2, r2, #2
 8004168:	9307      	strge	r3, [sp, #28]
 800416a:	9307      	strlt	r3, [sp, #28]
 800416c:	bfb8      	it	lt
 800416e:	9204      	strlt	r2, [sp, #16]
 8004170:	7823      	ldrb	r3, [r4, #0]
 8004172:	2b2e      	cmp	r3, #46	@ 0x2e
 8004174:	d10a      	bne.n	800418c <_svfiprintf_r+0x130>
 8004176:	7863      	ldrb	r3, [r4, #1]
 8004178:	2b2a      	cmp	r3, #42	@ 0x2a
 800417a:	d132      	bne.n	80041e2 <_svfiprintf_r+0x186>
 800417c:	9b03      	ldr	r3, [sp, #12]
 800417e:	1d1a      	adds	r2, r3, #4
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	9203      	str	r2, [sp, #12]
 8004184:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004188:	3402      	adds	r4, #2
 800418a:	9305      	str	r3, [sp, #20]
 800418c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004250 <_svfiprintf_r+0x1f4>
 8004190:	7821      	ldrb	r1, [r4, #0]
 8004192:	2203      	movs	r2, #3
 8004194:	4650      	mov	r0, sl
 8004196:	f7fc f823 	bl	80001e0 <memchr>
 800419a:	b138      	cbz	r0, 80041ac <_svfiprintf_r+0x150>
 800419c:	9b04      	ldr	r3, [sp, #16]
 800419e:	eba0 000a 	sub.w	r0, r0, sl
 80041a2:	2240      	movs	r2, #64	@ 0x40
 80041a4:	4082      	lsls	r2, r0
 80041a6:	4313      	orrs	r3, r2
 80041a8:	3401      	adds	r4, #1
 80041aa:	9304      	str	r3, [sp, #16]
 80041ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80041b0:	4824      	ldr	r0, [pc, #144]	@ (8004244 <_svfiprintf_r+0x1e8>)
 80041b2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80041b6:	2206      	movs	r2, #6
 80041b8:	f7fc f812 	bl	80001e0 <memchr>
 80041bc:	2800      	cmp	r0, #0
 80041be:	d036      	beq.n	800422e <_svfiprintf_r+0x1d2>
 80041c0:	4b21      	ldr	r3, [pc, #132]	@ (8004248 <_svfiprintf_r+0x1ec>)
 80041c2:	bb1b      	cbnz	r3, 800420c <_svfiprintf_r+0x1b0>
 80041c4:	9b03      	ldr	r3, [sp, #12]
 80041c6:	3307      	adds	r3, #7
 80041c8:	f023 0307 	bic.w	r3, r3, #7
 80041cc:	3308      	adds	r3, #8
 80041ce:	9303      	str	r3, [sp, #12]
 80041d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80041d2:	4433      	add	r3, r6
 80041d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80041d6:	e76a      	b.n	80040ae <_svfiprintf_r+0x52>
 80041d8:	fb0c 3202 	mla	r2, ip, r2, r3
 80041dc:	460c      	mov	r4, r1
 80041de:	2001      	movs	r0, #1
 80041e0:	e7a8      	b.n	8004134 <_svfiprintf_r+0xd8>
 80041e2:	2300      	movs	r3, #0
 80041e4:	3401      	adds	r4, #1
 80041e6:	9305      	str	r3, [sp, #20]
 80041e8:	4619      	mov	r1, r3
 80041ea:	f04f 0c0a 	mov.w	ip, #10
 80041ee:	4620      	mov	r0, r4
 80041f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80041f4:	3a30      	subs	r2, #48	@ 0x30
 80041f6:	2a09      	cmp	r2, #9
 80041f8:	d903      	bls.n	8004202 <_svfiprintf_r+0x1a6>
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d0c6      	beq.n	800418c <_svfiprintf_r+0x130>
 80041fe:	9105      	str	r1, [sp, #20]
 8004200:	e7c4      	b.n	800418c <_svfiprintf_r+0x130>
 8004202:	fb0c 2101 	mla	r1, ip, r1, r2
 8004206:	4604      	mov	r4, r0
 8004208:	2301      	movs	r3, #1
 800420a:	e7f0      	b.n	80041ee <_svfiprintf_r+0x192>
 800420c:	ab03      	add	r3, sp, #12
 800420e:	9300      	str	r3, [sp, #0]
 8004210:	462a      	mov	r2, r5
 8004212:	4b0e      	ldr	r3, [pc, #56]	@ (800424c <_svfiprintf_r+0x1f0>)
 8004214:	a904      	add	r1, sp, #16
 8004216:	4638      	mov	r0, r7
 8004218:	f3af 8000 	nop.w
 800421c:	1c42      	adds	r2, r0, #1
 800421e:	4606      	mov	r6, r0
 8004220:	d1d6      	bne.n	80041d0 <_svfiprintf_r+0x174>
 8004222:	89ab      	ldrh	r3, [r5, #12]
 8004224:	065b      	lsls	r3, r3, #25
 8004226:	f53f af2d 	bmi.w	8004084 <_svfiprintf_r+0x28>
 800422a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800422c:	e72c      	b.n	8004088 <_svfiprintf_r+0x2c>
 800422e:	ab03      	add	r3, sp, #12
 8004230:	9300      	str	r3, [sp, #0]
 8004232:	462a      	mov	r2, r5
 8004234:	4b05      	ldr	r3, [pc, #20]	@ (800424c <_svfiprintf_r+0x1f0>)
 8004236:	a904      	add	r1, sp, #16
 8004238:	4638      	mov	r0, r7
 800423a:	f000 f879 	bl	8004330 <_printf_i>
 800423e:	e7ed      	b.n	800421c <_svfiprintf_r+0x1c0>
 8004240:	08004764 	.word	0x08004764
 8004244:	0800476e 	.word	0x0800476e
 8004248:	00000000 	.word	0x00000000
 800424c:	08003fa5 	.word	0x08003fa5
 8004250:	0800476a 	.word	0x0800476a

08004254 <_printf_common>:
 8004254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004258:	4616      	mov	r6, r2
 800425a:	4698      	mov	r8, r3
 800425c:	688a      	ldr	r2, [r1, #8]
 800425e:	690b      	ldr	r3, [r1, #16]
 8004260:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004264:	4293      	cmp	r3, r2
 8004266:	bfb8      	it	lt
 8004268:	4613      	movlt	r3, r2
 800426a:	6033      	str	r3, [r6, #0]
 800426c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004270:	4607      	mov	r7, r0
 8004272:	460c      	mov	r4, r1
 8004274:	b10a      	cbz	r2, 800427a <_printf_common+0x26>
 8004276:	3301      	adds	r3, #1
 8004278:	6033      	str	r3, [r6, #0]
 800427a:	6823      	ldr	r3, [r4, #0]
 800427c:	0699      	lsls	r1, r3, #26
 800427e:	bf42      	ittt	mi
 8004280:	6833      	ldrmi	r3, [r6, #0]
 8004282:	3302      	addmi	r3, #2
 8004284:	6033      	strmi	r3, [r6, #0]
 8004286:	6825      	ldr	r5, [r4, #0]
 8004288:	f015 0506 	ands.w	r5, r5, #6
 800428c:	d106      	bne.n	800429c <_printf_common+0x48>
 800428e:	f104 0a19 	add.w	sl, r4, #25
 8004292:	68e3      	ldr	r3, [r4, #12]
 8004294:	6832      	ldr	r2, [r6, #0]
 8004296:	1a9b      	subs	r3, r3, r2
 8004298:	42ab      	cmp	r3, r5
 800429a:	dc26      	bgt.n	80042ea <_printf_common+0x96>
 800429c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80042a0:	6822      	ldr	r2, [r4, #0]
 80042a2:	3b00      	subs	r3, #0
 80042a4:	bf18      	it	ne
 80042a6:	2301      	movne	r3, #1
 80042a8:	0692      	lsls	r2, r2, #26
 80042aa:	d42b      	bmi.n	8004304 <_printf_common+0xb0>
 80042ac:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80042b0:	4641      	mov	r1, r8
 80042b2:	4638      	mov	r0, r7
 80042b4:	47c8      	blx	r9
 80042b6:	3001      	adds	r0, #1
 80042b8:	d01e      	beq.n	80042f8 <_printf_common+0xa4>
 80042ba:	6823      	ldr	r3, [r4, #0]
 80042bc:	6922      	ldr	r2, [r4, #16]
 80042be:	f003 0306 	and.w	r3, r3, #6
 80042c2:	2b04      	cmp	r3, #4
 80042c4:	bf02      	ittt	eq
 80042c6:	68e5      	ldreq	r5, [r4, #12]
 80042c8:	6833      	ldreq	r3, [r6, #0]
 80042ca:	1aed      	subeq	r5, r5, r3
 80042cc:	68a3      	ldr	r3, [r4, #8]
 80042ce:	bf0c      	ite	eq
 80042d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80042d4:	2500      	movne	r5, #0
 80042d6:	4293      	cmp	r3, r2
 80042d8:	bfc4      	itt	gt
 80042da:	1a9b      	subgt	r3, r3, r2
 80042dc:	18ed      	addgt	r5, r5, r3
 80042de:	2600      	movs	r6, #0
 80042e0:	341a      	adds	r4, #26
 80042e2:	42b5      	cmp	r5, r6
 80042e4:	d11a      	bne.n	800431c <_printf_common+0xc8>
 80042e6:	2000      	movs	r0, #0
 80042e8:	e008      	b.n	80042fc <_printf_common+0xa8>
 80042ea:	2301      	movs	r3, #1
 80042ec:	4652      	mov	r2, sl
 80042ee:	4641      	mov	r1, r8
 80042f0:	4638      	mov	r0, r7
 80042f2:	47c8      	blx	r9
 80042f4:	3001      	adds	r0, #1
 80042f6:	d103      	bne.n	8004300 <_printf_common+0xac>
 80042f8:	f04f 30ff 	mov.w	r0, #4294967295
 80042fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004300:	3501      	adds	r5, #1
 8004302:	e7c6      	b.n	8004292 <_printf_common+0x3e>
 8004304:	18e1      	adds	r1, r4, r3
 8004306:	1c5a      	adds	r2, r3, #1
 8004308:	2030      	movs	r0, #48	@ 0x30
 800430a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800430e:	4422      	add	r2, r4
 8004310:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004314:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004318:	3302      	adds	r3, #2
 800431a:	e7c7      	b.n	80042ac <_printf_common+0x58>
 800431c:	2301      	movs	r3, #1
 800431e:	4622      	mov	r2, r4
 8004320:	4641      	mov	r1, r8
 8004322:	4638      	mov	r0, r7
 8004324:	47c8      	blx	r9
 8004326:	3001      	adds	r0, #1
 8004328:	d0e6      	beq.n	80042f8 <_printf_common+0xa4>
 800432a:	3601      	adds	r6, #1
 800432c:	e7d9      	b.n	80042e2 <_printf_common+0x8e>
	...

08004330 <_printf_i>:
 8004330:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004334:	7e0f      	ldrb	r7, [r1, #24]
 8004336:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004338:	2f78      	cmp	r7, #120	@ 0x78
 800433a:	4691      	mov	r9, r2
 800433c:	4680      	mov	r8, r0
 800433e:	460c      	mov	r4, r1
 8004340:	469a      	mov	sl, r3
 8004342:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004346:	d807      	bhi.n	8004358 <_printf_i+0x28>
 8004348:	2f62      	cmp	r7, #98	@ 0x62
 800434a:	d80a      	bhi.n	8004362 <_printf_i+0x32>
 800434c:	2f00      	cmp	r7, #0
 800434e:	f000 80d2 	beq.w	80044f6 <_printf_i+0x1c6>
 8004352:	2f58      	cmp	r7, #88	@ 0x58
 8004354:	f000 80b9 	beq.w	80044ca <_printf_i+0x19a>
 8004358:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800435c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004360:	e03a      	b.n	80043d8 <_printf_i+0xa8>
 8004362:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004366:	2b15      	cmp	r3, #21
 8004368:	d8f6      	bhi.n	8004358 <_printf_i+0x28>
 800436a:	a101      	add	r1, pc, #4	@ (adr r1, 8004370 <_printf_i+0x40>)
 800436c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004370:	080043c9 	.word	0x080043c9
 8004374:	080043dd 	.word	0x080043dd
 8004378:	08004359 	.word	0x08004359
 800437c:	08004359 	.word	0x08004359
 8004380:	08004359 	.word	0x08004359
 8004384:	08004359 	.word	0x08004359
 8004388:	080043dd 	.word	0x080043dd
 800438c:	08004359 	.word	0x08004359
 8004390:	08004359 	.word	0x08004359
 8004394:	08004359 	.word	0x08004359
 8004398:	08004359 	.word	0x08004359
 800439c:	080044dd 	.word	0x080044dd
 80043a0:	08004407 	.word	0x08004407
 80043a4:	08004497 	.word	0x08004497
 80043a8:	08004359 	.word	0x08004359
 80043ac:	08004359 	.word	0x08004359
 80043b0:	080044ff 	.word	0x080044ff
 80043b4:	08004359 	.word	0x08004359
 80043b8:	08004407 	.word	0x08004407
 80043bc:	08004359 	.word	0x08004359
 80043c0:	08004359 	.word	0x08004359
 80043c4:	0800449f 	.word	0x0800449f
 80043c8:	6833      	ldr	r3, [r6, #0]
 80043ca:	1d1a      	adds	r2, r3, #4
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	6032      	str	r2, [r6, #0]
 80043d0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80043d4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80043d8:	2301      	movs	r3, #1
 80043da:	e09d      	b.n	8004518 <_printf_i+0x1e8>
 80043dc:	6833      	ldr	r3, [r6, #0]
 80043de:	6820      	ldr	r0, [r4, #0]
 80043e0:	1d19      	adds	r1, r3, #4
 80043e2:	6031      	str	r1, [r6, #0]
 80043e4:	0606      	lsls	r6, r0, #24
 80043e6:	d501      	bpl.n	80043ec <_printf_i+0xbc>
 80043e8:	681d      	ldr	r5, [r3, #0]
 80043ea:	e003      	b.n	80043f4 <_printf_i+0xc4>
 80043ec:	0645      	lsls	r5, r0, #25
 80043ee:	d5fb      	bpl.n	80043e8 <_printf_i+0xb8>
 80043f0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80043f4:	2d00      	cmp	r5, #0
 80043f6:	da03      	bge.n	8004400 <_printf_i+0xd0>
 80043f8:	232d      	movs	r3, #45	@ 0x2d
 80043fa:	426d      	negs	r5, r5
 80043fc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004400:	4859      	ldr	r0, [pc, #356]	@ (8004568 <_printf_i+0x238>)
 8004402:	230a      	movs	r3, #10
 8004404:	e011      	b.n	800442a <_printf_i+0xfa>
 8004406:	6821      	ldr	r1, [r4, #0]
 8004408:	6833      	ldr	r3, [r6, #0]
 800440a:	0608      	lsls	r0, r1, #24
 800440c:	f853 5b04 	ldr.w	r5, [r3], #4
 8004410:	d402      	bmi.n	8004418 <_printf_i+0xe8>
 8004412:	0649      	lsls	r1, r1, #25
 8004414:	bf48      	it	mi
 8004416:	b2ad      	uxthmi	r5, r5
 8004418:	2f6f      	cmp	r7, #111	@ 0x6f
 800441a:	4853      	ldr	r0, [pc, #332]	@ (8004568 <_printf_i+0x238>)
 800441c:	6033      	str	r3, [r6, #0]
 800441e:	bf14      	ite	ne
 8004420:	230a      	movne	r3, #10
 8004422:	2308      	moveq	r3, #8
 8004424:	2100      	movs	r1, #0
 8004426:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800442a:	6866      	ldr	r6, [r4, #4]
 800442c:	60a6      	str	r6, [r4, #8]
 800442e:	2e00      	cmp	r6, #0
 8004430:	bfa2      	ittt	ge
 8004432:	6821      	ldrge	r1, [r4, #0]
 8004434:	f021 0104 	bicge.w	r1, r1, #4
 8004438:	6021      	strge	r1, [r4, #0]
 800443a:	b90d      	cbnz	r5, 8004440 <_printf_i+0x110>
 800443c:	2e00      	cmp	r6, #0
 800443e:	d04b      	beq.n	80044d8 <_printf_i+0x1a8>
 8004440:	4616      	mov	r6, r2
 8004442:	fbb5 f1f3 	udiv	r1, r5, r3
 8004446:	fb03 5711 	mls	r7, r3, r1, r5
 800444a:	5dc7      	ldrb	r7, [r0, r7]
 800444c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004450:	462f      	mov	r7, r5
 8004452:	42bb      	cmp	r3, r7
 8004454:	460d      	mov	r5, r1
 8004456:	d9f4      	bls.n	8004442 <_printf_i+0x112>
 8004458:	2b08      	cmp	r3, #8
 800445a:	d10b      	bne.n	8004474 <_printf_i+0x144>
 800445c:	6823      	ldr	r3, [r4, #0]
 800445e:	07df      	lsls	r7, r3, #31
 8004460:	d508      	bpl.n	8004474 <_printf_i+0x144>
 8004462:	6923      	ldr	r3, [r4, #16]
 8004464:	6861      	ldr	r1, [r4, #4]
 8004466:	4299      	cmp	r1, r3
 8004468:	bfde      	ittt	le
 800446a:	2330      	movle	r3, #48	@ 0x30
 800446c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004470:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004474:	1b92      	subs	r2, r2, r6
 8004476:	6122      	str	r2, [r4, #16]
 8004478:	f8cd a000 	str.w	sl, [sp]
 800447c:	464b      	mov	r3, r9
 800447e:	aa03      	add	r2, sp, #12
 8004480:	4621      	mov	r1, r4
 8004482:	4640      	mov	r0, r8
 8004484:	f7ff fee6 	bl	8004254 <_printf_common>
 8004488:	3001      	adds	r0, #1
 800448a:	d14a      	bne.n	8004522 <_printf_i+0x1f2>
 800448c:	f04f 30ff 	mov.w	r0, #4294967295
 8004490:	b004      	add	sp, #16
 8004492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004496:	6823      	ldr	r3, [r4, #0]
 8004498:	f043 0320 	orr.w	r3, r3, #32
 800449c:	6023      	str	r3, [r4, #0]
 800449e:	4833      	ldr	r0, [pc, #204]	@ (800456c <_printf_i+0x23c>)
 80044a0:	2778      	movs	r7, #120	@ 0x78
 80044a2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80044a6:	6823      	ldr	r3, [r4, #0]
 80044a8:	6831      	ldr	r1, [r6, #0]
 80044aa:	061f      	lsls	r7, r3, #24
 80044ac:	f851 5b04 	ldr.w	r5, [r1], #4
 80044b0:	d402      	bmi.n	80044b8 <_printf_i+0x188>
 80044b2:	065f      	lsls	r7, r3, #25
 80044b4:	bf48      	it	mi
 80044b6:	b2ad      	uxthmi	r5, r5
 80044b8:	6031      	str	r1, [r6, #0]
 80044ba:	07d9      	lsls	r1, r3, #31
 80044bc:	bf44      	itt	mi
 80044be:	f043 0320 	orrmi.w	r3, r3, #32
 80044c2:	6023      	strmi	r3, [r4, #0]
 80044c4:	b11d      	cbz	r5, 80044ce <_printf_i+0x19e>
 80044c6:	2310      	movs	r3, #16
 80044c8:	e7ac      	b.n	8004424 <_printf_i+0xf4>
 80044ca:	4827      	ldr	r0, [pc, #156]	@ (8004568 <_printf_i+0x238>)
 80044cc:	e7e9      	b.n	80044a2 <_printf_i+0x172>
 80044ce:	6823      	ldr	r3, [r4, #0]
 80044d0:	f023 0320 	bic.w	r3, r3, #32
 80044d4:	6023      	str	r3, [r4, #0]
 80044d6:	e7f6      	b.n	80044c6 <_printf_i+0x196>
 80044d8:	4616      	mov	r6, r2
 80044da:	e7bd      	b.n	8004458 <_printf_i+0x128>
 80044dc:	6833      	ldr	r3, [r6, #0]
 80044de:	6825      	ldr	r5, [r4, #0]
 80044e0:	6961      	ldr	r1, [r4, #20]
 80044e2:	1d18      	adds	r0, r3, #4
 80044e4:	6030      	str	r0, [r6, #0]
 80044e6:	062e      	lsls	r6, r5, #24
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	d501      	bpl.n	80044f0 <_printf_i+0x1c0>
 80044ec:	6019      	str	r1, [r3, #0]
 80044ee:	e002      	b.n	80044f6 <_printf_i+0x1c6>
 80044f0:	0668      	lsls	r0, r5, #25
 80044f2:	d5fb      	bpl.n	80044ec <_printf_i+0x1bc>
 80044f4:	8019      	strh	r1, [r3, #0]
 80044f6:	2300      	movs	r3, #0
 80044f8:	6123      	str	r3, [r4, #16]
 80044fa:	4616      	mov	r6, r2
 80044fc:	e7bc      	b.n	8004478 <_printf_i+0x148>
 80044fe:	6833      	ldr	r3, [r6, #0]
 8004500:	1d1a      	adds	r2, r3, #4
 8004502:	6032      	str	r2, [r6, #0]
 8004504:	681e      	ldr	r6, [r3, #0]
 8004506:	6862      	ldr	r2, [r4, #4]
 8004508:	2100      	movs	r1, #0
 800450a:	4630      	mov	r0, r6
 800450c:	f7fb fe68 	bl	80001e0 <memchr>
 8004510:	b108      	cbz	r0, 8004516 <_printf_i+0x1e6>
 8004512:	1b80      	subs	r0, r0, r6
 8004514:	6060      	str	r0, [r4, #4]
 8004516:	6863      	ldr	r3, [r4, #4]
 8004518:	6123      	str	r3, [r4, #16]
 800451a:	2300      	movs	r3, #0
 800451c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004520:	e7aa      	b.n	8004478 <_printf_i+0x148>
 8004522:	6923      	ldr	r3, [r4, #16]
 8004524:	4632      	mov	r2, r6
 8004526:	4649      	mov	r1, r9
 8004528:	4640      	mov	r0, r8
 800452a:	47d0      	blx	sl
 800452c:	3001      	adds	r0, #1
 800452e:	d0ad      	beq.n	800448c <_printf_i+0x15c>
 8004530:	6823      	ldr	r3, [r4, #0]
 8004532:	079b      	lsls	r3, r3, #30
 8004534:	d413      	bmi.n	800455e <_printf_i+0x22e>
 8004536:	68e0      	ldr	r0, [r4, #12]
 8004538:	9b03      	ldr	r3, [sp, #12]
 800453a:	4298      	cmp	r0, r3
 800453c:	bfb8      	it	lt
 800453e:	4618      	movlt	r0, r3
 8004540:	e7a6      	b.n	8004490 <_printf_i+0x160>
 8004542:	2301      	movs	r3, #1
 8004544:	4632      	mov	r2, r6
 8004546:	4649      	mov	r1, r9
 8004548:	4640      	mov	r0, r8
 800454a:	47d0      	blx	sl
 800454c:	3001      	adds	r0, #1
 800454e:	d09d      	beq.n	800448c <_printf_i+0x15c>
 8004550:	3501      	adds	r5, #1
 8004552:	68e3      	ldr	r3, [r4, #12]
 8004554:	9903      	ldr	r1, [sp, #12]
 8004556:	1a5b      	subs	r3, r3, r1
 8004558:	42ab      	cmp	r3, r5
 800455a:	dcf2      	bgt.n	8004542 <_printf_i+0x212>
 800455c:	e7eb      	b.n	8004536 <_printf_i+0x206>
 800455e:	2500      	movs	r5, #0
 8004560:	f104 0619 	add.w	r6, r4, #25
 8004564:	e7f5      	b.n	8004552 <_printf_i+0x222>
 8004566:	bf00      	nop
 8004568:	08004775 	.word	0x08004775
 800456c:	08004786 	.word	0x08004786

08004570 <memmove>:
 8004570:	4288      	cmp	r0, r1
 8004572:	b510      	push	{r4, lr}
 8004574:	eb01 0402 	add.w	r4, r1, r2
 8004578:	d902      	bls.n	8004580 <memmove+0x10>
 800457a:	4284      	cmp	r4, r0
 800457c:	4623      	mov	r3, r4
 800457e:	d807      	bhi.n	8004590 <memmove+0x20>
 8004580:	1e43      	subs	r3, r0, #1
 8004582:	42a1      	cmp	r1, r4
 8004584:	d008      	beq.n	8004598 <memmove+0x28>
 8004586:	f811 2b01 	ldrb.w	r2, [r1], #1
 800458a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800458e:	e7f8      	b.n	8004582 <memmove+0x12>
 8004590:	4402      	add	r2, r0
 8004592:	4601      	mov	r1, r0
 8004594:	428a      	cmp	r2, r1
 8004596:	d100      	bne.n	800459a <memmove+0x2a>
 8004598:	bd10      	pop	{r4, pc}
 800459a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800459e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80045a2:	e7f7      	b.n	8004594 <memmove+0x24>

080045a4 <_sbrk_r>:
 80045a4:	b538      	push	{r3, r4, r5, lr}
 80045a6:	4d06      	ldr	r5, [pc, #24]	@ (80045c0 <_sbrk_r+0x1c>)
 80045a8:	2300      	movs	r3, #0
 80045aa:	4604      	mov	r4, r0
 80045ac:	4608      	mov	r0, r1
 80045ae:	602b      	str	r3, [r5, #0]
 80045b0:	f7fc fc22 	bl	8000df8 <_sbrk>
 80045b4:	1c43      	adds	r3, r0, #1
 80045b6:	d102      	bne.n	80045be <_sbrk_r+0x1a>
 80045b8:	682b      	ldr	r3, [r5, #0]
 80045ba:	b103      	cbz	r3, 80045be <_sbrk_r+0x1a>
 80045bc:	6023      	str	r3, [r4, #0]
 80045be:	bd38      	pop	{r3, r4, r5, pc}
 80045c0:	20000240 	.word	0x20000240

080045c4 <memcpy>:
 80045c4:	440a      	add	r2, r1
 80045c6:	4291      	cmp	r1, r2
 80045c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80045cc:	d100      	bne.n	80045d0 <memcpy+0xc>
 80045ce:	4770      	bx	lr
 80045d0:	b510      	push	{r4, lr}
 80045d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80045d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80045da:	4291      	cmp	r1, r2
 80045dc:	d1f9      	bne.n	80045d2 <memcpy+0xe>
 80045de:	bd10      	pop	{r4, pc}

080045e0 <_realloc_r>:
 80045e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80045e4:	4680      	mov	r8, r0
 80045e6:	4615      	mov	r5, r2
 80045e8:	460c      	mov	r4, r1
 80045ea:	b921      	cbnz	r1, 80045f6 <_realloc_r+0x16>
 80045ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80045f0:	4611      	mov	r1, r2
 80045f2:	f7ff bc4b 	b.w	8003e8c <_malloc_r>
 80045f6:	b92a      	cbnz	r2, 8004604 <_realloc_r+0x24>
 80045f8:	f7ff fbdc 	bl	8003db4 <_free_r>
 80045fc:	2400      	movs	r4, #0
 80045fe:	4620      	mov	r0, r4
 8004600:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004604:	f000 f81a 	bl	800463c <_malloc_usable_size_r>
 8004608:	4285      	cmp	r5, r0
 800460a:	4606      	mov	r6, r0
 800460c:	d802      	bhi.n	8004614 <_realloc_r+0x34>
 800460e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004612:	d8f4      	bhi.n	80045fe <_realloc_r+0x1e>
 8004614:	4629      	mov	r1, r5
 8004616:	4640      	mov	r0, r8
 8004618:	f7ff fc38 	bl	8003e8c <_malloc_r>
 800461c:	4607      	mov	r7, r0
 800461e:	2800      	cmp	r0, #0
 8004620:	d0ec      	beq.n	80045fc <_realloc_r+0x1c>
 8004622:	42b5      	cmp	r5, r6
 8004624:	462a      	mov	r2, r5
 8004626:	4621      	mov	r1, r4
 8004628:	bf28      	it	cs
 800462a:	4632      	movcs	r2, r6
 800462c:	f7ff ffca 	bl	80045c4 <memcpy>
 8004630:	4621      	mov	r1, r4
 8004632:	4640      	mov	r0, r8
 8004634:	f7ff fbbe 	bl	8003db4 <_free_r>
 8004638:	463c      	mov	r4, r7
 800463a:	e7e0      	b.n	80045fe <_realloc_r+0x1e>

0800463c <_malloc_usable_size_r>:
 800463c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004640:	1f18      	subs	r0, r3, #4
 8004642:	2b00      	cmp	r3, #0
 8004644:	bfbc      	itt	lt
 8004646:	580b      	ldrlt	r3, [r1, r0]
 8004648:	18c0      	addlt	r0, r0, r3
 800464a:	4770      	bx	lr

0800464c <_init>:
 800464c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800464e:	bf00      	nop
 8004650:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004652:	bc08      	pop	{r3}
 8004654:	469e      	mov	lr, r3
 8004656:	4770      	bx	lr

08004658 <_fini>:
 8004658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800465a:	bf00      	nop
 800465c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800465e:	bc08      	pop	{r3}
 8004660:	469e      	mov	lr, r3
 8004662:	4770      	bx	lr
