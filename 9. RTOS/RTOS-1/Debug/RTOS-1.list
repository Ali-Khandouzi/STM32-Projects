
RTOS-1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a24  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08005bb4  08005bb4  00006bb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005c44  08005c44  00007010  2**0
                  CONTENTS
  4 .ARM          00000008  08005c44  08005c44  00006c44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005c4c  08005c4c  00007010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005c4c  08005c4c  00006c4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005c50  08005c50  00006c50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08005c54  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000019b4  20000010  08005c64  00007010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200019c4  08005c64  000079c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013fe4  00000000  00000000  00007040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c9f  00000000  00000000  0001b024  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010b8  00000000  00000000  0001dcc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cd8  00000000  00000000  0001ed80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002b57  00000000  00000000  0001fa58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000129f1  00000000  00000000  000225af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f16ab  00000000  00000000  00034fa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012664b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000450c  00000000  00000000  00126690  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  0012ab9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005b9c 	.word	0x08005b9c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08005b9c 	.word	0x08005b9c

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b96a 	b.w	80004bc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	460c      	mov	r4, r1
 8000208:	2b00      	cmp	r3, #0
 800020a:	d14e      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020c:	4694      	mov	ip, r2
 800020e:	458c      	cmp	ip, r1
 8000210:	4686      	mov	lr, r0
 8000212:	fab2 f282 	clz	r2, r2
 8000216:	d962      	bls.n	80002de <__udivmoddi4+0xde>
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0320 	rsb	r3, r2, #32
 800021e:	4091      	lsls	r1, r2
 8000220:	fa20 f303 	lsr.w	r3, r0, r3
 8000224:	fa0c fc02 	lsl.w	ip, ip, r2
 8000228:	4319      	orrs	r1, r3
 800022a:	fa00 fe02 	lsl.w	lr, r0, r2
 800022e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000232:	fa1f f68c 	uxth.w	r6, ip
 8000236:	fbb1 f4f7 	udiv	r4, r1, r7
 800023a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800023e:	fb07 1114 	mls	r1, r7, r4, r1
 8000242:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000246:	fb04 f106 	mul.w	r1, r4, r6
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f104 30ff 	add.w	r0, r4, #4294967295
 8000256:	f080 8112 	bcs.w	800047e <__udivmoddi4+0x27e>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 810f 	bls.w	800047e <__udivmoddi4+0x27e>
 8000260:	3c02      	subs	r4, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a59      	subs	r1, r3, r1
 8000266:	fa1f f38e 	uxth.w	r3, lr
 800026a:	fbb1 f0f7 	udiv	r0, r1, r7
 800026e:	fb07 1110 	mls	r1, r7, r0, r1
 8000272:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000276:	fb00 f606 	mul.w	r6, r0, r6
 800027a:	429e      	cmp	r6, r3
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x94>
 800027e:	eb1c 0303 	adds.w	r3, ip, r3
 8000282:	f100 31ff 	add.w	r1, r0, #4294967295
 8000286:	f080 80fc 	bcs.w	8000482 <__udivmoddi4+0x282>
 800028a:	429e      	cmp	r6, r3
 800028c:	f240 80f9 	bls.w	8000482 <__udivmoddi4+0x282>
 8000290:	4463      	add	r3, ip
 8000292:	3802      	subs	r0, #2
 8000294:	1b9b      	subs	r3, r3, r6
 8000296:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029a:	2100      	movs	r1, #0
 800029c:	b11d      	cbz	r5, 80002a6 <__udivmoddi4+0xa6>
 800029e:	40d3      	lsrs	r3, r2
 80002a0:	2200      	movs	r2, #0
 80002a2:	e9c5 3200 	strd	r3, r2, [r5]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d905      	bls.n	80002ba <__udivmoddi4+0xba>
 80002ae:	b10d      	cbz	r5, 80002b4 <__udivmoddi4+0xb4>
 80002b0:	e9c5 0100 	strd	r0, r1, [r5]
 80002b4:	2100      	movs	r1, #0
 80002b6:	4608      	mov	r0, r1
 80002b8:	e7f5      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002ba:	fab3 f183 	clz	r1, r3
 80002be:	2900      	cmp	r1, #0
 80002c0:	d146      	bne.n	8000350 <__udivmoddi4+0x150>
 80002c2:	42a3      	cmp	r3, r4
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xcc>
 80002c6:	4290      	cmp	r0, r2
 80002c8:	f0c0 80f0 	bcc.w	80004ac <__udivmoddi4+0x2ac>
 80002cc:	1a86      	subs	r6, r0, r2
 80002ce:	eb64 0303 	sbc.w	r3, r4, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	2d00      	cmp	r5, #0
 80002d6:	d0e6      	beq.n	80002a6 <__udivmoddi4+0xa6>
 80002d8:	e9c5 6300 	strd	r6, r3, [r5]
 80002dc:	e7e3      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002de:	2a00      	cmp	r2, #0
 80002e0:	f040 8090 	bne.w	8000404 <__udivmoddi4+0x204>
 80002e4:	eba1 040c 	sub.w	r4, r1, ip
 80002e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002ec:	fa1f f78c 	uxth.w	r7, ip
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb4 f6f8 	udiv	r6, r4, r8
 80002f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fa:	fb08 4416 	mls	r4, r8, r6, r4
 80002fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000302:	fb07 f006 	mul.w	r0, r7, r6
 8000306:	4298      	cmp	r0, r3
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x11c>
 800030a:	eb1c 0303 	adds.w	r3, ip, r3
 800030e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x11a>
 8000314:	4298      	cmp	r0, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 800031a:	4626      	mov	r6, r4
 800031c:	1a1c      	subs	r4, r3, r0
 800031e:	fa1f f38e 	uxth.w	r3, lr
 8000322:	fbb4 f0f8 	udiv	r0, r4, r8
 8000326:	fb08 4410 	mls	r4, r8, r0, r4
 800032a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032e:	fb00 f707 	mul.w	r7, r0, r7
 8000332:	429f      	cmp	r7, r3
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x148>
 8000336:	eb1c 0303 	adds.w	r3, ip, r3
 800033a:	f100 34ff 	add.w	r4, r0, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x146>
 8000340:	429f      	cmp	r7, r3
 8000342:	f200 80b0 	bhi.w	80004a6 <__udivmoddi4+0x2a6>
 8000346:	4620      	mov	r0, r4
 8000348:	1bdb      	subs	r3, r3, r7
 800034a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800034e:	e7a5      	b.n	800029c <__udivmoddi4+0x9c>
 8000350:	f1c1 0620 	rsb	r6, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 f706 	lsr.w	r7, r2, r6
 800035a:	431f      	orrs	r7, r3
 800035c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000360:	fa04 f301 	lsl.w	r3, r4, r1
 8000364:	ea43 030c 	orr.w	r3, r3, ip
 8000368:	40f4      	lsrs	r4, r6
 800036a:	fa00 f801 	lsl.w	r8, r0, r1
 800036e:	0c38      	lsrs	r0, r7, #16
 8000370:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000374:	fbb4 fef0 	udiv	lr, r4, r0
 8000378:	fa1f fc87 	uxth.w	ip, r7
 800037c:	fb00 441e 	mls	r4, r0, lr, r4
 8000380:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000384:	fb0e f90c 	mul.w	r9, lr, ip
 8000388:	45a1      	cmp	r9, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	d90a      	bls.n	80003a6 <__udivmoddi4+0x1a6>
 8000390:	193c      	adds	r4, r7, r4
 8000392:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000396:	f080 8084 	bcs.w	80004a2 <__udivmoddi4+0x2a2>
 800039a:	45a1      	cmp	r9, r4
 800039c:	f240 8081 	bls.w	80004a2 <__udivmoddi4+0x2a2>
 80003a0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a4:	443c      	add	r4, r7
 80003a6:	eba4 0409 	sub.w	r4, r4, r9
 80003aa:	fa1f f983 	uxth.w	r9, r3
 80003ae:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b2:	fb00 4413 	mls	r4, r0, r3, r4
 80003b6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ba:	fb03 fc0c 	mul.w	ip, r3, ip
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d907      	bls.n	80003d2 <__udivmoddi4+0x1d2>
 80003c2:	193c      	adds	r4, r7, r4
 80003c4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c8:	d267      	bcs.n	800049a <__udivmoddi4+0x29a>
 80003ca:	45a4      	cmp	ip, r4
 80003cc:	d965      	bls.n	800049a <__udivmoddi4+0x29a>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003d6:	fba0 9302 	umull	r9, r3, r0, r2
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	429c      	cmp	r4, r3
 80003e0:	46ce      	mov	lr, r9
 80003e2:	469c      	mov	ip, r3
 80003e4:	d351      	bcc.n	800048a <__udivmoddi4+0x28a>
 80003e6:	d04e      	beq.n	8000486 <__udivmoddi4+0x286>
 80003e8:	b155      	cbz	r5, 8000400 <__udivmoddi4+0x200>
 80003ea:	ebb8 030e 	subs.w	r3, r8, lr
 80003ee:	eb64 040c 	sbc.w	r4, r4, ip
 80003f2:	fa04 f606 	lsl.w	r6, r4, r6
 80003f6:	40cb      	lsrs	r3, r1
 80003f8:	431e      	orrs	r6, r3
 80003fa:	40cc      	lsrs	r4, r1
 80003fc:	e9c5 6400 	strd	r6, r4, [r5]
 8000400:	2100      	movs	r1, #0
 8000402:	e750      	b.n	80002a6 <__udivmoddi4+0xa6>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f103 	lsr.w	r1, r0, r3
 800040c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000410:	fa24 f303 	lsr.w	r3, r4, r3
 8000414:	4094      	lsls	r4, r2
 8000416:	430c      	orrs	r4, r1
 8000418:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800041c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000420:	fa1f f78c 	uxth.w	r7, ip
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3110 	mls	r1, r8, r0, r3
 800042c:	0c23      	lsrs	r3, r4, #16
 800042e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000432:	fb00 f107 	mul.w	r1, r0, r7
 8000436:	4299      	cmp	r1, r3
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x24c>
 800043a:	eb1c 0303 	adds.w	r3, ip, r3
 800043e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000442:	d22c      	bcs.n	800049e <__udivmoddi4+0x29e>
 8000444:	4299      	cmp	r1, r3
 8000446:	d92a      	bls.n	800049e <__udivmoddi4+0x29e>
 8000448:	3802      	subs	r0, #2
 800044a:	4463      	add	r3, ip
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb3 f1f8 	udiv	r1, r3, r8
 8000454:	fb08 3311 	mls	r3, r8, r1, r3
 8000458:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800045c:	fb01 f307 	mul.w	r3, r1, r7
 8000460:	42a3      	cmp	r3, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x276>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f101 36ff 	add.w	r6, r1, #4294967295
 800046c:	d213      	bcs.n	8000496 <__udivmoddi4+0x296>
 800046e:	42a3      	cmp	r3, r4
 8000470:	d911      	bls.n	8000496 <__udivmoddi4+0x296>
 8000472:	3902      	subs	r1, #2
 8000474:	4464      	add	r4, ip
 8000476:	1ae4      	subs	r4, r4, r3
 8000478:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800047c:	e739      	b.n	80002f2 <__udivmoddi4+0xf2>
 800047e:	4604      	mov	r4, r0
 8000480:	e6f0      	b.n	8000264 <__udivmoddi4+0x64>
 8000482:	4608      	mov	r0, r1
 8000484:	e706      	b.n	8000294 <__udivmoddi4+0x94>
 8000486:	45c8      	cmp	r8, r9
 8000488:	d2ae      	bcs.n	80003e8 <__udivmoddi4+0x1e8>
 800048a:	ebb9 0e02 	subs.w	lr, r9, r2
 800048e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000492:	3801      	subs	r0, #1
 8000494:	e7a8      	b.n	80003e8 <__udivmoddi4+0x1e8>
 8000496:	4631      	mov	r1, r6
 8000498:	e7ed      	b.n	8000476 <__udivmoddi4+0x276>
 800049a:	4603      	mov	r3, r0
 800049c:	e799      	b.n	80003d2 <__udivmoddi4+0x1d2>
 800049e:	4630      	mov	r0, r6
 80004a0:	e7d4      	b.n	800044c <__udivmoddi4+0x24c>
 80004a2:	46d6      	mov	lr, sl
 80004a4:	e77f      	b.n	80003a6 <__udivmoddi4+0x1a6>
 80004a6:	4463      	add	r3, ip
 80004a8:	3802      	subs	r0, #2
 80004aa:	e74d      	b.n	8000348 <__udivmoddi4+0x148>
 80004ac:	4606      	mov	r6, r0
 80004ae:	4623      	mov	r3, r4
 80004b0:	4608      	mov	r0, r1
 80004b2:	e70f      	b.n	80002d4 <__udivmoddi4+0xd4>
 80004b4:	3e02      	subs	r6, #2
 80004b6:	4463      	add	r3, ip
 80004b8:	e730      	b.n	800031c <__udivmoddi4+0x11c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
  HAL_Init();
 80004c4:	f000 f9fe 	bl	80008c4 <HAL_Init>
  /* Configure the system clock */
  SystemClock_Config();
 80004c8:	f000 f827 	bl	800051a <SystemClock_Config>
  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004cc:	f000 f8a6 	bl	800061c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004d0:	f000 f874 	bl	80005bc <MX_USART2_UART_Init>
  /* Init scheduler */
  osKernelInitialize();
 80004d4:	f002 fdaa 	bl	800302c <osKernelInitialize>
  /* Create the thread(s) */
  /* creation of blinkThreadID */
  blinkThreadID = osThreadNew(blinkThread, NULL, &blinkThread_attr);
 80004d8:	4a05      	ldr	r2, [pc, #20]	@ (80004f0 <main+0x30>)
 80004da:	2100      	movs	r1, #0
 80004dc:	4805      	ldr	r0, [pc, #20]	@ (80004f4 <main+0x34>)
 80004de:	f002 fdef 	bl	80030c0 <osThreadNew>
 80004e2:	4603      	mov	r3, r0
 80004e4:	4a04      	ldr	r2, [pc, #16]	@ (80004f8 <main+0x38>)
 80004e6:	6013      	str	r3, [r2, #0]
  /* Start scheduler */
  osKernelStart();
 80004e8:	f002 fdc4 	bl	8003074 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  while (1);
 80004ec:	bf00      	nop
 80004ee:	e7fd      	b.n	80004ec <main+0x2c>
 80004f0:	08005bd8 	.word	0x08005bd8
 80004f4:	080004fd 	.word	0x080004fd
 80004f8:	200000b4 	.word	0x200000b4

080004fc <blinkThread>:
}

void blinkThread(void *argument) {
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b082      	sub	sp, #8
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]
	while(1) {
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000504:	2120      	movs	r1, #32
 8000506:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800050a:	f000 fcff 	bl	8000f0c <HAL_GPIO_TogglePin>
		osDelay(500);
 800050e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000512:	f002 fe67 	bl	80031e4 <osDelay>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000516:	bf00      	nop
 8000518:	e7f4      	b.n	8000504 <blinkThread+0x8>

0800051a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800051a:	b580      	push	{r7, lr}
 800051c:	b096      	sub	sp, #88	@ 0x58
 800051e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000520:	f107 0314 	add.w	r3, r7, #20
 8000524:	2244      	movs	r2, #68	@ 0x44
 8000526:	2100      	movs	r1, #0
 8000528:	4618      	mov	r0, r3
 800052a:	f005 fafd 	bl	8005b28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800052e:	463b      	mov	r3, r7
 8000530:	2200      	movs	r2, #0
 8000532:	601a      	str	r2, [r3, #0]
 8000534:	605a      	str	r2, [r3, #4]
 8000536:	609a      	str	r2, [r3, #8]
 8000538:	60da      	str	r2, [r3, #12]
 800053a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800053c:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000540:	f000 fd0c 	bl	8000f5c <HAL_PWREx_ControlVoltageScaling>
 8000544:	4603      	mov	r3, r0
 8000546:	2b00      	cmp	r3, #0
 8000548:	d001      	beq.n	800054e <SystemClock_Config+0x34>
  {
    Error_Handler();
 800054a:	f000 f8cd 	bl	80006e8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800054e:	2302      	movs	r3, #2
 8000550:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000552:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000556:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000558:	2310      	movs	r3, #16
 800055a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800055c:	2302      	movs	r3, #2
 800055e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000560:	2302      	movs	r3, #2
 8000562:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000564:	2301      	movs	r3, #1
 8000566:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000568:	230a      	movs	r3, #10
 800056a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800056c:	2307      	movs	r3, #7
 800056e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000570:	2302      	movs	r3, #2
 8000572:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000574:	2302      	movs	r3, #2
 8000576:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000578:	f107 0314 	add.w	r3, r7, #20
 800057c:	4618      	mov	r0, r3
 800057e:	f000 fd43 	bl	8001008 <HAL_RCC_OscConfig>
 8000582:	4603      	mov	r3, r0
 8000584:	2b00      	cmp	r3, #0
 8000586:	d001      	beq.n	800058c <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000588:	f000 f8ae 	bl	80006e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800058c:	230f      	movs	r3, #15
 800058e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000590:	2303      	movs	r3, #3
 8000592:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000594:	2300      	movs	r3, #0
 8000596:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000598:	2300      	movs	r3, #0
 800059a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800059c:	2300      	movs	r3, #0
 800059e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005a0:	463b      	mov	r3, r7
 80005a2:	2104      	movs	r1, #4
 80005a4:	4618      	mov	r0, r3
 80005a6:	f001 f90b 	bl	80017c0 <HAL_RCC_ClockConfig>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d001      	beq.n	80005b4 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80005b0:	f000 f89a 	bl	80006e8 <Error_Handler>
  }
}
 80005b4:	bf00      	nop
 80005b6:	3758      	adds	r7, #88	@ 0x58
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}

080005bc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80005c0:	4b14      	ldr	r3, [pc, #80]	@ (8000614 <MX_USART2_UART_Init+0x58>)
 80005c2:	4a15      	ldr	r2, [pc, #84]	@ (8000618 <MX_USART2_UART_Init+0x5c>)
 80005c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80005c6:	4b13      	ldr	r3, [pc, #76]	@ (8000614 <MX_USART2_UART_Init+0x58>)
 80005c8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80005cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005ce:	4b11      	ldr	r3, [pc, #68]	@ (8000614 <MX_USART2_UART_Init+0x58>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80005d4:	4b0f      	ldr	r3, [pc, #60]	@ (8000614 <MX_USART2_UART_Init+0x58>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80005da:	4b0e      	ldr	r3, [pc, #56]	@ (8000614 <MX_USART2_UART_Init+0x58>)
 80005dc:	2200      	movs	r2, #0
 80005de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80005e0:	4b0c      	ldr	r3, [pc, #48]	@ (8000614 <MX_USART2_UART_Init+0x58>)
 80005e2:	220c      	movs	r2, #12
 80005e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005e6:	4b0b      	ldr	r3, [pc, #44]	@ (8000614 <MX_USART2_UART_Init+0x58>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80005ec:	4b09      	ldr	r3, [pc, #36]	@ (8000614 <MX_USART2_UART_Init+0x58>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80005f2:	4b08      	ldr	r3, [pc, #32]	@ (8000614 <MX_USART2_UART_Init+0x58>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80005f8:	4b06      	ldr	r3, [pc, #24]	@ (8000614 <MX_USART2_UART_Init+0x58>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80005fe:	4805      	ldr	r0, [pc, #20]	@ (8000614 <MX_USART2_UART_Init+0x58>)
 8000600:	f001 ffbe 	bl	8002580 <HAL_UART_Init>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d001      	beq.n	800060e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800060a:	f000 f86d 	bl	80006e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800060e:	bf00      	nop
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	2000002c 	.word	0x2000002c
 8000618:	40004400 	.word	0x40004400

0800061c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b08a      	sub	sp, #40	@ 0x28
 8000620:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000622:	f107 0314 	add.w	r3, r7, #20
 8000626:	2200      	movs	r2, #0
 8000628:	601a      	str	r2, [r3, #0]
 800062a:	605a      	str	r2, [r3, #4]
 800062c:	609a      	str	r2, [r3, #8]
 800062e:	60da      	str	r2, [r3, #12]
 8000630:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000632:	4b2b      	ldr	r3, [pc, #172]	@ (80006e0 <MX_GPIO_Init+0xc4>)
 8000634:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000636:	4a2a      	ldr	r2, [pc, #168]	@ (80006e0 <MX_GPIO_Init+0xc4>)
 8000638:	f043 0304 	orr.w	r3, r3, #4
 800063c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800063e:	4b28      	ldr	r3, [pc, #160]	@ (80006e0 <MX_GPIO_Init+0xc4>)
 8000640:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000642:	f003 0304 	and.w	r3, r3, #4
 8000646:	613b      	str	r3, [r7, #16]
 8000648:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800064a:	4b25      	ldr	r3, [pc, #148]	@ (80006e0 <MX_GPIO_Init+0xc4>)
 800064c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800064e:	4a24      	ldr	r2, [pc, #144]	@ (80006e0 <MX_GPIO_Init+0xc4>)
 8000650:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000654:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000656:	4b22      	ldr	r3, [pc, #136]	@ (80006e0 <MX_GPIO_Init+0xc4>)
 8000658:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800065a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800065e:	60fb      	str	r3, [r7, #12]
 8000660:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000662:	4b1f      	ldr	r3, [pc, #124]	@ (80006e0 <MX_GPIO_Init+0xc4>)
 8000664:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000666:	4a1e      	ldr	r2, [pc, #120]	@ (80006e0 <MX_GPIO_Init+0xc4>)
 8000668:	f043 0301 	orr.w	r3, r3, #1
 800066c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800066e:	4b1c      	ldr	r3, [pc, #112]	@ (80006e0 <MX_GPIO_Init+0xc4>)
 8000670:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000672:	f003 0301 	and.w	r3, r3, #1
 8000676:	60bb      	str	r3, [r7, #8]
 8000678:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800067a:	4b19      	ldr	r3, [pc, #100]	@ (80006e0 <MX_GPIO_Init+0xc4>)
 800067c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800067e:	4a18      	ldr	r2, [pc, #96]	@ (80006e0 <MX_GPIO_Init+0xc4>)
 8000680:	f043 0302 	orr.w	r3, r3, #2
 8000684:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000686:	4b16      	ldr	r3, [pc, #88]	@ (80006e0 <MX_GPIO_Init+0xc4>)
 8000688:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800068a:	f003 0302 	and.w	r3, r3, #2
 800068e:	607b      	str	r3, [r7, #4]
 8000690:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000692:	2200      	movs	r2, #0
 8000694:	2120      	movs	r1, #32
 8000696:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800069a:	f000 fc1f 	bl	8000edc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800069e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80006a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80006a4:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80006a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006aa:	2300      	movs	r3, #0
 80006ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006ae:	f107 0314 	add.w	r3, r7, #20
 80006b2:	4619      	mov	r1, r3
 80006b4:	480b      	ldr	r0, [pc, #44]	@ (80006e4 <MX_GPIO_Init+0xc8>)
 80006b6:	f000 fa67 	bl	8000b88 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80006ba:	2320      	movs	r3, #32
 80006bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006be:	2301      	movs	r3, #1
 80006c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c2:	2300      	movs	r3, #0
 80006c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006c6:	2300      	movs	r3, #0
 80006c8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80006ca:	f107 0314 	add.w	r3, r7, #20
 80006ce:	4619      	mov	r1, r3
 80006d0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006d4:	f000 fa58 	bl	8000b88 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006d8:	bf00      	nop
 80006da:	3728      	adds	r7, #40	@ 0x28
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	40021000 	.word	0x40021000
 80006e4:	48000800 	.word	0x48000800

080006e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006e8:	b480      	push	{r7}
 80006ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006ec:	b672      	cpsid	i
}
 80006ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006f0:	bf00      	nop
 80006f2:	e7fd      	b.n	80006f0 <Error_Handler+0x8>

080006f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006fa:	4b11      	ldr	r3, [pc, #68]	@ (8000740 <HAL_MspInit+0x4c>)
 80006fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80006fe:	4a10      	ldr	r2, [pc, #64]	@ (8000740 <HAL_MspInit+0x4c>)
 8000700:	f043 0301 	orr.w	r3, r3, #1
 8000704:	6613      	str	r3, [r2, #96]	@ 0x60
 8000706:	4b0e      	ldr	r3, [pc, #56]	@ (8000740 <HAL_MspInit+0x4c>)
 8000708:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800070a:	f003 0301 	and.w	r3, r3, #1
 800070e:	607b      	str	r3, [r7, #4]
 8000710:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000712:	4b0b      	ldr	r3, [pc, #44]	@ (8000740 <HAL_MspInit+0x4c>)
 8000714:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000716:	4a0a      	ldr	r2, [pc, #40]	@ (8000740 <HAL_MspInit+0x4c>)
 8000718:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800071c:	6593      	str	r3, [r2, #88]	@ 0x58
 800071e:	4b08      	ldr	r3, [pc, #32]	@ (8000740 <HAL_MspInit+0x4c>)
 8000720:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000722:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000726:	603b      	str	r3, [r7, #0]
 8000728:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800072a:	2200      	movs	r2, #0
 800072c:	210f      	movs	r1, #15
 800072e:	f06f 0001 	mvn.w	r0, #1
 8000732:	f000 fa00 	bl	8000b36 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000736:	bf00      	nop
 8000738:	3708      	adds	r7, #8
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	40021000 	.word	0x40021000

08000744 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b0ac      	sub	sp, #176	@ 0xb0
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800074c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000750:	2200      	movs	r2, #0
 8000752:	601a      	str	r2, [r3, #0]
 8000754:	605a      	str	r2, [r3, #4]
 8000756:	609a      	str	r2, [r3, #8]
 8000758:	60da      	str	r2, [r3, #12]
 800075a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800075c:	f107 0314 	add.w	r3, r7, #20
 8000760:	2288      	movs	r2, #136	@ 0x88
 8000762:	2100      	movs	r1, #0
 8000764:	4618      	mov	r0, r3
 8000766:	f005 f9df 	bl	8005b28 <memset>
  if(huart->Instance==USART2)
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	4a21      	ldr	r2, [pc, #132]	@ (80007f4 <HAL_UART_MspInit+0xb0>)
 8000770:	4293      	cmp	r3, r2
 8000772:	d13b      	bne.n	80007ec <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000774:	2302      	movs	r3, #2
 8000776:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000778:	2300      	movs	r3, #0
 800077a:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800077c:	f107 0314 	add.w	r3, r7, #20
 8000780:	4618      	mov	r0, r3
 8000782:	f001 fa41 	bl	8001c08 <HAL_RCCEx_PeriphCLKConfig>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800078c:	f7ff ffac 	bl	80006e8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000790:	4b19      	ldr	r3, [pc, #100]	@ (80007f8 <HAL_UART_MspInit+0xb4>)
 8000792:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000794:	4a18      	ldr	r2, [pc, #96]	@ (80007f8 <HAL_UART_MspInit+0xb4>)
 8000796:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800079a:	6593      	str	r3, [r2, #88]	@ 0x58
 800079c:	4b16      	ldr	r3, [pc, #88]	@ (80007f8 <HAL_UART_MspInit+0xb4>)
 800079e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80007a4:	613b      	str	r3, [r7, #16]
 80007a6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007a8:	4b13      	ldr	r3, [pc, #76]	@ (80007f8 <HAL_UART_MspInit+0xb4>)
 80007aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007ac:	4a12      	ldr	r2, [pc, #72]	@ (80007f8 <HAL_UART_MspInit+0xb4>)
 80007ae:	f043 0301 	orr.w	r3, r3, #1
 80007b2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007b4:	4b10      	ldr	r3, [pc, #64]	@ (80007f8 <HAL_UART_MspInit+0xb4>)
 80007b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007b8:	f003 0301 	and.w	r3, r3, #1
 80007bc:	60fb      	str	r3, [r7, #12]
 80007be:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80007c0:	230c      	movs	r3, #12
 80007c2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007c6:	2302      	movs	r3, #2
 80007c8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007cc:	2300      	movs	r3, #0
 80007ce:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007d2:	2303      	movs	r3, #3
 80007d4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80007d8:	2307      	movs	r3, #7
 80007da:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007de:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80007e2:	4619      	mov	r1, r3
 80007e4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007e8:	f000 f9ce 	bl	8000b88 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80007ec:	bf00      	nop
 80007ee:	37b0      	adds	r7, #176	@ 0xb0
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	40004400 	.word	0x40004400
 80007f8:	40021000 	.word	0x40021000

080007fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000800:	bf00      	nop
 8000802:	e7fd      	b.n	8000800 <NMI_Handler+0x4>

08000804 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000808:	bf00      	nop
 800080a:	e7fd      	b.n	8000808 <HardFault_Handler+0x4>

0800080c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000810:	bf00      	nop
 8000812:	e7fd      	b.n	8000810 <MemManage_Handler+0x4>

08000814 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000818:	bf00      	nop
 800081a:	e7fd      	b.n	8000818 <BusFault_Handler+0x4>

0800081c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000820:	bf00      	nop
 8000822:	e7fd      	b.n	8000820 <UsageFault_Handler+0x4>

08000824 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000828:	bf00      	nop
 800082a:	46bd      	mov	sp, r7
 800082c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000830:	4770      	bx	lr

08000832 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000832:	b580      	push	{r7, lr}
 8000834:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000836:	f000 f8a1 	bl	800097c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800083a:	f004 f8fb 	bl	8004a34 <xTaskGetSchedulerState>
 800083e:	4603      	mov	r3, r0
 8000840:	2b01      	cmp	r3, #1
 8000842:	d001      	beq.n	8000848 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000844:	f004 fef0 	bl	8005628 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000848:	bf00      	nop
 800084a:	bd80      	pop	{r7, pc}

0800084c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000850:	4b06      	ldr	r3, [pc, #24]	@ (800086c <SystemInit+0x20>)
 8000852:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000856:	4a05      	ldr	r2, [pc, #20]	@ (800086c <SystemInit+0x20>)
 8000858:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800085c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000860:	bf00      	nop
 8000862:	46bd      	mov	sp, r7
 8000864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000868:	4770      	bx	lr
 800086a:	bf00      	nop
 800086c:	e000ed00 	.word	0xe000ed00

08000870 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000870:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80008a8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000874:	f7ff ffea 	bl	800084c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000878:	480c      	ldr	r0, [pc, #48]	@ (80008ac <LoopForever+0x6>)
  ldr r1, =_edata
 800087a:	490d      	ldr	r1, [pc, #52]	@ (80008b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800087c:	4a0d      	ldr	r2, [pc, #52]	@ (80008b4 <LoopForever+0xe>)
  movs r3, #0
 800087e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000880:	e002      	b.n	8000888 <LoopCopyDataInit>

08000882 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000882:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000884:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000886:	3304      	adds	r3, #4

08000888 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000888:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800088a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800088c:	d3f9      	bcc.n	8000882 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800088e:	4a0a      	ldr	r2, [pc, #40]	@ (80008b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000890:	4c0a      	ldr	r4, [pc, #40]	@ (80008bc <LoopForever+0x16>)
  movs r3, #0
 8000892:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000894:	e001      	b.n	800089a <LoopFillZerobss>

08000896 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000896:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000898:	3204      	adds	r2, #4

0800089a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800089a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800089c:	d3fb      	bcc.n	8000896 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800089e:	f005 f94b 	bl	8005b38 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80008a2:	f7ff fe0d 	bl	80004c0 <main>

080008a6 <LoopForever>:

LoopForever:
    b LoopForever
 80008a6:	e7fe      	b.n	80008a6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80008a8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80008ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008b0:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80008b4:	08005c54 	.word	0x08005c54
  ldr r2, =_sbss
 80008b8:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80008bc:	200019c4 	.word	0x200019c4

080008c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80008c0:	e7fe      	b.n	80008c0 <ADC1_2_IRQHandler>
	...

080008c4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b082      	sub	sp, #8
 80008c8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80008ca:	2300      	movs	r3, #0
 80008cc:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008ce:	4b0c      	ldr	r3, [pc, #48]	@ (8000900 <HAL_Init+0x3c>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	4a0b      	ldr	r2, [pc, #44]	@ (8000900 <HAL_Init+0x3c>)
 80008d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80008d8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008da:	2003      	movs	r0, #3
 80008dc:	f000 f920 	bl	8000b20 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80008e0:	200f      	movs	r0, #15
 80008e2:	f000 f80f 	bl	8000904 <HAL_InitTick>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d002      	beq.n	80008f2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80008ec:	2301      	movs	r3, #1
 80008ee:	71fb      	strb	r3, [r7, #7]
 80008f0:	e001      	b.n	80008f6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80008f2:	f7ff feff 	bl	80006f4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80008f6:	79fb      	ldrb	r3, [r7, #7]
}
 80008f8:	4618      	mov	r0, r3
 80008fa:	3708      	adds	r7, #8
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	40022000 	.word	0x40022000

08000904 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b084      	sub	sp, #16
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800090c:	2300      	movs	r3, #0
 800090e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000910:	4b17      	ldr	r3, [pc, #92]	@ (8000970 <HAL_InitTick+0x6c>)
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	2b00      	cmp	r3, #0
 8000916:	d023      	beq.n	8000960 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000918:	4b16      	ldr	r3, [pc, #88]	@ (8000974 <HAL_InitTick+0x70>)
 800091a:	681a      	ldr	r2, [r3, #0]
 800091c:	4b14      	ldr	r3, [pc, #80]	@ (8000970 <HAL_InitTick+0x6c>)
 800091e:	781b      	ldrb	r3, [r3, #0]
 8000920:	4619      	mov	r1, r3
 8000922:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000926:	fbb3 f3f1 	udiv	r3, r3, r1
 800092a:	fbb2 f3f3 	udiv	r3, r2, r3
 800092e:	4618      	mov	r0, r3
 8000930:	f000 f91d 	bl	8000b6e <HAL_SYSTICK_Config>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d10f      	bne.n	800095a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	2b0f      	cmp	r3, #15
 800093e:	d809      	bhi.n	8000954 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000940:	2200      	movs	r2, #0
 8000942:	6879      	ldr	r1, [r7, #4]
 8000944:	f04f 30ff 	mov.w	r0, #4294967295
 8000948:	f000 f8f5 	bl	8000b36 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800094c:	4a0a      	ldr	r2, [pc, #40]	@ (8000978 <HAL_InitTick+0x74>)
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	6013      	str	r3, [r2, #0]
 8000952:	e007      	b.n	8000964 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000954:	2301      	movs	r3, #1
 8000956:	73fb      	strb	r3, [r7, #15]
 8000958:	e004      	b.n	8000964 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800095a:	2301      	movs	r3, #1
 800095c:	73fb      	strb	r3, [r7, #15]
 800095e:	e001      	b.n	8000964 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000960:	2301      	movs	r3, #1
 8000962:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000964:	7bfb      	ldrb	r3, [r7, #15]
}
 8000966:	4618      	mov	r0, r3
 8000968:	3710      	adds	r7, #16
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	20000008 	.word	0x20000008
 8000974:	20000000 	.word	0x20000000
 8000978:	20000004 	.word	0x20000004

0800097c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000980:	4b06      	ldr	r3, [pc, #24]	@ (800099c <HAL_IncTick+0x20>)
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	461a      	mov	r2, r3
 8000986:	4b06      	ldr	r3, [pc, #24]	@ (80009a0 <HAL_IncTick+0x24>)
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	4413      	add	r3, r2
 800098c:	4a04      	ldr	r2, [pc, #16]	@ (80009a0 <HAL_IncTick+0x24>)
 800098e:	6013      	str	r3, [r2, #0]
}
 8000990:	bf00      	nop
 8000992:	46bd      	mov	sp, r7
 8000994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop
 800099c:	20000008 	.word	0x20000008
 80009a0:	200000b8 	.word	0x200000b8

080009a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  return uwTick;
 80009a8:	4b03      	ldr	r3, [pc, #12]	@ (80009b8 <HAL_GetTick+0x14>)
 80009aa:	681b      	ldr	r3, [r3, #0]
}
 80009ac:	4618      	mov	r0, r3
 80009ae:	46bd      	mov	sp, r7
 80009b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop
 80009b8:	200000b8 	.word	0x200000b8

080009bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009bc:	b480      	push	{r7}
 80009be:	b085      	sub	sp, #20
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	f003 0307 	and.w	r3, r3, #7
 80009ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009cc:	4b0c      	ldr	r3, [pc, #48]	@ (8000a00 <__NVIC_SetPriorityGrouping+0x44>)
 80009ce:	68db      	ldr	r3, [r3, #12]
 80009d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009d2:	68ba      	ldr	r2, [r7, #8]
 80009d4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80009d8:	4013      	ands	r3, r2
 80009da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009e0:	68bb      	ldr	r3, [r7, #8]
 80009e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009e4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80009e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009ee:	4a04      	ldr	r2, [pc, #16]	@ (8000a00 <__NVIC_SetPriorityGrouping+0x44>)
 80009f0:	68bb      	ldr	r3, [r7, #8]
 80009f2:	60d3      	str	r3, [r2, #12]
}
 80009f4:	bf00      	nop
 80009f6:	3714      	adds	r7, #20
 80009f8:	46bd      	mov	sp, r7
 80009fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fe:	4770      	bx	lr
 8000a00:	e000ed00 	.word	0xe000ed00

08000a04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a08:	4b04      	ldr	r3, [pc, #16]	@ (8000a1c <__NVIC_GetPriorityGrouping+0x18>)
 8000a0a:	68db      	ldr	r3, [r3, #12]
 8000a0c:	0a1b      	lsrs	r3, r3, #8
 8000a0e:	f003 0307 	and.w	r3, r3, #7
}
 8000a12:	4618      	mov	r0, r3
 8000a14:	46bd      	mov	sp, r7
 8000a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1a:	4770      	bx	lr
 8000a1c:	e000ed00 	.word	0xe000ed00

08000a20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a20:	b480      	push	{r7}
 8000a22:	b083      	sub	sp, #12
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	4603      	mov	r3, r0
 8000a28:	6039      	str	r1, [r7, #0]
 8000a2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	db0a      	blt.n	8000a4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a34:	683b      	ldr	r3, [r7, #0]
 8000a36:	b2da      	uxtb	r2, r3
 8000a38:	490c      	ldr	r1, [pc, #48]	@ (8000a6c <__NVIC_SetPriority+0x4c>)
 8000a3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a3e:	0112      	lsls	r2, r2, #4
 8000a40:	b2d2      	uxtb	r2, r2
 8000a42:	440b      	add	r3, r1
 8000a44:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a48:	e00a      	b.n	8000a60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a4a:	683b      	ldr	r3, [r7, #0]
 8000a4c:	b2da      	uxtb	r2, r3
 8000a4e:	4908      	ldr	r1, [pc, #32]	@ (8000a70 <__NVIC_SetPriority+0x50>)
 8000a50:	79fb      	ldrb	r3, [r7, #7]
 8000a52:	f003 030f 	and.w	r3, r3, #15
 8000a56:	3b04      	subs	r3, #4
 8000a58:	0112      	lsls	r2, r2, #4
 8000a5a:	b2d2      	uxtb	r2, r2
 8000a5c:	440b      	add	r3, r1
 8000a5e:	761a      	strb	r2, [r3, #24]
}
 8000a60:	bf00      	nop
 8000a62:	370c      	adds	r7, #12
 8000a64:	46bd      	mov	sp, r7
 8000a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6a:	4770      	bx	lr
 8000a6c:	e000e100 	.word	0xe000e100
 8000a70:	e000ed00 	.word	0xe000ed00

08000a74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a74:	b480      	push	{r7}
 8000a76:	b089      	sub	sp, #36	@ 0x24
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	60f8      	str	r0, [r7, #12]
 8000a7c:	60b9      	str	r1, [r7, #8]
 8000a7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	f003 0307 	and.w	r3, r3, #7
 8000a86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a88:	69fb      	ldr	r3, [r7, #28]
 8000a8a:	f1c3 0307 	rsb	r3, r3, #7
 8000a8e:	2b04      	cmp	r3, #4
 8000a90:	bf28      	it	cs
 8000a92:	2304      	movcs	r3, #4
 8000a94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a96:	69fb      	ldr	r3, [r7, #28]
 8000a98:	3304      	adds	r3, #4
 8000a9a:	2b06      	cmp	r3, #6
 8000a9c:	d902      	bls.n	8000aa4 <NVIC_EncodePriority+0x30>
 8000a9e:	69fb      	ldr	r3, [r7, #28]
 8000aa0:	3b03      	subs	r3, #3
 8000aa2:	e000      	b.n	8000aa6 <NVIC_EncodePriority+0x32>
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000aa8:	f04f 32ff 	mov.w	r2, #4294967295
 8000aac:	69bb      	ldr	r3, [r7, #24]
 8000aae:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab2:	43da      	mvns	r2, r3
 8000ab4:	68bb      	ldr	r3, [r7, #8]
 8000ab6:	401a      	ands	r2, r3
 8000ab8:	697b      	ldr	r3, [r7, #20]
 8000aba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000abc:	f04f 31ff 	mov.w	r1, #4294967295
 8000ac0:	697b      	ldr	r3, [r7, #20]
 8000ac2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ac6:	43d9      	mvns	r1, r3
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000acc:	4313      	orrs	r3, r2
         );
}
 8000ace:	4618      	mov	r0, r3
 8000ad0:	3724      	adds	r7, #36	@ 0x24
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr
	...

08000adc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	3b01      	subs	r3, #1
 8000ae8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000aec:	d301      	bcc.n	8000af2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000aee:	2301      	movs	r3, #1
 8000af0:	e00f      	b.n	8000b12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000af2:	4a0a      	ldr	r2, [pc, #40]	@ (8000b1c <SysTick_Config+0x40>)
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	3b01      	subs	r3, #1
 8000af8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000afa:	210f      	movs	r1, #15
 8000afc:	f04f 30ff 	mov.w	r0, #4294967295
 8000b00:	f7ff ff8e 	bl	8000a20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b04:	4b05      	ldr	r3, [pc, #20]	@ (8000b1c <SysTick_Config+0x40>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b0a:	4b04      	ldr	r3, [pc, #16]	@ (8000b1c <SysTick_Config+0x40>)
 8000b0c:	2207      	movs	r2, #7
 8000b0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b10:	2300      	movs	r3, #0
}
 8000b12:	4618      	mov	r0, r3
 8000b14:	3708      	adds	r7, #8
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	e000e010 	.word	0xe000e010

08000b20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b082      	sub	sp, #8
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b28:	6878      	ldr	r0, [r7, #4]
 8000b2a:	f7ff ff47 	bl	80009bc <__NVIC_SetPriorityGrouping>
}
 8000b2e:	bf00      	nop
 8000b30:	3708      	adds	r7, #8
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}

08000b36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b36:	b580      	push	{r7, lr}
 8000b38:	b086      	sub	sp, #24
 8000b3a:	af00      	add	r7, sp, #0
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	60b9      	str	r1, [r7, #8]
 8000b40:	607a      	str	r2, [r7, #4]
 8000b42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000b44:	2300      	movs	r3, #0
 8000b46:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000b48:	f7ff ff5c 	bl	8000a04 <__NVIC_GetPriorityGrouping>
 8000b4c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b4e:	687a      	ldr	r2, [r7, #4]
 8000b50:	68b9      	ldr	r1, [r7, #8]
 8000b52:	6978      	ldr	r0, [r7, #20]
 8000b54:	f7ff ff8e 	bl	8000a74 <NVIC_EncodePriority>
 8000b58:	4602      	mov	r2, r0
 8000b5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b5e:	4611      	mov	r1, r2
 8000b60:	4618      	mov	r0, r3
 8000b62:	f7ff ff5d 	bl	8000a20 <__NVIC_SetPriority>
}
 8000b66:	bf00      	nop
 8000b68:	3718      	adds	r7, #24
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}

08000b6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b6e:	b580      	push	{r7, lr}
 8000b70:	b082      	sub	sp, #8
 8000b72:	af00      	add	r7, sp, #0
 8000b74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b76:	6878      	ldr	r0, [r7, #4]
 8000b78:	f7ff ffb0 	bl	8000adc <SysTick_Config>
 8000b7c:	4603      	mov	r3, r0
}
 8000b7e:	4618      	mov	r0, r3
 8000b80:	3708      	adds	r7, #8
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
	...

08000b88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b087      	sub	sp, #28
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
 8000b90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b92:	2300      	movs	r3, #0
 8000b94:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b96:	e17f      	b.n	8000e98 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000b98:	683b      	ldr	r3, [r7, #0]
 8000b9a:	681a      	ldr	r2, [r3, #0]
 8000b9c:	2101      	movs	r1, #1
 8000b9e:	697b      	ldr	r3, [r7, #20]
 8000ba0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ba4:	4013      	ands	r3, r2
 8000ba6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	f000 8171 	beq.w	8000e92 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000bb0:	683b      	ldr	r3, [r7, #0]
 8000bb2:	685b      	ldr	r3, [r3, #4]
 8000bb4:	f003 0303 	and.w	r3, r3, #3
 8000bb8:	2b01      	cmp	r3, #1
 8000bba:	d005      	beq.n	8000bc8 <HAL_GPIO_Init+0x40>
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	685b      	ldr	r3, [r3, #4]
 8000bc0:	f003 0303 	and.w	r3, r3, #3
 8000bc4:	2b02      	cmp	r3, #2
 8000bc6:	d130      	bne.n	8000c2a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	689b      	ldr	r3, [r3, #8]
 8000bcc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000bce:	697b      	ldr	r3, [r7, #20]
 8000bd0:	005b      	lsls	r3, r3, #1
 8000bd2:	2203      	movs	r2, #3
 8000bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd8:	43db      	mvns	r3, r3
 8000bda:	693a      	ldr	r2, [r7, #16]
 8000bdc:	4013      	ands	r3, r2
 8000bde:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	68da      	ldr	r2, [r3, #12]
 8000be4:	697b      	ldr	r3, [r7, #20]
 8000be6:	005b      	lsls	r3, r3, #1
 8000be8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bec:	693a      	ldr	r2, [r7, #16]
 8000bee:	4313      	orrs	r3, r2
 8000bf0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	693a      	ldr	r2, [r7, #16]
 8000bf6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	685b      	ldr	r3, [r3, #4]
 8000bfc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000bfe:	2201      	movs	r2, #1
 8000c00:	697b      	ldr	r3, [r7, #20]
 8000c02:	fa02 f303 	lsl.w	r3, r2, r3
 8000c06:	43db      	mvns	r3, r3
 8000c08:	693a      	ldr	r2, [r7, #16]
 8000c0a:	4013      	ands	r3, r2
 8000c0c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	685b      	ldr	r3, [r3, #4]
 8000c12:	091b      	lsrs	r3, r3, #4
 8000c14:	f003 0201 	and.w	r2, r3, #1
 8000c18:	697b      	ldr	r3, [r7, #20]
 8000c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1e:	693a      	ldr	r2, [r7, #16]
 8000c20:	4313      	orrs	r3, r2
 8000c22:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	693a      	ldr	r2, [r7, #16]
 8000c28:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	685b      	ldr	r3, [r3, #4]
 8000c2e:	f003 0303 	and.w	r3, r3, #3
 8000c32:	2b03      	cmp	r3, #3
 8000c34:	d118      	bne.n	8000c68 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c3a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	697b      	ldr	r3, [r7, #20]
 8000c40:	fa02 f303 	lsl.w	r3, r2, r3
 8000c44:	43db      	mvns	r3, r3
 8000c46:	693a      	ldr	r2, [r7, #16]
 8000c48:	4013      	ands	r3, r2
 8000c4a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	685b      	ldr	r3, [r3, #4]
 8000c50:	08db      	lsrs	r3, r3, #3
 8000c52:	f003 0201 	and.w	r2, r3, #1
 8000c56:	697b      	ldr	r3, [r7, #20]
 8000c58:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5c:	693a      	ldr	r2, [r7, #16]
 8000c5e:	4313      	orrs	r3, r2
 8000c60:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	693a      	ldr	r2, [r7, #16]
 8000c66:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	685b      	ldr	r3, [r3, #4]
 8000c6c:	f003 0303 	and.w	r3, r3, #3
 8000c70:	2b03      	cmp	r3, #3
 8000c72:	d017      	beq.n	8000ca4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	68db      	ldr	r3, [r3, #12]
 8000c78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000c7a:	697b      	ldr	r3, [r7, #20]
 8000c7c:	005b      	lsls	r3, r3, #1
 8000c7e:	2203      	movs	r2, #3
 8000c80:	fa02 f303 	lsl.w	r3, r2, r3
 8000c84:	43db      	mvns	r3, r3
 8000c86:	693a      	ldr	r2, [r7, #16]
 8000c88:	4013      	ands	r3, r2
 8000c8a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	689a      	ldr	r2, [r3, #8]
 8000c90:	697b      	ldr	r3, [r7, #20]
 8000c92:	005b      	lsls	r3, r3, #1
 8000c94:	fa02 f303 	lsl.w	r3, r2, r3
 8000c98:	693a      	ldr	r2, [r7, #16]
 8000c9a:	4313      	orrs	r3, r2
 8000c9c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	693a      	ldr	r2, [r7, #16]
 8000ca2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	685b      	ldr	r3, [r3, #4]
 8000ca8:	f003 0303 	and.w	r3, r3, #3
 8000cac:	2b02      	cmp	r3, #2
 8000cae:	d123      	bne.n	8000cf8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000cb0:	697b      	ldr	r3, [r7, #20]
 8000cb2:	08da      	lsrs	r2, r3, #3
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	3208      	adds	r2, #8
 8000cb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cbc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000cbe:	697b      	ldr	r3, [r7, #20]
 8000cc0:	f003 0307 	and.w	r3, r3, #7
 8000cc4:	009b      	lsls	r3, r3, #2
 8000cc6:	220f      	movs	r2, #15
 8000cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ccc:	43db      	mvns	r3, r3
 8000cce:	693a      	ldr	r2, [r7, #16]
 8000cd0:	4013      	ands	r3, r2
 8000cd2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	691a      	ldr	r2, [r3, #16]
 8000cd8:	697b      	ldr	r3, [r7, #20]
 8000cda:	f003 0307 	and.w	r3, r3, #7
 8000cde:	009b      	lsls	r3, r3, #2
 8000ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce4:	693a      	ldr	r2, [r7, #16]
 8000ce6:	4313      	orrs	r3, r2
 8000ce8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000cea:	697b      	ldr	r3, [r7, #20]
 8000cec:	08da      	lsrs	r2, r3, #3
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	3208      	adds	r2, #8
 8000cf2:	6939      	ldr	r1, [r7, #16]
 8000cf4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000cfe:	697b      	ldr	r3, [r7, #20]
 8000d00:	005b      	lsls	r3, r3, #1
 8000d02:	2203      	movs	r2, #3
 8000d04:	fa02 f303 	lsl.w	r3, r2, r3
 8000d08:	43db      	mvns	r3, r3
 8000d0a:	693a      	ldr	r2, [r7, #16]
 8000d0c:	4013      	ands	r3, r2
 8000d0e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	685b      	ldr	r3, [r3, #4]
 8000d14:	f003 0203 	and.w	r2, r3, #3
 8000d18:	697b      	ldr	r3, [r7, #20]
 8000d1a:	005b      	lsls	r3, r3, #1
 8000d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d20:	693a      	ldr	r2, [r7, #16]
 8000d22:	4313      	orrs	r3, r2
 8000d24:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	693a      	ldr	r2, [r7, #16]
 8000d2a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	685b      	ldr	r3, [r3, #4]
 8000d30:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	f000 80ac 	beq.w	8000e92 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d3a:	4b5f      	ldr	r3, [pc, #380]	@ (8000eb8 <HAL_GPIO_Init+0x330>)
 8000d3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d3e:	4a5e      	ldr	r2, [pc, #376]	@ (8000eb8 <HAL_GPIO_Init+0x330>)
 8000d40:	f043 0301 	orr.w	r3, r3, #1
 8000d44:	6613      	str	r3, [r2, #96]	@ 0x60
 8000d46:	4b5c      	ldr	r3, [pc, #368]	@ (8000eb8 <HAL_GPIO_Init+0x330>)
 8000d48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d4a:	f003 0301 	and.w	r3, r3, #1
 8000d4e:	60bb      	str	r3, [r7, #8]
 8000d50:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000d52:	4a5a      	ldr	r2, [pc, #360]	@ (8000ebc <HAL_GPIO_Init+0x334>)
 8000d54:	697b      	ldr	r3, [r7, #20]
 8000d56:	089b      	lsrs	r3, r3, #2
 8000d58:	3302      	adds	r3, #2
 8000d5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d5e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000d60:	697b      	ldr	r3, [r7, #20]
 8000d62:	f003 0303 	and.w	r3, r3, #3
 8000d66:	009b      	lsls	r3, r3, #2
 8000d68:	220f      	movs	r2, #15
 8000d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6e:	43db      	mvns	r3, r3
 8000d70:	693a      	ldr	r2, [r7, #16]
 8000d72:	4013      	ands	r3, r2
 8000d74:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000d7c:	d025      	beq.n	8000dca <HAL_GPIO_Init+0x242>
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	4a4f      	ldr	r2, [pc, #316]	@ (8000ec0 <HAL_GPIO_Init+0x338>)
 8000d82:	4293      	cmp	r3, r2
 8000d84:	d01f      	beq.n	8000dc6 <HAL_GPIO_Init+0x23e>
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	4a4e      	ldr	r2, [pc, #312]	@ (8000ec4 <HAL_GPIO_Init+0x33c>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d019      	beq.n	8000dc2 <HAL_GPIO_Init+0x23a>
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	4a4d      	ldr	r2, [pc, #308]	@ (8000ec8 <HAL_GPIO_Init+0x340>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d013      	beq.n	8000dbe <HAL_GPIO_Init+0x236>
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	4a4c      	ldr	r2, [pc, #304]	@ (8000ecc <HAL_GPIO_Init+0x344>)
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	d00d      	beq.n	8000dba <HAL_GPIO_Init+0x232>
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	4a4b      	ldr	r2, [pc, #300]	@ (8000ed0 <HAL_GPIO_Init+0x348>)
 8000da2:	4293      	cmp	r3, r2
 8000da4:	d007      	beq.n	8000db6 <HAL_GPIO_Init+0x22e>
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	4a4a      	ldr	r2, [pc, #296]	@ (8000ed4 <HAL_GPIO_Init+0x34c>)
 8000daa:	4293      	cmp	r3, r2
 8000dac:	d101      	bne.n	8000db2 <HAL_GPIO_Init+0x22a>
 8000dae:	2306      	movs	r3, #6
 8000db0:	e00c      	b.n	8000dcc <HAL_GPIO_Init+0x244>
 8000db2:	2307      	movs	r3, #7
 8000db4:	e00a      	b.n	8000dcc <HAL_GPIO_Init+0x244>
 8000db6:	2305      	movs	r3, #5
 8000db8:	e008      	b.n	8000dcc <HAL_GPIO_Init+0x244>
 8000dba:	2304      	movs	r3, #4
 8000dbc:	e006      	b.n	8000dcc <HAL_GPIO_Init+0x244>
 8000dbe:	2303      	movs	r3, #3
 8000dc0:	e004      	b.n	8000dcc <HAL_GPIO_Init+0x244>
 8000dc2:	2302      	movs	r3, #2
 8000dc4:	e002      	b.n	8000dcc <HAL_GPIO_Init+0x244>
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	e000      	b.n	8000dcc <HAL_GPIO_Init+0x244>
 8000dca:	2300      	movs	r3, #0
 8000dcc:	697a      	ldr	r2, [r7, #20]
 8000dce:	f002 0203 	and.w	r2, r2, #3
 8000dd2:	0092      	lsls	r2, r2, #2
 8000dd4:	4093      	lsls	r3, r2
 8000dd6:	693a      	ldr	r2, [r7, #16]
 8000dd8:	4313      	orrs	r3, r2
 8000dda:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000ddc:	4937      	ldr	r1, [pc, #220]	@ (8000ebc <HAL_GPIO_Init+0x334>)
 8000dde:	697b      	ldr	r3, [r7, #20]
 8000de0:	089b      	lsrs	r3, r3, #2
 8000de2:	3302      	adds	r3, #2
 8000de4:	693a      	ldr	r2, [r7, #16]
 8000de6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000dea:	4b3b      	ldr	r3, [pc, #236]	@ (8000ed8 <HAL_GPIO_Init+0x350>)
 8000dec:	689b      	ldr	r3, [r3, #8]
 8000dee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	43db      	mvns	r3, r3
 8000df4:	693a      	ldr	r2, [r7, #16]
 8000df6:	4013      	ands	r3, r2
 8000df8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	685b      	ldr	r3, [r3, #4]
 8000dfe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d003      	beq.n	8000e0e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000e06:	693a      	ldr	r2, [r7, #16]
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	4313      	orrs	r3, r2
 8000e0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000e0e:	4a32      	ldr	r2, [pc, #200]	@ (8000ed8 <HAL_GPIO_Init+0x350>)
 8000e10:	693b      	ldr	r3, [r7, #16]
 8000e12:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000e14:	4b30      	ldr	r3, [pc, #192]	@ (8000ed8 <HAL_GPIO_Init+0x350>)
 8000e16:	68db      	ldr	r3, [r3, #12]
 8000e18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	43db      	mvns	r3, r3
 8000e1e:	693a      	ldr	r2, [r7, #16]
 8000e20:	4013      	ands	r3, r2
 8000e22:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d003      	beq.n	8000e38 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000e30:	693a      	ldr	r2, [r7, #16]
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	4313      	orrs	r3, r2
 8000e36:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000e38:	4a27      	ldr	r2, [pc, #156]	@ (8000ed8 <HAL_GPIO_Init+0x350>)
 8000e3a:	693b      	ldr	r3, [r7, #16]
 8000e3c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000e3e:	4b26      	ldr	r3, [pc, #152]	@ (8000ed8 <HAL_GPIO_Init+0x350>)
 8000e40:	685b      	ldr	r3, [r3, #4]
 8000e42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	43db      	mvns	r3, r3
 8000e48:	693a      	ldr	r2, [r7, #16]
 8000e4a:	4013      	ands	r3, r2
 8000e4c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	685b      	ldr	r3, [r3, #4]
 8000e52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d003      	beq.n	8000e62 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000e5a:	693a      	ldr	r2, [r7, #16]
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	4313      	orrs	r3, r2
 8000e60:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000e62:	4a1d      	ldr	r2, [pc, #116]	@ (8000ed8 <HAL_GPIO_Init+0x350>)
 8000e64:	693b      	ldr	r3, [r7, #16]
 8000e66:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000e68:	4b1b      	ldr	r3, [pc, #108]	@ (8000ed8 <HAL_GPIO_Init+0x350>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	43db      	mvns	r3, r3
 8000e72:	693a      	ldr	r2, [r7, #16]
 8000e74:	4013      	ands	r3, r2
 8000e76:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d003      	beq.n	8000e8c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000e84:	693a      	ldr	r2, [r7, #16]
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	4313      	orrs	r3, r2
 8000e8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000e8c:	4a12      	ldr	r2, [pc, #72]	@ (8000ed8 <HAL_GPIO_Init+0x350>)
 8000e8e:	693b      	ldr	r3, [r7, #16]
 8000e90:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000e92:	697b      	ldr	r3, [r7, #20]
 8000e94:	3301      	adds	r3, #1
 8000e96:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	681a      	ldr	r2, [r3, #0]
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	fa22 f303 	lsr.w	r3, r2, r3
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	f47f ae78 	bne.w	8000b98 <HAL_GPIO_Init+0x10>
  }
}
 8000ea8:	bf00      	nop
 8000eaa:	bf00      	nop
 8000eac:	371c      	adds	r7, #28
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop
 8000eb8:	40021000 	.word	0x40021000
 8000ebc:	40010000 	.word	0x40010000
 8000ec0:	48000400 	.word	0x48000400
 8000ec4:	48000800 	.word	0x48000800
 8000ec8:	48000c00 	.word	0x48000c00
 8000ecc:	48001000 	.word	0x48001000
 8000ed0:	48001400 	.word	0x48001400
 8000ed4:	48001800 	.word	0x48001800
 8000ed8:	40010400 	.word	0x40010400

08000edc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b083      	sub	sp, #12
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
 8000ee4:	460b      	mov	r3, r1
 8000ee6:	807b      	strh	r3, [r7, #2]
 8000ee8:	4613      	mov	r3, r2
 8000eea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000eec:	787b      	ldrb	r3, [r7, #1]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d003      	beq.n	8000efa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000ef2:	887a      	ldrh	r2, [r7, #2]
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000ef8:	e002      	b.n	8000f00 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000efa:	887a      	ldrh	r2, [r7, #2]
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000f00:	bf00      	nop
 8000f02:	370c      	adds	r7, #12
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr

08000f0c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b085      	sub	sp, #20
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
 8000f14:	460b      	mov	r3, r1
 8000f16:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	695b      	ldr	r3, [r3, #20]
 8000f1c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000f1e:	887a      	ldrh	r2, [r7, #2]
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	4013      	ands	r3, r2
 8000f24:	041a      	lsls	r2, r3, #16
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	43d9      	mvns	r1, r3
 8000f2a:	887b      	ldrh	r3, [r7, #2]
 8000f2c:	400b      	ands	r3, r1
 8000f2e:	431a      	orrs	r2, r3
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	619a      	str	r2, [r3, #24]
}
 8000f34:	bf00      	nop
 8000f36:	3714      	adds	r7, #20
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr

08000f40 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000f44:	4b04      	ldr	r3, [pc, #16]	@ (8000f58 <HAL_PWREx_GetVoltageRange+0x18>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop
 8000f58:	40007000 	.word	0x40007000

08000f5c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b085      	sub	sp, #20
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000f6a:	d130      	bne.n	8000fce <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000f6c:	4b23      	ldr	r3, [pc, #140]	@ (8000ffc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000f74:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000f78:	d038      	beq.n	8000fec <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f7a:	4b20      	ldr	r3, [pc, #128]	@ (8000ffc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000f82:	4a1e      	ldr	r2, [pc, #120]	@ (8000ffc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f84:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000f88:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000f8a:	4b1d      	ldr	r3, [pc, #116]	@ (8001000 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	2232      	movs	r2, #50	@ 0x32
 8000f90:	fb02 f303 	mul.w	r3, r2, r3
 8000f94:	4a1b      	ldr	r2, [pc, #108]	@ (8001004 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000f96:	fba2 2303 	umull	r2, r3, r2, r3
 8000f9a:	0c9b      	lsrs	r3, r3, #18
 8000f9c:	3301      	adds	r3, #1
 8000f9e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000fa0:	e002      	b.n	8000fa8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	3b01      	subs	r3, #1
 8000fa6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000fa8:	4b14      	ldr	r3, [pc, #80]	@ (8000ffc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000faa:	695b      	ldr	r3, [r3, #20]
 8000fac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000fb0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000fb4:	d102      	bne.n	8000fbc <HAL_PWREx_ControlVoltageScaling+0x60>
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d1f2      	bne.n	8000fa2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000fbc:	4b0f      	ldr	r3, [pc, #60]	@ (8000ffc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000fbe:	695b      	ldr	r3, [r3, #20]
 8000fc0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000fc4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000fc8:	d110      	bne.n	8000fec <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000fca:	2303      	movs	r3, #3
 8000fcc:	e00f      	b.n	8000fee <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000fce:	4b0b      	ldr	r3, [pc, #44]	@ (8000ffc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000fd6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000fda:	d007      	beq.n	8000fec <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000fdc:	4b07      	ldr	r3, [pc, #28]	@ (8000ffc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000fe4:	4a05      	ldr	r2, [pc, #20]	@ (8000ffc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000fe6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000fea:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000fec:	2300      	movs	r3, #0
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	3714      	adds	r7, #20
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop
 8000ffc:	40007000 	.word	0x40007000
 8001000:	20000000 	.word	0x20000000
 8001004:	431bde83 	.word	0x431bde83

08001008 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b088      	sub	sp, #32
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d101      	bne.n	800101a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001016:	2301      	movs	r3, #1
 8001018:	e3ca      	b.n	80017b0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800101a:	4b97      	ldr	r3, [pc, #604]	@ (8001278 <HAL_RCC_OscConfig+0x270>)
 800101c:	689b      	ldr	r3, [r3, #8]
 800101e:	f003 030c 	and.w	r3, r3, #12
 8001022:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001024:	4b94      	ldr	r3, [pc, #592]	@ (8001278 <HAL_RCC_OscConfig+0x270>)
 8001026:	68db      	ldr	r3, [r3, #12]
 8001028:	f003 0303 	and.w	r3, r3, #3
 800102c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	f003 0310 	and.w	r3, r3, #16
 8001036:	2b00      	cmp	r3, #0
 8001038:	f000 80e4 	beq.w	8001204 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800103c:	69bb      	ldr	r3, [r7, #24]
 800103e:	2b00      	cmp	r3, #0
 8001040:	d007      	beq.n	8001052 <HAL_RCC_OscConfig+0x4a>
 8001042:	69bb      	ldr	r3, [r7, #24]
 8001044:	2b0c      	cmp	r3, #12
 8001046:	f040 808b 	bne.w	8001160 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800104a:	697b      	ldr	r3, [r7, #20]
 800104c:	2b01      	cmp	r3, #1
 800104e:	f040 8087 	bne.w	8001160 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001052:	4b89      	ldr	r3, [pc, #548]	@ (8001278 <HAL_RCC_OscConfig+0x270>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f003 0302 	and.w	r3, r3, #2
 800105a:	2b00      	cmp	r3, #0
 800105c:	d005      	beq.n	800106a <HAL_RCC_OscConfig+0x62>
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	699b      	ldr	r3, [r3, #24]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d101      	bne.n	800106a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001066:	2301      	movs	r3, #1
 8001068:	e3a2      	b.n	80017b0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	6a1a      	ldr	r2, [r3, #32]
 800106e:	4b82      	ldr	r3, [pc, #520]	@ (8001278 <HAL_RCC_OscConfig+0x270>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f003 0308 	and.w	r3, r3, #8
 8001076:	2b00      	cmp	r3, #0
 8001078:	d004      	beq.n	8001084 <HAL_RCC_OscConfig+0x7c>
 800107a:	4b7f      	ldr	r3, [pc, #508]	@ (8001278 <HAL_RCC_OscConfig+0x270>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001082:	e005      	b.n	8001090 <HAL_RCC_OscConfig+0x88>
 8001084:	4b7c      	ldr	r3, [pc, #496]	@ (8001278 <HAL_RCC_OscConfig+0x270>)
 8001086:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800108a:	091b      	lsrs	r3, r3, #4
 800108c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001090:	4293      	cmp	r3, r2
 8001092:	d223      	bcs.n	80010dc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	6a1b      	ldr	r3, [r3, #32]
 8001098:	4618      	mov	r0, r3
 800109a:	f000 fd55 	bl	8001b48 <RCC_SetFlashLatencyFromMSIRange>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d001      	beq.n	80010a8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80010a4:	2301      	movs	r3, #1
 80010a6:	e383      	b.n	80017b0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80010a8:	4b73      	ldr	r3, [pc, #460]	@ (8001278 <HAL_RCC_OscConfig+0x270>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4a72      	ldr	r2, [pc, #456]	@ (8001278 <HAL_RCC_OscConfig+0x270>)
 80010ae:	f043 0308 	orr.w	r3, r3, #8
 80010b2:	6013      	str	r3, [r2, #0]
 80010b4:	4b70      	ldr	r3, [pc, #448]	@ (8001278 <HAL_RCC_OscConfig+0x270>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	6a1b      	ldr	r3, [r3, #32]
 80010c0:	496d      	ldr	r1, [pc, #436]	@ (8001278 <HAL_RCC_OscConfig+0x270>)
 80010c2:	4313      	orrs	r3, r2
 80010c4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80010c6:	4b6c      	ldr	r3, [pc, #432]	@ (8001278 <HAL_RCC_OscConfig+0x270>)
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	69db      	ldr	r3, [r3, #28]
 80010d2:	021b      	lsls	r3, r3, #8
 80010d4:	4968      	ldr	r1, [pc, #416]	@ (8001278 <HAL_RCC_OscConfig+0x270>)
 80010d6:	4313      	orrs	r3, r2
 80010d8:	604b      	str	r3, [r1, #4]
 80010da:	e025      	b.n	8001128 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80010dc:	4b66      	ldr	r3, [pc, #408]	@ (8001278 <HAL_RCC_OscConfig+0x270>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4a65      	ldr	r2, [pc, #404]	@ (8001278 <HAL_RCC_OscConfig+0x270>)
 80010e2:	f043 0308 	orr.w	r3, r3, #8
 80010e6:	6013      	str	r3, [r2, #0]
 80010e8:	4b63      	ldr	r3, [pc, #396]	@ (8001278 <HAL_RCC_OscConfig+0x270>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	6a1b      	ldr	r3, [r3, #32]
 80010f4:	4960      	ldr	r1, [pc, #384]	@ (8001278 <HAL_RCC_OscConfig+0x270>)
 80010f6:	4313      	orrs	r3, r2
 80010f8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80010fa:	4b5f      	ldr	r3, [pc, #380]	@ (8001278 <HAL_RCC_OscConfig+0x270>)
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	69db      	ldr	r3, [r3, #28]
 8001106:	021b      	lsls	r3, r3, #8
 8001108:	495b      	ldr	r1, [pc, #364]	@ (8001278 <HAL_RCC_OscConfig+0x270>)
 800110a:	4313      	orrs	r3, r2
 800110c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800110e:	69bb      	ldr	r3, [r7, #24]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d109      	bne.n	8001128 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	6a1b      	ldr	r3, [r3, #32]
 8001118:	4618      	mov	r0, r3
 800111a:	f000 fd15 	bl	8001b48 <RCC_SetFlashLatencyFromMSIRange>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d001      	beq.n	8001128 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001124:	2301      	movs	r3, #1
 8001126:	e343      	b.n	80017b0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001128:	f000 fc4a 	bl	80019c0 <HAL_RCC_GetSysClockFreq>
 800112c:	4602      	mov	r2, r0
 800112e:	4b52      	ldr	r3, [pc, #328]	@ (8001278 <HAL_RCC_OscConfig+0x270>)
 8001130:	689b      	ldr	r3, [r3, #8]
 8001132:	091b      	lsrs	r3, r3, #4
 8001134:	f003 030f 	and.w	r3, r3, #15
 8001138:	4950      	ldr	r1, [pc, #320]	@ (800127c <HAL_RCC_OscConfig+0x274>)
 800113a:	5ccb      	ldrb	r3, [r1, r3]
 800113c:	f003 031f 	and.w	r3, r3, #31
 8001140:	fa22 f303 	lsr.w	r3, r2, r3
 8001144:	4a4e      	ldr	r2, [pc, #312]	@ (8001280 <HAL_RCC_OscConfig+0x278>)
 8001146:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001148:	4b4e      	ldr	r3, [pc, #312]	@ (8001284 <HAL_RCC_OscConfig+0x27c>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4618      	mov	r0, r3
 800114e:	f7ff fbd9 	bl	8000904 <HAL_InitTick>
 8001152:	4603      	mov	r3, r0
 8001154:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001156:	7bfb      	ldrb	r3, [r7, #15]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d052      	beq.n	8001202 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800115c:	7bfb      	ldrb	r3, [r7, #15]
 800115e:	e327      	b.n	80017b0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	699b      	ldr	r3, [r3, #24]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d032      	beq.n	80011ce <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001168:	4b43      	ldr	r3, [pc, #268]	@ (8001278 <HAL_RCC_OscConfig+0x270>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a42      	ldr	r2, [pc, #264]	@ (8001278 <HAL_RCC_OscConfig+0x270>)
 800116e:	f043 0301 	orr.w	r3, r3, #1
 8001172:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001174:	f7ff fc16 	bl	80009a4 <HAL_GetTick>
 8001178:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800117a:	e008      	b.n	800118e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800117c:	f7ff fc12 	bl	80009a4 <HAL_GetTick>
 8001180:	4602      	mov	r2, r0
 8001182:	693b      	ldr	r3, [r7, #16]
 8001184:	1ad3      	subs	r3, r2, r3
 8001186:	2b02      	cmp	r3, #2
 8001188:	d901      	bls.n	800118e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800118a:	2303      	movs	r3, #3
 800118c:	e310      	b.n	80017b0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800118e:	4b3a      	ldr	r3, [pc, #232]	@ (8001278 <HAL_RCC_OscConfig+0x270>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f003 0302 	and.w	r3, r3, #2
 8001196:	2b00      	cmp	r3, #0
 8001198:	d0f0      	beq.n	800117c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800119a:	4b37      	ldr	r3, [pc, #220]	@ (8001278 <HAL_RCC_OscConfig+0x270>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4a36      	ldr	r2, [pc, #216]	@ (8001278 <HAL_RCC_OscConfig+0x270>)
 80011a0:	f043 0308 	orr.w	r3, r3, #8
 80011a4:	6013      	str	r3, [r2, #0]
 80011a6:	4b34      	ldr	r3, [pc, #208]	@ (8001278 <HAL_RCC_OscConfig+0x270>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6a1b      	ldr	r3, [r3, #32]
 80011b2:	4931      	ldr	r1, [pc, #196]	@ (8001278 <HAL_RCC_OscConfig+0x270>)
 80011b4:	4313      	orrs	r3, r2
 80011b6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80011b8:	4b2f      	ldr	r3, [pc, #188]	@ (8001278 <HAL_RCC_OscConfig+0x270>)
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	69db      	ldr	r3, [r3, #28]
 80011c4:	021b      	lsls	r3, r3, #8
 80011c6:	492c      	ldr	r1, [pc, #176]	@ (8001278 <HAL_RCC_OscConfig+0x270>)
 80011c8:	4313      	orrs	r3, r2
 80011ca:	604b      	str	r3, [r1, #4]
 80011cc:	e01a      	b.n	8001204 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80011ce:	4b2a      	ldr	r3, [pc, #168]	@ (8001278 <HAL_RCC_OscConfig+0x270>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4a29      	ldr	r2, [pc, #164]	@ (8001278 <HAL_RCC_OscConfig+0x270>)
 80011d4:	f023 0301 	bic.w	r3, r3, #1
 80011d8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80011da:	f7ff fbe3 	bl	80009a4 <HAL_GetTick>
 80011de:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80011e0:	e008      	b.n	80011f4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80011e2:	f7ff fbdf 	bl	80009a4 <HAL_GetTick>
 80011e6:	4602      	mov	r2, r0
 80011e8:	693b      	ldr	r3, [r7, #16]
 80011ea:	1ad3      	subs	r3, r2, r3
 80011ec:	2b02      	cmp	r3, #2
 80011ee:	d901      	bls.n	80011f4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80011f0:	2303      	movs	r3, #3
 80011f2:	e2dd      	b.n	80017b0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80011f4:	4b20      	ldr	r3, [pc, #128]	@ (8001278 <HAL_RCC_OscConfig+0x270>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f003 0302 	and.w	r3, r3, #2
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d1f0      	bne.n	80011e2 <HAL_RCC_OscConfig+0x1da>
 8001200:	e000      	b.n	8001204 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001202:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f003 0301 	and.w	r3, r3, #1
 800120c:	2b00      	cmp	r3, #0
 800120e:	d074      	beq.n	80012fa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001210:	69bb      	ldr	r3, [r7, #24]
 8001212:	2b08      	cmp	r3, #8
 8001214:	d005      	beq.n	8001222 <HAL_RCC_OscConfig+0x21a>
 8001216:	69bb      	ldr	r3, [r7, #24]
 8001218:	2b0c      	cmp	r3, #12
 800121a:	d10e      	bne.n	800123a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	2b03      	cmp	r3, #3
 8001220:	d10b      	bne.n	800123a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001222:	4b15      	ldr	r3, [pc, #84]	@ (8001278 <HAL_RCC_OscConfig+0x270>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800122a:	2b00      	cmp	r3, #0
 800122c:	d064      	beq.n	80012f8 <HAL_RCC_OscConfig+0x2f0>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d160      	bne.n	80012f8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001236:	2301      	movs	r3, #1
 8001238:	e2ba      	b.n	80017b0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001242:	d106      	bne.n	8001252 <HAL_RCC_OscConfig+0x24a>
 8001244:	4b0c      	ldr	r3, [pc, #48]	@ (8001278 <HAL_RCC_OscConfig+0x270>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a0b      	ldr	r2, [pc, #44]	@ (8001278 <HAL_RCC_OscConfig+0x270>)
 800124a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800124e:	6013      	str	r3, [r2, #0]
 8001250:	e026      	b.n	80012a0 <HAL_RCC_OscConfig+0x298>
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800125a:	d115      	bne.n	8001288 <HAL_RCC_OscConfig+0x280>
 800125c:	4b06      	ldr	r3, [pc, #24]	@ (8001278 <HAL_RCC_OscConfig+0x270>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a05      	ldr	r2, [pc, #20]	@ (8001278 <HAL_RCC_OscConfig+0x270>)
 8001262:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001266:	6013      	str	r3, [r2, #0]
 8001268:	4b03      	ldr	r3, [pc, #12]	@ (8001278 <HAL_RCC_OscConfig+0x270>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a02      	ldr	r2, [pc, #8]	@ (8001278 <HAL_RCC_OscConfig+0x270>)
 800126e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001272:	6013      	str	r3, [r2, #0]
 8001274:	e014      	b.n	80012a0 <HAL_RCC_OscConfig+0x298>
 8001276:	bf00      	nop
 8001278:	40021000 	.word	0x40021000
 800127c:	08005bfc 	.word	0x08005bfc
 8001280:	20000000 	.word	0x20000000
 8001284:	20000004 	.word	0x20000004
 8001288:	4ba0      	ldr	r3, [pc, #640]	@ (800150c <HAL_RCC_OscConfig+0x504>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a9f      	ldr	r2, [pc, #636]	@ (800150c <HAL_RCC_OscConfig+0x504>)
 800128e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001292:	6013      	str	r3, [r2, #0]
 8001294:	4b9d      	ldr	r3, [pc, #628]	@ (800150c <HAL_RCC_OscConfig+0x504>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a9c      	ldr	r2, [pc, #624]	@ (800150c <HAL_RCC_OscConfig+0x504>)
 800129a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800129e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d013      	beq.n	80012d0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012a8:	f7ff fb7c 	bl	80009a4 <HAL_GetTick>
 80012ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80012ae:	e008      	b.n	80012c2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012b0:	f7ff fb78 	bl	80009a4 <HAL_GetTick>
 80012b4:	4602      	mov	r2, r0
 80012b6:	693b      	ldr	r3, [r7, #16]
 80012b8:	1ad3      	subs	r3, r2, r3
 80012ba:	2b64      	cmp	r3, #100	@ 0x64
 80012bc:	d901      	bls.n	80012c2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80012be:	2303      	movs	r3, #3
 80012c0:	e276      	b.n	80017b0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80012c2:	4b92      	ldr	r3, [pc, #584]	@ (800150c <HAL_RCC_OscConfig+0x504>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d0f0      	beq.n	80012b0 <HAL_RCC_OscConfig+0x2a8>
 80012ce:	e014      	b.n	80012fa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012d0:	f7ff fb68 	bl	80009a4 <HAL_GetTick>
 80012d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80012d6:	e008      	b.n	80012ea <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012d8:	f7ff fb64 	bl	80009a4 <HAL_GetTick>
 80012dc:	4602      	mov	r2, r0
 80012de:	693b      	ldr	r3, [r7, #16]
 80012e0:	1ad3      	subs	r3, r2, r3
 80012e2:	2b64      	cmp	r3, #100	@ 0x64
 80012e4:	d901      	bls.n	80012ea <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80012e6:	2303      	movs	r3, #3
 80012e8:	e262      	b.n	80017b0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80012ea:	4b88      	ldr	r3, [pc, #544]	@ (800150c <HAL_RCC_OscConfig+0x504>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d1f0      	bne.n	80012d8 <HAL_RCC_OscConfig+0x2d0>
 80012f6:	e000      	b.n	80012fa <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f003 0302 	and.w	r3, r3, #2
 8001302:	2b00      	cmp	r3, #0
 8001304:	d060      	beq.n	80013c8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001306:	69bb      	ldr	r3, [r7, #24]
 8001308:	2b04      	cmp	r3, #4
 800130a:	d005      	beq.n	8001318 <HAL_RCC_OscConfig+0x310>
 800130c:	69bb      	ldr	r3, [r7, #24]
 800130e:	2b0c      	cmp	r3, #12
 8001310:	d119      	bne.n	8001346 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001312:	697b      	ldr	r3, [r7, #20]
 8001314:	2b02      	cmp	r3, #2
 8001316:	d116      	bne.n	8001346 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001318:	4b7c      	ldr	r3, [pc, #496]	@ (800150c <HAL_RCC_OscConfig+0x504>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001320:	2b00      	cmp	r3, #0
 8001322:	d005      	beq.n	8001330 <HAL_RCC_OscConfig+0x328>
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	68db      	ldr	r3, [r3, #12]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d101      	bne.n	8001330 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800132c:	2301      	movs	r3, #1
 800132e:	e23f      	b.n	80017b0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001330:	4b76      	ldr	r3, [pc, #472]	@ (800150c <HAL_RCC_OscConfig+0x504>)
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	691b      	ldr	r3, [r3, #16]
 800133c:	061b      	lsls	r3, r3, #24
 800133e:	4973      	ldr	r1, [pc, #460]	@ (800150c <HAL_RCC_OscConfig+0x504>)
 8001340:	4313      	orrs	r3, r2
 8001342:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001344:	e040      	b.n	80013c8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	68db      	ldr	r3, [r3, #12]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d023      	beq.n	8001396 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800134e:	4b6f      	ldr	r3, [pc, #444]	@ (800150c <HAL_RCC_OscConfig+0x504>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4a6e      	ldr	r2, [pc, #440]	@ (800150c <HAL_RCC_OscConfig+0x504>)
 8001354:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001358:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800135a:	f7ff fb23 	bl	80009a4 <HAL_GetTick>
 800135e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001360:	e008      	b.n	8001374 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001362:	f7ff fb1f 	bl	80009a4 <HAL_GetTick>
 8001366:	4602      	mov	r2, r0
 8001368:	693b      	ldr	r3, [r7, #16]
 800136a:	1ad3      	subs	r3, r2, r3
 800136c:	2b02      	cmp	r3, #2
 800136e:	d901      	bls.n	8001374 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001370:	2303      	movs	r3, #3
 8001372:	e21d      	b.n	80017b0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001374:	4b65      	ldr	r3, [pc, #404]	@ (800150c <HAL_RCC_OscConfig+0x504>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800137c:	2b00      	cmp	r3, #0
 800137e:	d0f0      	beq.n	8001362 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001380:	4b62      	ldr	r3, [pc, #392]	@ (800150c <HAL_RCC_OscConfig+0x504>)
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	691b      	ldr	r3, [r3, #16]
 800138c:	061b      	lsls	r3, r3, #24
 800138e:	495f      	ldr	r1, [pc, #380]	@ (800150c <HAL_RCC_OscConfig+0x504>)
 8001390:	4313      	orrs	r3, r2
 8001392:	604b      	str	r3, [r1, #4]
 8001394:	e018      	b.n	80013c8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001396:	4b5d      	ldr	r3, [pc, #372]	@ (800150c <HAL_RCC_OscConfig+0x504>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4a5c      	ldr	r2, [pc, #368]	@ (800150c <HAL_RCC_OscConfig+0x504>)
 800139c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80013a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013a2:	f7ff faff 	bl	80009a4 <HAL_GetTick>
 80013a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80013a8:	e008      	b.n	80013bc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013aa:	f7ff fafb 	bl	80009a4 <HAL_GetTick>
 80013ae:	4602      	mov	r2, r0
 80013b0:	693b      	ldr	r3, [r7, #16]
 80013b2:	1ad3      	subs	r3, r2, r3
 80013b4:	2b02      	cmp	r3, #2
 80013b6:	d901      	bls.n	80013bc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80013b8:	2303      	movs	r3, #3
 80013ba:	e1f9      	b.n	80017b0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80013bc:	4b53      	ldr	r3, [pc, #332]	@ (800150c <HAL_RCC_OscConfig+0x504>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d1f0      	bne.n	80013aa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f003 0308 	and.w	r3, r3, #8
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d03c      	beq.n	800144e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	695b      	ldr	r3, [r3, #20]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d01c      	beq.n	8001416 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013dc:	4b4b      	ldr	r3, [pc, #300]	@ (800150c <HAL_RCC_OscConfig+0x504>)
 80013de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80013e2:	4a4a      	ldr	r2, [pc, #296]	@ (800150c <HAL_RCC_OscConfig+0x504>)
 80013e4:	f043 0301 	orr.w	r3, r3, #1
 80013e8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013ec:	f7ff fada 	bl	80009a4 <HAL_GetTick>
 80013f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80013f2:	e008      	b.n	8001406 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013f4:	f7ff fad6 	bl	80009a4 <HAL_GetTick>
 80013f8:	4602      	mov	r2, r0
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	1ad3      	subs	r3, r2, r3
 80013fe:	2b02      	cmp	r3, #2
 8001400:	d901      	bls.n	8001406 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001402:	2303      	movs	r3, #3
 8001404:	e1d4      	b.n	80017b0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001406:	4b41      	ldr	r3, [pc, #260]	@ (800150c <HAL_RCC_OscConfig+0x504>)
 8001408:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800140c:	f003 0302 	and.w	r3, r3, #2
 8001410:	2b00      	cmp	r3, #0
 8001412:	d0ef      	beq.n	80013f4 <HAL_RCC_OscConfig+0x3ec>
 8001414:	e01b      	b.n	800144e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001416:	4b3d      	ldr	r3, [pc, #244]	@ (800150c <HAL_RCC_OscConfig+0x504>)
 8001418:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800141c:	4a3b      	ldr	r2, [pc, #236]	@ (800150c <HAL_RCC_OscConfig+0x504>)
 800141e:	f023 0301 	bic.w	r3, r3, #1
 8001422:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001426:	f7ff fabd 	bl	80009a4 <HAL_GetTick>
 800142a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800142c:	e008      	b.n	8001440 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800142e:	f7ff fab9 	bl	80009a4 <HAL_GetTick>
 8001432:	4602      	mov	r2, r0
 8001434:	693b      	ldr	r3, [r7, #16]
 8001436:	1ad3      	subs	r3, r2, r3
 8001438:	2b02      	cmp	r3, #2
 800143a:	d901      	bls.n	8001440 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800143c:	2303      	movs	r3, #3
 800143e:	e1b7      	b.n	80017b0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001440:	4b32      	ldr	r3, [pc, #200]	@ (800150c <HAL_RCC_OscConfig+0x504>)
 8001442:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001446:	f003 0302 	and.w	r3, r3, #2
 800144a:	2b00      	cmp	r3, #0
 800144c:	d1ef      	bne.n	800142e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f003 0304 	and.w	r3, r3, #4
 8001456:	2b00      	cmp	r3, #0
 8001458:	f000 80a6 	beq.w	80015a8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800145c:	2300      	movs	r3, #0
 800145e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001460:	4b2a      	ldr	r3, [pc, #168]	@ (800150c <HAL_RCC_OscConfig+0x504>)
 8001462:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001464:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001468:	2b00      	cmp	r3, #0
 800146a:	d10d      	bne.n	8001488 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800146c:	4b27      	ldr	r3, [pc, #156]	@ (800150c <HAL_RCC_OscConfig+0x504>)
 800146e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001470:	4a26      	ldr	r2, [pc, #152]	@ (800150c <HAL_RCC_OscConfig+0x504>)
 8001472:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001476:	6593      	str	r3, [r2, #88]	@ 0x58
 8001478:	4b24      	ldr	r3, [pc, #144]	@ (800150c <HAL_RCC_OscConfig+0x504>)
 800147a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800147c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001480:	60bb      	str	r3, [r7, #8]
 8001482:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001484:	2301      	movs	r3, #1
 8001486:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001488:	4b21      	ldr	r3, [pc, #132]	@ (8001510 <HAL_RCC_OscConfig+0x508>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001490:	2b00      	cmp	r3, #0
 8001492:	d118      	bne.n	80014c6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001494:	4b1e      	ldr	r3, [pc, #120]	@ (8001510 <HAL_RCC_OscConfig+0x508>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a1d      	ldr	r2, [pc, #116]	@ (8001510 <HAL_RCC_OscConfig+0x508>)
 800149a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800149e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014a0:	f7ff fa80 	bl	80009a4 <HAL_GetTick>
 80014a4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014a6:	e008      	b.n	80014ba <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014a8:	f7ff fa7c 	bl	80009a4 <HAL_GetTick>
 80014ac:	4602      	mov	r2, r0
 80014ae:	693b      	ldr	r3, [r7, #16]
 80014b0:	1ad3      	subs	r3, r2, r3
 80014b2:	2b02      	cmp	r3, #2
 80014b4:	d901      	bls.n	80014ba <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80014b6:	2303      	movs	r3, #3
 80014b8:	e17a      	b.n	80017b0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014ba:	4b15      	ldr	r3, [pc, #84]	@ (8001510 <HAL_RCC_OscConfig+0x508>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d0f0      	beq.n	80014a8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	689b      	ldr	r3, [r3, #8]
 80014ca:	2b01      	cmp	r3, #1
 80014cc:	d108      	bne.n	80014e0 <HAL_RCC_OscConfig+0x4d8>
 80014ce:	4b0f      	ldr	r3, [pc, #60]	@ (800150c <HAL_RCC_OscConfig+0x504>)
 80014d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80014d4:	4a0d      	ldr	r2, [pc, #52]	@ (800150c <HAL_RCC_OscConfig+0x504>)
 80014d6:	f043 0301 	orr.w	r3, r3, #1
 80014da:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80014de:	e029      	b.n	8001534 <HAL_RCC_OscConfig+0x52c>
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	689b      	ldr	r3, [r3, #8]
 80014e4:	2b05      	cmp	r3, #5
 80014e6:	d115      	bne.n	8001514 <HAL_RCC_OscConfig+0x50c>
 80014e8:	4b08      	ldr	r3, [pc, #32]	@ (800150c <HAL_RCC_OscConfig+0x504>)
 80014ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80014ee:	4a07      	ldr	r2, [pc, #28]	@ (800150c <HAL_RCC_OscConfig+0x504>)
 80014f0:	f043 0304 	orr.w	r3, r3, #4
 80014f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80014f8:	4b04      	ldr	r3, [pc, #16]	@ (800150c <HAL_RCC_OscConfig+0x504>)
 80014fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80014fe:	4a03      	ldr	r2, [pc, #12]	@ (800150c <HAL_RCC_OscConfig+0x504>)
 8001500:	f043 0301 	orr.w	r3, r3, #1
 8001504:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001508:	e014      	b.n	8001534 <HAL_RCC_OscConfig+0x52c>
 800150a:	bf00      	nop
 800150c:	40021000 	.word	0x40021000
 8001510:	40007000 	.word	0x40007000
 8001514:	4b9c      	ldr	r3, [pc, #624]	@ (8001788 <HAL_RCC_OscConfig+0x780>)
 8001516:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800151a:	4a9b      	ldr	r2, [pc, #620]	@ (8001788 <HAL_RCC_OscConfig+0x780>)
 800151c:	f023 0301 	bic.w	r3, r3, #1
 8001520:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001524:	4b98      	ldr	r3, [pc, #608]	@ (8001788 <HAL_RCC_OscConfig+0x780>)
 8001526:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800152a:	4a97      	ldr	r2, [pc, #604]	@ (8001788 <HAL_RCC_OscConfig+0x780>)
 800152c:	f023 0304 	bic.w	r3, r3, #4
 8001530:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	689b      	ldr	r3, [r3, #8]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d016      	beq.n	800156a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800153c:	f7ff fa32 	bl	80009a4 <HAL_GetTick>
 8001540:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001542:	e00a      	b.n	800155a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001544:	f7ff fa2e 	bl	80009a4 <HAL_GetTick>
 8001548:	4602      	mov	r2, r0
 800154a:	693b      	ldr	r3, [r7, #16]
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001552:	4293      	cmp	r3, r2
 8001554:	d901      	bls.n	800155a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001556:	2303      	movs	r3, #3
 8001558:	e12a      	b.n	80017b0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800155a:	4b8b      	ldr	r3, [pc, #556]	@ (8001788 <HAL_RCC_OscConfig+0x780>)
 800155c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001560:	f003 0302 	and.w	r3, r3, #2
 8001564:	2b00      	cmp	r3, #0
 8001566:	d0ed      	beq.n	8001544 <HAL_RCC_OscConfig+0x53c>
 8001568:	e015      	b.n	8001596 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800156a:	f7ff fa1b 	bl	80009a4 <HAL_GetTick>
 800156e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001570:	e00a      	b.n	8001588 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001572:	f7ff fa17 	bl	80009a4 <HAL_GetTick>
 8001576:	4602      	mov	r2, r0
 8001578:	693b      	ldr	r3, [r7, #16]
 800157a:	1ad3      	subs	r3, r2, r3
 800157c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001580:	4293      	cmp	r3, r2
 8001582:	d901      	bls.n	8001588 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001584:	2303      	movs	r3, #3
 8001586:	e113      	b.n	80017b0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001588:	4b7f      	ldr	r3, [pc, #508]	@ (8001788 <HAL_RCC_OscConfig+0x780>)
 800158a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800158e:	f003 0302 	and.w	r3, r3, #2
 8001592:	2b00      	cmp	r3, #0
 8001594:	d1ed      	bne.n	8001572 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001596:	7ffb      	ldrb	r3, [r7, #31]
 8001598:	2b01      	cmp	r3, #1
 800159a:	d105      	bne.n	80015a8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800159c:	4b7a      	ldr	r3, [pc, #488]	@ (8001788 <HAL_RCC_OscConfig+0x780>)
 800159e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015a0:	4a79      	ldr	r2, [pc, #484]	@ (8001788 <HAL_RCC_OscConfig+0x780>)
 80015a2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80015a6:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	f000 80fe 	beq.w	80017ae <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015b6:	2b02      	cmp	r3, #2
 80015b8:	f040 80d0 	bne.w	800175c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80015bc:	4b72      	ldr	r3, [pc, #456]	@ (8001788 <HAL_RCC_OscConfig+0x780>)
 80015be:	68db      	ldr	r3, [r3, #12]
 80015c0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	f003 0203 	and.w	r2, r3, #3
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015cc:	429a      	cmp	r2, r3
 80015ce:	d130      	bne.n	8001632 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015da:	3b01      	subs	r3, #1
 80015dc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80015de:	429a      	cmp	r2, r3
 80015e0:	d127      	bne.n	8001632 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80015e2:	697b      	ldr	r3, [r7, #20]
 80015e4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80015ec:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80015ee:	429a      	cmp	r2, r3
 80015f0:	d11f      	bne.n	8001632 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015f8:	687a      	ldr	r2, [r7, #4]
 80015fa:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80015fc:	2a07      	cmp	r2, #7
 80015fe:	bf14      	ite	ne
 8001600:	2201      	movne	r2, #1
 8001602:	2200      	moveq	r2, #0
 8001604:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001606:	4293      	cmp	r3, r2
 8001608:	d113      	bne.n	8001632 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800160a:	697b      	ldr	r3, [r7, #20]
 800160c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001614:	085b      	lsrs	r3, r3, #1
 8001616:	3b01      	subs	r3, #1
 8001618:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800161a:	429a      	cmp	r2, r3
 800161c:	d109      	bne.n	8001632 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800161e:	697b      	ldr	r3, [r7, #20]
 8001620:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001628:	085b      	lsrs	r3, r3, #1
 800162a:	3b01      	subs	r3, #1
 800162c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800162e:	429a      	cmp	r2, r3
 8001630:	d06e      	beq.n	8001710 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001632:	69bb      	ldr	r3, [r7, #24]
 8001634:	2b0c      	cmp	r3, #12
 8001636:	d069      	beq.n	800170c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001638:	4b53      	ldr	r3, [pc, #332]	@ (8001788 <HAL_RCC_OscConfig+0x780>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001640:	2b00      	cmp	r3, #0
 8001642:	d105      	bne.n	8001650 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001644:	4b50      	ldr	r3, [pc, #320]	@ (8001788 <HAL_RCC_OscConfig+0x780>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800164c:	2b00      	cmp	r3, #0
 800164e:	d001      	beq.n	8001654 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001650:	2301      	movs	r3, #1
 8001652:	e0ad      	b.n	80017b0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001654:	4b4c      	ldr	r3, [pc, #304]	@ (8001788 <HAL_RCC_OscConfig+0x780>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a4b      	ldr	r2, [pc, #300]	@ (8001788 <HAL_RCC_OscConfig+0x780>)
 800165a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800165e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001660:	f7ff f9a0 	bl	80009a4 <HAL_GetTick>
 8001664:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001666:	e008      	b.n	800167a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001668:	f7ff f99c 	bl	80009a4 <HAL_GetTick>
 800166c:	4602      	mov	r2, r0
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	1ad3      	subs	r3, r2, r3
 8001672:	2b02      	cmp	r3, #2
 8001674:	d901      	bls.n	800167a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001676:	2303      	movs	r3, #3
 8001678:	e09a      	b.n	80017b0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800167a:	4b43      	ldr	r3, [pc, #268]	@ (8001788 <HAL_RCC_OscConfig+0x780>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001682:	2b00      	cmp	r3, #0
 8001684:	d1f0      	bne.n	8001668 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001686:	4b40      	ldr	r3, [pc, #256]	@ (8001788 <HAL_RCC_OscConfig+0x780>)
 8001688:	68da      	ldr	r2, [r3, #12]
 800168a:	4b40      	ldr	r3, [pc, #256]	@ (800178c <HAL_RCC_OscConfig+0x784>)
 800168c:	4013      	ands	r3, r2
 800168e:	687a      	ldr	r2, [r7, #4]
 8001690:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001692:	687a      	ldr	r2, [r7, #4]
 8001694:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001696:	3a01      	subs	r2, #1
 8001698:	0112      	lsls	r2, r2, #4
 800169a:	4311      	orrs	r1, r2
 800169c:	687a      	ldr	r2, [r7, #4]
 800169e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80016a0:	0212      	lsls	r2, r2, #8
 80016a2:	4311      	orrs	r1, r2
 80016a4:	687a      	ldr	r2, [r7, #4]
 80016a6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80016a8:	0852      	lsrs	r2, r2, #1
 80016aa:	3a01      	subs	r2, #1
 80016ac:	0552      	lsls	r2, r2, #21
 80016ae:	4311      	orrs	r1, r2
 80016b0:	687a      	ldr	r2, [r7, #4]
 80016b2:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80016b4:	0852      	lsrs	r2, r2, #1
 80016b6:	3a01      	subs	r2, #1
 80016b8:	0652      	lsls	r2, r2, #25
 80016ba:	4311      	orrs	r1, r2
 80016bc:	687a      	ldr	r2, [r7, #4]
 80016be:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80016c0:	0912      	lsrs	r2, r2, #4
 80016c2:	0452      	lsls	r2, r2, #17
 80016c4:	430a      	orrs	r2, r1
 80016c6:	4930      	ldr	r1, [pc, #192]	@ (8001788 <HAL_RCC_OscConfig+0x780>)
 80016c8:	4313      	orrs	r3, r2
 80016ca:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80016cc:	4b2e      	ldr	r3, [pc, #184]	@ (8001788 <HAL_RCC_OscConfig+0x780>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a2d      	ldr	r2, [pc, #180]	@ (8001788 <HAL_RCC_OscConfig+0x780>)
 80016d2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80016d6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80016d8:	4b2b      	ldr	r3, [pc, #172]	@ (8001788 <HAL_RCC_OscConfig+0x780>)
 80016da:	68db      	ldr	r3, [r3, #12]
 80016dc:	4a2a      	ldr	r2, [pc, #168]	@ (8001788 <HAL_RCC_OscConfig+0x780>)
 80016de:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80016e2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80016e4:	f7ff f95e 	bl	80009a4 <HAL_GetTick>
 80016e8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80016ea:	e008      	b.n	80016fe <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016ec:	f7ff f95a 	bl	80009a4 <HAL_GetTick>
 80016f0:	4602      	mov	r2, r0
 80016f2:	693b      	ldr	r3, [r7, #16]
 80016f4:	1ad3      	subs	r3, r2, r3
 80016f6:	2b02      	cmp	r3, #2
 80016f8:	d901      	bls.n	80016fe <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80016fa:	2303      	movs	r3, #3
 80016fc:	e058      	b.n	80017b0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80016fe:	4b22      	ldr	r3, [pc, #136]	@ (8001788 <HAL_RCC_OscConfig+0x780>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001706:	2b00      	cmp	r3, #0
 8001708:	d0f0      	beq.n	80016ec <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800170a:	e050      	b.n	80017ae <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800170c:	2301      	movs	r3, #1
 800170e:	e04f      	b.n	80017b0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001710:	4b1d      	ldr	r3, [pc, #116]	@ (8001788 <HAL_RCC_OscConfig+0x780>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001718:	2b00      	cmp	r3, #0
 800171a:	d148      	bne.n	80017ae <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800171c:	4b1a      	ldr	r3, [pc, #104]	@ (8001788 <HAL_RCC_OscConfig+0x780>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a19      	ldr	r2, [pc, #100]	@ (8001788 <HAL_RCC_OscConfig+0x780>)
 8001722:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001726:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001728:	4b17      	ldr	r3, [pc, #92]	@ (8001788 <HAL_RCC_OscConfig+0x780>)
 800172a:	68db      	ldr	r3, [r3, #12]
 800172c:	4a16      	ldr	r2, [pc, #88]	@ (8001788 <HAL_RCC_OscConfig+0x780>)
 800172e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001732:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001734:	f7ff f936 	bl	80009a4 <HAL_GetTick>
 8001738:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800173a:	e008      	b.n	800174e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800173c:	f7ff f932 	bl	80009a4 <HAL_GetTick>
 8001740:	4602      	mov	r2, r0
 8001742:	693b      	ldr	r3, [r7, #16]
 8001744:	1ad3      	subs	r3, r2, r3
 8001746:	2b02      	cmp	r3, #2
 8001748:	d901      	bls.n	800174e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800174a:	2303      	movs	r3, #3
 800174c:	e030      	b.n	80017b0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800174e:	4b0e      	ldr	r3, [pc, #56]	@ (8001788 <HAL_RCC_OscConfig+0x780>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001756:	2b00      	cmp	r3, #0
 8001758:	d0f0      	beq.n	800173c <HAL_RCC_OscConfig+0x734>
 800175a:	e028      	b.n	80017ae <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800175c:	69bb      	ldr	r3, [r7, #24]
 800175e:	2b0c      	cmp	r3, #12
 8001760:	d023      	beq.n	80017aa <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001762:	4b09      	ldr	r3, [pc, #36]	@ (8001788 <HAL_RCC_OscConfig+0x780>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4a08      	ldr	r2, [pc, #32]	@ (8001788 <HAL_RCC_OscConfig+0x780>)
 8001768:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800176c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800176e:	f7ff f919 	bl	80009a4 <HAL_GetTick>
 8001772:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001774:	e00c      	b.n	8001790 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001776:	f7ff f915 	bl	80009a4 <HAL_GetTick>
 800177a:	4602      	mov	r2, r0
 800177c:	693b      	ldr	r3, [r7, #16]
 800177e:	1ad3      	subs	r3, r2, r3
 8001780:	2b02      	cmp	r3, #2
 8001782:	d905      	bls.n	8001790 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001784:	2303      	movs	r3, #3
 8001786:	e013      	b.n	80017b0 <HAL_RCC_OscConfig+0x7a8>
 8001788:	40021000 	.word	0x40021000
 800178c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001790:	4b09      	ldr	r3, [pc, #36]	@ (80017b8 <HAL_RCC_OscConfig+0x7b0>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001798:	2b00      	cmp	r3, #0
 800179a:	d1ec      	bne.n	8001776 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800179c:	4b06      	ldr	r3, [pc, #24]	@ (80017b8 <HAL_RCC_OscConfig+0x7b0>)
 800179e:	68da      	ldr	r2, [r3, #12]
 80017a0:	4905      	ldr	r1, [pc, #20]	@ (80017b8 <HAL_RCC_OscConfig+0x7b0>)
 80017a2:	4b06      	ldr	r3, [pc, #24]	@ (80017bc <HAL_RCC_OscConfig+0x7b4>)
 80017a4:	4013      	ands	r3, r2
 80017a6:	60cb      	str	r3, [r1, #12]
 80017a8:	e001      	b.n	80017ae <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
 80017ac:	e000      	b.n	80017b0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80017ae:	2300      	movs	r3, #0
}
 80017b0:	4618      	mov	r0, r3
 80017b2:	3720      	adds	r7, #32
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	40021000 	.word	0x40021000
 80017bc:	feeefffc 	.word	0xfeeefffc

080017c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b084      	sub	sp, #16
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
 80017c8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d101      	bne.n	80017d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017d0:	2301      	movs	r3, #1
 80017d2:	e0e7      	b.n	80019a4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017d4:	4b75      	ldr	r3, [pc, #468]	@ (80019ac <HAL_RCC_ClockConfig+0x1ec>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f003 0307 	and.w	r3, r3, #7
 80017dc:	683a      	ldr	r2, [r7, #0]
 80017de:	429a      	cmp	r2, r3
 80017e0:	d910      	bls.n	8001804 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017e2:	4b72      	ldr	r3, [pc, #456]	@ (80019ac <HAL_RCC_ClockConfig+0x1ec>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f023 0207 	bic.w	r2, r3, #7
 80017ea:	4970      	ldr	r1, [pc, #448]	@ (80019ac <HAL_RCC_ClockConfig+0x1ec>)
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	4313      	orrs	r3, r2
 80017f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017f2:	4b6e      	ldr	r3, [pc, #440]	@ (80019ac <HAL_RCC_ClockConfig+0x1ec>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f003 0307 	and.w	r3, r3, #7
 80017fa:	683a      	ldr	r2, [r7, #0]
 80017fc:	429a      	cmp	r2, r3
 80017fe:	d001      	beq.n	8001804 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001800:	2301      	movs	r3, #1
 8001802:	e0cf      	b.n	80019a4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f003 0302 	and.w	r3, r3, #2
 800180c:	2b00      	cmp	r3, #0
 800180e:	d010      	beq.n	8001832 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	689a      	ldr	r2, [r3, #8]
 8001814:	4b66      	ldr	r3, [pc, #408]	@ (80019b0 <HAL_RCC_ClockConfig+0x1f0>)
 8001816:	689b      	ldr	r3, [r3, #8]
 8001818:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800181c:	429a      	cmp	r2, r3
 800181e:	d908      	bls.n	8001832 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001820:	4b63      	ldr	r3, [pc, #396]	@ (80019b0 <HAL_RCC_ClockConfig+0x1f0>)
 8001822:	689b      	ldr	r3, [r3, #8]
 8001824:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	689b      	ldr	r3, [r3, #8]
 800182c:	4960      	ldr	r1, [pc, #384]	@ (80019b0 <HAL_RCC_ClockConfig+0x1f0>)
 800182e:	4313      	orrs	r3, r2
 8001830:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f003 0301 	and.w	r3, r3, #1
 800183a:	2b00      	cmp	r3, #0
 800183c:	d04c      	beq.n	80018d8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	2b03      	cmp	r3, #3
 8001844:	d107      	bne.n	8001856 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001846:	4b5a      	ldr	r3, [pc, #360]	@ (80019b0 <HAL_RCC_ClockConfig+0x1f0>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800184e:	2b00      	cmp	r3, #0
 8001850:	d121      	bne.n	8001896 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	e0a6      	b.n	80019a4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	2b02      	cmp	r3, #2
 800185c:	d107      	bne.n	800186e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800185e:	4b54      	ldr	r3, [pc, #336]	@ (80019b0 <HAL_RCC_ClockConfig+0x1f0>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001866:	2b00      	cmp	r3, #0
 8001868:	d115      	bne.n	8001896 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800186a:	2301      	movs	r3, #1
 800186c:	e09a      	b.n	80019a4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d107      	bne.n	8001886 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001876:	4b4e      	ldr	r3, [pc, #312]	@ (80019b0 <HAL_RCC_ClockConfig+0x1f0>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f003 0302 	and.w	r3, r3, #2
 800187e:	2b00      	cmp	r3, #0
 8001880:	d109      	bne.n	8001896 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001882:	2301      	movs	r3, #1
 8001884:	e08e      	b.n	80019a4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001886:	4b4a      	ldr	r3, [pc, #296]	@ (80019b0 <HAL_RCC_ClockConfig+0x1f0>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800188e:	2b00      	cmp	r3, #0
 8001890:	d101      	bne.n	8001896 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001892:	2301      	movs	r3, #1
 8001894:	e086      	b.n	80019a4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001896:	4b46      	ldr	r3, [pc, #280]	@ (80019b0 <HAL_RCC_ClockConfig+0x1f0>)
 8001898:	689b      	ldr	r3, [r3, #8]
 800189a:	f023 0203 	bic.w	r2, r3, #3
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	4943      	ldr	r1, [pc, #268]	@ (80019b0 <HAL_RCC_ClockConfig+0x1f0>)
 80018a4:	4313      	orrs	r3, r2
 80018a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80018a8:	f7ff f87c 	bl	80009a4 <HAL_GetTick>
 80018ac:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018ae:	e00a      	b.n	80018c6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018b0:	f7ff f878 	bl	80009a4 <HAL_GetTick>
 80018b4:	4602      	mov	r2, r0
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	1ad3      	subs	r3, r2, r3
 80018ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018be:	4293      	cmp	r3, r2
 80018c0:	d901      	bls.n	80018c6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80018c2:	2303      	movs	r3, #3
 80018c4:	e06e      	b.n	80019a4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018c6:	4b3a      	ldr	r3, [pc, #232]	@ (80019b0 <HAL_RCC_ClockConfig+0x1f0>)
 80018c8:	689b      	ldr	r3, [r3, #8]
 80018ca:	f003 020c 	and.w	r2, r3, #12
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	009b      	lsls	r3, r3, #2
 80018d4:	429a      	cmp	r2, r3
 80018d6:	d1eb      	bne.n	80018b0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f003 0302 	and.w	r3, r3, #2
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d010      	beq.n	8001906 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	689a      	ldr	r2, [r3, #8]
 80018e8:	4b31      	ldr	r3, [pc, #196]	@ (80019b0 <HAL_RCC_ClockConfig+0x1f0>)
 80018ea:	689b      	ldr	r3, [r3, #8]
 80018ec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80018f0:	429a      	cmp	r2, r3
 80018f2:	d208      	bcs.n	8001906 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018f4:	4b2e      	ldr	r3, [pc, #184]	@ (80019b0 <HAL_RCC_ClockConfig+0x1f0>)
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	492b      	ldr	r1, [pc, #172]	@ (80019b0 <HAL_RCC_ClockConfig+0x1f0>)
 8001902:	4313      	orrs	r3, r2
 8001904:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001906:	4b29      	ldr	r3, [pc, #164]	@ (80019ac <HAL_RCC_ClockConfig+0x1ec>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f003 0307 	and.w	r3, r3, #7
 800190e:	683a      	ldr	r2, [r7, #0]
 8001910:	429a      	cmp	r2, r3
 8001912:	d210      	bcs.n	8001936 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001914:	4b25      	ldr	r3, [pc, #148]	@ (80019ac <HAL_RCC_ClockConfig+0x1ec>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f023 0207 	bic.w	r2, r3, #7
 800191c:	4923      	ldr	r1, [pc, #140]	@ (80019ac <HAL_RCC_ClockConfig+0x1ec>)
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	4313      	orrs	r3, r2
 8001922:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001924:	4b21      	ldr	r3, [pc, #132]	@ (80019ac <HAL_RCC_ClockConfig+0x1ec>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f003 0307 	and.w	r3, r3, #7
 800192c:	683a      	ldr	r2, [r7, #0]
 800192e:	429a      	cmp	r2, r3
 8001930:	d001      	beq.n	8001936 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001932:	2301      	movs	r3, #1
 8001934:	e036      	b.n	80019a4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f003 0304 	and.w	r3, r3, #4
 800193e:	2b00      	cmp	r3, #0
 8001940:	d008      	beq.n	8001954 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001942:	4b1b      	ldr	r3, [pc, #108]	@ (80019b0 <HAL_RCC_ClockConfig+0x1f0>)
 8001944:	689b      	ldr	r3, [r3, #8]
 8001946:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	68db      	ldr	r3, [r3, #12]
 800194e:	4918      	ldr	r1, [pc, #96]	@ (80019b0 <HAL_RCC_ClockConfig+0x1f0>)
 8001950:	4313      	orrs	r3, r2
 8001952:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f003 0308 	and.w	r3, r3, #8
 800195c:	2b00      	cmp	r3, #0
 800195e:	d009      	beq.n	8001974 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001960:	4b13      	ldr	r3, [pc, #76]	@ (80019b0 <HAL_RCC_ClockConfig+0x1f0>)
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	691b      	ldr	r3, [r3, #16]
 800196c:	00db      	lsls	r3, r3, #3
 800196e:	4910      	ldr	r1, [pc, #64]	@ (80019b0 <HAL_RCC_ClockConfig+0x1f0>)
 8001970:	4313      	orrs	r3, r2
 8001972:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001974:	f000 f824 	bl	80019c0 <HAL_RCC_GetSysClockFreq>
 8001978:	4602      	mov	r2, r0
 800197a:	4b0d      	ldr	r3, [pc, #52]	@ (80019b0 <HAL_RCC_ClockConfig+0x1f0>)
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	091b      	lsrs	r3, r3, #4
 8001980:	f003 030f 	and.w	r3, r3, #15
 8001984:	490b      	ldr	r1, [pc, #44]	@ (80019b4 <HAL_RCC_ClockConfig+0x1f4>)
 8001986:	5ccb      	ldrb	r3, [r1, r3]
 8001988:	f003 031f 	and.w	r3, r3, #31
 800198c:	fa22 f303 	lsr.w	r3, r2, r3
 8001990:	4a09      	ldr	r2, [pc, #36]	@ (80019b8 <HAL_RCC_ClockConfig+0x1f8>)
 8001992:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001994:	4b09      	ldr	r3, [pc, #36]	@ (80019bc <HAL_RCC_ClockConfig+0x1fc>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4618      	mov	r0, r3
 800199a:	f7fe ffb3 	bl	8000904 <HAL_InitTick>
 800199e:	4603      	mov	r3, r0
 80019a0:	72fb      	strb	r3, [r7, #11]

  return status;
 80019a2:	7afb      	ldrb	r3, [r7, #11]
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	3710      	adds	r7, #16
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	40022000 	.word	0x40022000
 80019b0:	40021000 	.word	0x40021000
 80019b4:	08005bfc 	.word	0x08005bfc
 80019b8:	20000000 	.word	0x20000000
 80019bc:	20000004 	.word	0x20000004

080019c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b089      	sub	sp, #36	@ 0x24
 80019c4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80019c6:	2300      	movs	r3, #0
 80019c8:	61fb      	str	r3, [r7, #28]
 80019ca:	2300      	movs	r3, #0
 80019cc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80019ce:	4b3e      	ldr	r3, [pc, #248]	@ (8001ac8 <HAL_RCC_GetSysClockFreq+0x108>)
 80019d0:	689b      	ldr	r3, [r3, #8]
 80019d2:	f003 030c 	and.w	r3, r3, #12
 80019d6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80019d8:	4b3b      	ldr	r3, [pc, #236]	@ (8001ac8 <HAL_RCC_GetSysClockFreq+0x108>)
 80019da:	68db      	ldr	r3, [r3, #12]
 80019dc:	f003 0303 	and.w	r3, r3, #3
 80019e0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80019e2:	693b      	ldr	r3, [r7, #16]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d005      	beq.n	80019f4 <HAL_RCC_GetSysClockFreq+0x34>
 80019e8:	693b      	ldr	r3, [r7, #16]
 80019ea:	2b0c      	cmp	r3, #12
 80019ec:	d121      	bne.n	8001a32 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	d11e      	bne.n	8001a32 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80019f4:	4b34      	ldr	r3, [pc, #208]	@ (8001ac8 <HAL_RCC_GetSysClockFreq+0x108>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f003 0308 	and.w	r3, r3, #8
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d107      	bne.n	8001a10 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001a00:	4b31      	ldr	r3, [pc, #196]	@ (8001ac8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a02:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a06:	0a1b      	lsrs	r3, r3, #8
 8001a08:	f003 030f 	and.w	r3, r3, #15
 8001a0c:	61fb      	str	r3, [r7, #28]
 8001a0e:	e005      	b.n	8001a1c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001a10:	4b2d      	ldr	r3, [pc, #180]	@ (8001ac8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	091b      	lsrs	r3, r3, #4
 8001a16:	f003 030f 	and.w	r3, r3, #15
 8001a1a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001a1c:	4a2b      	ldr	r2, [pc, #172]	@ (8001acc <HAL_RCC_GetSysClockFreq+0x10c>)
 8001a1e:	69fb      	ldr	r3, [r7, #28]
 8001a20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a24:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d10d      	bne.n	8001a48 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001a2c:	69fb      	ldr	r3, [r7, #28]
 8001a2e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001a30:	e00a      	b.n	8001a48 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001a32:	693b      	ldr	r3, [r7, #16]
 8001a34:	2b04      	cmp	r3, #4
 8001a36:	d102      	bne.n	8001a3e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001a38:	4b25      	ldr	r3, [pc, #148]	@ (8001ad0 <HAL_RCC_GetSysClockFreq+0x110>)
 8001a3a:	61bb      	str	r3, [r7, #24]
 8001a3c:	e004      	b.n	8001a48 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	2b08      	cmp	r3, #8
 8001a42:	d101      	bne.n	8001a48 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001a44:	4b23      	ldr	r3, [pc, #140]	@ (8001ad4 <HAL_RCC_GetSysClockFreq+0x114>)
 8001a46:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001a48:	693b      	ldr	r3, [r7, #16]
 8001a4a:	2b0c      	cmp	r3, #12
 8001a4c:	d134      	bne.n	8001ab8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001a4e:	4b1e      	ldr	r3, [pc, #120]	@ (8001ac8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a50:	68db      	ldr	r3, [r3, #12]
 8001a52:	f003 0303 	and.w	r3, r3, #3
 8001a56:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001a58:	68bb      	ldr	r3, [r7, #8]
 8001a5a:	2b02      	cmp	r3, #2
 8001a5c:	d003      	beq.n	8001a66 <HAL_RCC_GetSysClockFreq+0xa6>
 8001a5e:	68bb      	ldr	r3, [r7, #8]
 8001a60:	2b03      	cmp	r3, #3
 8001a62:	d003      	beq.n	8001a6c <HAL_RCC_GetSysClockFreq+0xac>
 8001a64:	e005      	b.n	8001a72 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001a66:	4b1a      	ldr	r3, [pc, #104]	@ (8001ad0 <HAL_RCC_GetSysClockFreq+0x110>)
 8001a68:	617b      	str	r3, [r7, #20]
      break;
 8001a6a:	e005      	b.n	8001a78 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001a6c:	4b19      	ldr	r3, [pc, #100]	@ (8001ad4 <HAL_RCC_GetSysClockFreq+0x114>)
 8001a6e:	617b      	str	r3, [r7, #20]
      break;
 8001a70:	e002      	b.n	8001a78 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001a72:	69fb      	ldr	r3, [r7, #28]
 8001a74:	617b      	str	r3, [r7, #20]
      break;
 8001a76:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001a78:	4b13      	ldr	r3, [pc, #76]	@ (8001ac8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a7a:	68db      	ldr	r3, [r3, #12]
 8001a7c:	091b      	lsrs	r3, r3, #4
 8001a7e:	f003 0307 	and.w	r3, r3, #7
 8001a82:	3301      	adds	r3, #1
 8001a84:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001a86:	4b10      	ldr	r3, [pc, #64]	@ (8001ac8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a88:	68db      	ldr	r3, [r3, #12]
 8001a8a:	0a1b      	lsrs	r3, r3, #8
 8001a8c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001a90:	697a      	ldr	r2, [r7, #20]
 8001a92:	fb03 f202 	mul.w	r2, r3, r2
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a9c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001a9e:	4b0a      	ldr	r3, [pc, #40]	@ (8001ac8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001aa0:	68db      	ldr	r3, [r3, #12]
 8001aa2:	0e5b      	lsrs	r3, r3, #25
 8001aa4:	f003 0303 	and.w	r3, r3, #3
 8001aa8:	3301      	adds	r3, #1
 8001aaa:	005b      	lsls	r3, r3, #1
 8001aac:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001aae:	697a      	ldr	r2, [r7, #20]
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ab6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001ab8:	69bb      	ldr	r3, [r7, #24]
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	3724      	adds	r7, #36	@ 0x24
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr
 8001ac6:	bf00      	nop
 8001ac8:	40021000 	.word	0x40021000
 8001acc:	08005c14 	.word	0x08005c14
 8001ad0:	00f42400 	.word	0x00f42400
 8001ad4:	007a1200 	.word	0x007a1200

08001ad8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001adc:	4b03      	ldr	r3, [pc, #12]	@ (8001aec <HAL_RCC_GetHCLKFreq+0x14>)
 8001ade:	681b      	ldr	r3, [r3, #0]
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr
 8001aea:	bf00      	nop
 8001aec:	20000000 	.word	0x20000000

08001af0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001af4:	f7ff fff0 	bl	8001ad8 <HAL_RCC_GetHCLKFreq>
 8001af8:	4602      	mov	r2, r0
 8001afa:	4b06      	ldr	r3, [pc, #24]	@ (8001b14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001afc:	689b      	ldr	r3, [r3, #8]
 8001afe:	0a1b      	lsrs	r3, r3, #8
 8001b00:	f003 0307 	and.w	r3, r3, #7
 8001b04:	4904      	ldr	r1, [pc, #16]	@ (8001b18 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001b06:	5ccb      	ldrb	r3, [r1, r3]
 8001b08:	f003 031f 	and.w	r3, r3, #31
 8001b0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	40021000 	.word	0x40021000
 8001b18:	08005c0c 	.word	0x08005c0c

08001b1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001b20:	f7ff ffda 	bl	8001ad8 <HAL_RCC_GetHCLKFreq>
 8001b24:	4602      	mov	r2, r0
 8001b26:	4b06      	ldr	r3, [pc, #24]	@ (8001b40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	0adb      	lsrs	r3, r3, #11
 8001b2c:	f003 0307 	and.w	r3, r3, #7
 8001b30:	4904      	ldr	r1, [pc, #16]	@ (8001b44 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001b32:	5ccb      	ldrb	r3, [r1, r3]
 8001b34:	f003 031f 	and.w	r3, r3, #31
 8001b38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	40021000 	.word	0x40021000
 8001b44:	08005c0c 	.word	0x08005c0c

08001b48 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b086      	sub	sp, #24
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001b50:	2300      	movs	r3, #0
 8001b52:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001b54:	4b2a      	ldr	r3, [pc, #168]	@ (8001c00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b58:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d003      	beq.n	8001b68 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001b60:	f7ff f9ee 	bl	8000f40 <HAL_PWREx_GetVoltageRange>
 8001b64:	6178      	str	r0, [r7, #20]
 8001b66:	e014      	b.n	8001b92 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001b68:	4b25      	ldr	r3, [pc, #148]	@ (8001c00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b6c:	4a24      	ldr	r2, [pc, #144]	@ (8001c00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b6e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b72:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b74:	4b22      	ldr	r3, [pc, #136]	@ (8001c00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b78:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b7c:	60fb      	str	r3, [r7, #12]
 8001b7e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001b80:	f7ff f9de 	bl	8000f40 <HAL_PWREx_GetVoltageRange>
 8001b84:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001b86:	4b1e      	ldr	r3, [pc, #120]	@ (8001c00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b8a:	4a1d      	ldr	r2, [pc, #116]	@ (8001c00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b8c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001b90:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001b98:	d10b      	bne.n	8001bb2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2b80      	cmp	r3, #128	@ 0x80
 8001b9e:	d919      	bls.n	8001bd4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2ba0      	cmp	r3, #160	@ 0xa0
 8001ba4:	d902      	bls.n	8001bac <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001ba6:	2302      	movs	r3, #2
 8001ba8:	613b      	str	r3, [r7, #16]
 8001baa:	e013      	b.n	8001bd4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001bac:	2301      	movs	r3, #1
 8001bae:	613b      	str	r3, [r7, #16]
 8001bb0:	e010      	b.n	8001bd4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2b80      	cmp	r3, #128	@ 0x80
 8001bb6:	d902      	bls.n	8001bbe <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001bb8:	2303      	movs	r3, #3
 8001bba:	613b      	str	r3, [r7, #16]
 8001bbc:	e00a      	b.n	8001bd4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2b80      	cmp	r3, #128	@ 0x80
 8001bc2:	d102      	bne.n	8001bca <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001bc4:	2302      	movs	r3, #2
 8001bc6:	613b      	str	r3, [r7, #16]
 8001bc8:	e004      	b.n	8001bd4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2b70      	cmp	r3, #112	@ 0x70
 8001bce:	d101      	bne.n	8001bd4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001bd4:	4b0b      	ldr	r3, [pc, #44]	@ (8001c04 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f023 0207 	bic.w	r2, r3, #7
 8001bdc:	4909      	ldr	r1, [pc, #36]	@ (8001c04 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	4313      	orrs	r3, r2
 8001be2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001be4:	4b07      	ldr	r3, [pc, #28]	@ (8001c04 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f003 0307 	and.w	r3, r3, #7
 8001bec:	693a      	ldr	r2, [r7, #16]
 8001bee:	429a      	cmp	r2, r3
 8001bf0:	d001      	beq.n	8001bf6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e000      	b.n	8001bf8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001bf6:	2300      	movs	r3, #0
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	3718      	adds	r7, #24
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	40021000 	.word	0x40021000
 8001c04:	40022000 	.word	0x40022000

08001c08 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b086      	sub	sp, #24
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001c10:	2300      	movs	r3, #0
 8001c12:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001c14:	2300      	movs	r3, #0
 8001c16:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d041      	beq.n	8001ca8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001c28:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001c2c:	d02a      	beq.n	8001c84 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001c2e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001c32:	d824      	bhi.n	8001c7e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001c34:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001c38:	d008      	beq.n	8001c4c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001c3a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001c3e:	d81e      	bhi.n	8001c7e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d00a      	beq.n	8001c5a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001c44:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001c48:	d010      	beq.n	8001c6c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001c4a:	e018      	b.n	8001c7e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001c4c:	4b86      	ldr	r3, [pc, #536]	@ (8001e68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001c4e:	68db      	ldr	r3, [r3, #12]
 8001c50:	4a85      	ldr	r2, [pc, #532]	@ (8001e68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001c52:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c56:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001c58:	e015      	b.n	8001c86 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	3304      	adds	r3, #4
 8001c5e:	2100      	movs	r1, #0
 8001c60:	4618      	mov	r0, r3
 8001c62:	f000 fabb 	bl	80021dc <RCCEx_PLLSAI1_Config>
 8001c66:	4603      	mov	r3, r0
 8001c68:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001c6a:	e00c      	b.n	8001c86 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	3320      	adds	r3, #32
 8001c70:	2100      	movs	r1, #0
 8001c72:	4618      	mov	r0, r3
 8001c74:	f000 fba6 	bl	80023c4 <RCCEx_PLLSAI2_Config>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001c7c:	e003      	b.n	8001c86 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	74fb      	strb	r3, [r7, #19]
      break;
 8001c82:	e000      	b.n	8001c86 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001c84:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001c86:	7cfb      	ldrb	r3, [r7, #19]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d10b      	bne.n	8001ca4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001c8c:	4b76      	ldr	r3, [pc, #472]	@ (8001e68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001c8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c92:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001c9a:	4973      	ldr	r1, [pc, #460]	@ (8001e68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8001ca2:	e001      	b.n	8001ca8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001ca4:	7cfb      	ldrb	r3, [r7, #19]
 8001ca6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d041      	beq.n	8001d38 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001cb8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8001cbc:	d02a      	beq.n	8001d14 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8001cbe:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8001cc2:	d824      	bhi.n	8001d0e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001cc4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001cc8:	d008      	beq.n	8001cdc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001cca:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001cce:	d81e      	bhi.n	8001d0e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d00a      	beq.n	8001cea <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8001cd4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001cd8:	d010      	beq.n	8001cfc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001cda:	e018      	b.n	8001d0e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001cdc:	4b62      	ldr	r3, [pc, #392]	@ (8001e68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001cde:	68db      	ldr	r3, [r3, #12]
 8001ce0:	4a61      	ldr	r2, [pc, #388]	@ (8001e68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ce2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ce6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001ce8:	e015      	b.n	8001d16 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	3304      	adds	r3, #4
 8001cee:	2100      	movs	r1, #0
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f000 fa73 	bl	80021dc <RCCEx_PLLSAI1_Config>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001cfa:	e00c      	b.n	8001d16 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	3320      	adds	r3, #32
 8001d00:	2100      	movs	r1, #0
 8001d02:	4618      	mov	r0, r3
 8001d04:	f000 fb5e 	bl	80023c4 <RCCEx_PLLSAI2_Config>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001d0c:	e003      	b.n	8001d16 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	74fb      	strb	r3, [r7, #19]
      break;
 8001d12:	e000      	b.n	8001d16 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8001d14:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001d16:	7cfb      	ldrb	r3, [r7, #19]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d10b      	bne.n	8001d34 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001d1c:	4b52      	ldr	r3, [pc, #328]	@ (8001e68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d22:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001d2a:	494f      	ldr	r1, [pc, #316]	@ (8001e68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8001d32:	e001      	b.n	8001d38 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001d34:	7cfb      	ldrb	r3, [r7, #19]
 8001d36:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	f000 80a0 	beq.w	8001e86 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d46:	2300      	movs	r3, #0
 8001d48:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001d4a:	4b47      	ldr	r3, [pc, #284]	@ (8001e68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d101      	bne.n	8001d5a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8001d56:	2301      	movs	r3, #1
 8001d58:	e000      	b.n	8001d5c <HAL_RCCEx_PeriphCLKConfig+0x154>
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d00d      	beq.n	8001d7c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d60:	4b41      	ldr	r3, [pc, #260]	@ (8001e68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d64:	4a40      	ldr	r2, [pc, #256]	@ (8001e68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d66:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d6a:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d6c:	4b3e      	ldr	r3, [pc, #248]	@ (8001e68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d70:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d74:	60bb      	str	r3, [r7, #8]
 8001d76:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d7c:	4b3b      	ldr	r3, [pc, #236]	@ (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a3a      	ldr	r2, [pc, #232]	@ (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001d82:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d86:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001d88:	f7fe fe0c 	bl	80009a4 <HAL_GetTick>
 8001d8c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001d8e:	e009      	b.n	8001da4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d90:	f7fe fe08 	bl	80009a4 <HAL_GetTick>
 8001d94:	4602      	mov	r2, r0
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	1ad3      	subs	r3, r2, r3
 8001d9a:	2b02      	cmp	r3, #2
 8001d9c:	d902      	bls.n	8001da4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8001d9e:	2303      	movs	r3, #3
 8001da0:	74fb      	strb	r3, [r7, #19]
        break;
 8001da2:	e005      	b.n	8001db0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001da4:	4b31      	ldr	r3, [pc, #196]	@ (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d0ef      	beq.n	8001d90 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8001db0:	7cfb      	ldrb	r3, [r7, #19]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d15c      	bne.n	8001e70 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001db6:	4b2c      	ldr	r3, [pc, #176]	@ (8001e68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001db8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001dbc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001dc0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d01f      	beq.n	8001e08 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001dce:	697a      	ldr	r2, [r7, #20]
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	d019      	beq.n	8001e08 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001dd4:	4b24      	ldr	r3, [pc, #144]	@ (8001e68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001dd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001dda:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001dde:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001de0:	4b21      	ldr	r3, [pc, #132]	@ (8001e68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001de2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001de6:	4a20      	ldr	r2, [pc, #128]	@ (8001e68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001de8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001dec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001df0:	4b1d      	ldr	r3, [pc, #116]	@ (8001e68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001df2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001df6:	4a1c      	ldr	r2, [pc, #112]	@ (8001e68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001df8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001dfc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001e00:	4a19      	ldr	r2, [pc, #100]	@ (8001e68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	f003 0301 	and.w	r3, r3, #1
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d016      	beq.n	8001e40 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e12:	f7fe fdc7 	bl	80009a4 <HAL_GetTick>
 8001e16:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e18:	e00b      	b.n	8001e32 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e1a:	f7fe fdc3 	bl	80009a4 <HAL_GetTick>
 8001e1e:	4602      	mov	r2, r0
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	1ad3      	subs	r3, r2, r3
 8001e24:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d902      	bls.n	8001e32 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8001e2c:	2303      	movs	r3, #3
 8001e2e:	74fb      	strb	r3, [r7, #19]
            break;
 8001e30:	e006      	b.n	8001e40 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e32:	4b0d      	ldr	r3, [pc, #52]	@ (8001e68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e38:	f003 0302 	and.w	r3, r3, #2
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d0ec      	beq.n	8001e1a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8001e40:	7cfb      	ldrb	r3, [r7, #19]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d10c      	bne.n	8001e60 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001e46:	4b08      	ldr	r3, [pc, #32]	@ (8001e68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e4c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001e56:	4904      	ldr	r1, [pc, #16]	@ (8001e68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8001e5e:	e009      	b.n	8001e74 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001e60:	7cfb      	ldrb	r3, [r7, #19]
 8001e62:	74bb      	strb	r3, [r7, #18]
 8001e64:	e006      	b.n	8001e74 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8001e66:	bf00      	nop
 8001e68:	40021000 	.word	0x40021000
 8001e6c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001e70:	7cfb      	ldrb	r3, [r7, #19]
 8001e72:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e74:	7c7b      	ldrb	r3, [r7, #17]
 8001e76:	2b01      	cmp	r3, #1
 8001e78:	d105      	bne.n	8001e86 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e7a:	4b9e      	ldr	r3, [pc, #632]	@ (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001e7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e7e:	4a9d      	ldr	r2, [pc, #628]	@ (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001e80:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001e84:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f003 0301 	and.w	r3, r3, #1
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d00a      	beq.n	8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001e92:	4b98      	ldr	r3, [pc, #608]	@ (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001e94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e98:	f023 0203 	bic.w	r2, r3, #3
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ea0:	4994      	ldr	r1, [pc, #592]	@ (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f003 0302 	and.w	r3, r3, #2
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d00a      	beq.n	8001eca <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001eb4:	4b8f      	ldr	r3, [pc, #572]	@ (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001eb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001eba:	f023 020c 	bic.w	r2, r3, #12
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ec2:	498c      	ldr	r1, [pc, #560]	@ (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f003 0304 	and.w	r3, r3, #4
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d00a      	beq.n	8001eec <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001ed6:	4b87      	ldr	r3, [pc, #540]	@ (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001ed8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001edc:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ee4:	4983      	ldr	r1, [pc, #524]	@ (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f003 0308 	and.w	r3, r3, #8
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d00a      	beq.n	8001f0e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001ef8:	4b7e      	ldr	r3, [pc, #504]	@ (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001efa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001efe:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f06:	497b      	ldr	r1, [pc, #492]	@ (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f003 0310 	and.w	r3, r3, #16
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d00a      	beq.n	8001f30 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001f1a:	4b76      	ldr	r3, [pc, #472]	@ (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f20:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f28:	4972      	ldr	r1, [pc, #456]	@ (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f003 0320 	and.w	r3, r3, #32
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d00a      	beq.n	8001f52 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001f3c:	4b6d      	ldr	r3, [pc, #436]	@ (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f42:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f4a:	496a      	ldr	r1, [pc, #424]	@ (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d00a      	beq.n	8001f74 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001f5e:	4b65      	ldr	r3, [pc, #404]	@ (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f64:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f6c:	4961      	ldr	r1, [pc, #388]	@ (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d00a      	beq.n	8001f96 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001f80:	4b5c      	ldr	r3, [pc, #368]	@ (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f86:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f8e:	4959      	ldr	r1, [pc, #356]	@ (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f90:	4313      	orrs	r3, r2
 8001f92:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d00a      	beq.n	8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001fa2:	4b54      	ldr	r3, [pc, #336]	@ (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fa8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001fb0:	4950      	ldr	r1, [pc, #320]	@ (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d00a      	beq.n	8001fda <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001fc4:	4b4b      	ldr	r3, [pc, #300]	@ (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fca:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fd2:	4948      	ldr	r1, [pc, #288]	@ (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d00a      	beq.n	8001ffc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001fe6:	4b43      	ldr	r3, [pc, #268]	@ (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fe8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fec:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ff4:	493f      	ldr	r1, [pc, #252]	@ (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002004:	2b00      	cmp	r3, #0
 8002006:	d028      	beq.n	800205a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002008:	4b3a      	ldr	r3, [pc, #232]	@ (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800200a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800200e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002016:	4937      	ldr	r1, [pc, #220]	@ (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002018:	4313      	orrs	r3, r2
 800201a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002022:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002026:	d106      	bne.n	8002036 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002028:	4b32      	ldr	r3, [pc, #200]	@ (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800202a:	68db      	ldr	r3, [r3, #12]
 800202c:	4a31      	ldr	r2, [pc, #196]	@ (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800202e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002032:	60d3      	str	r3, [r2, #12]
 8002034:	e011      	b.n	800205a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800203a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800203e:	d10c      	bne.n	800205a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	3304      	adds	r3, #4
 8002044:	2101      	movs	r1, #1
 8002046:	4618      	mov	r0, r3
 8002048:	f000 f8c8 	bl	80021dc <RCCEx_PLLSAI1_Config>
 800204c:	4603      	mov	r3, r0
 800204e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002050:	7cfb      	ldrb	r3, [r7, #19]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d001      	beq.n	800205a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002056:	7cfb      	ldrb	r3, [r7, #19]
 8002058:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002062:	2b00      	cmp	r3, #0
 8002064:	d028      	beq.n	80020b8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002066:	4b23      	ldr	r3, [pc, #140]	@ (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002068:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800206c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002074:	491f      	ldr	r1, [pc, #124]	@ (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002076:	4313      	orrs	r3, r2
 8002078:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002080:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002084:	d106      	bne.n	8002094 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002086:	4b1b      	ldr	r3, [pc, #108]	@ (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002088:	68db      	ldr	r3, [r3, #12]
 800208a:	4a1a      	ldr	r2, [pc, #104]	@ (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800208c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002090:	60d3      	str	r3, [r2, #12]
 8002092:	e011      	b.n	80020b8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002098:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800209c:	d10c      	bne.n	80020b8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	3304      	adds	r3, #4
 80020a2:	2101      	movs	r1, #1
 80020a4:	4618      	mov	r0, r3
 80020a6:	f000 f899 	bl	80021dc <RCCEx_PLLSAI1_Config>
 80020aa:	4603      	mov	r3, r0
 80020ac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80020ae:	7cfb      	ldrb	r3, [r7, #19]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d001      	beq.n	80020b8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80020b4:	7cfb      	ldrb	r3, [r7, #19]
 80020b6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d02b      	beq.n	800211c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80020c4:	4b0b      	ldr	r3, [pc, #44]	@ (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020ca:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80020d2:	4908      	ldr	r1, [pc, #32]	@ (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020d4:	4313      	orrs	r3, r2
 80020d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80020de:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80020e2:	d109      	bne.n	80020f8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80020e4:	4b03      	ldr	r3, [pc, #12]	@ (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	4a02      	ldr	r2, [pc, #8]	@ (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020ea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80020ee:	60d3      	str	r3, [r2, #12]
 80020f0:	e014      	b.n	800211c <HAL_RCCEx_PeriphCLKConfig+0x514>
 80020f2:	bf00      	nop
 80020f4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80020fc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002100:	d10c      	bne.n	800211c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	3304      	adds	r3, #4
 8002106:	2101      	movs	r1, #1
 8002108:	4618      	mov	r0, r3
 800210a:	f000 f867 	bl	80021dc <RCCEx_PLLSAI1_Config>
 800210e:	4603      	mov	r3, r0
 8002110:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002112:	7cfb      	ldrb	r3, [r7, #19]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d001      	beq.n	800211c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002118:	7cfb      	ldrb	r3, [r7, #19]
 800211a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002124:	2b00      	cmp	r3, #0
 8002126:	d02f      	beq.n	8002188 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002128:	4b2b      	ldr	r3, [pc, #172]	@ (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800212a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800212e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002136:	4928      	ldr	r1, [pc, #160]	@ (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002138:	4313      	orrs	r3, r2
 800213a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002142:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002146:	d10d      	bne.n	8002164 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	3304      	adds	r3, #4
 800214c:	2102      	movs	r1, #2
 800214e:	4618      	mov	r0, r3
 8002150:	f000 f844 	bl	80021dc <RCCEx_PLLSAI1_Config>
 8002154:	4603      	mov	r3, r0
 8002156:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002158:	7cfb      	ldrb	r3, [r7, #19]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d014      	beq.n	8002188 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800215e:	7cfb      	ldrb	r3, [r7, #19]
 8002160:	74bb      	strb	r3, [r7, #18]
 8002162:	e011      	b.n	8002188 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002168:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800216c:	d10c      	bne.n	8002188 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	3320      	adds	r3, #32
 8002172:	2102      	movs	r1, #2
 8002174:	4618      	mov	r0, r3
 8002176:	f000 f925 	bl	80023c4 <RCCEx_PLLSAI2_Config>
 800217a:	4603      	mov	r3, r0
 800217c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800217e:	7cfb      	ldrb	r3, [r7, #19]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d001      	beq.n	8002188 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002184:	7cfb      	ldrb	r3, [r7, #19]
 8002186:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002190:	2b00      	cmp	r3, #0
 8002192:	d00a      	beq.n	80021aa <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002194:	4b10      	ldr	r3, [pc, #64]	@ (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002196:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800219a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80021a2:	490d      	ldr	r1, [pc, #52]	@ (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80021a4:	4313      	orrs	r3, r2
 80021a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d00b      	beq.n	80021ce <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80021b6:	4b08      	ldr	r3, [pc, #32]	@ (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80021b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021bc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80021c6:	4904      	ldr	r1, [pc, #16]	@ (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80021c8:	4313      	orrs	r3, r2
 80021ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80021ce:	7cbb      	ldrb	r3, [r7, #18]
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	3718      	adds	r7, #24
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}
 80021d8:	40021000 	.word	0x40021000

080021dc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b084      	sub	sp, #16
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
 80021e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80021e6:	2300      	movs	r3, #0
 80021e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80021ea:	4b75      	ldr	r3, [pc, #468]	@ (80023c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80021ec:	68db      	ldr	r3, [r3, #12]
 80021ee:	f003 0303 	and.w	r3, r3, #3
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d018      	beq.n	8002228 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80021f6:	4b72      	ldr	r3, [pc, #456]	@ (80023c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80021f8:	68db      	ldr	r3, [r3, #12]
 80021fa:	f003 0203 	and.w	r2, r3, #3
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	429a      	cmp	r2, r3
 8002204:	d10d      	bne.n	8002222 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
       ||
 800220a:	2b00      	cmp	r3, #0
 800220c:	d009      	beq.n	8002222 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800220e:	4b6c      	ldr	r3, [pc, #432]	@ (80023c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002210:	68db      	ldr	r3, [r3, #12]
 8002212:	091b      	lsrs	r3, r3, #4
 8002214:	f003 0307 	and.w	r3, r3, #7
 8002218:	1c5a      	adds	r2, r3, #1
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	685b      	ldr	r3, [r3, #4]
       ||
 800221e:	429a      	cmp	r2, r3
 8002220:	d047      	beq.n	80022b2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	73fb      	strb	r3, [r7, #15]
 8002226:	e044      	b.n	80022b2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	2b03      	cmp	r3, #3
 800222e:	d018      	beq.n	8002262 <RCCEx_PLLSAI1_Config+0x86>
 8002230:	2b03      	cmp	r3, #3
 8002232:	d825      	bhi.n	8002280 <RCCEx_PLLSAI1_Config+0xa4>
 8002234:	2b01      	cmp	r3, #1
 8002236:	d002      	beq.n	800223e <RCCEx_PLLSAI1_Config+0x62>
 8002238:	2b02      	cmp	r3, #2
 800223a:	d009      	beq.n	8002250 <RCCEx_PLLSAI1_Config+0x74>
 800223c:	e020      	b.n	8002280 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800223e:	4b60      	ldr	r3, [pc, #384]	@ (80023c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f003 0302 	and.w	r3, r3, #2
 8002246:	2b00      	cmp	r3, #0
 8002248:	d11d      	bne.n	8002286 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800224e:	e01a      	b.n	8002286 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002250:	4b5b      	ldr	r3, [pc, #364]	@ (80023c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002258:	2b00      	cmp	r3, #0
 800225a:	d116      	bne.n	800228a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800225c:	2301      	movs	r3, #1
 800225e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002260:	e013      	b.n	800228a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002262:	4b57      	ldr	r3, [pc, #348]	@ (80023c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800226a:	2b00      	cmp	r3, #0
 800226c:	d10f      	bne.n	800228e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800226e:	4b54      	ldr	r3, [pc, #336]	@ (80023c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002276:	2b00      	cmp	r3, #0
 8002278:	d109      	bne.n	800228e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800227e:	e006      	b.n	800228e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002280:	2301      	movs	r3, #1
 8002282:	73fb      	strb	r3, [r7, #15]
      break;
 8002284:	e004      	b.n	8002290 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002286:	bf00      	nop
 8002288:	e002      	b.n	8002290 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800228a:	bf00      	nop
 800228c:	e000      	b.n	8002290 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800228e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002290:	7bfb      	ldrb	r3, [r7, #15]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d10d      	bne.n	80022b2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002296:	4b4a      	ldr	r3, [pc, #296]	@ (80023c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002298:	68db      	ldr	r3, [r3, #12]
 800229a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6819      	ldr	r1, [r3, #0]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	3b01      	subs	r3, #1
 80022a8:	011b      	lsls	r3, r3, #4
 80022aa:	430b      	orrs	r3, r1
 80022ac:	4944      	ldr	r1, [pc, #272]	@ (80023c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80022ae:	4313      	orrs	r3, r2
 80022b0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80022b2:	7bfb      	ldrb	r3, [r7, #15]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d17d      	bne.n	80023b4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80022b8:	4b41      	ldr	r3, [pc, #260]	@ (80023c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a40      	ldr	r2, [pc, #256]	@ (80023c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80022be:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80022c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80022c4:	f7fe fb6e 	bl	80009a4 <HAL_GetTick>
 80022c8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80022ca:	e009      	b.n	80022e0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80022cc:	f7fe fb6a 	bl	80009a4 <HAL_GetTick>
 80022d0:	4602      	mov	r2, r0
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	1ad3      	subs	r3, r2, r3
 80022d6:	2b02      	cmp	r3, #2
 80022d8:	d902      	bls.n	80022e0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80022da:	2303      	movs	r3, #3
 80022dc:	73fb      	strb	r3, [r7, #15]
        break;
 80022de:	e005      	b.n	80022ec <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80022e0:	4b37      	ldr	r3, [pc, #220]	@ (80023c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d1ef      	bne.n	80022cc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80022ec:	7bfb      	ldrb	r3, [r7, #15]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d160      	bne.n	80023b4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d111      	bne.n	800231c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80022f8:	4b31      	ldr	r3, [pc, #196]	@ (80023c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80022fa:	691b      	ldr	r3, [r3, #16]
 80022fc:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002300:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002304:	687a      	ldr	r2, [r7, #4]
 8002306:	6892      	ldr	r2, [r2, #8]
 8002308:	0211      	lsls	r1, r2, #8
 800230a:	687a      	ldr	r2, [r7, #4]
 800230c:	68d2      	ldr	r2, [r2, #12]
 800230e:	0912      	lsrs	r2, r2, #4
 8002310:	0452      	lsls	r2, r2, #17
 8002312:	430a      	orrs	r2, r1
 8002314:	492a      	ldr	r1, [pc, #168]	@ (80023c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002316:	4313      	orrs	r3, r2
 8002318:	610b      	str	r3, [r1, #16]
 800231a:	e027      	b.n	800236c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	2b01      	cmp	r3, #1
 8002320:	d112      	bne.n	8002348 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002322:	4b27      	ldr	r3, [pc, #156]	@ (80023c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002324:	691b      	ldr	r3, [r3, #16]
 8002326:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800232a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800232e:	687a      	ldr	r2, [r7, #4]
 8002330:	6892      	ldr	r2, [r2, #8]
 8002332:	0211      	lsls	r1, r2, #8
 8002334:	687a      	ldr	r2, [r7, #4]
 8002336:	6912      	ldr	r2, [r2, #16]
 8002338:	0852      	lsrs	r2, r2, #1
 800233a:	3a01      	subs	r2, #1
 800233c:	0552      	lsls	r2, r2, #21
 800233e:	430a      	orrs	r2, r1
 8002340:	491f      	ldr	r1, [pc, #124]	@ (80023c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002342:	4313      	orrs	r3, r2
 8002344:	610b      	str	r3, [r1, #16]
 8002346:	e011      	b.n	800236c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002348:	4b1d      	ldr	r3, [pc, #116]	@ (80023c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800234a:	691b      	ldr	r3, [r3, #16]
 800234c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002350:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002354:	687a      	ldr	r2, [r7, #4]
 8002356:	6892      	ldr	r2, [r2, #8]
 8002358:	0211      	lsls	r1, r2, #8
 800235a:	687a      	ldr	r2, [r7, #4]
 800235c:	6952      	ldr	r2, [r2, #20]
 800235e:	0852      	lsrs	r2, r2, #1
 8002360:	3a01      	subs	r2, #1
 8002362:	0652      	lsls	r2, r2, #25
 8002364:	430a      	orrs	r2, r1
 8002366:	4916      	ldr	r1, [pc, #88]	@ (80023c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002368:	4313      	orrs	r3, r2
 800236a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800236c:	4b14      	ldr	r3, [pc, #80]	@ (80023c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a13      	ldr	r2, [pc, #76]	@ (80023c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002372:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002376:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002378:	f7fe fb14 	bl	80009a4 <HAL_GetTick>
 800237c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800237e:	e009      	b.n	8002394 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002380:	f7fe fb10 	bl	80009a4 <HAL_GetTick>
 8002384:	4602      	mov	r2, r0
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	1ad3      	subs	r3, r2, r3
 800238a:	2b02      	cmp	r3, #2
 800238c:	d902      	bls.n	8002394 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800238e:	2303      	movs	r3, #3
 8002390:	73fb      	strb	r3, [r7, #15]
          break;
 8002392:	e005      	b.n	80023a0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002394:	4b0a      	ldr	r3, [pc, #40]	@ (80023c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800239c:	2b00      	cmp	r3, #0
 800239e:	d0ef      	beq.n	8002380 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80023a0:	7bfb      	ldrb	r3, [r7, #15]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d106      	bne.n	80023b4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80023a6:	4b06      	ldr	r3, [pc, #24]	@ (80023c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023a8:	691a      	ldr	r2, [r3, #16]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	699b      	ldr	r3, [r3, #24]
 80023ae:	4904      	ldr	r1, [pc, #16]	@ (80023c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023b0:	4313      	orrs	r3, r2
 80023b2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80023b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	3710      	adds	r7, #16
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	40021000 	.word	0x40021000

080023c4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b084      	sub	sp, #16
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
 80023cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80023ce:	2300      	movs	r3, #0
 80023d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80023d2:	4b6a      	ldr	r3, [pc, #424]	@ (800257c <RCCEx_PLLSAI2_Config+0x1b8>)
 80023d4:	68db      	ldr	r3, [r3, #12]
 80023d6:	f003 0303 	and.w	r3, r3, #3
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d018      	beq.n	8002410 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80023de:	4b67      	ldr	r3, [pc, #412]	@ (800257c <RCCEx_PLLSAI2_Config+0x1b8>)
 80023e0:	68db      	ldr	r3, [r3, #12]
 80023e2:	f003 0203 	and.w	r2, r3, #3
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	429a      	cmp	r2, r3
 80023ec:	d10d      	bne.n	800240a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
       ||
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d009      	beq.n	800240a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80023f6:	4b61      	ldr	r3, [pc, #388]	@ (800257c <RCCEx_PLLSAI2_Config+0x1b8>)
 80023f8:	68db      	ldr	r3, [r3, #12]
 80023fa:	091b      	lsrs	r3, r3, #4
 80023fc:	f003 0307 	and.w	r3, r3, #7
 8002400:	1c5a      	adds	r2, r3, #1
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	685b      	ldr	r3, [r3, #4]
       ||
 8002406:	429a      	cmp	r2, r3
 8002408:	d047      	beq.n	800249a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	73fb      	strb	r3, [r7, #15]
 800240e:	e044      	b.n	800249a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	2b03      	cmp	r3, #3
 8002416:	d018      	beq.n	800244a <RCCEx_PLLSAI2_Config+0x86>
 8002418:	2b03      	cmp	r3, #3
 800241a:	d825      	bhi.n	8002468 <RCCEx_PLLSAI2_Config+0xa4>
 800241c:	2b01      	cmp	r3, #1
 800241e:	d002      	beq.n	8002426 <RCCEx_PLLSAI2_Config+0x62>
 8002420:	2b02      	cmp	r3, #2
 8002422:	d009      	beq.n	8002438 <RCCEx_PLLSAI2_Config+0x74>
 8002424:	e020      	b.n	8002468 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002426:	4b55      	ldr	r3, [pc, #340]	@ (800257c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 0302 	and.w	r3, r3, #2
 800242e:	2b00      	cmp	r3, #0
 8002430:	d11d      	bne.n	800246e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002436:	e01a      	b.n	800246e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002438:	4b50      	ldr	r3, [pc, #320]	@ (800257c <RCCEx_PLLSAI2_Config+0x1b8>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002440:	2b00      	cmp	r3, #0
 8002442:	d116      	bne.n	8002472 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002444:	2301      	movs	r3, #1
 8002446:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002448:	e013      	b.n	8002472 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800244a:	4b4c      	ldr	r3, [pc, #304]	@ (800257c <RCCEx_PLLSAI2_Config+0x1b8>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002452:	2b00      	cmp	r3, #0
 8002454:	d10f      	bne.n	8002476 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002456:	4b49      	ldr	r3, [pc, #292]	@ (800257c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800245e:	2b00      	cmp	r3, #0
 8002460:	d109      	bne.n	8002476 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002466:	e006      	b.n	8002476 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002468:	2301      	movs	r3, #1
 800246a:	73fb      	strb	r3, [r7, #15]
      break;
 800246c:	e004      	b.n	8002478 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800246e:	bf00      	nop
 8002470:	e002      	b.n	8002478 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002472:	bf00      	nop
 8002474:	e000      	b.n	8002478 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002476:	bf00      	nop
    }

    if(status == HAL_OK)
 8002478:	7bfb      	ldrb	r3, [r7, #15]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d10d      	bne.n	800249a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800247e:	4b3f      	ldr	r3, [pc, #252]	@ (800257c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002480:	68db      	ldr	r3, [r3, #12]
 8002482:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6819      	ldr	r1, [r3, #0]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	3b01      	subs	r3, #1
 8002490:	011b      	lsls	r3, r3, #4
 8002492:	430b      	orrs	r3, r1
 8002494:	4939      	ldr	r1, [pc, #228]	@ (800257c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002496:	4313      	orrs	r3, r2
 8002498:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800249a:	7bfb      	ldrb	r3, [r7, #15]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d167      	bne.n	8002570 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80024a0:	4b36      	ldr	r3, [pc, #216]	@ (800257c <RCCEx_PLLSAI2_Config+0x1b8>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a35      	ldr	r2, [pc, #212]	@ (800257c <RCCEx_PLLSAI2_Config+0x1b8>)
 80024a6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80024aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024ac:	f7fe fa7a 	bl	80009a4 <HAL_GetTick>
 80024b0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80024b2:	e009      	b.n	80024c8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80024b4:	f7fe fa76 	bl	80009a4 <HAL_GetTick>
 80024b8:	4602      	mov	r2, r0
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	1ad3      	subs	r3, r2, r3
 80024be:	2b02      	cmp	r3, #2
 80024c0:	d902      	bls.n	80024c8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80024c2:	2303      	movs	r3, #3
 80024c4:	73fb      	strb	r3, [r7, #15]
        break;
 80024c6:	e005      	b.n	80024d4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80024c8:	4b2c      	ldr	r3, [pc, #176]	@ (800257c <RCCEx_PLLSAI2_Config+0x1b8>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d1ef      	bne.n	80024b4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80024d4:	7bfb      	ldrb	r3, [r7, #15]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d14a      	bne.n	8002570 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d111      	bne.n	8002504 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80024e0:	4b26      	ldr	r3, [pc, #152]	@ (800257c <RCCEx_PLLSAI2_Config+0x1b8>)
 80024e2:	695b      	ldr	r3, [r3, #20]
 80024e4:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80024e8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80024ec:	687a      	ldr	r2, [r7, #4]
 80024ee:	6892      	ldr	r2, [r2, #8]
 80024f0:	0211      	lsls	r1, r2, #8
 80024f2:	687a      	ldr	r2, [r7, #4]
 80024f4:	68d2      	ldr	r2, [r2, #12]
 80024f6:	0912      	lsrs	r2, r2, #4
 80024f8:	0452      	lsls	r2, r2, #17
 80024fa:	430a      	orrs	r2, r1
 80024fc:	491f      	ldr	r1, [pc, #124]	@ (800257c <RCCEx_PLLSAI2_Config+0x1b8>)
 80024fe:	4313      	orrs	r3, r2
 8002500:	614b      	str	r3, [r1, #20]
 8002502:	e011      	b.n	8002528 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002504:	4b1d      	ldr	r3, [pc, #116]	@ (800257c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002506:	695b      	ldr	r3, [r3, #20]
 8002508:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800250c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002510:	687a      	ldr	r2, [r7, #4]
 8002512:	6892      	ldr	r2, [r2, #8]
 8002514:	0211      	lsls	r1, r2, #8
 8002516:	687a      	ldr	r2, [r7, #4]
 8002518:	6912      	ldr	r2, [r2, #16]
 800251a:	0852      	lsrs	r2, r2, #1
 800251c:	3a01      	subs	r2, #1
 800251e:	0652      	lsls	r2, r2, #25
 8002520:	430a      	orrs	r2, r1
 8002522:	4916      	ldr	r1, [pc, #88]	@ (800257c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002524:	4313      	orrs	r3, r2
 8002526:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002528:	4b14      	ldr	r3, [pc, #80]	@ (800257c <RCCEx_PLLSAI2_Config+0x1b8>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a13      	ldr	r2, [pc, #76]	@ (800257c <RCCEx_PLLSAI2_Config+0x1b8>)
 800252e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002532:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002534:	f7fe fa36 	bl	80009a4 <HAL_GetTick>
 8002538:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800253a:	e009      	b.n	8002550 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800253c:	f7fe fa32 	bl	80009a4 <HAL_GetTick>
 8002540:	4602      	mov	r2, r0
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	1ad3      	subs	r3, r2, r3
 8002546:	2b02      	cmp	r3, #2
 8002548:	d902      	bls.n	8002550 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800254a:	2303      	movs	r3, #3
 800254c:	73fb      	strb	r3, [r7, #15]
          break;
 800254e:	e005      	b.n	800255c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002550:	4b0a      	ldr	r3, [pc, #40]	@ (800257c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002558:	2b00      	cmp	r3, #0
 800255a:	d0ef      	beq.n	800253c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800255c:	7bfb      	ldrb	r3, [r7, #15]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d106      	bne.n	8002570 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002562:	4b06      	ldr	r3, [pc, #24]	@ (800257c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002564:	695a      	ldr	r2, [r3, #20]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	695b      	ldr	r3, [r3, #20]
 800256a:	4904      	ldr	r1, [pc, #16]	@ (800257c <RCCEx_PLLSAI2_Config+0x1b8>)
 800256c:	4313      	orrs	r3, r2
 800256e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002570:	7bfb      	ldrb	r3, [r7, #15]
}
 8002572:	4618      	mov	r0, r3
 8002574:	3710      	adds	r7, #16
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	40021000 	.word	0x40021000

08002580 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b082      	sub	sp, #8
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d101      	bne.n	8002592 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	e040      	b.n	8002614 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002596:	2b00      	cmp	r3, #0
 8002598:	d106      	bne.n	80025a8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2200      	movs	r2, #0
 800259e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80025a2:	6878      	ldr	r0, [r7, #4]
 80025a4:	f7fe f8ce 	bl	8000744 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2224      	movs	r2, #36	@ 0x24
 80025ac:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f022 0201 	bic.w	r2, r2, #1
 80025bc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d002      	beq.n	80025cc <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80025c6:	6878      	ldr	r0, [r7, #4]
 80025c8:	f000 fae0 	bl	8002b8c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80025cc:	6878      	ldr	r0, [r7, #4]
 80025ce:	f000 f825 	bl	800261c <UART_SetConfig>
 80025d2:	4603      	mov	r3, r0
 80025d4:	2b01      	cmp	r3, #1
 80025d6:	d101      	bne.n	80025dc <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80025d8:	2301      	movs	r3, #1
 80025da:	e01b      	b.n	8002614 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	685a      	ldr	r2, [r3, #4]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80025ea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	689a      	ldr	r2, [r3, #8]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80025fa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	681a      	ldr	r2, [r3, #0]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f042 0201 	orr.w	r2, r2, #1
 800260a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800260c:	6878      	ldr	r0, [r7, #4]
 800260e:	f000 fb5f 	bl	8002cd0 <UART_CheckIdleState>
 8002612:	4603      	mov	r3, r0
}
 8002614:	4618      	mov	r0, r3
 8002616:	3708      	adds	r7, #8
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}

0800261c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800261c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002620:	b08a      	sub	sp, #40	@ 0x28
 8002622:	af00      	add	r7, sp, #0
 8002624:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002626:	2300      	movs	r3, #0
 8002628:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	689a      	ldr	r2, [r3, #8]
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	691b      	ldr	r3, [r3, #16]
 8002634:	431a      	orrs	r2, r3
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	695b      	ldr	r3, [r3, #20]
 800263a:	431a      	orrs	r2, r3
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	69db      	ldr	r3, [r3, #28]
 8002640:	4313      	orrs	r3, r2
 8002642:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	4ba4      	ldr	r3, [pc, #656]	@ (80028dc <UART_SetConfig+0x2c0>)
 800264c:	4013      	ands	r3, r2
 800264e:	68fa      	ldr	r2, [r7, #12]
 8002650:	6812      	ldr	r2, [r2, #0]
 8002652:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002654:	430b      	orrs	r3, r1
 8002656:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	68da      	ldr	r2, [r3, #12]
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	430a      	orrs	r2, r1
 800266c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	699b      	ldr	r3, [r3, #24]
 8002672:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a99      	ldr	r2, [pc, #612]	@ (80028e0 <UART_SetConfig+0x2c4>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d004      	beq.n	8002688 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	6a1b      	ldr	r3, [r3, #32]
 8002682:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002684:	4313      	orrs	r3, r2
 8002686:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002698:	430a      	orrs	r2, r1
 800269a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a90      	ldr	r2, [pc, #576]	@ (80028e4 <UART_SetConfig+0x2c8>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d126      	bne.n	80026f4 <UART_SetConfig+0xd8>
 80026a6:	4b90      	ldr	r3, [pc, #576]	@ (80028e8 <UART_SetConfig+0x2cc>)
 80026a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026ac:	f003 0303 	and.w	r3, r3, #3
 80026b0:	2b03      	cmp	r3, #3
 80026b2:	d81b      	bhi.n	80026ec <UART_SetConfig+0xd0>
 80026b4:	a201      	add	r2, pc, #4	@ (adr r2, 80026bc <UART_SetConfig+0xa0>)
 80026b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026ba:	bf00      	nop
 80026bc:	080026cd 	.word	0x080026cd
 80026c0:	080026dd 	.word	0x080026dd
 80026c4:	080026d5 	.word	0x080026d5
 80026c8:	080026e5 	.word	0x080026e5
 80026cc:	2301      	movs	r3, #1
 80026ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80026d2:	e116      	b.n	8002902 <UART_SetConfig+0x2e6>
 80026d4:	2302      	movs	r3, #2
 80026d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80026da:	e112      	b.n	8002902 <UART_SetConfig+0x2e6>
 80026dc:	2304      	movs	r3, #4
 80026de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80026e2:	e10e      	b.n	8002902 <UART_SetConfig+0x2e6>
 80026e4:	2308      	movs	r3, #8
 80026e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80026ea:	e10a      	b.n	8002902 <UART_SetConfig+0x2e6>
 80026ec:	2310      	movs	r3, #16
 80026ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80026f2:	e106      	b.n	8002902 <UART_SetConfig+0x2e6>
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a7c      	ldr	r2, [pc, #496]	@ (80028ec <UART_SetConfig+0x2d0>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d138      	bne.n	8002770 <UART_SetConfig+0x154>
 80026fe:	4b7a      	ldr	r3, [pc, #488]	@ (80028e8 <UART_SetConfig+0x2cc>)
 8002700:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002704:	f003 030c 	and.w	r3, r3, #12
 8002708:	2b0c      	cmp	r3, #12
 800270a:	d82d      	bhi.n	8002768 <UART_SetConfig+0x14c>
 800270c:	a201      	add	r2, pc, #4	@ (adr r2, 8002714 <UART_SetConfig+0xf8>)
 800270e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002712:	bf00      	nop
 8002714:	08002749 	.word	0x08002749
 8002718:	08002769 	.word	0x08002769
 800271c:	08002769 	.word	0x08002769
 8002720:	08002769 	.word	0x08002769
 8002724:	08002759 	.word	0x08002759
 8002728:	08002769 	.word	0x08002769
 800272c:	08002769 	.word	0x08002769
 8002730:	08002769 	.word	0x08002769
 8002734:	08002751 	.word	0x08002751
 8002738:	08002769 	.word	0x08002769
 800273c:	08002769 	.word	0x08002769
 8002740:	08002769 	.word	0x08002769
 8002744:	08002761 	.word	0x08002761
 8002748:	2300      	movs	r3, #0
 800274a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800274e:	e0d8      	b.n	8002902 <UART_SetConfig+0x2e6>
 8002750:	2302      	movs	r3, #2
 8002752:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002756:	e0d4      	b.n	8002902 <UART_SetConfig+0x2e6>
 8002758:	2304      	movs	r3, #4
 800275a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800275e:	e0d0      	b.n	8002902 <UART_SetConfig+0x2e6>
 8002760:	2308      	movs	r3, #8
 8002762:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002766:	e0cc      	b.n	8002902 <UART_SetConfig+0x2e6>
 8002768:	2310      	movs	r3, #16
 800276a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800276e:	e0c8      	b.n	8002902 <UART_SetConfig+0x2e6>
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a5e      	ldr	r2, [pc, #376]	@ (80028f0 <UART_SetConfig+0x2d4>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d125      	bne.n	80027c6 <UART_SetConfig+0x1aa>
 800277a:	4b5b      	ldr	r3, [pc, #364]	@ (80028e8 <UART_SetConfig+0x2cc>)
 800277c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002780:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002784:	2b30      	cmp	r3, #48	@ 0x30
 8002786:	d016      	beq.n	80027b6 <UART_SetConfig+0x19a>
 8002788:	2b30      	cmp	r3, #48	@ 0x30
 800278a:	d818      	bhi.n	80027be <UART_SetConfig+0x1a2>
 800278c:	2b20      	cmp	r3, #32
 800278e:	d00a      	beq.n	80027a6 <UART_SetConfig+0x18a>
 8002790:	2b20      	cmp	r3, #32
 8002792:	d814      	bhi.n	80027be <UART_SetConfig+0x1a2>
 8002794:	2b00      	cmp	r3, #0
 8002796:	d002      	beq.n	800279e <UART_SetConfig+0x182>
 8002798:	2b10      	cmp	r3, #16
 800279a:	d008      	beq.n	80027ae <UART_SetConfig+0x192>
 800279c:	e00f      	b.n	80027be <UART_SetConfig+0x1a2>
 800279e:	2300      	movs	r3, #0
 80027a0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80027a4:	e0ad      	b.n	8002902 <UART_SetConfig+0x2e6>
 80027a6:	2302      	movs	r3, #2
 80027a8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80027ac:	e0a9      	b.n	8002902 <UART_SetConfig+0x2e6>
 80027ae:	2304      	movs	r3, #4
 80027b0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80027b4:	e0a5      	b.n	8002902 <UART_SetConfig+0x2e6>
 80027b6:	2308      	movs	r3, #8
 80027b8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80027bc:	e0a1      	b.n	8002902 <UART_SetConfig+0x2e6>
 80027be:	2310      	movs	r3, #16
 80027c0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80027c4:	e09d      	b.n	8002902 <UART_SetConfig+0x2e6>
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a4a      	ldr	r2, [pc, #296]	@ (80028f4 <UART_SetConfig+0x2d8>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d125      	bne.n	800281c <UART_SetConfig+0x200>
 80027d0:	4b45      	ldr	r3, [pc, #276]	@ (80028e8 <UART_SetConfig+0x2cc>)
 80027d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027d6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80027da:	2bc0      	cmp	r3, #192	@ 0xc0
 80027dc:	d016      	beq.n	800280c <UART_SetConfig+0x1f0>
 80027de:	2bc0      	cmp	r3, #192	@ 0xc0
 80027e0:	d818      	bhi.n	8002814 <UART_SetConfig+0x1f8>
 80027e2:	2b80      	cmp	r3, #128	@ 0x80
 80027e4:	d00a      	beq.n	80027fc <UART_SetConfig+0x1e0>
 80027e6:	2b80      	cmp	r3, #128	@ 0x80
 80027e8:	d814      	bhi.n	8002814 <UART_SetConfig+0x1f8>
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d002      	beq.n	80027f4 <UART_SetConfig+0x1d8>
 80027ee:	2b40      	cmp	r3, #64	@ 0x40
 80027f0:	d008      	beq.n	8002804 <UART_SetConfig+0x1e8>
 80027f2:	e00f      	b.n	8002814 <UART_SetConfig+0x1f8>
 80027f4:	2300      	movs	r3, #0
 80027f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80027fa:	e082      	b.n	8002902 <UART_SetConfig+0x2e6>
 80027fc:	2302      	movs	r3, #2
 80027fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002802:	e07e      	b.n	8002902 <UART_SetConfig+0x2e6>
 8002804:	2304      	movs	r3, #4
 8002806:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800280a:	e07a      	b.n	8002902 <UART_SetConfig+0x2e6>
 800280c:	2308      	movs	r3, #8
 800280e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002812:	e076      	b.n	8002902 <UART_SetConfig+0x2e6>
 8002814:	2310      	movs	r3, #16
 8002816:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800281a:	e072      	b.n	8002902 <UART_SetConfig+0x2e6>
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a35      	ldr	r2, [pc, #212]	@ (80028f8 <UART_SetConfig+0x2dc>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d12a      	bne.n	800287c <UART_SetConfig+0x260>
 8002826:	4b30      	ldr	r3, [pc, #192]	@ (80028e8 <UART_SetConfig+0x2cc>)
 8002828:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800282c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002830:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002834:	d01a      	beq.n	800286c <UART_SetConfig+0x250>
 8002836:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800283a:	d81b      	bhi.n	8002874 <UART_SetConfig+0x258>
 800283c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002840:	d00c      	beq.n	800285c <UART_SetConfig+0x240>
 8002842:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002846:	d815      	bhi.n	8002874 <UART_SetConfig+0x258>
 8002848:	2b00      	cmp	r3, #0
 800284a:	d003      	beq.n	8002854 <UART_SetConfig+0x238>
 800284c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002850:	d008      	beq.n	8002864 <UART_SetConfig+0x248>
 8002852:	e00f      	b.n	8002874 <UART_SetConfig+0x258>
 8002854:	2300      	movs	r3, #0
 8002856:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800285a:	e052      	b.n	8002902 <UART_SetConfig+0x2e6>
 800285c:	2302      	movs	r3, #2
 800285e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002862:	e04e      	b.n	8002902 <UART_SetConfig+0x2e6>
 8002864:	2304      	movs	r3, #4
 8002866:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800286a:	e04a      	b.n	8002902 <UART_SetConfig+0x2e6>
 800286c:	2308      	movs	r3, #8
 800286e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002872:	e046      	b.n	8002902 <UART_SetConfig+0x2e6>
 8002874:	2310      	movs	r3, #16
 8002876:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800287a:	e042      	b.n	8002902 <UART_SetConfig+0x2e6>
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a17      	ldr	r2, [pc, #92]	@ (80028e0 <UART_SetConfig+0x2c4>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d13a      	bne.n	80028fc <UART_SetConfig+0x2e0>
 8002886:	4b18      	ldr	r3, [pc, #96]	@ (80028e8 <UART_SetConfig+0x2cc>)
 8002888:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800288c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002890:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002894:	d01a      	beq.n	80028cc <UART_SetConfig+0x2b0>
 8002896:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800289a:	d81b      	bhi.n	80028d4 <UART_SetConfig+0x2b8>
 800289c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80028a0:	d00c      	beq.n	80028bc <UART_SetConfig+0x2a0>
 80028a2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80028a6:	d815      	bhi.n	80028d4 <UART_SetConfig+0x2b8>
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d003      	beq.n	80028b4 <UART_SetConfig+0x298>
 80028ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80028b0:	d008      	beq.n	80028c4 <UART_SetConfig+0x2a8>
 80028b2:	e00f      	b.n	80028d4 <UART_SetConfig+0x2b8>
 80028b4:	2300      	movs	r3, #0
 80028b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80028ba:	e022      	b.n	8002902 <UART_SetConfig+0x2e6>
 80028bc:	2302      	movs	r3, #2
 80028be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80028c2:	e01e      	b.n	8002902 <UART_SetConfig+0x2e6>
 80028c4:	2304      	movs	r3, #4
 80028c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80028ca:	e01a      	b.n	8002902 <UART_SetConfig+0x2e6>
 80028cc:	2308      	movs	r3, #8
 80028ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80028d2:	e016      	b.n	8002902 <UART_SetConfig+0x2e6>
 80028d4:	2310      	movs	r3, #16
 80028d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80028da:	e012      	b.n	8002902 <UART_SetConfig+0x2e6>
 80028dc:	efff69f3 	.word	0xefff69f3
 80028e0:	40008000 	.word	0x40008000
 80028e4:	40013800 	.word	0x40013800
 80028e8:	40021000 	.word	0x40021000
 80028ec:	40004400 	.word	0x40004400
 80028f0:	40004800 	.word	0x40004800
 80028f4:	40004c00 	.word	0x40004c00
 80028f8:	40005000 	.word	0x40005000
 80028fc:	2310      	movs	r3, #16
 80028fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a9f      	ldr	r2, [pc, #636]	@ (8002b84 <UART_SetConfig+0x568>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d17a      	bne.n	8002a02 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800290c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002910:	2b08      	cmp	r3, #8
 8002912:	d824      	bhi.n	800295e <UART_SetConfig+0x342>
 8002914:	a201      	add	r2, pc, #4	@ (adr r2, 800291c <UART_SetConfig+0x300>)
 8002916:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800291a:	bf00      	nop
 800291c:	08002941 	.word	0x08002941
 8002920:	0800295f 	.word	0x0800295f
 8002924:	08002949 	.word	0x08002949
 8002928:	0800295f 	.word	0x0800295f
 800292c:	0800294f 	.word	0x0800294f
 8002930:	0800295f 	.word	0x0800295f
 8002934:	0800295f 	.word	0x0800295f
 8002938:	0800295f 	.word	0x0800295f
 800293c:	08002957 	.word	0x08002957
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002940:	f7ff f8d6 	bl	8001af0 <HAL_RCC_GetPCLK1Freq>
 8002944:	61f8      	str	r0, [r7, #28]
        break;
 8002946:	e010      	b.n	800296a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002948:	4b8f      	ldr	r3, [pc, #572]	@ (8002b88 <UART_SetConfig+0x56c>)
 800294a:	61fb      	str	r3, [r7, #28]
        break;
 800294c:	e00d      	b.n	800296a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800294e:	f7ff f837 	bl	80019c0 <HAL_RCC_GetSysClockFreq>
 8002952:	61f8      	str	r0, [r7, #28]
        break;
 8002954:	e009      	b.n	800296a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002956:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800295a:	61fb      	str	r3, [r7, #28]
        break;
 800295c:	e005      	b.n	800296a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800295e:	2300      	movs	r3, #0
 8002960:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8002968:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800296a:	69fb      	ldr	r3, [r7, #28]
 800296c:	2b00      	cmp	r3, #0
 800296e:	f000 80fb 	beq.w	8002b68 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	685a      	ldr	r2, [r3, #4]
 8002976:	4613      	mov	r3, r2
 8002978:	005b      	lsls	r3, r3, #1
 800297a:	4413      	add	r3, r2
 800297c:	69fa      	ldr	r2, [r7, #28]
 800297e:	429a      	cmp	r2, r3
 8002980:	d305      	bcc.n	800298e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002988:	69fa      	ldr	r2, [r7, #28]
 800298a:	429a      	cmp	r2, r3
 800298c:	d903      	bls.n	8002996 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002994:	e0e8      	b.n	8002b68 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002996:	69fb      	ldr	r3, [r7, #28]
 8002998:	2200      	movs	r2, #0
 800299a:	461c      	mov	r4, r3
 800299c:	4615      	mov	r5, r2
 800299e:	f04f 0200 	mov.w	r2, #0
 80029a2:	f04f 0300 	mov.w	r3, #0
 80029a6:	022b      	lsls	r3, r5, #8
 80029a8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80029ac:	0222      	lsls	r2, r4, #8
 80029ae:	68f9      	ldr	r1, [r7, #12]
 80029b0:	6849      	ldr	r1, [r1, #4]
 80029b2:	0849      	lsrs	r1, r1, #1
 80029b4:	2000      	movs	r0, #0
 80029b6:	4688      	mov	r8, r1
 80029b8:	4681      	mov	r9, r0
 80029ba:	eb12 0a08 	adds.w	sl, r2, r8
 80029be:	eb43 0b09 	adc.w	fp, r3, r9
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	2200      	movs	r2, #0
 80029c8:	603b      	str	r3, [r7, #0]
 80029ca:	607a      	str	r2, [r7, #4]
 80029cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80029d0:	4650      	mov	r0, sl
 80029d2:	4659      	mov	r1, fp
 80029d4:	f7fd fbfc 	bl	80001d0 <__aeabi_uldivmod>
 80029d8:	4602      	mov	r2, r0
 80029da:	460b      	mov	r3, r1
 80029dc:	4613      	mov	r3, r2
 80029de:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80029e0:	69bb      	ldr	r3, [r7, #24]
 80029e2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80029e6:	d308      	bcc.n	80029fa <UART_SetConfig+0x3de>
 80029e8:	69bb      	ldr	r3, [r7, #24]
 80029ea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80029ee:	d204      	bcs.n	80029fa <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	69ba      	ldr	r2, [r7, #24]
 80029f6:	60da      	str	r2, [r3, #12]
 80029f8:	e0b6      	b.n	8002b68 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
 80029fc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002a00:	e0b2      	b.n	8002b68 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	69db      	ldr	r3, [r3, #28]
 8002a06:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002a0a:	d15e      	bne.n	8002aca <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8002a0c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002a10:	2b08      	cmp	r3, #8
 8002a12:	d828      	bhi.n	8002a66 <UART_SetConfig+0x44a>
 8002a14:	a201      	add	r2, pc, #4	@ (adr r2, 8002a1c <UART_SetConfig+0x400>)
 8002a16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a1a:	bf00      	nop
 8002a1c:	08002a41 	.word	0x08002a41
 8002a20:	08002a49 	.word	0x08002a49
 8002a24:	08002a51 	.word	0x08002a51
 8002a28:	08002a67 	.word	0x08002a67
 8002a2c:	08002a57 	.word	0x08002a57
 8002a30:	08002a67 	.word	0x08002a67
 8002a34:	08002a67 	.word	0x08002a67
 8002a38:	08002a67 	.word	0x08002a67
 8002a3c:	08002a5f 	.word	0x08002a5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002a40:	f7ff f856 	bl	8001af0 <HAL_RCC_GetPCLK1Freq>
 8002a44:	61f8      	str	r0, [r7, #28]
        break;
 8002a46:	e014      	b.n	8002a72 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002a48:	f7ff f868 	bl	8001b1c <HAL_RCC_GetPCLK2Freq>
 8002a4c:	61f8      	str	r0, [r7, #28]
        break;
 8002a4e:	e010      	b.n	8002a72 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002a50:	4b4d      	ldr	r3, [pc, #308]	@ (8002b88 <UART_SetConfig+0x56c>)
 8002a52:	61fb      	str	r3, [r7, #28]
        break;
 8002a54:	e00d      	b.n	8002a72 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002a56:	f7fe ffb3 	bl	80019c0 <HAL_RCC_GetSysClockFreq>
 8002a5a:	61f8      	str	r0, [r7, #28]
        break;
 8002a5c:	e009      	b.n	8002a72 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002a5e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002a62:	61fb      	str	r3, [r7, #28]
        break;
 8002a64:	e005      	b.n	8002a72 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8002a66:	2300      	movs	r3, #0
 8002a68:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8002a70:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002a72:	69fb      	ldr	r3, [r7, #28]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d077      	beq.n	8002b68 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002a78:	69fb      	ldr	r3, [r7, #28]
 8002a7a:	005a      	lsls	r2, r3, #1
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	085b      	lsrs	r3, r3, #1
 8002a82:	441a      	add	r2, r3
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a8c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002a8e:	69bb      	ldr	r3, [r7, #24]
 8002a90:	2b0f      	cmp	r3, #15
 8002a92:	d916      	bls.n	8002ac2 <UART_SetConfig+0x4a6>
 8002a94:	69bb      	ldr	r3, [r7, #24]
 8002a96:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a9a:	d212      	bcs.n	8002ac2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002a9c:	69bb      	ldr	r3, [r7, #24]
 8002a9e:	b29b      	uxth	r3, r3
 8002aa0:	f023 030f 	bic.w	r3, r3, #15
 8002aa4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002aa6:	69bb      	ldr	r3, [r7, #24]
 8002aa8:	085b      	lsrs	r3, r3, #1
 8002aaa:	b29b      	uxth	r3, r3
 8002aac:	f003 0307 	and.w	r3, r3, #7
 8002ab0:	b29a      	uxth	r2, r3
 8002ab2:	8afb      	ldrh	r3, [r7, #22]
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	8afa      	ldrh	r2, [r7, #22]
 8002abe:	60da      	str	r2, [r3, #12]
 8002ac0:	e052      	b.n	8002b68 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002ac8:	e04e      	b.n	8002b68 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002aca:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002ace:	2b08      	cmp	r3, #8
 8002ad0:	d827      	bhi.n	8002b22 <UART_SetConfig+0x506>
 8002ad2:	a201      	add	r2, pc, #4	@ (adr r2, 8002ad8 <UART_SetConfig+0x4bc>)
 8002ad4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ad8:	08002afd 	.word	0x08002afd
 8002adc:	08002b05 	.word	0x08002b05
 8002ae0:	08002b0d 	.word	0x08002b0d
 8002ae4:	08002b23 	.word	0x08002b23
 8002ae8:	08002b13 	.word	0x08002b13
 8002aec:	08002b23 	.word	0x08002b23
 8002af0:	08002b23 	.word	0x08002b23
 8002af4:	08002b23 	.word	0x08002b23
 8002af8:	08002b1b 	.word	0x08002b1b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002afc:	f7fe fff8 	bl	8001af0 <HAL_RCC_GetPCLK1Freq>
 8002b00:	61f8      	str	r0, [r7, #28]
        break;
 8002b02:	e014      	b.n	8002b2e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002b04:	f7ff f80a 	bl	8001b1c <HAL_RCC_GetPCLK2Freq>
 8002b08:	61f8      	str	r0, [r7, #28]
        break;
 8002b0a:	e010      	b.n	8002b2e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002b0c:	4b1e      	ldr	r3, [pc, #120]	@ (8002b88 <UART_SetConfig+0x56c>)
 8002b0e:	61fb      	str	r3, [r7, #28]
        break;
 8002b10:	e00d      	b.n	8002b2e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002b12:	f7fe ff55 	bl	80019c0 <HAL_RCC_GetSysClockFreq>
 8002b16:	61f8      	str	r0, [r7, #28]
        break;
 8002b18:	e009      	b.n	8002b2e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002b1a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002b1e:	61fb      	str	r3, [r7, #28]
        break;
 8002b20:	e005      	b.n	8002b2e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8002b22:	2300      	movs	r3, #0
 8002b24:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8002b2c:	bf00      	nop
    }

    if (pclk != 0U)
 8002b2e:	69fb      	ldr	r3, [r7, #28]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d019      	beq.n	8002b68 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	085a      	lsrs	r2, r3, #1
 8002b3a:	69fb      	ldr	r3, [r7, #28]
 8002b3c:	441a      	add	r2, r3
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b46:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002b48:	69bb      	ldr	r3, [r7, #24]
 8002b4a:	2b0f      	cmp	r3, #15
 8002b4c:	d909      	bls.n	8002b62 <UART_SetConfig+0x546>
 8002b4e:	69bb      	ldr	r3, [r7, #24]
 8002b50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b54:	d205      	bcs.n	8002b62 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002b56:	69bb      	ldr	r3, [r7, #24]
 8002b58:	b29a      	uxth	r2, r3
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	60da      	str	r2, [r3, #12]
 8002b60:	e002      	b.n	8002b68 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	2200      	movs	r2, #0
 8002b72:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8002b74:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	3728      	adds	r7, #40	@ 0x28
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b82:	bf00      	nop
 8002b84:	40008000 	.word	0x40008000
 8002b88:	00f42400 	.word	0x00f42400

08002b8c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b083      	sub	sp, #12
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b98:	f003 0308 	and.w	r3, r3, #8
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d00a      	beq.n	8002bb6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	430a      	orrs	r2, r1
 8002bb4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bba:	f003 0301 	and.w	r3, r3, #1
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d00a      	beq.n	8002bd8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	430a      	orrs	r2, r1
 8002bd6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bdc:	f003 0302 	and.w	r3, r3, #2
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d00a      	beq.n	8002bfa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	430a      	orrs	r2, r1
 8002bf8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bfe:	f003 0304 	and.w	r3, r3, #4
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d00a      	beq.n	8002c1c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	430a      	orrs	r2, r1
 8002c1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c20:	f003 0310 	and.w	r3, r3, #16
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d00a      	beq.n	8002c3e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	430a      	orrs	r2, r1
 8002c3c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c42:	f003 0320 	and.w	r3, r3, #32
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d00a      	beq.n	8002c60 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	430a      	orrs	r2, r1
 8002c5e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d01a      	beq.n	8002ca2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	430a      	orrs	r2, r1
 8002c80:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c86:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002c8a:	d10a      	bne.n	8002ca2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	430a      	orrs	r2, r1
 8002ca0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ca6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d00a      	beq.n	8002cc4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	430a      	orrs	r2, r1
 8002cc2:	605a      	str	r2, [r3, #4]
  }
}
 8002cc4:	bf00      	nop
 8002cc6:	370c      	adds	r7, #12
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cce:	4770      	bx	lr

08002cd0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b098      	sub	sp, #96	@ 0x60
 8002cd4:	af02      	add	r7, sp, #8
 8002cd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002ce0:	f7fd fe60 	bl	80009a4 <HAL_GetTick>
 8002ce4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f003 0308 	and.w	r3, r3, #8
 8002cf0:	2b08      	cmp	r3, #8
 8002cf2:	d12e      	bne.n	8002d52 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002cf4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002cf8:	9300      	str	r3, [sp, #0]
 8002cfa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8002d02:	6878      	ldr	r0, [r7, #4]
 8002d04:	f000 f88c 	bl	8002e20 <UART_WaitOnFlagUntilTimeout>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d021      	beq.n	8002d52 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d16:	e853 3f00 	ldrex	r3, [r3]
 8002d1a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002d1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d1e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002d22:	653b      	str	r3, [r7, #80]	@ 0x50
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	461a      	mov	r2, r3
 8002d2a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002d2c:	647b      	str	r3, [r7, #68]	@ 0x44
 8002d2e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d30:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002d32:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002d34:	e841 2300 	strex	r3, r2, [r1]
 8002d38:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002d3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d1e6      	bne.n	8002d0e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2220      	movs	r2, #32
 8002d44:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002d4e:	2303      	movs	r3, #3
 8002d50:	e062      	b.n	8002e18 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f003 0304 	and.w	r3, r3, #4
 8002d5c:	2b04      	cmp	r3, #4
 8002d5e:	d149      	bne.n	8002df4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002d60:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002d64:	9300      	str	r3, [sp, #0]
 8002d66:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d68:	2200      	movs	r2, #0
 8002d6a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8002d6e:	6878      	ldr	r0, [r7, #4]
 8002d70:	f000 f856 	bl	8002e20 <UART_WaitOnFlagUntilTimeout>
 8002d74:	4603      	mov	r3, r0
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d03c      	beq.n	8002df4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d82:	e853 3f00 	ldrex	r3, [r3]
 8002d86:	623b      	str	r3, [r7, #32]
   return(result);
 8002d88:	6a3b      	ldr	r3, [r7, #32]
 8002d8a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002d8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	461a      	mov	r2, r3
 8002d96:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002d98:	633b      	str	r3, [r7, #48]	@ 0x30
 8002d9a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d9c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002d9e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002da0:	e841 2300 	strex	r3, r2, [r1]
 8002da4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002da6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d1e6      	bne.n	8002d7a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	3308      	adds	r3, #8
 8002db2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	e853 3f00 	ldrex	r3, [r3]
 8002dba:	60fb      	str	r3, [r7, #12]
   return(result);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	f023 0301 	bic.w	r3, r3, #1
 8002dc2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	3308      	adds	r3, #8
 8002dca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002dcc:	61fa      	str	r2, [r7, #28]
 8002dce:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dd0:	69b9      	ldr	r1, [r7, #24]
 8002dd2:	69fa      	ldr	r2, [r7, #28]
 8002dd4:	e841 2300 	strex	r3, r2, [r1]
 8002dd8:	617b      	str	r3, [r7, #20]
   return(result);
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d1e5      	bne.n	8002dac <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2220      	movs	r2, #32
 8002de4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2200      	movs	r2, #0
 8002dec:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002df0:	2303      	movs	r3, #3
 8002df2:	e011      	b.n	8002e18 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2220      	movs	r2, #32
 8002df8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2220      	movs	r2, #32
 8002dfe:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2200      	movs	r2, #0
 8002e06:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2200      	movs	r2, #0
 8002e12:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8002e16:	2300      	movs	r3, #0
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	3758      	adds	r7, #88	@ 0x58
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}

08002e20 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b084      	sub	sp, #16
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	60f8      	str	r0, [r7, #12]
 8002e28:	60b9      	str	r1, [r7, #8]
 8002e2a:	603b      	str	r3, [r7, #0]
 8002e2c:	4613      	mov	r3, r2
 8002e2e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e30:	e04f      	b.n	8002ed2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e32:	69bb      	ldr	r3, [r7, #24]
 8002e34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e38:	d04b      	beq.n	8002ed2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e3a:	f7fd fdb3 	bl	80009a4 <HAL_GetTick>
 8002e3e:	4602      	mov	r2, r0
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	1ad3      	subs	r3, r2, r3
 8002e44:	69ba      	ldr	r2, [r7, #24]
 8002e46:	429a      	cmp	r2, r3
 8002e48:	d302      	bcc.n	8002e50 <UART_WaitOnFlagUntilTimeout+0x30>
 8002e4a:	69bb      	ldr	r3, [r7, #24]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d101      	bne.n	8002e54 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002e50:	2303      	movs	r3, #3
 8002e52:	e04e      	b.n	8002ef2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 0304 	and.w	r3, r3, #4
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d037      	beq.n	8002ed2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	2b80      	cmp	r3, #128	@ 0x80
 8002e66:	d034      	beq.n	8002ed2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	2b40      	cmp	r3, #64	@ 0x40
 8002e6c:	d031      	beq.n	8002ed2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	69db      	ldr	r3, [r3, #28]
 8002e74:	f003 0308 	and.w	r3, r3, #8
 8002e78:	2b08      	cmp	r3, #8
 8002e7a:	d110      	bne.n	8002e9e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	2208      	movs	r2, #8
 8002e82:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002e84:	68f8      	ldr	r0, [r7, #12]
 8002e86:	f000 f838 	bl	8002efa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2208      	movs	r2, #8
 8002e8e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	2200      	movs	r2, #0
 8002e96:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e029      	b.n	8002ef2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	69db      	ldr	r3, [r3, #28]
 8002ea4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002ea8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002eac:	d111      	bne.n	8002ed2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002eb6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002eb8:	68f8      	ldr	r0, [r7, #12]
 8002eba:	f000 f81e 	bl	8002efa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	2220      	movs	r2, #32
 8002ec2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8002ece:	2303      	movs	r3, #3
 8002ed0:	e00f      	b.n	8002ef2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	69da      	ldr	r2, [r3, #28]
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	4013      	ands	r3, r2
 8002edc:	68ba      	ldr	r2, [r7, #8]
 8002ede:	429a      	cmp	r2, r3
 8002ee0:	bf0c      	ite	eq
 8002ee2:	2301      	moveq	r3, #1
 8002ee4:	2300      	movne	r3, #0
 8002ee6:	b2db      	uxtb	r3, r3
 8002ee8:	461a      	mov	r2, r3
 8002eea:	79fb      	ldrb	r3, [r7, #7]
 8002eec:	429a      	cmp	r2, r3
 8002eee:	d0a0      	beq.n	8002e32 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002ef0:	2300      	movs	r3, #0
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	3710      	adds	r7, #16
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}

08002efa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002efa:	b480      	push	{r7}
 8002efc:	b095      	sub	sp, #84	@ 0x54
 8002efe:	af00      	add	r7, sp, #0
 8002f00:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f0a:	e853 3f00 	ldrex	r3, [r3]
 8002f0e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002f10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f12:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002f16:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	461a      	mov	r2, r3
 8002f1e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002f20:	643b      	str	r3, [r7, #64]	@ 0x40
 8002f22:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f24:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002f26:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002f28:	e841 2300 	strex	r3, r2, [r1]
 8002f2c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002f2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d1e6      	bne.n	8002f02 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	3308      	adds	r3, #8
 8002f3a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f3c:	6a3b      	ldr	r3, [r7, #32]
 8002f3e:	e853 3f00 	ldrex	r3, [r3]
 8002f42:	61fb      	str	r3, [r7, #28]
   return(result);
 8002f44:	69fb      	ldr	r3, [r7, #28]
 8002f46:	f023 0301 	bic.w	r3, r3, #1
 8002f4a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	3308      	adds	r3, #8
 8002f52:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002f54:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002f56:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f58:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002f5a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002f5c:	e841 2300 	strex	r3, r2, [r1]
 8002f60:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d1e5      	bne.n	8002f34 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f6c:	2b01      	cmp	r3, #1
 8002f6e:	d118      	bne.n	8002fa2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	e853 3f00 	ldrex	r3, [r3]
 8002f7c:	60bb      	str	r3, [r7, #8]
   return(result);
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	f023 0310 	bic.w	r3, r3, #16
 8002f84:	647b      	str	r3, [r7, #68]	@ 0x44
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	461a      	mov	r2, r3
 8002f8c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f8e:	61bb      	str	r3, [r7, #24]
 8002f90:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f92:	6979      	ldr	r1, [r7, #20]
 8002f94:	69ba      	ldr	r2, [r7, #24]
 8002f96:	e841 2300 	strex	r3, r2, [r1]
 8002f9a:	613b      	str	r3, [r7, #16]
   return(result);
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d1e6      	bne.n	8002f70 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2220      	movs	r2, #32
 8002fa6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2200      	movs	r2, #0
 8002fae:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8002fb6:	bf00      	nop
 8002fb8:	3754      	adds	r7, #84	@ 0x54
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc0:	4770      	bx	lr
	...

08002fc4 <__NVIC_SetPriority>:
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b083      	sub	sp, #12
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	4603      	mov	r3, r0
 8002fcc:	6039      	str	r1, [r7, #0]
 8002fce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	db0a      	blt.n	8002fee <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	b2da      	uxtb	r2, r3
 8002fdc:	490c      	ldr	r1, [pc, #48]	@ (8003010 <__NVIC_SetPriority+0x4c>)
 8002fde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fe2:	0112      	lsls	r2, r2, #4
 8002fe4:	b2d2      	uxtb	r2, r2
 8002fe6:	440b      	add	r3, r1
 8002fe8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002fec:	e00a      	b.n	8003004 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	b2da      	uxtb	r2, r3
 8002ff2:	4908      	ldr	r1, [pc, #32]	@ (8003014 <__NVIC_SetPriority+0x50>)
 8002ff4:	79fb      	ldrb	r3, [r7, #7]
 8002ff6:	f003 030f 	and.w	r3, r3, #15
 8002ffa:	3b04      	subs	r3, #4
 8002ffc:	0112      	lsls	r2, r2, #4
 8002ffe:	b2d2      	uxtb	r2, r2
 8003000:	440b      	add	r3, r1
 8003002:	761a      	strb	r2, [r3, #24]
}
 8003004:	bf00      	nop
 8003006:	370c      	adds	r7, #12
 8003008:	46bd      	mov	sp, r7
 800300a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300e:	4770      	bx	lr
 8003010:	e000e100 	.word	0xe000e100
 8003014:	e000ed00 	.word	0xe000ed00

08003018 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003018:	b580      	push	{r7, lr}
 800301a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800301c:	2100      	movs	r1, #0
 800301e:	f06f 0004 	mvn.w	r0, #4
 8003022:	f7ff ffcf 	bl	8002fc4 <__NVIC_SetPriority>
#endif
}
 8003026:	bf00      	nop
 8003028:	bd80      	pop	{r7, pc}
	...

0800302c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800302c:	b480      	push	{r7}
 800302e:	b083      	sub	sp, #12
 8003030:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003032:	f3ef 8305 	mrs	r3, IPSR
 8003036:	603b      	str	r3, [r7, #0]
  return(result);
 8003038:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800303a:	2b00      	cmp	r3, #0
 800303c:	d003      	beq.n	8003046 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800303e:	f06f 0305 	mvn.w	r3, #5
 8003042:	607b      	str	r3, [r7, #4]
 8003044:	e00c      	b.n	8003060 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003046:	4b0a      	ldr	r3, [pc, #40]	@ (8003070 <osKernelInitialize+0x44>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d105      	bne.n	800305a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800304e:	4b08      	ldr	r3, [pc, #32]	@ (8003070 <osKernelInitialize+0x44>)
 8003050:	2201      	movs	r2, #1
 8003052:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003054:	2300      	movs	r3, #0
 8003056:	607b      	str	r3, [r7, #4]
 8003058:	e002      	b.n	8003060 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800305a:	f04f 33ff 	mov.w	r3, #4294967295
 800305e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003060:	687b      	ldr	r3, [r7, #4]
}
 8003062:	4618      	mov	r0, r3
 8003064:	370c      	adds	r7, #12
 8003066:	46bd      	mov	sp, r7
 8003068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306c:	4770      	bx	lr
 800306e:	bf00      	nop
 8003070:	200000bc 	.word	0x200000bc

08003074 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003074:	b580      	push	{r7, lr}
 8003076:	b082      	sub	sp, #8
 8003078:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800307a:	f3ef 8305 	mrs	r3, IPSR
 800307e:	603b      	str	r3, [r7, #0]
  return(result);
 8003080:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003082:	2b00      	cmp	r3, #0
 8003084:	d003      	beq.n	800308e <osKernelStart+0x1a>
    stat = osErrorISR;
 8003086:	f06f 0305 	mvn.w	r3, #5
 800308a:	607b      	str	r3, [r7, #4]
 800308c:	e010      	b.n	80030b0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800308e:	4b0b      	ldr	r3, [pc, #44]	@ (80030bc <osKernelStart+0x48>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	2b01      	cmp	r3, #1
 8003094:	d109      	bne.n	80030aa <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003096:	f7ff ffbf 	bl	8003018 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800309a:	4b08      	ldr	r3, [pc, #32]	@ (80030bc <osKernelStart+0x48>)
 800309c:	2202      	movs	r2, #2
 800309e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80030a0:	f001 f87a 	bl	8004198 <vTaskStartScheduler>
      stat = osOK;
 80030a4:	2300      	movs	r3, #0
 80030a6:	607b      	str	r3, [r7, #4]
 80030a8:	e002      	b.n	80030b0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80030aa:	f04f 33ff 	mov.w	r3, #4294967295
 80030ae:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80030b0:	687b      	ldr	r3, [r7, #4]
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	3708      	adds	r7, #8
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}
 80030ba:	bf00      	nop
 80030bc:	200000bc 	.word	0x200000bc

080030c0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b08e      	sub	sp, #56	@ 0x38
 80030c4:	af04      	add	r7, sp, #16
 80030c6:	60f8      	str	r0, [r7, #12]
 80030c8:	60b9      	str	r1, [r7, #8]
 80030ca:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80030cc:	2300      	movs	r3, #0
 80030ce:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80030d0:	f3ef 8305 	mrs	r3, IPSR
 80030d4:	617b      	str	r3, [r7, #20]
  return(result);
 80030d6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d17e      	bne.n	80031da <osThreadNew+0x11a>
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d07b      	beq.n	80031da <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80030e2:	2380      	movs	r3, #128	@ 0x80
 80030e4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80030e6:	2318      	movs	r3, #24
 80030e8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80030ea:	2300      	movs	r3, #0
 80030ec:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80030ee:	f04f 33ff 	mov.w	r3, #4294967295
 80030f2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d045      	beq.n	8003186 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d002      	beq.n	8003108 <osThreadNew+0x48>
        name = attr->name;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	699b      	ldr	r3, [r3, #24]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d002      	beq.n	8003116 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	699b      	ldr	r3, [r3, #24]
 8003114:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003116:	69fb      	ldr	r3, [r7, #28]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d008      	beq.n	800312e <osThreadNew+0x6e>
 800311c:	69fb      	ldr	r3, [r7, #28]
 800311e:	2b38      	cmp	r3, #56	@ 0x38
 8003120:	d805      	bhi.n	800312e <osThreadNew+0x6e>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	f003 0301 	and.w	r3, r3, #1
 800312a:	2b00      	cmp	r3, #0
 800312c:	d001      	beq.n	8003132 <osThreadNew+0x72>
        return (NULL);
 800312e:	2300      	movs	r3, #0
 8003130:	e054      	b.n	80031dc <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	695b      	ldr	r3, [r3, #20]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d003      	beq.n	8003142 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	695b      	ldr	r3, [r3, #20]
 800313e:	089b      	lsrs	r3, r3, #2
 8003140:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	689b      	ldr	r3, [r3, #8]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d00e      	beq.n	8003168 <osThreadNew+0xa8>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	68db      	ldr	r3, [r3, #12]
 800314e:	2b5b      	cmp	r3, #91	@ 0x5b
 8003150:	d90a      	bls.n	8003168 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003156:	2b00      	cmp	r3, #0
 8003158:	d006      	beq.n	8003168 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	695b      	ldr	r3, [r3, #20]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d002      	beq.n	8003168 <osThreadNew+0xa8>
        mem = 1;
 8003162:	2301      	movs	r3, #1
 8003164:	61bb      	str	r3, [r7, #24]
 8003166:	e010      	b.n	800318a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d10c      	bne.n	800318a <osThreadNew+0xca>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	68db      	ldr	r3, [r3, #12]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d108      	bne.n	800318a <osThreadNew+0xca>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	691b      	ldr	r3, [r3, #16]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d104      	bne.n	800318a <osThreadNew+0xca>
          mem = 0;
 8003180:	2300      	movs	r3, #0
 8003182:	61bb      	str	r3, [r7, #24]
 8003184:	e001      	b.n	800318a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003186:	2300      	movs	r3, #0
 8003188:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800318a:	69bb      	ldr	r3, [r7, #24]
 800318c:	2b01      	cmp	r3, #1
 800318e:	d110      	bne.n	80031b2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003194:	687a      	ldr	r2, [r7, #4]
 8003196:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003198:	9202      	str	r2, [sp, #8]
 800319a:	9301      	str	r3, [sp, #4]
 800319c:	69fb      	ldr	r3, [r7, #28]
 800319e:	9300      	str	r3, [sp, #0]
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	6a3a      	ldr	r2, [r7, #32]
 80031a4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80031a6:	68f8      	ldr	r0, [r7, #12]
 80031a8:	f000 fe1a 	bl	8003de0 <xTaskCreateStatic>
 80031ac:	4603      	mov	r3, r0
 80031ae:	613b      	str	r3, [r7, #16]
 80031b0:	e013      	b.n	80031da <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80031b2:	69bb      	ldr	r3, [r7, #24]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d110      	bne.n	80031da <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80031b8:	6a3b      	ldr	r3, [r7, #32]
 80031ba:	b29a      	uxth	r2, r3
 80031bc:	f107 0310 	add.w	r3, r7, #16
 80031c0:	9301      	str	r3, [sp, #4]
 80031c2:	69fb      	ldr	r3, [r7, #28]
 80031c4:	9300      	str	r3, [sp, #0]
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80031ca:	68f8      	ldr	r0, [r7, #12]
 80031cc:	f000 fe68 	bl	8003ea0 <xTaskCreate>
 80031d0:	4603      	mov	r3, r0
 80031d2:	2b01      	cmp	r3, #1
 80031d4:	d001      	beq.n	80031da <osThreadNew+0x11a>
            hTask = NULL;
 80031d6:	2300      	movs	r3, #0
 80031d8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80031da:	693b      	ldr	r3, [r7, #16]
}
 80031dc:	4618      	mov	r0, r3
 80031de:	3728      	adds	r7, #40	@ 0x28
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}

080031e4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b084      	sub	sp, #16
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80031ec:	f3ef 8305 	mrs	r3, IPSR
 80031f0:	60bb      	str	r3, [r7, #8]
  return(result);
 80031f2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d003      	beq.n	8003200 <osDelay+0x1c>
    stat = osErrorISR;
 80031f8:	f06f 0305 	mvn.w	r3, #5
 80031fc:	60fb      	str	r3, [r7, #12]
 80031fe:	e007      	b.n	8003210 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003200:	2300      	movs	r3, #0
 8003202:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d002      	beq.n	8003210 <osDelay+0x2c>
      vTaskDelay(ticks);
 800320a:	6878      	ldr	r0, [r7, #4]
 800320c:	f000 ff8e 	bl	800412c <vTaskDelay>
    }
  }

  return (stat);
 8003210:	68fb      	ldr	r3, [r7, #12]
}
 8003212:	4618      	mov	r0, r3
 8003214:	3710      	adds	r7, #16
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}
	...

0800321c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800321c:	b480      	push	{r7}
 800321e:	b085      	sub	sp, #20
 8003220:	af00      	add	r7, sp, #0
 8003222:	60f8      	str	r0, [r7, #12]
 8003224:	60b9      	str	r1, [r7, #8]
 8003226:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	4a07      	ldr	r2, [pc, #28]	@ (8003248 <vApplicationGetIdleTaskMemory+0x2c>)
 800322c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	4a06      	ldr	r2, [pc, #24]	@ (800324c <vApplicationGetIdleTaskMemory+0x30>)
 8003232:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2280      	movs	r2, #128	@ 0x80
 8003238:	601a      	str	r2, [r3, #0]
}
 800323a:	bf00      	nop
 800323c:	3714      	adds	r7, #20
 800323e:	46bd      	mov	sp, r7
 8003240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003244:	4770      	bx	lr
 8003246:	bf00      	nop
 8003248:	200000c0 	.word	0x200000c0
 800324c:	2000011c 	.word	0x2000011c

08003250 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003250:	b480      	push	{r7}
 8003252:	b085      	sub	sp, #20
 8003254:	af00      	add	r7, sp, #0
 8003256:	60f8      	str	r0, [r7, #12]
 8003258:	60b9      	str	r1, [r7, #8]
 800325a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	4a07      	ldr	r2, [pc, #28]	@ (800327c <vApplicationGetTimerTaskMemory+0x2c>)
 8003260:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	4a06      	ldr	r2, [pc, #24]	@ (8003280 <vApplicationGetTimerTaskMemory+0x30>)
 8003266:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800326e:	601a      	str	r2, [r3, #0]
}
 8003270:	bf00      	nop
 8003272:	3714      	adds	r7, #20
 8003274:	46bd      	mov	sp, r7
 8003276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327a:	4770      	bx	lr
 800327c:	2000031c 	.word	0x2000031c
 8003280:	20000378 	.word	0x20000378

08003284 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003284:	b480      	push	{r7}
 8003286:	b083      	sub	sp, #12
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	f103 0208 	add.w	r2, r3, #8
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	f04f 32ff 	mov.w	r2, #4294967295
 800329c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	f103 0208 	add.w	r2, r3, #8
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	f103 0208 	add.w	r2, r3, #8
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2200      	movs	r2, #0
 80032b6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80032b8:	bf00      	nop
 80032ba:	370c      	adds	r7, #12
 80032bc:	46bd      	mov	sp, r7
 80032be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c2:	4770      	bx	lr

080032c4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80032c4:	b480      	push	{r7}
 80032c6:	b083      	sub	sp, #12
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2200      	movs	r2, #0
 80032d0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80032d2:	bf00      	nop
 80032d4:	370c      	adds	r7, #12
 80032d6:	46bd      	mov	sp, r7
 80032d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032dc:	4770      	bx	lr

080032de <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80032de:	b480      	push	{r7}
 80032e0:	b085      	sub	sp, #20
 80032e2:	af00      	add	r7, sp, #0
 80032e4:	6078      	str	r0, [r7, #4]
 80032e6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	68fa      	ldr	r2, [r7, #12]
 80032f2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	689a      	ldr	r2, [r3, #8]
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	683a      	ldr	r2, [r7, #0]
 8003302:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	683a      	ldr	r2, [r7, #0]
 8003308:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	687a      	ldr	r2, [r7, #4]
 800330e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	1c5a      	adds	r2, r3, #1
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	601a      	str	r2, [r3, #0]
}
 800331a:	bf00      	nop
 800331c:	3714      	adds	r7, #20
 800331e:	46bd      	mov	sp, r7
 8003320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003324:	4770      	bx	lr

08003326 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003326:	b480      	push	{r7}
 8003328:	b085      	sub	sp, #20
 800332a:	af00      	add	r7, sp, #0
 800332c:	6078      	str	r0, [r7, #4]
 800332e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	f1b3 3fff 	cmp.w	r3, #4294967295
 800333c:	d103      	bne.n	8003346 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	691b      	ldr	r3, [r3, #16]
 8003342:	60fb      	str	r3, [r7, #12]
 8003344:	e00c      	b.n	8003360 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	3308      	adds	r3, #8
 800334a:	60fb      	str	r3, [r7, #12]
 800334c:	e002      	b.n	8003354 <vListInsert+0x2e>
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	60fb      	str	r3, [r7, #12]
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	68ba      	ldr	r2, [r7, #8]
 800335c:	429a      	cmp	r2, r3
 800335e:	d2f6      	bcs.n	800334e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	685a      	ldr	r2, [r3, #4]
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	683a      	ldr	r2, [r7, #0]
 800336e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	68fa      	ldr	r2, [r7, #12]
 8003374:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	683a      	ldr	r2, [r7, #0]
 800337a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	687a      	ldr	r2, [r7, #4]
 8003380:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	1c5a      	adds	r2, r3, #1
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	601a      	str	r2, [r3, #0]
}
 800338c:	bf00      	nop
 800338e:	3714      	adds	r7, #20
 8003390:	46bd      	mov	sp, r7
 8003392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003396:	4770      	bx	lr

08003398 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003398:	b480      	push	{r7}
 800339a:	b085      	sub	sp, #20
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	691b      	ldr	r3, [r3, #16]
 80033a4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	687a      	ldr	r2, [r7, #4]
 80033ac:	6892      	ldr	r2, [r2, #8]
 80033ae:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	687a      	ldr	r2, [r7, #4]
 80033b6:	6852      	ldr	r2, [r2, #4]
 80033b8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	687a      	ldr	r2, [r7, #4]
 80033c0:	429a      	cmp	r2, r3
 80033c2:	d103      	bne.n	80033cc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	689a      	ldr	r2, [r3, #8]
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2200      	movs	r2, #0
 80033d0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	1e5a      	subs	r2, r3, #1
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	3714      	adds	r7, #20
 80033e4:	46bd      	mov	sp, r7
 80033e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ea:	4770      	bx	lr

080033ec <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b084      	sub	sp, #16
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
 80033f4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d10b      	bne.n	8003418 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003400:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003404:	f383 8811 	msr	BASEPRI, r3
 8003408:	f3bf 8f6f 	isb	sy
 800340c:	f3bf 8f4f 	dsb	sy
 8003410:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003412:	bf00      	nop
 8003414:	bf00      	nop
 8003416:	e7fd      	b.n	8003414 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003418:	f002 f876 	bl	8005508 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003424:	68f9      	ldr	r1, [r7, #12]
 8003426:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003428:	fb01 f303 	mul.w	r3, r1, r3
 800342c:	441a      	add	r2, r3
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2200      	movs	r2, #0
 8003436:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681a      	ldr	r2, [r3, #0]
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681a      	ldr	r2, [r3, #0]
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003448:	3b01      	subs	r3, #1
 800344a:	68f9      	ldr	r1, [r7, #12]
 800344c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800344e:	fb01 f303 	mul.w	r3, r1, r3
 8003452:	441a      	add	r2, r3
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	22ff      	movs	r2, #255	@ 0xff
 800345c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	22ff      	movs	r2, #255	@ 0xff
 8003464:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d114      	bne.n	8003498 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	691b      	ldr	r3, [r3, #16]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d01a      	beq.n	80034ac <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	3310      	adds	r3, #16
 800347a:	4618      	mov	r0, r3
 800347c:	f001 f91a 	bl	80046b4 <xTaskRemoveFromEventList>
 8003480:	4603      	mov	r3, r0
 8003482:	2b00      	cmp	r3, #0
 8003484:	d012      	beq.n	80034ac <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003486:	4b0d      	ldr	r3, [pc, #52]	@ (80034bc <xQueueGenericReset+0xd0>)
 8003488:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800348c:	601a      	str	r2, [r3, #0]
 800348e:	f3bf 8f4f 	dsb	sy
 8003492:	f3bf 8f6f 	isb	sy
 8003496:	e009      	b.n	80034ac <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	3310      	adds	r3, #16
 800349c:	4618      	mov	r0, r3
 800349e:	f7ff fef1 	bl	8003284 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	3324      	adds	r3, #36	@ 0x24
 80034a6:	4618      	mov	r0, r3
 80034a8:	f7ff feec 	bl	8003284 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80034ac:	f002 f85e 	bl	800556c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80034b0:	2301      	movs	r3, #1
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	3710      	adds	r7, #16
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}
 80034ba:	bf00      	nop
 80034bc:	e000ed04 	.word	0xe000ed04

080034c0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b08e      	sub	sp, #56	@ 0x38
 80034c4:	af02      	add	r7, sp, #8
 80034c6:	60f8      	str	r0, [r7, #12]
 80034c8:	60b9      	str	r1, [r7, #8]
 80034ca:	607a      	str	r2, [r7, #4]
 80034cc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d10b      	bne.n	80034ec <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80034d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034d8:	f383 8811 	msr	BASEPRI, r3
 80034dc:	f3bf 8f6f 	isb	sy
 80034e0:	f3bf 8f4f 	dsb	sy
 80034e4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80034e6:	bf00      	nop
 80034e8:	bf00      	nop
 80034ea:	e7fd      	b.n	80034e8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d10b      	bne.n	800350a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80034f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034f6:	f383 8811 	msr	BASEPRI, r3
 80034fa:	f3bf 8f6f 	isb	sy
 80034fe:	f3bf 8f4f 	dsb	sy
 8003502:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003504:	bf00      	nop
 8003506:	bf00      	nop
 8003508:	e7fd      	b.n	8003506 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d002      	beq.n	8003516 <xQueueGenericCreateStatic+0x56>
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d001      	beq.n	800351a <xQueueGenericCreateStatic+0x5a>
 8003516:	2301      	movs	r3, #1
 8003518:	e000      	b.n	800351c <xQueueGenericCreateStatic+0x5c>
 800351a:	2300      	movs	r3, #0
 800351c:	2b00      	cmp	r3, #0
 800351e:	d10b      	bne.n	8003538 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8003520:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003524:	f383 8811 	msr	BASEPRI, r3
 8003528:	f3bf 8f6f 	isb	sy
 800352c:	f3bf 8f4f 	dsb	sy
 8003530:	623b      	str	r3, [r7, #32]
}
 8003532:	bf00      	nop
 8003534:	bf00      	nop
 8003536:	e7fd      	b.n	8003534 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d102      	bne.n	8003544 <xQueueGenericCreateStatic+0x84>
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d101      	bne.n	8003548 <xQueueGenericCreateStatic+0x88>
 8003544:	2301      	movs	r3, #1
 8003546:	e000      	b.n	800354a <xQueueGenericCreateStatic+0x8a>
 8003548:	2300      	movs	r3, #0
 800354a:	2b00      	cmp	r3, #0
 800354c:	d10b      	bne.n	8003566 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800354e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003552:	f383 8811 	msr	BASEPRI, r3
 8003556:	f3bf 8f6f 	isb	sy
 800355a:	f3bf 8f4f 	dsb	sy
 800355e:	61fb      	str	r3, [r7, #28]
}
 8003560:	bf00      	nop
 8003562:	bf00      	nop
 8003564:	e7fd      	b.n	8003562 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003566:	2350      	movs	r3, #80	@ 0x50
 8003568:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	2b50      	cmp	r3, #80	@ 0x50
 800356e:	d00b      	beq.n	8003588 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8003570:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003574:	f383 8811 	msr	BASEPRI, r3
 8003578:	f3bf 8f6f 	isb	sy
 800357c:	f3bf 8f4f 	dsb	sy
 8003580:	61bb      	str	r3, [r7, #24]
}
 8003582:	bf00      	nop
 8003584:	bf00      	nop
 8003586:	e7fd      	b.n	8003584 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003588:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800358e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003590:	2b00      	cmp	r3, #0
 8003592:	d00d      	beq.n	80035b0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003594:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003596:	2201      	movs	r2, #1
 8003598:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800359c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80035a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035a2:	9300      	str	r3, [sp, #0]
 80035a4:	4613      	mov	r3, r2
 80035a6:	687a      	ldr	r2, [r7, #4]
 80035a8:	68b9      	ldr	r1, [r7, #8]
 80035aa:	68f8      	ldr	r0, [r7, #12]
 80035ac:	f000 f805 	bl	80035ba <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80035b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80035b2:	4618      	mov	r0, r3
 80035b4:	3730      	adds	r7, #48	@ 0x30
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}

080035ba <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80035ba:	b580      	push	{r7, lr}
 80035bc:	b084      	sub	sp, #16
 80035be:	af00      	add	r7, sp, #0
 80035c0:	60f8      	str	r0, [r7, #12]
 80035c2:	60b9      	str	r1, [r7, #8]
 80035c4:	607a      	str	r2, [r7, #4]
 80035c6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d103      	bne.n	80035d6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80035ce:	69bb      	ldr	r3, [r7, #24]
 80035d0:	69ba      	ldr	r2, [r7, #24]
 80035d2:	601a      	str	r2, [r3, #0]
 80035d4:	e002      	b.n	80035dc <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80035d6:	69bb      	ldr	r3, [r7, #24]
 80035d8:	687a      	ldr	r2, [r7, #4]
 80035da:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80035dc:	69bb      	ldr	r3, [r7, #24]
 80035de:	68fa      	ldr	r2, [r7, #12]
 80035e0:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80035e2:	69bb      	ldr	r3, [r7, #24]
 80035e4:	68ba      	ldr	r2, [r7, #8]
 80035e6:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80035e8:	2101      	movs	r1, #1
 80035ea:	69b8      	ldr	r0, [r7, #24]
 80035ec:	f7ff fefe 	bl	80033ec <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80035f0:	69bb      	ldr	r3, [r7, #24]
 80035f2:	78fa      	ldrb	r2, [r7, #3]
 80035f4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80035f8:	bf00      	nop
 80035fa:	3710      	adds	r7, #16
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bd80      	pop	{r7, pc}

08003600 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b08e      	sub	sp, #56	@ 0x38
 8003604:	af00      	add	r7, sp, #0
 8003606:	60f8      	str	r0, [r7, #12]
 8003608:	60b9      	str	r1, [r7, #8]
 800360a:	607a      	str	r2, [r7, #4]
 800360c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800360e:	2300      	movs	r3, #0
 8003610:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003616:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003618:	2b00      	cmp	r3, #0
 800361a:	d10b      	bne.n	8003634 <xQueueGenericSend+0x34>
	__asm volatile
 800361c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003620:	f383 8811 	msr	BASEPRI, r3
 8003624:	f3bf 8f6f 	isb	sy
 8003628:	f3bf 8f4f 	dsb	sy
 800362c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800362e:	bf00      	nop
 8003630:	bf00      	nop
 8003632:	e7fd      	b.n	8003630 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d103      	bne.n	8003642 <xQueueGenericSend+0x42>
 800363a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800363c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800363e:	2b00      	cmp	r3, #0
 8003640:	d101      	bne.n	8003646 <xQueueGenericSend+0x46>
 8003642:	2301      	movs	r3, #1
 8003644:	e000      	b.n	8003648 <xQueueGenericSend+0x48>
 8003646:	2300      	movs	r3, #0
 8003648:	2b00      	cmp	r3, #0
 800364a:	d10b      	bne.n	8003664 <xQueueGenericSend+0x64>
	__asm volatile
 800364c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003650:	f383 8811 	msr	BASEPRI, r3
 8003654:	f3bf 8f6f 	isb	sy
 8003658:	f3bf 8f4f 	dsb	sy
 800365c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800365e:	bf00      	nop
 8003660:	bf00      	nop
 8003662:	e7fd      	b.n	8003660 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	2b02      	cmp	r3, #2
 8003668:	d103      	bne.n	8003672 <xQueueGenericSend+0x72>
 800366a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800366c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800366e:	2b01      	cmp	r3, #1
 8003670:	d101      	bne.n	8003676 <xQueueGenericSend+0x76>
 8003672:	2301      	movs	r3, #1
 8003674:	e000      	b.n	8003678 <xQueueGenericSend+0x78>
 8003676:	2300      	movs	r3, #0
 8003678:	2b00      	cmp	r3, #0
 800367a:	d10b      	bne.n	8003694 <xQueueGenericSend+0x94>
	__asm volatile
 800367c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003680:	f383 8811 	msr	BASEPRI, r3
 8003684:	f3bf 8f6f 	isb	sy
 8003688:	f3bf 8f4f 	dsb	sy
 800368c:	623b      	str	r3, [r7, #32]
}
 800368e:	bf00      	nop
 8003690:	bf00      	nop
 8003692:	e7fd      	b.n	8003690 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003694:	f001 f9ce 	bl	8004a34 <xTaskGetSchedulerState>
 8003698:	4603      	mov	r3, r0
 800369a:	2b00      	cmp	r3, #0
 800369c:	d102      	bne.n	80036a4 <xQueueGenericSend+0xa4>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d101      	bne.n	80036a8 <xQueueGenericSend+0xa8>
 80036a4:	2301      	movs	r3, #1
 80036a6:	e000      	b.n	80036aa <xQueueGenericSend+0xaa>
 80036a8:	2300      	movs	r3, #0
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d10b      	bne.n	80036c6 <xQueueGenericSend+0xc6>
	__asm volatile
 80036ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036b2:	f383 8811 	msr	BASEPRI, r3
 80036b6:	f3bf 8f6f 	isb	sy
 80036ba:	f3bf 8f4f 	dsb	sy
 80036be:	61fb      	str	r3, [r7, #28]
}
 80036c0:	bf00      	nop
 80036c2:	bf00      	nop
 80036c4:	e7fd      	b.n	80036c2 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80036c6:	f001 ff1f 	bl	8005508 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80036ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036cc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80036ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036d2:	429a      	cmp	r2, r3
 80036d4:	d302      	bcc.n	80036dc <xQueueGenericSend+0xdc>
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	2b02      	cmp	r3, #2
 80036da:	d129      	bne.n	8003730 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80036dc:	683a      	ldr	r2, [r7, #0]
 80036de:	68b9      	ldr	r1, [r7, #8]
 80036e0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80036e2:	f000 fa0f 	bl	8003b04 <prvCopyDataToQueue>
 80036e6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80036e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d010      	beq.n	8003712 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80036f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036f2:	3324      	adds	r3, #36	@ 0x24
 80036f4:	4618      	mov	r0, r3
 80036f6:	f000 ffdd 	bl	80046b4 <xTaskRemoveFromEventList>
 80036fa:	4603      	mov	r3, r0
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d013      	beq.n	8003728 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003700:	4b3f      	ldr	r3, [pc, #252]	@ (8003800 <xQueueGenericSend+0x200>)
 8003702:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003706:	601a      	str	r2, [r3, #0]
 8003708:	f3bf 8f4f 	dsb	sy
 800370c:	f3bf 8f6f 	isb	sy
 8003710:	e00a      	b.n	8003728 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003712:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003714:	2b00      	cmp	r3, #0
 8003716:	d007      	beq.n	8003728 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003718:	4b39      	ldr	r3, [pc, #228]	@ (8003800 <xQueueGenericSend+0x200>)
 800371a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800371e:	601a      	str	r2, [r3, #0]
 8003720:	f3bf 8f4f 	dsb	sy
 8003724:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003728:	f001 ff20 	bl	800556c <vPortExitCritical>
				return pdPASS;
 800372c:	2301      	movs	r3, #1
 800372e:	e063      	b.n	80037f8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d103      	bne.n	800373e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003736:	f001 ff19 	bl	800556c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800373a:	2300      	movs	r3, #0
 800373c:	e05c      	b.n	80037f8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800373e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003740:	2b00      	cmp	r3, #0
 8003742:	d106      	bne.n	8003752 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003744:	f107 0314 	add.w	r3, r7, #20
 8003748:	4618      	mov	r0, r3
 800374a:	f001 f817 	bl	800477c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800374e:	2301      	movs	r3, #1
 8003750:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003752:	f001 ff0b 	bl	800556c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003756:	f000 fd87 	bl	8004268 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800375a:	f001 fed5 	bl	8005508 <vPortEnterCritical>
 800375e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003760:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003764:	b25b      	sxtb	r3, r3
 8003766:	f1b3 3fff 	cmp.w	r3, #4294967295
 800376a:	d103      	bne.n	8003774 <xQueueGenericSend+0x174>
 800376c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800376e:	2200      	movs	r2, #0
 8003770:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003774:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003776:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800377a:	b25b      	sxtb	r3, r3
 800377c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003780:	d103      	bne.n	800378a <xQueueGenericSend+0x18a>
 8003782:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003784:	2200      	movs	r2, #0
 8003786:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800378a:	f001 feef 	bl	800556c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800378e:	1d3a      	adds	r2, r7, #4
 8003790:	f107 0314 	add.w	r3, r7, #20
 8003794:	4611      	mov	r1, r2
 8003796:	4618      	mov	r0, r3
 8003798:	f001 f806 	bl	80047a8 <xTaskCheckForTimeOut>
 800379c:	4603      	mov	r3, r0
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d124      	bne.n	80037ec <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80037a2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80037a4:	f000 faa6 	bl	8003cf4 <prvIsQueueFull>
 80037a8:	4603      	mov	r3, r0
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d018      	beq.n	80037e0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80037ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037b0:	3310      	adds	r3, #16
 80037b2:	687a      	ldr	r2, [r7, #4]
 80037b4:	4611      	mov	r1, r2
 80037b6:	4618      	mov	r0, r3
 80037b8:	f000 ff2a 	bl	8004610 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80037bc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80037be:	f000 fa31 	bl	8003c24 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80037c2:	f000 fd5f 	bl	8004284 <xTaskResumeAll>
 80037c6:	4603      	mov	r3, r0
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	f47f af7c 	bne.w	80036c6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80037ce:	4b0c      	ldr	r3, [pc, #48]	@ (8003800 <xQueueGenericSend+0x200>)
 80037d0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80037d4:	601a      	str	r2, [r3, #0]
 80037d6:	f3bf 8f4f 	dsb	sy
 80037da:	f3bf 8f6f 	isb	sy
 80037de:	e772      	b.n	80036c6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80037e0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80037e2:	f000 fa1f 	bl	8003c24 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80037e6:	f000 fd4d 	bl	8004284 <xTaskResumeAll>
 80037ea:	e76c      	b.n	80036c6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80037ec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80037ee:	f000 fa19 	bl	8003c24 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80037f2:	f000 fd47 	bl	8004284 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80037f6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	3738      	adds	r7, #56	@ 0x38
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bd80      	pop	{r7, pc}
 8003800:	e000ed04 	.word	0xe000ed04

08003804 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b090      	sub	sp, #64	@ 0x40
 8003808:	af00      	add	r7, sp, #0
 800380a:	60f8      	str	r0, [r7, #12]
 800380c:	60b9      	str	r1, [r7, #8]
 800380e:	607a      	str	r2, [r7, #4]
 8003810:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8003816:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003818:	2b00      	cmp	r3, #0
 800381a:	d10b      	bne.n	8003834 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800381c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003820:	f383 8811 	msr	BASEPRI, r3
 8003824:	f3bf 8f6f 	isb	sy
 8003828:	f3bf 8f4f 	dsb	sy
 800382c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800382e:	bf00      	nop
 8003830:	bf00      	nop
 8003832:	e7fd      	b.n	8003830 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d103      	bne.n	8003842 <xQueueGenericSendFromISR+0x3e>
 800383a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800383c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800383e:	2b00      	cmp	r3, #0
 8003840:	d101      	bne.n	8003846 <xQueueGenericSendFromISR+0x42>
 8003842:	2301      	movs	r3, #1
 8003844:	e000      	b.n	8003848 <xQueueGenericSendFromISR+0x44>
 8003846:	2300      	movs	r3, #0
 8003848:	2b00      	cmp	r3, #0
 800384a:	d10b      	bne.n	8003864 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800384c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003850:	f383 8811 	msr	BASEPRI, r3
 8003854:	f3bf 8f6f 	isb	sy
 8003858:	f3bf 8f4f 	dsb	sy
 800385c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800385e:	bf00      	nop
 8003860:	bf00      	nop
 8003862:	e7fd      	b.n	8003860 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	2b02      	cmp	r3, #2
 8003868:	d103      	bne.n	8003872 <xQueueGenericSendFromISR+0x6e>
 800386a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800386c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800386e:	2b01      	cmp	r3, #1
 8003870:	d101      	bne.n	8003876 <xQueueGenericSendFromISR+0x72>
 8003872:	2301      	movs	r3, #1
 8003874:	e000      	b.n	8003878 <xQueueGenericSendFromISR+0x74>
 8003876:	2300      	movs	r3, #0
 8003878:	2b00      	cmp	r3, #0
 800387a:	d10b      	bne.n	8003894 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800387c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003880:	f383 8811 	msr	BASEPRI, r3
 8003884:	f3bf 8f6f 	isb	sy
 8003888:	f3bf 8f4f 	dsb	sy
 800388c:	623b      	str	r3, [r7, #32]
}
 800388e:	bf00      	nop
 8003890:	bf00      	nop
 8003892:	e7fd      	b.n	8003890 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003894:	f001 ff18 	bl	80056c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003898:	f3ef 8211 	mrs	r2, BASEPRI
 800389c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038a0:	f383 8811 	msr	BASEPRI, r3
 80038a4:	f3bf 8f6f 	isb	sy
 80038a8:	f3bf 8f4f 	dsb	sy
 80038ac:	61fa      	str	r2, [r7, #28]
 80038ae:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80038b0:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80038b2:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80038b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038b6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80038b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038bc:	429a      	cmp	r2, r3
 80038be:	d302      	bcc.n	80038c6 <xQueueGenericSendFromISR+0xc2>
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	2b02      	cmp	r3, #2
 80038c4:	d12f      	bne.n	8003926 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80038c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038c8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80038cc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80038d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80038d6:	683a      	ldr	r2, [r7, #0]
 80038d8:	68b9      	ldr	r1, [r7, #8]
 80038da:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80038dc:	f000 f912 	bl	8003b04 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80038e0:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80038e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038e8:	d112      	bne.n	8003910 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80038ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d016      	beq.n	8003920 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80038f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038f4:	3324      	adds	r3, #36	@ 0x24
 80038f6:	4618      	mov	r0, r3
 80038f8:	f000 fedc 	bl	80046b4 <xTaskRemoveFromEventList>
 80038fc:	4603      	mov	r3, r0
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d00e      	beq.n	8003920 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d00b      	beq.n	8003920 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2201      	movs	r2, #1
 800390c:	601a      	str	r2, [r3, #0]
 800390e:	e007      	b.n	8003920 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003910:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003914:	3301      	adds	r3, #1
 8003916:	b2db      	uxtb	r3, r3
 8003918:	b25a      	sxtb	r2, r3
 800391a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800391c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8003920:	2301      	movs	r3, #1
 8003922:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8003924:	e001      	b.n	800392a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003926:	2300      	movs	r3, #0
 8003928:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800392a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800392c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003934:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003936:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8003938:	4618      	mov	r0, r3
 800393a:	3740      	adds	r7, #64	@ 0x40
 800393c:	46bd      	mov	sp, r7
 800393e:	bd80      	pop	{r7, pc}

08003940 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b08c      	sub	sp, #48	@ 0x30
 8003944:	af00      	add	r7, sp, #0
 8003946:	60f8      	str	r0, [r7, #12]
 8003948:	60b9      	str	r1, [r7, #8]
 800394a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800394c:	2300      	movs	r3, #0
 800394e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003954:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003956:	2b00      	cmp	r3, #0
 8003958:	d10b      	bne.n	8003972 <xQueueReceive+0x32>
	__asm volatile
 800395a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800395e:	f383 8811 	msr	BASEPRI, r3
 8003962:	f3bf 8f6f 	isb	sy
 8003966:	f3bf 8f4f 	dsb	sy
 800396a:	623b      	str	r3, [r7, #32]
}
 800396c:	bf00      	nop
 800396e:	bf00      	nop
 8003970:	e7fd      	b.n	800396e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d103      	bne.n	8003980 <xQueueReceive+0x40>
 8003978:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800397a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800397c:	2b00      	cmp	r3, #0
 800397e:	d101      	bne.n	8003984 <xQueueReceive+0x44>
 8003980:	2301      	movs	r3, #1
 8003982:	e000      	b.n	8003986 <xQueueReceive+0x46>
 8003984:	2300      	movs	r3, #0
 8003986:	2b00      	cmp	r3, #0
 8003988:	d10b      	bne.n	80039a2 <xQueueReceive+0x62>
	__asm volatile
 800398a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800398e:	f383 8811 	msr	BASEPRI, r3
 8003992:	f3bf 8f6f 	isb	sy
 8003996:	f3bf 8f4f 	dsb	sy
 800399a:	61fb      	str	r3, [r7, #28]
}
 800399c:	bf00      	nop
 800399e:	bf00      	nop
 80039a0:	e7fd      	b.n	800399e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80039a2:	f001 f847 	bl	8004a34 <xTaskGetSchedulerState>
 80039a6:	4603      	mov	r3, r0
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d102      	bne.n	80039b2 <xQueueReceive+0x72>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d101      	bne.n	80039b6 <xQueueReceive+0x76>
 80039b2:	2301      	movs	r3, #1
 80039b4:	e000      	b.n	80039b8 <xQueueReceive+0x78>
 80039b6:	2300      	movs	r3, #0
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d10b      	bne.n	80039d4 <xQueueReceive+0x94>
	__asm volatile
 80039bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039c0:	f383 8811 	msr	BASEPRI, r3
 80039c4:	f3bf 8f6f 	isb	sy
 80039c8:	f3bf 8f4f 	dsb	sy
 80039cc:	61bb      	str	r3, [r7, #24]
}
 80039ce:	bf00      	nop
 80039d0:	bf00      	nop
 80039d2:	e7fd      	b.n	80039d0 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80039d4:	f001 fd98 	bl	8005508 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80039d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039dc:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80039de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d01f      	beq.n	8003a24 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80039e4:	68b9      	ldr	r1, [r7, #8]
 80039e6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80039e8:	f000 f8f6 	bl	8003bd8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80039ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039ee:	1e5a      	subs	r2, r3, #1
 80039f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039f2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80039f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039f6:	691b      	ldr	r3, [r3, #16]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d00f      	beq.n	8003a1c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80039fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039fe:	3310      	adds	r3, #16
 8003a00:	4618      	mov	r0, r3
 8003a02:	f000 fe57 	bl	80046b4 <xTaskRemoveFromEventList>
 8003a06:	4603      	mov	r3, r0
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d007      	beq.n	8003a1c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003a0c:	4b3c      	ldr	r3, [pc, #240]	@ (8003b00 <xQueueReceive+0x1c0>)
 8003a0e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003a12:	601a      	str	r2, [r3, #0]
 8003a14:	f3bf 8f4f 	dsb	sy
 8003a18:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003a1c:	f001 fda6 	bl	800556c <vPortExitCritical>
				return pdPASS;
 8003a20:	2301      	movs	r3, #1
 8003a22:	e069      	b.n	8003af8 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d103      	bne.n	8003a32 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003a2a:	f001 fd9f 	bl	800556c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	e062      	b.n	8003af8 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003a32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d106      	bne.n	8003a46 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003a38:	f107 0310 	add.w	r3, r7, #16
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	f000 fe9d 	bl	800477c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003a42:	2301      	movs	r3, #1
 8003a44:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003a46:	f001 fd91 	bl	800556c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003a4a:	f000 fc0d 	bl	8004268 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003a4e:	f001 fd5b 	bl	8005508 <vPortEnterCritical>
 8003a52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a54:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003a58:	b25b      	sxtb	r3, r3
 8003a5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a5e:	d103      	bne.n	8003a68 <xQueueReceive+0x128>
 8003a60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a62:	2200      	movs	r2, #0
 8003a64:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003a68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a6a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003a6e:	b25b      	sxtb	r3, r3
 8003a70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a74:	d103      	bne.n	8003a7e <xQueueReceive+0x13e>
 8003a76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a78:	2200      	movs	r2, #0
 8003a7a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003a7e:	f001 fd75 	bl	800556c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003a82:	1d3a      	adds	r2, r7, #4
 8003a84:	f107 0310 	add.w	r3, r7, #16
 8003a88:	4611      	mov	r1, r2
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f000 fe8c 	bl	80047a8 <xTaskCheckForTimeOut>
 8003a90:	4603      	mov	r3, r0
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d123      	bne.n	8003ade <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003a96:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003a98:	f000 f916 	bl	8003cc8 <prvIsQueueEmpty>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d017      	beq.n	8003ad2 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003aa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003aa4:	3324      	adds	r3, #36	@ 0x24
 8003aa6:	687a      	ldr	r2, [r7, #4]
 8003aa8:	4611      	mov	r1, r2
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f000 fdb0 	bl	8004610 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003ab0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003ab2:	f000 f8b7 	bl	8003c24 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003ab6:	f000 fbe5 	bl	8004284 <xTaskResumeAll>
 8003aba:	4603      	mov	r3, r0
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d189      	bne.n	80039d4 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8003ac0:	4b0f      	ldr	r3, [pc, #60]	@ (8003b00 <xQueueReceive+0x1c0>)
 8003ac2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003ac6:	601a      	str	r2, [r3, #0]
 8003ac8:	f3bf 8f4f 	dsb	sy
 8003acc:	f3bf 8f6f 	isb	sy
 8003ad0:	e780      	b.n	80039d4 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003ad2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003ad4:	f000 f8a6 	bl	8003c24 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003ad8:	f000 fbd4 	bl	8004284 <xTaskResumeAll>
 8003adc:	e77a      	b.n	80039d4 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003ade:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003ae0:	f000 f8a0 	bl	8003c24 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003ae4:	f000 fbce 	bl	8004284 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003ae8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003aea:	f000 f8ed 	bl	8003cc8 <prvIsQueueEmpty>
 8003aee:	4603      	mov	r3, r0
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	f43f af6f 	beq.w	80039d4 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003af6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	3730      	adds	r7, #48	@ 0x30
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd80      	pop	{r7, pc}
 8003b00:	e000ed04 	.word	0xe000ed04

08003b04 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b086      	sub	sp, #24
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	60f8      	str	r0, [r7, #12]
 8003b0c:	60b9      	str	r1, [r7, #8]
 8003b0e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003b10:	2300      	movs	r3, #0
 8003b12:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b18:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d10d      	bne.n	8003b3e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d14d      	bne.n	8003bc6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f000 ff9e 	bl	8004a70 <xTaskPriorityDisinherit>
 8003b34:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	609a      	str	r2, [r3, #8]
 8003b3c:	e043      	b.n	8003bc6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d119      	bne.n	8003b78 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	6858      	ldr	r0, [r3, #4]
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b4c:	461a      	mov	r2, r3
 8003b4e:	68b9      	ldr	r1, [r7, #8]
 8003b50:	f002 f816 	bl	8005b80 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	685a      	ldr	r2, [r3, #4]
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b5c:	441a      	add	r2, r3
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	685a      	ldr	r2, [r3, #4]
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	689b      	ldr	r3, [r3, #8]
 8003b6a:	429a      	cmp	r2, r3
 8003b6c:	d32b      	bcc.n	8003bc6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681a      	ldr	r2, [r3, #0]
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	605a      	str	r2, [r3, #4]
 8003b76:	e026      	b.n	8003bc6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	68d8      	ldr	r0, [r3, #12]
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b80:	461a      	mov	r2, r3
 8003b82:	68b9      	ldr	r1, [r7, #8]
 8003b84:	f001 fffc 	bl	8005b80 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	68da      	ldr	r2, [r3, #12]
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b90:	425b      	negs	r3, r3
 8003b92:	441a      	add	r2, r3
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	68da      	ldr	r2, [r3, #12]
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	429a      	cmp	r2, r3
 8003ba2:	d207      	bcs.n	8003bb4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	689a      	ldr	r2, [r3, #8]
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bac:	425b      	negs	r3, r3
 8003bae:	441a      	add	r2, r3
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2b02      	cmp	r3, #2
 8003bb8:	d105      	bne.n	8003bc6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003bba:	693b      	ldr	r3, [r7, #16]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d002      	beq.n	8003bc6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	3b01      	subs	r3, #1
 8003bc4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	1c5a      	adds	r2, r3, #1
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8003bce:	697b      	ldr	r3, [r7, #20]
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	3718      	adds	r7, #24
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}

08003bd8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b082      	sub	sp, #8
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
 8003be0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d018      	beq.n	8003c1c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	68da      	ldr	r2, [r3, #12]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bf2:	441a      	add	r2, r3
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	68da      	ldr	r2, [r3, #12]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	429a      	cmp	r2, r3
 8003c02:	d303      	bcc.n	8003c0c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681a      	ldr	r2, [r3, #0]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	68d9      	ldr	r1, [r3, #12]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c14:	461a      	mov	r2, r3
 8003c16:	6838      	ldr	r0, [r7, #0]
 8003c18:	f001 ffb2 	bl	8005b80 <memcpy>
	}
}
 8003c1c:	bf00      	nop
 8003c1e:	3708      	adds	r7, #8
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bd80      	pop	{r7, pc}

08003c24 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b084      	sub	sp, #16
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003c2c:	f001 fc6c 	bl	8005508 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003c36:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003c38:	e011      	b.n	8003c5e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d012      	beq.n	8003c68 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	3324      	adds	r3, #36	@ 0x24
 8003c46:	4618      	mov	r0, r3
 8003c48:	f000 fd34 	bl	80046b4 <xTaskRemoveFromEventList>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d001      	beq.n	8003c56 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003c52:	f000 fe0d 	bl	8004870 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003c56:	7bfb      	ldrb	r3, [r7, #15]
 8003c58:	3b01      	subs	r3, #1
 8003c5a:	b2db      	uxtb	r3, r3
 8003c5c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003c5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	dce9      	bgt.n	8003c3a <prvUnlockQueue+0x16>
 8003c66:	e000      	b.n	8003c6a <prvUnlockQueue+0x46>
					break;
 8003c68:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	22ff      	movs	r2, #255	@ 0xff
 8003c6e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8003c72:	f001 fc7b 	bl	800556c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003c76:	f001 fc47 	bl	8005508 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003c80:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003c82:	e011      	b.n	8003ca8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	691b      	ldr	r3, [r3, #16]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d012      	beq.n	8003cb2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	3310      	adds	r3, #16
 8003c90:	4618      	mov	r0, r3
 8003c92:	f000 fd0f 	bl	80046b4 <xTaskRemoveFromEventList>
 8003c96:	4603      	mov	r3, r0
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d001      	beq.n	8003ca0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003c9c:	f000 fde8 	bl	8004870 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003ca0:	7bbb      	ldrb	r3, [r7, #14]
 8003ca2:	3b01      	subs	r3, #1
 8003ca4:	b2db      	uxtb	r3, r3
 8003ca6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003ca8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	dce9      	bgt.n	8003c84 <prvUnlockQueue+0x60>
 8003cb0:	e000      	b.n	8003cb4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003cb2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	22ff      	movs	r2, #255	@ 0xff
 8003cb8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8003cbc:	f001 fc56 	bl	800556c <vPortExitCritical>
}
 8003cc0:	bf00      	nop
 8003cc2:	3710      	adds	r7, #16
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bd80      	pop	{r7, pc}

08003cc8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b084      	sub	sp, #16
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003cd0:	f001 fc1a 	bl	8005508 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d102      	bne.n	8003ce2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	60fb      	str	r3, [r7, #12]
 8003ce0:	e001      	b.n	8003ce6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003ce6:	f001 fc41 	bl	800556c <vPortExitCritical>

	return xReturn;
 8003cea:	68fb      	ldr	r3, [r7, #12]
}
 8003cec:	4618      	mov	r0, r3
 8003cee:	3710      	adds	r7, #16
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bd80      	pop	{r7, pc}

08003cf4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b084      	sub	sp, #16
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003cfc:	f001 fc04 	bl	8005508 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d08:	429a      	cmp	r2, r3
 8003d0a:	d102      	bne.n	8003d12 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	60fb      	str	r3, [r7, #12]
 8003d10:	e001      	b.n	8003d16 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003d12:	2300      	movs	r3, #0
 8003d14:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003d16:	f001 fc29 	bl	800556c <vPortExitCritical>

	return xReturn;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	3710      	adds	r7, #16
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bd80      	pop	{r7, pc}

08003d24 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003d24:	b480      	push	{r7}
 8003d26:	b085      	sub	sp, #20
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
 8003d2c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003d2e:	2300      	movs	r3, #0
 8003d30:	60fb      	str	r3, [r7, #12]
 8003d32:	e014      	b.n	8003d5e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003d34:	4a0f      	ldr	r2, [pc, #60]	@ (8003d74 <vQueueAddToRegistry+0x50>)
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d10b      	bne.n	8003d58 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003d40:	490c      	ldr	r1, [pc, #48]	@ (8003d74 <vQueueAddToRegistry+0x50>)
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	683a      	ldr	r2, [r7, #0]
 8003d46:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003d4a:	4a0a      	ldr	r2, [pc, #40]	@ (8003d74 <vQueueAddToRegistry+0x50>)
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	00db      	lsls	r3, r3, #3
 8003d50:	4413      	add	r3, r2
 8003d52:	687a      	ldr	r2, [r7, #4]
 8003d54:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003d56:	e006      	b.n	8003d66 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	3301      	adds	r3, #1
 8003d5c:	60fb      	str	r3, [r7, #12]
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	2b07      	cmp	r3, #7
 8003d62:	d9e7      	bls.n	8003d34 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003d64:	bf00      	nop
 8003d66:	bf00      	nop
 8003d68:	3714      	adds	r7, #20
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d70:	4770      	bx	lr
 8003d72:	bf00      	nop
 8003d74:	20000778 	.word	0x20000778

08003d78 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b086      	sub	sp, #24
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	60f8      	str	r0, [r7, #12]
 8003d80:	60b9      	str	r1, [r7, #8]
 8003d82:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003d88:	f001 fbbe 	bl	8005508 <vPortEnterCritical>
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003d92:	b25b      	sxtb	r3, r3
 8003d94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d98:	d103      	bne.n	8003da2 <vQueueWaitForMessageRestricted+0x2a>
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003da8:	b25b      	sxtb	r3, r3
 8003daa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dae:	d103      	bne.n	8003db8 <vQueueWaitForMessageRestricted+0x40>
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	2200      	movs	r2, #0
 8003db4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003db8:	f001 fbd8 	bl	800556c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d106      	bne.n	8003dd2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003dc4:	697b      	ldr	r3, [r7, #20]
 8003dc6:	3324      	adds	r3, #36	@ 0x24
 8003dc8:	687a      	ldr	r2, [r7, #4]
 8003dca:	68b9      	ldr	r1, [r7, #8]
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f000 fc45 	bl	800465c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003dd2:	6978      	ldr	r0, [r7, #20]
 8003dd4:	f7ff ff26 	bl	8003c24 <prvUnlockQueue>
	}
 8003dd8:	bf00      	nop
 8003dda:	3718      	adds	r7, #24
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bd80      	pop	{r7, pc}

08003de0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b08e      	sub	sp, #56	@ 0x38
 8003de4:	af04      	add	r7, sp, #16
 8003de6:	60f8      	str	r0, [r7, #12]
 8003de8:	60b9      	str	r1, [r7, #8]
 8003dea:	607a      	str	r2, [r7, #4]
 8003dec:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003dee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d10b      	bne.n	8003e0c <xTaskCreateStatic+0x2c>
	__asm volatile
 8003df4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003df8:	f383 8811 	msr	BASEPRI, r3
 8003dfc:	f3bf 8f6f 	isb	sy
 8003e00:	f3bf 8f4f 	dsb	sy
 8003e04:	623b      	str	r3, [r7, #32]
}
 8003e06:	bf00      	nop
 8003e08:	bf00      	nop
 8003e0a:	e7fd      	b.n	8003e08 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003e0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d10b      	bne.n	8003e2a <xTaskCreateStatic+0x4a>
	__asm volatile
 8003e12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e16:	f383 8811 	msr	BASEPRI, r3
 8003e1a:	f3bf 8f6f 	isb	sy
 8003e1e:	f3bf 8f4f 	dsb	sy
 8003e22:	61fb      	str	r3, [r7, #28]
}
 8003e24:	bf00      	nop
 8003e26:	bf00      	nop
 8003e28:	e7fd      	b.n	8003e26 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003e2a:	235c      	movs	r3, #92	@ 0x5c
 8003e2c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	2b5c      	cmp	r3, #92	@ 0x5c
 8003e32:	d00b      	beq.n	8003e4c <xTaskCreateStatic+0x6c>
	__asm volatile
 8003e34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e38:	f383 8811 	msr	BASEPRI, r3
 8003e3c:	f3bf 8f6f 	isb	sy
 8003e40:	f3bf 8f4f 	dsb	sy
 8003e44:	61bb      	str	r3, [r7, #24]
}
 8003e46:	bf00      	nop
 8003e48:	bf00      	nop
 8003e4a:	e7fd      	b.n	8003e48 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003e4c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003e4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d01e      	beq.n	8003e92 <xTaskCreateStatic+0xb2>
 8003e54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d01b      	beq.n	8003e92 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003e5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e5c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003e5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e60:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003e62:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003e64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e66:	2202      	movs	r2, #2
 8003e68:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	9303      	str	r3, [sp, #12]
 8003e70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e72:	9302      	str	r3, [sp, #8]
 8003e74:	f107 0314 	add.w	r3, r7, #20
 8003e78:	9301      	str	r3, [sp, #4]
 8003e7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e7c:	9300      	str	r3, [sp, #0]
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	687a      	ldr	r2, [r7, #4]
 8003e82:	68b9      	ldr	r1, [r7, #8]
 8003e84:	68f8      	ldr	r0, [r7, #12]
 8003e86:	f000 f850 	bl	8003f2a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003e8a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003e8c:	f000 f8de 	bl	800404c <prvAddNewTaskToReadyList>
 8003e90:	e001      	b.n	8003e96 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8003e92:	2300      	movs	r3, #0
 8003e94:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003e96:	697b      	ldr	r3, [r7, #20]
	}
 8003e98:	4618      	mov	r0, r3
 8003e9a:	3728      	adds	r7, #40	@ 0x28
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bd80      	pop	{r7, pc}

08003ea0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b08c      	sub	sp, #48	@ 0x30
 8003ea4:	af04      	add	r7, sp, #16
 8003ea6:	60f8      	str	r0, [r7, #12]
 8003ea8:	60b9      	str	r1, [r7, #8]
 8003eaa:	603b      	str	r3, [r7, #0]
 8003eac:	4613      	mov	r3, r2
 8003eae:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003eb0:	88fb      	ldrh	r3, [r7, #6]
 8003eb2:	009b      	lsls	r3, r3, #2
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f001 fc49 	bl	800574c <pvPortMalloc>
 8003eba:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d00e      	beq.n	8003ee0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003ec2:	205c      	movs	r0, #92	@ 0x5c
 8003ec4:	f001 fc42 	bl	800574c <pvPortMalloc>
 8003ec8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003eca:	69fb      	ldr	r3, [r7, #28]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d003      	beq.n	8003ed8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003ed0:	69fb      	ldr	r3, [r7, #28]
 8003ed2:	697a      	ldr	r2, [r7, #20]
 8003ed4:	631a      	str	r2, [r3, #48]	@ 0x30
 8003ed6:	e005      	b.n	8003ee4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003ed8:	6978      	ldr	r0, [r7, #20]
 8003eda:	f001 fd05 	bl	80058e8 <vPortFree>
 8003ede:	e001      	b.n	8003ee4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003ee4:	69fb      	ldr	r3, [r7, #28]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d017      	beq.n	8003f1a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003eea:	69fb      	ldr	r3, [r7, #28]
 8003eec:	2200      	movs	r2, #0
 8003eee:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003ef2:	88fa      	ldrh	r2, [r7, #6]
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	9303      	str	r3, [sp, #12]
 8003ef8:	69fb      	ldr	r3, [r7, #28]
 8003efa:	9302      	str	r3, [sp, #8]
 8003efc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003efe:	9301      	str	r3, [sp, #4]
 8003f00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f02:	9300      	str	r3, [sp, #0]
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	68b9      	ldr	r1, [r7, #8]
 8003f08:	68f8      	ldr	r0, [r7, #12]
 8003f0a:	f000 f80e 	bl	8003f2a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003f0e:	69f8      	ldr	r0, [r7, #28]
 8003f10:	f000 f89c 	bl	800404c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003f14:	2301      	movs	r3, #1
 8003f16:	61bb      	str	r3, [r7, #24]
 8003f18:	e002      	b.n	8003f20 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003f1a:	f04f 33ff 	mov.w	r3, #4294967295
 8003f1e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003f20:	69bb      	ldr	r3, [r7, #24]
	}
 8003f22:	4618      	mov	r0, r3
 8003f24:	3720      	adds	r7, #32
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}

08003f2a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003f2a:	b580      	push	{r7, lr}
 8003f2c:	b088      	sub	sp, #32
 8003f2e:	af00      	add	r7, sp, #0
 8003f30:	60f8      	str	r0, [r7, #12]
 8003f32:	60b9      	str	r1, [r7, #8]
 8003f34:	607a      	str	r2, [r7, #4]
 8003f36:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003f38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f3a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	009b      	lsls	r3, r3, #2
 8003f40:	461a      	mov	r2, r3
 8003f42:	21a5      	movs	r1, #165	@ 0xa5
 8003f44:	f001 fdf0 	bl	8005b28 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003f48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f4a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003f52:	3b01      	subs	r3, #1
 8003f54:	009b      	lsls	r3, r3, #2
 8003f56:	4413      	add	r3, r2
 8003f58:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003f5a:	69bb      	ldr	r3, [r7, #24]
 8003f5c:	f023 0307 	bic.w	r3, r3, #7
 8003f60:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003f62:	69bb      	ldr	r3, [r7, #24]
 8003f64:	f003 0307 	and.w	r3, r3, #7
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d00b      	beq.n	8003f84 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8003f6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f70:	f383 8811 	msr	BASEPRI, r3
 8003f74:	f3bf 8f6f 	isb	sy
 8003f78:	f3bf 8f4f 	dsb	sy
 8003f7c:	617b      	str	r3, [r7, #20]
}
 8003f7e:	bf00      	nop
 8003f80:	bf00      	nop
 8003f82:	e7fd      	b.n	8003f80 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d01f      	beq.n	8003fca <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	61fb      	str	r3, [r7, #28]
 8003f8e:	e012      	b.n	8003fb6 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003f90:	68ba      	ldr	r2, [r7, #8]
 8003f92:	69fb      	ldr	r3, [r7, #28]
 8003f94:	4413      	add	r3, r2
 8003f96:	7819      	ldrb	r1, [r3, #0]
 8003f98:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f9a:	69fb      	ldr	r3, [r7, #28]
 8003f9c:	4413      	add	r3, r2
 8003f9e:	3334      	adds	r3, #52	@ 0x34
 8003fa0:	460a      	mov	r2, r1
 8003fa2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003fa4:	68ba      	ldr	r2, [r7, #8]
 8003fa6:	69fb      	ldr	r3, [r7, #28]
 8003fa8:	4413      	add	r3, r2
 8003faa:	781b      	ldrb	r3, [r3, #0]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d006      	beq.n	8003fbe <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003fb0:	69fb      	ldr	r3, [r7, #28]
 8003fb2:	3301      	adds	r3, #1
 8003fb4:	61fb      	str	r3, [r7, #28]
 8003fb6:	69fb      	ldr	r3, [r7, #28]
 8003fb8:	2b0f      	cmp	r3, #15
 8003fba:	d9e9      	bls.n	8003f90 <prvInitialiseNewTask+0x66>
 8003fbc:	e000      	b.n	8003fc0 <prvInitialiseNewTask+0x96>
			{
				break;
 8003fbe:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003fc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003fc8:	e003      	b.n	8003fd2 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003fca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fcc:	2200      	movs	r2, #0
 8003fce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003fd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fd4:	2b37      	cmp	r3, #55	@ 0x37
 8003fd6:	d901      	bls.n	8003fdc <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003fd8:	2337      	movs	r3, #55	@ 0x37
 8003fda:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003fdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fde:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003fe0:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003fe2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fe4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003fe6:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003fe8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fea:	2200      	movs	r2, #0
 8003fec:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003fee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ff0:	3304      	adds	r3, #4
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f7ff f966 	bl	80032c4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003ff8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ffa:	3318      	adds	r3, #24
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	f7ff f961 	bl	80032c4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004002:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004004:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004006:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004008:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800400a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800400e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004010:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004012:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004014:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004016:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004018:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800401a:	2200      	movs	r2, #0
 800401c:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800401e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004020:	2200      	movs	r2, #0
 8004022:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004026:	683a      	ldr	r2, [r7, #0]
 8004028:	68f9      	ldr	r1, [r7, #12]
 800402a:	69b8      	ldr	r0, [r7, #24]
 800402c:	f001 f93e 	bl	80052ac <pxPortInitialiseStack>
 8004030:	4602      	mov	r2, r0
 8004032:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004034:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004036:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004038:	2b00      	cmp	r3, #0
 800403a:	d002      	beq.n	8004042 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800403c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800403e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004040:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004042:	bf00      	nop
 8004044:	3720      	adds	r7, #32
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}
	...

0800404c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b082      	sub	sp, #8
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004054:	f001 fa58 	bl	8005508 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004058:	4b2d      	ldr	r3, [pc, #180]	@ (8004110 <prvAddNewTaskToReadyList+0xc4>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	3301      	adds	r3, #1
 800405e:	4a2c      	ldr	r2, [pc, #176]	@ (8004110 <prvAddNewTaskToReadyList+0xc4>)
 8004060:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004062:	4b2c      	ldr	r3, [pc, #176]	@ (8004114 <prvAddNewTaskToReadyList+0xc8>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d109      	bne.n	800407e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800406a:	4a2a      	ldr	r2, [pc, #168]	@ (8004114 <prvAddNewTaskToReadyList+0xc8>)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004070:	4b27      	ldr	r3, [pc, #156]	@ (8004110 <prvAddNewTaskToReadyList+0xc4>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	2b01      	cmp	r3, #1
 8004076:	d110      	bne.n	800409a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004078:	f000 fc1e 	bl	80048b8 <prvInitialiseTaskLists>
 800407c:	e00d      	b.n	800409a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800407e:	4b26      	ldr	r3, [pc, #152]	@ (8004118 <prvAddNewTaskToReadyList+0xcc>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d109      	bne.n	800409a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004086:	4b23      	ldr	r3, [pc, #140]	@ (8004114 <prvAddNewTaskToReadyList+0xc8>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004090:	429a      	cmp	r2, r3
 8004092:	d802      	bhi.n	800409a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004094:	4a1f      	ldr	r2, [pc, #124]	@ (8004114 <prvAddNewTaskToReadyList+0xc8>)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800409a:	4b20      	ldr	r3, [pc, #128]	@ (800411c <prvAddNewTaskToReadyList+0xd0>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	3301      	adds	r3, #1
 80040a0:	4a1e      	ldr	r2, [pc, #120]	@ (800411c <prvAddNewTaskToReadyList+0xd0>)
 80040a2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80040a4:	4b1d      	ldr	r3, [pc, #116]	@ (800411c <prvAddNewTaskToReadyList+0xd0>)
 80040a6:	681a      	ldr	r2, [r3, #0]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040b0:	4b1b      	ldr	r3, [pc, #108]	@ (8004120 <prvAddNewTaskToReadyList+0xd4>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	429a      	cmp	r2, r3
 80040b6:	d903      	bls.n	80040c0 <prvAddNewTaskToReadyList+0x74>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040bc:	4a18      	ldr	r2, [pc, #96]	@ (8004120 <prvAddNewTaskToReadyList+0xd4>)
 80040be:	6013      	str	r3, [r2, #0]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040c4:	4613      	mov	r3, r2
 80040c6:	009b      	lsls	r3, r3, #2
 80040c8:	4413      	add	r3, r2
 80040ca:	009b      	lsls	r3, r3, #2
 80040cc:	4a15      	ldr	r2, [pc, #84]	@ (8004124 <prvAddNewTaskToReadyList+0xd8>)
 80040ce:	441a      	add	r2, r3
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	3304      	adds	r3, #4
 80040d4:	4619      	mov	r1, r3
 80040d6:	4610      	mov	r0, r2
 80040d8:	f7ff f901 	bl	80032de <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80040dc:	f001 fa46 	bl	800556c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80040e0:	4b0d      	ldr	r3, [pc, #52]	@ (8004118 <prvAddNewTaskToReadyList+0xcc>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d00e      	beq.n	8004106 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80040e8:	4b0a      	ldr	r3, [pc, #40]	@ (8004114 <prvAddNewTaskToReadyList+0xc8>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040f2:	429a      	cmp	r2, r3
 80040f4:	d207      	bcs.n	8004106 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80040f6:	4b0c      	ldr	r3, [pc, #48]	@ (8004128 <prvAddNewTaskToReadyList+0xdc>)
 80040f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80040fc:	601a      	str	r2, [r3, #0]
 80040fe:	f3bf 8f4f 	dsb	sy
 8004102:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004106:	bf00      	nop
 8004108:	3708      	adds	r7, #8
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}
 800410e:	bf00      	nop
 8004110:	20000c8c 	.word	0x20000c8c
 8004114:	200007b8 	.word	0x200007b8
 8004118:	20000c98 	.word	0x20000c98
 800411c:	20000ca8 	.word	0x20000ca8
 8004120:	20000c94 	.word	0x20000c94
 8004124:	200007bc 	.word	0x200007bc
 8004128:	e000ed04 	.word	0xe000ed04

0800412c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800412c:	b580      	push	{r7, lr}
 800412e:	b084      	sub	sp, #16
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004134:	2300      	movs	r3, #0
 8004136:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d018      	beq.n	8004170 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800413e:	4b14      	ldr	r3, [pc, #80]	@ (8004190 <vTaskDelay+0x64>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d00b      	beq.n	800415e <vTaskDelay+0x32>
	__asm volatile
 8004146:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800414a:	f383 8811 	msr	BASEPRI, r3
 800414e:	f3bf 8f6f 	isb	sy
 8004152:	f3bf 8f4f 	dsb	sy
 8004156:	60bb      	str	r3, [r7, #8]
}
 8004158:	bf00      	nop
 800415a:	bf00      	nop
 800415c:	e7fd      	b.n	800415a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800415e:	f000 f883 	bl	8004268 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004162:	2100      	movs	r1, #0
 8004164:	6878      	ldr	r0, [r7, #4]
 8004166:	f000 fcf3 	bl	8004b50 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800416a:	f000 f88b 	bl	8004284 <xTaskResumeAll>
 800416e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d107      	bne.n	8004186 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8004176:	4b07      	ldr	r3, [pc, #28]	@ (8004194 <vTaskDelay+0x68>)
 8004178:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800417c:	601a      	str	r2, [r3, #0]
 800417e:	f3bf 8f4f 	dsb	sy
 8004182:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004186:	bf00      	nop
 8004188:	3710      	adds	r7, #16
 800418a:	46bd      	mov	sp, r7
 800418c:	bd80      	pop	{r7, pc}
 800418e:	bf00      	nop
 8004190:	20000cb4 	.word	0x20000cb4
 8004194:	e000ed04 	.word	0xe000ed04

08004198 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b08a      	sub	sp, #40	@ 0x28
 800419c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800419e:	2300      	movs	r3, #0
 80041a0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80041a2:	2300      	movs	r3, #0
 80041a4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80041a6:	463a      	mov	r2, r7
 80041a8:	1d39      	adds	r1, r7, #4
 80041aa:	f107 0308 	add.w	r3, r7, #8
 80041ae:	4618      	mov	r0, r3
 80041b0:	f7ff f834 	bl	800321c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80041b4:	6839      	ldr	r1, [r7, #0]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	68ba      	ldr	r2, [r7, #8]
 80041ba:	9202      	str	r2, [sp, #8]
 80041bc:	9301      	str	r3, [sp, #4]
 80041be:	2300      	movs	r3, #0
 80041c0:	9300      	str	r3, [sp, #0]
 80041c2:	2300      	movs	r3, #0
 80041c4:	460a      	mov	r2, r1
 80041c6:	4922      	ldr	r1, [pc, #136]	@ (8004250 <vTaskStartScheduler+0xb8>)
 80041c8:	4822      	ldr	r0, [pc, #136]	@ (8004254 <vTaskStartScheduler+0xbc>)
 80041ca:	f7ff fe09 	bl	8003de0 <xTaskCreateStatic>
 80041ce:	4603      	mov	r3, r0
 80041d0:	4a21      	ldr	r2, [pc, #132]	@ (8004258 <vTaskStartScheduler+0xc0>)
 80041d2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80041d4:	4b20      	ldr	r3, [pc, #128]	@ (8004258 <vTaskStartScheduler+0xc0>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d002      	beq.n	80041e2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80041dc:	2301      	movs	r3, #1
 80041de:	617b      	str	r3, [r7, #20]
 80041e0:	e001      	b.n	80041e6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80041e2:	2300      	movs	r3, #0
 80041e4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	2b01      	cmp	r3, #1
 80041ea:	d102      	bne.n	80041f2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80041ec:	f000 fd04 	bl	8004bf8 <xTimerCreateTimerTask>
 80041f0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80041f2:	697b      	ldr	r3, [r7, #20]
 80041f4:	2b01      	cmp	r3, #1
 80041f6:	d116      	bne.n	8004226 <vTaskStartScheduler+0x8e>
	__asm volatile
 80041f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041fc:	f383 8811 	msr	BASEPRI, r3
 8004200:	f3bf 8f6f 	isb	sy
 8004204:	f3bf 8f4f 	dsb	sy
 8004208:	613b      	str	r3, [r7, #16]
}
 800420a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800420c:	4b13      	ldr	r3, [pc, #76]	@ (800425c <vTaskStartScheduler+0xc4>)
 800420e:	f04f 32ff 	mov.w	r2, #4294967295
 8004212:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004214:	4b12      	ldr	r3, [pc, #72]	@ (8004260 <vTaskStartScheduler+0xc8>)
 8004216:	2201      	movs	r2, #1
 8004218:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800421a:	4b12      	ldr	r3, [pc, #72]	@ (8004264 <vTaskStartScheduler+0xcc>)
 800421c:	2200      	movs	r2, #0
 800421e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004220:	f001 f8ce 	bl	80053c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004224:	e00f      	b.n	8004246 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004226:	697b      	ldr	r3, [r7, #20]
 8004228:	f1b3 3fff 	cmp.w	r3, #4294967295
 800422c:	d10b      	bne.n	8004246 <vTaskStartScheduler+0xae>
	__asm volatile
 800422e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004232:	f383 8811 	msr	BASEPRI, r3
 8004236:	f3bf 8f6f 	isb	sy
 800423a:	f3bf 8f4f 	dsb	sy
 800423e:	60fb      	str	r3, [r7, #12]
}
 8004240:	bf00      	nop
 8004242:	bf00      	nop
 8004244:	e7fd      	b.n	8004242 <vTaskStartScheduler+0xaa>
}
 8004246:	bf00      	nop
 8004248:	3718      	adds	r7, #24
 800424a:	46bd      	mov	sp, r7
 800424c:	bd80      	pop	{r7, pc}
 800424e:	bf00      	nop
 8004250:	08005bc0 	.word	0x08005bc0
 8004254:	08004889 	.word	0x08004889
 8004258:	20000cb0 	.word	0x20000cb0
 800425c:	20000cac 	.word	0x20000cac
 8004260:	20000c98 	.word	0x20000c98
 8004264:	20000c90 	.word	0x20000c90

08004268 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004268:	b480      	push	{r7}
 800426a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800426c:	4b04      	ldr	r3, [pc, #16]	@ (8004280 <vTaskSuspendAll+0x18>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	3301      	adds	r3, #1
 8004272:	4a03      	ldr	r2, [pc, #12]	@ (8004280 <vTaskSuspendAll+0x18>)
 8004274:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004276:	bf00      	nop
 8004278:	46bd      	mov	sp, r7
 800427a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427e:	4770      	bx	lr
 8004280:	20000cb4 	.word	0x20000cb4

08004284 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b084      	sub	sp, #16
 8004288:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800428a:	2300      	movs	r3, #0
 800428c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800428e:	2300      	movs	r3, #0
 8004290:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004292:	4b42      	ldr	r3, [pc, #264]	@ (800439c <xTaskResumeAll+0x118>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d10b      	bne.n	80042b2 <xTaskResumeAll+0x2e>
	__asm volatile
 800429a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800429e:	f383 8811 	msr	BASEPRI, r3
 80042a2:	f3bf 8f6f 	isb	sy
 80042a6:	f3bf 8f4f 	dsb	sy
 80042aa:	603b      	str	r3, [r7, #0]
}
 80042ac:	bf00      	nop
 80042ae:	bf00      	nop
 80042b0:	e7fd      	b.n	80042ae <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80042b2:	f001 f929 	bl	8005508 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80042b6:	4b39      	ldr	r3, [pc, #228]	@ (800439c <xTaskResumeAll+0x118>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	3b01      	subs	r3, #1
 80042bc:	4a37      	ldr	r2, [pc, #220]	@ (800439c <xTaskResumeAll+0x118>)
 80042be:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80042c0:	4b36      	ldr	r3, [pc, #216]	@ (800439c <xTaskResumeAll+0x118>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d162      	bne.n	800438e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80042c8:	4b35      	ldr	r3, [pc, #212]	@ (80043a0 <xTaskResumeAll+0x11c>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d05e      	beq.n	800438e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80042d0:	e02f      	b.n	8004332 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80042d2:	4b34      	ldr	r3, [pc, #208]	@ (80043a4 <xTaskResumeAll+0x120>)
 80042d4:	68db      	ldr	r3, [r3, #12]
 80042d6:	68db      	ldr	r3, [r3, #12]
 80042d8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	3318      	adds	r3, #24
 80042de:	4618      	mov	r0, r3
 80042e0:	f7ff f85a 	bl	8003398 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	3304      	adds	r3, #4
 80042e8:	4618      	mov	r0, r3
 80042ea:	f7ff f855 	bl	8003398 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042f2:	4b2d      	ldr	r3, [pc, #180]	@ (80043a8 <xTaskResumeAll+0x124>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	429a      	cmp	r2, r3
 80042f8:	d903      	bls.n	8004302 <xTaskResumeAll+0x7e>
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042fe:	4a2a      	ldr	r2, [pc, #168]	@ (80043a8 <xTaskResumeAll+0x124>)
 8004300:	6013      	str	r3, [r2, #0]
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004306:	4613      	mov	r3, r2
 8004308:	009b      	lsls	r3, r3, #2
 800430a:	4413      	add	r3, r2
 800430c:	009b      	lsls	r3, r3, #2
 800430e:	4a27      	ldr	r2, [pc, #156]	@ (80043ac <xTaskResumeAll+0x128>)
 8004310:	441a      	add	r2, r3
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	3304      	adds	r3, #4
 8004316:	4619      	mov	r1, r3
 8004318:	4610      	mov	r0, r2
 800431a:	f7fe ffe0 	bl	80032de <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004322:	4b23      	ldr	r3, [pc, #140]	@ (80043b0 <xTaskResumeAll+0x12c>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004328:	429a      	cmp	r2, r3
 800432a:	d302      	bcc.n	8004332 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800432c:	4b21      	ldr	r3, [pc, #132]	@ (80043b4 <xTaskResumeAll+0x130>)
 800432e:	2201      	movs	r2, #1
 8004330:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004332:	4b1c      	ldr	r3, [pc, #112]	@ (80043a4 <xTaskResumeAll+0x120>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d1cb      	bne.n	80042d2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d001      	beq.n	8004344 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004340:	f000 fb58 	bl	80049f4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004344:	4b1c      	ldr	r3, [pc, #112]	@ (80043b8 <xTaskResumeAll+0x134>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d010      	beq.n	8004372 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004350:	f000 f846 	bl	80043e0 <xTaskIncrementTick>
 8004354:	4603      	mov	r3, r0
 8004356:	2b00      	cmp	r3, #0
 8004358:	d002      	beq.n	8004360 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800435a:	4b16      	ldr	r3, [pc, #88]	@ (80043b4 <xTaskResumeAll+0x130>)
 800435c:	2201      	movs	r2, #1
 800435e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	3b01      	subs	r3, #1
 8004364:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d1f1      	bne.n	8004350 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800436c:	4b12      	ldr	r3, [pc, #72]	@ (80043b8 <xTaskResumeAll+0x134>)
 800436e:	2200      	movs	r2, #0
 8004370:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004372:	4b10      	ldr	r3, [pc, #64]	@ (80043b4 <xTaskResumeAll+0x130>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d009      	beq.n	800438e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800437a:	2301      	movs	r3, #1
 800437c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800437e:	4b0f      	ldr	r3, [pc, #60]	@ (80043bc <xTaskResumeAll+0x138>)
 8004380:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004384:	601a      	str	r2, [r3, #0]
 8004386:	f3bf 8f4f 	dsb	sy
 800438a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800438e:	f001 f8ed 	bl	800556c <vPortExitCritical>

	return xAlreadyYielded;
 8004392:	68bb      	ldr	r3, [r7, #8]
}
 8004394:	4618      	mov	r0, r3
 8004396:	3710      	adds	r7, #16
 8004398:	46bd      	mov	sp, r7
 800439a:	bd80      	pop	{r7, pc}
 800439c:	20000cb4 	.word	0x20000cb4
 80043a0:	20000c8c 	.word	0x20000c8c
 80043a4:	20000c4c 	.word	0x20000c4c
 80043a8:	20000c94 	.word	0x20000c94
 80043ac:	200007bc 	.word	0x200007bc
 80043b0:	200007b8 	.word	0x200007b8
 80043b4:	20000ca0 	.word	0x20000ca0
 80043b8:	20000c9c 	.word	0x20000c9c
 80043bc:	e000ed04 	.word	0xe000ed04

080043c0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80043c0:	b480      	push	{r7}
 80043c2:	b083      	sub	sp, #12
 80043c4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80043c6:	4b05      	ldr	r3, [pc, #20]	@ (80043dc <xTaskGetTickCount+0x1c>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80043cc:	687b      	ldr	r3, [r7, #4]
}
 80043ce:	4618      	mov	r0, r3
 80043d0:	370c      	adds	r7, #12
 80043d2:	46bd      	mov	sp, r7
 80043d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d8:	4770      	bx	lr
 80043da:	bf00      	nop
 80043dc:	20000c90 	.word	0x20000c90

080043e0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b086      	sub	sp, #24
 80043e4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80043e6:	2300      	movs	r3, #0
 80043e8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80043ea:	4b4f      	ldr	r3, [pc, #316]	@ (8004528 <xTaskIncrementTick+0x148>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	f040 8090 	bne.w	8004514 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80043f4:	4b4d      	ldr	r3, [pc, #308]	@ (800452c <xTaskIncrementTick+0x14c>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	3301      	adds	r3, #1
 80043fa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80043fc:	4a4b      	ldr	r2, [pc, #300]	@ (800452c <xTaskIncrementTick+0x14c>)
 80043fe:	693b      	ldr	r3, [r7, #16]
 8004400:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d121      	bne.n	800444c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004408:	4b49      	ldr	r3, [pc, #292]	@ (8004530 <xTaskIncrementTick+0x150>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d00b      	beq.n	800442a <xTaskIncrementTick+0x4a>
	__asm volatile
 8004412:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004416:	f383 8811 	msr	BASEPRI, r3
 800441a:	f3bf 8f6f 	isb	sy
 800441e:	f3bf 8f4f 	dsb	sy
 8004422:	603b      	str	r3, [r7, #0]
}
 8004424:	bf00      	nop
 8004426:	bf00      	nop
 8004428:	e7fd      	b.n	8004426 <xTaskIncrementTick+0x46>
 800442a:	4b41      	ldr	r3, [pc, #260]	@ (8004530 <xTaskIncrementTick+0x150>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	60fb      	str	r3, [r7, #12]
 8004430:	4b40      	ldr	r3, [pc, #256]	@ (8004534 <xTaskIncrementTick+0x154>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a3e      	ldr	r2, [pc, #248]	@ (8004530 <xTaskIncrementTick+0x150>)
 8004436:	6013      	str	r3, [r2, #0]
 8004438:	4a3e      	ldr	r2, [pc, #248]	@ (8004534 <xTaskIncrementTick+0x154>)
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	6013      	str	r3, [r2, #0]
 800443e:	4b3e      	ldr	r3, [pc, #248]	@ (8004538 <xTaskIncrementTick+0x158>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	3301      	adds	r3, #1
 8004444:	4a3c      	ldr	r2, [pc, #240]	@ (8004538 <xTaskIncrementTick+0x158>)
 8004446:	6013      	str	r3, [r2, #0]
 8004448:	f000 fad4 	bl	80049f4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800444c:	4b3b      	ldr	r3, [pc, #236]	@ (800453c <xTaskIncrementTick+0x15c>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	693a      	ldr	r2, [r7, #16]
 8004452:	429a      	cmp	r2, r3
 8004454:	d349      	bcc.n	80044ea <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004456:	4b36      	ldr	r3, [pc, #216]	@ (8004530 <xTaskIncrementTick+0x150>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d104      	bne.n	800446a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004460:	4b36      	ldr	r3, [pc, #216]	@ (800453c <xTaskIncrementTick+0x15c>)
 8004462:	f04f 32ff 	mov.w	r2, #4294967295
 8004466:	601a      	str	r2, [r3, #0]
					break;
 8004468:	e03f      	b.n	80044ea <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800446a:	4b31      	ldr	r3, [pc, #196]	@ (8004530 <xTaskIncrementTick+0x150>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	68db      	ldr	r3, [r3, #12]
 8004470:	68db      	ldr	r3, [r3, #12]
 8004472:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800447a:	693a      	ldr	r2, [r7, #16]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	429a      	cmp	r2, r3
 8004480:	d203      	bcs.n	800448a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004482:	4a2e      	ldr	r2, [pc, #184]	@ (800453c <xTaskIncrementTick+0x15c>)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004488:	e02f      	b.n	80044ea <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800448a:	68bb      	ldr	r3, [r7, #8]
 800448c:	3304      	adds	r3, #4
 800448e:	4618      	mov	r0, r3
 8004490:	f7fe ff82 	bl	8003398 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004498:	2b00      	cmp	r3, #0
 800449a:	d004      	beq.n	80044a6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	3318      	adds	r3, #24
 80044a0:	4618      	mov	r0, r3
 80044a2:	f7fe ff79 	bl	8003398 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044aa:	4b25      	ldr	r3, [pc, #148]	@ (8004540 <xTaskIncrementTick+0x160>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	429a      	cmp	r2, r3
 80044b0:	d903      	bls.n	80044ba <xTaskIncrementTick+0xda>
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044b6:	4a22      	ldr	r2, [pc, #136]	@ (8004540 <xTaskIncrementTick+0x160>)
 80044b8:	6013      	str	r3, [r2, #0]
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044be:	4613      	mov	r3, r2
 80044c0:	009b      	lsls	r3, r3, #2
 80044c2:	4413      	add	r3, r2
 80044c4:	009b      	lsls	r3, r3, #2
 80044c6:	4a1f      	ldr	r2, [pc, #124]	@ (8004544 <xTaskIncrementTick+0x164>)
 80044c8:	441a      	add	r2, r3
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	3304      	adds	r3, #4
 80044ce:	4619      	mov	r1, r3
 80044d0:	4610      	mov	r0, r2
 80044d2:	f7fe ff04 	bl	80032de <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80044d6:	68bb      	ldr	r3, [r7, #8]
 80044d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044da:	4b1b      	ldr	r3, [pc, #108]	@ (8004548 <xTaskIncrementTick+0x168>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044e0:	429a      	cmp	r2, r3
 80044e2:	d3b8      	bcc.n	8004456 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80044e4:	2301      	movs	r3, #1
 80044e6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80044e8:	e7b5      	b.n	8004456 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80044ea:	4b17      	ldr	r3, [pc, #92]	@ (8004548 <xTaskIncrementTick+0x168>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044f0:	4914      	ldr	r1, [pc, #80]	@ (8004544 <xTaskIncrementTick+0x164>)
 80044f2:	4613      	mov	r3, r2
 80044f4:	009b      	lsls	r3, r3, #2
 80044f6:	4413      	add	r3, r2
 80044f8:	009b      	lsls	r3, r3, #2
 80044fa:	440b      	add	r3, r1
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	2b01      	cmp	r3, #1
 8004500:	d901      	bls.n	8004506 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8004502:	2301      	movs	r3, #1
 8004504:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004506:	4b11      	ldr	r3, [pc, #68]	@ (800454c <xTaskIncrementTick+0x16c>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d007      	beq.n	800451e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800450e:	2301      	movs	r3, #1
 8004510:	617b      	str	r3, [r7, #20]
 8004512:	e004      	b.n	800451e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004514:	4b0e      	ldr	r3, [pc, #56]	@ (8004550 <xTaskIncrementTick+0x170>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	3301      	adds	r3, #1
 800451a:	4a0d      	ldr	r2, [pc, #52]	@ (8004550 <xTaskIncrementTick+0x170>)
 800451c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800451e:	697b      	ldr	r3, [r7, #20]
}
 8004520:	4618      	mov	r0, r3
 8004522:	3718      	adds	r7, #24
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}
 8004528:	20000cb4 	.word	0x20000cb4
 800452c:	20000c90 	.word	0x20000c90
 8004530:	20000c44 	.word	0x20000c44
 8004534:	20000c48 	.word	0x20000c48
 8004538:	20000ca4 	.word	0x20000ca4
 800453c:	20000cac 	.word	0x20000cac
 8004540:	20000c94 	.word	0x20000c94
 8004544:	200007bc 	.word	0x200007bc
 8004548:	200007b8 	.word	0x200007b8
 800454c:	20000ca0 	.word	0x20000ca0
 8004550:	20000c9c 	.word	0x20000c9c

08004554 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004554:	b480      	push	{r7}
 8004556:	b085      	sub	sp, #20
 8004558:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800455a:	4b28      	ldr	r3, [pc, #160]	@ (80045fc <vTaskSwitchContext+0xa8>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d003      	beq.n	800456a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004562:	4b27      	ldr	r3, [pc, #156]	@ (8004600 <vTaskSwitchContext+0xac>)
 8004564:	2201      	movs	r2, #1
 8004566:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004568:	e042      	b.n	80045f0 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800456a:	4b25      	ldr	r3, [pc, #148]	@ (8004600 <vTaskSwitchContext+0xac>)
 800456c:	2200      	movs	r2, #0
 800456e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004570:	4b24      	ldr	r3, [pc, #144]	@ (8004604 <vTaskSwitchContext+0xb0>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	60fb      	str	r3, [r7, #12]
 8004576:	e011      	b.n	800459c <vTaskSwitchContext+0x48>
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d10b      	bne.n	8004596 <vTaskSwitchContext+0x42>
	__asm volatile
 800457e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004582:	f383 8811 	msr	BASEPRI, r3
 8004586:	f3bf 8f6f 	isb	sy
 800458a:	f3bf 8f4f 	dsb	sy
 800458e:	607b      	str	r3, [r7, #4]
}
 8004590:	bf00      	nop
 8004592:	bf00      	nop
 8004594:	e7fd      	b.n	8004592 <vTaskSwitchContext+0x3e>
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	3b01      	subs	r3, #1
 800459a:	60fb      	str	r3, [r7, #12]
 800459c:	491a      	ldr	r1, [pc, #104]	@ (8004608 <vTaskSwitchContext+0xb4>)
 800459e:	68fa      	ldr	r2, [r7, #12]
 80045a0:	4613      	mov	r3, r2
 80045a2:	009b      	lsls	r3, r3, #2
 80045a4:	4413      	add	r3, r2
 80045a6:	009b      	lsls	r3, r3, #2
 80045a8:	440b      	add	r3, r1
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d0e3      	beq.n	8004578 <vTaskSwitchContext+0x24>
 80045b0:	68fa      	ldr	r2, [r7, #12]
 80045b2:	4613      	mov	r3, r2
 80045b4:	009b      	lsls	r3, r3, #2
 80045b6:	4413      	add	r3, r2
 80045b8:	009b      	lsls	r3, r3, #2
 80045ba:	4a13      	ldr	r2, [pc, #76]	@ (8004608 <vTaskSwitchContext+0xb4>)
 80045bc:	4413      	add	r3, r2
 80045be:	60bb      	str	r3, [r7, #8]
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	685a      	ldr	r2, [r3, #4]
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	605a      	str	r2, [r3, #4]
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	685a      	ldr	r2, [r3, #4]
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	3308      	adds	r3, #8
 80045d2:	429a      	cmp	r2, r3
 80045d4:	d104      	bne.n	80045e0 <vTaskSwitchContext+0x8c>
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	685a      	ldr	r2, [r3, #4]
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	605a      	str	r2, [r3, #4]
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	68db      	ldr	r3, [r3, #12]
 80045e6:	4a09      	ldr	r2, [pc, #36]	@ (800460c <vTaskSwitchContext+0xb8>)
 80045e8:	6013      	str	r3, [r2, #0]
 80045ea:	4a06      	ldr	r2, [pc, #24]	@ (8004604 <vTaskSwitchContext+0xb0>)
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	6013      	str	r3, [r2, #0]
}
 80045f0:	bf00      	nop
 80045f2:	3714      	adds	r7, #20
 80045f4:	46bd      	mov	sp, r7
 80045f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fa:	4770      	bx	lr
 80045fc:	20000cb4 	.word	0x20000cb4
 8004600:	20000ca0 	.word	0x20000ca0
 8004604:	20000c94 	.word	0x20000c94
 8004608:	200007bc 	.word	0x200007bc
 800460c:	200007b8 	.word	0x200007b8

08004610 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b084      	sub	sp, #16
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
 8004618:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d10b      	bne.n	8004638 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8004620:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004624:	f383 8811 	msr	BASEPRI, r3
 8004628:	f3bf 8f6f 	isb	sy
 800462c:	f3bf 8f4f 	dsb	sy
 8004630:	60fb      	str	r3, [r7, #12]
}
 8004632:	bf00      	nop
 8004634:	bf00      	nop
 8004636:	e7fd      	b.n	8004634 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004638:	4b07      	ldr	r3, [pc, #28]	@ (8004658 <vTaskPlaceOnEventList+0x48>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	3318      	adds	r3, #24
 800463e:	4619      	mov	r1, r3
 8004640:	6878      	ldr	r0, [r7, #4]
 8004642:	f7fe fe70 	bl	8003326 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004646:	2101      	movs	r1, #1
 8004648:	6838      	ldr	r0, [r7, #0]
 800464a:	f000 fa81 	bl	8004b50 <prvAddCurrentTaskToDelayedList>
}
 800464e:	bf00      	nop
 8004650:	3710      	adds	r7, #16
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}
 8004656:	bf00      	nop
 8004658:	200007b8 	.word	0x200007b8

0800465c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800465c:	b580      	push	{r7, lr}
 800465e:	b086      	sub	sp, #24
 8004660:	af00      	add	r7, sp, #0
 8004662:	60f8      	str	r0, [r7, #12]
 8004664:	60b9      	str	r1, [r7, #8]
 8004666:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d10b      	bne.n	8004686 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800466e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004672:	f383 8811 	msr	BASEPRI, r3
 8004676:	f3bf 8f6f 	isb	sy
 800467a:	f3bf 8f4f 	dsb	sy
 800467e:	617b      	str	r3, [r7, #20]
}
 8004680:	bf00      	nop
 8004682:	bf00      	nop
 8004684:	e7fd      	b.n	8004682 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004686:	4b0a      	ldr	r3, [pc, #40]	@ (80046b0 <vTaskPlaceOnEventListRestricted+0x54>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	3318      	adds	r3, #24
 800468c:	4619      	mov	r1, r3
 800468e:	68f8      	ldr	r0, [r7, #12]
 8004690:	f7fe fe25 	bl	80032de <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d002      	beq.n	80046a0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800469a:	f04f 33ff 	mov.w	r3, #4294967295
 800469e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80046a0:	6879      	ldr	r1, [r7, #4]
 80046a2:	68b8      	ldr	r0, [r7, #8]
 80046a4:	f000 fa54 	bl	8004b50 <prvAddCurrentTaskToDelayedList>
	}
 80046a8:	bf00      	nop
 80046aa:	3718      	adds	r7, #24
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bd80      	pop	{r7, pc}
 80046b0:	200007b8 	.word	0x200007b8

080046b4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b086      	sub	sp, #24
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	68db      	ldr	r3, [r3, #12]
 80046c0:	68db      	ldr	r3, [r3, #12]
 80046c2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80046c4:	693b      	ldr	r3, [r7, #16]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d10b      	bne.n	80046e2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80046ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046ce:	f383 8811 	msr	BASEPRI, r3
 80046d2:	f3bf 8f6f 	isb	sy
 80046d6:	f3bf 8f4f 	dsb	sy
 80046da:	60fb      	str	r3, [r7, #12]
}
 80046dc:	bf00      	nop
 80046de:	bf00      	nop
 80046e0:	e7fd      	b.n	80046de <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80046e2:	693b      	ldr	r3, [r7, #16]
 80046e4:	3318      	adds	r3, #24
 80046e6:	4618      	mov	r0, r3
 80046e8:	f7fe fe56 	bl	8003398 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80046ec:	4b1d      	ldr	r3, [pc, #116]	@ (8004764 <xTaskRemoveFromEventList+0xb0>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d11d      	bne.n	8004730 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80046f4:	693b      	ldr	r3, [r7, #16]
 80046f6:	3304      	adds	r3, #4
 80046f8:	4618      	mov	r0, r3
 80046fa:	f7fe fe4d 	bl	8003398 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004702:	4b19      	ldr	r3, [pc, #100]	@ (8004768 <xTaskRemoveFromEventList+0xb4>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	429a      	cmp	r2, r3
 8004708:	d903      	bls.n	8004712 <xTaskRemoveFromEventList+0x5e>
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800470e:	4a16      	ldr	r2, [pc, #88]	@ (8004768 <xTaskRemoveFromEventList+0xb4>)
 8004710:	6013      	str	r3, [r2, #0]
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004716:	4613      	mov	r3, r2
 8004718:	009b      	lsls	r3, r3, #2
 800471a:	4413      	add	r3, r2
 800471c:	009b      	lsls	r3, r3, #2
 800471e:	4a13      	ldr	r2, [pc, #76]	@ (800476c <xTaskRemoveFromEventList+0xb8>)
 8004720:	441a      	add	r2, r3
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	3304      	adds	r3, #4
 8004726:	4619      	mov	r1, r3
 8004728:	4610      	mov	r0, r2
 800472a:	f7fe fdd8 	bl	80032de <vListInsertEnd>
 800472e:	e005      	b.n	800473c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	3318      	adds	r3, #24
 8004734:	4619      	mov	r1, r3
 8004736:	480e      	ldr	r0, [pc, #56]	@ (8004770 <xTaskRemoveFromEventList+0xbc>)
 8004738:	f7fe fdd1 	bl	80032de <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004740:	4b0c      	ldr	r3, [pc, #48]	@ (8004774 <xTaskRemoveFromEventList+0xc0>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004746:	429a      	cmp	r2, r3
 8004748:	d905      	bls.n	8004756 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800474a:	2301      	movs	r3, #1
 800474c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800474e:	4b0a      	ldr	r3, [pc, #40]	@ (8004778 <xTaskRemoveFromEventList+0xc4>)
 8004750:	2201      	movs	r2, #1
 8004752:	601a      	str	r2, [r3, #0]
 8004754:	e001      	b.n	800475a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8004756:	2300      	movs	r3, #0
 8004758:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800475a:	697b      	ldr	r3, [r7, #20]
}
 800475c:	4618      	mov	r0, r3
 800475e:	3718      	adds	r7, #24
 8004760:	46bd      	mov	sp, r7
 8004762:	bd80      	pop	{r7, pc}
 8004764:	20000cb4 	.word	0x20000cb4
 8004768:	20000c94 	.word	0x20000c94
 800476c:	200007bc 	.word	0x200007bc
 8004770:	20000c4c 	.word	0x20000c4c
 8004774:	200007b8 	.word	0x200007b8
 8004778:	20000ca0 	.word	0x20000ca0

0800477c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800477c:	b480      	push	{r7}
 800477e:	b083      	sub	sp, #12
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004784:	4b06      	ldr	r3, [pc, #24]	@ (80047a0 <vTaskInternalSetTimeOutState+0x24>)
 8004786:	681a      	ldr	r2, [r3, #0]
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800478c:	4b05      	ldr	r3, [pc, #20]	@ (80047a4 <vTaskInternalSetTimeOutState+0x28>)
 800478e:	681a      	ldr	r2, [r3, #0]
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	605a      	str	r2, [r3, #4]
}
 8004794:	bf00      	nop
 8004796:	370c      	adds	r7, #12
 8004798:	46bd      	mov	sp, r7
 800479a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479e:	4770      	bx	lr
 80047a0:	20000ca4 	.word	0x20000ca4
 80047a4:	20000c90 	.word	0x20000c90

080047a8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b088      	sub	sp, #32
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
 80047b0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d10b      	bne.n	80047d0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80047b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047bc:	f383 8811 	msr	BASEPRI, r3
 80047c0:	f3bf 8f6f 	isb	sy
 80047c4:	f3bf 8f4f 	dsb	sy
 80047c8:	613b      	str	r3, [r7, #16]
}
 80047ca:	bf00      	nop
 80047cc:	bf00      	nop
 80047ce:	e7fd      	b.n	80047cc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d10b      	bne.n	80047ee <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80047d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047da:	f383 8811 	msr	BASEPRI, r3
 80047de:	f3bf 8f6f 	isb	sy
 80047e2:	f3bf 8f4f 	dsb	sy
 80047e6:	60fb      	str	r3, [r7, #12]
}
 80047e8:	bf00      	nop
 80047ea:	bf00      	nop
 80047ec:	e7fd      	b.n	80047ea <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80047ee:	f000 fe8b 	bl	8005508 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80047f2:	4b1d      	ldr	r3, [pc, #116]	@ (8004868 <xTaskCheckForTimeOut+0xc0>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	69ba      	ldr	r2, [r7, #24]
 80047fe:	1ad3      	subs	r3, r2, r3
 8004800:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f1b3 3fff 	cmp.w	r3, #4294967295
 800480a:	d102      	bne.n	8004812 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800480c:	2300      	movs	r3, #0
 800480e:	61fb      	str	r3, [r7, #28]
 8004810:	e023      	b.n	800485a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681a      	ldr	r2, [r3, #0]
 8004816:	4b15      	ldr	r3, [pc, #84]	@ (800486c <xTaskCheckForTimeOut+0xc4>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	429a      	cmp	r2, r3
 800481c:	d007      	beq.n	800482e <xTaskCheckForTimeOut+0x86>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	69ba      	ldr	r2, [r7, #24]
 8004824:	429a      	cmp	r2, r3
 8004826:	d302      	bcc.n	800482e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004828:	2301      	movs	r3, #1
 800482a:	61fb      	str	r3, [r7, #28]
 800482c:	e015      	b.n	800485a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	697a      	ldr	r2, [r7, #20]
 8004834:	429a      	cmp	r2, r3
 8004836:	d20b      	bcs.n	8004850 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	681a      	ldr	r2, [r3, #0]
 800483c:	697b      	ldr	r3, [r7, #20]
 800483e:	1ad2      	subs	r2, r2, r3
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004844:	6878      	ldr	r0, [r7, #4]
 8004846:	f7ff ff99 	bl	800477c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800484a:	2300      	movs	r3, #0
 800484c:	61fb      	str	r3, [r7, #28]
 800484e:	e004      	b.n	800485a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	2200      	movs	r2, #0
 8004854:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004856:	2301      	movs	r3, #1
 8004858:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800485a:	f000 fe87 	bl	800556c <vPortExitCritical>

	return xReturn;
 800485e:	69fb      	ldr	r3, [r7, #28]
}
 8004860:	4618      	mov	r0, r3
 8004862:	3720      	adds	r7, #32
 8004864:	46bd      	mov	sp, r7
 8004866:	bd80      	pop	{r7, pc}
 8004868:	20000c90 	.word	0x20000c90
 800486c:	20000ca4 	.word	0x20000ca4

08004870 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004870:	b480      	push	{r7}
 8004872:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004874:	4b03      	ldr	r3, [pc, #12]	@ (8004884 <vTaskMissedYield+0x14>)
 8004876:	2201      	movs	r2, #1
 8004878:	601a      	str	r2, [r3, #0]
}
 800487a:	bf00      	nop
 800487c:	46bd      	mov	sp, r7
 800487e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004882:	4770      	bx	lr
 8004884:	20000ca0 	.word	0x20000ca0

08004888 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b082      	sub	sp, #8
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004890:	f000 f852 	bl	8004938 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004894:	4b06      	ldr	r3, [pc, #24]	@ (80048b0 <prvIdleTask+0x28>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	2b01      	cmp	r3, #1
 800489a:	d9f9      	bls.n	8004890 <prvIdleTask+0x8>
			{
				taskYIELD();
 800489c:	4b05      	ldr	r3, [pc, #20]	@ (80048b4 <prvIdleTask+0x2c>)
 800489e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80048a2:	601a      	str	r2, [r3, #0]
 80048a4:	f3bf 8f4f 	dsb	sy
 80048a8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80048ac:	e7f0      	b.n	8004890 <prvIdleTask+0x8>
 80048ae:	bf00      	nop
 80048b0:	200007bc 	.word	0x200007bc
 80048b4:	e000ed04 	.word	0xe000ed04

080048b8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b082      	sub	sp, #8
 80048bc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80048be:	2300      	movs	r3, #0
 80048c0:	607b      	str	r3, [r7, #4]
 80048c2:	e00c      	b.n	80048de <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80048c4:	687a      	ldr	r2, [r7, #4]
 80048c6:	4613      	mov	r3, r2
 80048c8:	009b      	lsls	r3, r3, #2
 80048ca:	4413      	add	r3, r2
 80048cc:	009b      	lsls	r3, r3, #2
 80048ce:	4a12      	ldr	r2, [pc, #72]	@ (8004918 <prvInitialiseTaskLists+0x60>)
 80048d0:	4413      	add	r3, r2
 80048d2:	4618      	mov	r0, r3
 80048d4:	f7fe fcd6 	bl	8003284 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	3301      	adds	r3, #1
 80048dc:	607b      	str	r3, [r7, #4]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2b37      	cmp	r3, #55	@ 0x37
 80048e2:	d9ef      	bls.n	80048c4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80048e4:	480d      	ldr	r0, [pc, #52]	@ (800491c <prvInitialiseTaskLists+0x64>)
 80048e6:	f7fe fccd 	bl	8003284 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80048ea:	480d      	ldr	r0, [pc, #52]	@ (8004920 <prvInitialiseTaskLists+0x68>)
 80048ec:	f7fe fcca 	bl	8003284 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80048f0:	480c      	ldr	r0, [pc, #48]	@ (8004924 <prvInitialiseTaskLists+0x6c>)
 80048f2:	f7fe fcc7 	bl	8003284 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80048f6:	480c      	ldr	r0, [pc, #48]	@ (8004928 <prvInitialiseTaskLists+0x70>)
 80048f8:	f7fe fcc4 	bl	8003284 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80048fc:	480b      	ldr	r0, [pc, #44]	@ (800492c <prvInitialiseTaskLists+0x74>)
 80048fe:	f7fe fcc1 	bl	8003284 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004902:	4b0b      	ldr	r3, [pc, #44]	@ (8004930 <prvInitialiseTaskLists+0x78>)
 8004904:	4a05      	ldr	r2, [pc, #20]	@ (800491c <prvInitialiseTaskLists+0x64>)
 8004906:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004908:	4b0a      	ldr	r3, [pc, #40]	@ (8004934 <prvInitialiseTaskLists+0x7c>)
 800490a:	4a05      	ldr	r2, [pc, #20]	@ (8004920 <prvInitialiseTaskLists+0x68>)
 800490c:	601a      	str	r2, [r3, #0]
}
 800490e:	bf00      	nop
 8004910:	3708      	adds	r7, #8
 8004912:	46bd      	mov	sp, r7
 8004914:	bd80      	pop	{r7, pc}
 8004916:	bf00      	nop
 8004918:	200007bc 	.word	0x200007bc
 800491c:	20000c1c 	.word	0x20000c1c
 8004920:	20000c30 	.word	0x20000c30
 8004924:	20000c4c 	.word	0x20000c4c
 8004928:	20000c60 	.word	0x20000c60
 800492c:	20000c78 	.word	0x20000c78
 8004930:	20000c44 	.word	0x20000c44
 8004934:	20000c48 	.word	0x20000c48

08004938 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b082      	sub	sp, #8
 800493c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800493e:	e019      	b.n	8004974 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004940:	f000 fde2 	bl	8005508 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004944:	4b10      	ldr	r3, [pc, #64]	@ (8004988 <prvCheckTasksWaitingTermination+0x50>)
 8004946:	68db      	ldr	r3, [r3, #12]
 8004948:	68db      	ldr	r3, [r3, #12]
 800494a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	3304      	adds	r3, #4
 8004950:	4618      	mov	r0, r3
 8004952:	f7fe fd21 	bl	8003398 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004956:	4b0d      	ldr	r3, [pc, #52]	@ (800498c <prvCheckTasksWaitingTermination+0x54>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	3b01      	subs	r3, #1
 800495c:	4a0b      	ldr	r2, [pc, #44]	@ (800498c <prvCheckTasksWaitingTermination+0x54>)
 800495e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004960:	4b0b      	ldr	r3, [pc, #44]	@ (8004990 <prvCheckTasksWaitingTermination+0x58>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	3b01      	subs	r3, #1
 8004966:	4a0a      	ldr	r2, [pc, #40]	@ (8004990 <prvCheckTasksWaitingTermination+0x58>)
 8004968:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800496a:	f000 fdff 	bl	800556c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800496e:	6878      	ldr	r0, [r7, #4]
 8004970:	f000 f810 	bl	8004994 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004974:	4b06      	ldr	r3, [pc, #24]	@ (8004990 <prvCheckTasksWaitingTermination+0x58>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d1e1      	bne.n	8004940 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800497c:	bf00      	nop
 800497e:	bf00      	nop
 8004980:	3708      	adds	r7, #8
 8004982:	46bd      	mov	sp, r7
 8004984:	bd80      	pop	{r7, pc}
 8004986:	bf00      	nop
 8004988:	20000c60 	.word	0x20000c60
 800498c:	20000c8c 	.word	0x20000c8c
 8004990:	20000c74 	.word	0x20000c74

08004994 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004994:	b580      	push	{r7, lr}
 8004996:	b084      	sub	sp, #16
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d108      	bne.n	80049b8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049aa:	4618      	mov	r0, r3
 80049ac:	f000 ff9c 	bl	80058e8 <vPortFree>
				vPortFree( pxTCB );
 80049b0:	6878      	ldr	r0, [r7, #4]
 80049b2:	f000 ff99 	bl	80058e8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80049b6:	e019      	b.n	80049ec <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80049be:	2b01      	cmp	r3, #1
 80049c0:	d103      	bne.n	80049ca <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80049c2:	6878      	ldr	r0, [r7, #4]
 80049c4:	f000 ff90 	bl	80058e8 <vPortFree>
	}
 80049c8:	e010      	b.n	80049ec <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80049d0:	2b02      	cmp	r3, #2
 80049d2:	d00b      	beq.n	80049ec <prvDeleteTCB+0x58>
	__asm volatile
 80049d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049d8:	f383 8811 	msr	BASEPRI, r3
 80049dc:	f3bf 8f6f 	isb	sy
 80049e0:	f3bf 8f4f 	dsb	sy
 80049e4:	60fb      	str	r3, [r7, #12]
}
 80049e6:	bf00      	nop
 80049e8:	bf00      	nop
 80049ea:	e7fd      	b.n	80049e8 <prvDeleteTCB+0x54>
	}
 80049ec:	bf00      	nop
 80049ee:	3710      	adds	r7, #16
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bd80      	pop	{r7, pc}

080049f4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80049f4:	b480      	push	{r7}
 80049f6:	b083      	sub	sp, #12
 80049f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80049fa:	4b0c      	ldr	r3, [pc, #48]	@ (8004a2c <prvResetNextTaskUnblockTime+0x38>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d104      	bne.n	8004a0e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004a04:	4b0a      	ldr	r3, [pc, #40]	@ (8004a30 <prvResetNextTaskUnblockTime+0x3c>)
 8004a06:	f04f 32ff 	mov.w	r2, #4294967295
 8004a0a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004a0c:	e008      	b.n	8004a20 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a0e:	4b07      	ldr	r3, [pc, #28]	@ (8004a2c <prvResetNextTaskUnblockTime+0x38>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	68db      	ldr	r3, [r3, #12]
 8004a14:	68db      	ldr	r3, [r3, #12]
 8004a16:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	4a04      	ldr	r2, [pc, #16]	@ (8004a30 <prvResetNextTaskUnblockTime+0x3c>)
 8004a1e:	6013      	str	r3, [r2, #0]
}
 8004a20:	bf00      	nop
 8004a22:	370c      	adds	r7, #12
 8004a24:	46bd      	mov	sp, r7
 8004a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2a:	4770      	bx	lr
 8004a2c:	20000c44 	.word	0x20000c44
 8004a30:	20000cac 	.word	0x20000cac

08004a34 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004a34:	b480      	push	{r7}
 8004a36:	b083      	sub	sp, #12
 8004a38:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004a3a:	4b0b      	ldr	r3, [pc, #44]	@ (8004a68 <xTaskGetSchedulerState+0x34>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d102      	bne.n	8004a48 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004a42:	2301      	movs	r3, #1
 8004a44:	607b      	str	r3, [r7, #4]
 8004a46:	e008      	b.n	8004a5a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004a48:	4b08      	ldr	r3, [pc, #32]	@ (8004a6c <xTaskGetSchedulerState+0x38>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d102      	bne.n	8004a56 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004a50:	2302      	movs	r3, #2
 8004a52:	607b      	str	r3, [r7, #4]
 8004a54:	e001      	b.n	8004a5a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004a56:	2300      	movs	r3, #0
 8004a58:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004a5a:	687b      	ldr	r3, [r7, #4]
	}
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	370c      	adds	r7, #12
 8004a60:	46bd      	mov	sp, r7
 8004a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a66:	4770      	bx	lr
 8004a68:	20000c98 	.word	0x20000c98
 8004a6c:	20000cb4 	.word	0x20000cb4

08004a70 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b086      	sub	sp, #24
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d058      	beq.n	8004b38 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004a86:	4b2f      	ldr	r3, [pc, #188]	@ (8004b44 <xTaskPriorityDisinherit+0xd4>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	693a      	ldr	r2, [r7, #16]
 8004a8c:	429a      	cmp	r2, r3
 8004a8e:	d00b      	beq.n	8004aa8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8004a90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a94:	f383 8811 	msr	BASEPRI, r3
 8004a98:	f3bf 8f6f 	isb	sy
 8004a9c:	f3bf 8f4f 	dsb	sy
 8004aa0:	60fb      	str	r3, [r7, #12]
}
 8004aa2:	bf00      	nop
 8004aa4:	bf00      	nop
 8004aa6:	e7fd      	b.n	8004aa4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d10b      	bne.n	8004ac8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8004ab0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ab4:	f383 8811 	msr	BASEPRI, r3
 8004ab8:	f3bf 8f6f 	isb	sy
 8004abc:	f3bf 8f4f 	dsb	sy
 8004ac0:	60bb      	str	r3, [r7, #8]
}
 8004ac2:	bf00      	nop
 8004ac4:	bf00      	nop
 8004ac6:	e7fd      	b.n	8004ac4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8004ac8:	693b      	ldr	r3, [r7, #16]
 8004aca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004acc:	1e5a      	subs	r2, r3, #1
 8004ace:	693b      	ldr	r3, [r7, #16]
 8004ad0:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004ad2:	693b      	ldr	r3, [r7, #16]
 8004ad4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ad6:	693b      	ldr	r3, [r7, #16]
 8004ad8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ada:	429a      	cmp	r2, r3
 8004adc:	d02c      	beq.n	8004b38 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004ade:	693b      	ldr	r3, [r7, #16]
 8004ae0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d128      	bne.n	8004b38 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004ae6:	693b      	ldr	r3, [r7, #16]
 8004ae8:	3304      	adds	r3, #4
 8004aea:	4618      	mov	r0, r3
 8004aec:	f7fe fc54 	bl	8003398 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004af0:	693b      	ldr	r3, [r7, #16]
 8004af2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004af4:	693b      	ldr	r3, [r7, #16]
 8004af6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004af8:	693b      	ldr	r3, [r7, #16]
 8004afa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004afc:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004b00:	693b      	ldr	r3, [r7, #16]
 8004b02:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004b04:	693b      	ldr	r3, [r7, #16]
 8004b06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b08:	4b0f      	ldr	r3, [pc, #60]	@ (8004b48 <xTaskPriorityDisinherit+0xd8>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	429a      	cmp	r2, r3
 8004b0e:	d903      	bls.n	8004b18 <xTaskPriorityDisinherit+0xa8>
 8004b10:	693b      	ldr	r3, [r7, #16]
 8004b12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b14:	4a0c      	ldr	r2, [pc, #48]	@ (8004b48 <xTaskPriorityDisinherit+0xd8>)
 8004b16:	6013      	str	r3, [r2, #0]
 8004b18:	693b      	ldr	r3, [r7, #16]
 8004b1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b1c:	4613      	mov	r3, r2
 8004b1e:	009b      	lsls	r3, r3, #2
 8004b20:	4413      	add	r3, r2
 8004b22:	009b      	lsls	r3, r3, #2
 8004b24:	4a09      	ldr	r2, [pc, #36]	@ (8004b4c <xTaskPriorityDisinherit+0xdc>)
 8004b26:	441a      	add	r2, r3
 8004b28:	693b      	ldr	r3, [r7, #16]
 8004b2a:	3304      	adds	r3, #4
 8004b2c:	4619      	mov	r1, r3
 8004b2e:	4610      	mov	r0, r2
 8004b30:	f7fe fbd5 	bl	80032de <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004b34:	2301      	movs	r3, #1
 8004b36:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004b38:	697b      	ldr	r3, [r7, #20]
	}
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	3718      	adds	r7, #24
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	bd80      	pop	{r7, pc}
 8004b42:	bf00      	nop
 8004b44:	200007b8 	.word	0x200007b8
 8004b48:	20000c94 	.word	0x20000c94
 8004b4c:	200007bc 	.word	0x200007bc

08004b50 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b084      	sub	sp, #16
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
 8004b58:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004b5a:	4b21      	ldr	r3, [pc, #132]	@ (8004be0 <prvAddCurrentTaskToDelayedList+0x90>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004b60:	4b20      	ldr	r3, [pc, #128]	@ (8004be4 <prvAddCurrentTaskToDelayedList+0x94>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	3304      	adds	r3, #4
 8004b66:	4618      	mov	r0, r3
 8004b68:	f7fe fc16 	bl	8003398 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b72:	d10a      	bne.n	8004b8a <prvAddCurrentTaskToDelayedList+0x3a>
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d007      	beq.n	8004b8a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004b7a:	4b1a      	ldr	r3, [pc, #104]	@ (8004be4 <prvAddCurrentTaskToDelayedList+0x94>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	3304      	adds	r3, #4
 8004b80:	4619      	mov	r1, r3
 8004b82:	4819      	ldr	r0, [pc, #100]	@ (8004be8 <prvAddCurrentTaskToDelayedList+0x98>)
 8004b84:	f7fe fbab 	bl	80032de <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004b88:	e026      	b.n	8004bd8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004b8a:	68fa      	ldr	r2, [r7, #12]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	4413      	add	r3, r2
 8004b90:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004b92:	4b14      	ldr	r3, [pc, #80]	@ (8004be4 <prvAddCurrentTaskToDelayedList+0x94>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	68ba      	ldr	r2, [r7, #8]
 8004b98:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004b9a:	68ba      	ldr	r2, [r7, #8]
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	429a      	cmp	r2, r3
 8004ba0:	d209      	bcs.n	8004bb6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004ba2:	4b12      	ldr	r3, [pc, #72]	@ (8004bec <prvAddCurrentTaskToDelayedList+0x9c>)
 8004ba4:	681a      	ldr	r2, [r3, #0]
 8004ba6:	4b0f      	ldr	r3, [pc, #60]	@ (8004be4 <prvAddCurrentTaskToDelayedList+0x94>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	3304      	adds	r3, #4
 8004bac:	4619      	mov	r1, r3
 8004bae:	4610      	mov	r0, r2
 8004bb0:	f7fe fbb9 	bl	8003326 <vListInsert>
}
 8004bb4:	e010      	b.n	8004bd8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004bb6:	4b0e      	ldr	r3, [pc, #56]	@ (8004bf0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004bb8:	681a      	ldr	r2, [r3, #0]
 8004bba:	4b0a      	ldr	r3, [pc, #40]	@ (8004be4 <prvAddCurrentTaskToDelayedList+0x94>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	3304      	adds	r3, #4
 8004bc0:	4619      	mov	r1, r3
 8004bc2:	4610      	mov	r0, r2
 8004bc4:	f7fe fbaf 	bl	8003326 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004bc8:	4b0a      	ldr	r3, [pc, #40]	@ (8004bf4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	68ba      	ldr	r2, [r7, #8]
 8004bce:	429a      	cmp	r2, r3
 8004bd0:	d202      	bcs.n	8004bd8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004bd2:	4a08      	ldr	r2, [pc, #32]	@ (8004bf4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	6013      	str	r3, [r2, #0]
}
 8004bd8:	bf00      	nop
 8004bda:	3710      	adds	r7, #16
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	bd80      	pop	{r7, pc}
 8004be0:	20000c90 	.word	0x20000c90
 8004be4:	200007b8 	.word	0x200007b8
 8004be8:	20000c78 	.word	0x20000c78
 8004bec:	20000c48 	.word	0x20000c48
 8004bf0:	20000c44 	.word	0x20000c44
 8004bf4:	20000cac 	.word	0x20000cac

08004bf8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b08a      	sub	sp, #40	@ 0x28
 8004bfc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004bfe:	2300      	movs	r3, #0
 8004c00:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004c02:	f000 fb13 	bl	800522c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004c06:	4b1d      	ldr	r3, [pc, #116]	@ (8004c7c <xTimerCreateTimerTask+0x84>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d021      	beq.n	8004c52 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004c0e:	2300      	movs	r3, #0
 8004c10:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004c12:	2300      	movs	r3, #0
 8004c14:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004c16:	1d3a      	adds	r2, r7, #4
 8004c18:	f107 0108 	add.w	r1, r7, #8
 8004c1c:	f107 030c 	add.w	r3, r7, #12
 8004c20:	4618      	mov	r0, r3
 8004c22:	f7fe fb15 	bl	8003250 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004c26:	6879      	ldr	r1, [r7, #4]
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	68fa      	ldr	r2, [r7, #12]
 8004c2c:	9202      	str	r2, [sp, #8]
 8004c2e:	9301      	str	r3, [sp, #4]
 8004c30:	2302      	movs	r3, #2
 8004c32:	9300      	str	r3, [sp, #0]
 8004c34:	2300      	movs	r3, #0
 8004c36:	460a      	mov	r2, r1
 8004c38:	4911      	ldr	r1, [pc, #68]	@ (8004c80 <xTimerCreateTimerTask+0x88>)
 8004c3a:	4812      	ldr	r0, [pc, #72]	@ (8004c84 <xTimerCreateTimerTask+0x8c>)
 8004c3c:	f7ff f8d0 	bl	8003de0 <xTaskCreateStatic>
 8004c40:	4603      	mov	r3, r0
 8004c42:	4a11      	ldr	r2, [pc, #68]	@ (8004c88 <xTimerCreateTimerTask+0x90>)
 8004c44:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004c46:	4b10      	ldr	r3, [pc, #64]	@ (8004c88 <xTimerCreateTimerTask+0x90>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d001      	beq.n	8004c52 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004c4e:	2301      	movs	r3, #1
 8004c50:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004c52:	697b      	ldr	r3, [r7, #20]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d10b      	bne.n	8004c70 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8004c58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c5c:	f383 8811 	msr	BASEPRI, r3
 8004c60:	f3bf 8f6f 	isb	sy
 8004c64:	f3bf 8f4f 	dsb	sy
 8004c68:	613b      	str	r3, [r7, #16]
}
 8004c6a:	bf00      	nop
 8004c6c:	bf00      	nop
 8004c6e:	e7fd      	b.n	8004c6c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004c70:	697b      	ldr	r3, [r7, #20]
}
 8004c72:	4618      	mov	r0, r3
 8004c74:	3718      	adds	r7, #24
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bd80      	pop	{r7, pc}
 8004c7a:	bf00      	nop
 8004c7c:	20000ce8 	.word	0x20000ce8
 8004c80:	08005bc8 	.word	0x08005bc8
 8004c84:	08004dc5 	.word	0x08004dc5
 8004c88:	20000cec 	.word	0x20000cec

08004c8c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b08a      	sub	sp, #40	@ 0x28
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	60f8      	str	r0, [r7, #12]
 8004c94:	60b9      	str	r1, [r7, #8]
 8004c96:	607a      	str	r2, [r7, #4]
 8004c98:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d10b      	bne.n	8004cbc <xTimerGenericCommand+0x30>
	__asm volatile
 8004ca4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ca8:	f383 8811 	msr	BASEPRI, r3
 8004cac:	f3bf 8f6f 	isb	sy
 8004cb0:	f3bf 8f4f 	dsb	sy
 8004cb4:	623b      	str	r3, [r7, #32]
}
 8004cb6:	bf00      	nop
 8004cb8:	bf00      	nop
 8004cba:	e7fd      	b.n	8004cb8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004cbc:	4b19      	ldr	r3, [pc, #100]	@ (8004d24 <xTimerGenericCommand+0x98>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d02a      	beq.n	8004d1a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	2b05      	cmp	r3, #5
 8004cd4:	dc18      	bgt.n	8004d08 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004cd6:	f7ff fead 	bl	8004a34 <xTaskGetSchedulerState>
 8004cda:	4603      	mov	r3, r0
 8004cdc:	2b02      	cmp	r3, #2
 8004cde:	d109      	bne.n	8004cf4 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004ce0:	4b10      	ldr	r3, [pc, #64]	@ (8004d24 <xTimerGenericCommand+0x98>)
 8004ce2:	6818      	ldr	r0, [r3, #0]
 8004ce4:	f107 0110 	add.w	r1, r7, #16
 8004ce8:	2300      	movs	r3, #0
 8004cea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004cec:	f7fe fc88 	bl	8003600 <xQueueGenericSend>
 8004cf0:	6278      	str	r0, [r7, #36]	@ 0x24
 8004cf2:	e012      	b.n	8004d1a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004cf4:	4b0b      	ldr	r3, [pc, #44]	@ (8004d24 <xTimerGenericCommand+0x98>)
 8004cf6:	6818      	ldr	r0, [r3, #0]
 8004cf8:	f107 0110 	add.w	r1, r7, #16
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	2200      	movs	r2, #0
 8004d00:	f7fe fc7e 	bl	8003600 <xQueueGenericSend>
 8004d04:	6278      	str	r0, [r7, #36]	@ 0x24
 8004d06:	e008      	b.n	8004d1a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004d08:	4b06      	ldr	r3, [pc, #24]	@ (8004d24 <xTimerGenericCommand+0x98>)
 8004d0a:	6818      	ldr	r0, [r3, #0]
 8004d0c:	f107 0110 	add.w	r1, r7, #16
 8004d10:	2300      	movs	r3, #0
 8004d12:	683a      	ldr	r2, [r7, #0]
 8004d14:	f7fe fd76 	bl	8003804 <xQueueGenericSendFromISR>
 8004d18:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004d1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	3728      	adds	r7, #40	@ 0x28
 8004d20:	46bd      	mov	sp, r7
 8004d22:	bd80      	pop	{r7, pc}
 8004d24:	20000ce8 	.word	0x20000ce8

08004d28 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b088      	sub	sp, #32
 8004d2c:	af02      	add	r7, sp, #8
 8004d2e:	6078      	str	r0, [r7, #4]
 8004d30:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d32:	4b23      	ldr	r3, [pc, #140]	@ (8004dc0 <prvProcessExpiredTimer+0x98>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	68db      	ldr	r3, [r3, #12]
 8004d38:	68db      	ldr	r3, [r3, #12]
 8004d3a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004d3c:	697b      	ldr	r3, [r7, #20]
 8004d3e:	3304      	adds	r3, #4
 8004d40:	4618      	mov	r0, r3
 8004d42:	f7fe fb29 	bl	8003398 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004d46:	697b      	ldr	r3, [r7, #20]
 8004d48:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004d4c:	f003 0304 	and.w	r3, r3, #4
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d023      	beq.n	8004d9c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004d54:	697b      	ldr	r3, [r7, #20]
 8004d56:	699a      	ldr	r2, [r3, #24]
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	18d1      	adds	r1, r2, r3
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	683a      	ldr	r2, [r7, #0]
 8004d60:	6978      	ldr	r0, [r7, #20]
 8004d62:	f000 f8d5 	bl	8004f10 <prvInsertTimerInActiveList>
 8004d66:	4603      	mov	r3, r0
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d020      	beq.n	8004dae <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	9300      	str	r3, [sp, #0]
 8004d70:	2300      	movs	r3, #0
 8004d72:	687a      	ldr	r2, [r7, #4]
 8004d74:	2100      	movs	r1, #0
 8004d76:	6978      	ldr	r0, [r7, #20]
 8004d78:	f7ff ff88 	bl	8004c8c <xTimerGenericCommand>
 8004d7c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004d7e:	693b      	ldr	r3, [r7, #16]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d114      	bne.n	8004dae <prvProcessExpiredTimer+0x86>
	__asm volatile
 8004d84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d88:	f383 8811 	msr	BASEPRI, r3
 8004d8c:	f3bf 8f6f 	isb	sy
 8004d90:	f3bf 8f4f 	dsb	sy
 8004d94:	60fb      	str	r3, [r7, #12]
}
 8004d96:	bf00      	nop
 8004d98:	bf00      	nop
 8004d9a:	e7fd      	b.n	8004d98 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004da2:	f023 0301 	bic.w	r3, r3, #1
 8004da6:	b2da      	uxtb	r2, r3
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004dae:	697b      	ldr	r3, [r7, #20]
 8004db0:	6a1b      	ldr	r3, [r3, #32]
 8004db2:	6978      	ldr	r0, [r7, #20]
 8004db4:	4798      	blx	r3
}
 8004db6:	bf00      	nop
 8004db8:	3718      	adds	r7, #24
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}
 8004dbe:	bf00      	nop
 8004dc0:	20000ce0 	.word	0x20000ce0

08004dc4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b084      	sub	sp, #16
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004dcc:	f107 0308 	add.w	r3, r7, #8
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	f000 f859 	bl	8004e88 <prvGetNextExpireTime>
 8004dd6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	4619      	mov	r1, r3
 8004ddc:	68f8      	ldr	r0, [r7, #12]
 8004dde:	f000 f805 	bl	8004dec <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004de2:	f000 f8d7 	bl	8004f94 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004de6:	bf00      	nop
 8004de8:	e7f0      	b.n	8004dcc <prvTimerTask+0x8>
	...

08004dec <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b084      	sub	sp, #16
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
 8004df4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004df6:	f7ff fa37 	bl	8004268 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004dfa:	f107 0308 	add.w	r3, r7, #8
 8004dfe:	4618      	mov	r0, r3
 8004e00:	f000 f866 	bl	8004ed0 <prvSampleTimeNow>
 8004e04:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d130      	bne.n	8004e6e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d10a      	bne.n	8004e28 <prvProcessTimerOrBlockTask+0x3c>
 8004e12:	687a      	ldr	r2, [r7, #4]
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	429a      	cmp	r2, r3
 8004e18:	d806      	bhi.n	8004e28 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004e1a:	f7ff fa33 	bl	8004284 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004e1e:	68f9      	ldr	r1, [r7, #12]
 8004e20:	6878      	ldr	r0, [r7, #4]
 8004e22:	f7ff ff81 	bl	8004d28 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004e26:	e024      	b.n	8004e72 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d008      	beq.n	8004e40 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004e2e:	4b13      	ldr	r3, [pc, #76]	@ (8004e7c <prvProcessTimerOrBlockTask+0x90>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d101      	bne.n	8004e3c <prvProcessTimerOrBlockTask+0x50>
 8004e38:	2301      	movs	r3, #1
 8004e3a:	e000      	b.n	8004e3e <prvProcessTimerOrBlockTask+0x52>
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004e40:	4b0f      	ldr	r3, [pc, #60]	@ (8004e80 <prvProcessTimerOrBlockTask+0x94>)
 8004e42:	6818      	ldr	r0, [r3, #0]
 8004e44:	687a      	ldr	r2, [r7, #4]
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	1ad3      	subs	r3, r2, r3
 8004e4a:	683a      	ldr	r2, [r7, #0]
 8004e4c:	4619      	mov	r1, r3
 8004e4e:	f7fe ff93 	bl	8003d78 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004e52:	f7ff fa17 	bl	8004284 <xTaskResumeAll>
 8004e56:	4603      	mov	r3, r0
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d10a      	bne.n	8004e72 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004e5c:	4b09      	ldr	r3, [pc, #36]	@ (8004e84 <prvProcessTimerOrBlockTask+0x98>)
 8004e5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004e62:	601a      	str	r2, [r3, #0]
 8004e64:	f3bf 8f4f 	dsb	sy
 8004e68:	f3bf 8f6f 	isb	sy
}
 8004e6c:	e001      	b.n	8004e72 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004e6e:	f7ff fa09 	bl	8004284 <xTaskResumeAll>
}
 8004e72:	bf00      	nop
 8004e74:	3710      	adds	r7, #16
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bd80      	pop	{r7, pc}
 8004e7a:	bf00      	nop
 8004e7c:	20000ce4 	.word	0x20000ce4
 8004e80:	20000ce8 	.word	0x20000ce8
 8004e84:	e000ed04 	.word	0xe000ed04

08004e88 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004e88:	b480      	push	{r7}
 8004e8a:	b085      	sub	sp, #20
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004e90:	4b0e      	ldr	r3, [pc, #56]	@ (8004ecc <prvGetNextExpireTime+0x44>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d101      	bne.n	8004e9e <prvGetNextExpireTime+0x16>
 8004e9a:	2201      	movs	r2, #1
 8004e9c:	e000      	b.n	8004ea0 <prvGetNextExpireTime+0x18>
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d105      	bne.n	8004eb8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004eac:	4b07      	ldr	r3, [pc, #28]	@ (8004ecc <prvGetNextExpireTime+0x44>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	68db      	ldr	r3, [r3, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	60fb      	str	r3, [r7, #12]
 8004eb6:	e001      	b.n	8004ebc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004eb8:	2300      	movs	r3, #0
 8004eba:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
}
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	3714      	adds	r7, #20
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec8:	4770      	bx	lr
 8004eca:	bf00      	nop
 8004ecc:	20000ce0 	.word	0x20000ce0

08004ed0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b084      	sub	sp, #16
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004ed8:	f7ff fa72 	bl	80043c0 <xTaskGetTickCount>
 8004edc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004ede:	4b0b      	ldr	r3, [pc, #44]	@ (8004f0c <prvSampleTimeNow+0x3c>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	68fa      	ldr	r2, [r7, #12]
 8004ee4:	429a      	cmp	r2, r3
 8004ee6:	d205      	bcs.n	8004ef4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004ee8:	f000 f93a 	bl	8005160 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2201      	movs	r2, #1
 8004ef0:	601a      	str	r2, [r3, #0]
 8004ef2:	e002      	b.n	8004efa <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004efa:	4a04      	ldr	r2, [pc, #16]	@ (8004f0c <prvSampleTimeNow+0x3c>)
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004f00:	68fb      	ldr	r3, [r7, #12]
}
 8004f02:	4618      	mov	r0, r3
 8004f04:	3710      	adds	r7, #16
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bd80      	pop	{r7, pc}
 8004f0a:	bf00      	nop
 8004f0c:	20000cf0 	.word	0x20000cf0

08004f10 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b086      	sub	sp, #24
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	60f8      	str	r0, [r7, #12]
 8004f18:	60b9      	str	r1, [r7, #8]
 8004f1a:	607a      	str	r2, [r7, #4]
 8004f1c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004f1e:	2300      	movs	r3, #0
 8004f20:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	68ba      	ldr	r2, [r7, #8]
 8004f26:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	68fa      	ldr	r2, [r7, #12]
 8004f2c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004f2e:	68ba      	ldr	r2, [r7, #8]
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	429a      	cmp	r2, r3
 8004f34:	d812      	bhi.n	8004f5c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f36:	687a      	ldr	r2, [r7, #4]
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	1ad2      	subs	r2, r2, r3
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	699b      	ldr	r3, [r3, #24]
 8004f40:	429a      	cmp	r2, r3
 8004f42:	d302      	bcc.n	8004f4a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004f44:	2301      	movs	r3, #1
 8004f46:	617b      	str	r3, [r7, #20]
 8004f48:	e01b      	b.n	8004f82 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004f4a:	4b10      	ldr	r3, [pc, #64]	@ (8004f8c <prvInsertTimerInActiveList+0x7c>)
 8004f4c:	681a      	ldr	r2, [r3, #0]
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	3304      	adds	r3, #4
 8004f52:	4619      	mov	r1, r3
 8004f54:	4610      	mov	r0, r2
 8004f56:	f7fe f9e6 	bl	8003326 <vListInsert>
 8004f5a:	e012      	b.n	8004f82 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004f5c:	687a      	ldr	r2, [r7, #4]
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	429a      	cmp	r2, r3
 8004f62:	d206      	bcs.n	8004f72 <prvInsertTimerInActiveList+0x62>
 8004f64:	68ba      	ldr	r2, [r7, #8]
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	429a      	cmp	r2, r3
 8004f6a:	d302      	bcc.n	8004f72 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	617b      	str	r3, [r7, #20]
 8004f70:	e007      	b.n	8004f82 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004f72:	4b07      	ldr	r3, [pc, #28]	@ (8004f90 <prvInsertTimerInActiveList+0x80>)
 8004f74:	681a      	ldr	r2, [r3, #0]
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	3304      	adds	r3, #4
 8004f7a:	4619      	mov	r1, r3
 8004f7c:	4610      	mov	r0, r2
 8004f7e:	f7fe f9d2 	bl	8003326 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004f82:	697b      	ldr	r3, [r7, #20]
}
 8004f84:	4618      	mov	r0, r3
 8004f86:	3718      	adds	r7, #24
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	bd80      	pop	{r7, pc}
 8004f8c:	20000ce4 	.word	0x20000ce4
 8004f90:	20000ce0 	.word	0x20000ce0

08004f94 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b08e      	sub	sp, #56	@ 0x38
 8004f98:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004f9a:	e0ce      	b.n	800513a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	da19      	bge.n	8004fd6 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004fa2:	1d3b      	adds	r3, r7, #4
 8004fa4:	3304      	adds	r3, #4
 8004fa6:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004fa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d10b      	bne.n	8004fc6 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8004fae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fb2:	f383 8811 	msr	BASEPRI, r3
 8004fb6:	f3bf 8f6f 	isb	sy
 8004fba:	f3bf 8f4f 	dsb	sy
 8004fbe:	61fb      	str	r3, [r7, #28]
}
 8004fc0:	bf00      	nop
 8004fc2:	bf00      	nop
 8004fc4:	e7fd      	b.n	8004fc2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004fc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004fcc:	6850      	ldr	r0, [r2, #4]
 8004fce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004fd0:	6892      	ldr	r2, [r2, #8]
 8004fd2:	4611      	mov	r1, r2
 8004fd4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	f2c0 80ae 	blt.w	800513a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004fe2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fe4:	695b      	ldr	r3, [r3, #20]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d004      	beq.n	8004ff4 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004fea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fec:	3304      	adds	r3, #4
 8004fee:	4618      	mov	r0, r3
 8004ff0:	f7fe f9d2 	bl	8003398 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004ff4:	463b      	mov	r3, r7
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	f7ff ff6a 	bl	8004ed0 <prvSampleTimeNow>
 8004ffc:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2b09      	cmp	r3, #9
 8005002:	f200 8097 	bhi.w	8005134 <prvProcessReceivedCommands+0x1a0>
 8005006:	a201      	add	r2, pc, #4	@ (adr r2, 800500c <prvProcessReceivedCommands+0x78>)
 8005008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800500c:	08005035 	.word	0x08005035
 8005010:	08005035 	.word	0x08005035
 8005014:	08005035 	.word	0x08005035
 8005018:	080050ab 	.word	0x080050ab
 800501c:	080050bf 	.word	0x080050bf
 8005020:	0800510b 	.word	0x0800510b
 8005024:	08005035 	.word	0x08005035
 8005028:	08005035 	.word	0x08005035
 800502c:	080050ab 	.word	0x080050ab
 8005030:	080050bf 	.word	0x080050bf
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005034:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005036:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800503a:	f043 0301 	orr.w	r3, r3, #1
 800503e:	b2da      	uxtb	r2, r3
 8005040:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005042:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005046:	68ba      	ldr	r2, [r7, #8]
 8005048:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800504a:	699b      	ldr	r3, [r3, #24]
 800504c:	18d1      	adds	r1, r2, r3
 800504e:	68bb      	ldr	r3, [r7, #8]
 8005050:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005052:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005054:	f7ff ff5c 	bl	8004f10 <prvInsertTimerInActiveList>
 8005058:	4603      	mov	r3, r0
 800505a:	2b00      	cmp	r3, #0
 800505c:	d06c      	beq.n	8005138 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800505e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005060:	6a1b      	ldr	r3, [r3, #32]
 8005062:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005064:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005066:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005068:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800506c:	f003 0304 	and.w	r3, r3, #4
 8005070:	2b00      	cmp	r3, #0
 8005072:	d061      	beq.n	8005138 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005074:	68ba      	ldr	r2, [r7, #8]
 8005076:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005078:	699b      	ldr	r3, [r3, #24]
 800507a:	441a      	add	r2, r3
 800507c:	2300      	movs	r3, #0
 800507e:	9300      	str	r3, [sp, #0]
 8005080:	2300      	movs	r3, #0
 8005082:	2100      	movs	r1, #0
 8005084:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005086:	f7ff fe01 	bl	8004c8c <xTimerGenericCommand>
 800508a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800508c:	6a3b      	ldr	r3, [r7, #32]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d152      	bne.n	8005138 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8005092:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005096:	f383 8811 	msr	BASEPRI, r3
 800509a:	f3bf 8f6f 	isb	sy
 800509e:	f3bf 8f4f 	dsb	sy
 80050a2:	61bb      	str	r3, [r7, #24]
}
 80050a4:	bf00      	nop
 80050a6:	bf00      	nop
 80050a8:	e7fd      	b.n	80050a6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80050aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050ac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80050b0:	f023 0301 	bic.w	r3, r3, #1
 80050b4:	b2da      	uxtb	r2, r3
 80050b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050b8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80050bc:	e03d      	b.n	800513a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80050be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050c0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80050c4:	f043 0301 	orr.w	r3, r3, #1
 80050c8:	b2da      	uxtb	r2, r3
 80050ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050cc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80050d0:	68ba      	ldr	r2, [r7, #8]
 80050d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050d4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80050d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050d8:	699b      	ldr	r3, [r3, #24]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d10b      	bne.n	80050f6 <prvProcessReceivedCommands+0x162>
	__asm volatile
 80050de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050e2:	f383 8811 	msr	BASEPRI, r3
 80050e6:	f3bf 8f6f 	isb	sy
 80050ea:	f3bf 8f4f 	dsb	sy
 80050ee:	617b      	str	r3, [r7, #20]
}
 80050f0:	bf00      	nop
 80050f2:	bf00      	nop
 80050f4:	e7fd      	b.n	80050f2 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80050f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050f8:	699a      	ldr	r2, [r3, #24]
 80050fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050fc:	18d1      	adds	r1, r2, r3
 80050fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005100:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005102:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005104:	f7ff ff04 	bl	8004f10 <prvInsertTimerInActiveList>
					break;
 8005108:	e017      	b.n	800513a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800510a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800510c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005110:	f003 0302 	and.w	r3, r3, #2
 8005114:	2b00      	cmp	r3, #0
 8005116:	d103      	bne.n	8005120 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8005118:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800511a:	f000 fbe5 	bl	80058e8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800511e:	e00c      	b.n	800513a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005120:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005122:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005126:	f023 0301 	bic.w	r3, r3, #1
 800512a:	b2da      	uxtb	r2, r3
 800512c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800512e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8005132:	e002      	b.n	800513a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8005134:	bf00      	nop
 8005136:	e000      	b.n	800513a <prvProcessReceivedCommands+0x1a6>
					break;
 8005138:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800513a:	4b08      	ldr	r3, [pc, #32]	@ (800515c <prvProcessReceivedCommands+0x1c8>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	1d39      	adds	r1, r7, #4
 8005140:	2200      	movs	r2, #0
 8005142:	4618      	mov	r0, r3
 8005144:	f7fe fbfc 	bl	8003940 <xQueueReceive>
 8005148:	4603      	mov	r3, r0
 800514a:	2b00      	cmp	r3, #0
 800514c:	f47f af26 	bne.w	8004f9c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8005150:	bf00      	nop
 8005152:	bf00      	nop
 8005154:	3730      	adds	r7, #48	@ 0x30
 8005156:	46bd      	mov	sp, r7
 8005158:	bd80      	pop	{r7, pc}
 800515a:	bf00      	nop
 800515c:	20000ce8 	.word	0x20000ce8

08005160 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b088      	sub	sp, #32
 8005164:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005166:	e049      	b.n	80051fc <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005168:	4b2e      	ldr	r3, [pc, #184]	@ (8005224 <prvSwitchTimerLists+0xc4>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	68db      	ldr	r3, [r3, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005172:	4b2c      	ldr	r3, [pc, #176]	@ (8005224 <prvSwitchTimerLists+0xc4>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	68db      	ldr	r3, [r3, #12]
 8005178:	68db      	ldr	r3, [r3, #12]
 800517a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	3304      	adds	r3, #4
 8005180:	4618      	mov	r0, r3
 8005182:	f7fe f909 	bl	8003398 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	6a1b      	ldr	r3, [r3, #32]
 800518a:	68f8      	ldr	r0, [r7, #12]
 800518c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005194:	f003 0304 	and.w	r3, r3, #4
 8005198:	2b00      	cmp	r3, #0
 800519a:	d02f      	beq.n	80051fc <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	699b      	ldr	r3, [r3, #24]
 80051a0:	693a      	ldr	r2, [r7, #16]
 80051a2:	4413      	add	r3, r2
 80051a4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80051a6:	68ba      	ldr	r2, [r7, #8]
 80051a8:	693b      	ldr	r3, [r7, #16]
 80051aa:	429a      	cmp	r2, r3
 80051ac:	d90e      	bls.n	80051cc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	68ba      	ldr	r2, [r7, #8]
 80051b2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	68fa      	ldr	r2, [r7, #12]
 80051b8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80051ba:	4b1a      	ldr	r3, [pc, #104]	@ (8005224 <prvSwitchTimerLists+0xc4>)
 80051bc:	681a      	ldr	r2, [r3, #0]
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	3304      	adds	r3, #4
 80051c2:	4619      	mov	r1, r3
 80051c4:	4610      	mov	r0, r2
 80051c6:	f7fe f8ae 	bl	8003326 <vListInsert>
 80051ca:	e017      	b.n	80051fc <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80051cc:	2300      	movs	r3, #0
 80051ce:	9300      	str	r3, [sp, #0]
 80051d0:	2300      	movs	r3, #0
 80051d2:	693a      	ldr	r2, [r7, #16]
 80051d4:	2100      	movs	r1, #0
 80051d6:	68f8      	ldr	r0, [r7, #12]
 80051d8:	f7ff fd58 	bl	8004c8c <xTimerGenericCommand>
 80051dc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d10b      	bne.n	80051fc <prvSwitchTimerLists+0x9c>
	__asm volatile
 80051e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051e8:	f383 8811 	msr	BASEPRI, r3
 80051ec:	f3bf 8f6f 	isb	sy
 80051f0:	f3bf 8f4f 	dsb	sy
 80051f4:	603b      	str	r3, [r7, #0]
}
 80051f6:	bf00      	nop
 80051f8:	bf00      	nop
 80051fa:	e7fd      	b.n	80051f8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80051fc:	4b09      	ldr	r3, [pc, #36]	@ (8005224 <prvSwitchTimerLists+0xc4>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d1b0      	bne.n	8005168 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005206:	4b07      	ldr	r3, [pc, #28]	@ (8005224 <prvSwitchTimerLists+0xc4>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800520c:	4b06      	ldr	r3, [pc, #24]	@ (8005228 <prvSwitchTimerLists+0xc8>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4a04      	ldr	r2, [pc, #16]	@ (8005224 <prvSwitchTimerLists+0xc4>)
 8005212:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005214:	4a04      	ldr	r2, [pc, #16]	@ (8005228 <prvSwitchTimerLists+0xc8>)
 8005216:	697b      	ldr	r3, [r7, #20]
 8005218:	6013      	str	r3, [r2, #0]
}
 800521a:	bf00      	nop
 800521c:	3718      	adds	r7, #24
 800521e:	46bd      	mov	sp, r7
 8005220:	bd80      	pop	{r7, pc}
 8005222:	bf00      	nop
 8005224:	20000ce0 	.word	0x20000ce0
 8005228:	20000ce4 	.word	0x20000ce4

0800522c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b082      	sub	sp, #8
 8005230:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005232:	f000 f969 	bl	8005508 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005236:	4b15      	ldr	r3, [pc, #84]	@ (800528c <prvCheckForValidListAndQueue+0x60>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d120      	bne.n	8005280 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800523e:	4814      	ldr	r0, [pc, #80]	@ (8005290 <prvCheckForValidListAndQueue+0x64>)
 8005240:	f7fe f820 	bl	8003284 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005244:	4813      	ldr	r0, [pc, #76]	@ (8005294 <prvCheckForValidListAndQueue+0x68>)
 8005246:	f7fe f81d 	bl	8003284 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800524a:	4b13      	ldr	r3, [pc, #76]	@ (8005298 <prvCheckForValidListAndQueue+0x6c>)
 800524c:	4a10      	ldr	r2, [pc, #64]	@ (8005290 <prvCheckForValidListAndQueue+0x64>)
 800524e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005250:	4b12      	ldr	r3, [pc, #72]	@ (800529c <prvCheckForValidListAndQueue+0x70>)
 8005252:	4a10      	ldr	r2, [pc, #64]	@ (8005294 <prvCheckForValidListAndQueue+0x68>)
 8005254:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005256:	2300      	movs	r3, #0
 8005258:	9300      	str	r3, [sp, #0]
 800525a:	4b11      	ldr	r3, [pc, #68]	@ (80052a0 <prvCheckForValidListAndQueue+0x74>)
 800525c:	4a11      	ldr	r2, [pc, #68]	@ (80052a4 <prvCheckForValidListAndQueue+0x78>)
 800525e:	2110      	movs	r1, #16
 8005260:	200a      	movs	r0, #10
 8005262:	f7fe f92d 	bl	80034c0 <xQueueGenericCreateStatic>
 8005266:	4603      	mov	r3, r0
 8005268:	4a08      	ldr	r2, [pc, #32]	@ (800528c <prvCheckForValidListAndQueue+0x60>)
 800526a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800526c:	4b07      	ldr	r3, [pc, #28]	@ (800528c <prvCheckForValidListAndQueue+0x60>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d005      	beq.n	8005280 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005274:	4b05      	ldr	r3, [pc, #20]	@ (800528c <prvCheckForValidListAndQueue+0x60>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	490b      	ldr	r1, [pc, #44]	@ (80052a8 <prvCheckForValidListAndQueue+0x7c>)
 800527a:	4618      	mov	r0, r3
 800527c:	f7fe fd52 	bl	8003d24 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005280:	f000 f974 	bl	800556c <vPortExitCritical>
}
 8005284:	bf00      	nop
 8005286:	46bd      	mov	sp, r7
 8005288:	bd80      	pop	{r7, pc}
 800528a:	bf00      	nop
 800528c:	20000ce8 	.word	0x20000ce8
 8005290:	20000cb8 	.word	0x20000cb8
 8005294:	20000ccc 	.word	0x20000ccc
 8005298:	20000ce0 	.word	0x20000ce0
 800529c:	20000ce4 	.word	0x20000ce4
 80052a0:	20000d94 	.word	0x20000d94
 80052a4:	20000cf4 	.word	0x20000cf4
 80052a8:	08005bd0 	.word	0x08005bd0

080052ac <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80052ac:	b480      	push	{r7}
 80052ae:	b085      	sub	sp, #20
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	60f8      	str	r0, [r7, #12]
 80052b4:	60b9      	str	r1, [r7, #8]
 80052b6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	3b04      	subs	r3, #4
 80052bc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80052c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	3b04      	subs	r3, #4
 80052ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	f023 0201 	bic.w	r2, r3, #1
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	3b04      	subs	r3, #4
 80052da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80052dc:	4a0c      	ldr	r2, [pc, #48]	@ (8005310 <pxPortInitialiseStack+0x64>)
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	3b14      	subs	r3, #20
 80052e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80052e8:	687a      	ldr	r2, [r7, #4]
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	3b04      	subs	r3, #4
 80052f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	f06f 0202 	mvn.w	r2, #2
 80052fa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	3b20      	subs	r3, #32
 8005300:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005302:	68fb      	ldr	r3, [r7, #12]
}
 8005304:	4618      	mov	r0, r3
 8005306:	3714      	adds	r7, #20
 8005308:	46bd      	mov	sp, r7
 800530a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530e:	4770      	bx	lr
 8005310:	08005315 	.word	0x08005315

08005314 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005314:	b480      	push	{r7}
 8005316:	b085      	sub	sp, #20
 8005318:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800531a:	2300      	movs	r3, #0
 800531c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800531e:	4b13      	ldr	r3, [pc, #76]	@ (800536c <prvTaskExitError+0x58>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005326:	d00b      	beq.n	8005340 <prvTaskExitError+0x2c>
	__asm volatile
 8005328:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800532c:	f383 8811 	msr	BASEPRI, r3
 8005330:	f3bf 8f6f 	isb	sy
 8005334:	f3bf 8f4f 	dsb	sy
 8005338:	60fb      	str	r3, [r7, #12]
}
 800533a:	bf00      	nop
 800533c:	bf00      	nop
 800533e:	e7fd      	b.n	800533c <prvTaskExitError+0x28>
	__asm volatile
 8005340:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005344:	f383 8811 	msr	BASEPRI, r3
 8005348:	f3bf 8f6f 	isb	sy
 800534c:	f3bf 8f4f 	dsb	sy
 8005350:	60bb      	str	r3, [r7, #8]
}
 8005352:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005354:	bf00      	nop
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d0fc      	beq.n	8005356 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800535c:	bf00      	nop
 800535e:	bf00      	nop
 8005360:	3714      	adds	r7, #20
 8005362:	46bd      	mov	sp, r7
 8005364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005368:	4770      	bx	lr
 800536a:	bf00      	nop
 800536c:	2000000c 	.word	0x2000000c

08005370 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005370:	4b07      	ldr	r3, [pc, #28]	@ (8005390 <pxCurrentTCBConst2>)
 8005372:	6819      	ldr	r1, [r3, #0]
 8005374:	6808      	ldr	r0, [r1, #0]
 8005376:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800537a:	f380 8809 	msr	PSP, r0
 800537e:	f3bf 8f6f 	isb	sy
 8005382:	f04f 0000 	mov.w	r0, #0
 8005386:	f380 8811 	msr	BASEPRI, r0
 800538a:	4770      	bx	lr
 800538c:	f3af 8000 	nop.w

08005390 <pxCurrentTCBConst2>:
 8005390:	200007b8 	.word	0x200007b8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005394:	bf00      	nop
 8005396:	bf00      	nop

08005398 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005398:	4808      	ldr	r0, [pc, #32]	@ (80053bc <prvPortStartFirstTask+0x24>)
 800539a:	6800      	ldr	r0, [r0, #0]
 800539c:	6800      	ldr	r0, [r0, #0]
 800539e:	f380 8808 	msr	MSP, r0
 80053a2:	f04f 0000 	mov.w	r0, #0
 80053a6:	f380 8814 	msr	CONTROL, r0
 80053aa:	b662      	cpsie	i
 80053ac:	b661      	cpsie	f
 80053ae:	f3bf 8f4f 	dsb	sy
 80053b2:	f3bf 8f6f 	isb	sy
 80053b6:	df00      	svc	0
 80053b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80053ba:	bf00      	nop
 80053bc:	e000ed08 	.word	0xe000ed08

080053c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b086      	sub	sp, #24
 80053c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80053c6:	4b47      	ldr	r3, [pc, #284]	@ (80054e4 <xPortStartScheduler+0x124>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4a47      	ldr	r2, [pc, #284]	@ (80054e8 <xPortStartScheduler+0x128>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d10b      	bne.n	80053e8 <xPortStartScheduler+0x28>
	__asm volatile
 80053d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053d4:	f383 8811 	msr	BASEPRI, r3
 80053d8:	f3bf 8f6f 	isb	sy
 80053dc:	f3bf 8f4f 	dsb	sy
 80053e0:	613b      	str	r3, [r7, #16]
}
 80053e2:	bf00      	nop
 80053e4:	bf00      	nop
 80053e6:	e7fd      	b.n	80053e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80053e8:	4b3e      	ldr	r3, [pc, #248]	@ (80054e4 <xPortStartScheduler+0x124>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4a3f      	ldr	r2, [pc, #252]	@ (80054ec <xPortStartScheduler+0x12c>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d10b      	bne.n	800540a <xPortStartScheduler+0x4a>
	__asm volatile
 80053f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053f6:	f383 8811 	msr	BASEPRI, r3
 80053fa:	f3bf 8f6f 	isb	sy
 80053fe:	f3bf 8f4f 	dsb	sy
 8005402:	60fb      	str	r3, [r7, #12]
}
 8005404:	bf00      	nop
 8005406:	bf00      	nop
 8005408:	e7fd      	b.n	8005406 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800540a:	4b39      	ldr	r3, [pc, #228]	@ (80054f0 <xPortStartScheduler+0x130>)
 800540c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800540e:	697b      	ldr	r3, [r7, #20]
 8005410:	781b      	ldrb	r3, [r3, #0]
 8005412:	b2db      	uxtb	r3, r3
 8005414:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005416:	697b      	ldr	r3, [r7, #20]
 8005418:	22ff      	movs	r2, #255	@ 0xff
 800541a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800541c:	697b      	ldr	r3, [r7, #20]
 800541e:	781b      	ldrb	r3, [r3, #0]
 8005420:	b2db      	uxtb	r3, r3
 8005422:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005424:	78fb      	ldrb	r3, [r7, #3]
 8005426:	b2db      	uxtb	r3, r3
 8005428:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800542c:	b2da      	uxtb	r2, r3
 800542e:	4b31      	ldr	r3, [pc, #196]	@ (80054f4 <xPortStartScheduler+0x134>)
 8005430:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005432:	4b31      	ldr	r3, [pc, #196]	@ (80054f8 <xPortStartScheduler+0x138>)
 8005434:	2207      	movs	r2, #7
 8005436:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005438:	e009      	b.n	800544e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800543a:	4b2f      	ldr	r3, [pc, #188]	@ (80054f8 <xPortStartScheduler+0x138>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	3b01      	subs	r3, #1
 8005440:	4a2d      	ldr	r2, [pc, #180]	@ (80054f8 <xPortStartScheduler+0x138>)
 8005442:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005444:	78fb      	ldrb	r3, [r7, #3]
 8005446:	b2db      	uxtb	r3, r3
 8005448:	005b      	lsls	r3, r3, #1
 800544a:	b2db      	uxtb	r3, r3
 800544c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800544e:	78fb      	ldrb	r3, [r7, #3]
 8005450:	b2db      	uxtb	r3, r3
 8005452:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005456:	2b80      	cmp	r3, #128	@ 0x80
 8005458:	d0ef      	beq.n	800543a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800545a:	4b27      	ldr	r3, [pc, #156]	@ (80054f8 <xPortStartScheduler+0x138>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f1c3 0307 	rsb	r3, r3, #7
 8005462:	2b04      	cmp	r3, #4
 8005464:	d00b      	beq.n	800547e <xPortStartScheduler+0xbe>
	__asm volatile
 8005466:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800546a:	f383 8811 	msr	BASEPRI, r3
 800546e:	f3bf 8f6f 	isb	sy
 8005472:	f3bf 8f4f 	dsb	sy
 8005476:	60bb      	str	r3, [r7, #8]
}
 8005478:	bf00      	nop
 800547a:	bf00      	nop
 800547c:	e7fd      	b.n	800547a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800547e:	4b1e      	ldr	r3, [pc, #120]	@ (80054f8 <xPortStartScheduler+0x138>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	021b      	lsls	r3, r3, #8
 8005484:	4a1c      	ldr	r2, [pc, #112]	@ (80054f8 <xPortStartScheduler+0x138>)
 8005486:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005488:	4b1b      	ldr	r3, [pc, #108]	@ (80054f8 <xPortStartScheduler+0x138>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005490:	4a19      	ldr	r2, [pc, #100]	@ (80054f8 <xPortStartScheduler+0x138>)
 8005492:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	b2da      	uxtb	r2, r3
 8005498:	697b      	ldr	r3, [r7, #20]
 800549a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800549c:	4b17      	ldr	r3, [pc, #92]	@ (80054fc <xPortStartScheduler+0x13c>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a16      	ldr	r2, [pc, #88]	@ (80054fc <xPortStartScheduler+0x13c>)
 80054a2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80054a6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80054a8:	4b14      	ldr	r3, [pc, #80]	@ (80054fc <xPortStartScheduler+0x13c>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4a13      	ldr	r2, [pc, #76]	@ (80054fc <xPortStartScheduler+0x13c>)
 80054ae:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80054b2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80054b4:	f000 f8da 	bl	800566c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80054b8:	4b11      	ldr	r3, [pc, #68]	@ (8005500 <xPortStartScheduler+0x140>)
 80054ba:	2200      	movs	r2, #0
 80054bc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80054be:	f000 f8f9 	bl	80056b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80054c2:	4b10      	ldr	r3, [pc, #64]	@ (8005504 <xPortStartScheduler+0x144>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4a0f      	ldr	r2, [pc, #60]	@ (8005504 <xPortStartScheduler+0x144>)
 80054c8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80054cc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80054ce:	f7ff ff63 	bl	8005398 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80054d2:	f7ff f83f 	bl	8004554 <vTaskSwitchContext>
	prvTaskExitError();
 80054d6:	f7ff ff1d 	bl	8005314 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80054da:	2300      	movs	r3, #0
}
 80054dc:	4618      	mov	r0, r3
 80054de:	3718      	adds	r7, #24
 80054e0:	46bd      	mov	sp, r7
 80054e2:	bd80      	pop	{r7, pc}
 80054e4:	e000ed00 	.word	0xe000ed00
 80054e8:	410fc271 	.word	0x410fc271
 80054ec:	410fc270 	.word	0x410fc270
 80054f0:	e000e400 	.word	0xe000e400
 80054f4:	20000de4 	.word	0x20000de4
 80054f8:	20000de8 	.word	0x20000de8
 80054fc:	e000ed20 	.word	0xe000ed20
 8005500:	2000000c 	.word	0x2000000c
 8005504:	e000ef34 	.word	0xe000ef34

08005508 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005508:	b480      	push	{r7}
 800550a:	b083      	sub	sp, #12
 800550c:	af00      	add	r7, sp, #0
	__asm volatile
 800550e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005512:	f383 8811 	msr	BASEPRI, r3
 8005516:	f3bf 8f6f 	isb	sy
 800551a:	f3bf 8f4f 	dsb	sy
 800551e:	607b      	str	r3, [r7, #4]
}
 8005520:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005522:	4b10      	ldr	r3, [pc, #64]	@ (8005564 <vPortEnterCritical+0x5c>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	3301      	adds	r3, #1
 8005528:	4a0e      	ldr	r2, [pc, #56]	@ (8005564 <vPortEnterCritical+0x5c>)
 800552a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800552c:	4b0d      	ldr	r3, [pc, #52]	@ (8005564 <vPortEnterCritical+0x5c>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	2b01      	cmp	r3, #1
 8005532:	d110      	bne.n	8005556 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005534:	4b0c      	ldr	r3, [pc, #48]	@ (8005568 <vPortEnterCritical+0x60>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	b2db      	uxtb	r3, r3
 800553a:	2b00      	cmp	r3, #0
 800553c:	d00b      	beq.n	8005556 <vPortEnterCritical+0x4e>
	__asm volatile
 800553e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005542:	f383 8811 	msr	BASEPRI, r3
 8005546:	f3bf 8f6f 	isb	sy
 800554a:	f3bf 8f4f 	dsb	sy
 800554e:	603b      	str	r3, [r7, #0]
}
 8005550:	bf00      	nop
 8005552:	bf00      	nop
 8005554:	e7fd      	b.n	8005552 <vPortEnterCritical+0x4a>
	}
}
 8005556:	bf00      	nop
 8005558:	370c      	adds	r7, #12
 800555a:	46bd      	mov	sp, r7
 800555c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005560:	4770      	bx	lr
 8005562:	bf00      	nop
 8005564:	2000000c 	.word	0x2000000c
 8005568:	e000ed04 	.word	0xe000ed04

0800556c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800556c:	b480      	push	{r7}
 800556e:	b083      	sub	sp, #12
 8005570:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005572:	4b12      	ldr	r3, [pc, #72]	@ (80055bc <vPortExitCritical+0x50>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d10b      	bne.n	8005592 <vPortExitCritical+0x26>
	__asm volatile
 800557a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800557e:	f383 8811 	msr	BASEPRI, r3
 8005582:	f3bf 8f6f 	isb	sy
 8005586:	f3bf 8f4f 	dsb	sy
 800558a:	607b      	str	r3, [r7, #4]
}
 800558c:	bf00      	nop
 800558e:	bf00      	nop
 8005590:	e7fd      	b.n	800558e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005592:	4b0a      	ldr	r3, [pc, #40]	@ (80055bc <vPortExitCritical+0x50>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	3b01      	subs	r3, #1
 8005598:	4a08      	ldr	r2, [pc, #32]	@ (80055bc <vPortExitCritical+0x50>)
 800559a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800559c:	4b07      	ldr	r3, [pc, #28]	@ (80055bc <vPortExitCritical+0x50>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d105      	bne.n	80055b0 <vPortExitCritical+0x44>
 80055a4:	2300      	movs	r3, #0
 80055a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	f383 8811 	msr	BASEPRI, r3
}
 80055ae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80055b0:	bf00      	nop
 80055b2:	370c      	adds	r7, #12
 80055b4:	46bd      	mov	sp, r7
 80055b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ba:	4770      	bx	lr
 80055bc:	2000000c 	.word	0x2000000c

080055c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80055c0:	f3ef 8009 	mrs	r0, PSP
 80055c4:	f3bf 8f6f 	isb	sy
 80055c8:	4b15      	ldr	r3, [pc, #84]	@ (8005620 <pxCurrentTCBConst>)
 80055ca:	681a      	ldr	r2, [r3, #0]
 80055cc:	f01e 0f10 	tst.w	lr, #16
 80055d0:	bf08      	it	eq
 80055d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80055d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055da:	6010      	str	r0, [r2, #0]
 80055dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80055e0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80055e4:	f380 8811 	msr	BASEPRI, r0
 80055e8:	f3bf 8f4f 	dsb	sy
 80055ec:	f3bf 8f6f 	isb	sy
 80055f0:	f7fe ffb0 	bl	8004554 <vTaskSwitchContext>
 80055f4:	f04f 0000 	mov.w	r0, #0
 80055f8:	f380 8811 	msr	BASEPRI, r0
 80055fc:	bc09      	pop	{r0, r3}
 80055fe:	6819      	ldr	r1, [r3, #0]
 8005600:	6808      	ldr	r0, [r1, #0]
 8005602:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005606:	f01e 0f10 	tst.w	lr, #16
 800560a:	bf08      	it	eq
 800560c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005610:	f380 8809 	msr	PSP, r0
 8005614:	f3bf 8f6f 	isb	sy
 8005618:	4770      	bx	lr
 800561a:	bf00      	nop
 800561c:	f3af 8000 	nop.w

08005620 <pxCurrentTCBConst>:
 8005620:	200007b8 	.word	0x200007b8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005624:	bf00      	nop
 8005626:	bf00      	nop

08005628 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b082      	sub	sp, #8
 800562c:	af00      	add	r7, sp, #0
	__asm volatile
 800562e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005632:	f383 8811 	msr	BASEPRI, r3
 8005636:	f3bf 8f6f 	isb	sy
 800563a:	f3bf 8f4f 	dsb	sy
 800563e:	607b      	str	r3, [r7, #4]
}
 8005640:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005642:	f7fe fecd 	bl	80043e0 <xTaskIncrementTick>
 8005646:	4603      	mov	r3, r0
 8005648:	2b00      	cmp	r3, #0
 800564a:	d003      	beq.n	8005654 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800564c:	4b06      	ldr	r3, [pc, #24]	@ (8005668 <xPortSysTickHandler+0x40>)
 800564e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005652:	601a      	str	r2, [r3, #0]
 8005654:	2300      	movs	r3, #0
 8005656:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	f383 8811 	msr	BASEPRI, r3
}
 800565e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005660:	bf00      	nop
 8005662:	3708      	adds	r7, #8
 8005664:	46bd      	mov	sp, r7
 8005666:	bd80      	pop	{r7, pc}
 8005668:	e000ed04 	.word	0xe000ed04

0800566c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800566c:	b480      	push	{r7}
 800566e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005670:	4b0b      	ldr	r3, [pc, #44]	@ (80056a0 <vPortSetupTimerInterrupt+0x34>)
 8005672:	2200      	movs	r2, #0
 8005674:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005676:	4b0b      	ldr	r3, [pc, #44]	@ (80056a4 <vPortSetupTimerInterrupt+0x38>)
 8005678:	2200      	movs	r2, #0
 800567a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800567c:	4b0a      	ldr	r3, [pc, #40]	@ (80056a8 <vPortSetupTimerInterrupt+0x3c>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4a0a      	ldr	r2, [pc, #40]	@ (80056ac <vPortSetupTimerInterrupt+0x40>)
 8005682:	fba2 2303 	umull	r2, r3, r2, r3
 8005686:	099b      	lsrs	r3, r3, #6
 8005688:	4a09      	ldr	r2, [pc, #36]	@ (80056b0 <vPortSetupTimerInterrupt+0x44>)
 800568a:	3b01      	subs	r3, #1
 800568c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800568e:	4b04      	ldr	r3, [pc, #16]	@ (80056a0 <vPortSetupTimerInterrupt+0x34>)
 8005690:	2207      	movs	r2, #7
 8005692:	601a      	str	r2, [r3, #0]
}
 8005694:	bf00      	nop
 8005696:	46bd      	mov	sp, r7
 8005698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569c:	4770      	bx	lr
 800569e:	bf00      	nop
 80056a0:	e000e010 	.word	0xe000e010
 80056a4:	e000e018 	.word	0xe000e018
 80056a8:	20000000 	.word	0x20000000
 80056ac:	10624dd3 	.word	0x10624dd3
 80056b0:	e000e014 	.word	0xe000e014

080056b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80056b4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80056c4 <vPortEnableVFP+0x10>
 80056b8:	6801      	ldr	r1, [r0, #0]
 80056ba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80056be:	6001      	str	r1, [r0, #0]
 80056c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80056c2:	bf00      	nop
 80056c4:	e000ed88 	.word	0xe000ed88

080056c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80056c8:	b480      	push	{r7}
 80056ca:	b085      	sub	sp, #20
 80056cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80056ce:	f3ef 8305 	mrs	r3, IPSR
 80056d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	2b0f      	cmp	r3, #15
 80056d8:	d915      	bls.n	8005706 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80056da:	4a18      	ldr	r2, [pc, #96]	@ (800573c <vPortValidateInterruptPriority+0x74>)
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	4413      	add	r3, r2
 80056e0:	781b      	ldrb	r3, [r3, #0]
 80056e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80056e4:	4b16      	ldr	r3, [pc, #88]	@ (8005740 <vPortValidateInterruptPriority+0x78>)
 80056e6:	781b      	ldrb	r3, [r3, #0]
 80056e8:	7afa      	ldrb	r2, [r7, #11]
 80056ea:	429a      	cmp	r2, r3
 80056ec:	d20b      	bcs.n	8005706 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80056ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056f2:	f383 8811 	msr	BASEPRI, r3
 80056f6:	f3bf 8f6f 	isb	sy
 80056fa:	f3bf 8f4f 	dsb	sy
 80056fe:	607b      	str	r3, [r7, #4]
}
 8005700:	bf00      	nop
 8005702:	bf00      	nop
 8005704:	e7fd      	b.n	8005702 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005706:	4b0f      	ldr	r3, [pc, #60]	@ (8005744 <vPortValidateInterruptPriority+0x7c>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800570e:	4b0e      	ldr	r3, [pc, #56]	@ (8005748 <vPortValidateInterruptPriority+0x80>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	429a      	cmp	r2, r3
 8005714:	d90b      	bls.n	800572e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8005716:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800571a:	f383 8811 	msr	BASEPRI, r3
 800571e:	f3bf 8f6f 	isb	sy
 8005722:	f3bf 8f4f 	dsb	sy
 8005726:	603b      	str	r3, [r7, #0]
}
 8005728:	bf00      	nop
 800572a:	bf00      	nop
 800572c:	e7fd      	b.n	800572a <vPortValidateInterruptPriority+0x62>
	}
 800572e:	bf00      	nop
 8005730:	3714      	adds	r7, #20
 8005732:	46bd      	mov	sp, r7
 8005734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005738:	4770      	bx	lr
 800573a:	bf00      	nop
 800573c:	e000e3f0 	.word	0xe000e3f0
 8005740:	20000de4 	.word	0x20000de4
 8005744:	e000ed0c 	.word	0xe000ed0c
 8005748:	20000de8 	.word	0x20000de8

0800574c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b08a      	sub	sp, #40	@ 0x28
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005754:	2300      	movs	r3, #0
 8005756:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005758:	f7fe fd86 	bl	8004268 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800575c:	4b5c      	ldr	r3, [pc, #368]	@ (80058d0 <pvPortMalloc+0x184>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d101      	bne.n	8005768 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005764:	f000 f924 	bl	80059b0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005768:	4b5a      	ldr	r3, [pc, #360]	@ (80058d4 <pvPortMalloc+0x188>)
 800576a:	681a      	ldr	r2, [r3, #0]
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	4013      	ands	r3, r2
 8005770:	2b00      	cmp	r3, #0
 8005772:	f040 8095 	bne.w	80058a0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d01e      	beq.n	80057ba <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800577c:	2208      	movs	r2, #8
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	4413      	add	r3, r2
 8005782:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	f003 0307 	and.w	r3, r3, #7
 800578a:	2b00      	cmp	r3, #0
 800578c:	d015      	beq.n	80057ba <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	f023 0307 	bic.w	r3, r3, #7
 8005794:	3308      	adds	r3, #8
 8005796:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	f003 0307 	and.w	r3, r3, #7
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d00b      	beq.n	80057ba <pvPortMalloc+0x6e>
	__asm volatile
 80057a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057a6:	f383 8811 	msr	BASEPRI, r3
 80057aa:	f3bf 8f6f 	isb	sy
 80057ae:	f3bf 8f4f 	dsb	sy
 80057b2:	617b      	str	r3, [r7, #20]
}
 80057b4:	bf00      	nop
 80057b6:	bf00      	nop
 80057b8:	e7fd      	b.n	80057b6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d06f      	beq.n	80058a0 <pvPortMalloc+0x154>
 80057c0:	4b45      	ldr	r3, [pc, #276]	@ (80058d8 <pvPortMalloc+0x18c>)
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	687a      	ldr	r2, [r7, #4]
 80057c6:	429a      	cmp	r2, r3
 80057c8:	d86a      	bhi.n	80058a0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80057ca:	4b44      	ldr	r3, [pc, #272]	@ (80058dc <pvPortMalloc+0x190>)
 80057cc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80057ce:	4b43      	ldr	r3, [pc, #268]	@ (80058dc <pvPortMalloc+0x190>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80057d4:	e004      	b.n	80057e0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80057d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057d8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80057da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80057e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	687a      	ldr	r2, [r7, #4]
 80057e6:	429a      	cmp	r2, r3
 80057e8:	d903      	bls.n	80057f2 <pvPortMalloc+0xa6>
 80057ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d1f1      	bne.n	80057d6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80057f2:	4b37      	ldr	r3, [pc, #220]	@ (80058d0 <pvPortMalloc+0x184>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057f8:	429a      	cmp	r2, r3
 80057fa:	d051      	beq.n	80058a0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80057fc:	6a3b      	ldr	r3, [r7, #32]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	2208      	movs	r2, #8
 8005802:	4413      	add	r3, r2
 8005804:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005806:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005808:	681a      	ldr	r2, [r3, #0]
 800580a:	6a3b      	ldr	r3, [r7, #32]
 800580c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800580e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005810:	685a      	ldr	r2, [r3, #4]
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	1ad2      	subs	r2, r2, r3
 8005816:	2308      	movs	r3, #8
 8005818:	005b      	lsls	r3, r3, #1
 800581a:	429a      	cmp	r2, r3
 800581c:	d920      	bls.n	8005860 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800581e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	4413      	add	r3, r2
 8005824:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005826:	69bb      	ldr	r3, [r7, #24]
 8005828:	f003 0307 	and.w	r3, r3, #7
 800582c:	2b00      	cmp	r3, #0
 800582e:	d00b      	beq.n	8005848 <pvPortMalloc+0xfc>
	__asm volatile
 8005830:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005834:	f383 8811 	msr	BASEPRI, r3
 8005838:	f3bf 8f6f 	isb	sy
 800583c:	f3bf 8f4f 	dsb	sy
 8005840:	613b      	str	r3, [r7, #16]
}
 8005842:	bf00      	nop
 8005844:	bf00      	nop
 8005846:	e7fd      	b.n	8005844 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800584a:	685a      	ldr	r2, [r3, #4]
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	1ad2      	subs	r2, r2, r3
 8005850:	69bb      	ldr	r3, [r7, #24]
 8005852:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005856:	687a      	ldr	r2, [r7, #4]
 8005858:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800585a:	69b8      	ldr	r0, [r7, #24]
 800585c:	f000 f90a 	bl	8005a74 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005860:	4b1d      	ldr	r3, [pc, #116]	@ (80058d8 <pvPortMalloc+0x18c>)
 8005862:	681a      	ldr	r2, [r3, #0]
 8005864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005866:	685b      	ldr	r3, [r3, #4]
 8005868:	1ad3      	subs	r3, r2, r3
 800586a:	4a1b      	ldr	r2, [pc, #108]	@ (80058d8 <pvPortMalloc+0x18c>)
 800586c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800586e:	4b1a      	ldr	r3, [pc, #104]	@ (80058d8 <pvPortMalloc+0x18c>)
 8005870:	681a      	ldr	r2, [r3, #0]
 8005872:	4b1b      	ldr	r3, [pc, #108]	@ (80058e0 <pvPortMalloc+0x194>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	429a      	cmp	r2, r3
 8005878:	d203      	bcs.n	8005882 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800587a:	4b17      	ldr	r3, [pc, #92]	@ (80058d8 <pvPortMalloc+0x18c>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	4a18      	ldr	r2, [pc, #96]	@ (80058e0 <pvPortMalloc+0x194>)
 8005880:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005884:	685a      	ldr	r2, [r3, #4]
 8005886:	4b13      	ldr	r3, [pc, #76]	@ (80058d4 <pvPortMalloc+0x188>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	431a      	orrs	r2, r3
 800588c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800588e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005892:	2200      	movs	r2, #0
 8005894:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005896:	4b13      	ldr	r3, [pc, #76]	@ (80058e4 <pvPortMalloc+0x198>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	3301      	adds	r3, #1
 800589c:	4a11      	ldr	r2, [pc, #68]	@ (80058e4 <pvPortMalloc+0x198>)
 800589e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80058a0:	f7fe fcf0 	bl	8004284 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80058a4:	69fb      	ldr	r3, [r7, #28]
 80058a6:	f003 0307 	and.w	r3, r3, #7
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d00b      	beq.n	80058c6 <pvPortMalloc+0x17a>
	__asm volatile
 80058ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058b2:	f383 8811 	msr	BASEPRI, r3
 80058b6:	f3bf 8f6f 	isb	sy
 80058ba:	f3bf 8f4f 	dsb	sy
 80058be:	60fb      	str	r3, [r7, #12]
}
 80058c0:	bf00      	nop
 80058c2:	bf00      	nop
 80058c4:	e7fd      	b.n	80058c2 <pvPortMalloc+0x176>
	return pvReturn;
 80058c6:	69fb      	ldr	r3, [r7, #28]
}
 80058c8:	4618      	mov	r0, r3
 80058ca:	3728      	adds	r7, #40	@ 0x28
 80058cc:	46bd      	mov	sp, r7
 80058ce:	bd80      	pop	{r7, pc}
 80058d0:	200019ac 	.word	0x200019ac
 80058d4:	200019c0 	.word	0x200019c0
 80058d8:	200019b0 	.word	0x200019b0
 80058dc:	200019a4 	.word	0x200019a4
 80058e0:	200019b4 	.word	0x200019b4
 80058e4:	200019b8 	.word	0x200019b8

080058e8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b086      	sub	sp, #24
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d04f      	beq.n	800599a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80058fa:	2308      	movs	r3, #8
 80058fc:	425b      	negs	r3, r3
 80058fe:	697a      	ldr	r2, [r7, #20]
 8005900:	4413      	add	r3, r2
 8005902:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005904:	697b      	ldr	r3, [r7, #20]
 8005906:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005908:	693b      	ldr	r3, [r7, #16]
 800590a:	685a      	ldr	r2, [r3, #4]
 800590c:	4b25      	ldr	r3, [pc, #148]	@ (80059a4 <vPortFree+0xbc>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	4013      	ands	r3, r2
 8005912:	2b00      	cmp	r3, #0
 8005914:	d10b      	bne.n	800592e <vPortFree+0x46>
	__asm volatile
 8005916:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800591a:	f383 8811 	msr	BASEPRI, r3
 800591e:	f3bf 8f6f 	isb	sy
 8005922:	f3bf 8f4f 	dsb	sy
 8005926:	60fb      	str	r3, [r7, #12]
}
 8005928:	bf00      	nop
 800592a:	bf00      	nop
 800592c:	e7fd      	b.n	800592a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800592e:	693b      	ldr	r3, [r7, #16]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d00b      	beq.n	800594e <vPortFree+0x66>
	__asm volatile
 8005936:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800593a:	f383 8811 	msr	BASEPRI, r3
 800593e:	f3bf 8f6f 	isb	sy
 8005942:	f3bf 8f4f 	dsb	sy
 8005946:	60bb      	str	r3, [r7, #8]
}
 8005948:	bf00      	nop
 800594a:	bf00      	nop
 800594c:	e7fd      	b.n	800594a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800594e:	693b      	ldr	r3, [r7, #16]
 8005950:	685a      	ldr	r2, [r3, #4]
 8005952:	4b14      	ldr	r3, [pc, #80]	@ (80059a4 <vPortFree+0xbc>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	4013      	ands	r3, r2
 8005958:	2b00      	cmp	r3, #0
 800595a:	d01e      	beq.n	800599a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800595c:	693b      	ldr	r3, [r7, #16]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d11a      	bne.n	800599a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005964:	693b      	ldr	r3, [r7, #16]
 8005966:	685a      	ldr	r2, [r3, #4]
 8005968:	4b0e      	ldr	r3, [pc, #56]	@ (80059a4 <vPortFree+0xbc>)
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	43db      	mvns	r3, r3
 800596e:	401a      	ands	r2, r3
 8005970:	693b      	ldr	r3, [r7, #16]
 8005972:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005974:	f7fe fc78 	bl	8004268 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005978:	693b      	ldr	r3, [r7, #16]
 800597a:	685a      	ldr	r2, [r3, #4]
 800597c:	4b0a      	ldr	r3, [pc, #40]	@ (80059a8 <vPortFree+0xc0>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4413      	add	r3, r2
 8005982:	4a09      	ldr	r2, [pc, #36]	@ (80059a8 <vPortFree+0xc0>)
 8005984:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005986:	6938      	ldr	r0, [r7, #16]
 8005988:	f000 f874 	bl	8005a74 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800598c:	4b07      	ldr	r3, [pc, #28]	@ (80059ac <vPortFree+0xc4>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	3301      	adds	r3, #1
 8005992:	4a06      	ldr	r2, [pc, #24]	@ (80059ac <vPortFree+0xc4>)
 8005994:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005996:	f7fe fc75 	bl	8004284 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800599a:	bf00      	nop
 800599c:	3718      	adds	r7, #24
 800599e:	46bd      	mov	sp, r7
 80059a0:	bd80      	pop	{r7, pc}
 80059a2:	bf00      	nop
 80059a4:	200019c0 	.word	0x200019c0
 80059a8:	200019b0 	.word	0x200019b0
 80059ac:	200019bc 	.word	0x200019bc

080059b0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80059b0:	b480      	push	{r7}
 80059b2:	b085      	sub	sp, #20
 80059b4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80059b6:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 80059ba:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80059bc:	4b27      	ldr	r3, [pc, #156]	@ (8005a5c <prvHeapInit+0xac>)
 80059be:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	f003 0307 	and.w	r3, r3, #7
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d00c      	beq.n	80059e4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	3307      	adds	r3, #7
 80059ce:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	f023 0307 	bic.w	r3, r3, #7
 80059d6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80059d8:	68ba      	ldr	r2, [r7, #8]
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	1ad3      	subs	r3, r2, r3
 80059de:	4a1f      	ldr	r2, [pc, #124]	@ (8005a5c <prvHeapInit+0xac>)
 80059e0:	4413      	add	r3, r2
 80059e2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80059e8:	4a1d      	ldr	r2, [pc, #116]	@ (8005a60 <prvHeapInit+0xb0>)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80059ee:	4b1c      	ldr	r3, [pc, #112]	@ (8005a60 <prvHeapInit+0xb0>)
 80059f0:	2200      	movs	r2, #0
 80059f2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	68ba      	ldr	r2, [r7, #8]
 80059f8:	4413      	add	r3, r2
 80059fa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80059fc:	2208      	movs	r2, #8
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	1a9b      	subs	r3, r3, r2
 8005a02:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	f023 0307 	bic.w	r3, r3, #7
 8005a0a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	4a15      	ldr	r2, [pc, #84]	@ (8005a64 <prvHeapInit+0xb4>)
 8005a10:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005a12:	4b14      	ldr	r3, [pc, #80]	@ (8005a64 <prvHeapInit+0xb4>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	2200      	movs	r2, #0
 8005a18:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005a1a:	4b12      	ldr	r3, [pc, #72]	@ (8005a64 <prvHeapInit+0xb4>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	2200      	movs	r2, #0
 8005a20:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	68fa      	ldr	r2, [r7, #12]
 8005a2a:	1ad2      	subs	r2, r2, r3
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005a30:	4b0c      	ldr	r3, [pc, #48]	@ (8005a64 <prvHeapInit+0xb4>)
 8005a32:	681a      	ldr	r2, [r3, #0]
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	685b      	ldr	r3, [r3, #4]
 8005a3c:	4a0a      	ldr	r2, [pc, #40]	@ (8005a68 <prvHeapInit+0xb8>)
 8005a3e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	685b      	ldr	r3, [r3, #4]
 8005a44:	4a09      	ldr	r2, [pc, #36]	@ (8005a6c <prvHeapInit+0xbc>)
 8005a46:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005a48:	4b09      	ldr	r3, [pc, #36]	@ (8005a70 <prvHeapInit+0xc0>)
 8005a4a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8005a4e:	601a      	str	r2, [r3, #0]
}
 8005a50:	bf00      	nop
 8005a52:	3714      	adds	r7, #20
 8005a54:	46bd      	mov	sp, r7
 8005a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5a:	4770      	bx	lr
 8005a5c:	20000dec 	.word	0x20000dec
 8005a60:	200019a4 	.word	0x200019a4
 8005a64:	200019ac 	.word	0x200019ac
 8005a68:	200019b4 	.word	0x200019b4
 8005a6c:	200019b0 	.word	0x200019b0
 8005a70:	200019c0 	.word	0x200019c0

08005a74 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005a74:	b480      	push	{r7}
 8005a76:	b085      	sub	sp, #20
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005a7c:	4b28      	ldr	r3, [pc, #160]	@ (8005b20 <prvInsertBlockIntoFreeList+0xac>)
 8005a7e:	60fb      	str	r3, [r7, #12]
 8005a80:	e002      	b.n	8005a88 <prvInsertBlockIntoFreeList+0x14>
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	60fb      	str	r3, [r7, #12]
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	687a      	ldr	r2, [r7, #4]
 8005a8e:	429a      	cmp	r2, r3
 8005a90:	d8f7      	bhi.n	8005a82 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	685b      	ldr	r3, [r3, #4]
 8005a9a:	68ba      	ldr	r2, [r7, #8]
 8005a9c:	4413      	add	r3, r2
 8005a9e:	687a      	ldr	r2, [r7, #4]
 8005aa0:	429a      	cmp	r2, r3
 8005aa2:	d108      	bne.n	8005ab6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	685a      	ldr	r2, [r3, #4]
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	685b      	ldr	r3, [r3, #4]
 8005aac:	441a      	add	r2, r3
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	685b      	ldr	r3, [r3, #4]
 8005abe:	68ba      	ldr	r2, [r7, #8]
 8005ac0:	441a      	add	r2, r3
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	429a      	cmp	r2, r3
 8005ac8:	d118      	bne.n	8005afc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681a      	ldr	r2, [r3, #0]
 8005ace:	4b15      	ldr	r3, [pc, #84]	@ (8005b24 <prvInsertBlockIntoFreeList+0xb0>)
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	429a      	cmp	r2, r3
 8005ad4:	d00d      	beq.n	8005af2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	685a      	ldr	r2, [r3, #4]
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	685b      	ldr	r3, [r3, #4]
 8005ae0:	441a      	add	r2, r3
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	681a      	ldr	r2, [r3, #0]
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	601a      	str	r2, [r3, #0]
 8005af0:	e008      	b.n	8005b04 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005af2:	4b0c      	ldr	r3, [pc, #48]	@ (8005b24 <prvInsertBlockIntoFreeList+0xb0>)
 8005af4:	681a      	ldr	r2, [r3, #0]
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	601a      	str	r2, [r3, #0]
 8005afa:	e003      	b.n	8005b04 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681a      	ldr	r2, [r3, #0]
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005b04:	68fa      	ldr	r2, [r7, #12]
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	429a      	cmp	r2, r3
 8005b0a:	d002      	beq.n	8005b12 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	687a      	ldr	r2, [r7, #4]
 8005b10:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005b12:	bf00      	nop
 8005b14:	3714      	adds	r7, #20
 8005b16:	46bd      	mov	sp, r7
 8005b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1c:	4770      	bx	lr
 8005b1e:	bf00      	nop
 8005b20:	200019a4 	.word	0x200019a4
 8005b24:	200019ac 	.word	0x200019ac

08005b28 <memset>:
 8005b28:	4402      	add	r2, r0
 8005b2a:	4603      	mov	r3, r0
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d100      	bne.n	8005b32 <memset+0xa>
 8005b30:	4770      	bx	lr
 8005b32:	f803 1b01 	strb.w	r1, [r3], #1
 8005b36:	e7f9      	b.n	8005b2c <memset+0x4>

08005b38 <__libc_init_array>:
 8005b38:	b570      	push	{r4, r5, r6, lr}
 8005b3a:	4d0d      	ldr	r5, [pc, #52]	@ (8005b70 <__libc_init_array+0x38>)
 8005b3c:	4c0d      	ldr	r4, [pc, #52]	@ (8005b74 <__libc_init_array+0x3c>)
 8005b3e:	1b64      	subs	r4, r4, r5
 8005b40:	10a4      	asrs	r4, r4, #2
 8005b42:	2600      	movs	r6, #0
 8005b44:	42a6      	cmp	r6, r4
 8005b46:	d109      	bne.n	8005b5c <__libc_init_array+0x24>
 8005b48:	4d0b      	ldr	r5, [pc, #44]	@ (8005b78 <__libc_init_array+0x40>)
 8005b4a:	4c0c      	ldr	r4, [pc, #48]	@ (8005b7c <__libc_init_array+0x44>)
 8005b4c:	f000 f826 	bl	8005b9c <_init>
 8005b50:	1b64      	subs	r4, r4, r5
 8005b52:	10a4      	asrs	r4, r4, #2
 8005b54:	2600      	movs	r6, #0
 8005b56:	42a6      	cmp	r6, r4
 8005b58:	d105      	bne.n	8005b66 <__libc_init_array+0x2e>
 8005b5a:	bd70      	pop	{r4, r5, r6, pc}
 8005b5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b60:	4798      	blx	r3
 8005b62:	3601      	adds	r6, #1
 8005b64:	e7ee      	b.n	8005b44 <__libc_init_array+0xc>
 8005b66:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b6a:	4798      	blx	r3
 8005b6c:	3601      	adds	r6, #1
 8005b6e:	e7f2      	b.n	8005b56 <__libc_init_array+0x1e>
 8005b70:	08005c4c 	.word	0x08005c4c
 8005b74:	08005c4c 	.word	0x08005c4c
 8005b78:	08005c4c 	.word	0x08005c4c
 8005b7c:	08005c50 	.word	0x08005c50

08005b80 <memcpy>:
 8005b80:	440a      	add	r2, r1
 8005b82:	4291      	cmp	r1, r2
 8005b84:	f100 33ff 	add.w	r3, r0, #4294967295
 8005b88:	d100      	bne.n	8005b8c <memcpy+0xc>
 8005b8a:	4770      	bx	lr
 8005b8c:	b510      	push	{r4, lr}
 8005b8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005b92:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005b96:	4291      	cmp	r1, r2
 8005b98:	d1f9      	bne.n	8005b8e <memcpy+0xe>
 8005b9a:	bd10      	pop	{r4, pc}

08005b9c <_init>:
 8005b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b9e:	bf00      	nop
 8005ba0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ba2:	bc08      	pop	{r3}
 8005ba4:	469e      	mov	lr, r3
 8005ba6:	4770      	bx	lr

08005ba8 <_fini>:
 8005ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005baa:	bf00      	nop
 8005bac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bae:	bc08      	pop	{r3}
 8005bb0:	469e      	mov	lr, r3
 8005bb2:	4770      	bx	lr
