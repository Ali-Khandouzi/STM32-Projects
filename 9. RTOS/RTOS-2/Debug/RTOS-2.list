
RTOS-2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b84  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  08005d14  08005d14  00006d14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005de4  08005de4  00007010  2**0
                  CONTENTS
  4 .ARM          00000008  08005de4  08005de4  00006de4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005dec  08005dec  00007010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005dec  08005dec  00006dec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005df0  08005df0  00006df0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08005df4  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000019b8  20000010  08005e04  00007010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200019c8  08005e04  000079c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001404f  00000000  00000000  00007040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c9f  00000000  00000000  0001b08f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010c0  00000000  00000000  0001dd30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cde  00000000  00000000  0001edf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000033db  00000000  00000000  0001face  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012b78  00000000  00000000  00022ea9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f16d3  00000000  00000000  00035a21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001270f4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000452c  00000000  00000000  00127138  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  0012b664  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005cfc 	.word	0x08005cfc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08005cfc 	.word	0x08005cfc

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b96a 	b.w	80004bc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	460c      	mov	r4, r1
 8000208:	2b00      	cmp	r3, #0
 800020a:	d14e      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020c:	4694      	mov	ip, r2
 800020e:	458c      	cmp	ip, r1
 8000210:	4686      	mov	lr, r0
 8000212:	fab2 f282 	clz	r2, r2
 8000216:	d962      	bls.n	80002de <__udivmoddi4+0xde>
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0320 	rsb	r3, r2, #32
 800021e:	4091      	lsls	r1, r2
 8000220:	fa20 f303 	lsr.w	r3, r0, r3
 8000224:	fa0c fc02 	lsl.w	ip, ip, r2
 8000228:	4319      	orrs	r1, r3
 800022a:	fa00 fe02 	lsl.w	lr, r0, r2
 800022e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000232:	fa1f f68c 	uxth.w	r6, ip
 8000236:	fbb1 f4f7 	udiv	r4, r1, r7
 800023a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800023e:	fb07 1114 	mls	r1, r7, r4, r1
 8000242:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000246:	fb04 f106 	mul.w	r1, r4, r6
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f104 30ff 	add.w	r0, r4, #4294967295
 8000256:	f080 8112 	bcs.w	800047e <__udivmoddi4+0x27e>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 810f 	bls.w	800047e <__udivmoddi4+0x27e>
 8000260:	3c02      	subs	r4, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a59      	subs	r1, r3, r1
 8000266:	fa1f f38e 	uxth.w	r3, lr
 800026a:	fbb1 f0f7 	udiv	r0, r1, r7
 800026e:	fb07 1110 	mls	r1, r7, r0, r1
 8000272:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000276:	fb00 f606 	mul.w	r6, r0, r6
 800027a:	429e      	cmp	r6, r3
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x94>
 800027e:	eb1c 0303 	adds.w	r3, ip, r3
 8000282:	f100 31ff 	add.w	r1, r0, #4294967295
 8000286:	f080 80fc 	bcs.w	8000482 <__udivmoddi4+0x282>
 800028a:	429e      	cmp	r6, r3
 800028c:	f240 80f9 	bls.w	8000482 <__udivmoddi4+0x282>
 8000290:	4463      	add	r3, ip
 8000292:	3802      	subs	r0, #2
 8000294:	1b9b      	subs	r3, r3, r6
 8000296:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029a:	2100      	movs	r1, #0
 800029c:	b11d      	cbz	r5, 80002a6 <__udivmoddi4+0xa6>
 800029e:	40d3      	lsrs	r3, r2
 80002a0:	2200      	movs	r2, #0
 80002a2:	e9c5 3200 	strd	r3, r2, [r5]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d905      	bls.n	80002ba <__udivmoddi4+0xba>
 80002ae:	b10d      	cbz	r5, 80002b4 <__udivmoddi4+0xb4>
 80002b0:	e9c5 0100 	strd	r0, r1, [r5]
 80002b4:	2100      	movs	r1, #0
 80002b6:	4608      	mov	r0, r1
 80002b8:	e7f5      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002ba:	fab3 f183 	clz	r1, r3
 80002be:	2900      	cmp	r1, #0
 80002c0:	d146      	bne.n	8000350 <__udivmoddi4+0x150>
 80002c2:	42a3      	cmp	r3, r4
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xcc>
 80002c6:	4290      	cmp	r0, r2
 80002c8:	f0c0 80f0 	bcc.w	80004ac <__udivmoddi4+0x2ac>
 80002cc:	1a86      	subs	r6, r0, r2
 80002ce:	eb64 0303 	sbc.w	r3, r4, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	2d00      	cmp	r5, #0
 80002d6:	d0e6      	beq.n	80002a6 <__udivmoddi4+0xa6>
 80002d8:	e9c5 6300 	strd	r6, r3, [r5]
 80002dc:	e7e3      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002de:	2a00      	cmp	r2, #0
 80002e0:	f040 8090 	bne.w	8000404 <__udivmoddi4+0x204>
 80002e4:	eba1 040c 	sub.w	r4, r1, ip
 80002e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002ec:	fa1f f78c 	uxth.w	r7, ip
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb4 f6f8 	udiv	r6, r4, r8
 80002f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fa:	fb08 4416 	mls	r4, r8, r6, r4
 80002fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000302:	fb07 f006 	mul.w	r0, r7, r6
 8000306:	4298      	cmp	r0, r3
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x11c>
 800030a:	eb1c 0303 	adds.w	r3, ip, r3
 800030e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x11a>
 8000314:	4298      	cmp	r0, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 800031a:	4626      	mov	r6, r4
 800031c:	1a1c      	subs	r4, r3, r0
 800031e:	fa1f f38e 	uxth.w	r3, lr
 8000322:	fbb4 f0f8 	udiv	r0, r4, r8
 8000326:	fb08 4410 	mls	r4, r8, r0, r4
 800032a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032e:	fb00 f707 	mul.w	r7, r0, r7
 8000332:	429f      	cmp	r7, r3
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x148>
 8000336:	eb1c 0303 	adds.w	r3, ip, r3
 800033a:	f100 34ff 	add.w	r4, r0, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x146>
 8000340:	429f      	cmp	r7, r3
 8000342:	f200 80b0 	bhi.w	80004a6 <__udivmoddi4+0x2a6>
 8000346:	4620      	mov	r0, r4
 8000348:	1bdb      	subs	r3, r3, r7
 800034a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800034e:	e7a5      	b.n	800029c <__udivmoddi4+0x9c>
 8000350:	f1c1 0620 	rsb	r6, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 f706 	lsr.w	r7, r2, r6
 800035a:	431f      	orrs	r7, r3
 800035c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000360:	fa04 f301 	lsl.w	r3, r4, r1
 8000364:	ea43 030c 	orr.w	r3, r3, ip
 8000368:	40f4      	lsrs	r4, r6
 800036a:	fa00 f801 	lsl.w	r8, r0, r1
 800036e:	0c38      	lsrs	r0, r7, #16
 8000370:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000374:	fbb4 fef0 	udiv	lr, r4, r0
 8000378:	fa1f fc87 	uxth.w	ip, r7
 800037c:	fb00 441e 	mls	r4, r0, lr, r4
 8000380:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000384:	fb0e f90c 	mul.w	r9, lr, ip
 8000388:	45a1      	cmp	r9, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	d90a      	bls.n	80003a6 <__udivmoddi4+0x1a6>
 8000390:	193c      	adds	r4, r7, r4
 8000392:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000396:	f080 8084 	bcs.w	80004a2 <__udivmoddi4+0x2a2>
 800039a:	45a1      	cmp	r9, r4
 800039c:	f240 8081 	bls.w	80004a2 <__udivmoddi4+0x2a2>
 80003a0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a4:	443c      	add	r4, r7
 80003a6:	eba4 0409 	sub.w	r4, r4, r9
 80003aa:	fa1f f983 	uxth.w	r9, r3
 80003ae:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b2:	fb00 4413 	mls	r4, r0, r3, r4
 80003b6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ba:	fb03 fc0c 	mul.w	ip, r3, ip
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d907      	bls.n	80003d2 <__udivmoddi4+0x1d2>
 80003c2:	193c      	adds	r4, r7, r4
 80003c4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c8:	d267      	bcs.n	800049a <__udivmoddi4+0x29a>
 80003ca:	45a4      	cmp	ip, r4
 80003cc:	d965      	bls.n	800049a <__udivmoddi4+0x29a>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003d6:	fba0 9302 	umull	r9, r3, r0, r2
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	429c      	cmp	r4, r3
 80003e0:	46ce      	mov	lr, r9
 80003e2:	469c      	mov	ip, r3
 80003e4:	d351      	bcc.n	800048a <__udivmoddi4+0x28a>
 80003e6:	d04e      	beq.n	8000486 <__udivmoddi4+0x286>
 80003e8:	b155      	cbz	r5, 8000400 <__udivmoddi4+0x200>
 80003ea:	ebb8 030e 	subs.w	r3, r8, lr
 80003ee:	eb64 040c 	sbc.w	r4, r4, ip
 80003f2:	fa04 f606 	lsl.w	r6, r4, r6
 80003f6:	40cb      	lsrs	r3, r1
 80003f8:	431e      	orrs	r6, r3
 80003fa:	40cc      	lsrs	r4, r1
 80003fc:	e9c5 6400 	strd	r6, r4, [r5]
 8000400:	2100      	movs	r1, #0
 8000402:	e750      	b.n	80002a6 <__udivmoddi4+0xa6>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f103 	lsr.w	r1, r0, r3
 800040c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000410:	fa24 f303 	lsr.w	r3, r4, r3
 8000414:	4094      	lsls	r4, r2
 8000416:	430c      	orrs	r4, r1
 8000418:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800041c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000420:	fa1f f78c 	uxth.w	r7, ip
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3110 	mls	r1, r8, r0, r3
 800042c:	0c23      	lsrs	r3, r4, #16
 800042e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000432:	fb00 f107 	mul.w	r1, r0, r7
 8000436:	4299      	cmp	r1, r3
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x24c>
 800043a:	eb1c 0303 	adds.w	r3, ip, r3
 800043e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000442:	d22c      	bcs.n	800049e <__udivmoddi4+0x29e>
 8000444:	4299      	cmp	r1, r3
 8000446:	d92a      	bls.n	800049e <__udivmoddi4+0x29e>
 8000448:	3802      	subs	r0, #2
 800044a:	4463      	add	r3, ip
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb3 f1f8 	udiv	r1, r3, r8
 8000454:	fb08 3311 	mls	r3, r8, r1, r3
 8000458:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800045c:	fb01 f307 	mul.w	r3, r1, r7
 8000460:	42a3      	cmp	r3, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x276>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f101 36ff 	add.w	r6, r1, #4294967295
 800046c:	d213      	bcs.n	8000496 <__udivmoddi4+0x296>
 800046e:	42a3      	cmp	r3, r4
 8000470:	d911      	bls.n	8000496 <__udivmoddi4+0x296>
 8000472:	3902      	subs	r1, #2
 8000474:	4464      	add	r4, ip
 8000476:	1ae4      	subs	r4, r4, r3
 8000478:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800047c:	e739      	b.n	80002f2 <__udivmoddi4+0xf2>
 800047e:	4604      	mov	r4, r0
 8000480:	e6f0      	b.n	8000264 <__udivmoddi4+0x64>
 8000482:	4608      	mov	r0, r1
 8000484:	e706      	b.n	8000294 <__udivmoddi4+0x94>
 8000486:	45c8      	cmp	r8, r9
 8000488:	d2ae      	bcs.n	80003e8 <__udivmoddi4+0x1e8>
 800048a:	ebb9 0e02 	subs.w	lr, r9, r2
 800048e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000492:	3801      	subs	r0, #1
 8000494:	e7a8      	b.n	80003e8 <__udivmoddi4+0x1e8>
 8000496:	4631      	mov	r1, r6
 8000498:	e7ed      	b.n	8000476 <__udivmoddi4+0x276>
 800049a:	4603      	mov	r3, r0
 800049c:	e799      	b.n	80003d2 <__udivmoddi4+0x1d2>
 800049e:	4630      	mov	r0, r6
 80004a0:	e7d4      	b.n	800044c <__udivmoddi4+0x24c>
 80004a2:	46d6      	mov	lr, sl
 80004a4:	e77f      	b.n	80003a6 <__udivmoddi4+0x1a6>
 80004a6:	4463      	add	r3, ip
 80004a8:	3802      	subs	r0, #2
 80004aa:	e74d      	b.n	8000348 <__udivmoddi4+0x148>
 80004ac:	4606      	mov	r6, r0
 80004ae:	4623      	mov	r3, r4
 80004b0:	4608      	mov	r0, r1
 80004b2:	e70f      	b.n	80002d4 <__udivmoddi4+0xd4>
 80004b4:	3e02      	subs	r6, #2
 80004b6:	4463      	add	r3, ip
 80004b8:	e730      	b.n	800031c <__udivmoddi4+0x11c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
  /* MCU Configuration--------------------------------------------------------*/
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c4:	f000 fa1e 	bl	8000904 <HAL_Init>
  /* Configure the system clock */
  SystemClock_Config();
 80004c8:	f000 f846 	bl	8000558 <SystemClock_Config>
  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004cc:	f000 f8c6 	bl	800065c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004d0:	f000 f894 	bl	80005fc <MX_USART2_UART_Init>
  /* Init scheduler */
  osKernelInitialize();
 80004d4:	f002 fe54 	bl	8003180 <osKernelInitialize>
  /* Create the thread(s) */
  /* creation of blinkThreadID */
  blinkThreadID = osThreadNew(blinkThread, NULL, &blinkThread_attr);
 80004d8:	4a09      	ldr	r2, [pc, #36]	@ (8000500 <main+0x40>)
 80004da:	2100      	movs	r1, #0
 80004dc:	4809      	ldr	r0, [pc, #36]	@ (8000504 <main+0x44>)
 80004de:	f002 fe99 	bl	8003214 <osThreadNew>
 80004e2:	4603      	mov	r3, r0
 80004e4:	4a08      	ldr	r2, [pc, #32]	@ (8000508 <main+0x48>)
 80004e6:	6013      	str	r3, [r2, #0]
  /* Creation of UARTThread */
  UARTThreadID = osThreadNew(UARTThread, NULL, &UARTThread_attr);
 80004e8:	4a08      	ldr	r2, [pc, #32]	@ (800050c <main+0x4c>)
 80004ea:	2100      	movs	r1, #0
 80004ec:	4808      	ldr	r0, [pc, #32]	@ (8000510 <main+0x50>)
 80004ee:	f002 fe91 	bl	8003214 <osThreadNew>
 80004f2:	4603      	mov	r3, r0
 80004f4:	4a07      	ldr	r2, [pc, #28]	@ (8000514 <main+0x54>)
 80004f6:	6013      	str	r3, [r2, #0]
  /* Start scheduler */
  osKernelStart();
 80004f8:	f002 fe66 	bl	80031c8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  while (1);
 80004fc:	bf00      	nop
 80004fe:	e7fd      	b.n	80004fc <main+0x3c>
 8000500:	08005d54 	.word	0x08005d54
 8000504:	08000519 	.word	0x08000519
 8000508:	200000b4 	.word	0x200000b4
 800050c:	08005d78 	.word	0x08005d78
 8000510:	08000539 	.word	0x08000539
 8000514:	200000b8 	.word	0x200000b8

08000518 <blinkThread>:
}

void blinkThread(void *argument) {
 8000518:	b580      	push	{r7, lr}
 800051a:	b082      	sub	sp, #8
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
	while(1) {
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000520:	2120      	movs	r1, #32
 8000522:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000526:	f000 fd11 	bl	8000f4c <HAL_GPIO_TogglePin>
		osDelay(500);
 800052a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800052e:	f002 ff03 	bl	8003338 <osDelay>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000532:	bf00      	nop
 8000534:	e7f4      	b.n	8000520 <blinkThread+0x8>
	...

08000538 <UARTThread>:
	}
}

void UARTThread(void *argument) {
 8000538:	b580      	push	{r7, lr}
 800053a:	b082      	sub	sp, #8
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
  while(1) {
    HAL_UART_Transmit(&huart2, (uint8_t *)"UARTThread\r\n", strlen("UARTThread\r\n"), HAL_MAX_DELAY);
 8000540:	f04f 33ff 	mov.w	r3, #4294967295
 8000544:	220c      	movs	r2, #12
 8000546:	4902      	ldr	r1, [pc, #8]	@ (8000550 <UARTThread+0x18>)
 8000548:	4802      	ldr	r0, [pc, #8]	@ (8000554 <UARTThread+0x1c>)
 800054a:	f002 f887 	bl	800265c <HAL_UART_Transmit>
 800054e:	e7f7      	b.n	8000540 <UARTThread+0x8>
 8000550:	08005d2c 	.word	0x08005d2c
 8000554:	2000002c 	.word	0x2000002c

08000558 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b096      	sub	sp, #88	@ 0x58
 800055c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800055e:	f107 0314 	add.w	r3, r7, #20
 8000562:	2244      	movs	r2, #68	@ 0x44
 8000564:	2100      	movs	r1, #0
 8000566:	4618      	mov	r0, r3
 8000568:	f005 fb8e 	bl	8005c88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800056c:	463b      	mov	r3, r7
 800056e:	2200      	movs	r2, #0
 8000570:	601a      	str	r2, [r3, #0]
 8000572:	605a      	str	r2, [r3, #4]
 8000574:	609a      	str	r2, [r3, #8]
 8000576:	60da      	str	r2, [r3, #12]
 8000578:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800057a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800057e:	f000 fd0d 	bl	8000f9c <HAL_PWREx_ControlVoltageScaling>
 8000582:	4603      	mov	r3, r0
 8000584:	2b00      	cmp	r3, #0
 8000586:	d001      	beq.n	800058c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000588:	f000 f8ce 	bl	8000728 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800058c:	2302      	movs	r3, #2
 800058e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000590:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000594:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000596:	2310      	movs	r3, #16
 8000598:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800059a:	2302      	movs	r3, #2
 800059c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800059e:	2302      	movs	r3, #2
 80005a0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80005a2:	2301      	movs	r3, #1
 80005a4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80005a6:	230a      	movs	r3, #10
 80005a8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80005aa:	2307      	movs	r3, #7
 80005ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005ae:	2302      	movs	r3, #2
 80005b0:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005b2:	2302      	movs	r3, #2
 80005b4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005b6:	f107 0314 	add.w	r3, r7, #20
 80005ba:	4618      	mov	r0, r3
 80005bc:	f000 fd44 	bl	8001048 <HAL_RCC_OscConfig>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d001      	beq.n	80005ca <SystemClock_Config+0x72>
  {
    Error_Handler();
 80005c6:	f000 f8af 	bl	8000728 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ca:	230f      	movs	r3, #15
 80005cc:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ce:	2303      	movs	r3, #3
 80005d0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005d2:	2300      	movs	r3, #0
 80005d4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005d6:	2300      	movs	r3, #0
 80005d8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005da:	2300      	movs	r3, #0
 80005dc:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005de:	463b      	mov	r3, r7
 80005e0:	2104      	movs	r1, #4
 80005e2:	4618      	mov	r0, r3
 80005e4:	f001 f90c 	bl	8001800 <HAL_RCC_ClockConfig>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d001      	beq.n	80005f2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80005ee:	f000 f89b 	bl	8000728 <Error_Handler>
  }
}
 80005f2:	bf00      	nop
 80005f4:	3758      	adds	r7, #88	@ 0x58
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}
	...

080005fc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000600:	4b14      	ldr	r3, [pc, #80]	@ (8000654 <MX_USART2_UART_Init+0x58>)
 8000602:	4a15      	ldr	r2, [pc, #84]	@ (8000658 <MX_USART2_UART_Init+0x5c>)
 8000604:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000606:	4b13      	ldr	r3, [pc, #76]	@ (8000654 <MX_USART2_UART_Init+0x58>)
 8000608:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800060c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800060e:	4b11      	ldr	r3, [pc, #68]	@ (8000654 <MX_USART2_UART_Init+0x58>)
 8000610:	2200      	movs	r2, #0
 8000612:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000614:	4b0f      	ldr	r3, [pc, #60]	@ (8000654 <MX_USART2_UART_Init+0x58>)
 8000616:	2200      	movs	r2, #0
 8000618:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800061a:	4b0e      	ldr	r3, [pc, #56]	@ (8000654 <MX_USART2_UART_Init+0x58>)
 800061c:	2200      	movs	r2, #0
 800061e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000620:	4b0c      	ldr	r3, [pc, #48]	@ (8000654 <MX_USART2_UART_Init+0x58>)
 8000622:	220c      	movs	r2, #12
 8000624:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000626:	4b0b      	ldr	r3, [pc, #44]	@ (8000654 <MX_USART2_UART_Init+0x58>)
 8000628:	2200      	movs	r2, #0
 800062a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800062c:	4b09      	ldr	r3, [pc, #36]	@ (8000654 <MX_USART2_UART_Init+0x58>)
 800062e:	2200      	movs	r2, #0
 8000630:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000632:	4b08      	ldr	r3, [pc, #32]	@ (8000654 <MX_USART2_UART_Init+0x58>)
 8000634:	2200      	movs	r2, #0
 8000636:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000638:	4b06      	ldr	r3, [pc, #24]	@ (8000654 <MX_USART2_UART_Init+0x58>)
 800063a:	2200      	movs	r2, #0
 800063c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800063e:	4805      	ldr	r0, [pc, #20]	@ (8000654 <MX_USART2_UART_Init+0x58>)
 8000640:	f001 ffbe 	bl	80025c0 <HAL_UART_Init>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d001      	beq.n	800064e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800064a:	f000 f86d 	bl	8000728 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800064e:	bf00      	nop
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	2000002c 	.word	0x2000002c
 8000658:	40004400 	.word	0x40004400

0800065c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b08a      	sub	sp, #40	@ 0x28
 8000660:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000662:	f107 0314 	add.w	r3, r7, #20
 8000666:	2200      	movs	r2, #0
 8000668:	601a      	str	r2, [r3, #0]
 800066a:	605a      	str	r2, [r3, #4]
 800066c:	609a      	str	r2, [r3, #8]
 800066e:	60da      	str	r2, [r3, #12]
 8000670:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000672:	4b2b      	ldr	r3, [pc, #172]	@ (8000720 <MX_GPIO_Init+0xc4>)
 8000674:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000676:	4a2a      	ldr	r2, [pc, #168]	@ (8000720 <MX_GPIO_Init+0xc4>)
 8000678:	f043 0304 	orr.w	r3, r3, #4
 800067c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800067e:	4b28      	ldr	r3, [pc, #160]	@ (8000720 <MX_GPIO_Init+0xc4>)
 8000680:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000682:	f003 0304 	and.w	r3, r3, #4
 8000686:	613b      	str	r3, [r7, #16]
 8000688:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800068a:	4b25      	ldr	r3, [pc, #148]	@ (8000720 <MX_GPIO_Init+0xc4>)
 800068c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800068e:	4a24      	ldr	r2, [pc, #144]	@ (8000720 <MX_GPIO_Init+0xc4>)
 8000690:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000694:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000696:	4b22      	ldr	r3, [pc, #136]	@ (8000720 <MX_GPIO_Init+0xc4>)
 8000698:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800069a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800069e:	60fb      	str	r3, [r7, #12]
 80006a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006a2:	4b1f      	ldr	r3, [pc, #124]	@ (8000720 <MX_GPIO_Init+0xc4>)
 80006a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006a6:	4a1e      	ldr	r2, [pc, #120]	@ (8000720 <MX_GPIO_Init+0xc4>)
 80006a8:	f043 0301 	orr.w	r3, r3, #1
 80006ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006ae:	4b1c      	ldr	r3, [pc, #112]	@ (8000720 <MX_GPIO_Init+0xc4>)
 80006b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006b2:	f003 0301 	and.w	r3, r3, #1
 80006b6:	60bb      	str	r3, [r7, #8]
 80006b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ba:	4b19      	ldr	r3, [pc, #100]	@ (8000720 <MX_GPIO_Init+0xc4>)
 80006bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006be:	4a18      	ldr	r2, [pc, #96]	@ (8000720 <MX_GPIO_Init+0xc4>)
 80006c0:	f043 0302 	orr.w	r3, r3, #2
 80006c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006c6:	4b16      	ldr	r3, [pc, #88]	@ (8000720 <MX_GPIO_Init+0xc4>)
 80006c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006ca:	f003 0302 	and.w	r3, r3, #2
 80006ce:	607b      	str	r3, [r7, #4]
 80006d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80006d2:	2200      	movs	r2, #0
 80006d4:	2120      	movs	r1, #32
 80006d6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006da:	f000 fc1f 	bl	8000f1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80006de:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80006e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80006e4:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80006e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ea:	2300      	movs	r3, #0
 80006ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006ee:	f107 0314 	add.w	r3, r7, #20
 80006f2:	4619      	mov	r1, r3
 80006f4:	480b      	ldr	r0, [pc, #44]	@ (8000724 <MX_GPIO_Init+0xc8>)
 80006f6:	f000 fa67 	bl	8000bc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80006fa:	2320      	movs	r3, #32
 80006fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006fe:	2301      	movs	r3, #1
 8000700:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000702:	2300      	movs	r3, #0
 8000704:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000706:	2300      	movs	r3, #0
 8000708:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800070a:	f107 0314 	add.w	r3, r7, #20
 800070e:	4619      	mov	r1, r3
 8000710:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000714:	f000 fa58 	bl	8000bc8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000718:	bf00      	nop
 800071a:	3728      	adds	r7, #40	@ 0x28
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	40021000 	.word	0x40021000
 8000724:	48000800 	.word	0x48000800

08000728 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000728:	b480      	push	{r7}
 800072a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800072c:	b672      	cpsid	i
}
 800072e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000730:	bf00      	nop
 8000732:	e7fd      	b.n	8000730 <Error_Handler+0x8>

08000734 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b082      	sub	sp, #8
 8000738:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800073a:	4b11      	ldr	r3, [pc, #68]	@ (8000780 <HAL_MspInit+0x4c>)
 800073c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800073e:	4a10      	ldr	r2, [pc, #64]	@ (8000780 <HAL_MspInit+0x4c>)
 8000740:	f043 0301 	orr.w	r3, r3, #1
 8000744:	6613      	str	r3, [r2, #96]	@ 0x60
 8000746:	4b0e      	ldr	r3, [pc, #56]	@ (8000780 <HAL_MspInit+0x4c>)
 8000748:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800074a:	f003 0301 	and.w	r3, r3, #1
 800074e:	607b      	str	r3, [r7, #4]
 8000750:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000752:	4b0b      	ldr	r3, [pc, #44]	@ (8000780 <HAL_MspInit+0x4c>)
 8000754:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000756:	4a0a      	ldr	r2, [pc, #40]	@ (8000780 <HAL_MspInit+0x4c>)
 8000758:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800075c:	6593      	str	r3, [r2, #88]	@ 0x58
 800075e:	4b08      	ldr	r3, [pc, #32]	@ (8000780 <HAL_MspInit+0x4c>)
 8000760:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000762:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000766:	603b      	str	r3, [r7, #0]
 8000768:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800076a:	2200      	movs	r2, #0
 800076c:	210f      	movs	r1, #15
 800076e:	f06f 0001 	mvn.w	r0, #1
 8000772:	f000 fa00 	bl	8000b76 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000776:	bf00      	nop
 8000778:	3708      	adds	r7, #8
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	40021000 	.word	0x40021000

08000784 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b0ac      	sub	sp, #176	@ 0xb0
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800078c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000790:	2200      	movs	r2, #0
 8000792:	601a      	str	r2, [r3, #0]
 8000794:	605a      	str	r2, [r3, #4]
 8000796:	609a      	str	r2, [r3, #8]
 8000798:	60da      	str	r2, [r3, #12]
 800079a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800079c:	f107 0314 	add.w	r3, r7, #20
 80007a0:	2288      	movs	r2, #136	@ 0x88
 80007a2:	2100      	movs	r1, #0
 80007a4:	4618      	mov	r0, r3
 80007a6:	f005 fa6f 	bl	8005c88 <memset>
  if(huart->Instance==USART2)
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	4a21      	ldr	r2, [pc, #132]	@ (8000834 <HAL_UART_MspInit+0xb0>)
 80007b0:	4293      	cmp	r3, r2
 80007b2:	d13b      	bne.n	800082c <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80007b4:	2302      	movs	r3, #2
 80007b6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80007b8:	2300      	movs	r3, #0
 80007ba:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007bc:	f107 0314 	add.w	r3, r7, #20
 80007c0:	4618      	mov	r0, r3
 80007c2:	f001 fa41 	bl	8001c48 <HAL_RCCEx_PeriphCLKConfig>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80007cc:	f7ff ffac 	bl	8000728 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80007d0:	4b19      	ldr	r3, [pc, #100]	@ (8000838 <HAL_UART_MspInit+0xb4>)
 80007d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007d4:	4a18      	ldr	r2, [pc, #96]	@ (8000838 <HAL_UART_MspInit+0xb4>)
 80007d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80007da:	6593      	str	r3, [r2, #88]	@ 0x58
 80007dc:	4b16      	ldr	r3, [pc, #88]	@ (8000838 <HAL_UART_MspInit+0xb4>)
 80007de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80007e4:	613b      	str	r3, [r7, #16]
 80007e6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007e8:	4b13      	ldr	r3, [pc, #76]	@ (8000838 <HAL_UART_MspInit+0xb4>)
 80007ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007ec:	4a12      	ldr	r2, [pc, #72]	@ (8000838 <HAL_UART_MspInit+0xb4>)
 80007ee:	f043 0301 	orr.w	r3, r3, #1
 80007f2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007f4:	4b10      	ldr	r3, [pc, #64]	@ (8000838 <HAL_UART_MspInit+0xb4>)
 80007f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007f8:	f003 0301 	and.w	r3, r3, #1
 80007fc:	60fb      	str	r3, [r7, #12]
 80007fe:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000800:	230c      	movs	r3, #12
 8000802:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000806:	2302      	movs	r3, #2
 8000808:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080c:	2300      	movs	r3, #0
 800080e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000812:	2303      	movs	r3, #3
 8000814:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000818:	2307      	movs	r3, #7
 800081a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800081e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000822:	4619      	mov	r1, r3
 8000824:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000828:	f000 f9ce 	bl	8000bc8 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800082c:	bf00      	nop
 800082e:	37b0      	adds	r7, #176	@ 0xb0
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	40004400 	.word	0x40004400
 8000838:	40021000 	.word	0x40021000

0800083c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000840:	bf00      	nop
 8000842:	e7fd      	b.n	8000840 <NMI_Handler+0x4>

08000844 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000848:	bf00      	nop
 800084a:	e7fd      	b.n	8000848 <HardFault_Handler+0x4>

0800084c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000850:	bf00      	nop
 8000852:	e7fd      	b.n	8000850 <MemManage_Handler+0x4>

08000854 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000858:	bf00      	nop
 800085a:	e7fd      	b.n	8000858 <BusFault_Handler+0x4>

0800085c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000860:	bf00      	nop
 8000862:	e7fd      	b.n	8000860 <UsageFault_Handler+0x4>

08000864 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000868:	bf00      	nop
 800086a:	46bd      	mov	sp, r7
 800086c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000870:	4770      	bx	lr

08000872 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000872:	b580      	push	{r7, lr}
 8000874:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000876:	f000 f8a1 	bl	80009bc <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800087a:	f004 f985 	bl	8004b88 <xTaskGetSchedulerState>
 800087e:	4603      	mov	r3, r0
 8000880:	2b01      	cmp	r3, #1
 8000882:	d001      	beq.n	8000888 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000884:	f004 ff80 	bl	8005788 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000888:	bf00      	nop
 800088a:	bd80      	pop	{r7, pc}

0800088c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000890:	4b06      	ldr	r3, [pc, #24]	@ (80008ac <SystemInit+0x20>)
 8000892:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000896:	4a05      	ldr	r2, [pc, #20]	@ (80008ac <SystemInit+0x20>)
 8000898:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800089c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80008a0:	bf00      	nop
 80008a2:	46bd      	mov	sp, r7
 80008a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a8:	4770      	bx	lr
 80008aa:	bf00      	nop
 80008ac:	e000ed00 	.word	0xe000ed00

080008b0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80008b0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80008e8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80008b4:	f7ff ffea 	bl	800088c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008b8:	480c      	ldr	r0, [pc, #48]	@ (80008ec <LoopForever+0x6>)
  ldr r1, =_edata
 80008ba:	490d      	ldr	r1, [pc, #52]	@ (80008f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80008bc:	4a0d      	ldr	r2, [pc, #52]	@ (80008f4 <LoopForever+0xe>)
  movs r3, #0
 80008be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008c0:	e002      	b.n	80008c8 <LoopCopyDataInit>

080008c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008c6:	3304      	adds	r3, #4

080008c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008cc:	d3f9      	bcc.n	80008c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008ce:	4a0a      	ldr	r2, [pc, #40]	@ (80008f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80008d0:	4c0a      	ldr	r4, [pc, #40]	@ (80008fc <LoopForever+0x16>)
  movs r3, #0
 80008d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008d4:	e001      	b.n	80008da <LoopFillZerobss>

080008d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008d8:	3204      	adds	r2, #4

080008da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008dc:	d3fb      	bcc.n	80008d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008de:	f005 f9db 	bl	8005c98 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80008e2:	f7ff fded 	bl	80004c0 <main>

080008e6 <LoopForever>:

LoopForever:
    b LoopForever
 80008e6:	e7fe      	b.n	80008e6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80008e8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80008ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008f0:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80008f4:	08005df4 	.word	0x08005df4
  ldr r2, =_sbss
 80008f8:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80008fc:	200019c8 	.word	0x200019c8

08000900 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000900:	e7fe      	b.n	8000900 <ADC1_2_IRQHandler>
	...

08000904 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b082      	sub	sp, #8
 8000908:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800090a:	2300      	movs	r3, #0
 800090c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800090e:	4b0c      	ldr	r3, [pc, #48]	@ (8000940 <HAL_Init+0x3c>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	4a0b      	ldr	r2, [pc, #44]	@ (8000940 <HAL_Init+0x3c>)
 8000914:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000918:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800091a:	2003      	movs	r0, #3
 800091c:	f000 f920 	bl	8000b60 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000920:	200f      	movs	r0, #15
 8000922:	f000 f80f 	bl	8000944 <HAL_InitTick>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d002      	beq.n	8000932 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800092c:	2301      	movs	r3, #1
 800092e:	71fb      	strb	r3, [r7, #7]
 8000930:	e001      	b.n	8000936 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000932:	f7ff feff 	bl	8000734 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000936:	79fb      	ldrb	r3, [r7, #7]
}
 8000938:	4618      	mov	r0, r3
 800093a:	3708      	adds	r7, #8
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}
 8000940:	40022000 	.word	0x40022000

08000944 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b084      	sub	sp, #16
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800094c:	2300      	movs	r3, #0
 800094e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000950:	4b17      	ldr	r3, [pc, #92]	@ (80009b0 <HAL_InitTick+0x6c>)
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	2b00      	cmp	r3, #0
 8000956:	d023      	beq.n	80009a0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000958:	4b16      	ldr	r3, [pc, #88]	@ (80009b4 <HAL_InitTick+0x70>)
 800095a:	681a      	ldr	r2, [r3, #0]
 800095c:	4b14      	ldr	r3, [pc, #80]	@ (80009b0 <HAL_InitTick+0x6c>)
 800095e:	781b      	ldrb	r3, [r3, #0]
 8000960:	4619      	mov	r1, r3
 8000962:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000966:	fbb3 f3f1 	udiv	r3, r3, r1
 800096a:	fbb2 f3f3 	udiv	r3, r2, r3
 800096e:	4618      	mov	r0, r3
 8000970:	f000 f91d 	bl	8000bae <HAL_SYSTICK_Config>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d10f      	bne.n	800099a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	2b0f      	cmp	r3, #15
 800097e:	d809      	bhi.n	8000994 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000980:	2200      	movs	r2, #0
 8000982:	6879      	ldr	r1, [r7, #4]
 8000984:	f04f 30ff 	mov.w	r0, #4294967295
 8000988:	f000 f8f5 	bl	8000b76 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800098c:	4a0a      	ldr	r2, [pc, #40]	@ (80009b8 <HAL_InitTick+0x74>)
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	6013      	str	r3, [r2, #0]
 8000992:	e007      	b.n	80009a4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000994:	2301      	movs	r3, #1
 8000996:	73fb      	strb	r3, [r7, #15]
 8000998:	e004      	b.n	80009a4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800099a:	2301      	movs	r3, #1
 800099c:	73fb      	strb	r3, [r7, #15]
 800099e:	e001      	b.n	80009a4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80009a0:	2301      	movs	r3, #1
 80009a2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80009a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80009a6:	4618      	mov	r0, r3
 80009a8:	3710      	adds	r7, #16
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	20000008 	.word	0x20000008
 80009b4:	20000000 	.word	0x20000000
 80009b8:	20000004 	.word	0x20000004

080009bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80009c0:	4b06      	ldr	r3, [pc, #24]	@ (80009dc <HAL_IncTick+0x20>)
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	461a      	mov	r2, r3
 80009c6:	4b06      	ldr	r3, [pc, #24]	@ (80009e0 <HAL_IncTick+0x24>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	4413      	add	r3, r2
 80009cc:	4a04      	ldr	r2, [pc, #16]	@ (80009e0 <HAL_IncTick+0x24>)
 80009ce:	6013      	str	r3, [r2, #0]
}
 80009d0:	bf00      	nop
 80009d2:	46bd      	mov	sp, r7
 80009d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop
 80009dc:	20000008 	.word	0x20000008
 80009e0:	200000bc 	.word	0x200000bc

080009e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  return uwTick;
 80009e8:	4b03      	ldr	r3, [pc, #12]	@ (80009f8 <HAL_GetTick+0x14>)
 80009ea:	681b      	ldr	r3, [r3, #0]
}
 80009ec:	4618      	mov	r0, r3
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop
 80009f8:	200000bc 	.word	0x200000bc

080009fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009fc:	b480      	push	{r7}
 80009fe:	b085      	sub	sp, #20
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	f003 0307 	and.w	r3, r3, #7
 8000a0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a0c:	4b0c      	ldr	r3, [pc, #48]	@ (8000a40 <__NVIC_SetPriorityGrouping+0x44>)
 8000a0e:	68db      	ldr	r3, [r3, #12]
 8000a10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a12:	68ba      	ldr	r2, [r7, #8]
 8000a14:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000a18:	4013      	ands	r3, r2
 8000a1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a20:	68bb      	ldr	r3, [r7, #8]
 8000a22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a24:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000a28:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a2e:	4a04      	ldr	r2, [pc, #16]	@ (8000a40 <__NVIC_SetPriorityGrouping+0x44>)
 8000a30:	68bb      	ldr	r3, [r7, #8]
 8000a32:	60d3      	str	r3, [r2, #12]
}
 8000a34:	bf00      	nop
 8000a36:	3714      	adds	r7, #20
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3e:	4770      	bx	lr
 8000a40:	e000ed00 	.word	0xe000ed00

08000a44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a48:	4b04      	ldr	r3, [pc, #16]	@ (8000a5c <__NVIC_GetPriorityGrouping+0x18>)
 8000a4a:	68db      	ldr	r3, [r3, #12]
 8000a4c:	0a1b      	lsrs	r3, r3, #8
 8000a4e:	f003 0307 	and.w	r3, r3, #7
}
 8000a52:	4618      	mov	r0, r3
 8000a54:	46bd      	mov	sp, r7
 8000a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5a:	4770      	bx	lr
 8000a5c:	e000ed00 	.word	0xe000ed00

08000a60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a60:	b480      	push	{r7}
 8000a62:	b083      	sub	sp, #12
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	4603      	mov	r3, r0
 8000a68:	6039      	str	r1, [r7, #0]
 8000a6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	db0a      	blt.n	8000a8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a74:	683b      	ldr	r3, [r7, #0]
 8000a76:	b2da      	uxtb	r2, r3
 8000a78:	490c      	ldr	r1, [pc, #48]	@ (8000aac <__NVIC_SetPriority+0x4c>)
 8000a7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a7e:	0112      	lsls	r2, r2, #4
 8000a80:	b2d2      	uxtb	r2, r2
 8000a82:	440b      	add	r3, r1
 8000a84:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a88:	e00a      	b.n	8000aa0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a8a:	683b      	ldr	r3, [r7, #0]
 8000a8c:	b2da      	uxtb	r2, r3
 8000a8e:	4908      	ldr	r1, [pc, #32]	@ (8000ab0 <__NVIC_SetPriority+0x50>)
 8000a90:	79fb      	ldrb	r3, [r7, #7]
 8000a92:	f003 030f 	and.w	r3, r3, #15
 8000a96:	3b04      	subs	r3, #4
 8000a98:	0112      	lsls	r2, r2, #4
 8000a9a:	b2d2      	uxtb	r2, r2
 8000a9c:	440b      	add	r3, r1
 8000a9e:	761a      	strb	r2, [r3, #24]
}
 8000aa0:	bf00      	nop
 8000aa2:	370c      	adds	r7, #12
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aaa:	4770      	bx	lr
 8000aac:	e000e100 	.word	0xe000e100
 8000ab0:	e000ed00 	.word	0xe000ed00

08000ab4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	b089      	sub	sp, #36	@ 0x24
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	60f8      	str	r0, [r7, #12]
 8000abc:	60b9      	str	r1, [r7, #8]
 8000abe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	f003 0307 	and.w	r3, r3, #7
 8000ac6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ac8:	69fb      	ldr	r3, [r7, #28]
 8000aca:	f1c3 0307 	rsb	r3, r3, #7
 8000ace:	2b04      	cmp	r3, #4
 8000ad0:	bf28      	it	cs
 8000ad2:	2304      	movcs	r3, #4
 8000ad4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ad6:	69fb      	ldr	r3, [r7, #28]
 8000ad8:	3304      	adds	r3, #4
 8000ada:	2b06      	cmp	r3, #6
 8000adc:	d902      	bls.n	8000ae4 <NVIC_EncodePriority+0x30>
 8000ade:	69fb      	ldr	r3, [r7, #28]
 8000ae0:	3b03      	subs	r3, #3
 8000ae2:	e000      	b.n	8000ae6 <NVIC_EncodePriority+0x32>
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ae8:	f04f 32ff 	mov.w	r2, #4294967295
 8000aec:	69bb      	ldr	r3, [r7, #24]
 8000aee:	fa02 f303 	lsl.w	r3, r2, r3
 8000af2:	43da      	mvns	r2, r3
 8000af4:	68bb      	ldr	r3, [r7, #8]
 8000af6:	401a      	ands	r2, r3
 8000af8:	697b      	ldr	r3, [r7, #20]
 8000afa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000afc:	f04f 31ff 	mov.w	r1, #4294967295
 8000b00:	697b      	ldr	r3, [r7, #20]
 8000b02:	fa01 f303 	lsl.w	r3, r1, r3
 8000b06:	43d9      	mvns	r1, r3
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b0c:	4313      	orrs	r3, r2
         );
}
 8000b0e:	4618      	mov	r0, r3
 8000b10:	3724      	adds	r7, #36	@ 0x24
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr
	...

08000b1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	3b01      	subs	r3, #1
 8000b28:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000b2c:	d301      	bcc.n	8000b32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b2e:	2301      	movs	r3, #1
 8000b30:	e00f      	b.n	8000b52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b32:	4a0a      	ldr	r2, [pc, #40]	@ (8000b5c <SysTick_Config+0x40>)
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	3b01      	subs	r3, #1
 8000b38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b3a:	210f      	movs	r1, #15
 8000b3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b40:	f7ff ff8e 	bl	8000a60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b44:	4b05      	ldr	r3, [pc, #20]	@ (8000b5c <SysTick_Config+0x40>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b4a:	4b04      	ldr	r3, [pc, #16]	@ (8000b5c <SysTick_Config+0x40>)
 8000b4c:	2207      	movs	r2, #7
 8000b4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b50:	2300      	movs	r3, #0
}
 8000b52:	4618      	mov	r0, r3
 8000b54:	3708      	adds	r7, #8
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	e000e010 	.word	0xe000e010

08000b60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b68:	6878      	ldr	r0, [r7, #4]
 8000b6a:	f7ff ff47 	bl	80009fc <__NVIC_SetPriorityGrouping>
}
 8000b6e:	bf00      	nop
 8000b70:	3708      	adds	r7, #8
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}

08000b76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b76:	b580      	push	{r7, lr}
 8000b78:	b086      	sub	sp, #24
 8000b7a:	af00      	add	r7, sp, #0
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	60b9      	str	r1, [r7, #8]
 8000b80:	607a      	str	r2, [r7, #4]
 8000b82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000b84:	2300      	movs	r3, #0
 8000b86:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000b88:	f7ff ff5c 	bl	8000a44 <__NVIC_GetPriorityGrouping>
 8000b8c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b8e:	687a      	ldr	r2, [r7, #4]
 8000b90:	68b9      	ldr	r1, [r7, #8]
 8000b92:	6978      	ldr	r0, [r7, #20]
 8000b94:	f7ff ff8e 	bl	8000ab4 <NVIC_EncodePriority>
 8000b98:	4602      	mov	r2, r0
 8000b9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b9e:	4611      	mov	r1, r2
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f7ff ff5d 	bl	8000a60 <__NVIC_SetPriority>
}
 8000ba6:	bf00      	nop
 8000ba8:	3718      	adds	r7, #24
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}

08000bae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bae:	b580      	push	{r7, lr}
 8000bb0:	b082      	sub	sp, #8
 8000bb2:	af00      	add	r7, sp, #0
 8000bb4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bb6:	6878      	ldr	r0, [r7, #4]
 8000bb8:	f7ff ffb0 	bl	8000b1c <SysTick_Config>
 8000bbc:	4603      	mov	r3, r0
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	3708      	adds	r7, #8
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
	...

08000bc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b087      	sub	sp, #28
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
 8000bd0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bd6:	e17f      	b.n	8000ed8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	681a      	ldr	r2, [r3, #0]
 8000bdc:	2101      	movs	r1, #1
 8000bde:	697b      	ldr	r3, [r7, #20]
 8000be0:	fa01 f303 	lsl.w	r3, r1, r3
 8000be4:	4013      	ands	r3, r2
 8000be6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	f000 8171 	beq.w	8000ed2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	685b      	ldr	r3, [r3, #4]
 8000bf4:	f003 0303 	and.w	r3, r3, #3
 8000bf8:	2b01      	cmp	r3, #1
 8000bfa:	d005      	beq.n	8000c08 <HAL_GPIO_Init+0x40>
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	685b      	ldr	r3, [r3, #4]
 8000c00:	f003 0303 	and.w	r3, r3, #3
 8000c04:	2b02      	cmp	r3, #2
 8000c06:	d130      	bne.n	8000c6a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	689b      	ldr	r3, [r3, #8]
 8000c0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000c0e:	697b      	ldr	r3, [r7, #20]
 8000c10:	005b      	lsls	r3, r3, #1
 8000c12:	2203      	movs	r2, #3
 8000c14:	fa02 f303 	lsl.w	r3, r2, r3
 8000c18:	43db      	mvns	r3, r3
 8000c1a:	693a      	ldr	r2, [r7, #16]
 8000c1c:	4013      	ands	r3, r2
 8000c1e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	68da      	ldr	r2, [r3, #12]
 8000c24:	697b      	ldr	r3, [r7, #20]
 8000c26:	005b      	lsls	r3, r3, #1
 8000c28:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2c:	693a      	ldr	r2, [r7, #16]
 8000c2e:	4313      	orrs	r3, r2
 8000c30:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	693a      	ldr	r2, [r7, #16]
 8000c36:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	685b      	ldr	r3, [r3, #4]
 8000c3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000c3e:	2201      	movs	r2, #1
 8000c40:	697b      	ldr	r3, [r7, #20]
 8000c42:	fa02 f303 	lsl.w	r3, r2, r3
 8000c46:	43db      	mvns	r3, r3
 8000c48:	693a      	ldr	r2, [r7, #16]
 8000c4a:	4013      	ands	r3, r2
 8000c4c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	685b      	ldr	r3, [r3, #4]
 8000c52:	091b      	lsrs	r3, r3, #4
 8000c54:	f003 0201 	and.w	r2, r3, #1
 8000c58:	697b      	ldr	r3, [r7, #20]
 8000c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5e:	693a      	ldr	r2, [r7, #16]
 8000c60:	4313      	orrs	r3, r2
 8000c62:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	693a      	ldr	r2, [r7, #16]
 8000c68:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000c6a:	683b      	ldr	r3, [r7, #0]
 8000c6c:	685b      	ldr	r3, [r3, #4]
 8000c6e:	f003 0303 	and.w	r3, r3, #3
 8000c72:	2b03      	cmp	r3, #3
 8000c74:	d118      	bne.n	8000ca8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c7a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	697b      	ldr	r3, [r7, #20]
 8000c80:	fa02 f303 	lsl.w	r3, r2, r3
 8000c84:	43db      	mvns	r3, r3
 8000c86:	693a      	ldr	r2, [r7, #16]
 8000c88:	4013      	ands	r3, r2
 8000c8a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	685b      	ldr	r3, [r3, #4]
 8000c90:	08db      	lsrs	r3, r3, #3
 8000c92:	f003 0201 	and.w	r2, r3, #1
 8000c96:	697b      	ldr	r3, [r7, #20]
 8000c98:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9c:	693a      	ldr	r2, [r7, #16]
 8000c9e:	4313      	orrs	r3, r2
 8000ca0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	693a      	ldr	r2, [r7, #16]
 8000ca6:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	685b      	ldr	r3, [r3, #4]
 8000cac:	f003 0303 	and.w	r3, r3, #3
 8000cb0:	2b03      	cmp	r3, #3
 8000cb2:	d017      	beq.n	8000ce4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	68db      	ldr	r3, [r3, #12]
 8000cb8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000cba:	697b      	ldr	r3, [r7, #20]
 8000cbc:	005b      	lsls	r3, r3, #1
 8000cbe:	2203      	movs	r2, #3
 8000cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc4:	43db      	mvns	r3, r3
 8000cc6:	693a      	ldr	r2, [r7, #16]
 8000cc8:	4013      	ands	r3, r2
 8000cca:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	689a      	ldr	r2, [r3, #8]
 8000cd0:	697b      	ldr	r3, [r7, #20]
 8000cd2:	005b      	lsls	r3, r3, #1
 8000cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd8:	693a      	ldr	r2, [r7, #16]
 8000cda:	4313      	orrs	r3, r2
 8000cdc:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	693a      	ldr	r2, [r7, #16]
 8000ce2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	685b      	ldr	r3, [r3, #4]
 8000ce8:	f003 0303 	and.w	r3, r3, #3
 8000cec:	2b02      	cmp	r3, #2
 8000cee:	d123      	bne.n	8000d38 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	08da      	lsrs	r2, r3, #3
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	3208      	adds	r2, #8
 8000cf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cfc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000cfe:	697b      	ldr	r3, [r7, #20]
 8000d00:	f003 0307 	and.w	r3, r3, #7
 8000d04:	009b      	lsls	r3, r3, #2
 8000d06:	220f      	movs	r2, #15
 8000d08:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0c:	43db      	mvns	r3, r3
 8000d0e:	693a      	ldr	r2, [r7, #16]
 8000d10:	4013      	ands	r3, r2
 8000d12:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	691a      	ldr	r2, [r3, #16]
 8000d18:	697b      	ldr	r3, [r7, #20]
 8000d1a:	f003 0307 	and.w	r3, r3, #7
 8000d1e:	009b      	lsls	r3, r3, #2
 8000d20:	fa02 f303 	lsl.w	r3, r2, r3
 8000d24:	693a      	ldr	r2, [r7, #16]
 8000d26:	4313      	orrs	r3, r2
 8000d28:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000d2a:	697b      	ldr	r3, [r7, #20]
 8000d2c:	08da      	lsrs	r2, r3, #3
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	3208      	adds	r2, #8
 8000d32:	6939      	ldr	r1, [r7, #16]
 8000d34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000d3e:	697b      	ldr	r3, [r7, #20]
 8000d40:	005b      	lsls	r3, r3, #1
 8000d42:	2203      	movs	r2, #3
 8000d44:	fa02 f303 	lsl.w	r3, r2, r3
 8000d48:	43db      	mvns	r3, r3
 8000d4a:	693a      	ldr	r2, [r7, #16]
 8000d4c:	4013      	ands	r3, r2
 8000d4e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	685b      	ldr	r3, [r3, #4]
 8000d54:	f003 0203 	and.w	r2, r3, #3
 8000d58:	697b      	ldr	r3, [r7, #20]
 8000d5a:	005b      	lsls	r3, r3, #1
 8000d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d60:	693a      	ldr	r2, [r7, #16]
 8000d62:	4313      	orrs	r3, r2
 8000d64:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	693a      	ldr	r2, [r7, #16]
 8000d6a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	685b      	ldr	r3, [r3, #4]
 8000d70:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	f000 80ac 	beq.w	8000ed2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d7a:	4b5f      	ldr	r3, [pc, #380]	@ (8000ef8 <HAL_GPIO_Init+0x330>)
 8000d7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d7e:	4a5e      	ldr	r2, [pc, #376]	@ (8000ef8 <HAL_GPIO_Init+0x330>)
 8000d80:	f043 0301 	orr.w	r3, r3, #1
 8000d84:	6613      	str	r3, [r2, #96]	@ 0x60
 8000d86:	4b5c      	ldr	r3, [pc, #368]	@ (8000ef8 <HAL_GPIO_Init+0x330>)
 8000d88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d8a:	f003 0301 	and.w	r3, r3, #1
 8000d8e:	60bb      	str	r3, [r7, #8]
 8000d90:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000d92:	4a5a      	ldr	r2, [pc, #360]	@ (8000efc <HAL_GPIO_Init+0x334>)
 8000d94:	697b      	ldr	r3, [r7, #20]
 8000d96:	089b      	lsrs	r3, r3, #2
 8000d98:	3302      	adds	r3, #2
 8000d9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d9e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000da0:	697b      	ldr	r3, [r7, #20]
 8000da2:	f003 0303 	and.w	r3, r3, #3
 8000da6:	009b      	lsls	r3, r3, #2
 8000da8:	220f      	movs	r2, #15
 8000daa:	fa02 f303 	lsl.w	r3, r2, r3
 8000dae:	43db      	mvns	r3, r3
 8000db0:	693a      	ldr	r2, [r7, #16]
 8000db2:	4013      	ands	r3, r2
 8000db4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000dbc:	d025      	beq.n	8000e0a <HAL_GPIO_Init+0x242>
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	4a4f      	ldr	r2, [pc, #316]	@ (8000f00 <HAL_GPIO_Init+0x338>)
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	d01f      	beq.n	8000e06 <HAL_GPIO_Init+0x23e>
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	4a4e      	ldr	r2, [pc, #312]	@ (8000f04 <HAL_GPIO_Init+0x33c>)
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	d019      	beq.n	8000e02 <HAL_GPIO_Init+0x23a>
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	4a4d      	ldr	r2, [pc, #308]	@ (8000f08 <HAL_GPIO_Init+0x340>)
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	d013      	beq.n	8000dfe <HAL_GPIO_Init+0x236>
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	4a4c      	ldr	r2, [pc, #304]	@ (8000f0c <HAL_GPIO_Init+0x344>)
 8000dda:	4293      	cmp	r3, r2
 8000ddc:	d00d      	beq.n	8000dfa <HAL_GPIO_Init+0x232>
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	4a4b      	ldr	r2, [pc, #300]	@ (8000f10 <HAL_GPIO_Init+0x348>)
 8000de2:	4293      	cmp	r3, r2
 8000de4:	d007      	beq.n	8000df6 <HAL_GPIO_Init+0x22e>
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	4a4a      	ldr	r2, [pc, #296]	@ (8000f14 <HAL_GPIO_Init+0x34c>)
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d101      	bne.n	8000df2 <HAL_GPIO_Init+0x22a>
 8000dee:	2306      	movs	r3, #6
 8000df0:	e00c      	b.n	8000e0c <HAL_GPIO_Init+0x244>
 8000df2:	2307      	movs	r3, #7
 8000df4:	e00a      	b.n	8000e0c <HAL_GPIO_Init+0x244>
 8000df6:	2305      	movs	r3, #5
 8000df8:	e008      	b.n	8000e0c <HAL_GPIO_Init+0x244>
 8000dfa:	2304      	movs	r3, #4
 8000dfc:	e006      	b.n	8000e0c <HAL_GPIO_Init+0x244>
 8000dfe:	2303      	movs	r3, #3
 8000e00:	e004      	b.n	8000e0c <HAL_GPIO_Init+0x244>
 8000e02:	2302      	movs	r3, #2
 8000e04:	e002      	b.n	8000e0c <HAL_GPIO_Init+0x244>
 8000e06:	2301      	movs	r3, #1
 8000e08:	e000      	b.n	8000e0c <HAL_GPIO_Init+0x244>
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	697a      	ldr	r2, [r7, #20]
 8000e0e:	f002 0203 	and.w	r2, r2, #3
 8000e12:	0092      	lsls	r2, r2, #2
 8000e14:	4093      	lsls	r3, r2
 8000e16:	693a      	ldr	r2, [r7, #16]
 8000e18:	4313      	orrs	r3, r2
 8000e1a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000e1c:	4937      	ldr	r1, [pc, #220]	@ (8000efc <HAL_GPIO_Init+0x334>)
 8000e1e:	697b      	ldr	r3, [r7, #20]
 8000e20:	089b      	lsrs	r3, r3, #2
 8000e22:	3302      	adds	r3, #2
 8000e24:	693a      	ldr	r2, [r7, #16]
 8000e26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000e2a:	4b3b      	ldr	r3, [pc, #236]	@ (8000f18 <HAL_GPIO_Init+0x350>)
 8000e2c:	689b      	ldr	r3, [r3, #8]
 8000e2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	43db      	mvns	r3, r3
 8000e34:	693a      	ldr	r2, [r7, #16]
 8000e36:	4013      	ands	r3, r2
 8000e38:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	685b      	ldr	r3, [r3, #4]
 8000e3e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d003      	beq.n	8000e4e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000e46:	693a      	ldr	r2, [r7, #16]
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	4313      	orrs	r3, r2
 8000e4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000e4e:	4a32      	ldr	r2, [pc, #200]	@ (8000f18 <HAL_GPIO_Init+0x350>)
 8000e50:	693b      	ldr	r3, [r7, #16]
 8000e52:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000e54:	4b30      	ldr	r3, [pc, #192]	@ (8000f18 <HAL_GPIO_Init+0x350>)
 8000e56:	68db      	ldr	r3, [r3, #12]
 8000e58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	43db      	mvns	r3, r3
 8000e5e:	693a      	ldr	r2, [r7, #16]
 8000e60:	4013      	ands	r3, r2
 8000e62:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	685b      	ldr	r3, [r3, #4]
 8000e68:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d003      	beq.n	8000e78 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000e70:	693a      	ldr	r2, [r7, #16]
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	4313      	orrs	r3, r2
 8000e76:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000e78:	4a27      	ldr	r2, [pc, #156]	@ (8000f18 <HAL_GPIO_Init+0x350>)
 8000e7a:	693b      	ldr	r3, [r7, #16]
 8000e7c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000e7e:	4b26      	ldr	r3, [pc, #152]	@ (8000f18 <HAL_GPIO_Init+0x350>)
 8000e80:	685b      	ldr	r3, [r3, #4]
 8000e82:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	43db      	mvns	r3, r3
 8000e88:	693a      	ldr	r2, [r7, #16]
 8000e8a:	4013      	ands	r3, r2
 8000e8c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	685b      	ldr	r3, [r3, #4]
 8000e92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d003      	beq.n	8000ea2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000e9a:	693a      	ldr	r2, [r7, #16]
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	4313      	orrs	r3, r2
 8000ea0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000ea2:	4a1d      	ldr	r2, [pc, #116]	@ (8000f18 <HAL_GPIO_Init+0x350>)
 8000ea4:	693b      	ldr	r3, [r7, #16]
 8000ea6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000ea8:	4b1b      	ldr	r3, [pc, #108]	@ (8000f18 <HAL_GPIO_Init+0x350>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	43db      	mvns	r3, r3
 8000eb2:	693a      	ldr	r2, [r7, #16]
 8000eb4:	4013      	ands	r3, r2
 8000eb6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d003      	beq.n	8000ecc <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000ec4:	693a      	ldr	r2, [r7, #16]
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	4313      	orrs	r3, r2
 8000eca:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000ecc:	4a12      	ldr	r2, [pc, #72]	@ (8000f18 <HAL_GPIO_Init+0x350>)
 8000ece:	693b      	ldr	r3, [r7, #16]
 8000ed0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	3301      	adds	r3, #1
 8000ed6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	681a      	ldr	r2, [r3, #0]
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	fa22 f303 	lsr.w	r3, r2, r3
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	f47f ae78 	bne.w	8000bd8 <HAL_GPIO_Init+0x10>
  }
}
 8000ee8:	bf00      	nop
 8000eea:	bf00      	nop
 8000eec:	371c      	adds	r7, #28
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop
 8000ef8:	40021000 	.word	0x40021000
 8000efc:	40010000 	.word	0x40010000
 8000f00:	48000400 	.word	0x48000400
 8000f04:	48000800 	.word	0x48000800
 8000f08:	48000c00 	.word	0x48000c00
 8000f0c:	48001000 	.word	0x48001000
 8000f10:	48001400 	.word	0x48001400
 8000f14:	48001800 	.word	0x48001800
 8000f18:	40010400 	.word	0x40010400

08000f1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b083      	sub	sp, #12
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
 8000f24:	460b      	mov	r3, r1
 8000f26:	807b      	strh	r3, [r7, #2]
 8000f28:	4613      	mov	r3, r2
 8000f2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f2c:	787b      	ldrb	r3, [r7, #1]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d003      	beq.n	8000f3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000f32:	887a      	ldrh	r2, [r7, #2]
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000f38:	e002      	b.n	8000f40 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000f3a:	887a      	ldrh	r2, [r7, #2]
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000f40:	bf00      	nop
 8000f42:	370c      	adds	r7, #12
 8000f44:	46bd      	mov	sp, r7
 8000f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4a:	4770      	bx	lr

08000f4c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b085      	sub	sp, #20
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
 8000f54:	460b      	mov	r3, r1
 8000f56:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	695b      	ldr	r3, [r3, #20]
 8000f5c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000f5e:	887a      	ldrh	r2, [r7, #2]
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	4013      	ands	r3, r2
 8000f64:	041a      	lsls	r2, r3, #16
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	43d9      	mvns	r1, r3
 8000f6a:	887b      	ldrh	r3, [r7, #2]
 8000f6c:	400b      	ands	r3, r1
 8000f6e:	431a      	orrs	r2, r3
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	619a      	str	r2, [r3, #24]
}
 8000f74:	bf00      	nop
 8000f76:	3714      	adds	r7, #20
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7e:	4770      	bx	lr

08000f80 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000f84:	4b04      	ldr	r3, [pc, #16]	@ (8000f98 <HAL_PWREx_GetVoltageRange+0x18>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop
 8000f98:	40007000 	.word	0x40007000

08000f9c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b085      	sub	sp, #20
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000faa:	d130      	bne.n	800100e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000fac:	4b23      	ldr	r3, [pc, #140]	@ (800103c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000fb4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000fb8:	d038      	beq.n	800102c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fba:	4b20      	ldr	r3, [pc, #128]	@ (800103c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000fc2:	4a1e      	ldr	r2, [pc, #120]	@ (800103c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000fc4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000fc8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000fca:	4b1d      	ldr	r3, [pc, #116]	@ (8001040 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	2232      	movs	r2, #50	@ 0x32
 8000fd0:	fb02 f303 	mul.w	r3, r2, r3
 8000fd4:	4a1b      	ldr	r2, [pc, #108]	@ (8001044 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000fd6:	fba2 2303 	umull	r2, r3, r2, r3
 8000fda:	0c9b      	lsrs	r3, r3, #18
 8000fdc:	3301      	adds	r3, #1
 8000fde:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000fe0:	e002      	b.n	8000fe8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	3b01      	subs	r3, #1
 8000fe6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000fe8:	4b14      	ldr	r3, [pc, #80]	@ (800103c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000fea:	695b      	ldr	r3, [r3, #20]
 8000fec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000ff0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000ff4:	d102      	bne.n	8000ffc <HAL_PWREx_ControlVoltageScaling+0x60>
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d1f2      	bne.n	8000fe2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000ffc:	4b0f      	ldr	r3, [pc, #60]	@ (800103c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ffe:	695b      	ldr	r3, [r3, #20]
 8001000:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001004:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001008:	d110      	bne.n	800102c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800100a:	2303      	movs	r3, #3
 800100c:	e00f      	b.n	800102e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800100e:	4b0b      	ldr	r3, [pc, #44]	@ (800103c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001016:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800101a:	d007      	beq.n	800102c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800101c:	4b07      	ldr	r3, [pc, #28]	@ (800103c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001024:	4a05      	ldr	r2, [pc, #20]	@ (800103c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001026:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800102a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800102c:	2300      	movs	r3, #0
}
 800102e:	4618      	mov	r0, r3
 8001030:	3714      	adds	r7, #20
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop
 800103c:	40007000 	.word	0x40007000
 8001040:	20000000 	.word	0x20000000
 8001044:	431bde83 	.word	0x431bde83

08001048 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b088      	sub	sp, #32
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d101      	bne.n	800105a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001056:	2301      	movs	r3, #1
 8001058:	e3ca      	b.n	80017f0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800105a:	4b97      	ldr	r3, [pc, #604]	@ (80012b8 <HAL_RCC_OscConfig+0x270>)
 800105c:	689b      	ldr	r3, [r3, #8]
 800105e:	f003 030c 	and.w	r3, r3, #12
 8001062:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001064:	4b94      	ldr	r3, [pc, #592]	@ (80012b8 <HAL_RCC_OscConfig+0x270>)
 8001066:	68db      	ldr	r3, [r3, #12]
 8001068:	f003 0303 	and.w	r3, r3, #3
 800106c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f003 0310 	and.w	r3, r3, #16
 8001076:	2b00      	cmp	r3, #0
 8001078:	f000 80e4 	beq.w	8001244 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800107c:	69bb      	ldr	r3, [r7, #24]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d007      	beq.n	8001092 <HAL_RCC_OscConfig+0x4a>
 8001082:	69bb      	ldr	r3, [r7, #24]
 8001084:	2b0c      	cmp	r3, #12
 8001086:	f040 808b 	bne.w	80011a0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800108a:	697b      	ldr	r3, [r7, #20]
 800108c:	2b01      	cmp	r3, #1
 800108e:	f040 8087 	bne.w	80011a0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001092:	4b89      	ldr	r3, [pc, #548]	@ (80012b8 <HAL_RCC_OscConfig+0x270>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f003 0302 	and.w	r3, r3, #2
 800109a:	2b00      	cmp	r3, #0
 800109c:	d005      	beq.n	80010aa <HAL_RCC_OscConfig+0x62>
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	699b      	ldr	r3, [r3, #24]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d101      	bne.n	80010aa <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80010a6:	2301      	movs	r3, #1
 80010a8:	e3a2      	b.n	80017f0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6a1a      	ldr	r2, [r3, #32]
 80010ae:	4b82      	ldr	r3, [pc, #520]	@ (80012b8 <HAL_RCC_OscConfig+0x270>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f003 0308 	and.w	r3, r3, #8
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d004      	beq.n	80010c4 <HAL_RCC_OscConfig+0x7c>
 80010ba:	4b7f      	ldr	r3, [pc, #508]	@ (80012b8 <HAL_RCC_OscConfig+0x270>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80010c2:	e005      	b.n	80010d0 <HAL_RCC_OscConfig+0x88>
 80010c4:	4b7c      	ldr	r3, [pc, #496]	@ (80012b8 <HAL_RCC_OscConfig+0x270>)
 80010c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80010ca:	091b      	lsrs	r3, r3, #4
 80010cc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80010d0:	4293      	cmp	r3, r2
 80010d2:	d223      	bcs.n	800111c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	6a1b      	ldr	r3, [r3, #32]
 80010d8:	4618      	mov	r0, r3
 80010da:	f000 fd55 	bl	8001b88 <RCC_SetFlashLatencyFromMSIRange>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d001      	beq.n	80010e8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80010e4:	2301      	movs	r3, #1
 80010e6:	e383      	b.n	80017f0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80010e8:	4b73      	ldr	r3, [pc, #460]	@ (80012b8 <HAL_RCC_OscConfig+0x270>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a72      	ldr	r2, [pc, #456]	@ (80012b8 <HAL_RCC_OscConfig+0x270>)
 80010ee:	f043 0308 	orr.w	r3, r3, #8
 80010f2:	6013      	str	r3, [r2, #0]
 80010f4:	4b70      	ldr	r3, [pc, #448]	@ (80012b8 <HAL_RCC_OscConfig+0x270>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	6a1b      	ldr	r3, [r3, #32]
 8001100:	496d      	ldr	r1, [pc, #436]	@ (80012b8 <HAL_RCC_OscConfig+0x270>)
 8001102:	4313      	orrs	r3, r2
 8001104:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001106:	4b6c      	ldr	r3, [pc, #432]	@ (80012b8 <HAL_RCC_OscConfig+0x270>)
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	69db      	ldr	r3, [r3, #28]
 8001112:	021b      	lsls	r3, r3, #8
 8001114:	4968      	ldr	r1, [pc, #416]	@ (80012b8 <HAL_RCC_OscConfig+0x270>)
 8001116:	4313      	orrs	r3, r2
 8001118:	604b      	str	r3, [r1, #4]
 800111a:	e025      	b.n	8001168 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800111c:	4b66      	ldr	r3, [pc, #408]	@ (80012b8 <HAL_RCC_OscConfig+0x270>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a65      	ldr	r2, [pc, #404]	@ (80012b8 <HAL_RCC_OscConfig+0x270>)
 8001122:	f043 0308 	orr.w	r3, r3, #8
 8001126:	6013      	str	r3, [r2, #0]
 8001128:	4b63      	ldr	r3, [pc, #396]	@ (80012b8 <HAL_RCC_OscConfig+0x270>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	6a1b      	ldr	r3, [r3, #32]
 8001134:	4960      	ldr	r1, [pc, #384]	@ (80012b8 <HAL_RCC_OscConfig+0x270>)
 8001136:	4313      	orrs	r3, r2
 8001138:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800113a:	4b5f      	ldr	r3, [pc, #380]	@ (80012b8 <HAL_RCC_OscConfig+0x270>)
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	69db      	ldr	r3, [r3, #28]
 8001146:	021b      	lsls	r3, r3, #8
 8001148:	495b      	ldr	r1, [pc, #364]	@ (80012b8 <HAL_RCC_OscConfig+0x270>)
 800114a:	4313      	orrs	r3, r2
 800114c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800114e:	69bb      	ldr	r3, [r7, #24]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d109      	bne.n	8001168 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	6a1b      	ldr	r3, [r3, #32]
 8001158:	4618      	mov	r0, r3
 800115a:	f000 fd15 	bl	8001b88 <RCC_SetFlashLatencyFromMSIRange>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d001      	beq.n	8001168 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001164:	2301      	movs	r3, #1
 8001166:	e343      	b.n	80017f0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001168:	f000 fc4a 	bl	8001a00 <HAL_RCC_GetSysClockFreq>
 800116c:	4602      	mov	r2, r0
 800116e:	4b52      	ldr	r3, [pc, #328]	@ (80012b8 <HAL_RCC_OscConfig+0x270>)
 8001170:	689b      	ldr	r3, [r3, #8]
 8001172:	091b      	lsrs	r3, r3, #4
 8001174:	f003 030f 	and.w	r3, r3, #15
 8001178:	4950      	ldr	r1, [pc, #320]	@ (80012bc <HAL_RCC_OscConfig+0x274>)
 800117a:	5ccb      	ldrb	r3, [r1, r3]
 800117c:	f003 031f 	and.w	r3, r3, #31
 8001180:	fa22 f303 	lsr.w	r3, r2, r3
 8001184:	4a4e      	ldr	r2, [pc, #312]	@ (80012c0 <HAL_RCC_OscConfig+0x278>)
 8001186:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001188:	4b4e      	ldr	r3, [pc, #312]	@ (80012c4 <HAL_RCC_OscConfig+0x27c>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4618      	mov	r0, r3
 800118e:	f7ff fbd9 	bl	8000944 <HAL_InitTick>
 8001192:	4603      	mov	r3, r0
 8001194:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001196:	7bfb      	ldrb	r3, [r7, #15]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d052      	beq.n	8001242 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800119c:	7bfb      	ldrb	r3, [r7, #15]
 800119e:	e327      	b.n	80017f0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	699b      	ldr	r3, [r3, #24]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d032      	beq.n	800120e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80011a8:	4b43      	ldr	r3, [pc, #268]	@ (80012b8 <HAL_RCC_OscConfig+0x270>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a42      	ldr	r2, [pc, #264]	@ (80012b8 <HAL_RCC_OscConfig+0x270>)
 80011ae:	f043 0301 	orr.w	r3, r3, #1
 80011b2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80011b4:	f7ff fc16 	bl	80009e4 <HAL_GetTick>
 80011b8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80011ba:	e008      	b.n	80011ce <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80011bc:	f7ff fc12 	bl	80009e4 <HAL_GetTick>
 80011c0:	4602      	mov	r2, r0
 80011c2:	693b      	ldr	r3, [r7, #16]
 80011c4:	1ad3      	subs	r3, r2, r3
 80011c6:	2b02      	cmp	r3, #2
 80011c8:	d901      	bls.n	80011ce <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80011ca:	2303      	movs	r3, #3
 80011cc:	e310      	b.n	80017f0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80011ce:	4b3a      	ldr	r3, [pc, #232]	@ (80012b8 <HAL_RCC_OscConfig+0x270>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f003 0302 	and.w	r3, r3, #2
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d0f0      	beq.n	80011bc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80011da:	4b37      	ldr	r3, [pc, #220]	@ (80012b8 <HAL_RCC_OscConfig+0x270>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4a36      	ldr	r2, [pc, #216]	@ (80012b8 <HAL_RCC_OscConfig+0x270>)
 80011e0:	f043 0308 	orr.w	r3, r3, #8
 80011e4:	6013      	str	r3, [r2, #0]
 80011e6:	4b34      	ldr	r3, [pc, #208]	@ (80012b8 <HAL_RCC_OscConfig+0x270>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6a1b      	ldr	r3, [r3, #32]
 80011f2:	4931      	ldr	r1, [pc, #196]	@ (80012b8 <HAL_RCC_OscConfig+0x270>)
 80011f4:	4313      	orrs	r3, r2
 80011f6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80011f8:	4b2f      	ldr	r3, [pc, #188]	@ (80012b8 <HAL_RCC_OscConfig+0x270>)
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	69db      	ldr	r3, [r3, #28]
 8001204:	021b      	lsls	r3, r3, #8
 8001206:	492c      	ldr	r1, [pc, #176]	@ (80012b8 <HAL_RCC_OscConfig+0x270>)
 8001208:	4313      	orrs	r3, r2
 800120a:	604b      	str	r3, [r1, #4]
 800120c:	e01a      	b.n	8001244 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800120e:	4b2a      	ldr	r3, [pc, #168]	@ (80012b8 <HAL_RCC_OscConfig+0x270>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4a29      	ldr	r2, [pc, #164]	@ (80012b8 <HAL_RCC_OscConfig+0x270>)
 8001214:	f023 0301 	bic.w	r3, r3, #1
 8001218:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800121a:	f7ff fbe3 	bl	80009e4 <HAL_GetTick>
 800121e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001220:	e008      	b.n	8001234 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001222:	f7ff fbdf 	bl	80009e4 <HAL_GetTick>
 8001226:	4602      	mov	r2, r0
 8001228:	693b      	ldr	r3, [r7, #16]
 800122a:	1ad3      	subs	r3, r2, r3
 800122c:	2b02      	cmp	r3, #2
 800122e:	d901      	bls.n	8001234 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001230:	2303      	movs	r3, #3
 8001232:	e2dd      	b.n	80017f0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001234:	4b20      	ldr	r3, [pc, #128]	@ (80012b8 <HAL_RCC_OscConfig+0x270>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f003 0302 	and.w	r3, r3, #2
 800123c:	2b00      	cmp	r3, #0
 800123e:	d1f0      	bne.n	8001222 <HAL_RCC_OscConfig+0x1da>
 8001240:	e000      	b.n	8001244 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001242:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f003 0301 	and.w	r3, r3, #1
 800124c:	2b00      	cmp	r3, #0
 800124e:	d074      	beq.n	800133a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001250:	69bb      	ldr	r3, [r7, #24]
 8001252:	2b08      	cmp	r3, #8
 8001254:	d005      	beq.n	8001262 <HAL_RCC_OscConfig+0x21a>
 8001256:	69bb      	ldr	r3, [r7, #24]
 8001258:	2b0c      	cmp	r3, #12
 800125a:	d10e      	bne.n	800127a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	2b03      	cmp	r3, #3
 8001260:	d10b      	bne.n	800127a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001262:	4b15      	ldr	r3, [pc, #84]	@ (80012b8 <HAL_RCC_OscConfig+0x270>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800126a:	2b00      	cmp	r3, #0
 800126c:	d064      	beq.n	8001338 <HAL_RCC_OscConfig+0x2f0>
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d160      	bne.n	8001338 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001276:	2301      	movs	r3, #1
 8001278:	e2ba      	b.n	80017f0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001282:	d106      	bne.n	8001292 <HAL_RCC_OscConfig+0x24a>
 8001284:	4b0c      	ldr	r3, [pc, #48]	@ (80012b8 <HAL_RCC_OscConfig+0x270>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a0b      	ldr	r2, [pc, #44]	@ (80012b8 <HAL_RCC_OscConfig+0x270>)
 800128a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800128e:	6013      	str	r3, [r2, #0]
 8001290:	e026      	b.n	80012e0 <HAL_RCC_OscConfig+0x298>
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800129a:	d115      	bne.n	80012c8 <HAL_RCC_OscConfig+0x280>
 800129c:	4b06      	ldr	r3, [pc, #24]	@ (80012b8 <HAL_RCC_OscConfig+0x270>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a05      	ldr	r2, [pc, #20]	@ (80012b8 <HAL_RCC_OscConfig+0x270>)
 80012a2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80012a6:	6013      	str	r3, [r2, #0]
 80012a8:	4b03      	ldr	r3, [pc, #12]	@ (80012b8 <HAL_RCC_OscConfig+0x270>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a02      	ldr	r2, [pc, #8]	@ (80012b8 <HAL_RCC_OscConfig+0x270>)
 80012ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80012b2:	6013      	str	r3, [r2, #0]
 80012b4:	e014      	b.n	80012e0 <HAL_RCC_OscConfig+0x298>
 80012b6:	bf00      	nop
 80012b8:	40021000 	.word	0x40021000
 80012bc:	08005d9c 	.word	0x08005d9c
 80012c0:	20000000 	.word	0x20000000
 80012c4:	20000004 	.word	0x20000004
 80012c8:	4ba0      	ldr	r3, [pc, #640]	@ (800154c <HAL_RCC_OscConfig+0x504>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a9f      	ldr	r2, [pc, #636]	@ (800154c <HAL_RCC_OscConfig+0x504>)
 80012ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80012d2:	6013      	str	r3, [r2, #0]
 80012d4:	4b9d      	ldr	r3, [pc, #628]	@ (800154c <HAL_RCC_OscConfig+0x504>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a9c      	ldr	r2, [pc, #624]	@ (800154c <HAL_RCC_OscConfig+0x504>)
 80012da:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80012de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d013      	beq.n	8001310 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012e8:	f7ff fb7c 	bl	80009e4 <HAL_GetTick>
 80012ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80012ee:	e008      	b.n	8001302 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012f0:	f7ff fb78 	bl	80009e4 <HAL_GetTick>
 80012f4:	4602      	mov	r2, r0
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	1ad3      	subs	r3, r2, r3
 80012fa:	2b64      	cmp	r3, #100	@ 0x64
 80012fc:	d901      	bls.n	8001302 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80012fe:	2303      	movs	r3, #3
 8001300:	e276      	b.n	80017f0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001302:	4b92      	ldr	r3, [pc, #584]	@ (800154c <HAL_RCC_OscConfig+0x504>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800130a:	2b00      	cmp	r3, #0
 800130c:	d0f0      	beq.n	80012f0 <HAL_RCC_OscConfig+0x2a8>
 800130e:	e014      	b.n	800133a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001310:	f7ff fb68 	bl	80009e4 <HAL_GetTick>
 8001314:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001316:	e008      	b.n	800132a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001318:	f7ff fb64 	bl	80009e4 <HAL_GetTick>
 800131c:	4602      	mov	r2, r0
 800131e:	693b      	ldr	r3, [r7, #16]
 8001320:	1ad3      	subs	r3, r2, r3
 8001322:	2b64      	cmp	r3, #100	@ 0x64
 8001324:	d901      	bls.n	800132a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001326:	2303      	movs	r3, #3
 8001328:	e262      	b.n	80017f0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800132a:	4b88      	ldr	r3, [pc, #544]	@ (800154c <HAL_RCC_OscConfig+0x504>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001332:	2b00      	cmp	r3, #0
 8001334:	d1f0      	bne.n	8001318 <HAL_RCC_OscConfig+0x2d0>
 8001336:	e000      	b.n	800133a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001338:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f003 0302 	and.w	r3, r3, #2
 8001342:	2b00      	cmp	r3, #0
 8001344:	d060      	beq.n	8001408 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001346:	69bb      	ldr	r3, [r7, #24]
 8001348:	2b04      	cmp	r3, #4
 800134a:	d005      	beq.n	8001358 <HAL_RCC_OscConfig+0x310>
 800134c:	69bb      	ldr	r3, [r7, #24]
 800134e:	2b0c      	cmp	r3, #12
 8001350:	d119      	bne.n	8001386 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001352:	697b      	ldr	r3, [r7, #20]
 8001354:	2b02      	cmp	r3, #2
 8001356:	d116      	bne.n	8001386 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001358:	4b7c      	ldr	r3, [pc, #496]	@ (800154c <HAL_RCC_OscConfig+0x504>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001360:	2b00      	cmp	r3, #0
 8001362:	d005      	beq.n	8001370 <HAL_RCC_OscConfig+0x328>
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	68db      	ldr	r3, [r3, #12]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d101      	bne.n	8001370 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800136c:	2301      	movs	r3, #1
 800136e:	e23f      	b.n	80017f0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001370:	4b76      	ldr	r3, [pc, #472]	@ (800154c <HAL_RCC_OscConfig+0x504>)
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	691b      	ldr	r3, [r3, #16]
 800137c:	061b      	lsls	r3, r3, #24
 800137e:	4973      	ldr	r1, [pc, #460]	@ (800154c <HAL_RCC_OscConfig+0x504>)
 8001380:	4313      	orrs	r3, r2
 8001382:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001384:	e040      	b.n	8001408 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	68db      	ldr	r3, [r3, #12]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d023      	beq.n	80013d6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800138e:	4b6f      	ldr	r3, [pc, #444]	@ (800154c <HAL_RCC_OscConfig+0x504>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4a6e      	ldr	r2, [pc, #440]	@ (800154c <HAL_RCC_OscConfig+0x504>)
 8001394:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001398:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800139a:	f7ff fb23 	bl	80009e4 <HAL_GetTick>
 800139e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80013a0:	e008      	b.n	80013b4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013a2:	f7ff fb1f 	bl	80009e4 <HAL_GetTick>
 80013a6:	4602      	mov	r2, r0
 80013a8:	693b      	ldr	r3, [r7, #16]
 80013aa:	1ad3      	subs	r3, r2, r3
 80013ac:	2b02      	cmp	r3, #2
 80013ae:	d901      	bls.n	80013b4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80013b0:	2303      	movs	r3, #3
 80013b2:	e21d      	b.n	80017f0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80013b4:	4b65      	ldr	r3, [pc, #404]	@ (800154c <HAL_RCC_OscConfig+0x504>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d0f0      	beq.n	80013a2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013c0:	4b62      	ldr	r3, [pc, #392]	@ (800154c <HAL_RCC_OscConfig+0x504>)
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	691b      	ldr	r3, [r3, #16]
 80013cc:	061b      	lsls	r3, r3, #24
 80013ce:	495f      	ldr	r1, [pc, #380]	@ (800154c <HAL_RCC_OscConfig+0x504>)
 80013d0:	4313      	orrs	r3, r2
 80013d2:	604b      	str	r3, [r1, #4]
 80013d4:	e018      	b.n	8001408 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013d6:	4b5d      	ldr	r3, [pc, #372]	@ (800154c <HAL_RCC_OscConfig+0x504>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4a5c      	ldr	r2, [pc, #368]	@ (800154c <HAL_RCC_OscConfig+0x504>)
 80013dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80013e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013e2:	f7ff faff 	bl	80009e4 <HAL_GetTick>
 80013e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80013e8:	e008      	b.n	80013fc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013ea:	f7ff fafb 	bl	80009e4 <HAL_GetTick>
 80013ee:	4602      	mov	r2, r0
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	1ad3      	subs	r3, r2, r3
 80013f4:	2b02      	cmp	r3, #2
 80013f6:	d901      	bls.n	80013fc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80013f8:	2303      	movs	r3, #3
 80013fa:	e1f9      	b.n	80017f0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80013fc:	4b53      	ldr	r3, [pc, #332]	@ (800154c <HAL_RCC_OscConfig+0x504>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001404:	2b00      	cmp	r3, #0
 8001406:	d1f0      	bne.n	80013ea <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f003 0308 	and.w	r3, r3, #8
 8001410:	2b00      	cmp	r3, #0
 8001412:	d03c      	beq.n	800148e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	695b      	ldr	r3, [r3, #20]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d01c      	beq.n	8001456 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800141c:	4b4b      	ldr	r3, [pc, #300]	@ (800154c <HAL_RCC_OscConfig+0x504>)
 800141e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001422:	4a4a      	ldr	r2, [pc, #296]	@ (800154c <HAL_RCC_OscConfig+0x504>)
 8001424:	f043 0301 	orr.w	r3, r3, #1
 8001428:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800142c:	f7ff fada 	bl	80009e4 <HAL_GetTick>
 8001430:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001432:	e008      	b.n	8001446 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001434:	f7ff fad6 	bl	80009e4 <HAL_GetTick>
 8001438:	4602      	mov	r2, r0
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	1ad3      	subs	r3, r2, r3
 800143e:	2b02      	cmp	r3, #2
 8001440:	d901      	bls.n	8001446 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001442:	2303      	movs	r3, #3
 8001444:	e1d4      	b.n	80017f0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001446:	4b41      	ldr	r3, [pc, #260]	@ (800154c <HAL_RCC_OscConfig+0x504>)
 8001448:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800144c:	f003 0302 	and.w	r3, r3, #2
 8001450:	2b00      	cmp	r3, #0
 8001452:	d0ef      	beq.n	8001434 <HAL_RCC_OscConfig+0x3ec>
 8001454:	e01b      	b.n	800148e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001456:	4b3d      	ldr	r3, [pc, #244]	@ (800154c <HAL_RCC_OscConfig+0x504>)
 8001458:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800145c:	4a3b      	ldr	r2, [pc, #236]	@ (800154c <HAL_RCC_OscConfig+0x504>)
 800145e:	f023 0301 	bic.w	r3, r3, #1
 8001462:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001466:	f7ff fabd 	bl	80009e4 <HAL_GetTick>
 800146a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800146c:	e008      	b.n	8001480 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800146e:	f7ff fab9 	bl	80009e4 <HAL_GetTick>
 8001472:	4602      	mov	r2, r0
 8001474:	693b      	ldr	r3, [r7, #16]
 8001476:	1ad3      	subs	r3, r2, r3
 8001478:	2b02      	cmp	r3, #2
 800147a:	d901      	bls.n	8001480 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800147c:	2303      	movs	r3, #3
 800147e:	e1b7      	b.n	80017f0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001480:	4b32      	ldr	r3, [pc, #200]	@ (800154c <HAL_RCC_OscConfig+0x504>)
 8001482:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001486:	f003 0302 	and.w	r3, r3, #2
 800148a:	2b00      	cmp	r3, #0
 800148c:	d1ef      	bne.n	800146e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f003 0304 	and.w	r3, r3, #4
 8001496:	2b00      	cmp	r3, #0
 8001498:	f000 80a6 	beq.w	80015e8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800149c:	2300      	movs	r3, #0
 800149e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80014a0:	4b2a      	ldr	r3, [pc, #168]	@ (800154c <HAL_RCC_OscConfig+0x504>)
 80014a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d10d      	bne.n	80014c8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014ac:	4b27      	ldr	r3, [pc, #156]	@ (800154c <HAL_RCC_OscConfig+0x504>)
 80014ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014b0:	4a26      	ldr	r2, [pc, #152]	@ (800154c <HAL_RCC_OscConfig+0x504>)
 80014b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014b6:	6593      	str	r3, [r2, #88]	@ 0x58
 80014b8:	4b24      	ldr	r3, [pc, #144]	@ (800154c <HAL_RCC_OscConfig+0x504>)
 80014ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014c0:	60bb      	str	r3, [r7, #8]
 80014c2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014c4:	2301      	movs	r3, #1
 80014c6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014c8:	4b21      	ldr	r3, [pc, #132]	@ (8001550 <HAL_RCC_OscConfig+0x508>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d118      	bne.n	8001506 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80014d4:	4b1e      	ldr	r3, [pc, #120]	@ (8001550 <HAL_RCC_OscConfig+0x508>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a1d      	ldr	r2, [pc, #116]	@ (8001550 <HAL_RCC_OscConfig+0x508>)
 80014da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014de:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014e0:	f7ff fa80 	bl	80009e4 <HAL_GetTick>
 80014e4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014e6:	e008      	b.n	80014fa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014e8:	f7ff fa7c 	bl	80009e4 <HAL_GetTick>
 80014ec:	4602      	mov	r2, r0
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	1ad3      	subs	r3, r2, r3
 80014f2:	2b02      	cmp	r3, #2
 80014f4:	d901      	bls.n	80014fa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80014f6:	2303      	movs	r3, #3
 80014f8:	e17a      	b.n	80017f0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014fa:	4b15      	ldr	r3, [pc, #84]	@ (8001550 <HAL_RCC_OscConfig+0x508>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001502:	2b00      	cmp	r3, #0
 8001504:	d0f0      	beq.n	80014e8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	689b      	ldr	r3, [r3, #8]
 800150a:	2b01      	cmp	r3, #1
 800150c:	d108      	bne.n	8001520 <HAL_RCC_OscConfig+0x4d8>
 800150e:	4b0f      	ldr	r3, [pc, #60]	@ (800154c <HAL_RCC_OscConfig+0x504>)
 8001510:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001514:	4a0d      	ldr	r2, [pc, #52]	@ (800154c <HAL_RCC_OscConfig+0x504>)
 8001516:	f043 0301 	orr.w	r3, r3, #1
 800151a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800151e:	e029      	b.n	8001574 <HAL_RCC_OscConfig+0x52c>
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	689b      	ldr	r3, [r3, #8]
 8001524:	2b05      	cmp	r3, #5
 8001526:	d115      	bne.n	8001554 <HAL_RCC_OscConfig+0x50c>
 8001528:	4b08      	ldr	r3, [pc, #32]	@ (800154c <HAL_RCC_OscConfig+0x504>)
 800152a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800152e:	4a07      	ldr	r2, [pc, #28]	@ (800154c <HAL_RCC_OscConfig+0x504>)
 8001530:	f043 0304 	orr.w	r3, r3, #4
 8001534:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001538:	4b04      	ldr	r3, [pc, #16]	@ (800154c <HAL_RCC_OscConfig+0x504>)
 800153a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800153e:	4a03      	ldr	r2, [pc, #12]	@ (800154c <HAL_RCC_OscConfig+0x504>)
 8001540:	f043 0301 	orr.w	r3, r3, #1
 8001544:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001548:	e014      	b.n	8001574 <HAL_RCC_OscConfig+0x52c>
 800154a:	bf00      	nop
 800154c:	40021000 	.word	0x40021000
 8001550:	40007000 	.word	0x40007000
 8001554:	4b9c      	ldr	r3, [pc, #624]	@ (80017c8 <HAL_RCC_OscConfig+0x780>)
 8001556:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800155a:	4a9b      	ldr	r2, [pc, #620]	@ (80017c8 <HAL_RCC_OscConfig+0x780>)
 800155c:	f023 0301 	bic.w	r3, r3, #1
 8001560:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001564:	4b98      	ldr	r3, [pc, #608]	@ (80017c8 <HAL_RCC_OscConfig+0x780>)
 8001566:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800156a:	4a97      	ldr	r2, [pc, #604]	@ (80017c8 <HAL_RCC_OscConfig+0x780>)
 800156c:	f023 0304 	bic.w	r3, r3, #4
 8001570:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	689b      	ldr	r3, [r3, #8]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d016      	beq.n	80015aa <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800157c:	f7ff fa32 	bl	80009e4 <HAL_GetTick>
 8001580:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001582:	e00a      	b.n	800159a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001584:	f7ff fa2e 	bl	80009e4 <HAL_GetTick>
 8001588:	4602      	mov	r2, r0
 800158a:	693b      	ldr	r3, [r7, #16]
 800158c:	1ad3      	subs	r3, r2, r3
 800158e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001592:	4293      	cmp	r3, r2
 8001594:	d901      	bls.n	800159a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001596:	2303      	movs	r3, #3
 8001598:	e12a      	b.n	80017f0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800159a:	4b8b      	ldr	r3, [pc, #556]	@ (80017c8 <HAL_RCC_OscConfig+0x780>)
 800159c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80015a0:	f003 0302 	and.w	r3, r3, #2
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d0ed      	beq.n	8001584 <HAL_RCC_OscConfig+0x53c>
 80015a8:	e015      	b.n	80015d6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015aa:	f7ff fa1b 	bl	80009e4 <HAL_GetTick>
 80015ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80015b0:	e00a      	b.n	80015c8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015b2:	f7ff fa17 	bl	80009e4 <HAL_GetTick>
 80015b6:	4602      	mov	r2, r0
 80015b8:	693b      	ldr	r3, [r7, #16]
 80015ba:	1ad3      	subs	r3, r2, r3
 80015bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015c0:	4293      	cmp	r3, r2
 80015c2:	d901      	bls.n	80015c8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80015c4:	2303      	movs	r3, #3
 80015c6:	e113      	b.n	80017f0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80015c8:	4b7f      	ldr	r3, [pc, #508]	@ (80017c8 <HAL_RCC_OscConfig+0x780>)
 80015ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80015ce:	f003 0302 	and.w	r3, r3, #2
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d1ed      	bne.n	80015b2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80015d6:	7ffb      	ldrb	r3, [r7, #31]
 80015d8:	2b01      	cmp	r3, #1
 80015da:	d105      	bne.n	80015e8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015dc:	4b7a      	ldr	r3, [pc, #488]	@ (80017c8 <HAL_RCC_OscConfig+0x780>)
 80015de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015e0:	4a79      	ldr	r2, [pc, #484]	@ (80017c8 <HAL_RCC_OscConfig+0x780>)
 80015e2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80015e6:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	f000 80fe 	beq.w	80017ee <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015f6:	2b02      	cmp	r3, #2
 80015f8:	f040 80d0 	bne.w	800179c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80015fc:	4b72      	ldr	r3, [pc, #456]	@ (80017c8 <HAL_RCC_OscConfig+0x780>)
 80015fe:	68db      	ldr	r3, [r3, #12]
 8001600:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001602:	697b      	ldr	r3, [r7, #20]
 8001604:	f003 0203 	and.w	r2, r3, #3
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800160c:	429a      	cmp	r2, r3
 800160e:	d130      	bne.n	8001672 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800161a:	3b01      	subs	r3, #1
 800161c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800161e:	429a      	cmp	r2, r3
 8001620:	d127      	bne.n	8001672 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001622:	697b      	ldr	r3, [r7, #20]
 8001624:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800162c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800162e:	429a      	cmp	r2, r3
 8001630:	d11f      	bne.n	8001672 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001632:	697b      	ldr	r3, [r7, #20]
 8001634:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001638:	687a      	ldr	r2, [r7, #4]
 800163a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800163c:	2a07      	cmp	r2, #7
 800163e:	bf14      	ite	ne
 8001640:	2201      	movne	r2, #1
 8001642:	2200      	moveq	r2, #0
 8001644:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001646:	4293      	cmp	r3, r2
 8001648:	d113      	bne.n	8001672 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001654:	085b      	lsrs	r3, r3, #1
 8001656:	3b01      	subs	r3, #1
 8001658:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800165a:	429a      	cmp	r2, r3
 800165c:	d109      	bne.n	8001672 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800165e:	697b      	ldr	r3, [r7, #20]
 8001660:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001668:	085b      	lsrs	r3, r3, #1
 800166a:	3b01      	subs	r3, #1
 800166c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800166e:	429a      	cmp	r2, r3
 8001670:	d06e      	beq.n	8001750 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001672:	69bb      	ldr	r3, [r7, #24]
 8001674:	2b0c      	cmp	r3, #12
 8001676:	d069      	beq.n	800174c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001678:	4b53      	ldr	r3, [pc, #332]	@ (80017c8 <HAL_RCC_OscConfig+0x780>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001680:	2b00      	cmp	r3, #0
 8001682:	d105      	bne.n	8001690 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001684:	4b50      	ldr	r3, [pc, #320]	@ (80017c8 <HAL_RCC_OscConfig+0x780>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800168c:	2b00      	cmp	r3, #0
 800168e:	d001      	beq.n	8001694 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001690:	2301      	movs	r3, #1
 8001692:	e0ad      	b.n	80017f0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001694:	4b4c      	ldr	r3, [pc, #304]	@ (80017c8 <HAL_RCC_OscConfig+0x780>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a4b      	ldr	r2, [pc, #300]	@ (80017c8 <HAL_RCC_OscConfig+0x780>)
 800169a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800169e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80016a0:	f7ff f9a0 	bl	80009e4 <HAL_GetTick>
 80016a4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016a6:	e008      	b.n	80016ba <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016a8:	f7ff f99c 	bl	80009e4 <HAL_GetTick>
 80016ac:	4602      	mov	r2, r0
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	1ad3      	subs	r3, r2, r3
 80016b2:	2b02      	cmp	r3, #2
 80016b4:	d901      	bls.n	80016ba <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80016b6:	2303      	movs	r3, #3
 80016b8:	e09a      	b.n	80017f0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016ba:	4b43      	ldr	r3, [pc, #268]	@ (80017c8 <HAL_RCC_OscConfig+0x780>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d1f0      	bne.n	80016a8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016c6:	4b40      	ldr	r3, [pc, #256]	@ (80017c8 <HAL_RCC_OscConfig+0x780>)
 80016c8:	68da      	ldr	r2, [r3, #12]
 80016ca:	4b40      	ldr	r3, [pc, #256]	@ (80017cc <HAL_RCC_OscConfig+0x784>)
 80016cc:	4013      	ands	r3, r2
 80016ce:	687a      	ldr	r2, [r7, #4]
 80016d0:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80016d2:	687a      	ldr	r2, [r7, #4]
 80016d4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80016d6:	3a01      	subs	r2, #1
 80016d8:	0112      	lsls	r2, r2, #4
 80016da:	4311      	orrs	r1, r2
 80016dc:	687a      	ldr	r2, [r7, #4]
 80016de:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80016e0:	0212      	lsls	r2, r2, #8
 80016e2:	4311      	orrs	r1, r2
 80016e4:	687a      	ldr	r2, [r7, #4]
 80016e6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80016e8:	0852      	lsrs	r2, r2, #1
 80016ea:	3a01      	subs	r2, #1
 80016ec:	0552      	lsls	r2, r2, #21
 80016ee:	4311      	orrs	r1, r2
 80016f0:	687a      	ldr	r2, [r7, #4]
 80016f2:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80016f4:	0852      	lsrs	r2, r2, #1
 80016f6:	3a01      	subs	r2, #1
 80016f8:	0652      	lsls	r2, r2, #25
 80016fa:	4311      	orrs	r1, r2
 80016fc:	687a      	ldr	r2, [r7, #4]
 80016fe:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001700:	0912      	lsrs	r2, r2, #4
 8001702:	0452      	lsls	r2, r2, #17
 8001704:	430a      	orrs	r2, r1
 8001706:	4930      	ldr	r1, [pc, #192]	@ (80017c8 <HAL_RCC_OscConfig+0x780>)
 8001708:	4313      	orrs	r3, r2
 800170a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800170c:	4b2e      	ldr	r3, [pc, #184]	@ (80017c8 <HAL_RCC_OscConfig+0x780>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a2d      	ldr	r2, [pc, #180]	@ (80017c8 <HAL_RCC_OscConfig+0x780>)
 8001712:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001716:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001718:	4b2b      	ldr	r3, [pc, #172]	@ (80017c8 <HAL_RCC_OscConfig+0x780>)
 800171a:	68db      	ldr	r3, [r3, #12]
 800171c:	4a2a      	ldr	r2, [pc, #168]	@ (80017c8 <HAL_RCC_OscConfig+0x780>)
 800171e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001722:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001724:	f7ff f95e 	bl	80009e4 <HAL_GetTick>
 8001728:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800172a:	e008      	b.n	800173e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800172c:	f7ff f95a 	bl	80009e4 <HAL_GetTick>
 8001730:	4602      	mov	r2, r0
 8001732:	693b      	ldr	r3, [r7, #16]
 8001734:	1ad3      	subs	r3, r2, r3
 8001736:	2b02      	cmp	r3, #2
 8001738:	d901      	bls.n	800173e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800173a:	2303      	movs	r3, #3
 800173c:	e058      	b.n	80017f0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800173e:	4b22      	ldr	r3, [pc, #136]	@ (80017c8 <HAL_RCC_OscConfig+0x780>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001746:	2b00      	cmp	r3, #0
 8001748:	d0f0      	beq.n	800172c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800174a:	e050      	b.n	80017ee <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800174c:	2301      	movs	r3, #1
 800174e:	e04f      	b.n	80017f0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001750:	4b1d      	ldr	r3, [pc, #116]	@ (80017c8 <HAL_RCC_OscConfig+0x780>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001758:	2b00      	cmp	r3, #0
 800175a:	d148      	bne.n	80017ee <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800175c:	4b1a      	ldr	r3, [pc, #104]	@ (80017c8 <HAL_RCC_OscConfig+0x780>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a19      	ldr	r2, [pc, #100]	@ (80017c8 <HAL_RCC_OscConfig+0x780>)
 8001762:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001766:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001768:	4b17      	ldr	r3, [pc, #92]	@ (80017c8 <HAL_RCC_OscConfig+0x780>)
 800176a:	68db      	ldr	r3, [r3, #12]
 800176c:	4a16      	ldr	r2, [pc, #88]	@ (80017c8 <HAL_RCC_OscConfig+0x780>)
 800176e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001772:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001774:	f7ff f936 	bl	80009e4 <HAL_GetTick>
 8001778:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800177a:	e008      	b.n	800178e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800177c:	f7ff f932 	bl	80009e4 <HAL_GetTick>
 8001780:	4602      	mov	r2, r0
 8001782:	693b      	ldr	r3, [r7, #16]
 8001784:	1ad3      	subs	r3, r2, r3
 8001786:	2b02      	cmp	r3, #2
 8001788:	d901      	bls.n	800178e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800178a:	2303      	movs	r3, #3
 800178c:	e030      	b.n	80017f0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800178e:	4b0e      	ldr	r3, [pc, #56]	@ (80017c8 <HAL_RCC_OscConfig+0x780>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001796:	2b00      	cmp	r3, #0
 8001798:	d0f0      	beq.n	800177c <HAL_RCC_OscConfig+0x734>
 800179a:	e028      	b.n	80017ee <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800179c:	69bb      	ldr	r3, [r7, #24]
 800179e:	2b0c      	cmp	r3, #12
 80017a0:	d023      	beq.n	80017ea <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017a2:	4b09      	ldr	r3, [pc, #36]	@ (80017c8 <HAL_RCC_OscConfig+0x780>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4a08      	ldr	r2, [pc, #32]	@ (80017c8 <HAL_RCC_OscConfig+0x780>)
 80017a8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80017ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017ae:	f7ff f919 	bl	80009e4 <HAL_GetTick>
 80017b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017b4:	e00c      	b.n	80017d0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017b6:	f7ff f915 	bl	80009e4 <HAL_GetTick>
 80017ba:	4602      	mov	r2, r0
 80017bc:	693b      	ldr	r3, [r7, #16]
 80017be:	1ad3      	subs	r3, r2, r3
 80017c0:	2b02      	cmp	r3, #2
 80017c2:	d905      	bls.n	80017d0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80017c4:	2303      	movs	r3, #3
 80017c6:	e013      	b.n	80017f0 <HAL_RCC_OscConfig+0x7a8>
 80017c8:	40021000 	.word	0x40021000
 80017cc:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017d0:	4b09      	ldr	r3, [pc, #36]	@ (80017f8 <HAL_RCC_OscConfig+0x7b0>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d1ec      	bne.n	80017b6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80017dc:	4b06      	ldr	r3, [pc, #24]	@ (80017f8 <HAL_RCC_OscConfig+0x7b0>)
 80017de:	68da      	ldr	r2, [r3, #12]
 80017e0:	4905      	ldr	r1, [pc, #20]	@ (80017f8 <HAL_RCC_OscConfig+0x7b0>)
 80017e2:	4b06      	ldr	r3, [pc, #24]	@ (80017fc <HAL_RCC_OscConfig+0x7b4>)
 80017e4:	4013      	ands	r3, r2
 80017e6:	60cb      	str	r3, [r1, #12]
 80017e8:	e001      	b.n	80017ee <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	e000      	b.n	80017f0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80017ee:	2300      	movs	r3, #0
}
 80017f0:	4618      	mov	r0, r3
 80017f2:	3720      	adds	r7, #32
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	40021000 	.word	0x40021000
 80017fc:	feeefffc 	.word	0xfeeefffc

08001800 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b084      	sub	sp, #16
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
 8001808:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d101      	bne.n	8001814 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001810:	2301      	movs	r3, #1
 8001812:	e0e7      	b.n	80019e4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001814:	4b75      	ldr	r3, [pc, #468]	@ (80019ec <HAL_RCC_ClockConfig+0x1ec>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f003 0307 	and.w	r3, r3, #7
 800181c:	683a      	ldr	r2, [r7, #0]
 800181e:	429a      	cmp	r2, r3
 8001820:	d910      	bls.n	8001844 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001822:	4b72      	ldr	r3, [pc, #456]	@ (80019ec <HAL_RCC_ClockConfig+0x1ec>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f023 0207 	bic.w	r2, r3, #7
 800182a:	4970      	ldr	r1, [pc, #448]	@ (80019ec <HAL_RCC_ClockConfig+0x1ec>)
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	4313      	orrs	r3, r2
 8001830:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001832:	4b6e      	ldr	r3, [pc, #440]	@ (80019ec <HAL_RCC_ClockConfig+0x1ec>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f003 0307 	and.w	r3, r3, #7
 800183a:	683a      	ldr	r2, [r7, #0]
 800183c:	429a      	cmp	r2, r3
 800183e:	d001      	beq.n	8001844 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001840:	2301      	movs	r3, #1
 8001842:	e0cf      	b.n	80019e4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f003 0302 	and.w	r3, r3, #2
 800184c:	2b00      	cmp	r3, #0
 800184e:	d010      	beq.n	8001872 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	689a      	ldr	r2, [r3, #8]
 8001854:	4b66      	ldr	r3, [pc, #408]	@ (80019f0 <HAL_RCC_ClockConfig+0x1f0>)
 8001856:	689b      	ldr	r3, [r3, #8]
 8001858:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800185c:	429a      	cmp	r2, r3
 800185e:	d908      	bls.n	8001872 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001860:	4b63      	ldr	r3, [pc, #396]	@ (80019f0 <HAL_RCC_ClockConfig+0x1f0>)
 8001862:	689b      	ldr	r3, [r3, #8]
 8001864:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	689b      	ldr	r3, [r3, #8]
 800186c:	4960      	ldr	r1, [pc, #384]	@ (80019f0 <HAL_RCC_ClockConfig+0x1f0>)
 800186e:	4313      	orrs	r3, r2
 8001870:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f003 0301 	and.w	r3, r3, #1
 800187a:	2b00      	cmp	r3, #0
 800187c:	d04c      	beq.n	8001918 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	2b03      	cmp	r3, #3
 8001884:	d107      	bne.n	8001896 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001886:	4b5a      	ldr	r3, [pc, #360]	@ (80019f0 <HAL_RCC_ClockConfig+0x1f0>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800188e:	2b00      	cmp	r3, #0
 8001890:	d121      	bne.n	80018d6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001892:	2301      	movs	r3, #1
 8001894:	e0a6      	b.n	80019e4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	2b02      	cmp	r3, #2
 800189c:	d107      	bne.n	80018ae <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800189e:	4b54      	ldr	r3, [pc, #336]	@ (80019f0 <HAL_RCC_ClockConfig+0x1f0>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d115      	bne.n	80018d6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	e09a      	b.n	80019e4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d107      	bne.n	80018c6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80018b6:	4b4e      	ldr	r3, [pc, #312]	@ (80019f0 <HAL_RCC_ClockConfig+0x1f0>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f003 0302 	and.w	r3, r3, #2
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d109      	bne.n	80018d6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
 80018c4:	e08e      	b.n	80019e4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018c6:	4b4a      	ldr	r3, [pc, #296]	@ (80019f0 <HAL_RCC_ClockConfig+0x1f0>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d101      	bne.n	80018d6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
 80018d4:	e086      	b.n	80019e4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80018d6:	4b46      	ldr	r3, [pc, #280]	@ (80019f0 <HAL_RCC_ClockConfig+0x1f0>)
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	f023 0203 	bic.w	r2, r3, #3
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	4943      	ldr	r1, [pc, #268]	@ (80019f0 <HAL_RCC_ClockConfig+0x1f0>)
 80018e4:	4313      	orrs	r3, r2
 80018e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80018e8:	f7ff f87c 	bl	80009e4 <HAL_GetTick>
 80018ec:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018ee:	e00a      	b.n	8001906 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018f0:	f7ff f878 	bl	80009e4 <HAL_GetTick>
 80018f4:	4602      	mov	r2, r0
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	1ad3      	subs	r3, r2, r3
 80018fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018fe:	4293      	cmp	r3, r2
 8001900:	d901      	bls.n	8001906 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001902:	2303      	movs	r3, #3
 8001904:	e06e      	b.n	80019e4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001906:	4b3a      	ldr	r3, [pc, #232]	@ (80019f0 <HAL_RCC_ClockConfig+0x1f0>)
 8001908:	689b      	ldr	r3, [r3, #8]
 800190a:	f003 020c 	and.w	r2, r3, #12
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	009b      	lsls	r3, r3, #2
 8001914:	429a      	cmp	r2, r3
 8001916:	d1eb      	bne.n	80018f0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f003 0302 	and.w	r3, r3, #2
 8001920:	2b00      	cmp	r3, #0
 8001922:	d010      	beq.n	8001946 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	689a      	ldr	r2, [r3, #8]
 8001928:	4b31      	ldr	r3, [pc, #196]	@ (80019f0 <HAL_RCC_ClockConfig+0x1f0>)
 800192a:	689b      	ldr	r3, [r3, #8]
 800192c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001930:	429a      	cmp	r2, r3
 8001932:	d208      	bcs.n	8001946 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001934:	4b2e      	ldr	r3, [pc, #184]	@ (80019f0 <HAL_RCC_ClockConfig+0x1f0>)
 8001936:	689b      	ldr	r3, [r3, #8]
 8001938:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	492b      	ldr	r1, [pc, #172]	@ (80019f0 <HAL_RCC_ClockConfig+0x1f0>)
 8001942:	4313      	orrs	r3, r2
 8001944:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001946:	4b29      	ldr	r3, [pc, #164]	@ (80019ec <HAL_RCC_ClockConfig+0x1ec>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f003 0307 	and.w	r3, r3, #7
 800194e:	683a      	ldr	r2, [r7, #0]
 8001950:	429a      	cmp	r2, r3
 8001952:	d210      	bcs.n	8001976 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001954:	4b25      	ldr	r3, [pc, #148]	@ (80019ec <HAL_RCC_ClockConfig+0x1ec>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f023 0207 	bic.w	r2, r3, #7
 800195c:	4923      	ldr	r1, [pc, #140]	@ (80019ec <HAL_RCC_ClockConfig+0x1ec>)
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	4313      	orrs	r3, r2
 8001962:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001964:	4b21      	ldr	r3, [pc, #132]	@ (80019ec <HAL_RCC_ClockConfig+0x1ec>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f003 0307 	and.w	r3, r3, #7
 800196c:	683a      	ldr	r2, [r7, #0]
 800196e:	429a      	cmp	r2, r3
 8001970:	d001      	beq.n	8001976 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001972:	2301      	movs	r3, #1
 8001974:	e036      	b.n	80019e4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f003 0304 	and.w	r3, r3, #4
 800197e:	2b00      	cmp	r3, #0
 8001980:	d008      	beq.n	8001994 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001982:	4b1b      	ldr	r3, [pc, #108]	@ (80019f0 <HAL_RCC_ClockConfig+0x1f0>)
 8001984:	689b      	ldr	r3, [r3, #8]
 8001986:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	68db      	ldr	r3, [r3, #12]
 800198e:	4918      	ldr	r1, [pc, #96]	@ (80019f0 <HAL_RCC_ClockConfig+0x1f0>)
 8001990:	4313      	orrs	r3, r2
 8001992:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f003 0308 	and.w	r3, r3, #8
 800199c:	2b00      	cmp	r3, #0
 800199e:	d009      	beq.n	80019b4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80019a0:	4b13      	ldr	r3, [pc, #76]	@ (80019f0 <HAL_RCC_ClockConfig+0x1f0>)
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	691b      	ldr	r3, [r3, #16]
 80019ac:	00db      	lsls	r3, r3, #3
 80019ae:	4910      	ldr	r1, [pc, #64]	@ (80019f0 <HAL_RCC_ClockConfig+0x1f0>)
 80019b0:	4313      	orrs	r3, r2
 80019b2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80019b4:	f000 f824 	bl	8001a00 <HAL_RCC_GetSysClockFreq>
 80019b8:	4602      	mov	r2, r0
 80019ba:	4b0d      	ldr	r3, [pc, #52]	@ (80019f0 <HAL_RCC_ClockConfig+0x1f0>)
 80019bc:	689b      	ldr	r3, [r3, #8]
 80019be:	091b      	lsrs	r3, r3, #4
 80019c0:	f003 030f 	and.w	r3, r3, #15
 80019c4:	490b      	ldr	r1, [pc, #44]	@ (80019f4 <HAL_RCC_ClockConfig+0x1f4>)
 80019c6:	5ccb      	ldrb	r3, [r1, r3]
 80019c8:	f003 031f 	and.w	r3, r3, #31
 80019cc:	fa22 f303 	lsr.w	r3, r2, r3
 80019d0:	4a09      	ldr	r2, [pc, #36]	@ (80019f8 <HAL_RCC_ClockConfig+0x1f8>)
 80019d2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80019d4:	4b09      	ldr	r3, [pc, #36]	@ (80019fc <HAL_RCC_ClockConfig+0x1fc>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4618      	mov	r0, r3
 80019da:	f7fe ffb3 	bl	8000944 <HAL_InitTick>
 80019de:	4603      	mov	r3, r0
 80019e0:	72fb      	strb	r3, [r7, #11]

  return status;
 80019e2:	7afb      	ldrb	r3, [r7, #11]
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	3710      	adds	r7, #16
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	40022000 	.word	0x40022000
 80019f0:	40021000 	.word	0x40021000
 80019f4:	08005d9c 	.word	0x08005d9c
 80019f8:	20000000 	.word	0x20000000
 80019fc:	20000004 	.word	0x20000004

08001a00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b089      	sub	sp, #36	@ 0x24
 8001a04:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001a06:	2300      	movs	r3, #0
 8001a08:	61fb      	str	r3, [r7, #28]
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a0e:	4b3e      	ldr	r3, [pc, #248]	@ (8001b08 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a10:	689b      	ldr	r3, [r3, #8]
 8001a12:	f003 030c 	and.w	r3, r3, #12
 8001a16:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a18:	4b3b      	ldr	r3, [pc, #236]	@ (8001b08 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a1a:	68db      	ldr	r3, [r3, #12]
 8001a1c:	f003 0303 	and.w	r3, r3, #3
 8001a20:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001a22:	693b      	ldr	r3, [r7, #16]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d005      	beq.n	8001a34 <HAL_RCC_GetSysClockFreq+0x34>
 8001a28:	693b      	ldr	r3, [r7, #16]
 8001a2a:	2b0c      	cmp	r3, #12
 8001a2c:	d121      	bne.n	8001a72 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	2b01      	cmp	r3, #1
 8001a32:	d11e      	bne.n	8001a72 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001a34:	4b34      	ldr	r3, [pc, #208]	@ (8001b08 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f003 0308 	and.w	r3, r3, #8
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d107      	bne.n	8001a50 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001a40:	4b31      	ldr	r3, [pc, #196]	@ (8001b08 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a42:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a46:	0a1b      	lsrs	r3, r3, #8
 8001a48:	f003 030f 	and.w	r3, r3, #15
 8001a4c:	61fb      	str	r3, [r7, #28]
 8001a4e:	e005      	b.n	8001a5c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001a50:	4b2d      	ldr	r3, [pc, #180]	@ (8001b08 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	091b      	lsrs	r3, r3, #4
 8001a56:	f003 030f 	and.w	r3, r3, #15
 8001a5a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001a5c:	4a2b      	ldr	r2, [pc, #172]	@ (8001b0c <HAL_RCC_GetSysClockFreq+0x10c>)
 8001a5e:	69fb      	ldr	r3, [r7, #28]
 8001a60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a64:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d10d      	bne.n	8001a88 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001a6c:	69fb      	ldr	r3, [r7, #28]
 8001a6e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001a70:	e00a      	b.n	8001a88 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	2b04      	cmp	r3, #4
 8001a76:	d102      	bne.n	8001a7e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001a78:	4b25      	ldr	r3, [pc, #148]	@ (8001b10 <HAL_RCC_GetSysClockFreq+0x110>)
 8001a7a:	61bb      	str	r3, [r7, #24]
 8001a7c:	e004      	b.n	8001a88 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	2b08      	cmp	r3, #8
 8001a82:	d101      	bne.n	8001a88 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001a84:	4b23      	ldr	r3, [pc, #140]	@ (8001b14 <HAL_RCC_GetSysClockFreq+0x114>)
 8001a86:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	2b0c      	cmp	r3, #12
 8001a8c:	d134      	bne.n	8001af8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001a8e:	4b1e      	ldr	r3, [pc, #120]	@ (8001b08 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a90:	68db      	ldr	r3, [r3, #12]
 8001a92:	f003 0303 	and.w	r3, r3, #3
 8001a96:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001a98:	68bb      	ldr	r3, [r7, #8]
 8001a9a:	2b02      	cmp	r3, #2
 8001a9c:	d003      	beq.n	8001aa6 <HAL_RCC_GetSysClockFreq+0xa6>
 8001a9e:	68bb      	ldr	r3, [r7, #8]
 8001aa0:	2b03      	cmp	r3, #3
 8001aa2:	d003      	beq.n	8001aac <HAL_RCC_GetSysClockFreq+0xac>
 8001aa4:	e005      	b.n	8001ab2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001aa6:	4b1a      	ldr	r3, [pc, #104]	@ (8001b10 <HAL_RCC_GetSysClockFreq+0x110>)
 8001aa8:	617b      	str	r3, [r7, #20]
      break;
 8001aaa:	e005      	b.n	8001ab8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001aac:	4b19      	ldr	r3, [pc, #100]	@ (8001b14 <HAL_RCC_GetSysClockFreq+0x114>)
 8001aae:	617b      	str	r3, [r7, #20]
      break;
 8001ab0:	e002      	b.n	8001ab8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001ab2:	69fb      	ldr	r3, [r7, #28]
 8001ab4:	617b      	str	r3, [r7, #20]
      break;
 8001ab6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001ab8:	4b13      	ldr	r3, [pc, #76]	@ (8001b08 <HAL_RCC_GetSysClockFreq+0x108>)
 8001aba:	68db      	ldr	r3, [r3, #12]
 8001abc:	091b      	lsrs	r3, r3, #4
 8001abe:	f003 0307 	and.w	r3, r3, #7
 8001ac2:	3301      	adds	r3, #1
 8001ac4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001ac6:	4b10      	ldr	r3, [pc, #64]	@ (8001b08 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ac8:	68db      	ldr	r3, [r3, #12]
 8001aca:	0a1b      	lsrs	r3, r3, #8
 8001acc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001ad0:	697a      	ldr	r2, [r7, #20]
 8001ad2:	fb03 f202 	mul.w	r2, r3, r2
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001adc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001ade:	4b0a      	ldr	r3, [pc, #40]	@ (8001b08 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ae0:	68db      	ldr	r3, [r3, #12]
 8001ae2:	0e5b      	lsrs	r3, r3, #25
 8001ae4:	f003 0303 	and.w	r3, r3, #3
 8001ae8:	3301      	adds	r3, #1
 8001aea:	005b      	lsls	r3, r3, #1
 8001aec:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001aee:	697a      	ldr	r2, [r7, #20]
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001af6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001af8:	69bb      	ldr	r3, [r7, #24]
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3724      	adds	r7, #36	@ 0x24
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr
 8001b06:	bf00      	nop
 8001b08:	40021000 	.word	0x40021000
 8001b0c:	08005db4 	.word	0x08005db4
 8001b10:	00f42400 	.word	0x00f42400
 8001b14:	007a1200 	.word	0x007a1200

08001b18 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b1c:	4b03      	ldr	r3, [pc, #12]	@ (8001b2c <HAL_RCC_GetHCLKFreq+0x14>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr
 8001b2a:	bf00      	nop
 8001b2c:	20000000 	.word	0x20000000

08001b30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001b34:	f7ff fff0 	bl	8001b18 <HAL_RCC_GetHCLKFreq>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	4b06      	ldr	r3, [pc, #24]	@ (8001b54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	0a1b      	lsrs	r3, r3, #8
 8001b40:	f003 0307 	and.w	r3, r3, #7
 8001b44:	4904      	ldr	r1, [pc, #16]	@ (8001b58 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001b46:	5ccb      	ldrb	r3, [r1, r3]
 8001b48:	f003 031f 	and.w	r3, r3, #31
 8001b4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	40021000 	.word	0x40021000
 8001b58:	08005dac 	.word	0x08005dac

08001b5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001b60:	f7ff ffda 	bl	8001b18 <HAL_RCC_GetHCLKFreq>
 8001b64:	4602      	mov	r2, r0
 8001b66:	4b06      	ldr	r3, [pc, #24]	@ (8001b80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	0adb      	lsrs	r3, r3, #11
 8001b6c:	f003 0307 	and.w	r3, r3, #7
 8001b70:	4904      	ldr	r1, [pc, #16]	@ (8001b84 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001b72:	5ccb      	ldrb	r3, [r1, r3]
 8001b74:	f003 031f 	and.w	r3, r3, #31
 8001b78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	40021000 	.word	0x40021000
 8001b84:	08005dac 	.word	0x08005dac

08001b88 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b086      	sub	sp, #24
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001b90:	2300      	movs	r3, #0
 8001b92:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001b94:	4b2a      	ldr	r3, [pc, #168]	@ (8001c40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b98:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d003      	beq.n	8001ba8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001ba0:	f7ff f9ee 	bl	8000f80 <HAL_PWREx_GetVoltageRange>
 8001ba4:	6178      	str	r0, [r7, #20]
 8001ba6:	e014      	b.n	8001bd2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001ba8:	4b25      	ldr	r3, [pc, #148]	@ (8001c40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001baa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bac:	4a24      	ldr	r2, [pc, #144]	@ (8001c40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001bae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001bb2:	6593      	str	r3, [r2, #88]	@ 0x58
 8001bb4:	4b22      	ldr	r3, [pc, #136]	@ (8001c40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001bb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bb8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bbc:	60fb      	str	r3, [r7, #12]
 8001bbe:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001bc0:	f7ff f9de 	bl	8000f80 <HAL_PWREx_GetVoltageRange>
 8001bc4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001bc6:	4b1e      	ldr	r3, [pc, #120]	@ (8001c40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001bc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bca:	4a1d      	ldr	r2, [pc, #116]	@ (8001c40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001bcc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001bd0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001bd8:	d10b      	bne.n	8001bf2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2b80      	cmp	r3, #128	@ 0x80
 8001bde:	d919      	bls.n	8001c14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2ba0      	cmp	r3, #160	@ 0xa0
 8001be4:	d902      	bls.n	8001bec <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001be6:	2302      	movs	r3, #2
 8001be8:	613b      	str	r3, [r7, #16]
 8001bea:	e013      	b.n	8001c14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001bec:	2301      	movs	r3, #1
 8001bee:	613b      	str	r3, [r7, #16]
 8001bf0:	e010      	b.n	8001c14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2b80      	cmp	r3, #128	@ 0x80
 8001bf6:	d902      	bls.n	8001bfe <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001bf8:	2303      	movs	r3, #3
 8001bfa:	613b      	str	r3, [r7, #16]
 8001bfc:	e00a      	b.n	8001c14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2b80      	cmp	r3, #128	@ 0x80
 8001c02:	d102      	bne.n	8001c0a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001c04:	2302      	movs	r3, #2
 8001c06:	613b      	str	r3, [r7, #16]
 8001c08:	e004      	b.n	8001c14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2b70      	cmp	r3, #112	@ 0x70
 8001c0e:	d101      	bne.n	8001c14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001c10:	2301      	movs	r3, #1
 8001c12:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001c14:	4b0b      	ldr	r3, [pc, #44]	@ (8001c44 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f023 0207 	bic.w	r2, r3, #7
 8001c1c:	4909      	ldr	r1, [pc, #36]	@ (8001c44 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	4313      	orrs	r3, r2
 8001c22:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001c24:	4b07      	ldr	r3, [pc, #28]	@ (8001c44 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f003 0307 	and.w	r3, r3, #7
 8001c2c:	693a      	ldr	r2, [r7, #16]
 8001c2e:	429a      	cmp	r2, r3
 8001c30:	d001      	beq.n	8001c36 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	e000      	b.n	8001c38 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001c36:	2300      	movs	r3, #0
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	3718      	adds	r7, #24
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	40021000 	.word	0x40021000
 8001c44:	40022000 	.word	0x40022000

08001c48 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b086      	sub	sp, #24
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001c50:	2300      	movs	r3, #0
 8001c52:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001c54:	2300      	movs	r3, #0
 8001c56:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d041      	beq.n	8001ce8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001c68:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001c6c:	d02a      	beq.n	8001cc4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001c6e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001c72:	d824      	bhi.n	8001cbe <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001c74:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001c78:	d008      	beq.n	8001c8c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001c7a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001c7e:	d81e      	bhi.n	8001cbe <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d00a      	beq.n	8001c9a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001c84:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001c88:	d010      	beq.n	8001cac <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001c8a:	e018      	b.n	8001cbe <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001c8c:	4b86      	ldr	r3, [pc, #536]	@ (8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001c8e:	68db      	ldr	r3, [r3, #12]
 8001c90:	4a85      	ldr	r2, [pc, #532]	@ (8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001c92:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c96:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001c98:	e015      	b.n	8001cc6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	3304      	adds	r3, #4
 8001c9e:	2100      	movs	r1, #0
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f000 fabb 	bl	800221c <RCCEx_PLLSAI1_Config>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001caa:	e00c      	b.n	8001cc6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	3320      	adds	r3, #32
 8001cb0:	2100      	movs	r1, #0
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f000 fba6 	bl	8002404 <RCCEx_PLLSAI2_Config>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001cbc:	e003      	b.n	8001cc6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	74fb      	strb	r3, [r7, #19]
      break;
 8001cc2:	e000      	b.n	8001cc6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001cc4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001cc6:	7cfb      	ldrb	r3, [r7, #19]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d10b      	bne.n	8001ce4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001ccc:	4b76      	ldr	r3, [pc, #472]	@ (8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001cce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001cd2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001cda:	4973      	ldr	r1, [pc, #460]	@ (8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8001ce2:	e001      	b.n	8001ce8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001ce4:	7cfb      	ldrb	r3, [r7, #19]
 8001ce6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d041      	beq.n	8001d78 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001cf8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8001cfc:	d02a      	beq.n	8001d54 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8001cfe:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8001d02:	d824      	bhi.n	8001d4e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001d04:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001d08:	d008      	beq.n	8001d1c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001d0a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001d0e:	d81e      	bhi.n	8001d4e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d00a      	beq.n	8001d2a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8001d14:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d18:	d010      	beq.n	8001d3c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001d1a:	e018      	b.n	8001d4e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001d1c:	4b62      	ldr	r3, [pc, #392]	@ (8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d1e:	68db      	ldr	r3, [r3, #12]
 8001d20:	4a61      	ldr	r2, [pc, #388]	@ (8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d22:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d26:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001d28:	e015      	b.n	8001d56 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	3304      	adds	r3, #4
 8001d2e:	2100      	movs	r1, #0
 8001d30:	4618      	mov	r0, r3
 8001d32:	f000 fa73 	bl	800221c <RCCEx_PLLSAI1_Config>
 8001d36:	4603      	mov	r3, r0
 8001d38:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001d3a:	e00c      	b.n	8001d56 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	3320      	adds	r3, #32
 8001d40:	2100      	movs	r1, #0
 8001d42:	4618      	mov	r0, r3
 8001d44:	f000 fb5e 	bl	8002404 <RCCEx_PLLSAI2_Config>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001d4c:	e003      	b.n	8001d56 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	74fb      	strb	r3, [r7, #19]
      break;
 8001d52:	e000      	b.n	8001d56 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8001d54:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001d56:	7cfb      	ldrb	r3, [r7, #19]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d10b      	bne.n	8001d74 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001d5c:	4b52      	ldr	r3, [pc, #328]	@ (8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d62:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001d6a:	494f      	ldr	r1, [pc, #316]	@ (8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8001d72:	e001      	b.n	8001d78 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001d74:	7cfb      	ldrb	r3, [r7, #19]
 8001d76:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	f000 80a0 	beq.w	8001ec6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d86:	2300      	movs	r3, #0
 8001d88:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001d8a:	4b47      	ldr	r3, [pc, #284]	@ (8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d101      	bne.n	8001d9a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8001d96:	2301      	movs	r3, #1
 8001d98:	e000      	b.n	8001d9c <HAL_RCCEx_PeriphCLKConfig+0x154>
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d00d      	beq.n	8001dbc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001da0:	4b41      	ldr	r3, [pc, #260]	@ (8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001da2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001da4:	4a40      	ldr	r2, [pc, #256]	@ (8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001da6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001daa:	6593      	str	r3, [r2, #88]	@ 0x58
 8001dac:	4b3e      	ldr	r3, [pc, #248]	@ (8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001dae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001db0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001db4:	60bb      	str	r3, [r7, #8]
 8001db6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001db8:	2301      	movs	r3, #1
 8001dba:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001dbc:	4b3b      	ldr	r3, [pc, #236]	@ (8001eac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a3a      	ldr	r2, [pc, #232]	@ (8001eac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001dc2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001dc6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001dc8:	f7fe fe0c 	bl	80009e4 <HAL_GetTick>
 8001dcc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001dce:	e009      	b.n	8001de4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dd0:	f7fe fe08 	bl	80009e4 <HAL_GetTick>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	1ad3      	subs	r3, r2, r3
 8001dda:	2b02      	cmp	r3, #2
 8001ddc:	d902      	bls.n	8001de4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8001dde:	2303      	movs	r3, #3
 8001de0:	74fb      	strb	r3, [r7, #19]
        break;
 8001de2:	e005      	b.n	8001df0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001de4:	4b31      	ldr	r3, [pc, #196]	@ (8001eac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d0ef      	beq.n	8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8001df0:	7cfb      	ldrb	r3, [r7, #19]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d15c      	bne.n	8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001df6:	4b2c      	ldr	r3, [pc, #176]	@ (8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001df8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001dfc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001e00:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d01f      	beq.n	8001e48 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001e0e:	697a      	ldr	r2, [r7, #20]
 8001e10:	429a      	cmp	r2, r3
 8001e12:	d019      	beq.n	8001e48 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001e14:	4b24      	ldr	r3, [pc, #144]	@ (8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e1a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001e1e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001e20:	4b21      	ldr	r3, [pc, #132]	@ (8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e26:	4a20      	ldr	r2, [pc, #128]	@ (8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e28:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e2c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001e30:	4b1d      	ldr	r3, [pc, #116]	@ (8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e36:	4a1c      	ldr	r2, [pc, #112]	@ (8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e38:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e3c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001e40:	4a19      	ldr	r2, [pc, #100]	@ (8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	f003 0301 	and.w	r3, r3, #1
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d016      	beq.n	8001e80 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e52:	f7fe fdc7 	bl	80009e4 <HAL_GetTick>
 8001e56:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e58:	e00b      	b.n	8001e72 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e5a:	f7fe fdc3 	bl	80009e4 <HAL_GetTick>
 8001e5e:	4602      	mov	r2, r0
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	1ad3      	subs	r3, r2, r3
 8001e64:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d902      	bls.n	8001e72 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8001e6c:	2303      	movs	r3, #3
 8001e6e:	74fb      	strb	r3, [r7, #19]
            break;
 8001e70:	e006      	b.n	8001e80 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e72:	4b0d      	ldr	r3, [pc, #52]	@ (8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e78:	f003 0302 	and.w	r3, r3, #2
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d0ec      	beq.n	8001e5a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8001e80:	7cfb      	ldrb	r3, [r7, #19]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d10c      	bne.n	8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001e86:	4b08      	ldr	r3, [pc, #32]	@ (8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e8c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001e96:	4904      	ldr	r1, [pc, #16]	@ (8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8001e9e:	e009      	b.n	8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001ea0:	7cfb      	ldrb	r3, [r7, #19]
 8001ea2:	74bb      	strb	r3, [r7, #18]
 8001ea4:	e006      	b.n	8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8001ea6:	bf00      	nop
 8001ea8:	40021000 	.word	0x40021000
 8001eac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001eb0:	7cfb      	ldrb	r3, [r7, #19]
 8001eb2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001eb4:	7c7b      	ldrb	r3, [r7, #17]
 8001eb6:	2b01      	cmp	r3, #1
 8001eb8:	d105      	bne.n	8001ec6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001eba:	4b9e      	ldr	r3, [pc, #632]	@ (8002134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001ebc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ebe:	4a9d      	ldr	r2, [pc, #628]	@ (8002134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001ec0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001ec4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f003 0301 	and.w	r3, r3, #1
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d00a      	beq.n	8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001ed2:	4b98      	ldr	r3, [pc, #608]	@ (8002134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001ed4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ed8:	f023 0203 	bic.w	r2, r3, #3
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ee0:	4994      	ldr	r1, [pc, #592]	@ (8002134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f003 0302 	and.w	r3, r3, #2
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d00a      	beq.n	8001f0a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001ef4:	4b8f      	ldr	r3, [pc, #572]	@ (8002134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001ef6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001efa:	f023 020c 	bic.w	r2, r3, #12
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f02:	498c      	ldr	r1, [pc, #560]	@ (8002134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f04:	4313      	orrs	r3, r2
 8001f06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f003 0304 	and.w	r3, r3, #4
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d00a      	beq.n	8001f2c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001f16:	4b87      	ldr	r3, [pc, #540]	@ (8002134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f1c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f24:	4983      	ldr	r1, [pc, #524]	@ (8002134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f26:	4313      	orrs	r3, r2
 8001f28:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f003 0308 	and.w	r3, r3, #8
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d00a      	beq.n	8001f4e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001f38:	4b7e      	ldr	r3, [pc, #504]	@ (8002134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f3e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f46:	497b      	ldr	r1, [pc, #492]	@ (8002134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f003 0310 	and.w	r3, r3, #16
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d00a      	beq.n	8001f70 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001f5a:	4b76      	ldr	r3, [pc, #472]	@ (8002134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f60:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f68:	4972      	ldr	r1, [pc, #456]	@ (8002134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f003 0320 	and.w	r3, r3, #32
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d00a      	beq.n	8001f92 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001f7c:	4b6d      	ldr	r3, [pc, #436]	@ (8002134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f82:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f8a:	496a      	ldr	r1, [pc, #424]	@ (8002134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d00a      	beq.n	8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001f9e:	4b65      	ldr	r3, [pc, #404]	@ (8002134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fa4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fac:	4961      	ldr	r1, [pc, #388]	@ (8002134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d00a      	beq.n	8001fd6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001fc0:	4b5c      	ldr	r3, [pc, #368]	@ (8002134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fc6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001fce:	4959      	ldr	r1, [pc, #356]	@ (8002134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d00a      	beq.n	8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001fe2:	4b54      	ldr	r3, [pc, #336]	@ (8002134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fe4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fe8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001ff0:	4950      	ldr	r1, [pc, #320]	@ (8002134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002000:	2b00      	cmp	r3, #0
 8002002:	d00a      	beq.n	800201a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002004:	4b4b      	ldr	r3, [pc, #300]	@ (8002134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002006:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800200a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002012:	4948      	ldr	r1, [pc, #288]	@ (8002134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002014:	4313      	orrs	r3, r2
 8002016:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002022:	2b00      	cmp	r3, #0
 8002024:	d00a      	beq.n	800203c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002026:	4b43      	ldr	r3, [pc, #268]	@ (8002134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002028:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800202c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002034:	493f      	ldr	r1, [pc, #252]	@ (8002134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002036:	4313      	orrs	r3, r2
 8002038:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002044:	2b00      	cmp	r3, #0
 8002046:	d028      	beq.n	800209a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002048:	4b3a      	ldr	r3, [pc, #232]	@ (8002134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800204a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800204e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002056:	4937      	ldr	r1, [pc, #220]	@ (8002134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002058:	4313      	orrs	r3, r2
 800205a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002062:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002066:	d106      	bne.n	8002076 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002068:	4b32      	ldr	r3, [pc, #200]	@ (8002134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800206a:	68db      	ldr	r3, [r3, #12]
 800206c:	4a31      	ldr	r2, [pc, #196]	@ (8002134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800206e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002072:	60d3      	str	r3, [r2, #12]
 8002074:	e011      	b.n	800209a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800207a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800207e:	d10c      	bne.n	800209a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	3304      	adds	r3, #4
 8002084:	2101      	movs	r1, #1
 8002086:	4618      	mov	r0, r3
 8002088:	f000 f8c8 	bl	800221c <RCCEx_PLLSAI1_Config>
 800208c:	4603      	mov	r3, r0
 800208e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002090:	7cfb      	ldrb	r3, [r7, #19]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d001      	beq.n	800209a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002096:	7cfb      	ldrb	r3, [r7, #19]
 8002098:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d028      	beq.n	80020f8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80020a6:	4b23      	ldr	r3, [pc, #140]	@ (8002134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020ac:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020b4:	491f      	ldr	r1, [pc, #124]	@ (8002134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020b6:	4313      	orrs	r3, r2
 80020b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020c0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80020c4:	d106      	bne.n	80020d4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80020c6:	4b1b      	ldr	r3, [pc, #108]	@ (8002134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020c8:	68db      	ldr	r3, [r3, #12]
 80020ca:	4a1a      	ldr	r2, [pc, #104]	@ (8002134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80020d0:	60d3      	str	r3, [r2, #12]
 80020d2:	e011      	b.n	80020f8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020d8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80020dc:	d10c      	bne.n	80020f8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	3304      	adds	r3, #4
 80020e2:	2101      	movs	r1, #1
 80020e4:	4618      	mov	r0, r3
 80020e6:	f000 f899 	bl	800221c <RCCEx_PLLSAI1_Config>
 80020ea:	4603      	mov	r3, r0
 80020ec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80020ee:	7cfb      	ldrb	r3, [r7, #19]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d001      	beq.n	80020f8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80020f4:	7cfb      	ldrb	r3, [r7, #19]
 80020f6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002100:	2b00      	cmp	r3, #0
 8002102:	d02b      	beq.n	800215c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002104:	4b0b      	ldr	r3, [pc, #44]	@ (8002134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002106:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800210a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002112:	4908      	ldr	r1, [pc, #32]	@ (8002134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002114:	4313      	orrs	r3, r2
 8002116:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800211e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002122:	d109      	bne.n	8002138 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002124:	4b03      	ldr	r3, [pc, #12]	@ (8002134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	4a02      	ldr	r2, [pc, #8]	@ (8002134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800212a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800212e:	60d3      	str	r3, [r2, #12]
 8002130:	e014      	b.n	800215c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002132:	bf00      	nop
 8002134:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800213c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002140:	d10c      	bne.n	800215c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	3304      	adds	r3, #4
 8002146:	2101      	movs	r1, #1
 8002148:	4618      	mov	r0, r3
 800214a:	f000 f867 	bl	800221c <RCCEx_PLLSAI1_Config>
 800214e:	4603      	mov	r3, r0
 8002150:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002152:	7cfb      	ldrb	r3, [r7, #19]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d001      	beq.n	800215c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002158:	7cfb      	ldrb	r3, [r7, #19]
 800215a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002164:	2b00      	cmp	r3, #0
 8002166:	d02f      	beq.n	80021c8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002168:	4b2b      	ldr	r3, [pc, #172]	@ (8002218 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800216a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800216e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002176:	4928      	ldr	r1, [pc, #160]	@ (8002218 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002178:	4313      	orrs	r3, r2
 800217a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002182:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002186:	d10d      	bne.n	80021a4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	3304      	adds	r3, #4
 800218c:	2102      	movs	r1, #2
 800218e:	4618      	mov	r0, r3
 8002190:	f000 f844 	bl	800221c <RCCEx_PLLSAI1_Config>
 8002194:	4603      	mov	r3, r0
 8002196:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002198:	7cfb      	ldrb	r3, [r7, #19]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d014      	beq.n	80021c8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800219e:	7cfb      	ldrb	r3, [r7, #19]
 80021a0:	74bb      	strb	r3, [r7, #18]
 80021a2:	e011      	b.n	80021c8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80021a8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80021ac:	d10c      	bne.n	80021c8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	3320      	adds	r3, #32
 80021b2:	2102      	movs	r1, #2
 80021b4:	4618      	mov	r0, r3
 80021b6:	f000 f925 	bl	8002404 <RCCEx_PLLSAI2_Config>
 80021ba:	4603      	mov	r3, r0
 80021bc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80021be:	7cfb      	ldrb	r3, [r7, #19]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d001      	beq.n	80021c8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80021c4:	7cfb      	ldrb	r3, [r7, #19]
 80021c6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d00a      	beq.n	80021ea <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80021d4:	4b10      	ldr	r3, [pc, #64]	@ (8002218 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80021d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021da:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80021e2:	490d      	ldr	r1, [pc, #52]	@ (8002218 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80021e4:	4313      	orrs	r3, r2
 80021e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d00b      	beq.n	800220e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80021f6:	4b08      	ldr	r3, [pc, #32]	@ (8002218 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80021f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021fc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002206:	4904      	ldr	r1, [pc, #16]	@ (8002218 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002208:	4313      	orrs	r3, r2
 800220a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800220e:	7cbb      	ldrb	r3, [r7, #18]
}
 8002210:	4618      	mov	r0, r3
 8002212:	3718      	adds	r7, #24
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}
 8002218:	40021000 	.word	0x40021000

0800221c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b084      	sub	sp, #16
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
 8002224:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002226:	2300      	movs	r3, #0
 8002228:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800222a:	4b75      	ldr	r3, [pc, #468]	@ (8002400 <RCCEx_PLLSAI1_Config+0x1e4>)
 800222c:	68db      	ldr	r3, [r3, #12]
 800222e:	f003 0303 	and.w	r3, r3, #3
 8002232:	2b00      	cmp	r3, #0
 8002234:	d018      	beq.n	8002268 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002236:	4b72      	ldr	r3, [pc, #456]	@ (8002400 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002238:	68db      	ldr	r3, [r3, #12]
 800223a:	f003 0203 	and.w	r2, r3, #3
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	429a      	cmp	r2, r3
 8002244:	d10d      	bne.n	8002262 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
       ||
 800224a:	2b00      	cmp	r3, #0
 800224c:	d009      	beq.n	8002262 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800224e:	4b6c      	ldr	r3, [pc, #432]	@ (8002400 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002250:	68db      	ldr	r3, [r3, #12]
 8002252:	091b      	lsrs	r3, r3, #4
 8002254:	f003 0307 	and.w	r3, r3, #7
 8002258:	1c5a      	adds	r2, r3, #1
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	685b      	ldr	r3, [r3, #4]
       ||
 800225e:	429a      	cmp	r2, r3
 8002260:	d047      	beq.n	80022f2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	73fb      	strb	r3, [r7, #15]
 8002266:	e044      	b.n	80022f2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	2b03      	cmp	r3, #3
 800226e:	d018      	beq.n	80022a2 <RCCEx_PLLSAI1_Config+0x86>
 8002270:	2b03      	cmp	r3, #3
 8002272:	d825      	bhi.n	80022c0 <RCCEx_PLLSAI1_Config+0xa4>
 8002274:	2b01      	cmp	r3, #1
 8002276:	d002      	beq.n	800227e <RCCEx_PLLSAI1_Config+0x62>
 8002278:	2b02      	cmp	r3, #2
 800227a:	d009      	beq.n	8002290 <RCCEx_PLLSAI1_Config+0x74>
 800227c:	e020      	b.n	80022c0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800227e:	4b60      	ldr	r3, [pc, #384]	@ (8002400 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 0302 	and.w	r3, r3, #2
 8002286:	2b00      	cmp	r3, #0
 8002288:	d11d      	bne.n	80022c6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800228e:	e01a      	b.n	80022c6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002290:	4b5b      	ldr	r3, [pc, #364]	@ (8002400 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002298:	2b00      	cmp	r3, #0
 800229a:	d116      	bne.n	80022ca <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800229c:	2301      	movs	r3, #1
 800229e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80022a0:	e013      	b.n	80022ca <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80022a2:	4b57      	ldr	r3, [pc, #348]	@ (8002400 <RCCEx_PLLSAI1_Config+0x1e4>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d10f      	bne.n	80022ce <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80022ae:	4b54      	ldr	r3, [pc, #336]	@ (8002400 <RCCEx_PLLSAI1_Config+0x1e4>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d109      	bne.n	80022ce <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80022be:	e006      	b.n	80022ce <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
 80022c2:	73fb      	strb	r3, [r7, #15]
      break;
 80022c4:	e004      	b.n	80022d0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80022c6:	bf00      	nop
 80022c8:	e002      	b.n	80022d0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80022ca:	bf00      	nop
 80022cc:	e000      	b.n	80022d0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80022ce:	bf00      	nop
    }

    if(status == HAL_OK)
 80022d0:	7bfb      	ldrb	r3, [r7, #15]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d10d      	bne.n	80022f2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80022d6:	4b4a      	ldr	r3, [pc, #296]	@ (8002400 <RCCEx_PLLSAI1_Config+0x1e4>)
 80022d8:	68db      	ldr	r3, [r3, #12]
 80022da:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6819      	ldr	r1, [r3, #0]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	3b01      	subs	r3, #1
 80022e8:	011b      	lsls	r3, r3, #4
 80022ea:	430b      	orrs	r3, r1
 80022ec:	4944      	ldr	r1, [pc, #272]	@ (8002400 <RCCEx_PLLSAI1_Config+0x1e4>)
 80022ee:	4313      	orrs	r3, r2
 80022f0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80022f2:	7bfb      	ldrb	r3, [r7, #15]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d17d      	bne.n	80023f4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80022f8:	4b41      	ldr	r3, [pc, #260]	@ (8002400 <RCCEx_PLLSAI1_Config+0x1e4>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a40      	ldr	r2, [pc, #256]	@ (8002400 <RCCEx_PLLSAI1_Config+0x1e4>)
 80022fe:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002302:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002304:	f7fe fb6e 	bl	80009e4 <HAL_GetTick>
 8002308:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800230a:	e009      	b.n	8002320 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800230c:	f7fe fb6a 	bl	80009e4 <HAL_GetTick>
 8002310:	4602      	mov	r2, r0
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	1ad3      	subs	r3, r2, r3
 8002316:	2b02      	cmp	r3, #2
 8002318:	d902      	bls.n	8002320 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800231a:	2303      	movs	r3, #3
 800231c:	73fb      	strb	r3, [r7, #15]
        break;
 800231e:	e005      	b.n	800232c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002320:	4b37      	ldr	r3, [pc, #220]	@ (8002400 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002328:	2b00      	cmp	r3, #0
 800232a:	d1ef      	bne.n	800230c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800232c:	7bfb      	ldrb	r3, [r7, #15]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d160      	bne.n	80023f4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d111      	bne.n	800235c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002338:	4b31      	ldr	r3, [pc, #196]	@ (8002400 <RCCEx_PLLSAI1_Config+0x1e4>)
 800233a:	691b      	ldr	r3, [r3, #16]
 800233c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002340:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002344:	687a      	ldr	r2, [r7, #4]
 8002346:	6892      	ldr	r2, [r2, #8]
 8002348:	0211      	lsls	r1, r2, #8
 800234a:	687a      	ldr	r2, [r7, #4]
 800234c:	68d2      	ldr	r2, [r2, #12]
 800234e:	0912      	lsrs	r2, r2, #4
 8002350:	0452      	lsls	r2, r2, #17
 8002352:	430a      	orrs	r2, r1
 8002354:	492a      	ldr	r1, [pc, #168]	@ (8002400 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002356:	4313      	orrs	r3, r2
 8002358:	610b      	str	r3, [r1, #16]
 800235a:	e027      	b.n	80023ac <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	2b01      	cmp	r3, #1
 8002360:	d112      	bne.n	8002388 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002362:	4b27      	ldr	r3, [pc, #156]	@ (8002400 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002364:	691b      	ldr	r3, [r3, #16]
 8002366:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800236a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800236e:	687a      	ldr	r2, [r7, #4]
 8002370:	6892      	ldr	r2, [r2, #8]
 8002372:	0211      	lsls	r1, r2, #8
 8002374:	687a      	ldr	r2, [r7, #4]
 8002376:	6912      	ldr	r2, [r2, #16]
 8002378:	0852      	lsrs	r2, r2, #1
 800237a:	3a01      	subs	r2, #1
 800237c:	0552      	lsls	r2, r2, #21
 800237e:	430a      	orrs	r2, r1
 8002380:	491f      	ldr	r1, [pc, #124]	@ (8002400 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002382:	4313      	orrs	r3, r2
 8002384:	610b      	str	r3, [r1, #16]
 8002386:	e011      	b.n	80023ac <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002388:	4b1d      	ldr	r3, [pc, #116]	@ (8002400 <RCCEx_PLLSAI1_Config+0x1e4>)
 800238a:	691b      	ldr	r3, [r3, #16]
 800238c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002390:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002394:	687a      	ldr	r2, [r7, #4]
 8002396:	6892      	ldr	r2, [r2, #8]
 8002398:	0211      	lsls	r1, r2, #8
 800239a:	687a      	ldr	r2, [r7, #4]
 800239c:	6952      	ldr	r2, [r2, #20]
 800239e:	0852      	lsrs	r2, r2, #1
 80023a0:	3a01      	subs	r2, #1
 80023a2:	0652      	lsls	r2, r2, #25
 80023a4:	430a      	orrs	r2, r1
 80023a6:	4916      	ldr	r1, [pc, #88]	@ (8002400 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023a8:	4313      	orrs	r3, r2
 80023aa:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80023ac:	4b14      	ldr	r3, [pc, #80]	@ (8002400 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a13      	ldr	r2, [pc, #76]	@ (8002400 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023b2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80023b6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023b8:	f7fe fb14 	bl	80009e4 <HAL_GetTick>
 80023bc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80023be:	e009      	b.n	80023d4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80023c0:	f7fe fb10 	bl	80009e4 <HAL_GetTick>
 80023c4:	4602      	mov	r2, r0
 80023c6:	68bb      	ldr	r3, [r7, #8]
 80023c8:	1ad3      	subs	r3, r2, r3
 80023ca:	2b02      	cmp	r3, #2
 80023cc:	d902      	bls.n	80023d4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80023ce:	2303      	movs	r3, #3
 80023d0:	73fb      	strb	r3, [r7, #15]
          break;
 80023d2:	e005      	b.n	80023e0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80023d4:	4b0a      	ldr	r3, [pc, #40]	@ (8002400 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d0ef      	beq.n	80023c0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80023e0:	7bfb      	ldrb	r3, [r7, #15]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d106      	bne.n	80023f4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80023e6:	4b06      	ldr	r3, [pc, #24]	@ (8002400 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023e8:	691a      	ldr	r2, [r3, #16]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	699b      	ldr	r3, [r3, #24]
 80023ee:	4904      	ldr	r1, [pc, #16]	@ (8002400 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023f0:	4313      	orrs	r3, r2
 80023f2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80023f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	3710      	adds	r7, #16
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	40021000 	.word	0x40021000

08002404 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b084      	sub	sp, #16
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
 800240c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800240e:	2300      	movs	r3, #0
 8002410:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002412:	4b6a      	ldr	r3, [pc, #424]	@ (80025bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002414:	68db      	ldr	r3, [r3, #12]
 8002416:	f003 0303 	and.w	r3, r3, #3
 800241a:	2b00      	cmp	r3, #0
 800241c:	d018      	beq.n	8002450 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800241e:	4b67      	ldr	r3, [pc, #412]	@ (80025bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002420:	68db      	ldr	r3, [r3, #12]
 8002422:	f003 0203 	and.w	r2, r3, #3
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	429a      	cmp	r2, r3
 800242c:	d10d      	bne.n	800244a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
       ||
 8002432:	2b00      	cmp	r3, #0
 8002434:	d009      	beq.n	800244a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002436:	4b61      	ldr	r3, [pc, #388]	@ (80025bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002438:	68db      	ldr	r3, [r3, #12]
 800243a:	091b      	lsrs	r3, r3, #4
 800243c:	f003 0307 	and.w	r3, r3, #7
 8002440:	1c5a      	adds	r2, r3, #1
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	685b      	ldr	r3, [r3, #4]
       ||
 8002446:	429a      	cmp	r2, r3
 8002448:	d047      	beq.n	80024da <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	73fb      	strb	r3, [r7, #15]
 800244e:	e044      	b.n	80024da <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	2b03      	cmp	r3, #3
 8002456:	d018      	beq.n	800248a <RCCEx_PLLSAI2_Config+0x86>
 8002458:	2b03      	cmp	r3, #3
 800245a:	d825      	bhi.n	80024a8 <RCCEx_PLLSAI2_Config+0xa4>
 800245c:	2b01      	cmp	r3, #1
 800245e:	d002      	beq.n	8002466 <RCCEx_PLLSAI2_Config+0x62>
 8002460:	2b02      	cmp	r3, #2
 8002462:	d009      	beq.n	8002478 <RCCEx_PLLSAI2_Config+0x74>
 8002464:	e020      	b.n	80024a8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002466:	4b55      	ldr	r3, [pc, #340]	@ (80025bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 0302 	and.w	r3, r3, #2
 800246e:	2b00      	cmp	r3, #0
 8002470:	d11d      	bne.n	80024ae <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002476:	e01a      	b.n	80024ae <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002478:	4b50      	ldr	r3, [pc, #320]	@ (80025bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002480:	2b00      	cmp	r3, #0
 8002482:	d116      	bne.n	80024b2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002484:	2301      	movs	r3, #1
 8002486:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002488:	e013      	b.n	80024b2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800248a:	4b4c      	ldr	r3, [pc, #304]	@ (80025bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002492:	2b00      	cmp	r3, #0
 8002494:	d10f      	bne.n	80024b6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002496:	4b49      	ldr	r3, [pc, #292]	@ (80025bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d109      	bne.n	80024b6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80024a6:	e006      	b.n	80024b6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80024a8:	2301      	movs	r3, #1
 80024aa:	73fb      	strb	r3, [r7, #15]
      break;
 80024ac:	e004      	b.n	80024b8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80024ae:	bf00      	nop
 80024b0:	e002      	b.n	80024b8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80024b2:	bf00      	nop
 80024b4:	e000      	b.n	80024b8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80024b6:	bf00      	nop
    }

    if(status == HAL_OK)
 80024b8:	7bfb      	ldrb	r3, [r7, #15]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d10d      	bne.n	80024da <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80024be:	4b3f      	ldr	r3, [pc, #252]	@ (80025bc <RCCEx_PLLSAI2_Config+0x1b8>)
 80024c0:	68db      	ldr	r3, [r3, #12]
 80024c2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6819      	ldr	r1, [r3, #0]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	3b01      	subs	r3, #1
 80024d0:	011b      	lsls	r3, r3, #4
 80024d2:	430b      	orrs	r3, r1
 80024d4:	4939      	ldr	r1, [pc, #228]	@ (80025bc <RCCEx_PLLSAI2_Config+0x1b8>)
 80024d6:	4313      	orrs	r3, r2
 80024d8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80024da:	7bfb      	ldrb	r3, [r7, #15]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d167      	bne.n	80025b0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80024e0:	4b36      	ldr	r3, [pc, #216]	@ (80025bc <RCCEx_PLLSAI2_Config+0x1b8>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a35      	ldr	r2, [pc, #212]	@ (80025bc <RCCEx_PLLSAI2_Config+0x1b8>)
 80024e6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80024ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024ec:	f7fe fa7a 	bl	80009e4 <HAL_GetTick>
 80024f0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80024f2:	e009      	b.n	8002508 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80024f4:	f7fe fa76 	bl	80009e4 <HAL_GetTick>
 80024f8:	4602      	mov	r2, r0
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	1ad3      	subs	r3, r2, r3
 80024fe:	2b02      	cmp	r3, #2
 8002500:	d902      	bls.n	8002508 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002502:	2303      	movs	r3, #3
 8002504:	73fb      	strb	r3, [r7, #15]
        break;
 8002506:	e005      	b.n	8002514 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002508:	4b2c      	ldr	r3, [pc, #176]	@ (80025bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002510:	2b00      	cmp	r3, #0
 8002512:	d1ef      	bne.n	80024f4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002514:	7bfb      	ldrb	r3, [r7, #15]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d14a      	bne.n	80025b0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d111      	bne.n	8002544 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002520:	4b26      	ldr	r3, [pc, #152]	@ (80025bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002522:	695b      	ldr	r3, [r3, #20]
 8002524:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002528:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800252c:	687a      	ldr	r2, [r7, #4]
 800252e:	6892      	ldr	r2, [r2, #8]
 8002530:	0211      	lsls	r1, r2, #8
 8002532:	687a      	ldr	r2, [r7, #4]
 8002534:	68d2      	ldr	r2, [r2, #12]
 8002536:	0912      	lsrs	r2, r2, #4
 8002538:	0452      	lsls	r2, r2, #17
 800253a:	430a      	orrs	r2, r1
 800253c:	491f      	ldr	r1, [pc, #124]	@ (80025bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800253e:	4313      	orrs	r3, r2
 8002540:	614b      	str	r3, [r1, #20]
 8002542:	e011      	b.n	8002568 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002544:	4b1d      	ldr	r3, [pc, #116]	@ (80025bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002546:	695b      	ldr	r3, [r3, #20]
 8002548:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800254c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002550:	687a      	ldr	r2, [r7, #4]
 8002552:	6892      	ldr	r2, [r2, #8]
 8002554:	0211      	lsls	r1, r2, #8
 8002556:	687a      	ldr	r2, [r7, #4]
 8002558:	6912      	ldr	r2, [r2, #16]
 800255a:	0852      	lsrs	r2, r2, #1
 800255c:	3a01      	subs	r2, #1
 800255e:	0652      	lsls	r2, r2, #25
 8002560:	430a      	orrs	r2, r1
 8002562:	4916      	ldr	r1, [pc, #88]	@ (80025bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002564:	4313      	orrs	r3, r2
 8002566:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002568:	4b14      	ldr	r3, [pc, #80]	@ (80025bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a13      	ldr	r2, [pc, #76]	@ (80025bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800256e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002572:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002574:	f7fe fa36 	bl	80009e4 <HAL_GetTick>
 8002578:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800257a:	e009      	b.n	8002590 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800257c:	f7fe fa32 	bl	80009e4 <HAL_GetTick>
 8002580:	4602      	mov	r2, r0
 8002582:	68bb      	ldr	r3, [r7, #8]
 8002584:	1ad3      	subs	r3, r2, r3
 8002586:	2b02      	cmp	r3, #2
 8002588:	d902      	bls.n	8002590 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800258a:	2303      	movs	r3, #3
 800258c:	73fb      	strb	r3, [r7, #15]
          break;
 800258e:	e005      	b.n	800259c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002590:	4b0a      	ldr	r3, [pc, #40]	@ (80025bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002598:	2b00      	cmp	r3, #0
 800259a:	d0ef      	beq.n	800257c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800259c:	7bfb      	ldrb	r3, [r7, #15]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d106      	bne.n	80025b0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80025a2:	4b06      	ldr	r3, [pc, #24]	@ (80025bc <RCCEx_PLLSAI2_Config+0x1b8>)
 80025a4:	695a      	ldr	r2, [r3, #20]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	695b      	ldr	r3, [r3, #20]
 80025aa:	4904      	ldr	r1, [pc, #16]	@ (80025bc <RCCEx_PLLSAI2_Config+0x1b8>)
 80025ac:	4313      	orrs	r3, r2
 80025ae:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80025b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	3710      	adds	r7, #16
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}
 80025ba:	bf00      	nop
 80025bc:	40021000 	.word	0x40021000

080025c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b082      	sub	sp, #8
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d101      	bne.n	80025d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e040      	b.n	8002654 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d106      	bne.n	80025e8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2200      	movs	r2, #0
 80025de:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80025e2:	6878      	ldr	r0, [r7, #4]
 80025e4:	f7fe f8ce 	bl	8000784 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2224      	movs	r2, #36	@ 0x24
 80025ec:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	681a      	ldr	r2, [r3, #0]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f022 0201 	bic.w	r2, r2, #1
 80025fc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002602:	2b00      	cmp	r3, #0
 8002604:	d002      	beq.n	800260c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	f000 fb6a 	bl	8002ce0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800260c:	6878      	ldr	r0, [r7, #4]
 800260e:	f000 f8af 	bl	8002770 <UART_SetConfig>
 8002612:	4603      	mov	r3, r0
 8002614:	2b01      	cmp	r3, #1
 8002616:	d101      	bne.n	800261c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002618:	2301      	movs	r3, #1
 800261a:	e01b      	b.n	8002654 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	685a      	ldr	r2, [r3, #4]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800262a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	689a      	ldr	r2, [r3, #8]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800263a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f042 0201 	orr.w	r2, r2, #1
 800264a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800264c:	6878      	ldr	r0, [r7, #4]
 800264e:	f000 fbe9 	bl	8002e24 <UART_CheckIdleState>
 8002652:	4603      	mov	r3, r0
}
 8002654:	4618      	mov	r0, r3
 8002656:	3708      	adds	r7, #8
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}

0800265c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b08a      	sub	sp, #40	@ 0x28
 8002660:	af02      	add	r7, sp, #8
 8002662:	60f8      	str	r0, [r7, #12]
 8002664:	60b9      	str	r1, [r7, #8]
 8002666:	603b      	str	r3, [r7, #0]
 8002668:	4613      	mov	r3, r2
 800266a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002670:	2b20      	cmp	r3, #32
 8002672:	d177      	bne.n	8002764 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d002      	beq.n	8002680 <HAL_UART_Transmit+0x24>
 800267a:	88fb      	ldrh	r3, [r7, #6]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d101      	bne.n	8002684 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002680:	2301      	movs	r3, #1
 8002682:	e070      	b.n	8002766 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	2200      	movs	r2, #0
 8002688:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	2221      	movs	r2, #33	@ 0x21
 8002690:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002692:	f7fe f9a7 	bl	80009e4 <HAL_GetTick>
 8002696:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	88fa      	ldrh	r2, [r7, #6]
 800269c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	88fa      	ldrh	r2, [r7, #6]
 80026a4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80026b0:	d108      	bne.n	80026c4 <HAL_UART_Transmit+0x68>
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	691b      	ldr	r3, [r3, #16]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d104      	bne.n	80026c4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80026ba:	2300      	movs	r3, #0
 80026bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	61bb      	str	r3, [r7, #24]
 80026c2:	e003      	b.n	80026cc <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80026c8:	2300      	movs	r3, #0
 80026ca:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80026cc:	e02f      	b.n	800272e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	9300      	str	r3, [sp, #0]
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	2200      	movs	r2, #0
 80026d6:	2180      	movs	r1, #128	@ 0x80
 80026d8:	68f8      	ldr	r0, [r7, #12]
 80026da:	f000 fc4b 	bl	8002f74 <UART_WaitOnFlagUntilTimeout>
 80026de:	4603      	mov	r3, r0
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d004      	beq.n	80026ee <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	2220      	movs	r2, #32
 80026e8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80026ea:	2303      	movs	r3, #3
 80026ec:	e03b      	b.n	8002766 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80026ee:	69fb      	ldr	r3, [r7, #28]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d10b      	bne.n	800270c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80026f4:	69bb      	ldr	r3, [r7, #24]
 80026f6:	881a      	ldrh	r2, [r3, #0]
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002700:	b292      	uxth	r2, r2
 8002702:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002704:	69bb      	ldr	r3, [r7, #24]
 8002706:	3302      	adds	r3, #2
 8002708:	61bb      	str	r3, [r7, #24]
 800270a:	e007      	b.n	800271c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800270c:	69fb      	ldr	r3, [r7, #28]
 800270e:	781a      	ldrb	r2, [r3, #0]
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002716:	69fb      	ldr	r3, [r7, #28]
 8002718:	3301      	adds	r3, #1
 800271a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002722:	b29b      	uxth	r3, r3
 8002724:	3b01      	subs	r3, #1
 8002726:	b29a      	uxth	r2, r3
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002734:	b29b      	uxth	r3, r3
 8002736:	2b00      	cmp	r3, #0
 8002738:	d1c9      	bne.n	80026ce <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	9300      	str	r3, [sp, #0]
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	2200      	movs	r2, #0
 8002742:	2140      	movs	r1, #64	@ 0x40
 8002744:	68f8      	ldr	r0, [r7, #12]
 8002746:	f000 fc15 	bl	8002f74 <UART_WaitOnFlagUntilTimeout>
 800274a:	4603      	mov	r3, r0
 800274c:	2b00      	cmp	r3, #0
 800274e:	d004      	beq.n	800275a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	2220      	movs	r2, #32
 8002754:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8002756:	2303      	movs	r3, #3
 8002758:	e005      	b.n	8002766 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	2220      	movs	r2, #32
 800275e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002760:	2300      	movs	r3, #0
 8002762:	e000      	b.n	8002766 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8002764:	2302      	movs	r3, #2
  }
}
 8002766:	4618      	mov	r0, r3
 8002768:	3720      	adds	r7, #32
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}
	...

08002770 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002770:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002774:	b08a      	sub	sp, #40	@ 0x28
 8002776:	af00      	add	r7, sp, #0
 8002778:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800277a:	2300      	movs	r3, #0
 800277c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	689a      	ldr	r2, [r3, #8]
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	691b      	ldr	r3, [r3, #16]
 8002788:	431a      	orrs	r2, r3
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	695b      	ldr	r3, [r3, #20]
 800278e:	431a      	orrs	r2, r3
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	69db      	ldr	r3, [r3, #28]
 8002794:	4313      	orrs	r3, r2
 8002796:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	4ba4      	ldr	r3, [pc, #656]	@ (8002a30 <UART_SetConfig+0x2c0>)
 80027a0:	4013      	ands	r3, r2
 80027a2:	68fa      	ldr	r2, [r7, #12]
 80027a4:	6812      	ldr	r2, [r2, #0]
 80027a6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80027a8:	430b      	orrs	r3, r1
 80027aa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	68da      	ldr	r2, [r3, #12]
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	430a      	orrs	r2, r1
 80027c0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	699b      	ldr	r3, [r3, #24]
 80027c6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a99      	ldr	r2, [pc, #612]	@ (8002a34 <UART_SetConfig+0x2c4>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d004      	beq.n	80027dc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	6a1b      	ldr	r3, [r3, #32]
 80027d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80027d8:	4313      	orrs	r3, r2
 80027da:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80027ec:	430a      	orrs	r2, r1
 80027ee:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a90      	ldr	r2, [pc, #576]	@ (8002a38 <UART_SetConfig+0x2c8>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d126      	bne.n	8002848 <UART_SetConfig+0xd8>
 80027fa:	4b90      	ldr	r3, [pc, #576]	@ (8002a3c <UART_SetConfig+0x2cc>)
 80027fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002800:	f003 0303 	and.w	r3, r3, #3
 8002804:	2b03      	cmp	r3, #3
 8002806:	d81b      	bhi.n	8002840 <UART_SetConfig+0xd0>
 8002808:	a201      	add	r2, pc, #4	@ (adr r2, 8002810 <UART_SetConfig+0xa0>)
 800280a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800280e:	bf00      	nop
 8002810:	08002821 	.word	0x08002821
 8002814:	08002831 	.word	0x08002831
 8002818:	08002829 	.word	0x08002829
 800281c:	08002839 	.word	0x08002839
 8002820:	2301      	movs	r3, #1
 8002822:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002826:	e116      	b.n	8002a56 <UART_SetConfig+0x2e6>
 8002828:	2302      	movs	r3, #2
 800282a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800282e:	e112      	b.n	8002a56 <UART_SetConfig+0x2e6>
 8002830:	2304      	movs	r3, #4
 8002832:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002836:	e10e      	b.n	8002a56 <UART_SetConfig+0x2e6>
 8002838:	2308      	movs	r3, #8
 800283a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800283e:	e10a      	b.n	8002a56 <UART_SetConfig+0x2e6>
 8002840:	2310      	movs	r3, #16
 8002842:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002846:	e106      	b.n	8002a56 <UART_SetConfig+0x2e6>
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a7c      	ldr	r2, [pc, #496]	@ (8002a40 <UART_SetConfig+0x2d0>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d138      	bne.n	80028c4 <UART_SetConfig+0x154>
 8002852:	4b7a      	ldr	r3, [pc, #488]	@ (8002a3c <UART_SetConfig+0x2cc>)
 8002854:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002858:	f003 030c 	and.w	r3, r3, #12
 800285c:	2b0c      	cmp	r3, #12
 800285e:	d82d      	bhi.n	80028bc <UART_SetConfig+0x14c>
 8002860:	a201      	add	r2, pc, #4	@ (adr r2, 8002868 <UART_SetConfig+0xf8>)
 8002862:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002866:	bf00      	nop
 8002868:	0800289d 	.word	0x0800289d
 800286c:	080028bd 	.word	0x080028bd
 8002870:	080028bd 	.word	0x080028bd
 8002874:	080028bd 	.word	0x080028bd
 8002878:	080028ad 	.word	0x080028ad
 800287c:	080028bd 	.word	0x080028bd
 8002880:	080028bd 	.word	0x080028bd
 8002884:	080028bd 	.word	0x080028bd
 8002888:	080028a5 	.word	0x080028a5
 800288c:	080028bd 	.word	0x080028bd
 8002890:	080028bd 	.word	0x080028bd
 8002894:	080028bd 	.word	0x080028bd
 8002898:	080028b5 	.word	0x080028b5
 800289c:	2300      	movs	r3, #0
 800289e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80028a2:	e0d8      	b.n	8002a56 <UART_SetConfig+0x2e6>
 80028a4:	2302      	movs	r3, #2
 80028a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80028aa:	e0d4      	b.n	8002a56 <UART_SetConfig+0x2e6>
 80028ac:	2304      	movs	r3, #4
 80028ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80028b2:	e0d0      	b.n	8002a56 <UART_SetConfig+0x2e6>
 80028b4:	2308      	movs	r3, #8
 80028b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80028ba:	e0cc      	b.n	8002a56 <UART_SetConfig+0x2e6>
 80028bc:	2310      	movs	r3, #16
 80028be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80028c2:	e0c8      	b.n	8002a56 <UART_SetConfig+0x2e6>
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a5e      	ldr	r2, [pc, #376]	@ (8002a44 <UART_SetConfig+0x2d4>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d125      	bne.n	800291a <UART_SetConfig+0x1aa>
 80028ce:	4b5b      	ldr	r3, [pc, #364]	@ (8002a3c <UART_SetConfig+0x2cc>)
 80028d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028d4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80028d8:	2b30      	cmp	r3, #48	@ 0x30
 80028da:	d016      	beq.n	800290a <UART_SetConfig+0x19a>
 80028dc:	2b30      	cmp	r3, #48	@ 0x30
 80028de:	d818      	bhi.n	8002912 <UART_SetConfig+0x1a2>
 80028e0:	2b20      	cmp	r3, #32
 80028e2:	d00a      	beq.n	80028fa <UART_SetConfig+0x18a>
 80028e4:	2b20      	cmp	r3, #32
 80028e6:	d814      	bhi.n	8002912 <UART_SetConfig+0x1a2>
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d002      	beq.n	80028f2 <UART_SetConfig+0x182>
 80028ec:	2b10      	cmp	r3, #16
 80028ee:	d008      	beq.n	8002902 <UART_SetConfig+0x192>
 80028f0:	e00f      	b.n	8002912 <UART_SetConfig+0x1a2>
 80028f2:	2300      	movs	r3, #0
 80028f4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80028f8:	e0ad      	b.n	8002a56 <UART_SetConfig+0x2e6>
 80028fa:	2302      	movs	r3, #2
 80028fc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002900:	e0a9      	b.n	8002a56 <UART_SetConfig+0x2e6>
 8002902:	2304      	movs	r3, #4
 8002904:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002908:	e0a5      	b.n	8002a56 <UART_SetConfig+0x2e6>
 800290a:	2308      	movs	r3, #8
 800290c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002910:	e0a1      	b.n	8002a56 <UART_SetConfig+0x2e6>
 8002912:	2310      	movs	r3, #16
 8002914:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002918:	e09d      	b.n	8002a56 <UART_SetConfig+0x2e6>
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a4a      	ldr	r2, [pc, #296]	@ (8002a48 <UART_SetConfig+0x2d8>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d125      	bne.n	8002970 <UART_SetConfig+0x200>
 8002924:	4b45      	ldr	r3, [pc, #276]	@ (8002a3c <UART_SetConfig+0x2cc>)
 8002926:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800292a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800292e:	2bc0      	cmp	r3, #192	@ 0xc0
 8002930:	d016      	beq.n	8002960 <UART_SetConfig+0x1f0>
 8002932:	2bc0      	cmp	r3, #192	@ 0xc0
 8002934:	d818      	bhi.n	8002968 <UART_SetConfig+0x1f8>
 8002936:	2b80      	cmp	r3, #128	@ 0x80
 8002938:	d00a      	beq.n	8002950 <UART_SetConfig+0x1e0>
 800293a:	2b80      	cmp	r3, #128	@ 0x80
 800293c:	d814      	bhi.n	8002968 <UART_SetConfig+0x1f8>
 800293e:	2b00      	cmp	r3, #0
 8002940:	d002      	beq.n	8002948 <UART_SetConfig+0x1d8>
 8002942:	2b40      	cmp	r3, #64	@ 0x40
 8002944:	d008      	beq.n	8002958 <UART_SetConfig+0x1e8>
 8002946:	e00f      	b.n	8002968 <UART_SetConfig+0x1f8>
 8002948:	2300      	movs	r3, #0
 800294a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800294e:	e082      	b.n	8002a56 <UART_SetConfig+0x2e6>
 8002950:	2302      	movs	r3, #2
 8002952:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002956:	e07e      	b.n	8002a56 <UART_SetConfig+0x2e6>
 8002958:	2304      	movs	r3, #4
 800295a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800295e:	e07a      	b.n	8002a56 <UART_SetConfig+0x2e6>
 8002960:	2308      	movs	r3, #8
 8002962:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002966:	e076      	b.n	8002a56 <UART_SetConfig+0x2e6>
 8002968:	2310      	movs	r3, #16
 800296a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800296e:	e072      	b.n	8002a56 <UART_SetConfig+0x2e6>
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a35      	ldr	r2, [pc, #212]	@ (8002a4c <UART_SetConfig+0x2dc>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d12a      	bne.n	80029d0 <UART_SetConfig+0x260>
 800297a:	4b30      	ldr	r3, [pc, #192]	@ (8002a3c <UART_SetConfig+0x2cc>)
 800297c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002980:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002984:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002988:	d01a      	beq.n	80029c0 <UART_SetConfig+0x250>
 800298a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800298e:	d81b      	bhi.n	80029c8 <UART_SetConfig+0x258>
 8002990:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002994:	d00c      	beq.n	80029b0 <UART_SetConfig+0x240>
 8002996:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800299a:	d815      	bhi.n	80029c8 <UART_SetConfig+0x258>
 800299c:	2b00      	cmp	r3, #0
 800299e:	d003      	beq.n	80029a8 <UART_SetConfig+0x238>
 80029a0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80029a4:	d008      	beq.n	80029b8 <UART_SetConfig+0x248>
 80029a6:	e00f      	b.n	80029c8 <UART_SetConfig+0x258>
 80029a8:	2300      	movs	r3, #0
 80029aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80029ae:	e052      	b.n	8002a56 <UART_SetConfig+0x2e6>
 80029b0:	2302      	movs	r3, #2
 80029b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80029b6:	e04e      	b.n	8002a56 <UART_SetConfig+0x2e6>
 80029b8:	2304      	movs	r3, #4
 80029ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80029be:	e04a      	b.n	8002a56 <UART_SetConfig+0x2e6>
 80029c0:	2308      	movs	r3, #8
 80029c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80029c6:	e046      	b.n	8002a56 <UART_SetConfig+0x2e6>
 80029c8:	2310      	movs	r3, #16
 80029ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80029ce:	e042      	b.n	8002a56 <UART_SetConfig+0x2e6>
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a17      	ldr	r2, [pc, #92]	@ (8002a34 <UART_SetConfig+0x2c4>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d13a      	bne.n	8002a50 <UART_SetConfig+0x2e0>
 80029da:	4b18      	ldr	r3, [pc, #96]	@ (8002a3c <UART_SetConfig+0x2cc>)
 80029dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029e0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80029e4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80029e8:	d01a      	beq.n	8002a20 <UART_SetConfig+0x2b0>
 80029ea:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80029ee:	d81b      	bhi.n	8002a28 <UART_SetConfig+0x2b8>
 80029f0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80029f4:	d00c      	beq.n	8002a10 <UART_SetConfig+0x2a0>
 80029f6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80029fa:	d815      	bhi.n	8002a28 <UART_SetConfig+0x2b8>
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d003      	beq.n	8002a08 <UART_SetConfig+0x298>
 8002a00:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a04:	d008      	beq.n	8002a18 <UART_SetConfig+0x2a8>
 8002a06:	e00f      	b.n	8002a28 <UART_SetConfig+0x2b8>
 8002a08:	2300      	movs	r3, #0
 8002a0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a0e:	e022      	b.n	8002a56 <UART_SetConfig+0x2e6>
 8002a10:	2302      	movs	r3, #2
 8002a12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a16:	e01e      	b.n	8002a56 <UART_SetConfig+0x2e6>
 8002a18:	2304      	movs	r3, #4
 8002a1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a1e:	e01a      	b.n	8002a56 <UART_SetConfig+0x2e6>
 8002a20:	2308      	movs	r3, #8
 8002a22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a26:	e016      	b.n	8002a56 <UART_SetConfig+0x2e6>
 8002a28:	2310      	movs	r3, #16
 8002a2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a2e:	e012      	b.n	8002a56 <UART_SetConfig+0x2e6>
 8002a30:	efff69f3 	.word	0xefff69f3
 8002a34:	40008000 	.word	0x40008000
 8002a38:	40013800 	.word	0x40013800
 8002a3c:	40021000 	.word	0x40021000
 8002a40:	40004400 	.word	0x40004400
 8002a44:	40004800 	.word	0x40004800
 8002a48:	40004c00 	.word	0x40004c00
 8002a4c:	40005000 	.word	0x40005000
 8002a50:	2310      	movs	r3, #16
 8002a52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a9f      	ldr	r2, [pc, #636]	@ (8002cd8 <UART_SetConfig+0x568>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d17a      	bne.n	8002b56 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002a60:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002a64:	2b08      	cmp	r3, #8
 8002a66:	d824      	bhi.n	8002ab2 <UART_SetConfig+0x342>
 8002a68:	a201      	add	r2, pc, #4	@ (adr r2, 8002a70 <UART_SetConfig+0x300>)
 8002a6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a6e:	bf00      	nop
 8002a70:	08002a95 	.word	0x08002a95
 8002a74:	08002ab3 	.word	0x08002ab3
 8002a78:	08002a9d 	.word	0x08002a9d
 8002a7c:	08002ab3 	.word	0x08002ab3
 8002a80:	08002aa3 	.word	0x08002aa3
 8002a84:	08002ab3 	.word	0x08002ab3
 8002a88:	08002ab3 	.word	0x08002ab3
 8002a8c:	08002ab3 	.word	0x08002ab3
 8002a90:	08002aab 	.word	0x08002aab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002a94:	f7ff f84c 	bl	8001b30 <HAL_RCC_GetPCLK1Freq>
 8002a98:	61f8      	str	r0, [r7, #28]
        break;
 8002a9a:	e010      	b.n	8002abe <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002a9c:	4b8f      	ldr	r3, [pc, #572]	@ (8002cdc <UART_SetConfig+0x56c>)
 8002a9e:	61fb      	str	r3, [r7, #28]
        break;
 8002aa0:	e00d      	b.n	8002abe <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002aa2:	f7fe ffad 	bl	8001a00 <HAL_RCC_GetSysClockFreq>
 8002aa6:	61f8      	str	r0, [r7, #28]
        break;
 8002aa8:	e009      	b.n	8002abe <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002aaa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002aae:	61fb      	str	r3, [r7, #28]
        break;
 8002ab0:	e005      	b.n	8002abe <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8002abc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002abe:	69fb      	ldr	r3, [r7, #28]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	f000 80fb 	beq.w	8002cbc <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	685a      	ldr	r2, [r3, #4]
 8002aca:	4613      	mov	r3, r2
 8002acc:	005b      	lsls	r3, r3, #1
 8002ace:	4413      	add	r3, r2
 8002ad0:	69fa      	ldr	r2, [r7, #28]
 8002ad2:	429a      	cmp	r2, r3
 8002ad4:	d305      	bcc.n	8002ae2 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002adc:	69fa      	ldr	r2, [r7, #28]
 8002ade:	429a      	cmp	r2, r3
 8002ae0:	d903      	bls.n	8002aea <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002ae8:	e0e8      	b.n	8002cbc <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002aea:	69fb      	ldr	r3, [r7, #28]
 8002aec:	2200      	movs	r2, #0
 8002aee:	461c      	mov	r4, r3
 8002af0:	4615      	mov	r5, r2
 8002af2:	f04f 0200 	mov.w	r2, #0
 8002af6:	f04f 0300 	mov.w	r3, #0
 8002afa:	022b      	lsls	r3, r5, #8
 8002afc:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002b00:	0222      	lsls	r2, r4, #8
 8002b02:	68f9      	ldr	r1, [r7, #12]
 8002b04:	6849      	ldr	r1, [r1, #4]
 8002b06:	0849      	lsrs	r1, r1, #1
 8002b08:	2000      	movs	r0, #0
 8002b0a:	4688      	mov	r8, r1
 8002b0c:	4681      	mov	r9, r0
 8002b0e:	eb12 0a08 	adds.w	sl, r2, r8
 8002b12:	eb43 0b09 	adc.w	fp, r3, r9
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	603b      	str	r3, [r7, #0]
 8002b1e:	607a      	str	r2, [r7, #4]
 8002b20:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002b24:	4650      	mov	r0, sl
 8002b26:	4659      	mov	r1, fp
 8002b28:	f7fd fb52 	bl	80001d0 <__aeabi_uldivmod>
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	460b      	mov	r3, r1
 8002b30:	4613      	mov	r3, r2
 8002b32:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002b34:	69bb      	ldr	r3, [r7, #24]
 8002b36:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002b3a:	d308      	bcc.n	8002b4e <UART_SetConfig+0x3de>
 8002b3c:	69bb      	ldr	r3, [r7, #24]
 8002b3e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002b42:	d204      	bcs.n	8002b4e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	69ba      	ldr	r2, [r7, #24]
 8002b4a:	60da      	str	r2, [r3, #12]
 8002b4c:	e0b6      	b.n	8002cbc <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002b54:	e0b2      	b.n	8002cbc <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	69db      	ldr	r3, [r3, #28]
 8002b5a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002b5e:	d15e      	bne.n	8002c1e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8002b60:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002b64:	2b08      	cmp	r3, #8
 8002b66:	d828      	bhi.n	8002bba <UART_SetConfig+0x44a>
 8002b68:	a201      	add	r2, pc, #4	@ (adr r2, 8002b70 <UART_SetConfig+0x400>)
 8002b6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b6e:	bf00      	nop
 8002b70:	08002b95 	.word	0x08002b95
 8002b74:	08002b9d 	.word	0x08002b9d
 8002b78:	08002ba5 	.word	0x08002ba5
 8002b7c:	08002bbb 	.word	0x08002bbb
 8002b80:	08002bab 	.word	0x08002bab
 8002b84:	08002bbb 	.word	0x08002bbb
 8002b88:	08002bbb 	.word	0x08002bbb
 8002b8c:	08002bbb 	.word	0x08002bbb
 8002b90:	08002bb3 	.word	0x08002bb3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002b94:	f7fe ffcc 	bl	8001b30 <HAL_RCC_GetPCLK1Freq>
 8002b98:	61f8      	str	r0, [r7, #28]
        break;
 8002b9a:	e014      	b.n	8002bc6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002b9c:	f7fe ffde 	bl	8001b5c <HAL_RCC_GetPCLK2Freq>
 8002ba0:	61f8      	str	r0, [r7, #28]
        break;
 8002ba2:	e010      	b.n	8002bc6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002ba4:	4b4d      	ldr	r3, [pc, #308]	@ (8002cdc <UART_SetConfig+0x56c>)
 8002ba6:	61fb      	str	r3, [r7, #28]
        break;
 8002ba8:	e00d      	b.n	8002bc6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002baa:	f7fe ff29 	bl	8001a00 <HAL_RCC_GetSysClockFreq>
 8002bae:	61f8      	str	r0, [r7, #28]
        break;
 8002bb0:	e009      	b.n	8002bc6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002bb2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002bb6:	61fb      	str	r3, [r7, #28]
        break;
 8002bb8:	e005      	b.n	8002bc6 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8002bc4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002bc6:	69fb      	ldr	r3, [r7, #28]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d077      	beq.n	8002cbc <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002bcc:	69fb      	ldr	r3, [r7, #28]
 8002bce:	005a      	lsls	r2, r3, #1
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	085b      	lsrs	r3, r3, #1
 8002bd6:	441a      	add	r2, r3
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002be0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002be2:	69bb      	ldr	r3, [r7, #24]
 8002be4:	2b0f      	cmp	r3, #15
 8002be6:	d916      	bls.n	8002c16 <UART_SetConfig+0x4a6>
 8002be8:	69bb      	ldr	r3, [r7, #24]
 8002bea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002bee:	d212      	bcs.n	8002c16 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002bf0:	69bb      	ldr	r3, [r7, #24]
 8002bf2:	b29b      	uxth	r3, r3
 8002bf4:	f023 030f 	bic.w	r3, r3, #15
 8002bf8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002bfa:	69bb      	ldr	r3, [r7, #24]
 8002bfc:	085b      	lsrs	r3, r3, #1
 8002bfe:	b29b      	uxth	r3, r3
 8002c00:	f003 0307 	and.w	r3, r3, #7
 8002c04:	b29a      	uxth	r2, r3
 8002c06:	8afb      	ldrh	r3, [r7, #22]
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	8afa      	ldrh	r2, [r7, #22]
 8002c12:	60da      	str	r2, [r3, #12]
 8002c14:	e052      	b.n	8002cbc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002c1c:	e04e      	b.n	8002cbc <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002c1e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002c22:	2b08      	cmp	r3, #8
 8002c24:	d827      	bhi.n	8002c76 <UART_SetConfig+0x506>
 8002c26:	a201      	add	r2, pc, #4	@ (adr r2, 8002c2c <UART_SetConfig+0x4bc>)
 8002c28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c2c:	08002c51 	.word	0x08002c51
 8002c30:	08002c59 	.word	0x08002c59
 8002c34:	08002c61 	.word	0x08002c61
 8002c38:	08002c77 	.word	0x08002c77
 8002c3c:	08002c67 	.word	0x08002c67
 8002c40:	08002c77 	.word	0x08002c77
 8002c44:	08002c77 	.word	0x08002c77
 8002c48:	08002c77 	.word	0x08002c77
 8002c4c:	08002c6f 	.word	0x08002c6f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002c50:	f7fe ff6e 	bl	8001b30 <HAL_RCC_GetPCLK1Freq>
 8002c54:	61f8      	str	r0, [r7, #28]
        break;
 8002c56:	e014      	b.n	8002c82 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002c58:	f7fe ff80 	bl	8001b5c <HAL_RCC_GetPCLK2Freq>
 8002c5c:	61f8      	str	r0, [r7, #28]
        break;
 8002c5e:	e010      	b.n	8002c82 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002c60:	4b1e      	ldr	r3, [pc, #120]	@ (8002cdc <UART_SetConfig+0x56c>)
 8002c62:	61fb      	str	r3, [r7, #28]
        break;
 8002c64:	e00d      	b.n	8002c82 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002c66:	f7fe fecb 	bl	8001a00 <HAL_RCC_GetSysClockFreq>
 8002c6a:	61f8      	str	r0, [r7, #28]
        break;
 8002c6c:	e009      	b.n	8002c82 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002c6e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002c72:	61fb      	str	r3, [r7, #28]
        break;
 8002c74:	e005      	b.n	8002c82 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8002c76:	2300      	movs	r3, #0
 8002c78:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8002c80:	bf00      	nop
    }

    if (pclk != 0U)
 8002c82:	69fb      	ldr	r3, [r7, #28]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d019      	beq.n	8002cbc <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	085a      	lsrs	r2, r3, #1
 8002c8e:	69fb      	ldr	r3, [r7, #28]
 8002c90:	441a      	add	r2, r3
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c9a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002c9c:	69bb      	ldr	r3, [r7, #24]
 8002c9e:	2b0f      	cmp	r3, #15
 8002ca0:	d909      	bls.n	8002cb6 <UART_SetConfig+0x546>
 8002ca2:	69bb      	ldr	r3, [r7, #24]
 8002ca4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ca8:	d205      	bcs.n	8002cb6 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002caa:	69bb      	ldr	r3, [r7, #24]
 8002cac:	b29a      	uxth	r2, r3
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	60da      	str	r2, [r3, #12]
 8002cb4:	e002      	b.n	8002cbc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8002cc8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	3728      	adds	r7, #40	@ 0x28
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002cd6:	bf00      	nop
 8002cd8:	40008000 	.word	0x40008000
 8002cdc:	00f42400 	.word	0x00f42400

08002ce0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b083      	sub	sp, #12
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cec:	f003 0308 	and.w	r3, r3, #8
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d00a      	beq.n	8002d0a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	430a      	orrs	r2, r1
 8002d08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d0e:	f003 0301 	and.w	r3, r3, #1
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d00a      	beq.n	8002d2c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	430a      	orrs	r2, r1
 8002d2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d30:	f003 0302 	and.w	r3, r3, #2
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d00a      	beq.n	8002d4e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	430a      	orrs	r2, r1
 8002d4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d52:	f003 0304 	and.w	r3, r3, #4
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d00a      	beq.n	8002d70 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	430a      	orrs	r2, r1
 8002d6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d74:	f003 0310 	and.w	r3, r3, #16
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d00a      	beq.n	8002d92 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	430a      	orrs	r2, r1
 8002d90:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d96:	f003 0320 	and.w	r3, r3, #32
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d00a      	beq.n	8002db4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	430a      	orrs	r2, r1
 8002db2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002db8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d01a      	beq.n	8002df6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	430a      	orrs	r2, r1
 8002dd4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dda:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002dde:	d10a      	bne.n	8002df6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	430a      	orrs	r2, r1
 8002df4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dfa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d00a      	beq.n	8002e18 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	430a      	orrs	r2, r1
 8002e16:	605a      	str	r2, [r3, #4]
  }
}
 8002e18:	bf00      	nop
 8002e1a:	370c      	adds	r7, #12
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e22:	4770      	bx	lr

08002e24 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b098      	sub	sp, #96	@ 0x60
 8002e28:	af02      	add	r7, sp, #8
 8002e2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002e34:	f7fd fdd6 	bl	80009e4 <HAL_GetTick>
 8002e38:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f003 0308 	and.w	r3, r3, #8
 8002e44:	2b08      	cmp	r3, #8
 8002e46:	d12e      	bne.n	8002ea6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002e48:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002e4c:	9300      	str	r3, [sp, #0]
 8002e4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e50:	2200      	movs	r2, #0
 8002e52:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8002e56:	6878      	ldr	r0, [r7, #4]
 8002e58:	f000 f88c 	bl	8002f74 <UART_WaitOnFlagUntilTimeout>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d021      	beq.n	8002ea6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e6a:	e853 3f00 	ldrex	r3, [r3]
 8002e6e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002e70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e72:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002e76:	653b      	str	r3, [r7, #80]	@ 0x50
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	461a      	mov	r2, r3
 8002e7e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002e80:	647b      	str	r3, [r7, #68]	@ 0x44
 8002e82:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e84:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002e86:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002e88:	e841 2300 	strex	r3, r2, [r1]
 8002e8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002e8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d1e6      	bne.n	8002e62 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2220      	movs	r2, #32
 8002e98:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002ea2:	2303      	movs	r3, #3
 8002ea4:	e062      	b.n	8002f6c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f003 0304 	and.w	r3, r3, #4
 8002eb0:	2b04      	cmp	r3, #4
 8002eb2:	d149      	bne.n	8002f48 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002eb4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002eb8:	9300      	str	r3, [sp, #0]
 8002eba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8002ec2:	6878      	ldr	r0, [r7, #4]
 8002ec4:	f000 f856 	bl	8002f74 <UART_WaitOnFlagUntilTimeout>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d03c      	beq.n	8002f48 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ed4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ed6:	e853 3f00 	ldrex	r3, [r3]
 8002eda:	623b      	str	r3, [r7, #32]
   return(result);
 8002edc:	6a3b      	ldr	r3, [r7, #32]
 8002ede:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002ee2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	461a      	mov	r2, r3
 8002eea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002eec:	633b      	str	r3, [r7, #48]	@ 0x30
 8002eee:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ef0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002ef2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002ef4:	e841 2300 	strex	r3, r2, [r1]
 8002ef8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002efa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d1e6      	bne.n	8002ece <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	3308      	adds	r3, #8
 8002f06:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	e853 3f00 	ldrex	r3, [r3]
 8002f0e:	60fb      	str	r3, [r7, #12]
   return(result);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	f023 0301 	bic.w	r3, r3, #1
 8002f16:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	3308      	adds	r3, #8
 8002f1e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002f20:	61fa      	str	r2, [r7, #28]
 8002f22:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f24:	69b9      	ldr	r1, [r7, #24]
 8002f26:	69fa      	ldr	r2, [r7, #28]
 8002f28:	e841 2300 	strex	r3, r2, [r1]
 8002f2c:	617b      	str	r3, [r7, #20]
   return(result);
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d1e5      	bne.n	8002f00 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2220      	movs	r2, #32
 8002f38:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002f44:	2303      	movs	r3, #3
 8002f46:	e011      	b.n	8002f6c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2220      	movs	r2, #32
 8002f4c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2220      	movs	r2, #32
 8002f52:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2200      	movs	r2, #0
 8002f66:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8002f6a:	2300      	movs	r3, #0
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	3758      	adds	r7, #88	@ 0x58
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}

08002f74 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b084      	sub	sp, #16
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	60f8      	str	r0, [r7, #12]
 8002f7c:	60b9      	str	r1, [r7, #8]
 8002f7e:	603b      	str	r3, [r7, #0]
 8002f80:	4613      	mov	r3, r2
 8002f82:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f84:	e04f      	b.n	8003026 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f86:	69bb      	ldr	r3, [r7, #24]
 8002f88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f8c:	d04b      	beq.n	8003026 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f8e:	f7fd fd29 	bl	80009e4 <HAL_GetTick>
 8002f92:	4602      	mov	r2, r0
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	1ad3      	subs	r3, r2, r3
 8002f98:	69ba      	ldr	r2, [r7, #24]
 8002f9a:	429a      	cmp	r2, r3
 8002f9c:	d302      	bcc.n	8002fa4 <UART_WaitOnFlagUntilTimeout+0x30>
 8002f9e:	69bb      	ldr	r3, [r7, #24]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d101      	bne.n	8002fa8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002fa4:	2303      	movs	r3, #3
 8002fa6:	e04e      	b.n	8003046 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f003 0304 	and.w	r3, r3, #4
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d037      	beq.n	8003026 <UART_WaitOnFlagUntilTimeout+0xb2>
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	2b80      	cmp	r3, #128	@ 0x80
 8002fba:	d034      	beq.n	8003026 <UART_WaitOnFlagUntilTimeout+0xb2>
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	2b40      	cmp	r3, #64	@ 0x40
 8002fc0:	d031      	beq.n	8003026 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	69db      	ldr	r3, [r3, #28]
 8002fc8:	f003 0308 	and.w	r3, r3, #8
 8002fcc:	2b08      	cmp	r3, #8
 8002fce:	d110      	bne.n	8002ff2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	2208      	movs	r2, #8
 8002fd6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002fd8:	68f8      	ldr	r0, [r7, #12]
 8002fda:	f000 f838 	bl	800304e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	2208      	movs	r2, #8
 8002fe2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e029      	b.n	8003046 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	69db      	ldr	r3, [r3, #28]
 8002ff8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002ffc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003000:	d111      	bne.n	8003026 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800300a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800300c:	68f8      	ldr	r0, [r7, #12]
 800300e:	f000 f81e 	bl	800304e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	2220      	movs	r2, #32
 8003016:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	2200      	movs	r2, #0
 800301e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003022:	2303      	movs	r3, #3
 8003024:	e00f      	b.n	8003046 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	69da      	ldr	r2, [r3, #28]
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	4013      	ands	r3, r2
 8003030:	68ba      	ldr	r2, [r7, #8]
 8003032:	429a      	cmp	r2, r3
 8003034:	bf0c      	ite	eq
 8003036:	2301      	moveq	r3, #1
 8003038:	2300      	movne	r3, #0
 800303a:	b2db      	uxtb	r3, r3
 800303c:	461a      	mov	r2, r3
 800303e:	79fb      	ldrb	r3, [r7, #7]
 8003040:	429a      	cmp	r2, r3
 8003042:	d0a0      	beq.n	8002f86 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003044:	2300      	movs	r3, #0
}
 8003046:	4618      	mov	r0, r3
 8003048:	3710      	adds	r7, #16
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}

0800304e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800304e:	b480      	push	{r7}
 8003050:	b095      	sub	sp, #84	@ 0x54
 8003052:	af00      	add	r7, sp, #0
 8003054:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800305c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800305e:	e853 3f00 	ldrex	r3, [r3]
 8003062:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003064:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003066:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800306a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	461a      	mov	r2, r3
 8003072:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003074:	643b      	str	r3, [r7, #64]	@ 0x40
 8003076:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003078:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800307a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800307c:	e841 2300 	strex	r3, r2, [r1]
 8003080:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003082:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003084:	2b00      	cmp	r3, #0
 8003086:	d1e6      	bne.n	8003056 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	3308      	adds	r3, #8
 800308e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003090:	6a3b      	ldr	r3, [r7, #32]
 8003092:	e853 3f00 	ldrex	r3, [r3]
 8003096:	61fb      	str	r3, [r7, #28]
   return(result);
 8003098:	69fb      	ldr	r3, [r7, #28]
 800309a:	f023 0301 	bic.w	r3, r3, #1
 800309e:	64bb      	str	r3, [r7, #72]	@ 0x48
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	3308      	adds	r3, #8
 80030a6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80030a8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80030aa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030ac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80030ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80030b0:	e841 2300 	strex	r3, r2, [r1]
 80030b4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80030b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d1e5      	bne.n	8003088 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	d118      	bne.n	80030f6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	e853 3f00 	ldrex	r3, [r3]
 80030d0:	60bb      	str	r3, [r7, #8]
   return(result);
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	f023 0310 	bic.w	r3, r3, #16
 80030d8:	647b      	str	r3, [r7, #68]	@ 0x44
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	461a      	mov	r2, r3
 80030e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80030e2:	61bb      	str	r3, [r7, #24]
 80030e4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030e6:	6979      	ldr	r1, [r7, #20]
 80030e8:	69ba      	ldr	r2, [r7, #24]
 80030ea:	e841 2300 	strex	r3, r2, [r1]
 80030ee:	613b      	str	r3, [r7, #16]
   return(result);
 80030f0:	693b      	ldr	r3, [r7, #16]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d1e6      	bne.n	80030c4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2220      	movs	r2, #32
 80030fa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2200      	movs	r2, #0
 8003102:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2200      	movs	r2, #0
 8003108:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800310a:	bf00      	nop
 800310c:	3754      	adds	r7, #84	@ 0x54
 800310e:	46bd      	mov	sp, r7
 8003110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003114:	4770      	bx	lr
	...

08003118 <__NVIC_SetPriority>:
{
 8003118:	b480      	push	{r7}
 800311a:	b083      	sub	sp, #12
 800311c:	af00      	add	r7, sp, #0
 800311e:	4603      	mov	r3, r0
 8003120:	6039      	str	r1, [r7, #0]
 8003122:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003124:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003128:	2b00      	cmp	r3, #0
 800312a:	db0a      	blt.n	8003142 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	b2da      	uxtb	r2, r3
 8003130:	490c      	ldr	r1, [pc, #48]	@ (8003164 <__NVIC_SetPriority+0x4c>)
 8003132:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003136:	0112      	lsls	r2, r2, #4
 8003138:	b2d2      	uxtb	r2, r2
 800313a:	440b      	add	r3, r1
 800313c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003140:	e00a      	b.n	8003158 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	b2da      	uxtb	r2, r3
 8003146:	4908      	ldr	r1, [pc, #32]	@ (8003168 <__NVIC_SetPriority+0x50>)
 8003148:	79fb      	ldrb	r3, [r7, #7]
 800314a:	f003 030f 	and.w	r3, r3, #15
 800314e:	3b04      	subs	r3, #4
 8003150:	0112      	lsls	r2, r2, #4
 8003152:	b2d2      	uxtb	r2, r2
 8003154:	440b      	add	r3, r1
 8003156:	761a      	strb	r2, [r3, #24]
}
 8003158:	bf00      	nop
 800315a:	370c      	adds	r7, #12
 800315c:	46bd      	mov	sp, r7
 800315e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003162:	4770      	bx	lr
 8003164:	e000e100 	.word	0xe000e100
 8003168:	e000ed00 	.word	0xe000ed00

0800316c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800316c:	b580      	push	{r7, lr}
 800316e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003170:	2100      	movs	r1, #0
 8003172:	f06f 0004 	mvn.w	r0, #4
 8003176:	f7ff ffcf 	bl	8003118 <__NVIC_SetPriority>
#endif
}
 800317a:	bf00      	nop
 800317c:	bd80      	pop	{r7, pc}
	...

08003180 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003180:	b480      	push	{r7}
 8003182:	b083      	sub	sp, #12
 8003184:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003186:	f3ef 8305 	mrs	r3, IPSR
 800318a:	603b      	str	r3, [r7, #0]
  return(result);
 800318c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800318e:	2b00      	cmp	r3, #0
 8003190:	d003      	beq.n	800319a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003192:	f06f 0305 	mvn.w	r3, #5
 8003196:	607b      	str	r3, [r7, #4]
 8003198:	e00c      	b.n	80031b4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800319a:	4b0a      	ldr	r3, [pc, #40]	@ (80031c4 <osKernelInitialize+0x44>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d105      	bne.n	80031ae <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80031a2:	4b08      	ldr	r3, [pc, #32]	@ (80031c4 <osKernelInitialize+0x44>)
 80031a4:	2201      	movs	r2, #1
 80031a6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80031a8:	2300      	movs	r3, #0
 80031aa:	607b      	str	r3, [r7, #4]
 80031ac:	e002      	b.n	80031b4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80031ae:	f04f 33ff 	mov.w	r3, #4294967295
 80031b2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80031b4:	687b      	ldr	r3, [r7, #4]
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	370c      	adds	r7, #12
 80031ba:	46bd      	mov	sp, r7
 80031bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c0:	4770      	bx	lr
 80031c2:	bf00      	nop
 80031c4:	200000c0 	.word	0x200000c0

080031c8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b082      	sub	sp, #8
 80031cc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80031ce:	f3ef 8305 	mrs	r3, IPSR
 80031d2:	603b      	str	r3, [r7, #0]
  return(result);
 80031d4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d003      	beq.n	80031e2 <osKernelStart+0x1a>
    stat = osErrorISR;
 80031da:	f06f 0305 	mvn.w	r3, #5
 80031de:	607b      	str	r3, [r7, #4]
 80031e0:	e010      	b.n	8003204 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80031e2:	4b0b      	ldr	r3, [pc, #44]	@ (8003210 <osKernelStart+0x48>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	2b01      	cmp	r3, #1
 80031e8:	d109      	bne.n	80031fe <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80031ea:	f7ff ffbf 	bl	800316c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80031ee:	4b08      	ldr	r3, [pc, #32]	@ (8003210 <osKernelStart+0x48>)
 80031f0:	2202      	movs	r2, #2
 80031f2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80031f4:	f001 f87a 	bl	80042ec <vTaskStartScheduler>
      stat = osOK;
 80031f8:	2300      	movs	r3, #0
 80031fa:	607b      	str	r3, [r7, #4]
 80031fc:	e002      	b.n	8003204 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80031fe:	f04f 33ff 	mov.w	r3, #4294967295
 8003202:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003204:	687b      	ldr	r3, [r7, #4]
}
 8003206:	4618      	mov	r0, r3
 8003208:	3708      	adds	r7, #8
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}
 800320e:	bf00      	nop
 8003210:	200000c0 	.word	0x200000c0

08003214 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003214:	b580      	push	{r7, lr}
 8003216:	b08e      	sub	sp, #56	@ 0x38
 8003218:	af04      	add	r7, sp, #16
 800321a:	60f8      	str	r0, [r7, #12]
 800321c:	60b9      	str	r1, [r7, #8]
 800321e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003220:	2300      	movs	r3, #0
 8003222:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003224:	f3ef 8305 	mrs	r3, IPSR
 8003228:	617b      	str	r3, [r7, #20]
  return(result);
 800322a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800322c:	2b00      	cmp	r3, #0
 800322e:	d17e      	bne.n	800332e <osThreadNew+0x11a>
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d07b      	beq.n	800332e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8003236:	2380      	movs	r3, #128	@ 0x80
 8003238:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800323a:	2318      	movs	r3, #24
 800323c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800323e:	2300      	movs	r3, #0
 8003240:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8003242:	f04f 33ff 	mov.w	r3, #4294967295
 8003246:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d045      	beq.n	80032da <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d002      	beq.n	800325c <osThreadNew+0x48>
        name = attr->name;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	699b      	ldr	r3, [r3, #24]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d002      	beq.n	800326a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	699b      	ldr	r3, [r3, #24]
 8003268:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800326a:	69fb      	ldr	r3, [r7, #28]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d008      	beq.n	8003282 <osThreadNew+0x6e>
 8003270:	69fb      	ldr	r3, [r7, #28]
 8003272:	2b38      	cmp	r3, #56	@ 0x38
 8003274:	d805      	bhi.n	8003282 <osThreadNew+0x6e>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	f003 0301 	and.w	r3, r3, #1
 800327e:	2b00      	cmp	r3, #0
 8003280:	d001      	beq.n	8003286 <osThreadNew+0x72>
        return (NULL);
 8003282:	2300      	movs	r3, #0
 8003284:	e054      	b.n	8003330 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	695b      	ldr	r3, [r3, #20]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d003      	beq.n	8003296 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	695b      	ldr	r3, [r3, #20]
 8003292:	089b      	lsrs	r3, r3, #2
 8003294:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	689b      	ldr	r3, [r3, #8]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d00e      	beq.n	80032bc <osThreadNew+0xa8>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	68db      	ldr	r3, [r3, #12]
 80032a2:	2b5b      	cmp	r3, #91	@ 0x5b
 80032a4:	d90a      	bls.n	80032bc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d006      	beq.n	80032bc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	695b      	ldr	r3, [r3, #20]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d002      	beq.n	80032bc <osThreadNew+0xa8>
        mem = 1;
 80032b6:	2301      	movs	r3, #1
 80032b8:	61bb      	str	r3, [r7, #24]
 80032ba:	e010      	b.n	80032de <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d10c      	bne.n	80032de <osThreadNew+0xca>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	68db      	ldr	r3, [r3, #12]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d108      	bne.n	80032de <osThreadNew+0xca>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	691b      	ldr	r3, [r3, #16]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d104      	bne.n	80032de <osThreadNew+0xca>
          mem = 0;
 80032d4:	2300      	movs	r3, #0
 80032d6:	61bb      	str	r3, [r7, #24]
 80032d8:	e001      	b.n	80032de <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80032da:	2300      	movs	r3, #0
 80032dc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80032de:	69bb      	ldr	r3, [r7, #24]
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	d110      	bne.n	8003306 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80032e8:	687a      	ldr	r2, [r7, #4]
 80032ea:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80032ec:	9202      	str	r2, [sp, #8]
 80032ee:	9301      	str	r3, [sp, #4]
 80032f0:	69fb      	ldr	r3, [r7, #28]
 80032f2:	9300      	str	r3, [sp, #0]
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	6a3a      	ldr	r2, [r7, #32]
 80032f8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80032fa:	68f8      	ldr	r0, [r7, #12]
 80032fc:	f000 fe1a 	bl	8003f34 <xTaskCreateStatic>
 8003300:	4603      	mov	r3, r0
 8003302:	613b      	str	r3, [r7, #16]
 8003304:	e013      	b.n	800332e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003306:	69bb      	ldr	r3, [r7, #24]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d110      	bne.n	800332e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800330c:	6a3b      	ldr	r3, [r7, #32]
 800330e:	b29a      	uxth	r2, r3
 8003310:	f107 0310 	add.w	r3, r7, #16
 8003314:	9301      	str	r3, [sp, #4]
 8003316:	69fb      	ldr	r3, [r7, #28]
 8003318:	9300      	str	r3, [sp, #0]
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800331e:	68f8      	ldr	r0, [r7, #12]
 8003320:	f000 fe68 	bl	8003ff4 <xTaskCreate>
 8003324:	4603      	mov	r3, r0
 8003326:	2b01      	cmp	r3, #1
 8003328:	d001      	beq.n	800332e <osThreadNew+0x11a>
            hTask = NULL;
 800332a:	2300      	movs	r3, #0
 800332c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800332e:	693b      	ldr	r3, [r7, #16]
}
 8003330:	4618      	mov	r0, r3
 8003332:	3728      	adds	r7, #40	@ 0x28
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}

08003338 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003338:	b580      	push	{r7, lr}
 800333a:	b084      	sub	sp, #16
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003340:	f3ef 8305 	mrs	r3, IPSR
 8003344:	60bb      	str	r3, [r7, #8]
  return(result);
 8003346:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003348:	2b00      	cmp	r3, #0
 800334a:	d003      	beq.n	8003354 <osDelay+0x1c>
    stat = osErrorISR;
 800334c:	f06f 0305 	mvn.w	r3, #5
 8003350:	60fb      	str	r3, [r7, #12]
 8003352:	e007      	b.n	8003364 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003354:	2300      	movs	r3, #0
 8003356:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d002      	beq.n	8003364 <osDelay+0x2c>
      vTaskDelay(ticks);
 800335e:	6878      	ldr	r0, [r7, #4]
 8003360:	f000 ff8e 	bl	8004280 <vTaskDelay>
    }
  }

  return (stat);
 8003364:	68fb      	ldr	r3, [r7, #12]
}
 8003366:	4618      	mov	r0, r3
 8003368:	3710      	adds	r7, #16
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}
	...

08003370 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003370:	b480      	push	{r7}
 8003372:	b085      	sub	sp, #20
 8003374:	af00      	add	r7, sp, #0
 8003376:	60f8      	str	r0, [r7, #12]
 8003378:	60b9      	str	r1, [r7, #8]
 800337a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	4a07      	ldr	r2, [pc, #28]	@ (800339c <vApplicationGetIdleTaskMemory+0x2c>)
 8003380:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	4a06      	ldr	r2, [pc, #24]	@ (80033a0 <vApplicationGetIdleTaskMemory+0x30>)
 8003386:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2280      	movs	r2, #128	@ 0x80
 800338c:	601a      	str	r2, [r3, #0]
}
 800338e:	bf00      	nop
 8003390:	3714      	adds	r7, #20
 8003392:	46bd      	mov	sp, r7
 8003394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003398:	4770      	bx	lr
 800339a:	bf00      	nop
 800339c:	200000c4 	.word	0x200000c4
 80033a0:	20000120 	.word	0x20000120

080033a4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80033a4:	b480      	push	{r7}
 80033a6:	b085      	sub	sp, #20
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	60f8      	str	r0, [r7, #12]
 80033ac:	60b9      	str	r1, [r7, #8]
 80033ae:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	4a07      	ldr	r2, [pc, #28]	@ (80033d0 <vApplicationGetTimerTaskMemory+0x2c>)
 80033b4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	4a06      	ldr	r2, [pc, #24]	@ (80033d4 <vApplicationGetTimerTaskMemory+0x30>)
 80033ba:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80033c2:	601a      	str	r2, [r3, #0]
}
 80033c4:	bf00      	nop
 80033c6:	3714      	adds	r7, #20
 80033c8:	46bd      	mov	sp, r7
 80033ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ce:	4770      	bx	lr
 80033d0:	20000320 	.word	0x20000320
 80033d4:	2000037c 	.word	0x2000037c

080033d8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80033d8:	b480      	push	{r7}
 80033da:	b083      	sub	sp, #12
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	f103 0208 	add.w	r2, r3, #8
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	f04f 32ff 	mov.w	r2, #4294967295
 80033f0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	f103 0208 	add.w	r2, r3, #8
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	f103 0208 	add.w	r2, r3, #8
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2200      	movs	r2, #0
 800340a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800340c:	bf00      	nop
 800340e:	370c      	adds	r7, #12
 8003410:	46bd      	mov	sp, r7
 8003412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003416:	4770      	bx	lr

08003418 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003418:	b480      	push	{r7}
 800341a:	b083      	sub	sp, #12
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2200      	movs	r2, #0
 8003424:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003426:	bf00      	nop
 8003428:	370c      	adds	r7, #12
 800342a:	46bd      	mov	sp, r7
 800342c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003430:	4770      	bx	lr

08003432 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003432:	b480      	push	{r7}
 8003434:	b085      	sub	sp, #20
 8003436:	af00      	add	r7, sp, #0
 8003438:	6078      	str	r0, [r7, #4]
 800343a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	68fa      	ldr	r2, [r7, #12]
 8003446:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	689a      	ldr	r2, [r3, #8]
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	683a      	ldr	r2, [r7, #0]
 8003456:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	683a      	ldr	r2, [r7, #0]
 800345c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	687a      	ldr	r2, [r7, #4]
 8003462:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	1c5a      	adds	r2, r3, #1
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	601a      	str	r2, [r3, #0]
}
 800346e:	bf00      	nop
 8003470:	3714      	adds	r7, #20
 8003472:	46bd      	mov	sp, r7
 8003474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003478:	4770      	bx	lr

0800347a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800347a:	b480      	push	{r7}
 800347c:	b085      	sub	sp, #20
 800347e:	af00      	add	r7, sp, #0
 8003480:	6078      	str	r0, [r7, #4]
 8003482:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003490:	d103      	bne.n	800349a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	691b      	ldr	r3, [r3, #16]
 8003496:	60fb      	str	r3, [r7, #12]
 8003498:	e00c      	b.n	80034b4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	3308      	adds	r3, #8
 800349e:	60fb      	str	r3, [r7, #12]
 80034a0:	e002      	b.n	80034a8 <vListInsert+0x2e>
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	60fb      	str	r3, [r7, #12]
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	68ba      	ldr	r2, [r7, #8]
 80034b0:	429a      	cmp	r2, r3
 80034b2:	d2f6      	bcs.n	80034a2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	685a      	ldr	r2, [r3, #4]
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	683a      	ldr	r2, [r7, #0]
 80034c2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	68fa      	ldr	r2, [r7, #12]
 80034c8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	683a      	ldr	r2, [r7, #0]
 80034ce:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	687a      	ldr	r2, [r7, #4]
 80034d4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	1c5a      	adds	r2, r3, #1
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	601a      	str	r2, [r3, #0]
}
 80034e0:	bf00      	nop
 80034e2:	3714      	adds	r7, #20
 80034e4:	46bd      	mov	sp, r7
 80034e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ea:	4770      	bx	lr

080034ec <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80034ec:	b480      	push	{r7}
 80034ee:	b085      	sub	sp, #20
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	691b      	ldr	r3, [r3, #16]
 80034f8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	687a      	ldr	r2, [r7, #4]
 8003500:	6892      	ldr	r2, [r2, #8]
 8003502:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	687a      	ldr	r2, [r7, #4]
 800350a:	6852      	ldr	r2, [r2, #4]
 800350c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	687a      	ldr	r2, [r7, #4]
 8003514:	429a      	cmp	r2, r3
 8003516:	d103      	bne.n	8003520 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	689a      	ldr	r2, [r3, #8]
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2200      	movs	r2, #0
 8003524:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	1e5a      	subs	r2, r3, #1
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
}
 8003534:	4618      	mov	r0, r3
 8003536:	3714      	adds	r7, #20
 8003538:	46bd      	mov	sp, r7
 800353a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353e:	4770      	bx	lr

08003540 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b084      	sub	sp, #16
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
 8003548:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d10b      	bne.n	800356c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003554:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003558:	f383 8811 	msr	BASEPRI, r3
 800355c:	f3bf 8f6f 	isb	sy
 8003560:	f3bf 8f4f 	dsb	sy
 8003564:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003566:	bf00      	nop
 8003568:	bf00      	nop
 800356a:	e7fd      	b.n	8003568 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800356c:	f002 f87c 	bl	8005668 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681a      	ldr	r2, [r3, #0]
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003578:	68f9      	ldr	r1, [r7, #12]
 800357a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800357c:	fb01 f303 	mul.w	r3, r1, r3
 8003580:	441a      	add	r2, r3
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2200      	movs	r2, #0
 800358a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681a      	ldr	r2, [r3, #0]
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681a      	ldr	r2, [r3, #0]
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800359c:	3b01      	subs	r3, #1
 800359e:	68f9      	ldr	r1, [r7, #12]
 80035a0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80035a2:	fb01 f303 	mul.w	r3, r1, r3
 80035a6:	441a      	add	r2, r3
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	22ff      	movs	r2, #255	@ 0xff
 80035b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	22ff      	movs	r2, #255	@ 0xff
 80035b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d114      	bne.n	80035ec <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	691b      	ldr	r3, [r3, #16]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d01a      	beq.n	8003600 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	3310      	adds	r3, #16
 80035ce:	4618      	mov	r0, r3
 80035d0:	f001 f91a 	bl	8004808 <xTaskRemoveFromEventList>
 80035d4:	4603      	mov	r3, r0
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d012      	beq.n	8003600 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80035da:	4b0d      	ldr	r3, [pc, #52]	@ (8003610 <xQueueGenericReset+0xd0>)
 80035dc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80035e0:	601a      	str	r2, [r3, #0]
 80035e2:	f3bf 8f4f 	dsb	sy
 80035e6:	f3bf 8f6f 	isb	sy
 80035ea:	e009      	b.n	8003600 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	3310      	adds	r3, #16
 80035f0:	4618      	mov	r0, r3
 80035f2:	f7ff fef1 	bl	80033d8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	3324      	adds	r3, #36	@ 0x24
 80035fa:	4618      	mov	r0, r3
 80035fc:	f7ff feec 	bl	80033d8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003600:	f002 f864 	bl	80056cc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003604:	2301      	movs	r3, #1
}
 8003606:	4618      	mov	r0, r3
 8003608:	3710      	adds	r7, #16
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}
 800360e:	bf00      	nop
 8003610:	e000ed04 	.word	0xe000ed04

08003614 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003614:	b580      	push	{r7, lr}
 8003616:	b08e      	sub	sp, #56	@ 0x38
 8003618:	af02      	add	r7, sp, #8
 800361a:	60f8      	str	r0, [r7, #12]
 800361c:	60b9      	str	r1, [r7, #8]
 800361e:	607a      	str	r2, [r7, #4]
 8003620:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d10b      	bne.n	8003640 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8003628:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800362c:	f383 8811 	msr	BASEPRI, r3
 8003630:	f3bf 8f6f 	isb	sy
 8003634:	f3bf 8f4f 	dsb	sy
 8003638:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800363a:	bf00      	nop
 800363c:	bf00      	nop
 800363e:	e7fd      	b.n	800363c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d10b      	bne.n	800365e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8003646:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800364a:	f383 8811 	msr	BASEPRI, r3
 800364e:	f3bf 8f6f 	isb	sy
 8003652:	f3bf 8f4f 	dsb	sy
 8003656:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003658:	bf00      	nop
 800365a:	bf00      	nop
 800365c:	e7fd      	b.n	800365a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d002      	beq.n	800366a <xQueueGenericCreateStatic+0x56>
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d001      	beq.n	800366e <xQueueGenericCreateStatic+0x5a>
 800366a:	2301      	movs	r3, #1
 800366c:	e000      	b.n	8003670 <xQueueGenericCreateStatic+0x5c>
 800366e:	2300      	movs	r3, #0
 8003670:	2b00      	cmp	r3, #0
 8003672:	d10b      	bne.n	800368c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8003674:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003678:	f383 8811 	msr	BASEPRI, r3
 800367c:	f3bf 8f6f 	isb	sy
 8003680:	f3bf 8f4f 	dsb	sy
 8003684:	623b      	str	r3, [r7, #32]
}
 8003686:	bf00      	nop
 8003688:	bf00      	nop
 800368a:	e7fd      	b.n	8003688 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d102      	bne.n	8003698 <xQueueGenericCreateStatic+0x84>
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d101      	bne.n	800369c <xQueueGenericCreateStatic+0x88>
 8003698:	2301      	movs	r3, #1
 800369a:	e000      	b.n	800369e <xQueueGenericCreateStatic+0x8a>
 800369c:	2300      	movs	r3, #0
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d10b      	bne.n	80036ba <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80036a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036a6:	f383 8811 	msr	BASEPRI, r3
 80036aa:	f3bf 8f6f 	isb	sy
 80036ae:	f3bf 8f4f 	dsb	sy
 80036b2:	61fb      	str	r3, [r7, #28]
}
 80036b4:	bf00      	nop
 80036b6:	bf00      	nop
 80036b8:	e7fd      	b.n	80036b6 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80036ba:	2350      	movs	r3, #80	@ 0x50
 80036bc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	2b50      	cmp	r3, #80	@ 0x50
 80036c2:	d00b      	beq.n	80036dc <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80036c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036c8:	f383 8811 	msr	BASEPRI, r3
 80036cc:	f3bf 8f6f 	isb	sy
 80036d0:	f3bf 8f4f 	dsb	sy
 80036d4:	61bb      	str	r3, [r7, #24]
}
 80036d6:	bf00      	nop
 80036d8:	bf00      	nop
 80036da:	e7fd      	b.n	80036d8 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80036dc:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80036e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d00d      	beq.n	8003704 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80036e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036ea:	2201      	movs	r2, #1
 80036ec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80036f0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80036f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036f6:	9300      	str	r3, [sp, #0]
 80036f8:	4613      	mov	r3, r2
 80036fa:	687a      	ldr	r2, [r7, #4]
 80036fc:	68b9      	ldr	r1, [r7, #8]
 80036fe:	68f8      	ldr	r0, [r7, #12]
 8003700:	f000 f805 	bl	800370e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003704:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8003706:	4618      	mov	r0, r3
 8003708:	3730      	adds	r7, #48	@ 0x30
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}

0800370e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800370e:	b580      	push	{r7, lr}
 8003710:	b084      	sub	sp, #16
 8003712:	af00      	add	r7, sp, #0
 8003714:	60f8      	str	r0, [r7, #12]
 8003716:	60b9      	str	r1, [r7, #8]
 8003718:	607a      	str	r2, [r7, #4]
 800371a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d103      	bne.n	800372a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003722:	69bb      	ldr	r3, [r7, #24]
 8003724:	69ba      	ldr	r2, [r7, #24]
 8003726:	601a      	str	r2, [r3, #0]
 8003728:	e002      	b.n	8003730 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800372a:	69bb      	ldr	r3, [r7, #24]
 800372c:	687a      	ldr	r2, [r7, #4]
 800372e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003730:	69bb      	ldr	r3, [r7, #24]
 8003732:	68fa      	ldr	r2, [r7, #12]
 8003734:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003736:	69bb      	ldr	r3, [r7, #24]
 8003738:	68ba      	ldr	r2, [r7, #8]
 800373a:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800373c:	2101      	movs	r1, #1
 800373e:	69b8      	ldr	r0, [r7, #24]
 8003740:	f7ff fefe 	bl	8003540 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003744:	69bb      	ldr	r3, [r7, #24]
 8003746:	78fa      	ldrb	r2, [r7, #3]
 8003748:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800374c:	bf00      	nop
 800374e:	3710      	adds	r7, #16
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}

08003754 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b08e      	sub	sp, #56	@ 0x38
 8003758:	af00      	add	r7, sp, #0
 800375a:	60f8      	str	r0, [r7, #12]
 800375c:	60b9      	str	r1, [r7, #8]
 800375e:	607a      	str	r2, [r7, #4]
 8003760:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003762:	2300      	movs	r3, #0
 8003764:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800376a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800376c:	2b00      	cmp	r3, #0
 800376e:	d10b      	bne.n	8003788 <xQueueGenericSend+0x34>
	__asm volatile
 8003770:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003774:	f383 8811 	msr	BASEPRI, r3
 8003778:	f3bf 8f6f 	isb	sy
 800377c:	f3bf 8f4f 	dsb	sy
 8003780:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003782:	bf00      	nop
 8003784:	bf00      	nop
 8003786:	e7fd      	b.n	8003784 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d103      	bne.n	8003796 <xQueueGenericSend+0x42>
 800378e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003790:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003792:	2b00      	cmp	r3, #0
 8003794:	d101      	bne.n	800379a <xQueueGenericSend+0x46>
 8003796:	2301      	movs	r3, #1
 8003798:	e000      	b.n	800379c <xQueueGenericSend+0x48>
 800379a:	2300      	movs	r3, #0
 800379c:	2b00      	cmp	r3, #0
 800379e:	d10b      	bne.n	80037b8 <xQueueGenericSend+0x64>
	__asm volatile
 80037a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037a4:	f383 8811 	msr	BASEPRI, r3
 80037a8:	f3bf 8f6f 	isb	sy
 80037ac:	f3bf 8f4f 	dsb	sy
 80037b0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80037b2:	bf00      	nop
 80037b4:	bf00      	nop
 80037b6:	e7fd      	b.n	80037b4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	2b02      	cmp	r3, #2
 80037bc:	d103      	bne.n	80037c6 <xQueueGenericSend+0x72>
 80037be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037c2:	2b01      	cmp	r3, #1
 80037c4:	d101      	bne.n	80037ca <xQueueGenericSend+0x76>
 80037c6:	2301      	movs	r3, #1
 80037c8:	e000      	b.n	80037cc <xQueueGenericSend+0x78>
 80037ca:	2300      	movs	r3, #0
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d10b      	bne.n	80037e8 <xQueueGenericSend+0x94>
	__asm volatile
 80037d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037d4:	f383 8811 	msr	BASEPRI, r3
 80037d8:	f3bf 8f6f 	isb	sy
 80037dc:	f3bf 8f4f 	dsb	sy
 80037e0:	623b      	str	r3, [r7, #32]
}
 80037e2:	bf00      	nop
 80037e4:	bf00      	nop
 80037e6:	e7fd      	b.n	80037e4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80037e8:	f001 f9ce 	bl	8004b88 <xTaskGetSchedulerState>
 80037ec:	4603      	mov	r3, r0
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d102      	bne.n	80037f8 <xQueueGenericSend+0xa4>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d101      	bne.n	80037fc <xQueueGenericSend+0xa8>
 80037f8:	2301      	movs	r3, #1
 80037fa:	e000      	b.n	80037fe <xQueueGenericSend+0xaa>
 80037fc:	2300      	movs	r3, #0
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d10b      	bne.n	800381a <xQueueGenericSend+0xc6>
	__asm volatile
 8003802:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003806:	f383 8811 	msr	BASEPRI, r3
 800380a:	f3bf 8f6f 	isb	sy
 800380e:	f3bf 8f4f 	dsb	sy
 8003812:	61fb      	str	r3, [r7, #28]
}
 8003814:	bf00      	nop
 8003816:	bf00      	nop
 8003818:	e7fd      	b.n	8003816 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800381a:	f001 ff25 	bl	8005668 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800381e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003820:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003822:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003824:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003826:	429a      	cmp	r2, r3
 8003828:	d302      	bcc.n	8003830 <xQueueGenericSend+0xdc>
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	2b02      	cmp	r3, #2
 800382e:	d129      	bne.n	8003884 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003830:	683a      	ldr	r2, [r7, #0]
 8003832:	68b9      	ldr	r1, [r7, #8]
 8003834:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003836:	f000 fa0f 	bl	8003c58 <prvCopyDataToQueue>
 800383a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800383c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800383e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003840:	2b00      	cmp	r3, #0
 8003842:	d010      	beq.n	8003866 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003844:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003846:	3324      	adds	r3, #36	@ 0x24
 8003848:	4618      	mov	r0, r3
 800384a:	f000 ffdd 	bl	8004808 <xTaskRemoveFromEventList>
 800384e:	4603      	mov	r3, r0
 8003850:	2b00      	cmp	r3, #0
 8003852:	d013      	beq.n	800387c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003854:	4b3f      	ldr	r3, [pc, #252]	@ (8003954 <xQueueGenericSend+0x200>)
 8003856:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800385a:	601a      	str	r2, [r3, #0]
 800385c:	f3bf 8f4f 	dsb	sy
 8003860:	f3bf 8f6f 	isb	sy
 8003864:	e00a      	b.n	800387c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003866:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003868:	2b00      	cmp	r3, #0
 800386a:	d007      	beq.n	800387c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800386c:	4b39      	ldr	r3, [pc, #228]	@ (8003954 <xQueueGenericSend+0x200>)
 800386e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003872:	601a      	str	r2, [r3, #0]
 8003874:	f3bf 8f4f 	dsb	sy
 8003878:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800387c:	f001 ff26 	bl	80056cc <vPortExitCritical>
				return pdPASS;
 8003880:	2301      	movs	r3, #1
 8003882:	e063      	b.n	800394c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d103      	bne.n	8003892 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800388a:	f001 ff1f 	bl	80056cc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800388e:	2300      	movs	r3, #0
 8003890:	e05c      	b.n	800394c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003892:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003894:	2b00      	cmp	r3, #0
 8003896:	d106      	bne.n	80038a6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003898:	f107 0314 	add.w	r3, r7, #20
 800389c:	4618      	mov	r0, r3
 800389e:	f001 f817 	bl	80048d0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80038a2:	2301      	movs	r3, #1
 80038a4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80038a6:	f001 ff11 	bl	80056cc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80038aa:	f000 fd87 	bl	80043bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80038ae:	f001 fedb 	bl	8005668 <vPortEnterCritical>
 80038b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038b4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80038b8:	b25b      	sxtb	r3, r3
 80038ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038be:	d103      	bne.n	80038c8 <xQueueGenericSend+0x174>
 80038c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038c2:	2200      	movs	r2, #0
 80038c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80038c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038ca:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80038ce:	b25b      	sxtb	r3, r3
 80038d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038d4:	d103      	bne.n	80038de <xQueueGenericSend+0x18a>
 80038d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038d8:	2200      	movs	r2, #0
 80038da:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80038de:	f001 fef5 	bl	80056cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80038e2:	1d3a      	adds	r2, r7, #4
 80038e4:	f107 0314 	add.w	r3, r7, #20
 80038e8:	4611      	mov	r1, r2
 80038ea:	4618      	mov	r0, r3
 80038ec:	f001 f806 	bl	80048fc <xTaskCheckForTimeOut>
 80038f0:	4603      	mov	r3, r0
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d124      	bne.n	8003940 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80038f6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80038f8:	f000 faa6 	bl	8003e48 <prvIsQueueFull>
 80038fc:	4603      	mov	r3, r0
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d018      	beq.n	8003934 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003902:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003904:	3310      	adds	r3, #16
 8003906:	687a      	ldr	r2, [r7, #4]
 8003908:	4611      	mov	r1, r2
 800390a:	4618      	mov	r0, r3
 800390c:	f000 ff2a 	bl	8004764 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003910:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003912:	f000 fa31 	bl	8003d78 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003916:	f000 fd5f 	bl	80043d8 <xTaskResumeAll>
 800391a:	4603      	mov	r3, r0
 800391c:	2b00      	cmp	r3, #0
 800391e:	f47f af7c 	bne.w	800381a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8003922:	4b0c      	ldr	r3, [pc, #48]	@ (8003954 <xQueueGenericSend+0x200>)
 8003924:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003928:	601a      	str	r2, [r3, #0]
 800392a:	f3bf 8f4f 	dsb	sy
 800392e:	f3bf 8f6f 	isb	sy
 8003932:	e772      	b.n	800381a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003934:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003936:	f000 fa1f 	bl	8003d78 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800393a:	f000 fd4d 	bl	80043d8 <xTaskResumeAll>
 800393e:	e76c      	b.n	800381a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003940:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003942:	f000 fa19 	bl	8003d78 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003946:	f000 fd47 	bl	80043d8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800394a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800394c:	4618      	mov	r0, r3
 800394e:	3738      	adds	r7, #56	@ 0x38
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}
 8003954:	e000ed04 	.word	0xe000ed04

08003958 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b090      	sub	sp, #64	@ 0x40
 800395c:	af00      	add	r7, sp, #0
 800395e:	60f8      	str	r0, [r7, #12]
 8003960:	60b9      	str	r1, [r7, #8]
 8003962:	607a      	str	r2, [r7, #4]
 8003964:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800396a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800396c:	2b00      	cmp	r3, #0
 800396e:	d10b      	bne.n	8003988 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8003970:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003974:	f383 8811 	msr	BASEPRI, r3
 8003978:	f3bf 8f6f 	isb	sy
 800397c:	f3bf 8f4f 	dsb	sy
 8003980:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003982:	bf00      	nop
 8003984:	bf00      	nop
 8003986:	e7fd      	b.n	8003984 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d103      	bne.n	8003996 <xQueueGenericSendFromISR+0x3e>
 800398e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003990:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003992:	2b00      	cmp	r3, #0
 8003994:	d101      	bne.n	800399a <xQueueGenericSendFromISR+0x42>
 8003996:	2301      	movs	r3, #1
 8003998:	e000      	b.n	800399c <xQueueGenericSendFromISR+0x44>
 800399a:	2300      	movs	r3, #0
 800399c:	2b00      	cmp	r3, #0
 800399e:	d10b      	bne.n	80039b8 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80039a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039a4:	f383 8811 	msr	BASEPRI, r3
 80039a8:	f3bf 8f6f 	isb	sy
 80039ac:	f3bf 8f4f 	dsb	sy
 80039b0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80039b2:	bf00      	nop
 80039b4:	bf00      	nop
 80039b6:	e7fd      	b.n	80039b4 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	2b02      	cmp	r3, #2
 80039bc:	d103      	bne.n	80039c6 <xQueueGenericSendFromISR+0x6e>
 80039be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039c2:	2b01      	cmp	r3, #1
 80039c4:	d101      	bne.n	80039ca <xQueueGenericSendFromISR+0x72>
 80039c6:	2301      	movs	r3, #1
 80039c8:	e000      	b.n	80039cc <xQueueGenericSendFromISR+0x74>
 80039ca:	2300      	movs	r3, #0
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d10b      	bne.n	80039e8 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80039d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039d4:	f383 8811 	msr	BASEPRI, r3
 80039d8:	f3bf 8f6f 	isb	sy
 80039dc:	f3bf 8f4f 	dsb	sy
 80039e0:	623b      	str	r3, [r7, #32]
}
 80039e2:	bf00      	nop
 80039e4:	bf00      	nop
 80039e6:	e7fd      	b.n	80039e4 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80039e8:	f001 ff1e 	bl	8005828 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80039ec:	f3ef 8211 	mrs	r2, BASEPRI
 80039f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039f4:	f383 8811 	msr	BASEPRI, r3
 80039f8:	f3bf 8f6f 	isb	sy
 80039fc:	f3bf 8f4f 	dsb	sy
 8003a00:	61fa      	str	r2, [r7, #28]
 8003a02:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003a04:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003a06:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003a08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a0a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003a0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a10:	429a      	cmp	r2, r3
 8003a12:	d302      	bcc.n	8003a1a <xQueueGenericSendFromISR+0xc2>
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	2b02      	cmp	r3, #2
 8003a18:	d12f      	bne.n	8003a7a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003a1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a1c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003a20:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003a24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a28:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003a2a:	683a      	ldr	r2, [r7, #0]
 8003a2c:	68b9      	ldr	r1, [r7, #8]
 8003a2e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8003a30:	f000 f912 	bl	8003c58 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003a34:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8003a38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a3c:	d112      	bne.n	8003a64 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003a3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d016      	beq.n	8003a74 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003a46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a48:	3324      	adds	r3, #36	@ 0x24
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f000 fedc 	bl	8004808 <xTaskRemoveFromEventList>
 8003a50:	4603      	mov	r3, r0
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d00e      	beq.n	8003a74 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d00b      	beq.n	8003a74 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2201      	movs	r2, #1
 8003a60:	601a      	str	r2, [r3, #0]
 8003a62:	e007      	b.n	8003a74 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003a64:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003a68:	3301      	adds	r3, #1
 8003a6a:	b2db      	uxtb	r3, r3
 8003a6c:	b25a      	sxtb	r2, r3
 8003a6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a70:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8003a74:	2301      	movs	r3, #1
 8003a76:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8003a78:	e001      	b.n	8003a7e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003a7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a80:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003a88:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003a8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	3740      	adds	r7, #64	@ 0x40
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd80      	pop	{r7, pc}

08003a94 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b08c      	sub	sp, #48	@ 0x30
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	60f8      	str	r0, [r7, #12]
 8003a9c:	60b9      	str	r1, [r7, #8]
 8003a9e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003aa8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d10b      	bne.n	8003ac6 <xQueueReceive+0x32>
	__asm volatile
 8003aae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ab2:	f383 8811 	msr	BASEPRI, r3
 8003ab6:	f3bf 8f6f 	isb	sy
 8003aba:	f3bf 8f4f 	dsb	sy
 8003abe:	623b      	str	r3, [r7, #32]
}
 8003ac0:	bf00      	nop
 8003ac2:	bf00      	nop
 8003ac4:	e7fd      	b.n	8003ac2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d103      	bne.n	8003ad4 <xQueueReceive+0x40>
 8003acc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ace:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d101      	bne.n	8003ad8 <xQueueReceive+0x44>
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	e000      	b.n	8003ada <xQueueReceive+0x46>
 8003ad8:	2300      	movs	r3, #0
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d10b      	bne.n	8003af6 <xQueueReceive+0x62>
	__asm volatile
 8003ade:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ae2:	f383 8811 	msr	BASEPRI, r3
 8003ae6:	f3bf 8f6f 	isb	sy
 8003aea:	f3bf 8f4f 	dsb	sy
 8003aee:	61fb      	str	r3, [r7, #28]
}
 8003af0:	bf00      	nop
 8003af2:	bf00      	nop
 8003af4:	e7fd      	b.n	8003af2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003af6:	f001 f847 	bl	8004b88 <xTaskGetSchedulerState>
 8003afa:	4603      	mov	r3, r0
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d102      	bne.n	8003b06 <xQueueReceive+0x72>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d101      	bne.n	8003b0a <xQueueReceive+0x76>
 8003b06:	2301      	movs	r3, #1
 8003b08:	e000      	b.n	8003b0c <xQueueReceive+0x78>
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d10b      	bne.n	8003b28 <xQueueReceive+0x94>
	__asm volatile
 8003b10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b14:	f383 8811 	msr	BASEPRI, r3
 8003b18:	f3bf 8f6f 	isb	sy
 8003b1c:	f3bf 8f4f 	dsb	sy
 8003b20:	61bb      	str	r3, [r7, #24]
}
 8003b22:	bf00      	nop
 8003b24:	bf00      	nop
 8003b26:	e7fd      	b.n	8003b24 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003b28:	f001 fd9e 	bl	8005668 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003b2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b30:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003b32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d01f      	beq.n	8003b78 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003b38:	68b9      	ldr	r1, [r7, #8]
 8003b3a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003b3c:	f000 f8f6 	bl	8003d2c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003b40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b42:	1e5a      	subs	r2, r3, #1
 8003b44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b46:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003b48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b4a:	691b      	ldr	r3, [r3, #16]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d00f      	beq.n	8003b70 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003b50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b52:	3310      	adds	r3, #16
 8003b54:	4618      	mov	r0, r3
 8003b56:	f000 fe57 	bl	8004808 <xTaskRemoveFromEventList>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d007      	beq.n	8003b70 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003b60:	4b3c      	ldr	r3, [pc, #240]	@ (8003c54 <xQueueReceive+0x1c0>)
 8003b62:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003b66:	601a      	str	r2, [r3, #0]
 8003b68:	f3bf 8f4f 	dsb	sy
 8003b6c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003b70:	f001 fdac 	bl	80056cc <vPortExitCritical>
				return pdPASS;
 8003b74:	2301      	movs	r3, #1
 8003b76:	e069      	b.n	8003c4c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d103      	bne.n	8003b86 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003b7e:	f001 fda5 	bl	80056cc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003b82:	2300      	movs	r3, #0
 8003b84:	e062      	b.n	8003c4c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003b86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d106      	bne.n	8003b9a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003b8c:	f107 0310 	add.w	r3, r7, #16
 8003b90:	4618      	mov	r0, r3
 8003b92:	f000 fe9d 	bl	80048d0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003b96:	2301      	movs	r3, #1
 8003b98:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003b9a:	f001 fd97 	bl	80056cc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003b9e:	f000 fc0d 	bl	80043bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003ba2:	f001 fd61 	bl	8005668 <vPortEnterCritical>
 8003ba6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ba8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003bac:	b25b      	sxtb	r3, r3
 8003bae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bb2:	d103      	bne.n	8003bbc <xQueueReceive+0x128>
 8003bb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003bbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bbe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003bc2:	b25b      	sxtb	r3, r3
 8003bc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bc8:	d103      	bne.n	8003bd2 <xQueueReceive+0x13e>
 8003bca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bcc:	2200      	movs	r2, #0
 8003bce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003bd2:	f001 fd7b 	bl	80056cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003bd6:	1d3a      	adds	r2, r7, #4
 8003bd8:	f107 0310 	add.w	r3, r7, #16
 8003bdc:	4611      	mov	r1, r2
 8003bde:	4618      	mov	r0, r3
 8003be0:	f000 fe8c 	bl	80048fc <xTaskCheckForTimeOut>
 8003be4:	4603      	mov	r3, r0
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d123      	bne.n	8003c32 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003bea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003bec:	f000 f916 	bl	8003e1c <prvIsQueueEmpty>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d017      	beq.n	8003c26 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003bf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bf8:	3324      	adds	r3, #36	@ 0x24
 8003bfa:	687a      	ldr	r2, [r7, #4]
 8003bfc:	4611      	mov	r1, r2
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f000 fdb0 	bl	8004764 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003c04:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003c06:	f000 f8b7 	bl	8003d78 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003c0a:	f000 fbe5 	bl	80043d8 <xTaskResumeAll>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d189      	bne.n	8003b28 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8003c14:	4b0f      	ldr	r3, [pc, #60]	@ (8003c54 <xQueueReceive+0x1c0>)
 8003c16:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003c1a:	601a      	str	r2, [r3, #0]
 8003c1c:	f3bf 8f4f 	dsb	sy
 8003c20:	f3bf 8f6f 	isb	sy
 8003c24:	e780      	b.n	8003b28 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003c26:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003c28:	f000 f8a6 	bl	8003d78 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003c2c:	f000 fbd4 	bl	80043d8 <xTaskResumeAll>
 8003c30:	e77a      	b.n	8003b28 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003c32:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003c34:	f000 f8a0 	bl	8003d78 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003c38:	f000 fbce 	bl	80043d8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003c3c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003c3e:	f000 f8ed 	bl	8003e1c <prvIsQueueEmpty>
 8003c42:	4603      	mov	r3, r0
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	f43f af6f 	beq.w	8003b28 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003c4a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	3730      	adds	r7, #48	@ 0x30
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bd80      	pop	{r7, pc}
 8003c54:	e000ed04 	.word	0xe000ed04

08003c58 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b086      	sub	sp, #24
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	60f8      	str	r0, [r7, #12]
 8003c60:	60b9      	str	r1, [r7, #8]
 8003c62:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003c64:	2300      	movs	r3, #0
 8003c66:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c6c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d10d      	bne.n	8003c92 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d14d      	bne.n	8003d1a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	689b      	ldr	r3, [r3, #8]
 8003c82:	4618      	mov	r0, r3
 8003c84:	f000 ff9e 	bl	8004bc4 <xTaskPriorityDisinherit>
 8003c88:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	609a      	str	r2, [r3, #8]
 8003c90:	e043      	b.n	8003d1a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d119      	bne.n	8003ccc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	6858      	ldr	r0, [r3, #4]
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ca0:	461a      	mov	r2, r3
 8003ca2:	68b9      	ldr	r1, [r7, #8]
 8003ca4:	f002 f81c 	bl	8005ce0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	685a      	ldr	r2, [r3, #4]
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cb0:	441a      	add	r2, r3
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	685a      	ldr	r2, [r3, #4]
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	689b      	ldr	r3, [r3, #8]
 8003cbe:	429a      	cmp	r2, r3
 8003cc0:	d32b      	bcc.n	8003d1a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681a      	ldr	r2, [r3, #0]
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	605a      	str	r2, [r3, #4]
 8003cca:	e026      	b.n	8003d1a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	68d8      	ldr	r0, [r3, #12]
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cd4:	461a      	mov	r2, r3
 8003cd6:	68b9      	ldr	r1, [r7, #8]
 8003cd8:	f002 f802 	bl	8005ce0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	68da      	ldr	r2, [r3, #12]
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ce4:	425b      	negs	r3, r3
 8003ce6:	441a      	add	r2, r3
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	68da      	ldr	r2, [r3, #12]
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	429a      	cmp	r2, r3
 8003cf6:	d207      	bcs.n	8003d08 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	689a      	ldr	r2, [r3, #8]
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d00:	425b      	negs	r3, r3
 8003d02:	441a      	add	r2, r3
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2b02      	cmp	r3, #2
 8003d0c:	d105      	bne.n	8003d1a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d002      	beq.n	8003d1a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003d14:	693b      	ldr	r3, [r7, #16]
 8003d16:	3b01      	subs	r3, #1
 8003d18:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	1c5a      	adds	r2, r3, #1
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8003d22:	697b      	ldr	r3, [r7, #20]
}
 8003d24:	4618      	mov	r0, r3
 8003d26:	3718      	adds	r7, #24
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd80      	pop	{r7, pc}

08003d2c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b082      	sub	sp, #8
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
 8003d34:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d018      	beq.n	8003d70 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	68da      	ldr	r2, [r3, #12]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d46:	441a      	add	r2, r3
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	68da      	ldr	r2, [r3, #12]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	689b      	ldr	r3, [r3, #8]
 8003d54:	429a      	cmp	r2, r3
 8003d56:	d303      	bcc.n	8003d60 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681a      	ldr	r2, [r3, #0]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	68d9      	ldr	r1, [r3, #12]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d68:	461a      	mov	r2, r3
 8003d6a:	6838      	ldr	r0, [r7, #0]
 8003d6c:	f001 ffb8 	bl	8005ce0 <memcpy>
	}
}
 8003d70:	bf00      	nop
 8003d72:	3708      	adds	r7, #8
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bd80      	pop	{r7, pc}

08003d78 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b084      	sub	sp, #16
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003d80:	f001 fc72 	bl	8005668 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003d8a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003d8c:	e011      	b.n	8003db2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d012      	beq.n	8003dbc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	3324      	adds	r3, #36	@ 0x24
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f000 fd34 	bl	8004808 <xTaskRemoveFromEventList>
 8003da0:	4603      	mov	r3, r0
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d001      	beq.n	8003daa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003da6:	f000 fe0d 	bl	80049c4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003daa:	7bfb      	ldrb	r3, [r7, #15]
 8003dac:	3b01      	subs	r3, #1
 8003dae:	b2db      	uxtb	r3, r3
 8003db0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003db2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	dce9      	bgt.n	8003d8e <prvUnlockQueue+0x16>
 8003dba:	e000      	b.n	8003dbe <prvUnlockQueue+0x46>
					break;
 8003dbc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	22ff      	movs	r2, #255	@ 0xff
 8003dc2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8003dc6:	f001 fc81 	bl	80056cc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003dca:	f001 fc4d 	bl	8005668 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003dd4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003dd6:	e011      	b.n	8003dfc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	691b      	ldr	r3, [r3, #16]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d012      	beq.n	8003e06 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	3310      	adds	r3, #16
 8003de4:	4618      	mov	r0, r3
 8003de6:	f000 fd0f 	bl	8004808 <xTaskRemoveFromEventList>
 8003dea:	4603      	mov	r3, r0
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d001      	beq.n	8003df4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003df0:	f000 fde8 	bl	80049c4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003df4:	7bbb      	ldrb	r3, [r7, #14]
 8003df6:	3b01      	subs	r3, #1
 8003df8:	b2db      	uxtb	r3, r3
 8003dfa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003dfc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	dce9      	bgt.n	8003dd8 <prvUnlockQueue+0x60>
 8003e04:	e000      	b.n	8003e08 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003e06:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	22ff      	movs	r2, #255	@ 0xff
 8003e0c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8003e10:	f001 fc5c 	bl	80056cc <vPortExitCritical>
}
 8003e14:	bf00      	nop
 8003e16:	3710      	adds	r7, #16
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bd80      	pop	{r7, pc}

08003e1c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b084      	sub	sp, #16
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003e24:	f001 fc20 	bl	8005668 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d102      	bne.n	8003e36 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003e30:	2301      	movs	r3, #1
 8003e32:	60fb      	str	r3, [r7, #12]
 8003e34:	e001      	b.n	8003e3a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003e36:	2300      	movs	r3, #0
 8003e38:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003e3a:	f001 fc47 	bl	80056cc <vPortExitCritical>

	return xReturn;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
}
 8003e40:	4618      	mov	r0, r3
 8003e42:	3710      	adds	r7, #16
 8003e44:	46bd      	mov	sp, r7
 8003e46:	bd80      	pop	{r7, pc}

08003e48 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b084      	sub	sp, #16
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003e50:	f001 fc0a 	bl	8005668 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e5c:	429a      	cmp	r2, r3
 8003e5e:	d102      	bne.n	8003e66 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003e60:	2301      	movs	r3, #1
 8003e62:	60fb      	str	r3, [r7, #12]
 8003e64:	e001      	b.n	8003e6a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003e66:	2300      	movs	r3, #0
 8003e68:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003e6a:	f001 fc2f 	bl	80056cc <vPortExitCritical>

	return xReturn;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	3710      	adds	r7, #16
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bd80      	pop	{r7, pc}

08003e78 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003e78:	b480      	push	{r7}
 8003e7a:	b085      	sub	sp, #20
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
 8003e80:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003e82:	2300      	movs	r3, #0
 8003e84:	60fb      	str	r3, [r7, #12]
 8003e86:	e014      	b.n	8003eb2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003e88:	4a0f      	ldr	r2, [pc, #60]	@ (8003ec8 <vQueueAddToRegistry+0x50>)
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d10b      	bne.n	8003eac <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003e94:	490c      	ldr	r1, [pc, #48]	@ (8003ec8 <vQueueAddToRegistry+0x50>)
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	683a      	ldr	r2, [r7, #0]
 8003e9a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003e9e:	4a0a      	ldr	r2, [pc, #40]	@ (8003ec8 <vQueueAddToRegistry+0x50>)
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	00db      	lsls	r3, r3, #3
 8003ea4:	4413      	add	r3, r2
 8003ea6:	687a      	ldr	r2, [r7, #4]
 8003ea8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003eaa:	e006      	b.n	8003eba <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	3301      	adds	r3, #1
 8003eb0:	60fb      	str	r3, [r7, #12]
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	2b07      	cmp	r3, #7
 8003eb6:	d9e7      	bls.n	8003e88 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003eb8:	bf00      	nop
 8003eba:	bf00      	nop
 8003ebc:	3714      	adds	r7, #20
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec4:	4770      	bx	lr
 8003ec6:	bf00      	nop
 8003ec8:	2000077c 	.word	0x2000077c

08003ecc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b086      	sub	sp, #24
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	60f8      	str	r0, [r7, #12]
 8003ed4:	60b9      	str	r1, [r7, #8]
 8003ed6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003edc:	f001 fbc4 	bl	8005668 <vPortEnterCritical>
 8003ee0:	697b      	ldr	r3, [r7, #20]
 8003ee2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003ee6:	b25b      	sxtb	r3, r3
 8003ee8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eec:	d103      	bne.n	8003ef6 <vQueueWaitForMessageRestricted+0x2a>
 8003eee:	697b      	ldr	r3, [r7, #20]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003efc:	b25b      	sxtb	r3, r3
 8003efe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f02:	d103      	bne.n	8003f0c <vQueueWaitForMessageRestricted+0x40>
 8003f04:	697b      	ldr	r3, [r7, #20]
 8003f06:	2200      	movs	r2, #0
 8003f08:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003f0c:	f001 fbde 	bl	80056cc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003f10:	697b      	ldr	r3, [r7, #20]
 8003f12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d106      	bne.n	8003f26 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003f18:	697b      	ldr	r3, [r7, #20]
 8003f1a:	3324      	adds	r3, #36	@ 0x24
 8003f1c:	687a      	ldr	r2, [r7, #4]
 8003f1e:	68b9      	ldr	r1, [r7, #8]
 8003f20:	4618      	mov	r0, r3
 8003f22:	f000 fc45 	bl	80047b0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003f26:	6978      	ldr	r0, [r7, #20]
 8003f28:	f7ff ff26 	bl	8003d78 <prvUnlockQueue>
	}
 8003f2c:	bf00      	nop
 8003f2e:	3718      	adds	r7, #24
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bd80      	pop	{r7, pc}

08003f34 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b08e      	sub	sp, #56	@ 0x38
 8003f38:	af04      	add	r7, sp, #16
 8003f3a:	60f8      	str	r0, [r7, #12]
 8003f3c:	60b9      	str	r1, [r7, #8]
 8003f3e:	607a      	str	r2, [r7, #4]
 8003f40:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003f42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d10b      	bne.n	8003f60 <xTaskCreateStatic+0x2c>
	__asm volatile
 8003f48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f4c:	f383 8811 	msr	BASEPRI, r3
 8003f50:	f3bf 8f6f 	isb	sy
 8003f54:	f3bf 8f4f 	dsb	sy
 8003f58:	623b      	str	r3, [r7, #32]
}
 8003f5a:	bf00      	nop
 8003f5c:	bf00      	nop
 8003f5e:	e7fd      	b.n	8003f5c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003f60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d10b      	bne.n	8003f7e <xTaskCreateStatic+0x4a>
	__asm volatile
 8003f66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f6a:	f383 8811 	msr	BASEPRI, r3
 8003f6e:	f3bf 8f6f 	isb	sy
 8003f72:	f3bf 8f4f 	dsb	sy
 8003f76:	61fb      	str	r3, [r7, #28]
}
 8003f78:	bf00      	nop
 8003f7a:	bf00      	nop
 8003f7c:	e7fd      	b.n	8003f7a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003f7e:	235c      	movs	r3, #92	@ 0x5c
 8003f80:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003f82:	693b      	ldr	r3, [r7, #16]
 8003f84:	2b5c      	cmp	r3, #92	@ 0x5c
 8003f86:	d00b      	beq.n	8003fa0 <xTaskCreateStatic+0x6c>
	__asm volatile
 8003f88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f8c:	f383 8811 	msr	BASEPRI, r3
 8003f90:	f3bf 8f6f 	isb	sy
 8003f94:	f3bf 8f4f 	dsb	sy
 8003f98:	61bb      	str	r3, [r7, #24]
}
 8003f9a:	bf00      	nop
 8003f9c:	bf00      	nop
 8003f9e:	e7fd      	b.n	8003f9c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003fa0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003fa2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d01e      	beq.n	8003fe6 <xTaskCreateStatic+0xb2>
 8003fa8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d01b      	beq.n	8003fe6 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003fae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fb0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fb4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003fb6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003fb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fba:	2202      	movs	r2, #2
 8003fbc:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	9303      	str	r3, [sp, #12]
 8003fc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fc6:	9302      	str	r3, [sp, #8]
 8003fc8:	f107 0314 	add.w	r3, r7, #20
 8003fcc:	9301      	str	r3, [sp, #4]
 8003fce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fd0:	9300      	str	r3, [sp, #0]
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	687a      	ldr	r2, [r7, #4]
 8003fd6:	68b9      	ldr	r1, [r7, #8]
 8003fd8:	68f8      	ldr	r0, [r7, #12]
 8003fda:	f000 f850 	bl	800407e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003fde:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003fe0:	f000 f8de 	bl	80041a0 <prvAddNewTaskToReadyList>
 8003fe4:	e001      	b.n	8003fea <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003fea:	697b      	ldr	r3, [r7, #20]
	}
 8003fec:	4618      	mov	r0, r3
 8003fee:	3728      	adds	r7, #40	@ 0x28
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	bd80      	pop	{r7, pc}

08003ff4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b08c      	sub	sp, #48	@ 0x30
 8003ff8:	af04      	add	r7, sp, #16
 8003ffa:	60f8      	str	r0, [r7, #12]
 8003ffc:	60b9      	str	r1, [r7, #8]
 8003ffe:	603b      	str	r3, [r7, #0]
 8004000:	4613      	mov	r3, r2
 8004002:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004004:	88fb      	ldrh	r3, [r7, #6]
 8004006:	009b      	lsls	r3, r3, #2
 8004008:	4618      	mov	r0, r3
 800400a:	f001 fc4f 	bl	80058ac <pvPortMalloc>
 800400e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d00e      	beq.n	8004034 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004016:	205c      	movs	r0, #92	@ 0x5c
 8004018:	f001 fc48 	bl	80058ac <pvPortMalloc>
 800401c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800401e:	69fb      	ldr	r3, [r7, #28]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d003      	beq.n	800402c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004024:	69fb      	ldr	r3, [r7, #28]
 8004026:	697a      	ldr	r2, [r7, #20]
 8004028:	631a      	str	r2, [r3, #48]	@ 0x30
 800402a:	e005      	b.n	8004038 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800402c:	6978      	ldr	r0, [r7, #20]
 800402e:	f001 fd0b 	bl	8005a48 <vPortFree>
 8004032:	e001      	b.n	8004038 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004034:	2300      	movs	r3, #0
 8004036:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004038:	69fb      	ldr	r3, [r7, #28]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d017      	beq.n	800406e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800403e:	69fb      	ldr	r3, [r7, #28]
 8004040:	2200      	movs	r2, #0
 8004042:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004046:	88fa      	ldrh	r2, [r7, #6]
 8004048:	2300      	movs	r3, #0
 800404a:	9303      	str	r3, [sp, #12]
 800404c:	69fb      	ldr	r3, [r7, #28]
 800404e:	9302      	str	r3, [sp, #8]
 8004050:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004052:	9301      	str	r3, [sp, #4]
 8004054:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004056:	9300      	str	r3, [sp, #0]
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	68b9      	ldr	r1, [r7, #8]
 800405c:	68f8      	ldr	r0, [r7, #12]
 800405e:	f000 f80e 	bl	800407e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004062:	69f8      	ldr	r0, [r7, #28]
 8004064:	f000 f89c 	bl	80041a0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004068:	2301      	movs	r3, #1
 800406a:	61bb      	str	r3, [r7, #24]
 800406c:	e002      	b.n	8004074 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800406e:	f04f 33ff 	mov.w	r3, #4294967295
 8004072:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004074:	69bb      	ldr	r3, [r7, #24]
	}
 8004076:	4618      	mov	r0, r3
 8004078:	3720      	adds	r7, #32
 800407a:	46bd      	mov	sp, r7
 800407c:	bd80      	pop	{r7, pc}

0800407e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800407e:	b580      	push	{r7, lr}
 8004080:	b088      	sub	sp, #32
 8004082:	af00      	add	r7, sp, #0
 8004084:	60f8      	str	r0, [r7, #12]
 8004086:	60b9      	str	r1, [r7, #8]
 8004088:	607a      	str	r2, [r7, #4]
 800408a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800408c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800408e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	009b      	lsls	r3, r3, #2
 8004094:	461a      	mov	r2, r3
 8004096:	21a5      	movs	r1, #165	@ 0xa5
 8004098:	f001 fdf6 	bl	8005c88 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800409c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800409e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80040a6:	3b01      	subs	r3, #1
 80040a8:	009b      	lsls	r3, r3, #2
 80040aa:	4413      	add	r3, r2
 80040ac:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80040ae:	69bb      	ldr	r3, [r7, #24]
 80040b0:	f023 0307 	bic.w	r3, r3, #7
 80040b4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80040b6:	69bb      	ldr	r3, [r7, #24]
 80040b8:	f003 0307 	and.w	r3, r3, #7
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d00b      	beq.n	80040d8 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80040c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040c4:	f383 8811 	msr	BASEPRI, r3
 80040c8:	f3bf 8f6f 	isb	sy
 80040cc:	f3bf 8f4f 	dsb	sy
 80040d0:	617b      	str	r3, [r7, #20]
}
 80040d2:	bf00      	nop
 80040d4:	bf00      	nop
 80040d6:	e7fd      	b.n	80040d4 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d01f      	beq.n	800411e <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80040de:	2300      	movs	r3, #0
 80040e0:	61fb      	str	r3, [r7, #28]
 80040e2:	e012      	b.n	800410a <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80040e4:	68ba      	ldr	r2, [r7, #8]
 80040e6:	69fb      	ldr	r3, [r7, #28]
 80040e8:	4413      	add	r3, r2
 80040ea:	7819      	ldrb	r1, [r3, #0]
 80040ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80040ee:	69fb      	ldr	r3, [r7, #28]
 80040f0:	4413      	add	r3, r2
 80040f2:	3334      	adds	r3, #52	@ 0x34
 80040f4:	460a      	mov	r2, r1
 80040f6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80040f8:	68ba      	ldr	r2, [r7, #8]
 80040fa:	69fb      	ldr	r3, [r7, #28]
 80040fc:	4413      	add	r3, r2
 80040fe:	781b      	ldrb	r3, [r3, #0]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d006      	beq.n	8004112 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004104:	69fb      	ldr	r3, [r7, #28]
 8004106:	3301      	adds	r3, #1
 8004108:	61fb      	str	r3, [r7, #28]
 800410a:	69fb      	ldr	r3, [r7, #28]
 800410c:	2b0f      	cmp	r3, #15
 800410e:	d9e9      	bls.n	80040e4 <prvInitialiseNewTask+0x66>
 8004110:	e000      	b.n	8004114 <prvInitialiseNewTask+0x96>
			{
				break;
 8004112:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004114:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004116:	2200      	movs	r2, #0
 8004118:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800411c:	e003      	b.n	8004126 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800411e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004120:	2200      	movs	r2, #0
 8004122:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004126:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004128:	2b37      	cmp	r3, #55	@ 0x37
 800412a:	d901      	bls.n	8004130 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800412c:	2337      	movs	r3, #55	@ 0x37
 800412e:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004130:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004132:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004134:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004136:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004138:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800413a:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800413c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800413e:	2200      	movs	r2, #0
 8004140:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004142:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004144:	3304      	adds	r3, #4
 8004146:	4618      	mov	r0, r3
 8004148:	f7ff f966 	bl	8003418 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800414c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800414e:	3318      	adds	r3, #24
 8004150:	4618      	mov	r0, r3
 8004152:	f7ff f961 	bl	8003418 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004156:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004158:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800415a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800415c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800415e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004162:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004164:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004166:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004168:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800416a:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800416c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800416e:	2200      	movs	r2, #0
 8004170:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004172:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004174:	2200      	movs	r2, #0
 8004176:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800417a:	683a      	ldr	r2, [r7, #0]
 800417c:	68f9      	ldr	r1, [r7, #12]
 800417e:	69b8      	ldr	r0, [r7, #24]
 8004180:	f001 f93e 	bl	8005400 <pxPortInitialiseStack>
 8004184:	4602      	mov	r2, r0
 8004186:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004188:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800418a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800418c:	2b00      	cmp	r3, #0
 800418e:	d002      	beq.n	8004196 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004190:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004192:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004194:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004196:	bf00      	nop
 8004198:	3720      	adds	r7, #32
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}
	...

080041a0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b082      	sub	sp, #8
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80041a8:	f001 fa5e 	bl	8005668 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80041ac:	4b2d      	ldr	r3, [pc, #180]	@ (8004264 <prvAddNewTaskToReadyList+0xc4>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	3301      	adds	r3, #1
 80041b2:	4a2c      	ldr	r2, [pc, #176]	@ (8004264 <prvAddNewTaskToReadyList+0xc4>)
 80041b4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80041b6:	4b2c      	ldr	r3, [pc, #176]	@ (8004268 <prvAddNewTaskToReadyList+0xc8>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d109      	bne.n	80041d2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80041be:	4a2a      	ldr	r2, [pc, #168]	@ (8004268 <prvAddNewTaskToReadyList+0xc8>)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80041c4:	4b27      	ldr	r3, [pc, #156]	@ (8004264 <prvAddNewTaskToReadyList+0xc4>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	2b01      	cmp	r3, #1
 80041ca:	d110      	bne.n	80041ee <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80041cc:	f000 fc1e 	bl	8004a0c <prvInitialiseTaskLists>
 80041d0:	e00d      	b.n	80041ee <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80041d2:	4b26      	ldr	r3, [pc, #152]	@ (800426c <prvAddNewTaskToReadyList+0xcc>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d109      	bne.n	80041ee <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80041da:	4b23      	ldr	r3, [pc, #140]	@ (8004268 <prvAddNewTaskToReadyList+0xc8>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041e4:	429a      	cmp	r2, r3
 80041e6:	d802      	bhi.n	80041ee <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80041e8:	4a1f      	ldr	r2, [pc, #124]	@ (8004268 <prvAddNewTaskToReadyList+0xc8>)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80041ee:	4b20      	ldr	r3, [pc, #128]	@ (8004270 <prvAddNewTaskToReadyList+0xd0>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	3301      	adds	r3, #1
 80041f4:	4a1e      	ldr	r2, [pc, #120]	@ (8004270 <prvAddNewTaskToReadyList+0xd0>)
 80041f6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80041f8:	4b1d      	ldr	r3, [pc, #116]	@ (8004270 <prvAddNewTaskToReadyList+0xd0>)
 80041fa:	681a      	ldr	r2, [r3, #0]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004204:	4b1b      	ldr	r3, [pc, #108]	@ (8004274 <prvAddNewTaskToReadyList+0xd4>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	429a      	cmp	r2, r3
 800420a:	d903      	bls.n	8004214 <prvAddNewTaskToReadyList+0x74>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004210:	4a18      	ldr	r2, [pc, #96]	@ (8004274 <prvAddNewTaskToReadyList+0xd4>)
 8004212:	6013      	str	r3, [r2, #0]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004218:	4613      	mov	r3, r2
 800421a:	009b      	lsls	r3, r3, #2
 800421c:	4413      	add	r3, r2
 800421e:	009b      	lsls	r3, r3, #2
 8004220:	4a15      	ldr	r2, [pc, #84]	@ (8004278 <prvAddNewTaskToReadyList+0xd8>)
 8004222:	441a      	add	r2, r3
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	3304      	adds	r3, #4
 8004228:	4619      	mov	r1, r3
 800422a:	4610      	mov	r0, r2
 800422c:	f7ff f901 	bl	8003432 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004230:	f001 fa4c 	bl	80056cc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004234:	4b0d      	ldr	r3, [pc, #52]	@ (800426c <prvAddNewTaskToReadyList+0xcc>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d00e      	beq.n	800425a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800423c:	4b0a      	ldr	r3, [pc, #40]	@ (8004268 <prvAddNewTaskToReadyList+0xc8>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004246:	429a      	cmp	r2, r3
 8004248:	d207      	bcs.n	800425a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800424a:	4b0c      	ldr	r3, [pc, #48]	@ (800427c <prvAddNewTaskToReadyList+0xdc>)
 800424c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004250:	601a      	str	r2, [r3, #0]
 8004252:	f3bf 8f4f 	dsb	sy
 8004256:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800425a:	bf00      	nop
 800425c:	3708      	adds	r7, #8
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}
 8004262:	bf00      	nop
 8004264:	20000c90 	.word	0x20000c90
 8004268:	200007bc 	.word	0x200007bc
 800426c:	20000c9c 	.word	0x20000c9c
 8004270:	20000cac 	.word	0x20000cac
 8004274:	20000c98 	.word	0x20000c98
 8004278:	200007c0 	.word	0x200007c0
 800427c:	e000ed04 	.word	0xe000ed04

08004280 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004280:	b580      	push	{r7, lr}
 8004282:	b084      	sub	sp, #16
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004288:	2300      	movs	r3, #0
 800428a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d018      	beq.n	80042c4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004292:	4b14      	ldr	r3, [pc, #80]	@ (80042e4 <vTaskDelay+0x64>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d00b      	beq.n	80042b2 <vTaskDelay+0x32>
	__asm volatile
 800429a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800429e:	f383 8811 	msr	BASEPRI, r3
 80042a2:	f3bf 8f6f 	isb	sy
 80042a6:	f3bf 8f4f 	dsb	sy
 80042aa:	60bb      	str	r3, [r7, #8]
}
 80042ac:	bf00      	nop
 80042ae:	bf00      	nop
 80042b0:	e7fd      	b.n	80042ae <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80042b2:	f000 f883 	bl	80043bc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80042b6:	2100      	movs	r1, #0
 80042b8:	6878      	ldr	r0, [r7, #4]
 80042ba:	f000 fcf3 	bl	8004ca4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80042be:	f000 f88b 	bl	80043d8 <xTaskResumeAll>
 80042c2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d107      	bne.n	80042da <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80042ca:	4b07      	ldr	r3, [pc, #28]	@ (80042e8 <vTaskDelay+0x68>)
 80042cc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80042d0:	601a      	str	r2, [r3, #0]
 80042d2:	f3bf 8f4f 	dsb	sy
 80042d6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80042da:	bf00      	nop
 80042dc:	3710      	adds	r7, #16
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}
 80042e2:	bf00      	nop
 80042e4:	20000cb8 	.word	0x20000cb8
 80042e8:	e000ed04 	.word	0xe000ed04

080042ec <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b08a      	sub	sp, #40	@ 0x28
 80042f0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80042f2:	2300      	movs	r3, #0
 80042f4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80042f6:	2300      	movs	r3, #0
 80042f8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80042fa:	463a      	mov	r2, r7
 80042fc:	1d39      	adds	r1, r7, #4
 80042fe:	f107 0308 	add.w	r3, r7, #8
 8004302:	4618      	mov	r0, r3
 8004304:	f7ff f834 	bl	8003370 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004308:	6839      	ldr	r1, [r7, #0]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	68ba      	ldr	r2, [r7, #8]
 800430e:	9202      	str	r2, [sp, #8]
 8004310:	9301      	str	r3, [sp, #4]
 8004312:	2300      	movs	r3, #0
 8004314:	9300      	str	r3, [sp, #0]
 8004316:	2300      	movs	r3, #0
 8004318:	460a      	mov	r2, r1
 800431a:	4922      	ldr	r1, [pc, #136]	@ (80043a4 <vTaskStartScheduler+0xb8>)
 800431c:	4822      	ldr	r0, [pc, #136]	@ (80043a8 <vTaskStartScheduler+0xbc>)
 800431e:	f7ff fe09 	bl	8003f34 <xTaskCreateStatic>
 8004322:	4603      	mov	r3, r0
 8004324:	4a21      	ldr	r2, [pc, #132]	@ (80043ac <vTaskStartScheduler+0xc0>)
 8004326:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004328:	4b20      	ldr	r3, [pc, #128]	@ (80043ac <vTaskStartScheduler+0xc0>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d002      	beq.n	8004336 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004330:	2301      	movs	r3, #1
 8004332:	617b      	str	r3, [r7, #20]
 8004334:	e001      	b.n	800433a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004336:	2300      	movs	r3, #0
 8004338:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	2b01      	cmp	r3, #1
 800433e:	d102      	bne.n	8004346 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004340:	f000 fd04 	bl	8004d4c <xTimerCreateTimerTask>
 8004344:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	2b01      	cmp	r3, #1
 800434a:	d116      	bne.n	800437a <vTaskStartScheduler+0x8e>
	__asm volatile
 800434c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004350:	f383 8811 	msr	BASEPRI, r3
 8004354:	f3bf 8f6f 	isb	sy
 8004358:	f3bf 8f4f 	dsb	sy
 800435c:	613b      	str	r3, [r7, #16]
}
 800435e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004360:	4b13      	ldr	r3, [pc, #76]	@ (80043b0 <vTaskStartScheduler+0xc4>)
 8004362:	f04f 32ff 	mov.w	r2, #4294967295
 8004366:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004368:	4b12      	ldr	r3, [pc, #72]	@ (80043b4 <vTaskStartScheduler+0xc8>)
 800436a:	2201      	movs	r2, #1
 800436c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800436e:	4b12      	ldr	r3, [pc, #72]	@ (80043b8 <vTaskStartScheduler+0xcc>)
 8004370:	2200      	movs	r2, #0
 8004372:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004374:	f001 f8d4 	bl	8005520 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004378:	e00f      	b.n	800439a <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004380:	d10b      	bne.n	800439a <vTaskStartScheduler+0xae>
	__asm volatile
 8004382:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004386:	f383 8811 	msr	BASEPRI, r3
 800438a:	f3bf 8f6f 	isb	sy
 800438e:	f3bf 8f4f 	dsb	sy
 8004392:	60fb      	str	r3, [r7, #12]
}
 8004394:	bf00      	nop
 8004396:	bf00      	nop
 8004398:	e7fd      	b.n	8004396 <vTaskStartScheduler+0xaa>
}
 800439a:	bf00      	nop
 800439c:	3718      	adds	r7, #24
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}
 80043a2:	bf00      	nop
 80043a4:	08005d3c 	.word	0x08005d3c
 80043a8:	080049dd 	.word	0x080049dd
 80043ac:	20000cb4 	.word	0x20000cb4
 80043b0:	20000cb0 	.word	0x20000cb0
 80043b4:	20000c9c 	.word	0x20000c9c
 80043b8:	20000c94 	.word	0x20000c94

080043bc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80043bc:	b480      	push	{r7}
 80043be:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80043c0:	4b04      	ldr	r3, [pc, #16]	@ (80043d4 <vTaskSuspendAll+0x18>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	3301      	adds	r3, #1
 80043c6:	4a03      	ldr	r2, [pc, #12]	@ (80043d4 <vTaskSuspendAll+0x18>)
 80043c8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80043ca:	bf00      	nop
 80043cc:	46bd      	mov	sp, r7
 80043ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d2:	4770      	bx	lr
 80043d4:	20000cb8 	.word	0x20000cb8

080043d8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b084      	sub	sp, #16
 80043dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80043de:	2300      	movs	r3, #0
 80043e0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80043e2:	2300      	movs	r3, #0
 80043e4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80043e6:	4b42      	ldr	r3, [pc, #264]	@ (80044f0 <xTaskResumeAll+0x118>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d10b      	bne.n	8004406 <xTaskResumeAll+0x2e>
	__asm volatile
 80043ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043f2:	f383 8811 	msr	BASEPRI, r3
 80043f6:	f3bf 8f6f 	isb	sy
 80043fa:	f3bf 8f4f 	dsb	sy
 80043fe:	603b      	str	r3, [r7, #0]
}
 8004400:	bf00      	nop
 8004402:	bf00      	nop
 8004404:	e7fd      	b.n	8004402 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004406:	f001 f92f 	bl	8005668 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800440a:	4b39      	ldr	r3, [pc, #228]	@ (80044f0 <xTaskResumeAll+0x118>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	3b01      	subs	r3, #1
 8004410:	4a37      	ldr	r2, [pc, #220]	@ (80044f0 <xTaskResumeAll+0x118>)
 8004412:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004414:	4b36      	ldr	r3, [pc, #216]	@ (80044f0 <xTaskResumeAll+0x118>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d162      	bne.n	80044e2 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800441c:	4b35      	ldr	r3, [pc, #212]	@ (80044f4 <xTaskResumeAll+0x11c>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d05e      	beq.n	80044e2 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004424:	e02f      	b.n	8004486 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004426:	4b34      	ldr	r3, [pc, #208]	@ (80044f8 <xTaskResumeAll+0x120>)
 8004428:	68db      	ldr	r3, [r3, #12]
 800442a:	68db      	ldr	r3, [r3, #12]
 800442c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	3318      	adds	r3, #24
 8004432:	4618      	mov	r0, r3
 8004434:	f7ff f85a 	bl	80034ec <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	3304      	adds	r3, #4
 800443c:	4618      	mov	r0, r3
 800443e:	f7ff f855 	bl	80034ec <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004446:	4b2d      	ldr	r3, [pc, #180]	@ (80044fc <xTaskResumeAll+0x124>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	429a      	cmp	r2, r3
 800444c:	d903      	bls.n	8004456 <xTaskResumeAll+0x7e>
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004452:	4a2a      	ldr	r2, [pc, #168]	@ (80044fc <xTaskResumeAll+0x124>)
 8004454:	6013      	str	r3, [r2, #0]
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800445a:	4613      	mov	r3, r2
 800445c:	009b      	lsls	r3, r3, #2
 800445e:	4413      	add	r3, r2
 8004460:	009b      	lsls	r3, r3, #2
 8004462:	4a27      	ldr	r2, [pc, #156]	@ (8004500 <xTaskResumeAll+0x128>)
 8004464:	441a      	add	r2, r3
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	3304      	adds	r3, #4
 800446a:	4619      	mov	r1, r3
 800446c:	4610      	mov	r0, r2
 800446e:	f7fe ffe0 	bl	8003432 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004476:	4b23      	ldr	r3, [pc, #140]	@ (8004504 <xTaskResumeAll+0x12c>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800447c:	429a      	cmp	r2, r3
 800447e:	d302      	bcc.n	8004486 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8004480:	4b21      	ldr	r3, [pc, #132]	@ (8004508 <xTaskResumeAll+0x130>)
 8004482:	2201      	movs	r2, #1
 8004484:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004486:	4b1c      	ldr	r3, [pc, #112]	@ (80044f8 <xTaskResumeAll+0x120>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d1cb      	bne.n	8004426 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d001      	beq.n	8004498 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004494:	f000 fb58 	bl	8004b48 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004498:	4b1c      	ldr	r3, [pc, #112]	@ (800450c <xTaskResumeAll+0x134>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d010      	beq.n	80044c6 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80044a4:	f000 f846 	bl	8004534 <xTaskIncrementTick>
 80044a8:	4603      	mov	r3, r0
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d002      	beq.n	80044b4 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80044ae:	4b16      	ldr	r3, [pc, #88]	@ (8004508 <xTaskResumeAll+0x130>)
 80044b0:	2201      	movs	r2, #1
 80044b2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	3b01      	subs	r3, #1
 80044b8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d1f1      	bne.n	80044a4 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80044c0:	4b12      	ldr	r3, [pc, #72]	@ (800450c <xTaskResumeAll+0x134>)
 80044c2:	2200      	movs	r2, #0
 80044c4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80044c6:	4b10      	ldr	r3, [pc, #64]	@ (8004508 <xTaskResumeAll+0x130>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d009      	beq.n	80044e2 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80044ce:	2301      	movs	r3, #1
 80044d0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80044d2:	4b0f      	ldr	r3, [pc, #60]	@ (8004510 <xTaskResumeAll+0x138>)
 80044d4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80044d8:	601a      	str	r2, [r3, #0]
 80044da:	f3bf 8f4f 	dsb	sy
 80044de:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80044e2:	f001 f8f3 	bl	80056cc <vPortExitCritical>

	return xAlreadyYielded;
 80044e6:	68bb      	ldr	r3, [r7, #8]
}
 80044e8:	4618      	mov	r0, r3
 80044ea:	3710      	adds	r7, #16
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bd80      	pop	{r7, pc}
 80044f0:	20000cb8 	.word	0x20000cb8
 80044f4:	20000c90 	.word	0x20000c90
 80044f8:	20000c50 	.word	0x20000c50
 80044fc:	20000c98 	.word	0x20000c98
 8004500:	200007c0 	.word	0x200007c0
 8004504:	200007bc 	.word	0x200007bc
 8004508:	20000ca4 	.word	0x20000ca4
 800450c:	20000ca0 	.word	0x20000ca0
 8004510:	e000ed04 	.word	0xe000ed04

08004514 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004514:	b480      	push	{r7}
 8004516:	b083      	sub	sp, #12
 8004518:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800451a:	4b05      	ldr	r3, [pc, #20]	@ (8004530 <xTaskGetTickCount+0x1c>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004520:	687b      	ldr	r3, [r7, #4]
}
 8004522:	4618      	mov	r0, r3
 8004524:	370c      	adds	r7, #12
 8004526:	46bd      	mov	sp, r7
 8004528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452c:	4770      	bx	lr
 800452e:	bf00      	nop
 8004530:	20000c94 	.word	0x20000c94

08004534 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b086      	sub	sp, #24
 8004538:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800453a:	2300      	movs	r3, #0
 800453c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800453e:	4b4f      	ldr	r3, [pc, #316]	@ (800467c <xTaskIncrementTick+0x148>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	2b00      	cmp	r3, #0
 8004544:	f040 8090 	bne.w	8004668 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004548:	4b4d      	ldr	r3, [pc, #308]	@ (8004680 <xTaskIncrementTick+0x14c>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	3301      	adds	r3, #1
 800454e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004550:	4a4b      	ldr	r2, [pc, #300]	@ (8004680 <xTaskIncrementTick+0x14c>)
 8004552:	693b      	ldr	r3, [r7, #16]
 8004554:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d121      	bne.n	80045a0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800455c:	4b49      	ldr	r3, [pc, #292]	@ (8004684 <xTaskIncrementTick+0x150>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d00b      	beq.n	800457e <xTaskIncrementTick+0x4a>
	__asm volatile
 8004566:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800456a:	f383 8811 	msr	BASEPRI, r3
 800456e:	f3bf 8f6f 	isb	sy
 8004572:	f3bf 8f4f 	dsb	sy
 8004576:	603b      	str	r3, [r7, #0]
}
 8004578:	bf00      	nop
 800457a:	bf00      	nop
 800457c:	e7fd      	b.n	800457a <xTaskIncrementTick+0x46>
 800457e:	4b41      	ldr	r3, [pc, #260]	@ (8004684 <xTaskIncrementTick+0x150>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	60fb      	str	r3, [r7, #12]
 8004584:	4b40      	ldr	r3, [pc, #256]	@ (8004688 <xTaskIncrementTick+0x154>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a3e      	ldr	r2, [pc, #248]	@ (8004684 <xTaskIncrementTick+0x150>)
 800458a:	6013      	str	r3, [r2, #0]
 800458c:	4a3e      	ldr	r2, [pc, #248]	@ (8004688 <xTaskIncrementTick+0x154>)
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	6013      	str	r3, [r2, #0]
 8004592:	4b3e      	ldr	r3, [pc, #248]	@ (800468c <xTaskIncrementTick+0x158>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	3301      	adds	r3, #1
 8004598:	4a3c      	ldr	r2, [pc, #240]	@ (800468c <xTaskIncrementTick+0x158>)
 800459a:	6013      	str	r3, [r2, #0]
 800459c:	f000 fad4 	bl	8004b48 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80045a0:	4b3b      	ldr	r3, [pc, #236]	@ (8004690 <xTaskIncrementTick+0x15c>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	693a      	ldr	r2, [r7, #16]
 80045a6:	429a      	cmp	r2, r3
 80045a8:	d349      	bcc.n	800463e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80045aa:	4b36      	ldr	r3, [pc, #216]	@ (8004684 <xTaskIncrementTick+0x150>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d104      	bne.n	80045be <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80045b4:	4b36      	ldr	r3, [pc, #216]	@ (8004690 <xTaskIncrementTick+0x15c>)
 80045b6:	f04f 32ff 	mov.w	r2, #4294967295
 80045ba:	601a      	str	r2, [r3, #0]
					break;
 80045bc:	e03f      	b.n	800463e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80045be:	4b31      	ldr	r3, [pc, #196]	@ (8004684 <xTaskIncrementTick+0x150>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	68db      	ldr	r3, [r3, #12]
 80045c4:	68db      	ldr	r3, [r3, #12]
 80045c6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80045ce:	693a      	ldr	r2, [r7, #16]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	429a      	cmp	r2, r3
 80045d4:	d203      	bcs.n	80045de <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80045d6:	4a2e      	ldr	r2, [pc, #184]	@ (8004690 <xTaskIncrementTick+0x15c>)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80045dc:	e02f      	b.n	800463e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	3304      	adds	r3, #4
 80045e2:	4618      	mov	r0, r3
 80045e4:	f7fe ff82 	bl	80034ec <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d004      	beq.n	80045fa <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	3318      	adds	r3, #24
 80045f4:	4618      	mov	r0, r3
 80045f6:	f7fe ff79 	bl	80034ec <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045fe:	4b25      	ldr	r3, [pc, #148]	@ (8004694 <xTaskIncrementTick+0x160>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	429a      	cmp	r2, r3
 8004604:	d903      	bls.n	800460e <xTaskIncrementTick+0xda>
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800460a:	4a22      	ldr	r2, [pc, #136]	@ (8004694 <xTaskIncrementTick+0x160>)
 800460c:	6013      	str	r3, [r2, #0]
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004612:	4613      	mov	r3, r2
 8004614:	009b      	lsls	r3, r3, #2
 8004616:	4413      	add	r3, r2
 8004618:	009b      	lsls	r3, r3, #2
 800461a:	4a1f      	ldr	r2, [pc, #124]	@ (8004698 <xTaskIncrementTick+0x164>)
 800461c:	441a      	add	r2, r3
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	3304      	adds	r3, #4
 8004622:	4619      	mov	r1, r3
 8004624:	4610      	mov	r0, r2
 8004626:	f7fe ff04 	bl	8003432 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800462e:	4b1b      	ldr	r3, [pc, #108]	@ (800469c <xTaskIncrementTick+0x168>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004634:	429a      	cmp	r2, r3
 8004636:	d3b8      	bcc.n	80045aa <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004638:	2301      	movs	r3, #1
 800463a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800463c:	e7b5      	b.n	80045aa <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800463e:	4b17      	ldr	r3, [pc, #92]	@ (800469c <xTaskIncrementTick+0x168>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004644:	4914      	ldr	r1, [pc, #80]	@ (8004698 <xTaskIncrementTick+0x164>)
 8004646:	4613      	mov	r3, r2
 8004648:	009b      	lsls	r3, r3, #2
 800464a:	4413      	add	r3, r2
 800464c:	009b      	lsls	r3, r3, #2
 800464e:	440b      	add	r3, r1
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	2b01      	cmp	r3, #1
 8004654:	d901      	bls.n	800465a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8004656:	2301      	movs	r3, #1
 8004658:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800465a:	4b11      	ldr	r3, [pc, #68]	@ (80046a0 <xTaskIncrementTick+0x16c>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d007      	beq.n	8004672 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8004662:	2301      	movs	r3, #1
 8004664:	617b      	str	r3, [r7, #20]
 8004666:	e004      	b.n	8004672 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004668:	4b0e      	ldr	r3, [pc, #56]	@ (80046a4 <xTaskIncrementTick+0x170>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	3301      	adds	r3, #1
 800466e:	4a0d      	ldr	r2, [pc, #52]	@ (80046a4 <xTaskIncrementTick+0x170>)
 8004670:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004672:	697b      	ldr	r3, [r7, #20]
}
 8004674:	4618      	mov	r0, r3
 8004676:	3718      	adds	r7, #24
 8004678:	46bd      	mov	sp, r7
 800467a:	bd80      	pop	{r7, pc}
 800467c:	20000cb8 	.word	0x20000cb8
 8004680:	20000c94 	.word	0x20000c94
 8004684:	20000c48 	.word	0x20000c48
 8004688:	20000c4c 	.word	0x20000c4c
 800468c:	20000ca8 	.word	0x20000ca8
 8004690:	20000cb0 	.word	0x20000cb0
 8004694:	20000c98 	.word	0x20000c98
 8004698:	200007c0 	.word	0x200007c0
 800469c:	200007bc 	.word	0x200007bc
 80046a0:	20000ca4 	.word	0x20000ca4
 80046a4:	20000ca0 	.word	0x20000ca0

080046a8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80046a8:	b480      	push	{r7}
 80046aa:	b085      	sub	sp, #20
 80046ac:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80046ae:	4b28      	ldr	r3, [pc, #160]	@ (8004750 <vTaskSwitchContext+0xa8>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d003      	beq.n	80046be <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80046b6:	4b27      	ldr	r3, [pc, #156]	@ (8004754 <vTaskSwitchContext+0xac>)
 80046b8:	2201      	movs	r2, #1
 80046ba:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80046bc:	e042      	b.n	8004744 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 80046be:	4b25      	ldr	r3, [pc, #148]	@ (8004754 <vTaskSwitchContext+0xac>)
 80046c0:	2200      	movs	r2, #0
 80046c2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80046c4:	4b24      	ldr	r3, [pc, #144]	@ (8004758 <vTaskSwitchContext+0xb0>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	60fb      	str	r3, [r7, #12]
 80046ca:	e011      	b.n	80046f0 <vTaskSwitchContext+0x48>
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d10b      	bne.n	80046ea <vTaskSwitchContext+0x42>
	__asm volatile
 80046d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046d6:	f383 8811 	msr	BASEPRI, r3
 80046da:	f3bf 8f6f 	isb	sy
 80046de:	f3bf 8f4f 	dsb	sy
 80046e2:	607b      	str	r3, [r7, #4]
}
 80046e4:	bf00      	nop
 80046e6:	bf00      	nop
 80046e8:	e7fd      	b.n	80046e6 <vTaskSwitchContext+0x3e>
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	3b01      	subs	r3, #1
 80046ee:	60fb      	str	r3, [r7, #12]
 80046f0:	491a      	ldr	r1, [pc, #104]	@ (800475c <vTaskSwitchContext+0xb4>)
 80046f2:	68fa      	ldr	r2, [r7, #12]
 80046f4:	4613      	mov	r3, r2
 80046f6:	009b      	lsls	r3, r3, #2
 80046f8:	4413      	add	r3, r2
 80046fa:	009b      	lsls	r3, r3, #2
 80046fc:	440b      	add	r3, r1
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d0e3      	beq.n	80046cc <vTaskSwitchContext+0x24>
 8004704:	68fa      	ldr	r2, [r7, #12]
 8004706:	4613      	mov	r3, r2
 8004708:	009b      	lsls	r3, r3, #2
 800470a:	4413      	add	r3, r2
 800470c:	009b      	lsls	r3, r3, #2
 800470e:	4a13      	ldr	r2, [pc, #76]	@ (800475c <vTaskSwitchContext+0xb4>)
 8004710:	4413      	add	r3, r2
 8004712:	60bb      	str	r3, [r7, #8]
 8004714:	68bb      	ldr	r3, [r7, #8]
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	685a      	ldr	r2, [r3, #4]
 800471a:	68bb      	ldr	r3, [r7, #8]
 800471c:	605a      	str	r2, [r3, #4]
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	685a      	ldr	r2, [r3, #4]
 8004722:	68bb      	ldr	r3, [r7, #8]
 8004724:	3308      	adds	r3, #8
 8004726:	429a      	cmp	r2, r3
 8004728:	d104      	bne.n	8004734 <vTaskSwitchContext+0x8c>
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	685a      	ldr	r2, [r3, #4]
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	605a      	str	r2, [r3, #4]
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	68db      	ldr	r3, [r3, #12]
 800473a:	4a09      	ldr	r2, [pc, #36]	@ (8004760 <vTaskSwitchContext+0xb8>)
 800473c:	6013      	str	r3, [r2, #0]
 800473e:	4a06      	ldr	r2, [pc, #24]	@ (8004758 <vTaskSwitchContext+0xb0>)
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	6013      	str	r3, [r2, #0]
}
 8004744:	bf00      	nop
 8004746:	3714      	adds	r7, #20
 8004748:	46bd      	mov	sp, r7
 800474a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474e:	4770      	bx	lr
 8004750:	20000cb8 	.word	0x20000cb8
 8004754:	20000ca4 	.word	0x20000ca4
 8004758:	20000c98 	.word	0x20000c98
 800475c:	200007c0 	.word	0x200007c0
 8004760:	200007bc 	.word	0x200007bc

08004764 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b084      	sub	sp, #16
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
 800476c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d10b      	bne.n	800478c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8004774:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004778:	f383 8811 	msr	BASEPRI, r3
 800477c:	f3bf 8f6f 	isb	sy
 8004780:	f3bf 8f4f 	dsb	sy
 8004784:	60fb      	str	r3, [r7, #12]
}
 8004786:	bf00      	nop
 8004788:	bf00      	nop
 800478a:	e7fd      	b.n	8004788 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800478c:	4b07      	ldr	r3, [pc, #28]	@ (80047ac <vTaskPlaceOnEventList+0x48>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	3318      	adds	r3, #24
 8004792:	4619      	mov	r1, r3
 8004794:	6878      	ldr	r0, [r7, #4]
 8004796:	f7fe fe70 	bl	800347a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800479a:	2101      	movs	r1, #1
 800479c:	6838      	ldr	r0, [r7, #0]
 800479e:	f000 fa81 	bl	8004ca4 <prvAddCurrentTaskToDelayedList>
}
 80047a2:	bf00      	nop
 80047a4:	3710      	adds	r7, #16
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}
 80047aa:	bf00      	nop
 80047ac:	200007bc 	.word	0x200007bc

080047b0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b086      	sub	sp, #24
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	60f8      	str	r0, [r7, #12]
 80047b8:	60b9      	str	r1, [r7, #8]
 80047ba:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d10b      	bne.n	80047da <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80047c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047c6:	f383 8811 	msr	BASEPRI, r3
 80047ca:	f3bf 8f6f 	isb	sy
 80047ce:	f3bf 8f4f 	dsb	sy
 80047d2:	617b      	str	r3, [r7, #20]
}
 80047d4:	bf00      	nop
 80047d6:	bf00      	nop
 80047d8:	e7fd      	b.n	80047d6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80047da:	4b0a      	ldr	r3, [pc, #40]	@ (8004804 <vTaskPlaceOnEventListRestricted+0x54>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	3318      	adds	r3, #24
 80047e0:	4619      	mov	r1, r3
 80047e2:	68f8      	ldr	r0, [r7, #12]
 80047e4:	f7fe fe25 	bl	8003432 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d002      	beq.n	80047f4 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80047ee:	f04f 33ff 	mov.w	r3, #4294967295
 80047f2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80047f4:	6879      	ldr	r1, [r7, #4]
 80047f6:	68b8      	ldr	r0, [r7, #8]
 80047f8:	f000 fa54 	bl	8004ca4 <prvAddCurrentTaskToDelayedList>
	}
 80047fc:	bf00      	nop
 80047fe:	3718      	adds	r7, #24
 8004800:	46bd      	mov	sp, r7
 8004802:	bd80      	pop	{r7, pc}
 8004804:	200007bc 	.word	0x200007bc

08004808 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b086      	sub	sp, #24
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	68db      	ldr	r3, [r3, #12]
 8004814:	68db      	ldr	r3, [r3, #12]
 8004816:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004818:	693b      	ldr	r3, [r7, #16]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d10b      	bne.n	8004836 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800481e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004822:	f383 8811 	msr	BASEPRI, r3
 8004826:	f3bf 8f6f 	isb	sy
 800482a:	f3bf 8f4f 	dsb	sy
 800482e:	60fb      	str	r3, [r7, #12]
}
 8004830:	bf00      	nop
 8004832:	bf00      	nop
 8004834:	e7fd      	b.n	8004832 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004836:	693b      	ldr	r3, [r7, #16]
 8004838:	3318      	adds	r3, #24
 800483a:	4618      	mov	r0, r3
 800483c:	f7fe fe56 	bl	80034ec <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004840:	4b1d      	ldr	r3, [pc, #116]	@ (80048b8 <xTaskRemoveFromEventList+0xb0>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d11d      	bne.n	8004884 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004848:	693b      	ldr	r3, [r7, #16]
 800484a:	3304      	adds	r3, #4
 800484c:	4618      	mov	r0, r3
 800484e:	f7fe fe4d 	bl	80034ec <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004856:	4b19      	ldr	r3, [pc, #100]	@ (80048bc <xTaskRemoveFromEventList+0xb4>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	429a      	cmp	r2, r3
 800485c:	d903      	bls.n	8004866 <xTaskRemoveFromEventList+0x5e>
 800485e:	693b      	ldr	r3, [r7, #16]
 8004860:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004862:	4a16      	ldr	r2, [pc, #88]	@ (80048bc <xTaskRemoveFromEventList+0xb4>)
 8004864:	6013      	str	r3, [r2, #0]
 8004866:	693b      	ldr	r3, [r7, #16]
 8004868:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800486a:	4613      	mov	r3, r2
 800486c:	009b      	lsls	r3, r3, #2
 800486e:	4413      	add	r3, r2
 8004870:	009b      	lsls	r3, r3, #2
 8004872:	4a13      	ldr	r2, [pc, #76]	@ (80048c0 <xTaskRemoveFromEventList+0xb8>)
 8004874:	441a      	add	r2, r3
 8004876:	693b      	ldr	r3, [r7, #16]
 8004878:	3304      	adds	r3, #4
 800487a:	4619      	mov	r1, r3
 800487c:	4610      	mov	r0, r2
 800487e:	f7fe fdd8 	bl	8003432 <vListInsertEnd>
 8004882:	e005      	b.n	8004890 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004884:	693b      	ldr	r3, [r7, #16]
 8004886:	3318      	adds	r3, #24
 8004888:	4619      	mov	r1, r3
 800488a:	480e      	ldr	r0, [pc, #56]	@ (80048c4 <xTaskRemoveFromEventList+0xbc>)
 800488c:	f7fe fdd1 	bl	8003432 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004890:	693b      	ldr	r3, [r7, #16]
 8004892:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004894:	4b0c      	ldr	r3, [pc, #48]	@ (80048c8 <xTaskRemoveFromEventList+0xc0>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800489a:	429a      	cmp	r2, r3
 800489c:	d905      	bls.n	80048aa <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800489e:	2301      	movs	r3, #1
 80048a0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80048a2:	4b0a      	ldr	r3, [pc, #40]	@ (80048cc <xTaskRemoveFromEventList+0xc4>)
 80048a4:	2201      	movs	r2, #1
 80048a6:	601a      	str	r2, [r3, #0]
 80048a8:	e001      	b.n	80048ae <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80048aa:	2300      	movs	r3, #0
 80048ac:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80048ae:	697b      	ldr	r3, [r7, #20]
}
 80048b0:	4618      	mov	r0, r3
 80048b2:	3718      	adds	r7, #24
 80048b4:	46bd      	mov	sp, r7
 80048b6:	bd80      	pop	{r7, pc}
 80048b8:	20000cb8 	.word	0x20000cb8
 80048bc:	20000c98 	.word	0x20000c98
 80048c0:	200007c0 	.word	0x200007c0
 80048c4:	20000c50 	.word	0x20000c50
 80048c8:	200007bc 	.word	0x200007bc
 80048cc:	20000ca4 	.word	0x20000ca4

080048d0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80048d0:	b480      	push	{r7}
 80048d2:	b083      	sub	sp, #12
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80048d8:	4b06      	ldr	r3, [pc, #24]	@ (80048f4 <vTaskInternalSetTimeOutState+0x24>)
 80048da:	681a      	ldr	r2, [r3, #0]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80048e0:	4b05      	ldr	r3, [pc, #20]	@ (80048f8 <vTaskInternalSetTimeOutState+0x28>)
 80048e2:	681a      	ldr	r2, [r3, #0]
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	605a      	str	r2, [r3, #4]
}
 80048e8:	bf00      	nop
 80048ea:	370c      	adds	r7, #12
 80048ec:	46bd      	mov	sp, r7
 80048ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f2:	4770      	bx	lr
 80048f4:	20000ca8 	.word	0x20000ca8
 80048f8:	20000c94 	.word	0x20000c94

080048fc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b088      	sub	sp, #32
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
 8004904:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d10b      	bne.n	8004924 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800490c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004910:	f383 8811 	msr	BASEPRI, r3
 8004914:	f3bf 8f6f 	isb	sy
 8004918:	f3bf 8f4f 	dsb	sy
 800491c:	613b      	str	r3, [r7, #16]
}
 800491e:	bf00      	nop
 8004920:	bf00      	nop
 8004922:	e7fd      	b.n	8004920 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d10b      	bne.n	8004942 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800492a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800492e:	f383 8811 	msr	BASEPRI, r3
 8004932:	f3bf 8f6f 	isb	sy
 8004936:	f3bf 8f4f 	dsb	sy
 800493a:	60fb      	str	r3, [r7, #12]
}
 800493c:	bf00      	nop
 800493e:	bf00      	nop
 8004940:	e7fd      	b.n	800493e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8004942:	f000 fe91 	bl	8005668 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004946:	4b1d      	ldr	r3, [pc, #116]	@ (80049bc <xTaskCheckForTimeOut+0xc0>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	69ba      	ldr	r2, [r7, #24]
 8004952:	1ad3      	subs	r3, r2, r3
 8004954:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800495e:	d102      	bne.n	8004966 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004960:	2300      	movs	r3, #0
 8004962:	61fb      	str	r3, [r7, #28]
 8004964:	e023      	b.n	80049ae <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681a      	ldr	r2, [r3, #0]
 800496a:	4b15      	ldr	r3, [pc, #84]	@ (80049c0 <xTaskCheckForTimeOut+0xc4>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	429a      	cmp	r2, r3
 8004970:	d007      	beq.n	8004982 <xTaskCheckForTimeOut+0x86>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	69ba      	ldr	r2, [r7, #24]
 8004978:	429a      	cmp	r2, r3
 800497a:	d302      	bcc.n	8004982 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800497c:	2301      	movs	r3, #1
 800497e:	61fb      	str	r3, [r7, #28]
 8004980:	e015      	b.n	80049ae <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	697a      	ldr	r2, [r7, #20]
 8004988:	429a      	cmp	r2, r3
 800498a:	d20b      	bcs.n	80049a4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	681a      	ldr	r2, [r3, #0]
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	1ad2      	subs	r2, r2, r3
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004998:	6878      	ldr	r0, [r7, #4]
 800499a:	f7ff ff99 	bl	80048d0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800499e:	2300      	movs	r3, #0
 80049a0:	61fb      	str	r3, [r7, #28]
 80049a2:	e004      	b.n	80049ae <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	2200      	movs	r2, #0
 80049a8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80049aa:	2301      	movs	r3, #1
 80049ac:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80049ae:	f000 fe8d 	bl	80056cc <vPortExitCritical>

	return xReturn;
 80049b2:	69fb      	ldr	r3, [r7, #28]
}
 80049b4:	4618      	mov	r0, r3
 80049b6:	3720      	adds	r7, #32
 80049b8:	46bd      	mov	sp, r7
 80049ba:	bd80      	pop	{r7, pc}
 80049bc:	20000c94 	.word	0x20000c94
 80049c0:	20000ca8 	.word	0x20000ca8

080049c4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80049c4:	b480      	push	{r7}
 80049c6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80049c8:	4b03      	ldr	r3, [pc, #12]	@ (80049d8 <vTaskMissedYield+0x14>)
 80049ca:	2201      	movs	r2, #1
 80049cc:	601a      	str	r2, [r3, #0]
}
 80049ce:	bf00      	nop
 80049d0:	46bd      	mov	sp, r7
 80049d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d6:	4770      	bx	lr
 80049d8:	20000ca4 	.word	0x20000ca4

080049dc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b082      	sub	sp, #8
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80049e4:	f000 f852 	bl	8004a8c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80049e8:	4b06      	ldr	r3, [pc, #24]	@ (8004a04 <prvIdleTask+0x28>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	2b01      	cmp	r3, #1
 80049ee:	d9f9      	bls.n	80049e4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80049f0:	4b05      	ldr	r3, [pc, #20]	@ (8004a08 <prvIdleTask+0x2c>)
 80049f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80049f6:	601a      	str	r2, [r3, #0]
 80049f8:	f3bf 8f4f 	dsb	sy
 80049fc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004a00:	e7f0      	b.n	80049e4 <prvIdleTask+0x8>
 8004a02:	bf00      	nop
 8004a04:	200007c0 	.word	0x200007c0
 8004a08:	e000ed04 	.word	0xe000ed04

08004a0c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b082      	sub	sp, #8
 8004a10:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004a12:	2300      	movs	r3, #0
 8004a14:	607b      	str	r3, [r7, #4]
 8004a16:	e00c      	b.n	8004a32 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004a18:	687a      	ldr	r2, [r7, #4]
 8004a1a:	4613      	mov	r3, r2
 8004a1c:	009b      	lsls	r3, r3, #2
 8004a1e:	4413      	add	r3, r2
 8004a20:	009b      	lsls	r3, r3, #2
 8004a22:	4a12      	ldr	r2, [pc, #72]	@ (8004a6c <prvInitialiseTaskLists+0x60>)
 8004a24:	4413      	add	r3, r2
 8004a26:	4618      	mov	r0, r3
 8004a28:	f7fe fcd6 	bl	80033d8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	3301      	adds	r3, #1
 8004a30:	607b      	str	r3, [r7, #4]
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2b37      	cmp	r3, #55	@ 0x37
 8004a36:	d9ef      	bls.n	8004a18 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004a38:	480d      	ldr	r0, [pc, #52]	@ (8004a70 <prvInitialiseTaskLists+0x64>)
 8004a3a:	f7fe fccd 	bl	80033d8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004a3e:	480d      	ldr	r0, [pc, #52]	@ (8004a74 <prvInitialiseTaskLists+0x68>)
 8004a40:	f7fe fcca 	bl	80033d8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004a44:	480c      	ldr	r0, [pc, #48]	@ (8004a78 <prvInitialiseTaskLists+0x6c>)
 8004a46:	f7fe fcc7 	bl	80033d8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004a4a:	480c      	ldr	r0, [pc, #48]	@ (8004a7c <prvInitialiseTaskLists+0x70>)
 8004a4c:	f7fe fcc4 	bl	80033d8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004a50:	480b      	ldr	r0, [pc, #44]	@ (8004a80 <prvInitialiseTaskLists+0x74>)
 8004a52:	f7fe fcc1 	bl	80033d8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004a56:	4b0b      	ldr	r3, [pc, #44]	@ (8004a84 <prvInitialiseTaskLists+0x78>)
 8004a58:	4a05      	ldr	r2, [pc, #20]	@ (8004a70 <prvInitialiseTaskLists+0x64>)
 8004a5a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004a5c:	4b0a      	ldr	r3, [pc, #40]	@ (8004a88 <prvInitialiseTaskLists+0x7c>)
 8004a5e:	4a05      	ldr	r2, [pc, #20]	@ (8004a74 <prvInitialiseTaskLists+0x68>)
 8004a60:	601a      	str	r2, [r3, #0]
}
 8004a62:	bf00      	nop
 8004a64:	3708      	adds	r7, #8
 8004a66:	46bd      	mov	sp, r7
 8004a68:	bd80      	pop	{r7, pc}
 8004a6a:	bf00      	nop
 8004a6c:	200007c0 	.word	0x200007c0
 8004a70:	20000c20 	.word	0x20000c20
 8004a74:	20000c34 	.word	0x20000c34
 8004a78:	20000c50 	.word	0x20000c50
 8004a7c:	20000c64 	.word	0x20000c64
 8004a80:	20000c7c 	.word	0x20000c7c
 8004a84:	20000c48 	.word	0x20000c48
 8004a88:	20000c4c 	.word	0x20000c4c

08004a8c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b082      	sub	sp, #8
 8004a90:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004a92:	e019      	b.n	8004ac8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004a94:	f000 fde8 	bl	8005668 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a98:	4b10      	ldr	r3, [pc, #64]	@ (8004adc <prvCheckTasksWaitingTermination+0x50>)
 8004a9a:	68db      	ldr	r3, [r3, #12]
 8004a9c:	68db      	ldr	r3, [r3, #12]
 8004a9e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	3304      	adds	r3, #4
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	f7fe fd21 	bl	80034ec <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004aaa:	4b0d      	ldr	r3, [pc, #52]	@ (8004ae0 <prvCheckTasksWaitingTermination+0x54>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	3b01      	subs	r3, #1
 8004ab0:	4a0b      	ldr	r2, [pc, #44]	@ (8004ae0 <prvCheckTasksWaitingTermination+0x54>)
 8004ab2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004ab4:	4b0b      	ldr	r3, [pc, #44]	@ (8004ae4 <prvCheckTasksWaitingTermination+0x58>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	3b01      	subs	r3, #1
 8004aba:	4a0a      	ldr	r2, [pc, #40]	@ (8004ae4 <prvCheckTasksWaitingTermination+0x58>)
 8004abc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004abe:	f000 fe05 	bl	80056cc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f000 f810 	bl	8004ae8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004ac8:	4b06      	ldr	r3, [pc, #24]	@ (8004ae4 <prvCheckTasksWaitingTermination+0x58>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d1e1      	bne.n	8004a94 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004ad0:	bf00      	nop
 8004ad2:	bf00      	nop
 8004ad4:	3708      	adds	r7, #8
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bd80      	pop	{r7, pc}
 8004ada:	bf00      	nop
 8004adc:	20000c64 	.word	0x20000c64
 8004ae0:	20000c90 	.word	0x20000c90
 8004ae4:	20000c78 	.word	0x20000c78

08004ae8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b084      	sub	sp, #16
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d108      	bne.n	8004b0c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004afe:	4618      	mov	r0, r3
 8004b00:	f000 ffa2 	bl	8005a48 <vPortFree>
				vPortFree( pxTCB );
 8004b04:	6878      	ldr	r0, [r7, #4]
 8004b06:	f000 ff9f 	bl	8005a48 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004b0a:	e019      	b.n	8004b40 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8004b12:	2b01      	cmp	r3, #1
 8004b14:	d103      	bne.n	8004b1e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004b16:	6878      	ldr	r0, [r7, #4]
 8004b18:	f000 ff96 	bl	8005a48 <vPortFree>
	}
 8004b1c:	e010      	b.n	8004b40 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8004b24:	2b02      	cmp	r3, #2
 8004b26:	d00b      	beq.n	8004b40 <prvDeleteTCB+0x58>
	__asm volatile
 8004b28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b2c:	f383 8811 	msr	BASEPRI, r3
 8004b30:	f3bf 8f6f 	isb	sy
 8004b34:	f3bf 8f4f 	dsb	sy
 8004b38:	60fb      	str	r3, [r7, #12]
}
 8004b3a:	bf00      	nop
 8004b3c:	bf00      	nop
 8004b3e:	e7fd      	b.n	8004b3c <prvDeleteTCB+0x54>
	}
 8004b40:	bf00      	nop
 8004b42:	3710      	adds	r7, #16
 8004b44:	46bd      	mov	sp, r7
 8004b46:	bd80      	pop	{r7, pc}

08004b48 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b083      	sub	sp, #12
 8004b4c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004b4e:	4b0c      	ldr	r3, [pc, #48]	@ (8004b80 <prvResetNextTaskUnblockTime+0x38>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d104      	bne.n	8004b62 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004b58:	4b0a      	ldr	r3, [pc, #40]	@ (8004b84 <prvResetNextTaskUnblockTime+0x3c>)
 8004b5a:	f04f 32ff 	mov.w	r2, #4294967295
 8004b5e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004b60:	e008      	b.n	8004b74 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b62:	4b07      	ldr	r3, [pc, #28]	@ (8004b80 <prvResetNextTaskUnblockTime+0x38>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	68db      	ldr	r3, [r3, #12]
 8004b68:	68db      	ldr	r3, [r3, #12]
 8004b6a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	4a04      	ldr	r2, [pc, #16]	@ (8004b84 <prvResetNextTaskUnblockTime+0x3c>)
 8004b72:	6013      	str	r3, [r2, #0]
}
 8004b74:	bf00      	nop
 8004b76:	370c      	adds	r7, #12
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7e:	4770      	bx	lr
 8004b80:	20000c48 	.word	0x20000c48
 8004b84:	20000cb0 	.word	0x20000cb0

08004b88 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004b88:	b480      	push	{r7}
 8004b8a:	b083      	sub	sp, #12
 8004b8c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004b8e:	4b0b      	ldr	r3, [pc, #44]	@ (8004bbc <xTaskGetSchedulerState+0x34>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d102      	bne.n	8004b9c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004b96:	2301      	movs	r3, #1
 8004b98:	607b      	str	r3, [r7, #4]
 8004b9a:	e008      	b.n	8004bae <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004b9c:	4b08      	ldr	r3, [pc, #32]	@ (8004bc0 <xTaskGetSchedulerState+0x38>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d102      	bne.n	8004baa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004ba4:	2302      	movs	r3, #2
 8004ba6:	607b      	str	r3, [r7, #4]
 8004ba8:	e001      	b.n	8004bae <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004baa:	2300      	movs	r3, #0
 8004bac:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004bae:	687b      	ldr	r3, [r7, #4]
	}
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	370c      	adds	r7, #12
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bba:	4770      	bx	lr
 8004bbc:	20000c9c 	.word	0x20000c9c
 8004bc0:	20000cb8 	.word	0x20000cb8

08004bc4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b086      	sub	sp, #24
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d058      	beq.n	8004c8c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004bda:	4b2f      	ldr	r3, [pc, #188]	@ (8004c98 <xTaskPriorityDisinherit+0xd4>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	693a      	ldr	r2, [r7, #16]
 8004be0:	429a      	cmp	r2, r3
 8004be2:	d00b      	beq.n	8004bfc <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8004be4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004be8:	f383 8811 	msr	BASEPRI, r3
 8004bec:	f3bf 8f6f 	isb	sy
 8004bf0:	f3bf 8f4f 	dsb	sy
 8004bf4:	60fb      	str	r3, [r7, #12]
}
 8004bf6:	bf00      	nop
 8004bf8:	bf00      	nop
 8004bfa:	e7fd      	b.n	8004bf8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004bfc:	693b      	ldr	r3, [r7, #16]
 8004bfe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d10b      	bne.n	8004c1c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8004c04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c08:	f383 8811 	msr	BASEPRI, r3
 8004c0c:	f3bf 8f6f 	isb	sy
 8004c10:	f3bf 8f4f 	dsb	sy
 8004c14:	60bb      	str	r3, [r7, #8]
}
 8004c16:	bf00      	nop
 8004c18:	bf00      	nop
 8004c1a:	e7fd      	b.n	8004c18 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8004c1c:	693b      	ldr	r3, [r7, #16]
 8004c1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c20:	1e5a      	subs	r2, r3, #1
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c2a:	693b      	ldr	r3, [r7, #16]
 8004c2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c2e:	429a      	cmp	r2, r3
 8004c30:	d02c      	beq.n	8004c8c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d128      	bne.n	8004c8c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004c3a:	693b      	ldr	r3, [r7, #16]
 8004c3c:	3304      	adds	r3, #4
 8004c3e:	4618      	mov	r0, r3
 8004c40:	f7fe fc54 	bl	80034ec <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004c44:	693b      	ldr	r3, [r7, #16]
 8004c46:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c4c:	693b      	ldr	r3, [r7, #16]
 8004c4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c50:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004c54:	693b      	ldr	r3, [r7, #16]
 8004c56:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004c58:	693b      	ldr	r3, [r7, #16]
 8004c5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c5c:	4b0f      	ldr	r3, [pc, #60]	@ (8004c9c <xTaskPriorityDisinherit+0xd8>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	429a      	cmp	r2, r3
 8004c62:	d903      	bls.n	8004c6c <xTaskPriorityDisinherit+0xa8>
 8004c64:	693b      	ldr	r3, [r7, #16]
 8004c66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c68:	4a0c      	ldr	r2, [pc, #48]	@ (8004c9c <xTaskPriorityDisinherit+0xd8>)
 8004c6a:	6013      	str	r3, [r2, #0]
 8004c6c:	693b      	ldr	r3, [r7, #16]
 8004c6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c70:	4613      	mov	r3, r2
 8004c72:	009b      	lsls	r3, r3, #2
 8004c74:	4413      	add	r3, r2
 8004c76:	009b      	lsls	r3, r3, #2
 8004c78:	4a09      	ldr	r2, [pc, #36]	@ (8004ca0 <xTaskPriorityDisinherit+0xdc>)
 8004c7a:	441a      	add	r2, r3
 8004c7c:	693b      	ldr	r3, [r7, #16]
 8004c7e:	3304      	adds	r3, #4
 8004c80:	4619      	mov	r1, r3
 8004c82:	4610      	mov	r0, r2
 8004c84:	f7fe fbd5 	bl	8003432 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004c88:	2301      	movs	r3, #1
 8004c8a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004c8c:	697b      	ldr	r3, [r7, #20]
	}
 8004c8e:	4618      	mov	r0, r3
 8004c90:	3718      	adds	r7, #24
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bd80      	pop	{r7, pc}
 8004c96:	bf00      	nop
 8004c98:	200007bc 	.word	0x200007bc
 8004c9c:	20000c98 	.word	0x20000c98
 8004ca0:	200007c0 	.word	0x200007c0

08004ca4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b084      	sub	sp, #16
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
 8004cac:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004cae:	4b21      	ldr	r3, [pc, #132]	@ (8004d34 <prvAddCurrentTaskToDelayedList+0x90>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004cb4:	4b20      	ldr	r3, [pc, #128]	@ (8004d38 <prvAddCurrentTaskToDelayedList+0x94>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	3304      	adds	r3, #4
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f7fe fc16 	bl	80034ec <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cc6:	d10a      	bne.n	8004cde <prvAddCurrentTaskToDelayedList+0x3a>
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d007      	beq.n	8004cde <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004cce:	4b1a      	ldr	r3, [pc, #104]	@ (8004d38 <prvAddCurrentTaskToDelayedList+0x94>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	3304      	adds	r3, #4
 8004cd4:	4619      	mov	r1, r3
 8004cd6:	4819      	ldr	r0, [pc, #100]	@ (8004d3c <prvAddCurrentTaskToDelayedList+0x98>)
 8004cd8:	f7fe fbab 	bl	8003432 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004cdc:	e026      	b.n	8004d2c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004cde:	68fa      	ldr	r2, [r7, #12]
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	4413      	add	r3, r2
 8004ce4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004ce6:	4b14      	ldr	r3, [pc, #80]	@ (8004d38 <prvAddCurrentTaskToDelayedList+0x94>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	68ba      	ldr	r2, [r7, #8]
 8004cec:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004cee:	68ba      	ldr	r2, [r7, #8]
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	429a      	cmp	r2, r3
 8004cf4:	d209      	bcs.n	8004d0a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004cf6:	4b12      	ldr	r3, [pc, #72]	@ (8004d40 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004cf8:	681a      	ldr	r2, [r3, #0]
 8004cfa:	4b0f      	ldr	r3, [pc, #60]	@ (8004d38 <prvAddCurrentTaskToDelayedList+0x94>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	3304      	adds	r3, #4
 8004d00:	4619      	mov	r1, r3
 8004d02:	4610      	mov	r0, r2
 8004d04:	f7fe fbb9 	bl	800347a <vListInsert>
}
 8004d08:	e010      	b.n	8004d2c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004d0a:	4b0e      	ldr	r3, [pc, #56]	@ (8004d44 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004d0c:	681a      	ldr	r2, [r3, #0]
 8004d0e:	4b0a      	ldr	r3, [pc, #40]	@ (8004d38 <prvAddCurrentTaskToDelayedList+0x94>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	3304      	adds	r3, #4
 8004d14:	4619      	mov	r1, r3
 8004d16:	4610      	mov	r0, r2
 8004d18:	f7fe fbaf 	bl	800347a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004d1c:	4b0a      	ldr	r3, [pc, #40]	@ (8004d48 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	68ba      	ldr	r2, [r7, #8]
 8004d22:	429a      	cmp	r2, r3
 8004d24:	d202      	bcs.n	8004d2c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004d26:	4a08      	ldr	r2, [pc, #32]	@ (8004d48 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	6013      	str	r3, [r2, #0]
}
 8004d2c:	bf00      	nop
 8004d2e:	3710      	adds	r7, #16
 8004d30:	46bd      	mov	sp, r7
 8004d32:	bd80      	pop	{r7, pc}
 8004d34:	20000c94 	.word	0x20000c94
 8004d38:	200007bc 	.word	0x200007bc
 8004d3c:	20000c7c 	.word	0x20000c7c
 8004d40:	20000c4c 	.word	0x20000c4c
 8004d44:	20000c48 	.word	0x20000c48
 8004d48:	20000cb0 	.word	0x20000cb0

08004d4c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b08a      	sub	sp, #40	@ 0x28
 8004d50:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004d52:	2300      	movs	r3, #0
 8004d54:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004d56:	f000 fb13 	bl	8005380 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004d5a:	4b1d      	ldr	r3, [pc, #116]	@ (8004dd0 <xTimerCreateTimerTask+0x84>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d021      	beq.n	8004da6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004d62:	2300      	movs	r3, #0
 8004d64:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004d66:	2300      	movs	r3, #0
 8004d68:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004d6a:	1d3a      	adds	r2, r7, #4
 8004d6c:	f107 0108 	add.w	r1, r7, #8
 8004d70:	f107 030c 	add.w	r3, r7, #12
 8004d74:	4618      	mov	r0, r3
 8004d76:	f7fe fb15 	bl	80033a4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004d7a:	6879      	ldr	r1, [r7, #4]
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	68fa      	ldr	r2, [r7, #12]
 8004d80:	9202      	str	r2, [sp, #8]
 8004d82:	9301      	str	r3, [sp, #4]
 8004d84:	2302      	movs	r3, #2
 8004d86:	9300      	str	r3, [sp, #0]
 8004d88:	2300      	movs	r3, #0
 8004d8a:	460a      	mov	r2, r1
 8004d8c:	4911      	ldr	r1, [pc, #68]	@ (8004dd4 <xTimerCreateTimerTask+0x88>)
 8004d8e:	4812      	ldr	r0, [pc, #72]	@ (8004dd8 <xTimerCreateTimerTask+0x8c>)
 8004d90:	f7ff f8d0 	bl	8003f34 <xTaskCreateStatic>
 8004d94:	4603      	mov	r3, r0
 8004d96:	4a11      	ldr	r2, [pc, #68]	@ (8004ddc <xTimerCreateTimerTask+0x90>)
 8004d98:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004d9a:	4b10      	ldr	r3, [pc, #64]	@ (8004ddc <xTimerCreateTimerTask+0x90>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d001      	beq.n	8004da6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004da2:	2301      	movs	r3, #1
 8004da4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004da6:	697b      	ldr	r3, [r7, #20]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d10b      	bne.n	8004dc4 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8004dac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004db0:	f383 8811 	msr	BASEPRI, r3
 8004db4:	f3bf 8f6f 	isb	sy
 8004db8:	f3bf 8f4f 	dsb	sy
 8004dbc:	613b      	str	r3, [r7, #16]
}
 8004dbe:	bf00      	nop
 8004dc0:	bf00      	nop
 8004dc2:	e7fd      	b.n	8004dc0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004dc4:	697b      	ldr	r3, [r7, #20]
}
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	3718      	adds	r7, #24
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bd80      	pop	{r7, pc}
 8004dce:	bf00      	nop
 8004dd0:	20000cec 	.word	0x20000cec
 8004dd4:	08005d44 	.word	0x08005d44
 8004dd8:	08004f19 	.word	0x08004f19
 8004ddc:	20000cf0 	.word	0x20000cf0

08004de0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b08a      	sub	sp, #40	@ 0x28
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	60f8      	str	r0, [r7, #12]
 8004de8:	60b9      	str	r1, [r7, #8]
 8004dea:	607a      	str	r2, [r7, #4]
 8004dec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004dee:	2300      	movs	r3, #0
 8004df0:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d10b      	bne.n	8004e10 <xTimerGenericCommand+0x30>
	__asm volatile
 8004df8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dfc:	f383 8811 	msr	BASEPRI, r3
 8004e00:	f3bf 8f6f 	isb	sy
 8004e04:	f3bf 8f4f 	dsb	sy
 8004e08:	623b      	str	r3, [r7, #32]
}
 8004e0a:	bf00      	nop
 8004e0c:	bf00      	nop
 8004e0e:	e7fd      	b.n	8004e0c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004e10:	4b19      	ldr	r3, [pc, #100]	@ (8004e78 <xTimerGenericCommand+0x98>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d02a      	beq.n	8004e6e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	2b05      	cmp	r3, #5
 8004e28:	dc18      	bgt.n	8004e5c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004e2a:	f7ff fead 	bl	8004b88 <xTaskGetSchedulerState>
 8004e2e:	4603      	mov	r3, r0
 8004e30:	2b02      	cmp	r3, #2
 8004e32:	d109      	bne.n	8004e48 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004e34:	4b10      	ldr	r3, [pc, #64]	@ (8004e78 <xTimerGenericCommand+0x98>)
 8004e36:	6818      	ldr	r0, [r3, #0]
 8004e38:	f107 0110 	add.w	r1, r7, #16
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004e40:	f7fe fc88 	bl	8003754 <xQueueGenericSend>
 8004e44:	6278      	str	r0, [r7, #36]	@ 0x24
 8004e46:	e012      	b.n	8004e6e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004e48:	4b0b      	ldr	r3, [pc, #44]	@ (8004e78 <xTimerGenericCommand+0x98>)
 8004e4a:	6818      	ldr	r0, [r3, #0]
 8004e4c:	f107 0110 	add.w	r1, r7, #16
 8004e50:	2300      	movs	r3, #0
 8004e52:	2200      	movs	r2, #0
 8004e54:	f7fe fc7e 	bl	8003754 <xQueueGenericSend>
 8004e58:	6278      	str	r0, [r7, #36]	@ 0x24
 8004e5a:	e008      	b.n	8004e6e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004e5c:	4b06      	ldr	r3, [pc, #24]	@ (8004e78 <xTimerGenericCommand+0x98>)
 8004e5e:	6818      	ldr	r0, [r3, #0]
 8004e60:	f107 0110 	add.w	r1, r7, #16
 8004e64:	2300      	movs	r3, #0
 8004e66:	683a      	ldr	r2, [r7, #0]
 8004e68:	f7fe fd76 	bl	8003958 <xQueueGenericSendFromISR>
 8004e6c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004e6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004e70:	4618      	mov	r0, r3
 8004e72:	3728      	adds	r7, #40	@ 0x28
 8004e74:	46bd      	mov	sp, r7
 8004e76:	bd80      	pop	{r7, pc}
 8004e78:	20000cec 	.word	0x20000cec

08004e7c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b088      	sub	sp, #32
 8004e80:	af02      	add	r7, sp, #8
 8004e82:	6078      	str	r0, [r7, #4]
 8004e84:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e86:	4b23      	ldr	r3, [pc, #140]	@ (8004f14 <prvProcessExpiredTimer+0x98>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	68db      	ldr	r3, [r3, #12]
 8004e8c:	68db      	ldr	r3, [r3, #12]
 8004e8e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004e90:	697b      	ldr	r3, [r7, #20]
 8004e92:	3304      	adds	r3, #4
 8004e94:	4618      	mov	r0, r3
 8004e96:	f7fe fb29 	bl	80034ec <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004e9a:	697b      	ldr	r3, [r7, #20]
 8004e9c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004ea0:	f003 0304 	and.w	r3, r3, #4
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d023      	beq.n	8004ef0 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004ea8:	697b      	ldr	r3, [r7, #20]
 8004eaa:	699a      	ldr	r2, [r3, #24]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	18d1      	adds	r1, r2, r3
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	683a      	ldr	r2, [r7, #0]
 8004eb4:	6978      	ldr	r0, [r7, #20]
 8004eb6:	f000 f8d5 	bl	8005064 <prvInsertTimerInActiveList>
 8004eba:	4603      	mov	r3, r0
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d020      	beq.n	8004f02 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	9300      	str	r3, [sp, #0]
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	687a      	ldr	r2, [r7, #4]
 8004ec8:	2100      	movs	r1, #0
 8004eca:	6978      	ldr	r0, [r7, #20]
 8004ecc:	f7ff ff88 	bl	8004de0 <xTimerGenericCommand>
 8004ed0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004ed2:	693b      	ldr	r3, [r7, #16]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d114      	bne.n	8004f02 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8004ed8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004edc:	f383 8811 	msr	BASEPRI, r3
 8004ee0:	f3bf 8f6f 	isb	sy
 8004ee4:	f3bf 8f4f 	dsb	sy
 8004ee8:	60fb      	str	r3, [r7, #12]
}
 8004eea:	bf00      	nop
 8004eec:	bf00      	nop
 8004eee:	e7fd      	b.n	8004eec <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004ef0:	697b      	ldr	r3, [r7, #20]
 8004ef2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004ef6:	f023 0301 	bic.w	r3, r3, #1
 8004efa:	b2da      	uxtb	r2, r3
 8004efc:	697b      	ldr	r3, [r7, #20]
 8004efe:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004f02:	697b      	ldr	r3, [r7, #20]
 8004f04:	6a1b      	ldr	r3, [r3, #32]
 8004f06:	6978      	ldr	r0, [r7, #20]
 8004f08:	4798      	blx	r3
}
 8004f0a:	bf00      	nop
 8004f0c:	3718      	adds	r7, #24
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	bd80      	pop	{r7, pc}
 8004f12:	bf00      	nop
 8004f14:	20000ce4 	.word	0x20000ce4

08004f18 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b084      	sub	sp, #16
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004f20:	f107 0308 	add.w	r3, r7, #8
 8004f24:	4618      	mov	r0, r3
 8004f26:	f000 f859 	bl	8004fdc <prvGetNextExpireTime>
 8004f2a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	4619      	mov	r1, r3
 8004f30:	68f8      	ldr	r0, [r7, #12]
 8004f32:	f000 f805 	bl	8004f40 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004f36:	f000 f8d7 	bl	80050e8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004f3a:	bf00      	nop
 8004f3c:	e7f0      	b.n	8004f20 <prvTimerTask+0x8>
	...

08004f40 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b084      	sub	sp, #16
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
 8004f48:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004f4a:	f7ff fa37 	bl	80043bc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004f4e:	f107 0308 	add.w	r3, r7, #8
 8004f52:	4618      	mov	r0, r3
 8004f54:	f000 f866 	bl	8005024 <prvSampleTimeNow>
 8004f58:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004f5a:	68bb      	ldr	r3, [r7, #8]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d130      	bne.n	8004fc2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d10a      	bne.n	8004f7c <prvProcessTimerOrBlockTask+0x3c>
 8004f66:	687a      	ldr	r2, [r7, #4]
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	429a      	cmp	r2, r3
 8004f6c:	d806      	bhi.n	8004f7c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004f6e:	f7ff fa33 	bl	80043d8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004f72:	68f9      	ldr	r1, [r7, #12]
 8004f74:	6878      	ldr	r0, [r7, #4]
 8004f76:	f7ff ff81 	bl	8004e7c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004f7a:	e024      	b.n	8004fc6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d008      	beq.n	8004f94 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004f82:	4b13      	ldr	r3, [pc, #76]	@ (8004fd0 <prvProcessTimerOrBlockTask+0x90>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d101      	bne.n	8004f90 <prvProcessTimerOrBlockTask+0x50>
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	e000      	b.n	8004f92 <prvProcessTimerOrBlockTask+0x52>
 8004f90:	2300      	movs	r3, #0
 8004f92:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004f94:	4b0f      	ldr	r3, [pc, #60]	@ (8004fd4 <prvProcessTimerOrBlockTask+0x94>)
 8004f96:	6818      	ldr	r0, [r3, #0]
 8004f98:	687a      	ldr	r2, [r7, #4]
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	1ad3      	subs	r3, r2, r3
 8004f9e:	683a      	ldr	r2, [r7, #0]
 8004fa0:	4619      	mov	r1, r3
 8004fa2:	f7fe ff93 	bl	8003ecc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004fa6:	f7ff fa17 	bl	80043d8 <xTaskResumeAll>
 8004faa:	4603      	mov	r3, r0
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d10a      	bne.n	8004fc6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004fb0:	4b09      	ldr	r3, [pc, #36]	@ (8004fd8 <prvProcessTimerOrBlockTask+0x98>)
 8004fb2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004fb6:	601a      	str	r2, [r3, #0]
 8004fb8:	f3bf 8f4f 	dsb	sy
 8004fbc:	f3bf 8f6f 	isb	sy
}
 8004fc0:	e001      	b.n	8004fc6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004fc2:	f7ff fa09 	bl	80043d8 <xTaskResumeAll>
}
 8004fc6:	bf00      	nop
 8004fc8:	3710      	adds	r7, #16
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bd80      	pop	{r7, pc}
 8004fce:	bf00      	nop
 8004fd0:	20000ce8 	.word	0x20000ce8
 8004fd4:	20000cec 	.word	0x20000cec
 8004fd8:	e000ed04 	.word	0xe000ed04

08004fdc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b085      	sub	sp, #20
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004fe4:	4b0e      	ldr	r3, [pc, #56]	@ (8005020 <prvGetNextExpireTime+0x44>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d101      	bne.n	8004ff2 <prvGetNextExpireTime+0x16>
 8004fee:	2201      	movs	r2, #1
 8004ff0:	e000      	b.n	8004ff4 <prvGetNextExpireTime+0x18>
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d105      	bne.n	800500c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005000:	4b07      	ldr	r3, [pc, #28]	@ (8005020 <prvGetNextExpireTime+0x44>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	68db      	ldr	r3, [r3, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	60fb      	str	r3, [r7, #12]
 800500a:	e001      	b.n	8005010 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800500c:	2300      	movs	r3, #0
 800500e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005010:	68fb      	ldr	r3, [r7, #12]
}
 8005012:	4618      	mov	r0, r3
 8005014:	3714      	adds	r7, #20
 8005016:	46bd      	mov	sp, r7
 8005018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501c:	4770      	bx	lr
 800501e:	bf00      	nop
 8005020:	20000ce4 	.word	0x20000ce4

08005024 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b084      	sub	sp, #16
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800502c:	f7ff fa72 	bl	8004514 <xTaskGetTickCount>
 8005030:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005032:	4b0b      	ldr	r3, [pc, #44]	@ (8005060 <prvSampleTimeNow+0x3c>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	68fa      	ldr	r2, [r7, #12]
 8005038:	429a      	cmp	r2, r3
 800503a:	d205      	bcs.n	8005048 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800503c:	f000 f93a 	bl	80052b4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2201      	movs	r2, #1
 8005044:	601a      	str	r2, [r3, #0]
 8005046:	e002      	b.n	800504e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2200      	movs	r2, #0
 800504c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800504e:	4a04      	ldr	r2, [pc, #16]	@ (8005060 <prvSampleTimeNow+0x3c>)
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005054:	68fb      	ldr	r3, [r7, #12]
}
 8005056:	4618      	mov	r0, r3
 8005058:	3710      	adds	r7, #16
 800505a:	46bd      	mov	sp, r7
 800505c:	bd80      	pop	{r7, pc}
 800505e:	bf00      	nop
 8005060:	20000cf4 	.word	0x20000cf4

08005064 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b086      	sub	sp, #24
 8005068:	af00      	add	r7, sp, #0
 800506a:	60f8      	str	r0, [r7, #12]
 800506c:	60b9      	str	r1, [r7, #8]
 800506e:	607a      	str	r2, [r7, #4]
 8005070:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005072:	2300      	movs	r3, #0
 8005074:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	68ba      	ldr	r2, [r7, #8]
 800507a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	68fa      	ldr	r2, [r7, #12]
 8005080:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005082:	68ba      	ldr	r2, [r7, #8]
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	429a      	cmp	r2, r3
 8005088:	d812      	bhi.n	80050b0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800508a:	687a      	ldr	r2, [r7, #4]
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	1ad2      	subs	r2, r2, r3
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	699b      	ldr	r3, [r3, #24]
 8005094:	429a      	cmp	r2, r3
 8005096:	d302      	bcc.n	800509e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005098:	2301      	movs	r3, #1
 800509a:	617b      	str	r3, [r7, #20]
 800509c:	e01b      	b.n	80050d6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800509e:	4b10      	ldr	r3, [pc, #64]	@ (80050e0 <prvInsertTimerInActiveList+0x7c>)
 80050a0:	681a      	ldr	r2, [r3, #0]
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	3304      	adds	r3, #4
 80050a6:	4619      	mov	r1, r3
 80050a8:	4610      	mov	r0, r2
 80050aa:	f7fe f9e6 	bl	800347a <vListInsert>
 80050ae:	e012      	b.n	80050d6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80050b0:	687a      	ldr	r2, [r7, #4]
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	429a      	cmp	r2, r3
 80050b6:	d206      	bcs.n	80050c6 <prvInsertTimerInActiveList+0x62>
 80050b8:	68ba      	ldr	r2, [r7, #8]
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	429a      	cmp	r2, r3
 80050be:	d302      	bcc.n	80050c6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80050c0:	2301      	movs	r3, #1
 80050c2:	617b      	str	r3, [r7, #20]
 80050c4:	e007      	b.n	80050d6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80050c6:	4b07      	ldr	r3, [pc, #28]	@ (80050e4 <prvInsertTimerInActiveList+0x80>)
 80050c8:	681a      	ldr	r2, [r3, #0]
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	3304      	adds	r3, #4
 80050ce:	4619      	mov	r1, r3
 80050d0:	4610      	mov	r0, r2
 80050d2:	f7fe f9d2 	bl	800347a <vListInsert>
		}
	}

	return xProcessTimerNow;
 80050d6:	697b      	ldr	r3, [r7, #20]
}
 80050d8:	4618      	mov	r0, r3
 80050da:	3718      	adds	r7, #24
 80050dc:	46bd      	mov	sp, r7
 80050de:	bd80      	pop	{r7, pc}
 80050e0:	20000ce8 	.word	0x20000ce8
 80050e4:	20000ce4 	.word	0x20000ce4

080050e8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b08e      	sub	sp, #56	@ 0x38
 80050ec:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80050ee:	e0ce      	b.n	800528e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	da19      	bge.n	800512a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80050f6:	1d3b      	adds	r3, r7, #4
 80050f8:	3304      	adds	r3, #4
 80050fa:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80050fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d10b      	bne.n	800511a <prvProcessReceivedCommands+0x32>
	__asm volatile
 8005102:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005106:	f383 8811 	msr	BASEPRI, r3
 800510a:	f3bf 8f6f 	isb	sy
 800510e:	f3bf 8f4f 	dsb	sy
 8005112:	61fb      	str	r3, [r7, #28]
}
 8005114:	bf00      	nop
 8005116:	bf00      	nop
 8005118:	e7fd      	b.n	8005116 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800511a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005120:	6850      	ldr	r0, [r2, #4]
 8005122:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005124:	6892      	ldr	r2, [r2, #8]
 8005126:	4611      	mov	r1, r2
 8005128:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2b00      	cmp	r3, #0
 800512e:	f2c0 80ae 	blt.w	800528e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005136:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005138:	695b      	ldr	r3, [r3, #20]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d004      	beq.n	8005148 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800513e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005140:	3304      	adds	r3, #4
 8005142:	4618      	mov	r0, r3
 8005144:	f7fe f9d2 	bl	80034ec <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005148:	463b      	mov	r3, r7
 800514a:	4618      	mov	r0, r3
 800514c:	f7ff ff6a 	bl	8005024 <prvSampleTimeNow>
 8005150:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2b09      	cmp	r3, #9
 8005156:	f200 8097 	bhi.w	8005288 <prvProcessReceivedCommands+0x1a0>
 800515a:	a201      	add	r2, pc, #4	@ (adr r2, 8005160 <prvProcessReceivedCommands+0x78>)
 800515c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005160:	08005189 	.word	0x08005189
 8005164:	08005189 	.word	0x08005189
 8005168:	08005189 	.word	0x08005189
 800516c:	080051ff 	.word	0x080051ff
 8005170:	08005213 	.word	0x08005213
 8005174:	0800525f 	.word	0x0800525f
 8005178:	08005189 	.word	0x08005189
 800517c:	08005189 	.word	0x08005189
 8005180:	080051ff 	.word	0x080051ff
 8005184:	08005213 	.word	0x08005213
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005188:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800518a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800518e:	f043 0301 	orr.w	r3, r3, #1
 8005192:	b2da      	uxtb	r2, r3
 8005194:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005196:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800519a:	68ba      	ldr	r2, [r7, #8]
 800519c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800519e:	699b      	ldr	r3, [r3, #24]
 80051a0:	18d1      	adds	r1, r2, r3
 80051a2:	68bb      	ldr	r3, [r7, #8]
 80051a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80051a6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80051a8:	f7ff ff5c 	bl	8005064 <prvInsertTimerInActiveList>
 80051ac:	4603      	mov	r3, r0
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d06c      	beq.n	800528c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80051b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051b4:	6a1b      	ldr	r3, [r3, #32]
 80051b6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80051b8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80051ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051bc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80051c0:	f003 0304 	and.w	r3, r3, #4
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d061      	beq.n	800528c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80051c8:	68ba      	ldr	r2, [r7, #8]
 80051ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051cc:	699b      	ldr	r3, [r3, #24]
 80051ce:	441a      	add	r2, r3
 80051d0:	2300      	movs	r3, #0
 80051d2:	9300      	str	r3, [sp, #0]
 80051d4:	2300      	movs	r3, #0
 80051d6:	2100      	movs	r1, #0
 80051d8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80051da:	f7ff fe01 	bl	8004de0 <xTimerGenericCommand>
 80051de:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80051e0:	6a3b      	ldr	r3, [r7, #32]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d152      	bne.n	800528c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80051e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051ea:	f383 8811 	msr	BASEPRI, r3
 80051ee:	f3bf 8f6f 	isb	sy
 80051f2:	f3bf 8f4f 	dsb	sy
 80051f6:	61bb      	str	r3, [r7, #24]
}
 80051f8:	bf00      	nop
 80051fa:	bf00      	nop
 80051fc:	e7fd      	b.n	80051fa <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80051fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005200:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005204:	f023 0301 	bic.w	r3, r3, #1
 8005208:	b2da      	uxtb	r2, r3
 800520a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800520c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8005210:	e03d      	b.n	800528e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005212:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005214:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005218:	f043 0301 	orr.w	r3, r3, #1
 800521c:	b2da      	uxtb	r2, r3
 800521e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005220:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005224:	68ba      	ldr	r2, [r7, #8]
 8005226:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005228:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800522a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800522c:	699b      	ldr	r3, [r3, #24]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d10b      	bne.n	800524a <prvProcessReceivedCommands+0x162>
	__asm volatile
 8005232:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005236:	f383 8811 	msr	BASEPRI, r3
 800523a:	f3bf 8f6f 	isb	sy
 800523e:	f3bf 8f4f 	dsb	sy
 8005242:	617b      	str	r3, [r7, #20]
}
 8005244:	bf00      	nop
 8005246:	bf00      	nop
 8005248:	e7fd      	b.n	8005246 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800524a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800524c:	699a      	ldr	r2, [r3, #24]
 800524e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005250:	18d1      	adds	r1, r2, r3
 8005252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005254:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005256:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005258:	f7ff ff04 	bl	8005064 <prvInsertTimerInActiveList>
					break;
 800525c:	e017      	b.n	800528e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800525e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005260:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005264:	f003 0302 	and.w	r3, r3, #2
 8005268:	2b00      	cmp	r3, #0
 800526a:	d103      	bne.n	8005274 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800526c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800526e:	f000 fbeb 	bl	8005a48 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005272:	e00c      	b.n	800528e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005274:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005276:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800527a:	f023 0301 	bic.w	r3, r3, #1
 800527e:	b2da      	uxtb	r2, r3
 8005280:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005282:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8005286:	e002      	b.n	800528e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8005288:	bf00      	nop
 800528a:	e000      	b.n	800528e <prvProcessReceivedCommands+0x1a6>
					break;
 800528c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800528e:	4b08      	ldr	r3, [pc, #32]	@ (80052b0 <prvProcessReceivedCommands+0x1c8>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	1d39      	adds	r1, r7, #4
 8005294:	2200      	movs	r2, #0
 8005296:	4618      	mov	r0, r3
 8005298:	f7fe fbfc 	bl	8003a94 <xQueueReceive>
 800529c:	4603      	mov	r3, r0
 800529e:	2b00      	cmp	r3, #0
 80052a0:	f47f af26 	bne.w	80050f0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80052a4:	bf00      	nop
 80052a6:	bf00      	nop
 80052a8:	3730      	adds	r7, #48	@ 0x30
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bd80      	pop	{r7, pc}
 80052ae:	bf00      	nop
 80052b0:	20000cec 	.word	0x20000cec

080052b4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b088      	sub	sp, #32
 80052b8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80052ba:	e049      	b.n	8005350 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80052bc:	4b2e      	ldr	r3, [pc, #184]	@ (8005378 <prvSwitchTimerLists+0xc4>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	68db      	ldr	r3, [r3, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80052c6:	4b2c      	ldr	r3, [pc, #176]	@ (8005378 <prvSwitchTimerLists+0xc4>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	68db      	ldr	r3, [r3, #12]
 80052cc:	68db      	ldr	r3, [r3, #12]
 80052ce:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	3304      	adds	r3, #4
 80052d4:	4618      	mov	r0, r3
 80052d6:	f7fe f909 	bl	80034ec <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	6a1b      	ldr	r3, [r3, #32]
 80052de:	68f8      	ldr	r0, [r7, #12]
 80052e0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80052e8:	f003 0304 	and.w	r3, r3, #4
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d02f      	beq.n	8005350 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	699b      	ldr	r3, [r3, #24]
 80052f4:	693a      	ldr	r2, [r7, #16]
 80052f6:	4413      	add	r3, r2
 80052f8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80052fa:	68ba      	ldr	r2, [r7, #8]
 80052fc:	693b      	ldr	r3, [r7, #16]
 80052fe:	429a      	cmp	r2, r3
 8005300:	d90e      	bls.n	8005320 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	68ba      	ldr	r2, [r7, #8]
 8005306:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	68fa      	ldr	r2, [r7, #12]
 800530c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800530e:	4b1a      	ldr	r3, [pc, #104]	@ (8005378 <prvSwitchTimerLists+0xc4>)
 8005310:	681a      	ldr	r2, [r3, #0]
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	3304      	adds	r3, #4
 8005316:	4619      	mov	r1, r3
 8005318:	4610      	mov	r0, r2
 800531a:	f7fe f8ae 	bl	800347a <vListInsert>
 800531e:	e017      	b.n	8005350 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005320:	2300      	movs	r3, #0
 8005322:	9300      	str	r3, [sp, #0]
 8005324:	2300      	movs	r3, #0
 8005326:	693a      	ldr	r2, [r7, #16]
 8005328:	2100      	movs	r1, #0
 800532a:	68f8      	ldr	r0, [r7, #12]
 800532c:	f7ff fd58 	bl	8004de0 <xTimerGenericCommand>
 8005330:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d10b      	bne.n	8005350 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8005338:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800533c:	f383 8811 	msr	BASEPRI, r3
 8005340:	f3bf 8f6f 	isb	sy
 8005344:	f3bf 8f4f 	dsb	sy
 8005348:	603b      	str	r3, [r7, #0]
}
 800534a:	bf00      	nop
 800534c:	bf00      	nop
 800534e:	e7fd      	b.n	800534c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005350:	4b09      	ldr	r3, [pc, #36]	@ (8005378 <prvSwitchTimerLists+0xc4>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d1b0      	bne.n	80052bc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800535a:	4b07      	ldr	r3, [pc, #28]	@ (8005378 <prvSwitchTimerLists+0xc4>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005360:	4b06      	ldr	r3, [pc, #24]	@ (800537c <prvSwitchTimerLists+0xc8>)
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4a04      	ldr	r2, [pc, #16]	@ (8005378 <prvSwitchTimerLists+0xc4>)
 8005366:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005368:	4a04      	ldr	r2, [pc, #16]	@ (800537c <prvSwitchTimerLists+0xc8>)
 800536a:	697b      	ldr	r3, [r7, #20]
 800536c:	6013      	str	r3, [r2, #0]
}
 800536e:	bf00      	nop
 8005370:	3718      	adds	r7, #24
 8005372:	46bd      	mov	sp, r7
 8005374:	bd80      	pop	{r7, pc}
 8005376:	bf00      	nop
 8005378:	20000ce4 	.word	0x20000ce4
 800537c:	20000ce8 	.word	0x20000ce8

08005380 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b082      	sub	sp, #8
 8005384:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005386:	f000 f96f 	bl	8005668 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800538a:	4b15      	ldr	r3, [pc, #84]	@ (80053e0 <prvCheckForValidListAndQueue+0x60>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d120      	bne.n	80053d4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005392:	4814      	ldr	r0, [pc, #80]	@ (80053e4 <prvCheckForValidListAndQueue+0x64>)
 8005394:	f7fe f820 	bl	80033d8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005398:	4813      	ldr	r0, [pc, #76]	@ (80053e8 <prvCheckForValidListAndQueue+0x68>)
 800539a:	f7fe f81d 	bl	80033d8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800539e:	4b13      	ldr	r3, [pc, #76]	@ (80053ec <prvCheckForValidListAndQueue+0x6c>)
 80053a0:	4a10      	ldr	r2, [pc, #64]	@ (80053e4 <prvCheckForValidListAndQueue+0x64>)
 80053a2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80053a4:	4b12      	ldr	r3, [pc, #72]	@ (80053f0 <prvCheckForValidListAndQueue+0x70>)
 80053a6:	4a10      	ldr	r2, [pc, #64]	@ (80053e8 <prvCheckForValidListAndQueue+0x68>)
 80053a8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80053aa:	2300      	movs	r3, #0
 80053ac:	9300      	str	r3, [sp, #0]
 80053ae:	4b11      	ldr	r3, [pc, #68]	@ (80053f4 <prvCheckForValidListAndQueue+0x74>)
 80053b0:	4a11      	ldr	r2, [pc, #68]	@ (80053f8 <prvCheckForValidListAndQueue+0x78>)
 80053b2:	2110      	movs	r1, #16
 80053b4:	200a      	movs	r0, #10
 80053b6:	f7fe f92d 	bl	8003614 <xQueueGenericCreateStatic>
 80053ba:	4603      	mov	r3, r0
 80053bc:	4a08      	ldr	r2, [pc, #32]	@ (80053e0 <prvCheckForValidListAndQueue+0x60>)
 80053be:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80053c0:	4b07      	ldr	r3, [pc, #28]	@ (80053e0 <prvCheckForValidListAndQueue+0x60>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d005      	beq.n	80053d4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80053c8:	4b05      	ldr	r3, [pc, #20]	@ (80053e0 <prvCheckForValidListAndQueue+0x60>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	490b      	ldr	r1, [pc, #44]	@ (80053fc <prvCheckForValidListAndQueue+0x7c>)
 80053ce:	4618      	mov	r0, r3
 80053d0:	f7fe fd52 	bl	8003e78 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80053d4:	f000 f97a 	bl	80056cc <vPortExitCritical>
}
 80053d8:	bf00      	nop
 80053da:	46bd      	mov	sp, r7
 80053dc:	bd80      	pop	{r7, pc}
 80053de:	bf00      	nop
 80053e0:	20000cec 	.word	0x20000cec
 80053e4:	20000cbc 	.word	0x20000cbc
 80053e8:	20000cd0 	.word	0x20000cd0
 80053ec:	20000ce4 	.word	0x20000ce4
 80053f0:	20000ce8 	.word	0x20000ce8
 80053f4:	20000d98 	.word	0x20000d98
 80053f8:	20000cf8 	.word	0x20000cf8
 80053fc:	08005d4c 	.word	0x08005d4c

08005400 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005400:	b480      	push	{r7}
 8005402:	b085      	sub	sp, #20
 8005404:	af00      	add	r7, sp, #0
 8005406:	60f8      	str	r0, [r7, #12]
 8005408:	60b9      	str	r1, [r7, #8]
 800540a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	3b04      	subs	r3, #4
 8005410:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005418:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	3b04      	subs	r3, #4
 800541e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	f023 0201 	bic.w	r2, r3, #1
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	3b04      	subs	r3, #4
 800542e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005430:	4a0c      	ldr	r2, [pc, #48]	@ (8005464 <pxPortInitialiseStack+0x64>)
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	3b14      	subs	r3, #20
 800543a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800543c:	687a      	ldr	r2, [r7, #4]
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	3b04      	subs	r3, #4
 8005446:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	f06f 0202 	mvn.w	r2, #2
 800544e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	3b20      	subs	r3, #32
 8005454:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005456:	68fb      	ldr	r3, [r7, #12]
}
 8005458:	4618      	mov	r0, r3
 800545a:	3714      	adds	r7, #20
 800545c:	46bd      	mov	sp, r7
 800545e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005462:	4770      	bx	lr
 8005464:	08005469 	.word	0x08005469

08005468 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005468:	b480      	push	{r7}
 800546a:	b085      	sub	sp, #20
 800546c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800546e:	2300      	movs	r3, #0
 8005470:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005472:	4b13      	ldr	r3, [pc, #76]	@ (80054c0 <prvTaskExitError+0x58>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f1b3 3fff 	cmp.w	r3, #4294967295
 800547a:	d00b      	beq.n	8005494 <prvTaskExitError+0x2c>
	__asm volatile
 800547c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005480:	f383 8811 	msr	BASEPRI, r3
 8005484:	f3bf 8f6f 	isb	sy
 8005488:	f3bf 8f4f 	dsb	sy
 800548c:	60fb      	str	r3, [r7, #12]
}
 800548e:	bf00      	nop
 8005490:	bf00      	nop
 8005492:	e7fd      	b.n	8005490 <prvTaskExitError+0x28>
	__asm volatile
 8005494:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005498:	f383 8811 	msr	BASEPRI, r3
 800549c:	f3bf 8f6f 	isb	sy
 80054a0:	f3bf 8f4f 	dsb	sy
 80054a4:	60bb      	str	r3, [r7, #8]
}
 80054a6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80054a8:	bf00      	nop
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d0fc      	beq.n	80054aa <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80054b0:	bf00      	nop
 80054b2:	bf00      	nop
 80054b4:	3714      	adds	r7, #20
 80054b6:	46bd      	mov	sp, r7
 80054b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054bc:	4770      	bx	lr
 80054be:	bf00      	nop
 80054c0:	2000000c 	.word	0x2000000c
	...

080054d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80054d0:	4b07      	ldr	r3, [pc, #28]	@ (80054f0 <pxCurrentTCBConst2>)
 80054d2:	6819      	ldr	r1, [r3, #0]
 80054d4:	6808      	ldr	r0, [r1, #0]
 80054d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054da:	f380 8809 	msr	PSP, r0
 80054de:	f3bf 8f6f 	isb	sy
 80054e2:	f04f 0000 	mov.w	r0, #0
 80054e6:	f380 8811 	msr	BASEPRI, r0
 80054ea:	4770      	bx	lr
 80054ec:	f3af 8000 	nop.w

080054f0 <pxCurrentTCBConst2>:
 80054f0:	200007bc 	.word	0x200007bc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80054f4:	bf00      	nop
 80054f6:	bf00      	nop

080054f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80054f8:	4808      	ldr	r0, [pc, #32]	@ (800551c <prvPortStartFirstTask+0x24>)
 80054fa:	6800      	ldr	r0, [r0, #0]
 80054fc:	6800      	ldr	r0, [r0, #0]
 80054fe:	f380 8808 	msr	MSP, r0
 8005502:	f04f 0000 	mov.w	r0, #0
 8005506:	f380 8814 	msr	CONTROL, r0
 800550a:	b662      	cpsie	i
 800550c:	b661      	cpsie	f
 800550e:	f3bf 8f4f 	dsb	sy
 8005512:	f3bf 8f6f 	isb	sy
 8005516:	df00      	svc	0
 8005518:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800551a:	bf00      	nop
 800551c:	e000ed08 	.word	0xe000ed08

08005520 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b086      	sub	sp, #24
 8005524:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005526:	4b47      	ldr	r3, [pc, #284]	@ (8005644 <xPortStartScheduler+0x124>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4a47      	ldr	r2, [pc, #284]	@ (8005648 <xPortStartScheduler+0x128>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d10b      	bne.n	8005548 <xPortStartScheduler+0x28>
	__asm volatile
 8005530:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005534:	f383 8811 	msr	BASEPRI, r3
 8005538:	f3bf 8f6f 	isb	sy
 800553c:	f3bf 8f4f 	dsb	sy
 8005540:	613b      	str	r3, [r7, #16]
}
 8005542:	bf00      	nop
 8005544:	bf00      	nop
 8005546:	e7fd      	b.n	8005544 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005548:	4b3e      	ldr	r3, [pc, #248]	@ (8005644 <xPortStartScheduler+0x124>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4a3f      	ldr	r2, [pc, #252]	@ (800564c <xPortStartScheduler+0x12c>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d10b      	bne.n	800556a <xPortStartScheduler+0x4a>
	__asm volatile
 8005552:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005556:	f383 8811 	msr	BASEPRI, r3
 800555a:	f3bf 8f6f 	isb	sy
 800555e:	f3bf 8f4f 	dsb	sy
 8005562:	60fb      	str	r3, [r7, #12]
}
 8005564:	bf00      	nop
 8005566:	bf00      	nop
 8005568:	e7fd      	b.n	8005566 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800556a:	4b39      	ldr	r3, [pc, #228]	@ (8005650 <xPortStartScheduler+0x130>)
 800556c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800556e:	697b      	ldr	r3, [r7, #20]
 8005570:	781b      	ldrb	r3, [r3, #0]
 8005572:	b2db      	uxtb	r3, r3
 8005574:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005576:	697b      	ldr	r3, [r7, #20]
 8005578:	22ff      	movs	r2, #255	@ 0xff
 800557a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800557c:	697b      	ldr	r3, [r7, #20]
 800557e:	781b      	ldrb	r3, [r3, #0]
 8005580:	b2db      	uxtb	r3, r3
 8005582:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005584:	78fb      	ldrb	r3, [r7, #3]
 8005586:	b2db      	uxtb	r3, r3
 8005588:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800558c:	b2da      	uxtb	r2, r3
 800558e:	4b31      	ldr	r3, [pc, #196]	@ (8005654 <xPortStartScheduler+0x134>)
 8005590:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005592:	4b31      	ldr	r3, [pc, #196]	@ (8005658 <xPortStartScheduler+0x138>)
 8005594:	2207      	movs	r2, #7
 8005596:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005598:	e009      	b.n	80055ae <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800559a:	4b2f      	ldr	r3, [pc, #188]	@ (8005658 <xPortStartScheduler+0x138>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	3b01      	subs	r3, #1
 80055a0:	4a2d      	ldr	r2, [pc, #180]	@ (8005658 <xPortStartScheduler+0x138>)
 80055a2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80055a4:	78fb      	ldrb	r3, [r7, #3]
 80055a6:	b2db      	uxtb	r3, r3
 80055a8:	005b      	lsls	r3, r3, #1
 80055aa:	b2db      	uxtb	r3, r3
 80055ac:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80055ae:	78fb      	ldrb	r3, [r7, #3]
 80055b0:	b2db      	uxtb	r3, r3
 80055b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055b6:	2b80      	cmp	r3, #128	@ 0x80
 80055b8:	d0ef      	beq.n	800559a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80055ba:	4b27      	ldr	r3, [pc, #156]	@ (8005658 <xPortStartScheduler+0x138>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f1c3 0307 	rsb	r3, r3, #7
 80055c2:	2b04      	cmp	r3, #4
 80055c4:	d00b      	beq.n	80055de <xPortStartScheduler+0xbe>
	__asm volatile
 80055c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055ca:	f383 8811 	msr	BASEPRI, r3
 80055ce:	f3bf 8f6f 	isb	sy
 80055d2:	f3bf 8f4f 	dsb	sy
 80055d6:	60bb      	str	r3, [r7, #8]
}
 80055d8:	bf00      	nop
 80055da:	bf00      	nop
 80055dc:	e7fd      	b.n	80055da <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80055de:	4b1e      	ldr	r3, [pc, #120]	@ (8005658 <xPortStartScheduler+0x138>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	021b      	lsls	r3, r3, #8
 80055e4:	4a1c      	ldr	r2, [pc, #112]	@ (8005658 <xPortStartScheduler+0x138>)
 80055e6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80055e8:	4b1b      	ldr	r3, [pc, #108]	@ (8005658 <xPortStartScheduler+0x138>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80055f0:	4a19      	ldr	r2, [pc, #100]	@ (8005658 <xPortStartScheduler+0x138>)
 80055f2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	b2da      	uxtb	r2, r3
 80055f8:	697b      	ldr	r3, [r7, #20]
 80055fa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80055fc:	4b17      	ldr	r3, [pc, #92]	@ (800565c <xPortStartScheduler+0x13c>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	4a16      	ldr	r2, [pc, #88]	@ (800565c <xPortStartScheduler+0x13c>)
 8005602:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005606:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005608:	4b14      	ldr	r3, [pc, #80]	@ (800565c <xPortStartScheduler+0x13c>)
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	4a13      	ldr	r2, [pc, #76]	@ (800565c <xPortStartScheduler+0x13c>)
 800560e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005612:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005614:	f000 f8da 	bl	80057cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005618:	4b11      	ldr	r3, [pc, #68]	@ (8005660 <xPortStartScheduler+0x140>)
 800561a:	2200      	movs	r2, #0
 800561c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800561e:	f000 f8f9 	bl	8005814 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005622:	4b10      	ldr	r3, [pc, #64]	@ (8005664 <xPortStartScheduler+0x144>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a0f      	ldr	r2, [pc, #60]	@ (8005664 <xPortStartScheduler+0x144>)
 8005628:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800562c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800562e:	f7ff ff63 	bl	80054f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005632:	f7ff f839 	bl	80046a8 <vTaskSwitchContext>
	prvTaskExitError();
 8005636:	f7ff ff17 	bl	8005468 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800563a:	2300      	movs	r3, #0
}
 800563c:	4618      	mov	r0, r3
 800563e:	3718      	adds	r7, #24
 8005640:	46bd      	mov	sp, r7
 8005642:	bd80      	pop	{r7, pc}
 8005644:	e000ed00 	.word	0xe000ed00
 8005648:	410fc271 	.word	0x410fc271
 800564c:	410fc270 	.word	0x410fc270
 8005650:	e000e400 	.word	0xe000e400
 8005654:	20000de8 	.word	0x20000de8
 8005658:	20000dec 	.word	0x20000dec
 800565c:	e000ed20 	.word	0xe000ed20
 8005660:	2000000c 	.word	0x2000000c
 8005664:	e000ef34 	.word	0xe000ef34

08005668 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005668:	b480      	push	{r7}
 800566a:	b083      	sub	sp, #12
 800566c:	af00      	add	r7, sp, #0
	__asm volatile
 800566e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005672:	f383 8811 	msr	BASEPRI, r3
 8005676:	f3bf 8f6f 	isb	sy
 800567a:	f3bf 8f4f 	dsb	sy
 800567e:	607b      	str	r3, [r7, #4]
}
 8005680:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005682:	4b10      	ldr	r3, [pc, #64]	@ (80056c4 <vPortEnterCritical+0x5c>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	3301      	adds	r3, #1
 8005688:	4a0e      	ldr	r2, [pc, #56]	@ (80056c4 <vPortEnterCritical+0x5c>)
 800568a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800568c:	4b0d      	ldr	r3, [pc, #52]	@ (80056c4 <vPortEnterCritical+0x5c>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	2b01      	cmp	r3, #1
 8005692:	d110      	bne.n	80056b6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005694:	4b0c      	ldr	r3, [pc, #48]	@ (80056c8 <vPortEnterCritical+0x60>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	b2db      	uxtb	r3, r3
 800569a:	2b00      	cmp	r3, #0
 800569c:	d00b      	beq.n	80056b6 <vPortEnterCritical+0x4e>
	__asm volatile
 800569e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056a2:	f383 8811 	msr	BASEPRI, r3
 80056a6:	f3bf 8f6f 	isb	sy
 80056aa:	f3bf 8f4f 	dsb	sy
 80056ae:	603b      	str	r3, [r7, #0]
}
 80056b0:	bf00      	nop
 80056b2:	bf00      	nop
 80056b4:	e7fd      	b.n	80056b2 <vPortEnterCritical+0x4a>
	}
}
 80056b6:	bf00      	nop
 80056b8:	370c      	adds	r7, #12
 80056ba:	46bd      	mov	sp, r7
 80056bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c0:	4770      	bx	lr
 80056c2:	bf00      	nop
 80056c4:	2000000c 	.word	0x2000000c
 80056c8:	e000ed04 	.word	0xe000ed04

080056cc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80056cc:	b480      	push	{r7}
 80056ce:	b083      	sub	sp, #12
 80056d0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80056d2:	4b12      	ldr	r3, [pc, #72]	@ (800571c <vPortExitCritical+0x50>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d10b      	bne.n	80056f2 <vPortExitCritical+0x26>
	__asm volatile
 80056da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056de:	f383 8811 	msr	BASEPRI, r3
 80056e2:	f3bf 8f6f 	isb	sy
 80056e6:	f3bf 8f4f 	dsb	sy
 80056ea:	607b      	str	r3, [r7, #4]
}
 80056ec:	bf00      	nop
 80056ee:	bf00      	nop
 80056f0:	e7fd      	b.n	80056ee <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80056f2:	4b0a      	ldr	r3, [pc, #40]	@ (800571c <vPortExitCritical+0x50>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	3b01      	subs	r3, #1
 80056f8:	4a08      	ldr	r2, [pc, #32]	@ (800571c <vPortExitCritical+0x50>)
 80056fa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80056fc:	4b07      	ldr	r3, [pc, #28]	@ (800571c <vPortExitCritical+0x50>)
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d105      	bne.n	8005710 <vPortExitCritical+0x44>
 8005704:	2300      	movs	r3, #0
 8005706:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	f383 8811 	msr	BASEPRI, r3
}
 800570e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005710:	bf00      	nop
 8005712:	370c      	adds	r7, #12
 8005714:	46bd      	mov	sp, r7
 8005716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571a:	4770      	bx	lr
 800571c:	2000000c 	.word	0x2000000c

08005720 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005720:	f3ef 8009 	mrs	r0, PSP
 8005724:	f3bf 8f6f 	isb	sy
 8005728:	4b15      	ldr	r3, [pc, #84]	@ (8005780 <pxCurrentTCBConst>)
 800572a:	681a      	ldr	r2, [r3, #0]
 800572c:	f01e 0f10 	tst.w	lr, #16
 8005730:	bf08      	it	eq
 8005732:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005736:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800573a:	6010      	str	r0, [r2, #0]
 800573c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005740:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005744:	f380 8811 	msr	BASEPRI, r0
 8005748:	f3bf 8f4f 	dsb	sy
 800574c:	f3bf 8f6f 	isb	sy
 8005750:	f7fe ffaa 	bl	80046a8 <vTaskSwitchContext>
 8005754:	f04f 0000 	mov.w	r0, #0
 8005758:	f380 8811 	msr	BASEPRI, r0
 800575c:	bc09      	pop	{r0, r3}
 800575e:	6819      	ldr	r1, [r3, #0]
 8005760:	6808      	ldr	r0, [r1, #0]
 8005762:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005766:	f01e 0f10 	tst.w	lr, #16
 800576a:	bf08      	it	eq
 800576c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005770:	f380 8809 	msr	PSP, r0
 8005774:	f3bf 8f6f 	isb	sy
 8005778:	4770      	bx	lr
 800577a:	bf00      	nop
 800577c:	f3af 8000 	nop.w

08005780 <pxCurrentTCBConst>:
 8005780:	200007bc 	.word	0x200007bc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005784:	bf00      	nop
 8005786:	bf00      	nop

08005788 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b082      	sub	sp, #8
 800578c:	af00      	add	r7, sp, #0
	__asm volatile
 800578e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005792:	f383 8811 	msr	BASEPRI, r3
 8005796:	f3bf 8f6f 	isb	sy
 800579a:	f3bf 8f4f 	dsb	sy
 800579e:	607b      	str	r3, [r7, #4]
}
 80057a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80057a2:	f7fe fec7 	bl	8004534 <xTaskIncrementTick>
 80057a6:	4603      	mov	r3, r0
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d003      	beq.n	80057b4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80057ac:	4b06      	ldr	r3, [pc, #24]	@ (80057c8 <xPortSysTickHandler+0x40>)
 80057ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80057b2:	601a      	str	r2, [r3, #0]
 80057b4:	2300      	movs	r3, #0
 80057b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	f383 8811 	msr	BASEPRI, r3
}
 80057be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80057c0:	bf00      	nop
 80057c2:	3708      	adds	r7, #8
 80057c4:	46bd      	mov	sp, r7
 80057c6:	bd80      	pop	{r7, pc}
 80057c8:	e000ed04 	.word	0xe000ed04

080057cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80057cc:	b480      	push	{r7}
 80057ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80057d0:	4b0b      	ldr	r3, [pc, #44]	@ (8005800 <vPortSetupTimerInterrupt+0x34>)
 80057d2:	2200      	movs	r2, #0
 80057d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80057d6:	4b0b      	ldr	r3, [pc, #44]	@ (8005804 <vPortSetupTimerInterrupt+0x38>)
 80057d8:	2200      	movs	r2, #0
 80057da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80057dc:	4b0a      	ldr	r3, [pc, #40]	@ (8005808 <vPortSetupTimerInterrupt+0x3c>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4a0a      	ldr	r2, [pc, #40]	@ (800580c <vPortSetupTimerInterrupt+0x40>)
 80057e2:	fba2 2303 	umull	r2, r3, r2, r3
 80057e6:	099b      	lsrs	r3, r3, #6
 80057e8:	4a09      	ldr	r2, [pc, #36]	@ (8005810 <vPortSetupTimerInterrupt+0x44>)
 80057ea:	3b01      	subs	r3, #1
 80057ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80057ee:	4b04      	ldr	r3, [pc, #16]	@ (8005800 <vPortSetupTimerInterrupt+0x34>)
 80057f0:	2207      	movs	r2, #7
 80057f2:	601a      	str	r2, [r3, #0]
}
 80057f4:	bf00      	nop
 80057f6:	46bd      	mov	sp, r7
 80057f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fc:	4770      	bx	lr
 80057fe:	bf00      	nop
 8005800:	e000e010 	.word	0xe000e010
 8005804:	e000e018 	.word	0xe000e018
 8005808:	20000000 	.word	0x20000000
 800580c:	10624dd3 	.word	0x10624dd3
 8005810:	e000e014 	.word	0xe000e014

08005814 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005814:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005824 <vPortEnableVFP+0x10>
 8005818:	6801      	ldr	r1, [r0, #0]
 800581a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800581e:	6001      	str	r1, [r0, #0]
 8005820:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005822:	bf00      	nop
 8005824:	e000ed88 	.word	0xe000ed88

08005828 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005828:	b480      	push	{r7}
 800582a:	b085      	sub	sp, #20
 800582c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800582e:	f3ef 8305 	mrs	r3, IPSR
 8005832:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	2b0f      	cmp	r3, #15
 8005838:	d915      	bls.n	8005866 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800583a:	4a18      	ldr	r2, [pc, #96]	@ (800589c <vPortValidateInterruptPriority+0x74>)
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	4413      	add	r3, r2
 8005840:	781b      	ldrb	r3, [r3, #0]
 8005842:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005844:	4b16      	ldr	r3, [pc, #88]	@ (80058a0 <vPortValidateInterruptPriority+0x78>)
 8005846:	781b      	ldrb	r3, [r3, #0]
 8005848:	7afa      	ldrb	r2, [r7, #11]
 800584a:	429a      	cmp	r2, r3
 800584c:	d20b      	bcs.n	8005866 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800584e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005852:	f383 8811 	msr	BASEPRI, r3
 8005856:	f3bf 8f6f 	isb	sy
 800585a:	f3bf 8f4f 	dsb	sy
 800585e:	607b      	str	r3, [r7, #4]
}
 8005860:	bf00      	nop
 8005862:	bf00      	nop
 8005864:	e7fd      	b.n	8005862 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005866:	4b0f      	ldr	r3, [pc, #60]	@ (80058a4 <vPortValidateInterruptPriority+0x7c>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800586e:	4b0e      	ldr	r3, [pc, #56]	@ (80058a8 <vPortValidateInterruptPriority+0x80>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	429a      	cmp	r2, r3
 8005874:	d90b      	bls.n	800588e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8005876:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800587a:	f383 8811 	msr	BASEPRI, r3
 800587e:	f3bf 8f6f 	isb	sy
 8005882:	f3bf 8f4f 	dsb	sy
 8005886:	603b      	str	r3, [r7, #0]
}
 8005888:	bf00      	nop
 800588a:	bf00      	nop
 800588c:	e7fd      	b.n	800588a <vPortValidateInterruptPriority+0x62>
	}
 800588e:	bf00      	nop
 8005890:	3714      	adds	r7, #20
 8005892:	46bd      	mov	sp, r7
 8005894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005898:	4770      	bx	lr
 800589a:	bf00      	nop
 800589c:	e000e3f0 	.word	0xe000e3f0
 80058a0:	20000de8 	.word	0x20000de8
 80058a4:	e000ed0c 	.word	0xe000ed0c
 80058a8:	20000dec 	.word	0x20000dec

080058ac <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b08a      	sub	sp, #40	@ 0x28
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80058b4:	2300      	movs	r3, #0
 80058b6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80058b8:	f7fe fd80 	bl	80043bc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80058bc:	4b5c      	ldr	r3, [pc, #368]	@ (8005a30 <pvPortMalloc+0x184>)
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d101      	bne.n	80058c8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80058c4:	f000 f924 	bl	8005b10 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80058c8:	4b5a      	ldr	r3, [pc, #360]	@ (8005a34 <pvPortMalloc+0x188>)
 80058ca:	681a      	ldr	r2, [r3, #0]
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	4013      	ands	r3, r2
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	f040 8095 	bne.w	8005a00 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d01e      	beq.n	800591a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80058dc:	2208      	movs	r2, #8
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	4413      	add	r3, r2
 80058e2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	f003 0307 	and.w	r3, r3, #7
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d015      	beq.n	800591a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	f023 0307 	bic.w	r3, r3, #7
 80058f4:	3308      	adds	r3, #8
 80058f6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	f003 0307 	and.w	r3, r3, #7
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d00b      	beq.n	800591a <pvPortMalloc+0x6e>
	__asm volatile
 8005902:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005906:	f383 8811 	msr	BASEPRI, r3
 800590a:	f3bf 8f6f 	isb	sy
 800590e:	f3bf 8f4f 	dsb	sy
 8005912:	617b      	str	r3, [r7, #20]
}
 8005914:	bf00      	nop
 8005916:	bf00      	nop
 8005918:	e7fd      	b.n	8005916 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d06f      	beq.n	8005a00 <pvPortMalloc+0x154>
 8005920:	4b45      	ldr	r3, [pc, #276]	@ (8005a38 <pvPortMalloc+0x18c>)
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	687a      	ldr	r2, [r7, #4]
 8005926:	429a      	cmp	r2, r3
 8005928:	d86a      	bhi.n	8005a00 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800592a:	4b44      	ldr	r3, [pc, #272]	@ (8005a3c <pvPortMalloc+0x190>)
 800592c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800592e:	4b43      	ldr	r3, [pc, #268]	@ (8005a3c <pvPortMalloc+0x190>)
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005934:	e004      	b.n	8005940 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005938:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800593a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005940:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005942:	685b      	ldr	r3, [r3, #4]
 8005944:	687a      	ldr	r2, [r7, #4]
 8005946:	429a      	cmp	r2, r3
 8005948:	d903      	bls.n	8005952 <pvPortMalloc+0xa6>
 800594a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d1f1      	bne.n	8005936 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005952:	4b37      	ldr	r3, [pc, #220]	@ (8005a30 <pvPortMalloc+0x184>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005958:	429a      	cmp	r2, r3
 800595a:	d051      	beq.n	8005a00 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800595c:	6a3b      	ldr	r3, [r7, #32]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	2208      	movs	r2, #8
 8005962:	4413      	add	r3, r2
 8005964:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005968:	681a      	ldr	r2, [r3, #0]
 800596a:	6a3b      	ldr	r3, [r7, #32]
 800596c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800596e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005970:	685a      	ldr	r2, [r3, #4]
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	1ad2      	subs	r2, r2, r3
 8005976:	2308      	movs	r3, #8
 8005978:	005b      	lsls	r3, r3, #1
 800597a:	429a      	cmp	r2, r3
 800597c:	d920      	bls.n	80059c0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800597e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	4413      	add	r3, r2
 8005984:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005986:	69bb      	ldr	r3, [r7, #24]
 8005988:	f003 0307 	and.w	r3, r3, #7
 800598c:	2b00      	cmp	r3, #0
 800598e:	d00b      	beq.n	80059a8 <pvPortMalloc+0xfc>
	__asm volatile
 8005990:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005994:	f383 8811 	msr	BASEPRI, r3
 8005998:	f3bf 8f6f 	isb	sy
 800599c:	f3bf 8f4f 	dsb	sy
 80059a0:	613b      	str	r3, [r7, #16]
}
 80059a2:	bf00      	nop
 80059a4:	bf00      	nop
 80059a6:	e7fd      	b.n	80059a4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80059a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059aa:	685a      	ldr	r2, [r3, #4]
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	1ad2      	subs	r2, r2, r3
 80059b0:	69bb      	ldr	r3, [r7, #24]
 80059b2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80059b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059b6:	687a      	ldr	r2, [r7, #4]
 80059b8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80059ba:	69b8      	ldr	r0, [r7, #24]
 80059bc:	f000 f90a 	bl	8005bd4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80059c0:	4b1d      	ldr	r3, [pc, #116]	@ (8005a38 <pvPortMalloc+0x18c>)
 80059c2:	681a      	ldr	r2, [r3, #0]
 80059c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059c6:	685b      	ldr	r3, [r3, #4]
 80059c8:	1ad3      	subs	r3, r2, r3
 80059ca:	4a1b      	ldr	r2, [pc, #108]	@ (8005a38 <pvPortMalloc+0x18c>)
 80059cc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80059ce:	4b1a      	ldr	r3, [pc, #104]	@ (8005a38 <pvPortMalloc+0x18c>)
 80059d0:	681a      	ldr	r2, [r3, #0]
 80059d2:	4b1b      	ldr	r3, [pc, #108]	@ (8005a40 <pvPortMalloc+0x194>)
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	429a      	cmp	r2, r3
 80059d8:	d203      	bcs.n	80059e2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80059da:	4b17      	ldr	r3, [pc, #92]	@ (8005a38 <pvPortMalloc+0x18c>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	4a18      	ldr	r2, [pc, #96]	@ (8005a40 <pvPortMalloc+0x194>)
 80059e0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80059e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059e4:	685a      	ldr	r2, [r3, #4]
 80059e6:	4b13      	ldr	r3, [pc, #76]	@ (8005a34 <pvPortMalloc+0x188>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	431a      	orrs	r2, r3
 80059ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059ee:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80059f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059f2:	2200      	movs	r2, #0
 80059f4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80059f6:	4b13      	ldr	r3, [pc, #76]	@ (8005a44 <pvPortMalloc+0x198>)
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	3301      	adds	r3, #1
 80059fc:	4a11      	ldr	r2, [pc, #68]	@ (8005a44 <pvPortMalloc+0x198>)
 80059fe:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005a00:	f7fe fcea 	bl	80043d8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005a04:	69fb      	ldr	r3, [r7, #28]
 8005a06:	f003 0307 	and.w	r3, r3, #7
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d00b      	beq.n	8005a26 <pvPortMalloc+0x17a>
	__asm volatile
 8005a0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a12:	f383 8811 	msr	BASEPRI, r3
 8005a16:	f3bf 8f6f 	isb	sy
 8005a1a:	f3bf 8f4f 	dsb	sy
 8005a1e:	60fb      	str	r3, [r7, #12]
}
 8005a20:	bf00      	nop
 8005a22:	bf00      	nop
 8005a24:	e7fd      	b.n	8005a22 <pvPortMalloc+0x176>
	return pvReturn;
 8005a26:	69fb      	ldr	r3, [r7, #28]
}
 8005a28:	4618      	mov	r0, r3
 8005a2a:	3728      	adds	r7, #40	@ 0x28
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	bd80      	pop	{r7, pc}
 8005a30:	200019b0 	.word	0x200019b0
 8005a34:	200019c4 	.word	0x200019c4
 8005a38:	200019b4 	.word	0x200019b4
 8005a3c:	200019a8 	.word	0x200019a8
 8005a40:	200019b8 	.word	0x200019b8
 8005a44:	200019bc 	.word	0x200019bc

08005a48 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b086      	sub	sp, #24
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d04f      	beq.n	8005afa <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005a5a:	2308      	movs	r3, #8
 8005a5c:	425b      	negs	r3, r3
 8005a5e:	697a      	ldr	r2, [r7, #20]
 8005a60:	4413      	add	r3, r2
 8005a62:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005a64:	697b      	ldr	r3, [r7, #20]
 8005a66:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005a68:	693b      	ldr	r3, [r7, #16]
 8005a6a:	685a      	ldr	r2, [r3, #4]
 8005a6c:	4b25      	ldr	r3, [pc, #148]	@ (8005b04 <vPortFree+0xbc>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4013      	ands	r3, r2
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d10b      	bne.n	8005a8e <vPortFree+0x46>
	__asm volatile
 8005a76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a7a:	f383 8811 	msr	BASEPRI, r3
 8005a7e:	f3bf 8f6f 	isb	sy
 8005a82:	f3bf 8f4f 	dsb	sy
 8005a86:	60fb      	str	r3, [r7, #12]
}
 8005a88:	bf00      	nop
 8005a8a:	bf00      	nop
 8005a8c:	e7fd      	b.n	8005a8a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005a8e:	693b      	ldr	r3, [r7, #16]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d00b      	beq.n	8005aae <vPortFree+0x66>
	__asm volatile
 8005a96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a9a:	f383 8811 	msr	BASEPRI, r3
 8005a9e:	f3bf 8f6f 	isb	sy
 8005aa2:	f3bf 8f4f 	dsb	sy
 8005aa6:	60bb      	str	r3, [r7, #8]
}
 8005aa8:	bf00      	nop
 8005aaa:	bf00      	nop
 8005aac:	e7fd      	b.n	8005aaa <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005aae:	693b      	ldr	r3, [r7, #16]
 8005ab0:	685a      	ldr	r2, [r3, #4]
 8005ab2:	4b14      	ldr	r3, [pc, #80]	@ (8005b04 <vPortFree+0xbc>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	4013      	ands	r3, r2
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d01e      	beq.n	8005afa <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005abc:	693b      	ldr	r3, [r7, #16]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d11a      	bne.n	8005afa <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005ac4:	693b      	ldr	r3, [r7, #16]
 8005ac6:	685a      	ldr	r2, [r3, #4]
 8005ac8:	4b0e      	ldr	r3, [pc, #56]	@ (8005b04 <vPortFree+0xbc>)
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	43db      	mvns	r3, r3
 8005ace:	401a      	ands	r2, r3
 8005ad0:	693b      	ldr	r3, [r7, #16]
 8005ad2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005ad4:	f7fe fc72 	bl	80043bc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005ad8:	693b      	ldr	r3, [r7, #16]
 8005ada:	685a      	ldr	r2, [r3, #4]
 8005adc:	4b0a      	ldr	r3, [pc, #40]	@ (8005b08 <vPortFree+0xc0>)
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4413      	add	r3, r2
 8005ae2:	4a09      	ldr	r2, [pc, #36]	@ (8005b08 <vPortFree+0xc0>)
 8005ae4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005ae6:	6938      	ldr	r0, [r7, #16]
 8005ae8:	f000 f874 	bl	8005bd4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005aec:	4b07      	ldr	r3, [pc, #28]	@ (8005b0c <vPortFree+0xc4>)
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	3301      	adds	r3, #1
 8005af2:	4a06      	ldr	r2, [pc, #24]	@ (8005b0c <vPortFree+0xc4>)
 8005af4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005af6:	f7fe fc6f 	bl	80043d8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005afa:	bf00      	nop
 8005afc:	3718      	adds	r7, #24
 8005afe:	46bd      	mov	sp, r7
 8005b00:	bd80      	pop	{r7, pc}
 8005b02:	bf00      	nop
 8005b04:	200019c4 	.word	0x200019c4
 8005b08:	200019b4 	.word	0x200019b4
 8005b0c:	200019c0 	.word	0x200019c0

08005b10 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005b10:	b480      	push	{r7}
 8005b12:	b085      	sub	sp, #20
 8005b14:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005b16:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8005b1a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005b1c:	4b27      	ldr	r3, [pc, #156]	@ (8005bbc <prvHeapInit+0xac>)
 8005b1e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	f003 0307 	and.w	r3, r3, #7
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d00c      	beq.n	8005b44 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	3307      	adds	r3, #7
 8005b2e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	f023 0307 	bic.w	r3, r3, #7
 8005b36:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005b38:	68ba      	ldr	r2, [r7, #8]
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	1ad3      	subs	r3, r2, r3
 8005b3e:	4a1f      	ldr	r2, [pc, #124]	@ (8005bbc <prvHeapInit+0xac>)
 8005b40:	4413      	add	r3, r2
 8005b42:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005b48:	4a1d      	ldr	r2, [pc, #116]	@ (8005bc0 <prvHeapInit+0xb0>)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005b4e:	4b1c      	ldr	r3, [pc, #112]	@ (8005bc0 <prvHeapInit+0xb0>)
 8005b50:	2200      	movs	r2, #0
 8005b52:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	68ba      	ldr	r2, [r7, #8]
 8005b58:	4413      	add	r3, r2
 8005b5a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005b5c:	2208      	movs	r2, #8
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	1a9b      	subs	r3, r3, r2
 8005b62:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	f023 0307 	bic.w	r3, r3, #7
 8005b6a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	4a15      	ldr	r2, [pc, #84]	@ (8005bc4 <prvHeapInit+0xb4>)
 8005b70:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005b72:	4b14      	ldr	r3, [pc, #80]	@ (8005bc4 <prvHeapInit+0xb4>)
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	2200      	movs	r2, #0
 8005b78:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005b7a:	4b12      	ldr	r3, [pc, #72]	@ (8005bc4 <prvHeapInit+0xb4>)
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	68fa      	ldr	r2, [r7, #12]
 8005b8a:	1ad2      	subs	r2, r2, r3
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005b90:	4b0c      	ldr	r3, [pc, #48]	@ (8005bc4 <prvHeapInit+0xb4>)
 8005b92:	681a      	ldr	r2, [r3, #0]
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	685b      	ldr	r3, [r3, #4]
 8005b9c:	4a0a      	ldr	r2, [pc, #40]	@ (8005bc8 <prvHeapInit+0xb8>)
 8005b9e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	685b      	ldr	r3, [r3, #4]
 8005ba4:	4a09      	ldr	r2, [pc, #36]	@ (8005bcc <prvHeapInit+0xbc>)
 8005ba6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005ba8:	4b09      	ldr	r3, [pc, #36]	@ (8005bd0 <prvHeapInit+0xc0>)
 8005baa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8005bae:	601a      	str	r2, [r3, #0]
}
 8005bb0:	bf00      	nop
 8005bb2:	3714      	adds	r7, #20
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bba:	4770      	bx	lr
 8005bbc:	20000df0 	.word	0x20000df0
 8005bc0:	200019a8 	.word	0x200019a8
 8005bc4:	200019b0 	.word	0x200019b0
 8005bc8:	200019b8 	.word	0x200019b8
 8005bcc:	200019b4 	.word	0x200019b4
 8005bd0:	200019c4 	.word	0x200019c4

08005bd4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005bd4:	b480      	push	{r7}
 8005bd6:	b085      	sub	sp, #20
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005bdc:	4b28      	ldr	r3, [pc, #160]	@ (8005c80 <prvInsertBlockIntoFreeList+0xac>)
 8005bde:	60fb      	str	r3, [r7, #12]
 8005be0:	e002      	b.n	8005be8 <prvInsertBlockIntoFreeList+0x14>
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	60fb      	str	r3, [r7, #12]
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	687a      	ldr	r2, [r7, #4]
 8005bee:	429a      	cmp	r2, r3
 8005bf0:	d8f7      	bhi.n	8005be2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	685b      	ldr	r3, [r3, #4]
 8005bfa:	68ba      	ldr	r2, [r7, #8]
 8005bfc:	4413      	add	r3, r2
 8005bfe:	687a      	ldr	r2, [r7, #4]
 8005c00:	429a      	cmp	r2, r3
 8005c02:	d108      	bne.n	8005c16 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	685a      	ldr	r2, [r3, #4]
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	685b      	ldr	r3, [r3, #4]
 8005c0c:	441a      	add	r2, r3
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	685b      	ldr	r3, [r3, #4]
 8005c1e:	68ba      	ldr	r2, [r7, #8]
 8005c20:	441a      	add	r2, r3
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	429a      	cmp	r2, r3
 8005c28:	d118      	bne.n	8005c5c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681a      	ldr	r2, [r3, #0]
 8005c2e:	4b15      	ldr	r3, [pc, #84]	@ (8005c84 <prvInsertBlockIntoFreeList+0xb0>)
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	429a      	cmp	r2, r3
 8005c34:	d00d      	beq.n	8005c52 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	685a      	ldr	r2, [r3, #4]
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	685b      	ldr	r3, [r3, #4]
 8005c40:	441a      	add	r2, r3
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	681a      	ldr	r2, [r3, #0]
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	601a      	str	r2, [r3, #0]
 8005c50:	e008      	b.n	8005c64 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005c52:	4b0c      	ldr	r3, [pc, #48]	@ (8005c84 <prvInsertBlockIntoFreeList+0xb0>)
 8005c54:	681a      	ldr	r2, [r3, #0]
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	601a      	str	r2, [r3, #0]
 8005c5a:	e003      	b.n	8005c64 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681a      	ldr	r2, [r3, #0]
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005c64:	68fa      	ldr	r2, [r7, #12]
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	429a      	cmp	r2, r3
 8005c6a:	d002      	beq.n	8005c72 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	687a      	ldr	r2, [r7, #4]
 8005c70:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005c72:	bf00      	nop
 8005c74:	3714      	adds	r7, #20
 8005c76:	46bd      	mov	sp, r7
 8005c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7c:	4770      	bx	lr
 8005c7e:	bf00      	nop
 8005c80:	200019a8 	.word	0x200019a8
 8005c84:	200019b0 	.word	0x200019b0

08005c88 <memset>:
 8005c88:	4402      	add	r2, r0
 8005c8a:	4603      	mov	r3, r0
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d100      	bne.n	8005c92 <memset+0xa>
 8005c90:	4770      	bx	lr
 8005c92:	f803 1b01 	strb.w	r1, [r3], #1
 8005c96:	e7f9      	b.n	8005c8c <memset+0x4>

08005c98 <__libc_init_array>:
 8005c98:	b570      	push	{r4, r5, r6, lr}
 8005c9a:	4d0d      	ldr	r5, [pc, #52]	@ (8005cd0 <__libc_init_array+0x38>)
 8005c9c:	4c0d      	ldr	r4, [pc, #52]	@ (8005cd4 <__libc_init_array+0x3c>)
 8005c9e:	1b64      	subs	r4, r4, r5
 8005ca0:	10a4      	asrs	r4, r4, #2
 8005ca2:	2600      	movs	r6, #0
 8005ca4:	42a6      	cmp	r6, r4
 8005ca6:	d109      	bne.n	8005cbc <__libc_init_array+0x24>
 8005ca8:	4d0b      	ldr	r5, [pc, #44]	@ (8005cd8 <__libc_init_array+0x40>)
 8005caa:	4c0c      	ldr	r4, [pc, #48]	@ (8005cdc <__libc_init_array+0x44>)
 8005cac:	f000 f826 	bl	8005cfc <_init>
 8005cb0:	1b64      	subs	r4, r4, r5
 8005cb2:	10a4      	asrs	r4, r4, #2
 8005cb4:	2600      	movs	r6, #0
 8005cb6:	42a6      	cmp	r6, r4
 8005cb8:	d105      	bne.n	8005cc6 <__libc_init_array+0x2e>
 8005cba:	bd70      	pop	{r4, r5, r6, pc}
 8005cbc:	f855 3b04 	ldr.w	r3, [r5], #4
 8005cc0:	4798      	blx	r3
 8005cc2:	3601      	adds	r6, #1
 8005cc4:	e7ee      	b.n	8005ca4 <__libc_init_array+0xc>
 8005cc6:	f855 3b04 	ldr.w	r3, [r5], #4
 8005cca:	4798      	blx	r3
 8005ccc:	3601      	adds	r6, #1
 8005cce:	e7f2      	b.n	8005cb6 <__libc_init_array+0x1e>
 8005cd0:	08005dec 	.word	0x08005dec
 8005cd4:	08005dec 	.word	0x08005dec
 8005cd8:	08005dec 	.word	0x08005dec
 8005cdc:	08005df0 	.word	0x08005df0

08005ce0 <memcpy>:
 8005ce0:	440a      	add	r2, r1
 8005ce2:	4291      	cmp	r1, r2
 8005ce4:	f100 33ff 	add.w	r3, r0, #4294967295
 8005ce8:	d100      	bne.n	8005cec <memcpy+0xc>
 8005cea:	4770      	bx	lr
 8005cec:	b510      	push	{r4, lr}
 8005cee:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005cf2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005cf6:	4291      	cmp	r1, r2
 8005cf8:	d1f9      	bne.n	8005cee <memcpy+0xe>
 8005cfa:	bd10      	pop	{r4, pc}

08005cfc <_init>:
 8005cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cfe:	bf00      	nop
 8005d00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d02:	bc08      	pop	{r3}
 8005d04:	469e      	mov	lr, r3
 8005d06:	4770      	bx	lr

08005d08 <_fini>:
 8005d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d0a:	bf00      	nop
 8005d0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d0e:	bc08      	pop	{r3}
 8005d10:	469e      	mov	lr, r3
 8005d12:	4770      	bx	lr
